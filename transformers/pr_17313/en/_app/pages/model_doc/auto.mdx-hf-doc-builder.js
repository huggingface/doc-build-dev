import{S as fkt,i as mkt,s as gkt,e as a,k as l,w as F,t as o,M as hkt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as pkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as CXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ukt(L){let g,v,p,m,u,d,h,Mo,mi,uf,rt,gi,hi,LA,_f,je,We,pi,yn,xA,Ln,xn,$A,ui,$n,kA,_i,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),LA=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),xA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),$A=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),kA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Y$=s(p);m=r(Y$,"NewModelConfig"),Y$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var K$=s(mi);uf=r(K$,"model_type"),K$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var Z$=s(gi);hi=r(Z$,'"new-model"'),Z$.forEach(t),LA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),xA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var ek=s(Ln);xn=r(ek,"PreTrainedModel"),ek.forEach(t),$A=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var vf=s(ui);$n=r(vf,"config_class"),vf.forEach(t),kA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var ok=s(_i);bf=r(ok,"NewModelConfig"),ok.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,uf),e(g,rt),e(g,gi),e(gi,hi),e(g,LA),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,pi),e(pi,yn),e(je,xA),e(je,Ln),e(Ln,xn),e(je,$A),e(je,ui),e(ui,$n),e(je,kA),e(je,_i),e(_i,bf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,u,d,h,Mo,mi,uf,rt,gi,hi,LA,_f,je,We,pi,yn,xA,Ln,xn,$A,ui,$n,kA,_i,bf,Ca,Qe,Ae,Y$,bi,K$,Z$,Eo,wa,ek,vf,ok,$Oe,vqe,vi,Ff,boe,SA,kOe,voe,SOe,Fqe,kn,ROe,Foe,POe,BOe,Toe,IOe,NOe,Tqe,RA,Mqe,rk,qOe,Eqe,Tf,Cqe,Fi,Mf,Moe,PA,jOe,Eoe,DOe,wqe,Co,BA,GOe,IA,OOe,tk,VOe,XOe,zOe,NA,WOe,Coe,QOe,HOe,UOe,Er,qA,JOe,woe,YOe,KOe,Ti,ZOe,Aoe,eVe,oVe,yoe,rVe,tVe,aVe,A,Ef,Loe,nVe,sVe,ak,lVe,iVe,dVe,Cf,xoe,cVe,fVe,nk,mVe,gVe,hVe,wf,$oe,pVe,uVe,sk,_Ve,bVe,vVe,Af,koe,FVe,TVe,lk,MVe,EVe,CVe,yf,Soe,wVe,AVe,ik,yVe,LVe,xVe,Lf,Roe,$Ve,kVe,dk,SVe,RVe,PVe,xf,Poe,BVe,IVe,ck,NVe,qVe,jVe,$f,Boe,DVe,GVe,fk,OVe,VVe,XVe,kf,Ioe,zVe,WVe,mk,QVe,HVe,UVe,Sf,Noe,JVe,YVe,gk,KVe,ZVe,eXe,Rf,qoe,oXe,rXe,hk,tXe,aXe,nXe,Pf,joe,sXe,lXe,pk,iXe,dXe,cXe,Bf,Doe,fXe,mXe,uk,gXe,hXe,pXe,If,Goe,uXe,_Xe,_k,bXe,vXe,FXe,Nf,Ooe,TXe,MXe,bk,EXe,CXe,wXe,qf,Voe,AXe,yXe,vk,LXe,xXe,$Xe,jf,Xoe,kXe,SXe,Fk,RXe,PXe,BXe,Df,zoe,IXe,NXe,Tk,qXe,jXe,DXe,Gf,Woe,GXe,OXe,Mk,VXe,XXe,zXe,Of,Qoe,WXe,QXe,Ek,HXe,UXe,JXe,Vf,Hoe,YXe,KXe,Ck,ZXe,eze,oze,Xf,Uoe,rze,tze,wk,aze,nze,sze,zf,Joe,lze,ize,Ak,dze,cze,fze,Wf,Yoe,mze,gze,yk,hze,pze,uze,Qf,Koe,_ze,bze,Lk,vze,Fze,Tze,Hf,Zoe,Mze,Eze,xk,Cze,wze,Aze,Uf,ere,yze,Lze,$k,xze,$ze,kze,Jf,ore,Sze,Rze,kk,Pze,Bze,Ize,Yf,rre,Nze,qze,Sk,jze,Dze,Gze,Kf,tre,Oze,Vze,Rk,Xze,zze,Wze,Zf,are,Qze,Hze,Pk,Uze,Jze,Yze,em,nre,Kze,Zze,Bk,eWe,oWe,rWe,om,sre,tWe,aWe,Ik,nWe,sWe,lWe,rm,lre,iWe,dWe,Nk,cWe,fWe,mWe,tm,ire,gWe,hWe,qk,pWe,uWe,_We,am,dre,bWe,vWe,jk,FWe,TWe,MWe,nm,cre,EWe,CWe,Dk,wWe,AWe,yWe,sm,fre,LWe,xWe,Gk,$We,kWe,SWe,lm,mre,RWe,PWe,Ok,BWe,IWe,NWe,im,gre,qWe,jWe,Vk,DWe,GWe,OWe,dm,hre,VWe,XWe,Xk,zWe,WWe,QWe,cm,pre,HWe,UWe,zk,JWe,YWe,KWe,fm,ure,ZWe,eQe,Wk,oQe,rQe,tQe,mm,_re,aQe,nQe,Qk,sQe,lQe,iQe,gm,bre,dQe,cQe,Hk,fQe,mQe,gQe,hm,vre,hQe,pQe,Uk,uQe,_Qe,bQe,pm,Fre,vQe,FQe,Jk,TQe,MQe,EQe,um,Tre,CQe,wQe,Yk,AQe,yQe,LQe,_m,Mre,xQe,$Qe,Kk,kQe,SQe,RQe,bm,Ere,PQe,BQe,Zk,IQe,NQe,qQe,vm,Cre,jQe,DQe,eS,GQe,OQe,VQe,Fm,wre,XQe,zQe,oS,WQe,QQe,HQe,Tm,Are,UQe,JQe,rS,YQe,KQe,ZQe,Mm,yre,eHe,oHe,tS,rHe,tHe,aHe,Em,Lre,nHe,sHe,aS,lHe,iHe,dHe,Cm,xre,cHe,fHe,nS,mHe,gHe,hHe,wm,$re,pHe,uHe,sS,_He,bHe,vHe,Am,kre,FHe,THe,lS,MHe,EHe,CHe,ym,Sre,wHe,AHe,iS,yHe,LHe,xHe,Lm,Rre,$He,kHe,dS,SHe,RHe,PHe,xm,Pre,BHe,IHe,cS,NHe,qHe,jHe,$m,Bre,DHe,GHe,fS,OHe,VHe,XHe,km,Ire,zHe,WHe,mS,QHe,HHe,UHe,Sm,Nre,JHe,YHe,gS,KHe,ZHe,eUe,Rm,qre,oUe,rUe,hS,tUe,aUe,nUe,Pm,jre,sUe,lUe,pS,iUe,dUe,cUe,Bm,Dre,fUe,mUe,uS,gUe,hUe,pUe,Im,Gre,uUe,_Ue,_S,bUe,vUe,FUe,Nm,Ore,TUe,MUe,bS,EUe,CUe,wUe,qm,Vre,AUe,yUe,vS,LUe,xUe,$Ue,jm,Xre,kUe,SUe,FS,RUe,PUe,BUe,Dm,zre,IUe,NUe,TS,qUe,jUe,DUe,Gm,Wre,GUe,OUe,MS,VUe,XUe,zUe,Om,Qre,WUe,QUe,ES,HUe,UUe,JUe,Vm,Hre,YUe,KUe,CS,ZUe,eJe,oJe,Xm,Ure,rJe,tJe,wS,aJe,nJe,sJe,zm,Jre,lJe,iJe,AS,dJe,cJe,fJe,Wm,Yre,mJe,gJe,yS,hJe,pJe,uJe,Qm,Kre,_Je,bJe,LS,vJe,FJe,TJe,Hm,Zre,MJe,EJe,xS,CJe,wJe,AJe,Um,ete,yJe,LJe,$S,xJe,$Je,kJe,Jm,ote,SJe,RJe,kS,PJe,BJe,IJe,Ym,rte,NJe,qJe,SS,jJe,DJe,GJe,Km,tte,OJe,VJe,RS,XJe,zJe,WJe,Zm,ate,QJe,HJe,PS,UJe,JJe,YJe,eg,nte,KJe,ZJe,BS,eYe,oYe,rYe,og,ste,tYe,aYe,IS,nYe,sYe,lYe,rg,lte,iYe,dYe,NS,cYe,fYe,mYe,tg,ite,gYe,hYe,qS,pYe,uYe,_Ye,ag,dte,bYe,vYe,jS,FYe,TYe,MYe,ng,cte,EYe,CYe,DS,wYe,AYe,yYe,sg,fte,LYe,xYe,GS,$Ye,kYe,SYe,lg,mte,RYe,PYe,OS,BYe,IYe,NYe,ig,gte,qYe,jYe,VS,DYe,GYe,OYe,dg,hte,VYe,XYe,XS,zYe,WYe,QYe,cg,pte,HYe,UYe,zS,JYe,YYe,KYe,fg,ute,ZYe,eKe,WS,oKe,rKe,tKe,mg,_te,aKe,nKe,QS,sKe,lKe,iKe,gg,bte,dKe,cKe,HS,fKe,mKe,gKe,hg,vte,hKe,pKe,US,uKe,_Ke,bKe,pg,Fte,vKe,FKe,JS,TKe,MKe,EKe,ug,Tte,CKe,wKe,YS,AKe,yKe,LKe,_g,Mte,xKe,$Ke,KS,kKe,SKe,RKe,bg,Ete,PKe,BKe,ZS,IKe,NKe,qKe,vg,Cte,jKe,DKe,eR,GKe,OKe,VKe,Fg,wte,XKe,zKe,oR,WKe,QKe,HKe,Tg,Ate,UKe,JKe,rR,YKe,KKe,ZKe,Mg,yte,eZe,oZe,tR,rZe,tZe,aZe,Eg,Lte,nZe,sZe,aR,lZe,iZe,dZe,Cg,xte,cZe,fZe,nR,mZe,gZe,hZe,wg,pZe,Ag,jA,uZe,$te,_Ze,Aqe,Mi,yg,kte,DA,bZe,Ste,vZe,yqe,wo,GA,FZe,OA,TZe,sR,MZe,EZe,CZe,VA,wZe,Rte,AZe,yZe,LZe,Cr,XA,xZe,Pte,$Ze,kZe,Aa,SZe,Bte,RZe,PZe,Ite,BZe,IZe,Nte,NZe,qZe,jZe,k,Sn,qte,DZe,GZe,lR,OZe,VZe,iR,XZe,zZe,WZe,Rn,jte,QZe,HZe,dR,UZe,JZe,cR,YZe,KZe,ZZe,Pn,Dte,eeo,oeo,fR,reo,teo,mR,aeo,neo,seo,Lg,Gte,leo,ieo,gR,deo,ceo,feo,Bn,Ote,meo,geo,hR,heo,peo,pR,ueo,_eo,beo,xg,Vte,veo,Feo,uR,Teo,Meo,Eeo,$g,Xte,Ceo,weo,_R,Aeo,yeo,Leo,kg,zte,xeo,$eo,bR,keo,Seo,Reo,In,Wte,Peo,Beo,vR,Ieo,Neo,FR,qeo,jeo,Deo,Nn,Qte,Geo,Oeo,TR,Veo,Xeo,MR,zeo,Weo,Qeo,qn,Hte,Heo,Ueo,ER,Jeo,Yeo,CR,Keo,Zeo,eoo,Sg,Ute,ooo,roo,wR,too,aoo,noo,Rg,Jte,soo,loo,AR,ioo,doo,coo,jn,Yte,foo,moo,yR,goo,hoo,LR,poo,uoo,_oo,Pg,Kte,boo,voo,xR,Foo,Too,Moo,Dn,Zte,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Gn,eae,$oo,koo,SR,Soo,Roo,RR,Poo,Boo,Ioo,On,oae,Noo,qoo,PR,joo,Doo,BR,Goo,Ooo,Voo,Bg,rae,Xoo,zoo,IR,Woo,Qoo,Hoo,Vn,tae,Uoo,Joo,NR,Yoo,Koo,qR,Zoo,ero,oro,Xn,aae,rro,tro,jR,aro,nro,DR,sro,lro,iro,zn,nae,dro,cro,GR,fro,mro,OR,gro,hro,pro,Wn,sae,uro,_ro,VR,bro,vro,XR,Fro,Tro,Mro,Qn,lae,Ero,Cro,zR,wro,Aro,WR,yro,Lro,xro,Hn,iae,$ro,kro,QR,Sro,Rro,HR,Pro,Bro,Iro,Ig,dae,Nro,qro,UR,jro,Dro,Gro,Un,cae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Ng,fae,Uro,Jro,KR,Yro,Kro,Zro,Jn,mae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,Yn,gae,lto,ito,oP,dto,cto,rP,fto,mto,gto,Kn,hae,hto,pto,tP,uto,_to,aP,bto,vto,Fto,qg,pae,Tto,Mto,nP,Eto,Cto,wto,Zn,uae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,es,_ae,Rto,Pto,iP,Bto,Ito,dP,Nto,qto,jto,os,bae,Dto,Gto,cP,Oto,Vto,fP,Xto,zto,Wto,jg,vae,Qto,Hto,mP,Uto,Jto,Yto,rs,Fae,Kto,Zto,gP,eao,oao,hP,rao,tao,aao,ts,Tae,nao,sao,pP,lao,iao,uP,dao,cao,fao,as,Mae,mao,gao,_P,hao,pao,bP,uao,_ao,bao,ns,Eae,vao,Fao,vP,Tao,Mao,FP,Eao,Cao,wao,ss,Cae,Aao,yao,TP,Lao,xao,MP,$ao,kao,Sao,ls,wae,Rao,Pao,EP,Bao,Iao,CP,Nao,qao,jao,is,Aae,Dao,Gao,wP,Oao,Vao,AP,Xao,zao,Wao,Dg,yae,Qao,Hao,yP,Uao,Jao,Yao,ds,Lae,Kao,Zao,LP,eno,ono,xP,rno,tno,ano,Gg,xae,nno,sno,$P,lno,ino,dno,Og,$ae,cno,fno,kP,mno,gno,hno,cs,kae,pno,uno,SP,_no,bno,RP,vno,Fno,Tno,fs,Sae,Mno,Eno,PP,Cno,wno,BP,Ano,yno,Lno,ms,Rae,xno,$no,IP,kno,Sno,NP,Rno,Pno,Bno,Vg,Pae,Ino,Nno,qP,qno,jno,Dno,gs,Bae,Gno,Ono,jP,Vno,Xno,DP,zno,Wno,Qno,hs,Iae,Hno,Uno,GP,Jno,Yno,OP,Kno,Zno,eso,ps,Nae,oso,rso,VP,tso,aso,XP,nso,sso,lso,us,qae,iso,dso,zP,cso,fso,WP,mso,gso,hso,_s,jae,pso,uso,QP,_so,bso,HP,vso,Fso,Tso,Xg,Dae,Mso,Eso,UP,Cso,wso,Aso,bs,Gae,yso,Lso,JP,xso,$so,YP,kso,Sso,Rso,zg,Oae,Pso,Bso,KP,Iso,Nso,qso,Wg,Vae,jso,Dso,ZP,Gso,Oso,Vso,Qg,Xae,Xso,zso,eB,Wso,Qso,Hso,Hg,zae,Uso,Jso,oB,Yso,Kso,Zso,vs,Wae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,Ug,Qae,llo,ilo,aB,dlo,clo,flo,Fs,Hae,mlo,glo,nB,hlo,plo,sB,ulo,_lo,blo,Ts,Uae,vlo,Flo,lB,Tlo,Mlo,iB,Elo,Clo,wlo,Ms,Jae,Alo,ylo,dB,Llo,xlo,cB,$lo,klo,Slo,Es,Yae,Rlo,Plo,fB,Blo,Ilo,mB,Nlo,qlo,jlo,Cs,Kae,Dlo,Glo,gB,Olo,Vlo,hB,Xlo,zlo,Wlo,ws,Zae,Qlo,Hlo,pB,Ulo,Jlo,uB,Ylo,Klo,Zlo,Jg,ene,eio,oio,_B,rio,tio,aio,Yg,one,nio,sio,bB,lio,iio,dio,As,rne,cio,fio,vB,mio,gio,FB,hio,pio,uio,ys,tne,_io,bio,TB,vio,Fio,MB,Tio,Mio,Eio,Ls,ane,Cio,wio,EB,Aio,yio,CB,Lio,xio,$io,Kg,nne,kio,Sio,wB,Rio,Pio,Bio,Zg,sne,Iio,Nio,AB,qio,jio,Dio,eh,lne,Gio,Oio,yB,Vio,Xio,zio,xs,ine,Wio,Qio,LB,Hio,Uio,xB,Jio,Yio,Kio,oh,dne,Zio,edo,$B,odo,rdo,tdo,rh,cne,ado,ndo,kB,sdo,ldo,ido,th,fne,ddo,cdo,SB,fdo,mdo,gdo,$s,mne,hdo,pdo,RB,udo,_do,PB,bdo,vdo,Fdo,ah,gne,Tdo,Mdo,BB,Edo,Cdo,wdo,nh,hne,Ado,ydo,IB,Ldo,xdo,$do,ks,pne,kdo,Sdo,NB,Rdo,Pdo,qB,Bdo,Ido,Ndo,Ss,une,qdo,jdo,jB,Ddo,Gdo,DB,Odo,Vdo,Xdo,Rs,_ne,zdo,Wdo,GB,Qdo,Hdo,OB,Udo,Jdo,Ydo,Ps,bne,Kdo,Zdo,VB,eco,oco,XB,rco,tco,aco,sh,nco,lh,zA,sco,vne,lco,Lqe,Ei,ih,Fne,WA,ico,Tne,dco,xqe,Ao,QA,cco,HA,fco,zB,mco,gco,hco,UA,pco,Mne,uco,_co,bco,He,JA,vco,Ene,Fco,Tco,ya,Mco,Cne,Eco,Cco,wne,wco,Aco,Ane,yco,Lco,xco,Y,dh,yne,$co,kco,WB,Sco,Rco,Pco,ch,Lne,Bco,Ico,QB,Nco,qco,jco,fh,xne,Dco,Gco,HB,Oco,Vco,Xco,mh,$ne,zco,Wco,UB,Qco,Hco,Uco,gh,kne,Jco,Yco,JB,Kco,Zco,efo,hh,Sne,ofo,rfo,YB,tfo,afo,nfo,ph,Rne,sfo,lfo,KB,ifo,dfo,cfo,uh,Pne,ffo,mfo,ZB,gfo,hfo,pfo,_h,Bne,ufo,_fo,eI,bfo,vfo,Ffo,bh,Ine,Tfo,Mfo,oI,Efo,Cfo,wfo,vh,Nne,Afo,yfo,rI,Lfo,xfo,$fo,Fh,qne,kfo,Sfo,tI,Rfo,Pfo,Bfo,Th,jne,Ifo,Nfo,aI,qfo,jfo,Dfo,Mh,Dne,Gfo,Ofo,nI,Vfo,Xfo,zfo,Eh,Gne,Wfo,Qfo,sI,Hfo,Ufo,Jfo,Ch,One,Yfo,Kfo,lI,Zfo,emo,omo,wh,Vne,rmo,tmo,iI,amo,nmo,smo,Ah,Xne,lmo,imo,dI,dmo,cmo,fmo,yh,zne,mmo,gmo,cI,hmo,pmo,umo,Lh,Wne,_mo,bmo,fI,vmo,Fmo,Tmo,xh,Qne,Mmo,Emo,mI,Cmo,wmo,Amo,$h,Hne,ymo,Lmo,gI,xmo,$mo,kmo,kh,Une,Smo,Rmo,hI,Pmo,Bmo,Imo,Sh,Jne,Nmo,qmo,pI,jmo,Dmo,Gmo,Rh,Yne,Omo,Vmo,uI,Xmo,zmo,Wmo,Ph,Kne,Qmo,Hmo,_I,Umo,Jmo,Ymo,Bh,Zne,Kmo,Zmo,bI,ego,ogo,rgo,Ih,ese,tgo,ago,vI,ngo,sgo,lgo,Nh,ose,igo,dgo,FI,cgo,fgo,mgo,qh,rse,ggo,hgo,TI,pgo,ugo,_go,jh,bgo,Dh,vgo,Gh,YA,Fgo,tse,Tgo,$qe,Ci,Oh,ase,KA,Mgo,nse,Ego,kqe,yo,ZA,Cgo,ey,wgo,MI,Ago,ygo,Lgo,oy,xgo,sse,$go,kgo,Sgo,Ue,ry,Rgo,lse,Pgo,Bgo,wi,Igo,ise,Ngo,qgo,dse,jgo,Dgo,Ggo,he,Vh,cse,Ogo,Vgo,EI,Xgo,zgo,Wgo,Xh,fse,Qgo,Hgo,mse,Ugo,Jgo,Ygo,zh,gse,Kgo,Zgo,CI,eho,oho,rho,Wh,hse,tho,aho,wI,nho,sho,lho,Qh,pse,iho,dho,AI,cho,fho,mho,Hh,use,gho,hho,yI,pho,uho,_ho,Uh,_se,bho,vho,LI,Fho,Tho,Mho,Jh,bse,Eho,Cho,xI,who,Aho,yho,Yh,vse,Lho,xho,$I,$ho,kho,Sho,Kh,Fse,Rho,Pho,kI,Bho,Iho,Nho,Zh,Tse,qho,jho,SI,Dho,Gho,Oho,ep,Mse,Vho,Xho,RI,zho,Who,Qho,op,Ese,Hho,Uho,PI,Jho,Yho,Kho,rp,Cse,Zho,epo,BI,opo,rpo,tpo,tp,wse,apo,npo,II,spo,lpo,ipo,ap,Ase,dpo,cpo,NI,fpo,mpo,gpo,np,yse,hpo,ppo,qI,upo,_po,bpo,sp,Lse,vpo,Fpo,jI,Tpo,Mpo,Epo,lp,Cpo,ip,wpo,dp,ty,Apo,xse,ypo,Sqe,Ai,cp,$se,ay,Lpo,kse,xpo,Rqe,Lo,ny,$po,yi,kpo,DI,Spo,Rpo,GI,Ppo,Bpo,Ipo,sy,Npo,Sse,qpo,jpo,Dpo,tt,ly,Gpo,Rse,Opo,Vpo,Li,Xpo,Pse,zpo,Wpo,OI,Qpo,Hpo,Upo,fp,Jpo,Je,iy,Ypo,Bse,Kpo,Zpo,La,euo,Ise,ouo,ruo,Nse,tuo,auo,qse,nuo,suo,luo,x,mp,jse,iuo,duo,VI,cuo,fuo,muo,gp,Dse,guo,huo,XI,puo,uuo,_uo,hp,Gse,buo,vuo,zI,Fuo,Tuo,Muo,pp,Ose,Euo,Cuo,WI,wuo,Auo,yuo,up,Vse,Luo,xuo,QI,$uo,kuo,Suo,_p,Xse,Ruo,Puo,HI,Buo,Iuo,Nuo,bp,zse,quo,juo,UI,Duo,Guo,Ouo,vp,Wse,Vuo,Xuo,JI,zuo,Wuo,Quo,Fp,Qse,Huo,Uuo,YI,Juo,Yuo,Kuo,Tp,Hse,Zuo,e_o,KI,o_o,r_o,t_o,Mp,Use,a_o,n_o,ZI,s_o,l_o,i_o,Ep,Jse,d_o,c_o,eN,f_o,m_o,g_o,Cp,Yse,h_o,p_o,oN,u_o,__o,b_o,wp,Kse,v_o,F_o,rN,T_o,M_o,E_o,Ap,Zse,C_o,w_o,tN,A_o,y_o,L_o,yp,ele,x_o,$_o,aN,k_o,S_o,R_o,Lp,ole,P_o,B_o,nN,I_o,N_o,q_o,xp,rle,j_o,D_o,sN,G_o,O_o,V_o,$p,tle,X_o,z_o,lN,W_o,Q_o,H_o,kp,ale,U_o,J_o,iN,Y_o,K_o,Z_o,Sp,nle,e1o,o1o,dN,r1o,t1o,a1o,Rp,sle,n1o,s1o,cN,l1o,i1o,d1o,Pp,lle,c1o,f1o,fN,m1o,g1o,h1o,Bp,ile,p1o,u1o,mN,_1o,b1o,v1o,Ip,dle,F1o,T1o,gN,M1o,E1o,C1o,Np,cle,w1o,A1o,hN,y1o,L1o,x1o,qp,fle,$1o,k1o,pN,S1o,R1o,P1o,jp,mle,B1o,I1o,uN,N1o,q1o,j1o,Dp,gle,D1o,G1o,_N,O1o,V1o,X1o,Gp,hle,z1o,W1o,bN,Q1o,H1o,U1o,Op,ple,J1o,Y1o,vN,K1o,Z1o,e3o,Vp,ule,o3o,r3o,FN,t3o,a3o,n3o,Bs,_le,s3o,l3o,TN,i3o,d3o,MN,c3o,f3o,m3o,Xp,ble,g3o,h3o,EN,p3o,u3o,_3o,zp,vle,b3o,v3o,CN,F3o,T3o,M3o,Wp,Fle,E3o,C3o,wN,w3o,A3o,y3o,Qp,Tle,L3o,x3o,AN,$3o,k3o,S3o,Hp,Mle,R3o,P3o,yN,B3o,I3o,N3o,Up,Ele,q3o,j3o,LN,D3o,G3o,O3o,Jp,Cle,V3o,X3o,xN,z3o,W3o,Q3o,Yp,wle,H3o,U3o,$N,J3o,Y3o,K3o,Kp,Ale,Z3o,ebo,kN,obo,rbo,tbo,Zp,yle,abo,nbo,SN,sbo,lbo,ibo,eu,Lle,dbo,cbo,RN,fbo,mbo,gbo,ou,xle,hbo,pbo,PN,ubo,_bo,bbo,ru,$le,vbo,Fbo,BN,Tbo,Mbo,Ebo,tu,kle,Cbo,wbo,IN,Abo,ybo,Lbo,au,Sle,xbo,$bo,NN,kbo,Sbo,Rbo,nu,Rle,Pbo,Bbo,qN,Ibo,Nbo,qbo,su,Ple,jbo,Dbo,jN,Gbo,Obo,Vbo,lu,Ble,Xbo,zbo,DN,Wbo,Qbo,Hbo,iu,Ile,Ubo,Jbo,GN,Ybo,Kbo,Zbo,du,Nle,e2o,o2o,ON,r2o,t2o,a2o,cu,qle,n2o,s2o,VN,l2o,i2o,d2o,fu,jle,c2o,f2o,XN,m2o,g2o,h2o,mu,Dle,p2o,u2o,zN,_2o,b2o,v2o,gu,Gle,F2o,T2o,WN,M2o,E2o,C2o,hu,Ole,w2o,A2o,QN,y2o,L2o,x2o,pu,Vle,$2o,k2o,HN,S2o,R2o,P2o,uu,Xle,B2o,I2o,UN,N2o,q2o,j2o,_u,zle,D2o,G2o,JN,O2o,V2o,X2o,bu,Wle,z2o,W2o,YN,Q2o,H2o,U2o,vu,Qle,J2o,Y2o,KN,K2o,Z2o,evo,Fu,Hle,ovo,rvo,ZN,tvo,avo,nvo,Tu,Ule,svo,lvo,eq,ivo,dvo,cvo,Mu,Jle,fvo,mvo,oq,gvo,hvo,pvo,Eu,Yle,uvo,_vo,rq,bvo,vvo,Fvo,Cu,Kle,Tvo,Mvo,tq,Evo,Cvo,wvo,wu,Zle,Avo,yvo,aq,Lvo,xvo,$vo,Au,eie,kvo,Svo,nq,Rvo,Pvo,Bvo,yu,oie,Ivo,Nvo,sq,qvo,jvo,Dvo,Lu,rie,Gvo,Ovo,lq,Vvo,Xvo,zvo,xu,tie,Wvo,Qvo,iq,Hvo,Uvo,Jvo,$u,aie,Yvo,Kvo,dq,Zvo,eFo,oFo,ku,nie,rFo,tFo,cq,aFo,nFo,sFo,Su,sie,lFo,iFo,fq,dFo,cFo,fFo,Ru,lie,mFo,gFo,mq,hFo,pFo,uFo,Pu,iie,_Fo,bFo,gq,vFo,FFo,TFo,Bu,die,MFo,EFo,hq,CFo,wFo,AFo,Iu,cie,yFo,LFo,pq,xFo,$Fo,kFo,Nu,fie,SFo,RFo,uq,PFo,BFo,IFo,qu,mie,NFo,qFo,_q,jFo,DFo,GFo,ju,gie,OFo,VFo,bq,XFo,zFo,WFo,Du,hie,QFo,HFo,vq,UFo,JFo,YFo,Gu,pie,KFo,ZFo,Fq,eTo,oTo,rTo,Ou,uie,tTo,aTo,Tq,nTo,sTo,lTo,Vu,_ie,iTo,dTo,Mq,cTo,fTo,mTo,Xu,bie,gTo,hTo,Eq,pTo,uTo,_To,zu,vie,bTo,vTo,Cq,FTo,TTo,MTo,Wu,Fie,ETo,CTo,wq,wTo,ATo,yTo,Qu,Tie,LTo,xTo,Aq,$To,kTo,STo,Hu,Mie,RTo,PTo,yq,BTo,ITo,NTo,Uu,Eie,qTo,jTo,Lq,DTo,GTo,OTo,Ju,Cie,VTo,XTo,xq,zTo,WTo,QTo,Yu,wie,HTo,UTo,$q,JTo,YTo,KTo,Ku,Aie,ZTo,e7o,kq,o7o,r7o,t7o,Zu,yie,a7o,n7o,Sq,s7o,l7o,i7o,e_,Lie,d7o,c7o,Rq,f7o,m7o,g7o,o_,xie,h7o,p7o,Pq,u7o,_7o,b7o,r_,$ie,v7o,F7o,Bq,T7o,M7o,E7o,t_,kie,C7o,w7o,Iq,A7o,y7o,L7o,a_,Sie,x7o,$7o,Nq,k7o,S7o,R7o,n_,Rie,P7o,B7o,qq,I7o,N7o,q7o,s_,j7o,Pie,D7o,G7o,Bie,O7o,V7o,l_,Pqe,xi,i_,Iie,dy,X7o,Nie,z7o,Bqe,xo,cy,W7o,$i,Q7o,jq,H7o,U7o,Dq,J7o,Y7o,K7o,fy,Z7o,qie,eMo,oMo,rMo,at,my,tMo,jie,aMo,nMo,ki,sMo,Die,lMo,iMo,Gq,dMo,cMo,fMo,d_,mMo,Ye,gy,gMo,Gie,hMo,pMo,xa,uMo,Oie,_Mo,bMo,Vie,vMo,FMo,Xie,TMo,MMo,EMo,G,c_,zie,CMo,wMo,Oq,AMo,yMo,LMo,f_,Wie,xMo,$Mo,Vq,kMo,SMo,RMo,m_,Qie,PMo,BMo,Xq,IMo,NMo,qMo,g_,Hie,jMo,DMo,zq,GMo,OMo,VMo,h_,Uie,XMo,zMo,Wq,WMo,QMo,HMo,p_,Jie,UMo,JMo,Qq,YMo,KMo,ZMo,u_,Yie,e4o,o4o,Hq,r4o,t4o,a4o,__,Kie,n4o,s4o,Uq,l4o,i4o,d4o,b_,Zie,c4o,f4o,Jq,m4o,g4o,h4o,v_,ede,p4o,u4o,Yq,_4o,b4o,v4o,F_,ode,F4o,T4o,Kq,M4o,E4o,C4o,T_,rde,w4o,A4o,Zq,y4o,L4o,x4o,M_,tde,$4o,k4o,ej,S4o,R4o,P4o,E_,ade,B4o,I4o,oj,N4o,q4o,j4o,C_,nde,D4o,G4o,rj,O4o,V4o,X4o,w_,sde,z4o,W4o,tj,Q4o,H4o,U4o,A_,lde,J4o,Y4o,aj,K4o,Z4o,eEo,y_,ide,oEo,rEo,nj,tEo,aEo,nEo,L_,dde,sEo,lEo,sj,iEo,dEo,cEo,x_,cde,fEo,mEo,lj,gEo,hEo,pEo,$_,fde,uEo,_Eo,ij,bEo,vEo,FEo,k_,mde,TEo,MEo,dj,EEo,CEo,wEo,S_,gde,AEo,yEo,cj,LEo,xEo,$Eo,R_,hde,kEo,SEo,fj,REo,PEo,BEo,P_,pde,IEo,NEo,mj,qEo,jEo,DEo,B_,ude,GEo,OEo,gj,VEo,XEo,zEo,I_,_de,WEo,QEo,hj,HEo,UEo,JEo,N_,bde,YEo,KEo,pj,ZEo,eCo,oCo,q_,vde,rCo,tCo,uj,aCo,nCo,sCo,j_,Fde,lCo,iCo,_j,dCo,cCo,fCo,D_,Tde,mCo,gCo,bj,hCo,pCo,uCo,G_,Mde,_Co,bCo,vj,vCo,FCo,TCo,O_,Ede,MCo,ECo,Fj,CCo,wCo,ACo,V_,Cde,yCo,LCo,Tj,xCo,$Co,kCo,X_,wde,SCo,RCo,Mj,PCo,BCo,ICo,z_,Ade,NCo,qCo,Ej,jCo,DCo,GCo,W_,yde,OCo,VCo,Cj,XCo,zCo,WCo,Q_,Lde,QCo,HCo,wj,UCo,JCo,YCo,H_,xde,KCo,ZCo,Aj,e5o,o5o,r5o,U_,$de,t5o,a5o,yj,n5o,s5o,l5o,J_,kde,i5o,d5o,Lj,c5o,f5o,m5o,Y_,Sde,g5o,h5o,xj,p5o,u5o,_5o,K_,b5o,Rde,v5o,F5o,Pde,T5o,M5o,Z_,Iqe,Si,e1,Bde,hy,E5o,Ide,C5o,Nqe,$o,py,w5o,Ri,A5o,$j,y5o,L5o,kj,x5o,$5o,k5o,uy,S5o,Nde,R5o,P5o,B5o,nt,_y,I5o,qde,N5o,q5o,Pi,j5o,jde,D5o,G5o,Sj,O5o,V5o,X5o,o1,z5o,Ke,by,W5o,Dde,Q5o,H5o,$a,U5o,Gde,J5o,Y5o,Ode,K5o,Z5o,Vde,ewo,owo,rwo,z,r1,Xde,two,awo,Rj,nwo,swo,lwo,t1,zde,iwo,dwo,Pj,cwo,fwo,mwo,a1,Wde,gwo,hwo,Bj,pwo,uwo,_wo,n1,Qde,bwo,vwo,Ij,Fwo,Two,Mwo,s1,Hde,Ewo,Cwo,Nj,wwo,Awo,ywo,l1,Ude,Lwo,xwo,qj,$wo,kwo,Swo,i1,Jde,Rwo,Pwo,jj,Bwo,Iwo,Nwo,d1,Yde,qwo,jwo,Dj,Dwo,Gwo,Owo,c1,Kde,Vwo,Xwo,Gj,zwo,Wwo,Qwo,f1,Zde,Hwo,Uwo,Oj,Jwo,Ywo,Kwo,m1,ece,Zwo,e0o,Vj,o0o,r0o,t0o,g1,oce,a0o,n0o,Xj,s0o,l0o,i0o,h1,rce,d0o,c0o,zj,f0o,m0o,g0o,p1,tce,h0o,p0o,Wj,u0o,_0o,b0o,u1,ace,v0o,F0o,Qj,T0o,M0o,E0o,_1,nce,C0o,w0o,Hj,A0o,y0o,L0o,b1,sce,x0o,$0o,Uj,k0o,S0o,R0o,v1,lce,P0o,B0o,Jj,I0o,N0o,q0o,F1,ice,j0o,D0o,Yj,G0o,O0o,V0o,T1,dce,X0o,z0o,Kj,W0o,Q0o,H0o,M1,cce,U0o,J0o,Zj,Y0o,K0o,Z0o,E1,fce,e6o,o6o,eD,r6o,t6o,a6o,C1,mce,n6o,s6o,oD,l6o,i6o,d6o,w1,gce,c6o,f6o,rD,m6o,g6o,h6o,A1,hce,p6o,u6o,tD,_6o,b6o,v6o,y1,pce,F6o,T6o,aD,M6o,E6o,C6o,L1,uce,w6o,A6o,nD,y6o,L6o,x6o,x1,_ce,$6o,k6o,sD,S6o,R6o,P6o,$1,bce,B6o,I6o,lD,N6o,q6o,j6o,k1,vce,D6o,G6o,iD,O6o,V6o,X6o,S1,Fce,z6o,W6o,dD,Q6o,H6o,U6o,R1,Tce,J6o,Y6o,cD,K6o,Z6o,eAo,P1,Mce,oAo,rAo,fD,tAo,aAo,nAo,B1,Ece,sAo,lAo,mD,iAo,dAo,cAo,I1,Cce,fAo,mAo,gD,gAo,hAo,pAo,N1,wce,uAo,_Ao,hD,bAo,vAo,FAo,q1,Ace,TAo,MAo,pD,EAo,CAo,wAo,j1,AAo,yce,yAo,LAo,Lce,xAo,$Ao,D1,qqe,Bi,G1,xce,vy,kAo,$ce,SAo,jqe,ko,Fy,RAo,Ii,PAo,uD,BAo,IAo,_D,NAo,qAo,jAo,Ty,DAo,kce,GAo,OAo,VAo,st,My,XAo,Sce,zAo,WAo,Ni,QAo,Rce,HAo,UAo,bD,JAo,YAo,KAo,O1,ZAo,Ze,Ey,eyo,Pce,oyo,ryo,ka,tyo,Bce,ayo,nyo,Ice,syo,lyo,Nce,iyo,dyo,cyo,Q,V1,qce,fyo,myo,vD,gyo,hyo,pyo,X1,jce,uyo,_yo,FD,byo,vyo,Fyo,z1,Dce,Tyo,Myo,TD,Eyo,Cyo,wyo,W1,Gce,Ayo,yyo,MD,Lyo,xyo,$yo,Q1,Oce,kyo,Syo,ED,Ryo,Pyo,Byo,H1,Vce,Iyo,Nyo,CD,qyo,jyo,Dyo,U1,Xce,Gyo,Oyo,wD,Vyo,Xyo,zyo,J1,zce,Wyo,Qyo,AD,Hyo,Uyo,Jyo,Y1,Wce,Yyo,Kyo,yD,Zyo,eLo,oLo,K1,Qce,rLo,tLo,LD,aLo,nLo,sLo,Z1,Hce,lLo,iLo,xD,dLo,cLo,fLo,e3,Uce,mLo,gLo,$D,hLo,pLo,uLo,o3,Jce,_Lo,bLo,kD,vLo,FLo,TLo,r3,Yce,MLo,ELo,SD,CLo,wLo,ALo,t3,Kce,yLo,LLo,RD,xLo,$Lo,kLo,a3,Zce,SLo,RLo,PD,PLo,BLo,ILo,n3,efe,NLo,qLo,BD,jLo,DLo,GLo,s3,ofe,OLo,VLo,ID,XLo,zLo,WLo,l3,rfe,QLo,HLo,ND,ULo,JLo,YLo,i3,tfe,KLo,ZLo,qD,e8o,o8o,r8o,d3,afe,t8o,a8o,jD,n8o,s8o,l8o,c3,nfe,i8o,d8o,DD,c8o,f8o,m8o,f3,sfe,g8o,h8o,GD,p8o,u8o,_8o,m3,lfe,b8o,v8o,OD,F8o,T8o,M8o,g3,ife,E8o,C8o,VD,w8o,A8o,y8o,h3,dfe,L8o,x8o,XD,$8o,k8o,S8o,p3,cfe,R8o,P8o,zD,B8o,I8o,N8o,u3,ffe,q8o,j8o,WD,D8o,G8o,O8o,_3,mfe,V8o,X8o,QD,z8o,W8o,Q8o,b3,gfe,H8o,U8o,HD,J8o,Y8o,K8o,v3,hfe,Z8o,e9o,pfe,o9o,r9o,t9o,F3,ufe,a9o,n9o,UD,s9o,l9o,i9o,T3,_fe,d9o,c9o,JD,f9o,m9o,g9o,M3,bfe,h9o,p9o,YD,u9o,_9o,b9o,E3,vfe,v9o,F9o,KD,T9o,M9o,E9o,C3,C9o,Ffe,w9o,A9o,Tfe,y9o,L9o,w3,Dqe,qi,A3,Mfe,Cy,x9o,Efe,$9o,Gqe,So,wy,k9o,ji,S9o,ZD,R9o,P9o,eG,B9o,I9o,N9o,Ay,q9o,Cfe,j9o,D9o,G9o,lt,yy,O9o,wfe,V9o,X9o,Di,z9o,Afe,W9o,Q9o,oG,H9o,U9o,J9o,y3,Y9o,eo,Ly,K9o,yfe,Z9o,exo,Sa,oxo,Lfe,rxo,txo,xfe,axo,nxo,$fe,sxo,lxo,ixo,_e,L3,kfe,dxo,cxo,rG,fxo,mxo,gxo,x3,Sfe,hxo,pxo,tG,uxo,_xo,bxo,$3,Rfe,vxo,Fxo,aG,Txo,Mxo,Exo,k3,Pfe,Cxo,wxo,nG,Axo,yxo,Lxo,S3,Bfe,xxo,$xo,sG,kxo,Sxo,Rxo,R3,Ife,Pxo,Bxo,lG,Ixo,Nxo,qxo,P3,Nfe,jxo,Dxo,iG,Gxo,Oxo,Vxo,B3,qfe,Xxo,zxo,dG,Wxo,Qxo,Hxo,I3,jfe,Uxo,Jxo,cG,Yxo,Kxo,Zxo,N3,Dfe,e$o,o$o,fG,r$o,t$o,a$o,q3,Gfe,n$o,s$o,mG,l$o,i$o,d$o,j3,Ofe,c$o,f$o,gG,m$o,g$o,h$o,D3,Vfe,p$o,u$o,hG,_$o,b$o,v$o,G3,Xfe,F$o,T$o,pG,M$o,E$o,C$o,O3,zfe,w$o,A$o,uG,y$o,L$o,x$o,V3,Wfe,$$o,k$o,_G,S$o,R$o,P$o,X3,B$o,Qfe,I$o,N$o,Hfe,q$o,j$o,z3,Oqe,Gi,W3,Ufe,xy,D$o,Jfe,G$o,Vqe,Ro,$y,O$o,Oi,V$o,bG,X$o,z$o,vG,W$o,Q$o,H$o,ky,U$o,Yfe,J$o,Y$o,K$o,it,Sy,Z$o,Kfe,eko,oko,Vi,rko,Zfe,tko,ako,FG,nko,sko,lko,Q3,iko,oo,Ry,dko,eme,cko,fko,Ra,mko,ome,gko,hko,rme,pko,uko,tme,_ko,bko,vko,N,H3,ame,Fko,Tko,TG,Mko,Eko,Cko,U3,nme,wko,Ako,MG,yko,Lko,xko,J3,sme,$ko,kko,EG,Sko,Rko,Pko,Y3,lme,Bko,Iko,CG,Nko,qko,jko,K3,ime,Dko,Gko,wG,Oko,Vko,Xko,Z3,dme,zko,Wko,AG,Qko,Hko,Uko,eb,cme,Jko,Yko,yG,Kko,Zko,eSo,ob,fme,oSo,rSo,LG,tSo,aSo,nSo,rb,mme,sSo,lSo,xG,iSo,dSo,cSo,tb,gme,fSo,mSo,$G,gSo,hSo,pSo,ab,hme,uSo,_So,kG,bSo,vSo,FSo,nb,pme,TSo,MSo,SG,ESo,CSo,wSo,sb,ume,ASo,ySo,RG,LSo,xSo,$So,lb,_me,kSo,SSo,PG,RSo,PSo,BSo,ib,bme,ISo,NSo,BG,qSo,jSo,DSo,db,vme,GSo,OSo,IG,VSo,XSo,zSo,cb,Fme,WSo,QSo,NG,HSo,USo,JSo,fb,Tme,YSo,KSo,qG,ZSo,eRo,oRo,mb,Mme,rRo,tRo,jG,aRo,nRo,sRo,gb,Eme,lRo,iRo,DG,dRo,cRo,fRo,hb,Cme,mRo,gRo,GG,hRo,pRo,uRo,pb,wme,_Ro,bRo,OG,vRo,FRo,TRo,ub,Ame,MRo,ERo,VG,CRo,wRo,ARo,_b,yme,yRo,LRo,XG,xRo,$Ro,kRo,bb,Lme,SRo,RRo,zG,PRo,BRo,IRo,vb,xme,NRo,qRo,WG,jRo,DRo,GRo,Fb,$me,ORo,VRo,QG,XRo,zRo,WRo,Tb,kme,QRo,HRo,HG,URo,JRo,YRo,Mb,Sme,KRo,ZRo,UG,ePo,oPo,rPo,Eb,Rme,tPo,aPo,JG,nPo,sPo,lPo,Cb,Pme,iPo,dPo,YG,cPo,fPo,mPo,wb,Bme,gPo,hPo,KG,pPo,uPo,_Po,Ab,Ime,bPo,vPo,ZG,FPo,TPo,MPo,yb,Nme,EPo,CPo,eO,wPo,APo,yPo,Lb,qme,LPo,xPo,oO,$Po,kPo,SPo,xb,jme,RPo,PPo,rO,BPo,IPo,NPo,$b,Dme,qPo,jPo,tO,DPo,GPo,OPo,kb,Gme,VPo,XPo,aO,zPo,WPo,QPo,Sb,Ome,HPo,UPo,nO,JPo,YPo,KPo,Rb,Vme,ZPo,eBo,sO,oBo,rBo,tBo,Pb,Xme,aBo,nBo,lO,sBo,lBo,iBo,Bb,zme,dBo,cBo,iO,fBo,mBo,gBo,Ib,Wme,hBo,pBo,dO,uBo,_Bo,bBo,Nb,Qme,vBo,FBo,cO,TBo,MBo,EBo,qb,Hme,CBo,wBo,fO,ABo,yBo,LBo,jb,Ume,xBo,$Bo,mO,kBo,SBo,RBo,Db,Jme,PBo,BBo,gO,IBo,NBo,qBo,Gb,jBo,Yme,DBo,GBo,Kme,OBo,VBo,Ob,Xqe,Xi,Vb,Zme,Py,XBo,ege,zBo,zqe,Po,By,WBo,zi,QBo,hO,HBo,UBo,pO,JBo,YBo,KBo,Iy,ZBo,oge,eIo,oIo,rIo,dt,Ny,tIo,rge,aIo,nIo,Wi,sIo,tge,lIo,iIo,uO,dIo,cIo,fIo,Xb,mIo,ro,qy,gIo,age,hIo,pIo,Pa,uIo,nge,_Io,bIo,sge,vIo,FIo,lge,TIo,MIo,EIo,K,zb,ige,CIo,wIo,_O,AIo,yIo,LIo,Wb,dge,xIo,$Io,bO,kIo,SIo,RIo,Qb,cge,PIo,BIo,vO,IIo,NIo,qIo,Hb,fge,jIo,DIo,FO,GIo,OIo,VIo,Ub,mge,XIo,zIo,TO,WIo,QIo,HIo,Jb,gge,UIo,JIo,MO,YIo,KIo,ZIo,Yb,hge,eNo,oNo,EO,rNo,tNo,aNo,Kb,pge,nNo,sNo,CO,lNo,iNo,dNo,Zb,uge,cNo,fNo,wO,mNo,gNo,hNo,e2,_ge,pNo,uNo,AO,_No,bNo,vNo,o2,bge,FNo,TNo,yO,MNo,ENo,CNo,r2,vge,wNo,ANo,LO,yNo,LNo,xNo,t2,Fge,$No,kNo,xO,SNo,RNo,PNo,a2,Tge,BNo,INo,$O,NNo,qNo,jNo,n2,Mge,DNo,GNo,kO,ONo,VNo,XNo,s2,Ege,zNo,WNo,SO,QNo,HNo,UNo,l2,Cge,JNo,YNo,RO,KNo,ZNo,eqo,i2,wge,oqo,rqo,PO,tqo,aqo,nqo,d2,Age,sqo,lqo,BO,iqo,dqo,cqo,c2,yge,fqo,mqo,IO,gqo,hqo,pqo,f2,Lge,uqo,_qo,NO,bqo,vqo,Fqo,m2,xge,Tqo,Mqo,qO,Eqo,Cqo,wqo,g2,$ge,Aqo,yqo,jO,Lqo,xqo,$qo,h2,kge,kqo,Sqo,DO,Rqo,Pqo,Bqo,p2,Sge,Iqo,Nqo,GO,qqo,jqo,Dqo,u2,Rge,Gqo,Oqo,OO,Vqo,Xqo,zqo,_2,Pge,Wqo,Qqo,VO,Hqo,Uqo,Jqo,b2,Bge,Yqo,Kqo,XO,Zqo,ejo,ojo,v2,Ige,rjo,tjo,zO,ajo,njo,sjo,F2,ljo,Nge,ijo,djo,qge,cjo,fjo,T2,Wqe,Qi,M2,jge,jy,mjo,Dge,gjo,Qqe,Bo,Dy,hjo,Hi,pjo,WO,ujo,_jo,QO,bjo,vjo,Fjo,Gy,Tjo,Gge,Mjo,Ejo,Cjo,ct,Oy,wjo,Oge,Ajo,yjo,Ui,Ljo,Vge,xjo,$jo,HO,kjo,Sjo,Rjo,E2,Pjo,to,Vy,Bjo,Xge,Ijo,Njo,Ba,qjo,zge,jjo,Djo,Wge,Gjo,Ojo,Qge,Vjo,Xjo,zjo,Yr,C2,Hge,Wjo,Qjo,UO,Hjo,Ujo,Jjo,w2,Uge,Yjo,Kjo,JO,Zjo,eDo,oDo,A2,Jge,rDo,tDo,YO,aDo,nDo,sDo,y2,Yge,lDo,iDo,KO,dDo,cDo,fDo,L2,Kge,mDo,gDo,ZO,hDo,pDo,uDo,x2,_Do,Zge,bDo,vDo,ehe,FDo,TDo,$2,Hqe,Ji,k2,ohe,Xy,MDo,rhe,EDo,Uqe,Io,zy,CDo,Yi,wDo,eV,ADo,yDo,oV,LDo,xDo,$Do,Wy,kDo,the,SDo,RDo,PDo,ft,Qy,BDo,ahe,IDo,NDo,Ki,qDo,nhe,jDo,DDo,rV,GDo,ODo,VDo,S2,XDo,ao,Hy,zDo,she,WDo,QDo,Ia,HDo,lhe,UDo,JDo,ihe,YDo,KDo,dhe,ZDo,eGo,oGo,H,R2,che,rGo,tGo,tV,aGo,nGo,sGo,P2,fhe,lGo,iGo,aV,dGo,cGo,fGo,B2,mhe,mGo,gGo,nV,hGo,pGo,uGo,I2,ghe,_Go,bGo,sV,vGo,FGo,TGo,N2,hhe,MGo,EGo,lV,CGo,wGo,AGo,q2,phe,yGo,LGo,iV,xGo,$Go,kGo,j2,uhe,SGo,RGo,dV,PGo,BGo,IGo,D2,_he,NGo,qGo,cV,jGo,DGo,GGo,G2,bhe,OGo,VGo,fV,XGo,zGo,WGo,O2,vhe,QGo,HGo,mV,UGo,JGo,YGo,V2,Fhe,KGo,ZGo,gV,eOo,oOo,rOo,X2,The,tOo,aOo,hV,nOo,sOo,lOo,z2,Mhe,iOo,dOo,pV,cOo,fOo,mOo,W2,Ehe,gOo,hOo,uV,pOo,uOo,_Oo,Q2,Che,bOo,vOo,_V,FOo,TOo,MOo,H2,whe,EOo,COo,bV,wOo,AOo,yOo,U2,Ahe,LOo,xOo,vV,$Oo,kOo,SOo,J2,yhe,ROo,POo,FV,BOo,IOo,NOo,Y2,Lhe,qOo,jOo,TV,DOo,GOo,OOo,K2,xhe,VOo,XOo,MV,zOo,WOo,QOo,Z2,$he,HOo,UOo,EV,JOo,YOo,KOo,ev,khe,ZOo,eVo,CV,oVo,rVo,tVo,ov,She,aVo,nVo,wV,sVo,lVo,iVo,rv,Rhe,dVo,cVo,AV,fVo,mVo,gVo,tv,Phe,hVo,pVo,yV,uVo,_Vo,bVo,av,Bhe,vVo,FVo,LV,TVo,MVo,EVo,nv,Ihe,CVo,wVo,xV,AVo,yVo,LVo,sv,Nhe,xVo,$Vo,$V,kVo,SVo,RVo,lv,qhe,PVo,BVo,kV,IVo,NVo,qVo,iv,jhe,jVo,DVo,SV,GVo,OVo,VVo,dv,Dhe,XVo,zVo,RV,WVo,QVo,HVo,cv,Ghe,UVo,JVo,PV,YVo,KVo,ZVo,fv,Ohe,eXo,oXo,BV,rXo,tXo,aXo,mv,Vhe,nXo,sXo,IV,lXo,iXo,dXo,gv,cXo,Xhe,fXo,mXo,zhe,gXo,hXo,hv,Jqe,Zi,pv,Whe,Uy,pXo,Qhe,uXo,Yqe,No,Jy,_Xo,ed,bXo,NV,vXo,FXo,qV,TXo,MXo,EXo,Yy,CXo,Hhe,wXo,AXo,yXo,mt,Ky,LXo,Uhe,xXo,$Xo,od,kXo,Jhe,SXo,RXo,jV,PXo,BXo,IXo,uv,NXo,no,Zy,qXo,Yhe,jXo,DXo,Na,GXo,Khe,OXo,VXo,Zhe,XXo,zXo,epe,WXo,QXo,HXo,V,_v,ope,UXo,JXo,DV,YXo,KXo,ZXo,bv,rpe,ezo,ozo,GV,rzo,tzo,azo,vv,tpe,nzo,szo,OV,lzo,izo,dzo,Fv,ape,czo,fzo,VV,mzo,gzo,hzo,Tv,npe,pzo,uzo,XV,_zo,bzo,vzo,Mv,spe,Fzo,Tzo,zV,Mzo,Ezo,Czo,Ev,lpe,wzo,Azo,WV,yzo,Lzo,xzo,Cv,ipe,$zo,kzo,QV,Szo,Rzo,Pzo,wv,dpe,Bzo,Izo,HV,Nzo,qzo,jzo,Av,cpe,Dzo,Gzo,UV,Ozo,Vzo,Xzo,yv,fpe,zzo,Wzo,JV,Qzo,Hzo,Uzo,Lv,mpe,Jzo,Yzo,YV,Kzo,Zzo,eWo,xv,gpe,oWo,rWo,KV,tWo,aWo,nWo,$v,hpe,sWo,lWo,ZV,iWo,dWo,cWo,kv,ppe,fWo,mWo,eX,gWo,hWo,pWo,Sv,upe,uWo,_Wo,oX,bWo,vWo,FWo,Rv,_pe,TWo,MWo,rX,EWo,CWo,wWo,Pv,bpe,AWo,yWo,tX,LWo,xWo,$Wo,Bv,vpe,kWo,SWo,aX,RWo,PWo,BWo,Iv,Fpe,IWo,NWo,nX,qWo,jWo,DWo,Nv,Tpe,GWo,OWo,sX,VWo,XWo,zWo,qv,Mpe,WWo,QWo,lX,HWo,UWo,JWo,jv,Epe,YWo,KWo,iX,ZWo,eQo,oQo,Dv,Cpe,rQo,tQo,dX,aQo,nQo,sQo,Gv,wpe,lQo,iQo,cX,dQo,cQo,fQo,Ov,Ape,mQo,gQo,fX,hQo,pQo,uQo,Vv,ype,_Qo,bQo,mX,vQo,FQo,TQo,Xv,Lpe,MQo,EQo,gX,CQo,wQo,AQo,zv,xpe,yQo,LQo,hX,xQo,$Qo,kQo,Wv,$pe,SQo,RQo,pX,PQo,BQo,IQo,Qv,kpe,NQo,qQo,uX,jQo,DQo,GQo,Hv,Spe,OQo,VQo,_X,XQo,zQo,WQo,Uv,Rpe,QQo,HQo,bX,UQo,JQo,YQo,Jv,Ppe,KQo,ZQo,vX,eHo,oHo,rHo,Yv,Bpe,tHo,aHo,FX,nHo,sHo,lHo,Kv,Ipe,iHo,dHo,TX,cHo,fHo,mHo,Zv,Npe,gHo,hHo,MX,pHo,uHo,_Ho,eF,qpe,bHo,vHo,EX,FHo,THo,MHo,oF,jpe,EHo,CHo,CX,wHo,AHo,yHo,rF,Dpe,LHo,xHo,wX,$Ho,kHo,SHo,tF,RHo,Gpe,PHo,BHo,Ope,IHo,NHo,aF,Kqe,rd,nF,Vpe,eL,qHo,Xpe,jHo,Zqe,qo,oL,DHo,td,GHo,AX,OHo,VHo,yX,XHo,zHo,WHo,rL,QHo,zpe,HHo,UHo,JHo,gt,tL,YHo,Wpe,KHo,ZHo,ad,eUo,Qpe,oUo,rUo,LX,tUo,aUo,nUo,sF,sUo,so,aL,lUo,Hpe,iUo,dUo,qa,cUo,Upe,fUo,mUo,Jpe,gUo,hUo,Ype,pUo,uUo,_Uo,Kpe,lF,Zpe,bUo,vUo,xX,FUo,TUo,MUo,iF,EUo,eue,CUo,wUo,oue,AUo,yUo,dF,eje,nd,cF,rue,nL,LUo,tue,xUo,oje,jo,sL,$Uo,sd,kUo,$X,SUo,RUo,kX,PUo,BUo,IUo,lL,NUo,aue,qUo,jUo,DUo,ht,iL,GUo,nue,OUo,VUo,ld,XUo,sue,zUo,WUo,SX,QUo,HUo,UUo,fF,JUo,lo,dL,YUo,lue,KUo,ZUo,ja,eJo,iue,oJo,rJo,due,tJo,aJo,cue,nJo,sJo,lJo,Fe,mF,fue,iJo,dJo,RX,cJo,fJo,mJo,gF,mue,gJo,hJo,PX,pJo,uJo,_Jo,hF,gue,bJo,vJo,BX,FJo,TJo,MJo,pF,hue,EJo,CJo,IX,wJo,AJo,yJo,Is,pue,LJo,xJo,NX,$Jo,kJo,qX,SJo,RJo,PJo,uF,uue,BJo,IJo,jX,NJo,qJo,jJo,pt,_ue,DJo,GJo,DX,OJo,VJo,GX,XJo,zJo,OX,WJo,QJo,HJo,_F,bue,UJo,JJo,VX,YJo,KJo,ZJo,bF,vue,eYo,oYo,XX,rYo,tYo,aYo,vF,Fue,nYo,sYo,zX,lYo,iYo,dYo,FF,Tue,cYo,fYo,WX,mYo,gYo,hYo,TF,Mue,pYo,uYo,QX,_Yo,bYo,vYo,MF,Eue,FYo,TYo,HX,MYo,EYo,CYo,EF,Cue,wYo,AYo,UX,yYo,LYo,xYo,CF,$Yo,wue,kYo,SYo,Aue,RYo,PYo,wF,rje,id,AF,yue,cL,BYo,Lue,IYo,tje,Do,fL,NYo,dd,qYo,JX,jYo,DYo,YX,GYo,OYo,VYo,mL,XYo,xue,zYo,WYo,QYo,ut,gL,HYo,$ue,UYo,JYo,cd,YYo,kue,KYo,ZYo,KX,eKo,oKo,rKo,yF,tKo,io,hL,aKo,Sue,nKo,sKo,Da,lKo,Rue,iKo,dKo,Pue,cKo,fKo,Bue,mKo,gKo,hKo,Iue,LF,Nue,pKo,uKo,ZX,_Ko,bKo,vKo,xF,FKo,que,TKo,MKo,jue,EKo,CKo,$F,aje,fd,kF,Due,pL,wKo,Gue,AKo,nje,Go,uL,yKo,md,LKo,ez,xKo,$Ko,oz,kKo,SKo,RKo,_L,PKo,Oue,BKo,IKo,NKo,_t,bL,qKo,Vue,jKo,DKo,gd,GKo,Xue,OKo,VKo,rz,XKo,zKo,WKo,SF,QKo,co,vL,HKo,zue,UKo,JKo,Ga,YKo,Wue,KKo,ZKo,Que,eZo,oZo,Hue,rZo,tZo,aZo,ke,RF,Uue,nZo,sZo,tz,lZo,iZo,dZo,PF,Jue,cZo,fZo,az,mZo,gZo,hZo,BF,Yue,pZo,uZo,nz,_Zo,bZo,vZo,IF,Kue,FZo,TZo,sz,MZo,EZo,CZo,NF,Zue,wZo,AZo,lz,yZo,LZo,xZo,qF,e_e,$Zo,kZo,iz,SZo,RZo,PZo,jF,o_e,BZo,IZo,dz,NZo,qZo,jZo,DF,r_e,DZo,GZo,cz,OZo,VZo,XZo,GF,t_e,zZo,WZo,fz,QZo,HZo,UZo,OF,JZo,a_e,YZo,KZo,n_e,ZZo,eer,VF,sje,hd,XF,s_e,FL,oer,l_e,rer,lje,Oo,TL,ter,pd,aer,mz,ner,ser,gz,ler,ier,der,ML,cer,i_e,fer,mer,ger,bt,EL,her,d_e,per,uer,ud,_er,c_e,ber,ver,hz,Fer,Ter,Mer,zF,Eer,fo,CL,Cer,f_e,wer,Aer,Oa,yer,m_e,Ler,xer,g_e,$er,ker,h_e,Ser,Rer,Per,Kr,WF,p_e,Ber,Ier,pz,Ner,qer,jer,QF,u_e,Der,Ger,uz,Oer,Ver,Xer,HF,__e,zer,Wer,_z,Qer,Her,Uer,UF,b_e,Jer,Yer,bz,Ker,Zer,eor,JF,v_e,oor,ror,vz,tor,aor,nor,YF,sor,F_e,lor,ior,T_e,dor,cor,KF,ije,_d,ZF,M_e,wL,mor,E_e,gor,dje,Vo,AL,hor,bd,por,Fz,uor,_or,Tz,bor,vor,For,yL,Tor,C_e,Mor,Eor,Cor,vt,LL,wor,w_e,Aor,yor,vd,Lor,A_e,xor,$or,Mz,kor,Sor,Ror,eT,Por,mo,xL,Bor,y_e,Ior,Nor,Va,qor,L_e,jor,Dor,x_e,Gor,Oor,$_e,Vor,Xor,zor,Se,oT,k_e,Wor,Qor,Ez,Hor,Uor,Jor,rT,S_e,Yor,Kor,Cz,Zor,err,orr,tT,R_e,rrr,trr,wz,arr,nrr,srr,aT,P_e,lrr,irr,Az,drr,crr,frr,nT,B_e,mrr,grr,yz,hrr,prr,urr,sT,I_e,_rr,brr,Lz,vrr,Frr,Trr,lT,N_e,Mrr,Err,xz,Crr,wrr,Arr,iT,q_e,yrr,Lrr,$z,xrr,$rr,krr,dT,j_e,Srr,Rrr,kz,Prr,Brr,Irr,cT,Nrr,D_e,qrr,jrr,G_e,Drr,Grr,fT,cje,Fd,mT,O_e,$L,Orr,V_e,Vrr,fje,Xo,kL,Xrr,Td,zrr,Sz,Wrr,Qrr,Rz,Hrr,Urr,Jrr,SL,Yrr,X_e,Krr,Zrr,etr,Ft,RL,otr,z_e,rtr,ttr,Md,atr,W_e,ntr,str,Pz,ltr,itr,dtr,gT,ctr,go,PL,ftr,Q_e,mtr,gtr,Xa,htr,H_e,ptr,utr,U_e,_tr,btr,J_e,vtr,Ftr,Ttr,BL,hT,Y_e,Mtr,Etr,Bz,Ctr,wtr,Atr,pT,K_e,ytr,Ltr,Iz,xtr,$tr,ktr,uT,Str,Z_e,Rtr,Ptr,e1e,Btr,Itr,_T,mje,Ed,bT,o1e,IL,Ntr,r1e,qtr,gje,zo,NL,jtr,Cd,Dtr,Nz,Gtr,Otr,qz,Vtr,Xtr,ztr,qL,Wtr,t1e,Qtr,Htr,Utr,Tt,jL,Jtr,a1e,Ytr,Ktr,wd,Ztr,n1e,ear,oar,jz,rar,tar,aar,vT,nar,ho,DL,sar,s1e,lar,iar,za,dar,l1e,car,far,i1e,mar,gar,d1e,har,par,uar,Zr,FT,c1e,_ar,bar,Dz,Far,Tar,Mar,TT,f1e,Ear,Car,Gz,war,Aar,yar,MT,m1e,Lar,xar,Oz,$ar,kar,Sar,ET,g1e,Rar,Par,Vz,Bar,Iar,Nar,CT,h1e,qar,jar,Xz,Dar,Gar,Oar,wT,Var,p1e,Xar,zar,u1e,War,Qar,AT,hje,Ad,yT,_1e,GL,Har,b1e,Uar,pje,Wo,OL,Jar,yd,Yar,zz,Kar,Zar,Wz,enr,onr,rnr,VL,tnr,v1e,anr,nnr,snr,Mt,XL,lnr,F1e,inr,dnr,Ld,cnr,T1e,fnr,mnr,Qz,gnr,hnr,pnr,LT,unr,po,zL,_nr,M1e,bnr,vnr,Wa,Fnr,E1e,Tnr,Mnr,C1e,Enr,Cnr,w1e,wnr,Anr,ynr,xd,xT,A1e,Lnr,xnr,Hz,$nr,knr,Snr,$T,y1e,Rnr,Pnr,Uz,Bnr,Inr,Nnr,kT,L1e,qnr,jnr,Jz,Dnr,Gnr,Onr,ST,Vnr,x1e,Xnr,znr,$1e,Wnr,Qnr,RT,uje,$d,PT,k1e,WL,Hnr,S1e,Unr,_je,Qo,QL,Jnr,kd,Ynr,Yz,Knr,Znr,Kz,esr,osr,rsr,HL,tsr,R1e,asr,nsr,ssr,Et,UL,lsr,P1e,isr,dsr,Sd,csr,B1e,fsr,msr,Zz,gsr,hsr,psr,BT,usr,uo,JL,_sr,I1e,bsr,vsr,Qa,Fsr,N1e,Tsr,Msr,q1e,Esr,Csr,j1e,wsr,Asr,ysr,YL,IT,D1e,Lsr,xsr,eW,$sr,ksr,Ssr,NT,G1e,Rsr,Psr,oW,Bsr,Isr,Nsr,qT,qsr,O1e,jsr,Dsr,V1e,Gsr,Osr,jT,bje,Rd,DT,X1e,KL,Vsr,z1e,Xsr,vje,Ho,ZL,zsr,Pd,Wsr,rW,Qsr,Hsr,tW,Usr,Jsr,Ysr,e8,Ksr,W1e,Zsr,elr,olr,Ct,o8,rlr,Q1e,tlr,alr,Bd,nlr,H1e,slr,llr,aW,ilr,dlr,clr,GT,flr,_o,r8,mlr,U1e,glr,hlr,Ha,plr,J1e,ulr,_lr,Y1e,blr,vlr,K1e,Flr,Tlr,Mlr,Z1e,OT,e3e,Elr,Clr,nW,wlr,Alr,ylr,VT,Llr,o3e,xlr,$lr,r3e,klr,Slr,XT,Fje,Id,zT,t3e,t8,Rlr,a3e,Plr,Tje,Uo,a8,Blr,Nd,Ilr,sW,Nlr,qlr,lW,jlr,Dlr,Glr,n8,Olr,n3e,Vlr,Xlr,zlr,wt,s8,Wlr,s3e,Qlr,Hlr,qd,Ulr,l3e,Jlr,Ylr,iW,Klr,Zlr,eir,WT,oir,bo,l8,rir,i3e,tir,air,Ua,nir,d3e,sir,lir,c3e,iir,dir,f3e,cir,fir,mir,Ja,QT,m3e,gir,hir,dW,pir,uir,_ir,HT,g3e,bir,vir,cW,Fir,Tir,Mir,UT,h3e,Eir,Cir,fW,wir,Air,yir,JT,p3e,Lir,xir,mW,$ir,kir,Sir,YT,Rir,u3e,Pir,Bir,_3e,Iir,Nir,KT,Mje,jd,ZT,b3e,i8,qir,v3e,jir,Eje,Jo,d8,Dir,Dd,Gir,gW,Oir,Vir,hW,Xir,zir,Wir,c8,Qir,F3e,Hir,Uir,Jir,At,f8,Yir,T3e,Kir,Zir,Gd,edr,M3e,odr,rdr,pW,tdr,adr,ndr,e7,sdr,vo,m8,ldr,E3e,idr,ddr,Ya,cdr,C3e,fdr,mdr,w3e,gdr,hdr,A3e,pdr,udr,_dr,y3e,o7,L3e,bdr,vdr,uW,Fdr,Tdr,Mdr,r7,Edr,x3e,Cdr,wdr,$3e,Adr,ydr,t7,Cje,Od,a7,k3e,g8,Ldr,S3e,xdr,wje,Yo,h8,$dr,Vd,kdr,_W,Sdr,Rdr,bW,Pdr,Bdr,Idr,p8,Ndr,R3e,qdr,jdr,Ddr,yt,u8,Gdr,P3e,Odr,Vdr,Xd,Xdr,B3e,zdr,Wdr,vW,Qdr,Hdr,Udr,n7,Jdr,wr,_8,Ydr,I3e,Kdr,Zdr,Ka,ecr,N3e,ocr,rcr,q3e,tcr,acr,j3e,ncr,scr,lcr,q,s7,D3e,icr,dcr,FW,ccr,fcr,mcr,l7,G3e,gcr,hcr,TW,pcr,ucr,_cr,i7,O3e,bcr,vcr,MW,Fcr,Tcr,Mcr,d7,V3e,Ecr,Ccr,EW,wcr,Acr,ycr,c7,X3e,Lcr,xcr,CW,$cr,kcr,Scr,f7,z3e,Rcr,Pcr,wW,Bcr,Icr,Ncr,m7,W3e,qcr,jcr,AW,Dcr,Gcr,Ocr,g7,Q3e,Vcr,Xcr,yW,zcr,Wcr,Qcr,h7,H3e,Hcr,Ucr,LW,Jcr,Ycr,Kcr,p7,U3e,Zcr,efr,xW,ofr,rfr,tfr,u7,J3e,afr,nfr,$W,sfr,lfr,ifr,_7,Y3e,dfr,cfr,kW,ffr,mfr,gfr,b7,K3e,hfr,pfr,SW,ufr,_fr,bfr,v7,Z3e,vfr,Ffr,RW,Tfr,Mfr,Efr,F7,ebe,Cfr,wfr,PW,Afr,yfr,Lfr,T7,obe,xfr,$fr,BW,kfr,Sfr,Rfr,M7,rbe,Pfr,Bfr,IW,Ifr,Nfr,qfr,Ns,tbe,jfr,Dfr,NW,Gfr,Ofr,qW,Vfr,Xfr,zfr,E7,abe,Wfr,Qfr,jW,Hfr,Ufr,Jfr,C7,nbe,Yfr,Kfr,DW,Zfr,emr,omr,w7,sbe,rmr,tmr,GW,amr,nmr,smr,A7,lbe,lmr,imr,OW,dmr,cmr,fmr,y7,ibe,mmr,gmr,VW,hmr,pmr,umr,L7,dbe,_mr,bmr,XW,vmr,Fmr,Tmr,x7,cbe,Mmr,Emr,zW,Cmr,wmr,Amr,$7,fbe,ymr,Lmr,WW,xmr,$mr,kmr,k7,mbe,Smr,Rmr,QW,Pmr,Bmr,Imr,S7,gbe,Nmr,qmr,HW,jmr,Dmr,Gmr,R7,hbe,Omr,Vmr,UW,Xmr,zmr,Wmr,P7,pbe,Qmr,Hmr,JW,Umr,Jmr,Ymr,B7,ube,Kmr,Zmr,YW,egr,ogr,rgr,I7,_be,tgr,agr,KW,ngr,sgr,lgr,N7,bbe,igr,dgr,ZW,cgr,fgr,mgr,q7,vbe,ggr,hgr,eQ,pgr,ugr,_gr,j7,Fbe,bgr,vgr,oQ,Fgr,Tgr,Mgr,D7,Tbe,Egr,Cgr,rQ,wgr,Agr,ygr,G7,Mbe,Lgr,xgr,tQ,$gr,kgr,Sgr,O7,Ebe,Rgr,Pgr,aQ,Bgr,Igr,Ngr,V7,Cbe,qgr,jgr,nQ,Dgr,Ggr,Ogr,X7,wbe,Vgr,Xgr,sQ,zgr,Wgr,Qgr,z7,Abe,Hgr,Ugr,lQ,Jgr,Ygr,Kgr,W7,ybe,Zgr,ehr,iQ,ohr,rhr,thr,Q7,Lbe,ahr,nhr,dQ,shr,lhr,ihr,H7,xbe,dhr,chr,cQ,fhr,mhr,ghr,U7,$be,hhr,phr,fQ,uhr,_hr,bhr,J7,kbe,vhr,Fhr,mQ,Thr,Mhr,Ehr,Y7,Aje,zd,K7,Sbe,b8,Chr,Rbe,whr,yje,Ko,v8,Ahr,Wd,yhr,gQ,Lhr,xhr,hQ,$hr,khr,Shr,F8,Rhr,Pbe,Phr,Bhr,Ihr,Lt,T8,Nhr,Bbe,qhr,jhr,Qd,Dhr,Ibe,Ghr,Ohr,pQ,Vhr,Xhr,zhr,Z7,Whr,Ar,M8,Qhr,Nbe,Hhr,Uhr,Za,Jhr,qbe,Yhr,Khr,jbe,Zhr,epr,Dbe,opr,rpr,tpr,se,eM,Gbe,apr,npr,uQ,spr,lpr,ipr,oM,Obe,dpr,cpr,_Q,fpr,mpr,gpr,rM,Vbe,hpr,ppr,bQ,upr,_pr,bpr,tM,Xbe,vpr,Fpr,vQ,Tpr,Mpr,Epr,aM,zbe,Cpr,wpr,FQ,Apr,ypr,Lpr,nM,Wbe,xpr,$pr,TQ,kpr,Spr,Rpr,sM,Qbe,Ppr,Bpr,MQ,Ipr,Npr,qpr,lM,Hbe,jpr,Dpr,EQ,Gpr,Opr,Vpr,iM,Ube,Xpr,zpr,CQ,Wpr,Qpr,Hpr,dM,Jbe,Upr,Jpr,wQ,Ypr,Kpr,Zpr,cM,Ybe,eur,our,AQ,rur,tur,aur,fM,Kbe,nur,sur,yQ,lur,iur,dur,mM,Zbe,cur,fur,LQ,mur,gur,hur,gM,e2e,pur,uur,xQ,_ur,bur,vur,hM,o2e,Fur,Tur,$Q,Mur,Eur,Cur,pM,r2e,wur,Aur,kQ,yur,Lur,xur,uM,t2e,$ur,kur,SQ,Sur,Rur,Pur,_M,a2e,Bur,Iur,RQ,Nur,qur,jur,bM,n2e,Dur,Gur,PQ,Our,Vur,Xur,vM,s2e,zur,Wur,BQ,Qur,Hur,Uur,FM,l2e,Jur,Yur,IQ,Kur,Zur,e_r,TM,i2e,o_r,r_r,NQ,t_r,a_r,n_r,MM,d2e,s_r,l_r,qQ,i_r,d_r,c_r,EM,Lje,Hd,CM,c2e,E8,f_r,f2e,m_r,xje,Zo,C8,g_r,Ud,h_r,jQ,p_r,u_r,DQ,__r,b_r,v_r,w8,F_r,m2e,T_r,M_r,E_r,xt,A8,C_r,g2e,w_r,A_r,Jd,y_r,h2e,L_r,x_r,GQ,$_r,k_r,S_r,wM,R_r,yr,y8,P_r,p2e,B_r,I_r,en,N_r,u2e,q_r,j_r,_2e,D_r,G_r,b2e,O_r,V_r,X_r,Me,AM,v2e,z_r,W_r,OQ,Q_r,H_r,U_r,yM,F2e,J_r,Y_r,VQ,K_r,Z_r,e1r,LM,T2e,o1r,r1r,XQ,t1r,a1r,n1r,xM,M2e,s1r,l1r,zQ,i1r,d1r,c1r,$M,E2e,f1r,m1r,WQ,g1r,h1r,p1r,kM,C2e,u1r,_1r,QQ,b1r,v1r,F1r,SM,w2e,T1r,M1r,HQ,E1r,C1r,w1r,RM,A2e,A1r,y1r,UQ,L1r,x1r,$1r,PM,y2e,k1r,S1r,JQ,R1r,P1r,B1r,BM,L2e,I1r,N1r,YQ,q1r,j1r,D1r,IM,x2e,G1r,O1r,KQ,V1r,X1r,z1r,NM,$2e,W1r,Q1r,ZQ,H1r,U1r,J1r,qM,$je,Yd,jM,k2e,L8,Y1r,S2e,K1r,kje,er,x8,Z1r,Kd,e3r,eH,o3r,r3r,oH,t3r,a3r,n3r,$8,s3r,R2e,l3r,i3r,d3r,$t,k8,c3r,P2e,f3r,m3r,Zd,g3r,B2e,h3r,p3r,rH,u3r,_3r,b3r,DM,v3r,Lr,S8,F3r,I2e,T3r,M3r,on,E3r,N2e,C3r,w3r,q2e,A3r,y3r,j2e,L3r,x3r,$3r,rn,GM,D2e,k3r,S3r,tH,R3r,P3r,B3r,OM,G2e,I3r,N3r,aH,q3r,j3r,D3r,VM,O2e,G3r,O3r,nH,V3r,X3r,z3r,XM,V2e,W3r,Q3r,sH,H3r,U3r,J3r,zM,Sje,ec,WM,X2e,R8,Y3r,z2e,K3r,Rje,or,P8,Z3r,oc,ebr,lH,obr,rbr,iH,tbr,abr,nbr,B8,sbr,W2e,lbr,ibr,dbr,kt,I8,cbr,Q2e,fbr,mbr,rc,gbr,H2e,hbr,pbr,dH,ubr,_br,bbr,QM,vbr,xr,N8,Fbr,U2e,Tbr,Mbr,tn,Ebr,J2e,Cbr,wbr,Y2e,Abr,ybr,K2e,Lbr,xbr,$br,ie,HM,Z2e,kbr,Sbr,cH,Rbr,Pbr,Bbr,UM,eve,Ibr,Nbr,fH,qbr,jbr,Dbr,JM,ove,Gbr,Obr,mH,Vbr,Xbr,zbr,YM,rve,Wbr,Qbr,gH,Hbr,Ubr,Jbr,KM,tve,Ybr,Kbr,hH,Zbr,e2r,o2r,ZM,ave,r2r,t2r,pH,a2r,n2r,s2r,e4,nve,l2r,i2r,uH,d2r,c2r,f2r,o4,sve,m2r,g2r,_H,h2r,p2r,u2r,r4,lve,_2r,b2r,bH,v2r,F2r,T2r,t4,ive,M2r,E2r,vH,C2r,w2r,A2r,a4,dve,y2r,L2r,FH,x2r,$2r,k2r,n4,cve,S2r,R2r,TH,P2r,B2r,I2r,s4,fve,N2r,q2r,MH,j2r,D2r,G2r,l4,mve,O2r,V2r,EH,X2r,z2r,W2r,i4,gve,Q2r,H2r,CH,U2r,J2r,Y2r,d4,hve,K2r,Z2r,wH,evr,ovr,rvr,c4,pve,tvr,avr,AH,nvr,svr,lvr,f4,uve,ivr,dvr,yH,cvr,fvr,mvr,m4,_ve,gvr,hvr,LH,pvr,uvr,_vr,g4,bve,bvr,vvr,xH,Fvr,Tvr,Mvr,h4,Pje,tc,p4,vve,q8,Evr,Fve,Cvr,Bje,rr,j8,wvr,ac,Avr,$H,yvr,Lvr,kH,xvr,$vr,kvr,D8,Svr,Tve,Rvr,Pvr,Bvr,St,G8,Ivr,Mve,Nvr,qvr,nc,jvr,Eve,Dvr,Gvr,SH,Ovr,Vvr,Xvr,u4,zvr,$r,O8,Wvr,Cve,Qvr,Hvr,an,Uvr,wve,Jvr,Yvr,Ave,Kvr,Zvr,yve,eFr,oFr,rFr,ye,_4,Lve,tFr,aFr,RH,nFr,sFr,lFr,b4,xve,iFr,dFr,PH,cFr,fFr,mFr,v4,$ve,gFr,hFr,BH,pFr,uFr,_Fr,F4,kve,bFr,vFr,IH,FFr,TFr,MFr,T4,Sve,EFr,CFr,NH,wFr,AFr,yFr,M4,Rve,LFr,xFr,qH,$Fr,kFr,SFr,E4,Pve,RFr,PFr,jH,BFr,IFr,NFr,C4,Bve,qFr,jFr,DH,DFr,GFr,OFr,w4,Ive,VFr,XFr,GH,zFr,WFr,QFr,A4,Nve,HFr,UFr,OH,JFr,YFr,KFr,y4,Ije,sc,L4,qve,V8,ZFr,jve,eTr,Nje,tr,X8,oTr,lc,rTr,VH,tTr,aTr,XH,nTr,sTr,lTr,z8,iTr,Dve,dTr,cTr,fTr,Rt,W8,mTr,Gve,gTr,hTr,ic,pTr,Ove,uTr,_Tr,zH,bTr,vTr,FTr,x4,TTr,kr,Q8,MTr,Vve,ETr,CTr,nn,wTr,Xve,ATr,yTr,zve,LTr,xTr,Wve,$Tr,kTr,STr,oe,$4,Qve,RTr,PTr,WH,BTr,ITr,NTr,k4,Hve,qTr,jTr,QH,DTr,GTr,OTr,S4,Uve,VTr,XTr,HH,zTr,WTr,QTr,R4,Jve,HTr,UTr,UH,JTr,YTr,KTr,P4,Yve,ZTr,e7r,JH,o7r,r7r,t7r,B4,Kve,a7r,n7r,YH,s7r,l7r,i7r,I4,Zve,d7r,c7r,KH,f7r,m7r,g7r,N4,eFe,h7r,p7r,ZH,u7r,_7r,b7r,q4,oFe,v7r,F7r,eU,T7r,M7r,E7r,j4,rFe,C7r,w7r,oU,A7r,y7r,L7r,D4,tFe,x7r,$7r,rU,k7r,S7r,R7r,G4,aFe,P7r,B7r,tU,I7r,N7r,q7r,O4,nFe,j7r,D7r,aU,G7r,O7r,V7r,V4,sFe,X7r,z7r,nU,W7r,Q7r,H7r,X4,lFe,U7r,J7r,sU,Y7r,K7r,Z7r,z4,iFe,eMr,oMr,lU,rMr,tMr,aMr,W4,dFe,nMr,sMr,iU,lMr,iMr,dMr,Q4,cFe,cMr,fMr,dU,mMr,gMr,hMr,H4,fFe,pMr,uMr,cU,_Mr,bMr,vMr,U4,mFe,FMr,TMr,fU,MMr,EMr,CMr,J4,gFe,wMr,AMr,mU,yMr,LMr,xMr,Y4,hFe,$Mr,kMr,gU,SMr,RMr,PMr,K4,pFe,BMr,IMr,hU,NMr,qMr,jMr,Z4,uFe,DMr,GMr,pU,OMr,VMr,XMr,eE,_Fe,zMr,WMr,uU,QMr,HMr,UMr,oE,bFe,JMr,YMr,_U,KMr,ZMr,e4r,rE,qje,dc,tE,vFe,H8,o4r,FFe,r4r,jje,ar,U8,t4r,cc,a4r,bU,n4r,s4r,vU,l4r,i4r,d4r,J8,c4r,TFe,f4r,m4r,g4r,Pt,Y8,h4r,MFe,p4r,u4r,fc,_4r,EFe,b4r,v4r,FU,F4r,T4r,M4r,aE,E4r,Sr,K8,C4r,CFe,w4r,A4r,sn,y4r,wFe,L4r,x4r,AFe,$4r,k4r,yFe,S4r,R4r,P4r,pe,nE,LFe,B4r,I4r,TU,N4r,q4r,j4r,sE,xFe,D4r,G4r,MU,O4r,V4r,X4r,lE,$Fe,z4r,W4r,EU,Q4r,H4r,U4r,iE,kFe,J4r,Y4r,CU,K4r,Z4r,eEr,dE,SFe,oEr,rEr,wU,tEr,aEr,nEr,cE,RFe,sEr,lEr,AU,iEr,dEr,cEr,fE,PFe,fEr,mEr,yU,gEr,hEr,pEr,mE,BFe,uEr,_Er,LU,bEr,vEr,FEr,gE,IFe,TEr,MEr,xU,EEr,CEr,wEr,hE,NFe,AEr,yEr,$U,LEr,xEr,$Er,pE,qFe,kEr,SEr,kU,REr,PEr,BEr,uE,jFe,IEr,NEr,SU,qEr,jEr,DEr,_E,DFe,GEr,OEr,RU,VEr,XEr,zEr,bE,GFe,WEr,QEr,PU,HEr,UEr,JEr,vE,OFe,YEr,KEr,BU,ZEr,eCr,oCr,FE,VFe,rCr,tCr,IU,aCr,nCr,sCr,TE,XFe,lCr,iCr,NU,dCr,cCr,fCr,ME,Dje,mc,EE,zFe,Z8,mCr,WFe,gCr,Gje,nr,e9,hCr,gc,pCr,qU,uCr,_Cr,jU,bCr,vCr,FCr,o9,TCr,QFe,MCr,ECr,CCr,Bt,r9,wCr,HFe,ACr,yCr,hc,LCr,UFe,xCr,$Cr,DU,kCr,SCr,RCr,CE,PCr,Rr,t9,BCr,JFe,ICr,NCr,ln,qCr,YFe,jCr,DCr,KFe,GCr,OCr,ZFe,VCr,XCr,zCr,a9,wE,eTe,WCr,QCr,GU,HCr,UCr,JCr,AE,oTe,YCr,KCr,OU,ZCr,e5r,o5r,yE,Oje,pc,LE,rTe,n9,r5r,tTe,t5r,Vje,sr,s9,a5r,uc,n5r,VU,s5r,l5r,XU,i5r,d5r,c5r,l9,f5r,aTe,m5r,g5r,h5r,It,i9,p5r,nTe,u5r,_5r,_c,b5r,sTe,v5r,F5r,zU,T5r,M5r,E5r,xE,C5r,Pr,d9,w5r,lTe,A5r,y5r,dn,L5r,iTe,x5r,$5r,dTe,k5r,S5r,cTe,R5r,P5r,B5r,fTe,$E,mTe,I5r,N5r,WU,q5r,j5r,D5r,kE,Xje,bc,SE,gTe,c9,G5r,hTe,O5r,zje,lr,f9,V5r,vc,X5r,QU,z5r,W5r,HU,Q5r,H5r,U5r,m9,J5r,pTe,Y5r,K5r,Z5r,Nt,g9,ewr,uTe,owr,rwr,Fc,twr,_Te,awr,nwr,UU,swr,lwr,iwr,RE,dwr,Br,h9,cwr,bTe,fwr,mwr,cn,gwr,vTe,hwr,pwr,FTe,uwr,_wr,TTe,bwr,vwr,Fwr,de,PE,MTe,Twr,Mwr,JU,Ewr,Cwr,wwr,BE,ETe,Awr,ywr,YU,Lwr,xwr,$wr,IE,CTe,kwr,Swr,KU,Rwr,Pwr,Bwr,NE,wTe,Iwr,Nwr,ZU,qwr,jwr,Dwr,qE,ATe,Gwr,Owr,eJ,Vwr,Xwr,zwr,jE,yTe,Wwr,Qwr,oJ,Hwr,Uwr,Jwr,DE,LTe,Ywr,Kwr,rJ,Zwr,e0r,o0r,GE,xTe,r0r,t0r,tJ,a0r,n0r,s0r,OE,$Te,l0r,i0r,aJ,d0r,c0r,f0r,VE,kTe,m0r,g0r,nJ,h0r,p0r,u0r,XE,STe,_0r,b0r,sJ,v0r,F0r,T0r,zE,RTe,M0r,E0r,lJ,C0r,w0r,A0r,WE,PTe,y0r,L0r,iJ,x0r,$0r,k0r,QE,BTe,S0r,R0r,dJ,P0r,B0r,I0r,HE,ITe,N0r,q0r,cJ,j0r,D0r,G0r,UE,NTe,O0r,V0r,fJ,X0r,z0r,W0r,JE,qTe,Q0r,H0r,mJ,U0r,J0r,Y0r,YE,jTe,K0r,Z0r,gJ,e6r,o6r,r6r,KE,DTe,t6r,a6r,hJ,n6r,s6r,l6r,ZE,GTe,i6r,d6r,pJ,c6r,f6r,m6r,eC,Wje,Tc,oC,OTe,p9,g6r,VTe,h6r,Qje,ir,u9,p6r,Mc,u6r,uJ,_6r,b6r,_J,v6r,F6r,T6r,_9,M6r,XTe,E6r,C6r,w6r,qt,b9,A6r,zTe,y6r,L6r,Ec,x6r,WTe,$6r,k6r,bJ,S6r,R6r,P6r,rC,B6r,Ir,v9,I6r,QTe,N6r,q6r,fn,j6r,HTe,D6r,G6r,UTe,O6r,V6r,JTe,X6r,z6r,W6r,ce,tC,YTe,Q6r,H6r,vJ,U6r,J6r,Y6r,aC,KTe,K6r,Z6r,FJ,eAr,oAr,rAr,nC,ZTe,tAr,aAr,TJ,nAr,sAr,lAr,sC,e7e,iAr,dAr,MJ,cAr,fAr,mAr,lC,o7e,gAr,hAr,EJ,pAr,uAr,_Ar,iC,r7e,bAr,vAr,CJ,FAr,TAr,MAr,dC,t7e,EAr,CAr,wJ,wAr,AAr,yAr,cC,a7e,LAr,xAr,AJ,$Ar,kAr,SAr,fC,n7e,RAr,PAr,yJ,BAr,IAr,NAr,mC,s7e,qAr,jAr,LJ,DAr,GAr,OAr,gC,l7e,VAr,XAr,xJ,zAr,WAr,QAr,hC,i7e,HAr,UAr,$J,JAr,YAr,KAr,pC,d7e,ZAr,eyr,kJ,oyr,ryr,tyr,uC,c7e,ayr,nyr,SJ,syr,lyr,iyr,_C,f7e,dyr,cyr,RJ,fyr,myr,gyr,bC,m7e,hyr,pyr,PJ,uyr,_yr,byr,vC,g7e,vyr,Fyr,BJ,Tyr,Myr,Eyr,FC,h7e,Cyr,wyr,IJ,Ayr,yyr,Lyr,TC,p7e,xyr,$yr,NJ,kyr,Syr,Ryr,MC,u7e,Pyr,Byr,qJ,Iyr,Nyr,qyr,EC,Hje,Cc,CC,_7e,F9,jyr,b7e,Dyr,Uje,dr,T9,Gyr,wc,Oyr,jJ,Vyr,Xyr,DJ,zyr,Wyr,Qyr,M9,Hyr,v7e,Uyr,Jyr,Yyr,jt,E9,Kyr,F7e,Zyr,eLr,Ac,oLr,T7e,rLr,tLr,GJ,aLr,nLr,sLr,wC,lLr,Nr,C9,iLr,M7e,dLr,cLr,mn,fLr,E7e,mLr,gLr,C7e,hLr,pLr,w7e,uLr,_Lr,bLr,A7e,AC,y7e,vLr,FLr,OJ,TLr,MLr,ELr,yC,Jje,yc,LC,L7e,w9,CLr,x7e,wLr,Yje,cr,A9,ALr,Lc,yLr,VJ,LLr,xLr,XJ,$Lr,kLr,SLr,y9,RLr,$7e,PLr,BLr,ILr,Dt,L9,NLr,k7e,qLr,jLr,xc,DLr,S7e,GLr,OLr,zJ,VLr,XLr,zLr,xC,WLr,qr,x9,QLr,R7e,HLr,ULr,gn,JLr,P7e,YLr,KLr,B7e,ZLr,e8r,I7e,o8r,r8r,t8r,N7e,$C,q7e,a8r,n8r,WJ,s8r,l8r,i8r,kC,Kje,$c,SC,j7e,$9,d8r,D7e,c8r,Zje,fr,k9,f8r,kc,m8r,QJ,g8r,h8r,HJ,p8r,u8r,_8r,S9,b8r,G7e,v8r,F8r,T8r,Gt,R9,M8r,O7e,E8r,C8r,Sc,w8r,V7e,A8r,y8r,UJ,L8r,x8r,$8r,RC,k8r,jr,P9,S8r,X7e,R8r,P8r,hn,B8r,z7e,I8r,N8r,W7e,q8r,j8r,Q7e,D8r,G8r,O8r,te,PC,H7e,V8r,X8r,JJ,z8r,W8r,Q8r,BC,U7e,H8r,U8r,YJ,J8r,Y8r,K8r,IC,J7e,Z8r,e9r,KJ,o9r,r9r,t9r,NC,Y7e,a9r,n9r,ZJ,s9r,l9r,i9r,qC,K7e,d9r,c9r,eY,f9r,m9r,g9r,jC,Z7e,h9r,p9r,oY,u9r,_9r,b9r,DC,eMe,v9r,F9r,rY,T9r,M9r,E9r,GC,oMe,C9r,w9r,tY,A9r,y9r,L9r,OC,rMe,x9r,$9r,aY,k9r,S9r,R9r,VC,tMe,P9r,B9r,nY,I9r,N9r,q9r,XC,aMe,j9r,D9r,sY,G9r,O9r,V9r,zC,nMe,X9r,z9r,lY,W9r,Q9r,H9r,WC,sMe,U9r,J9r,iY,Y9r,K9r,Z9r,QC,lMe,exr,oxr,dY,rxr,txr,axr,HC,iMe,nxr,sxr,cY,lxr,ixr,dxr,UC,dMe,cxr,fxr,fY,mxr,gxr,hxr,JC,cMe,pxr,uxr,mY,_xr,bxr,vxr,YC,fMe,Fxr,Txr,gY,Mxr,Exr,Cxr,KC,mMe,wxr,Axr,hY,yxr,Lxr,xxr,ZC,gMe,$xr,kxr,pY,Sxr,Rxr,Pxr,e5,hMe,Bxr,Ixr,uY,Nxr,qxr,jxr,o5,pMe,Dxr,Gxr,_Y,Oxr,Vxr,Xxr,r5,uMe,zxr,Wxr,bY,Qxr,Hxr,Uxr,t5,_Me,Jxr,Yxr,vY,Kxr,Zxr,e$r,a5,bMe,o$r,r$r,FY,t$r,a$r,n$r,n5,eDe,Rc,s5,vMe,B9,s$r,FMe,l$r,oDe,mr,I9,i$r,Pc,d$r,TY,c$r,f$r,MY,m$r,g$r,h$r,N9,p$r,TMe,u$r,_$r,b$r,Ot,q9,v$r,MMe,F$r,T$r,Bc,M$r,EMe,E$r,C$r,EY,w$r,A$r,y$r,l5,L$r,Dr,j9,x$r,CMe,$$r,k$r,pn,S$r,wMe,R$r,P$r,AMe,B$r,I$r,yMe,N$r,q$r,j$r,Re,i5,LMe,D$r,G$r,CY,O$r,V$r,X$r,d5,xMe,z$r,W$r,wY,Q$r,H$r,U$r,c5,$Me,J$r,Y$r,AY,K$r,Z$r,ekr,f5,kMe,okr,rkr,yY,tkr,akr,nkr,m5,SMe,skr,lkr,LY,ikr,dkr,ckr,g5,RMe,fkr,mkr,xY,gkr,hkr,pkr,h5,PMe,ukr,_kr,$Y,bkr,vkr,Fkr,p5,BMe,Tkr,Mkr,kY,Ekr,Ckr,wkr,u5,IMe,Akr,ykr,SY,Lkr,xkr,$kr,_5,rDe,Ic,b5,NMe,D9,kkr,qMe,Skr,tDe,gr,G9,Rkr,Nc,Pkr,RY,Bkr,Ikr,PY,Nkr,qkr,jkr,O9,Dkr,jMe,Gkr,Okr,Vkr,Vt,V9,Xkr,DMe,zkr,Wkr,qc,Qkr,GMe,Hkr,Ukr,BY,Jkr,Ykr,Kkr,v5,Zkr,Gr,X9,eSr,OMe,oSr,rSr,un,tSr,VMe,aSr,nSr,XMe,sSr,lSr,zMe,iSr,dSr,cSr,Ee,F5,WMe,fSr,mSr,IY,gSr,hSr,pSr,T5,QMe,uSr,_Sr,NY,bSr,vSr,FSr,M5,HMe,TSr,MSr,qY,ESr,CSr,wSr,E5,UMe,ASr,ySr,jY,LSr,xSr,$Sr,C5,JMe,kSr,SSr,DY,RSr,PSr,BSr,w5,YMe,ISr,NSr,GY,qSr,jSr,DSr,A5,KMe,GSr,OSr,OY,VSr,XSr,zSr,y5,ZMe,WSr,QSr,VY,HSr,USr,JSr,L5,e4e,YSr,KSr,XY,ZSr,eRr,oRr,x5,o4e,rRr,tRr,zY,aRr,nRr,sRr,$5,r4e,lRr,iRr,WY,dRr,cRr,fRr,k5,t4e,mRr,gRr,QY,hRr,pRr,uRr,S5,aDe,jc,R5,a4e,z9,_Rr,n4e,bRr,nDe,hr,W9,vRr,Dc,FRr,HY,TRr,MRr,UY,ERr,CRr,wRr,Q9,ARr,s4e,yRr,LRr,xRr,Xt,H9,$Rr,l4e,kRr,SRr,Gc,RRr,i4e,PRr,BRr,JY,IRr,NRr,qRr,P5,jRr,Or,U9,DRr,d4e,GRr,ORr,_n,VRr,c4e,XRr,zRr,f4e,WRr,QRr,m4e,HRr,URr,JRr,Le,B5,g4e,YRr,KRr,YY,ZRr,ePr,oPr,I5,h4e,rPr,tPr,KY,aPr,nPr,sPr,N5,p4e,lPr,iPr,ZY,dPr,cPr,fPr,q5,u4e,mPr,gPr,eK,hPr,pPr,uPr,j5,_4e,_Pr,bPr,oK,vPr,FPr,TPr,D5,b4e,MPr,EPr,rK,CPr,wPr,APr,G5,v4e,yPr,LPr,tK,xPr,$Pr,kPr,O5,F4e,SPr,RPr,aK,PPr,BPr,IPr,V5,T4e,NPr,qPr,nK,jPr,DPr,GPr,X5,M4e,OPr,VPr,sK,XPr,zPr,WPr,z5,sDe,Oc,W5,E4e,J9,QPr,C4e,HPr,lDe,pr,Y9,UPr,Vc,JPr,lK,YPr,KPr,iK,ZPr,eBr,oBr,K9,rBr,w4e,tBr,aBr,nBr,zt,Z9,sBr,A4e,lBr,iBr,Xc,dBr,y4e,cBr,fBr,dK,mBr,gBr,hBr,Q5,pBr,Vr,ex,uBr,L4e,_Br,bBr,bn,vBr,x4e,FBr,TBr,$4e,MBr,EBr,k4e,CBr,wBr,ABr,Pe,H5,S4e,yBr,LBr,cK,xBr,$Br,kBr,U5,R4e,SBr,RBr,fK,PBr,BBr,IBr,J5,P4e,NBr,qBr,mK,jBr,DBr,GBr,Y5,B4e,OBr,VBr,gK,XBr,zBr,WBr,K5,I4e,QBr,HBr,hK,UBr,JBr,YBr,Z5,N4e,KBr,ZBr,pK,eIr,oIr,rIr,ew,q4e,tIr,aIr,uK,nIr,sIr,lIr,ow,j4e,iIr,dIr,_K,cIr,fIr,mIr,rw,D4e,gIr,hIr,bK,pIr,uIr,_Ir,tw,iDe,zc,aw,G4e,ox,bIr,O4e,vIr,dDe,ur,rx,FIr,Wc,TIr,vK,MIr,EIr,FK,CIr,wIr,AIr,tx,yIr,V4e,LIr,xIr,$Ir,Wt,ax,kIr,X4e,SIr,RIr,Qc,PIr,z4e,BIr,IIr,TK,NIr,qIr,jIr,nw,DIr,Xr,nx,GIr,W4e,OIr,VIr,vn,XIr,Q4e,zIr,WIr,H4e,QIr,HIr,U4e,UIr,JIr,YIr,xe,sw,J4e,KIr,ZIr,MK,eNr,oNr,rNr,lw,Y4e,tNr,aNr,EK,nNr,sNr,lNr,iw,K4e,iNr,dNr,CK,cNr,fNr,mNr,dw,Z4e,gNr,hNr,wK,pNr,uNr,_Nr,cw,eEe,bNr,vNr,AK,FNr,TNr,MNr,fw,oEe,ENr,CNr,yK,wNr,ANr,yNr,mw,rEe,LNr,xNr,LK,$Nr,kNr,SNr,gw,tEe,RNr,PNr,xK,BNr,INr,NNr,hw,aEe,qNr,jNr,$K,DNr,GNr,ONr,pw,nEe,VNr,XNr,kK,zNr,WNr,QNr,uw,cDe,Hc,_w,sEe,sx,HNr,lEe,UNr,fDe,_r,lx,JNr,Uc,YNr,SK,KNr,ZNr,RK,eqr,oqr,rqr,ix,tqr,iEe,aqr,nqr,sqr,Qt,dx,lqr,dEe,iqr,dqr,Jc,cqr,cEe,fqr,mqr,PK,gqr,hqr,pqr,bw,uqr,zr,cx,_qr,fEe,bqr,vqr,Fn,Fqr,mEe,Tqr,Mqr,gEe,Eqr,Cqr,hEe,wqr,Aqr,yqr,$e,vw,pEe,Lqr,xqr,BK,$qr,kqr,Sqr,Fw,uEe,Rqr,Pqr,IK,Bqr,Iqr,Nqr,Tw,_Ee,qqr,jqr,NK,Dqr,Gqr,Oqr,Mw,bEe,Vqr,Xqr,qK,zqr,Wqr,Qqr,Ew,vEe,Hqr,Uqr,jK,Jqr,Yqr,Kqr,Cw,FEe,Zqr,ejr,DK,ojr,rjr,tjr,ww,TEe,ajr,njr,GK,sjr,ljr,ijr,Aw,MEe,djr,cjr,OK,fjr,mjr,gjr,yw,EEe,hjr,pjr,VK,ujr,_jr,bjr,Lw,CEe,vjr,Fjr,XK,Tjr,Mjr,Ejr,xw,mDe,Yc,$w,wEe,fx,Cjr,AEe,wjr,gDe,br,mx,Ajr,Kc,yjr,zK,Ljr,xjr,WK,$jr,kjr,Sjr,gx,Rjr,yEe,Pjr,Bjr,Ijr,Ht,hx,Njr,LEe,qjr,jjr,Zc,Djr,xEe,Gjr,Ojr,QK,Vjr,Xjr,zjr,kw,Wjr,Wr,px,Qjr,$Ee,Hjr,Ujr,Tn,Jjr,kEe,Yjr,Kjr,SEe,Zjr,eDr,REe,oDr,rDr,tDr,De,Sw,PEe,aDr,nDr,HK,sDr,lDr,iDr,Rw,BEe,dDr,cDr,UK,fDr,mDr,gDr,Pw,IEe,hDr,pDr,JK,uDr,_Dr,bDr,Bw,NEe,vDr,FDr,YK,TDr,MDr,EDr,Iw,qEe,CDr,wDr,KK,ADr,yDr,LDr,Nw,jEe,xDr,$Dr,ZK,kDr,SDr,RDr,qw,DEe,PDr,BDr,eZ,IDr,NDr,qDr,jw,GEe,jDr,DDr,oZ,GDr,ODr,VDr,Dw,hDe,ef,Gw,OEe,ux,XDr,VEe,zDr,pDe,vr,_x,WDr,of,QDr,rZ,HDr,UDr,tZ,JDr,YDr,KDr,bx,ZDr,XEe,eGr,oGr,rGr,Ut,vx,tGr,zEe,aGr,nGr,rf,sGr,WEe,lGr,iGr,aZ,dGr,cGr,fGr,Ow,mGr,Qr,Fx,gGr,QEe,hGr,pGr,Mn,uGr,HEe,_Gr,bGr,UEe,vGr,FGr,JEe,TGr,MGr,EGr,Ge,Vw,YEe,CGr,wGr,nZ,AGr,yGr,LGr,Xw,KEe,xGr,$Gr,sZ,kGr,SGr,RGr,zw,ZEe,PGr,BGr,lZ,IGr,NGr,qGr,Ww,eCe,jGr,DGr,iZ,GGr,OGr,VGr,Qw,oCe,XGr,zGr,dZ,WGr,QGr,HGr,Hw,rCe,UGr,JGr,cZ,YGr,KGr,ZGr,Uw,tCe,eOr,oOr,fZ,rOr,tOr,aOr,Jw,aCe,nOr,sOr,mZ,lOr,iOr,dOr,Yw,uDe,tf,Kw,nCe,Tx,cOr,sCe,fOr,_De,Fr,Mx,mOr,af,gOr,gZ,hOr,pOr,hZ,uOr,_Or,bOr,Ex,vOr,lCe,FOr,TOr,MOr,Jt,Cx,EOr,iCe,COr,wOr,nf,AOr,dCe,yOr,LOr,pZ,xOr,$Or,kOr,Zw,SOr,Hr,wx,ROr,cCe,POr,BOr,En,IOr,fCe,NOr,qOr,mCe,jOr,DOr,gCe,GOr,OOr,VOr,hCe,e0,pCe,XOr,zOr,uZ,WOr,QOr,HOr,o0,bDe,sf,r0,uCe,Ax,UOr,_Ce,JOr,vDe,Tr,yx,YOr,lf,KOr,_Z,ZOr,eVr,bZ,oVr,rVr,tVr,Lx,aVr,bCe,nVr,sVr,lVr,Yt,xx,iVr,vCe,dVr,cVr,df,fVr,FCe,mVr,gVr,vZ,hVr,pVr,uVr,t0,_Vr,Ur,$x,bVr,TCe,vVr,FVr,Cn,TVr,MCe,MVr,EVr,ECe,CVr,wVr,CCe,AVr,yVr,LVr,kx,a0,wCe,xVr,$Vr,FZ,kVr,SVr,RVr,n0,ACe,PVr,BVr,TZ,IVr,NVr,qVr,s0,FDe,cf,l0,yCe,Sx,jVr,LCe,DVr,TDe,Mr,Rx,GVr,ff,OVr,MZ,VVr,XVr,EZ,zVr,WVr,QVr,Px,HVr,xCe,UVr,JVr,YVr,Kt,Bx,KVr,$Ce,ZVr,eXr,mf,oXr,kCe,rXr,tXr,CZ,aXr,nXr,sXr,i0,lXr,Jr,Ix,iXr,SCe,dXr,cXr,wn,fXr,RCe,mXr,gXr,PCe,hXr,pXr,BCe,uXr,_Xr,bXr,ICe,d0,NCe,vXr,FXr,wZ,TXr,MXr,EXr,c0,MDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SA=new re({}),RA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new CXr({props:{warning:!0,$$slots:{default:[ukt]},$$scope:{ctx:L}}}),PA=new re({}),BA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L587"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L733"}}),DA=new re({}),GA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L391"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17313/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L405"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L601"}}),WA=new re({}),QA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new CXr({props:{$$slots:{default:[vkt]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L89"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L103"}}),lp=new CXr({props:{$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),ip=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L256"}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L737"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),fp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),l_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L744"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),d_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Z_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L759"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L766"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L773"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L782"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L816"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L823"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L809"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L791"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L798"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L832"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L871"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),pL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L878"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L901"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L885"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L892"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L910"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L917"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L864"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L839"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L846"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L855"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),ux=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),Ax=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),uf=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),LA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),xA=o("AutoConfig"),Ln=o(", "),xn=a("a"),$A=o("AutoModel"),ui=o(`, and
`),$n=a("a"),kA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),Y$=o("will create a model that is an instance of "),bi=a("a"),K$=o("BertModel"),Z$=o("."),Eo=l(),wa=a("p"),ek=o("There is one class of "),vf=a("code"),ok=o("AutoModel"),$Oe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vqe=l(),vi=a("h2"),Ff=a("a"),boe=a("span"),F(SA.$$.fragment),kOe=l(),voe=a("span"),SOe=o("Extending the Auto Classes"),Fqe=l(),kn=a("p"),ROe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Foe=a("code"),POe=o("NewModel"),BOe=o(", make sure you have a "),Toe=a("code"),IOe=o("NewModelConfig"),NOe=o(` then you can add those to the auto
classes like this:`),Tqe=l(),F(RA.$$.fragment),Mqe=l(),rk=a("p"),qOe=o("You will then be able to use the auto classes like you would usually do!"),Eqe=l(),F(Tf.$$.fragment),Cqe=l(),Fi=a("h2"),Mf=a("a"),Moe=a("span"),F(PA.$$.fragment),jOe=l(),Eoe=a("span"),DOe=o("AutoConfig"),wqe=l(),Co=a("div"),F(BA.$$.fragment),GOe=l(),IA=a("p"),OOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),tk=a("a"),VOe=o("from_pretrained()"),XOe=o(" class method."),zOe=l(),NA=a("p"),WOe=o("This class cannot be instantiated directly using "),Coe=a("code"),QOe=o("__init__()"),HOe=o(" (throws an error)."),UOe=l(),Er=a("div"),F(qA.$$.fragment),JOe=l(),woe=a("p"),YOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),KOe=l(),Ti=a("p"),ZOe=o("The configuration class to instantiate is selected based on the "),Aoe=a("code"),eVe=o("model_type"),oVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yoe=a("code"),rVe=o("pretrained_model_name_or_path"),tVe=o(":"),aVe=l(),A=a("ul"),Ef=a("li"),Loe=a("strong"),nVe=o("albert"),sVe=o(" \u2014 "),ak=a("a"),lVe=o("AlbertConfig"),iVe=o(" (ALBERT model)"),dVe=l(),Cf=a("li"),xoe=a("strong"),cVe=o("bart"),fVe=o(" \u2014 "),nk=a("a"),mVe=o("BartConfig"),gVe=o(" (BART model)"),hVe=l(),wf=a("li"),$oe=a("strong"),pVe=o("beit"),uVe=o(" \u2014 "),sk=a("a"),_Ve=o("BeitConfig"),bVe=o(" (BEiT model)"),vVe=l(),Af=a("li"),koe=a("strong"),FVe=o("bert"),TVe=o(" \u2014 "),lk=a("a"),MVe=o("BertConfig"),EVe=o(" (BERT model)"),CVe=l(),yf=a("li"),Soe=a("strong"),wVe=o("bert-generation"),AVe=o(" \u2014 "),ik=a("a"),yVe=o("BertGenerationConfig"),LVe=o(" (Bert Generation model)"),xVe=l(),Lf=a("li"),Roe=a("strong"),$Ve=o("big_bird"),kVe=o(" \u2014 "),dk=a("a"),SVe=o("BigBirdConfig"),RVe=o(" (BigBird model)"),PVe=l(),xf=a("li"),Poe=a("strong"),BVe=o("bigbird_pegasus"),IVe=o(" \u2014 "),ck=a("a"),NVe=o("BigBirdPegasusConfig"),qVe=o(" (BigBirdPegasus model)"),jVe=l(),$f=a("li"),Boe=a("strong"),DVe=o("blenderbot"),GVe=o(" \u2014 "),fk=a("a"),OVe=o("BlenderbotConfig"),VVe=o(" (Blenderbot model)"),XVe=l(),kf=a("li"),Ioe=a("strong"),zVe=o("blenderbot-small"),WVe=o(" \u2014 "),mk=a("a"),QVe=o("BlenderbotSmallConfig"),HVe=o(" (BlenderbotSmall model)"),UVe=l(),Sf=a("li"),Noe=a("strong"),JVe=o("camembert"),YVe=o(" \u2014 "),gk=a("a"),KVe=o("CamembertConfig"),ZVe=o(" (CamemBERT model)"),eXe=l(),Rf=a("li"),qoe=a("strong"),oXe=o("canine"),rXe=o(" \u2014 "),hk=a("a"),tXe=o("CanineConfig"),aXe=o(" (Canine model)"),nXe=l(),Pf=a("li"),joe=a("strong"),sXe=o("clip"),lXe=o(" \u2014 "),pk=a("a"),iXe=o("CLIPConfig"),dXe=o(" (CLIP model)"),cXe=l(),Bf=a("li"),Doe=a("strong"),fXe=o("convbert"),mXe=o(" \u2014 "),uk=a("a"),gXe=o("ConvBertConfig"),hXe=o(" (ConvBERT model)"),pXe=l(),If=a("li"),Goe=a("strong"),uXe=o("convnext"),_Xe=o(" \u2014 "),_k=a("a"),bXe=o("ConvNextConfig"),vXe=o(" (ConvNext model)"),FXe=l(),Nf=a("li"),Ooe=a("strong"),TXe=o("ctrl"),MXe=o(" \u2014 "),bk=a("a"),EXe=o("CTRLConfig"),CXe=o(" (CTRL model)"),wXe=l(),qf=a("li"),Voe=a("strong"),AXe=o("cvt"),yXe=o(" \u2014 "),vk=a("a"),LXe=o("CvtConfig"),xXe=o(" (CvT model)"),$Xe=l(),jf=a("li"),Xoe=a("strong"),kXe=o("data2vec-audio"),SXe=o(" \u2014 "),Fk=a("a"),RXe=o("Data2VecAudioConfig"),PXe=o(" (Data2VecAudio model)"),BXe=l(),Df=a("li"),zoe=a("strong"),IXe=o("data2vec-text"),NXe=o(" \u2014 "),Tk=a("a"),qXe=o("Data2VecTextConfig"),jXe=o(" (Data2VecText model)"),DXe=l(),Gf=a("li"),Woe=a("strong"),GXe=o("data2vec-vision"),OXe=o(" \u2014 "),Mk=a("a"),VXe=o("Data2VecVisionConfig"),XXe=o(" (Data2VecVision model)"),zXe=l(),Of=a("li"),Qoe=a("strong"),WXe=o("deberta"),QXe=o(" \u2014 "),Ek=a("a"),HXe=o("DebertaConfig"),UXe=o(" (DeBERTa model)"),JXe=l(),Vf=a("li"),Hoe=a("strong"),YXe=o("deberta-v2"),KXe=o(" \u2014 "),Ck=a("a"),ZXe=o("DebertaV2Config"),eze=o(" (DeBERTa-v2 model)"),oze=l(),Xf=a("li"),Uoe=a("strong"),rze=o("decision_transformer"),tze=o(" \u2014 "),wk=a("a"),aze=o("DecisionTransformerConfig"),nze=o(" (Decision Transformer model)"),sze=l(),zf=a("li"),Joe=a("strong"),lze=o("deit"),ize=o(" \u2014 "),Ak=a("a"),dze=o("DeiTConfig"),cze=o(" (DeiT model)"),fze=l(),Wf=a("li"),Yoe=a("strong"),mze=o("detr"),gze=o(" \u2014 "),yk=a("a"),hze=o("DetrConfig"),pze=o(" (DETR model)"),uze=l(),Qf=a("li"),Koe=a("strong"),_ze=o("distilbert"),bze=o(" \u2014 "),Lk=a("a"),vze=o("DistilBertConfig"),Fze=o(" (DistilBERT model)"),Tze=l(),Hf=a("li"),Zoe=a("strong"),Mze=o("dpr"),Eze=o(" \u2014 "),xk=a("a"),Cze=o("DPRConfig"),wze=o(" (DPR model)"),Aze=l(),Uf=a("li"),ere=a("strong"),yze=o("dpt"),Lze=o(" \u2014 "),$k=a("a"),xze=o("DPTConfig"),$ze=o(" (DPT model)"),kze=l(),Jf=a("li"),ore=a("strong"),Sze=o("electra"),Rze=o(" \u2014 "),kk=a("a"),Pze=o("ElectraConfig"),Bze=o(" (ELECTRA model)"),Ize=l(),Yf=a("li"),rre=a("strong"),Nze=o("encoder-decoder"),qze=o(" \u2014 "),Sk=a("a"),jze=o("EncoderDecoderConfig"),Dze=o(" (Encoder decoder model)"),Gze=l(),Kf=a("li"),tre=a("strong"),Oze=o("flaubert"),Vze=o(" \u2014 "),Rk=a("a"),Xze=o("FlaubertConfig"),zze=o(" (FlauBERT model)"),Wze=l(),Zf=a("li"),are=a("strong"),Qze=o("flava"),Hze=o(" \u2014 "),Pk=a("a"),Uze=o("FlavaConfig"),Jze=o(" (Flava model)"),Yze=l(),em=a("li"),nre=a("strong"),Kze=o("fnet"),Zze=o(" \u2014 "),Bk=a("a"),eWe=o("FNetConfig"),oWe=o(" (FNet model)"),rWe=l(),om=a("li"),sre=a("strong"),tWe=o("fsmt"),aWe=o(" \u2014 "),Ik=a("a"),nWe=o("FSMTConfig"),sWe=o(" (FairSeq Machine-Translation model)"),lWe=l(),rm=a("li"),lre=a("strong"),iWe=o("funnel"),dWe=o(" \u2014 "),Nk=a("a"),cWe=o("FunnelConfig"),fWe=o(" (Funnel Transformer model)"),mWe=l(),tm=a("li"),ire=a("strong"),gWe=o("glpn"),hWe=o(" \u2014 "),qk=a("a"),pWe=o("GLPNConfig"),uWe=o(" (GLPN model)"),_We=l(),am=a("li"),dre=a("strong"),bWe=o("gpt2"),vWe=o(" \u2014 "),jk=a("a"),FWe=o("GPT2Config"),TWe=o(" (OpenAI GPT-2 model)"),MWe=l(),nm=a("li"),cre=a("strong"),EWe=o("gpt_neo"),CWe=o(" \u2014 "),Dk=a("a"),wWe=o("GPTNeoConfig"),AWe=o(" (GPT Neo model)"),yWe=l(),sm=a("li"),fre=a("strong"),LWe=o("gpt_neox"),xWe=o(" \u2014 "),Gk=a("a"),$We=o("GPTNeoXConfig"),kWe=o(" (GPT NeoX model)"),SWe=l(),lm=a("li"),mre=a("strong"),RWe=o("gptj"),PWe=o(" \u2014 "),Ok=a("a"),BWe=o("GPTJConfig"),IWe=o(" (GPT-J model)"),NWe=l(),im=a("li"),gre=a("strong"),qWe=o("groupvit"),jWe=o(" \u2014 "),Vk=a("a"),DWe=o("GroupViTConfig"),GWe=o(" (GroupViT model)"),OWe=l(),dm=a("li"),hre=a("strong"),VWe=o("hubert"),XWe=o(" \u2014 "),Xk=a("a"),zWe=o("HubertConfig"),WWe=o(" (Hubert model)"),QWe=l(),cm=a("li"),pre=a("strong"),HWe=o("ibert"),UWe=o(" \u2014 "),zk=a("a"),JWe=o("IBertConfig"),YWe=o(" (I-BERT model)"),KWe=l(),fm=a("li"),ure=a("strong"),ZWe=o("imagegpt"),eQe=o(" \u2014 "),Wk=a("a"),oQe=o("ImageGPTConfig"),rQe=o(" (ImageGPT model)"),tQe=l(),mm=a("li"),_re=a("strong"),aQe=o("layoutlm"),nQe=o(" \u2014 "),Qk=a("a"),sQe=o("LayoutLMConfig"),lQe=o(" (LayoutLM model)"),iQe=l(),gm=a("li"),bre=a("strong"),dQe=o("layoutlmv2"),cQe=o(" \u2014 "),Hk=a("a"),fQe=o("LayoutLMv2Config"),mQe=o(" (LayoutLMv2 model)"),gQe=l(),hm=a("li"),vre=a("strong"),hQe=o("layoutlmv3"),pQe=o(" \u2014 "),Uk=a("a"),uQe=o("LayoutLMv3Config"),_Qe=o(" (LayoutLMv3 model)"),bQe=l(),pm=a("li"),Fre=a("strong"),vQe=o("led"),FQe=o(" \u2014 "),Jk=a("a"),TQe=o("LEDConfig"),MQe=o(" (LED model)"),EQe=l(),um=a("li"),Tre=a("strong"),CQe=o("longformer"),wQe=o(" \u2014 "),Yk=a("a"),AQe=o("LongformerConfig"),yQe=o(" (Longformer model)"),LQe=l(),_m=a("li"),Mre=a("strong"),xQe=o("luke"),$Qe=o(" \u2014 "),Kk=a("a"),kQe=o("LukeConfig"),SQe=o(" (LUKE model)"),RQe=l(),bm=a("li"),Ere=a("strong"),PQe=o("lxmert"),BQe=o(" \u2014 "),Zk=a("a"),IQe=o("LxmertConfig"),NQe=o(" (LXMERT model)"),qQe=l(),vm=a("li"),Cre=a("strong"),jQe=o("m2m_100"),DQe=o(" \u2014 "),eS=a("a"),GQe=o("M2M100Config"),OQe=o(" (M2M100 model)"),VQe=l(),Fm=a("li"),wre=a("strong"),XQe=o("marian"),zQe=o(" \u2014 "),oS=a("a"),WQe=o("MarianConfig"),QQe=o(" (Marian model)"),HQe=l(),Tm=a("li"),Are=a("strong"),UQe=o("maskformer"),JQe=o(" \u2014 "),rS=a("a"),YQe=o("MaskFormerConfig"),KQe=o(" (MaskFormer model)"),ZQe=l(),Mm=a("li"),yre=a("strong"),eHe=o("mbart"),oHe=o(" \u2014 "),tS=a("a"),rHe=o("MBartConfig"),tHe=o(" (mBART model)"),aHe=l(),Em=a("li"),Lre=a("strong"),nHe=o("megatron-bert"),sHe=o(" \u2014 "),aS=a("a"),lHe=o("MegatronBertConfig"),iHe=o(" (MegatronBert model)"),dHe=l(),Cm=a("li"),xre=a("strong"),cHe=o("mobilebert"),fHe=o(" \u2014 "),nS=a("a"),mHe=o("MobileBertConfig"),gHe=o(" (MobileBERT model)"),hHe=l(),wm=a("li"),$re=a("strong"),pHe=o("mpnet"),uHe=o(" \u2014 "),sS=a("a"),_He=o("MPNetConfig"),bHe=o(" (MPNet model)"),vHe=l(),Am=a("li"),kre=a("strong"),FHe=o("mt5"),THe=o(" \u2014 "),lS=a("a"),MHe=o("MT5Config"),EHe=o(" (mT5 model)"),CHe=l(),ym=a("li"),Sre=a("strong"),wHe=o("nystromformer"),AHe=o(" \u2014 "),iS=a("a"),yHe=o("NystromformerConfig"),LHe=o(" (Nystromformer model)"),xHe=l(),Lm=a("li"),Rre=a("strong"),$He=o("openai-gpt"),kHe=o(" \u2014 "),dS=a("a"),SHe=o("OpenAIGPTConfig"),RHe=o(" (OpenAI GPT model)"),PHe=l(),xm=a("li"),Pre=a("strong"),BHe=o("opt"),IHe=o(" \u2014 "),cS=a("a"),NHe=o("OPTConfig"),qHe=o(" (OPT model)"),jHe=l(),$m=a("li"),Bre=a("strong"),DHe=o("pegasus"),GHe=o(" \u2014 "),fS=a("a"),OHe=o("PegasusConfig"),VHe=o(" (Pegasus model)"),XHe=l(),km=a("li"),Ire=a("strong"),zHe=o("perceiver"),WHe=o(" \u2014 "),mS=a("a"),QHe=o("PerceiverConfig"),HHe=o(" (Perceiver model)"),UHe=l(),Sm=a("li"),Nre=a("strong"),JHe=o("plbart"),YHe=o(" \u2014 "),gS=a("a"),KHe=o("PLBartConfig"),ZHe=o(" (PLBart model)"),eUe=l(),Rm=a("li"),qre=a("strong"),oUe=o("poolformer"),rUe=o(" \u2014 "),hS=a("a"),tUe=o("PoolFormerConfig"),aUe=o(" (PoolFormer model)"),nUe=l(),Pm=a("li"),jre=a("strong"),sUe=o("prophetnet"),lUe=o(" \u2014 "),pS=a("a"),iUe=o("ProphetNetConfig"),dUe=o(" (ProphetNet model)"),cUe=l(),Bm=a("li"),Dre=a("strong"),fUe=o("qdqbert"),mUe=o(" \u2014 "),uS=a("a"),gUe=o("QDQBertConfig"),hUe=o(" (QDQBert model)"),pUe=l(),Im=a("li"),Gre=a("strong"),uUe=o("rag"),_Ue=o(" \u2014 "),_S=a("a"),bUe=o("RagConfig"),vUe=o(" (RAG model)"),FUe=l(),Nm=a("li"),Ore=a("strong"),TUe=o("realm"),MUe=o(" \u2014 "),bS=a("a"),EUe=o("RealmConfig"),CUe=o(" (Realm model)"),wUe=l(),qm=a("li"),Vre=a("strong"),AUe=o("reformer"),yUe=o(" \u2014 "),vS=a("a"),LUe=o("ReformerConfig"),xUe=o(" (Reformer model)"),$Ue=l(),jm=a("li"),Xre=a("strong"),kUe=o("regnet"),SUe=o(" \u2014 "),FS=a("a"),RUe=o("RegNetConfig"),PUe=o(" (RegNet model)"),BUe=l(),Dm=a("li"),zre=a("strong"),IUe=o("rembert"),NUe=o(" \u2014 "),TS=a("a"),qUe=o("RemBertConfig"),jUe=o(" (RemBERT model)"),DUe=l(),Gm=a("li"),Wre=a("strong"),GUe=o("resnet"),OUe=o(" \u2014 "),MS=a("a"),VUe=o("ResNetConfig"),XUe=o(" (ResNet model)"),zUe=l(),Om=a("li"),Qre=a("strong"),WUe=o("retribert"),QUe=o(" \u2014 "),ES=a("a"),HUe=o("RetriBertConfig"),UUe=o(" (RetriBERT model)"),JUe=l(),Vm=a("li"),Hre=a("strong"),YUe=o("roberta"),KUe=o(" \u2014 "),CS=a("a"),ZUe=o("RobertaConfig"),eJe=o(" (RoBERTa model)"),oJe=l(),Xm=a("li"),Ure=a("strong"),rJe=o("roformer"),tJe=o(" \u2014 "),wS=a("a"),aJe=o("RoFormerConfig"),nJe=o(" (RoFormer model)"),sJe=l(),zm=a("li"),Jre=a("strong"),lJe=o("segformer"),iJe=o(" \u2014 "),AS=a("a"),dJe=o("SegformerConfig"),cJe=o(" (SegFormer model)"),fJe=l(),Wm=a("li"),Yre=a("strong"),mJe=o("sew"),gJe=o(" \u2014 "),yS=a("a"),hJe=o("SEWConfig"),pJe=o(" (SEW model)"),uJe=l(),Qm=a("li"),Kre=a("strong"),_Je=o("sew-d"),bJe=o(" \u2014 "),LS=a("a"),vJe=o("SEWDConfig"),FJe=o(" (SEW-D model)"),TJe=l(),Hm=a("li"),Zre=a("strong"),MJe=o("speech-encoder-decoder"),EJe=o(" \u2014 "),xS=a("a"),CJe=o("SpeechEncoderDecoderConfig"),wJe=o(" (Speech Encoder decoder model)"),AJe=l(),Um=a("li"),ete=a("strong"),yJe=o("speech_to_text"),LJe=o(" \u2014 "),$S=a("a"),xJe=o("Speech2TextConfig"),$Je=o(" (Speech2Text model)"),kJe=l(),Jm=a("li"),ote=a("strong"),SJe=o("speech_to_text_2"),RJe=o(" \u2014 "),kS=a("a"),PJe=o("Speech2Text2Config"),BJe=o(" (Speech2Text2 model)"),IJe=l(),Ym=a("li"),rte=a("strong"),NJe=o("splinter"),qJe=o(" \u2014 "),SS=a("a"),jJe=o("SplinterConfig"),DJe=o(" (Splinter model)"),GJe=l(),Km=a("li"),tte=a("strong"),OJe=o("squeezebert"),VJe=o(" \u2014 "),RS=a("a"),XJe=o("SqueezeBertConfig"),zJe=o(" (SqueezeBERT model)"),WJe=l(),Zm=a("li"),ate=a("strong"),QJe=o("swin"),HJe=o(" \u2014 "),PS=a("a"),UJe=o("SwinConfig"),JJe=o(" (Swin model)"),YJe=l(),eg=a("li"),nte=a("strong"),KJe=o("t5"),ZJe=o(" \u2014 "),BS=a("a"),eYe=o("T5Config"),oYe=o(" (T5 model)"),rYe=l(),og=a("li"),ste=a("strong"),tYe=o("tapas"),aYe=o(" \u2014 "),IS=a("a"),nYe=o("TapasConfig"),sYe=o(" (TAPAS model)"),lYe=l(),rg=a("li"),lte=a("strong"),iYe=o("trajectory_transformer"),dYe=o(" \u2014 "),NS=a("a"),cYe=o("TrajectoryTransformerConfig"),fYe=o(" (Trajectory Transformer model)"),mYe=l(),tg=a("li"),ite=a("strong"),gYe=o("transfo-xl"),hYe=o(" \u2014 "),qS=a("a"),pYe=o("TransfoXLConfig"),uYe=o(" (Transformer-XL model)"),_Ye=l(),ag=a("li"),dte=a("strong"),bYe=o("trocr"),vYe=o(" \u2014 "),jS=a("a"),FYe=o("TrOCRConfig"),TYe=o(" (TrOCR model)"),MYe=l(),ng=a("li"),cte=a("strong"),EYe=o("unispeech"),CYe=o(" \u2014 "),DS=a("a"),wYe=o("UniSpeechConfig"),AYe=o(" (UniSpeech model)"),yYe=l(),sg=a("li"),fte=a("strong"),LYe=o("unispeech-sat"),xYe=o(" \u2014 "),GS=a("a"),$Ye=o("UniSpeechSatConfig"),kYe=o(" (UniSpeechSat model)"),SYe=l(),lg=a("li"),mte=a("strong"),RYe=o("van"),PYe=o(" \u2014 "),OS=a("a"),BYe=o("VanConfig"),IYe=o(" (VAN model)"),NYe=l(),ig=a("li"),gte=a("strong"),qYe=o("vilt"),jYe=o(" \u2014 "),VS=a("a"),DYe=o("ViltConfig"),GYe=o(" (ViLT model)"),OYe=l(),dg=a("li"),hte=a("strong"),VYe=o("vision-encoder-decoder"),XYe=o(" \u2014 "),XS=a("a"),zYe=o("VisionEncoderDecoderConfig"),WYe=o(" (Vision Encoder decoder model)"),QYe=l(),cg=a("li"),pte=a("strong"),HYe=o("vision-text-dual-encoder"),UYe=o(" \u2014 "),zS=a("a"),JYe=o("VisionTextDualEncoderConfig"),YYe=o(" (VisionTextDualEncoder model)"),KYe=l(),fg=a("li"),ute=a("strong"),ZYe=o("visual_bert"),eKe=o(" \u2014 "),WS=a("a"),oKe=o("VisualBertConfig"),rKe=o(" (VisualBert model)"),tKe=l(),mg=a("li"),_te=a("strong"),aKe=o("vit"),nKe=o(" \u2014 "),QS=a("a"),sKe=o("ViTConfig"),lKe=o(" (ViT model)"),iKe=l(),gg=a("li"),bte=a("strong"),dKe=o("vit_mae"),cKe=o(" \u2014 "),HS=a("a"),fKe=o("ViTMAEConfig"),mKe=o(" (ViTMAE model)"),gKe=l(),hg=a("li"),vte=a("strong"),hKe=o("wav2vec2"),pKe=o(" \u2014 "),US=a("a"),uKe=o("Wav2Vec2Config"),_Ke=o(" (Wav2Vec2 model)"),bKe=l(),pg=a("li"),Fte=a("strong"),vKe=o("wav2vec2-conformer"),FKe=o(" \u2014 "),JS=a("a"),TKe=o("Wav2Vec2ConformerConfig"),MKe=o(" (Wav2Vec2-Conformer model)"),EKe=l(),ug=a("li"),Tte=a("strong"),CKe=o("wavlm"),wKe=o(" \u2014 "),YS=a("a"),AKe=o("WavLMConfig"),yKe=o(" (WavLM model)"),LKe=l(),_g=a("li"),Mte=a("strong"),xKe=o("xglm"),$Ke=o(" \u2014 "),KS=a("a"),kKe=o("XGLMConfig"),SKe=o(" (XGLM model)"),RKe=l(),bg=a("li"),Ete=a("strong"),PKe=o("xlm"),BKe=o(" \u2014 "),ZS=a("a"),IKe=o("XLMConfig"),NKe=o(" (XLM model)"),qKe=l(),vg=a("li"),Cte=a("strong"),jKe=o("xlm-prophetnet"),DKe=o(" \u2014 "),eR=a("a"),GKe=o("XLMProphetNetConfig"),OKe=o(" (XLMProphetNet model)"),VKe=l(),Fg=a("li"),wte=a("strong"),XKe=o("xlm-roberta"),zKe=o(" \u2014 "),oR=a("a"),WKe=o("XLMRobertaConfig"),QKe=o(" (XLM-RoBERTa model)"),HKe=l(),Tg=a("li"),Ate=a("strong"),UKe=o("xlm-roberta-xl"),JKe=o(" \u2014 "),rR=a("a"),YKe=o("XLMRobertaXLConfig"),KKe=o(" (XLM-RoBERTa-XL model)"),ZKe=l(),Mg=a("li"),yte=a("strong"),eZe=o("xlnet"),oZe=o(" \u2014 "),tR=a("a"),rZe=o("XLNetConfig"),tZe=o(" (XLNet model)"),aZe=l(),Eg=a("li"),Lte=a("strong"),nZe=o("yolos"),sZe=o(" \u2014 "),aR=a("a"),lZe=o("YolosConfig"),iZe=o(" (YOLOS model)"),dZe=l(),Cg=a("li"),xte=a("strong"),cZe=o("yoso"),fZe=o(" \u2014 "),nR=a("a"),mZe=o("YosoConfig"),gZe=o(" (YOSO model)"),hZe=l(),F(wg.$$.fragment),pZe=l(),Ag=a("div"),F(jA.$$.fragment),uZe=l(),$te=a("p"),_Ze=o("Register a new configuration for this class."),Aqe=l(),Mi=a("h2"),yg=a("a"),kte=a("span"),F(DA.$$.fragment),bZe=l(),Ste=a("span"),vZe=o("AutoTokenizer"),yqe=l(),wo=a("div"),F(GA.$$.fragment),FZe=l(),OA=a("p"),TZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sR=a("a"),MZe=o("AutoTokenizer.from_pretrained()"),EZe=o(" class method."),CZe=l(),VA=a("p"),wZe=o("This class cannot be instantiated directly using "),Rte=a("code"),AZe=o("__init__()"),yZe=o(" (throws an error)."),LZe=l(),Cr=a("div"),F(XA.$$.fragment),xZe=l(),Pte=a("p"),$Ze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kZe=l(),Aa=a("p"),SZe=o("The tokenizer class to instantiate is selected based on the "),Bte=a("code"),RZe=o("model_type"),PZe=o(` property of the config object (either
passed as an argument or loaded from `),Ite=a("code"),BZe=o("pretrained_model_name_or_path"),IZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nte=a("code"),NZe=o("pretrained_model_name_or_path"),qZe=o(":"),jZe=l(),k=a("ul"),Sn=a("li"),qte=a("strong"),DZe=o("albert"),GZe=o(" \u2014 "),lR=a("a"),OZe=o("AlbertTokenizer"),VZe=o(" or "),iR=a("a"),XZe=o("AlbertTokenizerFast"),zZe=o(" (ALBERT model)"),WZe=l(),Rn=a("li"),jte=a("strong"),QZe=o("bart"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("BartTokenizer"),JZe=o(" or "),cR=a("a"),YZe=o("BartTokenizerFast"),KZe=o(" (BART model)"),ZZe=l(),Pn=a("li"),Dte=a("strong"),eeo=o("barthez"),oeo=o(" \u2014 "),fR=a("a"),reo=o("BarthezTokenizer"),teo=o(" or "),mR=a("a"),aeo=o("BarthezTokenizerFast"),neo=o(" (BARThez model)"),seo=l(),Lg=a("li"),Gte=a("strong"),leo=o("bartpho"),ieo=o(" \u2014 "),gR=a("a"),deo=o("BartphoTokenizer"),ceo=o(" (BARTpho model)"),feo=l(),Bn=a("li"),Ote=a("strong"),meo=o("bert"),geo=o(" \u2014 "),hR=a("a"),heo=o("BertTokenizer"),peo=o(" or "),pR=a("a"),ueo=o("BertTokenizerFast"),_eo=o(" (BERT model)"),beo=l(),xg=a("li"),Vte=a("strong"),veo=o("bert-generation"),Feo=o(" \u2014 "),uR=a("a"),Teo=o("BertGenerationTokenizer"),Meo=o(" (Bert Generation model)"),Eeo=l(),$g=a("li"),Xte=a("strong"),Ceo=o("bert-japanese"),weo=o(" \u2014 "),_R=a("a"),Aeo=o("BertJapaneseTokenizer"),yeo=o(" (BertJapanese model)"),Leo=l(),kg=a("li"),zte=a("strong"),xeo=o("bertweet"),$eo=o(" \u2014 "),bR=a("a"),keo=o("BertweetTokenizer"),Seo=o(" (Bertweet model)"),Reo=l(),In=a("li"),Wte=a("strong"),Peo=o("big_bird"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("BigBirdTokenizer"),Neo=o(" or "),FR=a("a"),qeo=o("BigBirdTokenizerFast"),jeo=o(" (BigBird model)"),Deo=l(),Nn=a("li"),Qte=a("strong"),Geo=o("bigbird_pegasus"),Oeo=o(" \u2014 "),TR=a("a"),Veo=o("PegasusTokenizer"),Xeo=o(" or "),MR=a("a"),zeo=o("PegasusTokenizerFast"),Weo=o(" (BigBirdPegasus model)"),Qeo=l(),qn=a("li"),Hte=a("strong"),Heo=o("blenderbot"),Ueo=o(" \u2014 "),ER=a("a"),Jeo=o("BlenderbotTokenizer"),Yeo=o(" or "),CR=a("a"),Keo=o("BlenderbotTokenizerFast"),Zeo=o(" (Blenderbot model)"),eoo=l(),Sg=a("li"),Ute=a("strong"),ooo=o("blenderbot-small"),roo=o(" \u2014 "),wR=a("a"),too=o("BlenderbotSmallTokenizer"),aoo=o(" (BlenderbotSmall model)"),noo=l(),Rg=a("li"),Jte=a("strong"),soo=o("byt5"),loo=o(" \u2014 "),AR=a("a"),ioo=o("ByT5Tokenizer"),doo=o(" (ByT5 model)"),coo=l(),jn=a("li"),Yte=a("strong"),foo=o("camembert"),moo=o(" \u2014 "),yR=a("a"),goo=o("CamembertTokenizer"),hoo=o(" or "),LR=a("a"),poo=o("CamembertTokenizerFast"),uoo=o(" (CamemBERT model)"),_oo=l(),Pg=a("li"),Kte=a("strong"),boo=o("canine"),voo=o(" \u2014 "),xR=a("a"),Foo=o("CanineTokenizer"),Too=o(" (Canine model)"),Moo=l(),Dn=a("li"),Zte=a("strong"),Eoo=o("clip"),Coo=o(" \u2014 "),$R=a("a"),woo=o("CLIPTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("CLIPTokenizerFast"),Loo=o(" (CLIP model)"),xoo=l(),Gn=a("li"),eae=a("strong"),$oo=o("convbert"),koo=o(" \u2014 "),SR=a("a"),Soo=o("ConvBertTokenizer"),Roo=o(" or "),RR=a("a"),Poo=o("ConvBertTokenizerFast"),Boo=o(" (ConvBERT model)"),Ioo=l(),On=a("li"),oae=a("strong"),Noo=o("cpm"),qoo=o(" \u2014 "),PR=a("a"),joo=o("CpmTokenizer"),Doo=o(" or "),BR=a("a"),Goo=o("CpmTokenizerFast"),Ooo=o(" (CPM model)"),Voo=l(),Bg=a("li"),rae=a("strong"),Xoo=o("ctrl"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("CTRLTokenizer"),Qoo=o(" (CTRL model)"),Hoo=l(),Vn=a("li"),tae=a("strong"),Uoo=o("data2vec-text"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("RobertaTokenizer"),Koo=o(" or "),qR=a("a"),Zoo=o("RobertaTokenizerFast"),ero=o(" (Data2VecText model)"),oro=l(),Xn=a("li"),aae=a("strong"),rro=o("deberta"),tro=o(" \u2014 "),jR=a("a"),aro=o("DebertaTokenizer"),nro=o(" or "),DR=a("a"),sro=o("DebertaTokenizerFast"),lro=o(" (DeBERTa model)"),iro=l(),zn=a("li"),nae=a("strong"),dro=o("deberta-v2"),cro=o(" \u2014 "),GR=a("a"),fro=o("DebertaV2Tokenizer"),mro=o(" or "),OR=a("a"),gro=o("DebertaV2TokenizerFast"),hro=o(" (DeBERTa-v2 model)"),pro=l(),Wn=a("li"),sae=a("strong"),uro=o("distilbert"),_ro=o(" \u2014 "),VR=a("a"),bro=o("DistilBertTokenizer"),vro=o(" or "),XR=a("a"),Fro=o("DistilBertTokenizerFast"),Tro=o(" (DistilBERT model)"),Mro=l(),Qn=a("li"),lae=a("strong"),Ero=o("dpr"),Cro=o(" \u2014 "),zR=a("a"),wro=o("DPRQuestionEncoderTokenizer"),Aro=o(" or "),WR=a("a"),yro=o("DPRQuestionEncoderTokenizerFast"),Lro=o(" (DPR model)"),xro=l(),Hn=a("li"),iae=a("strong"),$ro=o("electra"),kro=o(" \u2014 "),QR=a("a"),Sro=o("ElectraTokenizer"),Rro=o(" or "),HR=a("a"),Pro=o("ElectraTokenizerFast"),Bro=o(" (ELECTRA model)"),Iro=l(),Ig=a("li"),dae=a("strong"),Nro=o("flaubert"),qro=o(" \u2014 "),UR=a("a"),jro=o("FlaubertTokenizer"),Dro=o(" (FlauBERT model)"),Gro=l(),Un=a("li"),cae=a("strong"),Oro=o("fnet"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("FNetTokenizer"),zro=o(" or "),YR=a("a"),Wro=o("FNetTokenizerFast"),Qro=o(" (FNet model)"),Hro=l(),Ng=a("li"),fae=a("strong"),Uro=o("fsmt"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("FSMTTokenizer"),Kro=o(" (FairSeq Machine-Translation model)"),Zro=l(),Jn=a("li"),mae=a("strong"),eto=o("funnel"),oto=o(" \u2014 "),ZR=a("a"),rto=o("FunnelTokenizer"),tto=o(" or "),eP=a("a"),ato=o("FunnelTokenizerFast"),nto=o(" (Funnel Transformer model)"),sto=l(),Yn=a("li"),gae=a("strong"),lto=o("gpt2"),ito=o(" \u2014 "),oP=a("a"),dto=o("GPT2Tokenizer"),cto=o(" or "),rP=a("a"),fto=o("GPT2TokenizerFast"),mto=o(" (OpenAI GPT-2 model)"),gto=l(),Kn=a("li"),hae=a("strong"),hto=o("gpt_neo"),pto=o(" \u2014 "),tP=a("a"),uto=o("GPT2Tokenizer"),_to=o(" or "),aP=a("a"),bto=o("GPT2TokenizerFast"),vto=o(" (GPT Neo model)"),Fto=l(),qg=a("li"),pae=a("strong"),Tto=o("gpt_neox"),Mto=o(" \u2014 "),nP=a("a"),Eto=o("GPTNeoXTokenizerFast"),Cto=o(" (GPT NeoX model)"),wto=l(),Zn=a("li"),uae=a("strong"),Ato=o("gptj"),yto=o(" \u2014 "),sP=a("a"),Lto=o("GPT2Tokenizer"),xto=o(" or "),lP=a("a"),$to=o("GPT2TokenizerFast"),kto=o(" (GPT-J model)"),Sto=l(),es=a("li"),_ae=a("strong"),Rto=o("groupvit"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("CLIPTokenizer"),Ito=o(" or "),dP=a("a"),Nto=o("CLIPTokenizerFast"),qto=o(" (GroupViT model)"),jto=l(),os=a("li"),bae=a("strong"),Dto=o("herbert"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("HerbertTokenizer"),Vto=o(" or "),fP=a("a"),Xto=o("HerbertTokenizerFast"),zto=o(" (HerBERT model)"),Wto=l(),jg=a("li"),vae=a("strong"),Qto=o("hubert"),Hto=o(" \u2014 "),mP=a("a"),Uto=o("Wav2Vec2CTCTokenizer"),Jto=o(" (Hubert model)"),Yto=l(),rs=a("li"),Fae=a("strong"),Kto=o("ibert"),Zto=o(" \u2014 "),gP=a("a"),eao=o("RobertaTokenizer"),oao=o(" or "),hP=a("a"),rao=o("RobertaTokenizerFast"),tao=o(" (I-BERT model)"),aao=l(),ts=a("li"),Tae=a("strong"),nao=o("layoutlm"),sao=o(" \u2014 "),pP=a("a"),lao=o("LayoutLMTokenizer"),iao=o(" or "),uP=a("a"),dao=o("LayoutLMTokenizerFast"),cao=o(" (LayoutLM model)"),fao=l(),as=a("li"),Mae=a("strong"),mao=o("layoutlmv2"),gao=o(" \u2014 "),_P=a("a"),hao=o("LayoutLMv2Tokenizer"),pao=o(" or "),bP=a("a"),uao=o("LayoutLMv2TokenizerFast"),_ao=o(" (LayoutLMv2 model)"),bao=l(),ns=a("li"),Eae=a("strong"),vao=o("layoutlmv3"),Fao=o(" \u2014 "),vP=a("a"),Tao=o("LayoutLMv3Tokenizer"),Mao=o(" or "),FP=a("a"),Eao=o("LayoutLMv3TokenizerFast"),Cao=o(" (LayoutLMv3 model)"),wao=l(),ss=a("li"),Cae=a("strong"),Aao=o("layoutxlm"),yao=o(" \u2014 "),TP=a("a"),Lao=o("LayoutXLMTokenizer"),xao=o(" or "),MP=a("a"),$ao=o("LayoutXLMTokenizerFast"),kao=o(" (LayoutXLM model)"),Sao=l(),ls=a("li"),wae=a("strong"),Rao=o("led"),Pao=o(" \u2014 "),EP=a("a"),Bao=o("LEDTokenizer"),Iao=o(" or "),CP=a("a"),Nao=o("LEDTokenizerFast"),qao=o(" (LED model)"),jao=l(),is=a("li"),Aae=a("strong"),Dao=o("longformer"),Gao=o(" \u2014 "),wP=a("a"),Oao=o("LongformerTokenizer"),Vao=o(" or "),AP=a("a"),Xao=o("LongformerTokenizerFast"),zao=o(" (Longformer model)"),Wao=l(),Dg=a("li"),yae=a("strong"),Qao=o("luke"),Hao=o(" \u2014 "),yP=a("a"),Uao=o("LukeTokenizer"),Jao=o(" (LUKE model)"),Yao=l(),ds=a("li"),Lae=a("strong"),Kao=o("lxmert"),Zao=o(" \u2014 "),LP=a("a"),eno=o("LxmertTokenizer"),ono=o(" or "),xP=a("a"),rno=o("LxmertTokenizerFast"),tno=o(" (LXMERT model)"),ano=l(),Gg=a("li"),xae=a("strong"),nno=o("m2m_100"),sno=o(" \u2014 "),$P=a("a"),lno=o("M2M100Tokenizer"),ino=o(" (M2M100 model)"),dno=l(),Og=a("li"),$ae=a("strong"),cno=o("marian"),fno=o(" \u2014 "),kP=a("a"),mno=o("MarianTokenizer"),gno=o(" (Marian model)"),hno=l(),cs=a("li"),kae=a("strong"),pno=o("mbart"),uno=o(" \u2014 "),SP=a("a"),_no=o("MBartTokenizer"),bno=o(" or "),RP=a("a"),vno=o("MBartTokenizerFast"),Fno=o(" (mBART model)"),Tno=l(),fs=a("li"),Sae=a("strong"),Mno=o("mbart50"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MBart50Tokenizer"),wno=o(" or "),BP=a("a"),Ano=o("MBart50TokenizerFast"),yno=o(" (mBART-50 model)"),Lno=l(),ms=a("li"),Rae=a("strong"),xno=o("megatron-bert"),$no=o(" \u2014 "),IP=a("a"),kno=o("BertTokenizer"),Sno=o(" or "),NP=a("a"),Rno=o("BertTokenizerFast"),Pno=o(" (MegatronBert model)"),Bno=l(),Vg=a("li"),Pae=a("strong"),Ino=o("mluke"),Nno=o(" \u2014 "),qP=a("a"),qno=o("MLukeTokenizer"),jno=o(" (mLUKE model)"),Dno=l(),gs=a("li"),Bae=a("strong"),Gno=o("mobilebert"),Ono=o(" \u2014 "),jP=a("a"),Vno=o("MobileBertTokenizer"),Xno=o(" or "),DP=a("a"),zno=o("MobileBertTokenizerFast"),Wno=o(" (MobileBERT model)"),Qno=l(),hs=a("li"),Iae=a("strong"),Hno=o("mpnet"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("MPNetTokenizer"),Yno=o(" or "),OP=a("a"),Kno=o("MPNetTokenizerFast"),Zno=o(" (MPNet model)"),eso=l(),ps=a("li"),Nae=a("strong"),oso=o("mt5"),rso=o(" \u2014 "),VP=a("a"),tso=o("MT5Tokenizer"),aso=o(" or "),XP=a("a"),nso=o("MT5TokenizerFast"),sso=o(" (mT5 model)"),lso=l(),us=a("li"),qae=a("strong"),iso=o("nystromformer"),dso=o(" \u2014 "),zP=a("a"),cso=o("AlbertTokenizer"),fso=o(" or "),WP=a("a"),mso=o("AlbertTokenizerFast"),gso=o(" (Nystromformer model)"),hso=l(),_s=a("li"),jae=a("strong"),pso=o("openai-gpt"),uso=o(" \u2014 "),QP=a("a"),_so=o("OpenAIGPTTokenizer"),bso=o(" or "),HP=a("a"),vso=o("OpenAIGPTTokenizerFast"),Fso=o(" (OpenAI GPT model)"),Tso=l(),Xg=a("li"),Dae=a("strong"),Mso=o("opt"),Eso=o(" \u2014 "),UP=a("a"),Cso=o("GPT2Tokenizer"),wso=o(" (OPT model)"),Aso=l(),bs=a("li"),Gae=a("strong"),yso=o("pegasus"),Lso=o(" \u2014 "),JP=a("a"),xso=o("PegasusTokenizer"),$so=o(" or "),YP=a("a"),kso=o("PegasusTokenizerFast"),Sso=o(" (Pegasus model)"),Rso=l(),zg=a("li"),Oae=a("strong"),Pso=o("perceiver"),Bso=o(" \u2014 "),KP=a("a"),Iso=o("PerceiverTokenizer"),Nso=o(" (Perceiver model)"),qso=l(),Wg=a("li"),Vae=a("strong"),jso=o("phobert"),Dso=o(" \u2014 "),ZP=a("a"),Gso=o("PhobertTokenizer"),Oso=o(" (PhoBERT model)"),Vso=l(),Qg=a("li"),Xae=a("strong"),Xso=o("plbart"),zso=o(" \u2014 "),eB=a("a"),Wso=o("PLBartTokenizer"),Qso=o(" (PLBart model)"),Hso=l(),Hg=a("li"),zae=a("strong"),Uso=o("prophetnet"),Jso=o(" \u2014 "),oB=a("a"),Yso=o("ProphetNetTokenizer"),Kso=o(" (ProphetNet model)"),Zso=l(),vs=a("li"),Wae=a("strong"),elo=o("qdqbert"),olo=o(" \u2014 "),rB=a("a"),rlo=o("BertTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("BertTokenizerFast"),nlo=o(" (QDQBert model)"),slo=l(),Ug=a("li"),Qae=a("strong"),llo=o("rag"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("RagTokenizer"),clo=o(" (RAG model)"),flo=l(),Fs=a("li"),Hae=a("strong"),mlo=o("realm"),glo=o(" \u2014 "),nB=a("a"),hlo=o("RealmTokenizer"),plo=o(" or "),sB=a("a"),ulo=o("RealmTokenizerFast"),_lo=o(" (Realm model)"),blo=l(),Ts=a("li"),Uae=a("strong"),vlo=o("reformer"),Flo=o(" \u2014 "),lB=a("a"),Tlo=o("ReformerTokenizer"),Mlo=o(" or "),iB=a("a"),Elo=o("ReformerTokenizerFast"),Clo=o(" (Reformer model)"),wlo=l(),Ms=a("li"),Jae=a("strong"),Alo=o("rembert"),ylo=o(" \u2014 "),dB=a("a"),Llo=o("RemBertTokenizer"),xlo=o(" or "),cB=a("a"),$lo=o("RemBertTokenizerFast"),klo=o(" (RemBERT model)"),Slo=l(),Es=a("li"),Yae=a("strong"),Rlo=o("retribert"),Plo=o(" \u2014 "),fB=a("a"),Blo=o("RetriBertTokenizer"),Ilo=o(" or "),mB=a("a"),Nlo=o("RetriBertTokenizerFast"),qlo=o(" (RetriBERT model)"),jlo=l(),Cs=a("li"),Kae=a("strong"),Dlo=o("roberta"),Glo=o(" \u2014 "),gB=a("a"),Olo=o("RobertaTokenizer"),Vlo=o(" or "),hB=a("a"),Xlo=o("RobertaTokenizerFast"),zlo=o(" (RoBERTa model)"),Wlo=l(),ws=a("li"),Zae=a("strong"),Qlo=o("roformer"),Hlo=o(" \u2014 "),pB=a("a"),Ulo=o("RoFormerTokenizer"),Jlo=o(" or "),uB=a("a"),Ylo=o("RoFormerTokenizerFast"),Klo=o(" (RoFormer model)"),Zlo=l(),Jg=a("li"),ene=a("strong"),eio=o("speech_to_text"),oio=o(" \u2014 "),_B=a("a"),rio=o("Speech2TextTokenizer"),tio=o(" (Speech2Text model)"),aio=l(),Yg=a("li"),one=a("strong"),nio=o("speech_to_text_2"),sio=o(" \u2014 "),bB=a("a"),lio=o("Speech2Text2Tokenizer"),iio=o(" (Speech2Text2 model)"),dio=l(),As=a("li"),rne=a("strong"),cio=o("splinter"),fio=o(" \u2014 "),vB=a("a"),mio=o("SplinterTokenizer"),gio=o(" or "),FB=a("a"),hio=o("SplinterTokenizerFast"),pio=o(" (Splinter model)"),uio=l(),ys=a("li"),tne=a("strong"),_io=o("squeezebert"),bio=o(" \u2014 "),TB=a("a"),vio=o("SqueezeBertTokenizer"),Fio=o(" or "),MB=a("a"),Tio=o("SqueezeBertTokenizerFast"),Mio=o(" (SqueezeBERT model)"),Eio=l(),Ls=a("li"),ane=a("strong"),Cio=o("t5"),wio=o(" \u2014 "),EB=a("a"),Aio=o("T5Tokenizer"),yio=o(" or "),CB=a("a"),Lio=o("T5TokenizerFast"),xio=o(" (T5 model)"),$io=l(),Kg=a("li"),nne=a("strong"),kio=o("tapas"),Sio=o(" \u2014 "),wB=a("a"),Rio=o("TapasTokenizer"),Pio=o(" (TAPAS model)"),Bio=l(),Zg=a("li"),sne=a("strong"),Iio=o("tapex"),Nio=o(" \u2014 "),AB=a("a"),qio=o("TapexTokenizer"),jio=o(" (TAPEX model)"),Dio=l(),eh=a("li"),lne=a("strong"),Gio=o("transfo-xl"),Oio=o(" \u2014 "),yB=a("a"),Vio=o("TransfoXLTokenizer"),Xio=o(" (Transformer-XL model)"),zio=l(),xs=a("li"),ine=a("strong"),Wio=o("visual_bert"),Qio=o(" \u2014 "),LB=a("a"),Hio=o("BertTokenizer"),Uio=o(" or "),xB=a("a"),Jio=o("BertTokenizerFast"),Yio=o(" (VisualBert model)"),Kio=l(),oh=a("li"),dne=a("strong"),Zio=o("wav2vec2"),edo=o(" \u2014 "),$B=a("a"),odo=o("Wav2Vec2CTCTokenizer"),rdo=o(" (Wav2Vec2 model)"),tdo=l(),rh=a("li"),cne=a("strong"),ado=o("wav2vec2-conformer"),ndo=o(" \u2014 "),kB=a("a"),sdo=o("Wav2Vec2CTCTokenizer"),ldo=o(" (Wav2Vec2-Conformer model)"),ido=l(),th=a("li"),fne=a("strong"),ddo=o("wav2vec2_phoneme"),cdo=o(" \u2014 "),SB=a("a"),fdo=o("Wav2Vec2PhonemeCTCTokenizer"),mdo=o(" (Wav2Vec2Phoneme model)"),gdo=l(),$s=a("li"),mne=a("strong"),hdo=o("xglm"),pdo=o(" \u2014 "),RB=a("a"),udo=o("XGLMTokenizer"),_do=o(" or "),PB=a("a"),bdo=o("XGLMTokenizerFast"),vdo=o(" (XGLM model)"),Fdo=l(),ah=a("li"),gne=a("strong"),Tdo=o("xlm"),Mdo=o(" \u2014 "),BB=a("a"),Edo=o("XLMTokenizer"),Cdo=o(" (XLM model)"),wdo=l(),nh=a("li"),hne=a("strong"),Ado=o("xlm-prophetnet"),ydo=o(" \u2014 "),IB=a("a"),Ldo=o("XLMProphetNetTokenizer"),xdo=o(" (XLMProphetNet model)"),$do=l(),ks=a("li"),pne=a("strong"),kdo=o("xlm-roberta"),Sdo=o(" \u2014 "),NB=a("a"),Rdo=o("XLMRobertaTokenizer"),Pdo=o(" or "),qB=a("a"),Bdo=o("XLMRobertaTokenizerFast"),Ido=o(" (XLM-RoBERTa model)"),Ndo=l(),Ss=a("li"),une=a("strong"),qdo=o("xlm-roberta-xl"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("RobertaTokenizer"),Gdo=o(" or "),DB=a("a"),Odo=o("RobertaTokenizerFast"),Vdo=o(" (XLM-RoBERTa-XL model)"),Xdo=l(),Rs=a("li"),_ne=a("strong"),zdo=o("xlnet"),Wdo=o(" \u2014 "),GB=a("a"),Qdo=o("XLNetTokenizer"),Hdo=o(" or "),OB=a("a"),Udo=o("XLNetTokenizerFast"),Jdo=o(" (XLNet model)"),Ydo=l(),Ps=a("li"),bne=a("strong"),Kdo=o("yoso"),Zdo=o(" \u2014 "),VB=a("a"),eco=o("AlbertTokenizer"),oco=o(" or "),XB=a("a"),rco=o("AlbertTokenizerFast"),tco=o(" (YOSO model)"),aco=l(),F(sh.$$.fragment),nco=l(),lh=a("div"),F(zA.$$.fragment),sco=l(),vne=a("p"),lco=o("Register a new tokenizer in this mapping."),Lqe=l(),Ei=a("h2"),ih=a("a"),Fne=a("span"),F(WA.$$.fragment),ico=l(),Tne=a("span"),dco=o("AutoFeatureExtractor"),xqe=l(),Ao=a("div"),F(QA.$$.fragment),cco=l(),HA=a("p"),fco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zB=a("a"),mco=o("AutoFeatureExtractor.from_pretrained()"),gco=o(" class method."),hco=l(),UA=a("p"),pco=o("This class cannot be instantiated directly using "),Mne=a("code"),uco=o("__init__()"),_co=o(" (throws an error)."),bco=l(),He=a("div"),F(JA.$$.fragment),vco=l(),Ene=a("p"),Fco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tco=l(),ya=a("p"),Mco=o("The feature extractor class to instantiate is selected based on the "),Cne=a("code"),Eco=o("model_type"),Cco=o(` property of the config object
(either passed as an argument or loaded from `),wne=a("code"),wco=o("pretrained_model_name_or_path"),Aco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ane=a("code"),yco=o("pretrained_model_name_or_path"),Lco=o(":"),xco=l(),Y=a("ul"),dh=a("li"),yne=a("strong"),$co=o("beit"),kco=o(" \u2014 "),WB=a("a"),Sco=o("BeitFeatureExtractor"),Rco=o(" (BEiT model)"),Pco=l(),ch=a("li"),Lne=a("strong"),Bco=o("clip"),Ico=o(" \u2014 "),QB=a("a"),Nco=o("CLIPFeatureExtractor"),qco=o(" (CLIP model)"),jco=l(),fh=a("li"),xne=a("strong"),Dco=o("convnext"),Gco=o(" \u2014 "),HB=a("a"),Oco=o("ConvNextFeatureExtractor"),Vco=o(" (ConvNext model)"),Xco=l(),mh=a("li"),$ne=a("strong"),zco=o("cvt"),Wco=o(" \u2014 "),UB=a("a"),Qco=o("ConvNextFeatureExtractor"),Hco=o(" (CvT model)"),Uco=l(),gh=a("li"),kne=a("strong"),Jco=o("data2vec-audio"),Yco=o(" \u2014 "),JB=a("a"),Kco=o("Wav2Vec2FeatureExtractor"),Zco=o(" (Data2VecAudio model)"),efo=l(),hh=a("li"),Sne=a("strong"),ofo=o("data2vec-vision"),rfo=o(" \u2014 "),YB=a("a"),tfo=o("BeitFeatureExtractor"),afo=o(" (Data2VecVision model)"),nfo=l(),ph=a("li"),Rne=a("strong"),sfo=o("deit"),lfo=o(" \u2014 "),KB=a("a"),ifo=o("DeiTFeatureExtractor"),dfo=o(" (DeiT model)"),cfo=l(),uh=a("li"),Pne=a("strong"),ffo=o("detr"),mfo=o(" \u2014 "),ZB=a("a"),gfo=o("DetrFeatureExtractor"),hfo=o(" (DETR model)"),pfo=l(),_h=a("li"),Bne=a("strong"),ufo=o("dpt"),_fo=o(" \u2014 "),eI=a("a"),bfo=o("DPTFeatureExtractor"),vfo=o(" (DPT model)"),Ffo=l(),bh=a("li"),Ine=a("strong"),Tfo=o("flava"),Mfo=o(" \u2014 "),oI=a("a"),Efo=o("FlavaFeatureExtractor"),Cfo=o(" (Flava model)"),wfo=l(),vh=a("li"),Nne=a("strong"),Afo=o("glpn"),yfo=o(" \u2014 "),rI=a("a"),Lfo=o("GLPNFeatureExtractor"),xfo=o(" (GLPN model)"),$fo=l(),Fh=a("li"),qne=a("strong"),kfo=o("groupvit"),Sfo=o(" \u2014 "),tI=a("a"),Rfo=o("CLIPFeatureExtractor"),Pfo=o(" (GroupViT model)"),Bfo=l(),Th=a("li"),jne=a("strong"),Ifo=o("hubert"),Nfo=o(" \u2014 "),aI=a("a"),qfo=o("Wav2Vec2FeatureExtractor"),jfo=o(" (Hubert model)"),Dfo=l(),Mh=a("li"),Dne=a("strong"),Gfo=o("imagegpt"),Ofo=o(" \u2014 "),nI=a("a"),Vfo=o("ImageGPTFeatureExtractor"),Xfo=o(" (ImageGPT model)"),zfo=l(),Eh=a("li"),Gne=a("strong"),Wfo=o("layoutlmv2"),Qfo=o(" \u2014 "),sI=a("a"),Hfo=o("LayoutLMv2FeatureExtractor"),Ufo=o(" (LayoutLMv2 model)"),Jfo=l(),Ch=a("li"),One=a("strong"),Yfo=o("layoutlmv3"),Kfo=o(" \u2014 "),lI=a("a"),Zfo=o("LayoutLMv3FeatureExtractor"),emo=o(" (LayoutLMv3 model)"),omo=l(),wh=a("li"),Vne=a("strong"),rmo=o("maskformer"),tmo=o(" \u2014 "),iI=a("a"),amo=o("MaskFormerFeatureExtractor"),nmo=o(" (MaskFormer model)"),smo=l(),Ah=a("li"),Xne=a("strong"),lmo=o("perceiver"),imo=o(" \u2014 "),dI=a("a"),dmo=o("PerceiverFeatureExtractor"),cmo=o(" (Perceiver model)"),fmo=l(),yh=a("li"),zne=a("strong"),mmo=o("poolformer"),gmo=o(" \u2014 "),cI=a("a"),hmo=o("PoolFormerFeatureExtractor"),pmo=o(" (PoolFormer model)"),umo=l(),Lh=a("li"),Wne=a("strong"),_mo=o("regnet"),bmo=o(" \u2014 "),fI=a("a"),vmo=o("ConvNextFeatureExtractor"),Fmo=o(" (RegNet model)"),Tmo=l(),xh=a("li"),Qne=a("strong"),Mmo=o("resnet"),Emo=o(" \u2014 "),mI=a("a"),Cmo=o("ConvNextFeatureExtractor"),wmo=o(" (ResNet model)"),Amo=l(),$h=a("li"),Hne=a("strong"),ymo=o("segformer"),Lmo=o(" \u2014 "),gI=a("a"),xmo=o("SegformerFeatureExtractor"),$mo=o(" (SegFormer model)"),kmo=l(),kh=a("li"),Une=a("strong"),Smo=o("speech_to_text"),Rmo=o(" \u2014 "),hI=a("a"),Pmo=o("Speech2TextFeatureExtractor"),Bmo=o(" (Speech2Text model)"),Imo=l(),Sh=a("li"),Jne=a("strong"),Nmo=o("swin"),qmo=o(" \u2014 "),pI=a("a"),jmo=o("ViTFeatureExtractor"),Dmo=o(" (Swin model)"),Gmo=l(),Rh=a("li"),Yne=a("strong"),Omo=o("van"),Vmo=o(" \u2014 "),uI=a("a"),Xmo=o("ConvNextFeatureExtractor"),zmo=o(" (VAN model)"),Wmo=l(),Ph=a("li"),Kne=a("strong"),Qmo=o("vit"),Hmo=o(" \u2014 "),_I=a("a"),Umo=o("ViTFeatureExtractor"),Jmo=o(" (ViT model)"),Ymo=l(),Bh=a("li"),Zne=a("strong"),Kmo=o("vit_mae"),Zmo=o(" \u2014 "),bI=a("a"),ego=o("ViTFeatureExtractor"),ogo=o(" (ViTMAE model)"),rgo=l(),Ih=a("li"),ese=a("strong"),tgo=o("wav2vec2"),ago=o(" \u2014 "),vI=a("a"),ngo=o("Wav2Vec2FeatureExtractor"),sgo=o(" (Wav2Vec2 model)"),lgo=l(),Nh=a("li"),ose=a("strong"),igo=o("wav2vec2-conformer"),dgo=o(" \u2014 "),FI=a("a"),cgo=o("Wav2Vec2FeatureExtractor"),fgo=o(" (Wav2Vec2-Conformer model)"),mgo=l(),qh=a("li"),rse=a("strong"),ggo=o("yolos"),hgo=o(" \u2014 "),TI=a("a"),pgo=o("YolosFeatureExtractor"),ugo=o(" (YOLOS model)"),_go=l(),F(jh.$$.fragment),bgo=l(),F(Dh.$$.fragment),vgo=l(),Gh=a("div"),F(YA.$$.fragment),Fgo=l(),tse=a("p"),Tgo=o("Register a new feature extractor for this class."),$qe=l(),Ci=a("h2"),Oh=a("a"),ase=a("span"),F(KA.$$.fragment),Mgo=l(),nse=a("span"),Ego=o("AutoProcessor"),kqe=l(),yo=a("div"),F(ZA.$$.fragment),Cgo=l(),ey=a("p"),wgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MI=a("a"),Ago=o("AutoProcessor.from_pretrained()"),ygo=o(" class method."),Lgo=l(),oy=a("p"),xgo=o("This class cannot be instantiated directly using "),sse=a("code"),$go=o("__init__()"),kgo=o(" (throws an error)."),Sgo=l(),Ue=a("div"),F(ry.$$.fragment),Rgo=l(),lse=a("p"),Pgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Bgo=l(),wi=a("p"),Igo=o("The processor class to instantiate is selected based on the "),ise=a("code"),Ngo=o("model_type"),qgo=o(` property of the config object (either
passed as an argument or loaded from `),dse=a("code"),jgo=o("pretrained_model_name_or_path"),Dgo=o(" if possible):"),Ggo=l(),he=a("ul"),Vh=a("li"),cse=a("strong"),Ogo=o("clip"),Vgo=o(" \u2014 "),EI=a("a"),Xgo=o("CLIPProcessor"),zgo=o(" (CLIP model)"),Wgo=l(),Xh=a("li"),fse=a("strong"),Qgo=o("flava"),Hgo=o(" \u2014 "),mse=a("code"),Ugo=o("FLAVAProcessor"),Jgo=o(" (Flava model)"),Ygo=l(),zh=a("li"),gse=a("strong"),Kgo=o("groupvit"),Zgo=o(" \u2014 "),CI=a("a"),eho=o("CLIPProcessor"),oho=o(" (GroupViT model)"),rho=l(),Wh=a("li"),hse=a("strong"),tho=o("layoutlmv2"),aho=o(" \u2014 "),wI=a("a"),nho=o("LayoutLMv2Processor"),sho=o(" (LayoutLMv2 model)"),lho=l(),Qh=a("li"),pse=a("strong"),iho=o("layoutlmv3"),dho=o(" \u2014 "),AI=a("a"),cho=o("LayoutLMv3Processor"),fho=o(" (LayoutLMv3 model)"),mho=l(),Hh=a("li"),use=a("strong"),gho=o("layoutxlm"),hho=o(" \u2014 "),yI=a("a"),pho=o("LayoutXLMProcessor"),uho=o(" (LayoutXLM model)"),_ho=l(),Uh=a("li"),_se=a("strong"),bho=o("sew"),vho=o(" \u2014 "),LI=a("a"),Fho=o("Wav2Vec2Processor"),Tho=o(" (SEW model)"),Mho=l(),Jh=a("li"),bse=a("strong"),Eho=o("sew-d"),Cho=o(" \u2014 "),xI=a("a"),who=o("Wav2Vec2Processor"),Aho=o(" (SEW-D model)"),yho=l(),Yh=a("li"),vse=a("strong"),Lho=o("speech_to_text"),xho=o(" \u2014 "),$I=a("a"),$ho=o("Speech2TextProcessor"),kho=o(" (Speech2Text model)"),Sho=l(),Kh=a("li"),Fse=a("strong"),Rho=o("speech_to_text_2"),Pho=o(" \u2014 "),kI=a("a"),Bho=o("Speech2Text2Processor"),Iho=o(" (Speech2Text2 model)"),Nho=l(),Zh=a("li"),Tse=a("strong"),qho=o("trocr"),jho=o(" \u2014 "),SI=a("a"),Dho=o("TrOCRProcessor"),Gho=o(" (TrOCR model)"),Oho=l(),ep=a("li"),Mse=a("strong"),Vho=o("unispeech"),Xho=o(" \u2014 "),RI=a("a"),zho=o("Wav2Vec2Processor"),Who=o(" (UniSpeech model)"),Qho=l(),op=a("li"),Ese=a("strong"),Hho=o("unispeech-sat"),Uho=o(" \u2014 "),PI=a("a"),Jho=o("Wav2Vec2Processor"),Yho=o(" (UniSpeechSat model)"),Kho=l(),rp=a("li"),Cse=a("strong"),Zho=o("vilt"),epo=o(" \u2014 "),BI=a("a"),opo=o("ViltProcessor"),rpo=o(" (ViLT model)"),tpo=l(),tp=a("li"),wse=a("strong"),apo=o("vision-text-dual-encoder"),npo=o(" \u2014 "),II=a("a"),spo=o("VisionTextDualEncoderProcessor"),lpo=o(" (VisionTextDualEncoder model)"),ipo=l(),ap=a("li"),Ase=a("strong"),dpo=o("wav2vec2"),cpo=o(" \u2014 "),NI=a("a"),fpo=o("Wav2Vec2Processor"),mpo=o(" (Wav2Vec2 model)"),gpo=l(),np=a("li"),yse=a("strong"),hpo=o("wav2vec2-conformer"),ppo=o(" \u2014 "),qI=a("a"),upo=o("Wav2Vec2Processor"),_po=o(" (Wav2Vec2-Conformer model)"),bpo=l(),sp=a("li"),Lse=a("strong"),vpo=o("wavlm"),Fpo=o(" \u2014 "),jI=a("a"),Tpo=o("Wav2Vec2Processor"),Mpo=o(" (WavLM model)"),Epo=l(),F(lp.$$.fragment),Cpo=l(),F(ip.$$.fragment),wpo=l(),dp=a("div"),F(ty.$$.fragment),Apo=l(),xse=a("p"),ypo=o("Register a new processor for this class."),Sqe=l(),Ai=a("h2"),cp=a("a"),$se=a("span"),F(ay.$$.fragment),Lpo=l(),kse=a("span"),xpo=o("AutoModel"),Rqe=l(),Lo=a("div"),F(ny.$$.fragment),$po=l(),yi=a("p"),kpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=a("a"),Spo=o("from_pretrained()"),Rpo=o(" class method or the "),GI=a("a"),Ppo=o("from_config()"),Bpo=o(` class
method.`),Ipo=l(),sy=a("p"),Npo=o("This class cannot be instantiated directly using "),Sse=a("code"),qpo=o("__init__()"),jpo=o(" (throws an error)."),Dpo=l(),tt=a("div"),F(ly.$$.fragment),Gpo=l(),Rse=a("p"),Opo=o("Instantiates one of the base model classes of the library from a configuration."),Vpo=l(),Li=a("p"),Xpo=o(`Note:
Loading a model from its configuration file does `),Pse=a("strong"),zpo=o("not"),Wpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),Qpo=o("from_pretrained()"),Hpo=o(" to load the model weights."),Upo=l(),F(fp.$$.fragment),Jpo=l(),Je=a("div"),F(iy.$$.fragment),Ypo=l(),Bse=a("p"),Kpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Zpo=l(),La=a("p"),euo=o("The model class to instantiate is selected based on the "),Ise=a("code"),ouo=o("model_type"),ruo=o(` property of the config object (either
passed as an argument or loaded from `),Nse=a("code"),tuo=o("pretrained_model_name_or_path"),auo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=a("code"),nuo=o("pretrained_model_name_or_path"),suo=o(":"),luo=l(),x=a("ul"),mp=a("li"),jse=a("strong"),iuo=o("albert"),duo=o(" \u2014 "),VI=a("a"),cuo=o("AlbertModel"),fuo=o(" (ALBERT model)"),muo=l(),gp=a("li"),Dse=a("strong"),guo=o("bart"),huo=o(" \u2014 "),XI=a("a"),puo=o("BartModel"),uuo=o(" (BART model)"),_uo=l(),hp=a("li"),Gse=a("strong"),buo=o("beit"),vuo=o(" \u2014 "),zI=a("a"),Fuo=o("BeitModel"),Tuo=o(" (BEiT model)"),Muo=l(),pp=a("li"),Ose=a("strong"),Euo=o("bert"),Cuo=o(" \u2014 "),WI=a("a"),wuo=o("BertModel"),Auo=o(" (BERT model)"),yuo=l(),up=a("li"),Vse=a("strong"),Luo=o("bert-generation"),xuo=o(" \u2014 "),QI=a("a"),$uo=o("BertGenerationEncoder"),kuo=o(" (Bert Generation model)"),Suo=l(),_p=a("li"),Xse=a("strong"),Ruo=o("big_bird"),Puo=o(" \u2014 "),HI=a("a"),Buo=o("BigBirdModel"),Iuo=o(" (BigBird model)"),Nuo=l(),bp=a("li"),zse=a("strong"),quo=o("bigbird_pegasus"),juo=o(" \u2014 "),UI=a("a"),Duo=o("BigBirdPegasusModel"),Guo=o(" (BigBirdPegasus model)"),Ouo=l(),vp=a("li"),Wse=a("strong"),Vuo=o("blenderbot"),Xuo=o(" \u2014 "),JI=a("a"),zuo=o("BlenderbotModel"),Wuo=o(" (Blenderbot model)"),Quo=l(),Fp=a("li"),Qse=a("strong"),Huo=o("blenderbot-small"),Uuo=o(" \u2014 "),YI=a("a"),Juo=o("BlenderbotSmallModel"),Yuo=o(" (BlenderbotSmall model)"),Kuo=l(),Tp=a("li"),Hse=a("strong"),Zuo=o("camembert"),e_o=o(" \u2014 "),KI=a("a"),o_o=o("CamembertModel"),r_o=o(" (CamemBERT model)"),t_o=l(),Mp=a("li"),Use=a("strong"),a_o=o("canine"),n_o=o(" \u2014 "),ZI=a("a"),s_o=o("CanineModel"),l_o=o(" (Canine model)"),i_o=l(),Ep=a("li"),Jse=a("strong"),d_o=o("clip"),c_o=o(" \u2014 "),eN=a("a"),f_o=o("CLIPModel"),m_o=o(" (CLIP model)"),g_o=l(),Cp=a("li"),Yse=a("strong"),h_o=o("convbert"),p_o=o(" \u2014 "),oN=a("a"),u_o=o("ConvBertModel"),__o=o(" (ConvBERT model)"),b_o=l(),wp=a("li"),Kse=a("strong"),v_o=o("convnext"),F_o=o(" \u2014 "),rN=a("a"),T_o=o("ConvNextModel"),M_o=o(" (ConvNext model)"),E_o=l(),Ap=a("li"),Zse=a("strong"),C_o=o("ctrl"),w_o=o(" \u2014 "),tN=a("a"),A_o=o("CTRLModel"),y_o=o(" (CTRL model)"),L_o=l(),yp=a("li"),ele=a("strong"),x_o=o("cvt"),$_o=o(" \u2014 "),aN=a("a"),k_o=o("CvtModel"),S_o=o(" (CvT model)"),R_o=l(),Lp=a("li"),ole=a("strong"),P_o=o("data2vec-audio"),B_o=o(" \u2014 "),nN=a("a"),I_o=o("Data2VecAudioModel"),N_o=o(" (Data2VecAudio model)"),q_o=l(),xp=a("li"),rle=a("strong"),j_o=o("data2vec-text"),D_o=o(" \u2014 "),sN=a("a"),G_o=o("Data2VecTextModel"),O_o=o(" (Data2VecText model)"),V_o=l(),$p=a("li"),tle=a("strong"),X_o=o("data2vec-vision"),z_o=o(" \u2014 "),lN=a("a"),W_o=o("Data2VecVisionModel"),Q_o=o(" (Data2VecVision model)"),H_o=l(),kp=a("li"),ale=a("strong"),U_o=o("deberta"),J_o=o(" \u2014 "),iN=a("a"),Y_o=o("DebertaModel"),K_o=o(" (DeBERTa model)"),Z_o=l(),Sp=a("li"),nle=a("strong"),e1o=o("deberta-v2"),o1o=o(" \u2014 "),dN=a("a"),r1o=o("DebertaV2Model"),t1o=o(" (DeBERTa-v2 model)"),a1o=l(),Rp=a("li"),sle=a("strong"),n1o=o("decision_transformer"),s1o=o(" \u2014 "),cN=a("a"),l1o=o("DecisionTransformerModel"),i1o=o(" (Decision Transformer model)"),d1o=l(),Pp=a("li"),lle=a("strong"),c1o=o("deit"),f1o=o(" \u2014 "),fN=a("a"),m1o=o("DeiTModel"),g1o=o(" (DeiT model)"),h1o=l(),Bp=a("li"),ile=a("strong"),p1o=o("detr"),u1o=o(" \u2014 "),mN=a("a"),_1o=o("DetrModel"),b1o=o(" (DETR model)"),v1o=l(),Ip=a("li"),dle=a("strong"),F1o=o("distilbert"),T1o=o(" \u2014 "),gN=a("a"),M1o=o("DistilBertModel"),E1o=o(" (DistilBERT model)"),C1o=l(),Np=a("li"),cle=a("strong"),w1o=o("dpr"),A1o=o(" \u2014 "),hN=a("a"),y1o=o("DPRQuestionEncoder"),L1o=o(" (DPR model)"),x1o=l(),qp=a("li"),fle=a("strong"),$1o=o("dpt"),k1o=o(" \u2014 "),pN=a("a"),S1o=o("DPTModel"),R1o=o(" (DPT model)"),P1o=l(),jp=a("li"),mle=a("strong"),B1o=o("electra"),I1o=o(" \u2014 "),uN=a("a"),N1o=o("ElectraModel"),q1o=o(" (ELECTRA model)"),j1o=l(),Dp=a("li"),gle=a("strong"),D1o=o("flaubert"),G1o=o(" \u2014 "),_N=a("a"),O1o=o("FlaubertModel"),V1o=o(" (FlauBERT model)"),X1o=l(),Gp=a("li"),hle=a("strong"),z1o=o("flava"),W1o=o(" \u2014 "),bN=a("a"),Q1o=o("FlavaModel"),H1o=o(" (Flava model)"),U1o=l(),Op=a("li"),ple=a("strong"),J1o=o("fnet"),Y1o=o(" \u2014 "),vN=a("a"),K1o=o("FNetModel"),Z1o=o(" (FNet model)"),e3o=l(),Vp=a("li"),ule=a("strong"),o3o=o("fsmt"),r3o=o(" \u2014 "),FN=a("a"),t3o=o("FSMTModel"),a3o=o(" (FairSeq Machine-Translation model)"),n3o=l(),Bs=a("li"),_le=a("strong"),s3o=o("funnel"),l3o=o(" \u2014 "),TN=a("a"),i3o=o("FunnelModel"),d3o=o(" or "),MN=a("a"),c3o=o("FunnelBaseModel"),f3o=o(" (Funnel Transformer model)"),m3o=l(),Xp=a("li"),ble=a("strong"),g3o=o("glpn"),h3o=o(" \u2014 "),EN=a("a"),p3o=o("GLPNModel"),u3o=o(" (GLPN model)"),_3o=l(),zp=a("li"),vle=a("strong"),b3o=o("gpt2"),v3o=o(" \u2014 "),CN=a("a"),F3o=o("GPT2Model"),T3o=o(" (OpenAI GPT-2 model)"),M3o=l(),Wp=a("li"),Fle=a("strong"),E3o=o("gpt_neo"),C3o=o(" \u2014 "),wN=a("a"),w3o=o("GPTNeoModel"),A3o=o(" (GPT Neo model)"),y3o=l(),Qp=a("li"),Tle=a("strong"),L3o=o("gpt_neox"),x3o=o(" \u2014 "),AN=a("a"),$3o=o("GPTNeoXModel"),k3o=o(" (GPT NeoX model)"),S3o=l(),Hp=a("li"),Mle=a("strong"),R3o=o("gptj"),P3o=o(" \u2014 "),yN=a("a"),B3o=o("GPTJModel"),I3o=o(" (GPT-J model)"),N3o=l(),Up=a("li"),Ele=a("strong"),q3o=o("groupvit"),j3o=o(" \u2014 "),LN=a("a"),D3o=o("GroupViTModel"),G3o=o(" (GroupViT model)"),O3o=l(),Jp=a("li"),Cle=a("strong"),V3o=o("hubert"),X3o=o(" \u2014 "),xN=a("a"),z3o=o("HubertModel"),W3o=o(" (Hubert model)"),Q3o=l(),Yp=a("li"),wle=a("strong"),H3o=o("ibert"),U3o=o(" \u2014 "),$N=a("a"),J3o=o("IBertModel"),Y3o=o(" (I-BERT model)"),K3o=l(),Kp=a("li"),Ale=a("strong"),Z3o=o("imagegpt"),ebo=o(" \u2014 "),kN=a("a"),obo=o("ImageGPTModel"),rbo=o(" (ImageGPT model)"),tbo=l(),Zp=a("li"),yle=a("strong"),abo=o("layoutlm"),nbo=o(" \u2014 "),SN=a("a"),sbo=o("LayoutLMModel"),lbo=o(" (LayoutLM model)"),ibo=l(),eu=a("li"),Lle=a("strong"),dbo=o("layoutlmv2"),cbo=o(" \u2014 "),RN=a("a"),fbo=o("LayoutLMv2Model"),mbo=o(" (LayoutLMv2 model)"),gbo=l(),ou=a("li"),xle=a("strong"),hbo=o("layoutlmv3"),pbo=o(" \u2014 "),PN=a("a"),ubo=o("LayoutLMv3Model"),_bo=o(" (LayoutLMv3 model)"),bbo=l(),ru=a("li"),$le=a("strong"),vbo=o("led"),Fbo=o(" \u2014 "),BN=a("a"),Tbo=o("LEDModel"),Mbo=o(" (LED model)"),Ebo=l(),tu=a("li"),kle=a("strong"),Cbo=o("longformer"),wbo=o(" \u2014 "),IN=a("a"),Abo=o("LongformerModel"),ybo=o(" (Longformer model)"),Lbo=l(),au=a("li"),Sle=a("strong"),xbo=o("luke"),$bo=o(" \u2014 "),NN=a("a"),kbo=o("LukeModel"),Sbo=o(" (LUKE model)"),Rbo=l(),nu=a("li"),Rle=a("strong"),Pbo=o("lxmert"),Bbo=o(" \u2014 "),qN=a("a"),Ibo=o("LxmertModel"),Nbo=o(" (LXMERT model)"),qbo=l(),su=a("li"),Ple=a("strong"),jbo=o("m2m_100"),Dbo=o(" \u2014 "),jN=a("a"),Gbo=o("M2M100Model"),Obo=o(" (M2M100 model)"),Vbo=l(),lu=a("li"),Ble=a("strong"),Xbo=o("marian"),zbo=o(" \u2014 "),DN=a("a"),Wbo=o("MarianModel"),Qbo=o(" (Marian model)"),Hbo=l(),iu=a("li"),Ile=a("strong"),Ubo=o("maskformer"),Jbo=o(" \u2014 "),GN=a("a"),Ybo=o("MaskFormerModel"),Kbo=o(" (MaskFormer model)"),Zbo=l(),du=a("li"),Nle=a("strong"),e2o=o("mbart"),o2o=o(" \u2014 "),ON=a("a"),r2o=o("MBartModel"),t2o=o(" (mBART model)"),a2o=l(),cu=a("li"),qle=a("strong"),n2o=o("megatron-bert"),s2o=o(" \u2014 "),VN=a("a"),l2o=o("MegatronBertModel"),i2o=o(" (MegatronBert model)"),d2o=l(),fu=a("li"),jle=a("strong"),c2o=o("mobilebert"),f2o=o(" \u2014 "),XN=a("a"),m2o=o("MobileBertModel"),g2o=o(" (MobileBERT model)"),h2o=l(),mu=a("li"),Dle=a("strong"),p2o=o("mpnet"),u2o=o(" \u2014 "),zN=a("a"),_2o=o("MPNetModel"),b2o=o(" (MPNet model)"),v2o=l(),gu=a("li"),Gle=a("strong"),F2o=o("mt5"),T2o=o(" \u2014 "),WN=a("a"),M2o=o("MT5Model"),E2o=o(" (mT5 model)"),C2o=l(),hu=a("li"),Ole=a("strong"),w2o=o("nystromformer"),A2o=o(" \u2014 "),QN=a("a"),y2o=o("NystromformerModel"),L2o=o(" (Nystromformer model)"),x2o=l(),pu=a("li"),Vle=a("strong"),$2o=o("openai-gpt"),k2o=o(" \u2014 "),HN=a("a"),S2o=o("OpenAIGPTModel"),R2o=o(" (OpenAI GPT model)"),P2o=l(),uu=a("li"),Xle=a("strong"),B2o=o("opt"),I2o=o(" \u2014 "),UN=a("a"),N2o=o("OPTModel"),q2o=o(" (OPT model)"),j2o=l(),_u=a("li"),zle=a("strong"),D2o=o("pegasus"),G2o=o(" \u2014 "),JN=a("a"),O2o=o("PegasusModel"),V2o=o(" (Pegasus model)"),X2o=l(),bu=a("li"),Wle=a("strong"),z2o=o("perceiver"),W2o=o(" \u2014 "),YN=a("a"),Q2o=o("PerceiverModel"),H2o=o(" (Perceiver model)"),U2o=l(),vu=a("li"),Qle=a("strong"),J2o=o("plbart"),Y2o=o(" \u2014 "),KN=a("a"),K2o=o("PLBartModel"),Z2o=o(" (PLBart model)"),evo=l(),Fu=a("li"),Hle=a("strong"),ovo=o("poolformer"),rvo=o(" \u2014 "),ZN=a("a"),tvo=o("PoolFormerModel"),avo=o(" (PoolFormer model)"),nvo=l(),Tu=a("li"),Ule=a("strong"),svo=o("prophetnet"),lvo=o(" \u2014 "),eq=a("a"),ivo=o("ProphetNetModel"),dvo=o(" (ProphetNet model)"),cvo=l(),Mu=a("li"),Jle=a("strong"),fvo=o("qdqbert"),mvo=o(" \u2014 "),oq=a("a"),gvo=o("QDQBertModel"),hvo=o(" (QDQBert model)"),pvo=l(),Eu=a("li"),Yle=a("strong"),uvo=o("reformer"),_vo=o(" \u2014 "),rq=a("a"),bvo=o("ReformerModel"),vvo=o(" (Reformer model)"),Fvo=l(),Cu=a("li"),Kle=a("strong"),Tvo=o("regnet"),Mvo=o(" \u2014 "),tq=a("a"),Evo=o("RegNetModel"),Cvo=o(" (RegNet model)"),wvo=l(),wu=a("li"),Zle=a("strong"),Avo=o("rembert"),yvo=o(" \u2014 "),aq=a("a"),Lvo=o("RemBertModel"),xvo=o(" (RemBERT model)"),$vo=l(),Au=a("li"),eie=a("strong"),kvo=o("resnet"),Svo=o(" \u2014 "),nq=a("a"),Rvo=o("ResNetModel"),Pvo=o(" (ResNet model)"),Bvo=l(),yu=a("li"),oie=a("strong"),Ivo=o("retribert"),Nvo=o(" \u2014 "),sq=a("a"),qvo=o("RetriBertModel"),jvo=o(" (RetriBERT model)"),Dvo=l(),Lu=a("li"),rie=a("strong"),Gvo=o("roberta"),Ovo=o(" \u2014 "),lq=a("a"),Vvo=o("RobertaModel"),Xvo=o(" (RoBERTa model)"),zvo=l(),xu=a("li"),tie=a("strong"),Wvo=o("roformer"),Qvo=o(" \u2014 "),iq=a("a"),Hvo=o("RoFormerModel"),Uvo=o(" (RoFormer model)"),Jvo=l(),$u=a("li"),aie=a("strong"),Yvo=o("segformer"),Kvo=o(" \u2014 "),dq=a("a"),Zvo=o("SegformerModel"),eFo=o(" (SegFormer model)"),oFo=l(),ku=a("li"),nie=a("strong"),rFo=o("sew"),tFo=o(" \u2014 "),cq=a("a"),aFo=o("SEWModel"),nFo=o(" (SEW model)"),sFo=l(),Su=a("li"),sie=a("strong"),lFo=o("sew-d"),iFo=o(" \u2014 "),fq=a("a"),dFo=o("SEWDModel"),cFo=o(" (SEW-D model)"),fFo=l(),Ru=a("li"),lie=a("strong"),mFo=o("speech_to_text"),gFo=o(" \u2014 "),mq=a("a"),hFo=o("Speech2TextModel"),pFo=o(" (Speech2Text model)"),uFo=l(),Pu=a("li"),iie=a("strong"),_Fo=o("splinter"),bFo=o(" \u2014 "),gq=a("a"),vFo=o("SplinterModel"),FFo=o(" (Splinter model)"),TFo=l(),Bu=a("li"),die=a("strong"),MFo=o("squeezebert"),EFo=o(" \u2014 "),hq=a("a"),CFo=o("SqueezeBertModel"),wFo=o(" (SqueezeBERT model)"),AFo=l(),Iu=a("li"),cie=a("strong"),yFo=o("swin"),LFo=o(" \u2014 "),pq=a("a"),xFo=o("SwinModel"),$Fo=o(" (Swin model)"),kFo=l(),Nu=a("li"),fie=a("strong"),SFo=o("t5"),RFo=o(" \u2014 "),uq=a("a"),PFo=o("T5Model"),BFo=o(" (T5 model)"),IFo=l(),qu=a("li"),mie=a("strong"),NFo=o("tapas"),qFo=o(" \u2014 "),_q=a("a"),jFo=o("TapasModel"),DFo=o(" (TAPAS model)"),GFo=l(),ju=a("li"),gie=a("strong"),OFo=o("trajectory_transformer"),VFo=o(" \u2014 "),bq=a("a"),XFo=o("TrajectoryTransformerModel"),zFo=o(" (Trajectory Transformer model)"),WFo=l(),Du=a("li"),hie=a("strong"),QFo=o("transfo-xl"),HFo=o(" \u2014 "),vq=a("a"),UFo=o("TransfoXLModel"),JFo=o(" (Transformer-XL model)"),YFo=l(),Gu=a("li"),pie=a("strong"),KFo=o("unispeech"),ZFo=o(" \u2014 "),Fq=a("a"),eTo=o("UniSpeechModel"),oTo=o(" (UniSpeech model)"),rTo=l(),Ou=a("li"),uie=a("strong"),tTo=o("unispeech-sat"),aTo=o(" \u2014 "),Tq=a("a"),nTo=o("UniSpeechSatModel"),sTo=o(" (UniSpeechSat model)"),lTo=l(),Vu=a("li"),_ie=a("strong"),iTo=o("van"),dTo=o(" \u2014 "),Mq=a("a"),cTo=o("VanModel"),fTo=o(" (VAN model)"),mTo=l(),Xu=a("li"),bie=a("strong"),gTo=o("vilt"),hTo=o(" \u2014 "),Eq=a("a"),pTo=o("ViltModel"),uTo=o(" (ViLT model)"),_To=l(),zu=a("li"),vie=a("strong"),bTo=o("vision-text-dual-encoder"),vTo=o(" \u2014 "),Cq=a("a"),FTo=o("VisionTextDualEncoderModel"),TTo=o(" (VisionTextDualEncoder model)"),MTo=l(),Wu=a("li"),Fie=a("strong"),ETo=o("visual_bert"),CTo=o(" \u2014 "),wq=a("a"),wTo=o("VisualBertModel"),ATo=o(" (VisualBert model)"),yTo=l(),Qu=a("li"),Tie=a("strong"),LTo=o("vit"),xTo=o(" \u2014 "),Aq=a("a"),$To=o("ViTModel"),kTo=o(" (ViT model)"),STo=l(),Hu=a("li"),Mie=a("strong"),RTo=o("vit_mae"),PTo=o(" \u2014 "),yq=a("a"),BTo=o("ViTMAEModel"),ITo=o(" (ViTMAE model)"),NTo=l(),Uu=a("li"),Eie=a("strong"),qTo=o("wav2vec2"),jTo=o(" \u2014 "),Lq=a("a"),DTo=o("Wav2Vec2Model"),GTo=o(" (Wav2Vec2 model)"),OTo=l(),Ju=a("li"),Cie=a("strong"),VTo=o("wav2vec2-conformer"),XTo=o(" \u2014 "),xq=a("a"),zTo=o("Wav2Vec2ConformerModel"),WTo=o(" (Wav2Vec2-Conformer model)"),QTo=l(),Yu=a("li"),wie=a("strong"),HTo=o("wavlm"),UTo=o(" \u2014 "),$q=a("a"),JTo=o("WavLMModel"),YTo=o(" (WavLM model)"),KTo=l(),Ku=a("li"),Aie=a("strong"),ZTo=o("xglm"),e7o=o(" \u2014 "),kq=a("a"),o7o=o("XGLMModel"),r7o=o(" (XGLM model)"),t7o=l(),Zu=a("li"),yie=a("strong"),a7o=o("xlm"),n7o=o(" \u2014 "),Sq=a("a"),s7o=o("XLMModel"),l7o=o(" (XLM model)"),i7o=l(),e_=a("li"),Lie=a("strong"),d7o=o("xlm-prophetnet"),c7o=o(" \u2014 "),Rq=a("a"),f7o=o("XLMProphetNetModel"),m7o=o(" (XLMProphetNet model)"),g7o=l(),o_=a("li"),xie=a("strong"),h7o=o("xlm-roberta"),p7o=o(" \u2014 "),Pq=a("a"),u7o=o("XLMRobertaModel"),_7o=o(" (XLM-RoBERTa model)"),b7o=l(),r_=a("li"),$ie=a("strong"),v7o=o("xlm-roberta-xl"),F7o=o(" \u2014 "),Bq=a("a"),T7o=o("XLMRobertaXLModel"),M7o=o(" (XLM-RoBERTa-XL model)"),E7o=l(),t_=a("li"),kie=a("strong"),C7o=o("xlnet"),w7o=o(" \u2014 "),Iq=a("a"),A7o=o("XLNetModel"),y7o=o(" (XLNet model)"),L7o=l(),a_=a("li"),Sie=a("strong"),x7o=o("yolos"),$7o=o(" \u2014 "),Nq=a("a"),k7o=o("YolosModel"),S7o=o(" (YOLOS model)"),R7o=l(),n_=a("li"),Rie=a("strong"),P7o=o("yoso"),B7o=o(" \u2014 "),qq=a("a"),I7o=o("YosoModel"),N7o=o(" (YOSO model)"),q7o=l(),s_=a("p"),j7o=o("The model is set in evaluation mode by default using "),Pie=a("code"),D7o=o("model.eval()"),G7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=a("code"),O7o=o("model.train()"),V7o=l(),F(l_.$$.fragment),Pqe=l(),xi=a("h2"),i_=a("a"),Iie=a("span"),F(dy.$$.fragment),X7o=l(),Nie=a("span"),z7o=o("AutoModelForPreTraining"),Bqe=l(),xo=a("div"),F(cy.$$.fragment),W7o=l(),$i=a("p"),Q7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=a("a"),H7o=o("from_pretrained()"),U7o=o(" class method or the "),Dq=a("a"),J7o=o("from_config()"),Y7o=o(` class
method.`),K7o=l(),fy=a("p"),Z7o=o("This class cannot be instantiated directly using "),qie=a("code"),eMo=o("__init__()"),oMo=o(" (throws an error)."),rMo=l(),at=a("div"),F(my.$$.fragment),tMo=l(),jie=a("p"),aMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nMo=l(),ki=a("p"),sMo=o(`Note:
Loading a model from its configuration file does `),Die=a("strong"),lMo=o("not"),iMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),dMo=o("from_pretrained()"),cMo=o(" to load the model weights."),fMo=l(),F(d_.$$.fragment),mMo=l(),Ye=a("div"),F(gy.$$.fragment),gMo=l(),Gie=a("p"),hMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pMo=l(),xa=a("p"),uMo=o("The model class to instantiate is selected based on the "),Oie=a("code"),_Mo=o("model_type"),bMo=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),vMo=o("pretrained_model_name_or_path"),FMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=a("code"),TMo=o("pretrained_model_name_or_path"),MMo=o(":"),EMo=l(),G=a("ul"),c_=a("li"),zie=a("strong"),CMo=o("albert"),wMo=o(" \u2014 "),Oq=a("a"),AMo=o("AlbertForPreTraining"),yMo=o(" (ALBERT model)"),LMo=l(),f_=a("li"),Wie=a("strong"),xMo=o("bart"),$Mo=o(" \u2014 "),Vq=a("a"),kMo=o("BartForConditionalGeneration"),SMo=o(" (BART model)"),RMo=l(),m_=a("li"),Qie=a("strong"),PMo=o("bert"),BMo=o(" \u2014 "),Xq=a("a"),IMo=o("BertForPreTraining"),NMo=o(" (BERT model)"),qMo=l(),g_=a("li"),Hie=a("strong"),jMo=o("big_bird"),DMo=o(" \u2014 "),zq=a("a"),GMo=o("BigBirdForPreTraining"),OMo=o(" (BigBird model)"),VMo=l(),h_=a("li"),Uie=a("strong"),XMo=o("camembert"),zMo=o(" \u2014 "),Wq=a("a"),WMo=o("CamembertForMaskedLM"),QMo=o(" (CamemBERT model)"),HMo=l(),p_=a("li"),Jie=a("strong"),UMo=o("ctrl"),JMo=o(" \u2014 "),Qq=a("a"),YMo=o("CTRLLMHeadModel"),KMo=o(" (CTRL model)"),ZMo=l(),u_=a("li"),Yie=a("strong"),e4o=o("data2vec-text"),o4o=o(" \u2014 "),Hq=a("a"),r4o=o("Data2VecTextForMaskedLM"),t4o=o(" (Data2VecText model)"),a4o=l(),__=a("li"),Kie=a("strong"),n4o=o("deberta"),s4o=o(" \u2014 "),Uq=a("a"),l4o=o("DebertaForMaskedLM"),i4o=o(" (DeBERTa model)"),d4o=l(),b_=a("li"),Zie=a("strong"),c4o=o("deberta-v2"),f4o=o(" \u2014 "),Jq=a("a"),m4o=o("DebertaV2ForMaskedLM"),g4o=o(" (DeBERTa-v2 model)"),h4o=l(),v_=a("li"),ede=a("strong"),p4o=o("distilbert"),u4o=o(" \u2014 "),Yq=a("a"),_4o=o("DistilBertForMaskedLM"),b4o=o(" (DistilBERT model)"),v4o=l(),F_=a("li"),ode=a("strong"),F4o=o("electra"),T4o=o(" \u2014 "),Kq=a("a"),M4o=o("ElectraForPreTraining"),E4o=o(" (ELECTRA model)"),C4o=l(),T_=a("li"),rde=a("strong"),w4o=o("flaubert"),A4o=o(" \u2014 "),Zq=a("a"),y4o=o("FlaubertWithLMHeadModel"),L4o=o(" (FlauBERT model)"),x4o=l(),M_=a("li"),tde=a("strong"),$4o=o("flava"),k4o=o(" \u2014 "),ej=a("a"),S4o=o("FlavaForPreTraining"),R4o=o(" (Flava model)"),P4o=l(),E_=a("li"),ade=a("strong"),B4o=o("fnet"),I4o=o(" \u2014 "),oj=a("a"),N4o=o("FNetForPreTraining"),q4o=o(" (FNet model)"),j4o=l(),C_=a("li"),nde=a("strong"),D4o=o("fsmt"),G4o=o(" \u2014 "),rj=a("a"),O4o=o("FSMTForConditionalGeneration"),V4o=o(" (FairSeq Machine-Translation model)"),X4o=l(),w_=a("li"),sde=a("strong"),z4o=o("funnel"),W4o=o(" \u2014 "),tj=a("a"),Q4o=o("FunnelForPreTraining"),H4o=o(" (Funnel Transformer model)"),U4o=l(),A_=a("li"),lde=a("strong"),J4o=o("gpt2"),Y4o=o(" \u2014 "),aj=a("a"),K4o=o("GPT2LMHeadModel"),Z4o=o(" (OpenAI GPT-2 model)"),eEo=l(),y_=a("li"),ide=a("strong"),oEo=o("ibert"),rEo=o(" \u2014 "),nj=a("a"),tEo=o("IBertForMaskedLM"),aEo=o(" (I-BERT model)"),nEo=l(),L_=a("li"),dde=a("strong"),sEo=o("layoutlm"),lEo=o(" \u2014 "),sj=a("a"),iEo=o("LayoutLMForMaskedLM"),dEo=o(" (LayoutLM model)"),cEo=l(),x_=a("li"),cde=a("strong"),fEo=o("longformer"),mEo=o(" \u2014 "),lj=a("a"),gEo=o("LongformerForMaskedLM"),hEo=o(" (Longformer model)"),pEo=l(),$_=a("li"),fde=a("strong"),uEo=o("lxmert"),_Eo=o(" \u2014 "),ij=a("a"),bEo=o("LxmertForPreTraining"),vEo=o(" (LXMERT model)"),FEo=l(),k_=a("li"),mde=a("strong"),TEo=o("megatron-bert"),MEo=o(" \u2014 "),dj=a("a"),EEo=o("MegatronBertForPreTraining"),CEo=o(" (MegatronBert model)"),wEo=l(),S_=a("li"),gde=a("strong"),AEo=o("mobilebert"),yEo=o(" \u2014 "),cj=a("a"),LEo=o("MobileBertForPreTraining"),xEo=o(" (MobileBERT model)"),$Eo=l(),R_=a("li"),hde=a("strong"),kEo=o("mpnet"),SEo=o(" \u2014 "),fj=a("a"),REo=o("MPNetForMaskedLM"),PEo=o(" (MPNet model)"),BEo=l(),P_=a("li"),pde=a("strong"),IEo=o("openai-gpt"),NEo=o(" \u2014 "),mj=a("a"),qEo=o("OpenAIGPTLMHeadModel"),jEo=o(" (OpenAI GPT model)"),DEo=l(),B_=a("li"),ude=a("strong"),GEo=o("retribert"),OEo=o(" \u2014 "),gj=a("a"),VEo=o("RetriBertModel"),XEo=o(" (RetriBERT model)"),zEo=l(),I_=a("li"),_de=a("strong"),WEo=o("roberta"),QEo=o(" \u2014 "),hj=a("a"),HEo=o("RobertaForMaskedLM"),UEo=o(" (RoBERTa model)"),JEo=l(),N_=a("li"),bde=a("strong"),YEo=o("splinter"),KEo=o(" \u2014 "),pj=a("a"),ZEo=o("SplinterForPreTraining"),eCo=o(" (Splinter model)"),oCo=l(),q_=a("li"),vde=a("strong"),rCo=o("squeezebert"),tCo=o(" \u2014 "),uj=a("a"),aCo=o("SqueezeBertForMaskedLM"),nCo=o(" (SqueezeBERT model)"),sCo=l(),j_=a("li"),Fde=a("strong"),lCo=o("t5"),iCo=o(" \u2014 "),_j=a("a"),dCo=o("T5ForConditionalGeneration"),cCo=o(" (T5 model)"),fCo=l(),D_=a("li"),Tde=a("strong"),mCo=o("tapas"),gCo=o(" \u2014 "),bj=a("a"),hCo=o("TapasForMaskedLM"),pCo=o(" (TAPAS model)"),uCo=l(),G_=a("li"),Mde=a("strong"),_Co=o("transfo-xl"),bCo=o(" \u2014 "),vj=a("a"),vCo=o("TransfoXLLMHeadModel"),FCo=o(" (Transformer-XL model)"),TCo=l(),O_=a("li"),Ede=a("strong"),MCo=o("unispeech"),ECo=o(" \u2014 "),Fj=a("a"),CCo=o("UniSpeechForPreTraining"),wCo=o(" (UniSpeech model)"),ACo=l(),V_=a("li"),Cde=a("strong"),yCo=o("unispeech-sat"),LCo=o(" \u2014 "),Tj=a("a"),xCo=o("UniSpeechSatForPreTraining"),$Co=o(" (UniSpeechSat model)"),kCo=l(),X_=a("li"),wde=a("strong"),SCo=o("visual_bert"),RCo=o(" \u2014 "),Mj=a("a"),PCo=o("VisualBertForPreTraining"),BCo=o(" (VisualBert model)"),ICo=l(),z_=a("li"),Ade=a("strong"),NCo=o("vit_mae"),qCo=o(" \u2014 "),Ej=a("a"),jCo=o("ViTMAEForPreTraining"),DCo=o(" (ViTMAE model)"),GCo=l(),W_=a("li"),yde=a("strong"),OCo=o("wav2vec2"),VCo=o(" \u2014 "),Cj=a("a"),XCo=o("Wav2Vec2ForPreTraining"),zCo=o(" (Wav2Vec2 model)"),WCo=l(),Q_=a("li"),Lde=a("strong"),QCo=o("wav2vec2-conformer"),HCo=o(" \u2014 "),wj=a("a"),UCo=o("Wav2Vec2ConformerForPreTraining"),JCo=o(" (Wav2Vec2-Conformer model)"),YCo=l(),H_=a("li"),xde=a("strong"),KCo=o("xlm"),ZCo=o(" \u2014 "),Aj=a("a"),e5o=o("XLMWithLMHeadModel"),o5o=o(" (XLM model)"),r5o=l(),U_=a("li"),$de=a("strong"),t5o=o("xlm-roberta"),a5o=o(" \u2014 "),yj=a("a"),n5o=o("XLMRobertaForMaskedLM"),s5o=o(" (XLM-RoBERTa model)"),l5o=l(),J_=a("li"),kde=a("strong"),i5o=o("xlm-roberta-xl"),d5o=o(" \u2014 "),Lj=a("a"),c5o=o("XLMRobertaXLForMaskedLM"),f5o=o(" (XLM-RoBERTa-XL model)"),m5o=l(),Y_=a("li"),Sde=a("strong"),g5o=o("xlnet"),h5o=o(" \u2014 "),xj=a("a"),p5o=o("XLNetLMHeadModel"),u5o=o(" (XLNet model)"),_5o=l(),K_=a("p"),b5o=o("The model is set in evaluation mode by default using "),Rde=a("code"),v5o=o("model.eval()"),F5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),T5o=o("model.train()"),M5o=l(),F(Z_.$$.fragment),Iqe=l(),Si=a("h2"),e1=a("a"),Bde=a("span"),F(hy.$$.fragment),E5o=l(),Ide=a("span"),C5o=o("AutoModelForCausalLM"),Nqe=l(),$o=a("div"),F(py.$$.fragment),w5o=l(),Ri=a("p"),A5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$j=a("a"),y5o=o("from_pretrained()"),L5o=o(" class method or the "),kj=a("a"),x5o=o("from_config()"),$5o=o(` class
method.`),k5o=l(),uy=a("p"),S5o=o("This class cannot be instantiated directly using "),Nde=a("code"),R5o=o("__init__()"),P5o=o(" (throws an error)."),B5o=l(),nt=a("div"),F(_y.$$.fragment),I5o=l(),qde=a("p"),N5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q5o=l(),Pi=a("p"),j5o=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),D5o=o("not"),G5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),O5o=o("from_pretrained()"),V5o=o(" to load the model weights."),X5o=l(),F(o1.$$.fragment),z5o=l(),Ke=a("div"),F(by.$$.fragment),W5o=l(),Dde=a("p"),Q5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H5o=l(),$a=a("p"),U5o=o("The model class to instantiate is selected based on the "),Gde=a("code"),J5o=o("model_type"),Y5o=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),K5o=o("pretrained_model_name_or_path"),Z5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),ewo=o("pretrained_model_name_or_path"),owo=o(":"),rwo=l(),z=a("ul"),r1=a("li"),Xde=a("strong"),two=o("bart"),awo=o(" \u2014 "),Rj=a("a"),nwo=o("BartForCausalLM"),swo=o(" (BART model)"),lwo=l(),t1=a("li"),zde=a("strong"),iwo=o("bert"),dwo=o(" \u2014 "),Pj=a("a"),cwo=o("BertLMHeadModel"),fwo=o(" (BERT model)"),mwo=l(),a1=a("li"),Wde=a("strong"),gwo=o("bert-generation"),hwo=o(" \u2014 "),Bj=a("a"),pwo=o("BertGenerationDecoder"),uwo=o(" (Bert Generation model)"),_wo=l(),n1=a("li"),Qde=a("strong"),bwo=o("big_bird"),vwo=o(" \u2014 "),Ij=a("a"),Fwo=o("BigBirdForCausalLM"),Two=o(" (BigBird model)"),Mwo=l(),s1=a("li"),Hde=a("strong"),Ewo=o("bigbird_pegasus"),Cwo=o(" \u2014 "),Nj=a("a"),wwo=o("BigBirdPegasusForCausalLM"),Awo=o(" (BigBirdPegasus model)"),ywo=l(),l1=a("li"),Ude=a("strong"),Lwo=o("blenderbot"),xwo=o(" \u2014 "),qj=a("a"),$wo=o("BlenderbotForCausalLM"),kwo=o(" (Blenderbot model)"),Swo=l(),i1=a("li"),Jde=a("strong"),Rwo=o("blenderbot-small"),Pwo=o(" \u2014 "),jj=a("a"),Bwo=o("BlenderbotSmallForCausalLM"),Iwo=o(" (BlenderbotSmall model)"),Nwo=l(),d1=a("li"),Yde=a("strong"),qwo=o("camembert"),jwo=o(" \u2014 "),Dj=a("a"),Dwo=o("CamembertForCausalLM"),Gwo=o(" (CamemBERT model)"),Owo=l(),c1=a("li"),Kde=a("strong"),Vwo=o("ctrl"),Xwo=o(" \u2014 "),Gj=a("a"),zwo=o("CTRLLMHeadModel"),Wwo=o(" (CTRL model)"),Qwo=l(),f1=a("li"),Zde=a("strong"),Hwo=o("data2vec-text"),Uwo=o(" \u2014 "),Oj=a("a"),Jwo=o("Data2VecTextForCausalLM"),Ywo=o(" (Data2VecText model)"),Kwo=l(),m1=a("li"),ece=a("strong"),Zwo=o("electra"),e0o=o(" \u2014 "),Vj=a("a"),o0o=o("ElectraForCausalLM"),r0o=o(" (ELECTRA model)"),t0o=l(),g1=a("li"),oce=a("strong"),a0o=o("gpt2"),n0o=o(" \u2014 "),Xj=a("a"),s0o=o("GPT2LMHeadModel"),l0o=o(" (OpenAI GPT-2 model)"),i0o=l(),h1=a("li"),rce=a("strong"),d0o=o("gpt_neo"),c0o=o(" \u2014 "),zj=a("a"),f0o=o("GPTNeoForCausalLM"),m0o=o(" (GPT Neo model)"),g0o=l(),p1=a("li"),tce=a("strong"),h0o=o("gpt_neox"),p0o=o(" \u2014 "),Wj=a("a"),u0o=o("GPTNeoXForCausalLM"),_0o=o(" (GPT NeoX model)"),b0o=l(),u1=a("li"),ace=a("strong"),v0o=o("gptj"),F0o=o(" \u2014 "),Qj=a("a"),T0o=o("GPTJForCausalLM"),M0o=o(" (GPT-J model)"),E0o=l(),_1=a("li"),nce=a("strong"),C0o=o("marian"),w0o=o(" \u2014 "),Hj=a("a"),A0o=o("MarianForCausalLM"),y0o=o(" (Marian model)"),L0o=l(),b1=a("li"),sce=a("strong"),x0o=o("mbart"),$0o=o(" \u2014 "),Uj=a("a"),k0o=o("MBartForCausalLM"),S0o=o(" (mBART model)"),R0o=l(),v1=a("li"),lce=a("strong"),P0o=o("megatron-bert"),B0o=o(" \u2014 "),Jj=a("a"),I0o=o("MegatronBertForCausalLM"),N0o=o(" (MegatronBert model)"),q0o=l(),F1=a("li"),ice=a("strong"),j0o=o("openai-gpt"),D0o=o(" \u2014 "),Yj=a("a"),G0o=o("OpenAIGPTLMHeadModel"),O0o=o(" (OpenAI GPT model)"),V0o=l(),T1=a("li"),dce=a("strong"),X0o=o("opt"),z0o=o(" \u2014 "),Kj=a("a"),W0o=o("OPTForCausalLM"),Q0o=o(" (OPT model)"),H0o=l(),M1=a("li"),cce=a("strong"),U0o=o("pegasus"),J0o=o(" \u2014 "),Zj=a("a"),Y0o=o("PegasusForCausalLM"),K0o=o(" (Pegasus model)"),Z0o=l(),E1=a("li"),fce=a("strong"),e6o=o("plbart"),o6o=o(" \u2014 "),eD=a("a"),r6o=o("PLBartForCausalLM"),t6o=o(" (PLBart model)"),a6o=l(),C1=a("li"),mce=a("strong"),n6o=o("prophetnet"),s6o=o(" \u2014 "),oD=a("a"),l6o=o("ProphetNetForCausalLM"),i6o=o(" (ProphetNet model)"),d6o=l(),w1=a("li"),gce=a("strong"),c6o=o("qdqbert"),f6o=o(" \u2014 "),rD=a("a"),m6o=o("QDQBertLMHeadModel"),g6o=o(" (QDQBert model)"),h6o=l(),A1=a("li"),hce=a("strong"),p6o=o("reformer"),u6o=o(" \u2014 "),tD=a("a"),_6o=o("ReformerModelWithLMHead"),b6o=o(" (Reformer model)"),v6o=l(),y1=a("li"),pce=a("strong"),F6o=o("rembert"),T6o=o(" \u2014 "),aD=a("a"),M6o=o("RemBertForCausalLM"),E6o=o(" (RemBERT model)"),C6o=l(),L1=a("li"),uce=a("strong"),w6o=o("roberta"),A6o=o(" \u2014 "),nD=a("a"),y6o=o("RobertaForCausalLM"),L6o=o(" (RoBERTa model)"),x6o=l(),x1=a("li"),_ce=a("strong"),$6o=o("roformer"),k6o=o(" \u2014 "),sD=a("a"),S6o=o("RoFormerForCausalLM"),R6o=o(" (RoFormer model)"),P6o=l(),$1=a("li"),bce=a("strong"),B6o=o("speech_to_text_2"),I6o=o(" \u2014 "),lD=a("a"),N6o=o("Speech2Text2ForCausalLM"),q6o=o(" (Speech2Text2 model)"),j6o=l(),k1=a("li"),vce=a("strong"),D6o=o("transfo-xl"),G6o=o(" \u2014 "),iD=a("a"),O6o=o("TransfoXLLMHeadModel"),V6o=o(" (Transformer-XL model)"),X6o=l(),S1=a("li"),Fce=a("strong"),z6o=o("trocr"),W6o=o(" \u2014 "),dD=a("a"),Q6o=o("TrOCRForCausalLM"),H6o=o(" (TrOCR model)"),U6o=l(),R1=a("li"),Tce=a("strong"),J6o=o("xglm"),Y6o=o(" \u2014 "),cD=a("a"),K6o=o("XGLMForCausalLM"),Z6o=o(" (XGLM model)"),eAo=l(),P1=a("li"),Mce=a("strong"),oAo=o("xlm"),rAo=o(" \u2014 "),fD=a("a"),tAo=o("XLMWithLMHeadModel"),aAo=o(" (XLM model)"),nAo=l(),B1=a("li"),Ece=a("strong"),sAo=o("xlm-prophetnet"),lAo=o(" \u2014 "),mD=a("a"),iAo=o("XLMProphetNetForCausalLM"),dAo=o(" (XLMProphetNet model)"),cAo=l(),I1=a("li"),Cce=a("strong"),fAo=o("xlm-roberta"),mAo=o(" \u2014 "),gD=a("a"),gAo=o("XLMRobertaForCausalLM"),hAo=o(" (XLM-RoBERTa model)"),pAo=l(),N1=a("li"),wce=a("strong"),uAo=o("xlm-roberta-xl"),_Ao=o(" \u2014 "),hD=a("a"),bAo=o("XLMRobertaXLForCausalLM"),vAo=o(" (XLM-RoBERTa-XL model)"),FAo=l(),q1=a("li"),Ace=a("strong"),TAo=o("xlnet"),MAo=o(" \u2014 "),pD=a("a"),EAo=o("XLNetLMHeadModel"),CAo=o(" (XLNet model)"),wAo=l(),j1=a("p"),AAo=o("The model is set in evaluation mode by default using "),yce=a("code"),yAo=o("model.eval()"),LAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),xAo=o("model.train()"),$Ao=l(),F(D1.$$.fragment),qqe=l(),Bi=a("h2"),G1=a("a"),xce=a("span"),F(vy.$$.fragment),kAo=l(),$ce=a("span"),SAo=o("AutoModelForMaskedLM"),jqe=l(),ko=a("div"),F(Fy.$$.fragment),RAo=l(),Ii=a("p"),PAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=a("a"),BAo=o("from_pretrained()"),IAo=o(" class method or the "),_D=a("a"),NAo=o("from_config()"),qAo=o(` class
method.`),jAo=l(),Ty=a("p"),DAo=o("This class cannot be instantiated directly using "),kce=a("code"),GAo=o("__init__()"),OAo=o(" (throws an error)."),VAo=l(),st=a("div"),F(My.$$.fragment),XAo=l(),Sce=a("p"),zAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WAo=l(),Ni=a("p"),QAo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),HAo=o("not"),UAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),JAo=o("from_pretrained()"),YAo=o(" to load the model weights."),KAo=l(),F(O1.$$.fragment),ZAo=l(),Ze=a("div"),F(Ey.$$.fragment),eyo=l(),Pce=a("p"),oyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ryo=l(),ka=a("p"),tyo=o("The model class to instantiate is selected based on the "),Bce=a("code"),ayo=o("model_type"),nyo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),syo=o("pretrained_model_name_or_path"),lyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=a("code"),iyo=o("pretrained_model_name_or_path"),dyo=o(":"),cyo=l(),Q=a("ul"),V1=a("li"),qce=a("strong"),fyo=o("albert"),myo=o(" \u2014 "),vD=a("a"),gyo=o("AlbertForMaskedLM"),hyo=o(" (ALBERT model)"),pyo=l(),X1=a("li"),jce=a("strong"),uyo=o("bart"),_yo=o(" \u2014 "),FD=a("a"),byo=o("BartForConditionalGeneration"),vyo=o(" (BART model)"),Fyo=l(),z1=a("li"),Dce=a("strong"),Tyo=o("bert"),Myo=o(" \u2014 "),TD=a("a"),Eyo=o("BertForMaskedLM"),Cyo=o(" (BERT model)"),wyo=l(),W1=a("li"),Gce=a("strong"),Ayo=o("big_bird"),yyo=o(" \u2014 "),MD=a("a"),Lyo=o("BigBirdForMaskedLM"),xyo=o(" (BigBird model)"),$yo=l(),Q1=a("li"),Oce=a("strong"),kyo=o("camembert"),Syo=o(" \u2014 "),ED=a("a"),Ryo=o("CamembertForMaskedLM"),Pyo=o(" (CamemBERT model)"),Byo=l(),H1=a("li"),Vce=a("strong"),Iyo=o("convbert"),Nyo=o(" \u2014 "),CD=a("a"),qyo=o("ConvBertForMaskedLM"),jyo=o(" (ConvBERT model)"),Dyo=l(),U1=a("li"),Xce=a("strong"),Gyo=o("data2vec-text"),Oyo=o(" \u2014 "),wD=a("a"),Vyo=o("Data2VecTextForMaskedLM"),Xyo=o(" (Data2VecText model)"),zyo=l(),J1=a("li"),zce=a("strong"),Wyo=o("deberta"),Qyo=o(" \u2014 "),AD=a("a"),Hyo=o("DebertaForMaskedLM"),Uyo=o(" (DeBERTa model)"),Jyo=l(),Y1=a("li"),Wce=a("strong"),Yyo=o("deberta-v2"),Kyo=o(" \u2014 "),yD=a("a"),Zyo=o("DebertaV2ForMaskedLM"),eLo=o(" (DeBERTa-v2 model)"),oLo=l(),K1=a("li"),Qce=a("strong"),rLo=o("distilbert"),tLo=o(" \u2014 "),LD=a("a"),aLo=o("DistilBertForMaskedLM"),nLo=o(" (DistilBERT model)"),sLo=l(),Z1=a("li"),Hce=a("strong"),lLo=o("electra"),iLo=o(" \u2014 "),xD=a("a"),dLo=o("ElectraForMaskedLM"),cLo=o(" (ELECTRA model)"),fLo=l(),e3=a("li"),Uce=a("strong"),mLo=o("flaubert"),gLo=o(" \u2014 "),$D=a("a"),hLo=o("FlaubertWithLMHeadModel"),pLo=o(" (FlauBERT model)"),uLo=l(),o3=a("li"),Jce=a("strong"),_Lo=o("fnet"),bLo=o(" \u2014 "),kD=a("a"),vLo=o("FNetForMaskedLM"),FLo=o(" (FNet model)"),TLo=l(),r3=a("li"),Yce=a("strong"),MLo=o("funnel"),ELo=o(" \u2014 "),SD=a("a"),CLo=o("FunnelForMaskedLM"),wLo=o(" (Funnel Transformer model)"),ALo=l(),t3=a("li"),Kce=a("strong"),yLo=o("ibert"),LLo=o(" \u2014 "),RD=a("a"),xLo=o("IBertForMaskedLM"),$Lo=o(" (I-BERT model)"),kLo=l(),a3=a("li"),Zce=a("strong"),SLo=o("layoutlm"),RLo=o(" \u2014 "),PD=a("a"),PLo=o("LayoutLMForMaskedLM"),BLo=o(" (LayoutLM model)"),ILo=l(),n3=a("li"),efe=a("strong"),NLo=o("longformer"),qLo=o(" \u2014 "),BD=a("a"),jLo=o("LongformerForMaskedLM"),DLo=o(" (Longformer model)"),GLo=l(),s3=a("li"),ofe=a("strong"),OLo=o("mbart"),VLo=o(" \u2014 "),ID=a("a"),XLo=o("MBartForConditionalGeneration"),zLo=o(" (mBART model)"),WLo=l(),l3=a("li"),rfe=a("strong"),QLo=o("megatron-bert"),HLo=o(" \u2014 "),ND=a("a"),ULo=o("MegatronBertForMaskedLM"),JLo=o(" (MegatronBert model)"),YLo=l(),i3=a("li"),tfe=a("strong"),KLo=o("mobilebert"),ZLo=o(" \u2014 "),qD=a("a"),e8o=o("MobileBertForMaskedLM"),o8o=o(" (MobileBERT model)"),r8o=l(),d3=a("li"),afe=a("strong"),t8o=o("mpnet"),a8o=o(" \u2014 "),jD=a("a"),n8o=o("MPNetForMaskedLM"),s8o=o(" (MPNet model)"),l8o=l(),c3=a("li"),nfe=a("strong"),i8o=o("nystromformer"),d8o=o(" \u2014 "),DD=a("a"),c8o=o("NystromformerForMaskedLM"),f8o=o(" (Nystromformer model)"),m8o=l(),f3=a("li"),sfe=a("strong"),g8o=o("perceiver"),h8o=o(" \u2014 "),GD=a("a"),p8o=o("PerceiverForMaskedLM"),u8o=o(" (Perceiver model)"),_8o=l(),m3=a("li"),lfe=a("strong"),b8o=o("qdqbert"),v8o=o(" \u2014 "),OD=a("a"),F8o=o("QDQBertForMaskedLM"),T8o=o(" (QDQBert model)"),M8o=l(),g3=a("li"),ife=a("strong"),E8o=o("reformer"),C8o=o(" \u2014 "),VD=a("a"),w8o=o("ReformerForMaskedLM"),A8o=o(" (Reformer model)"),y8o=l(),h3=a("li"),dfe=a("strong"),L8o=o("rembert"),x8o=o(" \u2014 "),XD=a("a"),$8o=o("RemBertForMaskedLM"),k8o=o(" (RemBERT model)"),S8o=l(),p3=a("li"),cfe=a("strong"),R8o=o("roberta"),P8o=o(" \u2014 "),zD=a("a"),B8o=o("RobertaForMaskedLM"),I8o=o(" (RoBERTa model)"),N8o=l(),u3=a("li"),ffe=a("strong"),q8o=o("roformer"),j8o=o(" \u2014 "),WD=a("a"),D8o=o("RoFormerForMaskedLM"),G8o=o(" (RoFormer model)"),O8o=l(),_3=a("li"),mfe=a("strong"),V8o=o("squeezebert"),X8o=o(" \u2014 "),QD=a("a"),z8o=o("SqueezeBertForMaskedLM"),W8o=o(" (SqueezeBERT model)"),Q8o=l(),b3=a("li"),gfe=a("strong"),H8o=o("tapas"),U8o=o(" \u2014 "),HD=a("a"),J8o=o("TapasForMaskedLM"),Y8o=o(" (TAPAS model)"),K8o=l(),v3=a("li"),hfe=a("strong"),Z8o=o("wav2vec2"),e9o=o(" \u2014 "),pfe=a("code"),o9o=o("Wav2Vec2ForMaskedLM"),r9o=o(" (Wav2Vec2 model)"),t9o=l(),F3=a("li"),ufe=a("strong"),a9o=o("xlm"),n9o=o(" \u2014 "),UD=a("a"),s9o=o("XLMWithLMHeadModel"),l9o=o(" (XLM model)"),i9o=l(),T3=a("li"),_fe=a("strong"),d9o=o("xlm-roberta"),c9o=o(" \u2014 "),JD=a("a"),f9o=o("XLMRobertaForMaskedLM"),m9o=o(" (XLM-RoBERTa model)"),g9o=l(),M3=a("li"),bfe=a("strong"),h9o=o("xlm-roberta-xl"),p9o=o(" \u2014 "),YD=a("a"),u9o=o("XLMRobertaXLForMaskedLM"),_9o=o(" (XLM-RoBERTa-XL model)"),b9o=l(),E3=a("li"),vfe=a("strong"),v9o=o("yoso"),F9o=o(" \u2014 "),KD=a("a"),T9o=o("YosoForMaskedLM"),M9o=o(" (YOSO model)"),E9o=l(),C3=a("p"),C9o=o("The model is set in evaluation mode by default using "),Ffe=a("code"),w9o=o("model.eval()"),A9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),y9o=o("model.train()"),L9o=l(),F(w3.$$.fragment),Dqe=l(),qi=a("h2"),A3=a("a"),Mfe=a("span"),F(Cy.$$.fragment),x9o=l(),Efe=a("span"),$9o=o("AutoModelForSeq2SeqLM"),Gqe=l(),So=a("div"),F(wy.$$.fragment),k9o=l(),ji=a("p"),S9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZD=a("a"),R9o=o("from_pretrained()"),P9o=o(" class method or the "),eG=a("a"),B9o=o("from_config()"),I9o=o(` class
method.`),N9o=l(),Ay=a("p"),q9o=o("This class cannot be instantiated directly using "),Cfe=a("code"),j9o=o("__init__()"),D9o=o(" (throws an error)."),G9o=l(),lt=a("div"),F(yy.$$.fragment),O9o=l(),wfe=a("p"),V9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X9o=l(),Di=a("p"),z9o=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),W9o=o("not"),Q9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),H9o=o("from_pretrained()"),U9o=o(" to load the model weights."),J9o=l(),F(y3.$$.fragment),Y9o=l(),eo=a("div"),F(Ly.$$.fragment),K9o=l(),yfe=a("p"),Z9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),exo=l(),Sa=a("p"),oxo=o("The model class to instantiate is selected based on the "),Lfe=a("code"),rxo=o("model_type"),txo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),axo=o("pretrained_model_name_or_path"),nxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),sxo=o("pretrained_model_name_or_path"),lxo=o(":"),ixo=l(),_e=a("ul"),L3=a("li"),kfe=a("strong"),dxo=o("bart"),cxo=o(" \u2014 "),rG=a("a"),fxo=o("BartForConditionalGeneration"),mxo=o(" (BART model)"),gxo=l(),x3=a("li"),Sfe=a("strong"),hxo=o("bigbird_pegasus"),pxo=o(" \u2014 "),tG=a("a"),uxo=o("BigBirdPegasusForConditionalGeneration"),_xo=o(" (BigBirdPegasus model)"),bxo=l(),$3=a("li"),Rfe=a("strong"),vxo=o("blenderbot"),Fxo=o(" \u2014 "),aG=a("a"),Txo=o("BlenderbotForConditionalGeneration"),Mxo=o(" (Blenderbot model)"),Exo=l(),k3=a("li"),Pfe=a("strong"),Cxo=o("blenderbot-small"),wxo=o(" \u2014 "),nG=a("a"),Axo=o("BlenderbotSmallForConditionalGeneration"),yxo=o(" (BlenderbotSmall model)"),Lxo=l(),S3=a("li"),Bfe=a("strong"),xxo=o("encoder-decoder"),$xo=o(" \u2014 "),sG=a("a"),kxo=o("EncoderDecoderModel"),Sxo=o(" (Encoder decoder model)"),Rxo=l(),R3=a("li"),Ife=a("strong"),Pxo=o("fsmt"),Bxo=o(" \u2014 "),lG=a("a"),Ixo=o("FSMTForConditionalGeneration"),Nxo=o(" (FairSeq Machine-Translation model)"),qxo=l(),P3=a("li"),Nfe=a("strong"),jxo=o("led"),Dxo=o(" \u2014 "),iG=a("a"),Gxo=o("LEDForConditionalGeneration"),Oxo=o(" (LED model)"),Vxo=l(),B3=a("li"),qfe=a("strong"),Xxo=o("m2m_100"),zxo=o(" \u2014 "),dG=a("a"),Wxo=o("M2M100ForConditionalGeneration"),Qxo=o(" (M2M100 model)"),Hxo=l(),I3=a("li"),jfe=a("strong"),Uxo=o("marian"),Jxo=o(" \u2014 "),cG=a("a"),Yxo=o("MarianMTModel"),Kxo=o(" (Marian model)"),Zxo=l(),N3=a("li"),Dfe=a("strong"),e$o=o("mbart"),o$o=o(" \u2014 "),fG=a("a"),r$o=o("MBartForConditionalGeneration"),t$o=o(" (mBART model)"),a$o=l(),q3=a("li"),Gfe=a("strong"),n$o=o("mt5"),s$o=o(" \u2014 "),mG=a("a"),l$o=o("MT5ForConditionalGeneration"),i$o=o(" (mT5 model)"),d$o=l(),j3=a("li"),Ofe=a("strong"),c$o=o("pegasus"),f$o=o(" \u2014 "),gG=a("a"),m$o=o("PegasusForConditionalGeneration"),g$o=o(" (Pegasus model)"),h$o=l(),D3=a("li"),Vfe=a("strong"),p$o=o("plbart"),u$o=o(" \u2014 "),hG=a("a"),_$o=o("PLBartForConditionalGeneration"),b$o=o(" (PLBart model)"),v$o=l(),G3=a("li"),Xfe=a("strong"),F$o=o("prophetnet"),T$o=o(" \u2014 "),pG=a("a"),M$o=o("ProphetNetForConditionalGeneration"),E$o=o(" (ProphetNet model)"),C$o=l(),O3=a("li"),zfe=a("strong"),w$o=o("t5"),A$o=o(" \u2014 "),uG=a("a"),y$o=o("T5ForConditionalGeneration"),L$o=o(" (T5 model)"),x$o=l(),V3=a("li"),Wfe=a("strong"),$$o=o("xlm-prophetnet"),k$o=o(" \u2014 "),_G=a("a"),S$o=o("XLMProphetNetForConditionalGeneration"),R$o=o(" (XLMProphetNet model)"),P$o=l(),X3=a("p"),B$o=o("The model is set in evaluation mode by default using "),Qfe=a("code"),I$o=o("model.eval()"),N$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=a("code"),q$o=o("model.train()"),j$o=l(),F(z3.$$.fragment),Oqe=l(),Gi=a("h2"),W3=a("a"),Ufe=a("span"),F(xy.$$.fragment),D$o=l(),Jfe=a("span"),G$o=o("AutoModelForSequenceClassification"),Vqe=l(),Ro=a("div"),F($y.$$.fragment),O$o=l(),Oi=a("p"),V$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bG=a("a"),X$o=o("from_pretrained()"),z$o=o(" class method or the "),vG=a("a"),W$o=o("from_config()"),Q$o=o(` class
method.`),H$o=l(),ky=a("p"),U$o=o("This class cannot be instantiated directly using "),Yfe=a("code"),J$o=o("__init__()"),Y$o=o(" (throws an error)."),K$o=l(),it=a("div"),F(Sy.$$.fragment),Z$o=l(),Kfe=a("p"),eko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oko=l(),Vi=a("p"),rko=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),tko=o("not"),ako=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),nko=o("from_pretrained()"),sko=o(" to load the model weights."),lko=l(),F(Q3.$$.fragment),iko=l(),oo=a("div"),F(Ry.$$.fragment),dko=l(),eme=a("p"),cko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fko=l(),Ra=a("p"),mko=o("The model class to instantiate is selected based on the "),ome=a("code"),gko=o("model_type"),hko=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),pko=o("pretrained_model_name_or_path"),uko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),_ko=o("pretrained_model_name_or_path"),bko=o(":"),vko=l(),N=a("ul"),H3=a("li"),ame=a("strong"),Fko=o("albert"),Tko=o(" \u2014 "),TG=a("a"),Mko=o("AlbertForSequenceClassification"),Eko=o(" (ALBERT model)"),Cko=l(),U3=a("li"),nme=a("strong"),wko=o("bart"),Ako=o(" \u2014 "),MG=a("a"),yko=o("BartForSequenceClassification"),Lko=o(" (BART model)"),xko=l(),J3=a("li"),sme=a("strong"),$ko=o("bert"),kko=o(" \u2014 "),EG=a("a"),Sko=o("BertForSequenceClassification"),Rko=o(" (BERT model)"),Pko=l(),Y3=a("li"),lme=a("strong"),Bko=o("big_bird"),Iko=o(" \u2014 "),CG=a("a"),Nko=o("BigBirdForSequenceClassification"),qko=o(" (BigBird model)"),jko=l(),K3=a("li"),ime=a("strong"),Dko=o("bigbird_pegasus"),Gko=o(" \u2014 "),wG=a("a"),Oko=o("BigBirdPegasusForSequenceClassification"),Vko=o(" (BigBirdPegasus model)"),Xko=l(),Z3=a("li"),dme=a("strong"),zko=o("camembert"),Wko=o(" \u2014 "),AG=a("a"),Qko=o("CamembertForSequenceClassification"),Hko=o(" (CamemBERT model)"),Uko=l(),eb=a("li"),cme=a("strong"),Jko=o("canine"),Yko=o(" \u2014 "),yG=a("a"),Kko=o("CanineForSequenceClassification"),Zko=o(" (Canine model)"),eSo=l(),ob=a("li"),fme=a("strong"),oSo=o("convbert"),rSo=o(" \u2014 "),LG=a("a"),tSo=o("ConvBertForSequenceClassification"),aSo=o(" (ConvBERT model)"),nSo=l(),rb=a("li"),mme=a("strong"),sSo=o("ctrl"),lSo=o(" \u2014 "),xG=a("a"),iSo=o("CTRLForSequenceClassification"),dSo=o(" (CTRL model)"),cSo=l(),tb=a("li"),gme=a("strong"),fSo=o("data2vec-text"),mSo=o(" \u2014 "),$G=a("a"),gSo=o("Data2VecTextForSequenceClassification"),hSo=o(" (Data2VecText model)"),pSo=l(),ab=a("li"),hme=a("strong"),uSo=o("deberta"),_So=o(" \u2014 "),kG=a("a"),bSo=o("DebertaForSequenceClassification"),vSo=o(" (DeBERTa model)"),FSo=l(),nb=a("li"),pme=a("strong"),TSo=o("deberta-v2"),MSo=o(" \u2014 "),SG=a("a"),ESo=o("DebertaV2ForSequenceClassification"),CSo=o(" (DeBERTa-v2 model)"),wSo=l(),sb=a("li"),ume=a("strong"),ASo=o("distilbert"),ySo=o(" \u2014 "),RG=a("a"),LSo=o("DistilBertForSequenceClassification"),xSo=o(" (DistilBERT model)"),$So=l(),lb=a("li"),_me=a("strong"),kSo=o("electra"),SSo=o(" \u2014 "),PG=a("a"),RSo=o("ElectraForSequenceClassification"),PSo=o(" (ELECTRA model)"),BSo=l(),ib=a("li"),bme=a("strong"),ISo=o("flaubert"),NSo=o(" \u2014 "),BG=a("a"),qSo=o("FlaubertForSequenceClassification"),jSo=o(" (FlauBERT model)"),DSo=l(),db=a("li"),vme=a("strong"),GSo=o("fnet"),OSo=o(" \u2014 "),IG=a("a"),VSo=o("FNetForSequenceClassification"),XSo=o(" (FNet model)"),zSo=l(),cb=a("li"),Fme=a("strong"),WSo=o("funnel"),QSo=o(" \u2014 "),NG=a("a"),HSo=o("FunnelForSequenceClassification"),USo=o(" (Funnel Transformer model)"),JSo=l(),fb=a("li"),Tme=a("strong"),YSo=o("gpt2"),KSo=o(" \u2014 "),qG=a("a"),ZSo=o("GPT2ForSequenceClassification"),eRo=o(" (OpenAI GPT-2 model)"),oRo=l(),mb=a("li"),Mme=a("strong"),rRo=o("gpt_neo"),tRo=o(" \u2014 "),jG=a("a"),aRo=o("GPTNeoForSequenceClassification"),nRo=o(" (GPT Neo model)"),sRo=l(),gb=a("li"),Eme=a("strong"),lRo=o("gptj"),iRo=o(" \u2014 "),DG=a("a"),dRo=o("GPTJForSequenceClassification"),cRo=o(" (GPT-J model)"),fRo=l(),hb=a("li"),Cme=a("strong"),mRo=o("ibert"),gRo=o(" \u2014 "),GG=a("a"),hRo=o("IBertForSequenceClassification"),pRo=o(" (I-BERT model)"),uRo=l(),pb=a("li"),wme=a("strong"),_Ro=o("layoutlm"),bRo=o(" \u2014 "),OG=a("a"),vRo=o("LayoutLMForSequenceClassification"),FRo=o(" (LayoutLM model)"),TRo=l(),ub=a("li"),Ame=a("strong"),MRo=o("layoutlmv2"),ERo=o(" \u2014 "),VG=a("a"),CRo=o("LayoutLMv2ForSequenceClassification"),wRo=o(" (LayoutLMv2 model)"),ARo=l(),_b=a("li"),yme=a("strong"),yRo=o("layoutlmv3"),LRo=o(" \u2014 "),XG=a("a"),xRo=o("LayoutLMv3ForSequenceClassification"),$Ro=o(" (LayoutLMv3 model)"),kRo=l(),bb=a("li"),Lme=a("strong"),SRo=o("led"),RRo=o(" \u2014 "),zG=a("a"),PRo=o("LEDForSequenceClassification"),BRo=o(" (LED model)"),IRo=l(),vb=a("li"),xme=a("strong"),NRo=o("longformer"),qRo=o(" \u2014 "),WG=a("a"),jRo=o("LongformerForSequenceClassification"),DRo=o(" (Longformer model)"),GRo=l(),Fb=a("li"),$me=a("strong"),ORo=o("mbart"),VRo=o(" \u2014 "),QG=a("a"),XRo=o("MBartForSequenceClassification"),zRo=o(" (mBART model)"),WRo=l(),Tb=a("li"),kme=a("strong"),QRo=o("megatron-bert"),HRo=o(" \u2014 "),HG=a("a"),URo=o("MegatronBertForSequenceClassification"),JRo=o(" (MegatronBert model)"),YRo=l(),Mb=a("li"),Sme=a("strong"),KRo=o("mobilebert"),ZRo=o(" \u2014 "),UG=a("a"),ePo=o("MobileBertForSequenceClassification"),oPo=o(" (MobileBERT model)"),rPo=l(),Eb=a("li"),Rme=a("strong"),tPo=o("mpnet"),aPo=o(" \u2014 "),JG=a("a"),nPo=o("MPNetForSequenceClassification"),sPo=o(" (MPNet model)"),lPo=l(),Cb=a("li"),Pme=a("strong"),iPo=o("nystromformer"),dPo=o(" \u2014 "),YG=a("a"),cPo=o("NystromformerForSequenceClassification"),fPo=o(" (Nystromformer model)"),mPo=l(),wb=a("li"),Bme=a("strong"),gPo=o("openai-gpt"),hPo=o(" \u2014 "),KG=a("a"),pPo=o("OpenAIGPTForSequenceClassification"),uPo=o(" (OpenAI GPT model)"),_Po=l(),Ab=a("li"),Ime=a("strong"),bPo=o("perceiver"),vPo=o(" \u2014 "),ZG=a("a"),FPo=o("PerceiverForSequenceClassification"),TPo=o(" (Perceiver model)"),MPo=l(),yb=a("li"),Nme=a("strong"),EPo=o("plbart"),CPo=o(" \u2014 "),eO=a("a"),wPo=o("PLBartForSequenceClassification"),APo=o(" (PLBart model)"),yPo=l(),Lb=a("li"),qme=a("strong"),LPo=o("qdqbert"),xPo=o(" \u2014 "),oO=a("a"),$Po=o("QDQBertForSequenceClassification"),kPo=o(" (QDQBert model)"),SPo=l(),xb=a("li"),jme=a("strong"),RPo=o("reformer"),PPo=o(" \u2014 "),rO=a("a"),BPo=o("ReformerForSequenceClassification"),IPo=o(" (Reformer model)"),NPo=l(),$b=a("li"),Dme=a("strong"),qPo=o("rembert"),jPo=o(" \u2014 "),tO=a("a"),DPo=o("RemBertForSequenceClassification"),GPo=o(" (RemBERT model)"),OPo=l(),kb=a("li"),Gme=a("strong"),VPo=o("roberta"),XPo=o(" \u2014 "),aO=a("a"),zPo=o("RobertaForSequenceClassification"),WPo=o(" (RoBERTa model)"),QPo=l(),Sb=a("li"),Ome=a("strong"),HPo=o("roformer"),UPo=o(" \u2014 "),nO=a("a"),JPo=o("RoFormerForSequenceClassification"),YPo=o(" (RoFormer model)"),KPo=l(),Rb=a("li"),Vme=a("strong"),ZPo=o("squeezebert"),eBo=o(" \u2014 "),sO=a("a"),oBo=o("SqueezeBertForSequenceClassification"),rBo=o(" (SqueezeBERT model)"),tBo=l(),Pb=a("li"),Xme=a("strong"),aBo=o("tapas"),nBo=o(" \u2014 "),lO=a("a"),sBo=o("TapasForSequenceClassification"),lBo=o(" (TAPAS model)"),iBo=l(),Bb=a("li"),zme=a("strong"),dBo=o("transfo-xl"),cBo=o(" \u2014 "),iO=a("a"),fBo=o("TransfoXLForSequenceClassification"),mBo=o(" (Transformer-XL model)"),gBo=l(),Ib=a("li"),Wme=a("strong"),hBo=o("xlm"),pBo=o(" \u2014 "),dO=a("a"),uBo=o("XLMForSequenceClassification"),_Bo=o(" (XLM model)"),bBo=l(),Nb=a("li"),Qme=a("strong"),vBo=o("xlm-roberta"),FBo=o(" \u2014 "),cO=a("a"),TBo=o("XLMRobertaForSequenceClassification"),MBo=o(" (XLM-RoBERTa model)"),EBo=l(),qb=a("li"),Hme=a("strong"),CBo=o("xlm-roberta-xl"),wBo=o(" \u2014 "),fO=a("a"),ABo=o("XLMRobertaXLForSequenceClassification"),yBo=o(" (XLM-RoBERTa-XL model)"),LBo=l(),jb=a("li"),Ume=a("strong"),xBo=o("xlnet"),$Bo=o(" \u2014 "),mO=a("a"),kBo=o("XLNetForSequenceClassification"),SBo=o(" (XLNet model)"),RBo=l(),Db=a("li"),Jme=a("strong"),PBo=o("yoso"),BBo=o(" \u2014 "),gO=a("a"),IBo=o("YosoForSequenceClassification"),NBo=o(" (YOSO model)"),qBo=l(),Gb=a("p"),jBo=o("The model is set in evaluation mode by default using "),Yme=a("code"),DBo=o("model.eval()"),GBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=a("code"),OBo=o("model.train()"),VBo=l(),F(Ob.$$.fragment),Xqe=l(),Xi=a("h2"),Vb=a("a"),Zme=a("span"),F(Py.$$.fragment),XBo=l(),ege=a("span"),zBo=o("AutoModelForMultipleChoice"),zqe=l(),Po=a("div"),F(By.$$.fragment),WBo=l(),zi=a("p"),QBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hO=a("a"),HBo=o("from_pretrained()"),UBo=o(" class method or the "),pO=a("a"),JBo=o("from_config()"),YBo=o(` class
method.`),KBo=l(),Iy=a("p"),ZBo=o("This class cannot be instantiated directly using "),oge=a("code"),eIo=o("__init__()"),oIo=o(" (throws an error)."),rIo=l(),dt=a("div"),F(Ny.$$.fragment),tIo=l(),rge=a("p"),aIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nIo=l(),Wi=a("p"),sIo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),lIo=o("not"),iIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),dIo=o("from_pretrained()"),cIo=o(" to load the model weights."),fIo=l(),F(Xb.$$.fragment),mIo=l(),ro=a("div"),F(qy.$$.fragment),gIo=l(),age=a("p"),hIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pIo=l(),Pa=a("p"),uIo=o("The model class to instantiate is selected based on the "),nge=a("code"),_Io=o("model_type"),bIo=o(` property of the config object (either
passed as an argument or loaded from `),sge=a("code"),vIo=o("pretrained_model_name_or_path"),FIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=a("code"),TIo=o("pretrained_model_name_or_path"),MIo=o(":"),EIo=l(),K=a("ul"),zb=a("li"),ige=a("strong"),CIo=o("albert"),wIo=o(" \u2014 "),_O=a("a"),AIo=o("AlbertForMultipleChoice"),yIo=o(" (ALBERT model)"),LIo=l(),Wb=a("li"),dge=a("strong"),xIo=o("bert"),$Io=o(" \u2014 "),bO=a("a"),kIo=o("BertForMultipleChoice"),SIo=o(" (BERT model)"),RIo=l(),Qb=a("li"),cge=a("strong"),PIo=o("big_bird"),BIo=o(" \u2014 "),vO=a("a"),IIo=o("BigBirdForMultipleChoice"),NIo=o(" (BigBird model)"),qIo=l(),Hb=a("li"),fge=a("strong"),jIo=o("camembert"),DIo=o(" \u2014 "),FO=a("a"),GIo=o("CamembertForMultipleChoice"),OIo=o(" (CamemBERT model)"),VIo=l(),Ub=a("li"),mge=a("strong"),XIo=o("canine"),zIo=o(" \u2014 "),TO=a("a"),WIo=o("CanineForMultipleChoice"),QIo=o(" (Canine model)"),HIo=l(),Jb=a("li"),gge=a("strong"),UIo=o("convbert"),JIo=o(" \u2014 "),MO=a("a"),YIo=o("ConvBertForMultipleChoice"),KIo=o(" (ConvBERT model)"),ZIo=l(),Yb=a("li"),hge=a("strong"),eNo=o("data2vec-text"),oNo=o(" \u2014 "),EO=a("a"),rNo=o("Data2VecTextForMultipleChoice"),tNo=o(" (Data2VecText model)"),aNo=l(),Kb=a("li"),pge=a("strong"),nNo=o("deberta-v2"),sNo=o(" \u2014 "),CO=a("a"),lNo=o("DebertaV2ForMultipleChoice"),iNo=o(" (DeBERTa-v2 model)"),dNo=l(),Zb=a("li"),uge=a("strong"),cNo=o("distilbert"),fNo=o(" \u2014 "),wO=a("a"),mNo=o("DistilBertForMultipleChoice"),gNo=o(" (DistilBERT model)"),hNo=l(),e2=a("li"),_ge=a("strong"),pNo=o("electra"),uNo=o(" \u2014 "),AO=a("a"),_No=o("ElectraForMultipleChoice"),bNo=o(" (ELECTRA model)"),vNo=l(),o2=a("li"),bge=a("strong"),FNo=o("flaubert"),TNo=o(" \u2014 "),yO=a("a"),MNo=o("FlaubertForMultipleChoice"),ENo=o(" (FlauBERT model)"),CNo=l(),r2=a("li"),vge=a("strong"),wNo=o("fnet"),ANo=o(" \u2014 "),LO=a("a"),yNo=o("FNetForMultipleChoice"),LNo=o(" (FNet model)"),xNo=l(),t2=a("li"),Fge=a("strong"),$No=o("funnel"),kNo=o(" \u2014 "),xO=a("a"),SNo=o("FunnelForMultipleChoice"),RNo=o(" (Funnel Transformer model)"),PNo=l(),a2=a("li"),Tge=a("strong"),BNo=o("ibert"),INo=o(" \u2014 "),$O=a("a"),NNo=o("IBertForMultipleChoice"),qNo=o(" (I-BERT model)"),jNo=l(),n2=a("li"),Mge=a("strong"),DNo=o("longformer"),GNo=o(" \u2014 "),kO=a("a"),ONo=o("LongformerForMultipleChoice"),VNo=o(" (Longformer model)"),XNo=l(),s2=a("li"),Ege=a("strong"),zNo=o("megatron-bert"),WNo=o(" \u2014 "),SO=a("a"),QNo=o("MegatronBertForMultipleChoice"),HNo=o(" (MegatronBert model)"),UNo=l(),l2=a("li"),Cge=a("strong"),JNo=o("mobilebert"),YNo=o(" \u2014 "),RO=a("a"),KNo=o("MobileBertForMultipleChoice"),ZNo=o(" (MobileBERT model)"),eqo=l(),i2=a("li"),wge=a("strong"),oqo=o("mpnet"),rqo=o(" \u2014 "),PO=a("a"),tqo=o("MPNetForMultipleChoice"),aqo=o(" (MPNet model)"),nqo=l(),d2=a("li"),Age=a("strong"),sqo=o("nystromformer"),lqo=o(" \u2014 "),BO=a("a"),iqo=o("NystromformerForMultipleChoice"),dqo=o(" (Nystromformer model)"),cqo=l(),c2=a("li"),yge=a("strong"),fqo=o("qdqbert"),mqo=o(" \u2014 "),IO=a("a"),gqo=o("QDQBertForMultipleChoice"),hqo=o(" (QDQBert model)"),pqo=l(),f2=a("li"),Lge=a("strong"),uqo=o("rembert"),_qo=o(" \u2014 "),NO=a("a"),bqo=o("RemBertForMultipleChoice"),vqo=o(" (RemBERT model)"),Fqo=l(),m2=a("li"),xge=a("strong"),Tqo=o("roberta"),Mqo=o(" \u2014 "),qO=a("a"),Eqo=o("RobertaForMultipleChoice"),Cqo=o(" (RoBERTa model)"),wqo=l(),g2=a("li"),$ge=a("strong"),Aqo=o("roformer"),yqo=o(" \u2014 "),jO=a("a"),Lqo=o("RoFormerForMultipleChoice"),xqo=o(" (RoFormer model)"),$qo=l(),h2=a("li"),kge=a("strong"),kqo=o("squeezebert"),Sqo=o(" \u2014 "),DO=a("a"),Rqo=o("SqueezeBertForMultipleChoice"),Pqo=o(" (SqueezeBERT model)"),Bqo=l(),p2=a("li"),Sge=a("strong"),Iqo=o("xlm"),Nqo=o(" \u2014 "),GO=a("a"),qqo=o("XLMForMultipleChoice"),jqo=o(" (XLM model)"),Dqo=l(),u2=a("li"),Rge=a("strong"),Gqo=o("xlm-roberta"),Oqo=o(" \u2014 "),OO=a("a"),Vqo=o("XLMRobertaForMultipleChoice"),Xqo=o(" (XLM-RoBERTa model)"),zqo=l(),_2=a("li"),Pge=a("strong"),Wqo=o("xlm-roberta-xl"),Qqo=o(" \u2014 "),VO=a("a"),Hqo=o("XLMRobertaXLForMultipleChoice"),Uqo=o(" (XLM-RoBERTa-XL model)"),Jqo=l(),b2=a("li"),Bge=a("strong"),Yqo=o("xlnet"),Kqo=o(" \u2014 "),XO=a("a"),Zqo=o("XLNetForMultipleChoice"),ejo=o(" (XLNet model)"),ojo=l(),v2=a("li"),Ige=a("strong"),rjo=o("yoso"),tjo=o(" \u2014 "),zO=a("a"),ajo=o("YosoForMultipleChoice"),njo=o(" (YOSO model)"),sjo=l(),F2=a("p"),ljo=o("The model is set in evaluation mode by default using "),Nge=a("code"),ijo=o("model.eval()"),djo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),cjo=o("model.train()"),fjo=l(),F(T2.$$.fragment),Wqe=l(),Qi=a("h2"),M2=a("a"),jge=a("span"),F(jy.$$.fragment),mjo=l(),Dge=a("span"),gjo=o("AutoModelForNextSentencePrediction"),Qqe=l(),Bo=a("div"),F(Dy.$$.fragment),hjo=l(),Hi=a("p"),pjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WO=a("a"),ujo=o("from_pretrained()"),_jo=o(" class method or the "),QO=a("a"),bjo=o("from_config()"),vjo=o(` class
method.`),Fjo=l(),Gy=a("p"),Tjo=o("This class cannot be instantiated directly using "),Gge=a("code"),Mjo=o("__init__()"),Ejo=o(" (throws an error)."),Cjo=l(),ct=a("div"),F(Oy.$$.fragment),wjo=l(),Oge=a("p"),Ajo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yjo=l(),Ui=a("p"),Ljo=o(`Note:
Loading a model from its configuration file does `),Vge=a("strong"),xjo=o("not"),$jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),kjo=o("from_pretrained()"),Sjo=o(" to load the model weights."),Rjo=l(),F(E2.$$.fragment),Pjo=l(),to=a("div"),F(Vy.$$.fragment),Bjo=l(),Xge=a("p"),Ijo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Njo=l(),Ba=a("p"),qjo=o("The model class to instantiate is selected based on the "),zge=a("code"),jjo=o("model_type"),Djo=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),Vjo=o("pretrained_model_name_or_path"),Xjo=o(":"),zjo=l(),Yr=a("ul"),C2=a("li"),Hge=a("strong"),Wjo=o("bert"),Qjo=o(" \u2014 "),UO=a("a"),Hjo=o("BertForNextSentencePrediction"),Ujo=o(" (BERT model)"),Jjo=l(),w2=a("li"),Uge=a("strong"),Yjo=o("fnet"),Kjo=o(" \u2014 "),JO=a("a"),Zjo=o("FNetForNextSentencePrediction"),eDo=o(" (FNet model)"),oDo=l(),A2=a("li"),Jge=a("strong"),rDo=o("megatron-bert"),tDo=o(" \u2014 "),YO=a("a"),aDo=o("MegatronBertForNextSentencePrediction"),nDo=o(" (MegatronBert model)"),sDo=l(),y2=a("li"),Yge=a("strong"),lDo=o("mobilebert"),iDo=o(" \u2014 "),KO=a("a"),dDo=o("MobileBertForNextSentencePrediction"),cDo=o(" (MobileBERT model)"),fDo=l(),L2=a("li"),Kge=a("strong"),mDo=o("qdqbert"),gDo=o(" \u2014 "),ZO=a("a"),hDo=o("QDQBertForNextSentencePrediction"),pDo=o(" (QDQBert model)"),uDo=l(),x2=a("p"),_Do=o("The model is set in evaluation mode by default using "),Zge=a("code"),bDo=o("model.eval()"),vDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=a("code"),FDo=o("model.train()"),TDo=l(),F($2.$$.fragment),Hqe=l(),Ji=a("h2"),k2=a("a"),ohe=a("span"),F(Xy.$$.fragment),MDo=l(),rhe=a("span"),EDo=o("AutoModelForTokenClassification"),Uqe=l(),Io=a("div"),F(zy.$$.fragment),CDo=l(),Yi=a("p"),wDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eV=a("a"),ADo=o("from_pretrained()"),yDo=o(" class method or the "),oV=a("a"),LDo=o("from_config()"),xDo=o(` class
method.`),$Do=l(),Wy=a("p"),kDo=o("This class cannot be instantiated directly using "),the=a("code"),SDo=o("__init__()"),RDo=o(" (throws an error)."),PDo=l(),ft=a("div"),F(Qy.$$.fragment),BDo=l(),ahe=a("p"),IDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NDo=l(),Ki=a("p"),qDo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),jDo=o("not"),DDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),GDo=o("from_pretrained()"),ODo=o(" to load the model weights."),VDo=l(),F(S2.$$.fragment),XDo=l(),ao=a("div"),F(Hy.$$.fragment),zDo=l(),she=a("p"),WDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QDo=l(),Ia=a("p"),HDo=o("The model class to instantiate is selected based on the "),lhe=a("code"),UDo=o("model_type"),JDo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),YDo=o("pretrained_model_name_or_path"),KDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),ZDo=o("pretrained_model_name_or_path"),eGo=o(":"),oGo=l(),H=a("ul"),R2=a("li"),che=a("strong"),rGo=o("albert"),tGo=o(" \u2014 "),tV=a("a"),aGo=o("AlbertForTokenClassification"),nGo=o(" (ALBERT model)"),sGo=l(),P2=a("li"),fhe=a("strong"),lGo=o("bert"),iGo=o(" \u2014 "),aV=a("a"),dGo=o("BertForTokenClassification"),cGo=o(" (BERT model)"),fGo=l(),B2=a("li"),mhe=a("strong"),mGo=o("big_bird"),gGo=o(" \u2014 "),nV=a("a"),hGo=o("BigBirdForTokenClassification"),pGo=o(" (BigBird model)"),uGo=l(),I2=a("li"),ghe=a("strong"),_Go=o("camembert"),bGo=o(" \u2014 "),sV=a("a"),vGo=o("CamembertForTokenClassification"),FGo=o(" (CamemBERT model)"),TGo=l(),N2=a("li"),hhe=a("strong"),MGo=o("canine"),EGo=o(" \u2014 "),lV=a("a"),CGo=o("CanineForTokenClassification"),wGo=o(" (Canine model)"),AGo=l(),q2=a("li"),phe=a("strong"),yGo=o("convbert"),LGo=o(" \u2014 "),iV=a("a"),xGo=o("ConvBertForTokenClassification"),$Go=o(" (ConvBERT model)"),kGo=l(),j2=a("li"),uhe=a("strong"),SGo=o("data2vec-text"),RGo=o(" \u2014 "),dV=a("a"),PGo=o("Data2VecTextForTokenClassification"),BGo=o(" (Data2VecText model)"),IGo=l(),D2=a("li"),_he=a("strong"),NGo=o("deberta"),qGo=o(" \u2014 "),cV=a("a"),jGo=o("DebertaForTokenClassification"),DGo=o(" (DeBERTa model)"),GGo=l(),G2=a("li"),bhe=a("strong"),OGo=o("deberta-v2"),VGo=o(" \u2014 "),fV=a("a"),XGo=o("DebertaV2ForTokenClassification"),zGo=o(" (DeBERTa-v2 model)"),WGo=l(),O2=a("li"),vhe=a("strong"),QGo=o("distilbert"),HGo=o(" \u2014 "),mV=a("a"),UGo=o("DistilBertForTokenClassification"),JGo=o(" (DistilBERT model)"),YGo=l(),V2=a("li"),Fhe=a("strong"),KGo=o("electra"),ZGo=o(" \u2014 "),gV=a("a"),eOo=o("ElectraForTokenClassification"),oOo=o(" (ELECTRA model)"),rOo=l(),X2=a("li"),The=a("strong"),tOo=o("flaubert"),aOo=o(" \u2014 "),hV=a("a"),nOo=o("FlaubertForTokenClassification"),sOo=o(" (FlauBERT model)"),lOo=l(),z2=a("li"),Mhe=a("strong"),iOo=o("fnet"),dOo=o(" \u2014 "),pV=a("a"),cOo=o("FNetForTokenClassification"),fOo=o(" (FNet model)"),mOo=l(),W2=a("li"),Ehe=a("strong"),gOo=o("funnel"),hOo=o(" \u2014 "),uV=a("a"),pOo=o("FunnelForTokenClassification"),uOo=o(" (Funnel Transformer model)"),_Oo=l(),Q2=a("li"),Che=a("strong"),bOo=o("gpt2"),vOo=o(" \u2014 "),_V=a("a"),FOo=o("GPT2ForTokenClassification"),TOo=o(" (OpenAI GPT-2 model)"),MOo=l(),H2=a("li"),whe=a("strong"),EOo=o("ibert"),COo=o(" \u2014 "),bV=a("a"),wOo=o("IBertForTokenClassification"),AOo=o(" (I-BERT model)"),yOo=l(),U2=a("li"),Ahe=a("strong"),LOo=o("layoutlm"),xOo=o(" \u2014 "),vV=a("a"),$Oo=o("LayoutLMForTokenClassification"),kOo=o(" (LayoutLM model)"),SOo=l(),J2=a("li"),yhe=a("strong"),ROo=o("layoutlmv2"),POo=o(" \u2014 "),FV=a("a"),BOo=o("LayoutLMv2ForTokenClassification"),IOo=o(" (LayoutLMv2 model)"),NOo=l(),Y2=a("li"),Lhe=a("strong"),qOo=o("layoutlmv3"),jOo=o(" \u2014 "),TV=a("a"),DOo=o("LayoutLMv3ForTokenClassification"),GOo=o(" (LayoutLMv3 model)"),OOo=l(),K2=a("li"),xhe=a("strong"),VOo=o("longformer"),XOo=o(" \u2014 "),MV=a("a"),zOo=o("LongformerForTokenClassification"),WOo=o(" (Longformer model)"),QOo=l(),Z2=a("li"),$he=a("strong"),HOo=o("megatron-bert"),UOo=o(" \u2014 "),EV=a("a"),JOo=o("MegatronBertForTokenClassification"),YOo=o(" (MegatronBert model)"),KOo=l(),ev=a("li"),khe=a("strong"),ZOo=o("mobilebert"),eVo=o(" \u2014 "),CV=a("a"),oVo=o("MobileBertForTokenClassification"),rVo=o(" (MobileBERT model)"),tVo=l(),ov=a("li"),She=a("strong"),aVo=o("mpnet"),nVo=o(" \u2014 "),wV=a("a"),sVo=o("MPNetForTokenClassification"),lVo=o(" (MPNet model)"),iVo=l(),rv=a("li"),Rhe=a("strong"),dVo=o("nystromformer"),cVo=o(" \u2014 "),AV=a("a"),fVo=o("NystromformerForTokenClassification"),mVo=o(" (Nystromformer model)"),gVo=l(),tv=a("li"),Phe=a("strong"),hVo=o("qdqbert"),pVo=o(" \u2014 "),yV=a("a"),uVo=o("QDQBertForTokenClassification"),_Vo=o(" (QDQBert model)"),bVo=l(),av=a("li"),Bhe=a("strong"),vVo=o("rembert"),FVo=o(" \u2014 "),LV=a("a"),TVo=o("RemBertForTokenClassification"),MVo=o(" (RemBERT model)"),EVo=l(),nv=a("li"),Ihe=a("strong"),CVo=o("roberta"),wVo=o(" \u2014 "),xV=a("a"),AVo=o("RobertaForTokenClassification"),yVo=o(" (RoBERTa model)"),LVo=l(),sv=a("li"),Nhe=a("strong"),xVo=o("roformer"),$Vo=o(" \u2014 "),$V=a("a"),kVo=o("RoFormerForTokenClassification"),SVo=o(" (RoFormer model)"),RVo=l(),lv=a("li"),qhe=a("strong"),PVo=o("squeezebert"),BVo=o(" \u2014 "),kV=a("a"),IVo=o("SqueezeBertForTokenClassification"),NVo=o(" (SqueezeBERT model)"),qVo=l(),iv=a("li"),jhe=a("strong"),jVo=o("xlm"),DVo=o(" \u2014 "),SV=a("a"),GVo=o("XLMForTokenClassification"),OVo=o(" (XLM model)"),VVo=l(),dv=a("li"),Dhe=a("strong"),XVo=o("xlm-roberta"),zVo=o(" \u2014 "),RV=a("a"),WVo=o("XLMRobertaForTokenClassification"),QVo=o(" (XLM-RoBERTa model)"),HVo=l(),cv=a("li"),Ghe=a("strong"),UVo=o("xlm-roberta-xl"),JVo=o(" \u2014 "),PV=a("a"),YVo=o("XLMRobertaXLForTokenClassification"),KVo=o(" (XLM-RoBERTa-XL model)"),ZVo=l(),fv=a("li"),Ohe=a("strong"),eXo=o("xlnet"),oXo=o(" \u2014 "),BV=a("a"),rXo=o("XLNetForTokenClassification"),tXo=o(" (XLNet model)"),aXo=l(),mv=a("li"),Vhe=a("strong"),nXo=o("yoso"),sXo=o(" \u2014 "),IV=a("a"),lXo=o("YosoForTokenClassification"),iXo=o(" (YOSO model)"),dXo=l(),gv=a("p"),cXo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),fXo=o("model.eval()"),mXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),gXo=o("model.train()"),hXo=l(),F(hv.$$.fragment),Jqe=l(),Zi=a("h2"),pv=a("a"),Whe=a("span"),F(Uy.$$.fragment),pXo=l(),Qhe=a("span"),uXo=o("AutoModelForQuestionAnswering"),Yqe=l(),No=a("div"),F(Jy.$$.fragment),_Xo=l(),ed=a("p"),bXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NV=a("a"),vXo=o("from_pretrained()"),FXo=o(" class method or the "),qV=a("a"),TXo=o("from_config()"),MXo=o(` class
method.`),EXo=l(),Yy=a("p"),CXo=o("This class cannot be instantiated directly using "),Hhe=a("code"),wXo=o("__init__()"),AXo=o(" (throws an error)."),yXo=l(),mt=a("div"),F(Ky.$$.fragment),LXo=l(),Uhe=a("p"),xXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Xo=l(),od=a("p"),kXo=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),SXo=o("not"),RXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),PXo=o("from_pretrained()"),BXo=o(" to load the model weights."),IXo=l(),F(uv.$$.fragment),NXo=l(),no=a("div"),F(Zy.$$.fragment),qXo=l(),Yhe=a("p"),jXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DXo=l(),Na=a("p"),GXo=o("The model class to instantiate is selected based on the "),Khe=a("code"),OXo=o("model_type"),VXo=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),XXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),WXo=o("pretrained_model_name_or_path"),QXo=o(":"),HXo=l(),V=a("ul"),_v=a("li"),ope=a("strong"),UXo=o("albert"),JXo=o(" \u2014 "),DV=a("a"),YXo=o("AlbertForQuestionAnswering"),KXo=o(" (ALBERT model)"),ZXo=l(),bv=a("li"),rpe=a("strong"),ezo=o("bart"),ozo=o(" \u2014 "),GV=a("a"),rzo=o("BartForQuestionAnswering"),tzo=o(" (BART model)"),azo=l(),vv=a("li"),tpe=a("strong"),nzo=o("bert"),szo=o(" \u2014 "),OV=a("a"),lzo=o("BertForQuestionAnswering"),izo=o(" (BERT model)"),dzo=l(),Fv=a("li"),ape=a("strong"),czo=o("big_bird"),fzo=o(" \u2014 "),VV=a("a"),mzo=o("BigBirdForQuestionAnswering"),gzo=o(" (BigBird model)"),hzo=l(),Tv=a("li"),npe=a("strong"),pzo=o("bigbird_pegasus"),uzo=o(" \u2014 "),XV=a("a"),_zo=o("BigBirdPegasusForQuestionAnswering"),bzo=o(" (BigBirdPegasus model)"),vzo=l(),Mv=a("li"),spe=a("strong"),Fzo=o("camembert"),Tzo=o(" \u2014 "),zV=a("a"),Mzo=o("CamembertForQuestionAnswering"),Ezo=o(" (CamemBERT model)"),Czo=l(),Ev=a("li"),lpe=a("strong"),wzo=o("canine"),Azo=o(" \u2014 "),WV=a("a"),yzo=o("CanineForQuestionAnswering"),Lzo=o(" (Canine model)"),xzo=l(),Cv=a("li"),ipe=a("strong"),$zo=o("convbert"),kzo=o(" \u2014 "),QV=a("a"),Szo=o("ConvBertForQuestionAnswering"),Rzo=o(" (ConvBERT model)"),Pzo=l(),wv=a("li"),dpe=a("strong"),Bzo=o("data2vec-text"),Izo=o(" \u2014 "),HV=a("a"),Nzo=o("Data2VecTextForQuestionAnswering"),qzo=o(" (Data2VecText model)"),jzo=l(),Av=a("li"),cpe=a("strong"),Dzo=o("deberta"),Gzo=o(" \u2014 "),UV=a("a"),Ozo=o("DebertaForQuestionAnswering"),Vzo=o(" (DeBERTa model)"),Xzo=l(),yv=a("li"),fpe=a("strong"),zzo=o("deberta-v2"),Wzo=o(" \u2014 "),JV=a("a"),Qzo=o("DebertaV2ForQuestionAnswering"),Hzo=o(" (DeBERTa-v2 model)"),Uzo=l(),Lv=a("li"),mpe=a("strong"),Jzo=o("distilbert"),Yzo=o(" \u2014 "),YV=a("a"),Kzo=o("DistilBertForQuestionAnswering"),Zzo=o(" (DistilBERT model)"),eWo=l(),xv=a("li"),gpe=a("strong"),oWo=o("electra"),rWo=o(" \u2014 "),KV=a("a"),tWo=o("ElectraForQuestionAnswering"),aWo=o(" (ELECTRA model)"),nWo=l(),$v=a("li"),hpe=a("strong"),sWo=o("flaubert"),lWo=o(" \u2014 "),ZV=a("a"),iWo=o("FlaubertForQuestionAnsweringSimple"),dWo=o(" (FlauBERT model)"),cWo=l(),kv=a("li"),ppe=a("strong"),fWo=o("fnet"),mWo=o(" \u2014 "),eX=a("a"),gWo=o("FNetForQuestionAnswering"),hWo=o(" (FNet model)"),pWo=l(),Sv=a("li"),upe=a("strong"),uWo=o("funnel"),_Wo=o(" \u2014 "),oX=a("a"),bWo=o("FunnelForQuestionAnswering"),vWo=o(" (Funnel Transformer model)"),FWo=l(),Rv=a("li"),_pe=a("strong"),TWo=o("gptj"),MWo=o(" \u2014 "),rX=a("a"),EWo=o("GPTJForQuestionAnswering"),CWo=o(" (GPT-J model)"),wWo=l(),Pv=a("li"),bpe=a("strong"),AWo=o("ibert"),yWo=o(" \u2014 "),tX=a("a"),LWo=o("IBertForQuestionAnswering"),xWo=o(" (I-BERT model)"),$Wo=l(),Bv=a("li"),vpe=a("strong"),kWo=o("layoutlmv2"),SWo=o(" \u2014 "),aX=a("a"),RWo=o("LayoutLMv2ForQuestionAnswering"),PWo=o(" (LayoutLMv2 model)"),BWo=l(),Iv=a("li"),Fpe=a("strong"),IWo=o("layoutlmv3"),NWo=o(" \u2014 "),nX=a("a"),qWo=o("LayoutLMv3ForQuestionAnswering"),jWo=o(" (LayoutLMv3 model)"),DWo=l(),Nv=a("li"),Tpe=a("strong"),GWo=o("led"),OWo=o(" \u2014 "),sX=a("a"),VWo=o("LEDForQuestionAnswering"),XWo=o(" (LED model)"),zWo=l(),qv=a("li"),Mpe=a("strong"),WWo=o("longformer"),QWo=o(" \u2014 "),lX=a("a"),HWo=o("LongformerForQuestionAnswering"),UWo=o(" (Longformer model)"),JWo=l(),jv=a("li"),Epe=a("strong"),YWo=o("lxmert"),KWo=o(" \u2014 "),iX=a("a"),ZWo=o("LxmertForQuestionAnswering"),eQo=o(" (LXMERT model)"),oQo=l(),Dv=a("li"),Cpe=a("strong"),rQo=o("mbart"),tQo=o(" \u2014 "),dX=a("a"),aQo=o("MBartForQuestionAnswering"),nQo=o(" (mBART model)"),sQo=l(),Gv=a("li"),wpe=a("strong"),lQo=o("megatron-bert"),iQo=o(" \u2014 "),cX=a("a"),dQo=o("MegatronBertForQuestionAnswering"),cQo=o(" (MegatronBert model)"),fQo=l(),Ov=a("li"),Ape=a("strong"),mQo=o("mobilebert"),gQo=o(" \u2014 "),fX=a("a"),hQo=o("MobileBertForQuestionAnswering"),pQo=o(" (MobileBERT model)"),uQo=l(),Vv=a("li"),ype=a("strong"),_Qo=o("mpnet"),bQo=o(" \u2014 "),mX=a("a"),vQo=o("MPNetForQuestionAnswering"),FQo=o(" (MPNet model)"),TQo=l(),Xv=a("li"),Lpe=a("strong"),MQo=o("nystromformer"),EQo=o(" \u2014 "),gX=a("a"),CQo=o("NystromformerForQuestionAnswering"),wQo=o(" (Nystromformer model)"),AQo=l(),zv=a("li"),xpe=a("strong"),yQo=o("qdqbert"),LQo=o(" \u2014 "),hX=a("a"),xQo=o("QDQBertForQuestionAnswering"),$Qo=o(" (QDQBert model)"),kQo=l(),Wv=a("li"),$pe=a("strong"),SQo=o("reformer"),RQo=o(" \u2014 "),pX=a("a"),PQo=o("ReformerForQuestionAnswering"),BQo=o(" (Reformer model)"),IQo=l(),Qv=a("li"),kpe=a("strong"),NQo=o("rembert"),qQo=o(" \u2014 "),uX=a("a"),jQo=o("RemBertForQuestionAnswering"),DQo=o(" (RemBERT model)"),GQo=l(),Hv=a("li"),Spe=a("strong"),OQo=o("roberta"),VQo=o(" \u2014 "),_X=a("a"),XQo=o("RobertaForQuestionAnswering"),zQo=o(" (RoBERTa model)"),WQo=l(),Uv=a("li"),Rpe=a("strong"),QQo=o("roformer"),HQo=o(" \u2014 "),bX=a("a"),UQo=o("RoFormerForQuestionAnswering"),JQo=o(" (RoFormer model)"),YQo=l(),Jv=a("li"),Ppe=a("strong"),KQo=o("splinter"),ZQo=o(" \u2014 "),vX=a("a"),eHo=o("SplinterForQuestionAnswering"),oHo=o(" (Splinter model)"),rHo=l(),Yv=a("li"),Bpe=a("strong"),tHo=o("squeezebert"),aHo=o(" \u2014 "),FX=a("a"),nHo=o("SqueezeBertForQuestionAnswering"),sHo=o(" (SqueezeBERT model)"),lHo=l(),Kv=a("li"),Ipe=a("strong"),iHo=o("xlm"),dHo=o(" \u2014 "),TX=a("a"),cHo=o("XLMForQuestionAnsweringSimple"),fHo=o(" (XLM model)"),mHo=l(),Zv=a("li"),Npe=a("strong"),gHo=o("xlm-roberta"),hHo=o(" \u2014 "),MX=a("a"),pHo=o("XLMRobertaForQuestionAnswering"),uHo=o(" (XLM-RoBERTa model)"),_Ho=l(),eF=a("li"),qpe=a("strong"),bHo=o("xlm-roberta-xl"),vHo=o(" \u2014 "),EX=a("a"),FHo=o("XLMRobertaXLForQuestionAnswering"),THo=o(" (XLM-RoBERTa-XL model)"),MHo=l(),oF=a("li"),jpe=a("strong"),EHo=o("xlnet"),CHo=o(" \u2014 "),CX=a("a"),wHo=o("XLNetForQuestionAnsweringSimple"),AHo=o(" (XLNet model)"),yHo=l(),rF=a("li"),Dpe=a("strong"),LHo=o("yoso"),xHo=o(" \u2014 "),wX=a("a"),$Ho=o("YosoForQuestionAnswering"),kHo=o(" (YOSO model)"),SHo=l(),tF=a("p"),RHo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),PHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),IHo=o("model.train()"),NHo=l(),F(aF.$$.fragment),Kqe=l(),rd=a("h2"),nF=a("a"),Vpe=a("span"),F(eL.$$.fragment),qHo=l(),Xpe=a("span"),jHo=o("AutoModelForTableQuestionAnswering"),Zqe=l(),qo=a("div"),F(oL.$$.fragment),DHo=l(),td=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AX=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),yX=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),WHo=l(),rL=a("p"),QHo=o("This class cannot be instantiated directly using "),zpe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),gt=a("div"),F(tL.$$.fragment),YHo=l(),Wpe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZHo=l(),ad=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(sF.$$.fragment),sUo=l(),so=a("div"),F(aL.$$.fragment),lUo=l(),Hpe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dUo=l(),qa=a("p"),cUo=o("The model class to instantiate is selected based on the "),Upe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),pUo=o("pretrained_model_name_or_path"),uUo=o(":"),_Uo=l(),Kpe=a("ul"),lF=a("li"),Zpe=a("strong"),bUo=o("tapas"),vUo=o(" \u2014 "),xX=a("a"),FUo=o("TapasForQuestionAnswering"),TUo=o(" (TAPAS model)"),MUo=l(),iF=a("p"),EUo=o("The model is set in evaluation mode by default using "),eue=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),AUo=o("model.train()"),yUo=l(),F(dF.$$.fragment),eje=l(),nd=a("h2"),cF=a("a"),rue=a("span"),F(nL.$$.fragment),LUo=l(),tue=a("span"),xUo=o("AutoModelForImageClassification"),oje=l(),jo=a("div"),F(sL.$$.fragment),$Uo=l(),sd=a("p"),kUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$X=a("a"),SUo=o("from_pretrained()"),RUo=o(" class method or the "),kX=a("a"),PUo=o("from_config()"),BUo=o(` class
method.`),IUo=l(),lL=a("p"),NUo=o("This class cannot be instantiated directly using "),aue=a("code"),qUo=o("__init__()"),jUo=o(" (throws an error)."),DUo=l(),ht=a("div"),F(iL.$$.fragment),GUo=l(),nue=a("p"),OUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VUo=l(),ld=a("p"),XUo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),zUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),QUo=o("from_pretrained()"),HUo=o(" to load the model weights."),UUo=l(),F(fF.$$.fragment),JUo=l(),lo=a("div"),F(dL.$$.fragment),YUo=l(),lue=a("p"),KUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZUo=l(),ja=a("p"),eJo=o("The model class to instantiate is selected based on the "),iue=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),Fe=a("ul"),mF=a("li"),fue=a("strong"),iJo=o("beit"),dJo=o(" \u2014 "),RX=a("a"),cJo=o("BeitForImageClassification"),fJo=o(" (BEiT model)"),mJo=l(),gF=a("li"),mue=a("strong"),gJo=o("convnext"),hJo=o(" \u2014 "),PX=a("a"),pJo=o("ConvNextForImageClassification"),uJo=o(" (ConvNext model)"),_Jo=l(),hF=a("li"),gue=a("strong"),bJo=o("cvt"),vJo=o(" \u2014 "),BX=a("a"),FJo=o("CvtForImageClassification"),TJo=o(" (CvT model)"),MJo=l(),pF=a("li"),hue=a("strong"),EJo=o("data2vec-vision"),CJo=o(" \u2014 "),IX=a("a"),wJo=o("Data2VecVisionForImageClassification"),AJo=o(" (Data2VecVision model)"),yJo=l(),Is=a("li"),pue=a("strong"),LJo=o("deit"),xJo=o(" \u2014 "),NX=a("a"),$Jo=o("DeiTForImageClassification"),kJo=o(" or "),qX=a("a"),SJo=o("DeiTForImageClassificationWithTeacher"),RJo=o(" (DeiT model)"),PJo=l(),uF=a("li"),uue=a("strong"),BJo=o("imagegpt"),IJo=o(" \u2014 "),jX=a("a"),NJo=o("ImageGPTForImageClassification"),qJo=o(" (ImageGPT model)"),jJo=l(),pt=a("li"),_ue=a("strong"),DJo=o("perceiver"),GJo=o(" \u2014 "),DX=a("a"),OJo=o("PerceiverForImageClassificationLearned"),VJo=o(" or "),GX=a("a"),XJo=o("PerceiverForImageClassificationFourier"),zJo=o(" or "),OX=a("a"),WJo=o("PerceiverForImageClassificationConvProcessing"),QJo=o(" (Perceiver model)"),HJo=l(),_F=a("li"),bue=a("strong"),UJo=o("poolformer"),JJo=o(" \u2014 "),VX=a("a"),YJo=o("PoolFormerForImageClassification"),KJo=o(" (PoolFormer model)"),ZJo=l(),bF=a("li"),vue=a("strong"),eYo=o("regnet"),oYo=o(" \u2014 "),XX=a("a"),rYo=o("RegNetForImageClassification"),tYo=o(" (RegNet model)"),aYo=l(),vF=a("li"),Fue=a("strong"),nYo=o("resnet"),sYo=o(" \u2014 "),zX=a("a"),lYo=o("ResNetForImageClassification"),iYo=o(" (ResNet model)"),dYo=l(),FF=a("li"),Tue=a("strong"),cYo=o("segformer"),fYo=o(" \u2014 "),WX=a("a"),mYo=o("SegformerForImageClassification"),gYo=o(" (SegFormer model)"),hYo=l(),TF=a("li"),Mue=a("strong"),pYo=o("swin"),uYo=o(" \u2014 "),QX=a("a"),_Yo=o("SwinForImageClassification"),bYo=o(" (Swin model)"),vYo=l(),MF=a("li"),Eue=a("strong"),FYo=o("van"),TYo=o(" \u2014 "),HX=a("a"),MYo=o("VanForImageClassification"),EYo=o(" (VAN model)"),CYo=l(),EF=a("li"),Cue=a("strong"),wYo=o("vit"),AYo=o(" \u2014 "),UX=a("a"),yYo=o("ViTForImageClassification"),LYo=o(" (ViT model)"),xYo=l(),CF=a("p"),$Yo=o("The model is set in evaluation mode by default using "),wue=a("code"),kYo=o("model.eval()"),SYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),RYo=o("model.train()"),PYo=l(),F(wF.$$.fragment),rje=l(),id=a("h2"),AF=a("a"),yue=a("span"),F(cL.$$.fragment),BYo=l(),Lue=a("span"),IYo=o("AutoModelForVision2Seq"),tje=l(),Do=a("div"),F(fL.$$.fragment),NYo=l(),dd=a("p"),qYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JX=a("a"),jYo=o("from_pretrained()"),DYo=o(" class method or the "),YX=a("a"),GYo=o("from_config()"),OYo=o(` class
method.`),VYo=l(),mL=a("p"),XYo=o("This class cannot be instantiated directly using "),xue=a("code"),zYo=o("__init__()"),WYo=o(" (throws an error)."),QYo=l(),ut=a("div"),F(gL.$$.fragment),HYo=l(),$ue=a("p"),UYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JYo=l(),cd=a("p"),YYo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),KYo=o("not"),ZYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),eKo=o("from_pretrained()"),oKo=o(" to load the model weights."),rKo=l(),F(yF.$$.fragment),tKo=l(),io=a("div"),F(hL.$$.fragment),aKo=l(),Sue=a("p"),nKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sKo=l(),Da=a("p"),lKo=o("The model class to instantiate is selected based on the "),Rue=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),Iue=a("ul"),LF=a("li"),Nue=a("strong"),pKo=o("vision-encoder-decoder"),uKo=o(" \u2014 "),ZX=a("a"),_Ko=o("VisionEncoderDecoderModel"),bKo=o(" (Vision Encoder decoder model)"),vKo=l(),xF=a("p"),FKo=o("The model is set in evaluation mode by default using "),que=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),EKo=o("model.train()"),CKo=l(),F($F.$$.fragment),aje=l(),fd=a("h2"),kF=a("a"),Due=a("span"),F(pL.$$.fragment),wKo=l(),Gue=a("span"),AKo=o("AutoModelForAudioClassification"),nje=l(),Go=a("div"),F(uL.$$.fragment),yKo=l(),md=a("p"),LKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ez=a("a"),xKo=o("from_pretrained()"),$Ko=o(" class method or the "),oz=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),_L=a("p"),PKo=o("This class cannot be instantiated directly using "),Oue=a("code"),BKo=o("__init__()"),IKo=o(" (throws an error)."),NKo=l(),_t=a("div"),F(bL.$$.fragment),qKo=l(),Vue=a("p"),jKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),DKo=l(),gd=a("p"),GKo=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),OKo=o("not"),VKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),XKo=o("from_pretrained()"),zKo=o(" to load the model weights."),WKo=l(),F(SF.$$.fragment),QKo=l(),co=a("div"),F(vL.$$.fragment),HKo=l(),zue=a("p"),UKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),JKo=l(),Ga=a("p"),YKo=o("The model class to instantiate is selected based on the "),Wue=a("code"),KKo=o("model_type"),ZKo=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(":"),aZo=l(),ke=a("ul"),RF=a("li"),Uue=a("strong"),nZo=o("data2vec-audio"),sZo=o(" \u2014 "),tz=a("a"),lZo=o("Data2VecAudioForSequenceClassification"),iZo=o(" (Data2VecAudio model)"),dZo=l(),PF=a("li"),Jue=a("strong"),cZo=o("hubert"),fZo=o(" \u2014 "),az=a("a"),mZo=o("HubertForSequenceClassification"),gZo=o(" (Hubert model)"),hZo=l(),BF=a("li"),Yue=a("strong"),pZo=o("sew"),uZo=o(" \u2014 "),nz=a("a"),_Zo=o("SEWForSequenceClassification"),bZo=o(" (SEW model)"),vZo=l(),IF=a("li"),Kue=a("strong"),FZo=o("sew-d"),TZo=o(" \u2014 "),sz=a("a"),MZo=o("SEWDForSequenceClassification"),EZo=o(" (SEW-D model)"),CZo=l(),NF=a("li"),Zue=a("strong"),wZo=o("unispeech"),AZo=o(" \u2014 "),lz=a("a"),yZo=o("UniSpeechForSequenceClassification"),LZo=o(" (UniSpeech model)"),xZo=l(),qF=a("li"),e_e=a("strong"),$Zo=o("unispeech-sat"),kZo=o(" \u2014 "),iz=a("a"),SZo=o("UniSpeechSatForSequenceClassification"),RZo=o(" (UniSpeechSat model)"),PZo=l(),jF=a("li"),o_e=a("strong"),BZo=o("wav2vec2"),IZo=o(" \u2014 "),dz=a("a"),NZo=o("Wav2Vec2ForSequenceClassification"),qZo=o(" (Wav2Vec2 model)"),jZo=l(),DF=a("li"),r_e=a("strong"),DZo=o("wav2vec2-conformer"),GZo=o(" \u2014 "),cz=a("a"),OZo=o("Wav2Vec2ConformerForSequenceClassification"),VZo=o(" (Wav2Vec2-Conformer model)"),XZo=l(),GF=a("li"),t_e=a("strong"),zZo=o("wavlm"),WZo=o(" \u2014 "),fz=a("a"),QZo=o("WavLMForSequenceClassification"),HZo=o(" (WavLM model)"),UZo=l(),OF=a("p"),JZo=o("The model is set in evaluation mode by default using "),a_e=a("code"),YZo=o("model.eval()"),KZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),ZZo=o("model.train()"),eer=l(),F(VF.$$.fragment),sje=l(),hd=a("h2"),XF=a("a"),s_e=a("span"),F(FL.$$.fragment),oer=l(),l_e=a("span"),rer=o("AutoModelForAudioFrameClassification"),lje=l(),Oo=a("div"),F(TL.$$.fragment),ter=l(),pd=a("p"),aer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mz=a("a"),ner=o("from_pretrained()"),ser=o(" class method or the "),gz=a("a"),ler=o("from_config()"),ier=o(` class
method.`),der=l(),ML=a("p"),cer=o("This class cannot be instantiated directly using "),i_e=a("code"),fer=o("__init__()"),mer=o(" (throws an error)."),ger=l(),bt=a("div"),F(EL.$$.fragment),her=l(),d_e=a("p"),per=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),uer=l(),ud=a("p"),_er=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),ber=o("not"),ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),Fer=o("from_pretrained()"),Ter=o(" to load the model weights."),Mer=l(),F(zF.$$.fragment),Eer=l(),fo=a("div"),F(CL.$$.fragment),Cer=l(),f_e=a("p"),wer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Aer=l(),Oa=a("p"),yer=o("The model class to instantiate is selected based on the "),m_e=a("code"),Ler=o("model_type"),xer=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),$er=o("pretrained_model_name_or_path"),ker=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(":"),Per=l(),Kr=a("ul"),WF=a("li"),p_e=a("strong"),Ber=o("data2vec-audio"),Ier=o(" \u2014 "),pz=a("a"),Ner=o("Data2VecAudioForAudioFrameClassification"),qer=o(" (Data2VecAudio model)"),jer=l(),QF=a("li"),u_e=a("strong"),Der=o("unispeech-sat"),Ger=o(" \u2014 "),uz=a("a"),Oer=o("UniSpeechSatForAudioFrameClassification"),Ver=o(" (UniSpeechSat model)"),Xer=l(),HF=a("li"),__e=a("strong"),zer=o("wav2vec2"),Wer=o(" \u2014 "),_z=a("a"),Qer=o("Wav2Vec2ForAudioFrameClassification"),Her=o(" (Wav2Vec2 model)"),Uer=l(),UF=a("li"),b_e=a("strong"),Jer=o("wav2vec2-conformer"),Yer=o(" \u2014 "),bz=a("a"),Ker=o("Wav2Vec2ConformerForAudioFrameClassification"),Zer=o(" (Wav2Vec2-Conformer model)"),eor=l(),JF=a("li"),v_e=a("strong"),oor=o("wavlm"),ror=o(" \u2014 "),vz=a("a"),tor=o("WavLMForAudioFrameClassification"),aor=o(" (WavLM model)"),nor=l(),YF=a("p"),sor=o("The model is set in evaluation mode by default using "),F_e=a("code"),lor=o("model.eval()"),ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),dor=o("model.train()"),cor=l(),F(KF.$$.fragment),ije=l(),_d=a("h2"),ZF=a("a"),M_e=a("span"),F(wL.$$.fragment),mor=l(),E_e=a("span"),gor=o("AutoModelForCTC"),dje=l(),Vo=a("div"),F(AL.$$.fragment),hor=l(),bd=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Fz=a("a"),uor=o("from_pretrained()"),_or=o(" class method or the "),Tz=a("a"),bor=o("from_config()"),vor=o(` class
method.`),For=l(),yL=a("p"),Tor=o("This class cannot be instantiated directly using "),C_e=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),vt=a("div"),F(LL.$$.fragment),wor=l(),w_e=a("p"),Aor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yor=l(),vd=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),F(eT.$$.fragment),Por=l(),mo=a("div"),F(xL.$$.fragment),Bor=l(),y_e=a("p"),Ior=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nor=l(),Va=a("p"),qor=o("The model class to instantiate is selected based on the "),L_e=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),Se=a("ul"),oT=a("li"),k_e=a("strong"),Wor=o("data2vec-audio"),Qor=o(" \u2014 "),Ez=a("a"),Hor=o("Data2VecAudioForCTC"),Uor=o(" (Data2VecAudio model)"),Jor=l(),rT=a("li"),S_e=a("strong"),Yor=o("hubert"),Kor=o(" \u2014 "),Cz=a("a"),Zor=o("HubertForCTC"),err=o(" (Hubert model)"),orr=l(),tT=a("li"),R_e=a("strong"),rrr=o("sew"),trr=o(" \u2014 "),wz=a("a"),arr=o("SEWForCTC"),nrr=o(" (SEW model)"),srr=l(),aT=a("li"),P_e=a("strong"),lrr=o("sew-d"),irr=o(" \u2014 "),Az=a("a"),drr=o("SEWDForCTC"),crr=o(" (SEW-D model)"),frr=l(),nT=a("li"),B_e=a("strong"),mrr=o("unispeech"),grr=o(" \u2014 "),yz=a("a"),hrr=o("UniSpeechForCTC"),prr=o(" (UniSpeech model)"),urr=l(),sT=a("li"),I_e=a("strong"),_rr=o("unispeech-sat"),brr=o(" \u2014 "),Lz=a("a"),vrr=o("UniSpeechSatForCTC"),Frr=o(" (UniSpeechSat model)"),Trr=l(),lT=a("li"),N_e=a("strong"),Mrr=o("wav2vec2"),Err=o(" \u2014 "),xz=a("a"),Crr=o("Wav2Vec2ForCTC"),wrr=o(" (Wav2Vec2 model)"),Arr=l(),iT=a("li"),q_e=a("strong"),yrr=o("wav2vec2-conformer"),Lrr=o(" \u2014 "),$z=a("a"),xrr=o("Wav2Vec2ConformerForCTC"),$rr=o(" (Wav2Vec2-Conformer model)"),krr=l(),dT=a("li"),j_e=a("strong"),Srr=o("wavlm"),Rrr=o(" \u2014 "),kz=a("a"),Prr=o("WavLMForCTC"),Brr=o(" (WavLM model)"),Irr=l(),cT=a("p"),Nrr=o("The model is set in evaluation mode by default using "),D_e=a("code"),qrr=o("model.eval()"),jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),Drr=o("model.train()"),Grr=l(),F(fT.$$.fragment),cje=l(),Fd=a("h2"),mT=a("a"),O_e=a("span"),F($L.$$.fragment),Orr=l(),V_e=a("span"),Vrr=o("AutoModelForSpeechSeq2Seq"),fje=l(),Xo=a("div"),F(kL.$$.fragment),Xrr=l(),Td=a("p"),zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Sz=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" class method or the "),Rz=a("a"),Hrr=o("from_config()"),Urr=o(` class
method.`),Jrr=l(),SL=a("p"),Yrr=o("This class cannot be instantiated directly using "),X_e=a("code"),Krr=o("__init__()"),Zrr=o(" (throws an error)."),etr=l(),Ft=a("div"),F(RL.$$.fragment),otr=l(),z_e=a("p"),rtr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ttr=l(),Md=a("p"),atr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),ntr=o("not"),str=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),ltr=o("from_pretrained()"),itr=o(" to load the model weights."),dtr=l(),F(gT.$$.fragment),ctr=l(),go=a("div"),F(PL.$$.fragment),ftr=l(),Q_e=a("p"),mtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gtr=l(),Xa=a("p"),htr=o("The model class to instantiate is selected based on the "),H_e=a("code"),ptr=o("model_type"),utr=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),_tr=o("pretrained_model_name_or_path"),btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),vtr=o("pretrained_model_name_or_path"),Ftr=o(":"),Ttr=l(),BL=a("ul"),hT=a("li"),Y_e=a("strong"),Mtr=o("speech-encoder-decoder"),Etr=o(" \u2014 "),Bz=a("a"),Ctr=o("SpeechEncoderDecoderModel"),wtr=o(" (Speech Encoder decoder model)"),Atr=l(),pT=a("li"),K_e=a("strong"),ytr=o("speech_to_text"),Ltr=o(" \u2014 "),Iz=a("a"),xtr=o("Speech2TextForConditionalGeneration"),$tr=o(" (Speech2Text model)"),ktr=l(),uT=a("p"),Str=o("The model is set in evaluation mode by default using "),Z_e=a("code"),Rtr=o("model.eval()"),Ptr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),Btr=o("model.train()"),Itr=l(),F(_T.$$.fragment),mje=l(),Ed=a("h2"),bT=a("a"),o1e=a("span"),F(IL.$$.fragment),Ntr=l(),r1e=a("span"),qtr=o("AutoModelForAudioXVector"),gje=l(),zo=a("div"),F(NL.$$.fragment),jtr=l(),Cd=a("p"),Dtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Nz=a("a"),Gtr=o("from_pretrained()"),Otr=o(" class method or the "),qz=a("a"),Vtr=o("from_config()"),Xtr=o(` class
method.`),ztr=l(),qL=a("p"),Wtr=o("This class cannot be instantiated directly using "),t1e=a("code"),Qtr=o("__init__()"),Htr=o(" (throws an error)."),Utr=l(),Tt=a("div"),F(jL.$$.fragment),Jtr=l(),a1e=a("p"),Ytr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ktr=l(),wd=a("p"),Ztr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),ear=o("not"),oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),rar=o("from_pretrained()"),tar=o(" to load the model weights."),aar=l(),F(vT.$$.fragment),nar=l(),ho=a("div"),F(DL.$$.fragment),sar=l(),s1e=a("p"),lar=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),iar=l(),za=a("p"),dar=o("The model class to instantiate is selected based on the "),l1e=a("code"),car=o("model_type"),far=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),mar=o("pretrained_model_name_or_path"),gar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),har=o("pretrained_model_name_or_path"),par=o(":"),uar=l(),Zr=a("ul"),FT=a("li"),c1e=a("strong"),_ar=o("data2vec-audio"),bar=o(" \u2014 "),Dz=a("a"),Far=o("Data2VecAudioForXVector"),Tar=o(" (Data2VecAudio model)"),Mar=l(),TT=a("li"),f1e=a("strong"),Ear=o("unispeech-sat"),Car=o(" \u2014 "),Gz=a("a"),war=o("UniSpeechSatForXVector"),Aar=o(" (UniSpeechSat model)"),yar=l(),MT=a("li"),m1e=a("strong"),Lar=o("wav2vec2"),xar=o(" \u2014 "),Oz=a("a"),$ar=o("Wav2Vec2ForXVector"),kar=o(" (Wav2Vec2 model)"),Sar=l(),ET=a("li"),g1e=a("strong"),Rar=o("wav2vec2-conformer"),Par=o(" \u2014 "),Vz=a("a"),Bar=o("Wav2Vec2ConformerForXVector"),Iar=o(" (Wav2Vec2-Conformer model)"),Nar=l(),CT=a("li"),h1e=a("strong"),qar=o("wavlm"),jar=o(" \u2014 "),Xz=a("a"),Dar=o("WavLMForXVector"),Gar=o(" (WavLM model)"),Oar=l(),wT=a("p"),Var=o("The model is set in evaluation mode by default using "),p1e=a("code"),Xar=o("model.eval()"),zar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),War=o("model.train()"),Qar=l(),F(AT.$$.fragment),hje=l(),Ad=a("h2"),yT=a("a"),_1e=a("span"),F(GL.$$.fragment),Har=l(),b1e=a("span"),Uar=o("AutoModelForMaskedImageModeling"),pje=l(),Wo=a("div"),F(OL.$$.fragment),Jar=l(),yd=a("p"),Yar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zz=a("a"),Kar=o("from_pretrained()"),Zar=o(" class method or the "),Wz=a("a"),enr=o("from_config()"),onr=o(` class
method.`),rnr=l(),VL=a("p"),tnr=o("This class cannot be instantiated directly using "),v1e=a("code"),anr=o("__init__()"),nnr=o(" (throws an error)."),snr=l(),Mt=a("div"),F(XL.$$.fragment),lnr=l(),F1e=a("p"),inr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),dnr=l(),Ld=a("p"),cnr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),fnr=o("not"),mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),gnr=o("from_pretrained()"),hnr=o(" to load the model weights."),pnr=l(),F(LT.$$.fragment),unr=l(),po=a("div"),F(zL.$$.fragment),_nr=l(),M1e=a("p"),bnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),vnr=l(),Wa=a("p"),Fnr=o("The model class to instantiate is selected based on the "),E1e=a("code"),Tnr=o("model_type"),Mnr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),Enr=o("pretrained_model_name_or_path"),Cnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(":"),ynr=l(),xd=a("ul"),xT=a("li"),A1e=a("strong"),Lnr=o("deit"),xnr=o(" \u2014 "),Hz=a("a"),$nr=o("DeiTForMaskedImageModeling"),knr=o(" (DeiT model)"),Snr=l(),$T=a("li"),y1e=a("strong"),Rnr=o("swin"),Pnr=o(" \u2014 "),Uz=a("a"),Bnr=o("SwinForMaskedImageModeling"),Inr=o(" (Swin model)"),Nnr=l(),kT=a("li"),L1e=a("strong"),qnr=o("vit"),jnr=o(" \u2014 "),Jz=a("a"),Dnr=o("ViTForMaskedImageModeling"),Gnr=o(" (ViT model)"),Onr=l(),ST=a("p"),Vnr=o("The model is set in evaluation mode by default using "),x1e=a("code"),Xnr=o("model.eval()"),znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=a("code"),Wnr=o("model.train()"),Qnr=l(),F(RT.$$.fragment),uje=l(),$d=a("h2"),PT=a("a"),k1e=a("span"),F(WL.$$.fragment),Hnr=l(),S1e=a("span"),Unr=o("AutoModelForObjectDetection"),_je=l(),Qo=a("div"),F(QL.$$.fragment),Jnr=l(),kd=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Yz=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),Kz=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),HL=a("p"),tsr=o("This class cannot be instantiated directly using "),R1e=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),Et=a("div"),F(UL.$$.fragment),lsr=l(),P1e=a("p"),isr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dsr=l(),Sd=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),fsr=o("not"),msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),psr=l(),F(BT.$$.fragment),usr=l(),uo=a("div"),F(JL.$$.fragment),_sr=l(),I1e=a("p"),bsr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vsr=l(),Qa=a("p"),Fsr=o("The model class to instantiate is selected based on the "),N1e=a("code"),Tsr=o("model_type"),Msr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(":"),ysr=l(),YL=a("ul"),IT=a("li"),D1e=a("strong"),Lsr=o("detr"),xsr=o(" \u2014 "),eW=a("a"),$sr=o("DetrForObjectDetection"),ksr=o(" (DETR model)"),Ssr=l(),NT=a("li"),G1e=a("strong"),Rsr=o("yolos"),Psr=o(" \u2014 "),oW=a("a"),Bsr=o("YolosForObjectDetection"),Isr=o(" (YOLOS model)"),Nsr=l(),qT=a("p"),qsr=o("The model is set in evaluation mode by default using "),O1e=a("code"),jsr=o("model.eval()"),Dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=a("code"),Gsr=o("model.train()"),Osr=l(),F(jT.$$.fragment),bje=l(),Rd=a("h2"),DT=a("a"),X1e=a("span"),F(KL.$$.fragment),Vsr=l(),z1e=a("span"),Xsr=o("AutoModelForImageSegmentation"),vje=l(),Ho=a("div"),F(ZL.$$.fragment),zsr=l(),Pd=a("p"),Wsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rW=a("a"),Qsr=o("from_pretrained()"),Hsr=o(" class method or the "),tW=a("a"),Usr=o("from_config()"),Jsr=o(` class
method.`),Ysr=l(),e8=a("p"),Ksr=o("This class cannot be instantiated directly using "),W1e=a("code"),Zsr=o("__init__()"),elr=o(" (throws an error)."),olr=l(),Ct=a("div"),F(o8.$$.fragment),rlr=l(),Q1e=a("p"),tlr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),alr=l(),Bd=a("p"),nlr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),slr=o("not"),llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),ilr=o("from_pretrained()"),dlr=o(" to load the model weights."),clr=l(),F(GT.$$.fragment),flr=l(),_o=a("div"),F(r8.$$.fragment),mlr=l(),U1e=a("p"),glr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hlr=l(),Ha=a("p"),plr=o("The model class to instantiate is selected based on the "),J1e=a("code"),ulr=o("model_type"),_lr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),blr=o("pretrained_model_name_or_path"),vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),Flr=o("pretrained_model_name_or_path"),Tlr=o(":"),Mlr=l(),Z1e=a("ul"),OT=a("li"),e3e=a("strong"),Elr=o("detr"),Clr=o(" \u2014 "),nW=a("a"),wlr=o("DetrForSegmentation"),Alr=o(" (DETR model)"),ylr=l(),VT=a("p"),Llr=o("The model is set in evaluation mode by default using "),o3e=a("code"),xlr=o("model.eval()"),$lr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r3e=a("code"),klr=o("model.train()"),Slr=l(),F(XT.$$.fragment),Fje=l(),Id=a("h2"),zT=a("a"),t3e=a("span"),F(t8.$$.fragment),Rlr=l(),a3e=a("span"),Plr=o("AutoModelForSemanticSegmentation"),Tje=l(),Uo=a("div"),F(a8.$$.fragment),Blr=l(),Nd=a("p"),Ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sW=a("a"),Nlr=o("from_pretrained()"),qlr=o(" class method or the "),lW=a("a"),jlr=o("from_config()"),Dlr=o(` class
method.`),Glr=l(),n8=a("p"),Olr=o("This class cannot be instantiated directly using "),n3e=a("code"),Vlr=o("__init__()"),Xlr=o(" (throws an error)."),zlr=l(),wt=a("div"),F(s8.$$.fragment),Wlr=l(),s3e=a("p"),Qlr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hlr=l(),qd=a("p"),Ulr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),Jlr=o("not"),Ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Klr=o("from_pretrained()"),Zlr=o(" to load the model weights."),eir=l(),F(WT.$$.fragment),oir=l(),bo=a("div"),F(l8.$$.fragment),rir=l(),i3e=a("p"),tir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),air=l(),Ua=a("p"),nir=o("The model class to instantiate is selected based on the "),d3e=a("code"),sir=o("model_type"),lir=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),iir=o("pretrained_model_name_or_path"),dir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),cir=o("pretrained_model_name_or_path"),fir=o(":"),mir=l(),Ja=a("ul"),QT=a("li"),m3e=a("strong"),gir=o("beit"),hir=o(" \u2014 "),dW=a("a"),pir=o("BeitForSemanticSegmentation"),uir=o(" (BEiT model)"),_ir=l(),HT=a("li"),g3e=a("strong"),bir=o("data2vec-vision"),vir=o(" \u2014 "),cW=a("a"),Fir=o("Data2VecVisionForSemanticSegmentation"),Tir=o(" (Data2VecVision model)"),Mir=l(),UT=a("li"),h3e=a("strong"),Eir=o("dpt"),Cir=o(" \u2014 "),fW=a("a"),wir=o("DPTForSemanticSegmentation"),Air=o(" (DPT model)"),yir=l(),JT=a("li"),p3e=a("strong"),Lir=o("segformer"),xir=o(" \u2014 "),mW=a("a"),$ir=o("SegformerForSemanticSegmentation"),kir=o(" (SegFormer model)"),Sir=l(),YT=a("p"),Rir=o("The model is set in evaluation mode by default using "),u3e=a("code"),Pir=o("model.eval()"),Bir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=a("code"),Iir=o("model.train()"),Nir=l(),F(KT.$$.fragment),Mje=l(),jd=a("h2"),ZT=a("a"),b3e=a("span"),F(i8.$$.fragment),qir=l(),v3e=a("span"),jir=o("AutoModelForInstanceSegmentation"),Eje=l(),Jo=a("div"),F(d8.$$.fragment),Dir=l(),Dd=a("p"),Gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gW=a("a"),Oir=o("from_pretrained()"),Vir=o(" class method or the "),hW=a("a"),Xir=o("from_config()"),zir=o(` class
method.`),Wir=l(),c8=a("p"),Qir=o("This class cannot be instantiated directly using "),F3e=a("code"),Hir=o("__init__()"),Uir=o(" (throws an error)."),Jir=l(),At=a("div"),F(f8.$$.fragment),Yir=l(),T3e=a("p"),Kir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Zir=l(),Gd=a("p"),edr=o(`Note:
Loading a model from its configuration file does `),M3e=a("strong"),odr=o("not"),rdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),tdr=o("from_pretrained()"),adr=o(" to load the model weights."),ndr=l(),F(e7.$$.fragment),sdr=l(),vo=a("div"),F(m8.$$.fragment),ldr=l(),E3e=a("p"),idr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ddr=l(),Ya=a("p"),cdr=o("The model class to instantiate is selected based on the "),C3e=a("code"),fdr=o("model_type"),mdr=o(` property of the config object (either
passed as an argument or loaded from `),w3e=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=a("code"),pdr=o("pretrained_model_name_or_path"),udr=o(":"),_dr=l(),y3e=a("ul"),o7=a("li"),L3e=a("strong"),bdr=o("maskformer"),vdr=o(" \u2014 "),uW=a("a"),Fdr=o("MaskFormerForInstanceSegmentation"),Tdr=o(" (MaskFormer model)"),Mdr=l(),r7=a("p"),Edr=o("The model is set in evaluation mode by default using "),x3e=a("code"),Cdr=o("model.eval()"),wdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$3e=a("code"),Adr=o("model.train()"),ydr=l(),F(t7.$$.fragment),Cje=l(),Od=a("h2"),a7=a("a"),k3e=a("span"),F(g8.$$.fragment),Ldr=l(),S3e=a("span"),xdr=o("TFAutoModel"),wje=l(),Yo=a("div"),F(h8.$$.fragment),$dr=l(),Vd=a("p"),kdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_W=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" class method or the "),bW=a("a"),Pdr=o("from_config()"),Bdr=o(` class
method.`),Idr=l(),p8=a("p"),Ndr=o("This class cannot be instantiated directly using "),R3e=a("code"),qdr=o("__init__()"),jdr=o(" (throws an error)."),Ddr=l(),yt=a("div"),F(u8.$$.fragment),Gdr=l(),P3e=a("p"),Odr=o("Instantiates one of the base model classes of the library from a configuration."),Vdr=l(),Xd=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),zdr=o("not"),Wdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Qdr=o("from_pretrained()"),Hdr=o(" to load the model weights."),Udr=l(),F(n7.$$.fragment),Jdr=l(),wr=a("div"),F(_8.$$.fragment),Ydr=l(),I3e=a("p"),Kdr=o("Instantiate one of the base model classes of the library from a pretrained model."),Zdr=l(),Ka=a("p"),ecr=o("The model class to instantiate is selected based on the "),N3e=a("code"),ocr=o("model_type"),rcr=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(":"),lcr=l(),q=a("ul"),s7=a("li"),D3e=a("strong"),icr=o("albert"),dcr=o(" \u2014 "),FW=a("a"),ccr=o("TFAlbertModel"),fcr=o(" (ALBERT model)"),mcr=l(),l7=a("li"),G3e=a("strong"),gcr=o("bart"),hcr=o(" \u2014 "),TW=a("a"),pcr=o("TFBartModel"),ucr=o(" (BART model)"),_cr=l(),i7=a("li"),O3e=a("strong"),bcr=o("bert"),vcr=o(" \u2014 "),MW=a("a"),Fcr=o("TFBertModel"),Tcr=o(" (BERT model)"),Mcr=l(),d7=a("li"),V3e=a("strong"),Ecr=o("blenderbot"),Ccr=o(" \u2014 "),EW=a("a"),wcr=o("TFBlenderbotModel"),Acr=o(" (Blenderbot model)"),ycr=l(),c7=a("li"),X3e=a("strong"),Lcr=o("blenderbot-small"),xcr=o(" \u2014 "),CW=a("a"),$cr=o("TFBlenderbotSmallModel"),kcr=o(" (BlenderbotSmall model)"),Scr=l(),f7=a("li"),z3e=a("strong"),Rcr=o("camembert"),Pcr=o(" \u2014 "),wW=a("a"),Bcr=o("TFCamembertModel"),Icr=o(" (CamemBERT model)"),Ncr=l(),m7=a("li"),W3e=a("strong"),qcr=o("clip"),jcr=o(" \u2014 "),AW=a("a"),Dcr=o("TFCLIPModel"),Gcr=o(" (CLIP model)"),Ocr=l(),g7=a("li"),Q3e=a("strong"),Vcr=o("convbert"),Xcr=o(" \u2014 "),yW=a("a"),zcr=o("TFConvBertModel"),Wcr=o(" (ConvBERT model)"),Qcr=l(),h7=a("li"),H3e=a("strong"),Hcr=o("convnext"),Ucr=o(" \u2014 "),LW=a("a"),Jcr=o("TFConvNextModel"),Ycr=o(" (ConvNext model)"),Kcr=l(),p7=a("li"),U3e=a("strong"),Zcr=o("ctrl"),efr=o(" \u2014 "),xW=a("a"),ofr=o("TFCTRLModel"),rfr=o(" (CTRL model)"),tfr=l(),u7=a("li"),J3e=a("strong"),afr=o("data2vec-vision"),nfr=o(" \u2014 "),$W=a("a"),sfr=o("TFData2VecVisionModel"),lfr=o(" (Data2VecVision model)"),ifr=l(),_7=a("li"),Y3e=a("strong"),dfr=o("deberta"),cfr=o(" \u2014 "),kW=a("a"),ffr=o("TFDebertaModel"),mfr=o(" (DeBERTa model)"),gfr=l(),b7=a("li"),K3e=a("strong"),hfr=o("deberta-v2"),pfr=o(" \u2014 "),SW=a("a"),ufr=o("TFDebertaV2Model"),_fr=o(" (DeBERTa-v2 model)"),bfr=l(),v7=a("li"),Z3e=a("strong"),vfr=o("distilbert"),Ffr=o(" \u2014 "),RW=a("a"),Tfr=o("TFDistilBertModel"),Mfr=o(" (DistilBERT model)"),Efr=l(),F7=a("li"),ebe=a("strong"),Cfr=o("dpr"),wfr=o(" \u2014 "),PW=a("a"),Afr=o("TFDPRQuestionEncoder"),yfr=o(" (DPR model)"),Lfr=l(),T7=a("li"),obe=a("strong"),xfr=o("electra"),$fr=o(" \u2014 "),BW=a("a"),kfr=o("TFElectraModel"),Sfr=o(" (ELECTRA model)"),Rfr=l(),M7=a("li"),rbe=a("strong"),Pfr=o("flaubert"),Bfr=o(" \u2014 "),IW=a("a"),Ifr=o("TFFlaubertModel"),Nfr=o(" (FlauBERT model)"),qfr=l(),Ns=a("li"),tbe=a("strong"),jfr=o("funnel"),Dfr=o(" \u2014 "),NW=a("a"),Gfr=o("TFFunnelModel"),Ofr=o(" or "),qW=a("a"),Vfr=o("TFFunnelBaseModel"),Xfr=o(" (Funnel Transformer model)"),zfr=l(),E7=a("li"),abe=a("strong"),Wfr=o("gpt2"),Qfr=o(" \u2014 "),jW=a("a"),Hfr=o("TFGPT2Model"),Ufr=o(" (OpenAI GPT-2 model)"),Jfr=l(),C7=a("li"),nbe=a("strong"),Yfr=o("gptj"),Kfr=o(" \u2014 "),DW=a("a"),Zfr=o("TFGPTJModel"),emr=o(" (GPT-J model)"),omr=l(),w7=a("li"),sbe=a("strong"),rmr=o("hubert"),tmr=o(" \u2014 "),GW=a("a"),amr=o("TFHubertModel"),nmr=o(" (Hubert model)"),smr=l(),A7=a("li"),lbe=a("strong"),lmr=o("layoutlm"),imr=o(" \u2014 "),OW=a("a"),dmr=o("TFLayoutLMModel"),cmr=o(" (LayoutLM model)"),fmr=l(),y7=a("li"),ibe=a("strong"),mmr=o("led"),gmr=o(" \u2014 "),VW=a("a"),hmr=o("TFLEDModel"),pmr=o(" (LED model)"),umr=l(),L7=a("li"),dbe=a("strong"),_mr=o("longformer"),bmr=o(" \u2014 "),XW=a("a"),vmr=o("TFLongformerModel"),Fmr=o(" (Longformer model)"),Tmr=l(),x7=a("li"),cbe=a("strong"),Mmr=o("lxmert"),Emr=o(" \u2014 "),zW=a("a"),Cmr=o("TFLxmertModel"),wmr=o(" (LXMERT model)"),Amr=l(),$7=a("li"),fbe=a("strong"),ymr=o("marian"),Lmr=o(" \u2014 "),WW=a("a"),xmr=o("TFMarianModel"),$mr=o(" (Marian model)"),kmr=l(),k7=a("li"),mbe=a("strong"),Smr=o("mbart"),Rmr=o(" \u2014 "),QW=a("a"),Pmr=o("TFMBartModel"),Bmr=o(" (mBART model)"),Imr=l(),S7=a("li"),gbe=a("strong"),Nmr=o("mobilebert"),qmr=o(" \u2014 "),HW=a("a"),jmr=o("TFMobileBertModel"),Dmr=o(" (MobileBERT model)"),Gmr=l(),R7=a("li"),hbe=a("strong"),Omr=o("mpnet"),Vmr=o(" \u2014 "),UW=a("a"),Xmr=o("TFMPNetModel"),zmr=o(" (MPNet model)"),Wmr=l(),P7=a("li"),pbe=a("strong"),Qmr=o("mt5"),Hmr=o(" \u2014 "),JW=a("a"),Umr=o("TFMT5Model"),Jmr=o(" (mT5 model)"),Ymr=l(),B7=a("li"),ube=a("strong"),Kmr=o("openai-gpt"),Zmr=o(" \u2014 "),YW=a("a"),egr=o("TFOpenAIGPTModel"),ogr=o(" (OpenAI GPT model)"),rgr=l(),I7=a("li"),_be=a("strong"),tgr=o("pegasus"),agr=o(" \u2014 "),KW=a("a"),ngr=o("TFPegasusModel"),sgr=o(" (Pegasus model)"),lgr=l(),N7=a("li"),bbe=a("strong"),igr=o("rembert"),dgr=o(" \u2014 "),ZW=a("a"),cgr=o("TFRemBertModel"),fgr=o(" (RemBERT model)"),mgr=l(),q7=a("li"),vbe=a("strong"),ggr=o("roberta"),hgr=o(" \u2014 "),eQ=a("a"),pgr=o("TFRobertaModel"),ugr=o(" (RoBERTa model)"),_gr=l(),j7=a("li"),Fbe=a("strong"),bgr=o("roformer"),vgr=o(" \u2014 "),oQ=a("a"),Fgr=o("TFRoFormerModel"),Tgr=o(" (RoFormer model)"),Mgr=l(),D7=a("li"),Tbe=a("strong"),Egr=o("speech_to_text"),Cgr=o(" \u2014 "),rQ=a("a"),wgr=o("TFSpeech2TextModel"),Agr=o(" (Speech2Text model)"),ygr=l(),G7=a("li"),Mbe=a("strong"),Lgr=o("swin"),xgr=o(" \u2014 "),tQ=a("a"),$gr=o("TFSwinModel"),kgr=o(" (Swin model)"),Sgr=l(),O7=a("li"),Ebe=a("strong"),Rgr=o("t5"),Pgr=o(" \u2014 "),aQ=a("a"),Bgr=o("TFT5Model"),Igr=o(" (T5 model)"),Ngr=l(),V7=a("li"),Cbe=a("strong"),qgr=o("tapas"),jgr=o(" \u2014 "),nQ=a("a"),Dgr=o("TFTapasModel"),Ggr=o(" (TAPAS model)"),Ogr=l(),X7=a("li"),wbe=a("strong"),Vgr=o("transfo-xl"),Xgr=o(" \u2014 "),sQ=a("a"),zgr=o("TFTransfoXLModel"),Wgr=o(" (Transformer-XL model)"),Qgr=l(),z7=a("li"),Abe=a("strong"),Hgr=o("vit"),Ugr=o(" \u2014 "),lQ=a("a"),Jgr=o("TFViTModel"),Ygr=o(" (ViT model)"),Kgr=l(),W7=a("li"),ybe=a("strong"),Zgr=o("vit_mae"),ehr=o(" \u2014 "),iQ=a("a"),ohr=o("TFViTMAEModel"),rhr=o(" (ViTMAE model)"),thr=l(),Q7=a("li"),Lbe=a("strong"),ahr=o("wav2vec2"),nhr=o(" \u2014 "),dQ=a("a"),shr=o("TFWav2Vec2Model"),lhr=o(" (Wav2Vec2 model)"),ihr=l(),H7=a("li"),xbe=a("strong"),dhr=o("xlm"),chr=o(" \u2014 "),cQ=a("a"),fhr=o("TFXLMModel"),mhr=o(" (XLM model)"),ghr=l(),U7=a("li"),$be=a("strong"),hhr=o("xlm-roberta"),phr=o(" \u2014 "),fQ=a("a"),uhr=o("TFXLMRobertaModel"),_hr=o(" (XLM-RoBERTa model)"),bhr=l(),J7=a("li"),kbe=a("strong"),vhr=o("xlnet"),Fhr=o(" \u2014 "),mQ=a("a"),Thr=o("TFXLNetModel"),Mhr=o(" (XLNet model)"),Ehr=l(),F(Y7.$$.fragment),Aje=l(),zd=a("h2"),K7=a("a"),Sbe=a("span"),F(b8.$$.fragment),Chr=l(),Rbe=a("span"),whr=o("TFAutoModelForPreTraining"),yje=l(),Ko=a("div"),F(v8.$$.fragment),Ahr=l(),Wd=a("p"),yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gQ=a("a"),Lhr=o("from_pretrained()"),xhr=o(" class method or the "),hQ=a("a"),$hr=o("from_config()"),khr=o(` class
method.`),Shr=l(),F8=a("p"),Rhr=o("This class cannot be instantiated directly using "),Pbe=a("code"),Phr=o("__init__()"),Bhr=o(" (throws an error)."),Ihr=l(),Lt=a("div"),F(T8.$$.fragment),Nhr=l(),Bbe=a("p"),qhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jhr=l(),Qd=a("p"),Dhr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),Ghr=o("not"),Ohr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Vhr=o("from_pretrained()"),Xhr=o(" to load the model weights."),zhr=l(),F(Z7.$$.fragment),Whr=l(),Ar=a("div"),F(M8.$$.fragment),Qhr=l(),Nbe=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uhr=l(),Za=a("p"),Jhr=o("The model class to instantiate is selected based on the "),qbe=a("code"),Yhr=o("model_type"),Khr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(":"),tpr=l(),se=a("ul"),eM=a("li"),Gbe=a("strong"),apr=o("albert"),npr=o(" \u2014 "),uQ=a("a"),spr=o("TFAlbertForPreTraining"),lpr=o(" (ALBERT model)"),ipr=l(),oM=a("li"),Obe=a("strong"),dpr=o("bart"),cpr=o(" \u2014 "),_Q=a("a"),fpr=o("TFBartForConditionalGeneration"),mpr=o(" (BART model)"),gpr=l(),rM=a("li"),Vbe=a("strong"),hpr=o("bert"),ppr=o(" \u2014 "),bQ=a("a"),upr=o("TFBertForPreTraining"),_pr=o(" (BERT model)"),bpr=l(),tM=a("li"),Xbe=a("strong"),vpr=o("camembert"),Fpr=o(" \u2014 "),vQ=a("a"),Tpr=o("TFCamembertForMaskedLM"),Mpr=o(" (CamemBERT model)"),Epr=l(),aM=a("li"),zbe=a("strong"),Cpr=o("ctrl"),wpr=o(" \u2014 "),FQ=a("a"),Apr=o("TFCTRLLMHeadModel"),ypr=o(" (CTRL model)"),Lpr=l(),nM=a("li"),Wbe=a("strong"),xpr=o("distilbert"),$pr=o(" \u2014 "),TQ=a("a"),kpr=o("TFDistilBertForMaskedLM"),Spr=o(" (DistilBERT model)"),Rpr=l(),sM=a("li"),Qbe=a("strong"),Ppr=o("electra"),Bpr=o(" \u2014 "),MQ=a("a"),Ipr=o("TFElectraForPreTraining"),Npr=o(" (ELECTRA model)"),qpr=l(),lM=a("li"),Hbe=a("strong"),jpr=o("flaubert"),Dpr=o(" \u2014 "),EQ=a("a"),Gpr=o("TFFlaubertWithLMHeadModel"),Opr=o(" (FlauBERT model)"),Vpr=l(),iM=a("li"),Ube=a("strong"),Xpr=o("funnel"),zpr=o(" \u2014 "),CQ=a("a"),Wpr=o("TFFunnelForPreTraining"),Qpr=o(" (Funnel Transformer model)"),Hpr=l(),dM=a("li"),Jbe=a("strong"),Upr=o("gpt2"),Jpr=o(" \u2014 "),wQ=a("a"),Ypr=o("TFGPT2LMHeadModel"),Kpr=o(" (OpenAI GPT-2 model)"),Zpr=l(),cM=a("li"),Ybe=a("strong"),eur=o("layoutlm"),our=o(" \u2014 "),AQ=a("a"),rur=o("TFLayoutLMForMaskedLM"),tur=o(" (LayoutLM model)"),aur=l(),fM=a("li"),Kbe=a("strong"),nur=o("lxmert"),sur=o(" \u2014 "),yQ=a("a"),lur=o("TFLxmertForPreTraining"),iur=o(" (LXMERT model)"),dur=l(),mM=a("li"),Zbe=a("strong"),cur=o("mobilebert"),fur=o(" \u2014 "),LQ=a("a"),mur=o("TFMobileBertForPreTraining"),gur=o(" (MobileBERT model)"),hur=l(),gM=a("li"),e2e=a("strong"),pur=o("mpnet"),uur=o(" \u2014 "),xQ=a("a"),_ur=o("TFMPNetForMaskedLM"),bur=o(" (MPNet model)"),vur=l(),hM=a("li"),o2e=a("strong"),Fur=o("openai-gpt"),Tur=o(" \u2014 "),$Q=a("a"),Mur=o("TFOpenAIGPTLMHeadModel"),Eur=o(" (OpenAI GPT model)"),Cur=l(),pM=a("li"),r2e=a("strong"),wur=o("roberta"),Aur=o(" \u2014 "),kQ=a("a"),yur=o("TFRobertaForMaskedLM"),Lur=o(" (RoBERTa model)"),xur=l(),uM=a("li"),t2e=a("strong"),$ur=o("t5"),kur=o(" \u2014 "),SQ=a("a"),Sur=o("TFT5ForConditionalGeneration"),Rur=o(" (T5 model)"),Pur=l(),_M=a("li"),a2e=a("strong"),Bur=o("tapas"),Iur=o(" \u2014 "),RQ=a("a"),Nur=o("TFTapasForMaskedLM"),qur=o(" (TAPAS model)"),jur=l(),bM=a("li"),n2e=a("strong"),Dur=o("transfo-xl"),Gur=o(" \u2014 "),PQ=a("a"),Our=o("TFTransfoXLLMHeadModel"),Vur=o(" (Transformer-XL model)"),Xur=l(),vM=a("li"),s2e=a("strong"),zur=o("vit_mae"),Wur=o(" \u2014 "),BQ=a("a"),Qur=o("TFViTMAEForPreTraining"),Hur=o(" (ViTMAE model)"),Uur=l(),FM=a("li"),l2e=a("strong"),Jur=o("xlm"),Yur=o(" \u2014 "),IQ=a("a"),Kur=o("TFXLMWithLMHeadModel"),Zur=o(" (XLM model)"),e_r=l(),TM=a("li"),i2e=a("strong"),o_r=o("xlm-roberta"),r_r=o(" \u2014 "),NQ=a("a"),t_r=o("TFXLMRobertaForMaskedLM"),a_r=o(" (XLM-RoBERTa model)"),n_r=l(),MM=a("li"),d2e=a("strong"),s_r=o("xlnet"),l_r=o(" \u2014 "),qQ=a("a"),i_r=o("TFXLNetLMHeadModel"),d_r=o(" (XLNet model)"),c_r=l(),F(EM.$$.fragment),Lje=l(),Hd=a("h2"),CM=a("a"),c2e=a("span"),F(E8.$$.fragment),f_r=l(),f2e=a("span"),m_r=o("TFAutoModelForCausalLM"),xje=l(),Zo=a("div"),F(C8.$$.fragment),g_r=l(),Ud=a("p"),h_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jQ=a("a"),p_r=o("from_pretrained()"),u_r=o(" class method or the "),DQ=a("a"),__r=o("from_config()"),b_r=o(` class
method.`),v_r=l(),w8=a("p"),F_r=o("This class cannot be instantiated directly using "),m2e=a("code"),T_r=o("__init__()"),M_r=o(" (throws an error)."),E_r=l(),xt=a("div"),F(A8.$$.fragment),C_r=l(),g2e=a("p"),w_r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),A_r=l(),Jd=a("p"),y_r=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),L_r=o("not"),x_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),$_r=o("from_pretrained()"),k_r=o(" to load the model weights."),S_r=l(),F(wM.$$.fragment),R_r=l(),yr=a("div"),F(y8.$$.fragment),P_r=l(),p2e=a("p"),B_r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I_r=l(),en=a("p"),N_r=o("The model class to instantiate is selected based on the "),u2e=a("code"),q_r=o("model_type"),j_r=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),D_r=o("pretrained_model_name_or_path"),G_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),O_r=o("pretrained_model_name_or_path"),V_r=o(":"),X_r=l(),Me=a("ul"),AM=a("li"),v2e=a("strong"),z_r=o("bert"),W_r=o(" \u2014 "),OQ=a("a"),Q_r=o("TFBertLMHeadModel"),H_r=o(" (BERT model)"),U_r=l(),yM=a("li"),F2e=a("strong"),J_r=o("camembert"),Y_r=o(" \u2014 "),VQ=a("a"),K_r=o("TFCamembertForCausalLM"),Z_r=o(" (CamemBERT model)"),e1r=l(),LM=a("li"),T2e=a("strong"),o1r=o("ctrl"),r1r=o(" \u2014 "),XQ=a("a"),t1r=o("TFCTRLLMHeadModel"),a1r=o(" (CTRL model)"),n1r=l(),xM=a("li"),M2e=a("strong"),s1r=o("gpt2"),l1r=o(" \u2014 "),zQ=a("a"),i1r=o("TFGPT2LMHeadModel"),d1r=o(" (OpenAI GPT-2 model)"),c1r=l(),$M=a("li"),E2e=a("strong"),f1r=o("gptj"),m1r=o(" \u2014 "),WQ=a("a"),g1r=o("TFGPTJForCausalLM"),h1r=o(" (GPT-J model)"),p1r=l(),kM=a("li"),C2e=a("strong"),u1r=o("openai-gpt"),_1r=o(" \u2014 "),QQ=a("a"),b1r=o("TFOpenAIGPTLMHeadModel"),v1r=o(" (OpenAI GPT model)"),F1r=l(),SM=a("li"),w2e=a("strong"),T1r=o("rembert"),M1r=o(" \u2014 "),HQ=a("a"),E1r=o("TFRemBertForCausalLM"),C1r=o(" (RemBERT model)"),w1r=l(),RM=a("li"),A2e=a("strong"),A1r=o("roberta"),y1r=o(" \u2014 "),UQ=a("a"),L1r=o("TFRobertaForCausalLM"),x1r=o(" (RoBERTa model)"),$1r=l(),PM=a("li"),y2e=a("strong"),k1r=o("roformer"),S1r=o(" \u2014 "),JQ=a("a"),R1r=o("TFRoFormerForCausalLM"),P1r=o(" (RoFormer model)"),B1r=l(),BM=a("li"),L2e=a("strong"),I1r=o("transfo-xl"),N1r=o(" \u2014 "),YQ=a("a"),q1r=o("TFTransfoXLLMHeadModel"),j1r=o(" (Transformer-XL model)"),D1r=l(),IM=a("li"),x2e=a("strong"),G1r=o("xlm"),O1r=o(" \u2014 "),KQ=a("a"),V1r=o("TFXLMWithLMHeadModel"),X1r=o(" (XLM model)"),z1r=l(),NM=a("li"),$2e=a("strong"),W1r=o("xlnet"),Q1r=o(" \u2014 "),ZQ=a("a"),H1r=o("TFXLNetLMHeadModel"),U1r=o(" (XLNet model)"),J1r=l(),F(qM.$$.fragment),$je=l(),Yd=a("h2"),jM=a("a"),k2e=a("span"),F(L8.$$.fragment),Y1r=l(),S2e=a("span"),K1r=o("TFAutoModelForImageClassification"),kje=l(),er=a("div"),F(x8.$$.fragment),Z1r=l(),Kd=a("p"),e3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eH=a("a"),o3r=o("from_pretrained()"),r3r=o(" class method or the "),oH=a("a"),t3r=o("from_config()"),a3r=o(` class
method.`),n3r=l(),$8=a("p"),s3r=o("This class cannot be instantiated directly using "),R2e=a("code"),l3r=o("__init__()"),i3r=o(" (throws an error)."),d3r=l(),$t=a("div"),F(k8.$$.fragment),c3r=l(),P2e=a("p"),f3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m3r=l(),Zd=a("p"),g3r=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),h3r=o("not"),p3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),u3r=o("from_pretrained()"),_3r=o(" to load the model weights."),b3r=l(),F(DM.$$.fragment),v3r=l(),Lr=a("div"),F(S8.$$.fragment),F3r=l(),I2e=a("p"),T3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),M3r=l(),on=a("p"),E3r=o("The model class to instantiate is selected based on the "),N2e=a("code"),C3r=o("model_type"),w3r=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),A3r=o("pretrained_model_name_or_path"),y3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),L3r=o("pretrained_model_name_or_path"),x3r=o(":"),$3r=l(),rn=a("ul"),GM=a("li"),D2e=a("strong"),k3r=o("convnext"),S3r=o(" \u2014 "),tH=a("a"),R3r=o("TFConvNextForImageClassification"),P3r=o(" (ConvNext model)"),B3r=l(),OM=a("li"),G2e=a("strong"),I3r=o("data2vec-vision"),N3r=o(" \u2014 "),aH=a("a"),q3r=o("TFData2VecVisionForImageClassification"),j3r=o(" (Data2VecVision model)"),D3r=l(),VM=a("li"),O2e=a("strong"),G3r=o("swin"),O3r=o(" \u2014 "),nH=a("a"),V3r=o("TFSwinForImageClassification"),X3r=o(" (Swin model)"),z3r=l(),XM=a("li"),V2e=a("strong"),W3r=o("vit"),Q3r=o(" \u2014 "),sH=a("a"),H3r=o("TFViTForImageClassification"),U3r=o(" (ViT model)"),J3r=l(),F(zM.$$.fragment),Sje=l(),ec=a("h2"),WM=a("a"),X2e=a("span"),F(R8.$$.fragment),Y3r=l(),z2e=a("span"),K3r=o("TFAutoModelForMaskedLM"),Rje=l(),or=a("div"),F(P8.$$.fragment),Z3r=l(),oc=a("p"),ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lH=a("a"),obr=o("from_pretrained()"),rbr=o(" class method or the "),iH=a("a"),tbr=o("from_config()"),abr=o(` class
method.`),nbr=l(),B8=a("p"),sbr=o("This class cannot be instantiated directly using "),W2e=a("code"),lbr=o("__init__()"),ibr=o(" (throws an error)."),dbr=l(),kt=a("div"),F(I8.$$.fragment),cbr=l(),Q2e=a("p"),fbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mbr=l(),rc=a("p"),gbr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),hbr=o("not"),pbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),ubr=o("from_pretrained()"),_br=o(" to load the model weights."),bbr=l(),F(QM.$$.fragment),vbr=l(),xr=a("div"),F(N8.$$.fragment),Fbr=l(),U2e=a("p"),Tbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mbr=l(),tn=a("p"),Ebr=o("The model class to instantiate is selected based on the "),J2e=a("code"),Cbr=o("model_type"),wbr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),Abr=o("pretrained_model_name_or_path"),ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),Lbr=o("pretrained_model_name_or_path"),xbr=o(":"),$br=l(),ie=a("ul"),HM=a("li"),Z2e=a("strong"),kbr=o("albert"),Sbr=o(" \u2014 "),cH=a("a"),Rbr=o("TFAlbertForMaskedLM"),Pbr=o(" (ALBERT model)"),Bbr=l(),UM=a("li"),eve=a("strong"),Ibr=o("bert"),Nbr=o(" \u2014 "),fH=a("a"),qbr=o("TFBertForMaskedLM"),jbr=o(" (BERT model)"),Dbr=l(),JM=a("li"),ove=a("strong"),Gbr=o("camembert"),Obr=o(" \u2014 "),mH=a("a"),Vbr=o("TFCamembertForMaskedLM"),Xbr=o(" (CamemBERT model)"),zbr=l(),YM=a("li"),rve=a("strong"),Wbr=o("convbert"),Qbr=o(" \u2014 "),gH=a("a"),Hbr=o("TFConvBertForMaskedLM"),Ubr=o(" (ConvBERT model)"),Jbr=l(),KM=a("li"),tve=a("strong"),Ybr=o("deberta"),Kbr=o(" \u2014 "),hH=a("a"),Zbr=o("TFDebertaForMaskedLM"),e2r=o(" (DeBERTa model)"),o2r=l(),ZM=a("li"),ave=a("strong"),r2r=o("deberta-v2"),t2r=o(" \u2014 "),pH=a("a"),a2r=o("TFDebertaV2ForMaskedLM"),n2r=o(" (DeBERTa-v2 model)"),s2r=l(),e4=a("li"),nve=a("strong"),l2r=o("distilbert"),i2r=o(" \u2014 "),uH=a("a"),d2r=o("TFDistilBertForMaskedLM"),c2r=o(" (DistilBERT model)"),f2r=l(),o4=a("li"),sve=a("strong"),m2r=o("electra"),g2r=o(" \u2014 "),_H=a("a"),h2r=o("TFElectraForMaskedLM"),p2r=o(" (ELECTRA model)"),u2r=l(),r4=a("li"),lve=a("strong"),_2r=o("flaubert"),b2r=o(" \u2014 "),bH=a("a"),v2r=o("TFFlaubertWithLMHeadModel"),F2r=o(" (FlauBERT model)"),T2r=l(),t4=a("li"),ive=a("strong"),M2r=o("funnel"),E2r=o(" \u2014 "),vH=a("a"),C2r=o("TFFunnelForMaskedLM"),w2r=o(" (Funnel Transformer model)"),A2r=l(),a4=a("li"),dve=a("strong"),y2r=o("layoutlm"),L2r=o(" \u2014 "),FH=a("a"),x2r=o("TFLayoutLMForMaskedLM"),$2r=o(" (LayoutLM model)"),k2r=l(),n4=a("li"),cve=a("strong"),S2r=o("longformer"),R2r=o(" \u2014 "),TH=a("a"),P2r=o("TFLongformerForMaskedLM"),B2r=o(" (Longformer model)"),I2r=l(),s4=a("li"),fve=a("strong"),N2r=o("mobilebert"),q2r=o(" \u2014 "),MH=a("a"),j2r=o("TFMobileBertForMaskedLM"),D2r=o(" (MobileBERT model)"),G2r=l(),l4=a("li"),mve=a("strong"),O2r=o("mpnet"),V2r=o(" \u2014 "),EH=a("a"),X2r=o("TFMPNetForMaskedLM"),z2r=o(" (MPNet model)"),W2r=l(),i4=a("li"),gve=a("strong"),Q2r=o("rembert"),H2r=o(" \u2014 "),CH=a("a"),U2r=o("TFRemBertForMaskedLM"),J2r=o(" (RemBERT model)"),Y2r=l(),d4=a("li"),hve=a("strong"),K2r=o("roberta"),Z2r=o(" \u2014 "),wH=a("a"),evr=o("TFRobertaForMaskedLM"),ovr=o(" (RoBERTa model)"),rvr=l(),c4=a("li"),pve=a("strong"),tvr=o("roformer"),avr=o(" \u2014 "),AH=a("a"),nvr=o("TFRoFormerForMaskedLM"),svr=o(" (RoFormer model)"),lvr=l(),f4=a("li"),uve=a("strong"),ivr=o("tapas"),dvr=o(" \u2014 "),yH=a("a"),cvr=o("TFTapasForMaskedLM"),fvr=o(" (TAPAS model)"),mvr=l(),m4=a("li"),_ve=a("strong"),gvr=o("xlm"),hvr=o(" \u2014 "),LH=a("a"),pvr=o("TFXLMWithLMHeadModel"),uvr=o(" (XLM model)"),_vr=l(),g4=a("li"),bve=a("strong"),bvr=o("xlm-roberta"),vvr=o(" \u2014 "),xH=a("a"),Fvr=o("TFXLMRobertaForMaskedLM"),Tvr=o(" (XLM-RoBERTa model)"),Mvr=l(),F(h4.$$.fragment),Pje=l(),tc=a("h2"),p4=a("a"),vve=a("span"),F(q8.$$.fragment),Evr=l(),Fve=a("span"),Cvr=o("TFAutoModelForSeq2SeqLM"),Bje=l(),rr=a("div"),F(j8.$$.fragment),wvr=l(),ac=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$H=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),kH=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),D8=a("p"),Svr=o("This class cannot be instantiated directly using "),Tve=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),St=a("div"),F(G8.$$.fragment),Ivr=l(),Mve=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qvr=l(),nc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(u4.$$.fragment),zvr=l(),$r=a("div"),F(O8.$$.fragment),Wvr=l(),Cve=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hvr=l(),an=a("p"),Uvr=o("The model class to instantiate is selected based on the "),wve=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),ye=a("ul"),_4=a("li"),Lve=a("strong"),tFr=o("bart"),aFr=o(" \u2014 "),RH=a("a"),nFr=o("TFBartForConditionalGeneration"),sFr=o(" (BART model)"),lFr=l(),b4=a("li"),xve=a("strong"),iFr=o("blenderbot"),dFr=o(" \u2014 "),PH=a("a"),cFr=o("TFBlenderbotForConditionalGeneration"),fFr=o(" (Blenderbot model)"),mFr=l(),v4=a("li"),$ve=a("strong"),gFr=o("blenderbot-small"),hFr=o(" \u2014 "),BH=a("a"),pFr=o("TFBlenderbotSmallForConditionalGeneration"),uFr=o(" (BlenderbotSmall model)"),_Fr=l(),F4=a("li"),kve=a("strong"),bFr=o("encoder-decoder"),vFr=o(" \u2014 "),IH=a("a"),FFr=o("TFEncoderDecoderModel"),TFr=o(" (Encoder decoder model)"),MFr=l(),T4=a("li"),Sve=a("strong"),EFr=o("led"),CFr=o(" \u2014 "),NH=a("a"),wFr=o("TFLEDForConditionalGeneration"),AFr=o(" (LED model)"),yFr=l(),M4=a("li"),Rve=a("strong"),LFr=o("marian"),xFr=o(" \u2014 "),qH=a("a"),$Fr=o("TFMarianMTModel"),kFr=o(" (Marian model)"),SFr=l(),E4=a("li"),Pve=a("strong"),RFr=o("mbart"),PFr=o(" \u2014 "),jH=a("a"),BFr=o("TFMBartForConditionalGeneration"),IFr=o(" (mBART model)"),NFr=l(),C4=a("li"),Bve=a("strong"),qFr=o("mt5"),jFr=o(" \u2014 "),DH=a("a"),DFr=o("TFMT5ForConditionalGeneration"),GFr=o(" (mT5 model)"),OFr=l(),w4=a("li"),Ive=a("strong"),VFr=o("pegasus"),XFr=o(" \u2014 "),GH=a("a"),zFr=o("TFPegasusForConditionalGeneration"),WFr=o(" (Pegasus model)"),QFr=l(),A4=a("li"),Nve=a("strong"),HFr=o("t5"),UFr=o(" \u2014 "),OH=a("a"),JFr=o("TFT5ForConditionalGeneration"),YFr=o(" (T5 model)"),KFr=l(),F(y4.$$.fragment),Ije=l(),sc=a("h2"),L4=a("a"),qve=a("span"),F(V8.$$.fragment),ZFr=l(),jve=a("span"),eTr=o("TFAutoModelForSequenceClassification"),Nje=l(),tr=a("div"),F(X8.$$.fragment),oTr=l(),lc=a("p"),rTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VH=a("a"),tTr=o("from_pretrained()"),aTr=o(" class method or the "),XH=a("a"),nTr=o("from_config()"),sTr=o(` class
method.`),lTr=l(),z8=a("p"),iTr=o("This class cannot be instantiated directly using "),Dve=a("code"),dTr=o("__init__()"),cTr=o(" (throws an error)."),fTr=l(),Rt=a("div"),F(W8.$$.fragment),mTr=l(),Gve=a("p"),gTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hTr=l(),ic=a("p"),pTr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),uTr=o("not"),_Tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),bTr=o("from_pretrained()"),vTr=o(" to load the model weights."),FTr=l(),F(x4.$$.fragment),TTr=l(),kr=a("div"),F(Q8.$$.fragment),MTr=l(),Vve=a("p"),ETr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CTr=l(),nn=a("p"),wTr=o("The model class to instantiate is selected based on the "),Xve=a("code"),ATr=o("model_type"),yTr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),$Tr=o("pretrained_model_name_or_path"),kTr=o(":"),STr=l(),oe=a("ul"),$4=a("li"),Qve=a("strong"),RTr=o("albert"),PTr=o(" \u2014 "),WH=a("a"),BTr=o("TFAlbertForSequenceClassification"),ITr=o(" (ALBERT model)"),NTr=l(),k4=a("li"),Hve=a("strong"),qTr=o("bert"),jTr=o(" \u2014 "),QH=a("a"),DTr=o("TFBertForSequenceClassification"),GTr=o(" (BERT model)"),OTr=l(),S4=a("li"),Uve=a("strong"),VTr=o("camembert"),XTr=o(" \u2014 "),HH=a("a"),zTr=o("TFCamembertForSequenceClassification"),WTr=o(" (CamemBERT model)"),QTr=l(),R4=a("li"),Jve=a("strong"),HTr=o("convbert"),UTr=o(" \u2014 "),UH=a("a"),JTr=o("TFConvBertForSequenceClassification"),YTr=o(" (ConvBERT model)"),KTr=l(),P4=a("li"),Yve=a("strong"),ZTr=o("ctrl"),e7r=o(" \u2014 "),JH=a("a"),o7r=o("TFCTRLForSequenceClassification"),r7r=o(" (CTRL model)"),t7r=l(),B4=a("li"),Kve=a("strong"),a7r=o("deberta"),n7r=o(" \u2014 "),YH=a("a"),s7r=o("TFDebertaForSequenceClassification"),l7r=o(" (DeBERTa model)"),i7r=l(),I4=a("li"),Zve=a("strong"),d7r=o("deberta-v2"),c7r=o(" \u2014 "),KH=a("a"),f7r=o("TFDebertaV2ForSequenceClassification"),m7r=o(" (DeBERTa-v2 model)"),g7r=l(),N4=a("li"),eFe=a("strong"),h7r=o("distilbert"),p7r=o(" \u2014 "),ZH=a("a"),u7r=o("TFDistilBertForSequenceClassification"),_7r=o(" (DistilBERT model)"),b7r=l(),q4=a("li"),oFe=a("strong"),v7r=o("electra"),F7r=o(" \u2014 "),eU=a("a"),T7r=o("TFElectraForSequenceClassification"),M7r=o(" (ELECTRA model)"),E7r=l(),j4=a("li"),rFe=a("strong"),C7r=o("flaubert"),w7r=o(" \u2014 "),oU=a("a"),A7r=o("TFFlaubertForSequenceClassification"),y7r=o(" (FlauBERT model)"),L7r=l(),D4=a("li"),tFe=a("strong"),x7r=o("funnel"),$7r=o(" \u2014 "),rU=a("a"),k7r=o("TFFunnelForSequenceClassification"),S7r=o(" (Funnel Transformer model)"),R7r=l(),G4=a("li"),aFe=a("strong"),P7r=o("gpt2"),B7r=o(" \u2014 "),tU=a("a"),I7r=o("TFGPT2ForSequenceClassification"),N7r=o(" (OpenAI GPT-2 model)"),q7r=l(),O4=a("li"),nFe=a("strong"),j7r=o("gptj"),D7r=o(" \u2014 "),aU=a("a"),G7r=o("TFGPTJForSequenceClassification"),O7r=o(" (GPT-J model)"),V7r=l(),V4=a("li"),sFe=a("strong"),X7r=o("layoutlm"),z7r=o(" \u2014 "),nU=a("a"),W7r=o("TFLayoutLMForSequenceClassification"),Q7r=o(" (LayoutLM model)"),H7r=l(),X4=a("li"),lFe=a("strong"),U7r=o("longformer"),J7r=o(" \u2014 "),sU=a("a"),Y7r=o("TFLongformerForSequenceClassification"),K7r=o(" (Longformer model)"),Z7r=l(),z4=a("li"),iFe=a("strong"),eMr=o("mobilebert"),oMr=o(" \u2014 "),lU=a("a"),rMr=o("TFMobileBertForSequenceClassification"),tMr=o(" (MobileBERT model)"),aMr=l(),W4=a("li"),dFe=a("strong"),nMr=o("mpnet"),sMr=o(" \u2014 "),iU=a("a"),lMr=o("TFMPNetForSequenceClassification"),iMr=o(" (MPNet model)"),dMr=l(),Q4=a("li"),cFe=a("strong"),cMr=o("openai-gpt"),fMr=o(" \u2014 "),dU=a("a"),mMr=o("TFOpenAIGPTForSequenceClassification"),gMr=o(" (OpenAI GPT model)"),hMr=l(),H4=a("li"),fFe=a("strong"),pMr=o("rembert"),uMr=o(" \u2014 "),cU=a("a"),_Mr=o("TFRemBertForSequenceClassification"),bMr=o(" (RemBERT model)"),vMr=l(),U4=a("li"),mFe=a("strong"),FMr=o("roberta"),TMr=o(" \u2014 "),fU=a("a"),MMr=o("TFRobertaForSequenceClassification"),EMr=o(" (RoBERTa model)"),CMr=l(),J4=a("li"),gFe=a("strong"),wMr=o("roformer"),AMr=o(" \u2014 "),mU=a("a"),yMr=o("TFRoFormerForSequenceClassification"),LMr=o(" (RoFormer model)"),xMr=l(),Y4=a("li"),hFe=a("strong"),$Mr=o("tapas"),kMr=o(" \u2014 "),gU=a("a"),SMr=o("TFTapasForSequenceClassification"),RMr=o(" (TAPAS model)"),PMr=l(),K4=a("li"),pFe=a("strong"),BMr=o("transfo-xl"),IMr=o(" \u2014 "),hU=a("a"),NMr=o("TFTransfoXLForSequenceClassification"),qMr=o(" (Transformer-XL model)"),jMr=l(),Z4=a("li"),uFe=a("strong"),DMr=o("xlm"),GMr=o(" \u2014 "),pU=a("a"),OMr=o("TFXLMForSequenceClassification"),VMr=o(" (XLM model)"),XMr=l(),eE=a("li"),_Fe=a("strong"),zMr=o("xlm-roberta"),WMr=o(" \u2014 "),uU=a("a"),QMr=o("TFXLMRobertaForSequenceClassification"),HMr=o(" (XLM-RoBERTa model)"),UMr=l(),oE=a("li"),bFe=a("strong"),JMr=o("xlnet"),YMr=o(" \u2014 "),_U=a("a"),KMr=o("TFXLNetForSequenceClassification"),ZMr=o(" (XLNet model)"),e4r=l(),F(rE.$$.fragment),qje=l(),dc=a("h2"),tE=a("a"),vFe=a("span"),F(H8.$$.fragment),o4r=l(),FFe=a("span"),r4r=o("TFAutoModelForMultipleChoice"),jje=l(),ar=a("div"),F(U8.$$.fragment),t4r=l(),cc=a("p"),a4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bU=a("a"),n4r=o("from_pretrained()"),s4r=o(" class method or the "),vU=a("a"),l4r=o("from_config()"),i4r=o(` class
method.`),d4r=l(),J8=a("p"),c4r=o("This class cannot be instantiated directly using "),TFe=a("code"),f4r=o("__init__()"),m4r=o(" (throws an error)."),g4r=l(),Pt=a("div"),F(Y8.$$.fragment),h4r=l(),MFe=a("p"),p4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u4r=l(),fc=a("p"),_4r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),b4r=o("not"),v4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),F4r=o("from_pretrained()"),T4r=o(" to load the model weights."),M4r=l(),F(aE.$$.fragment),E4r=l(),Sr=a("div"),F(K8.$$.fragment),C4r=l(),CFe=a("p"),w4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A4r=l(),sn=a("p"),y4r=o("The model class to instantiate is selected based on the "),wFe=a("code"),L4r=o("model_type"),x4r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),$4r=o("pretrained_model_name_or_path"),k4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),S4r=o("pretrained_model_name_or_path"),R4r=o(":"),P4r=l(),pe=a("ul"),nE=a("li"),LFe=a("strong"),B4r=o("albert"),I4r=o(" \u2014 "),TU=a("a"),N4r=o("TFAlbertForMultipleChoice"),q4r=o(" (ALBERT model)"),j4r=l(),sE=a("li"),xFe=a("strong"),D4r=o("bert"),G4r=o(" \u2014 "),MU=a("a"),O4r=o("TFBertForMultipleChoice"),V4r=o(" (BERT model)"),X4r=l(),lE=a("li"),$Fe=a("strong"),z4r=o("camembert"),W4r=o(" \u2014 "),EU=a("a"),Q4r=o("TFCamembertForMultipleChoice"),H4r=o(" (CamemBERT model)"),U4r=l(),iE=a("li"),kFe=a("strong"),J4r=o("convbert"),Y4r=o(" \u2014 "),CU=a("a"),K4r=o("TFConvBertForMultipleChoice"),Z4r=o(" (ConvBERT model)"),eEr=l(),dE=a("li"),SFe=a("strong"),oEr=o("distilbert"),rEr=o(" \u2014 "),wU=a("a"),tEr=o("TFDistilBertForMultipleChoice"),aEr=o(" (DistilBERT model)"),nEr=l(),cE=a("li"),RFe=a("strong"),sEr=o("electra"),lEr=o(" \u2014 "),AU=a("a"),iEr=o("TFElectraForMultipleChoice"),dEr=o(" (ELECTRA model)"),cEr=l(),fE=a("li"),PFe=a("strong"),fEr=o("flaubert"),mEr=o(" \u2014 "),yU=a("a"),gEr=o("TFFlaubertForMultipleChoice"),hEr=o(" (FlauBERT model)"),pEr=l(),mE=a("li"),BFe=a("strong"),uEr=o("funnel"),_Er=o(" \u2014 "),LU=a("a"),bEr=o("TFFunnelForMultipleChoice"),vEr=o(" (Funnel Transformer model)"),FEr=l(),gE=a("li"),IFe=a("strong"),TEr=o("longformer"),MEr=o(" \u2014 "),xU=a("a"),EEr=o("TFLongformerForMultipleChoice"),CEr=o(" (Longformer model)"),wEr=l(),hE=a("li"),NFe=a("strong"),AEr=o("mobilebert"),yEr=o(" \u2014 "),$U=a("a"),LEr=o("TFMobileBertForMultipleChoice"),xEr=o(" (MobileBERT model)"),$Er=l(),pE=a("li"),qFe=a("strong"),kEr=o("mpnet"),SEr=o(" \u2014 "),kU=a("a"),REr=o("TFMPNetForMultipleChoice"),PEr=o(" (MPNet model)"),BEr=l(),uE=a("li"),jFe=a("strong"),IEr=o("rembert"),NEr=o(" \u2014 "),SU=a("a"),qEr=o("TFRemBertForMultipleChoice"),jEr=o(" (RemBERT model)"),DEr=l(),_E=a("li"),DFe=a("strong"),GEr=o("roberta"),OEr=o(" \u2014 "),RU=a("a"),VEr=o("TFRobertaForMultipleChoice"),XEr=o(" (RoBERTa model)"),zEr=l(),bE=a("li"),GFe=a("strong"),WEr=o("roformer"),QEr=o(" \u2014 "),PU=a("a"),HEr=o("TFRoFormerForMultipleChoice"),UEr=o(" (RoFormer model)"),JEr=l(),vE=a("li"),OFe=a("strong"),YEr=o("xlm"),KEr=o(" \u2014 "),BU=a("a"),ZEr=o("TFXLMForMultipleChoice"),eCr=o(" (XLM model)"),oCr=l(),FE=a("li"),VFe=a("strong"),rCr=o("xlm-roberta"),tCr=o(" \u2014 "),IU=a("a"),aCr=o("TFXLMRobertaForMultipleChoice"),nCr=o(" (XLM-RoBERTa model)"),sCr=l(),TE=a("li"),XFe=a("strong"),lCr=o("xlnet"),iCr=o(" \u2014 "),NU=a("a"),dCr=o("TFXLNetForMultipleChoice"),cCr=o(" (XLNet model)"),fCr=l(),F(ME.$$.fragment),Dje=l(),mc=a("h2"),EE=a("a"),zFe=a("span"),F(Z8.$$.fragment),mCr=l(),WFe=a("span"),gCr=o("TFAutoModelForNextSentencePrediction"),Gje=l(),nr=a("div"),F(e9.$$.fragment),hCr=l(),gc=a("p"),pCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qU=a("a"),uCr=o("from_pretrained()"),_Cr=o(" class method or the "),jU=a("a"),bCr=o("from_config()"),vCr=o(` class
method.`),FCr=l(),o9=a("p"),TCr=o("This class cannot be instantiated directly using "),QFe=a("code"),MCr=o("__init__()"),ECr=o(" (throws an error)."),CCr=l(),Bt=a("div"),F(r9.$$.fragment),wCr=l(),HFe=a("p"),ACr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yCr=l(),hc=a("p"),LCr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),xCr=o("not"),$Cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),kCr=o("from_pretrained()"),SCr=o(" to load the model weights."),RCr=l(),F(CE.$$.fragment),PCr=l(),Rr=a("div"),F(t9.$$.fragment),BCr=l(),JFe=a("p"),ICr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NCr=l(),ln=a("p"),qCr=o("The model class to instantiate is selected based on the "),YFe=a("code"),jCr=o("model_type"),DCr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),GCr=o("pretrained_model_name_or_path"),OCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),VCr=o("pretrained_model_name_or_path"),XCr=o(":"),zCr=l(),a9=a("ul"),wE=a("li"),eTe=a("strong"),WCr=o("bert"),QCr=o(" \u2014 "),GU=a("a"),HCr=o("TFBertForNextSentencePrediction"),UCr=o(" (BERT model)"),JCr=l(),AE=a("li"),oTe=a("strong"),YCr=o("mobilebert"),KCr=o(" \u2014 "),OU=a("a"),ZCr=o("TFMobileBertForNextSentencePrediction"),e5r=o(" (MobileBERT model)"),o5r=l(),F(yE.$$.fragment),Oje=l(),pc=a("h2"),LE=a("a"),rTe=a("span"),F(n9.$$.fragment),r5r=l(),tTe=a("span"),t5r=o("TFAutoModelForTableQuestionAnswering"),Vje=l(),sr=a("div"),F(s9.$$.fragment),a5r=l(),uc=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VU=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),XU=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),l9=a("p"),f5r=o("This class cannot be instantiated directly using "),aTe=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),It=a("div"),F(i9.$$.fragment),p5r=l(),nTe=a("p"),u5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_5r=l(),_c=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),F(xE.$$.fragment),C5r=l(),Pr=a("div"),F(d9.$$.fragment),w5r=l(),lTe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),y5r=l(),dn=a("p"),L5r=o("The model class to instantiate is selected based on the "),iTe=a("code"),x5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(":"),B5r=l(),fTe=a("ul"),$E=a("li"),mTe=a("strong"),I5r=o("tapas"),N5r=o(" \u2014 "),WU=a("a"),q5r=o("TFTapasForQuestionAnswering"),j5r=o(" (TAPAS model)"),D5r=l(),F(kE.$$.fragment),Xje=l(),bc=a("h2"),SE=a("a"),gTe=a("span"),F(c9.$$.fragment),G5r=l(),hTe=a("span"),O5r=o("TFAutoModelForTokenClassification"),zje=l(),lr=a("div"),F(f9.$$.fragment),V5r=l(),vc=a("p"),X5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QU=a("a"),z5r=o("from_pretrained()"),W5r=o(" class method or the "),HU=a("a"),Q5r=o("from_config()"),H5r=o(` class
method.`),U5r=l(),m9=a("p"),J5r=o("This class cannot be instantiated directly using "),pTe=a("code"),Y5r=o("__init__()"),K5r=o(" (throws an error)."),Z5r=l(),Nt=a("div"),F(g9.$$.fragment),ewr=l(),uTe=a("p"),owr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rwr=l(),Fc=a("p"),twr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),awr=o("not"),nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),swr=o("from_pretrained()"),lwr=o(" to load the model weights."),iwr=l(),F(RE.$$.fragment),dwr=l(),Br=a("div"),F(h9.$$.fragment),cwr=l(),bTe=a("p"),fwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mwr=l(),cn=a("p"),gwr=o("The model class to instantiate is selected based on the "),vTe=a("code"),hwr=o("model_type"),pwr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),uwr=o("pretrained_model_name_or_path"),_wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),bwr=o("pretrained_model_name_or_path"),vwr=o(":"),Fwr=l(),de=a("ul"),PE=a("li"),MTe=a("strong"),Twr=o("albert"),Mwr=o(" \u2014 "),JU=a("a"),Ewr=o("TFAlbertForTokenClassification"),Cwr=o(" (ALBERT model)"),wwr=l(),BE=a("li"),ETe=a("strong"),Awr=o("bert"),ywr=o(" \u2014 "),YU=a("a"),Lwr=o("TFBertForTokenClassification"),xwr=o(" (BERT model)"),$wr=l(),IE=a("li"),CTe=a("strong"),kwr=o("camembert"),Swr=o(" \u2014 "),KU=a("a"),Rwr=o("TFCamembertForTokenClassification"),Pwr=o(" (CamemBERT model)"),Bwr=l(),NE=a("li"),wTe=a("strong"),Iwr=o("convbert"),Nwr=o(" \u2014 "),ZU=a("a"),qwr=o("TFConvBertForTokenClassification"),jwr=o(" (ConvBERT model)"),Dwr=l(),qE=a("li"),ATe=a("strong"),Gwr=o("deberta"),Owr=o(" \u2014 "),eJ=a("a"),Vwr=o("TFDebertaForTokenClassification"),Xwr=o(" (DeBERTa model)"),zwr=l(),jE=a("li"),yTe=a("strong"),Wwr=o("deberta-v2"),Qwr=o(" \u2014 "),oJ=a("a"),Hwr=o("TFDebertaV2ForTokenClassification"),Uwr=o(" (DeBERTa-v2 model)"),Jwr=l(),DE=a("li"),LTe=a("strong"),Ywr=o("distilbert"),Kwr=o(" \u2014 "),rJ=a("a"),Zwr=o("TFDistilBertForTokenClassification"),e0r=o(" (DistilBERT model)"),o0r=l(),GE=a("li"),xTe=a("strong"),r0r=o("electra"),t0r=o(" \u2014 "),tJ=a("a"),a0r=o("TFElectraForTokenClassification"),n0r=o(" (ELECTRA model)"),s0r=l(),OE=a("li"),$Te=a("strong"),l0r=o("flaubert"),i0r=o(" \u2014 "),aJ=a("a"),d0r=o("TFFlaubertForTokenClassification"),c0r=o(" (FlauBERT model)"),f0r=l(),VE=a("li"),kTe=a("strong"),m0r=o("funnel"),g0r=o(" \u2014 "),nJ=a("a"),h0r=o("TFFunnelForTokenClassification"),p0r=o(" (Funnel Transformer model)"),u0r=l(),XE=a("li"),STe=a("strong"),_0r=o("layoutlm"),b0r=o(" \u2014 "),sJ=a("a"),v0r=o("TFLayoutLMForTokenClassification"),F0r=o(" (LayoutLM model)"),T0r=l(),zE=a("li"),RTe=a("strong"),M0r=o("longformer"),E0r=o(" \u2014 "),lJ=a("a"),C0r=o("TFLongformerForTokenClassification"),w0r=o(" (Longformer model)"),A0r=l(),WE=a("li"),PTe=a("strong"),y0r=o("mobilebert"),L0r=o(" \u2014 "),iJ=a("a"),x0r=o("TFMobileBertForTokenClassification"),$0r=o(" (MobileBERT model)"),k0r=l(),QE=a("li"),BTe=a("strong"),S0r=o("mpnet"),R0r=o(" \u2014 "),dJ=a("a"),P0r=o("TFMPNetForTokenClassification"),B0r=o(" (MPNet model)"),I0r=l(),HE=a("li"),ITe=a("strong"),N0r=o("rembert"),q0r=o(" \u2014 "),cJ=a("a"),j0r=o("TFRemBertForTokenClassification"),D0r=o(" (RemBERT model)"),G0r=l(),UE=a("li"),NTe=a("strong"),O0r=o("roberta"),V0r=o(" \u2014 "),fJ=a("a"),X0r=o("TFRobertaForTokenClassification"),z0r=o(" (RoBERTa model)"),W0r=l(),JE=a("li"),qTe=a("strong"),Q0r=o("roformer"),H0r=o(" \u2014 "),mJ=a("a"),U0r=o("TFRoFormerForTokenClassification"),J0r=o(" (RoFormer model)"),Y0r=l(),YE=a("li"),jTe=a("strong"),K0r=o("xlm"),Z0r=o(" \u2014 "),gJ=a("a"),e6r=o("TFXLMForTokenClassification"),o6r=o(" (XLM model)"),r6r=l(),KE=a("li"),DTe=a("strong"),t6r=o("xlm-roberta"),a6r=o(" \u2014 "),hJ=a("a"),n6r=o("TFXLMRobertaForTokenClassification"),s6r=o(" (XLM-RoBERTa model)"),l6r=l(),ZE=a("li"),GTe=a("strong"),i6r=o("xlnet"),d6r=o(" \u2014 "),pJ=a("a"),c6r=o("TFXLNetForTokenClassification"),f6r=o(" (XLNet model)"),m6r=l(),F(eC.$$.fragment),Wje=l(),Tc=a("h2"),oC=a("a"),OTe=a("span"),F(p9.$$.fragment),g6r=l(),VTe=a("span"),h6r=o("TFAutoModelForQuestionAnswering"),Qje=l(),ir=a("div"),F(u9.$$.fragment),p6r=l(),Mc=a("p"),u6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uJ=a("a"),_6r=o("from_pretrained()"),b6r=o(" class method or the "),_J=a("a"),v6r=o("from_config()"),F6r=o(` class
method.`),T6r=l(),_9=a("p"),M6r=o("This class cannot be instantiated directly using "),XTe=a("code"),E6r=o("__init__()"),C6r=o(" (throws an error)."),w6r=l(),qt=a("div"),F(b9.$$.fragment),A6r=l(),zTe=a("p"),y6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),L6r=l(),Ec=a("p"),x6r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),$6r=o("not"),k6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),S6r=o("from_pretrained()"),R6r=o(" to load the model weights."),P6r=l(),F(rC.$$.fragment),B6r=l(),Ir=a("div"),F(v9.$$.fragment),I6r=l(),QTe=a("p"),N6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q6r=l(),fn=a("p"),j6r=o("The model class to instantiate is selected based on the "),HTe=a("code"),D6r=o("model_type"),G6r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),O6r=o("pretrained_model_name_or_path"),V6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(":"),W6r=l(),ce=a("ul"),tC=a("li"),YTe=a("strong"),Q6r=o("albert"),H6r=o(" \u2014 "),vJ=a("a"),U6r=o("TFAlbertForQuestionAnswering"),J6r=o(" (ALBERT model)"),Y6r=l(),aC=a("li"),KTe=a("strong"),K6r=o("bert"),Z6r=o(" \u2014 "),FJ=a("a"),eAr=o("TFBertForQuestionAnswering"),oAr=o(" (BERT model)"),rAr=l(),nC=a("li"),ZTe=a("strong"),tAr=o("camembert"),aAr=o(" \u2014 "),TJ=a("a"),nAr=o("TFCamembertForQuestionAnswering"),sAr=o(" (CamemBERT model)"),lAr=l(),sC=a("li"),e7e=a("strong"),iAr=o("convbert"),dAr=o(" \u2014 "),MJ=a("a"),cAr=o("TFConvBertForQuestionAnswering"),fAr=o(" (ConvBERT model)"),mAr=l(),lC=a("li"),o7e=a("strong"),gAr=o("deberta"),hAr=o(" \u2014 "),EJ=a("a"),pAr=o("TFDebertaForQuestionAnswering"),uAr=o(" (DeBERTa model)"),_Ar=l(),iC=a("li"),r7e=a("strong"),bAr=o("deberta-v2"),vAr=o(" \u2014 "),CJ=a("a"),FAr=o("TFDebertaV2ForQuestionAnswering"),TAr=o(" (DeBERTa-v2 model)"),MAr=l(),dC=a("li"),t7e=a("strong"),EAr=o("distilbert"),CAr=o(" \u2014 "),wJ=a("a"),wAr=o("TFDistilBertForQuestionAnswering"),AAr=o(" (DistilBERT model)"),yAr=l(),cC=a("li"),a7e=a("strong"),LAr=o("electra"),xAr=o(" \u2014 "),AJ=a("a"),$Ar=o("TFElectraForQuestionAnswering"),kAr=o(" (ELECTRA model)"),SAr=l(),fC=a("li"),n7e=a("strong"),RAr=o("flaubert"),PAr=o(" \u2014 "),yJ=a("a"),BAr=o("TFFlaubertForQuestionAnsweringSimple"),IAr=o(" (FlauBERT model)"),NAr=l(),mC=a("li"),s7e=a("strong"),qAr=o("funnel"),jAr=o(" \u2014 "),LJ=a("a"),DAr=o("TFFunnelForQuestionAnswering"),GAr=o(" (Funnel Transformer model)"),OAr=l(),gC=a("li"),l7e=a("strong"),VAr=o("gptj"),XAr=o(" \u2014 "),xJ=a("a"),zAr=o("TFGPTJForQuestionAnswering"),WAr=o(" (GPT-J model)"),QAr=l(),hC=a("li"),i7e=a("strong"),HAr=o("longformer"),UAr=o(" \u2014 "),$J=a("a"),JAr=o("TFLongformerForQuestionAnswering"),YAr=o(" (Longformer model)"),KAr=l(),pC=a("li"),d7e=a("strong"),ZAr=o("mobilebert"),eyr=o(" \u2014 "),kJ=a("a"),oyr=o("TFMobileBertForQuestionAnswering"),ryr=o(" (MobileBERT model)"),tyr=l(),uC=a("li"),c7e=a("strong"),ayr=o("mpnet"),nyr=o(" \u2014 "),SJ=a("a"),syr=o("TFMPNetForQuestionAnswering"),lyr=o(" (MPNet model)"),iyr=l(),_C=a("li"),f7e=a("strong"),dyr=o("rembert"),cyr=o(" \u2014 "),RJ=a("a"),fyr=o("TFRemBertForQuestionAnswering"),myr=o(" (RemBERT model)"),gyr=l(),bC=a("li"),m7e=a("strong"),hyr=o("roberta"),pyr=o(" \u2014 "),PJ=a("a"),uyr=o("TFRobertaForQuestionAnswering"),_yr=o(" (RoBERTa model)"),byr=l(),vC=a("li"),g7e=a("strong"),vyr=o("roformer"),Fyr=o(" \u2014 "),BJ=a("a"),Tyr=o("TFRoFormerForQuestionAnswering"),Myr=o(" (RoFormer model)"),Eyr=l(),FC=a("li"),h7e=a("strong"),Cyr=o("xlm"),wyr=o(" \u2014 "),IJ=a("a"),Ayr=o("TFXLMForQuestionAnsweringSimple"),yyr=o(" (XLM model)"),Lyr=l(),TC=a("li"),p7e=a("strong"),xyr=o("xlm-roberta"),$yr=o(" \u2014 "),NJ=a("a"),kyr=o("TFXLMRobertaForQuestionAnswering"),Syr=o(" (XLM-RoBERTa model)"),Ryr=l(),MC=a("li"),u7e=a("strong"),Pyr=o("xlnet"),Byr=o(" \u2014 "),qJ=a("a"),Iyr=o("TFXLNetForQuestionAnsweringSimple"),Nyr=o(" (XLNet model)"),qyr=l(),F(EC.$$.fragment),Hje=l(),Cc=a("h2"),CC=a("a"),_7e=a("span"),F(F9.$$.fragment),jyr=l(),b7e=a("span"),Dyr=o("TFAutoModelForVision2Seq"),Uje=l(),dr=a("div"),F(T9.$$.fragment),Gyr=l(),wc=a("p"),Oyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jJ=a("a"),Vyr=o("from_pretrained()"),Xyr=o(" class method or the "),DJ=a("a"),zyr=o("from_config()"),Wyr=o(` class
method.`),Qyr=l(),M9=a("p"),Hyr=o("This class cannot be instantiated directly using "),v7e=a("code"),Uyr=o("__init__()"),Jyr=o(" (throws an error)."),Yyr=l(),jt=a("div"),F(E9.$$.fragment),Kyr=l(),F7e=a("p"),Zyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eLr=l(),Ac=a("p"),oLr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),rLr=o("not"),tLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),aLr=o("from_pretrained()"),nLr=o(" to load the model weights."),sLr=l(),F(wC.$$.fragment),lLr=l(),Nr=a("div"),F(C9.$$.fragment),iLr=l(),M7e=a("p"),dLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cLr=l(),mn=a("p"),fLr=o("The model class to instantiate is selected based on the "),E7e=a("code"),mLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),hLr=o("pretrained_model_name_or_path"),pLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),uLr=o("pretrained_model_name_or_path"),_Lr=o(":"),bLr=l(),A7e=a("ul"),AC=a("li"),y7e=a("strong"),vLr=o("vision-encoder-decoder"),FLr=o(" \u2014 "),OJ=a("a"),TLr=o("TFVisionEncoderDecoderModel"),MLr=o(" (Vision Encoder decoder model)"),ELr=l(),F(yC.$$.fragment),Jje=l(),yc=a("h2"),LC=a("a"),L7e=a("span"),F(w9.$$.fragment),CLr=l(),x7e=a("span"),wLr=o("TFAutoModelForSpeechSeq2Seq"),Yje=l(),cr=a("div"),F(A9.$$.fragment),ALr=l(),Lc=a("p"),yLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VJ=a("a"),LLr=o("from_pretrained()"),xLr=o(" class method or the "),XJ=a("a"),$Lr=o("from_config()"),kLr=o(` class
method.`),SLr=l(),y9=a("p"),RLr=o("This class cannot be instantiated directly using "),$7e=a("code"),PLr=o("__init__()"),BLr=o(" (throws an error)."),ILr=l(),Dt=a("div"),F(L9.$$.fragment),NLr=l(),k7e=a("p"),qLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jLr=l(),xc=a("p"),DLr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),GLr=o("not"),OLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),VLr=o("from_pretrained()"),XLr=o(" to load the model weights."),zLr=l(),F(xC.$$.fragment),WLr=l(),qr=a("div"),F(x9.$$.fragment),QLr=l(),R7e=a("p"),HLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ULr=l(),gn=a("p"),JLr=o("The model class to instantiate is selected based on the "),P7e=a("code"),YLr=o("model_type"),KLr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),ZLr=o("pretrained_model_name_or_path"),e8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(":"),t8r=l(),N7e=a("ul"),$C=a("li"),q7e=a("strong"),a8r=o("speech_to_text"),n8r=o(" \u2014 "),WJ=a("a"),s8r=o("TFSpeech2TextForConditionalGeneration"),l8r=o(" (Speech2Text model)"),i8r=l(),F(kC.$$.fragment),Kje=l(),$c=a("h2"),SC=a("a"),j7e=a("span"),F($9.$$.fragment),d8r=l(),D7e=a("span"),c8r=o("FlaxAutoModel"),Zje=l(),fr=a("div"),F(k9.$$.fragment),f8r=l(),kc=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QJ=a("a"),g8r=o("from_pretrained()"),h8r=o(" class method or the "),HJ=a("a"),p8r=o("from_config()"),u8r=o(` class
method.`),_8r=l(),S9=a("p"),b8r=o("This class cannot be instantiated directly using "),G7e=a("code"),v8r=o("__init__()"),F8r=o(" (throws an error)."),T8r=l(),Gt=a("div"),F(R9.$$.fragment),M8r=l(),O7e=a("p"),E8r=o("Instantiates one of the base model classes of the library from a configuration."),C8r=l(),Sc=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),A8r=o("not"),y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),L8r=o("from_pretrained()"),x8r=o(" to load the model weights."),$8r=l(),F(RC.$$.fragment),k8r=l(),jr=a("div"),F(P9.$$.fragment),S8r=l(),X7e=a("p"),R8r=o("Instantiate one of the base model classes of the library from a pretrained model."),P8r=l(),hn=a("p"),B8r=o("The model class to instantiate is selected based on the "),z7e=a("code"),I8r=o("model_type"),N8r=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),q8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),te=a("ul"),PC=a("li"),H7e=a("strong"),V8r=o("albert"),X8r=o(" \u2014 "),JJ=a("a"),z8r=o("FlaxAlbertModel"),W8r=o(" (ALBERT model)"),Q8r=l(),BC=a("li"),U7e=a("strong"),H8r=o("bart"),U8r=o(" \u2014 "),YJ=a("a"),J8r=o("FlaxBartModel"),Y8r=o(" (BART model)"),K8r=l(),IC=a("li"),J7e=a("strong"),Z8r=o("beit"),e9r=o(" \u2014 "),KJ=a("a"),o9r=o("FlaxBeitModel"),r9r=o(" (BEiT model)"),t9r=l(),NC=a("li"),Y7e=a("strong"),a9r=o("bert"),n9r=o(" \u2014 "),ZJ=a("a"),s9r=o("FlaxBertModel"),l9r=o(" (BERT model)"),i9r=l(),qC=a("li"),K7e=a("strong"),d9r=o("big_bird"),c9r=o(" \u2014 "),eY=a("a"),f9r=o("FlaxBigBirdModel"),m9r=o(" (BigBird model)"),g9r=l(),jC=a("li"),Z7e=a("strong"),h9r=o("blenderbot"),p9r=o(" \u2014 "),oY=a("a"),u9r=o("FlaxBlenderbotModel"),_9r=o(" (Blenderbot model)"),b9r=l(),DC=a("li"),eMe=a("strong"),v9r=o("blenderbot-small"),F9r=o(" \u2014 "),rY=a("a"),T9r=o("FlaxBlenderbotSmallModel"),M9r=o(" (BlenderbotSmall model)"),E9r=l(),GC=a("li"),oMe=a("strong"),C9r=o("clip"),w9r=o(" \u2014 "),tY=a("a"),A9r=o("FlaxCLIPModel"),y9r=o(" (CLIP model)"),L9r=l(),OC=a("li"),rMe=a("strong"),x9r=o("distilbert"),$9r=o(" \u2014 "),aY=a("a"),k9r=o("FlaxDistilBertModel"),S9r=o(" (DistilBERT model)"),R9r=l(),VC=a("li"),tMe=a("strong"),P9r=o("electra"),B9r=o(" \u2014 "),nY=a("a"),I9r=o("FlaxElectraModel"),N9r=o(" (ELECTRA model)"),q9r=l(),XC=a("li"),aMe=a("strong"),j9r=o("gpt2"),D9r=o(" \u2014 "),sY=a("a"),G9r=o("FlaxGPT2Model"),O9r=o(" (OpenAI GPT-2 model)"),V9r=l(),zC=a("li"),nMe=a("strong"),X9r=o("gpt_neo"),z9r=o(" \u2014 "),lY=a("a"),W9r=o("FlaxGPTNeoModel"),Q9r=o(" (GPT Neo model)"),H9r=l(),WC=a("li"),sMe=a("strong"),U9r=o("gptj"),J9r=o(" \u2014 "),iY=a("a"),Y9r=o("FlaxGPTJModel"),K9r=o(" (GPT-J model)"),Z9r=l(),QC=a("li"),lMe=a("strong"),exr=o("marian"),oxr=o(" \u2014 "),dY=a("a"),rxr=o("FlaxMarianModel"),txr=o(" (Marian model)"),axr=l(),HC=a("li"),iMe=a("strong"),nxr=o("mbart"),sxr=o(" \u2014 "),cY=a("a"),lxr=o("FlaxMBartModel"),ixr=o(" (mBART model)"),dxr=l(),UC=a("li"),dMe=a("strong"),cxr=o("mt5"),fxr=o(" \u2014 "),fY=a("a"),mxr=o("FlaxMT5Model"),gxr=o(" (mT5 model)"),hxr=l(),JC=a("li"),cMe=a("strong"),pxr=o("pegasus"),uxr=o(" \u2014 "),mY=a("a"),_xr=o("FlaxPegasusModel"),bxr=o(" (Pegasus model)"),vxr=l(),YC=a("li"),fMe=a("strong"),Fxr=o("roberta"),Txr=o(" \u2014 "),gY=a("a"),Mxr=o("FlaxRobertaModel"),Exr=o(" (RoBERTa model)"),Cxr=l(),KC=a("li"),mMe=a("strong"),wxr=o("roformer"),Axr=o(" \u2014 "),hY=a("a"),yxr=o("FlaxRoFormerModel"),Lxr=o(" (RoFormer model)"),xxr=l(),ZC=a("li"),gMe=a("strong"),$xr=o("t5"),kxr=o(" \u2014 "),pY=a("a"),Sxr=o("FlaxT5Model"),Rxr=o(" (T5 model)"),Pxr=l(),e5=a("li"),hMe=a("strong"),Bxr=o("vision-text-dual-encoder"),Ixr=o(" \u2014 "),uY=a("a"),Nxr=o("FlaxVisionTextDualEncoderModel"),qxr=o(" (VisionTextDualEncoder model)"),jxr=l(),o5=a("li"),pMe=a("strong"),Dxr=o("vit"),Gxr=o(" \u2014 "),_Y=a("a"),Oxr=o("FlaxViTModel"),Vxr=o(" (ViT model)"),Xxr=l(),r5=a("li"),uMe=a("strong"),zxr=o("wav2vec2"),Wxr=o(" \u2014 "),bY=a("a"),Qxr=o("FlaxWav2Vec2Model"),Hxr=o(" (Wav2Vec2 model)"),Uxr=l(),t5=a("li"),_Me=a("strong"),Jxr=o("xglm"),Yxr=o(" \u2014 "),vY=a("a"),Kxr=o("FlaxXGLMModel"),Zxr=o(" (XGLM model)"),e$r=l(),a5=a("li"),bMe=a("strong"),o$r=o("xlm-roberta"),r$r=o(" \u2014 "),FY=a("a"),t$r=o("FlaxXLMRobertaModel"),a$r=o(" (XLM-RoBERTa model)"),n$r=l(),F(n5.$$.fragment),eDe=l(),Rc=a("h2"),s5=a("a"),vMe=a("span"),F(B9.$$.fragment),s$r=l(),FMe=a("span"),l$r=o("FlaxAutoModelForCausalLM"),oDe=l(),mr=a("div"),F(I9.$$.fragment),i$r=l(),Pc=a("p"),d$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TY=a("a"),c$r=o("from_pretrained()"),f$r=o(" class method or the "),MY=a("a"),m$r=o("from_config()"),g$r=o(` class
method.`),h$r=l(),N9=a("p"),p$r=o("This class cannot be instantiated directly using "),TMe=a("code"),u$r=o("__init__()"),_$r=o(" (throws an error)."),b$r=l(),Ot=a("div"),F(q9.$$.fragment),v$r=l(),MMe=a("p"),F$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),T$r=l(),Bc=a("p"),M$r=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),E$r=o("not"),C$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),w$r=o("from_pretrained()"),A$r=o(" to load the model weights."),y$r=l(),F(l5.$$.fragment),L$r=l(),Dr=a("div"),F(j9.$$.fragment),x$r=l(),CMe=a("p"),$$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k$r=l(),pn=a("p"),S$r=o("The model class to instantiate is selected based on the "),wMe=a("code"),R$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),B$r=o("pretrained_model_name_or_path"),I$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),N$r=o("pretrained_model_name_or_path"),q$r=o(":"),j$r=l(),Re=a("ul"),i5=a("li"),LMe=a("strong"),D$r=o("bart"),G$r=o(" \u2014 "),CY=a("a"),O$r=o("FlaxBartForCausalLM"),V$r=o(" (BART model)"),X$r=l(),d5=a("li"),xMe=a("strong"),z$r=o("bert"),W$r=o(" \u2014 "),wY=a("a"),Q$r=o("FlaxBertForCausalLM"),H$r=o(" (BERT model)"),U$r=l(),c5=a("li"),$Me=a("strong"),J$r=o("big_bird"),Y$r=o(" \u2014 "),AY=a("a"),K$r=o("FlaxBigBirdForCausalLM"),Z$r=o(" (BigBird model)"),ekr=l(),f5=a("li"),kMe=a("strong"),okr=o("electra"),rkr=o(" \u2014 "),yY=a("a"),tkr=o("FlaxElectraForCausalLM"),akr=o(" (ELECTRA model)"),nkr=l(),m5=a("li"),SMe=a("strong"),skr=o("gpt2"),lkr=o(" \u2014 "),LY=a("a"),ikr=o("FlaxGPT2LMHeadModel"),dkr=o(" (OpenAI GPT-2 model)"),ckr=l(),g5=a("li"),RMe=a("strong"),fkr=o("gpt_neo"),mkr=o(" \u2014 "),xY=a("a"),gkr=o("FlaxGPTNeoForCausalLM"),hkr=o(" (GPT Neo model)"),pkr=l(),h5=a("li"),PMe=a("strong"),ukr=o("gptj"),_kr=o(" \u2014 "),$Y=a("a"),bkr=o("FlaxGPTJForCausalLM"),vkr=o(" (GPT-J model)"),Fkr=l(),p5=a("li"),BMe=a("strong"),Tkr=o("roberta"),Mkr=o(" \u2014 "),kY=a("a"),Ekr=o("FlaxRobertaForCausalLM"),Ckr=o(" (RoBERTa model)"),wkr=l(),u5=a("li"),IMe=a("strong"),Akr=o("xglm"),ykr=o(" \u2014 "),SY=a("a"),Lkr=o("FlaxXGLMForCausalLM"),xkr=o(" (XGLM model)"),$kr=l(),F(_5.$$.fragment),rDe=l(),Ic=a("h2"),b5=a("a"),NMe=a("span"),F(D9.$$.fragment),kkr=l(),qMe=a("span"),Skr=o("FlaxAutoModelForPreTraining"),tDe=l(),gr=a("div"),F(G9.$$.fragment),Rkr=l(),Nc=a("p"),Pkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RY=a("a"),Bkr=o("from_pretrained()"),Ikr=o(" class method or the "),PY=a("a"),Nkr=o("from_config()"),qkr=o(` class
method.`),jkr=l(),O9=a("p"),Dkr=o("This class cannot be instantiated directly using "),jMe=a("code"),Gkr=o("__init__()"),Okr=o(" (throws an error)."),Vkr=l(),Vt=a("div"),F(V9.$$.fragment),Xkr=l(),DMe=a("p"),zkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wkr=l(),qc=a("p"),Qkr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),Hkr=o("not"),Ukr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),Jkr=o("from_pretrained()"),Ykr=o(" to load the model weights."),Kkr=l(),F(v5.$$.fragment),Zkr=l(),Gr=a("div"),F(X9.$$.fragment),eSr=l(),OMe=a("p"),oSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rSr=l(),un=a("p"),tSr=o("The model class to instantiate is selected based on the "),VMe=a("code"),aSr=o("model_type"),nSr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),sSr=o("pretrained_model_name_or_path"),lSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(":"),cSr=l(),Ee=a("ul"),F5=a("li"),WMe=a("strong"),fSr=o("albert"),mSr=o(" \u2014 "),IY=a("a"),gSr=o("FlaxAlbertForPreTraining"),hSr=o(" (ALBERT model)"),pSr=l(),T5=a("li"),QMe=a("strong"),uSr=o("bart"),_Sr=o(" \u2014 "),NY=a("a"),bSr=o("FlaxBartForConditionalGeneration"),vSr=o(" (BART model)"),FSr=l(),M5=a("li"),HMe=a("strong"),TSr=o("bert"),MSr=o(" \u2014 "),qY=a("a"),ESr=o("FlaxBertForPreTraining"),CSr=o(" (BERT model)"),wSr=l(),E5=a("li"),UMe=a("strong"),ASr=o("big_bird"),ySr=o(" \u2014 "),jY=a("a"),LSr=o("FlaxBigBirdForPreTraining"),xSr=o(" (BigBird model)"),$Sr=l(),C5=a("li"),JMe=a("strong"),kSr=o("electra"),SSr=o(" \u2014 "),DY=a("a"),RSr=o("FlaxElectraForPreTraining"),PSr=o(" (ELECTRA model)"),BSr=l(),w5=a("li"),YMe=a("strong"),ISr=o("mbart"),NSr=o(" \u2014 "),GY=a("a"),qSr=o("FlaxMBartForConditionalGeneration"),jSr=o(" (mBART model)"),DSr=l(),A5=a("li"),KMe=a("strong"),GSr=o("mt5"),OSr=o(" \u2014 "),OY=a("a"),VSr=o("FlaxMT5ForConditionalGeneration"),XSr=o(" (mT5 model)"),zSr=l(),y5=a("li"),ZMe=a("strong"),WSr=o("roberta"),QSr=o(" \u2014 "),VY=a("a"),HSr=o("FlaxRobertaForMaskedLM"),USr=o(" (RoBERTa model)"),JSr=l(),L5=a("li"),e4e=a("strong"),YSr=o("roformer"),KSr=o(" \u2014 "),XY=a("a"),ZSr=o("FlaxRoFormerForMaskedLM"),eRr=o(" (RoFormer model)"),oRr=l(),x5=a("li"),o4e=a("strong"),rRr=o("t5"),tRr=o(" \u2014 "),zY=a("a"),aRr=o("FlaxT5ForConditionalGeneration"),nRr=o(" (T5 model)"),sRr=l(),$5=a("li"),r4e=a("strong"),lRr=o("wav2vec2"),iRr=o(" \u2014 "),WY=a("a"),dRr=o("FlaxWav2Vec2ForPreTraining"),cRr=o(" (Wav2Vec2 model)"),fRr=l(),k5=a("li"),t4e=a("strong"),mRr=o("xlm-roberta"),gRr=o(" \u2014 "),QY=a("a"),hRr=o("FlaxXLMRobertaForMaskedLM"),pRr=o(" (XLM-RoBERTa model)"),uRr=l(),F(S5.$$.fragment),aDe=l(),jc=a("h2"),R5=a("a"),a4e=a("span"),F(z9.$$.fragment),_Rr=l(),n4e=a("span"),bRr=o("FlaxAutoModelForMaskedLM"),nDe=l(),hr=a("div"),F(W9.$$.fragment),vRr=l(),Dc=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HY=a("a"),TRr=o("from_pretrained()"),MRr=o(" class method or the "),UY=a("a"),ERr=o("from_config()"),CRr=o(` class
method.`),wRr=l(),Q9=a("p"),ARr=o("This class cannot be instantiated directly using "),s4e=a("code"),yRr=o("__init__()"),LRr=o(" (throws an error)."),xRr=l(),Xt=a("div"),F(H9.$$.fragment),$Rr=l(),l4e=a("p"),kRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SRr=l(),Gc=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),PRr=o("not"),BRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),IRr=o("from_pretrained()"),NRr=o(" to load the model weights."),qRr=l(),F(P5.$$.fragment),jRr=l(),Or=a("div"),F(U9.$$.fragment),DRr=l(),d4e=a("p"),GRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ORr=l(),_n=a("p"),VRr=o("The model class to instantiate is selected based on the "),c4e=a("code"),XRr=o("model_type"),zRr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),HRr=o("pretrained_model_name_or_path"),URr=o(":"),JRr=l(),Le=a("ul"),B5=a("li"),g4e=a("strong"),YRr=o("albert"),KRr=o(" \u2014 "),YY=a("a"),ZRr=o("FlaxAlbertForMaskedLM"),ePr=o(" (ALBERT model)"),oPr=l(),I5=a("li"),h4e=a("strong"),rPr=o("bart"),tPr=o(" \u2014 "),KY=a("a"),aPr=o("FlaxBartForConditionalGeneration"),nPr=o(" (BART model)"),sPr=l(),N5=a("li"),p4e=a("strong"),lPr=o("bert"),iPr=o(" \u2014 "),ZY=a("a"),dPr=o("FlaxBertForMaskedLM"),cPr=o(" (BERT model)"),fPr=l(),q5=a("li"),u4e=a("strong"),mPr=o("big_bird"),gPr=o(" \u2014 "),eK=a("a"),hPr=o("FlaxBigBirdForMaskedLM"),pPr=o(" (BigBird model)"),uPr=l(),j5=a("li"),_4e=a("strong"),_Pr=o("distilbert"),bPr=o(" \u2014 "),oK=a("a"),vPr=o("FlaxDistilBertForMaskedLM"),FPr=o(" (DistilBERT model)"),TPr=l(),D5=a("li"),b4e=a("strong"),MPr=o("electra"),EPr=o(" \u2014 "),rK=a("a"),CPr=o("FlaxElectraForMaskedLM"),wPr=o(" (ELECTRA model)"),APr=l(),G5=a("li"),v4e=a("strong"),yPr=o("mbart"),LPr=o(" \u2014 "),tK=a("a"),xPr=o("FlaxMBartForConditionalGeneration"),$Pr=o(" (mBART model)"),kPr=l(),O5=a("li"),F4e=a("strong"),SPr=o("roberta"),RPr=o(" \u2014 "),aK=a("a"),PPr=o("FlaxRobertaForMaskedLM"),BPr=o(" (RoBERTa model)"),IPr=l(),V5=a("li"),T4e=a("strong"),NPr=o("roformer"),qPr=o(" \u2014 "),nK=a("a"),jPr=o("FlaxRoFormerForMaskedLM"),DPr=o(" (RoFormer model)"),GPr=l(),X5=a("li"),M4e=a("strong"),OPr=o("xlm-roberta"),VPr=o(" \u2014 "),sK=a("a"),XPr=o("FlaxXLMRobertaForMaskedLM"),zPr=o(" (XLM-RoBERTa model)"),WPr=l(),F(z5.$$.fragment),sDe=l(),Oc=a("h2"),W5=a("a"),E4e=a("span"),F(J9.$$.fragment),QPr=l(),C4e=a("span"),HPr=o("FlaxAutoModelForSeq2SeqLM"),lDe=l(),pr=a("div"),F(Y9.$$.fragment),UPr=l(),Vc=a("p"),JPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lK=a("a"),YPr=o("from_pretrained()"),KPr=o(" class method or the "),iK=a("a"),ZPr=o("from_config()"),eBr=o(` class
method.`),oBr=l(),K9=a("p"),rBr=o("This class cannot be instantiated directly using "),w4e=a("code"),tBr=o("__init__()"),aBr=o(" (throws an error)."),nBr=l(),zt=a("div"),F(Z9.$$.fragment),sBr=l(),A4e=a("p"),lBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iBr=l(),Xc=a("p"),dBr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),cBr=o("not"),fBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),mBr=o("from_pretrained()"),gBr=o(" to load the model weights."),hBr=l(),F(Q5.$$.fragment),pBr=l(),Vr=a("div"),F(ex.$$.fragment),uBr=l(),L4e=a("p"),_Br=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bBr=l(),bn=a("p"),vBr=o("The model class to instantiate is selected based on the "),x4e=a("code"),FBr=o("model_type"),TBr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),CBr=o("pretrained_model_name_or_path"),wBr=o(":"),ABr=l(),Pe=a("ul"),H5=a("li"),S4e=a("strong"),yBr=o("bart"),LBr=o(" \u2014 "),cK=a("a"),xBr=o("FlaxBartForConditionalGeneration"),$Br=o(" (BART model)"),kBr=l(),U5=a("li"),R4e=a("strong"),SBr=o("blenderbot"),RBr=o(" \u2014 "),fK=a("a"),PBr=o("FlaxBlenderbotForConditionalGeneration"),BBr=o(" (Blenderbot model)"),IBr=l(),J5=a("li"),P4e=a("strong"),NBr=o("blenderbot-small"),qBr=o(" \u2014 "),mK=a("a"),jBr=o("FlaxBlenderbotSmallForConditionalGeneration"),DBr=o(" (BlenderbotSmall model)"),GBr=l(),Y5=a("li"),B4e=a("strong"),OBr=o("encoder-decoder"),VBr=o(" \u2014 "),gK=a("a"),XBr=o("FlaxEncoderDecoderModel"),zBr=o(" (Encoder decoder model)"),WBr=l(),K5=a("li"),I4e=a("strong"),QBr=o("marian"),HBr=o(" \u2014 "),hK=a("a"),UBr=o("FlaxMarianMTModel"),JBr=o(" (Marian model)"),YBr=l(),Z5=a("li"),N4e=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),pK=a("a"),eIr=o("FlaxMBartForConditionalGeneration"),oIr=o(" (mBART model)"),rIr=l(),ew=a("li"),q4e=a("strong"),tIr=o("mt5"),aIr=o(" \u2014 "),uK=a("a"),nIr=o("FlaxMT5ForConditionalGeneration"),sIr=o(" (mT5 model)"),lIr=l(),ow=a("li"),j4e=a("strong"),iIr=o("pegasus"),dIr=o(" \u2014 "),_K=a("a"),cIr=o("FlaxPegasusForConditionalGeneration"),fIr=o(" (Pegasus model)"),mIr=l(),rw=a("li"),D4e=a("strong"),gIr=o("t5"),hIr=o(" \u2014 "),bK=a("a"),pIr=o("FlaxT5ForConditionalGeneration"),uIr=o(" (T5 model)"),_Ir=l(),F(tw.$$.fragment),iDe=l(),zc=a("h2"),aw=a("a"),G4e=a("span"),F(ox.$$.fragment),bIr=l(),O4e=a("span"),vIr=o("FlaxAutoModelForSequenceClassification"),dDe=l(),ur=a("div"),F(rx.$$.fragment),FIr=l(),Wc=a("p"),TIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vK=a("a"),MIr=o("from_pretrained()"),EIr=o(" class method or the "),FK=a("a"),CIr=o("from_config()"),wIr=o(` class
method.`),AIr=l(),tx=a("p"),yIr=o("This class cannot be instantiated directly using "),V4e=a("code"),LIr=o("__init__()"),xIr=o(" (throws an error)."),$Ir=l(),Wt=a("div"),F(ax.$$.fragment),kIr=l(),X4e=a("p"),SIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),RIr=l(),Qc=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),BIr=o("not"),IIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),NIr=o("from_pretrained()"),qIr=o(" to load the model weights."),jIr=l(),F(nw.$$.fragment),DIr=l(),Xr=a("div"),F(nx.$$.fragment),GIr=l(),W4e=a("p"),OIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VIr=l(),vn=a("p"),XIr=o("The model class to instantiate is selected based on the "),Q4e=a("code"),zIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(":"),YIr=l(),xe=a("ul"),sw=a("li"),J4e=a("strong"),KIr=o("albert"),ZIr=o(" \u2014 "),MK=a("a"),eNr=o("FlaxAlbertForSequenceClassification"),oNr=o(" (ALBERT model)"),rNr=l(),lw=a("li"),Y4e=a("strong"),tNr=o("bart"),aNr=o(" \u2014 "),EK=a("a"),nNr=o("FlaxBartForSequenceClassification"),sNr=o(" (BART model)"),lNr=l(),iw=a("li"),K4e=a("strong"),iNr=o("bert"),dNr=o(" \u2014 "),CK=a("a"),cNr=o("FlaxBertForSequenceClassification"),fNr=o(" (BERT model)"),mNr=l(),dw=a("li"),Z4e=a("strong"),gNr=o("big_bird"),hNr=o(" \u2014 "),wK=a("a"),pNr=o("FlaxBigBirdForSequenceClassification"),uNr=o(" (BigBird model)"),_Nr=l(),cw=a("li"),eEe=a("strong"),bNr=o("distilbert"),vNr=o(" \u2014 "),AK=a("a"),FNr=o("FlaxDistilBertForSequenceClassification"),TNr=o(" (DistilBERT model)"),MNr=l(),fw=a("li"),oEe=a("strong"),ENr=o("electra"),CNr=o(" \u2014 "),yK=a("a"),wNr=o("FlaxElectraForSequenceClassification"),ANr=o(" (ELECTRA model)"),yNr=l(),mw=a("li"),rEe=a("strong"),LNr=o("mbart"),xNr=o(" \u2014 "),LK=a("a"),$Nr=o("FlaxMBartForSequenceClassification"),kNr=o(" (mBART model)"),SNr=l(),gw=a("li"),tEe=a("strong"),RNr=o("roberta"),PNr=o(" \u2014 "),xK=a("a"),BNr=o("FlaxRobertaForSequenceClassification"),INr=o(" (RoBERTa model)"),NNr=l(),hw=a("li"),aEe=a("strong"),qNr=o("roformer"),jNr=o(" \u2014 "),$K=a("a"),DNr=o("FlaxRoFormerForSequenceClassification"),GNr=o(" (RoFormer model)"),ONr=l(),pw=a("li"),nEe=a("strong"),VNr=o("xlm-roberta"),XNr=o(" \u2014 "),kK=a("a"),zNr=o("FlaxXLMRobertaForSequenceClassification"),WNr=o(" (XLM-RoBERTa model)"),QNr=l(),F(uw.$$.fragment),cDe=l(),Hc=a("h2"),_w=a("a"),sEe=a("span"),F(sx.$$.fragment),HNr=l(),lEe=a("span"),UNr=o("FlaxAutoModelForQuestionAnswering"),fDe=l(),_r=a("div"),F(lx.$$.fragment),JNr=l(),Uc=a("p"),YNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SK=a("a"),KNr=o("from_pretrained()"),ZNr=o(" class method or the "),RK=a("a"),eqr=o("from_config()"),oqr=o(` class
method.`),rqr=l(),ix=a("p"),tqr=o("This class cannot be instantiated directly using "),iEe=a("code"),aqr=o("__init__()"),nqr=o(" (throws an error)."),sqr=l(),Qt=a("div"),F(dx.$$.fragment),lqr=l(),dEe=a("p"),iqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dqr=l(),Jc=a("p"),cqr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),fqr=o("not"),mqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),gqr=o("from_pretrained()"),hqr=o(" to load the model weights."),pqr=l(),F(bw.$$.fragment),uqr=l(),zr=a("div"),F(cx.$$.fragment),_qr=l(),fEe=a("p"),bqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vqr=l(),Fn=a("p"),Fqr=o("The model class to instantiate is selected based on the "),mEe=a("code"),Tqr=o("model_type"),Mqr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),Eqr=o("pretrained_model_name_or_path"),Cqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),wqr=o("pretrained_model_name_or_path"),Aqr=o(":"),yqr=l(),$e=a("ul"),vw=a("li"),pEe=a("strong"),Lqr=o("albert"),xqr=o(" \u2014 "),BK=a("a"),$qr=o("FlaxAlbertForQuestionAnswering"),kqr=o(" (ALBERT model)"),Sqr=l(),Fw=a("li"),uEe=a("strong"),Rqr=o("bart"),Pqr=o(" \u2014 "),IK=a("a"),Bqr=o("FlaxBartForQuestionAnswering"),Iqr=o(" (BART model)"),Nqr=l(),Tw=a("li"),_Ee=a("strong"),qqr=o("bert"),jqr=o(" \u2014 "),NK=a("a"),Dqr=o("FlaxBertForQuestionAnswering"),Gqr=o(" (BERT model)"),Oqr=l(),Mw=a("li"),bEe=a("strong"),Vqr=o("big_bird"),Xqr=o(" \u2014 "),qK=a("a"),zqr=o("FlaxBigBirdForQuestionAnswering"),Wqr=o(" (BigBird model)"),Qqr=l(),Ew=a("li"),vEe=a("strong"),Hqr=o("distilbert"),Uqr=o(" \u2014 "),jK=a("a"),Jqr=o("FlaxDistilBertForQuestionAnswering"),Yqr=o(" (DistilBERT model)"),Kqr=l(),Cw=a("li"),FEe=a("strong"),Zqr=o("electra"),ejr=o(" \u2014 "),DK=a("a"),ojr=o("FlaxElectraForQuestionAnswering"),rjr=o(" (ELECTRA model)"),tjr=l(),ww=a("li"),TEe=a("strong"),ajr=o("mbart"),njr=o(" \u2014 "),GK=a("a"),sjr=o("FlaxMBartForQuestionAnswering"),ljr=o(" (mBART model)"),ijr=l(),Aw=a("li"),MEe=a("strong"),djr=o("roberta"),cjr=o(" \u2014 "),OK=a("a"),fjr=o("FlaxRobertaForQuestionAnswering"),mjr=o(" (RoBERTa model)"),gjr=l(),yw=a("li"),EEe=a("strong"),hjr=o("roformer"),pjr=o(" \u2014 "),VK=a("a"),ujr=o("FlaxRoFormerForQuestionAnswering"),_jr=o(" (RoFormer model)"),bjr=l(),Lw=a("li"),CEe=a("strong"),vjr=o("xlm-roberta"),Fjr=o(" \u2014 "),XK=a("a"),Tjr=o("FlaxXLMRobertaForQuestionAnswering"),Mjr=o(" (XLM-RoBERTa model)"),Ejr=l(),F(xw.$$.fragment),mDe=l(),Yc=a("h2"),$w=a("a"),wEe=a("span"),F(fx.$$.fragment),Cjr=l(),AEe=a("span"),wjr=o("FlaxAutoModelForTokenClassification"),gDe=l(),br=a("div"),F(mx.$$.fragment),Ajr=l(),Kc=a("p"),yjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zK=a("a"),Ljr=o("from_pretrained()"),xjr=o(" class method or the "),WK=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),gx=a("p"),Rjr=o("This class cannot be instantiated directly using "),yEe=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Ht=a("div"),F(hx.$$.fragment),Njr=l(),LEe=a("p"),qjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jjr=l(),Zc=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(kw.$$.fragment),Wjr=l(),Wr=a("div"),F(px.$$.fragment),Qjr=l(),$Ee=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ujr=l(),Tn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),kEe=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),De=a("ul"),Sw=a("li"),PEe=a("strong"),aDr=o("albert"),nDr=o(" \u2014 "),HK=a("a"),sDr=o("FlaxAlbertForTokenClassification"),lDr=o(" (ALBERT model)"),iDr=l(),Rw=a("li"),BEe=a("strong"),dDr=o("bert"),cDr=o(" \u2014 "),UK=a("a"),fDr=o("FlaxBertForTokenClassification"),mDr=o(" (BERT model)"),gDr=l(),Pw=a("li"),IEe=a("strong"),hDr=o("big_bird"),pDr=o(" \u2014 "),JK=a("a"),uDr=o("FlaxBigBirdForTokenClassification"),_Dr=o(" (BigBird model)"),bDr=l(),Bw=a("li"),NEe=a("strong"),vDr=o("distilbert"),FDr=o(" \u2014 "),YK=a("a"),TDr=o("FlaxDistilBertForTokenClassification"),MDr=o(" (DistilBERT model)"),EDr=l(),Iw=a("li"),qEe=a("strong"),CDr=o("electra"),wDr=o(" \u2014 "),KK=a("a"),ADr=o("FlaxElectraForTokenClassification"),yDr=o(" (ELECTRA model)"),LDr=l(),Nw=a("li"),jEe=a("strong"),xDr=o("roberta"),$Dr=o(" \u2014 "),ZK=a("a"),kDr=o("FlaxRobertaForTokenClassification"),SDr=o(" (RoBERTa model)"),RDr=l(),qw=a("li"),DEe=a("strong"),PDr=o("roformer"),BDr=o(" \u2014 "),eZ=a("a"),IDr=o("FlaxRoFormerForTokenClassification"),NDr=o(" (RoFormer model)"),qDr=l(),jw=a("li"),GEe=a("strong"),jDr=o("xlm-roberta"),DDr=o(" \u2014 "),oZ=a("a"),GDr=o("FlaxXLMRobertaForTokenClassification"),ODr=o(" (XLM-RoBERTa model)"),VDr=l(),F(Dw.$$.fragment),hDe=l(),ef=a("h2"),Gw=a("a"),OEe=a("span"),F(ux.$$.fragment),XDr=l(),VEe=a("span"),zDr=o("FlaxAutoModelForMultipleChoice"),pDe=l(),vr=a("div"),F(_x.$$.fragment),WDr=l(),of=a("p"),QDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rZ=a("a"),HDr=o("from_pretrained()"),UDr=o(" class method or the "),tZ=a("a"),JDr=o("from_config()"),YDr=o(` class
method.`),KDr=l(),bx=a("p"),ZDr=o("This class cannot be instantiated directly using "),XEe=a("code"),eGr=o("__init__()"),oGr=o(" (throws an error)."),rGr=l(),Ut=a("div"),F(vx.$$.fragment),tGr=l(),zEe=a("p"),aGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nGr=l(),rf=a("p"),sGr=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),lGr=o("not"),iGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),dGr=o("from_pretrained()"),cGr=o(" to load the model weights."),fGr=l(),F(Ow.$$.fragment),mGr=l(),Qr=a("div"),F(Fx.$$.fragment),gGr=l(),QEe=a("p"),hGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pGr=l(),Mn=a("p"),uGr=o("The model class to instantiate is selected based on the "),HEe=a("code"),_Gr=o("model_type"),bGr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),vGr=o("pretrained_model_name_or_path"),FGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),TGr=o("pretrained_model_name_or_path"),MGr=o(":"),EGr=l(),Ge=a("ul"),Vw=a("li"),YEe=a("strong"),CGr=o("albert"),wGr=o(" \u2014 "),nZ=a("a"),AGr=o("FlaxAlbertForMultipleChoice"),yGr=o(" (ALBERT model)"),LGr=l(),Xw=a("li"),KEe=a("strong"),xGr=o("bert"),$Gr=o(" \u2014 "),sZ=a("a"),kGr=o("FlaxBertForMultipleChoice"),SGr=o(" (BERT model)"),RGr=l(),zw=a("li"),ZEe=a("strong"),PGr=o("big_bird"),BGr=o(" \u2014 "),lZ=a("a"),IGr=o("FlaxBigBirdForMultipleChoice"),NGr=o(" (BigBird model)"),qGr=l(),Ww=a("li"),eCe=a("strong"),jGr=o("distilbert"),DGr=o(" \u2014 "),iZ=a("a"),GGr=o("FlaxDistilBertForMultipleChoice"),OGr=o(" (DistilBERT model)"),VGr=l(),Qw=a("li"),oCe=a("strong"),XGr=o("electra"),zGr=o(" \u2014 "),dZ=a("a"),WGr=o("FlaxElectraForMultipleChoice"),QGr=o(" (ELECTRA model)"),HGr=l(),Hw=a("li"),rCe=a("strong"),UGr=o("roberta"),JGr=o(" \u2014 "),cZ=a("a"),YGr=o("FlaxRobertaForMultipleChoice"),KGr=o(" (RoBERTa model)"),ZGr=l(),Uw=a("li"),tCe=a("strong"),eOr=o("roformer"),oOr=o(" \u2014 "),fZ=a("a"),rOr=o("FlaxRoFormerForMultipleChoice"),tOr=o(" (RoFormer model)"),aOr=l(),Jw=a("li"),aCe=a("strong"),nOr=o("xlm-roberta"),sOr=o(" \u2014 "),mZ=a("a"),lOr=o("FlaxXLMRobertaForMultipleChoice"),iOr=o(" (XLM-RoBERTa model)"),dOr=l(),F(Yw.$$.fragment),uDe=l(),tf=a("h2"),Kw=a("a"),nCe=a("span"),F(Tx.$$.fragment),cOr=l(),sCe=a("span"),fOr=o("FlaxAutoModelForNextSentencePrediction"),_De=l(),Fr=a("div"),F(Mx.$$.fragment),mOr=l(),af=a("p"),gOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gZ=a("a"),hOr=o("from_pretrained()"),pOr=o(" class method or the "),hZ=a("a"),uOr=o("from_config()"),_Or=o(` class
method.`),bOr=l(),Ex=a("p"),vOr=o("This class cannot be instantiated directly using "),lCe=a("code"),FOr=o("__init__()"),TOr=o(" (throws an error)."),MOr=l(),Jt=a("div"),F(Cx.$$.fragment),EOr=l(),iCe=a("p"),COr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wOr=l(),nf=a("p"),AOr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),yOr=o("not"),LOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),xOr=o("from_pretrained()"),$Or=o(" to load the model weights."),kOr=l(),F(Zw.$$.fragment),SOr=l(),Hr=a("div"),F(wx.$$.fragment),ROr=l(),cCe=a("p"),POr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BOr=l(),En=a("p"),IOr=o("The model class to instantiate is selected based on the "),fCe=a("code"),NOr=o("model_type"),qOr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),jOr=o("pretrained_model_name_or_path"),DOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),GOr=o("pretrained_model_name_or_path"),OOr=o(":"),VOr=l(),hCe=a("ul"),e0=a("li"),pCe=a("strong"),XOr=o("bert"),zOr=o(" \u2014 "),uZ=a("a"),WOr=o("FlaxBertForNextSentencePrediction"),QOr=o(" (BERT model)"),HOr=l(),F(o0.$$.fragment),bDe=l(),sf=a("h2"),r0=a("a"),uCe=a("span"),F(Ax.$$.fragment),UOr=l(),_Ce=a("span"),JOr=o("FlaxAutoModelForImageClassification"),vDe=l(),Tr=a("div"),F(yx.$$.fragment),YOr=l(),lf=a("p"),KOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Z=a("a"),ZOr=o("from_pretrained()"),eVr=o(" class method or the "),bZ=a("a"),oVr=o("from_config()"),rVr=o(` class
method.`),tVr=l(),Lx=a("p"),aVr=o("This class cannot be instantiated directly using "),bCe=a("code"),nVr=o("__init__()"),sVr=o(" (throws an error)."),lVr=l(),Yt=a("div"),F(xx.$$.fragment),iVr=l(),vCe=a("p"),dVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cVr=l(),df=a("p"),fVr=o(`Note:
Loading a model from its configuration file does `),FCe=a("strong"),mVr=o("not"),gVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),hVr=o("from_pretrained()"),pVr=o(" to load the model weights."),uVr=l(),F(t0.$$.fragment),_Vr=l(),Ur=a("div"),F($x.$$.fragment),bVr=l(),TCe=a("p"),vVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FVr=l(),Cn=a("p"),TVr=o("The model class to instantiate is selected based on the "),MCe=a("code"),MVr=o("model_type"),EVr=o(` property of the config object (either
passed as an argument or loaded from `),ECe=a("code"),CVr=o("pretrained_model_name_or_path"),wVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=a("code"),AVr=o("pretrained_model_name_or_path"),yVr=o(":"),LVr=l(),kx=a("ul"),a0=a("li"),wCe=a("strong"),xVr=o("beit"),$Vr=o(" \u2014 "),FZ=a("a"),kVr=o("FlaxBeitForImageClassification"),SVr=o(" (BEiT model)"),RVr=l(),n0=a("li"),ACe=a("strong"),PVr=o("vit"),BVr=o(" \u2014 "),TZ=a("a"),IVr=o("FlaxViTForImageClassification"),NVr=o(" (ViT model)"),qVr=l(),F(s0.$$.fragment),FDe=l(),cf=a("h2"),l0=a("a"),yCe=a("span"),F(Sx.$$.fragment),jVr=l(),LCe=a("span"),DVr=o("FlaxAutoModelForVision2Seq"),TDe=l(),Mr=a("div"),F(Rx.$$.fragment),GVr=l(),ff=a("p"),OVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MZ=a("a"),VVr=o("from_pretrained()"),XVr=o(" class method or the "),EZ=a("a"),zVr=o("from_config()"),WVr=o(` class
method.`),QVr=l(),Px=a("p"),HVr=o("This class cannot be instantiated directly using "),xCe=a("code"),UVr=o("__init__()"),JVr=o(" (throws an error)."),YVr=l(),Kt=a("div"),F(Bx.$$.fragment),KVr=l(),$Ce=a("p"),ZVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eXr=l(),mf=a("p"),oXr=o(`Note:
Loading a model from its configuration file does `),kCe=a("strong"),rXr=o("not"),tXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),aXr=o("from_pretrained()"),nXr=o(" to load the model weights."),sXr=l(),F(i0.$$.fragment),lXr=l(),Jr=a("div"),F(Ix.$$.fragment),iXr=l(),SCe=a("p"),dXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cXr=l(),wn=a("p"),fXr=o("The model class to instantiate is selected based on the "),RCe=a("code"),mXr=o("model_type"),gXr=o(` property of the config object (either
passed as an argument or loaded from `),PCe=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=a("code"),uXr=o("pretrained_model_name_or_path"),_Xr=o(":"),bXr=l(),ICe=a("ul"),d0=a("li"),NCe=a("strong"),vXr=o("vision-encoder-decoder"),FXr=o(" \u2014 "),wZ=a("a"),TXr=o("FlaxVisionEncoderDecoderModel"),MXr=o(" (Vision Encoder decoder model)"),EXr=l(),F(c0.$$.fragment),this.h()},l(f){const _=hkt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Nx=s(p);m=n(Nx,"A",{id:!0,class:!0,href:!0});var qCe=s(m);u=n(qCe,"SPAN",{});var jCe=s(u);T(d.$$.fragment,jCe),jCe.forEach(t),qCe.forEach(t),h=i(Nx),Mo=n(Nx,"SPAN",{});var DCe=s(Mo);mi=r(DCe,"Auto Classes"),DCe.forEach(t),Nx.forEach(t),uf=i(f),rt=n(f,"P",{});var qx=s(rt);gi=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(qx,"CODE",{});var GCe=s(hi);LA=r(GCe,"from_pretrained()"),GCe.forEach(t),_f=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var OCe=s(yn);xA=r(OCe,"AutoConfig"),OCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var VCe=s(xn);$A=r(VCe,"AutoModel"),VCe.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var XCe=s($n);kA=r(XCe,"AutoTokenizer"),XCe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var jx=s(Ae);Y$=r(jx,"will create a model that is an instance of "),bi=n(jx,"A",{href:!0});var zCe=s(bi);K$=r(zCe,"BertModel"),zCe.forEach(t),Z$=r(jx,"."),jx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Dx=s(wa);ek=r(Dx,"There is one class of "),vf=n(Dx,"CODE",{});var WCe=s(vf);ok=r(WCe,"AutoModel"),WCe.forEach(t),$Oe=r(Dx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Dx.forEach(t),vqe=i(f),vi=n(f,"H2",{class:!0});var Gx=s(vi);Ff=n(Gx,"A",{id:!0,class:!0,href:!0});var QCe=s(Ff);boe=n(QCe,"SPAN",{});var HCe=s(boe);T(SA.$$.fragment,HCe),HCe.forEach(t),QCe.forEach(t),kOe=i(Gx),voe=n(Gx,"SPAN",{});var UCe=s(voe);SOe=r(UCe,"Extending the Auto Classes"),UCe.forEach(t),Gx.forEach(t),Fqe=i(f),kn=n(f,"P",{});var gf=s(kn);ROe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Foe=n(gf,"CODE",{});var JCe=s(Foe);POe=r(JCe,"NewModel"),JCe.forEach(t),BOe=r(gf,", make sure you have a "),Toe=n(gf,"CODE",{});var YCe=s(Toe);IOe=r(YCe,"NewModelConfig"),YCe.forEach(t),NOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Tqe=i(f),T(RA.$$.fragment,f),Mqe=i(f),rk=n(f,"P",{});var KCe=s(rk);qOe=r(KCe,"You will then be able to use the auto classes like you would usually do!"),KCe.forEach(t),Eqe=i(f),T(Tf.$$.fragment,f),Cqe=i(f),Fi=n(f,"H2",{class:!0});var Ox=s(Fi);Mf=n(Ox,"A",{id:!0,class:!0,href:!0});var ZCe=s(Mf);Moe=n(ZCe,"SPAN",{});var e5e=s(Moe);T(PA.$$.fragment,e5e),e5e.forEach(t),ZCe.forEach(t),jOe=i(Ox),Eoe=n(Ox,"SPAN",{});var o5e=s(Eoe);DOe=r(o5e,"AutoConfig"),o5e.forEach(t),Ox.forEach(t),wqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(BA.$$.fragment,et),GOe=i(et),IA=n(et,"P",{});var Vx=s(IA);OOe=r(Vx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),tk=n(Vx,"A",{href:!0});var r5e=s(tk);VOe=r(r5e,"from_pretrained()"),r5e.forEach(t),XOe=r(Vx," class method."),Vx.forEach(t),zOe=i(et),NA=n(et,"P",{});var Xx=s(NA);WOe=r(Xx,"This class cannot be instantiated directly using "),Coe=n(Xx,"CODE",{});var t5e=s(Coe);QOe=r(t5e,"__init__()"),t5e.forEach(t),HOe=r(Xx," (throws an error)."),Xx.forEach(t),UOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(qA.$$.fragment,ot),JOe=i(ot),woe=n(ot,"P",{});var a5e=s(woe);YOe=r(a5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),a5e.forEach(t),KOe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);ZOe=r(hf,"The configuration class to instantiate is selected based on the "),Aoe=n(hf,"CODE",{});var n5e=s(Aoe);eVe=r(n5e,"model_type"),n5e.forEach(t),oVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yoe=n(hf,"CODE",{});var s5e=s(yoe);rVe=r(s5e,"pretrained_model_name_or_path"),s5e.forEach(t),tVe=r(hf,":"),hf.forEach(t),aVe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var f0=s(Ef);Loe=n(f0,"STRONG",{});var l5e=s(Loe);nVe=r(l5e,"albert"),l5e.forEach(t),sVe=r(f0," \u2014 "),ak=n(f0,"A",{href:!0});var i5e=s(ak);lVe=r(i5e,"AlbertConfig"),i5e.forEach(t),iVe=r(f0," (ALBERT model)"),f0.forEach(t),dVe=i(y),Cf=n(y,"LI",{});var m0=s(Cf);xoe=n(m0,"STRONG",{});var d5e=s(xoe);cVe=r(d5e,"bart"),d5e.forEach(t),fVe=r(m0," \u2014 "),nk=n(m0,"A",{href:!0});var c5e=s(nk);mVe=r(c5e,"BartConfig"),c5e.forEach(t),gVe=r(m0," (BART model)"),m0.forEach(t),hVe=i(y),wf=n(y,"LI",{});var g0=s(wf);$oe=n(g0,"STRONG",{});var f5e=s($oe);pVe=r(f5e,"beit"),f5e.forEach(t),uVe=r(g0," \u2014 "),sk=n(g0,"A",{href:!0});var m5e=s(sk);_Ve=r(m5e,"BeitConfig"),m5e.forEach(t),bVe=r(g0," (BEiT model)"),g0.forEach(t),vVe=i(y),Af=n(y,"LI",{});var h0=s(Af);koe=n(h0,"STRONG",{});var g5e=s(koe);FVe=r(g5e,"bert"),g5e.forEach(t),TVe=r(h0," \u2014 "),lk=n(h0,"A",{href:!0});var h5e=s(lk);MVe=r(h5e,"BertConfig"),h5e.forEach(t),EVe=r(h0," (BERT model)"),h0.forEach(t),CVe=i(y),yf=n(y,"LI",{});var p0=s(yf);Soe=n(p0,"STRONG",{});var p5e=s(Soe);wVe=r(p5e,"bert-generation"),p5e.forEach(t),AVe=r(p0," \u2014 "),ik=n(p0,"A",{href:!0});var u5e=s(ik);yVe=r(u5e,"BertGenerationConfig"),u5e.forEach(t),LVe=r(p0," (Bert Generation model)"),p0.forEach(t),xVe=i(y),Lf=n(y,"LI",{});var u0=s(Lf);Roe=n(u0,"STRONG",{});var _5e=s(Roe);$Ve=r(_5e,"big_bird"),_5e.forEach(t),kVe=r(u0," \u2014 "),dk=n(u0,"A",{href:!0});var b5e=s(dk);SVe=r(b5e,"BigBirdConfig"),b5e.forEach(t),RVe=r(u0," (BigBird model)"),u0.forEach(t),PVe=i(y),xf=n(y,"LI",{});var _0=s(xf);Poe=n(_0,"STRONG",{});var v5e=s(Poe);BVe=r(v5e,"bigbird_pegasus"),v5e.forEach(t),IVe=r(_0," \u2014 "),ck=n(_0,"A",{href:!0});var F5e=s(ck);NVe=r(F5e,"BigBirdPegasusConfig"),F5e.forEach(t),qVe=r(_0," (BigBirdPegasus model)"),_0.forEach(t),jVe=i(y),$f=n(y,"LI",{});var b0=s($f);Boe=n(b0,"STRONG",{});var T5e=s(Boe);DVe=r(T5e,"blenderbot"),T5e.forEach(t),GVe=r(b0," \u2014 "),fk=n(b0,"A",{href:!0});var M5e=s(fk);OVe=r(M5e,"BlenderbotConfig"),M5e.forEach(t),VVe=r(b0," (Blenderbot model)"),b0.forEach(t),XVe=i(y),kf=n(y,"LI",{});var v0=s(kf);Ioe=n(v0,"STRONG",{});var E5e=s(Ioe);zVe=r(E5e,"blenderbot-small"),E5e.forEach(t),WVe=r(v0," \u2014 "),mk=n(v0,"A",{href:!0});var C5e=s(mk);QVe=r(C5e,"BlenderbotSmallConfig"),C5e.forEach(t),HVe=r(v0," (BlenderbotSmall model)"),v0.forEach(t),UVe=i(y),Sf=n(y,"LI",{});var F0=s(Sf);Noe=n(F0,"STRONG",{});var w5e=s(Noe);JVe=r(w5e,"camembert"),w5e.forEach(t),YVe=r(F0," \u2014 "),gk=n(F0,"A",{href:!0});var A5e=s(gk);KVe=r(A5e,"CamembertConfig"),A5e.forEach(t),ZVe=r(F0," (CamemBERT model)"),F0.forEach(t),eXe=i(y),Rf=n(y,"LI",{});var T0=s(Rf);qoe=n(T0,"STRONG",{});var y5e=s(qoe);oXe=r(y5e,"canine"),y5e.forEach(t),rXe=r(T0," \u2014 "),hk=n(T0,"A",{href:!0});var L5e=s(hk);tXe=r(L5e,"CanineConfig"),L5e.forEach(t),aXe=r(T0," (Canine model)"),T0.forEach(t),nXe=i(y),Pf=n(y,"LI",{});var M0=s(Pf);joe=n(M0,"STRONG",{});var x5e=s(joe);sXe=r(x5e,"clip"),x5e.forEach(t),lXe=r(M0," \u2014 "),pk=n(M0,"A",{href:!0});var $5e=s(pk);iXe=r($5e,"CLIPConfig"),$5e.forEach(t),dXe=r(M0," (CLIP model)"),M0.forEach(t),cXe=i(y),Bf=n(y,"LI",{});var E0=s(Bf);Doe=n(E0,"STRONG",{});var k5e=s(Doe);fXe=r(k5e,"convbert"),k5e.forEach(t),mXe=r(E0," \u2014 "),uk=n(E0,"A",{href:!0});var S5e=s(uk);gXe=r(S5e,"ConvBertConfig"),S5e.forEach(t),hXe=r(E0," (ConvBERT model)"),E0.forEach(t),pXe=i(y),If=n(y,"LI",{});var C0=s(If);Goe=n(C0,"STRONG",{});var R5e=s(Goe);uXe=r(R5e,"convnext"),R5e.forEach(t),_Xe=r(C0," \u2014 "),_k=n(C0,"A",{href:!0});var P5e=s(_k);bXe=r(P5e,"ConvNextConfig"),P5e.forEach(t),vXe=r(C0," (ConvNext model)"),C0.forEach(t),FXe=i(y),Nf=n(y,"LI",{});var w0=s(Nf);Ooe=n(w0,"STRONG",{});var B5e=s(Ooe);TXe=r(B5e,"ctrl"),B5e.forEach(t),MXe=r(w0," \u2014 "),bk=n(w0,"A",{href:!0});var I5e=s(bk);EXe=r(I5e,"CTRLConfig"),I5e.forEach(t),CXe=r(w0," (CTRL model)"),w0.forEach(t),wXe=i(y),qf=n(y,"LI",{});var A0=s(qf);Voe=n(A0,"STRONG",{});var N5e=s(Voe);AXe=r(N5e,"cvt"),N5e.forEach(t),yXe=r(A0," \u2014 "),vk=n(A0,"A",{href:!0});var q5e=s(vk);LXe=r(q5e,"CvtConfig"),q5e.forEach(t),xXe=r(A0," (CvT model)"),A0.forEach(t),$Xe=i(y),jf=n(y,"LI",{});var y0=s(jf);Xoe=n(y0,"STRONG",{});var j5e=s(Xoe);kXe=r(j5e,"data2vec-audio"),j5e.forEach(t),SXe=r(y0," \u2014 "),Fk=n(y0,"A",{href:!0});var D5e=s(Fk);RXe=r(D5e,"Data2VecAudioConfig"),D5e.forEach(t),PXe=r(y0," (Data2VecAudio model)"),y0.forEach(t),BXe=i(y),Df=n(y,"LI",{});var L0=s(Df);zoe=n(L0,"STRONG",{});var G5e=s(zoe);IXe=r(G5e,"data2vec-text"),G5e.forEach(t),NXe=r(L0," \u2014 "),Tk=n(L0,"A",{href:!0});var O5e=s(Tk);qXe=r(O5e,"Data2VecTextConfig"),O5e.forEach(t),jXe=r(L0," (Data2VecText model)"),L0.forEach(t),DXe=i(y),Gf=n(y,"LI",{});var x0=s(Gf);Woe=n(x0,"STRONG",{});var V5e=s(Woe);GXe=r(V5e,"data2vec-vision"),V5e.forEach(t),OXe=r(x0," \u2014 "),Mk=n(x0,"A",{href:!0});var X5e=s(Mk);VXe=r(X5e,"Data2VecVisionConfig"),X5e.forEach(t),XXe=r(x0," (Data2VecVision model)"),x0.forEach(t),zXe=i(y),Of=n(y,"LI",{});var $0=s(Of);Qoe=n($0,"STRONG",{});var z5e=s(Qoe);WXe=r(z5e,"deberta"),z5e.forEach(t),QXe=r($0," \u2014 "),Ek=n($0,"A",{href:!0});var W5e=s(Ek);HXe=r(W5e,"DebertaConfig"),W5e.forEach(t),UXe=r($0," (DeBERTa model)"),$0.forEach(t),JXe=i(y),Vf=n(y,"LI",{});var k0=s(Vf);Hoe=n(k0,"STRONG",{});var Q5e=s(Hoe);YXe=r(Q5e,"deberta-v2"),Q5e.forEach(t),KXe=r(k0," \u2014 "),Ck=n(k0,"A",{href:!0});var H5e=s(Ck);ZXe=r(H5e,"DebertaV2Config"),H5e.forEach(t),eze=r(k0," (DeBERTa-v2 model)"),k0.forEach(t),oze=i(y),Xf=n(y,"LI",{});var S0=s(Xf);Uoe=n(S0,"STRONG",{});var U5e=s(Uoe);rze=r(U5e,"decision_transformer"),U5e.forEach(t),tze=r(S0," \u2014 "),wk=n(S0,"A",{href:!0});var J5e=s(wk);aze=r(J5e,"DecisionTransformerConfig"),J5e.forEach(t),nze=r(S0," (Decision Transformer model)"),S0.forEach(t),sze=i(y),zf=n(y,"LI",{});var R0=s(zf);Joe=n(R0,"STRONG",{});var Y5e=s(Joe);lze=r(Y5e,"deit"),Y5e.forEach(t),ize=r(R0," \u2014 "),Ak=n(R0,"A",{href:!0});var wXr=s(Ak);dze=r(wXr,"DeiTConfig"),wXr.forEach(t),cze=r(R0," (DeiT model)"),R0.forEach(t),fze=i(y),Wf=n(y,"LI",{});var K5e=s(Wf);Yoe=n(K5e,"STRONG",{});var AXr=s(Yoe);mze=r(AXr,"detr"),AXr.forEach(t),gze=r(K5e," \u2014 "),yk=n(K5e,"A",{href:!0});var yXr=s(yk);hze=r(yXr,"DetrConfig"),yXr.forEach(t),pze=r(K5e," (DETR model)"),K5e.forEach(t),uze=i(y),Qf=n(y,"LI",{});var Z5e=s(Qf);Koe=n(Z5e,"STRONG",{});var LXr=s(Koe);_ze=r(LXr,"distilbert"),LXr.forEach(t),bze=r(Z5e," \u2014 "),Lk=n(Z5e,"A",{href:!0});var xXr=s(Lk);vze=r(xXr,"DistilBertConfig"),xXr.forEach(t),Fze=r(Z5e," (DistilBERT model)"),Z5e.forEach(t),Tze=i(y),Hf=n(y,"LI",{});var ewe=s(Hf);Zoe=n(ewe,"STRONG",{});var $Xr=s(Zoe);Mze=r($Xr,"dpr"),$Xr.forEach(t),Eze=r(ewe," \u2014 "),xk=n(ewe,"A",{href:!0});var kXr=s(xk);Cze=r(kXr,"DPRConfig"),kXr.forEach(t),wze=r(ewe," (DPR model)"),ewe.forEach(t),Aze=i(y),Uf=n(y,"LI",{});var owe=s(Uf);ere=n(owe,"STRONG",{});var SXr=s(ere);yze=r(SXr,"dpt"),SXr.forEach(t),Lze=r(owe," \u2014 "),$k=n(owe,"A",{href:!0});var RXr=s($k);xze=r(RXr,"DPTConfig"),RXr.forEach(t),$ze=r(owe," (DPT model)"),owe.forEach(t),kze=i(y),Jf=n(y,"LI",{});var rwe=s(Jf);ore=n(rwe,"STRONG",{});var PXr=s(ore);Sze=r(PXr,"electra"),PXr.forEach(t),Rze=r(rwe," \u2014 "),kk=n(rwe,"A",{href:!0});var BXr=s(kk);Pze=r(BXr,"ElectraConfig"),BXr.forEach(t),Bze=r(rwe," (ELECTRA model)"),rwe.forEach(t),Ize=i(y),Yf=n(y,"LI",{});var twe=s(Yf);rre=n(twe,"STRONG",{});var IXr=s(rre);Nze=r(IXr,"encoder-decoder"),IXr.forEach(t),qze=r(twe," \u2014 "),Sk=n(twe,"A",{href:!0});var NXr=s(Sk);jze=r(NXr,"EncoderDecoderConfig"),NXr.forEach(t),Dze=r(twe," (Encoder decoder model)"),twe.forEach(t),Gze=i(y),Kf=n(y,"LI",{});var awe=s(Kf);tre=n(awe,"STRONG",{});var qXr=s(tre);Oze=r(qXr,"flaubert"),qXr.forEach(t),Vze=r(awe," \u2014 "),Rk=n(awe,"A",{href:!0});var jXr=s(Rk);Xze=r(jXr,"FlaubertConfig"),jXr.forEach(t),zze=r(awe," (FlauBERT model)"),awe.forEach(t),Wze=i(y),Zf=n(y,"LI",{});var nwe=s(Zf);are=n(nwe,"STRONG",{});var DXr=s(are);Qze=r(DXr,"flava"),DXr.forEach(t),Hze=r(nwe," \u2014 "),Pk=n(nwe,"A",{href:!0});var GXr=s(Pk);Uze=r(GXr,"FlavaConfig"),GXr.forEach(t),Jze=r(nwe," (Flava model)"),nwe.forEach(t),Yze=i(y),em=n(y,"LI",{});var swe=s(em);nre=n(swe,"STRONG",{});var OXr=s(nre);Kze=r(OXr,"fnet"),OXr.forEach(t),Zze=r(swe," \u2014 "),Bk=n(swe,"A",{href:!0});var VXr=s(Bk);eWe=r(VXr,"FNetConfig"),VXr.forEach(t),oWe=r(swe," (FNet model)"),swe.forEach(t),rWe=i(y),om=n(y,"LI",{});var lwe=s(om);sre=n(lwe,"STRONG",{});var XXr=s(sre);tWe=r(XXr,"fsmt"),XXr.forEach(t),aWe=r(lwe," \u2014 "),Ik=n(lwe,"A",{href:!0});var zXr=s(Ik);nWe=r(zXr,"FSMTConfig"),zXr.forEach(t),sWe=r(lwe," (FairSeq Machine-Translation model)"),lwe.forEach(t),lWe=i(y),rm=n(y,"LI",{});var iwe=s(rm);lre=n(iwe,"STRONG",{});var WXr=s(lre);iWe=r(WXr,"funnel"),WXr.forEach(t),dWe=r(iwe," \u2014 "),Nk=n(iwe,"A",{href:!0});var QXr=s(Nk);cWe=r(QXr,"FunnelConfig"),QXr.forEach(t),fWe=r(iwe," (Funnel Transformer model)"),iwe.forEach(t),mWe=i(y),tm=n(y,"LI",{});var dwe=s(tm);ire=n(dwe,"STRONG",{});var HXr=s(ire);gWe=r(HXr,"glpn"),HXr.forEach(t),hWe=r(dwe," \u2014 "),qk=n(dwe,"A",{href:!0});var UXr=s(qk);pWe=r(UXr,"GLPNConfig"),UXr.forEach(t),uWe=r(dwe," (GLPN model)"),dwe.forEach(t),_We=i(y),am=n(y,"LI",{});var cwe=s(am);dre=n(cwe,"STRONG",{});var JXr=s(dre);bWe=r(JXr,"gpt2"),JXr.forEach(t),vWe=r(cwe," \u2014 "),jk=n(cwe,"A",{href:!0});var YXr=s(jk);FWe=r(YXr,"GPT2Config"),YXr.forEach(t),TWe=r(cwe," (OpenAI GPT-2 model)"),cwe.forEach(t),MWe=i(y),nm=n(y,"LI",{});var fwe=s(nm);cre=n(fwe,"STRONG",{});var KXr=s(cre);EWe=r(KXr,"gpt_neo"),KXr.forEach(t),CWe=r(fwe," \u2014 "),Dk=n(fwe,"A",{href:!0});var ZXr=s(Dk);wWe=r(ZXr,"GPTNeoConfig"),ZXr.forEach(t),AWe=r(fwe," (GPT Neo model)"),fwe.forEach(t),yWe=i(y),sm=n(y,"LI",{});var mwe=s(sm);fre=n(mwe,"STRONG",{});var ezr=s(fre);LWe=r(ezr,"gpt_neox"),ezr.forEach(t),xWe=r(mwe," \u2014 "),Gk=n(mwe,"A",{href:!0});var ozr=s(Gk);$We=r(ozr,"GPTNeoXConfig"),ozr.forEach(t),kWe=r(mwe," (GPT NeoX model)"),mwe.forEach(t),SWe=i(y),lm=n(y,"LI",{});var gwe=s(lm);mre=n(gwe,"STRONG",{});var rzr=s(mre);RWe=r(rzr,"gptj"),rzr.forEach(t),PWe=r(gwe," \u2014 "),Ok=n(gwe,"A",{href:!0});var tzr=s(Ok);BWe=r(tzr,"GPTJConfig"),tzr.forEach(t),IWe=r(gwe," (GPT-J model)"),gwe.forEach(t),NWe=i(y),im=n(y,"LI",{});var hwe=s(im);gre=n(hwe,"STRONG",{});var azr=s(gre);qWe=r(azr,"groupvit"),azr.forEach(t),jWe=r(hwe," \u2014 "),Vk=n(hwe,"A",{href:!0});var nzr=s(Vk);DWe=r(nzr,"GroupViTConfig"),nzr.forEach(t),GWe=r(hwe," (GroupViT model)"),hwe.forEach(t),OWe=i(y),dm=n(y,"LI",{});var pwe=s(dm);hre=n(pwe,"STRONG",{});var szr=s(hre);VWe=r(szr,"hubert"),szr.forEach(t),XWe=r(pwe," \u2014 "),Xk=n(pwe,"A",{href:!0});var lzr=s(Xk);zWe=r(lzr,"HubertConfig"),lzr.forEach(t),WWe=r(pwe," (Hubert model)"),pwe.forEach(t),QWe=i(y),cm=n(y,"LI",{});var uwe=s(cm);pre=n(uwe,"STRONG",{});var izr=s(pre);HWe=r(izr,"ibert"),izr.forEach(t),UWe=r(uwe," \u2014 "),zk=n(uwe,"A",{href:!0});var dzr=s(zk);JWe=r(dzr,"IBertConfig"),dzr.forEach(t),YWe=r(uwe," (I-BERT model)"),uwe.forEach(t),KWe=i(y),fm=n(y,"LI",{});var _we=s(fm);ure=n(_we,"STRONG",{});var czr=s(ure);ZWe=r(czr,"imagegpt"),czr.forEach(t),eQe=r(_we," \u2014 "),Wk=n(_we,"A",{href:!0});var fzr=s(Wk);oQe=r(fzr,"ImageGPTConfig"),fzr.forEach(t),rQe=r(_we," (ImageGPT model)"),_we.forEach(t),tQe=i(y),mm=n(y,"LI",{});var bwe=s(mm);_re=n(bwe,"STRONG",{});var mzr=s(_re);aQe=r(mzr,"layoutlm"),mzr.forEach(t),nQe=r(bwe," \u2014 "),Qk=n(bwe,"A",{href:!0});var gzr=s(Qk);sQe=r(gzr,"LayoutLMConfig"),gzr.forEach(t),lQe=r(bwe," (LayoutLM model)"),bwe.forEach(t),iQe=i(y),gm=n(y,"LI",{});var vwe=s(gm);bre=n(vwe,"STRONG",{});var hzr=s(bre);dQe=r(hzr,"layoutlmv2"),hzr.forEach(t),cQe=r(vwe," \u2014 "),Hk=n(vwe,"A",{href:!0});var pzr=s(Hk);fQe=r(pzr,"LayoutLMv2Config"),pzr.forEach(t),mQe=r(vwe," (LayoutLMv2 model)"),vwe.forEach(t),gQe=i(y),hm=n(y,"LI",{});var Fwe=s(hm);vre=n(Fwe,"STRONG",{});var uzr=s(vre);hQe=r(uzr,"layoutlmv3"),uzr.forEach(t),pQe=r(Fwe," \u2014 "),Uk=n(Fwe,"A",{href:!0});var _zr=s(Uk);uQe=r(_zr,"LayoutLMv3Config"),_zr.forEach(t),_Qe=r(Fwe," (LayoutLMv3 model)"),Fwe.forEach(t),bQe=i(y),pm=n(y,"LI",{});var Twe=s(pm);Fre=n(Twe,"STRONG",{});var bzr=s(Fre);vQe=r(bzr,"led"),bzr.forEach(t),FQe=r(Twe," \u2014 "),Jk=n(Twe,"A",{href:!0});var vzr=s(Jk);TQe=r(vzr,"LEDConfig"),vzr.forEach(t),MQe=r(Twe," (LED model)"),Twe.forEach(t),EQe=i(y),um=n(y,"LI",{});var Mwe=s(um);Tre=n(Mwe,"STRONG",{});var Fzr=s(Tre);CQe=r(Fzr,"longformer"),Fzr.forEach(t),wQe=r(Mwe," \u2014 "),Yk=n(Mwe,"A",{href:!0});var Tzr=s(Yk);AQe=r(Tzr,"LongformerConfig"),Tzr.forEach(t),yQe=r(Mwe," (Longformer model)"),Mwe.forEach(t),LQe=i(y),_m=n(y,"LI",{});var Ewe=s(_m);Mre=n(Ewe,"STRONG",{});var Mzr=s(Mre);xQe=r(Mzr,"luke"),Mzr.forEach(t),$Qe=r(Ewe," \u2014 "),Kk=n(Ewe,"A",{href:!0});var Ezr=s(Kk);kQe=r(Ezr,"LukeConfig"),Ezr.forEach(t),SQe=r(Ewe," (LUKE model)"),Ewe.forEach(t),RQe=i(y),bm=n(y,"LI",{});var Cwe=s(bm);Ere=n(Cwe,"STRONG",{});var Czr=s(Ere);PQe=r(Czr,"lxmert"),Czr.forEach(t),BQe=r(Cwe," \u2014 "),Zk=n(Cwe,"A",{href:!0});var wzr=s(Zk);IQe=r(wzr,"LxmertConfig"),wzr.forEach(t),NQe=r(Cwe," (LXMERT model)"),Cwe.forEach(t),qQe=i(y),vm=n(y,"LI",{});var wwe=s(vm);Cre=n(wwe,"STRONG",{});var Azr=s(Cre);jQe=r(Azr,"m2m_100"),Azr.forEach(t),DQe=r(wwe," \u2014 "),eS=n(wwe,"A",{href:!0});var yzr=s(eS);GQe=r(yzr,"M2M100Config"),yzr.forEach(t),OQe=r(wwe," (M2M100 model)"),wwe.forEach(t),VQe=i(y),Fm=n(y,"LI",{});var Awe=s(Fm);wre=n(Awe,"STRONG",{});var Lzr=s(wre);XQe=r(Lzr,"marian"),Lzr.forEach(t),zQe=r(Awe," \u2014 "),oS=n(Awe,"A",{href:!0});var xzr=s(oS);WQe=r(xzr,"MarianConfig"),xzr.forEach(t),QQe=r(Awe," (Marian model)"),Awe.forEach(t),HQe=i(y),Tm=n(y,"LI",{});var ywe=s(Tm);Are=n(ywe,"STRONG",{});var $zr=s(Are);UQe=r($zr,"maskformer"),$zr.forEach(t),JQe=r(ywe," \u2014 "),rS=n(ywe,"A",{href:!0});var kzr=s(rS);YQe=r(kzr,"MaskFormerConfig"),kzr.forEach(t),KQe=r(ywe," (MaskFormer model)"),ywe.forEach(t),ZQe=i(y),Mm=n(y,"LI",{});var Lwe=s(Mm);yre=n(Lwe,"STRONG",{});var Szr=s(yre);eHe=r(Szr,"mbart"),Szr.forEach(t),oHe=r(Lwe," \u2014 "),tS=n(Lwe,"A",{href:!0});var Rzr=s(tS);rHe=r(Rzr,"MBartConfig"),Rzr.forEach(t),tHe=r(Lwe," (mBART model)"),Lwe.forEach(t),aHe=i(y),Em=n(y,"LI",{});var xwe=s(Em);Lre=n(xwe,"STRONG",{});var Pzr=s(Lre);nHe=r(Pzr,"megatron-bert"),Pzr.forEach(t),sHe=r(xwe," \u2014 "),aS=n(xwe,"A",{href:!0});var Bzr=s(aS);lHe=r(Bzr,"MegatronBertConfig"),Bzr.forEach(t),iHe=r(xwe," (MegatronBert model)"),xwe.forEach(t),dHe=i(y),Cm=n(y,"LI",{});var $we=s(Cm);xre=n($we,"STRONG",{});var Izr=s(xre);cHe=r(Izr,"mobilebert"),Izr.forEach(t),fHe=r($we," \u2014 "),nS=n($we,"A",{href:!0});var Nzr=s(nS);mHe=r(Nzr,"MobileBertConfig"),Nzr.forEach(t),gHe=r($we," (MobileBERT model)"),$we.forEach(t),hHe=i(y),wm=n(y,"LI",{});var kwe=s(wm);$re=n(kwe,"STRONG",{});var qzr=s($re);pHe=r(qzr,"mpnet"),qzr.forEach(t),uHe=r(kwe," \u2014 "),sS=n(kwe,"A",{href:!0});var jzr=s(sS);_He=r(jzr,"MPNetConfig"),jzr.forEach(t),bHe=r(kwe," (MPNet model)"),kwe.forEach(t),vHe=i(y),Am=n(y,"LI",{});var Swe=s(Am);kre=n(Swe,"STRONG",{});var Dzr=s(kre);FHe=r(Dzr,"mt5"),Dzr.forEach(t),THe=r(Swe," \u2014 "),lS=n(Swe,"A",{href:!0});var Gzr=s(lS);MHe=r(Gzr,"MT5Config"),Gzr.forEach(t),EHe=r(Swe," (mT5 model)"),Swe.forEach(t),CHe=i(y),ym=n(y,"LI",{});var Rwe=s(ym);Sre=n(Rwe,"STRONG",{});var Ozr=s(Sre);wHe=r(Ozr,"nystromformer"),Ozr.forEach(t),AHe=r(Rwe," \u2014 "),iS=n(Rwe,"A",{href:!0});var Vzr=s(iS);yHe=r(Vzr,"NystromformerConfig"),Vzr.forEach(t),LHe=r(Rwe," (Nystromformer model)"),Rwe.forEach(t),xHe=i(y),Lm=n(y,"LI",{});var Pwe=s(Lm);Rre=n(Pwe,"STRONG",{});var Xzr=s(Rre);$He=r(Xzr,"openai-gpt"),Xzr.forEach(t),kHe=r(Pwe," \u2014 "),dS=n(Pwe,"A",{href:!0});var zzr=s(dS);SHe=r(zzr,"OpenAIGPTConfig"),zzr.forEach(t),RHe=r(Pwe," (OpenAI GPT model)"),Pwe.forEach(t),PHe=i(y),xm=n(y,"LI",{});var Bwe=s(xm);Pre=n(Bwe,"STRONG",{});var Wzr=s(Pre);BHe=r(Wzr,"opt"),Wzr.forEach(t),IHe=r(Bwe," \u2014 "),cS=n(Bwe,"A",{href:!0});var Qzr=s(cS);NHe=r(Qzr,"OPTConfig"),Qzr.forEach(t),qHe=r(Bwe," (OPT model)"),Bwe.forEach(t),jHe=i(y),$m=n(y,"LI",{});var Iwe=s($m);Bre=n(Iwe,"STRONG",{});var Hzr=s(Bre);DHe=r(Hzr,"pegasus"),Hzr.forEach(t),GHe=r(Iwe," \u2014 "),fS=n(Iwe,"A",{href:!0});var Uzr=s(fS);OHe=r(Uzr,"PegasusConfig"),Uzr.forEach(t),VHe=r(Iwe," (Pegasus model)"),Iwe.forEach(t),XHe=i(y),km=n(y,"LI",{});var Nwe=s(km);Ire=n(Nwe,"STRONG",{});var Jzr=s(Ire);zHe=r(Jzr,"perceiver"),Jzr.forEach(t),WHe=r(Nwe," \u2014 "),mS=n(Nwe,"A",{href:!0});var Yzr=s(mS);QHe=r(Yzr,"PerceiverConfig"),Yzr.forEach(t),HHe=r(Nwe," (Perceiver model)"),Nwe.forEach(t),UHe=i(y),Sm=n(y,"LI",{});var qwe=s(Sm);Nre=n(qwe,"STRONG",{});var Kzr=s(Nre);JHe=r(Kzr,"plbart"),Kzr.forEach(t),YHe=r(qwe," \u2014 "),gS=n(qwe,"A",{href:!0});var Zzr=s(gS);KHe=r(Zzr,"PLBartConfig"),Zzr.forEach(t),ZHe=r(qwe," (PLBart model)"),qwe.forEach(t),eUe=i(y),Rm=n(y,"LI",{});var jwe=s(Rm);qre=n(jwe,"STRONG",{});var eWr=s(qre);oUe=r(eWr,"poolformer"),eWr.forEach(t),rUe=r(jwe," \u2014 "),hS=n(jwe,"A",{href:!0});var oWr=s(hS);tUe=r(oWr,"PoolFormerConfig"),oWr.forEach(t),aUe=r(jwe," (PoolFormer model)"),jwe.forEach(t),nUe=i(y),Pm=n(y,"LI",{});var Dwe=s(Pm);jre=n(Dwe,"STRONG",{});var rWr=s(jre);sUe=r(rWr,"prophetnet"),rWr.forEach(t),lUe=r(Dwe," \u2014 "),pS=n(Dwe,"A",{href:!0});var tWr=s(pS);iUe=r(tWr,"ProphetNetConfig"),tWr.forEach(t),dUe=r(Dwe," (ProphetNet model)"),Dwe.forEach(t),cUe=i(y),Bm=n(y,"LI",{});var Gwe=s(Bm);Dre=n(Gwe,"STRONG",{});var aWr=s(Dre);fUe=r(aWr,"qdqbert"),aWr.forEach(t),mUe=r(Gwe," \u2014 "),uS=n(Gwe,"A",{href:!0});var nWr=s(uS);gUe=r(nWr,"QDQBertConfig"),nWr.forEach(t),hUe=r(Gwe," (QDQBert model)"),Gwe.forEach(t),pUe=i(y),Im=n(y,"LI",{});var Owe=s(Im);Gre=n(Owe,"STRONG",{});var sWr=s(Gre);uUe=r(sWr,"rag"),sWr.forEach(t),_Ue=r(Owe," \u2014 "),_S=n(Owe,"A",{href:!0});var lWr=s(_S);bUe=r(lWr,"RagConfig"),lWr.forEach(t),vUe=r(Owe," (RAG model)"),Owe.forEach(t),FUe=i(y),Nm=n(y,"LI",{});var Vwe=s(Nm);Ore=n(Vwe,"STRONG",{});var iWr=s(Ore);TUe=r(iWr,"realm"),iWr.forEach(t),MUe=r(Vwe," \u2014 "),bS=n(Vwe,"A",{href:!0});var dWr=s(bS);EUe=r(dWr,"RealmConfig"),dWr.forEach(t),CUe=r(Vwe," (Realm model)"),Vwe.forEach(t),wUe=i(y),qm=n(y,"LI",{});var Xwe=s(qm);Vre=n(Xwe,"STRONG",{});var cWr=s(Vre);AUe=r(cWr,"reformer"),cWr.forEach(t),yUe=r(Xwe," \u2014 "),vS=n(Xwe,"A",{href:!0});var fWr=s(vS);LUe=r(fWr,"ReformerConfig"),fWr.forEach(t),xUe=r(Xwe," (Reformer model)"),Xwe.forEach(t),$Ue=i(y),jm=n(y,"LI",{});var zwe=s(jm);Xre=n(zwe,"STRONG",{});var mWr=s(Xre);kUe=r(mWr,"regnet"),mWr.forEach(t),SUe=r(zwe," \u2014 "),FS=n(zwe,"A",{href:!0});var gWr=s(FS);RUe=r(gWr,"RegNetConfig"),gWr.forEach(t),PUe=r(zwe," (RegNet model)"),zwe.forEach(t),BUe=i(y),Dm=n(y,"LI",{});var Wwe=s(Dm);zre=n(Wwe,"STRONG",{});var hWr=s(zre);IUe=r(hWr,"rembert"),hWr.forEach(t),NUe=r(Wwe," \u2014 "),TS=n(Wwe,"A",{href:!0});var pWr=s(TS);qUe=r(pWr,"RemBertConfig"),pWr.forEach(t),jUe=r(Wwe," (RemBERT model)"),Wwe.forEach(t),DUe=i(y),Gm=n(y,"LI",{});var Qwe=s(Gm);Wre=n(Qwe,"STRONG",{});var uWr=s(Wre);GUe=r(uWr,"resnet"),uWr.forEach(t),OUe=r(Qwe," \u2014 "),MS=n(Qwe,"A",{href:!0});var _Wr=s(MS);VUe=r(_Wr,"ResNetConfig"),_Wr.forEach(t),XUe=r(Qwe," (ResNet model)"),Qwe.forEach(t),zUe=i(y),Om=n(y,"LI",{});var Hwe=s(Om);Qre=n(Hwe,"STRONG",{});var bWr=s(Qre);WUe=r(bWr,"retribert"),bWr.forEach(t),QUe=r(Hwe," \u2014 "),ES=n(Hwe,"A",{href:!0});var vWr=s(ES);HUe=r(vWr,"RetriBertConfig"),vWr.forEach(t),UUe=r(Hwe," (RetriBERT model)"),Hwe.forEach(t),JUe=i(y),Vm=n(y,"LI",{});var Uwe=s(Vm);Hre=n(Uwe,"STRONG",{});var FWr=s(Hre);YUe=r(FWr,"roberta"),FWr.forEach(t),KUe=r(Uwe," \u2014 "),CS=n(Uwe,"A",{href:!0});var TWr=s(CS);ZUe=r(TWr,"RobertaConfig"),TWr.forEach(t),eJe=r(Uwe," (RoBERTa model)"),Uwe.forEach(t),oJe=i(y),Xm=n(y,"LI",{});var Jwe=s(Xm);Ure=n(Jwe,"STRONG",{});var MWr=s(Ure);rJe=r(MWr,"roformer"),MWr.forEach(t),tJe=r(Jwe," \u2014 "),wS=n(Jwe,"A",{href:!0});var EWr=s(wS);aJe=r(EWr,"RoFormerConfig"),EWr.forEach(t),nJe=r(Jwe," (RoFormer model)"),Jwe.forEach(t),sJe=i(y),zm=n(y,"LI",{});var Ywe=s(zm);Jre=n(Ywe,"STRONG",{});var CWr=s(Jre);lJe=r(CWr,"segformer"),CWr.forEach(t),iJe=r(Ywe," \u2014 "),AS=n(Ywe,"A",{href:!0});var wWr=s(AS);dJe=r(wWr,"SegformerConfig"),wWr.forEach(t),cJe=r(Ywe," (SegFormer model)"),Ywe.forEach(t),fJe=i(y),Wm=n(y,"LI",{});var Kwe=s(Wm);Yre=n(Kwe,"STRONG",{});var AWr=s(Yre);mJe=r(AWr,"sew"),AWr.forEach(t),gJe=r(Kwe," \u2014 "),yS=n(Kwe,"A",{href:!0});var yWr=s(yS);hJe=r(yWr,"SEWConfig"),yWr.forEach(t),pJe=r(Kwe," (SEW model)"),Kwe.forEach(t),uJe=i(y),Qm=n(y,"LI",{});var Zwe=s(Qm);Kre=n(Zwe,"STRONG",{});var LWr=s(Kre);_Je=r(LWr,"sew-d"),LWr.forEach(t),bJe=r(Zwe," \u2014 "),LS=n(Zwe,"A",{href:!0});var xWr=s(LS);vJe=r(xWr,"SEWDConfig"),xWr.forEach(t),FJe=r(Zwe," (SEW-D model)"),Zwe.forEach(t),TJe=i(y),Hm=n(y,"LI",{});var e0e=s(Hm);Zre=n(e0e,"STRONG",{});var $Wr=s(Zre);MJe=r($Wr,"speech-encoder-decoder"),$Wr.forEach(t),EJe=r(e0e," \u2014 "),xS=n(e0e,"A",{href:!0});var kWr=s(xS);CJe=r(kWr,"SpeechEncoderDecoderConfig"),kWr.forEach(t),wJe=r(e0e," (Speech Encoder decoder model)"),e0e.forEach(t),AJe=i(y),Um=n(y,"LI",{});var o0e=s(Um);ete=n(o0e,"STRONG",{});var SWr=s(ete);yJe=r(SWr,"speech_to_text"),SWr.forEach(t),LJe=r(o0e," \u2014 "),$S=n(o0e,"A",{href:!0});var RWr=s($S);xJe=r(RWr,"Speech2TextConfig"),RWr.forEach(t),$Je=r(o0e," (Speech2Text model)"),o0e.forEach(t),kJe=i(y),Jm=n(y,"LI",{});var r0e=s(Jm);ote=n(r0e,"STRONG",{});var PWr=s(ote);SJe=r(PWr,"speech_to_text_2"),PWr.forEach(t),RJe=r(r0e," \u2014 "),kS=n(r0e,"A",{href:!0});var BWr=s(kS);PJe=r(BWr,"Speech2Text2Config"),BWr.forEach(t),BJe=r(r0e," (Speech2Text2 model)"),r0e.forEach(t),IJe=i(y),Ym=n(y,"LI",{});var t0e=s(Ym);rte=n(t0e,"STRONG",{});var IWr=s(rte);NJe=r(IWr,"splinter"),IWr.forEach(t),qJe=r(t0e," \u2014 "),SS=n(t0e,"A",{href:!0});var NWr=s(SS);jJe=r(NWr,"SplinterConfig"),NWr.forEach(t),DJe=r(t0e," (Splinter model)"),t0e.forEach(t),GJe=i(y),Km=n(y,"LI",{});var a0e=s(Km);tte=n(a0e,"STRONG",{});var qWr=s(tte);OJe=r(qWr,"squeezebert"),qWr.forEach(t),VJe=r(a0e," \u2014 "),RS=n(a0e,"A",{href:!0});var jWr=s(RS);XJe=r(jWr,"SqueezeBertConfig"),jWr.forEach(t),zJe=r(a0e," (SqueezeBERT model)"),a0e.forEach(t),WJe=i(y),Zm=n(y,"LI",{});var n0e=s(Zm);ate=n(n0e,"STRONG",{});var DWr=s(ate);QJe=r(DWr,"swin"),DWr.forEach(t),HJe=r(n0e," \u2014 "),PS=n(n0e,"A",{href:!0});var GWr=s(PS);UJe=r(GWr,"SwinConfig"),GWr.forEach(t),JJe=r(n0e," (Swin model)"),n0e.forEach(t),YJe=i(y),eg=n(y,"LI",{});var s0e=s(eg);nte=n(s0e,"STRONG",{});var OWr=s(nte);KJe=r(OWr,"t5"),OWr.forEach(t),ZJe=r(s0e," \u2014 "),BS=n(s0e,"A",{href:!0});var VWr=s(BS);eYe=r(VWr,"T5Config"),VWr.forEach(t),oYe=r(s0e," (T5 model)"),s0e.forEach(t),rYe=i(y),og=n(y,"LI",{});var l0e=s(og);ste=n(l0e,"STRONG",{});var XWr=s(ste);tYe=r(XWr,"tapas"),XWr.forEach(t),aYe=r(l0e," \u2014 "),IS=n(l0e,"A",{href:!0});var zWr=s(IS);nYe=r(zWr,"TapasConfig"),zWr.forEach(t),sYe=r(l0e," (TAPAS model)"),l0e.forEach(t),lYe=i(y),rg=n(y,"LI",{});var i0e=s(rg);lte=n(i0e,"STRONG",{});var WWr=s(lte);iYe=r(WWr,"trajectory_transformer"),WWr.forEach(t),dYe=r(i0e," \u2014 "),NS=n(i0e,"A",{href:!0});var QWr=s(NS);cYe=r(QWr,"TrajectoryTransformerConfig"),QWr.forEach(t),fYe=r(i0e," (Trajectory Transformer model)"),i0e.forEach(t),mYe=i(y),tg=n(y,"LI",{});var d0e=s(tg);ite=n(d0e,"STRONG",{});var HWr=s(ite);gYe=r(HWr,"transfo-xl"),HWr.forEach(t),hYe=r(d0e," \u2014 "),qS=n(d0e,"A",{href:!0});var UWr=s(qS);pYe=r(UWr,"TransfoXLConfig"),UWr.forEach(t),uYe=r(d0e," (Transformer-XL model)"),d0e.forEach(t),_Ye=i(y),ag=n(y,"LI",{});var c0e=s(ag);dte=n(c0e,"STRONG",{});var JWr=s(dte);bYe=r(JWr,"trocr"),JWr.forEach(t),vYe=r(c0e," \u2014 "),jS=n(c0e,"A",{href:!0});var YWr=s(jS);FYe=r(YWr,"TrOCRConfig"),YWr.forEach(t),TYe=r(c0e," (TrOCR model)"),c0e.forEach(t),MYe=i(y),ng=n(y,"LI",{});var f0e=s(ng);cte=n(f0e,"STRONG",{});var KWr=s(cte);EYe=r(KWr,"unispeech"),KWr.forEach(t),CYe=r(f0e," \u2014 "),DS=n(f0e,"A",{href:!0});var ZWr=s(DS);wYe=r(ZWr,"UniSpeechConfig"),ZWr.forEach(t),AYe=r(f0e," (UniSpeech model)"),f0e.forEach(t),yYe=i(y),sg=n(y,"LI",{});var m0e=s(sg);fte=n(m0e,"STRONG",{});var eQr=s(fte);LYe=r(eQr,"unispeech-sat"),eQr.forEach(t),xYe=r(m0e," \u2014 "),GS=n(m0e,"A",{href:!0});var oQr=s(GS);$Ye=r(oQr,"UniSpeechSatConfig"),oQr.forEach(t),kYe=r(m0e," (UniSpeechSat model)"),m0e.forEach(t),SYe=i(y),lg=n(y,"LI",{});var g0e=s(lg);mte=n(g0e,"STRONG",{});var rQr=s(mte);RYe=r(rQr,"van"),rQr.forEach(t),PYe=r(g0e," \u2014 "),OS=n(g0e,"A",{href:!0});var tQr=s(OS);BYe=r(tQr,"VanConfig"),tQr.forEach(t),IYe=r(g0e," (VAN model)"),g0e.forEach(t),NYe=i(y),ig=n(y,"LI",{});var h0e=s(ig);gte=n(h0e,"STRONG",{});var aQr=s(gte);qYe=r(aQr,"vilt"),aQr.forEach(t),jYe=r(h0e," \u2014 "),VS=n(h0e,"A",{href:!0});var nQr=s(VS);DYe=r(nQr,"ViltConfig"),nQr.forEach(t),GYe=r(h0e," (ViLT model)"),h0e.forEach(t),OYe=i(y),dg=n(y,"LI",{});var p0e=s(dg);hte=n(p0e,"STRONG",{});var sQr=s(hte);VYe=r(sQr,"vision-encoder-decoder"),sQr.forEach(t),XYe=r(p0e," \u2014 "),XS=n(p0e,"A",{href:!0});var lQr=s(XS);zYe=r(lQr,"VisionEncoderDecoderConfig"),lQr.forEach(t),WYe=r(p0e," (Vision Encoder decoder model)"),p0e.forEach(t),QYe=i(y),cg=n(y,"LI",{});var u0e=s(cg);pte=n(u0e,"STRONG",{});var iQr=s(pte);HYe=r(iQr,"vision-text-dual-encoder"),iQr.forEach(t),UYe=r(u0e," \u2014 "),zS=n(u0e,"A",{href:!0});var dQr=s(zS);JYe=r(dQr,"VisionTextDualEncoderConfig"),dQr.forEach(t),YYe=r(u0e," (VisionTextDualEncoder model)"),u0e.forEach(t),KYe=i(y),fg=n(y,"LI",{});var _0e=s(fg);ute=n(_0e,"STRONG",{});var cQr=s(ute);ZYe=r(cQr,"visual_bert"),cQr.forEach(t),eKe=r(_0e," \u2014 "),WS=n(_0e,"A",{href:!0});var fQr=s(WS);oKe=r(fQr,"VisualBertConfig"),fQr.forEach(t),rKe=r(_0e," (VisualBert model)"),_0e.forEach(t),tKe=i(y),mg=n(y,"LI",{});var b0e=s(mg);_te=n(b0e,"STRONG",{});var mQr=s(_te);aKe=r(mQr,"vit"),mQr.forEach(t),nKe=r(b0e," \u2014 "),QS=n(b0e,"A",{href:!0});var gQr=s(QS);sKe=r(gQr,"ViTConfig"),gQr.forEach(t),lKe=r(b0e," (ViT model)"),b0e.forEach(t),iKe=i(y),gg=n(y,"LI",{});var v0e=s(gg);bte=n(v0e,"STRONG",{});var hQr=s(bte);dKe=r(hQr,"vit_mae"),hQr.forEach(t),cKe=r(v0e," \u2014 "),HS=n(v0e,"A",{href:!0});var pQr=s(HS);fKe=r(pQr,"ViTMAEConfig"),pQr.forEach(t),mKe=r(v0e," (ViTMAE model)"),v0e.forEach(t),gKe=i(y),hg=n(y,"LI",{});var F0e=s(hg);vte=n(F0e,"STRONG",{});var uQr=s(vte);hKe=r(uQr,"wav2vec2"),uQr.forEach(t),pKe=r(F0e," \u2014 "),US=n(F0e,"A",{href:!0});var _Qr=s(US);uKe=r(_Qr,"Wav2Vec2Config"),_Qr.forEach(t),_Ke=r(F0e," (Wav2Vec2 model)"),F0e.forEach(t),bKe=i(y),pg=n(y,"LI",{});var T0e=s(pg);Fte=n(T0e,"STRONG",{});var bQr=s(Fte);vKe=r(bQr,"wav2vec2-conformer"),bQr.forEach(t),FKe=r(T0e," \u2014 "),JS=n(T0e,"A",{href:!0});var vQr=s(JS);TKe=r(vQr,"Wav2Vec2ConformerConfig"),vQr.forEach(t),MKe=r(T0e," (Wav2Vec2-Conformer model)"),T0e.forEach(t),EKe=i(y),ug=n(y,"LI",{});var M0e=s(ug);Tte=n(M0e,"STRONG",{});var FQr=s(Tte);CKe=r(FQr,"wavlm"),FQr.forEach(t),wKe=r(M0e," \u2014 "),YS=n(M0e,"A",{href:!0});var TQr=s(YS);AKe=r(TQr,"WavLMConfig"),TQr.forEach(t),yKe=r(M0e," (WavLM model)"),M0e.forEach(t),LKe=i(y),_g=n(y,"LI",{});var E0e=s(_g);Mte=n(E0e,"STRONG",{});var MQr=s(Mte);xKe=r(MQr,"xglm"),MQr.forEach(t),$Ke=r(E0e," \u2014 "),KS=n(E0e,"A",{href:!0});var EQr=s(KS);kKe=r(EQr,"XGLMConfig"),EQr.forEach(t),SKe=r(E0e," (XGLM model)"),E0e.forEach(t),RKe=i(y),bg=n(y,"LI",{});var C0e=s(bg);Ete=n(C0e,"STRONG",{});var CQr=s(Ete);PKe=r(CQr,"xlm"),CQr.forEach(t),BKe=r(C0e," \u2014 "),ZS=n(C0e,"A",{href:!0});var wQr=s(ZS);IKe=r(wQr,"XLMConfig"),wQr.forEach(t),NKe=r(C0e," (XLM model)"),C0e.forEach(t),qKe=i(y),vg=n(y,"LI",{});var w0e=s(vg);Cte=n(w0e,"STRONG",{});var AQr=s(Cte);jKe=r(AQr,"xlm-prophetnet"),AQr.forEach(t),DKe=r(w0e," \u2014 "),eR=n(w0e,"A",{href:!0});var yQr=s(eR);GKe=r(yQr,"XLMProphetNetConfig"),yQr.forEach(t),OKe=r(w0e," (XLMProphetNet model)"),w0e.forEach(t),VKe=i(y),Fg=n(y,"LI",{});var A0e=s(Fg);wte=n(A0e,"STRONG",{});var LQr=s(wte);XKe=r(LQr,"xlm-roberta"),LQr.forEach(t),zKe=r(A0e," \u2014 "),oR=n(A0e,"A",{href:!0});var xQr=s(oR);WKe=r(xQr,"XLMRobertaConfig"),xQr.forEach(t),QKe=r(A0e," (XLM-RoBERTa model)"),A0e.forEach(t),HKe=i(y),Tg=n(y,"LI",{});var y0e=s(Tg);Ate=n(y0e,"STRONG",{});var $Qr=s(Ate);UKe=r($Qr,"xlm-roberta-xl"),$Qr.forEach(t),JKe=r(y0e," \u2014 "),rR=n(y0e,"A",{href:!0});var kQr=s(rR);YKe=r(kQr,"XLMRobertaXLConfig"),kQr.forEach(t),KKe=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),ZKe=i(y),Mg=n(y,"LI",{});var L0e=s(Mg);yte=n(L0e,"STRONG",{});var SQr=s(yte);eZe=r(SQr,"xlnet"),SQr.forEach(t),oZe=r(L0e," \u2014 "),tR=n(L0e,"A",{href:!0});var RQr=s(tR);rZe=r(RQr,"XLNetConfig"),RQr.forEach(t),tZe=r(L0e," (XLNet model)"),L0e.forEach(t),aZe=i(y),Eg=n(y,"LI",{});var x0e=s(Eg);Lte=n(x0e,"STRONG",{});var PQr=s(Lte);nZe=r(PQr,"yolos"),PQr.forEach(t),sZe=r(x0e," \u2014 "),aR=n(x0e,"A",{href:!0});var BQr=s(aR);lZe=r(BQr,"YolosConfig"),BQr.forEach(t),iZe=r(x0e," (YOLOS model)"),x0e.forEach(t),dZe=i(y),Cg=n(y,"LI",{});var $0e=s(Cg);xte=n($0e,"STRONG",{});var IQr=s(xte);cZe=r(IQr,"yoso"),IQr.forEach(t),fZe=r($0e," \u2014 "),nR=n($0e,"A",{href:!0});var NQr=s(nR);mZe=r(NQr,"YosoConfig"),NQr.forEach(t),gZe=r($0e," (YOSO model)"),$0e.forEach(t),y.forEach(t),hZe=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),pZe=i(et),Ag=n(et,"DIV",{class:!0});var EDe=s(Ag);T(jA.$$.fragment,EDe),uZe=i(EDe),$te=n(EDe,"P",{});var qQr=s($te);_Ze=r(qQr,"Register a new configuration for this class."),qQr.forEach(t),EDe.forEach(t),et.forEach(t),Aqe=i(f),Mi=n(f,"H2",{class:!0});var CDe=s(Mi);yg=n(CDe,"A",{id:!0,class:!0,href:!0});var jQr=s(yg);kte=n(jQr,"SPAN",{});var DQr=s(kte);T(DA.$$.fragment,DQr),DQr.forEach(t),jQr.forEach(t),bZe=i(CDe),Ste=n(CDe,"SPAN",{});var GQr=s(Ste);vZe=r(GQr,"AutoTokenizer"),GQr.forEach(t),CDe.forEach(t),yqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(GA.$$.fragment,qs),FZe=i(qs),OA=n(qs,"P",{});var wDe=s(OA);TZe=r(wDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sR=n(wDe,"A",{href:!0});var OQr=s(sR);MZe=r(OQr,"AutoTokenizer.from_pretrained()"),OQr.forEach(t),EZe=r(wDe," class method."),wDe.forEach(t),CZe=i(qs),VA=n(qs,"P",{});var ADe=s(VA);wZe=r(ADe,"This class cannot be instantiated directly using "),Rte=n(ADe,"CODE",{});var VQr=s(Rte);AZe=r(VQr,"__init__()"),VQr.forEach(t),yZe=r(ADe," (throws an error)."),ADe.forEach(t),LZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(XA.$$.fragment,js),xZe=i(js),Pte=n(js,"P",{});var XQr=s(Pte);$Ze=r(XQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),XQr.forEach(t),kZe=i(js),Aa=n(js,"P",{});var P0=s(Aa);SZe=r(P0,"The tokenizer class to instantiate is selected based on the "),Bte=n(P0,"CODE",{});var zQr=s(Bte);RZe=r(zQr,"model_type"),zQr.forEach(t),PZe=r(P0,` property of the config object (either
passed as an argument or loaded from `),Ite=n(P0,"CODE",{});var WQr=s(Ite);BZe=r(WQr,"pretrained_model_name_or_path"),WQr.forEach(t),IZe=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nte=n(P0,"CODE",{});var QQr=s(Nte);NZe=r(QQr,"pretrained_model_name_or_path"),QQr.forEach(t),qZe=r(P0,":"),P0.forEach(t),jZe=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var zx=s(Sn);qte=n(zx,"STRONG",{});var HQr=s(qte);DZe=r(HQr,"albert"),HQr.forEach(t),GZe=r(zx," \u2014 "),lR=n(zx,"A",{href:!0});var UQr=s(lR);OZe=r(UQr,"AlbertTokenizer"),UQr.forEach(t),VZe=r(zx," or "),iR=n(zx,"A",{href:!0});var JQr=s(iR);XZe=r(JQr,"AlbertTokenizerFast"),JQr.forEach(t),zZe=r(zx," (ALBERT model)"),zx.forEach(t),WZe=i(S),Rn=n(S,"LI",{});var Wx=s(Rn);jte=n(Wx,"STRONG",{});var YQr=s(jte);QZe=r(YQr,"bart"),YQr.forEach(t),HZe=r(Wx," \u2014 "),dR=n(Wx,"A",{href:!0});var KQr=s(dR);UZe=r(KQr,"BartTokenizer"),KQr.forEach(t),JZe=r(Wx," or "),cR=n(Wx,"A",{href:!0});var ZQr=s(cR);YZe=r(ZQr,"BartTokenizerFast"),ZQr.forEach(t),KZe=r(Wx," (BART model)"),Wx.forEach(t),ZZe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);Dte=n(Qx,"STRONG",{});var eHr=s(Dte);eeo=r(eHr,"barthez"),eHr.forEach(t),oeo=r(Qx," \u2014 "),fR=n(Qx,"A",{href:!0});var oHr=s(fR);reo=r(oHr,"BarthezTokenizer"),oHr.forEach(t),teo=r(Qx," or "),mR=n(Qx,"A",{href:!0});var rHr=s(mR);aeo=r(rHr,"BarthezTokenizerFast"),rHr.forEach(t),neo=r(Qx," (BARThez model)"),Qx.forEach(t),seo=i(S),Lg=n(S,"LI",{});var k0e=s(Lg);Gte=n(k0e,"STRONG",{});var tHr=s(Gte);leo=r(tHr,"bartpho"),tHr.forEach(t),ieo=r(k0e," \u2014 "),gR=n(k0e,"A",{href:!0});var aHr=s(gR);deo=r(aHr,"BartphoTokenizer"),aHr.forEach(t),ceo=r(k0e," (BARTpho model)"),k0e.forEach(t),feo=i(S),Bn=n(S,"LI",{});var Hx=s(Bn);Ote=n(Hx,"STRONG",{});var nHr=s(Ote);meo=r(nHr,"bert"),nHr.forEach(t),geo=r(Hx," \u2014 "),hR=n(Hx,"A",{href:!0});var sHr=s(hR);heo=r(sHr,"BertTokenizer"),sHr.forEach(t),peo=r(Hx," or "),pR=n(Hx,"A",{href:!0});var lHr=s(pR);ueo=r(lHr,"BertTokenizerFast"),lHr.forEach(t),_eo=r(Hx," (BERT model)"),Hx.forEach(t),beo=i(S),xg=n(S,"LI",{});var S0e=s(xg);Vte=n(S0e,"STRONG",{});var iHr=s(Vte);veo=r(iHr,"bert-generation"),iHr.forEach(t),Feo=r(S0e," \u2014 "),uR=n(S0e,"A",{href:!0});var dHr=s(uR);Teo=r(dHr,"BertGenerationTokenizer"),dHr.forEach(t),Meo=r(S0e," (Bert Generation model)"),S0e.forEach(t),Eeo=i(S),$g=n(S,"LI",{});var R0e=s($g);Xte=n(R0e,"STRONG",{});var cHr=s(Xte);Ceo=r(cHr,"bert-japanese"),cHr.forEach(t),weo=r(R0e," \u2014 "),_R=n(R0e,"A",{href:!0});var fHr=s(_R);Aeo=r(fHr,"BertJapaneseTokenizer"),fHr.forEach(t),yeo=r(R0e," (BertJapanese model)"),R0e.forEach(t),Leo=i(S),kg=n(S,"LI",{});var P0e=s(kg);zte=n(P0e,"STRONG",{});var mHr=s(zte);xeo=r(mHr,"bertweet"),mHr.forEach(t),$eo=r(P0e," \u2014 "),bR=n(P0e,"A",{href:!0});var gHr=s(bR);keo=r(gHr,"BertweetTokenizer"),gHr.forEach(t),Seo=r(P0e," (Bertweet model)"),P0e.forEach(t),Reo=i(S),In=n(S,"LI",{});var Ux=s(In);Wte=n(Ux,"STRONG",{});var hHr=s(Wte);Peo=r(hHr,"big_bird"),hHr.forEach(t),Beo=r(Ux," \u2014 "),vR=n(Ux,"A",{href:!0});var pHr=s(vR);Ieo=r(pHr,"BigBirdTokenizer"),pHr.forEach(t),Neo=r(Ux," or "),FR=n(Ux,"A",{href:!0});var uHr=s(FR);qeo=r(uHr,"BigBirdTokenizerFast"),uHr.forEach(t),jeo=r(Ux," (BigBird model)"),Ux.forEach(t),Deo=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);Qte=n(Jx,"STRONG",{});var _Hr=s(Qte);Geo=r(_Hr,"bigbird_pegasus"),_Hr.forEach(t),Oeo=r(Jx," \u2014 "),TR=n(Jx,"A",{href:!0});var bHr=s(TR);Veo=r(bHr,"PegasusTokenizer"),bHr.forEach(t),Xeo=r(Jx," or "),MR=n(Jx,"A",{href:!0});var vHr=s(MR);zeo=r(vHr,"PegasusTokenizerFast"),vHr.forEach(t),Weo=r(Jx," (BigBirdPegasus model)"),Jx.forEach(t),Qeo=i(S),qn=n(S,"LI",{});var Yx=s(qn);Hte=n(Yx,"STRONG",{});var FHr=s(Hte);Heo=r(FHr,"blenderbot"),FHr.forEach(t),Ueo=r(Yx," \u2014 "),ER=n(Yx,"A",{href:!0});var THr=s(ER);Jeo=r(THr,"BlenderbotTokenizer"),THr.forEach(t),Yeo=r(Yx," or "),CR=n(Yx,"A",{href:!0});var MHr=s(CR);Keo=r(MHr,"BlenderbotTokenizerFast"),MHr.forEach(t),Zeo=r(Yx," (Blenderbot model)"),Yx.forEach(t),eoo=i(S),Sg=n(S,"LI",{});var B0e=s(Sg);Ute=n(B0e,"STRONG",{});var EHr=s(Ute);ooo=r(EHr,"blenderbot-small"),EHr.forEach(t),roo=r(B0e," \u2014 "),wR=n(B0e,"A",{href:!0});var CHr=s(wR);too=r(CHr,"BlenderbotSmallTokenizer"),CHr.forEach(t),aoo=r(B0e," (BlenderbotSmall model)"),B0e.forEach(t),noo=i(S),Rg=n(S,"LI",{});var I0e=s(Rg);Jte=n(I0e,"STRONG",{});var wHr=s(Jte);soo=r(wHr,"byt5"),wHr.forEach(t),loo=r(I0e," \u2014 "),AR=n(I0e,"A",{href:!0});var AHr=s(AR);ioo=r(AHr,"ByT5Tokenizer"),AHr.forEach(t),doo=r(I0e," (ByT5 model)"),I0e.forEach(t),coo=i(S),jn=n(S,"LI",{});var Kx=s(jn);Yte=n(Kx,"STRONG",{});var yHr=s(Yte);foo=r(yHr,"camembert"),yHr.forEach(t),moo=r(Kx," \u2014 "),yR=n(Kx,"A",{href:!0});var LHr=s(yR);goo=r(LHr,"CamembertTokenizer"),LHr.forEach(t),hoo=r(Kx," or "),LR=n(Kx,"A",{href:!0});var xHr=s(LR);poo=r(xHr,"CamembertTokenizerFast"),xHr.forEach(t),uoo=r(Kx," (CamemBERT model)"),Kx.forEach(t),_oo=i(S),Pg=n(S,"LI",{});var N0e=s(Pg);Kte=n(N0e,"STRONG",{});var $Hr=s(Kte);boo=r($Hr,"canine"),$Hr.forEach(t),voo=r(N0e," \u2014 "),xR=n(N0e,"A",{href:!0});var kHr=s(xR);Foo=r(kHr,"CanineTokenizer"),kHr.forEach(t),Too=r(N0e," (Canine model)"),N0e.forEach(t),Moo=i(S),Dn=n(S,"LI",{});var Zx=s(Dn);Zte=n(Zx,"STRONG",{});var SHr=s(Zte);Eoo=r(SHr,"clip"),SHr.forEach(t),Coo=r(Zx," \u2014 "),$R=n(Zx,"A",{href:!0});var RHr=s($R);woo=r(RHr,"CLIPTokenizer"),RHr.forEach(t),Aoo=r(Zx," or "),kR=n(Zx,"A",{href:!0});var PHr=s(kR);yoo=r(PHr,"CLIPTokenizerFast"),PHr.forEach(t),Loo=r(Zx," (CLIP model)"),Zx.forEach(t),xoo=i(S),Gn=n(S,"LI",{});var e$=s(Gn);eae=n(e$,"STRONG",{});var BHr=s(eae);$oo=r(BHr,"convbert"),BHr.forEach(t),koo=r(e$," \u2014 "),SR=n(e$,"A",{href:!0});var IHr=s(SR);Soo=r(IHr,"ConvBertTokenizer"),IHr.forEach(t),Roo=r(e$," or "),RR=n(e$,"A",{href:!0});var NHr=s(RR);Poo=r(NHr,"ConvBertTokenizerFast"),NHr.forEach(t),Boo=r(e$," (ConvBERT model)"),e$.forEach(t),Ioo=i(S),On=n(S,"LI",{});var o$=s(On);oae=n(o$,"STRONG",{});var qHr=s(oae);Noo=r(qHr,"cpm"),qHr.forEach(t),qoo=r(o$," \u2014 "),PR=n(o$,"A",{href:!0});var jHr=s(PR);joo=r(jHr,"CpmTokenizer"),jHr.forEach(t),Doo=r(o$," or "),BR=n(o$,"A",{href:!0});var DHr=s(BR);Goo=r(DHr,"CpmTokenizerFast"),DHr.forEach(t),Ooo=r(o$," (CPM model)"),o$.forEach(t),Voo=i(S),Bg=n(S,"LI",{});var q0e=s(Bg);rae=n(q0e,"STRONG",{});var GHr=s(rae);Xoo=r(GHr,"ctrl"),GHr.forEach(t),zoo=r(q0e," \u2014 "),IR=n(q0e,"A",{href:!0});var OHr=s(IR);Woo=r(OHr,"CTRLTokenizer"),OHr.forEach(t),Qoo=r(q0e," (CTRL model)"),q0e.forEach(t),Hoo=i(S),Vn=n(S,"LI",{});var r$=s(Vn);tae=n(r$,"STRONG",{});var VHr=s(tae);Uoo=r(VHr,"data2vec-text"),VHr.forEach(t),Joo=r(r$," \u2014 "),NR=n(r$,"A",{href:!0});var XHr=s(NR);Yoo=r(XHr,"RobertaTokenizer"),XHr.forEach(t),Koo=r(r$," or "),qR=n(r$,"A",{href:!0});var zHr=s(qR);Zoo=r(zHr,"RobertaTokenizerFast"),zHr.forEach(t),ero=r(r$," (Data2VecText model)"),r$.forEach(t),oro=i(S),Xn=n(S,"LI",{});var t$=s(Xn);aae=n(t$,"STRONG",{});var WHr=s(aae);rro=r(WHr,"deberta"),WHr.forEach(t),tro=r(t$," \u2014 "),jR=n(t$,"A",{href:!0});var QHr=s(jR);aro=r(QHr,"DebertaTokenizer"),QHr.forEach(t),nro=r(t$," or "),DR=n(t$,"A",{href:!0});var HHr=s(DR);sro=r(HHr,"DebertaTokenizerFast"),HHr.forEach(t),lro=r(t$," (DeBERTa model)"),t$.forEach(t),iro=i(S),zn=n(S,"LI",{});var a$=s(zn);nae=n(a$,"STRONG",{});var UHr=s(nae);dro=r(UHr,"deberta-v2"),UHr.forEach(t),cro=r(a$," \u2014 "),GR=n(a$,"A",{href:!0});var JHr=s(GR);fro=r(JHr,"DebertaV2Tokenizer"),JHr.forEach(t),mro=r(a$," or "),OR=n(a$,"A",{href:!0});var YHr=s(OR);gro=r(YHr,"DebertaV2TokenizerFast"),YHr.forEach(t),hro=r(a$," (DeBERTa-v2 model)"),a$.forEach(t),pro=i(S),Wn=n(S,"LI",{});var n$=s(Wn);sae=n(n$,"STRONG",{});var KHr=s(sae);uro=r(KHr,"distilbert"),KHr.forEach(t),_ro=r(n$," \u2014 "),VR=n(n$,"A",{href:!0});var ZHr=s(VR);bro=r(ZHr,"DistilBertTokenizer"),ZHr.forEach(t),vro=r(n$," or "),XR=n(n$,"A",{href:!0});var eUr=s(XR);Fro=r(eUr,"DistilBertTokenizerFast"),eUr.forEach(t),Tro=r(n$," (DistilBERT model)"),n$.forEach(t),Mro=i(S),Qn=n(S,"LI",{});var s$=s(Qn);lae=n(s$,"STRONG",{});var oUr=s(lae);Ero=r(oUr,"dpr"),oUr.forEach(t),Cro=r(s$," \u2014 "),zR=n(s$,"A",{href:!0});var rUr=s(zR);wro=r(rUr,"DPRQuestionEncoderTokenizer"),rUr.forEach(t),Aro=r(s$," or "),WR=n(s$,"A",{href:!0});var tUr=s(WR);yro=r(tUr,"DPRQuestionEncoderTokenizerFast"),tUr.forEach(t),Lro=r(s$," (DPR model)"),s$.forEach(t),xro=i(S),Hn=n(S,"LI",{});var l$=s(Hn);iae=n(l$,"STRONG",{});var aUr=s(iae);$ro=r(aUr,"electra"),aUr.forEach(t),kro=r(l$," \u2014 "),QR=n(l$,"A",{href:!0});var nUr=s(QR);Sro=r(nUr,"ElectraTokenizer"),nUr.forEach(t),Rro=r(l$," or "),HR=n(l$,"A",{href:!0});var sUr=s(HR);Pro=r(sUr,"ElectraTokenizerFast"),sUr.forEach(t),Bro=r(l$," (ELECTRA model)"),l$.forEach(t),Iro=i(S),Ig=n(S,"LI",{});var j0e=s(Ig);dae=n(j0e,"STRONG",{});var lUr=s(dae);Nro=r(lUr,"flaubert"),lUr.forEach(t),qro=r(j0e," \u2014 "),UR=n(j0e,"A",{href:!0});var iUr=s(UR);jro=r(iUr,"FlaubertTokenizer"),iUr.forEach(t),Dro=r(j0e," (FlauBERT model)"),j0e.forEach(t),Gro=i(S),Un=n(S,"LI",{});var i$=s(Un);cae=n(i$,"STRONG",{});var dUr=s(cae);Oro=r(dUr,"fnet"),dUr.forEach(t),Vro=r(i$," \u2014 "),JR=n(i$,"A",{href:!0});var cUr=s(JR);Xro=r(cUr,"FNetTokenizer"),cUr.forEach(t),zro=r(i$," or "),YR=n(i$,"A",{href:!0});var fUr=s(YR);Wro=r(fUr,"FNetTokenizerFast"),fUr.forEach(t),Qro=r(i$," (FNet model)"),i$.forEach(t),Hro=i(S),Ng=n(S,"LI",{});var D0e=s(Ng);fae=n(D0e,"STRONG",{});var mUr=s(fae);Uro=r(mUr,"fsmt"),mUr.forEach(t),Jro=r(D0e," \u2014 "),KR=n(D0e,"A",{href:!0});var gUr=s(KR);Yro=r(gUr,"FSMTTokenizer"),gUr.forEach(t),Kro=r(D0e," (FairSeq Machine-Translation model)"),D0e.forEach(t),Zro=i(S),Jn=n(S,"LI",{});var d$=s(Jn);mae=n(d$,"STRONG",{});var hUr=s(mae);eto=r(hUr,"funnel"),hUr.forEach(t),oto=r(d$," \u2014 "),ZR=n(d$,"A",{href:!0});var pUr=s(ZR);rto=r(pUr,"FunnelTokenizer"),pUr.forEach(t),tto=r(d$," or "),eP=n(d$,"A",{href:!0});var uUr=s(eP);ato=r(uUr,"FunnelTokenizerFast"),uUr.forEach(t),nto=r(d$," (Funnel Transformer model)"),d$.forEach(t),sto=i(S),Yn=n(S,"LI",{});var c$=s(Yn);gae=n(c$,"STRONG",{});var _Ur=s(gae);lto=r(_Ur,"gpt2"),_Ur.forEach(t),ito=r(c$," \u2014 "),oP=n(c$,"A",{href:!0});var bUr=s(oP);dto=r(bUr,"GPT2Tokenizer"),bUr.forEach(t),cto=r(c$," or "),rP=n(c$,"A",{href:!0});var vUr=s(rP);fto=r(vUr,"GPT2TokenizerFast"),vUr.forEach(t),mto=r(c$," (OpenAI GPT-2 model)"),c$.forEach(t),gto=i(S),Kn=n(S,"LI",{});var f$=s(Kn);hae=n(f$,"STRONG",{});var FUr=s(hae);hto=r(FUr,"gpt_neo"),FUr.forEach(t),pto=r(f$," \u2014 "),tP=n(f$,"A",{href:!0});var TUr=s(tP);uto=r(TUr,"GPT2Tokenizer"),TUr.forEach(t),_to=r(f$," or "),aP=n(f$,"A",{href:!0});var MUr=s(aP);bto=r(MUr,"GPT2TokenizerFast"),MUr.forEach(t),vto=r(f$," (GPT Neo model)"),f$.forEach(t),Fto=i(S),qg=n(S,"LI",{});var G0e=s(qg);pae=n(G0e,"STRONG",{});var EUr=s(pae);Tto=r(EUr,"gpt_neox"),EUr.forEach(t),Mto=r(G0e," \u2014 "),nP=n(G0e,"A",{href:!0});var CUr=s(nP);Eto=r(CUr,"GPTNeoXTokenizerFast"),CUr.forEach(t),Cto=r(G0e," (GPT NeoX model)"),G0e.forEach(t),wto=i(S),Zn=n(S,"LI",{});var m$=s(Zn);uae=n(m$,"STRONG",{});var wUr=s(uae);Ato=r(wUr,"gptj"),wUr.forEach(t),yto=r(m$," \u2014 "),sP=n(m$,"A",{href:!0});var AUr=s(sP);Lto=r(AUr,"GPT2Tokenizer"),AUr.forEach(t),xto=r(m$," or "),lP=n(m$,"A",{href:!0});var yUr=s(lP);$to=r(yUr,"GPT2TokenizerFast"),yUr.forEach(t),kto=r(m$," (GPT-J model)"),m$.forEach(t),Sto=i(S),es=n(S,"LI",{});var g$=s(es);_ae=n(g$,"STRONG",{});var LUr=s(_ae);Rto=r(LUr,"groupvit"),LUr.forEach(t),Pto=r(g$," \u2014 "),iP=n(g$,"A",{href:!0});var xUr=s(iP);Bto=r(xUr,"CLIPTokenizer"),xUr.forEach(t),Ito=r(g$," or "),dP=n(g$,"A",{href:!0});var $Ur=s(dP);Nto=r($Ur,"CLIPTokenizerFast"),$Ur.forEach(t),qto=r(g$," (GroupViT model)"),g$.forEach(t),jto=i(S),os=n(S,"LI",{});var h$=s(os);bae=n(h$,"STRONG",{});var kUr=s(bae);Dto=r(kUr,"herbert"),kUr.forEach(t),Gto=r(h$," \u2014 "),cP=n(h$,"A",{href:!0});var SUr=s(cP);Oto=r(SUr,"HerbertTokenizer"),SUr.forEach(t),Vto=r(h$," or "),fP=n(h$,"A",{href:!0});var RUr=s(fP);Xto=r(RUr,"HerbertTokenizerFast"),RUr.forEach(t),zto=r(h$," (HerBERT model)"),h$.forEach(t),Wto=i(S),jg=n(S,"LI",{});var O0e=s(jg);vae=n(O0e,"STRONG",{});var PUr=s(vae);Qto=r(PUr,"hubert"),PUr.forEach(t),Hto=r(O0e," \u2014 "),mP=n(O0e,"A",{href:!0});var BUr=s(mP);Uto=r(BUr,"Wav2Vec2CTCTokenizer"),BUr.forEach(t),Jto=r(O0e," (Hubert model)"),O0e.forEach(t),Yto=i(S),rs=n(S,"LI",{});var p$=s(rs);Fae=n(p$,"STRONG",{});var IUr=s(Fae);Kto=r(IUr,"ibert"),IUr.forEach(t),Zto=r(p$," \u2014 "),gP=n(p$,"A",{href:!0});var NUr=s(gP);eao=r(NUr,"RobertaTokenizer"),NUr.forEach(t),oao=r(p$," or "),hP=n(p$,"A",{href:!0});var qUr=s(hP);rao=r(qUr,"RobertaTokenizerFast"),qUr.forEach(t),tao=r(p$," (I-BERT model)"),p$.forEach(t),aao=i(S),ts=n(S,"LI",{});var u$=s(ts);Tae=n(u$,"STRONG",{});var jUr=s(Tae);nao=r(jUr,"layoutlm"),jUr.forEach(t),sao=r(u$," \u2014 "),pP=n(u$,"A",{href:!0});var DUr=s(pP);lao=r(DUr,"LayoutLMTokenizer"),DUr.forEach(t),iao=r(u$," or "),uP=n(u$,"A",{href:!0});var GUr=s(uP);dao=r(GUr,"LayoutLMTokenizerFast"),GUr.forEach(t),cao=r(u$," (LayoutLM model)"),u$.forEach(t),fao=i(S),as=n(S,"LI",{});var _$=s(as);Mae=n(_$,"STRONG",{});var OUr=s(Mae);mao=r(OUr,"layoutlmv2"),OUr.forEach(t),gao=r(_$," \u2014 "),_P=n(_$,"A",{href:!0});var VUr=s(_P);hao=r(VUr,"LayoutLMv2Tokenizer"),VUr.forEach(t),pao=r(_$," or "),bP=n(_$,"A",{href:!0});var XUr=s(bP);uao=r(XUr,"LayoutLMv2TokenizerFast"),XUr.forEach(t),_ao=r(_$," (LayoutLMv2 model)"),_$.forEach(t),bao=i(S),ns=n(S,"LI",{});var b$=s(ns);Eae=n(b$,"STRONG",{});var zUr=s(Eae);vao=r(zUr,"layoutlmv3"),zUr.forEach(t),Fao=r(b$," \u2014 "),vP=n(b$,"A",{href:!0});var WUr=s(vP);Tao=r(WUr,"LayoutLMv3Tokenizer"),WUr.forEach(t),Mao=r(b$," or "),FP=n(b$,"A",{href:!0});var QUr=s(FP);Eao=r(QUr,"LayoutLMv3TokenizerFast"),QUr.forEach(t),Cao=r(b$," (LayoutLMv3 model)"),b$.forEach(t),wao=i(S),ss=n(S,"LI",{});var v$=s(ss);Cae=n(v$,"STRONG",{});var HUr=s(Cae);Aao=r(HUr,"layoutxlm"),HUr.forEach(t),yao=r(v$," \u2014 "),TP=n(v$,"A",{href:!0});var UUr=s(TP);Lao=r(UUr,"LayoutXLMTokenizer"),UUr.forEach(t),xao=r(v$," or "),MP=n(v$,"A",{href:!0});var JUr=s(MP);$ao=r(JUr,"LayoutXLMTokenizerFast"),JUr.forEach(t),kao=r(v$," (LayoutXLM model)"),v$.forEach(t),Sao=i(S),ls=n(S,"LI",{});var F$=s(ls);wae=n(F$,"STRONG",{});var YUr=s(wae);Rao=r(YUr,"led"),YUr.forEach(t),Pao=r(F$," \u2014 "),EP=n(F$,"A",{href:!0});var KUr=s(EP);Bao=r(KUr,"LEDTokenizer"),KUr.forEach(t),Iao=r(F$," or "),CP=n(F$,"A",{href:!0});var ZUr=s(CP);Nao=r(ZUr,"LEDTokenizerFast"),ZUr.forEach(t),qao=r(F$," (LED model)"),F$.forEach(t),jao=i(S),is=n(S,"LI",{});var T$=s(is);Aae=n(T$,"STRONG",{});var eJr=s(Aae);Dao=r(eJr,"longformer"),eJr.forEach(t),Gao=r(T$," \u2014 "),wP=n(T$,"A",{href:!0});var oJr=s(wP);Oao=r(oJr,"LongformerTokenizer"),oJr.forEach(t),Vao=r(T$," or "),AP=n(T$,"A",{href:!0});var rJr=s(AP);Xao=r(rJr,"LongformerTokenizerFast"),rJr.forEach(t),zao=r(T$," (Longformer model)"),T$.forEach(t),Wao=i(S),Dg=n(S,"LI",{});var V0e=s(Dg);yae=n(V0e,"STRONG",{});var tJr=s(yae);Qao=r(tJr,"luke"),tJr.forEach(t),Hao=r(V0e," \u2014 "),yP=n(V0e,"A",{href:!0});var aJr=s(yP);Uao=r(aJr,"LukeTokenizer"),aJr.forEach(t),Jao=r(V0e," (LUKE model)"),V0e.forEach(t),Yao=i(S),ds=n(S,"LI",{});var M$=s(ds);Lae=n(M$,"STRONG",{});var nJr=s(Lae);Kao=r(nJr,"lxmert"),nJr.forEach(t),Zao=r(M$," \u2014 "),LP=n(M$,"A",{href:!0});var sJr=s(LP);eno=r(sJr,"LxmertTokenizer"),sJr.forEach(t),ono=r(M$," or "),xP=n(M$,"A",{href:!0});var lJr=s(xP);rno=r(lJr,"LxmertTokenizerFast"),lJr.forEach(t),tno=r(M$," (LXMERT model)"),M$.forEach(t),ano=i(S),Gg=n(S,"LI",{});var X0e=s(Gg);xae=n(X0e,"STRONG",{});var iJr=s(xae);nno=r(iJr,"m2m_100"),iJr.forEach(t),sno=r(X0e," \u2014 "),$P=n(X0e,"A",{href:!0});var dJr=s($P);lno=r(dJr,"M2M100Tokenizer"),dJr.forEach(t),ino=r(X0e," (M2M100 model)"),X0e.forEach(t),dno=i(S),Og=n(S,"LI",{});var z0e=s(Og);$ae=n(z0e,"STRONG",{});var cJr=s($ae);cno=r(cJr,"marian"),cJr.forEach(t),fno=r(z0e," \u2014 "),kP=n(z0e,"A",{href:!0});var fJr=s(kP);mno=r(fJr,"MarianTokenizer"),fJr.forEach(t),gno=r(z0e," (Marian model)"),z0e.forEach(t),hno=i(S),cs=n(S,"LI",{});var E$=s(cs);kae=n(E$,"STRONG",{});var mJr=s(kae);pno=r(mJr,"mbart"),mJr.forEach(t),uno=r(E$," \u2014 "),SP=n(E$,"A",{href:!0});var gJr=s(SP);_no=r(gJr,"MBartTokenizer"),gJr.forEach(t),bno=r(E$," or "),RP=n(E$,"A",{href:!0});var hJr=s(RP);vno=r(hJr,"MBartTokenizerFast"),hJr.forEach(t),Fno=r(E$," (mBART model)"),E$.forEach(t),Tno=i(S),fs=n(S,"LI",{});var C$=s(fs);Sae=n(C$,"STRONG",{});var pJr=s(Sae);Mno=r(pJr,"mbart50"),pJr.forEach(t),Eno=r(C$," \u2014 "),PP=n(C$,"A",{href:!0});var uJr=s(PP);Cno=r(uJr,"MBart50Tokenizer"),uJr.forEach(t),wno=r(C$," or "),BP=n(C$,"A",{href:!0});var _Jr=s(BP);Ano=r(_Jr,"MBart50TokenizerFast"),_Jr.forEach(t),yno=r(C$," (mBART-50 model)"),C$.forEach(t),Lno=i(S),ms=n(S,"LI",{});var w$=s(ms);Rae=n(w$,"STRONG",{});var bJr=s(Rae);xno=r(bJr,"megatron-bert"),bJr.forEach(t),$no=r(w$," \u2014 "),IP=n(w$,"A",{href:!0});var vJr=s(IP);kno=r(vJr,"BertTokenizer"),vJr.forEach(t),Sno=r(w$," or "),NP=n(w$,"A",{href:!0});var FJr=s(NP);Rno=r(FJr,"BertTokenizerFast"),FJr.forEach(t),Pno=r(w$," (MegatronBert model)"),w$.forEach(t),Bno=i(S),Vg=n(S,"LI",{});var W0e=s(Vg);Pae=n(W0e,"STRONG",{});var TJr=s(Pae);Ino=r(TJr,"mluke"),TJr.forEach(t),Nno=r(W0e," \u2014 "),qP=n(W0e,"A",{href:!0});var MJr=s(qP);qno=r(MJr,"MLukeTokenizer"),MJr.forEach(t),jno=r(W0e," (mLUKE model)"),W0e.forEach(t),Dno=i(S),gs=n(S,"LI",{});var A$=s(gs);Bae=n(A$,"STRONG",{});var EJr=s(Bae);Gno=r(EJr,"mobilebert"),EJr.forEach(t),Ono=r(A$," \u2014 "),jP=n(A$,"A",{href:!0});var CJr=s(jP);Vno=r(CJr,"MobileBertTokenizer"),CJr.forEach(t),Xno=r(A$," or "),DP=n(A$,"A",{href:!0});var wJr=s(DP);zno=r(wJr,"MobileBertTokenizerFast"),wJr.forEach(t),Wno=r(A$," (MobileBERT model)"),A$.forEach(t),Qno=i(S),hs=n(S,"LI",{});var y$=s(hs);Iae=n(y$,"STRONG",{});var AJr=s(Iae);Hno=r(AJr,"mpnet"),AJr.forEach(t),Uno=r(y$," \u2014 "),GP=n(y$,"A",{href:!0});var yJr=s(GP);Jno=r(yJr,"MPNetTokenizer"),yJr.forEach(t),Yno=r(y$," or "),OP=n(y$,"A",{href:!0});var LJr=s(OP);Kno=r(LJr,"MPNetTokenizerFast"),LJr.forEach(t),Zno=r(y$," (MPNet model)"),y$.forEach(t),eso=i(S),ps=n(S,"LI",{});var L$=s(ps);Nae=n(L$,"STRONG",{});var xJr=s(Nae);oso=r(xJr,"mt5"),xJr.forEach(t),rso=r(L$," \u2014 "),VP=n(L$,"A",{href:!0});var $Jr=s(VP);tso=r($Jr,"MT5Tokenizer"),$Jr.forEach(t),aso=r(L$," or "),XP=n(L$,"A",{href:!0});var kJr=s(XP);nso=r(kJr,"MT5TokenizerFast"),kJr.forEach(t),sso=r(L$," (mT5 model)"),L$.forEach(t),lso=i(S),us=n(S,"LI",{});var x$=s(us);qae=n(x$,"STRONG",{});var SJr=s(qae);iso=r(SJr,"nystromformer"),SJr.forEach(t),dso=r(x$," \u2014 "),zP=n(x$,"A",{href:!0});var RJr=s(zP);cso=r(RJr,"AlbertTokenizer"),RJr.forEach(t),fso=r(x$," or "),WP=n(x$,"A",{href:!0});var PJr=s(WP);mso=r(PJr,"AlbertTokenizerFast"),PJr.forEach(t),gso=r(x$," (Nystromformer model)"),x$.forEach(t),hso=i(S),_s=n(S,"LI",{});var $$=s(_s);jae=n($$,"STRONG",{});var BJr=s(jae);pso=r(BJr,"openai-gpt"),BJr.forEach(t),uso=r($$," \u2014 "),QP=n($$,"A",{href:!0});var IJr=s(QP);_so=r(IJr,"OpenAIGPTTokenizer"),IJr.forEach(t),bso=r($$," or "),HP=n($$,"A",{href:!0});var NJr=s(HP);vso=r(NJr,"OpenAIGPTTokenizerFast"),NJr.forEach(t),Fso=r($$," (OpenAI GPT model)"),$$.forEach(t),Tso=i(S),Xg=n(S,"LI",{});var Q0e=s(Xg);Dae=n(Q0e,"STRONG",{});var qJr=s(Dae);Mso=r(qJr,"opt"),qJr.forEach(t),Eso=r(Q0e," \u2014 "),UP=n(Q0e,"A",{href:!0});var jJr=s(UP);Cso=r(jJr,"GPT2Tokenizer"),jJr.forEach(t),wso=r(Q0e," (OPT model)"),Q0e.forEach(t),Aso=i(S),bs=n(S,"LI",{});var k$=s(bs);Gae=n(k$,"STRONG",{});var DJr=s(Gae);yso=r(DJr,"pegasus"),DJr.forEach(t),Lso=r(k$," \u2014 "),JP=n(k$,"A",{href:!0});var GJr=s(JP);xso=r(GJr,"PegasusTokenizer"),GJr.forEach(t),$so=r(k$," or "),YP=n(k$,"A",{href:!0});var OJr=s(YP);kso=r(OJr,"PegasusTokenizerFast"),OJr.forEach(t),Sso=r(k$," (Pegasus model)"),k$.forEach(t),Rso=i(S),zg=n(S,"LI",{});var H0e=s(zg);Oae=n(H0e,"STRONG",{});var VJr=s(Oae);Pso=r(VJr,"perceiver"),VJr.forEach(t),Bso=r(H0e," \u2014 "),KP=n(H0e,"A",{href:!0});var XJr=s(KP);Iso=r(XJr,"PerceiverTokenizer"),XJr.forEach(t),Nso=r(H0e," (Perceiver model)"),H0e.forEach(t),qso=i(S),Wg=n(S,"LI",{});var U0e=s(Wg);Vae=n(U0e,"STRONG",{});var zJr=s(Vae);jso=r(zJr,"phobert"),zJr.forEach(t),Dso=r(U0e," \u2014 "),ZP=n(U0e,"A",{href:!0});var WJr=s(ZP);Gso=r(WJr,"PhobertTokenizer"),WJr.forEach(t),Oso=r(U0e," (PhoBERT model)"),U0e.forEach(t),Vso=i(S),Qg=n(S,"LI",{});var J0e=s(Qg);Xae=n(J0e,"STRONG",{});var QJr=s(Xae);Xso=r(QJr,"plbart"),QJr.forEach(t),zso=r(J0e," \u2014 "),eB=n(J0e,"A",{href:!0});var HJr=s(eB);Wso=r(HJr,"PLBartTokenizer"),HJr.forEach(t),Qso=r(J0e," (PLBart model)"),J0e.forEach(t),Hso=i(S),Hg=n(S,"LI",{});var Y0e=s(Hg);zae=n(Y0e,"STRONG",{});var UJr=s(zae);Uso=r(UJr,"prophetnet"),UJr.forEach(t),Jso=r(Y0e," \u2014 "),oB=n(Y0e,"A",{href:!0});var JJr=s(oB);Yso=r(JJr,"ProphetNetTokenizer"),JJr.forEach(t),Kso=r(Y0e," (ProphetNet model)"),Y0e.forEach(t),Zso=i(S),vs=n(S,"LI",{});var S$=s(vs);Wae=n(S$,"STRONG",{});var YJr=s(Wae);elo=r(YJr,"qdqbert"),YJr.forEach(t),olo=r(S$," \u2014 "),rB=n(S$,"A",{href:!0});var KJr=s(rB);rlo=r(KJr,"BertTokenizer"),KJr.forEach(t),tlo=r(S$," or "),tB=n(S$,"A",{href:!0});var ZJr=s(tB);alo=r(ZJr,"BertTokenizerFast"),ZJr.forEach(t),nlo=r(S$," (QDQBert model)"),S$.forEach(t),slo=i(S),Ug=n(S,"LI",{});var K0e=s(Ug);Qae=n(K0e,"STRONG",{});var eYr=s(Qae);llo=r(eYr,"rag"),eYr.forEach(t),ilo=r(K0e," \u2014 "),aB=n(K0e,"A",{href:!0});var oYr=s(aB);dlo=r(oYr,"RagTokenizer"),oYr.forEach(t),clo=r(K0e," (RAG model)"),K0e.forEach(t),flo=i(S),Fs=n(S,"LI",{});var R$=s(Fs);Hae=n(R$,"STRONG",{});var rYr=s(Hae);mlo=r(rYr,"realm"),rYr.forEach(t),glo=r(R$," \u2014 "),nB=n(R$,"A",{href:!0});var tYr=s(nB);hlo=r(tYr,"RealmTokenizer"),tYr.forEach(t),plo=r(R$," or "),sB=n(R$,"A",{href:!0});var aYr=s(sB);ulo=r(aYr,"RealmTokenizerFast"),aYr.forEach(t),_lo=r(R$," (Realm model)"),R$.forEach(t),blo=i(S),Ts=n(S,"LI",{});var P$=s(Ts);Uae=n(P$,"STRONG",{});var nYr=s(Uae);vlo=r(nYr,"reformer"),nYr.forEach(t),Flo=r(P$," \u2014 "),lB=n(P$,"A",{href:!0});var sYr=s(lB);Tlo=r(sYr,"ReformerTokenizer"),sYr.forEach(t),Mlo=r(P$," or "),iB=n(P$,"A",{href:!0});var lYr=s(iB);Elo=r(lYr,"ReformerTokenizerFast"),lYr.forEach(t),Clo=r(P$," (Reformer model)"),P$.forEach(t),wlo=i(S),Ms=n(S,"LI",{});var B$=s(Ms);Jae=n(B$,"STRONG",{});var iYr=s(Jae);Alo=r(iYr,"rembert"),iYr.forEach(t),ylo=r(B$," \u2014 "),dB=n(B$,"A",{href:!0});var dYr=s(dB);Llo=r(dYr,"RemBertTokenizer"),dYr.forEach(t),xlo=r(B$," or "),cB=n(B$,"A",{href:!0});var cYr=s(cB);$lo=r(cYr,"RemBertTokenizerFast"),cYr.forEach(t),klo=r(B$," (RemBERT model)"),B$.forEach(t),Slo=i(S),Es=n(S,"LI",{});var I$=s(Es);Yae=n(I$,"STRONG",{});var fYr=s(Yae);Rlo=r(fYr,"retribert"),fYr.forEach(t),Plo=r(I$," \u2014 "),fB=n(I$,"A",{href:!0});var mYr=s(fB);Blo=r(mYr,"RetriBertTokenizer"),mYr.forEach(t),Ilo=r(I$," or "),mB=n(I$,"A",{href:!0});var gYr=s(mB);Nlo=r(gYr,"RetriBertTokenizerFast"),gYr.forEach(t),qlo=r(I$," (RetriBERT model)"),I$.forEach(t),jlo=i(S),Cs=n(S,"LI",{});var N$=s(Cs);Kae=n(N$,"STRONG",{});var hYr=s(Kae);Dlo=r(hYr,"roberta"),hYr.forEach(t),Glo=r(N$," \u2014 "),gB=n(N$,"A",{href:!0});var pYr=s(gB);Olo=r(pYr,"RobertaTokenizer"),pYr.forEach(t),Vlo=r(N$," or "),hB=n(N$,"A",{href:!0});var uYr=s(hB);Xlo=r(uYr,"RobertaTokenizerFast"),uYr.forEach(t),zlo=r(N$," (RoBERTa model)"),N$.forEach(t),Wlo=i(S),ws=n(S,"LI",{});var q$=s(ws);Zae=n(q$,"STRONG",{});var _Yr=s(Zae);Qlo=r(_Yr,"roformer"),_Yr.forEach(t),Hlo=r(q$," \u2014 "),pB=n(q$,"A",{href:!0});var bYr=s(pB);Ulo=r(bYr,"RoFormerTokenizer"),bYr.forEach(t),Jlo=r(q$," or "),uB=n(q$,"A",{href:!0});var vYr=s(uB);Ylo=r(vYr,"RoFormerTokenizerFast"),vYr.forEach(t),Klo=r(q$," (RoFormer model)"),q$.forEach(t),Zlo=i(S),Jg=n(S,"LI",{});var Z0e=s(Jg);ene=n(Z0e,"STRONG",{});var FYr=s(ene);eio=r(FYr,"speech_to_text"),FYr.forEach(t),oio=r(Z0e," \u2014 "),_B=n(Z0e,"A",{href:!0});var TYr=s(_B);rio=r(TYr,"Speech2TextTokenizer"),TYr.forEach(t),tio=r(Z0e," (Speech2Text model)"),Z0e.forEach(t),aio=i(S),Yg=n(S,"LI",{});var e6e=s(Yg);one=n(e6e,"STRONG",{});var MYr=s(one);nio=r(MYr,"speech_to_text_2"),MYr.forEach(t),sio=r(e6e," \u2014 "),bB=n(e6e,"A",{href:!0});var EYr=s(bB);lio=r(EYr,"Speech2Text2Tokenizer"),EYr.forEach(t),iio=r(e6e," (Speech2Text2 model)"),e6e.forEach(t),dio=i(S),As=n(S,"LI",{});var j$=s(As);rne=n(j$,"STRONG",{});var CYr=s(rne);cio=r(CYr,"splinter"),CYr.forEach(t),fio=r(j$," \u2014 "),vB=n(j$,"A",{href:!0});var wYr=s(vB);mio=r(wYr,"SplinterTokenizer"),wYr.forEach(t),gio=r(j$," or "),FB=n(j$,"A",{href:!0});var AYr=s(FB);hio=r(AYr,"SplinterTokenizerFast"),AYr.forEach(t),pio=r(j$," (Splinter model)"),j$.forEach(t),uio=i(S),ys=n(S,"LI",{});var D$=s(ys);tne=n(D$,"STRONG",{});var yYr=s(tne);_io=r(yYr,"squeezebert"),yYr.forEach(t),bio=r(D$," \u2014 "),TB=n(D$,"A",{href:!0});var LYr=s(TB);vio=r(LYr,"SqueezeBertTokenizer"),LYr.forEach(t),Fio=r(D$," or "),MB=n(D$,"A",{href:!0});var xYr=s(MB);Tio=r(xYr,"SqueezeBertTokenizerFast"),xYr.forEach(t),Mio=r(D$," (SqueezeBERT model)"),D$.forEach(t),Eio=i(S),Ls=n(S,"LI",{});var G$=s(Ls);ane=n(G$,"STRONG",{});var $Yr=s(ane);Cio=r($Yr,"t5"),$Yr.forEach(t),wio=r(G$," \u2014 "),EB=n(G$,"A",{href:!0});var kYr=s(EB);Aio=r(kYr,"T5Tokenizer"),kYr.forEach(t),yio=r(G$," or "),CB=n(G$,"A",{href:!0});var SYr=s(CB);Lio=r(SYr,"T5TokenizerFast"),SYr.forEach(t),xio=r(G$," (T5 model)"),G$.forEach(t),$io=i(S),Kg=n(S,"LI",{});var o6e=s(Kg);nne=n(o6e,"STRONG",{});var RYr=s(nne);kio=r(RYr,"tapas"),RYr.forEach(t),Sio=r(o6e," \u2014 "),wB=n(o6e,"A",{href:!0});var PYr=s(wB);Rio=r(PYr,"TapasTokenizer"),PYr.forEach(t),Pio=r(o6e," (TAPAS model)"),o6e.forEach(t),Bio=i(S),Zg=n(S,"LI",{});var r6e=s(Zg);sne=n(r6e,"STRONG",{});var BYr=s(sne);Iio=r(BYr,"tapex"),BYr.forEach(t),Nio=r(r6e," \u2014 "),AB=n(r6e,"A",{href:!0});var IYr=s(AB);qio=r(IYr,"TapexTokenizer"),IYr.forEach(t),jio=r(r6e," (TAPEX model)"),r6e.forEach(t),Dio=i(S),eh=n(S,"LI",{});var t6e=s(eh);lne=n(t6e,"STRONG",{});var NYr=s(lne);Gio=r(NYr,"transfo-xl"),NYr.forEach(t),Oio=r(t6e," \u2014 "),yB=n(t6e,"A",{href:!0});var qYr=s(yB);Vio=r(qYr,"TransfoXLTokenizer"),qYr.forEach(t),Xio=r(t6e," (Transformer-XL model)"),t6e.forEach(t),zio=i(S),xs=n(S,"LI",{});var O$=s(xs);ine=n(O$,"STRONG",{});var jYr=s(ine);Wio=r(jYr,"visual_bert"),jYr.forEach(t),Qio=r(O$," \u2014 "),LB=n(O$,"A",{href:!0});var DYr=s(LB);Hio=r(DYr,"BertTokenizer"),DYr.forEach(t),Uio=r(O$," or "),xB=n(O$,"A",{href:!0});var GYr=s(xB);Jio=r(GYr,"BertTokenizerFast"),GYr.forEach(t),Yio=r(O$," (VisualBert model)"),O$.forEach(t),Kio=i(S),oh=n(S,"LI",{});var a6e=s(oh);dne=n(a6e,"STRONG",{});var OYr=s(dne);Zio=r(OYr,"wav2vec2"),OYr.forEach(t),edo=r(a6e," \u2014 "),$B=n(a6e,"A",{href:!0});var VYr=s($B);odo=r(VYr,"Wav2Vec2CTCTokenizer"),VYr.forEach(t),rdo=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),tdo=i(S),rh=n(S,"LI",{});var n6e=s(rh);cne=n(n6e,"STRONG",{});var XYr=s(cne);ado=r(XYr,"wav2vec2-conformer"),XYr.forEach(t),ndo=r(n6e," \u2014 "),kB=n(n6e,"A",{href:!0});var zYr=s(kB);sdo=r(zYr,"Wav2Vec2CTCTokenizer"),zYr.forEach(t),ldo=r(n6e," (Wav2Vec2-Conformer model)"),n6e.forEach(t),ido=i(S),th=n(S,"LI",{});var s6e=s(th);fne=n(s6e,"STRONG",{});var WYr=s(fne);ddo=r(WYr,"wav2vec2_phoneme"),WYr.forEach(t),cdo=r(s6e," \u2014 "),SB=n(s6e,"A",{href:!0});var QYr=s(SB);fdo=r(QYr,"Wav2Vec2PhonemeCTCTokenizer"),QYr.forEach(t),mdo=r(s6e," (Wav2Vec2Phoneme model)"),s6e.forEach(t),gdo=i(S),$s=n(S,"LI",{});var V$=s($s);mne=n(V$,"STRONG",{});var HYr=s(mne);hdo=r(HYr,"xglm"),HYr.forEach(t),pdo=r(V$," \u2014 "),RB=n(V$,"A",{href:!0});var UYr=s(RB);udo=r(UYr,"XGLMTokenizer"),UYr.forEach(t),_do=r(V$," or "),PB=n(V$,"A",{href:!0});var JYr=s(PB);bdo=r(JYr,"XGLMTokenizerFast"),JYr.forEach(t),vdo=r(V$," (XGLM model)"),V$.forEach(t),Fdo=i(S),ah=n(S,"LI",{});var l6e=s(ah);gne=n(l6e,"STRONG",{});var YYr=s(gne);Tdo=r(YYr,"xlm"),YYr.forEach(t),Mdo=r(l6e," \u2014 "),BB=n(l6e,"A",{href:!0});var KYr=s(BB);Edo=r(KYr,"XLMTokenizer"),KYr.forEach(t),Cdo=r(l6e," (XLM model)"),l6e.forEach(t),wdo=i(S),nh=n(S,"LI",{});var i6e=s(nh);hne=n(i6e,"STRONG",{});var ZYr=s(hne);Ado=r(ZYr,"xlm-prophetnet"),ZYr.forEach(t),ydo=r(i6e," \u2014 "),IB=n(i6e,"A",{href:!0});var eKr=s(IB);Ldo=r(eKr,"XLMProphetNetTokenizer"),eKr.forEach(t),xdo=r(i6e," (XLMProphetNet model)"),i6e.forEach(t),$do=i(S),ks=n(S,"LI",{});var X$=s(ks);pne=n(X$,"STRONG",{});var oKr=s(pne);kdo=r(oKr,"xlm-roberta"),oKr.forEach(t),Sdo=r(X$," \u2014 "),NB=n(X$,"A",{href:!0});var rKr=s(NB);Rdo=r(rKr,"XLMRobertaTokenizer"),rKr.forEach(t),Pdo=r(X$," or "),qB=n(X$,"A",{href:!0});var tKr=s(qB);Bdo=r(tKr,"XLMRobertaTokenizerFast"),tKr.forEach(t),Ido=r(X$," (XLM-RoBERTa model)"),X$.forEach(t),Ndo=i(S),Ss=n(S,"LI",{});var z$=s(Ss);une=n(z$,"STRONG",{});var aKr=s(une);qdo=r(aKr,"xlm-roberta-xl"),aKr.forEach(t),jdo=r(z$," \u2014 "),jB=n(z$,"A",{href:!0});var nKr=s(jB);Ddo=r(nKr,"RobertaTokenizer"),nKr.forEach(t),Gdo=r(z$," or "),DB=n(z$,"A",{href:!0});var sKr=s(DB);Odo=r(sKr,"RobertaTokenizerFast"),sKr.forEach(t),Vdo=r(z$," (XLM-RoBERTa-XL model)"),z$.forEach(t),Xdo=i(S),Rs=n(S,"LI",{});var W$=s(Rs);_ne=n(W$,"STRONG",{});var lKr=s(_ne);zdo=r(lKr,"xlnet"),lKr.forEach(t),Wdo=r(W$," \u2014 "),GB=n(W$,"A",{href:!0});var iKr=s(GB);Qdo=r(iKr,"XLNetTokenizer"),iKr.forEach(t),Hdo=r(W$," or "),OB=n(W$,"A",{href:!0});var dKr=s(OB);Udo=r(dKr,"XLNetTokenizerFast"),dKr.forEach(t),Jdo=r(W$," (XLNet model)"),W$.forEach(t),Ydo=i(S),Ps=n(S,"LI",{});var Q$=s(Ps);bne=n(Q$,"STRONG",{});var cKr=s(bne);Kdo=r(cKr,"yoso"),cKr.forEach(t),Zdo=r(Q$," \u2014 "),VB=n(Q$,"A",{href:!0});var fKr=s(VB);eco=r(fKr,"AlbertTokenizer"),fKr.forEach(t),oco=r(Q$," or "),XB=n(Q$,"A",{href:!0});var mKr=s(XB);rco=r(mKr,"AlbertTokenizerFast"),mKr.forEach(t),tco=r(Q$," (YOSO model)"),Q$.forEach(t),S.forEach(t),aco=i(js),T(sh.$$.fragment,js),js.forEach(t),nco=i(qs),lh=n(qs,"DIV",{class:!0});var yDe=s(lh);T(zA.$$.fragment,yDe),sco=i(yDe),vne=n(yDe,"P",{});var gKr=s(vne);lco=r(gKr,"Register a new tokenizer in this mapping."),gKr.forEach(t),yDe.forEach(t),qs.forEach(t),Lqe=i(f),Ei=n(f,"H2",{class:!0});var LDe=s(Ei);ih=n(LDe,"A",{id:!0,class:!0,href:!0});var hKr=s(ih);Fne=n(hKr,"SPAN",{});var pKr=s(Fne);T(WA.$$.fragment,pKr),pKr.forEach(t),hKr.forEach(t),ico=i(LDe),Tne=n(LDe,"SPAN",{});var uKr=s(Tne);dco=r(uKr,"AutoFeatureExtractor"),uKr.forEach(t),LDe.forEach(t),xqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(QA.$$.fragment,Ds),cco=i(Ds),HA=n(Ds,"P",{});var xDe=s(HA);fco=r(xDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zB=n(xDe,"A",{href:!0});var _Kr=s(zB);mco=r(_Kr,"AutoFeatureExtractor.from_pretrained()"),_Kr.forEach(t),gco=r(xDe," class method."),xDe.forEach(t),hco=i(Ds),UA=n(Ds,"P",{});var $De=s(UA);pco=r($De,"This class cannot be instantiated directly using "),Mne=n($De,"CODE",{});var bKr=s(Mne);uco=r(bKr,"__init__()"),bKr.forEach(t),_co=r($De," (throws an error)."),$De.forEach(t),bco=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(JA.$$.fragment,Zt),vco=i(Zt),Ene=n(Zt,"P",{});var vKr=s(Ene);Fco=r(vKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vKr.forEach(t),Tco=i(Zt),ya=n(Zt,"P",{});var B0=s(ya);Mco=r(B0,"The feature extractor class to instantiate is selected based on the "),Cne=n(B0,"CODE",{});var FKr=s(Cne);Eco=r(FKr,"model_type"),FKr.forEach(t),Cco=r(B0,` property of the config object
(either passed as an argument or loaded from `),wne=n(B0,"CODE",{});var TKr=s(wne);wco=r(TKr,"pretrained_model_name_or_path"),TKr.forEach(t),Aco=r(B0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ane=n(B0,"CODE",{});var MKr=s(Ane);yco=r(MKr,"pretrained_model_name_or_path"),MKr.forEach(t),Lco=r(B0,":"),B0.forEach(t),xco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var d6e=s(dh);yne=n(d6e,"STRONG",{});var EKr=s(yne);$co=r(EKr,"beit"),EKr.forEach(t),kco=r(d6e," \u2014 "),WB=n(d6e,"A",{href:!0});var CKr=s(WB);Sco=r(CKr,"BeitFeatureExtractor"),CKr.forEach(t),Rco=r(d6e," (BEiT model)"),d6e.forEach(t),Pco=i(Z),ch=n(Z,"LI",{});var c6e=s(ch);Lne=n(c6e,"STRONG",{});var wKr=s(Lne);Bco=r(wKr,"clip"),wKr.forEach(t),Ico=r(c6e," \u2014 "),QB=n(c6e,"A",{href:!0});var AKr=s(QB);Nco=r(AKr,"CLIPFeatureExtractor"),AKr.forEach(t),qco=r(c6e," (CLIP model)"),c6e.forEach(t),jco=i(Z),fh=n(Z,"LI",{});var f6e=s(fh);xne=n(f6e,"STRONG",{});var yKr=s(xne);Dco=r(yKr,"convnext"),yKr.forEach(t),Gco=r(f6e," \u2014 "),HB=n(f6e,"A",{href:!0});var LKr=s(HB);Oco=r(LKr,"ConvNextFeatureExtractor"),LKr.forEach(t),Vco=r(f6e," (ConvNext model)"),f6e.forEach(t),Xco=i(Z),mh=n(Z,"LI",{});var m6e=s(mh);$ne=n(m6e,"STRONG",{});var xKr=s($ne);zco=r(xKr,"cvt"),xKr.forEach(t),Wco=r(m6e," \u2014 "),UB=n(m6e,"A",{href:!0});var $Kr=s(UB);Qco=r($Kr,"ConvNextFeatureExtractor"),$Kr.forEach(t),Hco=r(m6e," (CvT model)"),m6e.forEach(t),Uco=i(Z),gh=n(Z,"LI",{});var g6e=s(gh);kne=n(g6e,"STRONG",{});var kKr=s(kne);Jco=r(kKr,"data2vec-audio"),kKr.forEach(t),Yco=r(g6e," \u2014 "),JB=n(g6e,"A",{href:!0});var SKr=s(JB);Kco=r(SKr,"Wav2Vec2FeatureExtractor"),SKr.forEach(t),Zco=r(g6e," (Data2VecAudio model)"),g6e.forEach(t),efo=i(Z),hh=n(Z,"LI",{});var h6e=s(hh);Sne=n(h6e,"STRONG",{});var RKr=s(Sne);ofo=r(RKr,"data2vec-vision"),RKr.forEach(t),rfo=r(h6e," \u2014 "),YB=n(h6e,"A",{href:!0});var PKr=s(YB);tfo=r(PKr,"BeitFeatureExtractor"),PKr.forEach(t),afo=r(h6e," (Data2VecVision model)"),h6e.forEach(t),nfo=i(Z),ph=n(Z,"LI",{});var p6e=s(ph);Rne=n(p6e,"STRONG",{});var BKr=s(Rne);sfo=r(BKr,"deit"),BKr.forEach(t),lfo=r(p6e," \u2014 "),KB=n(p6e,"A",{href:!0});var IKr=s(KB);ifo=r(IKr,"DeiTFeatureExtractor"),IKr.forEach(t),dfo=r(p6e," (DeiT model)"),p6e.forEach(t),cfo=i(Z),uh=n(Z,"LI",{});var u6e=s(uh);Pne=n(u6e,"STRONG",{});var NKr=s(Pne);ffo=r(NKr,"detr"),NKr.forEach(t),mfo=r(u6e," \u2014 "),ZB=n(u6e,"A",{href:!0});var qKr=s(ZB);gfo=r(qKr,"DetrFeatureExtractor"),qKr.forEach(t),hfo=r(u6e," (DETR model)"),u6e.forEach(t),pfo=i(Z),_h=n(Z,"LI",{});var _6e=s(_h);Bne=n(_6e,"STRONG",{});var jKr=s(Bne);ufo=r(jKr,"dpt"),jKr.forEach(t),_fo=r(_6e," \u2014 "),eI=n(_6e,"A",{href:!0});var DKr=s(eI);bfo=r(DKr,"DPTFeatureExtractor"),DKr.forEach(t),vfo=r(_6e," (DPT model)"),_6e.forEach(t),Ffo=i(Z),bh=n(Z,"LI",{});var b6e=s(bh);Ine=n(b6e,"STRONG",{});var GKr=s(Ine);Tfo=r(GKr,"flava"),GKr.forEach(t),Mfo=r(b6e," \u2014 "),oI=n(b6e,"A",{href:!0});var OKr=s(oI);Efo=r(OKr,"FlavaFeatureExtractor"),OKr.forEach(t),Cfo=r(b6e," (Flava model)"),b6e.forEach(t),wfo=i(Z),vh=n(Z,"LI",{});var v6e=s(vh);Nne=n(v6e,"STRONG",{});var VKr=s(Nne);Afo=r(VKr,"glpn"),VKr.forEach(t),yfo=r(v6e," \u2014 "),rI=n(v6e,"A",{href:!0});var XKr=s(rI);Lfo=r(XKr,"GLPNFeatureExtractor"),XKr.forEach(t),xfo=r(v6e," (GLPN model)"),v6e.forEach(t),$fo=i(Z),Fh=n(Z,"LI",{});var F6e=s(Fh);qne=n(F6e,"STRONG",{});var zKr=s(qne);kfo=r(zKr,"groupvit"),zKr.forEach(t),Sfo=r(F6e," \u2014 "),tI=n(F6e,"A",{href:!0});var WKr=s(tI);Rfo=r(WKr,"CLIPFeatureExtractor"),WKr.forEach(t),Pfo=r(F6e," (GroupViT model)"),F6e.forEach(t),Bfo=i(Z),Th=n(Z,"LI",{});var T6e=s(Th);jne=n(T6e,"STRONG",{});var QKr=s(jne);Ifo=r(QKr,"hubert"),QKr.forEach(t),Nfo=r(T6e," \u2014 "),aI=n(T6e,"A",{href:!0});var HKr=s(aI);qfo=r(HKr,"Wav2Vec2FeatureExtractor"),HKr.forEach(t),jfo=r(T6e," (Hubert model)"),T6e.forEach(t),Dfo=i(Z),Mh=n(Z,"LI",{});var M6e=s(Mh);Dne=n(M6e,"STRONG",{});var UKr=s(Dne);Gfo=r(UKr,"imagegpt"),UKr.forEach(t),Ofo=r(M6e," \u2014 "),nI=n(M6e,"A",{href:!0});var JKr=s(nI);Vfo=r(JKr,"ImageGPTFeatureExtractor"),JKr.forEach(t),Xfo=r(M6e," (ImageGPT model)"),M6e.forEach(t),zfo=i(Z),Eh=n(Z,"LI",{});var E6e=s(Eh);Gne=n(E6e,"STRONG",{});var YKr=s(Gne);Wfo=r(YKr,"layoutlmv2"),YKr.forEach(t),Qfo=r(E6e," \u2014 "),sI=n(E6e,"A",{href:!0});var KKr=s(sI);Hfo=r(KKr,"LayoutLMv2FeatureExtractor"),KKr.forEach(t),Ufo=r(E6e," (LayoutLMv2 model)"),E6e.forEach(t),Jfo=i(Z),Ch=n(Z,"LI",{});var C6e=s(Ch);One=n(C6e,"STRONG",{});var ZKr=s(One);Yfo=r(ZKr,"layoutlmv3"),ZKr.forEach(t),Kfo=r(C6e," \u2014 "),lI=n(C6e,"A",{href:!0});var eZr=s(lI);Zfo=r(eZr,"LayoutLMv3FeatureExtractor"),eZr.forEach(t),emo=r(C6e," (LayoutLMv3 model)"),C6e.forEach(t),omo=i(Z),wh=n(Z,"LI",{});var w6e=s(wh);Vne=n(w6e,"STRONG",{});var oZr=s(Vne);rmo=r(oZr,"maskformer"),oZr.forEach(t),tmo=r(w6e," \u2014 "),iI=n(w6e,"A",{href:!0});var rZr=s(iI);amo=r(rZr,"MaskFormerFeatureExtractor"),rZr.forEach(t),nmo=r(w6e," (MaskFormer model)"),w6e.forEach(t),smo=i(Z),Ah=n(Z,"LI",{});var A6e=s(Ah);Xne=n(A6e,"STRONG",{});var tZr=s(Xne);lmo=r(tZr,"perceiver"),tZr.forEach(t),imo=r(A6e," \u2014 "),dI=n(A6e,"A",{href:!0});var aZr=s(dI);dmo=r(aZr,"PerceiverFeatureExtractor"),aZr.forEach(t),cmo=r(A6e," (Perceiver model)"),A6e.forEach(t),fmo=i(Z),yh=n(Z,"LI",{});var y6e=s(yh);zne=n(y6e,"STRONG",{});var nZr=s(zne);mmo=r(nZr,"poolformer"),nZr.forEach(t),gmo=r(y6e," \u2014 "),cI=n(y6e,"A",{href:!0});var sZr=s(cI);hmo=r(sZr,"PoolFormerFeatureExtractor"),sZr.forEach(t),pmo=r(y6e," (PoolFormer model)"),y6e.forEach(t),umo=i(Z),Lh=n(Z,"LI",{});var L6e=s(Lh);Wne=n(L6e,"STRONG",{});var lZr=s(Wne);_mo=r(lZr,"regnet"),lZr.forEach(t),bmo=r(L6e," \u2014 "),fI=n(L6e,"A",{href:!0});var iZr=s(fI);vmo=r(iZr,"ConvNextFeatureExtractor"),iZr.forEach(t),Fmo=r(L6e," (RegNet model)"),L6e.forEach(t),Tmo=i(Z),xh=n(Z,"LI",{});var x6e=s(xh);Qne=n(x6e,"STRONG",{});var dZr=s(Qne);Mmo=r(dZr,"resnet"),dZr.forEach(t),Emo=r(x6e," \u2014 "),mI=n(x6e,"A",{href:!0});var cZr=s(mI);Cmo=r(cZr,"ConvNextFeatureExtractor"),cZr.forEach(t),wmo=r(x6e," (ResNet model)"),x6e.forEach(t),Amo=i(Z),$h=n(Z,"LI",{});var $6e=s($h);Hne=n($6e,"STRONG",{});var fZr=s(Hne);ymo=r(fZr,"segformer"),fZr.forEach(t),Lmo=r($6e," \u2014 "),gI=n($6e,"A",{href:!0});var mZr=s(gI);xmo=r(mZr,"SegformerFeatureExtractor"),mZr.forEach(t),$mo=r($6e," (SegFormer model)"),$6e.forEach(t),kmo=i(Z),kh=n(Z,"LI",{});var k6e=s(kh);Une=n(k6e,"STRONG",{});var gZr=s(Une);Smo=r(gZr,"speech_to_text"),gZr.forEach(t),Rmo=r(k6e," \u2014 "),hI=n(k6e,"A",{href:!0});var hZr=s(hI);Pmo=r(hZr,"Speech2TextFeatureExtractor"),hZr.forEach(t),Bmo=r(k6e," (Speech2Text model)"),k6e.forEach(t),Imo=i(Z),Sh=n(Z,"LI",{});var S6e=s(Sh);Jne=n(S6e,"STRONG",{});var pZr=s(Jne);Nmo=r(pZr,"swin"),pZr.forEach(t),qmo=r(S6e," \u2014 "),pI=n(S6e,"A",{href:!0});var uZr=s(pI);jmo=r(uZr,"ViTFeatureExtractor"),uZr.forEach(t),Dmo=r(S6e," (Swin model)"),S6e.forEach(t),Gmo=i(Z),Rh=n(Z,"LI",{});var R6e=s(Rh);Yne=n(R6e,"STRONG",{});var _Zr=s(Yne);Omo=r(_Zr,"van"),_Zr.forEach(t),Vmo=r(R6e," \u2014 "),uI=n(R6e,"A",{href:!0});var bZr=s(uI);Xmo=r(bZr,"ConvNextFeatureExtractor"),bZr.forEach(t),zmo=r(R6e," (VAN model)"),R6e.forEach(t),Wmo=i(Z),Ph=n(Z,"LI",{});var P6e=s(Ph);Kne=n(P6e,"STRONG",{});var vZr=s(Kne);Qmo=r(vZr,"vit"),vZr.forEach(t),Hmo=r(P6e," \u2014 "),_I=n(P6e,"A",{href:!0});var FZr=s(_I);Umo=r(FZr,"ViTFeatureExtractor"),FZr.forEach(t),Jmo=r(P6e," (ViT model)"),P6e.forEach(t),Ymo=i(Z),Bh=n(Z,"LI",{});var B6e=s(Bh);Zne=n(B6e,"STRONG",{});var TZr=s(Zne);Kmo=r(TZr,"vit_mae"),TZr.forEach(t),Zmo=r(B6e," \u2014 "),bI=n(B6e,"A",{href:!0});var MZr=s(bI);ego=r(MZr,"ViTFeatureExtractor"),MZr.forEach(t),ogo=r(B6e," (ViTMAE model)"),B6e.forEach(t),rgo=i(Z),Ih=n(Z,"LI",{});var I6e=s(Ih);ese=n(I6e,"STRONG",{});var EZr=s(ese);tgo=r(EZr,"wav2vec2"),EZr.forEach(t),ago=r(I6e," \u2014 "),vI=n(I6e,"A",{href:!0});var CZr=s(vI);ngo=r(CZr,"Wav2Vec2FeatureExtractor"),CZr.forEach(t),sgo=r(I6e," (Wav2Vec2 model)"),I6e.forEach(t),lgo=i(Z),Nh=n(Z,"LI",{});var N6e=s(Nh);ose=n(N6e,"STRONG",{});var wZr=s(ose);igo=r(wZr,"wav2vec2-conformer"),wZr.forEach(t),dgo=r(N6e," \u2014 "),FI=n(N6e,"A",{href:!0});var AZr=s(FI);cgo=r(AZr,"Wav2Vec2FeatureExtractor"),AZr.forEach(t),fgo=r(N6e," (Wav2Vec2-Conformer model)"),N6e.forEach(t),mgo=i(Z),qh=n(Z,"LI",{});var q6e=s(qh);rse=n(q6e,"STRONG",{});var yZr=s(rse);ggo=r(yZr,"yolos"),yZr.forEach(t),hgo=r(q6e," \u2014 "),TI=n(q6e,"A",{href:!0});var LZr=s(TI);pgo=r(LZr,"YolosFeatureExtractor"),LZr.forEach(t),ugo=r(q6e," (YOLOS model)"),q6e.forEach(t),Z.forEach(t),_go=i(Zt),T(jh.$$.fragment,Zt),bgo=i(Zt),T(Dh.$$.fragment,Zt),Zt.forEach(t),vgo=i(Ds),Gh=n(Ds,"DIV",{class:!0});var kDe=s(Gh);T(YA.$$.fragment,kDe),Fgo=i(kDe),tse=n(kDe,"P",{});var xZr=s(tse);Tgo=r(xZr,"Register a new feature extractor for this class."),xZr.forEach(t),kDe.forEach(t),Ds.forEach(t),$qe=i(f),Ci=n(f,"H2",{class:!0});var SDe=s(Ci);Oh=n(SDe,"A",{id:!0,class:!0,href:!0});var $Zr=s(Oh);ase=n($Zr,"SPAN",{});var kZr=s(ase);T(KA.$$.fragment,kZr),kZr.forEach(t),$Zr.forEach(t),Mgo=i(SDe),nse=n(SDe,"SPAN",{});var SZr=s(nse);Ego=r(SZr,"AutoProcessor"),SZr.forEach(t),SDe.forEach(t),kqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(ZA.$$.fragment,Gs),Cgo=i(Gs),ey=n(Gs,"P",{});var RDe=s(ey);wgo=r(RDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MI=n(RDe,"A",{href:!0});var RZr=s(MI);Ago=r(RZr,"AutoProcessor.from_pretrained()"),RZr.forEach(t),ygo=r(RDe," class method."),RDe.forEach(t),Lgo=i(Gs),oy=n(Gs,"P",{});var PDe=s(oy);xgo=r(PDe,"This class cannot be instantiated directly using "),sse=n(PDe,"CODE",{});var PZr=s(sse);$go=r(PZr,"__init__()"),PZr.forEach(t),kgo=r(PDe," (throws an error)."),PDe.forEach(t),Sgo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(ry.$$.fragment,ea),Rgo=i(ea),lse=n(ea,"P",{});var BZr=s(lse);Pgo=r(BZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BZr.forEach(t),Bgo=i(ea),wi=n(ea,"P",{});var AZ=s(wi);Igo=r(AZ,"The processor class to instantiate is selected based on the "),ise=n(AZ,"CODE",{});var IZr=s(ise);Ngo=r(IZr,"model_type"),IZr.forEach(t),qgo=r(AZ,` property of the config object (either
passed as an argument or loaded from `),dse=n(AZ,"CODE",{});var NZr=s(dse);jgo=r(NZr,"pretrained_model_name_or_path"),NZr.forEach(t),Dgo=r(AZ," if possible):"),AZ.forEach(t),Ggo=i(ea),he=n(ea,"UL",{});var ue=s(he);Vh=n(ue,"LI",{});var j6e=s(Vh);cse=n(j6e,"STRONG",{});var qZr=s(cse);Ogo=r(qZr,"clip"),qZr.forEach(t),Vgo=r(j6e," \u2014 "),EI=n(j6e,"A",{href:!0});var jZr=s(EI);Xgo=r(jZr,"CLIPProcessor"),jZr.forEach(t),zgo=r(j6e," (CLIP model)"),j6e.forEach(t),Wgo=i(ue),Xh=n(ue,"LI",{});var D6e=s(Xh);fse=n(D6e,"STRONG",{});var DZr=s(fse);Qgo=r(DZr,"flava"),DZr.forEach(t),Hgo=r(D6e," \u2014 "),mse=n(D6e,"CODE",{});var GZr=s(mse);Ugo=r(GZr,"FLAVAProcessor"),GZr.forEach(t),Jgo=r(D6e," (Flava model)"),D6e.forEach(t),Ygo=i(ue),zh=n(ue,"LI",{});var G6e=s(zh);gse=n(G6e,"STRONG",{});var OZr=s(gse);Kgo=r(OZr,"groupvit"),OZr.forEach(t),Zgo=r(G6e," \u2014 "),CI=n(G6e,"A",{href:!0});var VZr=s(CI);eho=r(VZr,"CLIPProcessor"),VZr.forEach(t),oho=r(G6e," (GroupViT model)"),G6e.forEach(t),rho=i(ue),Wh=n(ue,"LI",{});var O6e=s(Wh);hse=n(O6e,"STRONG",{});var XZr=s(hse);tho=r(XZr,"layoutlmv2"),XZr.forEach(t),aho=r(O6e," \u2014 "),wI=n(O6e,"A",{href:!0});var zZr=s(wI);nho=r(zZr,"LayoutLMv2Processor"),zZr.forEach(t),sho=r(O6e," (LayoutLMv2 model)"),O6e.forEach(t),lho=i(ue),Qh=n(ue,"LI",{});var V6e=s(Qh);pse=n(V6e,"STRONG",{});var WZr=s(pse);iho=r(WZr,"layoutlmv3"),WZr.forEach(t),dho=r(V6e," \u2014 "),AI=n(V6e,"A",{href:!0});var QZr=s(AI);cho=r(QZr,"LayoutLMv3Processor"),QZr.forEach(t),fho=r(V6e," (LayoutLMv3 model)"),V6e.forEach(t),mho=i(ue),Hh=n(ue,"LI",{});var X6e=s(Hh);use=n(X6e,"STRONG",{});var HZr=s(use);gho=r(HZr,"layoutxlm"),HZr.forEach(t),hho=r(X6e," \u2014 "),yI=n(X6e,"A",{href:!0});var UZr=s(yI);pho=r(UZr,"LayoutXLMProcessor"),UZr.forEach(t),uho=r(X6e," (LayoutXLM model)"),X6e.forEach(t),_ho=i(ue),Uh=n(ue,"LI",{});var z6e=s(Uh);_se=n(z6e,"STRONG",{});var JZr=s(_se);bho=r(JZr,"sew"),JZr.forEach(t),vho=r(z6e," \u2014 "),LI=n(z6e,"A",{href:!0});var YZr=s(LI);Fho=r(YZr,"Wav2Vec2Processor"),YZr.forEach(t),Tho=r(z6e," (SEW model)"),z6e.forEach(t),Mho=i(ue),Jh=n(ue,"LI",{});var W6e=s(Jh);bse=n(W6e,"STRONG",{});var KZr=s(bse);Eho=r(KZr,"sew-d"),KZr.forEach(t),Cho=r(W6e," \u2014 "),xI=n(W6e,"A",{href:!0});var ZZr=s(xI);who=r(ZZr,"Wav2Vec2Processor"),ZZr.forEach(t),Aho=r(W6e," (SEW-D model)"),W6e.forEach(t),yho=i(ue),Yh=n(ue,"LI",{});var Q6e=s(Yh);vse=n(Q6e,"STRONG",{});var eet=s(vse);Lho=r(eet,"speech_to_text"),eet.forEach(t),xho=r(Q6e," \u2014 "),$I=n(Q6e,"A",{href:!0});var oet=s($I);$ho=r(oet,"Speech2TextProcessor"),oet.forEach(t),kho=r(Q6e," (Speech2Text model)"),Q6e.forEach(t),Sho=i(ue),Kh=n(ue,"LI",{});var H6e=s(Kh);Fse=n(H6e,"STRONG",{});var ret=s(Fse);Rho=r(ret,"speech_to_text_2"),ret.forEach(t),Pho=r(H6e," \u2014 "),kI=n(H6e,"A",{href:!0});var tet=s(kI);Bho=r(tet,"Speech2Text2Processor"),tet.forEach(t),Iho=r(H6e," (Speech2Text2 model)"),H6e.forEach(t),Nho=i(ue),Zh=n(ue,"LI",{});var U6e=s(Zh);Tse=n(U6e,"STRONG",{});var aet=s(Tse);qho=r(aet,"trocr"),aet.forEach(t),jho=r(U6e," \u2014 "),SI=n(U6e,"A",{href:!0});var net=s(SI);Dho=r(net,"TrOCRProcessor"),net.forEach(t),Gho=r(U6e," (TrOCR model)"),U6e.forEach(t),Oho=i(ue),ep=n(ue,"LI",{});var J6e=s(ep);Mse=n(J6e,"STRONG",{});var set=s(Mse);Vho=r(set,"unispeech"),set.forEach(t),Xho=r(J6e," \u2014 "),RI=n(J6e,"A",{href:!0});var iet=s(RI);zho=r(iet,"Wav2Vec2Processor"),iet.forEach(t),Who=r(J6e," (UniSpeech model)"),J6e.forEach(t),Qho=i(ue),op=n(ue,"LI",{});var Y6e=s(op);Ese=n(Y6e,"STRONG",{});var det=s(Ese);Hho=r(det,"unispeech-sat"),det.forEach(t),Uho=r(Y6e," \u2014 "),PI=n(Y6e,"A",{href:!0});var cet=s(PI);Jho=r(cet,"Wav2Vec2Processor"),cet.forEach(t),Yho=r(Y6e," (UniSpeechSat model)"),Y6e.forEach(t),Kho=i(ue),rp=n(ue,"LI",{});var K6e=s(rp);Cse=n(K6e,"STRONG",{});var fet=s(Cse);Zho=r(fet,"vilt"),fet.forEach(t),epo=r(K6e," \u2014 "),BI=n(K6e,"A",{href:!0});var met=s(BI);opo=r(met,"ViltProcessor"),met.forEach(t),rpo=r(K6e," (ViLT model)"),K6e.forEach(t),tpo=i(ue),tp=n(ue,"LI",{});var Z6e=s(tp);wse=n(Z6e,"STRONG",{});var get=s(wse);apo=r(get,"vision-text-dual-encoder"),get.forEach(t),npo=r(Z6e," \u2014 "),II=n(Z6e,"A",{href:!0});var het=s(II);spo=r(het,"VisionTextDualEncoderProcessor"),het.forEach(t),lpo=r(Z6e," (VisionTextDualEncoder model)"),Z6e.forEach(t),ipo=i(ue),ap=n(ue,"LI",{});var eAe=s(ap);Ase=n(eAe,"STRONG",{});var pet=s(Ase);dpo=r(pet,"wav2vec2"),pet.forEach(t),cpo=r(eAe," \u2014 "),NI=n(eAe,"A",{href:!0});var uet=s(NI);fpo=r(uet,"Wav2Vec2Processor"),uet.forEach(t),mpo=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),gpo=i(ue),np=n(ue,"LI",{});var oAe=s(np);yse=n(oAe,"STRONG",{});var _et=s(yse);hpo=r(_et,"wav2vec2-conformer"),_et.forEach(t),ppo=r(oAe," \u2014 "),qI=n(oAe,"A",{href:!0});var bet=s(qI);upo=r(bet,"Wav2Vec2Processor"),bet.forEach(t),_po=r(oAe," (Wav2Vec2-Conformer model)"),oAe.forEach(t),bpo=i(ue),sp=n(ue,"LI",{});var rAe=s(sp);Lse=n(rAe,"STRONG",{});var vet=s(Lse);vpo=r(vet,"wavlm"),vet.forEach(t),Fpo=r(rAe," \u2014 "),jI=n(rAe,"A",{href:!0});var Fet=s(jI);Tpo=r(Fet,"Wav2Vec2Processor"),Fet.forEach(t),Mpo=r(rAe," (WavLM model)"),rAe.forEach(t),ue.forEach(t),Epo=i(ea),T(lp.$$.fragment,ea),Cpo=i(ea),T(ip.$$.fragment,ea),ea.forEach(t),wpo=i(Gs),dp=n(Gs,"DIV",{class:!0});var BDe=s(dp);T(ty.$$.fragment,BDe),Apo=i(BDe),xse=n(BDe,"P",{});var Tet=s(xse);ypo=r(Tet,"Register a new processor for this class."),Tet.forEach(t),BDe.forEach(t),Gs.forEach(t),Sqe=i(f),Ai=n(f,"H2",{class:!0});var IDe=s(Ai);cp=n(IDe,"A",{id:!0,class:!0,href:!0});var Met=s(cp);$se=n(Met,"SPAN",{});var Eet=s($se);T(ay.$$.fragment,Eet),Eet.forEach(t),Met.forEach(t),Lpo=i(IDe),kse=n(IDe,"SPAN",{});var Cet=s(kse);xpo=r(Cet,"AutoModel"),Cet.forEach(t),IDe.forEach(t),Rqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(ny.$$.fragment,Os),$po=i(Os),yi=n(Os,"P",{});var yZ=s(yi);kpo=r(yZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=n(yZ,"A",{href:!0});var wet=s(DI);Spo=r(wet,"from_pretrained()"),wet.forEach(t),Rpo=r(yZ," class method or the "),GI=n(yZ,"A",{href:!0});var Aet=s(GI);Ppo=r(Aet,"from_config()"),Aet.forEach(t),Bpo=r(yZ,` class
method.`),yZ.forEach(t),Ipo=i(Os),sy=n(Os,"P",{});var NDe=s(sy);Npo=r(NDe,"This class cannot be instantiated directly using "),Sse=n(NDe,"CODE",{});var yet=s(Sse);qpo=r(yet,"__init__()"),yet.forEach(t),jpo=r(NDe," (throws an error)."),NDe.forEach(t),Dpo=i(Os),tt=n(Os,"DIV",{class:!0});var I0=s(tt);T(ly.$$.fragment,I0),Gpo=i(I0),Rse=n(I0,"P",{});var Let=s(Rse);Opo=r(Let,"Instantiates one of the base model classes of the library from a configuration."),Let.forEach(t),Vpo=i(I0),Li=n(I0,"P",{});var LZ=s(Li);Xpo=r(LZ,`Note:
Loading a model from its configuration file does `),Pse=n(LZ,"STRONG",{});var xet=s(Pse);zpo=r(xet,"not"),xet.forEach(t),Wpo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(LZ,"A",{href:!0});var $et=s(OI);Qpo=r($et,"from_pretrained()"),$et.forEach(t),Hpo=r(LZ," to load the model weights."),LZ.forEach(t),Upo=i(I0),T(fp.$$.fragment,I0),I0.forEach(t),Jpo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(iy.$$.fragment,oa),Ypo=i(oa),Bse=n(oa,"P",{});var ket=s(Bse);Kpo=r(ket,"Instantiate one of the base model classes of the library from a pretrained model."),ket.forEach(t),Zpo=i(oa),La=n(oa,"P",{});var N0=s(La);euo=r(N0,"The model class to instantiate is selected based on the "),Ise=n(N0,"CODE",{});var Set=s(Ise);ouo=r(Set,"model_type"),Set.forEach(t),ruo=r(N0,` property of the config object (either
passed as an argument or loaded from `),Nse=n(N0,"CODE",{});var Ret=s(Nse);tuo=r(Ret,"pretrained_model_name_or_path"),Ret.forEach(t),auo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=n(N0,"CODE",{});var Pet=s(qse);nuo=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),suo=r(N0,":"),N0.forEach(t),luo=i(oa),x=n(oa,"UL",{});var $=s(x);mp=n($,"LI",{});var tAe=s(mp);jse=n(tAe,"STRONG",{});var Bet=s(jse);iuo=r(Bet,"albert"),Bet.forEach(t),duo=r(tAe," \u2014 "),VI=n(tAe,"A",{href:!0});var Iet=s(VI);cuo=r(Iet,"AlbertModel"),Iet.forEach(t),fuo=r(tAe," (ALBERT model)"),tAe.forEach(t),muo=i($),gp=n($,"LI",{});var aAe=s(gp);Dse=n(aAe,"STRONG",{});var Net=s(Dse);guo=r(Net,"bart"),Net.forEach(t),huo=r(aAe," \u2014 "),XI=n(aAe,"A",{href:!0});var qet=s(XI);puo=r(qet,"BartModel"),qet.forEach(t),uuo=r(aAe," (BART model)"),aAe.forEach(t),_uo=i($),hp=n($,"LI",{});var nAe=s(hp);Gse=n(nAe,"STRONG",{});var jet=s(Gse);buo=r(jet,"beit"),jet.forEach(t),vuo=r(nAe," \u2014 "),zI=n(nAe,"A",{href:!0});var Det=s(zI);Fuo=r(Det,"BeitModel"),Det.forEach(t),Tuo=r(nAe," (BEiT model)"),nAe.forEach(t),Muo=i($),pp=n($,"LI",{});var sAe=s(pp);Ose=n(sAe,"STRONG",{});var Get=s(Ose);Euo=r(Get,"bert"),Get.forEach(t),Cuo=r(sAe," \u2014 "),WI=n(sAe,"A",{href:!0});var Oet=s(WI);wuo=r(Oet,"BertModel"),Oet.forEach(t),Auo=r(sAe," (BERT model)"),sAe.forEach(t),yuo=i($),up=n($,"LI",{});var lAe=s(up);Vse=n(lAe,"STRONG",{});var Vet=s(Vse);Luo=r(Vet,"bert-generation"),Vet.forEach(t),xuo=r(lAe," \u2014 "),QI=n(lAe,"A",{href:!0});var Xet=s(QI);$uo=r(Xet,"BertGenerationEncoder"),Xet.forEach(t),kuo=r(lAe," (Bert Generation model)"),lAe.forEach(t),Suo=i($),_p=n($,"LI",{});var iAe=s(_p);Xse=n(iAe,"STRONG",{});var zet=s(Xse);Ruo=r(zet,"big_bird"),zet.forEach(t),Puo=r(iAe," \u2014 "),HI=n(iAe,"A",{href:!0});var Wet=s(HI);Buo=r(Wet,"BigBirdModel"),Wet.forEach(t),Iuo=r(iAe," (BigBird model)"),iAe.forEach(t),Nuo=i($),bp=n($,"LI",{});var dAe=s(bp);zse=n(dAe,"STRONG",{});var Qet=s(zse);quo=r(Qet,"bigbird_pegasus"),Qet.forEach(t),juo=r(dAe," \u2014 "),UI=n(dAe,"A",{href:!0});var Het=s(UI);Duo=r(Het,"BigBirdPegasusModel"),Het.forEach(t),Guo=r(dAe," (BigBirdPegasus model)"),dAe.forEach(t),Ouo=i($),vp=n($,"LI",{});var cAe=s(vp);Wse=n(cAe,"STRONG",{});var Uet=s(Wse);Vuo=r(Uet,"blenderbot"),Uet.forEach(t),Xuo=r(cAe," \u2014 "),JI=n(cAe,"A",{href:!0});var Jet=s(JI);zuo=r(Jet,"BlenderbotModel"),Jet.forEach(t),Wuo=r(cAe," (Blenderbot model)"),cAe.forEach(t),Quo=i($),Fp=n($,"LI",{});var fAe=s(Fp);Qse=n(fAe,"STRONG",{});var Yet=s(Qse);Huo=r(Yet,"blenderbot-small"),Yet.forEach(t),Uuo=r(fAe," \u2014 "),YI=n(fAe,"A",{href:!0});var Ket=s(YI);Juo=r(Ket,"BlenderbotSmallModel"),Ket.forEach(t),Yuo=r(fAe," (BlenderbotSmall model)"),fAe.forEach(t),Kuo=i($),Tp=n($,"LI",{});var mAe=s(Tp);Hse=n(mAe,"STRONG",{});var Zet=s(Hse);Zuo=r(Zet,"camembert"),Zet.forEach(t),e_o=r(mAe," \u2014 "),KI=n(mAe,"A",{href:!0});var eot=s(KI);o_o=r(eot,"CamembertModel"),eot.forEach(t),r_o=r(mAe," (CamemBERT model)"),mAe.forEach(t),t_o=i($),Mp=n($,"LI",{});var gAe=s(Mp);Use=n(gAe,"STRONG",{});var oot=s(Use);a_o=r(oot,"canine"),oot.forEach(t),n_o=r(gAe," \u2014 "),ZI=n(gAe,"A",{href:!0});var rot=s(ZI);s_o=r(rot,"CanineModel"),rot.forEach(t),l_o=r(gAe," (Canine model)"),gAe.forEach(t),i_o=i($),Ep=n($,"LI",{});var hAe=s(Ep);Jse=n(hAe,"STRONG",{});var tot=s(Jse);d_o=r(tot,"clip"),tot.forEach(t),c_o=r(hAe," \u2014 "),eN=n(hAe,"A",{href:!0});var aot=s(eN);f_o=r(aot,"CLIPModel"),aot.forEach(t),m_o=r(hAe," (CLIP model)"),hAe.forEach(t),g_o=i($),Cp=n($,"LI",{});var pAe=s(Cp);Yse=n(pAe,"STRONG",{});var not=s(Yse);h_o=r(not,"convbert"),not.forEach(t),p_o=r(pAe," \u2014 "),oN=n(pAe,"A",{href:!0});var sot=s(oN);u_o=r(sot,"ConvBertModel"),sot.forEach(t),__o=r(pAe," (ConvBERT model)"),pAe.forEach(t),b_o=i($),wp=n($,"LI",{});var uAe=s(wp);Kse=n(uAe,"STRONG",{});var lot=s(Kse);v_o=r(lot,"convnext"),lot.forEach(t),F_o=r(uAe," \u2014 "),rN=n(uAe,"A",{href:!0});var iot=s(rN);T_o=r(iot,"ConvNextModel"),iot.forEach(t),M_o=r(uAe," (ConvNext model)"),uAe.forEach(t),E_o=i($),Ap=n($,"LI",{});var _Ae=s(Ap);Zse=n(_Ae,"STRONG",{});var dot=s(Zse);C_o=r(dot,"ctrl"),dot.forEach(t),w_o=r(_Ae," \u2014 "),tN=n(_Ae,"A",{href:!0});var cot=s(tN);A_o=r(cot,"CTRLModel"),cot.forEach(t),y_o=r(_Ae," (CTRL model)"),_Ae.forEach(t),L_o=i($),yp=n($,"LI",{});var bAe=s(yp);ele=n(bAe,"STRONG",{});var fot=s(ele);x_o=r(fot,"cvt"),fot.forEach(t),$_o=r(bAe," \u2014 "),aN=n(bAe,"A",{href:!0});var mot=s(aN);k_o=r(mot,"CvtModel"),mot.forEach(t),S_o=r(bAe," (CvT model)"),bAe.forEach(t),R_o=i($),Lp=n($,"LI",{});var vAe=s(Lp);ole=n(vAe,"STRONG",{});var got=s(ole);P_o=r(got,"data2vec-audio"),got.forEach(t),B_o=r(vAe," \u2014 "),nN=n(vAe,"A",{href:!0});var hot=s(nN);I_o=r(hot,"Data2VecAudioModel"),hot.forEach(t),N_o=r(vAe," (Data2VecAudio model)"),vAe.forEach(t),q_o=i($),xp=n($,"LI",{});var FAe=s(xp);rle=n(FAe,"STRONG",{});var pot=s(rle);j_o=r(pot,"data2vec-text"),pot.forEach(t),D_o=r(FAe," \u2014 "),sN=n(FAe,"A",{href:!0});var uot=s(sN);G_o=r(uot,"Data2VecTextModel"),uot.forEach(t),O_o=r(FAe," (Data2VecText model)"),FAe.forEach(t),V_o=i($),$p=n($,"LI",{});var TAe=s($p);tle=n(TAe,"STRONG",{});var _ot=s(tle);X_o=r(_ot,"data2vec-vision"),_ot.forEach(t),z_o=r(TAe," \u2014 "),lN=n(TAe,"A",{href:!0});var bot=s(lN);W_o=r(bot,"Data2VecVisionModel"),bot.forEach(t),Q_o=r(TAe," (Data2VecVision model)"),TAe.forEach(t),H_o=i($),kp=n($,"LI",{});var MAe=s(kp);ale=n(MAe,"STRONG",{});var vot=s(ale);U_o=r(vot,"deberta"),vot.forEach(t),J_o=r(MAe," \u2014 "),iN=n(MAe,"A",{href:!0});var Fot=s(iN);Y_o=r(Fot,"DebertaModel"),Fot.forEach(t),K_o=r(MAe," (DeBERTa model)"),MAe.forEach(t),Z_o=i($),Sp=n($,"LI",{});var EAe=s(Sp);nle=n(EAe,"STRONG",{});var Tot=s(nle);e1o=r(Tot,"deberta-v2"),Tot.forEach(t),o1o=r(EAe," \u2014 "),dN=n(EAe,"A",{href:!0});var Mot=s(dN);r1o=r(Mot,"DebertaV2Model"),Mot.forEach(t),t1o=r(EAe," (DeBERTa-v2 model)"),EAe.forEach(t),a1o=i($),Rp=n($,"LI",{});var CAe=s(Rp);sle=n(CAe,"STRONG",{});var Eot=s(sle);n1o=r(Eot,"decision_transformer"),Eot.forEach(t),s1o=r(CAe," \u2014 "),cN=n(CAe,"A",{href:!0});var Cot=s(cN);l1o=r(Cot,"DecisionTransformerModel"),Cot.forEach(t),i1o=r(CAe," (Decision Transformer model)"),CAe.forEach(t),d1o=i($),Pp=n($,"LI",{});var wAe=s(Pp);lle=n(wAe,"STRONG",{});var wot=s(lle);c1o=r(wot,"deit"),wot.forEach(t),f1o=r(wAe," \u2014 "),fN=n(wAe,"A",{href:!0});var Aot=s(fN);m1o=r(Aot,"DeiTModel"),Aot.forEach(t),g1o=r(wAe," (DeiT model)"),wAe.forEach(t),h1o=i($),Bp=n($,"LI",{});var AAe=s(Bp);ile=n(AAe,"STRONG",{});var yot=s(ile);p1o=r(yot,"detr"),yot.forEach(t),u1o=r(AAe," \u2014 "),mN=n(AAe,"A",{href:!0});var Lot=s(mN);_1o=r(Lot,"DetrModel"),Lot.forEach(t),b1o=r(AAe," (DETR model)"),AAe.forEach(t),v1o=i($),Ip=n($,"LI",{});var yAe=s(Ip);dle=n(yAe,"STRONG",{});var xot=s(dle);F1o=r(xot,"distilbert"),xot.forEach(t),T1o=r(yAe," \u2014 "),gN=n(yAe,"A",{href:!0});var $ot=s(gN);M1o=r($ot,"DistilBertModel"),$ot.forEach(t),E1o=r(yAe," (DistilBERT model)"),yAe.forEach(t),C1o=i($),Np=n($,"LI",{});var LAe=s(Np);cle=n(LAe,"STRONG",{});var kot=s(cle);w1o=r(kot,"dpr"),kot.forEach(t),A1o=r(LAe," \u2014 "),hN=n(LAe,"A",{href:!0});var Sot=s(hN);y1o=r(Sot,"DPRQuestionEncoder"),Sot.forEach(t),L1o=r(LAe," (DPR model)"),LAe.forEach(t),x1o=i($),qp=n($,"LI",{});var xAe=s(qp);fle=n(xAe,"STRONG",{});var Rot=s(fle);$1o=r(Rot,"dpt"),Rot.forEach(t),k1o=r(xAe," \u2014 "),pN=n(xAe,"A",{href:!0});var Pot=s(pN);S1o=r(Pot,"DPTModel"),Pot.forEach(t),R1o=r(xAe," (DPT model)"),xAe.forEach(t),P1o=i($),jp=n($,"LI",{});var $Ae=s(jp);mle=n($Ae,"STRONG",{});var Bot=s(mle);B1o=r(Bot,"electra"),Bot.forEach(t),I1o=r($Ae," \u2014 "),uN=n($Ae,"A",{href:!0});var Iot=s(uN);N1o=r(Iot,"ElectraModel"),Iot.forEach(t),q1o=r($Ae," (ELECTRA model)"),$Ae.forEach(t),j1o=i($),Dp=n($,"LI",{});var kAe=s(Dp);gle=n(kAe,"STRONG",{});var Not=s(gle);D1o=r(Not,"flaubert"),Not.forEach(t),G1o=r(kAe," \u2014 "),_N=n(kAe,"A",{href:!0});var qot=s(_N);O1o=r(qot,"FlaubertModel"),qot.forEach(t),V1o=r(kAe," (FlauBERT model)"),kAe.forEach(t),X1o=i($),Gp=n($,"LI",{});var SAe=s(Gp);hle=n(SAe,"STRONG",{});var jot=s(hle);z1o=r(jot,"flava"),jot.forEach(t),W1o=r(SAe," \u2014 "),bN=n(SAe,"A",{href:!0});var Dot=s(bN);Q1o=r(Dot,"FlavaModel"),Dot.forEach(t),H1o=r(SAe," (Flava model)"),SAe.forEach(t),U1o=i($),Op=n($,"LI",{});var RAe=s(Op);ple=n(RAe,"STRONG",{});var Got=s(ple);J1o=r(Got,"fnet"),Got.forEach(t),Y1o=r(RAe," \u2014 "),vN=n(RAe,"A",{href:!0});var Oot=s(vN);K1o=r(Oot,"FNetModel"),Oot.forEach(t),Z1o=r(RAe," (FNet model)"),RAe.forEach(t),e3o=i($),Vp=n($,"LI",{});var PAe=s(Vp);ule=n(PAe,"STRONG",{});var Vot=s(ule);o3o=r(Vot,"fsmt"),Vot.forEach(t),r3o=r(PAe," \u2014 "),FN=n(PAe,"A",{href:!0});var Xot=s(FN);t3o=r(Xot,"FSMTModel"),Xot.forEach(t),a3o=r(PAe," (FairSeq Machine-Translation model)"),PAe.forEach(t),n3o=i($),Bs=n($,"LI",{});var H$=s(Bs);_le=n(H$,"STRONG",{});var zot=s(_le);s3o=r(zot,"funnel"),zot.forEach(t),l3o=r(H$," \u2014 "),TN=n(H$,"A",{href:!0});var Wot=s(TN);i3o=r(Wot,"FunnelModel"),Wot.forEach(t),d3o=r(H$," or "),MN=n(H$,"A",{href:!0});var Qot=s(MN);c3o=r(Qot,"FunnelBaseModel"),Qot.forEach(t),f3o=r(H$," (Funnel Transformer model)"),H$.forEach(t),m3o=i($),Xp=n($,"LI",{});var BAe=s(Xp);ble=n(BAe,"STRONG",{});var Hot=s(ble);g3o=r(Hot,"glpn"),Hot.forEach(t),h3o=r(BAe," \u2014 "),EN=n(BAe,"A",{href:!0});var Uot=s(EN);p3o=r(Uot,"GLPNModel"),Uot.forEach(t),u3o=r(BAe," (GLPN model)"),BAe.forEach(t),_3o=i($),zp=n($,"LI",{});var IAe=s(zp);vle=n(IAe,"STRONG",{});var Jot=s(vle);b3o=r(Jot,"gpt2"),Jot.forEach(t),v3o=r(IAe," \u2014 "),CN=n(IAe,"A",{href:!0});var Yot=s(CN);F3o=r(Yot,"GPT2Model"),Yot.forEach(t),T3o=r(IAe," (OpenAI GPT-2 model)"),IAe.forEach(t),M3o=i($),Wp=n($,"LI",{});var NAe=s(Wp);Fle=n(NAe,"STRONG",{});var Kot=s(Fle);E3o=r(Kot,"gpt_neo"),Kot.forEach(t),C3o=r(NAe," \u2014 "),wN=n(NAe,"A",{href:!0});var Zot=s(wN);w3o=r(Zot,"GPTNeoModel"),Zot.forEach(t),A3o=r(NAe," (GPT Neo model)"),NAe.forEach(t),y3o=i($),Qp=n($,"LI",{});var qAe=s(Qp);Tle=n(qAe,"STRONG",{});var ert=s(Tle);L3o=r(ert,"gpt_neox"),ert.forEach(t),x3o=r(qAe," \u2014 "),AN=n(qAe,"A",{href:!0});var ort=s(AN);$3o=r(ort,"GPTNeoXModel"),ort.forEach(t),k3o=r(qAe," (GPT NeoX model)"),qAe.forEach(t),S3o=i($),Hp=n($,"LI",{});var jAe=s(Hp);Mle=n(jAe,"STRONG",{});var rrt=s(Mle);R3o=r(rrt,"gptj"),rrt.forEach(t),P3o=r(jAe," \u2014 "),yN=n(jAe,"A",{href:!0});var trt=s(yN);B3o=r(trt,"GPTJModel"),trt.forEach(t),I3o=r(jAe," (GPT-J model)"),jAe.forEach(t),N3o=i($),Up=n($,"LI",{});var DAe=s(Up);Ele=n(DAe,"STRONG",{});var art=s(Ele);q3o=r(art,"groupvit"),art.forEach(t),j3o=r(DAe," \u2014 "),LN=n(DAe,"A",{href:!0});var nrt=s(LN);D3o=r(nrt,"GroupViTModel"),nrt.forEach(t),G3o=r(DAe," (GroupViT model)"),DAe.forEach(t),O3o=i($),Jp=n($,"LI",{});var GAe=s(Jp);Cle=n(GAe,"STRONG",{});var srt=s(Cle);V3o=r(srt,"hubert"),srt.forEach(t),X3o=r(GAe," \u2014 "),xN=n(GAe,"A",{href:!0});var lrt=s(xN);z3o=r(lrt,"HubertModel"),lrt.forEach(t),W3o=r(GAe," (Hubert model)"),GAe.forEach(t),Q3o=i($),Yp=n($,"LI",{});var OAe=s(Yp);wle=n(OAe,"STRONG",{});var irt=s(wle);H3o=r(irt,"ibert"),irt.forEach(t),U3o=r(OAe," \u2014 "),$N=n(OAe,"A",{href:!0});var drt=s($N);J3o=r(drt,"IBertModel"),drt.forEach(t),Y3o=r(OAe," (I-BERT model)"),OAe.forEach(t),K3o=i($),Kp=n($,"LI",{});var VAe=s(Kp);Ale=n(VAe,"STRONG",{});var crt=s(Ale);Z3o=r(crt,"imagegpt"),crt.forEach(t),ebo=r(VAe," \u2014 "),kN=n(VAe,"A",{href:!0});var frt=s(kN);obo=r(frt,"ImageGPTModel"),frt.forEach(t),rbo=r(VAe," (ImageGPT model)"),VAe.forEach(t),tbo=i($),Zp=n($,"LI",{});var XAe=s(Zp);yle=n(XAe,"STRONG",{});var mrt=s(yle);abo=r(mrt,"layoutlm"),mrt.forEach(t),nbo=r(XAe," \u2014 "),SN=n(XAe,"A",{href:!0});var grt=s(SN);sbo=r(grt,"LayoutLMModel"),grt.forEach(t),lbo=r(XAe," (LayoutLM model)"),XAe.forEach(t),ibo=i($),eu=n($,"LI",{});var zAe=s(eu);Lle=n(zAe,"STRONG",{});var hrt=s(Lle);dbo=r(hrt,"layoutlmv2"),hrt.forEach(t),cbo=r(zAe," \u2014 "),RN=n(zAe,"A",{href:!0});var prt=s(RN);fbo=r(prt,"LayoutLMv2Model"),prt.forEach(t),mbo=r(zAe," (LayoutLMv2 model)"),zAe.forEach(t),gbo=i($),ou=n($,"LI",{});var WAe=s(ou);xle=n(WAe,"STRONG",{});var urt=s(xle);hbo=r(urt,"layoutlmv3"),urt.forEach(t),pbo=r(WAe," \u2014 "),PN=n(WAe,"A",{href:!0});var _rt=s(PN);ubo=r(_rt,"LayoutLMv3Model"),_rt.forEach(t),_bo=r(WAe," (LayoutLMv3 model)"),WAe.forEach(t),bbo=i($),ru=n($,"LI",{});var QAe=s(ru);$le=n(QAe,"STRONG",{});var brt=s($le);vbo=r(brt,"led"),brt.forEach(t),Fbo=r(QAe," \u2014 "),BN=n(QAe,"A",{href:!0});var vrt=s(BN);Tbo=r(vrt,"LEDModel"),vrt.forEach(t),Mbo=r(QAe," (LED model)"),QAe.forEach(t),Ebo=i($),tu=n($,"LI",{});var HAe=s(tu);kle=n(HAe,"STRONG",{});var Frt=s(kle);Cbo=r(Frt,"longformer"),Frt.forEach(t),wbo=r(HAe," \u2014 "),IN=n(HAe,"A",{href:!0});var Trt=s(IN);Abo=r(Trt,"LongformerModel"),Trt.forEach(t),ybo=r(HAe," (Longformer model)"),HAe.forEach(t),Lbo=i($),au=n($,"LI",{});var UAe=s(au);Sle=n(UAe,"STRONG",{});var Mrt=s(Sle);xbo=r(Mrt,"luke"),Mrt.forEach(t),$bo=r(UAe," \u2014 "),NN=n(UAe,"A",{href:!0});var Ert=s(NN);kbo=r(Ert,"LukeModel"),Ert.forEach(t),Sbo=r(UAe," (LUKE model)"),UAe.forEach(t),Rbo=i($),nu=n($,"LI",{});var JAe=s(nu);Rle=n(JAe,"STRONG",{});var Crt=s(Rle);Pbo=r(Crt,"lxmert"),Crt.forEach(t),Bbo=r(JAe," \u2014 "),qN=n(JAe,"A",{href:!0});var wrt=s(qN);Ibo=r(wrt,"LxmertModel"),wrt.forEach(t),Nbo=r(JAe," (LXMERT model)"),JAe.forEach(t),qbo=i($),su=n($,"LI",{});var YAe=s(su);Ple=n(YAe,"STRONG",{});var Art=s(Ple);jbo=r(Art,"m2m_100"),Art.forEach(t),Dbo=r(YAe," \u2014 "),jN=n(YAe,"A",{href:!0});var yrt=s(jN);Gbo=r(yrt,"M2M100Model"),yrt.forEach(t),Obo=r(YAe," (M2M100 model)"),YAe.forEach(t),Vbo=i($),lu=n($,"LI",{});var KAe=s(lu);Ble=n(KAe,"STRONG",{});var Lrt=s(Ble);Xbo=r(Lrt,"marian"),Lrt.forEach(t),zbo=r(KAe," \u2014 "),DN=n(KAe,"A",{href:!0});var xrt=s(DN);Wbo=r(xrt,"MarianModel"),xrt.forEach(t),Qbo=r(KAe," (Marian model)"),KAe.forEach(t),Hbo=i($),iu=n($,"LI",{});var ZAe=s(iu);Ile=n(ZAe,"STRONG",{});var $rt=s(Ile);Ubo=r($rt,"maskformer"),$rt.forEach(t),Jbo=r(ZAe," \u2014 "),GN=n(ZAe,"A",{href:!0});var krt=s(GN);Ybo=r(krt,"MaskFormerModel"),krt.forEach(t),Kbo=r(ZAe," (MaskFormer model)"),ZAe.forEach(t),Zbo=i($),du=n($,"LI",{});var eye=s(du);Nle=n(eye,"STRONG",{});var Srt=s(Nle);e2o=r(Srt,"mbart"),Srt.forEach(t),o2o=r(eye," \u2014 "),ON=n(eye,"A",{href:!0});var Rrt=s(ON);r2o=r(Rrt,"MBartModel"),Rrt.forEach(t),t2o=r(eye," (mBART model)"),eye.forEach(t),a2o=i($),cu=n($,"LI",{});var oye=s(cu);qle=n(oye,"STRONG",{});var Prt=s(qle);n2o=r(Prt,"megatron-bert"),Prt.forEach(t),s2o=r(oye," \u2014 "),VN=n(oye,"A",{href:!0});var Brt=s(VN);l2o=r(Brt,"MegatronBertModel"),Brt.forEach(t),i2o=r(oye," (MegatronBert model)"),oye.forEach(t),d2o=i($),fu=n($,"LI",{});var rye=s(fu);jle=n(rye,"STRONG",{});var Irt=s(jle);c2o=r(Irt,"mobilebert"),Irt.forEach(t),f2o=r(rye," \u2014 "),XN=n(rye,"A",{href:!0});var Nrt=s(XN);m2o=r(Nrt,"MobileBertModel"),Nrt.forEach(t),g2o=r(rye," (MobileBERT model)"),rye.forEach(t),h2o=i($),mu=n($,"LI",{});var tye=s(mu);Dle=n(tye,"STRONG",{});var qrt=s(Dle);p2o=r(qrt,"mpnet"),qrt.forEach(t),u2o=r(tye," \u2014 "),zN=n(tye,"A",{href:!0});var jrt=s(zN);_2o=r(jrt,"MPNetModel"),jrt.forEach(t),b2o=r(tye," (MPNet model)"),tye.forEach(t),v2o=i($),gu=n($,"LI",{});var aye=s(gu);Gle=n(aye,"STRONG",{});var Drt=s(Gle);F2o=r(Drt,"mt5"),Drt.forEach(t),T2o=r(aye," \u2014 "),WN=n(aye,"A",{href:!0});var Grt=s(WN);M2o=r(Grt,"MT5Model"),Grt.forEach(t),E2o=r(aye," (mT5 model)"),aye.forEach(t),C2o=i($),hu=n($,"LI",{});var nye=s(hu);Ole=n(nye,"STRONG",{});var Ort=s(Ole);w2o=r(Ort,"nystromformer"),Ort.forEach(t),A2o=r(nye," \u2014 "),QN=n(nye,"A",{href:!0});var Vrt=s(QN);y2o=r(Vrt,"NystromformerModel"),Vrt.forEach(t),L2o=r(nye," (Nystromformer model)"),nye.forEach(t),x2o=i($),pu=n($,"LI",{});var sye=s(pu);Vle=n(sye,"STRONG",{});var Xrt=s(Vle);$2o=r(Xrt,"openai-gpt"),Xrt.forEach(t),k2o=r(sye," \u2014 "),HN=n(sye,"A",{href:!0});var zrt=s(HN);S2o=r(zrt,"OpenAIGPTModel"),zrt.forEach(t),R2o=r(sye," (OpenAI GPT model)"),sye.forEach(t),P2o=i($),uu=n($,"LI",{});var lye=s(uu);Xle=n(lye,"STRONG",{});var Wrt=s(Xle);B2o=r(Wrt,"opt"),Wrt.forEach(t),I2o=r(lye," \u2014 "),UN=n(lye,"A",{href:!0});var Qrt=s(UN);N2o=r(Qrt,"OPTModel"),Qrt.forEach(t),q2o=r(lye," (OPT model)"),lye.forEach(t),j2o=i($),_u=n($,"LI",{});var iye=s(_u);zle=n(iye,"STRONG",{});var Hrt=s(zle);D2o=r(Hrt,"pegasus"),Hrt.forEach(t),G2o=r(iye," \u2014 "),JN=n(iye,"A",{href:!0});var Urt=s(JN);O2o=r(Urt,"PegasusModel"),Urt.forEach(t),V2o=r(iye," (Pegasus model)"),iye.forEach(t),X2o=i($),bu=n($,"LI",{});var dye=s(bu);Wle=n(dye,"STRONG",{});var Jrt=s(Wle);z2o=r(Jrt,"perceiver"),Jrt.forEach(t),W2o=r(dye," \u2014 "),YN=n(dye,"A",{href:!0});var Yrt=s(YN);Q2o=r(Yrt,"PerceiverModel"),Yrt.forEach(t),H2o=r(dye," (Perceiver model)"),dye.forEach(t),U2o=i($),vu=n($,"LI",{});var cye=s(vu);Qle=n(cye,"STRONG",{});var Krt=s(Qle);J2o=r(Krt,"plbart"),Krt.forEach(t),Y2o=r(cye," \u2014 "),KN=n(cye,"A",{href:!0});var Zrt=s(KN);K2o=r(Zrt,"PLBartModel"),Zrt.forEach(t),Z2o=r(cye," (PLBart model)"),cye.forEach(t),evo=i($),Fu=n($,"LI",{});var fye=s(Fu);Hle=n(fye,"STRONG",{});var ett=s(Hle);ovo=r(ett,"poolformer"),ett.forEach(t),rvo=r(fye," \u2014 "),ZN=n(fye,"A",{href:!0});var ott=s(ZN);tvo=r(ott,"PoolFormerModel"),ott.forEach(t),avo=r(fye," (PoolFormer model)"),fye.forEach(t),nvo=i($),Tu=n($,"LI",{});var mye=s(Tu);Ule=n(mye,"STRONG",{});var rtt=s(Ule);svo=r(rtt,"prophetnet"),rtt.forEach(t),lvo=r(mye," \u2014 "),eq=n(mye,"A",{href:!0});var ttt=s(eq);ivo=r(ttt,"ProphetNetModel"),ttt.forEach(t),dvo=r(mye," (ProphetNet model)"),mye.forEach(t),cvo=i($),Mu=n($,"LI",{});var gye=s(Mu);Jle=n(gye,"STRONG",{});var att=s(Jle);fvo=r(att,"qdqbert"),att.forEach(t),mvo=r(gye," \u2014 "),oq=n(gye,"A",{href:!0});var ntt=s(oq);gvo=r(ntt,"QDQBertModel"),ntt.forEach(t),hvo=r(gye," (QDQBert model)"),gye.forEach(t),pvo=i($),Eu=n($,"LI",{});var hye=s(Eu);Yle=n(hye,"STRONG",{});var stt=s(Yle);uvo=r(stt,"reformer"),stt.forEach(t),_vo=r(hye," \u2014 "),rq=n(hye,"A",{href:!0});var ltt=s(rq);bvo=r(ltt,"ReformerModel"),ltt.forEach(t),vvo=r(hye," (Reformer model)"),hye.forEach(t),Fvo=i($),Cu=n($,"LI",{});var pye=s(Cu);Kle=n(pye,"STRONG",{});var itt=s(Kle);Tvo=r(itt,"regnet"),itt.forEach(t),Mvo=r(pye," \u2014 "),tq=n(pye,"A",{href:!0});var dtt=s(tq);Evo=r(dtt,"RegNetModel"),dtt.forEach(t),Cvo=r(pye," (RegNet model)"),pye.forEach(t),wvo=i($),wu=n($,"LI",{});var uye=s(wu);Zle=n(uye,"STRONG",{});var ctt=s(Zle);Avo=r(ctt,"rembert"),ctt.forEach(t),yvo=r(uye," \u2014 "),aq=n(uye,"A",{href:!0});var ftt=s(aq);Lvo=r(ftt,"RemBertModel"),ftt.forEach(t),xvo=r(uye," (RemBERT model)"),uye.forEach(t),$vo=i($),Au=n($,"LI",{});var _ye=s(Au);eie=n(_ye,"STRONG",{});var mtt=s(eie);kvo=r(mtt,"resnet"),mtt.forEach(t),Svo=r(_ye," \u2014 "),nq=n(_ye,"A",{href:!0});var gtt=s(nq);Rvo=r(gtt,"ResNetModel"),gtt.forEach(t),Pvo=r(_ye," (ResNet model)"),_ye.forEach(t),Bvo=i($),yu=n($,"LI",{});var bye=s(yu);oie=n(bye,"STRONG",{});var htt=s(oie);Ivo=r(htt,"retribert"),htt.forEach(t),Nvo=r(bye," \u2014 "),sq=n(bye,"A",{href:!0});var ptt=s(sq);qvo=r(ptt,"RetriBertModel"),ptt.forEach(t),jvo=r(bye," (RetriBERT model)"),bye.forEach(t),Dvo=i($),Lu=n($,"LI",{});var vye=s(Lu);rie=n(vye,"STRONG",{});var utt=s(rie);Gvo=r(utt,"roberta"),utt.forEach(t),Ovo=r(vye," \u2014 "),lq=n(vye,"A",{href:!0});var _tt=s(lq);Vvo=r(_tt,"RobertaModel"),_tt.forEach(t),Xvo=r(vye," (RoBERTa model)"),vye.forEach(t),zvo=i($),xu=n($,"LI",{});var Fye=s(xu);tie=n(Fye,"STRONG",{});var btt=s(tie);Wvo=r(btt,"roformer"),btt.forEach(t),Qvo=r(Fye," \u2014 "),iq=n(Fye,"A",{href:!0});var vtt=s(iq);Hvo=r(vtt,"RoFormerModel"),vtt.forEach(t),Uvo=r(Fye," (RoFormer model)"),Fye.forEach(t),Jvo=i($),$u=n($,"LI",{});var Tye=s($u);aie=n(Tye,"STRONG",{});var Ftt=s(aie);Yvo=r(Ftt,"segformer"),Ftt.forEach(t),Kvo=r(Tye," \u2014 "),dq=n(Tye,"A",{href:!0});var Ttt=s(dq);Zvo=r(Ttt,"SegformerModel"),Ttt.forEach(t),eFo=r(Tye," (SegFormer model)"),Tye.forEach(t),oFo=i($),ku=n($,"LI",{});var Mye=s(ku);nie=n(Mye,"STRONG",{});var Mtt=s(nie);rFo=r(Mtt,"sew"),Mtt.forEach(t),tFo=r(Mye," \u2014 "),cq=n(Mye,"A",{href:!0});var Ett=s(cq);aFo=r(Ett,"SEWModel"),Ett.forEach(t),nFo=r(Mye," (SEW model)"),Mye.forEach(t),sFo=i($),Su=n($,"LI",{});var Eye=s(Su);sie=n(Eye,"STRONG",{});var Ctt=s(sie);lFo=r(Ctt,"sew-d"),Ctt.forEach(t),iFo=r(Eye," \u2014 "),fq=n(Eye,"A",{href:!0});var wtt=s(fq);dFo=r(wtt,"SEWDModel"),wtt.forEach(t),cFo=r(Eye," (SEW-D model)"),Eye.forEach(t),fFo=i($),Ru=n($,"LI",{});var Cye=s(Ru);lie=n(Cye,"STRONG",{});var Att=s(lie);mFo=r(Att,"speech_to_text"),Att.forEach(t),gFo=r(Cye," \u2014 "),mq=n(Cye,"A",{href:!0});var ytt=s(mq);hFo=r(ytt,"Speech2TextModel"),ytt.forEach(t),pFo=r(Cye," (Speech2Text model)"),Cye.forEach(t),uFo=i($),Pu=n($,"LI",{});var wye=s(Pu);iie=n(wye,"STRONG",{});var Ltt=s(iie);_Fo=r(Ltt,"splinter"),Ltt.forEach(t),bFo=r(wye," \u2014 "),gq=n(wye,"A",{href:!0});var xtt=s(gq);vFo=r(xtt,"SplinterModel"),xtt.forEach(t),FFo=r(wye," (Splinter model)"),wye.forEach(t),TFo=i($),Bu=n($,"LI",{});var Aye=s(Bu);die=n(Aye,"STRONG",{});var $tt=s(die);MFo=r($tt,"squeezebert"),$tt.forEach(t),EFo=r(Aye," \u2014 "),hq=n(Aye,"A",{href:!0});var ktt=s(hq);CFo=r(ktt,"SqueezeBertModel"),ktt.forEach(t),wFo=r(Aye," (SqueezeBERT model)"),Aye.forEach(t),AFo=i($),Iu=n($,"LI",{});var yye=s(Iu);cie=n(yye,"STRONG",{});var Stt=s(cie);yFo=r(Stt,"swin"),Stt.forEach(t),LFo=r(yye," \u2014 "),pq=n(yye,"A",{href:!0});var Rtt=s(pq);xFo=r(Rtt,"SwinModel"),Rtt.forEach(t),$Fo=r(yye," (Swin model)"),yye.forEach(t),kFo=i($),Nu=n($,"LI",{});var Lye=s(Nu);fie=n(Lye,"STRONG",{});var Ptt=s(fie);SFo=r(Ptt,"t5"),Ptt.forEach(t),RFo=r(Lye," \u2014 "),uq=n(Lye,"A",{href:!0});var Btt=s(uq);PFo=r(Btt,"T5Model"),Btt.forEach(t),BFo=r(Lye," (T5 model)"),Lye.forEach(t),IFo=i($),qu=n($,"LI",{});var xye=s(qu);mie=n(xye,"STRONG",{});var Itt=s(mie);NFo=r(Itt,"tapas"),Itt.forEach(t),qFo=r(xye," \u2014 "),_q=n(xye,"A",{href:!0});var Ntt=s(_q);jFo=r(Ntt,"TapasModel"),Ntt.forEach(t),DFo=r(xye," (TAPAS model)"),xye.forEach(t),GFo=i($),ju=n($,"LI",{});var $ye=s(ju);gie=n($ye,"STRONG",{});var qtt=s(gie);OFo=r(qtt,"trajectory_transformer"),qtt.forEach(t),VFo=r($ye," \u2014 "),bq=n($ye,"A",{href:!0});var jtt=s(bq);XFo=r(jtt,"TrajectoryTransformerModel"),jtt.forEach(t),zFo=r($ye," (Trajectory Transformer model)"),$ye.forEach(t),WFo=i($),Du=n($,"LI",{});var kye=s(Du);hie=n(kye,"STRONG",{});var Dtt=s(hie);QFo=r(Dtt,"transfo-xl"),Dtt.forEach(t),HFo=r(kye," \u2014 "),vq=n(kye,"A",{href:!0});var Gtt=s(vq);UFo=r(Gtt,"TransfoXLModel"),Gtt.forEach(t),JFo=r(kye," (Transformer-XL model)"),kye.forEach(t),YFo=i($),Gu=n($,"LI",{});var Sye=s(Gu);pie=n(Sye,"STRONG",{});var Ott=s(pie);KFo=r(Ott,"unispeech"),Ott.forEach(t),ZFo=r(Sye," \u2014 "),Fq=n(Sye,"A",{href:!0});var Vtt=s(Fq);eTo=r(Vtt,"UniSpeechModel"),Vtt.forEach(t),oTo=r(Sye," (UniSpeech model)"),Sye.forEach(t),rTo=i($),Ou=n($,"LI",{});var Rye=s(Ou);uie=n(Rye,"STRONG",{});var Xtt=s(uie);tTo=r(Xtt,"unispeech-sat"),Xtt.forEach(t),aTo=r(Rye," \u2014 "),Tq=n(Rye,"A",{href:!0});var ztt=s(Tq);nTo=r(ztt,"UniSpeechSatModel"),ztt.forEach(t),sTo=r(Rye," (UniSpeechSat model)"),Rye.forEach(t),lTo=i($),Vu=n($,"LI",{});var Pye=s(Vu);_ie=n(Pye,"STRONG",{});var Wtt=s(_ie);iTo=r(Wtt,"van"),Wtt.forEach(t),dTo=r(Pye," \u2014 "),Mq=n(Pye,"A",{href:!0});var Qtt=s(Mq);cTo=r(Qtt,"VanModel"),Qtt.forEach(t),fTo=r(Pye," (VAN model)"),Pye.forEach(t),mTo=i($),Xu=n($,"LI",{});var Bye=s(Xu);bie=n(Bye,"STRONG",{});var Htt=s(bie);gTo=r(Htt,"vilt"),Htt.forEach(t),hTo=r(Bye," \u2014 "),Eq=n(Bye,"A",{href:!0});var Utt=s(Eq);pTo=r(Utt,"ViltModel"),Utt.forEach(t),uTo=r(Bye," (ViLT model)"),Bye.forEach(t),_To=i($),zu=n($,"LI",{});var Iye=s(zu);vie=n(Iye,"STRONG",{});var Jtt=s(vie);bTo=r(Jtt,"vision-text-dual-encoder"),Jtt.forEach(t),vTo=r(Iye," \u2014 "),Cq=n(Iye,"A",{href:!0});var Ytt=s(Cq);FTo=r(Ytt,"VisionTextDualEncoderModel"),Ytt.forEach(t),TTo=r(Iye," (VisionTextDualEncoder model)"),Iye.forEach(t),MTo=i($),Wu=n($,"LI",{});var Nye=s(Wu);Fie=n(Nye,"STRONG",{});var Ktt=s(Fie);ETo=r(Ktt,"visual_bert"),Ktt.forEach(t),CTo=r(Nye," \u2014 "),wq=n(Nye,"A",{href:!0});var Ztt=s(wq);wTo=r(Ztt,"VisualBertModel"),Ztt.forEach(t),ATo=r(Nye," (VisualBert model)"),Nye.forEach(t),yTo=i($),Qu=n($,"LI",{});var qye=s(Qu);Tie=n(qye,"STRONG",{});var eat=s(Tie);LTo=r(eat,"vit"),eat.forEach(t),xTo=r(qye," \u2014 "),Aq=n(qye,"A",{href:!0});var oat=s(Aq);$To=r(oat,"ViTModel"),oat.forEach(t),kTo=r(qye," (ViT model)"),qye.forEach(t),STo=i($),Hu=n($,"LI",{});var jye=s(Hu);Mie=n(jye,"STRONG",{});var rat=s(Mie);RTo=r(rat,"vit_mae"),rat.forEach(t),PTo=r(jye," \u2014 "),yq=n(jye,"A",{href:!0});var tat=s(yq);BTo=r(tat,"ViTMAEModel"),tat.forEach(t),ITo=r(jye," (ViTMAE model)"),jye.forEach(t),NTo=i($),Uu=n($,"LI",{});var Dye=s(Uu);Eie=n(Dye,"STRONG",{});var aat=s(Eie);qTo=r(aat,"wav2vec2"),aat.forEach(t),jTo=r(Dye," \u2014 "),Lq=n(Dye,"A",{href:!0});var nat=s(Lq);DTo=r(nat,"Wav2Vec2Model"),nat.forEach(t),GTo=r(Dye," (Wav2Vec2 model)"),Dye.forEach(t),OTo=i($),Ju=n($,"LI",{});var Gye=s(Ju);Cie=n(Gye,"STRONG",{});var sat=s(Cie);VTo=r(sat,"wav2vec2-conformer"),sat.forEach(t),XTo=r(Gye," \u2014 "),xq=n(Gye,"A",{href:!0});var lat=s(xq);zTo=r(lat,"Wav2Vec2ConformerModel"),lat.forEach(t),WTo=r(Gye," (Wav2Vec2-Conformer model)"),Gye.forEach(t),QTo=i($),Yu=n($,"LI",{});var Oye=s(Yu);wie=n(Oye,"STRONG",{});var iat=s(wie);HTo=r(iat,"wavlm"),iat.forEach(t),UTo=r(Oye," \u2014 "),$q=n(Oye,"A",{href:!0});var dat=s($q);JTo=r(dat,"WavLMModel"),dat.forEach(t),YTo=r(Oye," (WavLM model)"),Oye.forEach(t),KTo=i($),Ku=n($,"LI",{});var Vye=s(Ku);Aie=n(Vye,"STRONG",{});var cat=s(Aie);ZTo=r(cat,"xglm"),cat.forEach(t),e7o=r(Vye," \u2014 "),kq=n(Vye,"A",{href:!0});var fat=s(kq);o7o=r(fat,"XGLMModel"),fat.forEach(t),r7o=r(Vye," (XGLM model)"),Vye.forEach(t),t7o=i($),Zu=n($,"LI",{});var Xye=s(Zu);yie=n(Xye,"STRONG",{});var mat=s(yie);a7o=r(mat,"xlm"),mat.forEach(t),n7o=r(Xye," \u2014 "),Sq=n(Xye,"A",{href:!0});var gat=s(Sq);s7o=r(gat,"XLMModel"),gat.forEach(t),l7o=r(Xye," (XLM model)"),Xye.forEach(t),i7o=i($),e_=n($,"LI",{});var zye=s(e_);Lie=n(zye,"STRONG",{});var hat=s(Lie);d7o=r(hat,"xlm-prophetnet"),hat.forEach(t),c7o=r(zye," \u2014 "),Rq=n(zye,"A",{href:!0});var pat=s(Rq);f7o=r(pat,"XLMProphetNetModel"),pat.forEach(t),m7o=r(zye," (XLMProphetNet model)"),zye.forEach(t),g7o=i($),o_=n($,"LI",{});var Wye=s(o_);xie=n(Wye,"STRONG",{});var uat=s(xie);h7o=r(uat,"xlm-roberta"),uat.forEach(t),p7o=r(Wye," \u2014 "),Pq=n(Wye,"A",{href:!0});var _at=s(Pq);u7o=r(_at,"XLMRobertaModel"),_at.forEach(t),_7o=r(Wye," (XLM-RoBERTa model)"),Wye.forEach(t),b7o=i($),r_=n($,"LI",{});var Qye=s(r_);$ie=n(Qye,"STRONG",{});var bat=s($ie);v7o=r(bat,"xlm-roberta-xl"),bat.forEach(t),F7o=r(Qye," \u2014 "),Bq=n(Qye,"A",{href:!0});var vat=s(Bq);T7o=r(vat,"XLMRobertaXLModel"),vat.forEach(t),M7o=r(Qye," (XLM-RoBERTa-XL model)"),Qye.forEach(t),E7o=i($),t_=n($,"LI",{});var Hye=s(t_);kie=n(Hye,"STRONG",{});var Fat=s(kie);C7o=r(Fat,"xlnet"),Fat.forEach(t),w7o=r(Hye," \u2014 "),Iq=n(Hye,"A",{href:!0});var Tat=s(Iq);A7o=r(Tat,"XLNetModel"),Tat.forEach(t),y7o=r(Hye," (XLNet model)"),Hye.forEach(t),L7o=i($),a_=n($,"LI",{});var Uye=s(a_);Sie=n(Uye,"STRONG",{});var Mat=s(Sie);x7o=r(Mat,"yolos"),Mat.forEach(t),$7o=r(Uye," \u2014 "),Nq=n(Uye,"A",{href:!0});var Eat=s(Nq);k7o=r(Eat,"YolosModel"),Eat.forEach(t),S7o=r(Uye," (YOLOS model)"),Uye.forEach(t),R7o=i($),n_=n($,"LI",{});var Jye=s(n_);Rie=n(Jye,"STRONG",{});var Cat=s(Rie);P7o=r(Cat,"yoso"),Cat.forEach(t),B7o=r(Jye," \u2014 "),qq=n(Jye,"A",{href:!0});var wat=s(qq);I7o=r(wat,"YosoModel"),wat.forEach(t),N7o=r(Jye," (YOSO model)"),Jye.forEach(t),$.forEach(t),q7o=i(oa),s_=n(oa,"P",{});var Yye=s(s_);j7o=r(Yye,"The model is set in evaluation mode by default using "),Pie=n(Yye,"CODE",{});var Aat=s(Pie);D7o=r(Aat,"model.eval()"),Aat.forEach(t),G7o=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=n(Yye,"CODE",{});var yat=s(Bie);O7o=r(yat,"model.train()"),yat.forEach(t),Yye.forEach(t),V7o=i(oa),T(l_.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Pqe=i(f),xi=n(f,"H2",{class:!0});var qDe=s(xi);i_=n(qDe,"A",{id:!0,class:!0,href:!0});var Lat=s(i_);Iie=n(Lat,"SPAN",{});var xat=s(Iie);T(dy.$$.fragment,xat),xat.forEach(t),Lat.forEach(t),X7o=i(qDe),Nie=n(qDe,"SPAN",{});var $at=s(Nie);z7o=r($at,"AutoModelForPreTraining"),$at.forEach(t),qDe.forEach(t),Bqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(cy.$$.fragment,Vs),W7o=i(Vs),$i=n(Vs,"P",{});var xZ=s($i);Q7o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=n(xZ,"A",{href:!0});var kat=s(jq);H7o=r(kat,"from_pretrained()"),kat.forEach(t),U7o=r(xZ," class method or the "),Dq=n(xZ,"A",{href:!0});var Sat=s(Dq);J7o=r(Sat,"from_config()"),Sat.forEach(t),Y7o=r(xZ,` class
method.`),xZ.forEach(t),K7o=i(Vs),fy=n(Vs,"P",{});var jDe=s(fy);Z7o=r(jDe,"This class cannot be instantiated directly using "),qie=n(jDe,"CODE",{});var Rat=s(qie);eMo=r(Rat,"__init__()"),Rat.forEach(t),oMo=r(jDe," (throws an error)."),jDe.forEach(t),rMo=i(Vs),at=n(Vs,"DIV",{class:!0});var q0=s(at);T(my.$$.fragment,q0),tMo=i(q0),jie=n(q0,"P",{});var Pat=s(jie);aMo=r(Pat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pat.forEach(t),nMo=i(q0),ki=n(q0,"P",{});var $Z=s(ki);sMo=r($Z,`Note:
Loading a model from its configuration file does `),Die=n($Z,"STRONG",{});var Bat=s(Die);lMo=r(Bat,"not"),Bat.forEach(t),iMo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n($Z,"A",{href:!0});var Iat=s(Gq);dMo=r(Iat,"from_pretrained()"),Iat.forEach(t),cMo=r($Z," to load the model weights."),$Z.forEach(t),fMo=i(q0),T(d_.$$.fragment,q0),q0.forEach(t),mMo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(gy.$$.fragment,ra),gMo=i(ra),Gie=n(ra,"P",{});var Nat=s(Gie);hMo=r(Nat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nat.forEach(t),pMo=i(ra),xa=n(ra,"P",{});var j0=s(xa);uMo=r(j0,"The model class to instantiate is selected based on the "),Oie=n(j0,"CODE",{});var qat=s(Oie);_Mo=r(qat,"model_type"),qat.forEach(t),bMo=r(j0,` property of the config object (either
passed as an argument or loaded from `),Vie=n(j0,"CODE",{});var jat=s(Vie);vMo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),FMo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=n(j0,"CODE",{});var Dat=s(Xie);TMo=r(Dat,"pretrained_model_name_or_path"),Dat.forEach(t),MMo=r(j0,":"),j0.forEach(t),EMo=i(ra),G=n(ra,"UL",{});var O=s(G);c_=n(O,"LI",{});var Kye=s(c_);zie=n(Kye,"STRONG",{});var Gat=s(zie);CMo=r(Gat,"albert"),Gat.forEach(t),wMo=r(Kye," \u2014 "),Oq=n(Kye,"A",{href:!0});var Oat=s(Oq);AMo=r(Oat,"AlbertForPreTraining"),Oat.forEach(t),yMo=r(Kye," (ALBERT model)"),Kye.forEach(t),LMo=i(O),f_=n(O,"LI",{});var Zye=s(f_);Wie=n(Zye,"STRONG",{});var Vat=s(Wie);xMo=r(Vat,"bart"),Vat.forEach(t),$Mo=r(Zye," \u2014 "),Vq=n(Zye,"A",{href:!0});var Xat=s(Vq);kMo=r(Xat,"BartForConditionalGeneration"),Xat.forEach(t),SMo=r(Zye," (BART model)"),Zye.forEach(t),RMo=i(O),m_=n(O,"LI",{});var eLe=s(m_);Qie=n(eLe,"STRONG",{});var zat=s(Qie);PMo=r(zat,"bert"),zat.forEach(t),BMo=r(eLe," \u2014 "),Xq=n(eLe,"A",{href:!0});var Wat=s(Xq);IMo=r(Wat,"BertForPreTraining"),Wat.forEach(t),NMo=r(eLe," (BERT model)"),eLe.forEach(t),qMo=i(O),g_=n(O,"LI",{});var oLe=s(g_);Hie=n(oLe,"STRONG",{});var Qat=s(Hie);jMo=r(Qat,"big_bird"),Qat.forEach(t),DMo=r(oLe," \u2014 "),zq=n(oLe,"A",{href:!0});var Hat=s(zq);GMo=r(Hat,"BigBirdForPreTraining"),Hat.forEach(t),OMo=r(oLe," (BigBird model)"),oLe.forEach(t),VMo=i(O),h_=n(O,"LI",{});var rLe=s(h_);Uie=n(rLe,"STRONG",{});var Uat=s(Uie);XMo=r(Uat,"camembert"),Uat.forEach(t),zMo=r(rLe," \u2014 "),Wq=n(rLe,"A",{href:!0});var Jat=s(Wq);WMo=r(Jat,"CamembertForMaskedLM"),Jat.forEach(t),QMo=r(rLe," (CamemBERT model)"),rLe.forEach(t),HMo=i(O),p_=n(O,"LI",{});var tLe=s(p_);Jie=n(tLe,"STRONG",{});var Yat=s(Jie);UMo=r(Yat,"ctrl"),Yat.forEach(t),JMo=r(tLe," \u2014 "),Qq=n(tLe,"A",{href:!0});var Kat=s(Qq);YMo=r(Kat,"CTRLLMHeadModel"),Kat.forEach(t),KMo=r(tLe," (CTRL model)"),tLe.forEach(t),ZMo=i(O),u_=n(O,"LI",{});var aLe=s(u_);Yie=n(aLe,"STRONG",{});var Zat=s(Yie);e4o=r(Zat,"data2vec-text"),Zat.forEach(t),o4o=r(aLe," \u2014 "),Hq=n(aLe,"A",{href:!0});var ent=s(Hq);r4o=r(ent,"Data2VecTextForMaskedLM"),ent.forEach(t),t4o=r(aLe," (Data2VecText model)"),aLe.forEach(t),a4o=i(O),__=n(O,"LI",{});var nLe=s(__);Kie=n(nLe,"STRONG",{});var ont=s(Kie);n4o=r(ont,"deberta"),ont.forEach(t),s4o=r(nLe," \u2014 "),Uq=n(nLe,"A",{href:!0});var rnt=s(Uq);l4o=r(rnt,"DebertaForMaskedLM"),rnt.forEach(t),i4o=r(nLe," (DeBERTa model)"),nLe.forEach(t),d4o=i(O),b_=n(O,"LI",{});var sLe=s(b_);Zie=n(sLe,"STRONG",{});var tnt=s(Zie);c4o=r(tnt,"deberta-v2"),tnt.forEach(t),f4o=r(sLe," \u2014 "),Jq=n(sLe,"A",{href:!0});var ant=s(Jq);m4o=r(ant,"DebertaV2ForMaskedLM"),ant.forEach(t),g4o=r(sLe," (DeBERTa-v2 model)"),sLe.forEach(t),h4o=i(O),v_=n(O,"LI",{});var lLe=s(v_);ede=n(lLe,"STRONG",{});var nnt=s(ede);p4o=r(nnt,"distilbert"),nnt.forEach(t),u4o=r(lLe," \u2014 "),Yq=n(lLe,"A",{href:!0});var snt=s(Yq);_4o=r(snt,"DistilBertForMaskedLM"),snt.forEach(t),b4o=r(lLe," (DistilBERT model)"),lLe.forEach(t),v4o=i(O),F_=n(O,"LI",{});var iLe=s(F_);ode=n(iLe,"STRONG",{});var lnt=s(ode);F4o=r(lnt,"electra"),lnt.forEach(t),T4o=r(iLe," \u2014 "),Kq=n(iLe,"A",{href:!0});var int=s(Kq);M4o=r(int,"ElectraForPreTraining"),int.forEach(t),E4o=r(iLe," (ELECTRA model)"),iLe.forEach(t),C4o=i(O),T_=n(O,"LI",{});var dLe=s(T_);rde=n(dLe,"STRONG",{});var dnt=s(rde);w4o=r(dnt,"flaubert"),dnt.forEach(t),A4o=r(dLe," \u2014 "),Zq=n(dLe,"A",{href:!0});var cnt=s(Zq);y4o=r(cnt,"FlaubertWithLMHeadModel"),cnt.forEach(t),L4o=r(dLe," (FlauBERT model)"),dLe.forEach(t),x4o=i(O),M_=n(O,"LI",{});var cLe=s(M_);tde=n(cLe,"STRONG",{});var fnt=s(tde);$4o=r(fnt,"flava"),fnt.forEach(t),k4o=r(cLe," \u2014 "),ej=n(cLe,"A",{href:!0});var mnt=s(ej);S4o=r(mnt,"FlavaForPreTraining"),mnt.forEach(t),R4o=r(cLe," (Flava model)"),cLe.forEach(t),P4o=i(O),E_=n(O,"LI",{});var fLe=s(E_);ade=n(fLe,"STRONG",{});var gnt=s(ade);B4o=r(gnt,"fnet"),gnt.forEach(t),I4o=r(fLe," \u2014 "),oj=n(fLe,"A",{href:!0});var hnt=s(oj);N4o=r(hnt,"FNetForPreTraining"),hnt.forEach(t),q4o=r(fLe," (FNet model)"),fLe.forEach(t),j4o=i(O),C_=n(O,"LI",{});var mLe=s(C_);nde=n(mLe,"STRONG",{});var pnt=s(nde);D4o=r(pnt,"fsmt"),pnt.forEach(t),G4o=r(mLe," \u2014 "),rj=n(mLe,"A",{href:!0});var unt=s(rj);O4o=r(unt,"FSMTForConditionalGeneration"),unt.forEach(t),V4o=r(mLe," (FairSeq Machine-Translation model)"),mLe.forEach(t),X4o=i(O),w_=n(O,"LI",{});var gLe=s(w_);sde=n(gLe,"STRONG",{});var _nt=s(sde);z4o=r(_nt,"funnel"),_nt.forEach(t),W4o=r(gLe," \u2014 "),tj=n(gLe,"A",{href:!0});var bnt=s(tj);Q4o=r(bnt,"FunnelForPreTraining"),bnt.forEach(t),H4o=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),U4o=i(O),A_=n(O,"LI",{});var hLe=s(A_);lde=n(hLe,"STRONG",{});var vnt=s(lde);J4o=r(vnt,"gpt2"),vnt.forEach(t),Y4o=r(hLe," \u2014 "),aj=n(hLe,"A",{href:!0});var Fnt=s(aj);K4o=r(Fnt,"GPT2LMHeadModel"),Fnt.forEach(t),Z4o=r(hLe," (OpenAI GPT-2 model)"),hLe.forEach(t),eEo=i(O),y_=n(O,"LI",{});var pLe=s(y_);ide=n(pLe,"STRONG",{});var Tnt=s(ide);oEo=r(Tnt,"ibert"),Tnt.forEach(t),rEo=r(pLe," \u2014 "),nj=n(pLe,"A",{href:!0});var Mnt=s(nj);tEo=r(Mnt,"IBertForMaskedLM"),Mnt.forEach(t),aEo=r(pLe," (I-BERT model)"),pLe.forEach(t),nEo=i(O),L_=n(O,"LI",{});var uLe=s(L_);dde=n(uLe,"STRONG",{});var Ent=s(dde);sEo=r(Ent,"layoutlm"),Ent.forEach(t),lEo=r(uLe," \u2014 "),sj=n(uLe,"A",{href:!0});var Cnt=s(sj);iEo=r(Cnt,"LayoutLMForMaskedLM"),Cnt.forEach(t),dEo=r(uLe," (LayoutLM model)"),uLe.forEach(t),cEo=i(O),x_=n(O,"LI",{});var _Le=s(x_);cde=n(_Le,"STRONG",{});var wnt=s(cde);fEo=r(wnt,"longformer"),wnt.forEach(t),mEo=r(_Le," \u2014 "),lj=n(_Le,"A",{href:!0});var Ant=s(lj);gEo=r(Ant,"LongformerForMaskedLM"),Ant.forEach(t),hEo=r(_Le," (Longformer model)"),_Le.forEach(t),pEo=i(O),$_=n(O,"LI",{});var bLe=s($_);fde=n(bLe,"STRONG",{});var ynt=s(fde);uEo=r(ynt,"lxmert"),ynt.forEach(t),_Eo=r(bLe," \u2014 "),ij=n(bLe,"A",{href:!0});var Lnt=s(ij);bEo=r(Lnt,"LxmertForPreTraining"),Lnt.forEach(t),vEo=r(bLe," (LXMERT model)"),bLe.forEach(t),FEo=i(O),k_=n(O,"LI",{});var vLe=s(k_);mde=n(vLe,"STRONG",{});var xnt=s(mde);TEo=r(xnt,"megatron-bert"),xnt.forEach(t),MEo=r(vLe," \u2014 "),dj=n(vLe,"A",{href:!0});var $nt=s(dj);EEo=r($nt,"MegatronBertForPreTraining"),$nt.forEach(t),CEo=r(vLe," (MegatronBert model)"),vLe.forEach(t),wEo=i(O),S_=n(O,"LI",{});var FLe=s(S_);gde=n(FLe,"STRONG",{});var knt=s(gde);AEo=r(knt,"mobilebert"),knt.forEach(t),yEo=r(FLe," \u2014 "),cj=n(FLe,"A",{href:!0});var Snt=s(cj);LEo=r(Snt,"MobileBertForPreTraining"),Snt.forEach(t),xEo=r(FLe," (MobileBERT model)"),FLe.forEach(t),$Eo=i(O),R_=n(O,"LI",{});var TLe=s(R_);hde=n(TLe,"STRONG",{});var Rnt=s(hde);kEo=r(Rnt,"mpnet"),Rnt.forEach(t),SEo=r(TLe," \u2014 "),fj=n(TLe,"A",{href:!0});var Pnt=s(fj);REo=r(Pnt,"MPNetForMaskedLM"),Pnt.forEach(t),PEo=r(TLe," (MPNet model)"),TLe.forEach(t),BEo=i(O),P_=n(O,"LI",{});var MLe=s(P_);pde=n(MLe,"STRONG",{});var Bnt=s(pde);IEo=r(Bnt,"openai-gpt"),Bnt.forEach(t),NEo=r(MLe," \u2014 "),mj=n(MLe,"A",{href:!0});var Int=s(mj);qEo=r(Int,"OpenAIGPTLMHeadModel"),Int.forEach(t),jEo=r(MLe," (OpenAI GPT model)"),MLe.forEach(t),DEo=i(O),B_=n(O,"LI",{});var ELe=s(B_);ude=n(ELe,"STRONG",{});var Nnt=s(ude);GEo=r(Nnt,"retribert"),Nnt.forEach(t),OEo=r(ELe," \u2014 "),gj=n(ELe,"A",{href:!0});var qnt=s(gj);VEo=r(qnt,"RetriBertModel"),qnt.forEach(t),XEo=r(ELe," (RetriBERT model)"),ELe.forEach(t),zEo=i(O),I_=n(O,"LI",{});var CLe=s(I_);_de=n(CLe,"STRONG",{});var jnt=s(_de);WEo=r(jnt,"roberta"),jnt.forEach(t),QEo=r(CLe," \u2014 "),hj=n(CLe,"A",{href:!0});var Dnt=s(hj);HEo=r(Dnt,"RobertaForMaskedLM"),Dnt.forEach(t),UEo=r(CLe," (RoBERTa model)"),CLe.forEach(t),JEo=i(O),N_=n(O,"LI",{});var wLe=s(N_);bde=n(wLe,"STRONG",{});var Gnt=s(bde);YEo=r(Gnt,"splinter"),Gnt.forEach(t),KEo=r(wLe," \u2014 "),pj=n(wLe,"A",{href:!0});var Ont=s(pj);ZEo=r(Ont,"SplinterForPreTraining"),Ont.forEach(t),eCo=r(wLe," (Splinter model)"),wLe.forEach(t),oCo=i(O),q_=n(O,"LI",{});var ALe=s(q_);vde=n(ALe,"STRONG",{});var Vnt=s(vde);rCo=r(Vnt,"squeezebert"),Vnt.forEach(t),tCo=r(ALe," \u2014 "),uj=n(ALe,"A",{href:!0});var Xnt=s(uj);aCo=r(Xnt,"SqueezeBertForMaskedLM"),Xnt.forEach(t),nCo=r(ALe," (SqueezeBERT model)"),ALe.forEach(t),sCo=i(O),j_=n(O,"LI",{});var yLe=s(j_);Fde=n(yLe,"STRONG",{});var znt=s(Fde);lCo=r(znt,"t5"),znt.forEach(t),iCo=r(yLe," \u2014 "),_j=n(yLe,"A",{href:!0});var Wnt=s(_j);dCo=r(Wnt,"T5ForConditionalGeneration"),Wnt.forEach(t),cCo=r(yLe," (T5 model)"),yLe.forEach(t),fCo=i(O),D_=n(O,"LI",{});var LLe=s(D_);Tde=n(LLe,"STRONG",{});var Qnt=s(Tde);mCo=r(Qnt,"tapas"),Qnt.forEach(t),gCo=r(LLe," \u2014 "),bj=n(LLe,"A",{href:!0});var Hnt=s(bj);hCo=r(Hnt,"TapasForMaskedLM"),Hnt.forEach(t),pCo=r(LLe," (TAPAS model)"),LLe.forEach(t),uCo=i(O),G_=n(O,"LI",{});var xLe=s(G_);Mde=n(xLe,"STRONG",{});var Unt=s(Mde);_Co=r(Unt,"transfo-xl"),Unt.forEach(t),bCo=r(xLe," \u2014 "),vj=n(xLe,"A",{href:!0});var Jnt=s(vj);vCo=r(Jnt,"TransfoXLLMHeadModel"),Jnt.forEach(t),FCo=r(xLe," (Transformer-XL model)"),xLe.forEach(t),TCo=i(O),O_=n(O,"LI",{});var $Le=s(O_);Ede=n($Le,"STRONG",{});var Ynt=s(Ede);MCo=r(Ynt,"unispeech"),Ynt.forEach(t),ECo=r($Le," \u2014 "),Fj=n($Le,"A",{href:!0});var Knt=s(Fj);CCo=r(Knt,"UniSpeechForPreTraining"),Knt.forEach(t),wCo=r($Le," (UniSpeech model)"),$Le.forEach(t),ACo=i(O),V_=n(O,"LI",{});var kLe=s(V_);Cde=n(kLe,"STRONG",{});var Znt=s(Cde);yCo=r(Znt,"unispeech-sat"),Znt.forEach(t),LCo=r(kLe," \u2014 "),Tj=n(kLe,"A",{href:!0});var est=s(Tj);xCo=r(est,"UniSpeechSatForPreTraining"),est.forEach(t),$Co=r(kLe," (UniSpeechSat model)"),kLe.forEach(t),kCo=i(O),X_=n(O,"LI",{});var SLe=s(X_);wde=n(SLe,"STRONG",{});var ost=s(wde);SCo=r(ost,"visual_bert"),ost.forEach(t),RCo=r(SLe," \u2014 "),Mj=n(SLe,"A",{href:!0});var rst=s(Mj);PCo=r(rst,"VisualBertForPreTraining"),rst.forEach(t),BCo=r(SLe," (VisualBert model)"),SLe.forEach(t),ICo=i(O),z_=n(O,"LI",{});var RLe=s(z_);Ade=n(RLe,"STRONG",{});var tst=s(Ade);NCo=r(tst,"vit_mae"),tst.forEach(t),qCo=r(RLe," \u2014 "),Ej=n(RLe,"A",{href:!0});var ast=s(Ej);jCo=r(ast,"ViTMAEForPreTraining"),ast.forEach(t),DCo=r(RLe," (ViTMAE model)"),RLe.forEach(t),GCo=i(O),W_=n(O,"LI",{});var PLe=s(W_);yde=n(PLe,"STRONG",{});var nst=s(yde);OCo=r(nst,"wav2vec2"),nst.forEach(t),VCo=r(PLe," \u2014 "),Cj=n(PLe,"A",{href:!0});var sst=s(Cj);XCo=r(sst,"Wav2Vec2ForPreTraining"),sst.forEach(t),zCo=r(PLe," (Wav2Vec2 model)"),PLe.forEach(t),WCo=i(O),Q_=n(O,"LI",{});var BLe=s(Q_);Lde=n(BLe,"STRONG",{});var lst=s(Lde);QCo=r(lst,"wav2vec2-conformer"),lst.forEach(t),HCo=r(BLe," \u2014 "),wj=n(BLe,"A",{href:!0});var ist=s(wj);UCo=r(ist,"Wav2Vec2ConformerForPreTraining"),ist.forEach(t),JCo=r(BLe," (Wav2Vec2-Conformer model)"),BLe.forEach(t),YCo=i(O),H_=n(O,"LI",{});var ILe=s(H_);xde=n(ILe,"STRONG",{});var dst=s(xde);KCo=r(dst,"xlm"),dst.forEach(t),ZCo=r(ILe," \u2014 "),Aj=n(ILe,"A",{href:!0});var cst=s(Aj);e5o=r(cst,"XLMWithLMHeadModel"),cst.forEach(t),o5o=r(ILe," (XLM model)"),ILe.forEach(t),r5o=i(O),U_=n(O,"LI",{});var NLe=s(U_);$de=n(NLe,"STRONG",{});var fst=s($de);t5o=r(fst,"xlm-roberta"),fst.forEach(t),a5o=r(NLe," \u2014 "),yj=n(NLe,"A",{href:!0});var mst=s(yj);n5o=r(mst,"XLMRobertaForMaskedLM"),mst.forEach(t),s5o=r(NLe," (XLM-RoBERTa model)"),NLe.forEach(t),l5o=i(O),J_=n(O,"LI",{});var qLe=s(J_);kde=n(qLe,"STRONG",{});var gst=s(kde);i5o=r(gst,"xlm-roberta-xl"),gst.forEach(t),d5o=r(qLe," \u2014 "),Lj=n(qLe,"A",{href:!0});var hst=s(Lj);c5o=r(hst,"XLMRobertaXLForMaskedLM"),hst.forEach(t),f5o=r(qLe," (XLM-RoBERTa-XL model)"),qLe.forEach(t),m5o=i(O),Y_=n(O,"LI",{});var jLe=s(Y_);Sde=n(jLe,"STRONG",{});var pst=s(Sde);g5o=r(pst,"xlnet"),pst.forEach(t),h5o=r(jLe," \u2014 "),xj=n(jLe,"A",{href:!0});var ust=s(xj);p5o=r(ust,"XLNetLMHeadModel"),ust.forEach(t),u5o=r(jLe," (XLNet model)"),jLe.forEach(t),O.forEach(t),_5o=i(ra),K_=n(ra,"P",{});var DLe=s(K_);b5o=r(DLe,"The model is set in evaluation mode by default using "),Rde=n(DLe,"CODE",{});var _st=s(Rde);v5o=r(_st,"model.eval()"),_st.forEach(t),F5o=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(DLe,"CODE",{});var bst=s(Pde);T5o=r(bst,"model.train()"),bst.forEach(t),DLe.forEach(t),M5o=i(ra),T(Z_.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Iqe=i(f),Si=n(f,"H2",{class:!0});var DDe=s(Si);e1=n(DDe,"A",{id:!0,class:!0,href:!0});var vst=s(e1);Bde=n(vst,"SPAN",{});var Fst=s(Bde);T(hy.$$.fragment,Fst),Fst.forEach(t),vst.forEach(t),E5o=i(DDe),Ide=n(DDe,"SPAN",{});var Tst=s(Ide);C5o=r(Tst,"AutoModelForCausalLM"),Tst.forEach(t),DDe.forEach(t),Nqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(py.$$.fragment,Xs),w5o=i(Xs),Ri=n(Xs,"P",{});var kZ=s(Ri);A5o=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$j=n(kZ,"A",{href:!0});var Mst=s($j);y5o=r(Mst,"from_pretrained()"),Mst.forEach(t),L5o=r(kZ," class method or the "),kj=n(kZ,"A",{href:!0});var Est=s(kj);x5o=r(Est,"from_config()"),Est.forEach(t),$5o=r(kZ,` class
method.`),kZ.forEach(t),k5o=i(Xs),uy=n(Xs,"P",{});var GDe=s(uy);S5o=r(GDe,"This class cannot be instantiated directly using "),Nde=n(GDe,"CODE",{});var Cst=s(Nde);R5o=r(Cst,"__init__()"),Cst.forEach(t),P5o=r(GDe," (throws an error)."),GDe.forEach(t),B5o=i(Xs),nt=n(Xs,"DIV",{class:!0});var D0=s(nt);T(_y.$$.fragment,D0),I5o=i(D0),qde=n(D0,"P",{});var wst=s(qde);N5o=r(wst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wst.forEach(t),q5o=i(D0),Pi=n(D0,"P",{});var SZ=s(Pi);j5o=r(SZ,`Note:
Loading a model from its configuration file does `),jde=n(SZ,"STRONG",{});var Ast=s(jde);D5o=r(Ast,"not"),Ast.forEach(t),G5o=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(SZ,"A",{href:!0});var yst=s(Sj);O5o=r(yst,"from_pretrained()"),yst.forEach(t),V5o=r(SZ," to load the model weights."),SZ.forEach(t),X5o=i(D0),T(o1.$$.fragment,D0),D0.forEach(t),z5o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(by.$$.fragment,ta),W5o=i(ta),Dde=n(ta,"P",{});var Lst=s(Dde);Q5o=r(Lst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lst.forEach(t),H5o=i(ta),$a=n(ta,"P",{});var G0=s($a);U5o=r(G0,"The model class to instantiate is selected based on the "),Gde=n(G0,"CODE",{});var xst=s(Gde);J5o=r(xst,"model_type"),xst.forEach(t),Y5o=r(G0,` property of the config object (either
passed as an argument or loaded from `),Ode=n(G0,"CODE",{});var $st=s(Ode);K5o=r($st,"pretrained_model_name_or_path"),$st.forEach(t),Z5o=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(G0,"CODE",{});var kst=s(Vde);ewo=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),owo=r(G0,":"),G0.forEach(t),rwo=i(ta),z=n(ta,"UL",{});var W=s(z);r1=n(W,"LI",{});var GLe=s(r1);Xde=n(GLe,"STRONG",{});var Sst=s(Xde);two=r(Sst,"bart"),Sst.forEach(t),awo=r(GLe," \u2014 "),Rj=n(GLe,"A",{href:!0});var Rst=s(Rj);nwo=r(Rst,"BartForCausalLM"),Rst.forEach(t),swo=r(GLe," (BART model)"),GLe.forEach(t),lwo=i(W),t1=n(W,"LI",{});var OLe=s(t1);zde=n(OLe,"STRONG",{});var Pst=s(zde);iwo=r(Pst,"bert"),Pst.forEach(t),dwo=r(OLe," \u2014 "),Pj=n(OLe,"A",{href:!0});var Bst=s(Pj);cwo=r(Bst,"BertLMHeadModel"),Bst.forEach(t),fwo=r(OLe," (BERT model)"),OLe.forEach(t),mwo=i(W),a1=n(W,"LI",{});var VLe=s(a1);Wde=n(VLe,"STRONG",{});var Ist=s(Wde);gwo=r(Ist,"bert-generation"),Ist.forEach(t),hwo=r(VLe," \u2014 "),Bj=n(VLe,"A",{href:!0});var Nst=s(Bj);pwo=r(Nst,"BertGenerationDecoder"),Nst.forEach(t),uwo=r(VLe," (Bert Generation model)"),VLe.forEach(t),_wo=i(W),n1=n(W,"LI",{});var XLe=s(n1);Qde=n(XLe,"STRONG",{});var qst=s(Qde);bwo=r(qst,"big_bird"),qst.forEach(t),vwo=r(XLe," \u2014 "),Ij=n(XLe,"A",{href:!0});var jst=s(Ij);Fwo=r(jst,"BigBirdForCausalLM"),jst.forEach(t),Two=r(XLe," (BigBird model)"),XLe.forEach(t),Mwo=i(W),s1=n(W,"LI",{});var zLe=s(s1);Hde=n(zLe,"STRONG",{});var Dst=s(Hde);Ewo=r(Dst,"bigbird_pegasus"),Dst.forEach(t),Cwo=r(zLe," \u2014 "),Nj=n(zLe,"A",{href:!0});var Gst=s(Nj);wwo=r(Gst,"BigBirdPegasusForCausalLM"),Gst.forEach(t),Awo=r(zLe," (BigBirdPegasus model)"),zLe.forEach(t),ywo=i(W),l1=n(W,"LI",{});var WLe=s(l1);Ude=n(WLe,"STRONG",{});var Ost=s(Ude);Lwo=r(Ost,"blenderbot"),Ost.forEach(t),xwo=r(WLe," \u2014 "),qj=n(WLe,"A",{href:!0});var Vst=s(qj);$wo=r(Vst,"BlenderbotForCausalLM"),Vst.forEach(t),kwo=r(WLe," (Blenderbot model)"),WLe.forEach(t),Swo=i(W),i1=n(W,"LI",{});var QLe=s(i1);Jde=n(QLe,"STRONG",{});var Xst=s(Jde);Rwo=r(Xst,"blenderbot-small"),Xst.forEach(t),Pwo=r(QLe," \u2014 "),jj=n(QLe,"A",{href:!0});var zst=s(jj);Bwo=r(zst,"BlenderbotSmallForCausalLM"),zst.forEach(t),Iwo=r(QLe," (BlenderbotSmall model)"),QLe.forEach(t),Nwo=i(W),d1=n(W,"LI",{});var HLe=s(d1);Yde=n(HLe,"STRONG",{});var Wst=s(Yde);qwo=r(Wst,"camembert"),Wst.forEach(t),jwo=r(HLe," \u2014 "),Dj=n(HLe,"A",{href:!0});var Qst=s(Dj);Dwo=r(Qst,"CamembertForCausalLM"),Qst.forEach(t),Gwo=r(HLe," (CamemBERT model)"),HLe.forEach(t),Owo=i(W),c1=n(W,"LI",{});var ULe=s(c1);Kde=n(ULe,"STRONG",{});var Hst=s(Kde);Vwo=r(Hst,"ctrl"),Hst.forEach(t),Xwo=r(ULe," \u2014 "),Gj=n(ULe,"A",{href:!0});var Ust=s(Gj);zwo=r(Ust,"CTRLLMHeadModel"),Ust.forEach(t),Wwo=r(ULe," (CTRL model)"),ULe.forEach(t),Qwo=i(W),f1=n(W,"LI",{});var JLe=s(f1);Zde=n(JLe,"STRONG",{});var Jst=s(Zde);Hwo=r(Jst,"data2vec-text"),Jst.forEach(t),Uwo=r(JLe," \u2014 "),Oj=n(JLe,"A",{href:!0});var Yst=s(Oj);Jwo=r(Yst,"Data2VecTextForCausalLM"),Yst.forEach(t),Ywo=r(JLe," (Data2VecText model)"),JLe.forEach(t),Kwo=i(W),m1=n(W,"LI",{});var YLe=s(m1);ece=n(YLe,"STRONG",{});var Kst=s(ece);Zwo=r(Kst,"electra"),Kst.forEach(t),e0o=r(YLe," \u2014 "),Vj=n(YLe,"A",{href:!0});var Zst=s(Vj);o0o=r(Zst,"ElectraForCausalLM"),Zst.forEach(t),r0o=r(YLe," (ELECTRA model)"),YLe.forEach(t),t0o=i(W),g1=n(W,"LI",{});var KLe=s(g1);oce=n(KLe,"STRONG",{});var elt=s(oce);a0o=r(elt,"gpt2"),elt.forEach(t),n0o=r(KLe," \u2014 "),Xj=n(KLe,"A",{href:!0});var olt=s(Xj);s0o=r(olt,"GPT2LMHeadModel"),olt.forEach(t),l0o=r(KLe," (OpenAI GPT-2 model)"),KLe.forEach(t),i0o=i(W),h1=n(W,"LI",{});var ZLe=s(h1);rce=n(ZLe,"STRONG",{});var rlt=s(rce);d0o=r(rlt,"gpt_neo"),rlt.forEach(t),c0o=r(ZLe," \u2014 "),zj=n(ZLe,"A",{href:!0});var tlt=s(zj);f0o=r(tlt,"GPTNeoForCausalLM"),tlt.forEach(t),m0o=r(ZLe," (GPT Neo model)"),ZLe.forEach(t),g0o=i(W),p1=n(W,"LI",{});var e8e=s(p1);tce=n(e8e,"STRONG",{});var alt=s(tce);h0o=r(alt,"gpt_neox"),alt.forEach(t),p0o=r(e8e," \u2014 "),Wj=n(e8e,"A",{href:!0});var nlt=s(Wj);u0o=r(nlt,"GPTNeoXForCausalLM"),nlt.forEach(t),_0o=r(e8e," (GPT NeoX model)"),e8e.forEach(t),b0o=i(W),u1=n(W,"LI",{});var o8e=s(u1);ace=n(o8e,"STRONG",{});var slt=s(ace);v0o=r(slt,"gptj"),slt.forEach(t),F0o=r(o8e," \u2014 "),Qj=n(o8e,"A",{href:!0});var llt=s(Qj);T0o=r(llt,"GPTJForCausalLM"),llt.forEach(t),M0o=r(o8e," (GPT-J model)"),o8e.forEach(t),E0o=i(W),_1=n(W,"LI",{});var r8e=s(_1);nce=n(r8e,"STRONG",{});var ilt=s(nce);C0o=r(ilt,"marian"),ilt.forEach(t),w0o=r(r8e," \u2014 "),Hj=n(r8e,"A",{href:!0});var dlt=s(Hj);A0o=r(dlt,"MarianForCausalLM"),dlt.forEach(t),y0o=r(r8e," (Marian model)"),r8e.forEach(t),L0o=i(W),b1=n(W,"LI",{});var t8e=s(b1);sce=n(t8e,"STRONG",{});var clt=s(sce);x0o=r(clt,"mbart"),clt.forEach(t),$0o=r(t8e," \u2014 "),Uj=n(t8e,"A",{href:!0});var flt=s(Uj);k0o=r(flt,"MBartForCausalLM"),flt.forEach(t),S0o=r(t8e," (mBART model)"),t8e.forEach(t),R0o=i(W),v1=n(W,"LI",{});var a8e=s(v1);lce=n(a8e,"STRONG",{});var mlt=s(lce);P0o=r(mlt,"megatron-bert"),mlt.forEach(t),B0o=r(a8e," \u2014 "),Jj=n(a8e,"A",{href:!0});var glt=s(Jj);I0o=r(glt,"MegatronBertForCausalLM"),glt.forEach(t),N0o=r(a8e," (MegatronBert model)"),a8e.forEach(t),q0o=i(W),F1=n(W,"LI",{});var n8e=s(F1);ice=n(n8e,"STRONG",{});var hlt=s(ice);j0o=r(hlt,"openai-gpt"),hlt.forEach(t),D0o=r(n8e," \u2014 "),Yj=n(n8e,"A",{href:!0});var plt=s(Yj);G0o=r(plt,"OpenAIGPTLMHeadModel"),plt.forEach(t),O0o=r(n8e," (OpenAI GPT model)"),n8e.forEach(t),V0o=i(W),T1=n(W,"LI",{});var s8e=s(T1);dce=n(s8e,"STRONG",{});var ult=s(dce);X0o=r(ult,"opt"),ult.forEach(t),z0o=r(s8e," \u2014 "),Kj=n(s8e,"A",{href:!0});var _lt=s(Kj);W0o=r(_lt,"OPTForCausalLM"),_lt.forEach(t),Q0o=r(s8e," (OPT model)"),s8e.forEach(t),H0o=i(W),M1=n(W,"LI",{});var l8e=s(M1);cce=n(l8e,"STRONG",{});var blt=s(cce);U0o=r(blt,"pegasus"),blt.forEach(t),J0o=r(l8e," \u2014 "),Zj=n(l8e,"A",{href:!0});var vlt=s(Zj);Y0o=r(vlt,"PegasusForCausalLM"),vlt.forEach(t),K0o=r(l8e," (Pegasus model)"),l8e.forEach(t),Z0o=i(W),E1=n(W,"LI",{});var i8e=s(E1);fce=n(i8e,"STRONG",{});var Flt=s(fce);e6o=r(Flt,"plbart"),Flt.forEach(t),o6o=r(i8e," \u2014 "),eD=n(i8e,"A",{href:!0});var Tlt=s(eD);r6o=r(Tlt,"PLBartForCausalLM"),Tlt.forEach(t),t6o=r(i8e," (PLBart model)"),i8e.forEach(t),a6o=i(W),C1=n(W,"LI",{});var d8e=s(C1);mce=n(d8e,"STRONG",{});var Mlt=s(mce);n6o=r(Mlt,"prophetnet"),Mlt.forEach(t),s6o=r(d8e," \u2014 "),oD=n(d8e,"A",{href:!0});var Elt=s(oD);l6o=r(Elt,"ProphetNetForCausalLM"),Elt.forEach(t),i6o=r(d8e," (ProphetNet model)"),d8e.forEach(t),d6o=i(W),w1=n(W,"LI",{});var c8e=s(w1);gce=n(c8e,"STRONG",{});var Clt=s(gce);c6o=r(Clt,"qdqbert"),Clt.forEach(t),f6o=r(c8e," \u2014 "),rD=n(c8e,"A",{href:!0});var wlt=s(rD);m6o=r(wlt,"QDQBertLMHeadModel"),wlt.forEach(t),g6o=r(c8e," (QDQBert model)"),c8e.forEach(t),h6o=i(W),A1=n(W,"LI",{});var f8e=s(A1);hce=n(f8e,"STRONG",{});var Alt=s(hce);p6o=r(Alt,"reformer"),Alt.forEach(t),u6o=r(f8e," \u2014 "),tD=n(f8e,"A",{href:!0});var ylt=s(tD);_6o=r(ylt,"ReformerModelWithLMHead"),ylt.forEach(t),b6o=r(f8e," (Reformer model)"),f8e.forEach(t),v6o=i(W),y1=n(W,"LI",{});var m8e=s(y1);pce=n(m8e,"STRONG",{});var Llt=s(pce);F6o=r(Llt,"rembert"),Llt.forEach(t),T6o=r(m8e," \u2014 "),aD=n(m8e,"A",{href:!0});var xlt=s(aD);M6o=r(xlt,"RemBertForCausalLM"),xlt.forEach(t),E6o=r(m8e," (RemBERT model)"),m8e.forEach(t),C6o=i(W),L1=n(W,"LI",{});var g8e=s(L1);uce=n(g8e,"STRONG",{});var $lt=s(uce);w6o=r($lt,"roberta"),$lt.forEach(t),A6o=r(g8e," \u2014 "),nD=n(g8e,"A",{href:!0});var klt=s(nD);y6o=r(klt,"RobertaForCausalLM"),klt.forEach(t),L6o=r(g8e," (RoBERTa model)"),g8e.forEach(t),x6o=i(W),x1=n(W,"LI",{});var h8e=s(x1);_ce=n(h8e,"STRONG",{});var Slt=s(_ce);$6o=r(Slt,"roformer"),Slt.forEach(t),k6o=r(h8e," \u2014 "),sD=n(h8e,"A",{href:!0});var Rlt=s(sD);S6o=r(Rlt,"RoFormerForCausalLM"),Rlt.forEach(t),R6o=r(h8e," (RoFormer model)"),h8e.forEach(t),P6o=i(W),$1=n(W,"LI",{});var p8e=s($1);bce=n(p8e,"STRONG",{});var Plt=s(bce);B6o=r(Plt,"speech_to_text_2"),Plt.forEach(t),I6o=r(p8e," \u2014 "),lD=n(p8e,"A",{href:!0});var Blt=s(lD);N6o=r(Blt,"Speech2Text2ForCausalLM"),Blt.forEach(t),q6o=r(p8e," (Speech2Text2 model)"),p8e.forEach(t),j6o=i(W),k1=n(W,"LI",{});var u8e=s(k1);vce=n(u8e,"STRONG",{});var Ilt=s(vce);D6o=r(Ilt,"transfo-xl"),Ilt.forEach(t),G6o=r(u8e," \u2014 "),iD=n(u8e,"A",{href:!0});var Nlt=s(iD);O6o=r(Nlt,"TransfoXLLMHeadModel"),Nlt.forEach(t),V6o=r(u8e," (Transformer-XL model)"),u8e.forEach(t),X6o=i(W),S1=n(W,"LI",{});var _8e=s(S1);Fce=n(_8e,"STRONG",{});var qlt=s(Fce);z6o=r(qlt,"trocr"),qlt.forEach(t),W6o=r(_8e," \u2014 "),dD=n(_8e,"A",{href:!0});var jlt=s(dD);Q6o=r(jlt,"TrOCRForCausalLM"),jlt.forEach(t),H6o=r(_8e," (TrOCR model)"),_8e.forEach(t),U6o=i(W),R1=n(W,"LI",{});var b8e=s(R1);Tce=n(b8e,"STRONG",{});var Dlt=s(Tce);J6o=r(Dlt,"xglm"),Dlt.forEach(t),Y6o=r(b8e," \u2014 "),cD=n(b8e,"A",{href:!0});var Glt=s(cD);K6o=r(Glt,"XGLMForCausalLM"),Glt.forEach(t),Z6o=r(b8e," (XGLM model)"),b8e.forEach(t),eAo=i(W),P1=n(W,"LI",{});var v8e=s(P1);Mce=n(v8e,"STRONG",{});var Olt=s(Mce);oAo=r(Olt,"xlm"),Olt.forEach(t),rAo=r(v8e," \u2014 "),fD=n(v8e,"A",{href:!0});var Vlt=s(fD);tAo=r(Vlt,"XLMWithLMHeadModel"),Vlt.forEach(t),aAo=r(v8e," (XLM model)"),v8e.forEach(t),nAo=i(W),B1=n(W,"LI",{});var F8e=s(B1);Ece=n(F8e,"STRONG",{});var Xlt=s(Ece);sAo=r(Xlt,"xlm-prophetnet"),Xlt.forEach(t),lAo=r(F8e," \u2014 "),mD=n(F8e,"A",{href:!0});var zlt=s(mD);iAo=r(zlt,"XLMProphetNetForCausalLM"),zlt.forEach(t),dAo=r(F8e," (XLMProphetNet model)"),F8e.forEach(t),cAo=i(W),I1=n(W,"LI",{});var T8e=s(I1);Cce=n(T8e,"STRONG",{});var Wlt=s(Cce);fAo=r(Wlt,"xlm-roberta"),Wlt.forEach(t),mAo=r(T8e," \u2014 "),gD=n(T8e,"A",{href:!0});var Qlt=s(gD);gAo=r(Qlt,"XLMRobertaForCausalLM"),Qlt.forEach(t),hAo=r(T8e," (XLM-RoBERTa model)"),T8e.forEach(t),pAo=i(W),N1=n(W,"LI",{});var M8e=s(N1);wce=n(M8e,"STRONG",{});var Hlt=s(wce);uAo=r(Hlt,"xlm-roberta-xl"),Hlt.forEach(t),_Ao=r(M8e," \u2014 "),hD=n(M8e,"A",{href:!0});var Ult=s(hD);bAo=r(Ult,"XLMRobertaXLForCausalLM"),Ult.forEach(t),vAo=r(M8e," (XLM-RoBERTa-XL model)"),M8e.forEach(t),FAo=i(W),q1=n(W,"LI",{});var E8e=s(q1);Ace=n(E8e,"STRONG",{});var Jlt=s(Ace);TAo=r(Jlt,"xlnet"),Jlt.forEach(t),MAo=r(E8e," \u2014 "),pD=n(E8e,"A",{href:!0});var Ylt=s(pD);EAo=r(Ylt,"XLNetLMHeadModel"),Ylt.forEach(t),CAo=r(E8e," (XLNet model)"),E8e.forEach(t),W.forEach(t),wAo=i(ta),j1=n(ta,"P",{});var C8e=s(j1);AAo=r(C8e,"The model is set in evaluation mode by default using "),yce=n(C8e,"CODE",{});var Klt=s(yce);yAo=r(Klt,"model.eval()"),Klt.forEach(t),LAo=r(C8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(C8e,"CODE",{});var Zlt=s(Lce);xAo=r(Zlt,"model.train()"),Zlt.forEach(t),C8e.forEach(t),$Ao=i(ta),T(D1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),qqe=i(f),Bi=n(f,"H2",{class:!0});var ODe=s(Bi);G1=n(ODe,"A",{id:!0,class:!0,href:!0});var eit=s(G1);xce=n(eit,"SPAN",{});var oit=s(xce);T(vy.$$.fragment,oit),oit.forEach(t),eit.forEach(t),kAo=i(ODe),$ce=n(ODe,"SPAN",{});var rit=s($ce);SAo=r(rit,"AutoModelForMaskedLM"),rit.forEach(t),ODe.forEach(t),jqe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(Fy.$$.fragment,zs),RAo=i(zs),Ii=n(zs,"P",{});var RZ=s(Ii);PAo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=n(RZ,"A",{href:!0});var tit=s(uD);BAo=r(tit,"from_pretrained()"),tit.forEach(t),IAo=r(RZ," class method or the "),_D=n(RZ,"A",{href:!0});var ait=s(_D);NAo=r(ait,"from_config()"),ait.forEach(t),qAo=r(RZ,` class
method.`),RZ.forEach(t),jAo=i(zs),Ty=n(zs,"P",{});var VDe=s(Ty);DAo=r(VDe,"This class cannot be instantiated directly using "),kce=n(VDe,"CODE",{});var nit=s(kce);GAo=r(nit,"__init__()"),nit.forEach(t),OAo=r(VDe," (throws an error)."),VDe.forEach(t),VAo=i(zs),st=n(zs,"DIV",{class:!0});var O0=s(st);T(My.$$.fragment,O0),XAo=i(O0),Sce=n(O0,"P",{});var sit=s(Sce);zAo=r(sit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sit.forEach(t),WAo=i(O0),Ni=n(O0,"P",{});var PZ=s(Ni);QAo=r(PZ,`Note:
Loading a model from its configuration file does `),Rce=n(PZ,"STRONG",{});var lit=s(Rce);HAo=r(lit,"not"),lit.forEach(t),UAo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(PZ,"A",{href:!0});var iit=s(bD);JAo=r(iit,"from_pretrained()"),iit.forEach(t),YAo=r(PZ," to load the model weights."),PZ.forEach(t),KAo=i(O0),T(O1.$$.fragment,O0),O0.forEach(t),ZAo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(Ey.$$.fragment,aa),eyo=i(aa),Pce=n(aa,"P",{});var dit=s(Pce);oyo=r(dit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dit.forEach(t),ryo=i(aa),ka=n(aa,"P",{});var V0=s(ka);tyo=r(V0,"The model class to instantiate is selected based on the "),Bce=n(V0,"CODE",{});var cit=s(Bce);ayo=r(cit,"model_type"),cit.forEach(t),nyo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Ice=n(V0,"CODE",{});var fit=s(Ice);syo=r(fit,"pretrained_model_name_or_path"),fit.forEach(t),lyo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=n(V0,"CODE",{});var mit=s(Nce);iyo=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),dyo=r(V0,":"),V0.forEach(t),cyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);V1=n(U,"LI",{});var w8e=s(V1);qce=n(w8e,"STRONG",{});var git=s(qce);fyo=r(git,"albert"),git.forEach(t),myo=r(w8e," \u2014 "),vD=n(w8e,"A",{href:!0});var hit=s(vD);gyo=r(hit,"AlbertForMaskedLM"),hit.forEach(t),hyo=r(w8e," (ALBERT model)"),w8e.forEach(t),pyo=i(U),X1=n(U,"LI",{});var A8e=s(X1);jce=n(A8e,"STRONG",{});var pit=s(jce);uyo=r(pit,"bart"),pit.forEach(t),_yo=r(A8e," \u2014 "),FD=n(A8e,"A",{href:!0});var uit=s(FD);byo=r(uit,"BartForConditionalGeneration"),uit.forEach(t),vyo=r(A8e," (BART model)"),A8e.forEach(t),Fyo=i(U),z1=n(U,"LI",{});var y8e=s(z1);Dce=n(y8e,"STRONG",{});var _it=s(Dce);Tyo=r(_it,"bert"),_it.forEach(t),Myo=r(y8e," \u2014 "),TD=n(y8e,"A",{href:!0});var bit=s(TD);Eyo=r(bit,"BertForMaskedLM"),bit.forEach(t),Cyo=r(y8e," (BERT model)"),y8e.forEach(t),wyo=i(U),W1=n(U,"LI",{});var L8e=s(W1);Gce=n(L8e,"STRONG",{});var vit=s(Gce);Ayo=r(vit,"big_bird"),vit.forEach(t),yyo=r(L8e," \u2014 "),MD=n(L8e,"A",{href:!0});var Fit=s(MD);Lyo=r(Fit,"BigBirdForMaskedLM"),Fit.forEach(t),xyo=r(L8e," (BigBird model)"),L8e.forEach(t),$yo=i(U),Q1=n(U,"LI",{});var x8e=s(Q1);Oce=n(x8e,"STRONG",{});var Tit=s(Oce);kyo=r(Tit,"camembert"),Tit.forEach(t),Syo=r(x8e," \u2014 "),ED=n(x8e,"A",{href:!0});var Mit=s(ED);Ryo=r(Mit,"CamembertForMaskedLM"),Mit.forEach(t),Pyo=r(x8e," (CamemBERT model)"),x8e.forEach(t),Byo=i(U),H1=n(U,"LI",{});var $8e=s(H1);Vce=n($8e,"STRONG",{});var Eit=s(Vce);Iyo=r(Eit,"convbert"),Eit.forEach(t),Nyo=r($8e," \u2014 "),CD=n($8e,"A",{href:!0});var Cit=s(CD);qyo=r(Cit,"ConvBertForMaskedLM"),Cit.forEach(t),jyo=r($8e," (ConvBERT model)"),$8e.forEach(t),Dyo=i(U),U1=n(U,"LI",{});var k8e=s(U1);Xce=n(k8e,"STRONG",{});var wit=s(Xce);Gyo=r(wit,"data2vec-text"),wit.forEach(t),Oyo=r(k8e," \u2014 "),wD=n(k8e,"A",{href:!0});var Ait=s(wD);Vyo=r(Ait,"Data2VecTextForMaskedLM"),Ait.forEach(t),Xyo=r(k8e," (Data2VecText model)"),k8e.forEach(t),zyo=i(U),J1=n(U,"LI",{});var S8e=s(J1);zce=n(S8e,"STRONG",{});var yit=s(zce);Wyo=r(yit,"deberta"),yit.forEach(t),Qyo=r(S8e," \u2014 "),AD=n(S8e,"A",{href:!0});var Lit=s(AD);Hyo=r(Lit,"DebertaForMaskedLM"),Lit.forEach(t),Uyo=r(S8e," (DeBERTa model)"),S8e.forEach(t),Jyo=i(U),Y1=n(U,"LI",{});var R8e=s(Y1);Wce=n(R8e,"STRONG",{});var xit=s(Wce);Yyo=r(xit,"deberta-v2"),xit.forEach(t),Kyo=r(R8e," \u2014 "),yD=n(R8e,"A",{href:!0});var $it=s(yD);Zyo=r($it,"DebertaV2ForMaskedLM"),$it.forEach(t),eLo=r(R8e," (DeBERTa-v2 model)"),R8e.forEach(t),oLo=i(U),K1=n(U,"LI",{});var P8e=s(K1);Qce=n(P8e,"STRONG",{});var kit=s(Qce);rLo=r(kit,"distilbert"),kit.forEach(t),tLo=r(P8e," \u2014 "),LD=n(P8e,"A",{href:!0});var Sit=s(LD);aLo=r(Sit,"DistilBertForMaskedLM"),Sit.forEach(t),nLo=r(P8e," (DistilBERT model)"),P8e.forEach(t),sLo=i(U),Z1=n(U,"LI",{});var B8e=s(Z1);Hce=n(B8e,"STRONG",{});var Rit=s(Hce);lLo=r(Rit,"electra"),Rit.forEach(t),iLo=r(B8e," \u2014 "),xD=n(B8e,"A",{href:!0});var Pit=s(xD);dLo=r(Pit,"ElectraForMaskedLM"),Pit.forEach(t),cLo=r(B8e," (ELECTRA model)"),B8e.forEach(t),fLo=i(U),e3=n(U,"LI",{});var I8e=s(e3);Uce=n(I8e,"STRONG",{});var Bit=s(Uce);mLo=r(Bit,"flaubert"),Bit.forEach(t),gLo=r(I8e," \u2014 "),$D=n(I8e,"A",{href:!0});var Iit=s($D);hLo=r(Iit,"FlaubertWithLMHeadModel"),Iit.forEach(t),pLo=r(I8e," (FlauBERT model)"),I8e.forEach(t),uLo=i(U),o3=n(U,"LI",{});var N8e=s(o3);Jce=n(N8e,"STRONG",{});var Nit=s(Jce);_Lo=r(Nit,"fnet"),Nit.forEach(t),bLo=r(N8e," \u2014 "),kD=n(N8e,"A",{href:!0});var qit=s(kD);vLo=r(qit,"FNetForMaskedLM"),qit.forEach(t),FLo=r(N8e," (FNet model)"),N8e.forEach(t),TLo=i(U),r3=n(U,"LI",{});var q8e=s(r3);Yce=n(q8e,"STRONG",{});var jit=s(Yce);MLo=r(jit,"funnel"),jit.forEach(t),ELo=r(q8e," \u2014 "),SD=n(q8e,"A",{href:!0});var Dit=s(SD);CLo=r(Dit,"FunnelForMaskedLM"),Dit.forEach(t),wLo=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),ALo=i(U),t3=n(U,"LI",{});var j8e=s(t3);Kce=n(j8e,"STRONG",{});var Git=s(Kce);yLo=r(Git,"ibert"),Git.forEach(t),LLo=r(j8e," \u2014 "),RD=n(j8e,"A",{href:!0});var Oit=s(RD);xLo=r(Oit,"IBertForMaskedLM"),Oit.forEach(t),$Lo=r(j8e," (I-BERT model)"),j8e.forEach(t),kLo=i(U),a3=n(U,"LI",{});var D8e=s(a3);Zce=n(D8e,"STRONG",{});var Vit=s(Zce);SLo=r(Vit,"layoutlm"),Vit.forEach(t),RLo=r(D8e," \u2014 "),PD=n(D8e,"A",{href:!0});var Xit=s(PD);PLo=r(Xit,"LayoutLMForMaskedLM"),Xit.forEach(t),BLo=r(D8e," (LayoutLM model)"),D8e.forEach(t),ILo=i(U),n3=n(U,"LI",{});var G8e=s(n3);efe=n(G8e,"STRONG",{});var zit=s(efe);NLo=r(zit,"longformer"),zit.forEach(t),qLo=r(G8e," \u2014 "),BD=n(G8e,"A",{href:!0});var Wit=s(BD);jLo=r(Wit,"LongformerForMaskedLM"),Wit.forEach(t),DLo=r(G8e," (Longformer model)"),G8e.forEach(t),GLo=i(U),s3=n(U,"LI",{});var O8e=s(s3);ofe=n(O8e,"STRONG",{});var Qit=s(ofe);OLo=r(Qit,"mbart"),Qit.forEach(t),VLo=r(O8e," \u2014 "),ID=n(O8e,"A",{href:!0});var Hit=s(ID);XLo=r(Hit,"MBartForConditionalGeneration"),Hit.forEach(t),zLo=r(O8e," (mBART model)"),O8e.forEach(t),WLo=i(U),l3=n(U,"LI",{});var V8e=s(l3);rfe=n(V8e,"STRONG",{});var Uit=s(rfe);QLo=r(Uit,"megatron-bert"),Uit.forEach(t),HLo=r(V8e," \u2014 "),ND=n(V8e,"A",{href:!0});var Jit=s(ND);ULo=r(Jit,"MegatronBertForMaskedLM"),Jit.forEach(t),JLo=r(V8e," (MegatronBert model)"),V8e.forEach(t),YLo=i(U),i3=n(U,"LI",{});var X8e=s(i3);tfe=n(X8e,"STRONG",{});var Yit=s(tfe);KLo=r(Yit,"mobilebert"),Yit.forEach(t),ZLo=r(X8e," \u2014 "),qD=n(X8e,"A",{href:!0});var Kit=s(qD);e8o=r(Kit,"MobileBertForMaskedLM"),Kit.forEach(t),o8o=r(X8e," (MobileBERT model)"),X8e.forEach(t),r8o=i(U),d3=n(U,"LI",{});var z8e=s(d3);afe=n(z8e,"STRONG",{});var Zit=s(afe);t8o=r(Zit,"mpnet"),Zit.forEach(t),a8o=r(z8e," \u2014 "),jD=n(z8e,"A",{href:!0});var edt=s(jD);n8o=r(edt,"MPNetForMaskedLM"),edt.forEach(t),s8o=r(z8e," (MPNet model)"),z8e.forEach(t),l8o=i(U),c3=n(U,"LI",{});var W8e=s(c3);nfe=n(W8e,"STRONG",{});var odt=s(nfe);i8o=r(odt,"nystromformer"),odt.forEach(t),d8o=r(W8e," \u2014 "),DD=n(W8e,"A",{href:!0});var rdt=s(DD);c8o=r(rdt,"NystromformerForMaskedLM"),rdt.forEach(t),f8o=r(W8e," (Nystromformer model)"),W8e.forEach(t),m8o=i(U),f3=n(U,"LI",{});var Q8e=s(f3);sfe=n(Q8e,"STRONG",{});var tdt=s(sfe);g8o=r(tdt,"perceiver"),tdt.forEach(t),h8o=r(Q8e," \u2014 "),GD=n(Q8e,"A",{href:!0});var adt=s(GD);p8o=r(adt,"PerceiverForMaskedLM"),adt.forEach(t),u8o=r(Q8e," (Perceiver model)"),Q8e.forEach(t),_8o=i(U),m3=n(U,"LI",{});var H8e=s(m3);lfe=n(H8e,"STRONG",{});var ndt=s(lfe);b8o=r(ndt,"qdqbert"),ndt.forEach(t),v8o=r(H8e," \u2014 "),OD=n(H8e,"A",{href:!0});var sdt=s(OD);F8o=r(sdt,"QDQBertForMaskedLM"),sdt.forEach(t),T8o=r(H8e," (QDQBert model)"),H8e.forEach(t),M8o=i(U),g3=n(U,"LI",{});var U8e=s(g3);ife=n(U8e,"STRONG",{});var ldt=s(ife);E8o=r(ldt,"reformer"),ldt.forEach(t),C8o=r(U8e," \u2014 "),VD=n(U8e,"A",{href:!0});var idt=s(VD);w8o=r(idt,"ReformerForMaskedLM"),idt.forEach(t),A8o=r(U8e," (Reformer model)"),U8e.forEach(t),y8o=i(U),h3=n(U,"LI",{});var J8e=s(h3);dfe=n(J8e,"STRONG",{});var ddt=s(dfe);L8o=r(ddt,"rembert"),ddt.forEach(t),x8o=r(J8e," \u2014 "),XD=n(J8e,"A",{href:!0});var cdt=s(XD);$8o=r(cdt,"RemBertForMaskedLM"),cdt.forEach(t),k8o=r(J8e," (RemBERT model)"),J8e.forEach(t),S8o=i(U),p3=n(U,"LI",{});var Y8e=s(p3);cfe=n(Y8e,"STRONG",{});var fdt=s(cfe);R8o=r(fdt,"roberta"),fdt.forEach(t),P8o=r(Y8e," \u2014 "),zD=n(Y8e,"A",{href:!0});var mdt=s(zD);B8o=r(mdt,"RobertaForMaskedLM"),mdt.forEach(t),I8o=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),N8o=i(U),u3=n(U,"LI",{});var K8e=s(u3);ffe=n(K8e,"STRONG",{});var gdt=s(ffe);q8o=r(gdt,"roformer"),gdt.forEach(t),j8o=r(K8e," \u2014 "),WD=n(K8e,"A",{href:!0});var hdt=s(WD);D8o=r(hdt,"RoFormerForMaskedLM"),hdt.forEach(t),G8o=r(K8e," (RoFormer model)"),K8e.forEach(t),O8o=i(U),_3=n(U,"LI",{});var Z8e=s(_3);mfe=n(Z8e,"STRONG",{});var pdt=s(mfe);V8o=r(pdt,"squeezebert"),pdt.forEach(t),X8o=r(Z8e," \u2014 "),QD=n(Z8e,"A",{href:!0});var udt=s(QD);z8o=r(udt,"SqueezeBertForMaskedLM"),udt.forEach(t),W8o=r(Z8e," (SqueezeBERT model)"),Z8e.forEach(t),Q8o=i(U),b3=n(U,"LI",{});var e9e=s(b3);gfe=n(e9e,"STRONG",{});var _dt=s(gfe);H8o=r(_dt,"tapas"),_dt.forEach(t),U8o=r(e9e," \u2014 "),HD=n(e9e,"A",{href:!0});var bdt=s(HD);J8o=r(bdt,"TapasForMaskedLM"),bdt.forEach(t),Y8o=r(e9e," (TAPAS model)"),e9e.forEach(t),K8o=i(U),v3=n(U,"LI",{});var o9e=s(v3);hfe=n(o9e,"STRONG",{});var vdt=s(hfe);Z8o=r(vdt,"wav2vec2"),vdt.forEach(t),e9o=r(o9e," \u2014 "),pfe=n(o9e,"CODE",{});var Fdt=s(pfe);o9o=r(Fdt,"Wav2Vec2ForMaskedLM"),Fdt.forEach(t),r9o=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),t9o=i(U),F3=n(U,"LI",{});var r9e=s(F3);ufe=n(r9e,"STRONG",{});var Tdt=s(ufe);a9o=r(Tdt,"xlm"),Tdt.forEach(t),n9o=r(r9e," \u2014 "),UD=n(r9e,"A",{href:!0});var Mdt=s(UD);s9o=r(Mdt,"XLMWithLMHeadModel"),Mdt.forEach(t),l9o=r(r9e," (XLM model)"),r9e.forEach(t),i9o=i(U),T3=n(U,"LI",{});var t9e=s(T3);_fe=n(t9e,"STRONG",{});var Edt=s(_fe);d9o=r(Edt,"xlm-roberta"),Edt.forEach(t),c9o=r(t9e," \u2014 "),JD=n(t9e,"A",{href:!0});var Cdt=s(JD);f9o=r(Cdt,"XLMRobertaForMaskedLM"),Cdt.forEach(t),m9o=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),g9o=i(U),M3=n(U,"LI",{});var a9e=s(M3);bfe=n(a9e,"STRONG",{});var wdt=s(bfe);h9o=r(wdt,"xlm-roberta-xl"),wdt.forEach(t),p9o=r(a9e," \u2014 "),YD=n(a9e,"A",{href:!0});var Adt=s(YD);u9o=r(Adt,"XLMRobertaXLForMaskedLM"),Adt.forEach(t),_9o=r(a9e," (XLM-RoBERTa-XL model)"),a9e.forEach(t),b9o=i(U),E3=n(U,"LI",{});var n9e=s(E3);vfe=n(n9e,"STRONG",{});var ydt=s(vfe);v9o=r(ydt,"yoso"),ydt.forEach(t),F9o=r(n9e," \u2014 "),KD=n(n9e,"A",{href:!0});var Ldt=s(KD);T9o=r(Ldt,"YosoForMaskedLM"),Ldt.forEach(t),M9o=r(n9e," (YOSO model)"),n9e.forEach(t),U.forEach(t),E9o=i(aa),C3=n(aa,"P",{});var s9e=s(C3);C9o=r(s9e,"The model is set in evaluation mode by default using "),Ffe=n(s9e,"CODE",{});var xdt=s(Ffe);w9o=r(xdt,"model.eval()"),xdt.forEach(t),A9o=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n(s9e,"CODE",{});var $dt=s(Tfe);y9o=r($dt,"model.train()"),$dt.forEach(t),s9e.forEach(t),L9o=i(aa),T(w3.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Dqe=i(f),qi=n(f,"H2",{class:!0});var XDe=s(qi);A3=n(XDe,"A",{id:!0,class:!0,href:!0});var kdt=s(A3);Mfe=n(kdt,"SPAN",{});var Sdt=s(Mfe);T(Cy.$$.fragment,Sdt),Sdt.forEach(t),kdt.forEach(t),x9o=i(XDe),Efe=n(XDe,"SPAN",{});var Rdt=s(Efe);$9o=r(Rdt,"AutoModelForSeq2SeqLM"),Rdt.forEach(t),XDe.forEach(t),Gqe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(wy.$$.fragment,Ws),k9o=i(Ws),ji=n(Ws,"P",{});var BZ=s(ji);S9o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZD=n(BZ,"A",{href:!0});var Pdt=s(ZD);R9o=r(Pdt,"from_pretrained()"),Pdt.forEach(t),P9o=r(BZ," class method or the "),eG=n(BZ,"A",{href:!0});var Bdt=s(eG);B9o=r(Bdt,"from_config()"),Bdt.forEach(t),I9o=r(BZ,` class
method.`),BZ.forEach(t),N9o=i(Ws),Ay=n(Ws,"P",{});var zDe=s(Ay);q9o=r(zDe,"This class cannot be instantiated directly using "),Cfe=n(zDe,"CODE",{});var Idt=s(Cfe);j9o=r(Idt,"__init__()"),Idt.forEach(t),D9o=r(zDe," (throws an error)."),zDe.forEach(t),G9o=i(Ws),lt=n(Ws,"DIV",{class:!0});var X0=s(lt);T(yy.$$.fragment,X0),O9o=i(X0),wfe=n(X0,"P",{});var Ndt=s(wfe);V9o=r(Ndt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ndt.forEach(t),X9o=i(X0),Di=n(X0,"P",{});var IZ=s(Di);z9o=r(IZ,`Note:
Loading a model from its configuration file does `),Afe=n(IZ,"STRONG",{});var qdt=s(Afe);W9o=r(qdt,"not"),qdt.forEach(t),Q9o=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(IZ,"A",{href:!0});var jdt=s(oG);H9o=r(jdt,"from_pretrained()"),jdt.forEach(t),U9o=r(IZ," to load the model weights."),IZ.forEach(t),J9o=i(X0),T(y3.$$.fragment,X0),X0.forEach(t),Y9o=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(Ly.$$.fragment,na),K9o=i(na),yfe=n(na,"P",{});var Ddt=s(yfe);Z9o=r(Ddt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ddt.forEach(t),exo=i(na),Sa=n(na,"P",{});var z0=s(Sa);oxo=r(z0,"The model class to instantiate is selected based on the "),Lfe=n(z0,"CODE",{});var Gdt=s(Lfe);rxo=r(Gdt,"model_type"),Gdt.forEach(t),txo=r(z0,` property of the config object (either
passed as an argument or loaded from `),xfe=n(z0,"CODE",{});var Odt=s(xfe);axo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),nxo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(z0,"CODE",{});var Vdt=s($fe);sxo=r(Vdt,"pretrained_model_name_or_path"),Vdt.forEach(t),lxo=r(z0,":"),z0.forEach(t),ixo=i(na),_e=n(na,"UL",{});var ve=s(_e);L3=n(ve,"LI",{});var l9e=s(L3);kfe=n(l9e,"STRONG",{});var Xdt=s(kfe);dxo=r(Xdt,"bart"),Xdt.forEach(t),cxo=r(l9e," \u2014 "),rG=n(l9e,"A",{href:!0});var zdt=s(rG);fxo=r(zdt,"BartForConditionalGeneration"),zdt.forEach(t),mxo=r(l9e," (BART model)"),l9e.forEach(t),gxo=i(ve),x3=n(ve,"LI",{});var i9e=s(x3);Sfe=n(i9e,"STRONG",{});var Wdt=s(Sfe);hxo=r(Wdt,"bigbird_pegasus"),Wdt.forEach(t),pxo=r(i9e," \u2014 "),tG=n(i9e,"A",{href:!0});var Qdt=s(tG);uxo=r(Qdt,"BigBirdPegasusForConditionalGeneration"),Qdt.forEach(t),_xo=r(i9e," (BigBirdPegasus model)"),i9e.forEach(t),bxo=i(ve),$3=n(ve,"LI",{});var d9e=s($3);Rfe=n(d9e,"STRONG",{});var Hdt=s(Rfe);vxo=r(Hdt,"blenderbot"),Hdt.forEach(t),Fxo=r(d9e," \u2014 "),aG=n(d9e,"A",{href:!0});var Udt=s(aG);Txo=r(Udt,"BlenderbotForConditionalGeneration"),Udt.forEach(t),Mxo=r(d9e," (Blenderbot model)"),d9e.forEach(t),Exo=i(ve),k3=n(ve,"LI",{});var c9e=s(k3);Pfe=n(c9e,"STRONG",{});var Jdt=s(Pfe);Cxo=r(Jdt,"blenderbot-small"),Jdt.forEach(t),wxo=r(c9e," \u2014 "),nG=n(c9e,"A",{href:!0});var Ydt=s(nG);Axo=r(Ydt,"BlenderbotSmallForConditionalGeneration"),Ydt.forEach(t),yxo=r(c9e," (BlenderbotSmall model)"),c9e.forEach(t),Lxo=i(ve),S3=n(ve,"LI",{});var f9e=s(S3);Bfe=n(f9e,"STRONG",{});var Kdt=s(Bfe);xxo=r(Kdt,"encoder-decoder"),Kdt.forEach(t),$xo=r(f9e," \u2014 "),sG=n(f9e,"A",{href:!0});var Zdt=s(sG);kxo=r(Zdt,"EncoderDecoderModel"),Zdt.forEach(t),Sxo=r(f9e," (Encoder decoder model)"),f9e.forEach(t),Rxo=i(ve),R3=n(ve,"LI",{});var m9e=s(R3);Ife=n(m9e,"STRONG",{});var ect=s(Ife);Pxo=r(ect,"fsmt"),ect.forEach(t),Bxo=r(m9e," \u2014 "),lG=n(m9e,"A",{href:!0});var oct=s(lG);Ixo=r(oct,"FSMTForConditionalGeneration"),oct.forEach(t),Nxo=r(m9e," (FairSeq Machine-Translation model)"),m9e.forEach(t),qxo=i(ve),P3=n(ve,"LI",{});var g9e=s(P3);Nfe=n(g9e,"STRONG",{});var rct=s(Nfe);jxo=r(rct,"led"),rct.forEach(t),Dxo=r(g9e," \u2014 "),iG=n(g9e,"A",{href:!0});var tct=s(iG);Gxo=r(tct,"LEDForConditionalGeneration"),tct.forEach(t),Oxo=r(g9e," (LED model)"),g9e.forEach(t),Vxo=i(ve),B3=n(ve,"LI",{});var h9e=s(B3);qfe=n(h9e,"STRONG",{});var act=s(qfe);Xxo=r(act,"m2m_100"),act.forEach(t),zxo=r(h9e," \u2014 "),dG=n(h9e,"A",{href:!0});var nct=s(dG);Wxo=r(nct,"M2M100ForConditionalGeneration"),nct.forEach(t),Qxo=r(h9e," (M2M100 model)"),h9e.forEach(t),Hxo=i(ve),I3=n(ve,"LI",{});var p9e=s(I3);jfe=n(p9e,"STRONG",{});var sct=s(jfe);Uxo=r(sct,"marian"),sct.forEach(t),Jxo=r(p9e," \u2014 "),cG=n(p9e,"A",{href:!0});var lct=s(cG);Yxo=r(lct,"MarianMTModel"),lct.forEach(t),Kxo=r(p9e," (Marian model)"),p9e.forEach(t),Zxo=i(ve),N3=n(ve,"LI",{});var u9e=s(N3);Dfe=n(u9e,"STRONG",{});var ict=s(Dfe);e$o=r(ict,"mbart"),ict.forEach(t),o$o=r(u9e," \u2014 "),fG=n(u9e,"A",{href:!0});var dct=s(fG);r$o=r(dct,"MBartForConditionalGeneration"),dct.forEach(t),t$o=r(u9e," (mBART model)"),u9e.forEach(t),a$o=i(ve),q3=n(ve,"LI",{});var _9e=s(q3);Gfe=n(_9e,"STRONG",{});var cct=s(Gfe);n$o=r(cct,"mt5"),cct.forEach(t),s$o=r(_9e," \u2014 "),mG=n(_9e,"A",{href:!0});var fct=s(mG);l$o=r(fct,"MT5ForConditionalGeneration"),fct.forEach(t),i$o=r(_9e," (mT5 model)"),_9e.forEach(t),d$o=i(ve),j3=n(ve,"LI",{});var b9e=s(j3);Ofe=n(b9e,"STRONG",{});var mct=s(Ofe);c$o=r(mct,"pegasus"),mct.forEach(t),f$o=r(b9e," \u2014 "),gG=n(b9e,"A",{href:!0});var gct=s(gG);m$o=r(gct,"PegasusForConditionalGeneration"),gct.forEach(t),g$o=r(b9e," (Pegasus model)"),b9e.forEach(t),h$o=i(ve),D3=n(ve,"LI",{});var v9e=s(D3);Vfe=n(v9e,"STRONG",{});var hct=s(Vfe);p$o=r(hct,"plbart"),hct.forEach(t),u$o=r(v9e," \u2014 "),hG=n(v9e,"A",{href:!0});var pct=s(hG);_$o=r(pct,"PLBartForConditionalGeneration"),pct.forEach(t),b$o=r(v9e," (PLBart model)"),v9e.forEach(t),v$o=i(ve),G3=n(ve,"LI",{});var F9e=s(G3);Xfe=n(F9e,"STRONG",{});var uct=s(Xfe);F$o=r(uct,"prophetnet"),uct.forEach(t),T$o=r(F9e," \u2014 "),pG=n(F9e,"A",{href:!0});var _ct=s(pG);M$o=r(_ct,"ProphetNetForConditionalGeneration"),_ct.forEach(t),E$o=r(F9e," (ProphetNet model)"),F9e.forEach(t),C$o=i(ve),O3=n(ve,"LI",{});var T9e=s(O3);zfe=n(T9e,"STRONG",{});var bct=s(zfe);w$o=r(bct,"t5"),bct.forEach(t),A$o=r(T9e," \u2014 "),uG=n(T9e,"A",{href:!0});var vct=s(uG);y$o=r(vct,"T5ForConditionalGeneration"),vct.forEach(t),L$o=r(T9e," (T5 model)"),T9e.forEach(t),x$o=i(ve),V3=n(ve,"LI",{});var M9e=s(V3);Wfe=n(M9e,"STRONG",{});var Fct=s(Wfe);$$o=r(Fct,"xlm-prophetnet"),Fct.forEach(t),k$o=r(M9e," \u2014 "),_G=n(M9e,"A",{href:!0});var Tct=s(_G);S$o=r(Tct,"XLMProphetNetForConditionalGeneration"),Tct.forEach(t),R$o=r(M9e," (XLMProphetNet model)"),M9e.forEach(t),ve.forEach(t),P$o=i(na),X3=n(na,"P",{});var E9e=s(X3);B$o=r(E9e,"The model is set in evaluation mode by default using "),Qfe=n(E9e,"CODE",{});var Mct=s(Qfe);I$o=r(Mct,"model.eval()"),Mct.forEach(t),N$o=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=n(E9e,"CODE",{});var Ect=s(Hfe);q$o=r(Ect,"model.train()"),Ect.forEach(t),E9e.forEach(t),j$o=i(na),T(z3.$$.fragment,na),na.forEach(t),Ws.forEach(t),Oqe=i(f),Gi=n(f,"H2",{class:!0});var WDe=s(Gi);W3=n(WDe,"A",{id:!0,class:!0,href:!0});var Cct=s(W3);Ufe=n(Cct,"SPAN",{});var wct=s(Ufe);T(xy.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),D$o=i(WDe),Jfe=n(WDe,"SPAN",{});var Act=s(Jfe);G$o=r(Act,"AutoModelForSequenceClassification"),Act.forEach(t),WDe.forEach(t),Vqe=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T($y.$$.fragment,Qs),O$o=i(Qs),Oi=n(Qs,"P",{});var NZ=s(Oi);V$o=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bG=n(NZ,"A",{href:!0});var yct=s(bG);X$o=r(yct,"from_pretrained()"),yct.forEach(t),z$o=r(NZ," class method or the "),vG=n(NZ,"A",{href:!0});var Lct=s(vG);W$o=r(Lct,"from_config()"),Lct.forEach(t),Q$o=r(NZ,` class
method.`),NZ.forEach(t),H$o=i(Qs),ky=n(Qs,"P",{});var QDe=s(ky);U$o=r(QDe,"This class cannot be instantiated directly using "),Yfe=n(QDe,"CODE",{});var xct=s(Yfe);J$o=r(xct,"__init__()"),xct.forEach(t),Y$o=r(QDe," (throws an error)."),QDe.forEach(t),K$o=i(Qs),it=n(Qs,"DIV",{class:!0});var W0=s(it);T(Sy.$$.fragment,W0),Z$o=i(W0),Kfe=n(W0,"P",{});var $ct=s(Kfe);eko=r($ct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$ct.forEach(t),oko=i(W0),Vi=n(W0,"P",{});var qZ=s(Vi);rko=r(qZ,`Note:
Loading a model from its configuration file does `),Zfe=n(qZ,"STRONG",{});var kct=s(Zfe);tko=r(kct,"not"),kct.forEach(t),ako=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(qZ,"A",{href:!0});var Sct=s(FG);nko=r(Sct,"from_pretrained()"),Sct.forEach(t),sko=r(qZ," to load the model weights."),qZ.forEach(t),lko=i(W0),T(Q3.$$.fragment,W0),W0.forEach(t),iko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Ry.$$.fragment,sa),dko=i(sa),eme=n(sa,"P",{});var Rct=s(eme);cko=r(Rct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rct.forEach(t),fko=i(sa),Ra=n(sa,"P",{});var Q0=s(Ra);mko=r(Q0,"The model class to instantiate is selected based on the "),ome=n(Q0,"CODE",{});var Pct=s(ome);gko=r(Pct,"model_type"),Pct.forEach(t),hko=r(Q0,` property of the config object (either
passed as an argument or loaded from `),rme=n(Q0,"CODE",{});var Bct=s(rme);pko=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),uko=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(Q0,"CODE",{});var Ict=s(tme);_ko=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),bko=r(Q0,":"),Q0.forEach(t),vko=i(sa),N=n(sa,"UL",{});var j=s(N);H3=n(j,"LI",{});var C9e=s(H3);ame=n(C9e,"STRONG",{});var Nct=s(ame);Fko=r(Nct,"albert"),Nct.forEach(t),Tko=r(C9e," \u2014 "),TG=n(C9e,"A",{href:!0});var qct=s(TG);Mko=r(qct,"AlbertForSequenceClassification"),qct.forEach(t),Eko=r(C9e," (ALBERT model)"),C9e.forEach(t),Cko=i(j),U3=n(j,"LI",{});var w9e=s(U3);nme=n(w9e,"STRONG",{});var jct=s(nme);wko=r(jct,"bart"),jct.forEach(t),Ako=r(w9e," \u2014 "),MG=n(w9e,"A",{href:!0});var Dct=s(MG);yko=r(Dct,"BartForSequenceClassification"),Dct.forEach(t),Lko=r(w9e," (BART model)"),w9e.forEach(t),xko=i(j),J3=n(j,"LI",{});var A9e=s(J3);sme=n(A9e,"STRONG",{});var Gct=s(sme);$ko=r(Gct,"bert"),Gct.forEach(t),kko=r(A9e," \u2014 "),EG=n(A9e,"A",{href:!0});var Oct=s(EG);Sko=r(Oct,"BertForSequenceClassification"),Oct.forEach(t),Rko=r(A9e," (BERT model)"),A9e.forEach(t),Pko=i(j),Y3=n(j,"LI",{});var y9e=s(Y3);lme=n(y9e,"STRONG",{});var Vct=s(lme);Bko=r(Vct,"big_bird"),Vct.forEach(t),Iko=r(y9e," \u2014 "),CG=n(y9e,"A",{href:!0});var Xct=s(CG);Nko=r(Xct,"BigBirdForSequenceClassification"),Xct.forEach(t),qko=r(y9e," (BigBird model)"),y9e.forEach(t),jko=i(j),K3=n(j,"LI",{});var L9e=s(K3);ime=n(L9e,"STRONG",{});var zct=s(ime);Dko=r(zct,"bigbird_pegasus"),zct.forEach(t),Gko=r(L9e," \u2014 "),wG=n(L9e,"A",{href:!0});var Wct=s(wG);Oko=r(Wct,"BigBirdPegasusForSequenceClassification"),Wct.forEach(t),Vko=r(L9e," (BigBirdPegasus model)"),L9e.forEach(t),Xko=i(j),Z3=n(j,"LI",{});var x9e=s(Z3);dme=n(x9e,"STRONG",{});var Qct=s(dme);zko=r(Qct,"camembert"),Qct.forEach(t),Wko=r(x9e," \u2014 "),AG=n(x9e,"A",{href:!0});var Hct=s(AG);Qko=r(Hct,"CamembertForSequenceClassification"),Hct.forEach(t),Hko=r(x9e," (CamemBERT model)"),x9e.forEach(t),Uko=i(j),eb=n(j,"LI",{});var $9e=s(eb);cme=n($9e,"STRONG",{});var Uct=s(cme);Jko=r(Uct,"canine"),Uct.forEach(t),Yko=r($9e," \u2014 "),yG=n($9e,"A",{href:!0});var Jct=s(yG);Kko=r(Jct,"CanineForSequenceClassification"),Jct.forEach(t),Zko=r($9e," (Canine model)"),$9e.forEach(t),eSo=i(j),ob=n(j,"LI",{});var k9e=s(ob);fme=n(k9e,"STRONG",{});var Yct=s(fme);oSo=r(Yct,"convbert"),Yct.forEach(t),rSo=r(k9e," \u2014 "),LG=n(k9e,"A",{href:!0});var Kct=s(LG);tSo=r(Kct,"ConvBertForSequenceClassification"),Kct.forEach(t),aSo=r(k9e," (ConvBERT model)"),k9e.forEach(t),nSo=i(j),rb=n(j,"LI",{});var S9e=s(rb);mme=n(S9e,"STRONG",{});var Zct=s(mme);sSo=r(Zct,"ctrl"),Zct.forEach(t),lSo=r(S9e," \u2014 "),xG=n(S9e,"A",{href:!0});var eft=s(xG);iSo=r(eft,"CTRLForSequenceClassification"),eft.forEach(t),dSo=r(S9e," (CTRL model)"),S9e.forEach(t),cSo=i(j),tb=n(j,"LI",{});var R9e=s(tb);gme=n(R9e,"STRONG",{});var oft=s(gme);fSo=r(oft,"data2vec-text"),oft.forEach(t),mSo=r(R9e," \u2014 "),$G=n(R9e,"A",{href:!0});var rft=s($G);gSo=r(rft,"Data2VecTextForSequenceClassification"),rft.forEach(t),hSo=r(R9e," (Data2VecText model)"),R9e.forEach(t),pSo=i(j),ab=n(j,"LI",{});var P9e=s(ab);hme=n(P9e,"STRONG",{});var tft=s(hme);uSo=r(tft,"deberta"),tft.forEach(t),_So=r(P9e," \u2014 "),kG=n(P9e,"A",{href:!0});var aft=s(kG);bSo=r(aft,"DebertaForSequenceClassification"),aft.forEach(t),vSo=r(P9e," (DeBERTa model)"),P9e.forEach(t),FSo=i(j),nb=n(j,"LI",{});var B9e=s(nb);pme=n(B9e,"STRONG",{});var nft=s(pme);TSo=r(nft,"deberta-v2"),nft.forEach(t),MSo=r(B9e," \u2014 "),SG=n(B9e,"A",{href:!0});var sft=s(SG);ESo=r(sft,"DebertaV2ForSequenceClassification"),sft.forEach(t),CSo=r(B9e," (DeBERTa-v2 model)"),B9e.forEach(t),wSo=i(j),sb=n(j,"LI",{});var I9e=s(sb);ume=n(I9e,"STRONG",{});var lft=s(ume);ASo=r(lft,"distilbert"),lft.forEach(t),ySo=r(I9e," \u2014 "),RG=n(I9e,"A",{href:!0});var ift=s(RG);LSo=r(ift,"DistilBertForSequenceClassification"),ift.forEach(t),xSo=r(I9e," (DistilBERT model)"),I9e.forEach(t),$So=i(j),lb=n(j,"LI",{});var N9e=s(lb);_me=n(N9e,"STRONG",{});var dft=s(_me);kSo=r(dft,"electra"),dft.forEach(t),SSo=r(N9e," \u2014 "),PG=n(N9e,"A",{href:!0});var cft=s(PG);RSo=r(cft,"ElectraForSequenceClassification"),cft.forEach(t),PSo=r(N9e," (ELECTRA model)"),N9e.forEach(t),BSo=i(j),ib=n(j,"LI",{});var q9e=s(ib);bme=n(q9e,"STRONG",{});var fft=s(bme);ISo=r(fft,"flaubert"),fft.forEach(t),NSo=r(q9e," \u2014 "),BG=n(q9e,"A",{href:!0});var mft=s(BG);qSo=r(mft,"FlaubertForSequenceClassification"),mft.forEach(t),jSo=r(q9e," (FlauBERT model)"),q9e.forEach(t),DSo=i(j),db=n(j,"LI",{});var j9e=s(db);vme=n(j9e,"STRONG",{});var gft=s(vme);GSo=r(gft,"fnet"),gft.forEach(t),OSo=r(j9e," \u2014 "),IG=n(j9e,"A",{href:!0});var hft=s(IG);VSo=r(hft,"FNetForSequenceClassification"),hft.forEach(t),XSo=r(j9e," (FNet model)"),j9e.forEach(t),zSo=i(j),cb=n(j,"LI",{});var D9e=s(cb);Fme=n(D9e,"STRONG",{});var pft=s(Fme);WSo=r(pft,"funnel"),pft.forEach(t),QSo=r(D9e," \u2014 "),NG=n(D9e,"A",{href:!0});var uft=s(NG);HSo=r(uft,"FunnelForSequenceClassification"),uft.forEach(t),USo=r(D9e," (Funnel Transformer model)"),D9e.forEach(t),JSo=i(j),fb=n(j,"LI",{});var G9e=s(fb);Tme=n(G9e,"STRONG",{});var _ft=s(Tme);YSo=r(_ft,"gpt2"),_ft.forEach(t),KSo=r(G9e," \u2014 "),qG=n(G9e,"A",{href:!0});var bft=s(qG);ZSo=r(bft,"GPT2ForSequenceClassification"),bft.forEach(t),eRo=r(G9e," (OpenAI GPT-2 model)"),G9e.forEach(t),oRo=i(j),mb=n(j,"LI",{});var O9e=s(mb);Mme=n(O9e,"STRONG",{});var vft=s(Mme);rRo=r(vft,"gpt_neo"),vft.forEach(t),tRo=r(O9e," \u2014 "),jG=n(O9e,"A",{href:!0});var Fft=s(jG);aRo=r(Fft,"GPTNeoForSequenceClassification"),Fft.forEach(t),nRo=r(O9e," (GPT Neo model)"),O9e.forEach(t),sRo=i(j),gb=n(j,"LI",{});var V9e=s(gb);Eme=n(V9e,"STRONG",{});var Tft=s(Eme);lRo=r(Tft,"gptj"),Tft.forEach(t),iRo=r(V9e," \u2014 "),DG=n(V9e,"A",{href:!0});var Mft=s(DG);dRo=r(Mft,"GPTJForSequenceClassification"),Mft.forEach(t),cRo=r(V9e," (GPT-J model)"),V9e.forEach(t),fRo=i(j),hb=n(j,"LI",{});var X9e=s(hb);Cme=n(X9e,"STRONG",{});var Eft=s(Cme);mRo=r(Eft,"ibert"),Eft.forEach(t),gRo=r(X9e," \u2014 "),GG=n(X9e,"A",{href:!0});var Cft=s(GG);hRo=r(Cft,"IBertForSequenceClassification"),Cft.forEach(t),pRo=r(X9e," (I-BERT model)"),X9e.forEach(t),uRo=i(j),pb=n(j,"LI",{});var z9e=s(pb);wme=n(z9e,"STRONG",{});var wft=s(wme);_Ro=r(wft,"layoutlm"),wft.forEach(t),bRo=r(z9e," \u2014 "),OG=n(z9e,"A",{href:!0});var Aft=s(OG);vRo=r(Aft,"LayoutLMForSequenceClassification"),Aft.forEach(t),FRo=r(z9e," (LayoutLM model)"),z9e.forEach(t),TRo=i(j),ub=n(j,"LI",{});var W9e=s(ub);Ame=n(W9e,"STRONG",{});var yft=s(Ame);MRo=r(yft,"layoutlmv2"),yft.forEach(t),ERo=r(W9e," \u2014 "),VG=n(W9e,"A",{href:!0});var Lft=s(VG);CRo=r(Lft,"LayoutLMv2ForSequenceClassification"),Lft.forEach(t),wRo=r(W9e," (LayoutLMv2 model)"),W9e.forEach(t),ARo=i(j),_b=n(j,"LI",{});var Q9e=s(_b);yme=n(Q9e,"STRONG",{});var xft=s(yme);yRo=r(xft,"layoutlmv3"),xft.forEach(t),LRo=r(Q9e," \u2014 "),XG=n(Q9e,"A",{href:!0});var $ft=s(XG);xRo=r($ft,"LayoutLMv3ForSequenceClassification"),$ft.forEach(t),$Ro=r(Q9e," (LayoutLMv3 model)"),Q9e.forEach(t),kRo=i(j),bb=n(j,"LI",{});var H9e=s(bb);Lme=n(H9e,"STRONG",{});var kft=s(Lme);SRo=r(kft,"led"),kft.forEach(t),RRo=r(H9e," \u2014 "),zG=n(H9e,"A",{href:!0});var Sft=s(zG);PRo=r(Sft,"LEDForSequenceClassification"),Sft.forEach(t),BRo=r(H9e," (LED model)"),H9e.forEach(t),IRo=i(j),vb=n(j,"LI",{});var U9e=s(vb);xme=n(U9e,"STRONG",{});var Rft=s(xme);NRo=r(Rft,"longformer"),Rft.forEach(t),qRo=r(U9e," \u2014 "),WG=n(U9e,"A",{href:!0});var Pft=s(WG);jRo=r(Pft,"LongformerForSequenceClassification"),Pft.forEach(t),DRo=r(U9e," (Longformer model)"),U9e.forEach(t),GRo=i(j),Fb=n(j,"LI",{});var J9e=s(Fb);$me=n(J9e,"STRONG",{});var Bft=s($me);ORo=r(Bft,"mbart"),Bft.forEach(t),VRo=r(J9e," \u2014 "),QG=n(J9e,"A",{href:!0});var Ift=s(QG);XRo=r(Ift,"MBartForSequenceClassification"),Ift.forEach(t),zRo=r(J9e," (mBART model)"),J9e.forEach(t),WRo=i(j),Tb=n(j,"LI",{});var Y9e=s(Tb);kme=n(Y9e,"STRONG",{});var Nft=s(kme);QRo=r(Nft,"megatron-bert"),Nft.forEach(t),HRo=r(Y9e," \u2014 "),HG=n(Y9e,"A",{href:!0});var qft=s(HG);URo=r(qft,"MegatronBertForSequenceClassification"),qft.forEach(t),JRo=r(Y9e," (MegatronBert model)"),Y9e.forEach(t),YRo=i(j),Mb=n(j,"LI",{});var K9e=s(Mb);Sme=n(K9e,"STRONG",{});var jft=s(Sme);KRo=r(jft,"mobilebert"),jft.forEach(t),ZRo=r(K9e," \u2014 "),UG=n(K9e,"A",{href:!0});var Dft=s(UG);ePo=r(Dft,"MobileBertForSequenceClassification"),Dft.forEach(t),oPo=r(K9e," (MobileBERT model)"),K9e.forEach(t),rPo=i(j),Eb=n(j,"LI",{});var Z9e=s(Eb);Rme=n(Z9e,"STRONG",{});var Gft=s(Rme);tPo=r(Gft,"mpnet"),Gft.forEach(t),aPo=r(Z9e," \u2014 "),JG=n(Z9e,"A",{href:!0});var Oft=s(JG);nPo=r(Oft,"MPNetForSequenceClassification"),Oft.forEach(t),sPo=r(Z9e," (MPNet model)"),Z9e.forEach(t),lPo=i(j),Cb=n(j,"LI",{});var exe=s(Cb);Pme=n(exe,"STRONG",{});var Vft=s(Pme);iPo=r(Vft,"nystromformer"),Vft.forEach(t),dPo=r(exe," \u2014 "),YG=n(exe,"A",{href:!0});var Xft=s(YG);cPo=r(Xft,"NystromformerForSequenceClassification"),Xft.forEach(t),fPo=r(exe," (Nystromformer model)"),exe.forEach(t),mPo=i(j),wb=n(j,"LI",{});var oxe=s(wb);Bme=n(oxe,"STRONG",{});var zft=s(Bme);gPo=r(zft,"openai-gpt"),zft.forEach(t),hPo=r(oxe," \u2014 "),KG=n(oxe,"A",{href:!0});var Wft=s(KG);pPo=r(Wft,"OpenAIGPTForSequenceClassification"),Wft.forEach(t),uPo=r(oxe," (OpenAI GPT model)"),oxe.forEach(t),_Po=i(j),Ab=n(j,"LI",{});var rxe=s(Ab);Ime=n(rxe,"STRONG",{});var Qft=s(Ime);bPo=r(Qft,"perceiver"),Qft.forEach(t),vPo=r(rxe," \u2014 "),ZG=n(rxe,"A",{href:!0});var Hft=s(ZG);FPo=r(Hft,"PerceiverForSequenceClassification"),Hft.forEach(t),TPo=r(rxe," (Perceiver model)"),rxe.forEach(t),MPo=i(j),yb=n(j,"LI",{});var txe=s(yb);Nme=n(txe,"STRONG",{});var Uft=s(Nme);EPo=r(Uft,"plbart"),Uft.forEach(t),CPo=r(txe," \u2014 "),eO=n(txe,"A",{href:!0});var Jft=s(eO);wPo=r(Jft,"PLBartForSequenceClassification"),Jft.forEach(t),APo=r(txe," (PLBart model)"),txe.forEach(t),yPo=i(j),Lb=n(j,"LI",{});var axe=s(Lb);qme=n(axe,"STRONG",{});var Yft=s(qme);LPo=r(Yft,"qdqbert"),Yft.forEach(t),xPo=r(axe," \u2014 "),oO=n(axe,"A",{href:!0});var Kft=s(oO);$Po=r(Kft,"QDQBertForSequenceClassification"),Kft.forEach(t),kPo=r(axe," (QDQBert model)"),axe.forEach(t),SPo=i(j),xb=n(j,"LI",{});var nxe=s(xb);jme=n(nxe,"STRONG",{});var Zft=s(jme);RPo=r(Zft,"reformer"),Zft.forEach(t),PPo=r(nxe," \u2014 "),rO=n(nxe,"A",{href:!0});var emt=s(rO);BPo=r(emt,"ReformerForSequenceClassification"),emt.forEach(t),IPo=r(nxe," (Reformer model)"),nxe.forEach(t),NPo=i(j),$b=n(j,"LI",{});var sxe=s($b);Dme=n(sxe,"STRONG",{});var omt=s(Dme);qPo=r(omt,"rembert"),omt.forEach(t),jPo=r(sxe," \u2014 "),tO=n(sxe,"A",{href:!0});var rmt=s(tO);DPo=r(rmt,"RemBertForSequenceClassification"),rmt.forEach(t),GPo=r(sxe," (RemBERT model)"),sxe.forEach(t),OPo=i(j),kb=n(j,"LI",{});var lxe=s(kb);Gme=n(lxe,"STRONG",{});var tmt=s(Gme);VPo=r(tmt,"roberta"),tmt.forEach(t),XPo=r(lxe," \u2014 "),aO=n(lxe,"A",{href:!0});var amt=s(aO);zPo=r(amt,"RobertaForSequenceClassification"),amt.forEach(t),WPo=r(lxe," (RoBERTa model)"),lxe.forEach(t),QPo=i(j),Sb=n(j,"LI",{});var ixe=s(Sb);Ome=n(ixe,"STRONG",{});var nmt=s(Ome);HPo=r(nmt,"roformer"),nmt.forEach(t),UPo=r(ixe," \u2014 "),nO=n(ixe,"A",{href:!0});var smt=s(nO);JPo=r(smt,"RoFormerForSequenceClassification"),smt.forEach(t),YPo=r(ixe," (RoFormer model)"),ixe.forEach(t),KPo=i(j),Rb=n(j,"LI",{});var dxe=s(Rb);Vme=n(dxe,"STRONG",{});var lmt=s(Vme);ZPo=r(lmt,"squeezebert"),lmt.forEach(t),eBo=r(dxe," \u2014 "),sO=n(dxe,"A",{href:!0});var imt=s(sO);oBo=r(imt,"SqueezeBertForSequenceClassification"),imt.forEach(t),rBo=r(dxe," (SqueezeBERT model)"),dxe.forEach(t),tBo=i(j),Pb=n(j,"LI",{});var cxe=s(Pb);Xme=n(cxe,"STRONG",{});var dmt=s(Xme);aBo=r(dmt,"tapas"),dmt.forEach(t),nBo=r(cxe," \u2014 "),lO=n(cxe,"A",{href:!0});var cmt=s(lO);sBo=r(cmt,"TapasForSequenceClassification"),cmt.forEach(t),lBo=r(cxe," (TAPAS model)"),cxe.forEach(t),iBo=i(j),Bb=n(j,"LI",{});var fxe=s(Bb);zme=n(fxe,"STRONG",{});var fmt=s(zme);dBo=r(fmt,"transfo-xl"),fmt.forEach(t),cBo=r(fxe," \u2014 "),iO=n(fxe,"A",{href:!0});var mmt=s(iO);fBo=r(mmt,"TransfoXLForSequenceClassification"),mmt.forEach(t),mBo=r(fxe," (Transformer-XL model)"),fxe.forEach(t),gBo=i(j),Ib=n(j,"LI",{});var mxe=s(Ib);Wme=n(mxe,"STRONG",{});var gmt=s(Wme);hBo=r(gmt,"xlm"),gmt.forEach(t),pBo=r(mxe," \u2014 "),dO=n(mxe,"A",{href:!0});var hmt=s(dO);uBo=r(hmt,"XLMForSequenceClassification"),hmt.forEach(t),_Bo=r(mxe," (XLM model)"),mxe.forEach(t),bBo=i(j),Nb=n(j,"LI",{});var gxe=s(Nb);Qme=n(gxe,"STRONG",{});var pmt=s(Qme);vBo=r(pmt,"xlm-roberta"),pmt.forEach(t),FBo=r(gxe," \u2014 "),cO=n(gxe,"A",{href:!0});var umt=s(cO);TBo=r(umt,"XLMRobertaForSequenceClassification"),umt.forEach(t),MBo=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),EBo=i(j),qb=n(j,"LI",{});var hxe=s(qb);Hme=n(hxe,"STRONG",{});var _mt=s(Hme);CBo=r(_mt,"xlm-roberta-xl"),_mt.forEach(t),wBo=r(hxe," \u2014 "),fO=n(hxe,"A",{href:!0});var bmt=s(fO);ABo=r(bmt,"XLMRobertaXLForSequenceClassification"),bmt.forEach(t),yBo=r(hxe," (XLM-RoBERTa-XL model)"),hxe.forEach(t),LBo=i(j),jb=n(j,"LI",{});var pxe=s(jb);Ume=n(pxe,"STRONG",{});var vmt=s(Ume);xBo=r(vmt,"xlnet"),vmt.forEach(t),$Bo=r(pxe," \u2014 "),mO=n(pxe,"A",{href:!0});var Fmt=s(mO);kBo=r(Fmt,"XLNetForSequenceClassification"),Fmt.forEach(t),SBo=r(pxe," (XLNet model)"),pxe.forEach(t),RBo=i(j),Db=n(j,"LI",{});var uxe=s(Db);Jme=n(uxe,"STRONG",{});var Tmt=s(Jme);PBo=r(Tmt,"yoso"),Tmt.forEach(t),BBo=r(uxe," \u2014 "),gO=n(uxe,"A",{href:!0});var Mmt=s(gO);IBo=r(Mmt,"YosoForSequenceClassification"),Mmt.forEach(t),NBo=r(uxe," (YOSO model)"),uxe.forEach(t),j.forEach(t),qBo=i(sa),Gb=n(sa,"P",{});var _xe=s(Gb);jBo=r(_xe,"The model is set in evaluation mode by default using "),Yme=n(_xe,"CODE",{});var Emt=s(Yme);DBo=r(Emt,"model.eval()"),Emt.forEach(t),GBo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=n(_xe,"CODE",{});var Cmt=s(Kme);OBo=r(Cmt,"model.train()"),Cmt.forEach(t),_xe.forEach(t),VBo=i(sa),T(Ob.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Xqe=i(f),Xi=n(f,"H2",{class:!0});var HDe=s(Xi);Vb=n(HDe,"A",{id:!0,class:!0,href:!0});var wmt=s(Vb);Zme=n(wmt,"SPAN",{});var Amt=s(Zme);T(Py.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),XBo=i(HDe),ege=n(HDe,"SPAN",{});var ymt=s(ege);zBo=r(ymt,"AutoModelForMultipleChoice"),ymt.forEach(t),HDe.forEach(t),zqe=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(By.$$.fragment,Hs),WBo=i(Hs),zi=n(Hs,"P",{});var jZ=s(zi);QBo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hO=n(jZ,"A",{href:!0});var Lmt=s(hO);HBo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),UBo=r(jZ," class method or the "),pO=n(jZ,"A",{href:!0});var xmt=s(pO);JBo=r(xmt,"from_config()"),xmt.forEach(t),YBo=r(jZ,` class
method.`),jZ.forEach(t),KBo=i(Hs),Iy=n(Hs,"P",{});var UDe=s(Iy);ZBo=r(UDe,"This class cannot be instantiated directly using "),oge=n(UDe,"CODE",{});var $mt=s(oge);eIo=r($mt,"__init__()"),$mt.forEach(t),oIo=r(UDe," (throws an error)."),UDe.forEach(t),rIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var H0=s(dt);T(Ny.$$.fragment,H0),tIo=i(H0),rge=n(H0,"P",{});var kmt=s(rge);aIo=r(kmt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kmt.forEach(t),nIo=i(H0),Wi=n(H0,"P",{});var DZ=s(Wi);sIo=r(DZ,`Note:
Loading a model from its configuration file does `),tge=n(DZ,"STRONG",{});var Smt=s(tge);lIo=r(Smt,"not"),Smt.forEach(t),iIo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(DZ,"A",{href:!0});var Rmt=s(uO);dIo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),cIo=r(DZ," to load the model weights."),DZ.forEach(t),fIo=i(H0),T(Xb.$$.fragment,H0),H0.forEach(t),mIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(qy.$$.fragment,la),gIo=i(la),age=n(la,"P",{});var Pmt=s(age);hIo=r(Pmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pmt.forEach(t),pIo=i(la),Pa=n(la,"P",{});var U0=s(Pa);uIo=r(U0,"The model class to instantiate is selected based on the "),nge=n(U0,"CODE",{});var Bmt=s(nge);_Io=r(Bmt,"model_type"),Bmt.forEach(t),bIo=r(U0,` property of the config object (either
passed as an argument or loaded from `),sge=n(U0,"CODE",{});var Imt=s(sge);vIo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),FIo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=n(U0,"CODE",{});var Nmt=s(lge);TIo=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),MIo=r(U0,":"),U0.forEach(t),EIo=i(la),K=n(la,"UL",{});var ee=s(K);zb=n(ee,"LI",{});var bxe=s(zb);ige=n(bxe,"STRONG",{});var qmt=s(ige);CIo=r(qmt,"albert"),qmt.forEach(t),wIo=r(bxe," \u2014 "),_O=n(bxe,"A",{href:!0});var jmt=s(_O);AIo=r(jmt,"AlbertForMultipleChoice"),jmt.forEach(t),yIo=r(bxe," (ALBERT model)"),bxe.forEach(t),LIo=i(ee),Wb=n(ee,"LI",{});var vxe=s(Wb);dge=n(vxe,"STRONG",{});var Dmt=s(dge);xIo=r(Dmt,"bert"),Dmt.forEach(t),$Io=r(vxe," \u2014 "),bO=n(vxe,"A",{href:!0});var Gmt=s(bO);kIo=r(Gmt,"BertForMultipleChoice"),Gmt.forEach(t),SIo=r(vxe," (BERT model)"),vxe.forEach(t),RIo=i(ee),Qb=n(ee,"LI",{});var Fxe=s(Qb);cge=n(Fxe,"STRONG",{});var Omt=s(cge);PIo=r(Omt,"big_bird"),Omt.forEach(t),BIo=r(Fxe," \u2014 "),vO=n(Fxe,"A",{href:!0});var Vmt=s(vO);IIo=r(Vmt,"BigBirdForMultipleChoice"),Vmt.forEach(t),NIo=r(Fxe," (BigBird model)"),Fxe.forEach(t),qIo=i(ee),Hb=n(ee,"LI",{});var Txe=s(Hb);fge=n(Txe,"STRONG",{});var Xmt=s(fge);jIo=r(Xmt,"camembert"),Xmt.forEach(t),DIo=r(Txe," \u2014 "),FO=n(Txe,"A",{href:!0});var zmt=s(FO);GIo=r(zmt,"CamembertForMultipleChoice"),zmt.forEach(t),OIo=r(Txe," (CamemBERT model)"),Txe.forEach(t),VIo=i(ee),Ub=n(ee,"LI",{});var Mxe=s(Ub);mge=n(Mxe,"STRONG",{});var Wmt=s(mge);XIo=r(Wmt,"canine"),Wmt.forEach(t),zIo=r(Mxe," \u2014 "),TO=n(Mxe,"A",{href:!0});var Qmt=s(TO);WIo=r(Qmt,"CanineForMultipleChoice"),Qmt.forEach(t),QIo=r(Mxe," (Canine model)"),Mxe.forEach(t),HIo=i(ee),Jb=n(ee,"LI",{});var Exe=s(Jb);gge=n(Exe,"STRONG",{});var Hmt=s(gge);UIo=r(Hmt,"convbert"),Hmt.forEach(t),JIo=r(Exe," \u2014 "),MO=n(Exe,"A",{href:!0});var Umt=s(MO);YIo=r(Umt,"ConvBertForMultipleChoice"),Umt.forEach(t),KIo=r(Exe," (ConvBERT model)"),Exe.forEach(t),ZIo=i(ee),Yb=n(ee,"LI",{});var Cxe=s(Yb);hge=n(Cxe,"STRONG",{});var Jmt=s(hge);eNo=r(Jmt,"data2vec-text"),Jmt.forEach(t),oNo=r(Cxe," \u2014 "),EO=n(Cxe,"A",{href:!0});var Ymt=s(EO);rNo=r(Ymt,"Data2VecTextForMultipleChoice"),Ymt.forEach(t),tNo=r(Cxe," (Data2VecText model)"),Cxe.forEach(t),aNo=i(ee),Kb=n(ee,"LI",{});var wxe=s(Kb);pge=n(wxe,"STRONG",{});var Kmt=s(pge);nNo=r(Kmt,"deberta-v2"),Kmt.forEach(t),sNo=r(wxe," \u2014 "),CO=n(wxe,"A",{href:!0});var Zmt=s(CO);lNo=r(Zmt,"DebertaV2ForMultipleChoice"),Zmt.forEach(t),iNo=r(wxe," (DeBERTa-v2 model)"),wxe.forEach(t),dNo=i(ee),Zb=n(ee,"LI",{});var Axe=s(Zb);uge=n(Axe,"STRONG",{});var egt=s(uge);cNo=r(egt,"distilbert"),egt.forEach(t),fNo=r(Axe," \u2014 "),wO=n(Axe,"A",{href:!0});var ogt=s(wO);mNo=r(ogt,"DistilBertForMultipleChoice"),ogt.forEach(t),gNo=r(Axe," (DistilBERT model)"),Axe.forEach(t),hNo=i(ee),e2=n(ee,"LI",{});var yxe=s(e2);_ge=n(yxe,"STRONG",{});var rgt=s(_ge);pNo=r(rgt,"electra"),rgt.forEach(t),uNo=r(yxe," \u2014 "),AO=n(yxe,"A",{href:!0});var tgt=s(AO);_No=r(tgt,"ElectraForMultipleChoice"),tgt.forEach(t),bNo=r(yxe," (ELECTRA model)"),yxe.forEach(t),vNo=i(ee),o2=n(ee,"LI",{});var Lxe=s(o2);bge=n(Lxe,"STRONG",{});var agt=s(bge);FNo=r(agt,"flaubert"),agt.forEach(t),TNo=r(Lxe," \u2014 "),yO=n(Lxe,"A",{href:!0});var ngt=s(yO);MNo=r(ngt,"FlaubertForMultipleChoice"),ngt.forEach(t),ENo=r(Lxe," (FlauBERT model)"),Lxe.forEach(t),CNo=i(ee),r2=n(ee,"LI",{});var xxe=s(r2);vge=n(xxe,"STRONG",{});var sgt=s(vge);wNo=r(sgt,"fnet"),sgt.forEach(t),ANo=r(xxe," \u2014 "),LO=n(xxe,"A",{href:!0});var lgt=s(LO);yNo=r(lgt,"FNetForMultipleChoice"),lgt.forEach(t),LNo=r(xxe," (FNet model)"),xxe.forEach(t),xNo=i(ee),t2=n(ee,"LI",{});var $xe=s(t2);Fge=n($xe,"STRONG",{});var igt=s(Fge);$No=r(igt,"funnel"),igt.forEach(t),kNo=r($xe," \u2014 "),xO=n($xe,"A",{href:!0});var dgt=s(xO);SNo=r(dgt,"FunnelForMultipleChoice"),dgt.forEach(t),RNo=r($xe," (Funnel Transformer model)"),$xe.forEach(t),PNo=i(ee),a2=n(ee,"LI",{});var kxe=s(a2);Tge=n(kxe,"STRONG",{});var cgt=s(Tge);BNo=r(cgt,"ibert"),cgt.forEach(t),INo=r(kxe," \u2014 "),$O=n(kxe,"A",{href:!0});var fgt=s($O);NNo=r(fgt,"IBertForMultipleChoice"),fgt.forEach(t),qNo=r(kxe," (I-BERT model)"),kxe.forEach(t),jNo=i(ee),n2=n(ee,"LI",{});var Sxe=s(n2);Mge=n(Sxe,"STRONG",{});var mgt=s(Mge);DNo=r(mgt,"longformer"),mgt.forEach(t),GNo=r(Sxe," \u2014 "),kO=n(Sxe,"A",{href:!0});var ggt=s(kO);ONo=r(ggt,"LongformerForMultipleChoice"),ggt.forEach(t),VNo=r(Sxe," (Longformer model)"),Sxe.forEach(t),XNo=i(ee),s2=n(ee,"LI",{});var Rxe=s(s2);Ege=n(Rxe,"STRONG",{});var hgt=s(Ege);zNo=r(hgt,"megatron-bert"),hgt.forEach(t),WNo=r(Rxe," \u2014 "),SO=n(Rxe,"A",{href:!0});var pgt=s(SO);QNo=r(pgt,"MegatronBertForMultipleChoice"),pgt.forEach(t),HNo=r(Rxe," (MegatronBert model)"),Rxe.forEach(t),UNo=i(ee),l2=n(ee,"LI",{});var Pxe=s(l2);Cge=n(Pxe,"STRONG",{});var ugt=s(Cge);JNo=r(ugt,"mobilebert"),ugt.forEach(t),YNo=r(Pxe," \u2014 "),RO=n(Pxe,"A",{href:!0});var _gt=s(RO);KNo=r(_gt,"MobileBertForMultipleChoice"),_gt.forEach(t),ZNo=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),eqo=i(ee),i2=n(ee,"LI",{});var Bxe=s(i2);wge=n(Bxe,"STRONG",{});var bgt=s(wge);oqo=r(bgt,"mpnet"),bgt.forEach(t),rqo=r(Bxe," \u2014 "),PO=n(Bxe,"A",{href:!0});var vgt=s(PO);tqo=r(vgt,"MPNetForMultipleChoice"),vgt.forEach(t),aqo=r(Bxe," (MPNet model)"),Bxe.forEach(t),nqo=i(ee),d2=n(ee,"LI",{});var Ixe=s(d2);Age=n(Ixe,"STRONG",{});var Fgt=s(Age);sqo=r(Fgt,"nystromformer"),Fgt.forEach(t),lqo=r(Ixe," \u2014 "),BO=n(Ixe,"A",{href:!0});var Tgt=s(BO);iqo=r(Tgt,"NystromformerForMultipleChoice"),Tgt.forEach(t),dqo=r(Ixe," (Nystromformer model)"),Ixe.forEach(t),cqo=i(ee),c2=n(ee,"LI",{});var Nxe=s(c2);yge=n(Nxe,"STRONG",{});var Mgt=s(yge);fqo=r(Mgt,"qdqbert"),Mgt.forEach(t),mqo=r(Nxe," \u2014 "),IO=n(Nxe,"A",{href:!0});var Egt=s(IO);gqo=r(Egt,"QDQBertForMultipleChoice"),Egt.forEach(t),hqo=r(Nxe," (QDQBert model)"),Nxe.forEach(t),pqo=i(ee),f2=n(ee,"LI",{});var qxe=s(f2);Lge=n(qxe,"STRONG",{});var Cgt=s(Lge);uqo=r(Cgt,"rembert"),Cgt.forEach(t),_qo=r(qxe," \u2014 "),NO=n(qxe,"A",{href:!0});var wgt=s(NO);bqo=r(wgt,"RemBertForMultipleChoice"),wgt.forEach(t),vqo=r(qxe," (RemBERT model)"),qxe.forEach(t),Fqo=i(ee),m2=n(ee,"LI",{});var jxe=s(m2);xge=n(jxe,"STRONG",{});var Agt=s(xge);Tqo=r(Agt,"roberta"),Agt.forEach(t),Mqo=r(jxe," \u2014 "),qO=n(jxe,"A",{href:!0});var ygt=s(qO);Eqo=r(ygt,"RobertaForMultipleChoice"),ygt.forEach(t),Cqo=r(jxe," (RoBERTa model)"),jxe.forEach(t),wqo=i(ee),g2=n(ee,"LI",{});var Dxe=s(g2);$ge=n(Dxe,"STRONG",{});var Lgt=s($ge);Aqo=r(Lgt,"roformer"),Lgt.forEach(t),yqo=r(Dxe," \u2014 "),jO=n(Dxe,"A",{href:!0});var xgt=s(jO);Lqo=r(xgt,"RoFormerForMultipleChoice"),xgt.forEach(t),xqo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),$qo=i(ee),h2=n(ee,"LI",{});var Gxe=s(h2);kge=n(Gxe,"STRONG",{});var $gt=s(kge);kqo=r($gt,"squeezebert"),$gt.forEach(t),Sqo=r(Gxe," \u2014 "),DO=n(Gxe,"A",{href:!0});var kgt=s(DO);Rqo=r(kgt,"SqueezeBertForMultipleChoice"),kgt.forEach(t),Pqo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),Bqo=i(ee),p2=n(ee,"LI",{});var Oxe=s(p2);Sge=n(Oxe,"STRONG",{});var Sgt=s(Sge);Iqo=r(Sgt,"xlm"),Sgt.forEach(t),Nqo=r(Oxe," \u2014 "),GO=n(Oxe,"A",{href:!0});var Rgt=s(GO);qqo=r(Rgt,"XLMForMultipleChoice"),Rgt.forEach(t),jqo=r(Oxe," (XLM model)"),Oxe.forEach(t),Dqo=i(ee),u2=n(ee,"LI",{});var Vxe=s(u2);Rge=n(Vxe,"STRONG",{});var Pgt=s(Rge);Gqo=r(Pgt,"xlm-roberta"),Pgt.forEach(t),Oqo=r(Vxe," \u2014 "),OO=n(Vxe,"A",{href:!0});var Bgt=s(OO);Vqo=r(Bgt,"XLMRobertaForMultipleChoice"),Bgt.forEach(t),Xqo=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),zqo=i(ee),_2=n(ee,"LI",{});var Xxe=s(_2);Pge=n(Xxe,"STRONG",{});var Igt=s(Pge);Wqo=r(Igt,"xlm-roberta-xl"),Igt.forEach(t),Qqo=r(Xxe," \u2014 "),VO=n(Xxe,"A",{href:!0});var Ngt=s(VO);Hqo=r(Ngt,"XLMRobertaXLForMultipleChoice"),Ngt.forEach(t),Uqo=r(Xxe," (XLM-RoBERTa-XL model)"),Xxe.forEach(t),Jqo=i(ee),b2=n(ee,"LI",{});var zxe=s(b2);Bge=n(zxe,"STRONG",{});var qgt=s(Bge);Yqo=r(qgt,"xlnet"),qgt.forEach(t),Kqo=r(zxe," \u2014 "),XO=n(zxe,"A",{href:!0});var jgt=s(XO);Zqo=r(jgt,"XLNetForMultipleChoice"),jgt.forEach(t),ejo=r(zxe," (XLNet model)"),zxe.forEach(t),ojo=i(ee),v2=n(ee,"LI",{});var Wxe=s(v2);Ige=n(Wxe,"STRONG",{});var Dgt=s(Ige);rjo=r(Dgt,"yoso"),Dgt.forEach(t),tjo=r(Wxe," \u2014 "),zO=n(Wxe,"A",{href:!0});var Ggt=s(zO);ajo=r(Ggt,"YosoForMultipleChoice"),Ggt.forEach(t),njo=r(Wxe," (YOSO model)"),Wxe.forEach(t),ee.forEach(t),sjo=i(la),F2=n(la,"P",{});var Qxe=s(F2);ljo=r(Qxe,"The model is set in evaluation mode by default using "),Nge=n(Qxe,"CODE",{});var Ogt=s(Nge);ijo=r(Ogt,"model.eval()"),Ogt.forEach(t),djo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(Qxe,"CODE",{});var Vgt=s(qge);cjo=r(Vgt,"model.train()"),Vgt.forEach(t),Qxe.forEach(t),fjo=i(la),T(T2.$$.fragment,la),la.forEach(t),Hs.forEach(t),Wqe=i(f),Qi=n(f,"H2",{class:!0});var JDe=s(Qi);M2=n(JDe,"A",{id:!0,class:!0,href:!0});var Xgt=s(M2);jge=n(Xgt,"SPAN",{});var zgt=s(jge);T(jy.$$.fragment,zgt),zgt.forEach(t),Xgt.forEach(t),mjo=i(JDe),Dge=n(JDe,"SPAN",{});var Wgt=s(Dge);gjo=r(Wgt,"AutoModelForNextSentencePrediction"),Wgt.forEach(t),JDe.forEach(t),Qqe=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(Dy.$$.fragment,Us),hjo=i(Us),Hi=n(Us,"P",{});var GZ=s(Hi);pjo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WO=n(GZ,"A",{href:!0});var Qgt=s(WO);ujo=r(Qgt,"from_pretrained()"),Qgt.forEach(t),_jo=r(GZ," class method or the "),QO=n(GZ,"A",{href:!0});var Hgt=s(QO);bjo=r(Hgt,"from_config()"),Hgt.forEach(t),vjo=r(GZ,` class
method.`),GZ.forEach(t),Fjo=i(Us),Gy=n(Us,"P",{});var YDe=s(Gy);Tjo=r(YDe,"This class cannot be instantiated directly using "),Gge=n(YDe,"CODE",{});var Ugt=s(Gge);Mjo=r(Ugt,"__init__()"),Ugt.forEach(t),Ejo=r(YDe," (throws an error)."),YDe.forEach(t),Cjo=i(Us),ct=n(Us,"DIV",{class:!0});var J0=s(ct);T(Oy.$$.fragment,J0),wjo=i(J0),Oge=n(J0,"P",{});var Jgt=s(Oge);Ajo=r(Jgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jgt.forEach(t),yjo=i(J0),Ui=n(J0,"P",{});var OZ=s(Ui);Ljo=r(OZ,`Note:
Loading a model from its configuration file does `),Vge=n(OZ,"STRONG",{});var Ygt=s(Vge);xjo=r(Ygt,"not"),Ygt.forEach(t),$jo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(OZ,"A",{href:!0});var Kgt=s(HO);kjo=r(Kgt,"from_pretrained()"),Kgt.forEach(t),Sjo=r(OZ," to load the model weights."),OZ.forEach(t),Rjo=i(J0),T(E2.$$.fragment,J0),J0.forEach(t),Pjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Vy.$$.fragment,ia),Bjo=i(ia),Xge=n(ia,"P",{});var Zgt=s(Xge);Ijo=r(Zgt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zgt.forEach(t),Njo=i(ia),Ba=n(ia,"P",{});var Y0=s(Ba);qjo=r(Y0,"The model class to instantiate is selected based on the "),zge=n(Y0,"CODE",{});var eht=s(zge);jjo=r(eht,"model_type"),eht.forEach(t),Djo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Wge=n(Y0,"CODE",{});var oht=s(Wge);Gjo=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),Ojo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(Y0,"CODE",{});var rht=s(Qge);Vjo=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),Xjo=r(Y0,":"),Y0.forEach(t),zjo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);C2=n(Js,"LI",{});var Hxe=s(C2);Hge=n(Hxe,"STRONG",{});var tht=s(Hge);Wjo=r(tht,"bert"),tht.forEach(t),Qjo=r(Hxe," \u2014 "),UO=n(Hxe,"A",{href:!0});var aht=s(UO);Hjo=r(aht,"BertForNextSentencePrediction"),aht.forEach(t),Ujo=r(Hxe," (BERT model)"),Hxe.forEach(t),Jjo=i(Js),w2=n(Js,"LI",{});var Uxe=s(w2);Uge=n(Uxe,"STRONG",{});var nht=s(Uge);Yjo=r(nht,"fnet"),nht.forEach(t),Kjo=r(Uxe," \u2014 "),JO=n(Uxe,"A",{href:!0});var sht=s(JO);Zjo=r(sht,"FNetForNextSentencePrediction"),sht.forEach(t),eDo=r(Uxe," (FNet model)"),Uxe.forEach(t),oDo=i(Js),A2=n(Js,"LI",{});var Jxe=s(A2);Jge=n(Jxe,"STRONG",{});var lht=s(Jge);rDo=r(lht,"megatron-bert"),lht.forEach(t),tDo=r(Jxe," \u2014 "),YO=n(Jxe,"A",{href:!0});var iht=s(YO);aDo=r(iht,"MegatronBertForNextSentencePrediction"),iht.forEach(t),nDo=r(Jxe," (MegatronBert model)"),Jxe.forEach(t),sDo=i(Js),y2=n(Js,"LI",{});var Yxe=s(y2);Yge=n(Yxe,"STRONG",{});var dht=s(Yge);lDo=r(dht,"mobilebert"),dht.forEach(t),iDo=r(Yxe," \u2014 "),KO=n(Yxe,"A",{href:!0});var cht=s(KO);dDo=r(cht,"MobileBertForNextSentencePrediction"),cht.forEach(t),cDo=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),fDo=i(Js),L2=n(Js,"LI",{});var Kxe=s(L2);Kge=n(Kxe,"STRONG",{});var fht=s(Kge);mDo=r(fht,"qdqbert"),fht.forEach(t),gDo=r(Kxe," \u2014 "),ZO=n(Kxe,"A",{href:!0});var mht=s(ZO);hDo=r(mht,"QDQBertForNextSentencePrediction"),mht.forEach(t),pDo=r(Kxe," (QDQBert model)"),Kxe.forEach(t),Js.forEach(t),uDo=i(ia),x2=n(ia,"P",{});var Zxe=s(x2);_Do=r(Zxe,"The model is set in evaluation mode by default using "),Zge=n(Zxe,"CODE",{});var ght=s(Zge);bDo=r(ght,"model.eval()"),ght.forEach(t),vDo=r(Zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=n(Zxe,"CODE",{});var hht=s(ehe);FDo=r(hht,"model.train()"),hht.forEach(t),Zxe.forEach(t),TDo=i(ia),T($2.$$.fragment,ia),ia.forEach(t),Us.forEach(t),Hqe=i(f),Ji=n(f,"H2",{class:!0});var KDe=s(Ji);k2=n(KDe,"A",{id:!0,class:!0,href:!0});var pht=s(k2);ohe=n(pht,"SPAN",{});var uht=s(ohe);T(Xy.$$.fragment,uht),uht.forEach(t),pht.forEach(t),MDo=i(KDe),rhe=n(KDe,"SPAN",{});var _ht=s(rhe);EDo=r(_ht,"AutoModelForTokenClassification"),_ht.forEach(t),KDe.forEach(t),Uqe=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(zy.$$.fragment,Ys),CDo=i(Ys),Yi=n(Ys,"P",{});var VZ=s(Yi);wDo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eV=n(VZ,"A",{href:!0});var bht=s(eV);ADo=r(bht,"from_pretrained()"),bht.forEach(t),yDo=r(VZ," class method or the "),oV=n(VZ,"A",{href:!0});var vht=s(oV);LDo=r(vht,"from_config()"),vht.forEach(t),xDo=r(VZ,` class
method.`),VZ.forEach(t),$Do=i(Ys),Wy=n(Ys,"P",{});var ZDe=s(Wy);kDo=r(ZDe,"This class cannot be instantiated directly using "),the=n(ZDe,"CODE",{});var Fht=s(the);SDo=r(Fht,"__init__()"),Fht.forEach(t),RDo=r(ZDe," (throws an error)."),ZDe.forEach(t),PDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var K0=s(ft);T(Qy.$$.fragment,K0),BDo=i(K0),ahe=n(K0,"P",{});var Tht=s(ahe);IDo=r(Tht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Tht.forEach(t),NDo=i(K0),Ki=n(K0,"P",{});var XZ=s(Ki);qDo=r(XZ,`Note:
Loading a model from its configuration file does `),nhe=n(XZ,"STRONG",{});var Mht=s(nhe);jDo=r(Mht,"not"),Mht.forEach(t),DDo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(XZ,"A",{href:!0});var Eht=s(rV);GDo=r(Eht,"from_pretrained()"),Eht.forEach(t),ODo=r(XZ," to load the model weights."),XZ.forEach(t),VDo=i(K0),T(S2.$$.fragment,K0),K0.forEach(t),XDo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(Hy.$$.fragment,da),zDo=i(da),she=n(da,"P",{});var Cht=s(she);WDo=r(Cht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cht.forEach(t),QDo=i(da),Ia=n(da,"P",{});var Z0=s(Ia);HDo=r(Z0,"The model class to instantiate is selected based on the "),lhe=n(Z0,"CODE",{});var wht=s(lhe);UDo=r(wht,"model_type"),wht.forEach(t),JDo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),ihe=n(Z0,"CODE",{});var Aht=s(ihe);YDo=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),KDo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(Z0,"CODE",{});var yht=s(dhe);ZDo=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),eGo=r(Z0,":"),Z0.forEach(t),oGo=i(da),H=n(da,"UL",{});var J=s(H);R2=n(J,"LI",{});var e$e=s(R2);che=n(e$e,"STRONG",{});var Lht=s(che);rGo=r(Lht,"albert"),Lht.forEach(t),tGo=r(e$e," \u2014 "),tV=n(e$e,"A",{href:!0});var xht=s(tV);aGo=r(xht,"AlbertForTokenClassification"),xht.forEach(t),nGo=r(e$e," (ALBERT model)"),e$e.forEach(t),sGo=i(J),P2=n(J,"LI",{});var o$e=s(P2);fhe=n(o$e,"STRONG",{});var $ht=s(fhe);lGo=r($ht,"bert"),$ht.forEach(t),iGo=r(o$e," \u2014 "),aV=n(o$e,"A",{href:!0});var kht=s(aV);dGo=r(kht,"BertForTokenClassification"),kht.forEach(t),cGo=r(o$e," (BERT model)"),o$e.forEach(t),fGo=i(J),B2=n(J,"LI",{});var r$e=s(B2);mhe=n(r$e,"STRONG",{});var Sht=s(mhe);mGo=r(Sht,"big_bird"),Sht.forEach(t),gGo=r(r$e," \u2014 "),nV=n(r$e,"A",{href:!0});var Rht=s(nV);hGo=r(Rht,"BigBirdForTokenClassification"),Rht.forEach(t),pGo=r(r$e," (BigBird model)"),r$e.forEach(t),uGo=i(J),I2=n(J,"LI",{});var t$e=s(I2);ghe=n(t$e,"STRONG",{});var Pht=s(ghe);_Go=r(Pht,"camembert"),Pht.forEach(t),bGo=r(t$e," \u2014 "),sV=n(t$e,"A",{href:!0});var Bht=s(sV);vGo=r(Bht,"CamembertForTokenClassification"),Bht.forEach(t),FGo=r(t$e," (CamemBERT model)"),t$e.forEach(t),TGo=i(J),N2=n(J,"LI",{});var a$e=s(N2);hhe=n(a$e,"STRONG",{});var Iht=s(hhe);MGo=r(Iht,"canine"),Iht.forEach(t),EGo=r(a$e," \u2014 "),lV=n(a$e,"A",{href:!0});var Nht=s(lV);CGo=r(Nht,"CanineForTokenClassification"),Nht.forEach(t),wGo=r(a$e," (Canine model)"),a$e.forEach(t),AGo=i(J),q2=n(J,"LI",{});var n$e=s(q2);phe=n(n$e,"STRONG",{});var qht=s(phe);yGo=r(qht,"convbert"),qht.forEach(t),LGo=r(n$e," \u2014 "),iV=n(n$e,"A",{href:!0});var jht=s(iV);xGo=r(jht,"ConvBertForTokenClassification"),jht.forEach(t),$Go=r(n$e," (ConvBERT model)"),n$e.forEach(t),kGo=i(J),j2=n(J,"LI",{});var s$e=s(j2);uhe=n(s$e,"STRONG",{});var Dht=s(uhe);SGo=r(Dht,"data2vec-text"),Dht.forEach(t),RGo=r(s$e," \u2014 "),dV=n(s$e,"A",{href:!0});var Ght=s(dV);PGo=r(Ght,"Data2VecTextForTokenClassification"),Ght.forEach(t),BGo=r(s$e," (Data2VecText model)"),s$e.forEach(t),IGo=i(J),D2=n(J,"LI",{});var l$e=s(D2);_he=n(l$e,"STRONG",{});var Oht=s(_he);NGo=r(Oht,"deberta"),Oht.forEach(t),qGo=r(l$e," \u2014 "),cV=n(l$e,"A",{href:!0});var Vht=s(cV);jGo=r(Vht,"DebertaForTokenClassification"),Vht.forEach(t),DGo=r(l$e," (DeBERTa model)"),l$e.forEach(t),GGo=i(J),G2=n(J,"LI",{});var i$e=s(G2);bhe=n(i$e,"STRONG",{});var Xht=s(bhe);OGo=r(Xht,"deberta-v2"),Xht.forEach(t),VGo=r(i$e," \u2014 "),fV=n(i$e,"A",{href:!0});var zht=s(fV);XGo=r(zht,"DebertaV2ForTokenClassification"),zht.forEach(t),zGo=r(i$e," (DeBERTa-v2 model)"),i$e.forEach(t),WGo=i(J),O2=n(J,"LI",{});var d$e=s(O2);vhe=n(d$e,"STRONG",{});var Wht=s(vhe);QGo=r(Wht,"distilbert"),Wht.forEach(t),HGo=r(d$e," \u2014 "),mV=n(d$e,"A",{href:!0});var Qht=s(mV);UGo=r(Qht,"DistilBertForTokenClassification"),Qht.forEach(t),JGo=r(d$e," (DistilBERT model)"),d$e.forEach(t),YGo=i(J),V2=n(J,"LI",{});var c$e=s(V2);Fhe=n(c$e,"STRONG",{});var Hht=s(Fhe);KGo=r(Hht,"electra"),Hht.forEach(t),ZGo=r(c$e," \u2014 "),gV=n(c$e,"A",{href:!0});var Uht=s(gV);eOo=r(Uht,"ElectraForTokenClassification"),Uht.forEach(t),oOo=r(c$e," (ELECTRA model)"),c$e.forEach(t),rOo=i(J),X2=n(J,"LI",{});var f$e=s(X2);The=n(f$e,"STRONG",{});var Jht=s(The);tOo=r(Jht,"flaubert"),Jht.forEach(t),aOo=r(f$e," \u2014 "),hV=n(f$e,"A",{href:!0});var Yht=s(hV);nOo=r(Yht,"FlaubertForTokenClassification"),Yht.forEach(t),sOo=r(f$e," (FlauBERT model)"),f$e.forEach(t),lOo=i(J),z2=n(J,"LI",{});var m$e=s(z2);Mhe=n(m$e,"STRONG",{});var Kht=s(Mhe);iOo=r(Kht,"fnet"),Kht.forEach(t),dOo=r(m$e," \u2014 "),pV=n(m$e,"A",{href:!0});var Zht=s(pV);cOo=r(Zht,"FNetForTokenClassification"),Zht.forEach(t),fOo=r(m$e," (FNet model)"),m$e.forEach(t),mOo=i(J),W2=n(J,"LI",{});var g$e=s(W2);Ehe=n(g$e,"STRONG",{});var ept=s(Ehe);gOo=r(ept,"funnel"),ept.forEach(t),hOo=r(g$e," \u2014 "),uV=n(g$e,"A",{href:!0});var opt=s(uV);pOo=r(opt,"FunnelForTokenClassification"),opt.forEach(t),uOo=r(g$e," (Funnel Transformer model)"),g$e.forEach(t),_Oo=i(J),Q2=n(J,"LI",{});var h$e=s(Q2);Che=n(h$e,"STRONG",{});var rpt=s(Che);bOo=r(rpt,"gpt2"),rpt.forEach(t),vOo=r(h$e," \u2014 "),_V=n(h$e,"A",{href:!0});var tpt=s(_V);FOo=r(tpt,"GPT2ForTokenClassification"),tpt.forEach(t),TOo=r(h$e," (OpenAI GPT-2 model)"),h$e.forEach(t),MOo=i(J),H2=n(J,"LI",{});var p$e=s(H2);whe=n(p$e,"STRONG",{});var apt=s(whe);EOo=r(apt,"ibert"),apt.forEach(t),COo=r(p$e," \u2014 "),bV=n(p$e,"A",{href:!0});var npt=s(bV);wOo=r(npt,"IBertForTokenClassification"),npt.forEach(t),AOo=r(p$e," (I-BERT model)"),p$e.forEach(t),yOo=i(J),U2=n(J,"LI",{});var u$e=s(U2);Ahe=n(u$e,"STRONG",{});var spt=s(Ahe);LOo=r(spt,"layoutlm"),spt.forEach(t),xOo=r(u$e," \u2014 "),vV=n(u$e,"A",{href:!0});var lpt=s(vV);$Oo=r(lpt,"LayoutLMForTokenClassification"),lpt.forEach(t),kOo=r(u$e," (LayoutLM model)"),u$e.forEach(t),SOo=i(J),J2=n(J,"LI",{});var _$e=s(J2);yhe=n(_$e,"STRONG",{});var ipt=s(yhe);ROo=r(ipt,"layoutlmv2"),ipt.forEach(t),POo=r(_$e," \u2014 "),FV=n(_$e,"A",{href:!0});var dpt=s(FV);BOo=r(dpt,"LayoutLMv2ForTokenClassification"),dpt.forEach(t),IOo=r(_$e," (LayoutLMv2 model)"),_$e.forEach(t),NOo=i(J),Y2=n(J,"LI",{});var b$e=s(Y2);Lhe=n(b$e,"STRONG",{});var cpt=s(Lhe);qOo=r(cpt,"layoutlmv3"),cpt.forEach(t),jOo=r(b$e," \u2014 "),TV=n(b$e,"A",{href:!0});var fpt=s(TV);DOo=r(fpt,"LayoutLMv3ForTokenClassification"),fpt.forEach(t),GOo=r(b$e," (LayoutLMv3 model)"),b$e.forEach(t),OOo=i(J),K2=n(J,"LI",{});var v$e=s(K2);xhe=n(v$e,"STRONG",{});var mpt=s(xhe);VOo=r(mpt,"longformer"),mpt.forEach(t),XOo=r(v$e," \u2014 "),MV=n(v$e,"A",{href:!0});var gpt=s(MV);zOo=r(gpt,"LongformerForTokenClassification"),gpt.forEach(t),WOo=r(v$e," (Longformer model)"),v$e.forEach(t),QOo=i(J),Z2=n(J,"LI",{});var F$e=s(Z2);$he=n(F$e,"STRONG",{});var hpt=s($he);HOo=r(hpt,"megatron-bert"),hpt.forEach(t),UOo=r(F$e," \u2014 "),EV=n(F$e,"A",{href:!0});var ppt=s(EV);JOo=r(ppt,"MegatronBertForTokenClassification"),ppt.forEach(t),YOo=r(F$e," (MegatronBert model)"),F$e.forEach(t),KOo=i(J),ev=n(J,"LI",{});var T$e=s(ev);khe=n(T$e,"STRONG",{});var upt=s(khe);ZOo=r(upt,"mobilebert"),upt.forEach(t),eVo=r(T$e," \u2014 "),CV=n(T$e,"A",{href:!0});var _pt=s(CV);oVo=r(_pt,"MobileBertForTokenClassification"),_pt.forEach(t),rVo=r(T$e," (MobileBERT model)"),T$e.forEach(t),tVo=i(J),ov=n(J,"LI",{});var M$e=s(ov);She=n(M$e,"STRONG",{});var bpt=s(She);aVo=r(bpt,"mpnet"),bpt.forEach(t),nVo=r(M$e," \u2014 "),wV=n(M$e,"A",{href:!0});var vpt=s(wV);sVo=r(vpt,"MPNetForTokenClassification"),vpt.forEach(t),lVo=r(M$e," (MPNet model)"),M$e.forEach(t),iVo=i(J),rv=n(J,"LI",{});var E$e=s(rv);Rhe=n(E$e,"STRONG",{});var Fpt=s(Rhe);dVo=r(Fpt,"nystromformer"),Fpt.forEach(t),cVo=r(E$e," \u2014 "),AV=n(E$e,"A",{href:!0});var Tpt=s(AV);fVo=r(Tpt,"NystromformerForTokenClassification"),Tpt.forEach(t),mVo=r(E$e," (Nystromformer model)"),E$e.forEach(t),gVo=i(J),tv=n(J,"LI",{});var C$e=s(tv);Phe=n(C$e,"STRONG",{});var Mpt=s(Phe);hVo=r(Mpt,"qdqbert"),Mpt.forEach(t),pVo=r(C$e," \u2014 "),yV=n(C$e,"A",{href:!0});var Ept=s(yV);uVo=r(Ept,"QDQBertForTokenClassification"),Ept.forEach(t),_Vo=r(C$e," (QDQBert model)"),C$e.forEach(t),bVo=i(J),av=n(J,"LI",{});var w$e=s(av);Bhe=n(w$e,"STRONG",{});var Cpt=s(Bhe);vVo=r(Cpt,"rembert"),Cpt.forEach(t),FVo=r(w$e," \u2014 "),LV=n(w$e,"A",{href:!0});var wpt=s(LV);TVo=r(wpt,"RemBertForTokenClassification"),wpt.forEach(t),MVo=r(w$e," (RemBERT model)"),w$e.forEach(t),EVo=i(J),nv=n(J,"LI",{});var A$e=s(nv);Ihe=n(A$e,"STRONG",{});var Apt=s(Ihe);CVo=r(Apt,"roberta"),Apt.forEach(t),wVo=r(A$e," \u2014 "),xV=n(A$e,"A",{href:!0});var ypt=s(xV);AVo=r(ypt,"RobertaForTokenClassification"),ypt.forEach(t),yVo=r(A$e," (RoBERTa model)"),A$e.forEach(t),LVo=i(J),sv=n(J,"LI",{});var y$e=s(sv);Nhe=n(y$e,"STRONG",{});var Lpt=s(Nhe);xVo=r(Lpt,"roformer"),Lpt.forEach(t),$Vo=r(y$e," \u2014 "),$V=n(y$e,"A",{href:!0});var xpt=s($V);kVo=r(xpt,"RoFormerForTokenClassification"),xpt.forEach(t),SVo=r(y$e," (RoFormer model)"),y$e.forEach(t),RVo=i(J),lv=n(J,"LI",{});var L$e=s(lv);qhe=n(L$e,"STRONG",{});var $pt=s(qhe);PVo=r($pt,"squeezebert"),$pt.forEach(t),BVo=r(L$e," \u2014 "),kV=n(L$e,"A",{href:!0});var kpt=s(kV);IVo=r(kpt,"SqueezeBertForTokenClassification"),kpt.forEach(t),NVo=r(L$e," (SqueezeBERT model)"),L$e.forEach(t),qVo=i(J),iv=n(J,"LI",{});var x$e=s(iv);jhe=n(x$e,"STRONG",{});var Spt=s(jhe);jVo=r(Spt,"xlm"),Spt.forEach(t),DVo=r(x$e," \u2014 "),SV=n(x$e,"A",{href:!0});var Rpt=s(SV);GVo=r(Rpt,"XLMForTokenClassification"),Rpt.forEach(t),OVo=r(x$e," (XLM model)"),x$e.forEach(t),VVo=i(J),dv=n(J,"LI",{});var $$e=s(dv);Dhe=n($$e,"STRONG",{});var Ppt=s(Dhe);XVo=r(Ppt,"xlm-roberta"),Ppt.forEach(t),zVo=r($$e," \u2014 "),RV=n($$e,"A",{href:!0});var Bpt=s(RV);WVo=r(Bpt,"XLMRobertaForTokenClassification"),Bpt.forEach(t),QVo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),HVo=i(J),cv=n(J,"LI",{});var k$e=s(cv);Ghe=n(k$e,"STRONG",{});var Ipt=s(Ghe);UVo=r(Ipt,"xlm-roberta-xl"),Ipt.forEach(t),JVo=r(k$e," \u2014 "),PV=n(k$e,"A",{href:!0});var Npt=s(PV);YVo=r(Npt,"XLMRobertaXLForTokenClassification"),Npt.forEach(t),KVo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),ZVo=i(J),fv=n(J,"LI",{});var S$e=s(fv);Ohe=n(S$e,"STRONG",{});var qpt=s(Ohe);eXo=r(qpt,"xlnet"),qpt.forEach(t),oXo=r(S$e," \u2014 "),BV=n(S$e,"A",{href:!0});var jpt=s(BV);rXo=r(jpt,"XLNetForTokenClassification"),jpt.forEach(t),tXo=r(S$e," (XLNet model)"),S$e.forEach(t),aXo=i(J),mv=n(J,"LI",{});var R$e=s(mv);Vhe=n(R$e,"STRONG",{});var Dpt=s(Vhe);nXo=r(Dpt,"yoso"),Dpt.forEach(t),sXo=r(R$e," \u2014 "),IV=n(R$e,"A",{href:!0});var Gpt=s(IV);lXo=r(Gpt,"YosoForTokenClassification"),Gpt.forEach(t),iXo=r(R$e," (YOSO model)"),R$e.forEach(t),J.forEach(t),dXo=i(da),gv=n(da,"P",{});var P$e=s(gv);cXo=r(P$e,"The model is set in evaluation mode by default using "),Xhe=n(P$e,"CODE",{});var Opt=s(Xhe);fXo=r(Opt,"model.eval()"),Opt.forEach(t),mXo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(P$e,"CODE",{});var Vpt=s(zhe);gXo=r(Vpt,"model.train()"),Vpt.forEach(t),P$e.forEach(t),hXo=i(da),T(hv.$$.fragment,da),da.forEach(t),Ys.forEach(t),Jqe=i(f),Zi=n(f,"H2",{class:!0});var eGe=s(Zi);pv=n(eGe,"A",{id:!0,class:!0,href:!0});var Xpt=s(pv);Whe=n(Xpt,"SPAN",{});var zpt=s(Whe);T(Uy.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),pXo=i(eGe),Qhe=n(eGe,"SPAN",{});var Wpt=s(Qhe);uXo=r(Wpt,"AutoModelForQuestionAnswering"),Wpt.forEach(t),eGe.forEach(t),Yqe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Jy.$$.fragment,Ks),_Xo=i(Ks),ed=n(Ks,"P",{});var zZ=s(ed);bXo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NV=n(zZ,"A",{href:!0});var Qpt=s(NV);vXo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),FXo=r(zZ," class method or the "),qV=n(zZ,"A",{href:!0});var Hpt=s(qV);TXo=r(Hpt,"from_config()"),Hpt.forEach(t),MXo=r(zZ,` class
method.`),zZ.forEach(t),EXo=i(Ks),Yy=n(Ks,"P",{});var oGe=s(Yy);CXo=r(oGe,"This class cannot be instantiated directly using "),Hhe=n(oGe,"CODE",{});var Upt=s(Hhe);wXo=r(Upt,"__init__()"),Upt.forEach(t),AXo=r(oGe," (throws an error)."),oGe.forEach(t),yXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var e6=s(mt);T(Ky.$$.fragment,e6),LXo=i(e6),Uhe=n(e6,"P",{});var Jpt=s(Uhe);xXo=r(Jpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jpt.forEach(t),$Xo=i(e6),od=n(e6,"P",{});var WZ=s(od);kXo=r(WZ,`Note:
Loading a model from its configuration file does `),Jhe=n(WZ,"STRONG",{});var Ypt=s(Jhe);SXo=r(Ypt,"not"),Ypt.forEach(t),RXo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(WZ,"A",{href:!0});var Kpt=s(jV);PXo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),BXo=r(WZ," to load the model weights."),WZ.forEach(t),IXo=i(e6),T(uv.$$.fragment,e6),e6.forEach(t),NXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(Zy.$$.fragment,ca),qXo=i(ca),Yhe=n(ca,"P",{});var Zpt=s(Yhe);jXo=r(Zpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zpt.forEach(t),DXo=i(ca),Na=n(ca,"P",{});var o6=s(Na);GXo=r(o6,"The model class to instantiate is selected based on the "),Khe=n(o6,"CODE",{});var eut=s(Khe);OXo=r(eut,"model_type"),eut.forEach(t),VXo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(o6,"CODE",{});var out=s(Zhe);XXo=r(out,"pretrained_model_name_or_path"),out.forEach(t),zXo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(o6,"CODE",{});var rut=s(epe);WXo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),QXo=r(o6,":"),o6.forEach(t),HXo=i(ca),V=n(ca,"UL",{});var X=s(V);_v=n(X,"LI",{});var B$e=s(_v);ope=n(B$e,"STRONG",{});var tut=s(ope);UXo=r(tut,"albert"),tut.forEach(t),JXo=r(B$e," \u2014 "),DV=n(B$e,"A",{href:!0});var aut=s(DV);YXo=r(aut,"AlbertForQuestionAnswering"),aut.forEach(t),KXo=r(B$e," (ALBERT model)"),B$e.forEach(t),ZXo=i(X),bv=n(X,"LI",{});var I$e=s(bv);rpe=n(I$e,"STRONG",{});var nut=s(rpe);ezo=r(nut,"bart"),nut.forEach(t),ozo=r(I$e," \u2014 "),GV=n(I$e,"A",{href:!0});var sut=s(GV);rzo=r(sut,"BartForQuestionAnswering"),sut.forEach(t),tzo=r(I$e," (BART model)"),I$e.forEach(t),azo=i(X),vv=n(X,"LI",{});var N$e=s(vv);tpe=n(N$e,"STRONG",{});var lut=s(tpe);nzo=r(lut,"bert"),lut.forEach(t),szo=r(N$e," \u2014 "),OV=n(N$e,"A",{href:!0});var iut=s(OV);lzo=r(iut,"BertForQuestionAnswering"),iut.forEach(t),izo=r(N$e," (BERT model)"),N$e.forEach(t),dzo=i(X),Fv=n(X,"LI",{});var q$e=s(Fv);ape=n(q$e,"STRONG",{});var dut=s(ape);czo=r(dut,"big_bird"),dut.forEach(t),fzo=r(q$e," \u2014 "),VV=n(q$e,"A",{href:!0});var cut=s(VV);mzo=r(cut,"BigBirdForQuestionAnswering"),cut.forEach(t),gzo=r(q$e," (BigBird model)"),q$e.forEach(t),hzo=i(X),Tv=n(X,"LI",{});var j$e=s(Tv);npe=n(j$e,"STRONG",{});var fut=s(npe);pzo=r(fut,"bigbird_pegasus"),fut.forEach(t),uzo=r(j$e," \u2014 "),XV=n(j$e,"A",{href:!0});var mut=s(XV);_zo=r(mut,"BigBirdPegasusForQuestionAnswering"),mut.forEach(t),bzo=r(j$e," (BigBirdPegasus model)"),j$e.forEach(t),vzo=i(X),Mv=n(X,"LI",{});var D$e=s(Mv);spe=n(D$e,"STRONG",{});var gut=s(spe);Fzo=r(gut,"camembert"),gut.forEach(t),Tzo=r(D$e," \u2014 "),zV=n(D$e,"A",{href:!0});var hut=s(zV);Mzo=r(hut,"CamembertForQuestionAnswering"),hut.forEach(t),Ezo=r(D$e," (CamemBERT model)"),D$e.forEach(t),Czo=i(X),Ev=n(X,"LI",{});var G$e=s(Ev);lpe=n(G$e,"STRONG",{});var put=s(lpe);wzo=r(put,"canine"),put.forEach(t),Azo=r(G$e," \u2014 "),WV=n(G$e,"A",{href:!0});var uut=s(WV);yzo=r(uut,"CanineForQuestionAnswering"),uut.forEach(t),Lzo=r(G$e," (Canine model)"),G$e.forEach(t),xzo=i(X),Cv=n(X,"LI",{});var O$e=s(Cv);ipe=n(O$e,"STRONG",{});var _ut=s(ipe);$zo=r(_ut,"convbert"),_ut.forEach(t),kzo=r(O$e," \u2014 "),QV=n(O$e,"A",{href:!0});var but=s(QV);Szo=r(but,"ConvBertForQuestionAnswering"),but.forEach(t),Rzo=r(O$e," (ConvBERT model)"),O$e.forEach(t),Pzo=i(X),wv=n(X,"LI",{});var V$e=s(wv);dpe=n(V$e,"STRONG",{});var vut=s(dpe);Bzo=r(vut,"data2vec-text"),vut.forEach(t),Izo=r(V$e," \u2014 "),HV=n(V$e,"A",{href:!0});var Fut=s(HV);Nzo=r(Fut,"Data2VecTextForQuestionAnswering"),Fut.forEach(t),qzo=r(V$e," (Data2VecText model)"),V$e.forEach(t),jzo=i(X),Av=n(X,"LI",{});var X$e=s(Av);cpe=n(X$e,"STRONG",{});var Tut=s(cpe);Dzo=r(Tut,"deberta"),Tut.forEach(t),Gzo=r(X$e," \u2014 "),UV=n(X$e,"A",{href:!0});var Mut=s(UV);Ozo=r(Mut,"DebertaForQuestionAnswering"),Mut.forEach(t),Vzo=r(X$e," (DeBERTa model)"),X$e.forEach(t),Xzo=i(X),yv=n(X,"LI",{});var z$e=s(yv);fpe=n(z$e,"STRONG",{});var Eut=s(fpe);zzo=r(Eut,"deberta-v2"),Eut.forEach(t),Wzo=r(z$e," \u2014 "),JV=n(z$e,"A",{href:!0});var Cut=s(JV);Qzo=r(Cut,"DebertaV2ForQuestionAnswering"),Cut.forEach(t),Hzo=r(z$e," (DeBERTa-v2 model)"),z$e.forEach(t),Uzo=i(X),Lv=n(X,"LI",{});var W$e=s(Lv);mpe=n(W$e,"STRONG",{});var wut=s(mpe);Jzo=r(wut,"distilbert"),wut.forEach(t),Yzo=r(W$e," \u2014 "),YV=n(W$e,"A",{href:!0});var Aut=s(YV);Kzo=r(Aut,"DistilBertForQuestionAnswering"),Aut.forEach(t),Zzo=r(W$e," (DistilBERT model)"),W$e.forEach(t),eWo=i(X),xv=n(X,"LI",{});var Q$e=s(xv);gpe=n(Q$e,"STRONG",{});var yut=s(gpe);oWo=r(yut,"electra"),yut.forEach(t),rWo=r(Q$e," \u2014 "),KV=n(Q$e,"A",{href:!0});var Lut=s(KV);tWo=r(Lut,"ElectraForQuestionAnswering"),Lut.forEach(t),aWo=r(Q$e," (ELECTRA model)"),Q$e.forEach(t),nWo=i(X),$v=n(X,"LI",{});var H$e=s($v);hpe=n(H$e,"STRONG",{});var xut=s(hpe);sWo=r(xut,"flaubert"),xut.forEach(t),lWo=r(H$e," \u2014 "),ZV=n(H$e,"A",{href:!0});var $ut=s(ZV);iWo=r($ut,"FlaubertForQuestionAnsweringSimple"),$ut.forEach(t),dWo=r(H$e," (FlauBERT model)"),H$e.forEach(t),cWo=i(X),kv=n(X,"LI",{});var U$e=s(kv);ppe=n(U$e,"STRONG",{});var kut=s(ppe);fWo=r(kut,"fnet"),kut.forEach(t),mWo=r(U$e," \u2014 "),eX=n(U$e,"A",{href:!0});var Sut=s(eX);gWo=r(Sut,"FNetForQuestionAnswering"),Sut.forEach(t),hWo=r(U$e," (FNet model)"),U$e.forEach(t),pWo=i(X),Sv=n(X,"LI",{});var J$e=s(Sv);upe=n(J$e,"STRONG",{});var Rut=s(upe);uWo=r(Rut,"funnel"),Rut.forEach(t),_Wo=r(J$e," \u2014 "),oX=n(J$e,"A",{href:!0});var Put=s(oX);bWo=r(Put,"FunnelForQuestionAnswering"),Put.forEach(t),vWo=r(J$e," (Funnel Transformer model)"),J$e.forEach(t),FWo=i(X),Rv=n(X,"LI",{});var Y$e=s(Rv);_pe=n(Y$e,"STRONG",{});var But=s(_pe);TWo=r(But,"gptj"),But.forEach(t),MWo=r(Y$e," \u2014 "),rX=n(Y$e,"A",{href:!0});var Iut=s(rX);EWo=r(Iut,"GPTJForQuestionAnswering"),Iut.forEach(t),CWo=r(Y$e," (GPT-J model)"),Y$e.forEach(t),wWo=i(X),Pv=n(X,"LI",{});var K$e=s(Pv);bpe=n(K$e,"STRONG",{});var Nut=s(bpe);AWo=r(Nut,"ibert"),Nut.forEach(t),yWo=r(K$e," \u2014 "),tX=n(K$e,"A",{href:!0});var qut=s(tX);LWo=r(qut,"IBertForQuestionAnswering"),qut.forEach(t),xWo=r(K$e," (I-BERT model)"),K$e.forEach(t),$Wo=i(X),Bv=n(X,"LI",{});var Z$e=s(Bv);vpe=n(Z$e,"STRONG",{});var jut=s(vpe);kWo=r(jut,"layoutlmv2"),jut.forEach(t),SWo=r(Z$e," \u2014 "),aX=n(Z$e,"A",{href:!0});var Dut=s(aX);RWo=r(Dut,"LayoutLMv2ForQuestionAnswering"),Dut.forEach(t),PWo=r(Z$e," (LayoutLMv2 model)"),Z$e.forEach(t),BWo=i(X),Iv=n(X,"LI",{});var eke=s(Iv);Fpe=n(eke,"STRONG",{});var Gut=s(Fpe);IWo=r(Gut,"layoutlmv3"),Gut.forEach(t),NWo=r(eke," \u2014 "),nX=n(eke,"A",{href:!0});var Out=s(nX);qWo=r(Out,"LayoutLMv3ForQuestionAnswering"),Out.forEach(t),jWo=r(eke," (LayoutLMv3 model)"),eke.forEach(t),DWo=i(X),Nv=n(X,"LI",{});var oke=s(Nv);Tpe=n(oke,"STRONG",{});var Vut=s(Tpe);GWo=r(Vut,"led"),Vut.forEach(t),OWo=r(oke," \u2014 "),sX=n(oke,"A",{href:!0});var Xut=s(sX);VWo=r(Xut,"LEDForQuestionAnswering"),Xut.forEach(t),XWo=r(oke," (LED model)"),oke.forEach(t),zWo=i(X),qv=n(X,"LI",{});var rke=s(qv);Mpe=n(rke,"STRONG",{});var zut=s(Mpe);WWo=r(zut,"longformer"),zut.forEach(t),QWo=r(rke," \u2014 "),lX=n(rke,"A",{href:!0});var Wut=s(lX);HWo=r(Wut,"LongformerForQuestionAnswering"),Wut.forEach(t),UWo=r(rke," (Longformer model)"),rke.forEach(t),JWo=i(X),jv=n(X,"LI",{});var tke=s(jv);Epe=n(tke,"STRONG",{});var Qut=s(Epe);YWo=r(Qut,"lxmert"),Qut.forEach(t),KWo=r(tke," \u2014 "),iX=n(tke,"A",{href:!0});var Hut=s(iX);ZWo=r(Hut,"LxmertForQuestionAnswering"),Hut.forEach(t),eQo=r(tke," (LXMERT model)"),tke.forEach(t),oQo=i(X),Dv=n(X,"LI",{});var ake=s(Dv);Cpe=n(ake,"STRONG",{});var Uut=s(Cpe);rQo=r(Uut,"mbart"),Uut.forEach(t),tQo=r(ake," \u2014 "),dX=n(ake,"A",{href:!0});var Jut=s(dX);aQo=r(Jut,"MBartForQuestionAnswering"),Jut.forEach(t),nQo=r(ake," (mBART model)"),ake.forEach(t),sQo=i(X),Gv=n(X,"LI",{});var nke=s(Gv);wpe=n(nke,"STRONG",{});var Yut=s(wpe);lQo=r(Yut,"megatron-bert"),Yut.forEach(t),iQo=r(nke," \u2014 "),cX=n(nke,"A",{href:!0});var Kut=s(cX);dQo=r(Kut,"MegatronBertForQuestionAnswering"),Kut.forEach(t),cQo=r(nke," (MegatronBert model)"),nke.forEach(t),fQo=i(X),Ov=n(X,"LI",{});var ske=s(Ov);Ape=n(ske,"STRONG",{});var Zut=s(Ape);mQo=r(Zut,"mobilebert"),Zut.forEach(t),gQo=r(ske," \u2014 "),fX=n(ske,"A",{href:!0});var e_t=s(fX);hQo=r(e_t,"MobileBertForQuestionAnswering"),e_t.forEach(t),pQo=r(ske," (MobileBERT model)"),ske.forEach(t),uQo=i(X),Vv=n(X,"LI",{});var lke=s(Vv);ype=n(lke,"STRONG",{});var o_t=s(ype);_Qo=r(o_t,"mpnet"),o_t.forEach(t),bQo=r(lke," \u2014 "),mX=n(lke,"A",{href:!0});var r_t=s(mX);vQo=r(r_t,"MPNetForQuestionAnswering"),r_t.forEach(t),FQo=r(lke," (MPNet model)"),lke.forEach(t),TQo=i(X),Xv=n(X,"LI",{});var ike=s(Xv);Lpe=n(ike,"STRONG",{});var t_t=s(Lpe);MQo=r(t_t,"nystromformer"),t_t.forEach(t),EQo=r(ike," \u2014 "),gX=n(ike,"A",{href:!0});var a_t=s(gX);CQo=r(a_t,"NystromformerForQuestionAnswering"),a_t.forEach(t),wQo=r(ike," (Nystromformer model)"),ike.forEach(t),AQo=i(X),zv=n(X,"LI",{});var dke=s(zv);xpe=n(dke,"STRONG",{});var n_t=s(xpe);yQo=r(n_t,"qdqbert"),n_t.forEach(t),LQo=r(dke," \u2014 "),hX=n(dke,"A",{href:!0});var s_t=s(hX);xQo=r(s_t,"QDQBertForQuestionAnswering"),s_t.forEach(t),$Qo=r(dke," (QDQBert model)"),dke.forEach(t),kQo=i(X),Wv=n(X,"LI",{});var cke=s(Wv);$pe=n(cke,"STRONG",{});var l_t=s($pe);SQo=r(l_t,"reformer"),l_t.forEach(t),RQo=r(cke," \u2014 "),pX=n(cke,"A",{href:!0});var i_t=s(pX);PQo=r(i_t,"ReformerForQuestionAnswering"),i_t.forEach(t),BQo=r(cke," (Reformer model)"),cke.forEach(t),IQo=i(X),Qv=n(X,"LI",{});var fke=s(Qv);kpe=n(fke,"STRONG",{});var d_t=s(kpe);NQo=r(d_t,"rembert"),d_t.forEach(t),qQo=r(fke," \u2014 "),uX=n(fke,"A",{href:!0});var c_t=s(uX);jQo=r(c_t,"RemBertForQuestionAnswering"),c_t.forEach(t),DQo=r(fke," (RemBERT model)"),fke.forEach(t),GQo=i(X),Hv=n(X,"LI",{});var mke=s(Hv);Spe=n(mke,"STRONG",{});var f_t=s(Spe);OQo=r(f_t,"roberta"),f_t.forEach(t),VQo=r(mke," \u2014 "),_X=n(mke,"A",{href:!0});var m_t=s(_X);XQo=r(m_t,"RobertaForQuestionAnswering"),m_t.forEach(t),zQo=r(mke," (RoBERTa model)"),mke.forEach(t),WQo=i(X),Uv=n(X,"LI",{});var gke=s(Uv);Rpe=n(gke,"STRONG",{});var g_t=s(Rpe);QQo=r(g_t,"roformer"),g_t.forEach(t),HQo=r(gke," \u2014 "),bX=n(gke,"A",{href:!0});var h_t=s(bX);UQo=r(h_t,"RoFormerForQuestionAnswering"),h_t.forEach(t),JQo=r(gke," (RoFormer model)"),gke.forEach(t),YQo=i(X),Jv=n(X,"LI",{});var hke=s(Jv);Ppe=n(hke,"STRONG",{});var p_t=s(Ppe);KQo=r(p_t,"splinter"),p_t.forEach(t),ZQo=r(hke," \u2014 "),vX=n(hke,"A",{href:!0});var u_t=s(vX);eHo=r(u_t,"SplinterForQuestionAnswering"),u_t.forEach(t),oHo=r(hke," (Splinter model)"),hke.forEach(t),rHo=i(X),Yv=n(X,"LI",{});var pke=s(Yv);Bpe=n(pke,"STRONG",{});var __t=s(Bpe);tHo=r(__t,"squeezebert"),__t.forEach(t),aHo=r(pke," \u2014 "),FX=n(pke,"A",{href:!0});var b_t=s(FX);nHo=r(b_t,"SqueezeBertForQuestionAnswering"),b_t.forEach(t),sHo=r(pke," (SqueezeBERT model)"),pke.forEach(t),lHo=i(X),Kv=n(X,"LI",{});var uke=s(Kv);Ipe=n(uke,"STRONG",{});var v_t=s(Ipe);iHo=r(v_t,"xlm"),v_t.forEach(t),dHo=r(uke," \u2014 "),TX=n(uke,"A",{href:!0});var F_t=s(TX);cHo=r(F_t,"XLMForQuestionAnsweringSimple"),F_t.forEach(t),fHo=r(uke," (XLM model)"),uke.forEach(t),mHo=i(X),Zv=n(X,"LI",{});var _ke=s(Zv);Npe=n(_ke,"STRONG",{});var T_t=s(Npe);gHo=r(T_t,"xlm-roberta"),T_t.forEach(t),hHo=r(_ke," \u2014 "),MX=n(_ke,"A",{href:!0});var M_t=s(MX);pHo=r(M_t,"XLMRobertaForQuestionAnswering"),M_t.forEach(t),uHo=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),_Ho=i(X),eF=n(X,"LI",{});var bke=s(eF);qpe=n(bke,"STRONG",{});var E_t=s(qpe);bHo=r(E_t,"xlm-roberta-xl"),E_t.forEach(t),vHo=r(bke," \u2014 "),EX=n(bke,"A",{href:!0});var C_t=s(EX);FHo=r(C_t,"XLMRobertaXLForQuestionAnswering"),C_t.forEach(t),THo=r(bke," (XLM-RoBERTa-XL model)"),bke.forEach(t),MHo=i(X),oF=n(X,"LI",{});var vke=s(oF);jpe=n(vke,"STRONG",{});var w_t=s(jpe);EHo=r(w_t,"xlnet"),w_t.forEach(t),CHo=r(vke," \u2014 "),CX=n(vke,"A",{href:!0});var A_t=s(CX);wHo=r(A_t,"XLNetForQuestionAnsweringSimple"),A_t.forEach(t),AHo=r(vke," (XLNet model)"),vke.forEach(t),yHo=i(X),rF=n(X,"LI",{});var Fke=s(rF);Dpe=n(Fke,"STRONG",{});var y_t=s(Dpe);LHo=r(y_t,"yoso"),y_t.forEach(t),xHo=r(Fke," \u2014 "),wX=n(Fke,"A",{href:!0});var L_t=s(wX);$Ho=r(L_t,"YosoForQuestionAnswering"),L_t.forEach(t),kHo=r(Fke," (YOSO model)"),Fke.forEach(t),X.forEach(t),SHo=i(ca),tF=n(ca,"P",{});var Tke=s(tF);RHo=r(Tke,"The model is set in evaluation mode by default using "),Gpe=n(Tke,"CODE",{});var x_t=s(Gpe);PHo=r(x_t,"model.eval()"),x_t.forEach(t),BHo=r(Tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(Tke,"CODE",{});var $_t=s(Ope);IHo=r($_t,"model.train()"),$_t.forEach(t),Tke.forEach(t),NHo=i(ca),T(aF.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),Kqe=i(f),rd=n(f,"H2",{class:!0});var rGe=s(rd);nF=n(rGe,"A",{id:!0,class:!0,href:!0});var k_t=s(nF);Vpe=n(k_t,"SPAN",{});var S_t=s(Vpe);T(eL.$$.fragment,S_t),S_t.forEach(t),k_t.forEach(t),qHo=i(rGe),Xpe=n(rGe,"SPAN",{});var R_t=s(Xpe);jHo=r(R_t,"AutoModelForTableQuestionAnswering"),R_t.forEach(t),rGe.forEach(t),Zqe=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(oL.$$.fragment,Zs),DHo=i(Zs),td=n(Zs,"P",{});var QZ=s(td);GHo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AX=n(QZ,"A",{href:!0});var P_t=s(AX);OHo=r(P_t,"from_pretrained()"),P_t.forEach(t),VHo=r(QZ," class method or the "),yX=n(QZ,"A",{href:!0});var B_t=s(yX);XHo=r(B_t,"from_config()"),B_t.forEach(t),zHo=r(QZ,` class
method.`),QZ.forEach(t),WHo=i(Zs),rL=n(Zs,"P",{});var tGe=s(rL);QHo=r(tGe,"This class cannot be instantiated directly using "),zpe=n(tGe,"CODE",{});var I_t=s(zpe);HHo=r(I_t,"__init__()"),I_t.forEach(t),UHo=r(tGe," (throws an error)."),tGe.forEach(t),JHo=i(Zs),gt=n(Zs,"DIV",{class:!0});var r6=s(gt);T(tL.$$.fragment,r6),YHo=i(r6),Wpe=n(r6,"P",{});var N_t=s(Wpe);KHo=r(N_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N_t.forEach(t),ZHo=i(r6),ad=n(r6,"P",{});var HZ=s(ad);eUo=r(HZ,`Note:
Loading a model from its configuration file does `),Qpe=n(HZ,"STRONG",{});var q_t=s(Qpe);oUo=r(q_t,"not"),q_t.forEach(t),rUo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(HZ,"A",{href:!0});var j_t=s(LX);tUo=r(j_t,"from_pretrained()"),j_t.forEach(t),aUo=r(HZ," to load the model weights."),HZ.forEach(t),nUo=i(r6),T(sF.$$.fragment,r6),r6.forEach(t),sUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(aL.$$.fragment,fa),lUo=i(fa),Hpe=n(fa,"P",{});var D_t=s(Hpe);iUo=r(D_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),D_t.forEach(t),dUo=i(fa),qa=n(fa,"P",{});var t6=s(qa);cUo=r(t6,"The model class to instantiate is selected based on the "),Upe=n(t6,"CODE",{});var G_t=s(Upe);fUo=r(G_t,"model_type"),G_t.forEach(t),mUo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(t6,"CODE",{});var O_t=s(Jpe);gUo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),hUo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(t6,"CODE",{});var V_t=s(Ype);pUo=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),uUo=r(t6,":"),t6.forEach(t),_Uo=i(fa),Kpe=n(fa,"UL",{});var X_t=s(Kpe);lF=n(X_t,"LI",{});var Mke=s(lF);Zpe=n(Mke,"STRONG",{});var z_t=s(Zpe);bUo=r(z_t,"tapas"),z_t.forEach(t),vUo=r(Mke," \u2014 "),xX=n(Mke,"A",{href:!0});var W_t=s(xX);FUo=r(W_t,"TapasForQuestionAnswering"),W_t.forEach(t),TUo=r(Mke," (TAPAS model)"),Mke.forEach(t),X_t.forEach(t),MUo=i(fa),iF=n(fa,"P",{});var Eke=s(iF);EUo=r(Eke,"The model is set in evaluation mode by default using "),eue=n(Eke,"CODE",{});var Q_t=s(eue);CUo=r(Q_t,"model.eval()"),Q_t.forEach(t),wUo=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(Eke,"CODE",{});var H_t=s(oue);AUo=r(H_t,"model.train()"),H_t.forEach(t),Eke.forEach(t),yUo=i(fa),T(dF.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),eje=i(f),nd=n(f,"H2",{class:!0});var aGe=s(nd);cF=n(aGe,"A",{id:!0,class:!0,href:!0});var U_t=s(cF);rue=n(U_t,"SPAN",{});var J_t=s(rue);T(nL.$$.fragment,J_t),J_t.forEach(t),U_t.forEach(t),LUo=i(aGe),tue=n(aGe,"SPAN",{});var Y_t=s(tue);xUo=r(Y_t,"AutoModelForImageClassification"),Y_t.forEach(t),aGe.forEach(t),oje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(sL.$$.fragment,el),$Uo=i(el),sd=n(el,"P",{});var UZ=s(sd);kUo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$X=n(UZ,"A",{href:!0});var K_t=s($X);SUo=r(K_t,"from_pretrained()"),K_t.forEach(t),RUo=r(UZ," class method or the "),kX=n(UZ,"A",{href:!0});var Z_t=s(kX);PUo=r(Z_t,"from_config()"),Z_t.forEach(t),BUo=r(UZ,` class
method.`),UZ.forEach(t),IUo=i(el),lL=n(el,"P",{});var nGe=s(lL);NUo=r(nGe,"This class cannot be instantiated directly using "),aue=n(nGe,"CODE",{});var e1t=s(aue);qUo=r(e1t,"__init__()"),e1t.forEach(t),jUo=r(nGe," (throws an error)."),nGe.forEach(t),DUo=i(el),ht=n(el,"DIV",{class:!0});var a6=s(ht);T(iL.$$.fragment,a6),GUo=i(a6),nue=n(a6,"P",{});var o1t=s(nue);OUo=r(o1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o1t.forEach(t),VUo=i(a6),ld=n(a6,"P",{});var JZ=s(ld);XUo=r(JZ,`Note:
Loading a model from its configuration file does `),sue=n(JZ,"STRONG",{});var r1t=s(sue);zUo=r(r1t,"not"),r1t.forEach(t),WUo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(JZ,"A",{href:!0});var t1t=s(SX);QUo=r(t1t,"from_pretrained()"),t1t.forEach(t),HUo=r(JZ," to load the model weights."),JZ.forEach(t),UUo=i(a6),T(fF.$$.fragment,a6),a6.forEach(t),JUo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(dL.$$.fragment,ma),YUo=i(ma),lue=n(ma,"P",{});var a1t=s(lue);KUo=r(a1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a1t.forEach(t),ZUo=i(ma),ja=n(ma,"P",{});var n6=s(ja);eJo=r(n6,"The model class to instantiate is selected based on the "),iue=n(n6,"CODE",{});var n1t=s(iue);oJo=r(n1t,"model_type"),n1t.forEach(t),rJo=r(n6,` property of the config object (either
passed as an argument or loaded from `),due=n(n6,"CODE",{});var s1t=s(due);tJo=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),aJo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(n6,"CODE",{});var l1t=s(cue);nJo=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),sJo=r(n6,":"),n6.forEach(t),lJo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);mF=n(Te,"LI",{});var Cke=s(mF);fue=n(Cke,"STRONG",{});var i1t=s(fue);iJo=r(i1t,"beit"),i1t.forEach(t),dJo=r(Cke," \u2014 "),RX=n(Cke,"A",{href:!0});var d1t=s(RX);cJo=r(d1t,"BeitForImageClassification"),d1t.forEach(t),fJo=r(Cke," (BEiT model)"),Cke.forEach(t),mJo=i(Te),gF=n(Te,"LI",{});var wke=s(gF);mue=n(wke,"STRONG",{});var c1t=s(mue);gJo=r(c1t,"convnext"),c1t.forEach(t),hJo=r(wke," \u2014 "),PX=n(wke,"A",{href:!0});var f1t=s(PX);pJo=r(f1t,"ConvNextForImageClassification"),f1t.forEach(t),uJo=r(wke," (ConvNext model)"),wke.forEach(t),_Jo=i(Te),hF=n(Te,"LI",{});var Ake=s(hF);gue=n(Ake,"STRONG",{});var m1t=s(gue);bJo=r(m1t,"cvt"),m1t.forEach(t),vJo=r(Ake," \u2014 "),BX=n(Ake,"A",{href:!0});var g1t=s(BX);FJo=r(g1t,"CvtForImageClassification"),g1t.forEach(t),TJo=r(Ake," (CvT model)"),Ake.forEach(t),MJo=i(Te),pF=n(Te,"LI",{});var yke=s(pF);hue=n(yke,"STRONG",{});var h1t=s(hue);EJo=r(h1t,"data2vec-vision"),h1t.forEach(t),CJo=r(yke," \u2014 "),IX=n(yke,"A",{href:!0});var p1t=s(IX);wJo=r(p1t,"Data2VecVisionForImageClassification"),p1t.forEach(t),AJo=r(yke," (Data2VecVision model)"),yke.forEach(t),yJo=i(Te),Is=n(Te,"LI",{});var U$=s(Is);pue=n(U$,"STRONG",{});var u1t=s(pue);LJo=r(u1t,"deit"),u1t.forEach(t),xJo=r(U$," \u2014 "),NX=n(U$,"A",{href:!0});var _1t=s(NX);$Jo=r(_1t,"DeiTForImageClassification"),_1t.forEach(t),kJo=r(U$," or "),qX=n(U$,"A",{href:!0});var b1t=s(qX);SJo=r(b1t,"DeiTForImageClassificationWithTeacher"),b1t.forEach(t),RJo=r(U$," (DeiT model)"),U$.forEach(t),PJo=i(Te),uF=n(Te,"LI",{});var Lke=s(uF);uue=n(Lke,"STRONG",{});var v1t=s(uue);BJo=r(v1t,"imagegpt"),v1t.forEach(t),IJo=r(Lke," \u2014 "),jX=n(Lke,"A",{href:!0});var F1t=s(jX);NJo=r(F1t,"ImageGPTForImageClassification"),F1t.forEach(t),qJo=r(Lke," (ImageGPT model)"),Lke.forEach(t),jJo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);_ue=n(pf,"STRONG",{});var T1t=s(_ue);DJo=r(T1t,"perceiver"),T1t.forEach(t),GJo=r(pf," \u2014 "),DX=n(pf,"A",{href:!0});var M1t=s(DX);OJo=r(M1t,"PerceiverForImageClassificationLearned"),M1t.forEach(t),VJo=r(pf," or "),GX=n(pf,"A",{href:!0});var E1t=s(GX);XJo=r(E1t,"PerceiverForImageClassificationFourier"),E1t.forEach(t),zJo=r(pf," or "),OX=n(pf,"A",{href:!0});var C1t=s(OX);WJo=r(C1t,"PerceiverForImageClassificationConvProcessing"),C1t.forEach(t),QJo=r(pf," (Perceiver model)"),pf.forEach(t),HJo=i(Te),_F=n(Te,"LI",{});var xke=s(_F);bue=n(xke,"STRONG",{});var w1t=s(bue);UJo=r(w1t,"poolformer"),w1t.forEach(t),JJo=r(xke," \u2014 "),VX=n(xke,"A",{href:!0});var A1t=s(VX);YJo=r(A1t,"PoolFormerForImageClassification"),A1t.forEach(t),KJo=r(xke," (PoolFormer model)"),xke.forEach(t),ZJo=i(Te),bF=n(Te,"LI",{});var $ke=s(bF);vue=n($ke,"STRONG",{});var y1t=s(vue);eYo=r(y1t,"regnet"),y1t.forEach(t),oYo=r($ke," \u2014 "),XX=n($ke,"A",{href:!0});var L1t=s(XX);rYo=r(L1t,"RegNetForImageClassification"),L1t.forEach(t),tYo=r($ke," (RegNet model)"),$ke.forEach(t),aYo=i(Te),vF=n(Te,"LI",{});var kke=s(vF);Fue=n(kke,"STRONG",{});var x1t=s(Fue);nYo=r(x1t,"resnet"),x1t.forEach(t),sYo=r(kke," \u2014 "),zX=n(kke,"A",{href:!0});var $1t=s(zX);lYo=r($1t,"ResNetForImageClassification"),$1t.forEach(t),iYo=r(kke," (ResNet model)"),kke.forEach(t),dYo=i(Te),FF=n(Te,"LI",{});var Ske=s(FF);Tue=n(Ske,"STRONG",{});var k1t=s(Tue);cYo=r(k1t,"segformer"),k1t.forEach(t),fYo=r(Ske," \u2014 "),WX=n(Ske,"A",{href:!0});var S1t=s(WX);mYo=r(S1t,"SegformerForImageClassification"),S1t.forEach(t),gYo=r(Ske," (SegFormer model)"),Ske.forEach(t),hYo=i(Te),TF=n(Te,"LI",{});var Rke=s(TF);Mue=n(Rke,"STRONG",{});var R1t=s(Mue);pYo=r(R1t,"swin"),R1t.forEach(t),uYo=r(Rke," \u2014 "),QX=n(Rke,"A",{href:!0});var P1t=s(QX);_Yo=r(P1t,"SwinForImageClassification"),P1t.forEach(t),bYo=r(Rke," (Swin model)"),Rke.forEach(t),vYo=i(Te),MF=n(Te,"LI",{});var Pke=s(MF);Eue=n(Pke,"STRONG",{});var B1t=s(Eue);FYo=r(B1t,"van"),B1t.forEach(t),TYo=r(Pke," \u2014 "),HX=n(Pke,"A",{href:!0});var I1t=s(HX);MYo=r(I1t,"VanForImageClassification"),I1t.forEach(t),EYo=r(Pke," (VAN model)"),Pke.forEach(t),CYo=i(Te),EF=n(Te,"LI",{});var Bke=s(EF);Cue=n(Bke,"STRONG",{});var N1t=s(Cue);wYo=r(N1t,"vit"),N1t.forEach(t),AYo=r(Bke," \u2014 "),UX=n(Bke,"A",{href:!0});var q1t=s(UX);yYo=r(q1t,"ViTForImageClassification"),q1t.forEach(t),LYo=r(Bke," (ViT model)"),Bke.forEach(t),Te.forEach(t),xYo=i(ma),CF=n(ma,"P",{});var Ike=s(CF);$Yo=r(Ike,"The model is set in evaluation mode by default using "),wue=n(Ike,"CODE",{});var j1t=s(wue);kYo=r(j1t,"model.eval()"),j1t.forEach(t),SYo=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(Ike,"CODE",{});var D1t=s(Aue);RYo=r(D1t,"model.train()"),D1t.forEach(t),Ike.forEach(t),PYo=i(ma),T(wF.$$.fragment,ma),ma.forEach(t),el.forEach(t),rje=i(f),id=n(f,"H2",{class:!0});var sGe=s(id);AF=n(sGe,"A",{id:!0,class:!0,href:!0});var G1t=s(AF);yue=n(G1t,"SPAN",{});var O1t=s(yue);T(cL.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),BYo=i(sGe),Lue=n(sGe,"SPAN",{});var V1t=s(Lue);IYo=r(V1t,"AutoModelForVision2Seq"),V1t.forEach(t),sGe.forEach(t),tje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(fL.$$.fragment,ol),NYo=i(ol),dd=n(ol,"P",{});var YZ=s(dd);qYo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JX=n(YZ,"A",{href:!0});var X1t=s(JX);jYo=r(X1t,"from_pretrained()"),X1t.forEach(t),DYo=r(YZ," class method or the "),YX=n(YZ,"A",{href:!0});var z1t=s(YX);GYo=r(z1t,"from_config()"),z1t.forEach(t),OYo=r(YZ,` class
method.`),YZ.forEach(t),VYo=i(ol),mL=n(ol,"P",{});var lGe=s(mL);XYo=r(lGe,"This class cannot be instantiated directly using "),xue=n(lGe,"CODE",{});var W1t=s(xue);zYo=r(W1t,"__init__()"),W1t.forEach(t),WYo=r(lGe," (throws an error)."),lGe.forEach(t),QYo=i(ol),ut=n(ol,"DIV",{class:!0});var s6=s(ut);T(gL.$$.fragment,s6),HYo=i(s6),$ue=n(s6,"P",{});var Q1t=s($ue);UYo=r(Q1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q1t.forEach(t),JYo=i(s6),cd=n(s6,"P",{});var KZ=s(cd);YYo=r(KZ,`Note:
Loading a model from its configuration file does `),kue=n(KZ,"STRONG",{});var H1t=s(kue);KYo=r(H1t,"not"),H1t.forEach(t),ZYo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(KZ,"A",{href:!0});var U1t=s(KX);eKo=r(U1t,"from_pretrained()"),U1t.forEach(t),oKo=r(KZ," to load the model weights."),KZ.forEach(t),rKo=i(s6),T(yF.$$.fragment,s6),s6.forEach(t),tKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(hL.$$.fragment,ga),aKo=i(ga),Sue=n(ga,"P",{});var J1t=s(Sue);nKo=r(J1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J1t.forEach(t),sKo=i(ga),Da=n(ga,"P",{});var l6=s(Da);lKo=r(l6,"The model class to instantiate is selected based on the "),Rue=n(l6,"CODE",{});var Y1t=s(Rue);iKo=r(Y1t,"model_type"),Y1t.forEach(t),dKo=r(l6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(l6,"CODE",{});var K1t=s(Pue);cKo=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),fKo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(l6,"CODE",{});var Z1t=s(Bue);mKo=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),gKo=r(l6,":"),l6.forEach(t),hKo=i(ga),Iue=n(ga,"UL",{});var e3t=s(Iue);LF=n(e3t,"LI",{});var Nke=s(LF);Nue=n(Nke,"STRONG",{});var o3t=s(Nue);pKo=r(o3t,"vision-encoder-decoder"),o3t.forEach(t),uKo=r(Nke," \u2014 "),ZX=n(Nke,"A",{href:!0});var r3t=s(ZX);_Ko=r(r3t,"VisionEncoderDecoderModel"),r3t.forEach(t),bKo=r(Nke," (Vision Encoder decoder model)"),Nke.forEach(t),e3t.forEach(t),vKo=i(ga),xF=n(ga,"P",{});var qke=s(xF);FKo=r(qke,"The model is set in evaluation mode by default using "),que=n(qke,"CODE",{});var t3t=s(que);TKo=r(t3t,"model.eval()"),t3t.forEach(t),MKo=r(qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(qke,"CODE",{});var a3t=s(jue);EKo=r(a3t,"model.train()"),a3t.forEach(t),qke.forEach(t),CKo=i(ga),T($F.$$.fragment,ga),ga.forEach(t),ol.forEach(t),aje=i(f),fd=n(f,"H2",{class:!0});var iGe=s(fd);kF=n(iGe,"A",{id:!0,class:!0,href:!0});var n3t=s(kF);Due=n(n3t,"SPAN",{});var s3t=s(Due);T(pL.$$.fragment,s3t),s3t.forEach(t),n3t.forEach(t),wKo=i(iGe),Gue=n(iGe,"SPAN",{});var l3t=s(Gue);AKo=r(l3t,"AutoModelForAudioClassification"),l3t.forEach(t),iGe.forEach(t),nje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(uL.$$.fragment,rl),yKo=i(rl),md=n(rl,"P",{});var ZZ=s(md);LKo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ez=n(ZZ,"A",{href:!0});var i3t=s(ez);xKo=r(i3t,"from_pretrained()"),i3t.forEach(t),$Ko=r(ZZ," class method or the "),oz=n(ZZ,"A",{href:!0});var d3t=s(oz);kKo=r(d3t,"from_config()"),d3t.forEach(t),SKo=r(ZZ,` class
method.`),ZZ.forEach(t),RKo=i(rl),_L=n(rl,"P",{});var dGe=s(_L);PKo=r(dGe,"This class cannot be instantiated directly using "),Oue=n(dGe,"CODE",{});var c3t=s(Oue);BKo=r(c3t,"__init__()"),c3t.forEach(t),IKo=r(dGe," (throws an error)."),dGe.forEach(t),NKo=i(rl),_t=n(rl,"DIV",{class:!0});var i6=s(_t);T(bL.$$.fragment,i6),qKo=i(i6),Vue=n(i6,"P",{});var f3t=s(Vue);jKo=r(f3t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),f3t.forEach(t),DKo=i(i6),gd=n(i6,"P",{});var eee=s(gd);GKo=r(eee,`Note:
Loading a model from its configuration file does `),Xue=n(eee,"STRONG",{});var m3t=s(Xue);OKo=r(m3t,"not"),m3t.forEach(t),VKo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(eee,"A",{href:!0});var g3t=s(rz);XKo=r(g3t,"from_pretrained()"),g3t.forEach(t),zKo=r(eee," to load the model weights."),eee.forEach(t),WKo=i(i6),T(SF.$$.fragment,i6),i6.forEach(t),QKo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(vL.$$.fragment,ha),HKo=i(ha),zue=n(ha,"P",{});var h3t=s(zue);UKo=r(h3t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),h3t.forEach(t),JKo=i(ha),Ga=n(ha,"P",{});var d6=s(Ga);YKo=r(d6,"The model class to instantiate is selected based on the "),Wue=n(d6,"CODE",{});var p3t=s(Wue);KKo=r(p3t,"model_type"),p3t.forEach(t),ZKo=r(d6,` property of the config object (either
passed as an argument or loaded from `),Que=n(d6,"CODE",{});var u3t=s(Que);eZo=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),oZo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(d6,"CODE",{});var _3t=s(Hue);rZo=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),tZo=r(d6,":"),d6.forEach(t),aZo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);RF=n(Oe,"LI",{});var jke=s(RF);Uue=n(jke,"STRONG",{});var b3t=s(Uue);nZo=r(b3t,"data2vec-audio"),b3t.forEach(t),sZo=r(jke," \u2014 "),tz=n(jke,"A",{href:!0});var v3t=s(tz);lZo=r(v3t,"Data2VecAudioForSequenceClassification"),v3t.forEach(t),iZo=r(jke," (Data2VecAudio model)"),jke.forEach(t),dZo=i(Oe),PF=n(Oe,"LI",{});var Dke=s(PF);Jue=n(Dke,"STRONG",{});var F3t=s(Jue);cZo=r(F3t,"hubert"),F3t.forEach(t),fZo=r(Dke," \u2014 "),az=n(Dke,"A",{href:!0});var T3t=s(az);mZo=r(T3t,"HubertForSequenceClassification"),T3t.forEach(t),gZo=r(Dke," (Hubert model)"),Dke.forEach(t),hZo=i(Oe),BF=n(Oe,"LI",{});var Gke=s(BF);Yue=n(Gke,"STRONG",{});var M3t=s(Yue);pZo=r(M3t,"sew"),M3t.forEach(t),uZo=r(Gke," \u2014 "),nz=n(Gke,"A",{href:!0});var E3t=s(nz);_Zo=r(E3t,"SEWForSequenceClassification"),E3t.forEach(t),bZo=r(Gke," (SEW model)"),Gke.forEach(t),vZo=i(Oe),IF=n(Oe,"LI",{});var Oke=s(IF);Kue=n(Oke,"STRONG",{});var C3t=s(Kue);FZo=r(C3t,"sew-d"),C3t.forEach(t),TZo=r(Oke," \u2014 "),sz=n(Oke,"A",{href:!0});var w3t=s(sz);MZo=r(w3t,"SEWDForSequenceClassification"),w3t.forEach(t),EZo=r(Oke," (SEW-D model)"),Oke.forEach(t),CZo=i(Oe),NF=n(Oe,"LI",{});var Vke=s(NF);Zue=n(Vke,"STRONG",{});var A3t=s(Zue);wZo=r(A3t,"unispeech"),A3t.forEach(t),AZo=r(Vke," \u2014 "),lz=n(Vke,"A",{href:!0});var y3t=s(lz);yZo=r(y3t,"UniSpeechForSequenceClassification"),y3t.forEach(t),LZo=r(Vke," (UniSpeech model)"),Vke.forEach(t),xZo=i(Oe),qF=n(Oe,"LI",{});var Xke=s(qF);e_e=n(Xke,"STRONG",{});var L3t=s(e_e);$Zo=r(L3t,"unispeech-sat"),L3t.forEach(t),kZo=r(Xke," \u2014 "),iz=n(Xke,"A",{href:!0});var x3t=s(iz);SZo=r(x3t,"UniSpeechSatForSequenceClassification"),x3t.forEach(t),RZo=r(Xke," (UniSpeechSat model)"),Xke.forEach(t),PZo=i(Oe),jF=n(Oe,"LI",{});var zke=s(jF);o_e=n(zke,"STRONG",{});var $3t=s(o_e);BZo=r($3t,"wav2vec2"),$3t.forEach(t),IZo=r(zke," \u2014 "),dz=n(zke,"A",{href:!0});var k3t=s(dz);NZo=r(k3t,"Wav2Vec2ForSequenceClassification"),k3t.forEach(t),qZo=r(zke," (Wav2Vec2 model)"),zke.forEach(t),jZo=i(Oe),DF=n(Oe,"LI",{});var Wke=s(DF);r_e=n(Wke,"STRONG",{});var S3t=s(r_e);DZo=r(S3t,"wav2vec2-conformer"),S3t.forEach(t),GZo=r(Wke," \u2014 "),cz=n(Wke,"A",{href:!0});var R3t=s(cz);OZo=r(R3t,"Wav2Vec2ConformerForSequenceClassification"),R3t.forEach(t),VZo=r(Wke," (Wav2Vec2-Conformer model)"),Wke.forEach(t),XZo=i(Oe),GF=n(Oe,"LI",{});var Qke=s(GF);t_e=n(Qke,"STRONG",{});var P3t=s(t_e);zZo=r(P3t,"wavlm"),P3t.forEach(t),WZo=r(Qke," \u2014 "),fz=n(Qke,"A",{href:!0});var B3t=s(fz);QZo=r(B3t,"WavLMForSequenceClassification"),B3t.forEach(t),HZo=r(Qke," (WavLM model)"),Qke.forEach(t),Oe.forEach(t),UZo=i(ha),OF=n(ha,"P",{});var Hke=s(OF);JZo=r(Hke,"The model is set in evaluation mode by default using "),a_e=n(Hke,"CODE",{});var I3t=s(a_e);YZo=r(I3t,"model.eval()"),I3t.forEach(t),KZo=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(Hke,"CODE",{});var N3t=s(n_e);ZZo=r(N3t,"model.train()"),N3t.forEach(t),Hke.forEach(t),eer=i(ha),T(VF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),sje=i(f),hd=n(f,"H2",{class:!0});var cGe=s(hd);XF=n(cGe,"A",{id:!0,class:!0,href:!0});var q3t=s(XF);s_e=n(q3t,"SPAN",{});var j3t=s(s_e);T(FL.$$.fragment,j3t),j3t.forEach(t),q3t.forEach(t),oer=i(cGe),l_e=n(cGe,"SPAN",{});var D3t=s(l_e);rer=r(D3t,"AutoModelForAudioFrameClassification"),D3t.forEach(t),cGe.forEach(t),lje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(TL.$$.fragment,tl),ter=i(tl),pd=n(tl,"P",{});var oee=s(pd);aer=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mz=n(oee,"A",{href:!0});var G3t=s(mz);ner=r(G3t,"from_pretrained()"),G3t.forEach(t),ser=r(oee," class method or the "),gz=n(oee,"A",{href:!0});var O3t=s(gz);ler=r(O3t,"from_config()"),O3t.forEach(t),ier=r(oee,` class
method.`),oee.forEach(t),der=i(tl),ML=n(tl,"P",{});var fGe=s(ML);cer=r(fGe,"This class cannot be instantiated directly using "),i_e=n(fGe,"CODE",{});var V3t=s(i_e);fer=r(V3t,"__init__()"),V3t.forEach(t),mer=r(fGe," (throws an error)."),fGe.forEach(t),ger=i(tl),bt=n(tl,"DIV",{class:!0});var c6=s(bt);T(EL.$$.fragment,c6),her=i(c6),d_e=n(c6,"P",{});var X3t=s(d_e);per=r(X3t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),X3t.forEach(t),uer=i(c6),ud=n(c6,"P",{});var ree=s(ud);_er=r(ree,`Note:
Loading a model from its configuration file does `),c_e=n(ree,"STRONG",{});var z3t=s(c_e);ber=r(z3t,"not"),z3t.forEach(t),ver=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(ree,"A",{href:!0});var W3t=s(hz);Fer=r(W3t,"from_pretrained()"),W3t.forEach(t),Ter=r(ree," to load the model weights."),ree.forEach(t),Mer=i(c6),T(zF.$$.fragment,c6),c6.forEach(t),Eer=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(CL.$$.fragment,pa),Cer=i(pa),f_e=n(pa,"P",{});var Q3t=s(f_e);wer=r(Q3t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Q3t.forEach(t),Aer=i(pa),Oa=n(pa,"P",{});var f6=s(Oa);yer=r(f6,"The model class to instantiate is selected based on the "),m_e=n(f6,"CODE",{});var H3t=s(m_e);Ler=r(H3t,"model_type"),H3t.forEach(t),xer=r(f6,` property of the config object (either
passed as an argument or loaded from `),g_e=n(f6,"CODE",{});var U3t=s(g_e);$er=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),ker=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(f6,"CODE",{});var J3t=s(h_e);Ser=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),Rer=r(f6,":"),f6.forEach(t),Per=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);WF=n(al,"LI",{});var Uke=s(WF);p_e=n(Uke,"STRONG",{});var Y3t=s(p_e);Ber=r(Y3t,"data2vec-audio"),Y3t.forEach(t),Ier=r(Uke," \u2014 "),pz=n(Uke,"A",{href:!0});var K3t=s(pz);Ner=r(K3t,"Data2VecAudioForAudioFrameClassification"),K3t.forEach(t),qer=r(Uke," (Data2VecAudio model)"),Uke.forEach(t),jer=i(al),QF=n(al,"LI",{});var Jke=s(QF);u_e=n(Jke,"STRONG",{});var Z3t=s(u_e);Der=r(Z3t,"unispeech-sat"),Z3t.forEach(t),Ger=r(Jke," \u2014 "),uz=n(Jke,"A",{href:!0});var ebt=s(uz);Oer=r(ebt,"UniSpeechSatForAudioFrameClassification"),ebt.forEach(t),Ver=r(Jke," (UniSpeechSat model)"),Jke.forEach(t),Xer=i(al),HF=n(al,"LI",{});var Yke=s(HF);__e=n(Yke,"STRONG",{});var obt=s(__e);zer=r(obt,"wav2vec2"),obt.forEach(t),Wer=r(Yke," \u2014 "),_z=n(Yke,"A",{href:!0});var rbt=s(_z);Qer=r(rbt,"Wav2Vec2ForAudioFrameClassification"),rbt.forEach(t),Her=r(Yke," (Wav2Vec2 model)"),Yke.forEach(t),Uer=i(al),UF=n(al,"LI",{});var Kke=s(UF);b_e=n(Kke,"STRONG",{});var tbt=s(b_e);Jer=r(tbt,"wav2vec2-conformer"),tbt.forEach(t),Yer=r(Kke," \u2014 "),bz=n(Kke,"A",{href:!0});var abt=s(bz);Ker=r(abt,"Wav2Vec2ConformerForAudioFrameClassification"),abt.forEach(t),Zer=r(Kke," (Wav2Vec2-Conformer model)"),Kke.forEach(t),eor=i(al),JF=n(al,"LI",{});var Zke=s(JF);v_e=n(Zke,"STRONG",{});var nbt=s(v_e);oor=r(nbt,"wavlm"),nbt.forEach(t),ror=r(Zke," \u2014 "),vz=n(Zke,"A",{href:!0});var sbt=s(vz);tor=r(sbt,"WavLMForAudioFrameClassification"),sbt.forEach(t),aor=r(Zke," (WavLM model)"),Zke.forEach(t),al.forEach(t),nor=i(pa),YF=n(pa,"P",{});var eSe=s(YF);sor=r(eSe,"The model is set in evaluation mode by default using "),F_e=n(eSe,"CODE",{});var lbt=s(F_e);lor=r(lbt,"model.eval()"),lbt.forEach(t),ior=r(eSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(eSe,"CODE",{});var ibt=s(T_e);dor=r(ibt,"model.train()"),ibt.forEach(t),eSe.forEach(t),cor=i(pa),T(KF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),ije=i(f),_d=n(f,"H2",{class:!0});var mGe=s(_d);ZF=n(mGe,"A",{id:!0,class:!0,href:!0});var dbt=s(ZF);M_e=n(dbt,"SPAN",{});var cbt=s(M_e);T(wL.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),mor=i(mGe),E_e=n(mGe,"SPAN",{});var fbt=s(E_e);gor=r(fbt,"AutoModelForCTC"),fbt.forEach(t),mGe.forEach(t),dje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(AL.$$.fragment,nl),hor=i(nl),bd=n(nl,"P",{});var tee=s(bd);por=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Fz=n(tee,"A",{href:!0});var mbt=s(Fz);uor=r(mbt,"from_pretrained()"),mbt.forEach(t),_or=r(tee," class method or the "),Tz=n(tee,"A",{href:!0});var gbt=s(Tz);bor=r(gbt,"from_config()"),gbt.forEach(t),vor=r(tee,` class
method.`),tee.forEach(t),For=i(nl),yL=n(nl,"P",{});var gGe=s(yL);Tor=r(gGe,"This class cannot be instantiated directly using "),C_e=n(gGe,"CODE",{});var hbt=s(C_e);Mor=r(hbt,"__init__()"),hbt.forEach(t),Eor=r(gGe," (throws an error)."),gGe.forEach(t),Cor=i(nl),vt=n(nl,"DIV",{class:!0});var m6=s(vt);T(LL.$$.fragment,m6),wor=i(m6),w_e=n(m6,"P",{});var pbt=s(w_e);Aor=r(pbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pbt.forEach(t),yor=i(m6),vd=n(m6,"P",{});var aee=s(vd);Lor=r(aee,`Note:
Loading a model from its configuration file does `),A_e=n(aee,"STRONG",{});var ubt=s(A_e);xor=r(ubt,"not"),ubt.forEach(t),$or=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(aee,"A",{href:!0});var _bt=s(Mz);kor=r(_bt,"from_pretrained()"),_bt.forEach(t),Sor=r(aee," to load the model weights."),aee.forEach(t),Ror=i(m6),T(eT.$$.fragment,m6),m6.forEach(t),Por=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(xL.$$.fragment,ua),Bor=i(ua),y_e=n(ua,"P",{});var bbt=s(y_e);Ior=r(bbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),bbt.forEach(t),Nor=i(ua),Va=n(ua,"P",{});var g6=s(Va);qor=r(g6,"The model class to instantiate is selected based on the "),L_e=n(g6,"CODE",{});var vbt=s(L_e);jor=r(vbt,"model_type"),vbt.forEach(t),Dor=r(g6,` property of the config object (either
passed as an argument or loaded from `),x_e=n(g6,"CODE",{});var Fbt=s(x_e);Gor=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),Oor=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(g6,"CODE",{});var Tbt=s($_e);Vor=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),Xor=r(g6,":"),g6.forEach(t),zor=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);oT=n(Ve,"LI",{});var oSe=s(oT);k_e=n(oSe,"STRONG",{});var Mbt=s(k_e);Wor=r(Mbt,"data2vec-audio"),Mbt.forEach(t),Qor=r(oSe," \u2014 "),Ez=n(oSe,"A",{href:!0});var Ebt=s(Ez);Hor=r(Ebt,"Data2VecAudioForCTC"),Ebt.forEach(t),Uor=r(oSe," (Data2VecAudio model)"),oSe.forEach(t),Jor=i(Ve),rT=n(Ve,"LI",{});var rSe=s(rT);S_e=n(rSe,"STRONG",{});var Cbt=s(S_e);Yor=r(Cbt,"hubert"),Cbt.forEach(t),Kor=r(rSe," \u2014 "),Cz=n(rSe,"A",{href:!0});var wbt=s(Cz);Zor=r(wbt,"HubertForCTC"),wbt.forEach(t),err=r(rSe," (Hubert model)"),rSe.forEach(t),orr=i(Ve),tT=n(Ve,"LI",{});var tSe=s(tT);R_e=n(tSe,"STRONG",{});var Abt=s(R_e);rrr=r(Abt,"sew"),Abt.forEach(t),trr=r(tSe," \u2014 "),wz=n(tSe,"A",{href:!0});var ybt=s(wz);arr=r(ybt,"SEWForCTC"),ybt.forEach(t),nrr=r(tSe," (SEW model)"),tSe.forEach(t),srr=i(Ve),aT=n(Ve,"LI",{});var aSe=s(aT);P_e=n(aSe,"STRONG",{});var Lbt=s(P_e);lrr=r(Lbt,"sew-d"),Lbt.forEach(t),irr=r(aSe," \u2014 "),Az=n(aSe,"A",{href:!0});var xbt=s(Az);drr=r(xbt,"SEWDForCTC"),xbt.forEach(t),crr=r(aSe," (SEW-D model)"),aSe.forEach(t),frr=i(Ve),nT=n(Ve,"LI",{});var nSe=s(nT);B_e=n(nSe,"STRONG",{});var $bt=s(B_e);mrr=r($bt,"unispeech"),$bt.forEach(t),grr=r(nSe," \u2014 "),yz=n(nSe,"A",{href:!0});var kbt=s(yz);hrr=r(kbt,"UniSpeechForCTC"),kbt.forEach(t),prr=r(nSe," (UniSpeech model)"),nSe.forEach(t),urr=i(Ve),sT=n(Ve,"LI",{});var sSe=s(sT);I_e=n(sSe,"STRONG",{});var Sbt=s(I_e);_rr=r(Sbt,"unispeech-sat"),Sbt.forEach(t),brr=r(sSe," \u2014 "),Lz=n(sSe,"A",{href:!0});var Rbt=s(Lz);vrr=r(Rbt,"UniSpeechSatForCTC"),Rbt.forEach(t),Frr=r(sSe," (UniSpeechSat model)"),sSe.forEach(t),Trr=i(Ve),lT=n(Ve,"LI",{});var lSe=s(lT);N_e=n(lSe,"STRONG",{});var Pbt=s(N_e);Mrr=r(Pbt,"wav2vec2"),Pbt.forEach(t),Err=r(lSe," \u2014 "),xz=n(lSe,"A",{href:!0});var Bbt=s(xz);Crr=r(Bbt,"Wav2Vec2ForCTC"),Bbt.forEach(t),wrr=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),Arr=i(Ve),iT=n(Ve,"LI",{});var iSe=s(iT);q_e=n(iSe,"STRONG",{});var Ibt=s(q_e);yrr=r(Ibt,"wav2vec2-conformer"),Ibt.forEach(t),Lrr=r(iSe," \u2014 "),$z=n(iSe,"A",{href:!0});var Nbt=s($z);xrr=r(Nbt,"Wav2Vec2ConformerForCTC"),Nbt.forEach(t),$rr=r(iSe," (Wav2Vec2-Conformer model)"),iSe.forEach(t),krr=i(Ve),dT=n(Ve,"LI",{});var dSe=s(dT);j_e=n(dSe,"STRONG",{});var qbt=s(j_e);Srr=r(qbt,"wavlm"),qbt.forEach(t),Rrr=r(dSe," \u2014 "),kz=n(dSe,"A",{href:!0});var jbt=s(kz);Prr=r(jbt,"WavLMForCTC"),jbt.forEach(t),Brr=r(dSe," (WavLM model)"),dSe.forEach(t),Ve.forEach(t),Irr=i(ua),cT=n(ua,"P",{});var cSe=s(cT);Nrr=r(cSe,"The model is set in evaluation mode by default using "),D_e=n(cSe,"CODE",{});var Dbt=s(D_e);qrr=r(Dbt,"model.eval()"),Dbt.forEach(t),jrr=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(cSe,"CODE",{});var Gbt=s(G_e);Drr=r(Gbt,"model.train()"),Gbt.forEach(t),cSe.forEach(t),Grr=i(ua),T(fT.$$.fragment,ua),ua.forEach(t),nl.forEach(t),cje=i(f),Fd=n(f,"H2",{class:!0});var hGe=s(Fd);mT=n(hGe,"A",{id:!0,class:!0,href:!0});var Obt=s(mT);O_e=n(Obt,"SPAN",{});var Vbt=s(O_e);T($L.$$.fragment,Vbt),Vbt.forEach(t),Obt.forEach(t),Orr=i(hGe),V_e=n(hGe,"SPAN",{});var Xbt=s(V_e);Vrr=r(Xbt,"AutoModelForSpeechSeq2Seq"),Xbt.forEach(t),hGe.forEach(t),fje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(kL.$$.fragment,sl),Xrr=i(sl),Td=n(sl,"P",{});var nee=s(Td);zrr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Sz=n(nee,"A",{href:!0});var zbt=s(Sz);Wrr=r(zbt,"from_pretrained()"),zbt.forEach(t),Qrr=r(nee," class method or the "),Rz=n(nee,"A",{href:!0});var Wbt=s(Rz);Hrr=r(Wbt,"from_config()"),Wbt.forEach(t),Urr=r(nee,` class
method.`),nee.forEach(t),Jrr=i(sl),SL=n(sl,"P",{});var pGe=s(SL);Yrr=r(pGe,"This class cannot be instantiated directly using "),X_e=n(pGe,"CODE",{});var Qbt=s(X_e);Krr=r(Qbt,"__init__()"),Qbt.forEach(t),Zrr=r(pGe," (throws an error)."),pGe.forEach(t),etr=i(sl),Ft=n(sl,"DIV",{class:!0});var h6=s(Ft);T(RL.$$.fragment,h6),otr=i(h6),z_e=n(h6,"P",{});var Hbt=s(z_e);rtr=r(Hbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hbt.forEach(t),ttr=i(h6),Md=n(h6,"P",{});var see=s(Md);atr=r(see,`Note:
Loading a model from its configuration file does `),W_e=n(see,"STRONG",{});var Ubt=s(W_e);ntr=r(Ubt,"not"),Ubt.forEach(t),str=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(see,"A",{href:!0});var Jbt=s(Pz);ltr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),itr=r(see," to load the model weights."),see.forEach(t),dtr=i(h6),T(gT.$$.fragment,h6),h6.forEach(t),ctr=i(sl),go=n(sl,"DIV",{class:!0});var _a=s(go);T(PL.$$.fragment,_a),ftr=i(_a),Q_e=n(_a,"P",{});var Ybt=s(Q_e);mtr=r(Ybt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ybt.forEach(t),gtr=i(_a),Xa=n(_a,"P",{});var p6=s(Xa);htr=r(p6,"The model class to instantiate is selected based on the "),H_e=n(p6,"CODE",{});var Kbt=s(H_e);ptr=r(Kbt,"model_type"),Kbt.forEach(t),utr=r(p6,` property of the config object (either
passed as an argument or loaded from `),U_e=n(p6,"CODE",{});var Zbt=s(U_e);_tr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),btr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(p6,"CODE",{});var e2t=s(J_e);vtr=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),Ftr=r(p6,":"),p6.forEach(t),Ttr=i(_a),BL=n(_a,"UL",{});var uGe=s(BL);hT=n(uGe,"LI",{});var fSe=s(hT);Y_e=n(fSe,"STRONG",{});var o2t=s(Y_e);Mtr=r(o2t,"speech-encoder-decoder"),o2t.forEach(t),Etr=r(fSe," \u2014 "),Bz=n(fSe,"A",{href:!0});var r2t=s(Bz);Ctr=r(r2t,"SpeechEncoderDecoderModel"),r2t.forEach(t),wtr=r(fSe," (Speech Encoder decoder model)"),fSe.forEach(t),Atr=i(uGe),pT=n(uGe,"LI",{});var mSe=s(pT);K_e=n(mSe,"STRONG",{});var t2t=s(K_e);ytr=r(t2t,"speech_to_text"),t2t.forEach(t),Ltr=r(mSe," \u2014 "),Iz=n(mSe,"A",{href:!0});var a2t=s(Iz);xtr=r(a2t,"Speech2TextForConditionalGeneration"),a2t.forEach(t),$tr=r(mSe," (Speech2Text model)"),mSe.forEach(t),uGe.forEach(t),ktr=i(_a),uT=n(_a,"P",{});var gSe=s(uT);Str=r(gSe,"The model is set in evaluation mode by default using "),Z_e=n(gSe,"CODE",{});var n2t=s(Z_e);Rtr=r(n2t,"model.eval()"),n2t.forEach(t),Ptr=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(gSe,"CODE",{});var s2t=s(e1e);Btr=r(s2t,"model.train()"),s2t.forEach(t),gSe.forEach(t),Itr=i(_a),T(_T.$$.fragment,_a),_a.forEach(t),sl.forEach(t),mje=i(f),Ed=n(f,"H2",{class:!0});var _Ge=s(Ed);bT=n(_Ge,"A",{id:!0,class:!0,href:!0});var l2t=s(bT);o1e=n(l2t,"SPAN",{});var i2t=s(o1e);T(IL.$$.fragment,i2t),i2t.forEach(t),l2t.forEach(t),Ntr=i(_Ge),r1e=n(_Ge,"SPAN",{});var d2t=s(r1e);qtr=r(d2t,"AutoModelForAudioXVector"),d2t.forEach(t),_Ge.forEach(t),gje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(NL.$$.fragment,ll),jtr=i(ll),Cd=n(ll,"P",{});var lee=s(Cd);Dtr=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Nz=n(lee,"A",{href:!0});var c2t=s(Nz);Gtr=r(c2t,"from_pretrained()"),c2t.forEach(t),Otr=r(lee," class method or the "),qz=n(lee,"A",{href:!0});var f2t=s(qz);Vtr=r(f2t,"from_config()"),f2t.forEach(t),Xtr=r(lee,` class
method.`),lee.forEach(t),ztr=i(ll),qL=n(ll,"P",{});var bGe=s(qL);Wtr=r(bGe,"This class cannot be instantiated directly using "),t1e=n(bGe,"CODE",{});var m2t=s(t1e);Qtr=r(m2t,"__init__()"),m2t.forEach(t),Htr=r(bGe," (throws an error)."),bGe.forEach(t),Utr=i(ll),Tt=n(ll,"DIV",{class:!0});var u6=s(Tt);T(jL.$$.fragment,u6),Jtr=i(u6),a1e=n(u6,"P",{});var g2t=s(a1e);Ytr=r(g2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),g2t.forEach(t),Ktr=i(u6),wd=n(u6,"P",{});var iee=s(wd);Ztr=r(iee,`Note:
Loading a model from its configuration file does `),n1e=n(iee,"STRONG",{});var h2t=s(n1e);ear=r(h2t,"not"),h2t.forEach(t),oar=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(iee,"A",{href:!0});var p2t=s(jz);rar=r(p2t,"from_pretrained()"),p2t.forEach(t),tar=r(iee," to load the model weights."),iee.forEach(t),aar=i(u6),T(vT.$$.fragment,u6),u6.forEach(t),nar=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(DL.$$.fragment,ba),sar=i(ba),s1e=n(ba,"P",{});var u2t=s(s1e);lar=r(u2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),u2t.forEach(t),iar=i(ba),za=n(ba,"P",{});var _6=s(za);dar=r(_6,"The model class to instantiate is selected based on the "),l1e=n(_6,"CODE",{});var _2t=s(l1e);car=r(_2t,"model_type"),_2t.forEach(t),far=r(_6,` property of the config object (either
passed as an argument or loaded from `),i1e=n(_6,"CODE",{});var b2t=s(i1e);mar=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),gar=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(_6,"CODE",{});var v2t=s(d1e);har=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),par=r(_6,":"),_6.forEach(t),uar=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);FT=n(il,"LI",{});var hSe=s(FT);c1e=n(hSe,"STRONG",{});var F2t=s(c1e);_ar=r(F2t,"data2vec-audio"),F2t.forEach(t),bar=r(hSe," \u2014 "),Dz=n(hSe,"A",{href:!0});var T2t=s(Dz);Far=r(T2t,"Data2VecAudioForXVector"),T2t.forEach(t),Tar=r(hSe," (Data2VecAudio model)"),hSe.forEach(t),Mar=i(il),TT=n(il,"LI",{});var pSe=s(TT);f1e=n(pSe,"STRONG",{});var M2t=s(f1e);Ear=r(M2t,"unispeech-sat"),M2t.forEach(t),Car=r(pSe," \u2014 "),Gz=n(pSe,"A",{href:!0});var E2t=s(Gz);war=r(E2t,"UniSpeechSatForXVector"),E2t.forEach(t),Aar=r(pSe," (UniSpeechSat model)"),pSe.forEach(t),yar=i(il),MT=n(il,"LI",{});var uSe=s(MT);m1e=n(uSe,"STRONG",{});var C2t=s(m1e);Lar=r(C2t,"wav2vec2"),C2t.forEach(t),xar=r(uSe," \u2014 "),Oz=n(uSe,"A",{href:!0});var w2t=s(Oz);$ar=r(w2t,"Wav2Vec2ForXVector"),w2t.forEach(t),kar=r(uSe," (Wav2Vec2 model)"),uSe.forEach(t),Sar=i(il),ET=n(il,"LI",{});var _Se=s(ET);g1e=n(_Se,"STRONG",{});var A2t=s(g1e);Rar=r(A2t,"wav2vec2-conformer"),A2t.forEach(t),Par=r(_Se," \u2014 "),Vz=n(_Se,"A",{href:!0});var y2t=s(Vz);Bar=r(y2t,"Wav2Vec2ConformerForXVector"),y2t.forEach(t),Iar=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),Nar=i(il),CT=n(il,"LI",{});var bSe=s(CT);h1e=n(bSe,"STRONG",{});var L2t=s(h1e);qar=r(L2t,"wavlm"),L2t.forEach(t),jar=r(bSe," \u2014 "),Xz=n(bSe,"A",{href:!0});var x2t=s(Xz);Dar=r(x2t,"WavLMForXVector"),x2t.forEach(t),Gar=r(bSe," (WavLM model)"),bSe.forEach(t),il.forEach(t),Oar=i(ba),wT=n(ba,"P",{});var vSe=s(wT);Var=r(vSe,"The model is set in evaluation mode by default using "),p1e=n(vSe,"CODE",{});var $2t=s(p1e);Xar=r($2t,"model.eval()"),$2t.forEach(t),zar=r(vSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(vSe,"CODE",{});var k2t=s(u1e);War=r(k2t,"model.train()"),k2t.forEach(t),vSe.forEach(t),Qar=i(ba),T(AT.$$.fragment,ba),ba.forEach(t),ll.forEach(t),hje=i(f),Ad=n(f,"H2",{class:!0});var vGe=s(Ad);yT=n(vGe,"A",{id:!0,class:!0,href:!0});var S2t=s(yT);_1e=n(S2t,"SPAN",{});var R2t=s(_1e);T(GL.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),Har=i(vGe),b1e=n(vGe,"SPAN",{});var P2t=s(b1e);Uar=r(P2t,"AutoModelForMaskedImageModeling"),P2t.forEach(t),vGe.forEach(t),pje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(OL.$$.fragment,dl),Jar=i(dl),yd=n(dl,"P",{});var dee=s(yd);Yar=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zz=n(dee,"A",{href:!0});var B2t=s(zz);Kar=r(B2t,"from_pretrained()"),B2t.forEach(t),Zar=r(dee," class method or the "),Wz=n(dee,"A",{href:!0});var I2t=s(Wz);enr=r(I2t,"from_config()"),I2t.forEach(t),onr=r(dee,` class
method.`),dee.forEach(t),rnr=i(dl),VL=n(dl,"P",{});var FGe=s(VL);tnr=r(FGe,"This class cannot be instantiated directly using "),v1e=n(FGe,"CODE",{});var N2t=s(v1e);anr=r(N2t,"__init__()"),N2t.forEach(t),nnr=r(FGe," (throws an error)."),FGe.forEach(t),snr=i(dl),Mt=n(dl,"DIV",{class:!0});var b6=s(Mt);T(XL.$$.fragment,b6),lnr=i(b6),F1e=n(b6,"P",{});var q2t=s(F1e);inr=r(q2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),q2t.forEach(t),dnr=i(b6),Ld=n(b6,"P",{});var cee=s(Ld);cnr=r(cee,`Note:
Loading a model from its configuration file does `),T1e=n(cee,"STRONG",{});var j2t=s(T1e);fnr=r(j2t,"not"),j2t.forEach(t),mnr=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(cee,"A",{href:!0});var D2t=s(Qz);gnr=r(D2t,"from_pretrained()"),D2t.forEach(t),hnr=r(cee," to load the model weights."),cee.forEach(t),pnr=i(b6),T(LT.$$.fragment,b6),b6.forEach(t),unr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(zL.$$.fragment,va),_nr=i(va),M1e=n(va,"P",{});var G2t=s(M1e);bnr=r(G2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),G2t.forEach(t),vnr=i(va),Wa=n(va,"P",{});var v6=s(Wa);Fnr=r(v6,"The model class to instantiate is selected based on the "),E1e=n(v6,"CODE",{});var O2t=s(E1e);Tnr=r(O2t,"model_type"),O2t.forEach(t),Mnr=r(v6,` property of the config object (either
passed as an argument or loaded from `),C1e=n(v6,"CODE",{});var V2t=s(C1e);Enr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),Cnr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(v6,"CODE",{});var X2t=s(w1e);wnr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),Anr=r(v6,":"),v6.forEach(t),ynr=i(va),xd=n(va,"UL",{});var fee=s(xd);xT=n(fee,"LI",{});var FSe=s(xT);A1e=n(FSe,"STRONG",{});var z2t=s(A1e);Lnr=r(z2t,"deit"),z2t.forEach(t),xnr=r(FSe," \u2014 "),Hz=n(FSe,"A",{href:!0});var W2t=s(Hz);$nr=r(W2t,"DeiTForMaskedImageModeling"),W2t.forEach(t),knr=r(FSe," (DeiT model)"),FSe.forEach(t),Snr=i(fee),$T=n(fee,"LI",{});var TSe=s($T);y1e=n(TSe,"STRONG",{});var Q2t=s(y1e);Rnr=r(Q2t,"swin"),Q2t.forEach(t),Pnr=r(TSe," \u2014 "),Uz=n(TSe,"A",{href:!0});var H2t=s(Uz);Bnr=r(H2t,"SwinForMaskedImageModeling"),H2t.forEach(t),Inr=r(TSe," (Swin model)"),TSe.forEach(t),Nnr=i(fee),kT=n(fee,"LI",{});var MSe=s(kT);L1e=n(MSe,"STRONG",{});var U2t=s(L1e);qnr=r(U2t,"vit"),U2t.forEach(t),jnr=r(MSe," \u2014 "),Jz=n(MSe,"A",{href:!0});var J2t=s(Jz);Dnr=r(J2t,"ViTForMaskedImageModeling"),J2t.forEach(t),Gnr=r(MSe," (ViT model)"),MSe.forEach(t),fee.forEach(t),Onr=i(va),ST=n(va,"P",{});var ESe=s(ST);Vnr=r(ESe,"The model is set in evaluation mode by default using "),x1e=n(ESe,"CODE",{});var Y2t=s(x1e);Xnr=r(Y2t,"model.eval()"),Y2t.forEach(t),znr=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=n(ESe,"CODE",{});var K2t=s($1e);Wnr=r(K2t,"model.train()"),K2t.forEach(t),ESe.forEach(t),Qnr=i(va),T(RT.$$.fragment,va),va.forEach(t),dl.forEach(t),uje=i(f),$d=n(f,"H2",{class:!0});var TGe=s($d);PT=n(TGe,"A",{id:!0,class:!0,href:!0});var Z2t=s(PT);k1e=n(Z2t,"SPAN",{});var evt=s(k1e);T(WL.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),Hnr=i(TGe),S1e=n(TGe,"SPAN",{});var ovt=s(S1e);Unr=r(ovt,"AutoModelForObjectDetection"),ovt.forEach(t),TGe.forEach(t),_je=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(QL.$$.fragment,cl),Jnr=i(cl),kd=n(cl,"P",{});var mee=s(kd);Ynr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Yz=n(mee,"A",{href:!0});var rvt=s(Yz);Knr=r(rvt,"from_pretrained()"),rvt.forEach(t),Znr=r(mee," class method or the "),Kz=n(mee,"A",{href:!0});var tvt=s(Kz);esr=r(tvt,"from_config()"),tvt.forEach(t),osr=r(mee,` class
method.`),mee.forEach(t),rsr=i(cl),HL=n(cl,"P",{});var MGe=s(HL);tsr=r(MGe,"This class cannot be instantiated directly using "),R1e=n(MGe,"CODE",{});var avt=s(R1e);asr=r(avt,"__init__()"),avt.forEach(t),nsr=r(MGe," (throws an error)."),MGe.forEach(t),ssr=i(cl),Et=n(cl,"DIV",{class:!0});var F6=s(Et);T(UL.$$.fragment,F6),lsr=i(F6),P1e=n(F6,"P",{});var nvt=s(P1e);isr=r(nvt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nvt.forEach(t),dsr=i(F6),Sd=n(F6,"P",{});var gee=s(Sd);csr=r(gee,`Note:
Loading a model from its configuration file does `),B1e=n(gee,"STRONG",{});var svt=s(B1e);fsr=r(svt,"not"),svt.forEach(t),msr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(gee,"A",{href:!0});var lvt=s(Zz);gsr=r(lvt,"from_pretrained()"),lvt.forEach(t),hsr=r(gee," to load the model weights."),gee.forEach(t),psr=i(F6),T(BT.$$.fragment,F6),F6.forEach(t),usr=i(cl),uo=n(cl,"DIV",{class:!0});var Fa=s(uo);T(JL.$$.fragment,Fa),_sr=i(Fa),I1e=n(Fa,"P",{});var ivt=s(I1e);bsr=r(ivt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ivt.forEach(t),vsr=i(Fa),Qa=n(Fa,"P",{});var T6=s(Qa);Fsr=r(T6,"The model class to instantiate is selected based on the "),N1e=n(T6,"CODE",{});var dvt=s(N1e);Tsr=r(dvt,"model_type"),dvt.forEach(t),Msr=r(T6,` property of the config object (either
passed as an argument or loaded from `),q1e=n(T6,"CODE",{});var cvt=s(q1e);Esr=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),Csr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(T6,"CODE",{});var fvt=s(j1e);wsr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),Asr=r(T6,":"),T6.forEach(t),ysr=i(Fa),YL=n(Fa,"UL",{});var EGe=s(YL);IT=n(EGe,"LI",{});var CSe=s(IT);D1e=n(CSe,"STRONG",{});var mvt=s(D1e);Lsr=r(mvt,"detr"),mvt.forEach(t),xsr=r(CSe," \u2014 "),eW=n(CSe,"A",{href:!0});var gvt=s(eW);$sr=r(gvt,"DetrForObjectDetection"),gvt.forEach(t),ksr=r(CSe," (DETR model)"),CSe.forEach(t),Ssr=i(EGe),NT=n(EGe,"LI",{});var wSe=s(NT);G1e=n(wSe,"STRONG",{});var hvt=s(G1e);Rsr=r(hvt,"yolos"),hvt.forEach(t),Psr=r(wSe," \u2014 "),oW=n(wSe,"A",{href:!0});var pvt=s(oW);Bsr=r(pvt,"YolosForObjectDetection"),pvt.forEach(t),Isr=r(wSe," (YOLOS model)"),wSe.forEach(t),EGe.forEach(t),Nsr=i(Fa),qT=n(Fa,"P",{});var ASe=s(qT);qsr=r(ASe,"The model is set in evaluation mode by default using "),O1e=n(ASe,"CODE",{});var uvt=s(O1e);jsr=r(uvt,"model.eval()"),uvt.forEach(t),Dsr=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=n(ASe,"CODE",{});var _vt=s(V1e);Gsr=r(_vt,"model.train()"),_vt.forEach(t),ASe.forEach(t),Osr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),bje=i(f),Rd=n(f,"H2",{class:!0});var CGe=s(Rd);DT=n(CGe,"A",{id:!0,class:!0,href:!0});var bvt=s(DT);X1e=n(bvt,"SPAN",{});var vvt=s(X1e);T(KL.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),Vsr=i(CGe),z1e=n(CGe,"SPAN",{});var Fvt=s(z1e);Xsr=r(Fvt,"AutoModelForImageSegmentation"),Fvt.forEach(t),CGe.forEach(t),vje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(ZL.$$.fragment,fl),zsr=i(fl),Pd=n(fl,"P",{});var hee=s(Pd);Wsr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rW=n(hee,"A",{href:!0});var Tvt=s(rW);Qsr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),Hsr=r(hee," class method or the "),tW=n(hee,"A",{href:!0});var Mvt=s(tW);Usr=r(Mvt,"from_config()"),Mvt.forEach(t),Jsr=r(hee,` class
method.`),hee.forEach(t),Ysr=i(fl),e8=n(fl,"P",{});var wGe=s(e8);Ksr=r(wGe,"This class cannot be instantiated directly using "),W1e=n(wGe,"CODE",{});var Evt=s(W1e);Zsr=r(Evt,"__init__()"),Evt.forEach(t),elr=r(wGe," (throws an error)."),wGe.forEach(t),olr=i(fl),Ct=n(fl,"DIV",{class:!0});var M6=s(Ct);T(o8.$$.fragment,M6),rlr=i(M6),Q1e=n(M6,"P",{});var Cvt=s(Q1e);tlr=r(Cvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cvt.forEach(t),alr=i(M6),Bd=n(M6,"P",{});var pee=s(Bd);nlr=r(pee,`Note:
Loading a model from its configuration file does `),H1e=n(pee,"STRONG",{});var wvt=s(H1e);slr=r(wvt,"not"),wvt.forEach(t),llr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(pee,"A",{href:!0});var Avt=s(aW);ilr=r(Avt,"from_pretrained()"),Avt.forEach(t),dlr=r(pee," to load the model weights."),pee.forEach(t),clr=i(M6),T(GT.$$.fragment,M6),M6.forEach(t),flr=i(fl),_o=n(fl,"DIV",{class:!0});var Ta=s(_o);T(r8.$$.fragment,Ta),mlr=i(Ta),U1e=n(Ta,"P",{});var yvt=s(U1e);glr=r(yvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),yvt.forEach(t),hlr=i(Ta),Ha=n(Ta,"P",{});var E6=s(Ha);plr=r(E6,"The model class to instantiate is selected based on the "),J1e=n(E6,"CODE",{});var Lvt=s(J1e);ulr=r(Lvt,"model_type"),Lvt.forEach(t),_lr=r(E6,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(E6,"CODE",{});var xvt=s(Y1e);blr=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),vlr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(E6,"CODE",{});var $vt=s(K1e);Flr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),Tlr=r(E6,":"),E6.forEach(t),Mlr=i(Ta),Z1e=n(Ta,"UL",{});var kvt=s(Z1e);OT=n(kvt,"LI",{});var ySe=s(OT);e3e=n(ySe,"STRONG",{});var Svt=s(e3e);Elr=r(Svt,"detr"),Svt.forEach(t),Clr=r(ySe," \u2014 "),nW=n(ySe,"A",{href:!0});var Rvt=s(nW);wlr=r(Rvt,"DetrForSegmentation"),Rvt.forEach(t),Alr=r(ySe," (DETR model)"),ySe.forEach(t),kvt.forEach(t),ylr=i(Ta),VT=n(Ta,"P",{});var LSe=s(VT);Llr=r(LSe,"The model is set in evaluation mode by default using "),o3e=n(LSe,"CODE",{});var Pvt=s(o3e);xlr=r(Pvt,"model.eval()"),Pvt.forEach(t),$lr=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r3e=n(LSe,"CODE",{});var Bvt=s(r3e);klr=r(Bvt,"model.train()"),Bvt.forEach(t),LSe.forEach(t),Slr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Fje=i(f),Id=n(f,"H2",{class:!0});var AGe=s(Id);zT=n(AGe,"A",{id:!0,class:!0,href:!0});var Ivt=s(zT);t3e=n(Ivt,"SPAN",{});var Nvt=s(t3e);T(t8.$$.fragment,Nvt),Nvt.forEach(t),Ivt.forEach(t),Rlr=i(AGe),a3e=n(AGe,"SPAN",{});var qvt=s(a3e);Plr=r(qvt,"AutoModelForSemanticSegmentation"),qvt.forEach(t),AGe.forEach(t),Tje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(a8.$$.fragment,ml),Blr=i(ml),Nd=n(ml,"P",{});var uee=s(Nd);Ilr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sW=n(uee,"A",{href:!0});var jvt=s(sW);Nlr=r(jvt,"from_pretrained()"),jvt.forEach(t),qlr=r(uee," class method or the "),lW=n(uee,"A",{href:!0});var Dvt=s(lW);jlr=r(Dvt,"from_config()"),Dvt.forEach(t),Dlr=r(uee,` class
method.`),uee.forEach(t),Glr=i(ml),n8=n(ml,"P",{});var yGe=s(n8);Olr=r(yGe,"This class cannot be instantiated directly using "),n3e=n(yGe,"CODE",{});var Gvt=s(n3e);Vlr=r(Gvt,"__init__()"),Gvt.forEach(t),Xlr=r(yGe," (throws an error)."),yGe.forEach(t),zlr=i(ml),wt=n(ml,"DIV",{class:!0});var C6=s(wt);T(s8.$$.fragment,C6),Wlr=i(C6),s3e=n(C6,"P",{});var Ovt=s(s3e);Qlr=r(Ovt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ovt.forEach(t),Hlr=i(C6),qd=n(C6,"P",{});var _ee=s(qd);Ulr=r(_ee,`Note:
Loading a model from its configuration file does `),l3e=n(_ee,"STRONG",{});var Vvt=s(l3e);Jlr=r(Vvt,"not"),Vvt.forEach(t),Ylr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(_ee,"A",{href:!0});var Xvt=s(iW);Klr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Zlr=r(_ee," to load the model weights."),_ee.forEach(t),eir=i(C6),T(WT.$$.fragment,C6),C6.forEach(t),oir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(l8.$$.fragment,Ma),rir=i(Ma),i3e=n(Ma,"P",{});var zvt=s(i3e);tir=r(zvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zvt.forEach(t),air=i(Ma),Ua=n(Ma,"P",{});var w6=s(Ua);nir=r(w6,"The model class to instantiate is selected based on the "),d3e=n(w6,"CODE",{});var Wvt=s(d3e);sir=r(Wvt,"model_type"),Wvt.forEach(t),lir=r(w6,` property of the config object (either
passed as an argument or loaded from `),c3e=n(w6,"CODE",{});var Qvt=s(c3e);iir=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),dir=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(w6,"CODE",{});var Hvt=s(f3e);cir=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),fir=r(w6,":"),w6.forEach(t),mir=i(Ma),Ja=n(Ma,"UL",{});var A6=s(Ja);QT=n(A6,"LI",{});var xSe=s(QT);m3e=n(xSe,"STRONG",{});var Uvt=s(m3e);gir=r(Uvt,"beit"),Uvt.forEach(t),hir=r(xSe," \u2014 "),dW=n(xSe,"A",{href:!0});var Jvt=s(dW);pir=r(Jvt,"BeitForSemanticSegmentation"),Jvt.forEach(t),uir=r(xSe," (BEiT model)"),xSe.forEach(t),_ir=i(A6),HT=n(A6,"LI",{});var $Se=s(HT);g3e=n($Se,"STRONG",{});var Yvt=s(g3e);bir=r(Yvt,"data2vec-vision"),Yvt.forEach(t),vir=r($Se," \u2014 "),cW=n($Se,"A",{href:!0});var Kvt=s(cW);Fir=r(Kvt,"Data2VecVisionForSemanticSegmentation"),Kvt.forEach(t),Tir=r($Se," (Data2VecVision model)"),$Se.forEach(t),Mir=i(A6),UT=n(A6,"LI",{});var kSe=s(UT);h3e=n(kSe,"STRONG",{});var Zvt=s(h3e);Eir=r(Zvt,"dpt"),Zvt.forEach(t),Cir=r(kSe," \u2014 "),fW=n(kSe,"A",{href:!0});var eFt=s(fW);wir=r(eFt,"DPTForSemanticSegmentation"),eFt.forEach(t),Air=r(kSe," (DPT model)"),kSe.forEach(t),yir=i(A6),JT=n(A6,"LI",{});var SSe=s(JT);p3e=n(SSe,"STRONG",{});var oFt=s(p3e);Lir=r(oFt,"segformer"),oFt.forEach(t),xir=r(SSe," \u2014 "),mW=n(SSe,"A",{href:!0});var rFt=s(mW);$ir=r(rFt,"SegformerForSemanticSegmentation"),rFt.forEach(t),kir=r(SSe," (SegFormer model)"),SSe.forEach(t),A6.forEach(t),Sir=i(Ma),YT=n(Ma,"P",{});var RSe=s(YT);Rir=r(RSe,"The model is set in evaluation mode by default using "),u3e=n(RSe,"CODE",{});var tFt=s(u3e);Pir=r(tFt,"model.eval()"),tFt.forEach(t),Bir=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=n(RSe,"CODE",{});var aFt=s(_3e);Iir=r(aFt,"model.train()"),aFt.forEach(t),RSe.forEach(t),Nir=i(Ma),T(KT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),Mje=i(f),jd=n(f,"H2",{class:!0});var LGe=s(jd);ZT=n(LGe,"A",{id:!0,class:!0,href:!0});var nFt=s(ZT);b3e=n(nFt,"SPAN",{});var sFt=s(b3e);T(i8.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),qir=i(LGe),v3e=n(LGe,"SPAN",{});var lFt=s(v3e);jir=r(lFt,"AutoModelForInstanceSegmentation"),lFt.forEach(t),LGe.forEach(t),Eje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(d8.$$.fragment,gl),Dir=i(gl),Dd=n(gl,"P",{});var bee=s(Dd);Gir=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gW=n(bee,"A",{href:!0});var iFt=s(gW);Oir=r(iFt,"from_pretrained()"),iFt.forEach(t),Vir=r(bee," class method or the "),hW=n(bee,"A",{href:!0});var dFt=s(hW);Xir=r(dFt,"from_config()"),dFt.forEach(t),zir=r(bee,` class
method.`),bee.forEach(t),Wir=i(gl),c8=n(gl,"P",{});var xGe=s(c8);Qir=r(xGe,"This class cannot be instantiated directly using "),F3e=n(xGe,"CODE",{});var cFt=s(F3e);Hir=r(cFt,"__init__()"),cFt.forEach(t),Uir=r(xGe," (throws an error)."),xGe.forEach(t),Jir=i(gl),At=n(gl,"DIV",{class:!0});var y6=s(At);T(f8.$$.fragment,y6),Yir=i(y6),T3e=n(y6,"P",{});var fFt=s(T3e);Kir=r(fFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fFt.forEach(t),Zir=i(y6),Gd=n(y6,"P",{});var vee=s(Gd);edr=r(vee,`Note:
Loading a model from its configuration file does `),M3e=n(vee,"STRONG",{});var mFt=s(M3e);odr=r(mFt,"not"),mFt.forEach(t),rdr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(vee,"A",{href:!0});var gFt=s(pW);tdr=r(gFt,"from_pretrained()"),gFt.forEach(t),adr=r(vee," to load the model weights."),vee.forEach(t),ndr=i(y6),T(e7.$$.fragment,y6),y6.forEach(t),sdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(m8.$$.fragment,Ea),ldr=i(Ea),E3e=n(Ea,"P",{});var hFt=s(E3e);idr=r(hFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hFt.forEach(t),ddr=i(Ea),Ya=n(Ea,"P",{});var L6=s(Ya);cdr=r(L6,"The model class to instantiate is selected based on the "),C3e=n(L6,"CODE",{});var pFt=s(C3e);fdr=r(pFt,"model_type"),pFt.forEach(t),mdr=r(L6,` property of the config object (either
passed as an argument or loaded from `),w3e=n(L6,"CODE",{});var uFt=s(w3e);gdr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),hdr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=n(L6,"CODE",{});var _Ft=s(A3e);pdr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),udr=r(L6,":"),L6.forEach(t),_dr=i(Ea),y3e=n(Ea,"UL",{});var bFt=s(y3e);o7=n(bFt,"LI",{});var PSe=s(o7);L3e=n(PSe,"STRONG",{});var vFt=s(L3e);bdr=r(vFt,"maskformer"),vFt.forEach(t),vdr=r(PSe," \u2014 "),uW=n(PSe,"A",{href:!0});var FFt=s(uW);Fdr=r(FFt,"MaskFormerForInstanceSegmentation"),FFt.forEach(t),Tdr=r(PSe," (MaskFormer model)"),PSe.forEach(t),bFt.forEach(t),Mdr=i(Ea),r7=n(Ea,"P",{});var BSe=s(r7);Edr=r(BSe,"The model is set in evaluation mode by default using "),x3e=n(BSe,"CODE",{});var TFt=s(x3e);Cdr=r(TFt,"model.eval()"),TFt.forEach(t),wdr=r(BSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$3e=n(BSe,"CODE",{});var MFt=s($3e);Adr=r(MFt,"model.train()"),MFt.forEach(t),BSe.forEach(t),ydr=i(Ea),T(t7.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Cje=i(f),Od=n(f,"H2",{class:!0});var $Ge=s(Od);a7=n($Ge,"A",{id:!0,class:!0,href:!0});var EFt=s(a7);k3e=n(EFt,"SPAN",{});var CFt=s(k3e);T(g8.$$.fragment,CFt),CFt.forEach(t),EFt.forEach(t),Ldr=i($Ge),S3e=n($Ge,"SPAN",{});var wFt=s(S3e);xdr=r(wFt,"TFAutoModel"),wFt.forEach(t),$Ge.forEach(t),wje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(h8.$$.fragment,hl),$dr=i(hl),Vd=n(hl,"P",{});var Fee=s(Vd);kdr=r(Fee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_W=n(Fee,"A",{href:!0});var AFt=s(_W);Sdr=r(AFt,"from_pretrained()"),AFt.forEach(t),Rdr=r(Fee," class method or the "),bW=n(Fee,"A",{href:!0});var yFt=s(bW);Pdr=r(yFt,"from_config()"),yFt.forEach(t),Bdr=r(Fee,` class
method.`),Fee.forEach(t),Idr=i(hl),p8=n(hl,"P",{});var kGe=s(p8);Ndr=r(kGe,"This class cannot be instantiated directly using "),R3e=n(kGe,"CODE",{});var LFt=s(R3e);qdr=r(LFt,"__init__()"),LFt.forEach(t),jdr=r(kGe," (throws an error)."),kGe.forEach(t),Ddr=i(hl),yt=n(hl,"DIV",{class:!0});var x6=s(yt);T(u8.$$.fragment,x6),Gdr=i(x6),P3e=n(x6,"P",{});var xFt=s(P3e);Odr=r(xFt,"Instantiates one of the base model classes of the library from a configuration."),xFt.forEach(t),Vdr=i(x6),Xd=n(x6,"P",{});var Tee=s(Xd);Xdr=r(Tee,`Note:
Loading a model from its configuration file does `),B3e=n(Tee,"STRONG",{});var $Ft=s(B3e);zdr=r($Ft,"not"),$Ft.forEach(t),Wdr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(Tee,"A",{href:!0});var kFt=s(vW);Qdr=r(kFt,"from_pretrained()"),kFt.forEach(t),Hdr=r(Tee," to load the model weights."),Tee.forEach(t),Udr=i(x6),T(n7.$$.fragment,x6),x6.forEach(t),Jdr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(_8.$$.fragment,pl),Ydr=i(pl),I3e=n(pl,"P",{});var SFt=s(I3e);Kdr=r(SFt,"Instantiate one of the base model classes of the library from a pretrained model."),SFt.forEach(t),Zdr=i(pl),Ka=n(pl,"P",{});var $6=s(Ka);ecr=r($6,"The model class to instantiate is selected based on the "),N3e=n($6,"CODE",{});var RFt=s(N3e);ocr=r(RFt,"model_type"),RFt.forEach(t),rcr=r($6,` property of the config object (either
passed as an argument or loaded from `),q3e=n($6,"CODE",{});var PFt=s(q3e);tcr=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),acr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n($6,"CODE",{});var BFt=s(j3e);ncr=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),scr=r($6,":"),$6.forEach(t),lcr=i(pl),q=n(pl,"UL",{});var D=s(q);s7=n(D,"LI",{});var ISe=s(s7);D3e=n(ISe,"STRONG",{});var IFt=s(D3e);icr=r(IFt,"albert"),IFt.forEach(t),dcr=r(ISe," \u2014 "),FW=n(ISe,"A",{href:!0});var NFt=s(FW);ccr=r(NFt,"TFAlbertModel"),NFt.forEach(t),fcr=r(ISe," (ALBERT model)"),ISe.forEach(t),mcr=i(D),l7=n(D,"LI",{});var NSe=s(l7);G3e=n(NSe,"STRONG",{});var qFt=s(G3e);gcr=r(qFt,"bart"),qFt.forEach(t),hcr=r(NSe," \u2014 "),TW=n(NSe,"A",{href:!0});var jFt=s(TW);pcr=r(jFt,"TFBartModel"),jFt.forEach(t),ucr=r(NSe," (BART model)"),NSe.forEach(t),_cr=i(D),i7=n(D,"LI",{});var qSe=s(i7);O3e=n(qSe,"STRONG",{});var DFt=s(O3e);bcr=r(DFt,"bert"),DFt.forEach(t),vcr=r(qSe," \u2014 "),MW=n(qSe,"A",{href:!0});var GFt=s(MW);Fcr=r(GFt,"TFBertModel"),GFt.forEach(t),Tcr=r(qSe," (BERT model)"),qSe.forEach(t),Mcr=i(D),d7=n(D,"LI",{});var jSe=s(d7);V3e=n(jSe,"STRONG",{});var OFt=s(V3e);Ecr=r(OFt,"blenderbot"),OFt.forEach(t),Ccr=r(jSe," \u2014 "),EW=n(jSe,"A",{href:!0});var VFt=s(EW);wcr=r(VFt,"TFBlenderbotModel"),VFt.forEach(t),Acr=r(jSe," (Blenderbot model)"),jSe.forEach(t),ycr=i(D),c7=n(D,"LI",{});var DSe=s(c7);X3e=n(DSe,"STRONG",{});var XFt=s(X3e);Lcr=r(XFt,"blenderbot-small"),XFt.forEach(t),xcr=r(DSe," \u2014 "),CW=n(DSe,"A",{href:!0});var zFt=s(CW);$cr=r(zFt,"TFBlenderbotSmallModel"),zFt.forEach(t),kcr=r(DSe," (BlenderbotSmall model)"),DSe.forEach(t),Scr=i(D),f7=n(D,"LI",{});var GSe=s(f7);z3e=n(GSe,"STRONG",{});var WFt=s(z3e);Rcr=r(WFt,"camembert"),WFt.forEach(t),Pcr=r(GSe," \u2014 "),wW=n(GSe,"A",{href:!0});var QFt=s(wW);Bcr=r(QFt,"TFCamembertModel"),QFt.forEach(t),Icr=r(GSe," (CamemBERT model)"),GSe.forEach(t),Ncr=i(D),m7=n(D,"LI",{});var OSe=s(m7);W3e=n(OSe,"STRONG",{});var HFt=s(W3e);qcr=r(HFt,"clip"),HFt.forEach(t),jcr=r(OSe," \u2014 "),AW=n(OSe,"A",{href:!0});var UFt=s(AW);Dcr=r(UFt,"TFCLIPModel"),UFt.forEach(t),Gcr=r(OSe," (CLIP model)"),OSe.forEach(t),Ocr=i(D),g7=n(D,"LI",{});var VSe=s(g7);Q3e=n(VSe,"STRONG",{});var JFt=s(Q3e);Vcr=r(JFt,"convbert"),JFt.forEach(t),Xcr=r(VSe," \u2014 "),yW=n(VSe,"A",{href:!0});var YFt=s(yW);zcr=r(YFt,"TFConvBertModel"),YFt.forEach(t),Wcr=r(VSe," (ConvBERT model)"),VSe.forEach(t),Qcr=i(D),h7=n(D,"LI",{});var XSe=s(h7);H3e=n(XSe,"STRONG",{});var KFt=s(H3e);Hcr=r(KFt,"convnext"),KFt.forEach(t),Ucr=r(XSe," \u2014 "),LW=n(XSe,"A",{href:!0});var ZFt=s(LW);Jcr=r(ZFt,"TFConvNextModel"),ZFt.forEach(t),Ycr=r(XSe," (ConvNext model)"),XSe.forEach(t),Kcr=i(D),p7=n(D,"LI",{});var zSe=s(p7);U3e=n(zSe,"STRONG",{});var eTt=s(U3e);Zcr=r(eTt,"ctrl"),eTt.forEach(t),efr=r(zSe," \u2014 "),xW=n(zSe,"A",{href:!0});var oTt=s(xW);ofr=r(oTt,"TFCTRLModel"),oTt.forEach(t),rfr=r(zSe," (CTRL model)"),zSe.forEach(t),tfr=i(D),u7=n(D,"LI",{});var WSe=s(u7);J3e=n(WSe,"STRONG",{});var rTt=s(J3e);afr=r(rTt,"data2vec-vision"),rTt.forEach(t),nfr=r(WSe," \u2014 "),$W=n(WSe,"A",{href:!0});var tTt=s($W);sfr=r(tTt,"TFData2VecVisionModel"),tTt.forEach(t),lfr=r(WSe," (Data2VecVision model)"),WSe.forEach(t),ifr=i(D),_7=n(D,"LI",{});var QSe=s(_7);Y3e=n(QSe,"STRONG",{});var aTt=s(Y3e);dfr=r(aTt,"deberta"),aTt.forEach(t),cfr=r(QSe," \u2014 "),kW=n(QSe,"A",{href:!0});var nTt=s(kW);ffr=r(nTt,"TFDebertaModel"),nTt.forEach(t),mfr=r(QSe," (DeBERTa model)"),QSe.forEach(t),gfr=i(D),b7=n(D,"LI",{});var HSe=s(b7);K3e=n(HSe,"STRONG",{});var sTt=s(K3e);hfr=r(sTt,"deberta-v2"),sTt.forEach(t),pfr=r(HSe," \u2014 "),SW=n(HSe,"A",{href:!0});var lTt=s(SW);ufr=r(lTt,"TFDebertaV2Model"),lTt.forEach(t),_fr=r(HSe," (DeBERTa-v2 model)"),HSe.forEach(t),bfr=i(D),v7=n(D,"LI",{});var USe=s(v7);Z3e=n(USe,"STRONG",{});var iTt=s(Z3e);vfr=r(iTt,"distilbert"),iTt.forEach(t),Ffr=r(USe," \u2014 "),RW=n(USe,"A",{href:!0});var dTt=s(RW);Tfr=r(dTt,"TFDistilBertModel"),dTt.forEach(t),Mfr=r(USe," (DistilBERT model)"),USe.forEach(t),Efr=i(D),F7=n(D,"LI",{});var JSe=s(F7);ebe=n(JSe,"STRONG",{});var cTt=s(ebe);Cfr=r(cTt,"dpr"),cTt.forEach(t),wfr=r(JSe," \u2014 "),PW=n(JSe,"A",{href:!0});var fTt=s(PW);Afr=r(fTt,"TFDPRQuestionEncoder"),fTt.forEach(t),yfr=r(JSe," (DPR model)"),JSe.forEach(t),Lfr=i(D),T7=n(D,"LI",{});var YSe=s(T7);obe=n(YSe,"STRONG",{});var mTt=s(obe);xfr=r(mTt,"electra"),mTt.forEach(t),$fr=r(YSe," \u2014 "),BW=n(YSe,"A",{href:!0});var gTt=s(BW);kfr=r(gTt,"TFElectraModel"),gTt.forEach(t),Sfr=r(YSe," (ELECTRA model)"),YSe.forEach(t),Rfr=i(D),M7=n(D,"LI",{});var KSe=s(M7);rbe=n(KSe,"STRONG",{});var hTt=s(rbe);Pfr=r(hTt,"flaubert"),hTt.forEach(t),Bfr=r(KSe," \u2014 "),IW=n(KSe,"A",{href:!0});var pTt=s(IW);Ifr=r(pTt,"TFFlaubertModel"),pTt.forEach(t),Nfr=r(KSe," (FlauBERT model)"),KSe.forEach(t),qfr=i(D),Ns=n(D,"LI",{});var J$=s(Ns);tbe=n(J$,"STRONG",{});var uTt=s(tbe);jfr=r(uTt,"funnel"),uTt.forEach(t),Dfr=r(J$," \u2014 "),NW=n(J$,"A",{href:!0});var _Tt=s(NW);Gfr=r(_Tt,"TFFunnelModel"),_Tt.forEach(t),Ofr=r(J$," or "),qW=n(J$,"A",{href:!0});var bTt=s(qW);Vfr=r(bTt,"TFFunnelBaseModel"),bTt.forEach(t),Xfr=r(J$," (Funnel Transformer model)"),J$.forEach(t),zfr=i(D),E7=n(D,"LI",{});var ZSe=s(E7);abe=n(ZSe,"STRONG",{});var vTt=s(abe);Wfr=r(vTt,"gpt2"),vTt.forEach(t),Qfr=r(ZSe," \u2014 "),jW=n(ZSe,"A",{href:!0});var FTt=s(jW);Hfr=r(FTt,"TFGPT2Model"),FTt.forEach(t),Ufr=r(ZSe," (OpenAI GPT-2 model)"),ZSe.forEach(t),Jfr=i(D),C7=n(D,"LI",{});var eRe=s(C7);nbe=n(eRe,"STRONG",{});var TTt=s(nbe);Yfr=r(TTt,"gptj"),TTt.forEach(t),Kfr=r(eRe," \u2014 "),DW=n(eRe,"A",{href:!0});var MTt=s(DW);Zfr=r(MTt,"TFGPTJModel"),MTt.forEach(t),emr=r(eRe," (GPT-J model)"),eRe.forEach(t),omr=i(D),w7=n(D,"LI",{});var oRe=s(w7);sbe=n(oRe,"STRONG",{});var ETt=s(sbe);rmr=r(ETt,"hubert"),ETt.forEach(t),tmr=r(oRe," \u2014 "),GW=n(oRe,"A",{href:!0});var CTt=s(GW);amr=r(CTt,"TFHubertModel"),CTt.forEach(t),nmr=r(oRe," (Hubert model)"),oRe.forEach(t),smr=i(D),A7=n(D,"LI",{});var rRe=s(A7);lbe=n(rRe,"STRONG",{});var wTt=s(lbe);lmr=r(wTt,"layoutlm"),wTt.forEach(t),imr=r(rRe," \u2014 "),OW=n(rRe,"A",{href:!0});var ATt=s(OW);dmr=r(ATt,"TFLayoutLMModel"),ATt.forEach(t),cmr=r(rRe," (LayoutLM model)"),rRe.forEach(t),fmr=i(D),y7=n(D,"LI",{});var tRe=s(y7);ibe=n(tRe,"STRONG",{});var yTt=s(ibe);mmr=r(yTt,"led"),yTt.forEach(t),gmr=r(tRe," \u2014 "),VW=n(tRe,"A",{href:!0});var LTt=s(VW);hmr=r(LTt,"TFLEDModel"),LTt.forEach(t),pmr=r(tRe," (LED model)"),tRe.forEach(t),umr=i(D),L7=n(D,"LI",{});var aRe=s(L7);dbe=n(aRe,"STRONG",{});var xTt=s(dbe);_mr=r(xTt,"longformer"),xTt.forEach(t),bmr=r(aRe," \u2014 "),XW=n(aRe,"A",{href:!0});var $Tt=s(XW);vmr=r($Tt,"TFLongformerModel"),$Tt.forEach(t),Fmr=r(aRe," (Longformer model)"),aRe.forEach(t),Tmr=i(D),x7=n(D,"LI",{});var nRe=s(x7);cbe=n(nRe,"STRONG",{});var kTt=s(cbe);Mmr=r(kTt,"lxmert"),kTt.forEach(t),Emr=r(nRe," \u2014 "),zW=n(nRe,"A",{href:!0});var STt=s(zW);Cmr=r(STt,"TFLxmertModel"),STt.forEach(t),wmr=r(nRe," (LXMERT model)"),nRe.forEach(t),Amr=i(D),$7=n(D,"LI",{});var sRe=s($7);fbe=n(sRe,"STRONG",{});var RTt=s(fbe);ymr=r(RTt,"marian"),RTt.forEach(t),Lmr=r(sRe," \u2014 "),WW=n(sRe,"A",{href:!0});var PTt=s(WW);xmr=r(PTt,"TFMarianModel"),PTt.forEach(t),$mr=r(sRe," (Marian model)"),sRe.forEach(t),kmr=i(D),k7=n(D,"LI",{});var lRe=s(k7);mbe=n(lRe,"STRONG",{});var BTt=s(mbe);Smr=r(BTt,"mbart"),BTt.forEach(t),Rmr=r(lRe," \u2014 "),QW=n(lRe,"A",{href:!0});var ITt=s(QW);Pmr=r(ITt,"TFMBartModel"),ITt.forEach(t),Bmr=r(lRe," (mBART model)"),lRe.forEach(t),Imr=i(D),S7=n(D,"LI",{});var iRe=s(S7);gbe=n(iRe,"STRONG",{});var NTt=s(gbe);Nmr=r(NTt,"mobilebert"),NTt.forEach(t),qmr=r(iRe," \u2014 "),HW=n(iRe,"A",{href:!0});var qTt=s(HW);jmr=r(qTt,"TFMobileBertModel"),qTt.forEach(t),Dmr=r(iRe," (MobileBERT model)"),iRe.forEach(t),Gmr=i(D),R7=n(D,"LI",{});var dRe=s(R7);hbe=n(dRe,"STRONG",{});var jTt=s(hbe);Omr=r(jTt,"mpnet"),jTt.forEach(t),Vmr=r(dRe," \u2014 "),UW=n(dRe,"A",{href:!0});var DTt=s(UW);Xmr=r(DTt,"TFMPNetModel"),DTt.forEach(t),zmr=r(dRe," (MPNet model)"),dRe.forEach(t),Wmr=i(D),P7=n(D,"LI",{});var cRe=s(P7);pbe=n(cRe,"STRONG",{});var GTt=s(pbe);Qmr=r(GTt,"mt5"),GTt.forEach(t),Hmr=r(cRe," \u2014 "),JW=n(cRe,"A",{href:!0});var OTt=s(JW);Umr=r(OTt,"TFMT5Model"),OTt.forEach(t),Jmr=r(cRe," (mT5 model)"),cRe.forEach(t),Ymr=i(D),B7=n(D,"LI",{});var fRe=s(B7);ube=n(fRe,"STRONG",{});var VTt=s(ube);Kmr=r(VTt,"openai-gpt"),VTt.forEach(t),Zmr=r(fRe," \u2014 "),YW=n(fRe,"A",{href:!0});var XTt=s(YW);egr=r(XTt,"TFOpenAIGPTModel"),XTt.forEach(t),ogr=r(fRe," (OpenAI GPT model)"),fRe.forEach(t),rgr=i(D),I7=n(D,"LI",{});var mRe=s(I7);_be=n(mRe,"STRONG",{});var zTt=s(_be);tgr=r(zTt,"pegasus"),zTt.forEach(t),agr=r(mRe," \u2014 "),KW=n(mRe,"A",{href:!0});var WTt=s(KW);ngr=r(WTt,"TFPegasusModel"),WTt.forEach(t),sgr=r(mRe," (Pegasus model)"),mRe.forEach(t),lgr=i(D),N7=n(D,"LI",{});var gRe=s(N7);bbe=n(gRe,"STRONG",{});var QTt=s(bbe);igr=r(QTt,"rembert"),QTt.forEach(t),dgr=r(gRe," \u2014 "),ZW=n(gRe,"A",{href:!0});var HTt=s(ZW);cgr=r(HTt,"TFRemBertModel"),HTt.forEach(t),fgr=r(gRe," (RemBERT model)"),gRe.forEach(t),mgr=i(D),q7=n(D,"LI",{});var hRe=s(q7);vbe=n(hRe,"STRONG",{});var UTt=s(vbe);ggr=r(UTt,"roberta"),UTt.forEach(t),hgr=r(hRe," \u2014 "),eQ=n(hRe,"A",{href:!0});var JTt=s(eQ);pgr=r(JTt,"TFRobertaModel"),JTt.forEach(t),ugr=r(hRe," (RoBERTa model)"),hRe.forEach(t),_gr=i(D),j7=n(D,"LI",{});var pRe=s(j7);Fbe=n(pRe,"STRONG",{});var YTt=s(Fbe);bgr=r(YTt,"roformer"),YTt.forEach(t),vgr=r(pRe," \u2014 "),oQ=n(pRe,"A",{href:!0});var KTt=s(oQ);Fgr=r(KTt,"TFRoFormerModel"),KTt.forEach(t),Tgr=r(pRe," (RoFormer model)"),pRe.forEach(t),Mgr=i(D),D7=n(D,"LI",{});var uRe=s(D7);Tbe=n(uRe,"STRONG",{});var ZTt=s(Tbe);Egr=r(ZTt,"speech_to_text"),ZTt.forEach(t),Cgr=r(uRe," \u2014 "),rQ=n(uRe,"A",{href:!0});var e7t=s(rQ);wgr=r(e7t,"TFSpeech2TextModel"),e7t.forEach(t),Agr=r(uRe," (Speech2Text model)"),uRe.forEach(t),ygr=i(D),G7=n(D,"LI",{});var _Re=s(G7);Mbe=n(_Re,"STRONG",{});var o7t=s(Mbe);Lgr=r(o7t,"swin"),o7t.forEach(t),xgr=r(_Re," \u2014 "),tQ=n(_Re,"A",{href:!0});var r7t=s(tQ);$gr=r(r7t,"TFSwinModel"),r7t.forEach(t),kgr=r(_Re," (Swin model)"),_Re.forEach(t),Sgr=i(D),O7=n(D,"LI",{});var bRe=s(O7);Ebe=n(bRe,"STRONG",{});var t7t=s(Ebe);Rgr=r(t7t,"t5"),t7t.forEach(t),Pgr=r(bRe," \u2014 "),aQ=n(bRe,"A",{href:!0});var a7t=s(aQ);Bgr=r(a7t,"TFT5Model"),a7t.forEach(t),Igr=r(bRe," (T5 model)"),bRe.forEach(t),Ngr=i(D),V7=n(D,"LI",{});var vRe=s(V7);Cbe=n(vRe,"STRONG",{});var n7t=s(Cbe);qgr=r(n7t,"tapas"),n7t.forEach(t),jgr=r(vRe," \u2014 "),nQ=n(vRe,"A",{href:!0});var s7t=s(nQ);Dgr=r(s7t,"TFTapasModel"),s7t.forEach(t),Ggr=r(vRe," (TAPAS model)"),vRe.forEach(t),Ogr=i(D),X7=n(D,"LI",{});var FRe=s(X7);wbe=n(FRe,"STRONG",{});var l7t=s(wbe);Vgr=r(l7t,"transfo-xl"),l7t.forEach(t),Xgr=r(FRe," \u2014 "),sQ=n(FRe,"A",{href:!0});var i7t=s(sQ);zgr=r(i7t,"TFTransfoXLModel"),i7t.forEach(t),Wgr=r(FRe," (Transformer-XL model)"),FRe.forEach(t),Qgr=i(D),z7=n(D,"LI",{});var TRe=s(z7);Abe=n(TRe,"STRONG",{});var d7t=s(Abe);Hgr=r(d7t,"vit"),d7t.forEach(t),Ugr=r(TRe," \u2014 "),lQ=n(TRe,"A",{href:!0});var c7t=s(lQ);Jgr=r(c7t,"TFViTModel"),c7t.forEach(t),Ygr=r(TRe," (ViT model)"),TRe.forEach(t),Kgr=i(D),W7=n(D,"LI",{});var MRe=s(W7);ybe=n(MRe,"STRONG",{});var f7t=s(ybe);Zgr=r(f7t,"vit_mae"),f7t.forEach(t),ehr=r(MRe," \u2014 "),iQ=n(MRe,"A",{href:!0});var m7t=s(iQ);ohr=r(m7t,"TFViTMAEModel"),m7t.forEach(t),rhr=r(MRe," (ViTMAE model)"),MRe.forEach(t),thr=i(D),Q7=n(D,"LI",{});var ERe=s(Q7);Lbe=n(ERe,"STRONG",{});var g7t=s(Lbe);ahr=r(g7t,"wav2vec2"),g7t.forEach(t),nhr=r(ERe," \u2014 "),dQ=n(ERe,"A",{href:!0});var h7t=s(dQ);shr=r(h7t,"TFWav2Vec2Model"),h7t.forEach(t),lhr=r(ERe," (Wav2Vec2 model)"),ERe.forEach(t),ihr=i(D),H7=n(D,"LI",{});var CRe=s(H7);xbe=n(CRe,"STRONG",{});var p7t=s(xbe);dhr=r(p7t,"xlm"),p7t.forEach(t),chr=r(CRe," \u2014 "),cQ=n(CRe,"A",{href:!0});var u7t=s(cQ);fhr=r(u7t,"TFXLMModel"),u7t.forEach(t),mhr=r(CRe," (XLM model)"),CRe.forEach(t),ghr=i(D),U7=n(D,"LI",{});var wRe=s(U7);$be=n(wRe,"STRONG",{});var _7t=s($be);hhr=r(_7t,"xlm-roberta"),_7t.forEach(t),phr=r(wRe," \u2014 "),fQ=n(wRe,"A",{href:!0});var b7t=s(fQ);uhr=r(b7t,"TFXLMRobertaModel"),b7t.forEach(t),_hr=r(wRe," (XLM-RoBERTa model)"),wRe.forEach(t),bhr=i(D),J7=n(D,"LI",{});var ARe=s(J7);kbe=n(ARe,"STRONG",{});var v7t=s(kbe);vhr=r(v7t,"xlnet"),v7t.forEach(t),Fhr=r(ARe," \u2014 "),mQ=n(ARe,"A",{href:!0});var F7t=s(mQ);Thr=r(F7t,"TFXLNetModel"),F7t.forEach(t),Mhr=r(ARe," (XLNet model)"),ARe.forEach(t),D.forEach(t),Ehr=i(pl),T(Y7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Aje=i(f),zd=n(f,"H2",{class:!0});var SGe=s(zd);K7=n(SGe,"A",{id:!0,class:!0,href:!0});var T7t=s(K7);Sbe=n(T7t,"SPAN",{});var M7t=s(Sbe);T(b8.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),Chr=i(SGe),Rbe=n(SGe,"SPAN",{});var E7t=s(Rbe);whr=r(E7t,"TFAutoModelForPreTraining"),E7t.forEach(t),SGe.forEach(t),yje=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(v8.$$.fragment,ul),Ahr=i(ul),Wd=n(ul,"P",{});var Mee=s(Wd);yhr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gQ=n(Mee,"A",{href:!0});var C7t=s(gQ);Lhr=r(C7t,"from_pretrained()"),C7t.forEach(t),xhr=r(Mee," class method or the "),hQ=n(Mee,"A",{href:!0});var w7t=s(hQ);$hr=r(w7t,"from_config()"),w7t.forEach(t),khr=r(Mee,` class
method.`),Mee.forEach(t),Shr=i(ul),F8=n(ul,"P",{});var RGe=s(F8);Rhr=r(RGe,"This class cannot be instantiated directly using "),Pbe=n(RGe,"CODE",{});var A7t=s(Pbe);Phr=r(A7t,"__init__()"),A7t.forEach(t),Bhr=r(RGe," (throws an error)."),RGe.forEach(t),Ihr=i(ul),Lt=n(ul,"DIV",{class:!0});var k6=s(Lt);T(T8.$$.fragment,k6),Nhr=i(k6),Bbe=n(k6,"P",{});var y7t=s(Bbe);qhr=r(y7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y7t.forEach(t),jhr=i(k6),Qd=n(k6,"P",{});var Eee=s(Qd);Dhr=r(Eee,`Note:
Loading a model from its configuration file does `),Ibe=n(Eee,"STRONG",{});var L7t=s(Ibe);Ghr=r(L7t,"not"),L7t.forEach(t),Ohr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(Eee,"A",{href:!0});var x7t=s(pQ);Vhr=r(x7t,"from_pretrained()"),x7t.forEach(t),Xhr=r(Eee," to load the model weights."),Eee.forEach(t),zhr=i(k6),T(Z7.$$.fragment,k6),k6.forEach(t),Whr=i(ul),Ar=n(ul,"DIV",{class:!0});var _l=s(Ar);T(M8.$$.fragment,_l),Qhr=i(_l),Nbe=n(_l,"P",{});var $7t=s(Nbe);Hhr=r($7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$7t.forEach(t),Uhr=i(_l),Za=n(_l,"P",{});var S6=s(Za);Jhr=r(S6,"The model class to instantiate is selected based on the "),qbe=n(S6,"CODE",{});var k7t=s(qbe);Yhr=r(k7t,"model_type"),k7t.forEach(t),Khr=r(S6,` property of the config object (either
passed as an argument or loaded from `),jbe=n(S6,"CODE",{});var S7t=s(jbe);Zhr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),epr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(S6,"CODE",{});var R7t=s(Dbe);opr=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),rpr=r(S6,":"),S6.forEach(t),tpr=i(_l),se=n(_l,"UL",{});var le=s(se);eM=n(le,"LI",{});var yRe=s(eM);Gbe=n(yRe,"STRONG",{});var P7t=s(Gbe);apr=r(P7t,"albert"),P7t.forEach(t),npr=r(yRe," \u2014 "),uQ=n(yRe,"A",{href:!0});var B7t=s(uQ);spr=r(B7t,"TFAlbertForPreTraining"),B7t.forEach(t),lpr=r(yRe," (ALBERT model)"),yRe.forEach(t),ipr=i(le),oM=n(le,"LI",{});var LRe=s(oM);Obe=n(LRe,"STRONG",{});var I7t=s(Obe);dpr=r(I7t,"bart"),I7t.forEach(t),cpr=r(LRe," \u2014 "),_Q=n(LRe,"A",{href:!0});var N7t=s(_Q);fpr=r(N7t,"TFBartForConditionalGeneration"),N7t.forEach(t),mpr=r(LRe," (BART model)"),LRe.forEach(t),gpr=i(le),rM=n(le,"LI",{});var xRe=s(rM);Vbe=n(xRe,"STRONG",{});var q7t=s(Vbe);hpr=r(q7t,"bert"),q7t.forEach(t),ppr=r(xRe," \u2014 "),bQ=n(xRe,"A",{href:!0});var j7t=s(bQ);upr=r(j7t,"TFBertForPreTraining"),j7t.forEach(t),_pr=r(xRe," (BERT model)"),xRe.forEach(t),bpr=i(le),tM=n(le,"LI",{});var $Re=s(tM);Xbe=n($Re,"STRONG",{});var D7t=s(Xbe);vpr=r(D7t,"camembert"),D7t.forEach(t),Fpr=r($Re," \u2014 "),vQ=n($Re,"A",{href:!0});var G7t=s(vQ);Tpr=r(G7t,"TFCamembertForMaskedLM"),G7t.forEach(t),Mpr=r($Re," (CamemBERT model)"),$Re.forEach(t),Epr=i(le),aM=n(le,"LI",{});var kRe=s(aM);zbe=n(kRe,"STRONG",{});var O7t=s(zbe);Cpr=r(O7t,"ctrl"),O7t.forEach(t),wpr=r(kRe," \u2014 "),FQ=n(kRe,"A",{href:!0});var V7t=s(FQ);Apr=r(V7t,"TFCTRLLMHeadModel"),V7t.forEach(t),ypr=r(kRe," (CTRL model)"),kRe.forEach(t),Lpr=i(le),nM=n(le,"LI",{});var SRe=s(nM);Wbe=n(SRe,"STRONG",{});var X7t=s(Wbe);xpr=r(X7t,"distilbert"),X7t.forEach(t),$pr=r(SRe," \u2014 "),TQ=n(SRe,"A",{href:!0});var z7t=s(TQ);kpr=r(z7t,"TFDistilBertForMaskedLM"),z7t.forEach(t),Spr=r(SRe," (DistilBERT model)"),SRe.forEach(t),Rpr=i(le),sM=n(le,"LI",{});var RRe=s(sM);Qbe=n(RRe,"STRONG",{});var W7t=s(Qbe);Ppr=r(W7t,"electra"),W7t.forEach(t),Bpr=r(RRe," \u2014 "),MQ=n(RRe,"A",{href:!0});var Q7t=s(MQ);Ipr=r(Q7t,"TFElectraForPreTraining"),Q7t.forEach(t),Npr=r(RRe," (ELECTRA model)"),RRe.forEach(t),qpr=i(le),lM=n(le,"LI",{});var PRe=s(lM);Hbe=n(PRe,"STRONG",{});var H7t=s(Hbe);jpr=r(H7t,"flaubert"),H7t.forEach(t),Dpr=r(PRe," \u2014 "),EQ=n(PRe,"A",{href:!0});var U7t=s(EQ);Gpr=r(U7t,"TFFlaubertWithLMHeadModel"),U7t.forEach(t),Opr=r(PRe," (FlauBERT model)"),PRe.forEach(t),Vpr=i(le),iM=n(le,"LI",{});var BRe=s(iM);Ube=n(BRe,"STRONG",{});var J7t=s(Ube);Xpr=r(J7t,"funnel"),J7t.forEach(t),zpr=r(BRe," \u2014 "),CQ=n(BRe,"A",{href:!0});var Y7t=s(CQ);Wpr=r(Y7t,"TFFunnelForPreTraining"),Y7t.forEach(t),Qpr=r(BRe," (Funnel Transformer model)"),BRe.forEach(t),Hpr=i(le),dM=n(le,"LI",{});var IRe=s(dM);Jbe=n(IRe,"STRONG",{});var K7t=s(Jbe);Upr=r(K7t,"gpt2"),K7t.forEach(t),Jpr=r(IRe," \u2014 "),wQ=n(IRe,"A",{href:!0});var Z7t=s(wQ);Ypr=r(Z7t,"TFGPT2LMHeadModel"),Z7t.forEach(t),Kpr=r(IRe," (OpenAI GPT-2 model)"),IRe.forEach(t),Zpr=i(le),cM=n(le,"LI",{});var NRe=s(cM);Ybe=n(NRe,"STRONG",{});var eMt=s(Ybe);eur=r(eMt,"layoutlm"),eMt.forEach(t),our=r(NRe," \u2014 "),AQ=n(NRe,"A",{href:!0});var oMt=s(AQ);rur=r(oMt,"TFLayoutLMForMaskedLM"),oMt.forEach(t),tur=r(NRe," (LayoutLM model)"),NRe.forEach(t),aur=i(le),fM=n(le,"LI",{});var qRe=s(fM);Kbe=n(qRe,"STRONG",{});var rMt=s(Kbe);nur=r(rMt,"lxmert"),rMt.forEach(t),sur=r(qRe," \u2014 "),yQ=n(qRe,"A",{href:!0});var tMt=s(yQ);lur=r(tMt,"TFLxmertForPreTraining"),tMt.forEach(t),iur=r(qRe," (LXMERT model)"),qRe.forEach(t),dur=i(le),mM=n(le,"LI",{});var jRe=s(mM);Zbe=n(jRe,"STRONG",{});var aMt=s(Zbe);cur=r(aMt,"mobilebert"),aMt.forEach(t),fur=r(jRe," \u2014 "),LQ=n(jRe,"A",{href:!0});var nMt=s(LQ);mur=r(nMt,"TFMobileBertForPreTraining"),nMt.forEach(t),gur=r(jRe," (MobileBERT model)"),jRe.forEach(t),hur=i(le),gM=n(le,"LI",{});var DRe=s(gM);e2e=n(DRe,"STRONG",{});var sMt=s(e2e);pur=r(sMt,"mpnet"),sMt.forEach(t),uur=r(DRe," \u2014 "),xQ=n(DRe,"A",{href:!0});var lMt=s(xQ);_ur=r(lMt,"TFMPNetForMaskedLM"),lMt.forEach(t),bur=r(DRe," (MPNet model)"),DRe.forEach(t),vur=i(le),hM=n(le,"LI",{});var GRe=s(hM);o2e=n(GRe,"STRONG",{});var iMt=s(o2e);Fur=r(iMt,"openai-gpt"),iMt.forEach(t),Tur=r(GRe," \u2014 "),$Q=n(GRe,"A",{href:!0});var dMt=s($Q);Mur=r(dMt,"TFOpenAIGPTLMHeadModel"),dMt.forEach(t),Eur=r(GRe," (OpenAI GPT model)"),GRe.forEach(t),Cur=i(le),pM=n(le,"LI",{});var ORe=s(pM);r2e=n(ORe,"STRONG",{});var cMt=s(r2e);wur=r(cMt,"roberta"),cMt.forEach(t),Aur=r(ORe," \u2014 "),kQ=n(ORe,"A",{href:!0});var fMt=s(kQ);yur=r(fMt,"TFRobertaForMaskedLM"),fMt.forEach(t),Lur=r(ORe," (RoBERTa model)"),ORe.forEach(t),xur=i(le),uM=n(le,"LI",{});var VRe=s(uM);t2e=n(VRe,"STRONG",{});var mMt=s(t2e);$ur=r(mMt,"t5"),mMt.forEach(t),kur=r(VRe," \u2014 "),SQ=n(VRe,"A",{href:!0});var gMt=s(SQ);Sur=r(gMt,"TFT5ForConditionalGeneration"),gMt.forEach(t),Rur=r(VRe," (T5 model)"),VRe.forEach(t),Pur=i(le),_M=n(le,"LI",{});var XRe=s(_M);a2e=n(XRe,"STRONG",{});var hMt=s(a2e);Bur=r(hMt,"tapas"),hMt.forEach(t),Iur=r(XRe," \u2014 "),RQ=n(XRe,"A",{href:!0});var pMt=s(RQ);Nur=r(pMt,"TFTapasForMaskedLM"),pMt.forEach(t),qur=r(XRe," (TAPAS model)"),XRe.forEach(t),jur=i(le),bM=n(le,"LI",{});var zRe=s(bM);n2e=n(zRe,"STRONG",{});var uMt=s(n2e);Dur=r(uMt,"transfo-xl"),uMt.forEach(t),Gur=r(zRe," \u2014 "),PQ=n(zRe,"A",{href:!0});var _Mt=s(PQ);Our=r(_Mt,"TFTransfoXLLMHeadModel"),_Mt.forEach(t),Vur=r(zRe," (Transformer-XL model)"),zRe.forEach(t),Xur=i(le),vM=n(le,"LI",{});var WRe=s(vM);s2e=n(WRe,"STRONG",{});var bMt=s(s2e);zur=r(bMt,"vit_mae"),bMt.forEach(t),Wur=r(WRe," \u2014 "),BQ=n(WRe,"A",{href:!0});var vMt=s(BQ);Qur=r(vMt,"TFViTMAEForPreTraining"),vMt.forEach(t),Hur=r(WRe," (ViTMAE model)"),WRe.forEach(t),Uur=i(le),FM=n(le,"LI",{});var QRe=s(FM);l2e=n(QRe,"STRONG",{});var FMt=s(l2e);Jur=r(FMt,"xlm"),FMt.forEach(t),Yur=r(QRe," \u2014 "),IQ=n(QRe,"A",{href:!0});var TMt=s(IQ);Kur=r(TMt,"TFXLMWithLMHeadModel"),TMt.forEach(t),Zur=r(QRe," (XLM model)"),QRe.forEach(t),e_r=i(le),TM=n(le,"LI",{});var HRe=s(TM);i2e=n(HRe,"STRONG",{});var MMt=s(i2e);o_r=r(MMt,"xlm-roberta"),MMt.forEach(t),r_r=r(HRe," \u2014 "),NQ=n(HRe,"A",{href:!0});var EMt=s(NQ);t_r=r(EMt,"TFXLMRobertaForMaskedLM"),EMt.forEach(t),a_r=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),n_r=i(le),MM=n(le,"LI",{});var URe=s(MM);d2e=n(URe,"STRONG",{});var CMt=s(d2e);s_r=r(CMt,"xlnet"),CMt.forEach(t),l_r=r(URe," \u2014 "),qQ=n(URe,"A",{href:!0});var wMt=s(qQ);i_r=r(wMt,"TFXLNetLMHeadModel"),wMt.forEach(t),d_r=r(URe," (XLNet model)"),URe.forEach(t),le.forEach(t),c_r=i(_l),T(EM.$$.fragment,_l),_l.forEach(t),ul.forEach(t),Lje=i(f),Hd=n(f,"H2",{class:!0});var PGe=s(Hd);CM=n(PGe,"A",{id:!0,class:!0,href:!0});var AMt=s(CM);c2e=n(AMt,"SPAN",{});var yMt=s(c2e);T(E8.$$.fragment,yMt),yMt.forEach(t),AMt.forEach(t),f_r=i(PGe),f2e=n(PGe,"SPAN",{});var LMt=s(f2e);m_r=r(LMt,"TFAutoModelForCausalLM"),LMt.forEach(t),PGe.forEach(t),xje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(C8.$$.fragment,bl),g_r=i(bl),Ud=n(bl,"P",{});var Cee=s(Ud);h_r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jQ=n(Cee,"A",{href:!0});var xMt=s(jQ);p_r=r(xMt,"from_pretrained()"),xMt.forEach(t),u_r=r(Cee," class method or the "),DQ=n(Cee,"A",{href:!0});var $Mt=s(DQ);__r=r($Mt,"from_config()"),$Mt.forEach(t),b_r=r(Cee,` class
method.`),Cee.forEach(t),v_r=i(bl),w8=n(bl,"P",{});var BGe=s(w8);F_r=r(BGe,"This class cannot be instantiated directly using "),m2e=n(BGe,"CODE",{});var kMt=s(m2e);T_r=r(kMt,"__init__()"),kMt.forEach(t),M_r=r(BGe," (throws an error)."),BGe.forEach(t),E_r=i(bl),xt=n(bl,"DIV",{class:!0});var R6=s(xt);T(A8.$$.fragment,R6),C_r=i(R6),g2e=n(R6,"P",{});var SMt=s(g2e);w_r=r(SMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SMt.forEach(t),A_r=i(R6),Jd=n(R6,"P",{});var wee=s(Jd);y_r=r(wee,`Note:
Loading a model from its configuration file does `),h2e=n(wee,"STRONG",{});var RMt=s(h2e);L_r=r(RMt,"not"),RMt.forEach(t),x_r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(wee,"A",{href:!0});var PMt=s(GQ);$_r=r(PMt,"from_pretrained()"),PMt.forEach(t),k_r=r(wee," to load the model weights."),wee.forEach(t),S_r=i(R6),T(wM.$$.fragment,R6),R6.forEach(t),R_r=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(y8.$$.fragment,vl),P_r=i(vl),p2e=n(vl,"P",{});var BMt=s(p2e);B_r=r(BMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BMt.forEach(t),I_r=i(vl),en=n(vl,"P",{});var P6=s(en);N_r=r(P6,"The model class to instantiate is selected based on the "),u2e=n(P6,"CODE",{});var IMt=s(u2e);q_r=r(IMt,"model_type"),IMt.forEach(t),j_r=r(P6,` property of the config object (either
passed as an argument or loaded from `),_2e=n(P6,"CODE",{});var NMt=s(_2e);D_r=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),G_r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n(P6,"CODE",{});var qMt=s(b2e);O_r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),V_r=r(P6,":"),P6.forEach(t),X_r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);AM=n(Ce,"LI",{});var JRe=s(AM);v2e=n(JRe,"STRONG",{});var jMt=s(v2e);z_r=r(jMt,"bert"),jMt.forEach(t),W_r=r(JRe," \u2014 "),OQ=n(JRe,"A",{href:!0});var DMt=s(OQ);Q_r=r(DMt,"TFBertLMHeadModel"),DMt.forEach(t),H_r=r(JRe," (BERT model)"),JRe.forEach(t),U_r=i(Ce),yM=n(Ce,"LI",{});var YRe=s(yM);F2e=n(YRe,"STRONG",{});var GMt=s(F2e);J_r=r(GMt,"camembert"),GMt.forEach(t),Y_r=r(YRe," \u2014 "),VQ=n(YRe,"A",{href:!0});var OMt=s(VQ);K_r=r(OMt,"TFCamembertForCausalLM"),OMt.forEach(t),Z_r=r(YRe," (CamemBERT model)"),YRe.forEach(t),e1r=i(Ce),LM=n(Ce,"LI",{});var KRe=s(LM);T2e=n(KRe,"STRONG",{});var VMt=s(T2e);o1r=r(VMt,"ctrl"),VMt.forEach(t),r1r=r(KRe," \u2014 "),XQ=n(KRe,"A",{href:!0});var XMt=s(XQ);t1r=r(XMt,"TFCTRLLMHeadModel"),XMt.forEach(t),a1r=r(KRe," (CTRL model)"),KRe.forEach(t),n1r=i(Ce),xM=n(Ce,"LI",{});var ZRe=s(xM);M2e=n(ZRe,"STRONG",{});var zMt=s(M2e);s1r=r(zMt,"gpt2"),zMt.forEach(t),l1r=r(ZRe," \u2014 "),zQ=n(ZRe,"A",{href:!0});var WMt=s(zQ);i1r=r(WMt,"TFGPT2LMHeadModel"),WMt.forEach(t),d1r=r(ZRe," (OpenAI GPT-2 model)"),ZRe.forEach(t),c1r=i(Ce),$M=n(Ce,"LI",{});var ePe=s($M);E2e=n(ePe,"STRONG",{});var QMt=s(E2e);f1r=r(QMt,"gptj"),QMt.forEach(t),m1r=r(ePe," \u2014 "),WQ=n(ePe,"A",{href:!0});var HMt=s(WQ);g1r=r(HMt,"TFGPTJForCausalLM"),HMt.forEach(t),h1r=r(ePe," (GPT-J model)"),ePe.forEach(t),p1r=i(Ce),kM=n(Ce,"LI",{});var oPe=s(kM);C2e=n(oPe,"STRONG",{});var UMt=s(C2e);u1r=r(UMt,"openai-gpt"),UMt.forEach(t),_1r=r(oPe," \u2014 "),QQ=n(oPe,"A",{href:!0});var JMt=s(QQ);b1r=r(JMt,"TFOpenAIGPTLMHeadModel"),JMt.forEach(t),v1r=r(oPe," (OpenAI GPT model)"),oPe.forEach(t),F1r=i(Ce),SM=n(Ce,"LI",{});var rPe=s(SM);w2e=n(rPe,"STRONG",{});var YMt=s(w2e);T1r=r(YMt,"rembert"),YMt.forEach(t),M1r=r(rPe," \u2014 "),HQ=n(rPe,"A",{href:!0});var KMt=s(HQ);E1r=r(KMt,"TFRemBertForCausalLM"),KMt.forEach(t),C1r=r(rPe," (RemBERT model)"),rPe.forEach(t),w1r=i(Ce),RM=n(Ce,"LI",{});var tPe=s(RM);A2e=n(tPe,"STRONG",{});var ZMt=s(A2e);A1r=r(ZMt,"roberta"),ZMt.forEach(t),y1r=r(tPe," \u2014 "),UQ=n(tPe,"A",{href:!0});var e4t=s(UQ);L1r=r(e4t,"TFRobertaForCausalLM"),e4t.forEach(t),x1r=r(tPe," (RoBERTa model)"),tPe.forEach(t),$1r=i(Ce),PM=n(Ce,"LI",{});var aPe=s(PM);y2e=n(aPe,"STRONG",{});var o4t=s(y2e);k1r=r(o4t,"roformer"),o4t.forEach(t),S1r=r(aPe," \u2014 "),JQ=n(aPe,"A",{href:!0});var r4t=s(JQ);R1r=r(r4t,"TFRoFormerForCausalLM"),r4t.forEach(t),P1r=r(aPe," (RoFormer model)"),aPe.forEach(t),B1r=i(Ce),BM=n(Ce,"LI",{});var nPe=s(BM);L2e=n(nPe,"STRONG",{});var t4t=s(L2e);I1r=r(t4t,"transfo-xl"),t4t.forEach(t),N1r=r(nPe," \u2014 "),YQ=n(nPe,"A",{href:!0});var a4t=s(YQ);q1r=r(a4t,"TFTransfoXLLMHeadModel"),a4t.forEach(t),j1r=r(nPe," (Transformer-XL model)"),nPe.forEach(t),D1r=i(Ce),IM=n(Ce,"LI",{});var sPe=s(IM);x2e=n(sPe,"STRONG",{});var n4t=s(x2e);G1r=r(n4t,"xlm"),n4t.forEach(t),O1r=r(sPe," \u2014 "),KQ=n(sPe,"A",{href:!0});var s4t=s(KQ);V1r=r(s4t,"TFXLMWithLMHeadModel"),s4t.forEach(t),X1r=r(sPe," (XLM model)"),sPe.forEach(t),z1r=i(Ce),NM=n(Ce,"LI",{});var lPe=s(NM);$2e=n(lPe,"STRONG",{});var l4t=s($2e);W1r=r(l4t,"xlnet"),l4t.forEach(t),Q1r=r(lPe," \u2014 "),ZQ=n(lPe,"A",{href:!0});var i4t=s(ZQ);H1r=r(i4t,"TFXLNetLMHeadModel"),i4t.forEach(t),U1r=r(lPe," (XLNet model)"),lPe.forEach(t),Ce.forEach(t),J1r=i(vl),T(qM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),$je=i(f),Yd=n(f,"H2",{class:!0});var IGe=s(Yd);jM=n(IGe,"A",{id:!0,class:!0,href:!0});var d4t=s(jM);k2e=n(d4t,"SPAN",{});var c4t=s(k2e);T(L8.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),Y1r=i(IGe),S2e=n(IGe,"SPAN",{});var f4t=s(S2e);K1r=r(f4t,"TFAutoModelForImageClassification"),f4t.forEach(t),IGe.forEach(t),kje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(x8.$$.fragment,Fl),Z1r=i(Fl),Kd=n(Fl,"P",{});var Aee=s(Kd);e3r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eH=n(Aee,"A",{href:!0});var m4t=s(eH);o3r=r(m4t,"from_pretrained()"),m4t.forEach(t),r3r=r(Aee," class method or the "),oH=n(Aee,"A",{href:!0});var g4t=s(oH);t3r=r(g4t,"from_config()"),g4t.forEach(t),a3r=r(Aee,` class
method.`),Aee.forEach(t),n3r=i(Fl),$8=n(Fl,"P",{});var NGe=s($8);s3r=r(NGe,"This class cannot be instantiated directly using "),R2e=n(NGe,"CODE",{});var h4t=s(R2e);l3r=r(h4t,"__init__()"),h4t.forEach(t),i3r=r(NGe," (throws an error)."),NGe.forEach(t),d3r=i(Fl),$t=n(Fl,"DIV",{class:!0});var B6=s($t);T(k8.$$.fragment,B6),c3r=i(B6),P2e=n(B6,"P",{});var p4t=s(P2e);f3r=r(p4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p4t.forEach(t),m3r=i(B6),Zd=n(B6,"P",{});var yee=s(Zd);g3r=r(yee,`Note:
Loading a model from its configuration file does `),B2e=n(yee,"STRONG",{});var u4t=s(B2e);h3r=r(u4t,"not"),u4t.forEach(t),p3r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(yee,"A",{href:!0});var _4t=s(rH);u3r=r(_4t,"from_pretrained()"),_4t.forEach(t),_3r=r(yee," to load the model weights."),yee.forEach(t),b3r=i(B6),T(DM.$$.fragment,B6),B6.forEach(t),v3r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(S8.$$.fragment,Tl),F3r=i(Tl),I2e=n(Tl,"P",{});var b4t=s(I2e);T3r=r(b4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),b4t.forEach(t),M3r=i(Tl),on=n(Tl,"P",{});var I6=s(on);E3r=r(I6,"The model class to instantiate is selected based on the "),N2e=n(I6,"CODE",{});var v4t=s(N2e);C3r=r(v4t,"model_type"),v4t.forEach(t),w3r=r(I6,` property of the config object (either
passed as an argument or loaded from `),q2e=n(I6,"CODE",{});var F4t=s(q2e);A3r=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),y3r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(I6,"CODE",{});var T4t=s(j2e);L3r=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),x3r=r(I6,":"),I6.forEach(t),$3r=i(Tl),rn=n(Tl,"UL",{});var N6=s(rn);GM=n(N6,"LI",{});var iPe=s(GM);D2e=n(iPe,"STRONG",{});var M4t=s(D2e);k3r=r(M4t,"convnext"),M4t.forEach(t),S3r=r(iPe," \u2014 "),tH=n(iPe,"A",{href:!0});var E4t=s(tH);R3r=r(E4t,"TFConvNextForImageClassification"),E4t.forEach(t),P3r=r(iPe," (ConvNext model)"),iPe.forEach(t),B3r=i(N6),OM=n(N6,"LI",{});var dPe=s(OM);G2e=n(dPe,"STRONG",{});var C4t=s(G2e);I3r=r(C4t,"data2vec-vision"),C4t.forEach(t),N3r=r(dPe," \u2014 "),aH=n(dPe,"A",{href:!0});var w4t=s(aH);q3r=r(w4t,"TFData2VecVisionForImageClassification"),w4t.forEach(t),j3r=r(dPe," (Data2VecVision model)"),dPe.forEach(t),D3r=i(N6),VM=n(N6,"LI",{});var cPe=s(VM);O2e=n(cPe,"STRONG",{});var A4t=s(O2e);G3r=r(A4t,"swin"),A4t.forEach(t),O3r=r(cPe," \u2014 "),nH=n(cPe,"A",{href:!0});var y4t=s(nH);V3r=r(y4t,"TFSwinForImageClassification"),y4t.forEach(t),X3r=r(cPe," (Swin model)"),cPe.forEach(t),z3r=i(N6),XM=n(N6,"LI",{});var fPe=s(XM);V2e=n(fPe,"STRONG",{});var L4t=s(V2e);W3r=r(L4t,"vit"),L4t.forEach(t),Q3r=r(fPe," \u2014 "),sH=n(fPe,"A",{href:!0});var x4t=s(sH);H3r=r(x4t,"TFViTForImageClassification"),x4t.forEach(t),U3r=r(fPe," (ViT model)"),fPe.forEach(t),N6.forEach(t),J3r=i(Tl),T(zM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Sje=i(f),ec=n(f,"H2",{class:!0});var qGe=s(ec);WM=n(qGe,"A",{id:!0,class:!0,href:!0});var $4t=s(WM);X2e=n($4t,"SPAN",{});var k4t=s(X2e);T(R8.$$.fragment,k4t),k4t.forEach(t),$4t.forEach(t),Y3r=i(qGe),z2e=n(qGe,"SPAN",{});var S4t=s(z2e);K3r=r(S4t,"TFAutoModelForMaskedLM"),S4t.forEach(t),qGe.forEach(t),Rje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(P8.$$.fragment,Ml),Z3r=i(Ml),oc=n(Ml,"P",{});var Lee=s(oc);ebr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lH=n(Lee,"A",{href:!0});var R4t=s(lH);obr=r(R4t,"from_pretrained()"),R4t.forEach(t),rbr=r(Lee," class method or the "),iH=n(Lee,"A",{href:!0});var P4t=s(iH);tbr=r(P4t,"from_config()"),P4t.forEach(t),abr=r(Lee,` class
method.`),Lee.forEach(t),nbr=i(Ml),B8=n(Ml,"P",{});var jGe=s(B8);sbr=r(jGe,"This class cannot be instantiated directly using "),W2e=n(jGe,"CODE",{});var B4t=s(W2e);lbr=r(B4t,"__init__()"),B4t.forEach(t),ibr=r(jGe," (throws an error)."),jGe.forEach(t),dbr=i(Ml),kt=n(Ml,"DIV",{class:!0});var q6=s(kt);T(I8.$$.fragment,q6),cbr=i(q6),Q2e=n(q6,"P",{});var I4t=s(Q2e);fbr=r(I4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I4t.forEach(t),mbr=i(q6),rc=n(q6,"P",{});var xee=s(rc);gbr=r(xee,`Note:
Loading a model from its configuration file does `),H2e=n(xee,"STRONG",{});var N4t=s(H2e);hbr=r(N4t,"not"),N4t.forEach(t),pbr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(xee,"A",{href:!0});var q4t=s(dH);ubr=r(q4t,"from_pretrained()"),q4t.forEach(t),_br=r(xee," to load the model weights."),xee.forEach(t),bbr=i(q6),T(QM.$$.fragment,q6),q6.forEach(t),vbr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(N8.$$.fragment,El),Fbr=i(El),U2e=n(El,"P",{});var j4t=s(U2e);Tbr=r(j4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j4t.forEach(t),Mbr=i(El),tn=n(El,"P",{});var j6=s(tn);Ebr=r(j6,"The model class to instantiate is selected based on the "),J2e=n(j6,"CODE",{});var D4t=s(J2e);Cbr=r(D4t,"model_type"),D4t.forEach(t),wbr=r(j6,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(j6,"CODE",{});var G4t=s(Y2e);Abr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),ybr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(j6,"CODE",{});var O4t=s(K2e);Lbr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),xbr=r(j6,":"),j6.forEach(t),$br=i(El),ie=n(El,"UL",{});var fe=s(ie);HM=n(fe,"LI",{});var mPe=s(HM);Z2e=n(mPe,"STRONG",{});var V4t=s(Z2e);kbr=r(V4t,"albert"),V4t.forEach(t),Sbr=r(mPe," \u2014 "),cH=n(mPe,"A",{href:!0});var X4t=s(cH);Rbr=r(X4t,"TFAlbertForMaskedLM"),X4t.forEach(t),Pbr=r(mPe," (ALBERT model)"),mPe.forEach(t),Bbr=i(fe),UM=n(fe,"LI",{});var gPe=s(UM);eve=n(gPe,"STRONG",{});var z4t=s(eve);Ibr=r(z4t,"bert"),z4t.forEach(t),Nbr=r(gPe," \u2014 "),fH=n(gPe,"A",{href:!0});var W4t=s(fH);qbr=r(W4t,"TFBertForMaskedLM"),W4t.forEach(t),jbr=r(gPe," (BERT model)"),gPe.forEach(t),Dbr=i(fe),JM=n(fe,"LI",{});var hPe=s(JM);ove=n(hPe,"STRONG",{});var Q4t=s(ove);Gbr=r(Q4t,"camembert"),Q4t.forEach(t),Obr=r(hPe," \u2014 "),mH=n(hPe,"A",{href:!0});var H4t=s(mH);Vbr=r(H4t,"TFCamembertForMaskedLM"),H4t.forEach(t),Xbr=r(hPe," (CamemBERT model)"),hPe.forEach(t),zbr=i(fe),YM=n(fe,"LI",{});var pPe=s(YM);rve=n(pPe,"STRONG",{});var U4t=s(rve);Wbr=r(U4t,"convbert"),U4t.forEach(t),Qbr=r(pPe," \u2014 "),gH=n(pPe,"A",{href:!0});var J4t=s(gH);Hbr=r(J4t,"TFConvBertForMaskedLM"),J4t.forEach(t),Ubr=r(pPe," (ConvBERT model)"),pPe.forEach(t),Jbr=i(fe),KM=n(fe,"LI",{});var uPe=s(KM);tve=n(uPe,"STRONG",{});var Y4t=s(tve);Ybr=r(Y4t,"deberta"),Y4t.forEach(t),Kbr=r(uPe," \u2014 "),hH=n(uPe,"A",{href:!0});var K4t=s(hH);Zbr=r(K4t,"TFDebertaForMaskedLM"),K4t.forEach(t),e2r=r(uPe," (DeBERTa model)"),uPe.forEach(t),o2r=i(fe),ZM=n(fe,"LI",{});var _Pe=s(ZM);ave=n(_Pe,"STRONG",{});var Z4t=s(ave);r2r=r(Z4t,"deberta-v2"),Z4t.forEach(t),t2r=r(_Pe," \u2014 "),pH=n(_Pe,"A",{href:!0});var eEt=s(pH);a2r=r(eEt,"TFDebertaV2ForMaskedLM"),eEt.forEach(t),n2r=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),s2r=i(fe),e4=n(fe,"LI",{});var bPe=s(e4);nve=n(bPe,"STRONG",{});var oEt=s(nve);l2r=r(oEt,"distilbert"),oEt.forEach(t),i2r=r(bPe," \u2014 "),uH=n(bPe,"A",{href:!0});var rEt=s(uH);d2r=r(rEt,"TFDistilBertForMaskedLM"),rEt.forEach(t),c2r=r(bPe," (DistilBERT model)"),bPe.forEach(t),f2r=i(fe),o4=n(fe,"LI",{});var vPe=s(o4);sve=n(vPe,"STRONG",{});var tEt=s(sve);m2r=r(tEt,"electra"),tEt.forEach(t),g2r=r(vPe," \u2014 "),_H=n(vPe,"A",{href:!0});var aEt=s(_H);h2r=r(aEt,"TFElectraForMaskedLM"),aEt.forEach(t),p2r=r(vPe," (ELECTRA model)"),vPe.forEach(t),u2r=i(fe),r4=n(fe,"LI",{});var FPe=s(r4);lve=n(FPe,"STRONG",{});var nEt=s(lve);_2r=r(nEt,"flaubert"),nEt.forEach(t),b2r=r(FPe," \u2014 "),bH=n(FPe,"A",{href:!0});var sEt=s(bH);v2r=r(sEt,"TFFlaubertWithLMHeadModel"),sEt.forEach(t),F2r=r(FPe," (FlauBERT model)"),FPe.forEach(t),T2r=i(fe),t4=n(fe,"LI",{});var TPe=s(t4);ive=n(TPe,"STRONG",{});var lEt=s(ive);M2r=r(lEt,"funnel"),lEt.forEach(t),E2r=r(TPe," \u2014 "),vH=n(TPe,"A",{href:!0});var iEt=s(vH);C2r=r(iEt,"TFFunnelForMaskedLM"),iEt.forEach(t),w2r=r(TPe," (Funnel Transformer model)"),TPe.forEach(t),A2r=i(fe),a4=n(fe,"LI",{});var MPe=s(a4);dve=n(MPe,"STRONG",{});var dEt=s(dve);y2r=r(dEt,"layoutlm"),dEt.forEach(t),L2r=r(MPe," \u2014 "),FH=n(MPe,"A",{href:!0});var cEt=s(FH);x2r=r(cEt,"TFLayoutLMForMaskedLM"),cEt.forEach(t),$2r=r(MPe," (LayoutLM model)"),MPe.forEach(t),k2r=i(fe),n4=n(fe,"LI",{});var EPe=s(n4);cve=n(EPe,"STRONG",{});var fEt=s(cve);S2r=r(fEt,"longformer"),fEt.forEach(t),R2r=r(EPe," \u2014 "),TH=n(EPe,"A",{href:!0});var mEt=s(TH);P2r=r(mEt,"TFLongformerForMaskedLM"),mEt.forEach(t),B2r=r(EPe," (Longformer model)"),EPe.forEach(t),I2r=i(fe),s4=n(fe,"LI",{});var CPe=s(s4);fve=n(CPe,"STRONG",{});var gEt=s(fve);N2r=r(gEt,"mobilebert"),gEt.forEach(t),q2r=r(CPe," \u2014 "),MH=n(CPe,"A",{href:!0});var hEt=s(MH);j2r=r(hEt,"TFMobileBertForMaskedLM"),hEt.forEach(t),D2r=r(CPe," (MobileBERT model)"),CPe.forEach(t),G2r=i(fe),l4=n(fe,"LI",{});var wPe=s(l4);mve=n(wPe,"STRONG",{});var pEt=s(mve);O2r=r(pEt,"mpnet"),pEt.forEach(t),V2r=r(wPe," \u2014 "),EH=n(wPe,"A",{href:!0});var uEt=s(EH);X2r=r(uEt,"TFMPNetForMaskedLM"),uEt.forEach(t),z2r=r(wPe," (MPNet model)"),wPe.forEach(t),W2r=i(fe),i4=n(fe,"LI",{});var APe=s(i4);gve=n(APe,"STRONG",{});var _Et=s(gve);Q2r=r(_Et,"rembert"),_Et.forEach(t),H2r=r(APe," \u2014 "),CH=n(APe,"A",{href:!0});var bEt=s(CH);U2r=r(bEt,"TFRemBertForMaskedLM"),bEt.forEach(t),J2r=r(APe," (RemBERT model)"),APe.forEach(t),Y2r=i(fe),d4=n(fe,"LI",{});var yPe=s(d4);hve=n(yPe,"STRONG",{});var vEt=s(hve);K2r=r(vEt,"roberta"),vEt.forEach(t),Z2r=r(yPe," \u2014 "),wH=n(yPe,"A",{href:!0});var FEt=s(wH);evr=r(FEt,"TFRobertaForMaskedLM"),FEt.forEach(t),ovr=r(yPe," (RoBERTa model)"),yPe.forEach(t),rvr=i(fe),c4=n(fe,"LI",{});var LPe=s(c4);pve=n(LPe,"STRONG",{});var TEt=s(pve);tvr=r(TEt,"roformer"),TEt.forEach(t),avr=r(LPe," \u2014 "),AH=n(LPe,"A",{href:!0});var MEt=s(AH);nvr=r(MEt,"TFRoFormerForMaskedLM"),MEt.forEach(t),svr=r(LPe," (RoFormer model)"),LPe.forEach(t),lvr=i(fe),f4=n(fe,"LI",{});var xPe=s(f4);uve=n(xPe,"STRONG",{});var EEt=s(uve);ivr=r(EEt,"tapas"),EEt.forEach(t),dvr=r(xPe," \u2014 "),yH=n(xPe,"A",{href:!0});var CEt=s(yH);cvr=r(CEt,"TFTapasForMaskedLM"),CEt.forEach(t),fvr=r(xPe," (TAPAS model)"),xPe.forEach(t),mvr=i(fe),m4=n(fe,"LI",{});var $Pe=s(m4);_ve=n($Pe,"STRONG",{});var wEt=s(_ve);gvr=r(wEt,"xlm"),wEt.forEach(t),hvr=r($Pe," \u2014 "),LH=n($Pe,"A",{href:!0});var AEt=s(LH);pvr=r(AEt,"TFXLMWithLMHeadModel"),AEt.forEach(t),uvr=r($Pe," (XLM model)"),$Pe.forEach(t),_vr=i(fe),g4=n(fe,"LI",{});var kPe=s(g4);bve=n(kPe,"STRONG",{});var yEt=s(bve);bvr=r(yEt,"xlm-roberta"),yEt.forEach(t),vvr=r(kPe," \u2014 "),xH=n(kPe,"A",{href:!0});var LEt=s(xH);Fvr=r(LEt,"TFXLMRobertaForMaskedLM"),LEt.forEach(t),Tvr=r(kPe," (XLM-RoBERTa model)"),kPe.forEach(t),fe.forEach(t),Mvr=i(El),T(h4.$$.fragment,El),El.forEach(t),Ml.forEach(t),Pje=i(f),tc=n(f,"H2",{class:!0});var DGe=s(tc);p4=n(DGe,"A",{id:!0,class:!0,href:!0});var xEt=s(p4);vve=n(xEt,"SPAN",{});var $Et=s(vve);T(q8.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),Evr=i(DGe),Fve=n(DGe,"SPAN",{});var kEt=s(Fve);Cvr=r(kEt,"TFAutoModelForSeq2SeqLM"),kEt.forEach(t),DGe.forEach(t),Bje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(j8.$$.fragment,Cl),wvr=i(Cl),ac=n(Cl,"P",{});var $ee=s(ac);Avr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$H=n($ee,"A",{href:!0});var SEt=s($H);yvr=r(SEt,"from_pretrained()"),SEt.forEach(t),Lvr=r($ee," class method or the "),kH=n($ee,"A",{href:!0});var REt=s(kH);xvr=r(REt,"from_config()"),REt.forEach(t),$vr=r($ee,` class
method.`),$ee.forEach(t),kvr=i(Cl),D8=n(Cl,"P",{});var GGe=s(D8);Svr=r(GGe,"This class cannot be instantiated directly using "),Tve=n(GGe,"CODE",{});var PEt=s(Tve);Rvr=r(PEt,"__init__()"),PEt.forEach(t),Pvr=r(GGe," (throws an error)."),GGe.forEach(t),Bvr=i(Cl),St=n(Cl,"DIV",{class:!0});var D6=s(St);T(G8.$$.fragment,D6),Ivr=i(D6),Mve=n(D6,"P",{});var BEt=s(Mve);Nvr=r(BEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BEt.forEach(t),qvr=i(D6),nc=n(D6,"P",{});var kee=s(nc);jvr=r(kee,`Note:
Loading a model from its configuration file does `),Eve=n(kee,"STRONG",{});var IEt=s(Eve);Dvr=r(IEt,"not"),IEt.forEach(t),Gvr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(kee,"A",{href:!0});var NEt=s(SH);Ovr=r(NEt,"from_pretrained()"),NEt.forEach(t),Vvr=r(kee," to load the model weights."),kee.forEach(t),Xvr=i(D6),T(u4.$$.fragment,D6),D6.forEach(t),zvr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(O8.$$.fragment,wl),Wvr=i(wl),Cve=n(wl,"P",{});var qEt=s(Cve);Qvr=r(qEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qEt.forEach(t),Hvr=i(wl),an=n(wl,"P",{});var G6=s(an);Uvr=r(G6,"The model class to instantiate is selected based on the "),wve=n(G6,"CODE",{});var jEt=s(wve);Jvr=r(jEt,"model_type"),jEt.forEach(t),Yvr=r(G6,` property of the config object (either
passed as an argument or loaded from `),Ave=n(G6,"CODE",{});var DEt=s(Ave);Kvr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),Zvr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(G6,"CODE",{});var GEt=s(yve);eFr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),oFr=r(G6,":"),G6.forEach(t),rFr=i(wl),ye=n(wl,"UL",{});var Be=s(ye);_4=n(Be,"LI",{});var SPe=s(_4);Lve=n(SPe,"STRONG",{});var OEt=s(Lve);tFr=r(OEt,"bart"),OEt.forEach(t),aFr=r(SPe," \u2014 "),RH=n(SPe,"A",{href:!0});var VEt=s(RH);nFr=r(VEt,"TFBartForConditionalGeneration"),VEt.forEach(t),sFr=r(SPe," (BART model)"),SPe.forEach(t),lFr=i(Be),b4=n(Be,"LI",{});var RPe=s(b4);xve=n(RPe,"STRONG",{});var XEt=s(xve);iFr=r(XEt,"blenderbot"),XEt.forEach(t),dFr=r(RPe," \u2014 "),PH=n(RPe,"A",{href:!0});var zEt=s(PH);cFr=r(zEt,"TFBlenderbotForConditionalGeneration"),zEt.forEach(t),fFr=r(RPe," (Blenderbot model)"),RPe.forEach(t),mFr=i(Be),v4=n(Be,"LI",{});var PPe=s(v4);$ve=n(PPe,"STRONG",{});var WEt=s($ve);gFr=r(WEt,"blenderbot-small"),WEt.forEach(t),hFr=r(PPe," \u2014 "),BH=n(PPe,"A",{href:!0});var QEt=s(BH);pFr=r(QEt,"TFBlenderbotSmallForConditionalGeneration"),QEt.forEach(t),uFr=r(PPe," (BlenderbotSmall model)"),PPe.forEach(t),_Fr=i(Be),F4=n(Be,"LI",{});var BPe=s(F4);kve=n(BPe,"STRONG",{});var HEt=s(kve);bFr=r(HEt,"encoder-decoder"),HEt.forEach(t),vFr=r(BPe," \u2014 "),IH=n(BPe,"A",{href:!0});var UEt=s(IH);FFr=r(UEt,"TFEncoderDecoderModel"),UEt.forEach(t),TFr=r(BPe," (Encoder decoder model)"),BPe.forEach(t),MFr=i(Be),T4=n(Be,"LI",{});var IPe=s(T4);Sve=n(IPe,"STRONG",{});var JEt=s(Sve);EFr=r(JEt,"led"),JEt.forEach(t),CFr=r(IPe," \u2014 "),NH=n(IPe,"A",{href:!0});var YEt=s(NH);wFr=r(YEt,"TFLEDForConditionalGeneration"),YEt.forEach(t),AFr=r(IPe," (LED model)"),IPe.forEach(t),yFr=i(Be),M4=n(Be,"LI",{});var NPe=s(M4);Rve=n(NPe,"STRONG",{});var KEt=s(Rve);LFr=r(KEt,"marian"),KEt.forEach(t),xFr=r(NPe," \u2014 "),qH=n(NPe,"A",{href:!0});var ZEt=s(qH);$Fr=r(ZEt,"TFMarianMTModel"),ZEt.forEach(t),kFr=r(NPe," (Marian model)"),NPe.forEach(t),SFr=i(Be),E4=n(Be,"LI",{});var qPe=s(E4);Pve=n(qPe,"STRONG",{});var eCt=s(Pve);RFr=r(eCt,"mbart"),eCt.forEach(t),PFr=r(qPe," \u2014 "),jH=n(qPe,"A",{href:!0});var oCt=s(jH);BFr=r(oCt,"TFMBartForConditionalGeneration"),oCt.forEach(t),IFr=r(qPe," (mBART model)"),qPe.forEach(t),NFr=i(Be),C4=n(Be,"LI",{});var jPe=s(C4);Bve=n(jPe,"STRONG",{});var rCt=s(Bve);qFr=r(rCt,"mt5"),rCt.forEach(t),jFr=r(jPe," \u2014 "),DH=n(jPe,"A",{href:!0});var tCt=s(DH);DFr=r(tCt,"TFMT5ForConditionalGeneration"),tCt.forEach(t),GFr=r(jPe," (mT5 model)"),jPe.forEach(t),OFr=i(Be),w4=n(Be,"LI",{});var DPe=s(w4);Ive=n(DPe,"STRONG",{});var aCt=s(Ive);VFr=r(aCt,"pegasus"),aCt.forEach(t),XFr=r(DPe," \u2014 "),GH=n(DPe,"A",{href:!0});var nCt=s(GH);zFr=r(nCt,"TFPegasusForConditionalGeneration"),nCt.forEach(t),WFr=r(DPe," (Pegasus model)"),DPe.forEach(t),QFr=i(Be),A4=n(Be,"LI",{});var GPe=s(A4);Nve=n(GPe,"STRONG",{});var sCt=s(Nve);HFr=r(sCt,"t5"),sCt.forEach(t),UFr=r(GPe," \u2014 "),OH=n(GPe,"A",{href:!0});var lCt=s(OH);JFr=r(lCt,"TFT5ForConditionalGeneration"),lCt.forEach(t),YFr=r(GPe," (T5 model)"),GPe.forEach(t),Be.forEach(t),KFr=i(wl),T(y4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Ije=i(f),sc=n(f,"H2",{class:!0});var OGe=s(sc);L4=n(OGe,"A",{id:!0,class:!0,href:!0});var iCt=s(L4);qve=n(iCt,"SPAN",{});var dCt=s(qve);T(V8.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),ZFr=i(OGe),jve=n(OGe,"SPAN",{});var cCt=s(jve);eTr=r(cCt,"TFAutoModelForSequenceClassification"),cCt.forEach(t),OGe.forEach(t),Nje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(X8.$$.fragment,Al),oTr=i(Al),lc=n(Al,"P",{});var See=s(lc);rTr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VH=n(See,"A",{href:!0});var fCt=s(VH);tTr=r(fCt,"from_pretrained()"),fCt.forEach(t),aTr=r(See," class method or the "),XH=n(See,"A",{href:!0});var mCt=s(XH);nTr=r(mCt,"from_config()"),mCt.forEach(t),sTr=r(See,` class
method.`),See.forEach(t),lTr=i(Al),z8=n(Al,"P",{});var VGe=s(z8);iTr=r(VGe,"This class cannot be instantiated directly using "),Dve=n(VGe,"CODE",{});var gCt=s(Dve);dTr=r(gCt,"__init__()"),gCt.forEach(t),cTr=r(VGe," (throws an error)."),VGe.forEach(t),fTr=i(Al),Rt=n(Al,"DIV",{class:!0});var O6=s(Rt);T(W8.$$.fragment,O6),mTr=i(O6),Gve=n(O6,"P",{});var hCt=s(Gve);gTr=r(hCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hCt.forEach(t),hTr=i(O6),ic=n(O6,"P",{});var Ree=s(ic);pTr=r(Ree,`Note:
Loading a model from its configuration file does `),Ove=n(Ree,"STRONG",{});var pCt=s(Ove);uTr=r(pCt,"not"),pCt.forEach(t),_Tr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(Ree,"A",{href:!0});var uCt=s(zH);bTr=r(uCt,"from_pretrained()"),uCt.forEach(t),vTr=r(Ree," to load the model weights."),Ree.forEach(t),FTr=i(O6),T(x4.$$.fragment,O6),O6.forEach(t),TTr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(Q8.$$.fragment,yl),MTr=i(yl),Vve=n(yl,"P",{});var _Ct=s(Vve);ETr=r(_Ct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Ct.forEach(t),CTr=i(yl),nn=n(yl,"P",{});var V6=s(nn);wTr=r(V6,"The model class to instantiate is selected based on the "),Xve=n(V6,"CODE",{});var bCt=s(Xve);ATr=r(bCt,"model_type"),bCt.forEach(t),yTr=r(V6,` property of the config object (either
passed as an argument or loaded from `),zve=n(V6,"CODE",{});var vCt=s(zve);LTr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),xTr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(V6,"CODE",{});var FCt=s(Wve);$Tr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),kTr=r(V6,":"),V6.forEach(t),STr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);$4=n(ae,"LI",{});var OPe=s($4);Qve=n(OPe,"STRONG",{});var TCt=s(Qve);RTr=r(TCt,"albert"),TCt.forEach(t),PTr=r(OPe," \u2014 "),WH=n(OPe,"A",{href:!0});var MCt=s(WH);BTr=r(MCt,"TFAlbertForSequenceClassification"),MCt.forEach(t),ITr=r(OPe," (ALBERT model)"),OPe.forEach(t),NTr=i(ae),k4=n(ae,"LI",{});var VPe=s(k4);Hve=n(VPe,"STRONG",{});var ECt=s(Hve);qTr=r(ECt,"bert"),ECt.forEach(t),jTr=r(VPe," \u2014 "),QH=n(VPe,"A",{href:!0});var CCt=s(QH);DTr=r(CCt,"TFBertForSequenceClassification"),CCt.forEach(t),GTr=r(VPe," (BERT model)"),VPe.forEach(t),OTr=i(ae),S4=n(ae,"LI",{});var XPe=s(S4);Uve=n(XPe,"STRONG",{});var wCt=s(Uve);VTr=r(wCt,"camembert"),wCt.forEach(t),XTr=r(XPe," \u2014 "),HH=n(XPe,"A",{href:!0});var ACt=s(HH);zTr=r(ACt,"TFCamembertForSequenceClassification"),ACt.forEach(t),WTr=r(XPe," (CamemBERT model)"),XPe.forEach(t),QTr=i(ae),R4=n(ae,"LI",{});var zPe=s(R4);Jve=n(zPe,"STRONG",{});var yCt=s(Jve);HTr=r(yCt,"convbert"),yCt.forEach(t),UTr=r(zPe," \u2014 "),UH=n(zPe,"A",{href:!0});var LCt=s(UH);JTr=r(LCt,"TFConvBertForSequenceClassification"),LCt.forEach(t),YTr=r(zPe," (ConvBERT model)"),zPe.forEach(t),KTr=i(ae),P4=n(ae,"LI",{});var WPe=s(P4);Yve=n(WPe,"STRONG",{});var xCt=s(Yve);ZTr=r(xCt,"ctrl"),xCt.forEach(t),e7r=r(WPe," \u2014 "),JH=n(WPe,"A",{href:!0});var $Ct=s(JH);o7r=r($Ct,"TFCTRLForSequenceClassification"),$Ct.forEach(t),r7r=r(WPe," (CTRL model)"),WPe.forEach(t),t7r=i(ae),B4=n(ae,"LI",{});var QPe=s(B4);Kve=n(QPe,"STRONG",{});var kCt=s(Kve);a7r=r(kCt,"deberta"),kCt.forEach(t),n7r=r(QPe," \u2014 "),YH=n(QPe,"A",{href:!0});var SCt=s(YH);s7r=r(SCt,"TFDebertaForSequenceClassification"),SCt.forEach(t),l7r=r(QPe," (DeBERTa model)"),QPe.forEach(t),i7r=i(ae),I4=n(ae,"LI",{});var HPe=s(I4);Zve=n(HPe,"STRONG",{});var RCt=s(Zve);d7r=r(RCt,"deberta-v2"),RCt.forEach(t),c7r=r(HPe," \u2014 "),KH=n(HPe,"A",{href:!0});var PCt=s(KH);f7r=r(PCt,"TFDebertaV2ForSequenceClassification"),PCt.forEach(t),m7r=r(HPe," (DeBERTa-v2 model)"),HPe.forEach(t),g7r=i(ae),N4=n(ae,"LI",{});var UPe=s(N4);eFe=n(UPe,"STRONG",{});var BCt=s(eFe);h7r=r(BCt,"distilbert"),BCt.forEach(t),p7r=r(UPe," \u2014 "),ZH=n(UPe,"A",{href:!0});var ICt=s(ZH);u7r=r(ICt,"TFDistilBertForSequenceClassification"),ICt.forEach(t),_7r=r(UPe," (DistilBERT model)"),UPe.forEach(t),b7r=i(ae),q4=n(ae,"LI",{});var JPe=s(q4);oFe=n(JPe,"STRONG",{});var NCt=s(oFe);v7r=r(NCt,"electra"),NCt.forEach(t),F7r=r(JPe," \u2014 "),eU=n(JPe,"A",{href:!0});var qCt=s(eU);T7r=r(qCt,"TFElectraForSequenceClassification"),qCt.forEach(t),M7r=r(JPe," (ELECTRA model)"),JPe.forEach(t),E7r=i(ae),j4=n(ae,"LI",{});var YPe=s(j4);rFe=n(YPe,"STRONG",{});var jCt=s(rFe);C7r=r(jCt,"flaubert"),jCt.forEach(t),w7r=r(YPe," \u2014 "),oU=n(YPe,"A",{href:!0});var DCt=s(oU);A7r=r(DCt,"TFFlaubertForSequenceClassification"),DCt.forEach(t),y7r=r(YPe," (FlauBERT model)"),YPe.forEach(t),L7r=i(ae),D4=n(ae,"LI",{});var KPe=s(D4);tFe=n(KPe,"STRONG",{});var GCt=s(tFe);x7r=r(GCt,"funnel"),GCt.forEach(t),$7r=r(KPe," \u2014 "),rU=n(KPe,"A",{href:!0});var OCt=s(rU);k7r=r(OCt,"TFFunnelForSequenceClassification"),OCt.forEach(t),S7r=r(KPe," (Funnel Transformer model)"),KPe.forEach(t),R7r=i(ae),G4=n(ae,"LI",{});var ZPe=s(G4);aFe=n(ZPe,"STRONG",{});var VCt=s(aFe);P7r=r(VCt,"gpt2"),VCt.forEach(t),B7r=r(ZPe," \u2014 "),tU=n(ZPe,"A",{href:!0});var XCt=s(tU);I7r=r(XCt,"TFGPT2ForSequenceClassification"),XCt.forEach(t),N7r=r(ZPe," (OpenAI GPT-2 model)"),ZPe.forEach(t),q7r=i(ae),O4=n(ae,"LI",{});var eBe=s(O4);nFe=n(eBe,"STRONG",{});var zCt=s(nFe);j7r=r(zCt,"gptj"),zCt.forEach(t),D7r=r(eBe," \u2014 "),aU=n(eBe,"A",{href:!0});var WCt=s(aU);G7r=r(WCt,"TFGPTJForSequenceClassification"),WCt.forEach(t),O7r=r(eBe," (GPT-J model)"),eBe.forEach(t),V7r=i(ae),V4=n(ae,"LI",{});var oBe=s(V4);sFe=n(oBe,"STRONG",{});var QCt=s(sFe);X7r=r(QCt,"layoutlm"),QCt.forEach(t),z7r=r(oBe," \u2014 "),nU=n(oBe,"A",{href:!0});var HCt=s(nU);W7r=r(HCt,"TFLayoutLMForSequenceClassification"),HCt.forEach(t),Q7r=r(oBe," (LayoutLM model)"),oBe.forEach(t),H7r=i(ae),X4=n(ae,"LI",{});var rBe=s(X4);lFe=n(rBe,"STRONG",{});var UCt=s(lFe);U7r=r(UCt,"longformer"),UCt.forEach(t),J7r=r(rBe," \u2014 "),sU=n(rBe,"A",{href:!0});var JCt=s(sU);Y7r=r(JCt,"TFLongformerForSequenceClassification"),JCt.forEach(t),K7r=r(rBe," (Longformer model)"),rBe.forEach(t),Z7r=i(ae),z4=n(ae,"LI",{});var tBe=s(z4);iFe=n(tBe,"STRONG",{});var YCt=s(iFe);eMr=r(YCt,"mobilebert"),YCt.forEach(t),oMr=r(tBe," \u2014 "),lU=n(tBe,"A",{href:!0});var KCt=s(lU);rMr=r(KCt,"TFMobileBertForSequenceClassification"),KCt.forEach(t),tMr=r(tBe," (MobileBERT model)"),tBe.forEach(t),aMr=i(ae),W4=n(ae,"LI",{});var aBe=s(W4);dFe=n(aBe,"STRONG",{});var ZCt=s(dFe);nMr=r(ZCt,"mpnet"),ZCt.forEach(t),sMr=r(aBe," \u2014 "),iU=n(aBe,"A",{href:!0});var e5t=s(iU);lMr=r(e5t,"TFMPNetForSequenceClassification"),e5t.forEach(t),iMr=r(aBe," (MPNet model)"),aBe.forEach(t),dMr=i(ae),Q4=n(ae,"LI",{});var nBe=s(Q4);cFe=n(nBe,"STRONG",{});var o5t=s(cFe);cMr=r(o5t,"openai-gpt"),o5t.forEach(t),fMr=r(nBe," \u2014 "),dU=n(nBe,"A",{href:!0});var r5t=s(dU);mMr=r(r5t,"TFOpenAIGPTForSequenceClassification"),r5t.forEach(t),gMr=r(nBe," (OpenAI GPT model)"),nBe.forEach(t),hMr=i(ae),H4=n(ae,"LI",{});var sBe=s(H4);fFe=n(sBe,"STRONG",{});var t5t=s(fFe);pMr=r(t5t,"rembert"),t5t.forEach(t),uMr=r(sBe," \u2014 "),cU=n(sBe,"A",{href:!0});var a5t=s(cU);_Mr=r(a5t,"TFRemBertForSequenceClassification"),a5t.forEach(t),bMr=r(sBe," (RemBERT model)"),sBe.forEach(t),vMr=i(ae),U4=n(ae,"LI",{});var lBe=s(U4);mFe=n(lBe,"STRONG",{});var n5t=s(mFe);FMr=r(n5t,"roberta"),n5t.forEach(t),TMr=r(lBe," \u2014 "),fU=n(lBe,"A",{href:!0});var s5t=s(fU);MMr=r(s5t,"TFRobertaForSequenceClassification"),s5t.forEach(t),EMr=r(lBe," (RoBERTa model)"),lBe.forEach(t),CMr=i(ae),J4=n(ae,"LI",{});var iBe=s(J4);gFe=n(iBe,"STRONG",{});var l5t=s(gFe);wMr=r(l5t,"roformer"),l5t.forEach(t),AMr=r(iBe," \u2014 "),mU=n(iBe,"A",{href:!0});var i5t=s(mU);yMr=r(i5t,"TFRoFormerForSequenceClassification"),i5t.forEach(t),LMr=r(iBe," (RoFormer model)"),iBe.forEach(t),xMr=i(ae),Y4=n(ae,"LI",{});var dBe=s(Y4);hFe=n(dBe,"STRONG",{});var d5t=s(hFe);$Mr=r(d5t,"tapas"),d5t.forEach(t),kMr=r(dBe," \u2014 "),gU=n(dBe,"A",{href:!0});var c5t=s(gU);SMr=r(c5t,"TFTapasForSequenceClassification"),c5t.forEach(t),RMr=r(dBe," (TAPAS model)"),dBe.forEach(t),PMr=i(ae),K4=n(ae,"LI",{});var cBe=s(K4);pFe=n(cBe,"STRONG",{});var f5t=s(pFe);BMr=r(f5t,"transfo-xl"),f5t.forEach(t),IMr=r(cBe," \u2014 "),hU=n(cBe,"A",{href:!0});var m5t=s(hU);NMr=r(m5t,"TFTransfoXLForSequenceClassification"),m5t.forEach(t),qMr=r(cBe," (Transformer-XL model)"),cBe.forEach(t),jMr=i(ae),Z4=n(ae,"LI",{});var fBe=s(Z4);uFe=n(fBe,"STRONG",{});var g5t=s(uFe);DMr=r(g5t,"xlm"),g5t.forEach(t),GMr=r(fBe," \u2014 "),pU=n(fBe,"A",{href:!0});var h5t=s(pU);OMr=r(h5t,"TFXLMForSequenceClassification"),h5t.forEach(t),VMr=r(fBe," (XLM model)"),fBe.forEach(t),XMr=i(ae),eE=n(ae,"LI",{});var mBe=s(eE);_Fe=n(mBe,"STRONG",{});var p5t=s(_Fe);zMr=r(p5t,"xlm-roberta"),p5t.forEach(t),WMr=r(mBe," \u2014 "),uU=n(mBe,"A",{href:!0});var u5t=s(uU);QMr=r(u5t,"TFXLMRobertaForSequenceClassification"),u5t.forEach(t),HMr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),UMr=i(ae),oE=n(ae,"LI",{});var gBe=s(oE);bFe=n(gBe,"STRONG",{});var _5t=s(bFe);JMr=r(_5t,"xlnet"),_5t.forEach(t),YMr=r(gBe," \u2014 "),_U=n(gBe,"A",{href:!0});var b5t=s(_U);KMr=r(b5t,"TFXLNetForSequenceClassification"),b5t.forEach(t),ZMr=r(gBe," (XLNet model)"),gBe.forEach(t),ae.forEach(t),e4r=i(yl),T(rE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),qje=i(f),dc=n(f,"H2",{class:!0});var XGe=s(dc);tE=n(XGe,"A",{id:!0,class:!0,href:!0});var v5t=s(tE);vFe=n(v5t,"SPAN",{});var F5t=s(vFe);T(H8.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),o4r=i(XGe),FFe=n(XGe,"SPAN",{});var T5t=s(FFe);r4r=r(T5t,"TFAutoModelForMultipleChoice"),T5t.forEach(t),XGe.forEach(t),jje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(U8.$$.fragment,Ll),t4r=i(Ll),cc=n(Ll,"P",{});var Pee=s(cc);a4r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bU=n(Pee,"A",{href:!0});var M5t=s(bU);n4r=r(M5t,"from_pretrained()"),M5t.forEach(t),s4r=r(Pee," class method or the "),vU=n(Pee,"A",{href:!0});var E5t=s(vU);l4r=r(E5t,"from_config()"),E5t.forEach(t),i4r=r(Pee,` class
method.`),Pee.forEach(t),d4r=i(Ll),J8=n(Ll,"P",{});var zGe=s(J8);c4r=r(zGe,"This class cannot be instantiated directly using "),TFe=n(zGe,"CODE",{});var C5t=s(TFe);f4r=r(C5t,"__init__()"),C5t.forEach(t),m4r=r(zGe," (throws an error)."),zGe.forEach(t),g4r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var X6=s(Pt);T(Y8.$$.fragment,X6),h4r=i(X6),MFe=n(X6,"P",{});var w5t=s(MFe);p4r=r(w5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w5t.forEach(t),u4r=i(X6),fc=n(X6,"P",{});var Bee=s(fc);_4r=r(Bee,`Note:
Loading a model from its configuration file does `),EFe=n(Bee,"STRONG",{});var A5t=s(EFe);b4r=r(A5t,"not"),A5t.forEach(t),v4r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(Bee,"A",{href:!0});var y5t=s(FU);F4r=r(y5t,"from_pretrained()"),y5t.forEach(t),T4r=r(Bee," to load the model weights."),Bee.forEach(t),M4r=i(X6),T(aE.$$.fragment,X6),X6.forEach(t),E4r=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(K8.$$.fragment,xl),C4r=i(xl),CFe=n(xl,"P",{});var L5t=s(CFe);w4r=r(L5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L5t.forEach(t),A4r=i(xl),sn=n(xl,"P",{});var z6=s(sn);y4r=r(z6,"The model class to instantiate is selected based on the "),wFe=n(z6,"CODE",{});var x5t=s(wFe);L4r=r(x5t,"model_type"),x5t.forEach(t),x4r=r(z6,` property of the config object (either
passed as an argument or loaded from `),AFe=n(z6,"CODE",{});var $5t=s(AFe);$4r=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),k4r=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(z6,"CODE",{});var k5t=s(yFe);S4r=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),R4r=r(z6,":"),z6.forEach(t),P4r=i(xl),pe=n(xl,"UL",{});var be=s(pe);nE=n(be,"LI",{});var hBe=s(nE);LFe=n(hBe,"STRONG",{});var S5t=s(LFe);B4r=r(S5t,"albert"),S5t.forEach(t),I4r=r(hBe," \u2014 "),TU=n(hBe,"A",{href:!0});var R5t=s(TU);N4r=r(R5t,"TFAlbertForMultipleChoice"),R5t.forEach(t),q4r=r(hBe," (ALBERT model)"),hBe.forEach(t),j4r=i(be),sE=n(be,"LI",{});var pBe=s(sE);xFe=n(pBe,"STRONG",{});var P5t=s(xFe);D4r=r(P5t,"bert"),P5t.forEach(t),G4r=r(pBe," \u2014 "),MU=n(pBe,"A",{href:!0});var B5t=s(MU);O4r=r(B5t,"TFBertForMultipleChoice"),B5t.forEach(t),V4r=r(pBe," (BERT model)"),pBe.forEach(t),X4r=i(be),lE=n(be,"LI",{});var uBe=s(lE);$Fe=n(uBe,"STRONG",{});var I5t=s($Fe);z4r=r(I5t,"camembert"),I5t.forEach(t),W4r=r(uBe," \u2014 "),EU=n(uBe,"A",{href:!0});var N5t=s(EU);Q4r=r(N5t,"TFCamembertForMultipleChoice"),N5t.forEach(t),H4r=r(uBe," (CamemBERT model)"),uBe.forEach(t),U4r=i(be),iE=n(be,"LI",{});var _Be=s(iE);kFe=n(_Be,"STRONG",{});var q5t=s(kFe);J4r=r(q5t,"convbert"),q5t.forEach(t),Y4r=r(_Be," \u2014 "),CU=n(_Be,"A",{href:!0});var j5t=s(CU);K4r=r(j5t,"TFConvBertForMultipleChoice"),j5t.forEach(t),Z4r=r(_Be," (ConvBERT model)"),_Be.forEach(t),eEr=i(be),dE=n(be,"LI",{});var bBe=s(dE);SFe=n(bBe,"STRONG",{});var D5t=s(SFe);oEr=r(D5t,"distilbert"),D5t.forEach(t),rEr=r(bBe," \u2014 "),wU=n(bBe,"A",{href:!0});var G5t=s(wU);tEr=r(G5t,"TFDistilBertForMultipleChoice"),G5t.forEach(t),aEr=r(bBe," (DistilBERT model)"),bBe.forEach(t),nEr=i(be),cE=n(be,"LI",{});var vBe=s(cE);RFe=n(vBe,"STRONG",{});var O5t=s(RFe);sEr=r(O5t,"electra"),O5t.forEach(t),lEr=r(vBe," \u2014 "),AU=n(vBe,"A",{href:!0});var V5t=s(AU);iEr=r(V5t,"TFElectraForMultipleChoice"),V5t.forEach(t),dEr=r(vBe," (ELECTRA model)"),vBe.forEach(t),cEr=i(be),fE=n(be,"LI",{});var FBe=s(fE);PFe=n(FBe,"STRONG",{});var X5t=s(PFe);fEr=r(X5t,"flaubert"),X5t.forEach(t),mEr=r(FBe," \u2014 "),yU=n(FBe,"A",{href:!0});var z5t=s(yU);gEr=r(z5t,"TFFlaubertForMultipleChoice"),z5t.forEach(t),hEr=r(FBe," (FlauBERT model)"),FBe.forEach(t),pEr=i(be),mE=n(be,"LI",{});var TBe=s(mE);BFe=n(TBe,"STRONG",{});var W5t=s(BFe);uEr=r(W5t,"funnel"),W5t.forEach(t),_Er=r(TBe," \u2014 "),LU=n(TBe,"A",{href:!0});var Q5t=s(LU);bEr=r(Q5t,"TFFunnelForMultipleChoice"),Q5t.forEach(t),vEr=r(TBe," (Funnel Transformer model)"),TBe.forEach(t),FEr=i(be),gE=n(be,"LI",{});var MBe=s(gE);IFe=n(MBe,"STRONG",{});var H5t=s(IFe);TEr=r(H5t,"longformer"),H5t.forEach(t),MEr=r(MBe," \u2014 "),xU=n(MBe,"A",{href:!0});var U5t=s(xU);EEr=r(U5t,"TFLongformerForMultipleChoice"),U5t.forEach(t),CEr=r(MBe," (Longformer model)"),MBe.forEach(t),wEr=i(be),hE=n(be,"LI",{});var EBe=s(hE);NFe=n(EBe,"STRONG",{});var J5t=s(NFe);AEr=r(J5t,"mobilebert"),J5t.forEach(t),yEr=r(EBe," \u2014 "),$U=n(EBe,"A",{href:!0});var Y5t=s($U);LEr=r(Y5t,"TFMobileBertForMultipleChoice"),Y5t.forEach(t),xEr=r(EBe," (MobileBERT model)"),EBe.forEach(t),$Er=i(be),pE=n(be,"LI",{});var CBe=s(pE);qFe=n(CBe,"STRONG",{});var K5t=s(qFe);kEr=r(K5t,"mpnet"),K5t.forEach(t),SEr=r(CBe," \u2014 "),kU=n(CBe,"A",{href:!0});var Z5t=s(kU);REr=r(Z5t,"TFMPNetForMultipleChoice"),Z5t.forEach(t),PEr=r(CBe," (MPNet model)"),CBe.forEach(t),BEr=i(be),uE=n(be,"LI",{});var wBe=s(uE);jFe=n(wBe,"STRONG",{});var ewt=s(jFe);IEr=r(ewt,"rembert"),ewt.forEach(t),NEr=r(wBe," \u2014 "),SU=n(wBe,"A",{href:!0});var owt=s(SU);qEr=r(owt,"TFRemBertForMultipleChoice"),owt.forEach(t),jEr=r(wBe," (RemBERT model)"),wBe.forEach(t),DEr=i(be),_E=n(be,"LI",{});var ABe=s(_E);DFe=n(ABe,"STRONG",{});var rwt=s(DFe);GEr=r(rwt,"roberta"),rwt.forEach(t),OEr=r(ABe," \u2014 "),RU=n(ABe,"A",{href:!0});var twt=s(RU);VEr=r(twt,"TFRobertaForMultipleChoice"),twt.forEach(t),XEr=r(ABe," (RoBERTa model)"),ABe.forEach(t),zEr=i(be),bE=n(be,"LI",{});var yBe=s(bE);GFe=n(yBe,"STRONG",{});var awt=s(GFe);WEr=r(awt,"roformer"),awt.forEach(t),QEr=r(yBe," \u2014 "),PU=n(yBe,"A",{href:!0});var nwt=s(PU);HEr=r(nwt,"TFRoFormerForMultipleChoice"),nwt.forEach(t),UEr=r(yBe," (RoFormer model)"),yBe.forEach(t),JEr=i(be),vE=n(be,"LI",{});var LBe=s(vE);OFe=n(LBe,"STRONG",{});var swt=s(OFe);YEr=r(swt,"xlm"),swt.forEach(t),KEr=r(LBe," \u2014 "),BU=n(LBe,"A",{href:!0});var lwt=s(BU);ZEr=r(lwt,"TFXLMForMultipleChoice"),lwt.forEach(t),eCr=r(LBe," (XLM model)"),LBe.forEach(t),oCr=i(be),FE=n(be,"LI",{});var xBe=s(FE);VFe=n(xBe,"STRONG",{});var iwt=s(VFe);rCr=r(iwt,"xlm-roberta"),iwt.forEach(t),tCr=r(xBe," \u2014 "),IU=n(xBe,"A",{href:!0});var dwt=s(IU);aCr=r(dwt,"TFXLMRobertaForMultipleChoice"),dwt.forEach(t),nCr=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),sCr=i(be),TE=n(be,"LI",{});var $Be=s(TE);XFe=n($Be,"STRONG",{});var cwt=s(XFe);lCr=r(cwt,"xlnet"),cwt.forEach(t),iCr=r($Be," \u2014 "),NU=n($Be,"A",{href:!0});var fwt=s(NU);dCr=r(fwt,"TFXLNetForMultipleChoice"),fwt.forEach(t),cCr=r($Be," (XLNet model)"),$Be.forEach(t),be.forEach(t),fCr=i(xl),T(ME.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Dje=i(f),mc=n(f,"H2",{class:!0});var WGe=s(mc);EE=n(WGe,"A",{id:!0,class:!0,href:!0});var mwt=s(EE);zFe=n(mwt,"SPAN",{});var gwt=s(zFe);T(Z8.$$.fragment,gwt),gwt.forEach(t),mwt.forEach(t),mCr=i(WGe),WFe=n(WGe,"SPAN",{});var hwt=s(WFe);gCr=r(hwt,"TFAutoModelForNextSentencePrediction"),hwt.forEach(t),WGe.forEach(t),Gje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(e9.$$.fragment,$l),hCr=i($l),gc=n($l,"P",{});var Iee=s(gc);pCr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qU=n(Iee,"A",{href:!0});var pwt=s(qU);uCr=r(pwt,"from_pretrained()"),pwt.forEach(t),_Cr=r(Iee," class method or the "),jU=n(Iee,"A",{href:!0});var uwt=s(jU);bCr=r(uwt,"from_config()"),uwt.forEach(t),vCr=r(Iee,` class
method.`),Iee.forEach(t),FCr=i($l),o9=n($l,"P",{});var QGe=s(o9);TCr=r(QGe,"This class cannot be instantiated directly using "),QFe=n(QGe,"CODE",{});var _wt=s(QFe);MCr=r(_wt,"__init__()"),_wt.forEach(t),ECr=r(QGe," (throws an error)."),QGe.forEach(t),CCr=i($l),Bt=n($l,"DIV",{class:!0});var W6=s(Bt);T(r9.$$.fragment,W6),wCr=i(W6),HFe=n(W6,"P",{});var bwt=s(HFe);ACr=r(bwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bwt.forEach(t),yCr=i(W6),hc=n(W6,"P",{});var Nee=s(hc);LCr=r(Nee,`Note:
Loading a model from its configuration file does `),UFe=n(Nee,"STRONG",{});var vwt=s(UFe);xCr=r(vwt,"not"),vwt.forEach(t),$Cr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(Nee,"A",{href:!0});var Fwt=s(DU);kCr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),SCr=r(Nee," to load the model weights."),Nee.forEach(t),RCr=i(W6),T(CE.$$.fragment,W6),W6.forEach(t),PCr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(t9.$$.fragment,kl),BCr=i(kl),JFe=n(kl,"P",{});var Twt=s(JFe);ICr=r(Twt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Twt.forEach(t),NCr=i(kl),ln=n(kl,"P",{});var Q6=s(ln);qCr=r(Q6,"The model class to instantiate is selected based on the "),YFe=n(Q6,"CODE",{});var Mwt=s(YFe);jCr=r(Mwt,"model_type"),Mwt.forEach(t),DCr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),KFe=n(Q6,"CODE",{});var Ewt=s(KFe);GCr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),OCr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(Q6,"CODE",{});var Cwt=s(ZFe);VCr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),XCr=r(Q6,":"),Q6.forEach(t),zCr=i(kl),a9=n(kl,"UL",{});var HGe=s(a9);wE=n(HGe,"LI",{});var kBe=s(wE);eTe=n(kBe,"STRONG",{});var wwt=s(eTe);WCr=r(wwt,"bert"),wwt.forEach(t),QCr=r(kBe," \u2014 "),GU=n(kBe,"A",{href:!0});var Awt=s(GU);HCr=r(Awt,"TFBertForNextSentencePrediction"),Awt.forEach(t),UCr=r(kBe," (BERT model)"),kBe.forEach(t),JCr=i(HGe),AE=n(HGe,"LI",{});var SBe=s(AE);oTe=n(SBe,"STRONG",{});var ywt=s(oTe);YCr=r(ywt,"mobilebert"),ywt.forEach(t),KCr=r(SBe," \u2014 "),OU=n(SBe,"A",{href:!0});var Lwt=s(OU);ZCr=r(Lwt,"TFMobileBertForNextSentencePrediction"),Lwt.forEach(t),e5r=r(SBe," (MobileBERT model)"),SBe.forEach(t),HGe.forEach(t),o5r=i(kl),T(yE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Oje=i(f),pc=n(f,"H2",{class:!0});var UGe=s(pc);LE=n(UGe,"A",{id:!0,class:!0,href:!0});var xwt=s(LE);rTe=n(xwt,"SPAN",{});var $wt=s(rTe);T(n9.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),r5r=i(UGe),tTe=n(UGe,"SPAN",{});var kwt=s(tTe);t5r=r(kwt,"TFAutoModelForTableQuestionAnswering"),kwt.forEach(t),UGe.forEach(t),Vje=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(s9.$$.fragment,Sl),a5r=i(Sl),uc=n(Sl,"P",{});var qee=s(uc);n5r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VU=n(qee,"A",{href:!0});var Swt=s(VU);s5r=r(Swt,"from_pretrained()"),Swt.forEach(t),l5r=r(qee," class method or the "),XU=n(qee,"A",{href:!0});var Rwt=s(XU);i5r=r(Rwt,"from_config()"),Rwt.forEach(t),d5r=r(qee,` class
method.`),qee.forEach(t),c5r=i(Sl),l9=n(Sl,"P",{});var JGe=s(l9);f5r=r(JGe,"This class cannot be instantiated directly using "),aTe=n(JGe,"CODE",{});var Pwt=s(aTe);m5r=r(Pwt,"__init__()"),Pwt.forEach(t),g5r=r(JGe," (throws an error)."),JGe.forEach(t),h5r=i(Sl),It=n(Sl,"DIV",{class:!0});var H6=s(It);T(i9.$$.fragment,H6),p5r=i(H6),nTe=n(H6,"P",{});var Bwt=s(nTe);u5r=r(Bwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bwt.forEach(t),_5r=i(H6),_c=n(H6,"P",{});var jee=s(_c);b5r=r(jee,`Note:
Loading a model from its configuration file does `),sTe=n(jee,"STRONG",{});var Iwt=s(sTe);v5r=r(Iwt,"not"),Iwt.forEach(t),F5r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(jee,"A",{href:!0});var Nwt=s(zU);T5r=r(Nwt,"from_pretrained()"),Nwt.forEach(t),M5r=r(jee," to load the model weights."),jee.forEach(t),E5r=i(H6),T(xE.$$.fragment,H6),H6.forEach(t),C5r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(d9.$$.fragment,Rl),w5r=i(Rl),lTe=n(Rl,"P",{});var qwt=s(lTe);A5r=r(qwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qwt.forEach(t),y5r=i(Rl),dn=n(Rl,"P",{});var U6=s(dn);L5r=r(U6,"The model class to instantiate is selected based on the "),iTe=n(U6,"CODE",{});var jwt=s(iTe);x5r=r(jwt,"model_type"),jwt.forEach(t),$5r=r(U6,` property of the config object (either
passed as an argument or loaded from `),dTe=n(U6,"CODE",{});var Dwt=s(dTe);k5r=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),S5r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(U6,"CODE",{});var Gwt=s(cTe);R5r=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),P5r=r(U6,":"),U6.forEach(t),B5r=i(Rl),fTe=n(Rl,"UL",{});var Owt=s(fTe);$E=n(Owt,"LI",{});var RBe=s($E);mTe=n(RBe,"STRONG",{});var Vwt=s(mTe);I5r=r(Vwt,"tapas"),Vwt.forEach(t),N5r=r(RBe," \u2014 "),WU=n(RBe,"A",{href:!0});var Xwt=s(WU);q5r=r(Xwt,"TFTapasForQuestionAnswering"),Xwt.forEach(t),j5r=r(RBe," (TAPAS model)"),RBe.forEach(t),Owt.forEach(t),D5r=i(Rl),T(kE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Xje=i(f),bc=n(f,"H2",{class:!0});var YGe=s(bc);SE=n(YGe,"A",{id:!0,class:!0,href:!0});var zwt=s(SE);gTe=n(zwt,"SPAN",{});var Wwt=s(gTe);T(c9.$$.fragment,Wwt),Wwt.forEach(t),zwt.forEach(t),G5r=i(YGe),hTe=n(YGe,"SPAN",{});var Qwt=s(hTe);O5r=r(Qwt,"TFAutoModelForTokenClassification"),Qwt.forEach(t),YGe.forEach(t),zje=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(f9.$$.fragment,Pl),V5r=i(Pl),vc=n(Pl,"P",{});var Dee=s(vc);X5r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QU=n(Dee,"A",{href:!0});var Hwt=s(QU);z5r=r(Hwt,"from_pretrained()"),Hwt.forEach(t),W5r=r(Dee," class method or the "),HU=n(Dee,"A",{href:!0});var Uwt=s(HU);Q5r=r(Uwt,"from_config()"),Uwt.forEach(t),H5r=r(Dee,` class
method.`),Dee.forEach(t),U5r=i(Pl),m9=n(Pl,"P",{});var KGe=s(m9);J5r=r(KGe,"This class cannot be instantiated directly using "),pTe=n(KGe,"CODE",{});var Jwt=s(pTe);Y5r=r(Jwt,"__init__()"),Jwt.forEach(t),K5r=r(KGe," (throws an error)."),KGe.forEach(t),Z5r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var J6=s(Nt);T(g9.$$.fragment,J6),ewr=i(J6),uTe=n(J6,"P",{});var Ywt=s(uTe);owr=r(Ywt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ywt.forEach(t),rwr=i(J6),Fc=n(J6,"P",{});var Gee=s(Fc);twr=r(Gee,`Note:
Loading a model from its configuration file does `),_Te=n(Gee,"STRONG",{});var Kwt=s(_Te);awr=r(Kwt,"not"),Kwt.forEach(t),nwr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(Gee,"A",{href:!0});var Zwt=s(UU);swr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),lwr=r(Gee," to load the model weights."),Gee.forEach(t),iwr=i(J6),T(RE.$$.fragment,J6),J6.forEach(t),dwr=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(h9.$$.fragment,Bl),cwr=i(Bl),bTe=n(Bl,"P",{});var e0t=s(bTe);fwr=r(e0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e0t.forEach(t),mwr=i(Bl),cn=n(Bl,"P",{});var Y6=s(cn);gwr=r(Y6,"The model class to instantiate is selected based on the "),vTe=n(Y6,"CODE",{});var o0t=s(vTe);hwr=r(o0t,"model_type"),o0t.forEach(t),pwr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),FTe=n(Y6,"CODE",{});var r0t=s(FTe);uwr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),_wr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(Y6,"CODE",{});var t0t=s(TTe);bwr=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),vwr=r(Y6,":"),Y6.forEach(t),Fwr=i(Bl),de=n(Bl,"UL",{});var me=s(de);PE=n(me,"LI",{});var PBe=s(PE);MTe=n(PBe,"STRONG",{});var a0t=s(MTe);Twr=r(a0t,"albert"),a0t.forEach(t),Mwr=r(PBe," \u2014 "),JU=n(PBe,"A",{href:!0});var n0t=s(JU);Ewr=r(n0t,"TFAlbertForTokenClassification"),n0t.forEach(t),Cwr=r(PBe," (ALBERT model)"),PBe.forEach(t),wwr=i(me),BE=n(me,"LI",{});var BBe=s(BE);ETe=n(BBe,"STRONG",{});var s0t=s(ETe);Awr=r(s0t,"bert"),s0t.forEach(t),ywr=r(BBe," \u2014 "),YU=n(BBe,"A",{href:!0});var l0t=s(YU);Lwr=r(l0t,"TFBertForTokenClassification"),l0t.forEach(t),xwr=r(BBe," (BERT model)"),BBe.forEach(t),$wr=i(me),IE=n(me,"LI",{});var IBe=s(IE);CTe=n(IBe,"STRONG",{});var i0t=s(CTe);kwr=r(i0t,"camembert"),i0t.forEach(t),Swr=r(IBe," \u2014 "),KU=n(IBe,"A",{href:!0});var d0t=s(KU);Rwr=r(d0t,"TFCamembertForTokenClassification"),d0t.forEach(t),Pwr=r(IBe," (CamemBERT model)"),IBe.forEach(t),Bwr=i(me),NE=n(me,"LI",{});var NBe=s(NE);wTe=n(NBe,"STRONG",{});var c0t=s(wTe);Iwr=r(c0t,"convbert"),c0t.forEach(t),Nwr=r(NBe," \u2014 "),ZU=n(NBe,"A",{href:!0});var f0t=s(ZU);qwr=r(f0t,"TFConvBertForTokenClassification"),f0t.forEach(t),jwr=r(NBe," (ConvBERT model)"),NBe.forEach(t),Dwr=i(me),qE=n(me,"LI",{});var qBe=s(qE);ATe=n(qBe,"STRONG",{});var m0t=s(ATe);Gwr=r(m0t,"deberta"),m0t.forEach(t),Owr=r(qBe," \u2014 "),eJ=n(qBe,"A",{href:!0});var g0t=s(eJ);Vwr=r(g0t,"TFDebertaForTokenClassification"),g0t.forEach(t),Xwr=r(qBe," (DeBERTa model)"),qBe.forEach(t),zwr=i(me),jE=n(me,"LI",{});var jBe=s(jE);yTe=n(jBe,"STRONG",{});var h0t=s(yTe);Wwr=r(h0t,"deberta-v2"),h0t.forEach(t),Qwr=r(jBe," \u2014 "),oJ=n(jBe,"A",{href:!0});var p0t=s(oJ);Hwr=r(p0t,"TFDebertaV2ForTokenClassification"),p0t.forEach(t),Uwr=r(jBe," (DeBERTa-v2 model)"),jBe.forEach(t),Jwr=i(me),DE=n(me,"LI",{});var DBe=s(DE);LTe=n(DBe,"STRONG",{});var u0t=s(LTe);Ywr=r(u0t,"distilbert"),u0t.forEach(t),Kwr=r(DBe," \u2014 "),rJ=n(DBe,"A",{href:!0});var _0t=s(rJ);Zwr=r(_0t,"TFDistilBertForTokenClassification"),_0t.forEach(t),e0r=r(DBe," (DistilBERT model)"),DBe.forEach(t),o0r=i(me),GE=n(me,"LI",{});var GBe=s(GE);xTe=n(GBe,"STRONG",{});var b0t=s(xTe);r0r=r(b0t,"electra"),b0t.forEach(t),t0r=r(GBe," \u2014 "),tJ=n(GBe,"A",{href:!0});var v0t=s(tJ);a0r=r(v0t,"TFElectraForTokenClassification"),v0t.forEach(t),n0r=r(GBe," (ELECTRA model)"),GBe.forEach(t),s0r=i(me),OE=n(me,"LI",{});var OBe=s(OE);$Te=n(OBe,"STRONG",{});var F0t=s($Te);l0r=r(F0t,"flaubert"),F0t.forEach(t),i0r=r(OBe," \u2014 "),aJ=n(OBe,"A",{href:!0});var T0t=s(aJ);d0r=r(T0t,"TFFlaubertForTokenClassification"),T0t.forEach(t),c0r=r(OBe," (FlauBERT model)"),OBe.forEach(t),f0r=i(me),VE=n(me,"LI",{});var VBe=s(VE);kTe=n(VBe,"STRONG",{});var M0t=s(kTe);m0r=r(M0t,"funnel"),M0t.forEach(t),g0r=r(VBe," \u2014 "),nJ=n(VBe,"A",{href:!0});var E0t=s(nJ);h0r=r(E0t,"TFFunnelForTokenClassification"),E0t.forEach(t),p0r=r(VBe," (Funnel Transformer model)"),VBe.forEach(t),u0r=i(me),XE=n(me,"LI",{});var XBe=s(XE);STe=n(XBe,"STRONG",{});var C0t=s(STe);_0r=r(C0t,"layoutlm"),C0t.forEach(t),b0r=r(XBe," \u2014 "),sJ=n(XBe,"A",{href:!0});var w0t=s(sJ);v0r=r(w0t,"TFLayoutLMForTokenClassification"),w0t.forEach(t),F0r=r(XBe," (LayoutLM model)"),XBe.forEach(t),T0r=i(me),zE=n(me,"LI",{});var zBe=s(zE);RTe=n(zBe,"STRONG",{});var A0t=s(RTe);M0r=r(A0t,"longformer"),A0t.forEach(t),E0r=r(zBe," \u2014 "),lJ=n(zBe,"A",{href:!0});var y0t=s(lJ);C0r=r(y0t,"TFLongformerForTokenClassification"),y0t.forEach(t),w0r=r(zBe," (Longformer model)"),zBe.forEach(t),A0r=i(me),WE=n(me,"LI",{});var WBe=s(WE);PTe=n(WBe,"STRONG",{});var L0t=s(PTe);y0r=r(L0t,"mobilebert"),L0t.forEach(t),L0r=r(WBe," \u2014 "),iJ=n(WBe,"A",{href:!0});var x0t=s(iJ);x0r=r(x0t,"TFMobileBertForTokenClassification"),x0t.forEach(t),$0r=r(WBe," (MobileBERT model)"),WBe.forEach(t),k0r=i(me),QE=n(me,"LI",{});var QBe=s(QE);BTe=n(QBe,"STRONG",{});var $0t=s(BTe);S0r=r($0t,"mpnet"),$0t.forEach(t),R0r=r(QBe," \u2014 "),dJ=n(QBe,"A",{href:!0});var k0t=s(dJ);P0r=r(k0t,"TFMPNetForTokenClassification"),k0t.forEach(t),B0r=r(QBe," (MPNet model)"),QBe.forEach(t),I0r=i(me),HE=n(me,"LI",{});var HBe=s(HE);ITe=n(HBe,"STRONG",{});var S0t=s(ITe);N0r=r(S0t,"rembert"),S0t.forEach(t),q0r=r(HBe," \u2014 "),cJ=n(HBe,"A",{href:!0});var R0t=s(cJ);j0r=r(R0t,"TFRemBertForTokenClassification"),R0t.forEach(t),D0r=r(HBe," (RemBERT model)"),HBe.forEach(t),G0r=i(me),UE=n(me,"LI",{});var UBe=s(UE);NTe=n(UBe,"STRONG",{});var P0t=s(NTe);O0r=r(P0t,"roberta"),P0t.forEach(t),V0r=r(UBe," \u2014 "),fJ=n(UBe,"A",{href:!0});var B0t=s(fJ);X0r=r(B0t,"TFRobertaForTokenClassification"),B0t.forEach(t),z0r=r(UBe," (RoBERTa model)"),UBe.forEach(t),W0r=i(me),JE=n(me,"LI",{});var JBe=s(JE);qTe=n(JBe,"STRONG",{});var I0t=s(qTe);Q0r=r(I0t,"roformer"),I0t.forEach(t),H0r=r(JBe," \u2014 "),mJ=n(JBe,"A",{href:!0});var N0t=s(mJ);U0r=r(N0t,"TFRoFormerForTokenClassification"),N0t.forEach(t),J0r=r(JBe," (RoFormer model)"),JBe.forEach(t),Y0r=i(me),YE=n(me,"LI",{});var YBe=s(YE);jTe=n(YBe,"STRONG",{});var q0t=s(jTe);K0r=r(q0t,"xlm"),q0t.forEach(t),Z0r=r(YBe," \u2014 "),gJ=n(YBe,"A",{href:!0});var j0t=s(gJ);e6r=r(j0t,"TFXLMForTokenClassification"),j0t.forEach(t),o6r=r(YBe," (XLM model)"),YBe.forEach(t),r6r=i(me),KE=n(me,"LI",{});var KBe=s(KE);DTe=n(KBe,"STRONG",{});var D0t=s(DTe);t6r=r(D0t,"xlm-roberta"),D0t.forEach(t),a6r=r(KBe," \u2014 "),hJ=n(KBe,"A",{href:!0});var G0t=s(hJ);n6r=r(G0t,"TFXLMRobertaForTokenClassification"),G0t.forEach(t),s6r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),l6r=i(me),ZE=n(me,"LI",{});var ZBe=s(ZE);GTe=n(ZBe,"STRONG",{});var O0t=s(GTe);i6r=r(O0t,"xlnet"),O0t.forEach(t),d6r=r(ZBe," \u2014 "),pJ=n(ZBe,"A",{href:!0});var V0t=s(pJ);c6r=r(V0t,"TFXLNetForTokenClassification"),V0t.forEach(t),f6r=r(ZBe," (XLNet model)"),ZBe.forEach(t),me.forEach(t),m6r=i(Bl),T(eC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Wje=i(f),Tc=n(f,"H2",{class:!0});var ZGe=s(Tc);oC=n(ZGe,"A",{id:!0,class:!0,href:!0});var X0t=s(oC);OTe=n(X0t,"SPAN",{});var z0t=s(OTe);T(p9.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),g6r=i(ZGe),VTe=n(ZGe,"SPAN",{});var W0t=s(VTe);h6r=r(W0t,"TFAutoModelForQuestionAnswering"),W0t.forEach(t),ZGe.forEach(t),Qje=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(u9.$$.fragment,Il),p6r=i(Il),Mc=n(Il,"P",{});var Oee=s(Mc);u6r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uJ=n(Oee,"A",{href:!0});var Q0t=s(uJ);_6r=r(Q0t,"from_pretrained()"),Q0t.forEach(t),b6r=r(Oee," class method or the "),_J=n(Oee,"A",{href:!0});var H0t=s(_J);v6r=r(H0t,"from_config()"),H0t.forEach(t),F6r=r(Oee,` class
method.`),Oee.forEach(t),T6r=i(Il),_9=n(Il,"P",{});var eOe=s(_9);M6r=r(eOe,"This class cannot be instantiated directly using "),XTe=n(eOe,"CODE",{});var U0t=s(XTe);E6r=r(U0t,"__init__()"),U0t.forEach(t),C6r=r(eOe," (throws an error)."),eOe.forEach(t),w6r=i(Il),qt=n(Il,"DIV",{class:!0});var K6=s(qt);T(b9.$$.fragment,K6),A6r=i(K6),zTe=n(K6,"P",{});var J0t=s(zTe);y6r=r(J0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J0t.forEach(t),L6r=i(K6),Ec=n(K6,"P",{});var Vee=s(Ec);x6r=r(Vee,`Note:
Loading a model from its configuration file does `),WTe=n(Vee,"STRONG",{});var Y0t=s(WTe);$6r=r(Y0t,"not"),Y0t.forEach(t),k6r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Vee,"A",{href:!0});var K0t=s(bJ);S6r=r(K0t,"from_pretrained()"),K0t.forEach(t),R6r=r(Vee," to load the model weights."),Vee.forEach(t),P6r=i(K6),T(rC.$$.fragment,K6),K6.forEach(t),B6r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(v9.$$.fragment,Nl),I6r=i(Nl),QTe=n(Nl,"P",{});var Z0t=s(QTe);N6r=r(Z0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z0t.forEach(t),q6r=i(Nl),fn=n(Nl,"P",{});var Z6=s(fn);j6r=r(Z6,"The model class to instantiate is selected based on the "),HTe=n(Z6,"CODE",{});var e6t=s(HTe);D6r=r(e6t,"model_type"),e6t.forEach(t),G6r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),UTe=n(Z6,"CODE",{});var o6t=s(UTe);O6r=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),V6r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(Z6,"CODE",{});var r6t=s(JTe);X6r=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),z6r=r(Z6,":"),Z6.forEach(t),W6r=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);tC=n(ge,"LI",{});var eIe=s(tC);YTe=n(eIe,"STRONG",{});var t6t=s(YTe);Q6r=r(t6t,"albert"),t6t.forEach(t),H6r=r(eIe," \u2014 "),vJ=n(eIe,"A",{href:!0});var a6t=s(vJ);U6r=r(a6t,"TFAlbertForQuestionAnswering"),a6t.forEach(t),J6r=r(eIe," (ALBERT model)"),eIe.forEach(t),Y6r=i(ge),aC=n(ge,"LI",{});var oIe=s(aC);KTe=n(oIe,"STRONG",{});var n6t=s(KTe);K6r=r(n6t,"bert"),n6t.forEach(t),Z6r=r(oIe," \u2014 "),FJ=n(oIe,"A",{href:!0});var s6t=s(FJ);eAr=r(s6t,"TFBertForQuestionAnswering"),s6t.forEach(t),oAr=r(oIe," (BERT model)"),oIe.forEach(t),rAr=i(ge),nC=n(ge,"LI",{});var rIe=s(nC);ZTe=n(rIe,"STRONG",{});var l6t=s(ZTe);tAr=r(l6t,"camembert"),l6t.forEach(t),aAr=r(rIe," \u2014 "),TJ=n(rIe,"A",{href:!0});var i6t=s(TJ);nAr=r(i6t,"TFCamembertForQuestionAnswering"),i6t.forEach(t),sAr=r(rIe," (CamemBERT model)"),rIe.forEach(t),lAr=i(ge),sC=n(ge,"LI",{});var tIe=s(sC);e7e=n(tIe,"STRONG",{});var d6t=s(e7e);iAr=r(d6t,"convbert"),d6t.forEach(t),dAr=r(tIe," \u2014 "),MJ=n(tIe,"A",{href:!0});var c6t=s(MJ);cAr=r(c6t,"TFConvBertForQuestionAnswering"),c6t.forEach(t),fAr=r(tIe," (ConvBERT model)"),tIe.forEach(t),mAr=i(ge),lC=n(ge,"LI",{});var aIe=s(lC);o7e=n(aIe,"STRONG",{});var f6t=s(o7e);gAr=r(f6t,"deberta"),f6t.forEach(t),hAr=r(aIe," \u2014 "),EJ=n(aIe,"A",{href:!0});var m6t=s(EJ);pAr=r(m6t,"TFDebertaForQuestionAnswering"),m6t.forEach(t),uAr=r(aIe," (DeBERTa model)"),aIe.forEach(t),_Ar=i(ge),iC=n(ge,"LI",{});var nIe=s(iC);r7e=n(nIe,"STRONG",{});var g6t=s(r7e);bAr=r(g6t,"deberta-v2"),g6t.forEach(t),vAr=r(nIe," \u2014 "),CJ=n(nIe,"A",{href:!0});var h6t=s(CJ);FAr=r(h6t,"TFDebertaV2ForQuestionAnswering"),h6t.forEach(t),TAr=r(nIe," (DeBERTa-v2 model)"),nIe.forEach(t),MAr=i(ge),dC=n(ge,"LI",{});var sIe=s(dC);t7e=n(sIe,"STRONG",{});var p6t=s(t7e);EAr=r(p6t,"distilbert"),p6t.forEach(t),CAr=r(sIe," \u2014 "),wJ=n(sIe,"A",{href:!0});var u6t=s(wJ);wAr=r(u6t,"TFDistilBertForQuestionAnswering"),u6t.forEach(t),AAr=r(sIe," (DistilBERT model)"),sIe.forEach(t),yAr=i(ge),cC=n(ge,"LI",{});var lIe=s(cC);a7e=n(lIe,"STRONG",{});var _6t=s(a7e);LAr=r(_6t,"electra"),_6t.forEach(t),xAr=r(lIe," \u2014 "),AJ=n(lIe,"A",{href:!0});var b6t=s(AJ);$Ar=r(b6t,"TFElectraForQuestionAnswering"),b6t.forEach(t),kAr=r(lIe," (ELECTRA model)"),lIe.forEach(t),SAr=i(ge),fC=n(ge,"LI",{});var iIe=s(fC);n7e=n(iIe,"STRONG",{});var v6t=s(n7e);RAr=r(v6t,"flaubert"),v6t.forEach(t),PAr=r(iIe," \u2014 "),yJ=n(iIe,"A",{href:!0});var F6t=s(yJ);BAr=r(F6t,"TFFlaubertForQuestionAnsweringSimple"),F6t.forEach(t),IAr=r(iIe," (FlauBERT model)"),iIe.forEach(t),NAr=i(ge),mC=n(ge,"LI",{});var dIe=s(mC);s7e=n(dIe,"STRONG",{});var T6t=s(s7e);qAr=r(T6t,"funnel"),T6t.forEach(t),jAr=r(dIe," \u2014 "),LJ=n(dIe,"A",{href:!0});var M6t=s(LJ);DAr=r(M6t,"TFFunnelForQuestionAnswering"),M6t.forEach(t),GAr=r(dIe," (Funnel Transformer model)"),dIe.forEach(t),OAr=i(ge),gC=n(ge,"LI",{});var cIe=s(gC);l7e=n(cIe,"STRONG",{});var E6t=s(l7e);VAr=r(E6t,"gptj"),E6t.forEach(t),XAr=r(cIe," \u2014 "),xJ=n(cIe,"A",{href:!0});var C6t=s(xJ);zAr=r(C6t,"TFGPTJForQuestionAnswering"),C6t.forEach(t),WAr=r(cIe," (GPT-J model)"),cIe.forEach(t),QAr=i(ge),hC=n(ge,"LI",{});var fIe=s(hC);i7e=n(fIe,"STRONG",{});var w6t=s(i7e);HAr=r(w6t,"longformer"),w6t.forEach(t),UAr=r(fIe," \u2014 "),$J=n(fIe,"A",{href:!0});var A6t=s($J);JAr=r(A6t,"TFLongformerForQuestionAnswering"),A6t.forEach(t),YAr=r(fIe," (Longformer model)"),fIe.forEach(t),KAr=i(ge),pC=n(ge,"LI",{});var mIe=s(pC);d7e=n(mIe,"STRONG",{});var y6t=s(d7e);ZAr=r(y6t,"mobilebert"),y6t.forEach(t),eyr=r(mIe," \u2014 "),kJ=n(mIe,"A",{href:!0});var L6t=s(kJ);oyr=r(L6t,"TFMobileBertForQuestionAnswering"),L6t.forEach(t),ryr=r(mIe," (MobileBERT model)"),mIe.forEach(t),tyr=i(ge),uC=n(ge,"LI",{});var gIe=s(uC);c7e=n(gIe,"STRONG",{});var x6t=s(c7e);ayr=r(x6t,"mpnet"),x6t.forEach(t),nyr=r(gIe," \u2014 "),SJ=n(gIe,"A",{href:!0});var $6t=s(SJ);syr=r($6t,"TFMPNetForQuestionAnswering"),$6t.forEach(t),lyr=r(gIe," (MPNet model)"),gIe.forEach(t),iyr=i(ge),_C=n(ge,"LI",{});var hIe=s(_C);f7e=n(hIe,"STRONG",{});var k6t=s(f7e);dyr=r(k6t,"rembert"),k6t.forEach(t),cyr=r(hIe," \u2014 "),RJ=n(hIe,"A",{href:!0});var S6t=s(RJ);fyr=r(S6t,"TFRemBertForQuestionAnswering"),S6t.forEach(t),myr=r(hIe," (RemBERT model)"),hIe.forEach(t),gyr=i(ge),bC=n(ge,"LI",{});var pIe=s(bC);m7e=n(pIe,"STRONG",{});var R6t=s(m7e);hyr=r(R6t,"roberta"),R6t.forEach(t),pyr=r(pIe," \u2014 "),PJ=n(pIe,"A",{href:!0});var P6t=s(PJ);uyr=r(P6t,"TFRobertaForQuestionAnswering"),P6t.forEach(t),_yr=r(pIe," (RoBERTa model)"),pIe.forEach(t),byr=i(ge),vC=n(ge,"LI",{});var uIe=s(vC);g7e=n(uIe,"STRONG",{});var B6t=s(g7e);vyr=r(B6t,"roformer"),B6t.forEach(t),Fyr=r(uIe," \u2014 "),BJ=n(uIe,"A",{href:!0});var I6t=s(BJ);Tyr=r(I6t,"TFRoFormerForQuestionAnswering"),I6t.forEach(t),Myr=r(uIe," (RoFormer model)"),uIe.forEach(t),Eyr=i(ge),FC=n(ge,"LI",{});var _Ie=s(FC);h7e=n(_Ie,"STRONG",{});var N6t=s(h7e);Cyr=r(N6t,"xlm"),N6t.forEach(t),wyr=r(_Ie," \u2014 "),IJ=n(_Ie,"A",{href:!0});var q6t=s(IJ);Ayr=r(q6t,"TFXLMForQuestionAnsweringSimple"),q6t.forEach(t),yyr=r(_Ie," (XLM model)"),_Ie.forEach(t),Lyr=i(ge),TC=n(ge,"LI",{});var bIe=s(TC);p7e=n(bIe,"STRONG",{});var j6t=s(p7e);xyr=r(j6t,"xlm-roberta"),j6t.forEach(t),$yr=r(bIe," \u2014 "),NJ=n(bIe,"A",{href:!0});var D6t=s(NJ);kyr=r(D6t,"TFXLMRobertaForQuestionAnswering"),D6t.forEach(t),Syr=r(bIe," (XLM-RoBERTa model)"),bIe.forEach(t),Ryr=i(ge),MC=n(ge,"LI",{});var vIe=s(MC);u7e=n(vIe,"STRONG",{});var G6t=s(u7e);Pyr=r(G6t,"xlnet"),G6t.forEach(t),Byr=r(vIe," \u2014 "),qJ=n(vIe,"A",{href:!0});var O6t=s(qJ);Iyr=r(O6t,"TFXLNetForQuestionAnsweringSimple"),O6t.forEach(t),Nyr=r(vIe," (XLNet model)"),vIe.forEach(t),ge.forEach(t),qyr=i(Nl),T(EC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Hje=i(f),Cc=n(f,"H2",{class:!0});var oOe=s(Cc);CC=n(oOe,"A",{id:!0,class:!0,href:!0});var V6t=s(CC);_7e=n(V6t,"SPAN",{});var X6t=s(_7e);T(F9.$$.fragment,X6t),X6t.forEach(t),V6t.forEach(t),jyr=i(oOe),b7e=n(oOe,"SPAN",{});var z6t=s(b7e);Dyr=r(z6t,"TFAutoModelForVision2Seq"),z6t.forEach(t),oOe.forEach(t),Uje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(T9.$$.fragment,ql),Gyr=i(ql),wc=n(ql,"P",{});var Xee=s(wc);Oyr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jJ=n(Xee,"A",{href:!0});var W6t=s(jJ);Vyr=r(W6t,"from_pretrained()"),W6t.forEach(t),Xyr=r(Xee," class method or the "),DJ=n(Xee,"A",{href:!0});var Q6t=s(DJ);zyr=r(Q6t,"from_config()"),Q6t.forEach(t),Wyr=r(Xee,` class
method.`),Xee.forEach(t),Qyr=i(ql),M9=n(ql,"P",{});var rOe=s(M9);Hyr=r(rOe,"This class cannot be instantiated directly using "),v7e=n(rOe,"CODE",{});var H6t=s(v7e);Uyr=r(H6t,"__init__()"),H6t.forEach(t),Jyr=r(rOe," (throws an error)."),rOe.forEach(t),Yyr=i(ql),jt=n(ql,"DIV",{class:!0});var eA=s(jt);T(E9.$$.fragment,eA),Kyr=i(eA),F7e=n(eA,"P",{});var U6t=s(F7e);Zyr=r(U6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U6t.forEach(t),eLr=i(eA),Ac=n(eA,"P",{});var zee=s(Ac);oLr=r(zee,`Note:
Loading a model from its configuration file does `),T7e=n(zee,"STRONG",{});var J6t=s(T7e);rLr=r(J6t,"not"),J6t.forEach(t),tLr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(zee,"A",{href:!0});var Y6t=s(GJ);aLr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),nLr=r(zee," to load the model weights."),zee.forEach(t),sLr=i(eA),T(wC.$$.fragment,eA),eA.forEach(t),lLr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(C9.$$.fragment,jl),iLr=i(jl),M7e=n(jl,"P",{});var K6t=s(M7e);dLr=r(K6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K6t.forEach(t),cLr=i(jl),mn=n(jl,"P",{});var oA=s(mn);fLr=r(oA,"The model class to instantiate is selected based on the "),E7e=n(oA,"CODE",{});var Z6t=s(E7e);mLr=r(Z6t,"model_type"),Z6t.forEach(t),gLr=r(oA,` property of the config object (either
passed as an argument or loaded from `),C7e=n(oA,"CODE",{});var eAt=s(C7e);hLr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),pLr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(oA,"CODE",{});var oAt=s(w7e);uLr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),_Lr=r(oA,":"),oA.forEach(t),bLr=i(jl),A7e=n(jl,"UL",{});var rAt=s(A7e);AC=n(rAt,"LI",{});var FIe=s(AC);y7e=n(FIe,"STRONG",{});var tAt=s(y7e);vLr=r(tAt,"vision-encoder-decoder"),tAt.forEach(t),FLr=r(FIe," \u2014 "),OJ=n(FIe,"A",{href:!0});var aAt=s(OJ);TLr=r(aAt,"TFVisionEncoderDecoderModel"),aAt.forEach(t),MLr=r(FIe," (Vision Encoder decoder model)"),FIe.forEach(t),rAt.forEach(t),ELr=i(jl),T(yC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Jje=i(f),yc=n(f,"H2",{class:!0});var tOe=s(yc);LC=n(tOe,"A",{id:!0,class:!0,href:!0});var nAt=s(LC);L7e=n(nAt,"SPAN",{});var sAt=s(L7e);T(w9.$$.fragment,sAt),sAt.forEach(t),nAt.forEach(t),CLr=i(tOe),x7e=n(tOe,"SPAN",{});var lAt=s(x7e);wLr=r(lAt,"TFAutoModelForSpeechSeq2Seq"),lAt.forEach(t),tOe.forEach(t),Yje=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(A9.$$.fragment,Dl),ALr=i(Dl),Lc=n(Dl,"P",{});var Wee=s(Lc);yLr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VJ=n(Wee,"A",{href:!0});var iAt=s(VJ);LLr=r(iAt,"from_pretrained()"),iAt.forEach(t),xLr=r(Wee," class method or the "),XJ=n(Wee,"A",{href:!0});var dAt=s(XJ);$Lr=r(dAt,"from_config()"),dAt.forEach(t),kLr=r(Wee,` class
method.`),Wee.forEach(t),SLr=i(Dl),y9=n(Dl,"P",{});var aOe=s(y9);RLr=r(aOe,"This class cannot be instantiated directly using "),$7e=n(aOe,"CODE",{});var cAt=s($7e);PLr=r(cAt,"__init__()"),cAt.forEach(t),BLr=r(aOe," (throws an error)."),aOe.forEach(t),ILr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var rA=s(Dt);T(L9.$$.fragment,rA),NLr=i(rA),k7e=n(rA,"P",{});var fAt=s(k7e);qLr=r(fAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fAt.forEach(t),jLr=i(rA),xc=n(rA,"P",{});var Qee=s(xc);DLr=r(Qee,`Note:
Loading a model from its configuration file does `),S7e=n(Qee,"STRONG",{});var mAt=s(S7e);GLr=r(mAt,"not"),mAt.forEach(t),OLr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Qee,"A",{href:!0});var gAt=s(zJ);VLr=r(gAt,"from_pretrained()"),gAt.forEach(t),XLr=r(Qee," to load the model weights."),Qee.forEach(t),zLr=i(rA),T(xC.$$.fragment,rA),rA.forEach(t),WLr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(x9.$$.fragment,Gl),QLr=i(Gl),R7e=n(Gl,"P",{});var hAt=s(R7e);HLr=r(hAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hAt.forEach(t),ULr=i(Gl),gn=n(Gl,"P",{});var tA=s(gn);JLr=r(tA,"The model class to instantiate is selected based on the "),P7e=n(tA,"CODE",{});var pAt=s(P7e);YLr=r(pAt,"model_type"),pAt.forEach(t),KLr=r(tA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(tA,"CODE",{});var uAt=s(B7e);ZLr=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),e8r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(tA,"CODE",{});var _At=s(I7e);o8r=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),r8r=r(tA,":"),tA.forEach(t),t8r=i(Gl),N7e=n(Gl,"UL",{});var bAt=s(N7e);$C=n(bAt,"LI",{});var TIe=s($C);q7e=n(TIe,"STRONG",{});var vAt=s(q7e);a8r=r(vAt,"speech_to_text"),vAt.forEach(t),n8r=r(TIe," \u2014 "),WJ=n(TIe,"A",{href:!0});var FAt=s(WJ);s8r=r(FAt,"TFSpeech2TextForConditionalGeneration"),FAt.forEach(t),l8r=r(TIe," (Speech2Text model)"),TIe.forEach(t),bAt.forEach(t),i8r=i(Gl),T(kC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Kje=i(f),$c=n(f,"H2",{class:!0});var nOe=s($c);SC=n(nOe,"A",{id:!0,class:!0,href:!0});var TAt=s(SC);j7e=n(TAt,"SPAN",{});var MAt=s(j7e);T($9.$$.fragment,MAt),MAt.forEach(t),TAt.forEach(t),d8r=i(nOe),D7e=n(nOe,"SPAN",{});var EAt=s(D7e);c8r=r(EAt,"FlaxAutoModel"),EAt.forEach(t),nOe.forEach(t),Zje=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(k9.$$.fragment,Ol),f8r=i(Ol),kc=n(Ol,"P",{});var Hee=s(kc);m8r=r(Hee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QJ=n(Hee,"A",{href:!0});var CAt=s(QJ);g8r=r(CAt,"from_pretrained()"),CAt.forEach(t),h8r=r(Hee," class method or the "),HJ=n(Hee,"A",{href:!0});var wAt=s(HJ);p8r=r(wAt,"from_config()"),wAt.forEach(t),u8r=r(Hee,` class
method.`),Hee.forEach(t),_8r=i(Ol),S9=n(Ol,"P",{});var sOe=s(S9);b8r=r(sOe,"This class cannot be instantiated directly using "),G7e=n(sOe,"CODE",{});var AAt=s(G7e);v8r=r(AAt,"__init__()"),AAt.forEach(t),F8r=r(sOe," (throws an error)."),sOe.forEach(t),T8r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var aA=s(Gt);T(R9.$$.fragment,aA),M8r=i(aA),O7e=n(aA,"P",{});var yAt=s(O7e);E8r=r(yAt,"Instantiates one of the base model classes of the library from a configuration."),yAt.forEach(t),C8r=i(aA),Sc=n(aA,"P",{});var Uee=s(Sc);w8r=r(Uee,`Note:
Loading a model from its configuration file does `),V7e=n(Uee,"STRONG",{});var LAt=s(V7e);A8r=r(LAt,"not"),LAt.forEach(t),y8r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Uee,"A",{href:!0});var xAt=s(UJ);L8r=r(xAt,"from_pretrained()"),xAt.forEach(t),x8r=r(Uee," to load the model weights."),Uee.forEach(t),$8r=i(aA),T(RC.$$.fragment,aA),aA.forEach(t),k8r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(P9.$$.fragment,Vl),S8r=i(Vl),X7e=n(Vl,"P",{});var $At=s(X7e);R8r=r($At,"Instantiate one of the base model classes of the library from a pretrained model."),$At.forEach(t),P8r=i(Vl),hn=n(Vl,"P",{});var nA=s(hn);B8r=r(nA,"The model class to instantiate is selected based on the "),z7e=n(nA,"CODE",{});var kAt=s(z7e);I8r=r(kAt,"model_type"),kAt.forEach(t),N8r=r(nA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(nA,"CODE",{});var SAt=s(W7e);q8r=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),j8r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(nA,"CODE",{});var RAt=s(Q7e);D8r=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),G8r=r(nA,":"),nA.forEach(t),O8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);PC=n(ne,"LI",{});var MIe=s(PC);H7e=n(MIe,"STRONG",{});var PAt=s(H7e);V8r=r(PAt,"albert"),PAt.forEach(t),X8r=r(MIe," \u2014 "),JJ=n(MIe,"A",{href:!0});var BAt=s(JJ);z8r=r(BAt,"FlaxAlbertModel"),BAt.forEach(t),W8r=r(MIe," (ALBERT model)"),MIe.forEach(t),Q8r=i(ne),BC=n(ne,"LI",{});var EIe=s(BC);U7e=n(EIe,"STRONG",{});var IAt=s(U7e);H8r=r(IAt,"bart"),IAt.forEach(t),U8r=r(EIe," \u2014 "),YJ=n(EIe,"A",{href:!0});var NAt=s(YJ);J8r=r(NAt,"FlaxBartModel"),NAt.forEach(t),Y8r=r(EIe," (BART model)"),EIe.forEach(t),K8r=i(ne),IC=n(ne,"LI",{});var CIe=s(IC);J7e=n(CIe,"STRONG",{});var qAt=s(J7e);Z8r=r(qAt,"beit"),qAt.forEach(t),e9r=r(CIe," \u2014 "),KJ=n(CIe,"A",{href:!0});var jAt=s(KJ);o9r=r(jAt,"FlaxBeitModel"),jAt.forEach(t),r9r=r(CIe," (BEiT model)"),CIe.forEach(t),t9r=i(ne),NC=n(ne,"LI",{});var wIe=s(NC);Y7e=n(wIe,"STRONG",{});var DAt=s(Y7e);a9r=r(DAt,"bert"),DAt.forEach(t),n9r=r(wIe," \u2014 "),ZJ=n(wIe,"A",{href:!0});var GAt=s(ZJ);s9r=r(GAt,"FlaxBertModel"),GAt.forEach(t),l9r=r(wIe," (BERT model)"),wIe.forEach(t),i9r=i(ne),qC=n(ne,"LI",{});var AIe=s(qC);K7e=n(AIe,"STRONG",{});var OAt=s(K7e);d9r=r(OAt,"big_bird"),OAt.forEach(t),c9r=r(AIe," \u2014 "),eY=n(AIe,"A",{href:!0});var VAt=s(eY);f9r=r(VAt,"FlaxBigBirdModel"),VAt.forEach(t),m9r=r(AIe," (BigBird model)"),AIe.forEach(t),g9r=i(ne),jC=n(ne,"LI",{});var yIe=s(jC);Z7e=n(yIe,"STRONG",{});var XAt=s(Z7e);h9r=r(XAt,"blenderbot"),XAt.forEach(t),p9r=r(yIe," \u2014 "),oY=n(yIe,"A",{href:!0});var zAt=s(oY);u9r=r(zAt,"FlaxBlenderbotModel"),zAt.forEach(t),_9r=r(yIe," (Blenderbot model)"),yIe.forEach(t),b9r=i(ne),DC=n(ne,"LI",{});var LIe=s(DC);eMe=n(LIe,"STRONG",{});var WAt=s(eMe);v9r=r(WAt,"blenderbot-small"),WAt.forEach(t),F9r=r(LIe," \u2014 "),rY=n(LIe,"A",{href:!0});var QAt=s(rY);T9r=r(QAt,"FlaxBlenderbotSmallModel"),QAt.forEach(t),M9r=r(LIe," (BlenderbotSmall model)"),LIe.forEach(t),E9r=i(ne),GC=n(ne,"LI",{});var xIe=s(GC);oMe=n(xIe,"STRONG",{});var HAt=s(oMe);C9r=r(HAt,"clip"),HAt.forEach(t),w9r=r(xIe," \u2014 "),tY=n(xIe,"A",{href:!0});var UAt=s(tY);A9r=r(UAt,"FlaxCLIPModel"),UAt.forEach(t),y9r=r(xIe," (CLIP model)"),xIe.forEach(t),L9r=i(ne),OC=n(ne,"LI",{});var $Ie=s(OC);rMe=n($Ie,"STRONG",{});var JAt=s(rMe);x9r=r(JAt,"distilbert"),JAt.forEach(t),$9r=r($Ie," \u2014 "),aY=n($Ie,"A",{href:!0});var YAt=s(aY);k9r=r(YAt,"FlaxDistilBertModel"),YAt.forEach(t),S9r=r($Ie," (DistilBERT model)"),$Ie.forEach(t),R9r=i(ne),VC=n(ne,"LI",{});var kIe=s(VC);tMe=n(kIe,"STRONG",{});var KAt=s(tMe);P9r=r(KAt,"electra"),KAt.forEach(t),B9r=r(kIe," \u2014 "),nY=n(kIe,"A",{href:!0});var ZAt=s(nY);I9r=r(ZAt,"FlaxElectraModel"),ZAt.forEach(t),N9r=r(kIe," (ELECTRA model)"),kIe.forEach(t),q9r=i(ne),XC=n(ne,"LI",{});var SIe=s(XC);aMe=n(SIe,"STRONG",{});var eyt=s(aMe);j9r=r(eyt,"gpt2"),eyt.forEach(t),D9r=r(SIe," \u2014 "),sY=n(SIe,"A",{href:!0});var oyt=s(sY);G9r=r(oyt,"FlaxGPT2Model"),oyt.forEach(t),O9r=r(SIe," (OpenAI GPT-2 model)"),SIe.forEach(t),V9r=i(ne),zC=n(ne,"LI",{});var RIe=s(zC);nMe=n(RIe,"STRONG",{});var ryt=s(nMe);X9r=r(ryt,"gpt_neo"),ryt.forEach(t),z9r=r(RIe," \u2014 "),lY=n(RIe,"A",{href:!0});var tyt=s(lY);W9r=r(tyt,"FlaxGPTNeoModel"),tyt.forEach(t),Q9r=r(RIe," (GPT Neo model)"),RIe.forEach(t),H9r=i(ne),WC=n(ne,"LI",{});var PIe=s(WC);sMe=n(PIe,"STRONG",{});var ayt=s(sMe);U9r=r(ayt,"gptj"),ayt.forEach(t),J9r=r(PIe," \u2014 "),iY=n(PIe,"A",{href:!0});var nyt=s(iY);Y9r=r(nyt,"FlaxGPTJModel"),nyt.forEach(t),K9r=r(PIe," (GPT-J model)"),PIe.forEach(t),Z9r=i(ne),QC=n(ne,"LI",{});var BIe=s(QC);lMe=n(BIe,"STRONG",{});var syt=s(lMe);exr=r(syt,"marian"),syt.forEach(t),oxr=r(BIe," \u2014 "),dY=n(BIe,"A",{href:!0});var lyt=s(dY);rxr=r(lyt,"FlaxMarianModel"),lyt.forEach(t),txr=r(BIe," (Marian model)"),BIe.forEach(t),axr=i(ne),HC=n(ne,"LI",{});var IIe=s(HC);iMe=n(IIe,"STRONG",{});var iyt=s(iMe);nxr=r(iyt,"mbart"),iyt.forEach(t),sxr=r(IIe," \u2014 "),cY=n(IIe,"A",{href:!0});var dyt=s(cY);lxr=r(dyt,"FlaxMBartModel"),dyt.forEach(t),ixr=r(IIe," (mBART model)"),IIe.forEach(t),dxr=i(ne),UC=n(ne,"LI",{});var NIe=s(UC);dMe=n(NIe,"STRONG",{});var cyt=s(dMe);cxr=r(cyt,"mt5"),cyt.forEach(t),fxr=r(NIe," \u2014 "),fY=n(NIe,"A",{href:!0});var fyt=s(fY);mxr=r(fyt,"FlaxMT5Model"),fyt.forEach(t),gxr=r(NIe," (mT5 model)"),NIe.forEach(t),hxr=i(ne),JC=n(ne,"LI",{});var qIe=s(JC);cMe=n(qIe,"STRONG",{});var myt=s(cMe);pxr=r(myt,"pegasus"),myt.forEach(t),uxr=r(qIe," \u2014 "),mY=n(qIe,"A",{href:!0});var gyt=s(mY);_xr=r(gyt,"FlaxPegasusModel"),gyt.forEach(t),bxr=r(qIe," (Pegasus model)"),qIe.forEach(t),vxr=i(ne),YC=n(ne,"LI",{});var jIe=s(YC);fMe=n(jIe,"STRONG",{});var hyt=s(fMe);Fxr=r(hyt,"roberta"),hyt.forEach(t),Txr=r(jIe," \u2014 "),gY=n(jIe,"A",{href:!0});var pyt=s(gY);Mxr=r(pyt,"FlaxRobertaModel"),pyt.forEach(t),Exr=r(jIe," (RoBERTa model)"),jIe.forEach(t),Cxr=i(ne),KC=n(ne,"LI",{});var DIe=s(KC);mMe=n(DIe,"STRONG",{});var uyt=s(mMe);wxr=r(uyt,"roformer"),uyt.forEach(t),Axr=r(DIe," \u2014 "),hY=n(DIe,"A",{href:!0});var _yt=s(hY);yxr=r(_yt,"FlaxRoFormerModel"),_yt.forEach(t),Lxr=r(DIe," (RoFormer model)"),DIe.forEach(t),xxr=i(ne),ZC=n(ne,"LI",{});var GIe=s(ZC);gMe=n(GIe,"STRONG",{});var byt=s(gMe);$xr=r(byt,"t5"),byt.forEach(t),kxr=r(GIe," \u2014 "),pY=n(GIe,"A",{href:!0});var vyt=s(pY);Sxr=r(vyt,"FlaxT5Model"),vyt.forEach(t),Rxr=r(GIe," (T5 model)"),GIe.forEach(t),Pxr=i(ne),e5=n(ne,"LI",{});var OIe=s(e5);hMe=n(OIe,"STRONG",{});var Fyt=s(hMe);Bxr=r(Fyt,"vision-text-dual-encoder"),Fyt.forEach(t),Ixr=r(OIe," \u2014 "),uY=n(OIe,"A",{href:!0});var Tyt=s(uY);Nxr=r(Tyt,"FlaxVisionTextDualEncoderModel"),Tyt.forEach(t),qxr=r(OIe," (VisionTextDualEncoder model)"),OIe.forEach(t),jxr=i(ne),o5=n(ne,"LI",{});var VIe=s(o5);pMe=n(VIe,"STRONG",{});var Myt=s(pMe);Dxr=r(Myt,"vit"),Myt.forEach(t),Gxr=r(VIe," \u2014 "),_Y=n(VIe,"A",{href:!0});var Eyt=s(_Y);Oxr=r(Eyt,"FlaxViTModel"),Eyt.forEach(t),Vxr=r(VIe," (ViT model)"),VIe.forEach(t),Xxr=i(ne),r5=n(ne,"LI",{});var XIe=s(r5);uMe=n(XIe,"STRONG",{});var Cyt=s(uMe);zxr=r(Cyt,"wav2vec2"),Cyt.forEach(t),Wxr=r(XIe," \u2014 "),bY=n(XIe,"A",{href:!0});var wyt=s(bY);Qxr=r(wyt,"FlaxWav2Vec2Model"),wyt.forEach(t),Hxr=r(XIe," (Wav2Vec2 model)"),XIe.forEach(t),Uxr=i(ne),t5=n(ne,"LI",{});var zIe=s(t5);_Me=n(zIe,"STRONG",{});var Ayt=s(_Me);Jxr=r(Ayt,"xglm"),Ayt.forEach(t),Yxr=r(zIe," \u2014 "),vY=n(zIe,"A",{href:!0});var yyt=s(vY);Kxr=r(yyt,"FlaxXGLMModel"),yyt.forEach(t),Zxr=r(zIe," (XGLM model)"),zIe.forEach(t),e$r=i(ne),a5=n(ne,"LI",{});var WIe=s(a5);bMe=n(WIe,"STRONG",{});var Lyt=s(bMe);o$r=r(Lyt,"xlm-roberta"),Lyt.forEach(t),r$r=r(WIe," \u2014 "),FY=n(WIe,"A",{href:!0});var xyt=s(FY);t$r=r(xyt,"FlaxXLMRobertaModel"),xyt.forEach(t),a$r=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),ne.forEach(t),n$r=i(Vl),T(n5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),eDe=i(f),Rc=n(f,"H2",{class:!0});var lOe=s(Rc);s5=n(lOe,"A",{id:!0,class:!0,href:!0});var $yt=s(s5);vMe=n($yt,"SPAN",{});var kyt=s(vMe);T(B9.$$.fragment,kyt),kyt.forEach(t),$yt.forEach(t),s$r=i(lOe),FMe=n(lOe,"SPAN",{});var Syt=s(FMe);l$r=r(Syt,"FlaxAutoModelForCausalLM"),Syt.forEach(t),lOe.forEach(t),oDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(I9.$$.fragment,Xl),i$r=i(Xl),Pc=n(Xl,"P",{});var Jee=s(Pc);d$r=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TY=n(Jee,"A",{href:!0});var Ryt=s(TY);c$r=r(Ryt,"from_pretrained()"),Ryt.forEach(t),f$r=r(Jee," class method or the "),MY=n(Jee,"A",{href:!0});var Pyt=s(MY);m$r=r(Pyt,"from_config()"),Pyt.forEach(t),g$r=r(Jee,` class
method.`),Jee.forEach(t),h$r=i(Xl),N9=n(Xl,"P",{});var iOe=s(N9);p$r=r(iOe,"This class cannot be instantiated directly using "),TMe=n(iOe,"CODE",{});var Byt=s(TMe);u$r=r(Byt,"__init__()"),Byt.forEach(t),_$r=r(iOe," (throws an error)."),iOe.forEach(t),b$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var sA=s(Ot);T(q9.$$.fragment,sA),v$r=i(sA),MMe=n(sA,"P",{});var Iyt=s(MMe);F$r=r(Iyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Iyt.forEach(t),T$r=i(sA),Bc=n(sA,"P",{});var Yee=s(Bc);M$r=r(Yee,`Note:
Loading a model from its configuration file does `),EMe=n(Yee,"STRONG",{});var Nyt=s(EMe);E$r=r(Nyt,"not"),Nyt.forEach(t),C$r=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Yee,"A",{href:!0});var qyt=s(EY);w$r=r(qyt,"from_pretrained()"),qyt.forEach(t),A$r=r(Yee," to load the model weights."),Yee.forEach(t),y$r=i(sA),T(l5.$$.fragment,sA),sA.forEach(t),L$r=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(j9.$$.fragment,zl),x$r=i(zl),CMe=n(zl,"P",{});var jyt=s(CMe);$$r=r(jyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jyt.forEach(t),k$r=i(zl),pn=n(zl,"P",{});var lA=s(pn);S$r=r(lA,"The model class to instantiate is selected based on the "),wMe=n(lA,"CODE",{});var Dyt=s(wMe);R$r=r(Dyt,"model_type"),Dyt.forEach(t),P$r=r(lA,` property of the config object (either
passed as an argument or loaded from `),AMe=n(lA,"CODE",{});var Gyt=s(AMe);B$r=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),I$r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(lA,"CODE",{});var Oyt=s(yMe);N$r=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),q$r=r(lA,":"),lA.forEach(t),j$r=i(zl),Re=n(zl,"UL",{});var Xe=s(Re);i5=n(Xe,"LI",{});var QIe=s(i5);LMe=n(QIe,"STRONG",{});var Vyt=s(LMe);D$r=r(Vyt,"bart"),Vyt.forEach(t),G$r=r(QIe," \u2014 "),CY=n(QIe,"A",{href:!0});var Xyt=s(CY);O$r=r(Xyt,"FlaxBartForCausalLM"),Xyt.forEach(t),V$r=r(QIe," (BART model)"),QIe.forEach(t),X$r=i(Xe),d5=n(Xe,"LI",{});var HIe=s(d5);xMe=n(HIe,"STRONG",{});var zyt=s(xMe);z$r=r(zyt,"bert"),zyt.forEach(t),W$r=r(HIe," \u2014 "),wY=n(HIe,"A",{href:!0});var Wyt=s(wY);Q$r=r(Wyt,"FlaxBertForCausalLM"),Wyt.forEach(t),H$r=r(HIe," (BERT model)"),HIe.forEach(t),U$r=i(Xe),c5=n(Xe,"LI",{});var UIe=s(c5);$Me=n(UIe,"STRONG",{});var Qyt=s($Me);J$r=r(Qyt,"big_bird"),Qyt.forEach(t),Y$r=r(UIe," \u2014 "),AY=n(UIe,"A",{href:!0});var Hyt=s(AY);K$r=r(Hyt,"FlaxBigBirdForCausalLM"),Hyt.forEach(t),Z$r=r(UIe," (BigBird model)"),UIe.forEach(t),ekr=i(Xe),f5=n(Xe,"LI",{});var JIe=s(f5);kMe=n(JIe,"STRONG",{});var Uyt=s(kMe);okr=r(Uyt,"electra"),Uyt.forEach(t),rkr=r(JIe," \u2014 "),yY=n(JIe,"A",{href:!0});var Jyt=s(yY);tkr=r(Jyt,"FlaxElectraForCausalLM"),Jyt.forEach(t),akr=r(JIe," (ELECTRA model)"),JIe.forEach(t),nkr=i(Xe),m5=n(Xe,"LI",{});var YIe=s(m5);SMe=n(YIe,"STRONG",{});var Yyt=s(SMe);skr=r(Yyt,"gpt2"),Yyt.forEach(t),lkr=r(YIe," \u2014 "),LY=n(YIe,"A",{href:!0});var Kyt=s(LY);ikr=r(Kyt,"FlaxGPT2LMHeadModel"),Kyt.forEach(t),dkr=r(YIe," (OpenAI GPT-2 model)"),YIe.forEach(t),ckr=i(Xe),g5=n(Xe,"LI",{});var KIe=s(g5);RMe=n(KIe,"STRONG",{});var Zyt=s(RMe);fkr=r(Zyt,"gpt_neo"),Zyt.forEach(t),mkr=r(KIe," \u2014 "),xY=n(KIe,"A",{href:!0});var eLt=s(xY);gkr=r(eLt,"FlaxGPTNeoForCausalLM"),eLt.forEach(t),hkr=r(KIe," (GPT Neo model)"),KIe.forEach(t),pkr=i(Xe),h5=n(Xe,"LI",{});var ZIe=s(h5);PMe=n(ZIe,"STRONG",{});var oLt=s(PMe);ukr=r(oLt,"gptj"),oLt.forEach(t),_kr=r(ZIe," \u2014 "),$Y=n(ZIe,"A",{href:!0});var rLt=s($Y);bkr=r(rLt,"FlaxGPTJForCausalLM"),rLt.forEach(t),vkr=r(ZIe," (GPT-J model)"),ZIe.forEach(t),Fkr=i(Xe),p5=n(Xe,"LI",{});var eNe=s(p5);BMe=n(eNe,"STRONG",{});var tLt=s(BMe);Tkr=r(tLt,"roberta"),tLt.forEach(t),Mkr=r(eNe," \u2014 "),kY=n(eNe,"A",{href:!0});var aLt=s(kY);Ekr=r(aLt,"FlaxRobertaForCausalLM"),aLt.forEach(t),Ckr=r(eNe," (RoBERTa model)"),eNe.forEach(t),wkr=i(Xe),u5=n(Xe,"LI",{});var oNe=s(u5);IMe=n(oNe,"STRONG",{});var nLt=s(IMe);Akr=r(nLt,"xglm"),nLt.forEach(t),ykr=r(oNe," \u2014 "),SY=n(oNe,"A",{href:!0});var sLt=s(SY);Lkr=r(sLt,"FlaxXGLMForCausalLM"),sLt.forEach(t),xkr=r(oNe," (XGLM model)"),oNe.forEach(t),Xe.forEach(t),$kr=i(zl),T(_5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),rDe=i(f),Ic=n(f,"H2",{class:!0});var dOe=s(Ic);b5=n(dOe,"A",{id:!0,class:!0,href:!0});var lLt=s(b5);NMe=n(lLt,"SPAN",{});var iLt=s(NMe);T(D9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),kkr=i(dOe),qMe=n(dOe,"SPAN",{});var dLt=s(qMe);Skr=r(dLt,"FlaxAutoModelForPreTraining"),dLt.forEach(t),dOe.forEach(t),tDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(G9.$$.fragment,Wl),Rkr=i(Wl),Nc=n(Wl,"P",{});var Kee=s(Nc);Pkr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RY=n(Kee,"A",{href:!0});var cLt=s(RY);Bkr=r(cLt,"from_pretrained()"),cLt.forEach(t),Ikr=r(Kee," class method or the "),PY=n(Kee,"A",{href:!0});var fLt=s(PY);Nkr=r(fLt,"from_config()"),fLt.forEach(t),qkr=r(Kee,` class
method.`),Kee.forEach(t),jkr=i(Wl),O9=n(Wl,"P",{});var cOe=s(O9);Dkr=r(cOe,"This class cannot be instantiated directly using "),jMe=n(cOe,"CODE",{});var mLt=s(jMe);Gkr=r(mLt,"__init__()"),mLt.forEach(t),Okr=r(cOe," (throws an error)."),cOe.forEach(t),Vkr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var iA=s(Vt);T(V9.$$.fragment,iA),Xkr=i(iA),DMe=n(iA,"P",{});var gLt=s(DMe);zkr=r(gLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gLt.forEach(t),Wkr=i(iA),qc=n(iA,"P",{});var Zee=s(qc);Qkr=r(Zee,`Note:
Loading a model from its configuration file does `),GMe=n(Zee,"STRONG",{});var hLt=s(GMe);Hkr=r(hLt,"not"),hLt.forEach(t),Ukr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(Zee,"A",{href:!0});var pLt=s(BY);Jkr=r(pLt,"from_pretrained()"),pLt.forEach(t),Ykr=r(Zee," to load the model weights."),Zee.forEach(t),Kkr=i(iA),T(v5.$$.fragment,iA),iA.forEach(t),Zkr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(X9.$$.fragment,Ql),eSr=i(Ql),OMe=n(Ql,"P",{});var uLt=s(OMe);oSr=r(uLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uLt.forEach(t),rSr=i(Ql),un=n(Ql,"P",{});var dA=s(un);tSr=r(dA,"The model class to instantiate is selected based on the "),VMe=n(dA,"CODE",{});var _Lt=s(VMe);aSr=r(_Lt,"model_type"),_Lt.forEach(t),nSr=r(dA,` property of the config object (either
passed as an argument or loaded from `),XMe=n(dA,"CODE",{});var bLt=s(XMe);sSr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),lSr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(dA,"CODE",{});var vLt=s(zMe);iSr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),dSr=r(dA,":"),dA.forEach(t),cSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);F5=n(we,"LI",{});var rNe=s(F5);WMe=n(rNe,"STRONG",{});var FLt=s(WMe);fSr=r(FLt,"albert"),FLt.forEach(t),mSr=r(rNe," \u2014 "),IY=n(rNe,"A",{href:!0});var TLt=s(IY);gSr=r(TLt,"FlaxAlbertForPreTraining"),TLt.forEach(t),hSr=r(rNe," (ALBERT model)"),rNe.forEach(t),pSr=i(we),T5=n(we,"LI",{});var tNe=s(T5);QMe=n(tNe,"STRONG",{});var MLt=s(QMe);uSr=r(MLt,"bart"),MLt.forEach(t),_Sr=r(tNe," \u2014 "),NY=n(tNe,"A",{href:!0});var ELt=s(NY);bSr=r(ELt,"FlaxBartForConditionalGeneration"),ELt.forEach(t),vSr=r(tNe," (BART model)"),tNe.forEach(t),FSr=i(we),M5=n(we,"LI",{});var aNe=s(M5);HMe=n(aNe,"STRONG",{});var CLt=s(HMe);TSr=r(CLt,"bert"),CLt.forEach(t),MSr=r(aNe," \u2014 "),qY=n(aNe,"A",{href:!0});var wLt=s(qY);ESr=r(wLt,"FlaxBertForPreTraining"),wLt.forEach(t),CSr=r(aNe," (BERT model)"),aNe.forEach(t),wSr=i(we),E5=n(we,"LI",{});var nNe=s(E5);UMe=n(nNe,"STRONG",{});var ALt=s(UMe);ASr=r(ALt,"big_bird"),ALt.forEach(t),ySr=r(nNe," \u2014 "),jY=n(nNe,"A",{href:!0});var yLt=s(jY);LSr=r(yLt,"FlaxBigBirdForPreTraining"),yLt.forEach(t),xSr=r(nNe," (BigBird model)"),nNe.forEach(t),$Sr=i(we),C5=n(we,"LI",{});var sNe=s(C5);JMe=n(sNe,"STRONG",{});var LLt=s(JMe);kSr=r(LLt,"electra"),LLt.forEach(t),SSr=r(sNe," \u2014 "),DY=n(sNe,"A",{href:!0});var xLt=s(DY);RSr=r(xLt,"FlaxElectraForPreTraining"),xLt.forEach(t),PSr=r(sNe," (ELECTRA model)"),sNe.forEach(t),BSr=i(we),w5=n(we,"LI",{});var lNe=s(w5);YMe=n(lNe,"STRONG",{});var $Lt=s(YMe);ISr=r($Lt,"mbart"),$Lt.forEach(t),NSr=r(lNe," \u2014 "),GY=n(lNe,"A",{href:!0});var kLt=s(GY);qSr=r(kLt,"FlaxMBartForConditionalGeneration"),kLt.forEach(t),jSr=r(lNe," (mBART model)"),lNe.forEach(t),DSr=i(we),A5=n(we,"LI",{});var iNe=s(A5);KMe=n(iNe,"STRONG",{});var SLt=s(KMe);GSr=r(SLt,"mt5"),SLt.forEach(t),OSr=r(iNe," \u2014 "),OY=n(iNe,"A",{href:!0});var RLt=s(OY);VSr=r(RLt,"FlaxMT5ForConditionalGeneration"),RLt.forEach(t),XSr=r(iNe," (mT5 model)"),iNe.forEach(t),zSr=i(we),y5=n(we,"LI",{});var dNe=s(y5);ZMe=n(dNe,"STRONG",{});var PLt=s(ZMe);WSr=r(PLt,"roberta"),PLt.forEach(t),QSr=r(dNe," \u2014 "),VY=n(dNe,"A",{href:!0});var BLt=s(VY);HSr=r(BLt,"FlaxRobertaForMaskedLM"),BLt.forEach(t),USr=r(dNe," (RoBERTa model)"),dNe.forEach(t),JSr=i(we),L5=n(we,"LI",{});var cNe=s(L5);e4e=n(cNe,"STRONG",{});var ILt=s(e4e);YSr=r(ILt,"roformer"),ILt.forEach(t),KSr=r(cNe," \u2014 "),XY=n(cNe,"A",{href:!0});var NLt=s(XY);ZSr=r(NLt,"FlaxRoFormerForMaskedLM"),NLt.forEach(t),eRr=r(cNe," (RoFormer model)"),cNe.forEach(t),oRr=i(we),x5=n(we,"LI",{});var fNe=s(x5);o4e=n(fNe,"STRONG",{});var qLt=s(o4e);rRr=r(qLt,"t5"),qLt.forEach(t),tRr=r(fNe," \u2014 "),zY=n(fNe,"A",{href:!0});var jLt=s(zY);aRr=r(jLt,"FlaxT5ForConditionalGeneration"),jLt.forEach(t),nRr=r(fNe," (T5 model)"),fNe.forEach(t),sRr=i(we),$5=n(we,"LI",{});var mNe=s($5);r4e=n(mNe,"STRONG",{});var DLt=s(r4e);lRr=r(DLt,"wav2vec2"),DLt.forEach(t),iRr=r(mNe," \u2014 "),WY=n(mNe,"A",{href:!0});var GLt=s(WY);dRr=r(GLt,"FlaxWav2Vec2ForPreTraining"),GLt.forEach(t),cRr=r(mNe," (Wav2Vec2 model)"),mNe.forEach(t),fRr=i(we),k5=n(we,"LI",{});var gNe=s(k5);t4e=n(gNe,"STRONG",{});var OLt=s(t4e);mRr=r(OLt,"xlm-roberta"),OLt.forEach(t),gRr=r(gNe," \u2014 "),QY=n(gNe,"A",{href:!0});var VLt=s(QY);hRr=r(VLt,"FlaxXLMRobertaForMaskedLM"),VLt.forEach(t),pRr=r(gNe," (XLM-RoBERTa model)"),gNe.forEach(t),we.forEach(t),uRr=i(Ql),T(S5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),aDe=i(f),jc=n(f,"H2",{class:!0});var fOe=s(jc);R5=n(fOe,"A",{id:!0,class:!0,href:!0});var XLt=s(R5);a4e=n(XLt,"SPAN",{});var zLt=s(a4e);T(z9.$$.fragment,zLt),zLt.forEach(t),XLt.forEach(t),_Rr=i(fOe),n4e=n(fOe,"SPAN",{});var WLt=s(n4e);bRr=r(WLt,"FlaxAutoModelForMaskedLM"),WLt.forEach(t),fOe.forEach(t),nDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(W9.$$.fragment,Hl),vRr=i(Hl),Dc=n(Hl,"P",{});var eoe=s(Dc);FRr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HY=n(eoe,"A",{href:!0});var QLt=s(HY);TRr=r(QLt,"from_pretrained()"),QLt.forEach(t),MRr=r(eoe," class method or the "),UY=n(eoe,"A",{href:!0});var HLt=s(UY);ERr=r(HLt,"from_config()"),HLt.forEach(t),CRr=r(eoe,` class
method.`),eoe.forEach(t),wRr=i(Hl),Q9=n(Hl,"P",{});var mOe=s(Q9);ARr=r(mOe,"This class cannot be instantiated directly using "),s4e=n(mOe,"CODE",{});var ULt=s(s4e);yRr=r(ULt,"__init__()"),ULt.forEach(t),LRr=r(mOe," (throws an error)."),mOe.forEach(t),xRr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var cA=s(Xt);T(H9.$$.fragment,cA),$Rr=i(cA),l4e=n(cA,"P",{});var JLt=s(l4e);kRr=r(JLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JLt.forEach(t),SRr=i(cA),Gc=n(cA,"P",{});var ooe=s(Gc);RRr=r(ooe,`Note:
Loading a model from its configuration file does `),i4e=n(ooe,"STRONG",{});var YLt=s(i4e);PRr=r(YLt,"not"),YLt.forEach(t),BRr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(ooe,"A",{href:!0});var KLt=s(JY);IRr=r(KLt,"from_pretrained()"),KLt.forEach(t),NRr=r(ooe," to load the model weights."),ooe.forEach(t),qRr=i(cA),T(P5.$$.fragment,cA),cA.forEach(t),jRr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(U9.$$.fragment,Ul),DRr=i(Ul),d4e=n(Ul,"P",{});var ZLt=s(d4e);GRr=r(ZLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZLt.forEach(t),ORr=i(Ul),_n=n(Ul,"P",{});var fA=s(_n);VRr=r(fA,"The model class to instantiate is selected based on the "),c4e=n(fA,"CODE",{});var e8t=s(c4e);XRr=r(e8t,"model_type"),e8t.forEach(t),zRr=r(fA,` property of the config object (either
passed as an argument or loaded from `),f4e=n(fA,"CODE",{});var o8t=s(f4e);WRr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),QRr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(fA,"CODE",{});var r8t=s(m4e);HRr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),URr=r(fA,":"),fA.forEach(t),JRr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);B5=n(Ie,"LI",{});var hNe=s(B5);g4e=n(hNe,"STRONG",{});var t8t=s(g4e);YRr=r(t8t,"albert"),t8t.forEach(t),KRr=r(hNe," \u2014 "),YY=n(hNe,"A",{href:!0});var a8t=s(YY);ZRr=r(a8t,"FlaxAlbertForMaskedLM"),a8t.forEach(t),ePr=r(hNe," (ALBERT model)"),hNe.forEach(t),oPr=i(Ie),I5=n(Ie,"LI",{});var pNe=s(I5);h4e=n(pNe,"STRONG",{});var n8t=s(h4e);rPr=r(n8t,"bart"),n8t.forEach(t),tPr=r(pNe," \u2014 "),KY=n(pNe,"A",{href:!0});var s8t=s(KY);aPr=r(s8t,"FlaxBartForConditionalGeneration"),s8t.forEach(t),nPr=r(pNe," (BART model)"),pNe.forEach(t),sPr=i(Ie),N5=n(Ie,"LI",{});var uNe=s(N5);p4e=n(uNe,"STRONG",{});var l8t=s(p4e);lPr=r(l8t,"bert"),l8t.forEach(t),iPr=r(uNe," \u2014 "),ZY=n(uNe,"A",{href:!0});var i8t=s(ZY);dPr=r(i8t,"FlaxBertForMaskedLM"),i8t.forEach(t),cPr=r(uNe," (BERT model)"),uNe.forEach(t),fPr=i(Ie),q5=n(Ie,"LI",{});var _Ne=s(q5);u4e=n(_Ne,"STRONG",{});var d8t=s(u4e);mPr=r(d8t,"big_bird"),d8t.forEach(t),gPr=r(_Ne," \u2014 "),eK=n(_Ne,"A",{href:!0});var c8t=s(eK);hPr=r(c8t,"FlaxBigBirdForMaskedLM"),c8t.forEach(t),pPr=r(_Ne," (BigBird model)"),_Ne.forEach(t),uPr=i(Ie),j5=n(Ie,"LI",{});var bNe=s(j5);_4e=n(bNe,"STRONG",{});var f8t=s(_4e);_Pr=r(f8t,"distilbert"),f8t.forEach(t),bPr=r(bNe," \u2014 "),oK=n(bNe,"A",{href:!0});var m8t=s(oK);vPr=r(m8t,"FlaxDistilBertForMaskedLM"),m8t.forEach(t),FPr=r(bNe," (DistilBERT model)"),bNe.forEach(t),TPr=i(Ie),D5=n(Ie,"LI",{});var vNe=s(D5);b4e=n(vNe,"STRONG",{});var g8t=s(b4e);MPr=r(g8t,"electra"),g8t.forEach(t),EPr=r(vNe," \u2014 "),rK=n(vNe,"A",{href:!0});var h8t=s(rK);CPr=r(h8t,"FlaxElectraForMaskedLM"),h8t.forEach(t),wPr=r(vNe," (ELECTRA model)"),vNe.forEach(t),APr=i(Ie),G5=n(Ie,"LI",{});var FNe=s(G5);v4e=n(FNe,"STRONG",{});var p8t=s(v4e);yPr=r(p8t,"mbart"),p8t.forEach(t),LPr=r(FNe," \u2014 "),tK=n(FNe,"A",{href:!0});var u8t=s(tK);xPr=r(u8t,"FlaxMBartForConditionalGeneration"),u8t.forEach(t),$Pr=r(FNe," (mBART model)"),FNe.forEach(t),kPr=i(Ie),O5=n(Ie,"LI",{});var TNe=s(O5);F4e=n(TNe,"STRONG",{});var _8t=s(F4e);SPr=r(_8t,"roberta"),_8t.forEach(t),RPr=r(TNe," \u2014 "),aK=n(TNe,"A",{href:!0});var b8t=s(aK);PPr=r(b8t,"FlaxRobertaForMaskedLM"),b8t.forEach(t),BPr=r(TNe," (RoBERTa model)"),TNe.forEach(t),IPr=i(Ie),V5=n(Ie,"LI",{});var MNe=s(V5);T4e=n(MNe,"STRONG",{});var v8t=s(T4e);NPr=r(v8t,"roformer"),v8t.forEach(t),qPr=r(MNe," \u2014 "),nK=n(MNe,"A",{href:!0});var F8t=s(nK);jPr=r(F8t,"FlaxRoFormerForMaskedLM"),F8t.forEach(t),DPr=r(MNe," (RoFormer model)"),MNe.forEach(t),GPr=i(Ie),X5=n(Ie,"LI",{});var ENe=s(X5);M4e=n(ENe,"STRONG",{});var T8t=s(M4e);OPr=r(T8t,"xlm-roberta"),T8t.forEach(t),VPr=r(ENe," \u2014 "),sK=n(ENe,"A",{href:!0});var M8t=s(sK);XPr=r(M8t,"FlaxXLMRobertaForMaskedLM"),M8t.forEach(t),zPr=r(ENe," (XLM-RoBERTa model)"),ENe.forEach(t),Ie.forEach(t),WPr=i(Ul),T(z5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),sDe=i(f),Oc=n(f,"H2",{class:!0});var gOe=s(Oc);W5=n(gOe,"A",{id:!0,class:!0,href:!0});var E8t=s(W5);E4e=n(E8t,"SPAN",{});var C8t=s(E4e);T(J9.$$.fragment,C8t),C8t.forEach(t),E8t.forEach(t),QPr=i(gOe),C4e=n(gOe,"SPAN",{});var w8t=s(C4e);HPr=r(w8t,"FlaxAutoModelForSeq2SeqLM"),w8t.forEach(t),gOe.forEach(t),lDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(Y9.$$.fragment,Jl),UPr=i(Jl),Vc=n(Jl,"P",{});var roe=s(Vc);JPr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lK=n(roe,"A",{href:!0});var A8t=s(lK);YPr=r(A8t,"from_pretrained()"),A8t.forEach(t),KPr=r(roe," class method or the "),iK=n(roe,"A",{href:!0});var y8t=s(iK);ZPr=r(y8t,"from_config()"),y8t.forEach(t),eBr=r(roe,` class
method.`),roe.forEach(t),oBr=i(Jl),K9=n(Jl,"P",{});var hOe=s(K9);rBr=r(hOe,"This class cannot be instantiated directly using "),w4e=n(hOe,"CODE",{});var L8t=s(w4e);tBr=r(L8t,"__init__()"),L8t.forEach(t),aBr=r(hOe," (throws an error)."),hOe.forEach(t),nBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var mA=s(zt);T(Z9.$$.fragment,mA),sBr=i(mA),A4e=n(mA,"P",{});var x8t=s(A4e);lBr=r(x8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x8t.forEach(t),iBr=i(mA),Xc=n(mA,"P",{});var toe=s(Xc);dBr=r(toe,`Note:
Loading a model from its configuration file does `),y4e=n(toe,"STRONG",{});var $8t=s(y4e);cBr=r($8t,"not"),$8t.forEach(t),fBr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(toe,"A",{href:!0});var k8t=s(dK);mBr=r(k8t,"from_pretrained()"),k8t.forEach(t),gBr=r(toe," to load the model weights."),toe.forEach(t),hBr=i(mA),T(Q5.$$.fragment,mA),mA.forEach(t),pBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ex.$$.fragment,Yl),uBr=i(Yl),L4e=n(Yl,"P",{});var S8t=s(L4e);_Br=r(S8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S8t.forEach(t),bBr=i(Yl),bn=n(Yl,"P",{});var gA=s(bn);vBr=r(gA,"The model class to instantiate is selected based on the "),x4e=n(gA,"CODE",{});var R8t=s(x4e);FBr=r(R8t,"model_type"),R8t.forEach(t),TBr=r(gA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(gA,"CODE",{});var P8t=s($4e);MBr=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),EBr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(gA,"CODE",{});var B8t=s(k4e);CBr=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),wBr=r(gA,":"),gA.forEach(t),ABr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);H5=n(ze,"LI",{});var CNe=s(H5);S4e=n(CNe,"STRONG",{});var I8t=s(S4e);yBr=r(I8t,"bart"),I8t.forEach(t),LBr=r(CNe," \u2014 "),cK=n(CNe,"A",{href:!0});var N8t=s(cK);xBr=r(N8t,"FlaxBartForConditionalGeneration"),N8t.forEach(t),$Br=r(CNe," (BART model)"),CNe.forEach(t),kBr=i(ze),U5=n(ze,"LI",{});var wNe=s(U5);R4e=n(wNe,"STRONG",{});var q8t=s(R4e);SBr=r(q8t,"blenderbot"),q8t.forEach(t),RBr=r(wNe," \u2014 "),fK=n(wNe,"A",{href:!0});var j8t=s(fK);PBr=r(j8t,"FlaxBlenderbotForConditionalGeneration"),j8t.forEach(t),BBr=r(wNe," (Blenderbot model)"),wNe.forEach(t),IBr=i(ze),J5=n(ze,"LI",{});var ANe=s(J5);P4e=n(ANe,"STRONG",{});var D8t=s(P4e);NBr=r(D8t,"blenderbot-small"),D8t.forEach(t),qBr=r(ANe," \u2014 "),mK=n(ANe,"A",{href:!0});var G8t=s(mK);jBr=r(G8t,"FlaxBlenderbotSmallForConditionalGeneration"),G8t.forEach(t),DBr=r(ANe," (BlenderbotSmall model)"),ANe.forEach(t),GBr=i(ze),Y5=n(ze,"LI",{});var yNe=s(Y5);B4e=n(yNe,"STRONG",{});var O8t=s(B4e);OBr=r(O8t,"encoder-decoder"),O8t.forEach(t),VBr=r(yNe," \u2014 "),gK=n(yNe,"A",{href:!0});var V8t=s(gK);XBr=r(V8t,"FlaxEncoderDecoderModel"),V8t.forEach(t),zBr=r(yNe," (Encoder decoder model)"),yNe.forEach(t),WBr=i(ze),K5=n(ze,"LI",{});var LNe=s(K5);I4e=n(LNe,"STRONG",{});var X8t=s(I4e);QBr=r(X8t,"marian"),X8t.forEach(t),HBr=r(LNe," \u2014 "),hK=n(LNe,"A",{href:!0});var z8t=s(hK);UBr=r(z8t,"FlaxMarianMTModel"),z8t.forEach(t),JBr=r(LNe," (Marian model)"),LNe.forEach(t),YBr=i(ze),Z5=n(ze,"LI",{});var xNe=s(Z5);N4e=n(xNe,"STRONG",{});var W8t=s(N4e);KBr=r(W8t,"mbart"),W8t.forEach(t),ZBr=r(xNe," \u2014 "),pK=n(xNe,"A",{href:!0});var Q8t=s(pK);eIr=r(Q8t,"FlaxMBartForConditionalGeneration"),Q8t.forEach(t),oIr=r(xNe," (mBART model)"),xNe.forEach(t),rIr=i(ze),ew=n(ze,"LI",{});var $Ne=s(ew);q4e=n($Ne,"STRONG",{});var H8t=s(q4e);tIr=r(H8t,"mt5"),H8t.forEach(t),aIr=r($Ne," \u2014 "),uK=n($Ne,"A",{href:!0});var U8t=s(uK);nIr=r(U8t,"FlaxMT5ForConditionalGeneration"),U8t.forEach(t),sIr=r($Ne," (mT5 model)"),$Ne.forEach(t),lIr=i(ze),ow=n(ze,"LI",{});var kNe=s(ow);j4e=n(kNe,"STRONG",{});var J8t=s(j4e);iIr=r(J8t,"pegasus"),J8t.forEach(t),dIr=r(kNe," \u2014 "),_K=n(kNe,"A",{href:!0});var Y8t=s(_K);cIr=r(Y8t,"FlaxPegasusForConditionalGeneration"),Y8t.forEach(t),fIr=r(kNe," (Pegasus model)"),kNe.forEach(t),mIr=i(ze),rw=n(ze,"LI",{});var SNe=s(rw);D4e=n(SNe,"STRONG",{});var K8t=s(D4e);gIr=r(K8t,"t5"),K8t.forEach(t),hIr=r(SNe," \u2014 "),bK=n(SNe,"A",{href:!0});var Z8t=s(bK);pIr=r(Z8t,"FlaxT5ForConditionalGeneration"),Z8t.forEach(t),uIr=r(SNe," (T5 model)"),SNe.forEach(t),ze.forEach(t),_Ir=i(Yl),T(tw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),iDe=i(f),zc=n(f,"H2",{class:!0});var pOe=s(zc);aw=n(pOe,"A",{id:!0,class:!0,href:!0});var e9t=s(aw);G4e=n(e9t,"SPAN",{});var o9t=s(G4e);T(ox.$$.fragment,o9t),o9t.forEach(t),e9t.forEach(t),bIr=i(pOe),O4e=n(pOe,"SPAN",{});var r9t=s(O4e);vIr=r(r9t,"FlaxAutoModelForSequenceClassification"),r9t.forEach(t),pOe.forEach(t),dDe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(rx.$$.fragment,Kl),FIr=i(Kl),Wc=n(Kl,"P",{});var aoe=s(Wc);TIr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vK=n(aoe,"A",{href:!0});var t9t=s(vK);MIr=r(t9t,"from_pretrained()"),t9t.forEach(t),EIr=r(aoe," class method or the "),FK=n(aoe,"A",{href:!0});var a9t=s(FK);CIr=r(a9t,"from_config()"),a9t.forEach(t),wIr=r(aoe,` class
method.`),aoe.forEach(t),AIr=i(Kl),tx=n(Kl,"P",{});var uOe=s(tx);yIr=r(uOe,"This class cannot be instantiated directly using "),V4e=n(uOe,"CODE",{});var n9t=s(V4e);LIr=r(n9t,"__init__()"),n9t.forEach(t),xIr=r(uOe," (throws an error)."),uOe.forEach(t),$Ir=i(Kl),Wt=n(Kl,"DIV",{class:!0});var hA=s(Wt);T(ax.$$.fragment,hA),kIr=i(hA),X4e=n(hA,"P",{});var s9t=s(X4e);SIr=r(s9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s9t.forEach(t),RIr=i(hA),Qc=n(hA,"P",{});var noe=s(Qc);PIr=r(noe,`Note:
Loading a model from its configuration file does `),z4e=n(noe,"STRONG",{});var l9t=s(z4e);BIr=r(l9t,"not"),l9t.forEach(t),IIr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(noe,"A",{href:!0});var i9t=s(TK);NIr=r(i9t,"from_pretrained()"),i9t.forEach(t),qIr=r(noe," to load the model weights."),noe.forEach(t),jIr=i(hA),T(nw.$$.fragment,hA),hA.forEach(t),DIr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(nx.$$.fragment,Zl),GIr=i(Zl),W4e=n(Zl,"P",{});var d9t=s(W4e);OIr=r(d9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d9t.forEach(t),VIr=i(Zl),vn=n(Zl,"P",{});var pA=s(vn);XIr=r(pA,"The model class to instantiate is selected based on the "),Q4e=n(pA,"CODE",{});var c9t=s(Q4e);zIr=r(c9t,"model_type"),c9t.forEach(t),WIr=r(pA,` property of the config object (either
passed as an argument or loaded from `),H4e=n(pA,"CODE",{});var f9t=s(H4e);QIr=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),HIr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(pA,"CODE",{});var m9t=s(U4e);UIr=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),JIr=r(pA,":"),pA.forEach(t),YIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);sw=n(Ne,"LI",{});var RNe=s(sw);J4e=n(RNe,"STRONG",{});var g9t=s(J4e);KIr=r(g9t,"albert"),g9t.forEach(t),ZIr=r(RNe," \u2014 "),MK=n(RNe,"A",{href:!0});var h9t=s(MK);eNr=r(h9t,"FlaxAlbertForSequenceClassification"),h9t.forEach(t),oNr=r(RNe," (ALBERT model)"),RNe.forEach(t),rNr=i(Ne),lw=n(Ne,"LI",{});var PNe=s(lw);Y4e=n(PNe,"STRONG",{});var p9t=s(Y4e);tNr=r(p9t,"bart"),p9t.forEach(t),aNr=r(PNe," \u2014 "),EK=n(PNe,"A",{href:!0});var u9t=s(EK);nNr=r(u9t,"FlaxBartForSequenceClassification"),u9t.forEach(t),sNr=r(PNe," (BART model)"),PNe.forEach(t),lNr=i(Ne),iw=n(Ne,"LI",{});var BNe=s(iw);K4e=n(BNe,"STRONG",{});var _9t=s(K4e);iNr=r(_9t,"bert"),_9t.forEach(t),dNr=r(BNe," \u2014 "),CK=n(BNe,"A",{href:!0});var b9t=s(CK);cNr=r(b9t,"FlaxBertForSequenceClassification"),b9t.forEach(t),fNr=r(BNe," (BERT model)"),BNe.forEach(t),mNr=i(Ne),dw=n(Ne,"LI",{});var INe=s(dw);Z4e=n(INe,"STRONG",{});var v9t=s(Z4e);gNr=r(v9t,"big_bird"),v9t.forEach(t),hNr=r(INe," \u2014 "),wK=n(INe,"A",{href:!0});var F9t=s(wK);pNr=r(F9t,"FlaxBigBirdForSequenceClassification"),F9t.forEach(t),uNr=r(INe," (BigBird model)"),INe.forEach(t),_Nr=i(Ne),cw=n(Ne,"LI",{});var NNe=s(cw);eEe=n(NNe,"STRONG",{});var T9t=s(eEe);bNr=r(T9t,"distilbert"),T9t.forEach(t),vNr=r(NNe," \u2014 "),AK=n(NNe,"A",{href:!0});var M9t=s(AK);FNr=r(M9t,"FlaxDistilBertForSequenceClassification"),M9t.forEach(t),TNr=r(NNe," (DistilBERT model)"),NNe.forEach(t),MNr=i(Ne),fw=n(Ne,"LI",{});var qNe=s(fw);oEe=n(qNe,"STRONG",{});var E9t=s(oEe);ENr=r(E9t,"electra"),E9t.forEach(t),CNr=r(qNe," \u2014 "),yK=n(qNe,"A",{href:!0});var C9t=s(yK);wNr=r(C9t,"FlaxElectraForSequenceClassification"),C9t.forEach(t),ANr=r(qNe," (ELECTRA model)"),qNe.forEach(t),yNr=i(Ne),mw=n(Ne,"LI",{});var jNe=s(mw);rEe=n(jNe,"STRONG",{});var w9t=s(rEe);LNr=r(w9t,"mbart"),w9t.forEach(t),xNr=r(jNe," \u2014 "),LK=n(jNe,"A",{href:!0});var A9t=s(LK);$Nr=r(A9t,"FlaxMBartForSequenceClassification"),A9t.forEach(t),kNr=r(jNe," (mBART model)"),jNe.forEach(t),SNr=i(Ne),gw=n(Ne,"LI",{});var DNe=s(gw);tEe=n(DNe,"STRONG",{});var y9t=s(tEe);RNr=r(y9t,"roberta"),y9t.forEach(t),PNr=r(DNe," \u2014 "),xK=n(DNe,"A",{href:!0});var L9t=s(xK);BNr=r(L9t,"FlaxRobertaForSequenceClassification"),L9t.forEach(t),INr=r(DNe," (RoBERTa model)"),DNe.forEach(t),NNr=i(Ne),hw=n(Ne,"LI",{});var GNe=s(hw);aEe=n(GNe,"STRONG",{});var x9t=s(aEe);qNr=r(x9t,"roformer"),x9t.forEach(t),jNr=r(GNe," \u2014 "),$K=n(GNe,"A",{href:!0});var $9t=s($K);DNr=r($9t,"FlaxRoFormerForSequenceClassification"),$9t.forEach(t),GNr=r(GNe," (RoFormer model)"),GNe.forEach(t),ONr=i(Ne),pw=n(Ne,"LI",{});var ONe=s(pw);nEe=n(ONe,"STRONG",{});var k9t=s(nEe);VNr=r(k9t,"xlm-roberta"),k9t.forEach(t),XNr=r(ONe," \u2014 "),kK=n(ONe,"A",{href:!0});var S9t=s(kK);zNr=r(S9t,"FlaxXLMRobertaForSequenceClassification"),S9t.forEach(t),WNr=r(ONe," (XLM-RoBERTa model)"),ONe.forEach(t),Ne.forEach(t),QNr=i(Zl),T(uw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),cDe=i(f),Hc=n(f,"H2",{class:!0});var _Oe=s(Hc);_w=n(_Oe,"A",{id:!0,class:!0,href:!0});var R9t=s(_w);sEe=n(R9t,"SPAN",{});var P9t=s(sEe);T(sx.$$.fragment,P9t),P9t.forEach(t),R9t.forEach(t),HNr=i(_Oe),lEe=n(_Oe,"SPAN",{});var B9t=s(lEe);UNr=r(B9t,"FlaxAutoModelForQuestionAnswering"),B9t.forEach(t),_Oe.forEach(t),fDe=i(f),_r=n(f,"DIV",{class:!0});var ei=s(_r);T(lx.$$.fragment,ei),JNr=i(ei),Uc=n(ei,"P",{});var soe=s(Uc);YNr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SK=n(soe,"A",{href:!0});var I9t=s(SK);KNr=r(I9t,"from_pretrained()"),I9t.forEach(t),ZNr=r(soe," class method or the "),RK=n(soe,"A",{href:!0});var N9t=s(RK);eqr=r(N9t,"from_config()"),N9t.forEach(t),oqr=r(soe,` class
method.`),soe.forEach(t),rqr=i(ei),ix=n(ei,"P",{});var bOe=s(ix);tqr=r(bOe,"This class cannot be instantiated directly using "),iEe=n(bOe,"CODE",{});var q9t=s(iEe);aqr=r(q9t,"__init__()"),q9t.forEach(t),nqr=r(bOe," (throws an error)."),bOe.forEach(t),sqr=i(ei),Qt=n(ei,"DIV",{class:!0});var uA=s(Qt);T(dx.$$.fragment,uA),lqr=i(uA),dEe=n(uA,"P",{});var j9t=s(dEe);iqr=r(j9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j9t.forEach(t),dqr=i(uA),Jc=n(uA,"P",{});var loe=s(Jc);cqr=r(loe,`Note:
Loading a model from its configuration file does `),cEe=n(loe,"STRONG",{});var D9t=s(cEe);fqr=r(D9t,"not"),D9t.forEach(t),mqr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(loe,"A",{href:!0});var G9t=s(PK);gqr=r(G9t,"from_pretrained()"),G9t.forEach(t),hqr=r(loe," to load the model weights."),loe.forEach(t),pqr=i(uA),T(bw.$$.fragment,uA),uA.forEach(t),uqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(cx.$$.fragment,oi),_qr=i(oi),fEe=n(oi,"P",{});var O9t=s(fEe);bqr=r(O9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),O9t.forEach(t),vqr=i(oi),Fn=n(oi,"P",{});var _A=s(Fn);Fqr=r(_A,"The model class to instantiate is selected based on the "),mEe=n(_A,"CODE",{});var V9t=s(mEe);Tqr=r(V9t,"model_type"),V9t.forEach(t),Mqr=r(_A,` property of the config object (either
passed as an argument or loaded from `),gEe=n(_A,"CODE",{});var X9t=s(gEe);Eqr=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),Cqr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(_A,"CODE",{});var z9t=s(hEe);wqr=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),Aqr=r(_A,":"),_A.forEach(t),yqr=i(oi),$e=n(oi,"UL",{});var qe=s($e);vw=n(qe,"LI",{});var VNe=s(vw);pEe=n(VNe,"STRONG",{});var W9t=s(pEe);Lqr=r(W9t,"albert"),W9t.forEach(t),xqr=r(VNe," \u2014 "),BK=n(VNe,"A",{href:!0});var Q9t=s(BK);$qr=r(Q9t,"FlaxAlbertForQuestionAnswering"),Q9t.forEach(t),kqr=r(VNe," (ALBERT model)"),VNe.forEach(t),Sqr=i(qe),Fw=n(qe,"LI",{});var XNe=s(Fw);uEe=n(XNe,"STRONG",{});var H9t=s(uEe);Rqr=r(H9t,"bart"),H9t.forEach(t),Pqr=r(XNe," \u2014 "),IK=n(XNe,"A",{href:!0});var U9t=s(IK);Bqr=r(U9t,"FlaxBartForQuestionAnswering"),U9t.forEach(t),Iqr=r(XNe," (BART model)"),XNe.forEach(t),Nqr=i(qe),Tw=n(qe,"LI",{});var zNe=s(Tw);_Ee=n(zNe,"STRONG",{});var J9t=s(_Ee);qqr=r(J9t,"bert"),J9t.forEach(t),jqr=r(zNe," \u2014 "),NK=n(zNe,"A",{href:!0});var Y9t=s(NK);Dqr=r(Y9t,"FlaxBertForQuestionAnswering"),Y9t.forEach(t),Gqr=r(zNe," (BERT model)"),zNe.forEach(t),Oqr=i(qe),Mw=n(qe,"LI",{});var WNe=s(Mw);bEe=n(WNe,"STRONG",{});var K9t=s(bEe);Vqr=r(K9t,"big_bird"),K9t.forEach(t),Xqr=r(WNe," \u2014 "),qK=n(WNe,"A",{href:!0});var Z9t=s(qK);zqr=r(Z9t,"FlaxBigBirdForQuestionAnswering"),Z9t.forEach(t),Wqr=r(WNe," (BigBird model)"),WNe.forEach(t),Qqr=i(qe),Ew=n(qe,"LI",{});var QNe=s(Ew);vEe=n(QNe,"STRONG",{});var ext=s(vEe);Hqr=r(ext,"distilbert"),ext.forEach(t),Uqr=r(QNe," \u2014 "),jK=n(QNe,"A",{href:!0});var oxt=s(jK);Jqr=r(oxt,"FlaxDistilBertForQuestionAnswering"),oxt.forEach(t),Yqr=r(QNe," (DistilBERT model)"),QNe.forEach(t),Kqr=i(qe),Cw=n(qe,"LI",{});var HNe=s(Cw);FEe=n(HNe,"STRONG",{});var rxt=s(FEe);Zqr=r(rxt,"electra"),rxt.forEach(t),ejr=r(HNe," \u2014 "),DK=n(HNe,"A",{href:!0});var txt=s(DK);ojr=r(txt,"FlaxElectraForQuestionAnswering"),txt.forEach(t),rjr=r(HNe," (ELECTRA model)"),HNe.forEach(t),tjr=i(qe),ww=n(qe,"LI",{});var UNe=s(ww);TEe=n(UNe,"STRONG",{});var axt=s(TEe);ajr=r(axt,"mbart"),axt.forEach(t),njr=r(UNe," \u2014 "),GK=n(UNe,"A",{href:!0});var nxt=s(GK);sjr=r(nxt,"FlaxMBartForQuestionAnswering"),nxt.forEach(t),ljr=r(UNe," (mBART model)"),UNe.forEach(t),ijr=i(qe),Aw=n(qe,"LI",{});var JNe=s(Aw);MEe=n(JNe,"STRONG",{});var sxt=s(MEe);djr=r(sxt,"roberta"),sxt.forEach(t),cjr=r(JNe," \u2014 "),OK=n(JNe,"A",{href:!0});var lxt=s(OK);fjr=r(lxt,"FlaxRobertaForQuestionAnswering"),lxt.forEach(t),mjr=r(JNe," (RoBERTa model)"),JNe.forEach(t),gjr=i(qe),yw=n(qe,"LI",{});var YNe=s(yw);EEe=n(YNe,"STRONG",{});var ixt=s(EEe);hjr=r(ixt,"roformer"),ixt.forEach(t),pjr=r(YNe," \u2014 "),VK=n(YNe,"A",{href:!0});var dxt=s(VK);ujr=r(dxt,"FlaxRoFormerForQuestionAnswering"),dxt.forEach(t),_jr=r(YNe," (RoFormer model)"),YNe.forEach(t),bjr=i(qe),Lw=n(qe,"LI",{});var KNe=s(Lw);CEe=n(KNe,"STRONG",{});var cxt=s(CEe);vjr=r(cxt,"xlm-roberta"),cxt.forEach(t),Fjr=r(KNe," \u2014 "),XK=n(KNe,"A",{href:!0});var fxt=s(XK);Tjr=r(fxt,"FlaxXLMRobertaForQuestionAnswering"),fxt.forEach(t),Mjr=r(KNe," (XLM-RoBERTa model)"),KNe.forEach(t),qe.forEach(t),Ejr=i(oi),T(xw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),mDe=i(f),Yc=n(f,"H2",{class:!0});var vOe=s(Yc);$w=n(vOe,"A",{id:!0,class:!0,href:!0});var mxt=s($w);wEe=n(mxt,"SPAN",{});var gxt=s(wEe);T(fx.$$.fragment,gxt),gxt.forEach(t),mxt.forEach(t),Cjr=i(vOe),AEe=n(vOe,"SPAN",{});var hxt=s(AEe);wjr=r(hxt,"FlaxAutoModelForTokenClassification"),hxt.forEach(t),vOe.forEach(t),gDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(mx.$$.fragment,ri),Ajr=i(ri),Kc=n(ri,"P",{});var ioe=s(Kc);yjr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zK=n(ioe,"A",{href:!0});var pxt=s(zK);Ljr=r(pxt,"from_pretrained()"),pxt.forEach(t),xjr=r(ioe," class method or the "),WK=n(ioe,"A",{href:!0});var uxt=s(WK);$jr=r(uxt,"from_config()"),uxt.forEach(t),kjr=r(ioe,` class
method.`),ioe.forEach(t),Sjr=i(ri),gx=n(ri,"P",{});var FOe=s(gx);Rjr=r(FOe,"This class cannot be instantiated directly using "),yEe=n(FOe,"CODE",{});var _xt=s(yEe);Pjr=r(_xt,"__init__()"),_xt.forEach(t),Bjr=r(FOe," (throws an error)."),FOe.forEach(t),Ijr=i(ri),Ht=n(ri,"DIV",{class:!0});var bA=s(Ht);T(hx.$$.fragment,bA),Njr=i(bA),LEe=n(bA,"P",{});var bxt=s(LEe);qjr=r(bxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bxt.forEach(t),jjr=i(bA),Zc=n(bA,"P",{});var doe=s(Zc);Djr=r(doe,`Note:
Loading a model from its configuration file does `),xEe=n(doe,"STRONG",{});var vxt=s(xEe);Gjr=r(vxt,"not"),vxt.forEach(t),Ojr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(doe,"A",{href:!0});var Fxt=s(QK);Vjr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),Xjr=r(doe," to load the model weights."),doe.forEach(t),zjr=i(bA),T(kw.$$.fragment,bA),bA.forEach(t),Wjr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(px.$$.fragment,ti),Qjr=i(ti),$Ee=n(ti,"P",{});var Txt=s($Ee);Hjr=r(Txt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Txt.forEach(t),Ujr=i(ti),Tn=n(ti,"P",{});var vA=s(Tn);Jjr=r(vA,"The model class to instantiate is selected based on the "),kEe=n(vA,"CODE",{});var Mxt=s(kEe);Yjr=r(Mxt,"model_type"),Mxt.forEach(t),Kjr=r(vA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(vA,"CODE",{});var Ext=s(SEe);Zjr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),eDr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(vA,"CODE",{});var Cxt=s(REe);oDr=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),rDr=r(vA,":"),vA.forEach(t),tDr=i(ti),De=n(ti,"UL",{});var Fo=s(De);Sw=n(Fo,"LI",{});var ZNe=s(Sw);PEe=n(ZNe,"STRONG",{});var wxt=s(PEe);aDr=r(wxt,"albert"),wxt.forEach(t),nDr=r(ZNe," \u2014 "),HK=n(ZNe,"A",{href:!0});var Axt=s(HK);sDr=r(Axt,"FlaxAlbertForTokenClassification"),Axt.forEach(t),lDr=r(ZNe," (ALBERT model)"),ZNe.forEach(t),iDr=i(Fo),Rw=n(Fo,"LI",{});var eqe=s(Rw);BEe=n(eqe,"STRONG",{});var yxt=s(BEe);dDr=r(yxt,"bert"),yxt.forEach(t),cDr=r(eqe," \u2014 "),UK=n(eqe,"A",{href:!0});var Lxt=s(UK);fDr=r(Lxt,"FlaxBertForTokenClassification"),Lxt.forEach(t),mDr=r(eqe," (BERT model)"),eqe.forEach(t),gDr=i(Fo),Pw=n(Fo,"LI",{});var oqe=s(Pw);IEe=n(oqe,"STRONG",{});var xxt=s(IEe);hDr=r(xxt,"big_bird"),xxt.forEach(t),pDr=r(oqe," \u2014 "),JK=n(oqe,"A",{href:!0});var $xt=s(JK);uDr=r($xt,"FlaxBigBirdForTokenClassification"),$xt.forEach(t),_Dr=r(oqe," (BigBird model)"),oqe.forEach(t),bDr=i(Fo),Bw=n(Fo,"LI",{});var rqe=s(Bw);NEe=n(rqe,"STRONG",{});var kxt=s(NEe);vDr=r(kxt,"distilbert"),kxt.forEach(t),FDr=r(rqe," \u2014 "),YK=n(rqe,"A",{href:!0});var Sxt=s(YK);TDr=r(Sxt,"FlaxDistilBertForTokenClassification"),Sxt.forEach(t),MDr=r(rqe," (DistilBERT model)"),rqe.forEach(t),EDr=i(Fo),Iw=n(Fo,"LI",{});var tqe=s(Iw);qEe=n(tqe,"STRONG",{});var Rxt=s(qEe);CDr=r(Rxt,"electra"),Rxt.forEach(t),wDr=r(tqe," \u2014 "),KK=n(tqe,"A",{href:!0});var Pxt=s(KK);ADr=r(Pxt,"FlaxElectraForTokenClassification"),Pxt.forEach(t),yDr=r(tqe," (ELECTRA model)"),tqe.forEach(t),LDr=i(Fo),Nw=n(Fo,"LI",{});var aqe=s(Nw);jEe=n(aqe,"STRONG",{});var Bxt=s(jEe);xDr=r(Bxt,"roberta"),Bxt.forEach(t),$Dr=r(aqe," \u2014 "),ZK=n(aqe,"A",{href:!0});var Ixt=s(ZK);kDr=r(Ixt,"FlaxRobertaForTokenClassification"),Ixt.forEach(t),SDr=r(aqe," (RoBERTa model)"),aqe.forEach(t),RDr=i(Fo),qw=n(Fo,"LI",{});var nqe=s(qw);DEe=n(nqe,"STRONG",{});var Nxt=s(DEe);PDr=r(Nxt,"roformer"),Nxt.forEach(t),BDr=r(nqe," \u2014 "),eZ=n(nqe,"A",{href:!0});var qxt=s(eZ);IDr=r(qxt,"FlaxRoFormerForTokenClassification"),qxt.forEach(t),NDr=r(nqe," (RoFormer model)"),nqe.forEach(t),qDr=i(Fo),jw=n(Fo,"LI",{});var sqe=s(jw);GEe=n(sqe,"STRONG",{});var jxt=s(GEe);jDr=r(jxt,"xlm-roberta"),jxt.forEach(t),DDr=r(sqe," \u2014 "),oZ=n(sqe,"A",{href:!0});var Dxt=s(oZ);GDr=r(Dxt,"FlaxXLMRobertaForTokenClassification"),Dxt.forEach(t),ODr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),Fo.forEach(t),VDr=i(ti),T(Dw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),hDe=i(f),ef=n(f,"H2",{class:!0});var TOe=s(ef);Gw=n(TOe,"A",{id:!0,class:!0,href:!0});var Gxt=s(Gw);OEe=n(Gxt,"SPAN",{});var Oxt=s(OEe);T(ux.$$.fragment,Oxt),Oxt.forEach(t),Gxt.forEach(t),XDr=i(TOe),VEe=n(TOe,"SPAN",{});var Vxt=s(VEe);zDr=r(Vxt,"FlaxAutoModelForMultipleChoice"),Vxt.forEach(t),TOe.forEach(t),pDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(_x.$$.fragment,ai),WDr=i(ai),of=n(ai,"P",{});var coe=s(of);QDr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rZ=n(coe,"A",{href:!0});var Xxt=s(rZ);HDr=r(Xxt,"from_pretrained()"),Xxt.forEach(t),UDr=r(coe," class method or the "),tZ=n(coe,"A",{href:!0});var zxt=s(tZ);JDr=r(zxt,"from_config()"),zxt.forEach(t),YDr=r(coe,` class
method.`),coe.forEach(t),KDr=i(ai),bx=n(ai,"P",{});var MOe=s(bx);ZDr=r(MOe,"This class cannot be instantiated directly using "),XEe=n(MOe,"CODE",{});var Wxt=s(XEe);eGr=r(Wxt,"__init__()"),Wxt.forEach(t),oGr=r(MOe," (throws an error)."),MOe.forEach(t),rGr=i(ai),Ut=n(ai,"DIV",{class:!0});var FA=s(Ut);T(vx.$$.fragment,FA),tGr=i(FA),zEe=n(FA,"P",{});var Qxt=s(zEe);aGr=r(Qxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qxt.forEach(t),nGr=i(FA),rf=n(FA,"P",{});var foe=s(rf);sGr=r(foe,`Note:
Loading a model from its configuration file does `),WEe=n(foe,"STRONG",{});var Hxt=s(WEe);lGr=r(Hxt,"not"),Hxt.forEach(t),iGr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(foe,"A",{href:!0});var Uxt=s(aZ);dGr=r(Uxt,"from_pretrained()"),Uxt.forEach(t),cGr=r(foe," to load the model weights."),foe.forEach(t),fGr=i(FA),T(Ow.$$.fragment,FA),FA.forEach(t),mGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Fx.$$.fragment,ni),gGr=i(ni),QEe=n(ni,"P",{});var Jxt=s(QEe);hGr=r(Jxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jxt.forEach(t),pGr=i(ni),Mn=n(ni,"P",{});var TA=s(Mn);uGr=r(TA,"The model class to instantiate is selected based on the "),HEe=n(TA,"CODE",{});var Yxt=s(HEe);_Gr=r(Yxt,"model_type"),Yxt.forEach(t),bGr=r(TA,` property of the config object (either
passed as an argument or loaded from `),UEe=n(TA,"CODE",{});var Kxt=s(UEe);vGr=r(Kxt,"pretrained_model_name_or_path"),Kxt.forEach(t),FGr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(TA,"CODE",{});var Zxt=s(JEe);TGr=r(Zxt,"pretrained_model_name_or_path"),Zxt.forEach(t),MGr=r(TA,":"),TA.forEach(t),EGr=i(ni),Ge=n(ni,"UL",{});var To=s(Ge);Vw=n(To,"LI",{});var lqe=s(Vw);YEe=n(lqe,"STRONG",{});var e$t=s(YEe);CGr=r(e$t,"albert"),e$t.forEach(t),wGr=r(lqe," \u2014 "),nZ=n(lqe,"A",{href:!0});var o$t=s(nZ);AGr=r(o$t,"FlaxAlbertForMultipleChoice"),o$t.forEach(t),yGr=r(lqe," (ALBERT model)"),lqe.forEach(t),LGr=i(To),Xw=n(To,"LI",{});var iqe=s(Xw);KEe=n(iqe,"STRONG",{});var r$t=s(KEe);xGr=r(r$t,"bert"),r$t.forEach(t),$Gr=r(iqe," \u2014 "),sZ=n(iqe,"A",{href:!0});var t$t=s(sZ);kGr=r(t$t,"FlaxBertForMultipleChoice"),t$t.forEach(t),SGr=r(iqe," (BERT model)"),iqe.forEach(t),RGr=i(To),zw=n(To,"LI",{});var dqe=s(zw);ZEe=n(dqe,"STRONG",{});var a$t=s(ZEe);PGr=r(a$t,"big_bird"),a$t.forEach(t),BGr=r(dqe," \u2014 "),lZ=n(dqe,"A",{href:!0});var n$t=s(lZ);IGr=r(n$t,"FlaxBigBirdForMultipleChoice"),n$t.forEach(t),NGr=r(dqe," (BigBird model)"),dqe.forEach(t),qGr=i(To),Ww=n(To,"LI",{});var cqe=s(Ww);eCe=n(cqe,"STRONG",{});var s$t=s(eCe);jGr=r(s$t,"distilbert"),s$t.forEach(t),DGr=r(cqe," \u2014 "),iZ=n(cqe,"A",{href:!0});var l$t=s(iZ);GGr=r(l$t,"FlaxDistilBertForMultipleChoice"),l$t.forEach(t),OGr=r(cqe," (DistilBERT model)"),cqe.forEach(t),VGr=i(To),Qw=n(To,"LI",{});var fqe=s(Qw);oCe=n(fqe,"STRONG",{});var i$t=s(oCe);XGr=r(i$t,"electra"),i$t.forEach(t),zGr=r(fqe," \u2014 "),dZ=n(fqe,"A",{href:!0});var d$t=s(dZ);WGr=r(d$t,"FlaxElectraForMultipleChoice"),d$t.forEach(t),QGr=r(fqe," (ELECTRA model)"),fqe.forEach(t),HGr=i(To),Hw=n(To,"LI",{});var mqe=s(Hw);rCe=n(mqe,"STRONG",{});var c$t=s(rCe);UGr=r(c$t,"roberta"),c$t.forEach(t),JGr=r(mqe," \u2014 "),cZ=n(mqe,"A",{href:!0});var f$t=s(cZ);YGr=r(f$t,"FlaxRobertaForMultipleChoice"),f$t.forEach(t),KGr=r(mqe," (RoBERTa model)"),mqe.forEach(t),ZGr=i(To),Uw=n(To,"LI",{});var gqe=s(Uw);tCe=n(gqe,"STRONG",{});var m$t=s(tCe);eOr=r(m$t,"roformer"),m$t.forEach(t),oOr=r(gqe," \u2014 "),fZ=n(gqe,"A",{href:!0});var g$t=s(fZ);rOr=r(g$t,"FlaxRoFormerForMultipleChoice"),g$t.forEach(t),tOr=r(gqe," (RoFormer model)"),gqe.forEach(t),aOr=i(To),Jw=n(To,"LI",{});var hqe=s(Jw);aCe=n(hqe,"STRONG",{});var h$t=s(aCe);nOr=r(h$t,"xlm-roberta"),h$t.forEach(t),sOr=r(hqe," \u2014 "),mZ=n(hqe,"A",{href:!0});var p$t=s(mZ);lOr=r(p$t,"FlaxXLMRobertaForMultipleChoice"),p$t.forEach(t),iOr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),To.forEach(t),dOr=i(ni),T(Yw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),uDe=i(f),tf=n(f,"H2",{class:!0});var EOe=s(tf);Kw=n(EOe,"A",{id:!0,class:!0,href:!0});var u$t=s(Kw);nCe=n(u$t,"SPAN",{});var _$t=s(nCe);T(Tx.$$.fragment,_$t),_$t.forEach(t),u$t.forEach(t),cOr=i(EOe),sCe=n(EOe,"SPAN",{});var b$t=s(sCe);fOr=r(b$t,"FlaxAutoModelForNextSentencePrediction"),b$t.forEach(t),EOe.forEach(t),_De=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Mx.$$.fragment,si),mOr=i(si),af=n(si,"P",{});var moe=s(af);gOr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gZ=n(moe,"A",{href:!0});var v$t=s(gZ);hOr=r(v$t,"from_pretrained()"),v$t.forEach(t),pOr=r(moe," class method or the "),hZ=n(moe,"A",{href:!0});var F$t=s(hZ);uOr=r(F$t,"from_config()"),F$t.forEach(t),_Or=r(moe,` class
method.`),moe.forEach(t),bOr=i(si),Ex=n(si,"P",{});var COe=s(Ex);vOr=r(COe,"This class cannot be instantiated directly using "),lCe=n(COe,"CODE",{});var T$t=s(lCe);FOr=r(T$t,"__init__()"),T$t.forEach(t),TOr=r(COe," (throws an error)."),COe.forEach(t),MOr=i(si),Jt=n(si,"DIV",{class:!0});var MA=s(Jt);T(Cx.$$.fragment,MA),EOr=i(MA),iCe=n(MA,"P",{});var M$t=s(iCe);COr=r(M$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M$t.forEach(t),wOr=i(MA),nf=n(MA,"P",{});var goe=s(nf);AOr=r(goe,`Note:
Loading a model from its configuration file does `),dCe=n(goe,"STRONG",{});var E$t=s(dCe);yOr=r(E$t,"not"),E$t.forEach(t),LOr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(goe,"A",{href:!0});var C$t=s(pZ);xOr=r(C$t,"from_pretrained()"),C$t.forEach(t),$Or=r(goe," to load the model weights."),goe.forEach(t),kOr=i(MA),T(Zw.$$.fragment,MA),MA.forEach(t),SOr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(wx.$$.fragment,li),ROr=i(li),cCe=n(li,"P",{});var w$t=s(cCe);POr=r(w$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w$t.forEach(t),BOr=i(li),En=n(li,"P",{});var EA=s(En);IOr=r(EA,"The model class to instantiate is selected based on the "),fCe=n(EA,"CODE",{});var A$t=s(fCe);NOr=r(A$t,"model_type"),A$t.forEach(t),qOr=r(EA,` property of the config object (either
passed as an argument or loaded from `),mCe=n(EA,"CODE",{});var y$t=s(mCe);jOr=r(y$t,"pretrained_model_name_or_path"),y$t.forEach(t),DOr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(EA,"CODE",{});var L$t=s(gCe);GOr=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),OOr=r(EA,":"),EA.forEach(t),VOr=i(li),hCe=n(li,"UL",{});var x$t=s(hCe);e0=n(x$t,"LI",{});var pqe=s(e0);pCe=n(pqe,"STRONG",{});var $$t=s(pCe);XOr=r($$t,"bert"),$$t.forEach(t),zOr=r(pqe," \u2014 "),uZ=n(pqe,"A",{href:!0});var k$t=s(uZ);WOr=r(k$t,"FlaxBertForNextSentencePrediction"),k$t.forEach(t),QOr=r(pqe," (BERT model)"),pqe.forEach(t),x$t.forEach(t),HOr=i(li),T(o0.$$.fragment,li),li.forEach(t),si.forEach(t),bDe=i(f),sf=n(f,"H2",{class:!0});var wOe=s(sf);r0=n(wOe,"A",{id:!0,class:!0,href:!0});var S$t=s(r0);uCe=n(S$t,"SPAN",{});var R$t=s(uCe);T(Ax.$$.fragment,R$t),R$t.forEach(t),S$t.forEach(t),UOr=i(wOe),_Ce=n(wOe,"SPAN",{});var P$t=s(_Ce);JOr=r(P$t,"FlaxAutoModelForImageClassification"),P$t.forEach(t),wOe.forEach(t),vDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(yx.$$.fragment,ii),YOr=i(ii),lf=n(ii,"P",{});var hoe=s(lf);KOr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Z=n(hoe,"A",{href:!0});var B$t=s(_Z);ZOr=r(B$t,"from_pretrained()"),B$t.forEach(t),eVr=r(hoe," class method or the "),bZ=n(hoe,"A",{href:!0});var I$t=s(bZ);oVr=r(I$t,"from_config()"),I$t.forEach(t),rVr=r(hoe,` class
method.`),hoe.forEach(t),tVr=i(ii),Lx=n(ii,"P",{});var AOe=s(Lx);aVr=r(AOe,"This class cannot be instantiated directly using "),bCe=n(AOe,"CODE",{});var N$t=s(bCe);nVr=r(N$t,"__init__()"),N$t.forEach(t),sVr=r(AOe," (throws an error)."),AOe.forEach(t),lVr=i(ii),Yt=n(ii,"DIV",{class:!0});var CA=s(Yt);T(xx.$$.fragment,CA),iVr=i(CA),vCe=n(CA,"P",{});var q$t=s(vCe);dVr=r(q$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q$t.forEach(t),cVr=i(CA),df=n(CA,"P",{});var poe=s(df);fVr=r(poe,`Note:
Loading a model from its configuration file does `),FCe=n(poe,"STRONG",{});var j$t=s(FCe);mVr=r(j$t,"not"),j$t.forEach(t),gVr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(poe,"A",{href:!0});var D$t=s(vZ);hVr=r(D$t,"from_pretrained()"),D$t.forEach(t),pVr=r(poe," to load the model weights."),poe.forEach(t),uVr=i(CA),T(t0.$$.fragment,CA),CA.forEach(t),_Vr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T($x.$$.fragment,di),bVr=i(di),TCe=n(di,"P",{});var G$t=s(TCe);vVr=r(G$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G$t.forEach(t),FVr=i(di),Cn=n(di,"P",{});var wA=s(Cn);TVr=r(wA,"The model class to instantiate is selected based on the "),MCe=n(wA,"CODE",{});var O$t=s(MCe);MVr=r(O$t,"model_type"),O$t.forEach(t),EVr=r(wA,` property of the config object (either
passed as an argument or loaded from `),ECe=n(wA,"CODE",{});var V$t=s(ECe);CVr=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),wVr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=n(wA,"CODE",{});var X$t=s(CCe);AVr=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),yVr=r(wA,":"),wA.forEach(t),LVr=i(di),kx=n(di,"UL",{});var yOe=s(kx);a0=n(yOe,"LI",{});var uqe=s(a0);wCe=n(uqe,"STRONG",{});var z$t=s(wCe);xVr=r(z$t,"beit"),z$t.forEach(t),$Vr=r(uqe," \u2014 "),FZ=n(uqe,"A",{href:!0});var W$t=s(FZ);kVr=r(W$t,"FlaxBeitForImageClassification"),W$t.forEach(t),SVr=r(uqe," (BEiT model)"),uqe.forEach(t),RVr=i(yOe),n0=n(yOe,"LI",{});var _qe=s(n0);ACe=n(_qe,"STRONG",{});var Q$t=s(ACe);PVr=r(Q$t,"vit"),Q$t.forEach(t),BVr=r(_qe," \u2014 "),TZ=n(_qe,"A",{href:!0});var H$t=s(TZ);IVr=r(H$t,"FlaxViTForImageClassification"),H$t.forEach(t),NVr=r(_qe," (ViT model)"),_qe.forEach(t),yOe.forEach(t),qVr=i(di),T(s0.$$.fragment,di),di.forEach(t),ii.forEach(t),FDe=i(f),cf=n(f,"H2",{class:!0});var LOe=s(cf);l0=n(LOe,"A",{id:!0,class:!0,href:!0});var U$t=s(l0);yCe=n(U$t,"SPAN",{});var J$t=s(yCe);T(Sx.$$.fragment,J$t),J$t.forEach(t),U$t.forEach(t),jVr=i(LOe),LCe=n(LOe,"SPAN",{});var Y$t=s(LCe);DVr=r(Y$t,"FlaxAutoModelForVision2Seq"),Y$t.forEach(t),LOe.forEach(t),TDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Rx.$$.fragment,ci),GVr=i(ci),ff=n(ci,"P",{});var uoe=s(ff);OVr=r(uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MZ=n(uoe,"A",{href:!0});var K$t=s(MZ);VVr=r(K$t,"from_pretrained()"),K$t.forEach(t),XVr=r(uoe," class method or the "),EZ=n(uoe,"A",{href:!0});var Z$t=s(EZ);zVr=r(Z$t,"from_config()"),Z$t.forEach(t),WVr=r(uoe,` class
method.`),uoe.forEach(t),QVr=i(ci),Px=n(ci,"P",{});var xOe=s(Px);HVr=r(xOe,"This class cannot be instantiated directly using "),xCe=n(xOe,"CODE",{});var ekt=s(xCe);UVr=r(ekt,"__init__()"),ekt.forEach(t),JVr=r(xOe," (throws an error)."),xOe.forEach(t),YVr=i(ci),Kt=n(ci,"DIV",{class:!0});var AA=s(Kt);T(Bx.$$.fragment,AA),KVr=i(AA),$Ce=n(AA,"P",{});var okt=s($Ce);ZVr=r(okt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),okt.forEach(t),eXr=i(AA),mf=n(AA,"P",{});var _oe=s(mf);oXr=r(_oe,`Note:
Loading a model from its configuration file does `),kCe=n(_oe,"STRONG",{});var rkt=s(kCe);rXr=r(rkt,"not"),rkt.forEach(t),tXr=r(_oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(_oe,"A",{href:!0});var tkt=s(CZ);aXr=r(tkt,"from_pretrained()"),tkt.forEach(t),nXr=r(_oe," to load the model weights."),_oe.forEach(t),sXr=i(AA),T(i0.$$.fragment,AA),AA.forEach(t),lXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Ix.$$.fragment,fi),iXr=i(fi),SCe=n(fi,"P",{});var akt=s(SCe);dXr=r(akt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),akt.forEach(t),cXr=i(fi),wn=n(fi,"P",{});var yA=s(wn);fXr=r(yA,"The model class to instantiate is selected based on the "),RCe=n(yA,"CODE",{});var nkt=s(RCe);mXr=r(nkt,"model_type"),nkt.forEach(t),gXr=r(yA,` property of the config object (either
passed as an argument or loaded from `),PCe=n(yA,"CODE",{});var skt=s(PCe);hXr=r(skt,"pretrained_model_name_or_path"),skt.forEach(t),pXr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=n(yA,"CODE",{});var lkt=s(BCe);uXr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),_Xr=r(yA,":"),yA.forEach(t),bXr=i(fi),ICe=n(fi,"UL",{});var ikt=s(ICe);d0=n(ikt,"LI",{});var bqe=s(d0);NCe=n(bqe,"STRONG",{});var dkt=s(NCe);vXr=r(dkt,"vision-encoder-decoder"),dkt.forEach(t),FXr=r(bqe," \u2014 "),wZ=n(bqe,"A",{href:!0});var ckt=s(wZ);TXr=r(ckt,"FlaxVisionEncoderDecoderModel"),ckt.forEach(t),MXr=r(bqe," (Vision Encoder decoder model)"),bqe.forEach(t),ikt.forEach(t),EXr=i(fi),T(c0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(hRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(tk,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ak,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig"),c(nk,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig"),c(sk,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig"),c(lk,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig"),c(ik,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(dk,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ck,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(fk,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(mk,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(gk,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig"),c(hk,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig"),c(pk,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig"),c(uk,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig"),c(_k,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig"),c(bk,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig"),c(vk,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig"),c(Fk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Tk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Mk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ek,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig"),c(Ck,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(wk,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ak,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig"),c(yk,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig"),c(Lk,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig"),c(xk,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig"),c($k,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig"),c(kk,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig"),c(Sk,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Rk,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Pk,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig"),c(Bk,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig"),c(Ik,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig"),c(Nk,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig"),c(qk,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig"),c(jk,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config"),c(Dk,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Gk,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ok,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig"),c(Vk,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig"),c(Xk,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig"),c(zk,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig"),c(Wk,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Qk,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Hk,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Uk,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Jk,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig"),c(Yk,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig"),c(Kk,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig"),c(Zk,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig"),c(eS,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config"),c(oS,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig"),c(rS,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(tS,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig"),c(aS,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(nS,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(sS,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig"),c(lS,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config"),c(iS,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(dS,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(cS,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig"),c(fS,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig"),c(mS,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig"),c(gS,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig"),c(hS,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(pS,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uS,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_S,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagConfig"),c(bS,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmConfig"),c(vS,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig"),c(FS,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig"),c(TS,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig"),c(MS,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig"),c(ES,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig"),c(CS,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig"),c(wS,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig"),c(AS,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig"),c(yS,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig"),c(LS,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig"),c(xS,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c($S,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(kS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(SS,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig"),c(RS,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(PS,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig"),c(BS,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config"),c(IS,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig"),c(NS,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(qS,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(jS,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig"),c(DS,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(GS,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(OS,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig"),c(VS,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig"),c(XS,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(zS,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(WS,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(QS,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig"),c(HS,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(US,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(JS,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(YS,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig"),c(KS,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig"),c(ZS,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig"),c(eR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(oR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(rR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(tR,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig"),c(aR,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig"),c(nR,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(sR,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(lR,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(iR,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dR,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizer"),c(cR,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizerFast"),c(fR,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizer"),c(mR,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(gR,"href","/docs/transformers/pr_17313/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(hR,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(pR,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_R,"href","/docs/transformers/pr_17313/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(bR,"href","/docs/transformers/pr_17313/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(vR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(FR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(TR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ER,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(CR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(wR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(AR,"href","/docs/transformers/pr_17313/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineTokenizer"),c($R,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(kR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizer"),c(BR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IR,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DR,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OR,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XR,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WR,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QR,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizer"),c(HR,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(UR,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JR,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizer"),c(YR,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KR,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZR,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eP,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(sP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(dP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cP,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizer"),c(fP,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mP,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_P,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(FP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(TP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(MP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(EP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizer"),c(CP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizerFast"),c(wP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizer"),c(AP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yP,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeTokenizer"),c(LP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(xP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c($P,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(kP,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianTokenizer"),c(SP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizer"),c(RP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(PP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(BP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(IP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(NP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17313/en/model_doc/mluke#transformers.MLukeTokenizer"),c(jP,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(DP,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(OP,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(VP,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(XP,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(zP,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(WP,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(HP,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(UP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JP,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YP,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KP,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ZP,"href","/docs/transformers/pr_17313/en/model_doc/phobert#transformers.PhobertTokenizer"),c(eB,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartTokenizer"),c(oB,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(rB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(tB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagTokenizer"),c(nB,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizer"),c(sB,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizerFast"),c(lB,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizer"),c(iB,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(dB,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizer"),c(cB,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(mB,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pB,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uB,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(_B,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(bB,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(vB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizer"),c(FB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(TB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(MB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(CB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(wB,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasTokenizer"),c(AB,"href","/docs/transformers/pr_17313/en/model_doc/tapex#transformers.TapexTokenizer"),c(yB,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(LB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(xB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c($B,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BB,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMTokenizer"),c(IB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OB,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(XB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(zB,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(WB,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(MI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(CI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(wI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yI,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(kI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(SI,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRProcessor"),c(RI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltProcessor"),c(II,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(NI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"id","transformers.AutoModel"),c(cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(DI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel"),c(XI,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel"),c(zI,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel"),c(WI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(QI,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(HI,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel"),c(UI,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(JI,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(YI,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(KI,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel"),c(ZI,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel"),c(eN,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel"),c(oN,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel"),c(rN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel"),c(tN,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel"),c(aN,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel"),c(nN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iN,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel"),c(dN,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cN,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fN,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel"),c(mN,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel"),c(gN,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel"),c(hN,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pN,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel"),c(_N,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel"),c(bN,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel"),c(vN,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel"),c(FN,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel"),c(TN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel"),c(MN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel"),c(EN,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel"),c(CN,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model"),c(wN,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(AN,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(yN,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel"),c(LN,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel"),c(xN,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel"),c($N,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel"),c(kN,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(BN,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel"),c(IN,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel"),c(NN,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel"),c(qN,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel"),c(jN,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model"),c(DN,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel"),c(GN,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ON,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel"),c(VN,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XN,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zN,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel"),c(WN,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model"),c(QN,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HN,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(UN,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel"),c(JN,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel"),c(YN,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel"),c(KN,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel"),c(ZN,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel"),c(eq,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(oq,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel"),c(rq,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel"),c(tq,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel"),c(aq,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel"),c(nq,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel"),c(sq,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(lq,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel"),c(iq,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel"),c(dq,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel"),c(cq,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel"),c(fq,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel"),c(mq,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(gq,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel"),c(hq,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(pq,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model"),c(_q,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel"),c(bq,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(vq,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Fq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Tq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Mq,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel"),c(Eq,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel"),c(Cq,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(wq,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Aq,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel"),c(yq,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Lq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(xq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c($q,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel"),c(kq,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel"),c(Sq,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel"),c(Rq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Pq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Bq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Iq,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel"),c(Nq,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel"),c(qq,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i_,"id","transformers.AutoModelForPreTraining"),c(i_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i_,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(jq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oq,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Vq,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining"),c(zq,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Wq,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Hq,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Zq,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining"),c(oj,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rj,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aj,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nj,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lj,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ij,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dj,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cj,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gj,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(hj,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vj,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Tj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Mj,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Ej,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Cj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Aj,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xj,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForCausalLM"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c($j,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM"),c(Pj,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Ij,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Nj,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(qj,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jj,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Dj,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Gj,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Oj,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Vj,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Xj,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(zj,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Wj,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Qj,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Hj,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM"),c(Uj,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Jj,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Yj,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Kj,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM"),c(Zj,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(eD,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(oD,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(rD,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(tD,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(aD,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(nD,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(sD,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(lD,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(iD,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dD,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(cD,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(fD,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(gD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(hD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(pD,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForMaskedLM"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(uD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_D,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ED,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AD,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LD,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM"),c($D,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(SD,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RD,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BD,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ID,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DD,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(GD,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(OD,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XD,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(WD,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(QD,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HD,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UD,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(YD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(KD,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.AutoModelForSeq2SeqLM"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(ZD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(lG,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel"),c(fG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.AutoModelForSequenceClassification"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(bG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c($G,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForMultipleChoice"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(hO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c($O,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForNextSentencePrediction"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForTokenClassification"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(eV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(aV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sV,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iV,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cV,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(fV,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(mV,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hV,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(uV,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_V,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bV,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(FV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(TV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(MV,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(EV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(yV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(xV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c($V,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(kV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(SV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(RV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(PV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(BV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(IV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForQuestionAnswering"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(NV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(eX,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wX,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForTableQuestionAnswering"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForImageClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c($X,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification"),c(PX,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(BX,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification"),c(IX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NX,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qX,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jX,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DX,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(GX,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(OX,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(VX,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(XX,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(zX,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(WX,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QX,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification"),c(HX,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification"),c(UX,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForVision2Seq"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(JX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForAudioClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(ez,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(az,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForAudioFrameClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(_z,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForCTC"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Cz,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC"),c(wz,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC"),c(Az,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Lz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($z,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Iz,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForAudioXVector"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Gz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Oz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Vz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Xz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForMaskedImageModeling"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(zz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Uz,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Jz,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForObjectDetection"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oW,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForImageSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(rW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForSemanticSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(sW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(fW,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(mW,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForInstanceSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.TFAutoModel"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(_W,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel"),c(TW,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel"),c(MW,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel"),c(EW,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CW,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wW,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel"),c(AW,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel"),c(yW,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel"),c(LW,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel"),c(xW,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel"),c($W,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kW,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel"),c(SW,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RW,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(PW,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(BW,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel"),c(IW,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(NW,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel"),c(qW,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jW,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model"),c(DW,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel"),c(GW,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel"),c(OW,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(VW,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel"),c(XW,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel"),c(zW,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WW,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel"),c(QW,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel"),c(HW,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(UW,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel"),c(JW,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model"),c(YW,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(KW,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZW,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel"),c(eQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel"),c(oQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rQ,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tQ,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel"),c(aQ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model"),c(nQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel"),c(sQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lQ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel"),c(iQ,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dQ,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel"),c(fQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForPreTraining"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(_Q,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vQ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EQ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(LQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($Q,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForCausalLM"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(jQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XQ,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WQ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QQ,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(UQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(JQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(YQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForImageClassification"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(eH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aH,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(nH,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(sH,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForMaskedLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(lH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(mH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(hH,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(pH,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uH,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_H,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(bH,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vH,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(FH,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TH,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(MH,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(wH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yH,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LH,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xH,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c($H,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(BH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NH,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel"),c(jH,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GH,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.TFAutoModelForSequenceClassification"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(VH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForMultipleChoice"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(bU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($U,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(qU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(OU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(VU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForTokenClassification"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(KU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForQuestionAnswering"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(NJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForVision2Seq"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModel"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel"),c(YJ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel"),c(KJ,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel"),c(ZJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel"),c(eY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(oY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(rY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(tY,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel"),c(aY,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(nY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel"),c(sY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(lY,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(iY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(dY,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel"),c(cY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fY,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mY,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(gY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(hY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(pY,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model"),c(uY,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_Y,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel"),c(bY,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(vY,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(FY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForCausalLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(wY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(AY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(LY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(xY,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($Y,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(kY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(SY,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForPreTraining"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(RY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(DY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(GY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(XY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zY,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(QY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.FlaxAutoModelForMaskedLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(KY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(eK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(oK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(rK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(tK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(nK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(sK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(lK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(gK,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(hK,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(pK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(vK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c($K,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(SK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForTokenClassification"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(zK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(UK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(YK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(dZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(fZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(gZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForImageClassification"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(TZ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.FlaxAutoModelForVision2Seq"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,uf,_),b(f,rt,_),e(rt,gi),e(rt,hi),e(hi,LA),e(rt,_f),b(f,je,_),b(f,We,_),e(We,pi),e(We,yn),e(yn,xA),e(We,Ln),e(We,xn),e(xn,$A),e(We,ui),e(We,$n),e($n,kA),e(We,_i),b(f,bf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Y$),e(Ae,bi),e(bi,K$),e(Ae,Z$),b(f,Eo,_),b(f,wa,_),e(wa,ek),e(wa,vf),e(vf,ok),e(wa,$Oe),b(f,vqe,_),b(f,vi,_),e(vi,Ff),e(Ff,boe),M(SA,boe,null),e(vi,kOe),e(vi,voe),e(voe,SOe),b(f,Fqe,_),b(f,kn,_),e(kn,ROe),e(kn,Foe),e(Foe,POe),e(kn,BOe),e(kn,Toe),e(Toe,IOe),e(kn,NOe),b(f,Tqe,_),M(RA,f,_),b(f,Mqe,_),b(f,rk,_),e(rk,qOe),b(f,Eqe,_),M(Tf,f,_),b(f,Cqe,_),b(f,Fi,_),e(Fi,Mf),e(Mf,Moe),M(PA,Moe,null),e(Fi,jOe),e(Fi,Eoe),e(Eoe,DOe),b(f,wqe,_),b(f,Co,_),M(BA,Co,null),e(Co,GOe),e(Co,IA),e(IA,OOe),e(IA,tk),e(tk,VOe),e(IA,XOe),e(Co,zOe),e(Co,NA),e(NA,WOe),e(NA,Coe),e(Coe,QOe),e(NA,HOe),e(Co,UOe),e(Co,Er),M(qA,Er,null),e(Er,JOe),e(Er,woe),e(woe,YOe),e(Er,KOe),e(Er,Ti),e(Ti,ZOe),e(Ti,Aoe),e(Aoe,eVe),e(Ti,oVe),e(Ti,yoe),e(yoe,rVe),e(Ti,tVe),e(Er,aVe),e(Er,A),e(A,Ef),e(Ef,Loe),e(Loe,nVe),e(Ef,sVe),e(Ef,ak),e(ak,lVe),e(Ef,iVe),e(A,dVe),e(A,Cf),e(Cf,xoe),e(xoe,cVe),e(Cf,fVe),e(Cf,nk),e(nk,mVe),e(Cf,gVe),e(A,hVe),e(A,wf),e(wf,$oe),e($oe,pVe),e(wf,uVe),e(wf,sk),e(sk,_Ve),e(wf,bVe),e(A,vVe),e(A,Af),e(Af,koe),e(koe,FVe),e(Af,TVe),e(Af,lk),e(lk,MVe),e(Af,EVe),e(A,CVe),e(A,yf),e(yf,Soe),e(Soe,wVe),e(yf,AVe),e(yf,ik),e(ik,yVe),e(yf,LVe),e(A,xVe),e(A,Lf),e(Lf,Roe),e(Roe,$Ve),e(Lf,kVe),e(Lf,dk),e(dk,SVe),e(Lf,RVe),e(A,PVe),e(A,xf),e(xf,Poe),e(Poe,BVe),e(xf,IVe),e(xf,ck),e(ck,NVe),e(xf,qVe),e(A,jVe),e(A,$f),e($f,Boe),e(Boe,DVe),e($f,GVe),e($f,fk),e(fk,OVe),e($f,VVe),e(A,XVe),e(A,kf),e(kf,Ioe),e(Ioe,zVe),e(kf,WVe),e(kf,mk),e(mk,QVe),e(kf,HVe),e(A,UVe),e(A,Sf),e(Sf,Noe),e(Noe,JVe),e(Sf,YVe),e(Sf,gk),e(gk,KVe),e(Sf,ZVe),e(A,eXe),e(A,Rf),e(Rf,qoe),e(qoe,oXe),e(Rf,rXe),e(Rf,hk),e(hk,tXe),e(Rf,aXe),e(A,nXe),e(A,Pf),e(Pf,joe),e(joe,sXe),e(Pf,lXe),e(Pf,pk),e(pk,iXe),e(Pf,dXe),e(A,cXe),e(A,Bf),e(Bf,Doe),e(Doe,fXe),e(Bf,mXe),e(Bf,uk),e(uk,gXe),e(Bf,hXe),e(A,pXe),e(A,If),e(If,Goe),e(Goe,uXe),e(If,_Xe),e(If,_k),e(_k,bXe),e(If,vXe),e(A,FXe),e(A,Nf),e(Nf,Ooe),e(Ooe,TXe),e(Nf,MXe),e(Nf,bk),e(bk,EXe),e(Nf,CXe),e(A,wXe),e(A,qf),e(qf,Voe),e(Voe,AXe),e(qf,yXe),e(qf,vk),e(vk,LXe),e(qf,xXe),e(A,$Xe),e(A,jf),e(jf,Xoe),e(Xoe,kXe),e(jf,SXe),e(jf,Fk),e(Fk,RXe),e(jf,PXe),e(A,BXe),e(A,Df),e(Df,zoe),e(zoe,IXe),e(Df,NXe),e(Df,Tk),e(Tk,qXe),e(Df,jXe),e(A,DXe),e(A,Gf),e(Gf,Woe),e(Woe,GXe),e(Gf,OXe),e(Gf,Mk),e(Mk,VXe),e(Gf,XXe),e(A,zXe),e(A,Of),e(Of,Qoe),e(Qoe,WXe),e(Of,QXe),e(Of,Ek),e(Ek,HXe),e(Of,UXe),e(A,JXe),e(A,Vf),e(Vf,Hoe),e(Hoe,YXe),e(Vf,KXe),e(Vf,Ck),e(Ck,ZXe),e(Vf,eze),e(A,oze),e(A,Xf),e(Xf,Uoe),e(Uoe,rze),e(Xf,tze),e(Xf,wk),e(wk,aze),e(Xf,nze),e(A,sze),e(A,zf),e(zf,Joe),e(Joe,lze),e(zf,ize),e(zf,Ak),e(Ak,dze),e(zf,cze),e(A,fze),e(A,Wf),e(Wf,Yoe),e(Yoe,mze),e(Wf,gze),e(Wf,yk),e(yk,hze),e(Wf,pze),e(A,uze),e(A,Qf),e(Qf,Koe),e(Koe,_ze),e(Qf,bze),e(Qf,Lk),e(Lk,vze),e(Qf,Fze),e(A,Tze),e(A,Hf),e(Hf,Zoe),e(Zoe,Mze),e(Hf,Eze),e(Hf,xk),e(xk,Cze),e(Hf,wze),e(A,Aze),e(A,Uf),e(Uf,ere),e(ere,yze),e(Uf,Lze),e(Uf,$k),e($k,xze),e(Uf,$ze),e(A,kze),e(A,Jf),e(Jf,ore),e(ore,Sze),e(Jf,Rze),e(Jf,kk),e(kk,Pze),e(Jf,Bze),e(A,Ize),e(A,Yf),e(Yf,rre),e(rre,Nze),e(Yf,qze),e(Yf,Sk),e(Sk,jze),e(Yf,Dze),e(A,Gze),e(A,Kf),e(Kf,tre),e(tre,Oze),e(Kf,Vze),e(Kf,Rk),e(Rk,Xze),e(Kf,zze),e(A,Wze),e(A,Zf),e(Zf,are),e(are,Qze),e(Zf,Hze),e(Zf,Pk),e(Pk,Uze),e(Zf,Jze),e(A,Yze),e(A,em),e(em,nre),e(nre,Kze),e(em,Zze),e(em,Bk),e(Bk,eWe),e(em,oWe),e(A,rWe),e(A,om),e(om,sre),e(sre,tWe),e(om,aWe),e(om,Ik),e(Ik,nWe),e(om,sWe),e(A,lWe),e(A,rm),e(rm,lre),e(lre,iWe),e(rm,dWe),e(rm,Nk),e(Nk,cWe),e(rm,fWe),e(A,mWe),e(A,tm),e(tm,ire),e(ire,gWe),e(tm,hWe),e(tm,qk),e(qk,pWe),e(tm,uWe),e(A,_We),e(A,am),e(am,dre),e(dre,bWe),e(am,vWe),e(am,jk),e(jk,FWe),e(am,TWe),e(A,MWe),e(A,nm),e(nm,cre),e(cre,EWe),e(nm,CWe),e(nm,Dk),e(Dk,wWe),e(nm,AWe),e(A,yWe),e(A,sm),e(sm,fre),e(fre,LWe),e(sm,xWe),e(sm,Gk),e(Gk,$We),e(sm,kWe),e(A,SWe),e(A,lm),e(lm,mre),e(mre,RWe),e(lm,PWe),e(lm,Ok),e(Ok,BWe),e(lm,IWe),e(A,NWe),e(A,im),e(im,gre),e(gre,qWe),e(im,jWe),e(im,Vk),e(Vk,DWe),e(im,GWe),e(A,OWe),e(A,dm),e(dm,hre),e(hre,VWe),e(dm,XWe),e(dm,Xk),e(Xk,zWe),e(dm,WWe),e(A,QWe),e(A,cm),e(cm,pre),e(pre,HWe),e(cm,UWe),e(cm,zk),e(zk,JWe),e(cm,YWe),e(A,KWe),e(A,fm),e(fm,ure),e(ure,ZWe),e(fm,eQe),e(fm,Wk),e(Wk,oQe),e(fm,rQe),e(A,tQe),e(A,mm),e(mm,_re),e(_re,aQe),e(mm,nQe),e(mm,Qk),e(Qk,sQe),e(mm,lQe),e(A,iQe),e(A,gm),e(gm,bre),e(bre,dQe),e(gm,cQe),e(gm,Hk),e(Hk,fQe),e(gm,mQe),e(A,gQe),e(A,hm),e(hm,vre),e(vre,hQe),e(hm,pQe),e(hm,Uk),e(Uk,uQe),e(hm,_Qe),e(A,bQe),e(A,pm),e(pm,Fre),e(Fre,vQe),e(pm,FQe),e(pm,Jk),e(Jk,TQe),e(pm,MQe),e(A,EQe),e(A,um),e(um,Tre),e(Tre,CQe),e(um,wQe),e(um,Yk),e(Yk,AQe),e(um,yQe),e(A,LQe),e(A,_m),e(_m,Mre),e(Mre,xQe),e(_m,$Qe),e(_m,Kk),e(Kk,kQe),e(_m,SQe),e(A,RQe),e(A,bm),e(bm,Ere),e(Ere,PQe),e(bm,BQe),e(bm,Zk),e(Zk,IQe),e(bm,NQe),e(A,qQe),e(A,vm),e(vm,Cre),e(Cre,jQe),e(vm,DQe),e(vm,eS),e(eS,GQe),e(vm,OQe),e(A,VQe),e(A,Fm),e(Fm,wre),e(wre,XQe),e(Fm,zQe),e(Fm,oS),e(oS,WQe),e(Fm,QQe),e(A,HQe),e(A,Tm),e(Tm,Are),e(Are,UQe),e(Tm,JQe),e(Tm,rS),e(rS,YQe),e(Tm,KQe),e(A,ZQe),e(A,Mm),e(Mm,yre),e(yre,eHe),e(Mm,oHe),e(Mm,tS),e(tS,rHe),e(Mm,tHe),e(A,aHe),e(A,Em),e(Em,Lre),e(Lre,nHe),e(Em,sHe),e(Em,aS),e(aS,lHe),e(Em,iHe),e(A,dHe),e(A,Cm),e(Cm,xre),e(xre,cHe),e(Cm,fHe),e(Cm,nS),e(nS,mHe),e(Cm,gHe),e(A,hHe),e(A,wm),e(wm,$re),e($re,pHe),e(wm,uHe),e(wm,sS),e(sS,_He),e(wm,bHe),e(A,vHe),e(A,Am),e(Am,kre),e(kre,FHe),e(Am,THe),e(Am,lS),e(lS,MHe),e(Am,EHe),e(A,CHe),e(A,ym),e(ym,Sre),e(Sre,wHe),e(ym,AHe),e(ym,iS),e(iS,yHe),e(ym,LHe),e(A,xHe),e(A,Lm),e(Lm,Rre),e(Rre,$He),e(Lm,kHe),e(Lm,dS),e(dS,SHe),e(Lm,RHe),e(A,PHe),e(A,xm),e(xm,Pre),e(Pre,BHe),e(xm,IHe),e(xm,cS),e(cS,NHe),e(xm,qHe),e(A,jHe),e(A,$m),e($m,Bre),e(Bre,DHe),e($m,GHe),e($m,fS),e(fS,OHe),e($m,VHe),e(A,XHe),e(A,km),e(km,Ire),e(Ire,zHe),e(km,WHe),e(km,mS),e(mS,QHe),e(km,HHe),e(A,UHe),e(A,Sm),e(Sm,Nre),e(Nre,JHe),e(Sm,YHe),e(Sm,gS),e(gS,KHe),e(Sm,ZHe),e(A,eUe),e(A,Rm),e(Rm,qre),e(qre,oUe),e(Rm,rUe),e(Rm,hS),e(hS,tUe),e(Rm,aUe),e(A,nUe),e(A,Pm),e(Pm,jre),e(jre,sUe),e(Pm,lUe),e(Pm,pS),e(pS,iUe),e(Pm,dUe),e(A,cUe),e(A,Bm),e(Bm,Dre),e(Dre,fUe),e(Bm,mUe),e(Bm,uS),e(uS,gUe),e(Bm,hUe),e(A,pUe),e(A,Im),e(Im,Gre),e(Gre,uUe),e(Im,_Ue),e(Im,_S),e(_S,bUe),e(Im,vUe),e(A,FUe),e(A,Nm),e(Nm,Ore),e(Ore,TUe),e(Nm,MUe),e(Nm,bS),e(bS,EUe),e(Nm,CUe),e(A,wUe),e(A,qm),e(qm,Vre),e(Vre,AUe),e(qm,yUe),e(qm,vS),e(vS,LUe),e(qm,xUe),e(A,$Ue),e(A,jm),e(jm,Xre),e(Xre,kUe),e(jm,SUe),e(jm,FS),e(FS,RUe),e(jm,PUe),e(A,BUe),e(A,Dm),e(Dm,zre),e(zre,IUe),e(Dm,NUe),e(Dm,TS),e(TS,qUe),e(Dm,jUe),e(A,DUe),e(A,Gm),e(Gm,Wre),e(Wre,GUe),e(Gm,OUe),e(Gm,MS),e(MS,VUe),e(Gm,XUe),e(A,zUe),e(A,Om),e(Om,Qre),e(Qre,WUe),e(Om,QUe),e(Om,ES),e(ES,HUe),e(Om,UUe),e(A,JUe),e(A,Vm),e(Vm,Hre),e(Hre,YUe),e(Vm,KUe),e(Vm,CS),e(CS,ZUe),e(Vm,eJe),e(A,oJe),e(A,Xm),e(Xm,Ure),e(Ure,rJe),e(Xm,tJe),e(Xm,wS),e(wS,aJe),e(Xm,nJe),e(A,sJe),e(A,zm),e(zm,Jre),e(Jre,lJe),e(zm,iJe),e(zm,AS),e(AS,dJe),e(zm,cJe),e(A,fJe),e(A,Wm),e(Wm,Yre),e(Yre,mJe),e(Wm,gJe),e(Wm,yS),e(yS,hJe),e(Wm,pJe),e(A,uJe),e(A,Qm),e(Qm,Kre),e(Kre,_Je),e(Qm,bJe),e(Qm,LS),e(LS,vJe),e(Qm,FJe),e(A,TJe),e(A,Hm),e(Hm,Zre),e(Zre,MJe),e(Hm,EJe),e(Hm,xS),e(xS,CJe),e(Hm,wJe),e(A,AJe),e(A,Um),e(Um,ete),e(ete,yJe),e(Um,LJe),e(Um,$S),e($S,xJe),e(Um,$Je),e(A,kJe),e(A,Jm),e(Jm,ote),e(ote,SJe),e(Jm,RJe),e(Jm,kS),e(kS,PJe),e(Jm,BJe),e(A,IJe),e(A,Ym),e(Ym,rte),e(rte,NJe),e(Ym,qJe),e(Ym,SS),e(SS,jJe),e(Ym,DJe),e(A,GJe),e(A,Km),e(Km,tte),e(tte,OJe),e(Km,VJe),e(Km,RS),e(RS,XJe),e(Km,zJe),e(A,WJe),e(A,Zm),e(Zm,ate),e(ate,QJe),e(Zm,HJe),e(Zm,PS),e(PS,UJe),e(Zm,JJe),e(A,YJe),e(A,eg),e(eg,nte),e(nte,KJe),e(eg,ZJe),e(eg,BS),e(BS,eYe),e(eg,oYe),e(A,rYe),e(A,og),e(og,ste),e(ste,tYe),e(og,aYe),e(og,IS),e(IS,nYe),e(og,sYe),e(A,lYe),e(A,rg),e(rg,lte),e(lte,iYe),e(rg,dYe),e(rg,NS),e(NS,cYe),e(rg,fYe),e(A,mYe),e(A,tg),e(tg,ite),e(ite,gYe),e(tg,hYe),e(tg,qS),e(qS,pYe),e(tg,uYe),e(A,_Ye),e(A,ag),e(ag,dte),e(dte,bYe),e(ag,vYe),e(ag,jS),e(jS,FYe),e(ag,TYe),e(A,MYe),e(A,ng),e(ng,cte),e(cte,EYe),e(ng,CYe),e(ng,DS),e(DS,wYe),e(ng,AYe),e(A,yYe),e(A,sg),e(sg,fte),e(fte,LYe),e(sg,xYe),e(sg,GS),e(GS,$Ye),e(sg,kYe),e(A,SYe),e(A,lg),e(lg,mte),e(mte,RYe),e(lg,PYe),e(lg,OS),e(OS,BYe),e(lg,IYe),e(A,NYe),e(A,ig),e(ig,gte),e(gte,qYe),e(ig,jYe),e(ig,VS),e(VS,DYe),e(ig,GYe),e(A,OYe),e(A,dg),e(dg,hte),e(hte,VYe),e(dg,XYe),e(dg,XS),e(XS,zYe),e(dg,WYe),e(A,QYe),e(A,cg),e(cg,pte),e(pte,HYe),e(cg,UYe),e(cg,zS),e(zS,JYe),e(cg,YYe),e(A,KYe),e(A,fg),e(fg,ute),e(ute,ZYe),e(fg,eKe),e(fg,WS),e(WS,oKe),e(fg,rKe),e(A,tKe),e(A,mg),e(mg,_te),e(_te,aKe),e(mg,nKe),e(mg,QS),e(QS,sKe),e(mg,lKe),e(A,iKe),e(A,gg),e(gg,bte),e(bte,dKe),e(gg,cKe),e(gg,HS),e(HS,fKe),e(gg,mKe),e(A,gKe),e(A,hg),e(hg,vte),e(vte,hKe),e(hg,pKe),e(hg,US),e(US,uKe),e(hg,_Ke),e(A,bKe),e(A,pg),e(pg,Fte),e(Fte,vKe),e(pg,FKe),e(pg,JS),e(JS,TKe),e(pg,MKe),e(A,EKe),e(A,ug),e(ug,Tte),e(Tte,CKe),e(ug,wKe),e(ug,YS),e(YS,AKe),e(ug,yKe),e(A,LKe),e(A,_g),e(_g,Mte),e(Mte,xKe),e(_g,$Ke),e(_g,KS),e(KS,kKe),e(_g,SKe),e(A,RKe),e(A,bg),e(bg,Ete),e(Ete,PKe),e(bg,BKe),e(bg,ZS),e(ZS,IKe),e(bg,NKe),e(A,qKe),e(A,vg),e(vg,Cte),e(Cte,jKe),e(vg,DKe),e(vg,eR),e(eR,GKe),e(vg,OKe),e(A,VKe),e(A,Fg),e(Fg,wte),e(wte,XKe),e(Fg,zKe),e(Fg,oR),e(oR,WKe),e(Fg,QKe),e(A,HKe),e(A,Tg),e(Tg,Ate),e(Ate,UKe),e(Tg,JKe),e(Tg,rR),e(rR,YKe),e(Tg,KKe),e(A,ZKe),e(A,Mg),e(Mg,yte),e(yte,eZe),e(Mg,oZe),e(Mg,tR),e(tR,rZe),e(Mg,tZe),e(A,aZe),e(A,Eg),e(Eg,Lte),e(Lte,nZe),e(Eg,sZe),e(Eg,aR),e(aR,lZe),e(Eg,iZe),e(A,dZe),e(A,Cg),e(Cg,xte),e(xte,cZe),e(Cg,fZe),e(Cg,nR),e(nR,mZe),e(Cg,gZe),e(Er,hZe),M(wg,Er,null),e(Co,pZe),e(Co,Ag),M(jA,Ag,null),e(Ag,uZe),e(Ag,$te),e($te,_Ze),b(f,Aqe,_),b(f,Mi,_),e(Mi,yg),e(yg,kte),M(DA,kte,null),e(Mi,bZe),e(Mi,Ste),e(Ste,vZe),b(f,yqe,_),b(f,wo,_),M(GA,wo,null),e(wo,FZe),e(wo,OA),e(OA,TZe),e(OA,sR),e(sR,MZe),e(OA,EZe),e(wo,CZe),e(wo,VA),e(VA,wZe),e(VA,Rte),e(Rte,AZe),e(VA,yZe),e(wo,LZe),e(wo,Cr),M(XA,Cr,null),e(Cr,xZe),e(Cr,Pte),e(Pte,$Ze),e(Cr,kZe),e(Cr,Aa),e(Aa,SZe),e(Aa,Bte),e(Bte,RZe),e(Aa,PZe),e(Aa,Ite),e(Ite,BZe),e(Aa,IZe),e(Aa,Nte),e(Nte,NZe),e(Aa,qZe),e(Cr,jZe),e(Cr,k),e(k,Sn),e(Sn,qte),e(qte,DZe),e(Sn,GZe),e(Sn,lR),e(lR,OZe),e(Sn,VZe),e(Sn,iR),e(iR,XZe),e(Sn,zZe),e(k,WZe),e(k,Rn),e(Rn,jte),e(jte,QZe),e(Rn,HZe),e(Rn,dR),e(dR,UZe),e(Rn,JZe),e(Rn,cR),e(cR,YZe),e(Rn,KZe),e(k,ZZe),e(k,Pn),e(Pn,Dte),e(Dte,eeo),e(Pn,oeo),e(Pn,fR),e(fR,reo),e(Pn,teo),e(Pn,mR),e(mR,aeo),e(Pn,neo),e(k,seo),e(k,Lg),e(Lg,Gte),e(Gte,leo),e(Lg,ieo),e(Lg,gR),e(gR,deo),e(Lg,ceo),e(k,feo),e(k,Bn),e(Bn,Ote),e(Ote,meo),e(Bn,geo),e(Bn,hR),e(hR,heo),e(Bn,peo),e(Bn,pR),e(pR,ueo),e(Bn,_eo),e(k,beo),e(k,xg),e(xg,Vte),e(Vte,veo),e(xg,Feo),e(xg,uR),e(uR,Teo),e(xg,Meo),e(k,Eeo),e(k,$g),e($g,Xte),e(Xte,Ceo),e($g,weo),e($g,_R),e(_R,Aeo),e($g,yeo),e(k,Leo),e(k,kg),e(kg,zte),e(zte,xeo),e(kg,$eo),e(kg,bR),e(bR,keo),e(kg,Seo),e(k,Reo),e(k,In),e(In,Wte),e(Wte,Peo),e(In,Beo),e(In,vR),e(vR,Ieo),e(In,Neo),e(In,FR),e(FR,qeo),e(In,jeo),e(k,Deo),e(k,Nn),e(Nn,Qte),e(Qte,Geo),e(Nn,Oeo),e(Nn,TR),e(TR,Veo),e(Nn,Xeo),e(Nn,MR),e(MR,zeo),e(Nn,Weo),e(k,Qeo),e(k,qn),e(qn,Hte),e(Hte,Heo),e(qn,Ueo),e(qn,ER),e(ER,Jeo),e(qn,Yeo),e(qn,CR),e(CR,Keo),e(qn,Zeo),e(k,eoo),e(k,Sg),e(Sg,Ute),e(Ute,ooo),e(Sg,roo),e(Sg,wR),e(wR,too),e(Sg,aoo),e(k,noo),e(k,Rg),e(Rg,Jte),e(Jte,soo),e(Rg,loo),e(Rg,AR),e(AR,ioo),e(Rg,doo),e(k,coo),e(k,jn),e(jn,Yte),e(Yte,foo),e(jn,moo),e(jn,yR),e(yR,goo),e(jn,hoo),e(jn,LR),e(LR,poo),e(jn,uoo),e(k,_oo),e(k,Pg),e(Pg,Kte),e(Kte,boo),e(Pg,voo),e(Pg,xR),e(xR,Foo),e(Pg,Too),e(k,Moo),e(k,Dn),e(Dn,Zte),e(Zte,Eoo),e(Dn,Coo),e(Dn,$R),e($R,woo),e(Dn,Aoo),e(Dn,kR),e(kR,yoo),e(Dn,Loo),e(k,xoo),e(k,Gn),e(Gn,eae),e(eae,$oo),e(Gn,koo),e(Gn,SR),e(SR,Soo),e(Gn,Roo),e(Gn,RR),e(RR,Poo),e(Gn,Boo),e(k,Ioo),e(k,On),e(On,oae),e(oae,Noo),e(On,qoo),e(On,PR),e(PR,joo),e(On,Doo),e(On,BR),e(BR,Goo),e(On,Ooo),e(k,Voo),e(k,Bg),e(Bg,rae),e(rae,Xoo),e(Bg,zoo),e(Bg,IR),e(IR,Woo),e(Bg,Qoo),e(k,Hoo),e(k,Vn),e(Vn,tae),e(tae,Uoo),e(Vn,Joo),e(Vn,NR),e(NR,Yoo),e(Vn,Koo),e(Vn,qR),e(qR,Zoo),e(Vn,ero),e(k,oro),e(k,Xn),e(Xn,aae),e(aae,rro),e(Xn,tro),e(Xn,jR),e(jR,aro),e(Xn,nro),e(Xn,DR),e(DR,sro),e(Xn,lro),e(k,iro),e(k,zn),e(zn,nae),e(nae,dro),e(zn,cro),e(zn,GR),e(GR,fro),e(zn,mro),e(zn,OR),e(OR,gro),e(zn,hro),e(k,pro),e(k,Wn),e(Wn,sae),e(sae,uro),e(Wn,_ro),e(Wn,VR),e(VR,bro),e(Wn,vro),e(Wn,XR),e(XR,Fro),e(Wn,Tro),e(k,Mro),e(k,Qn),e(Qn,lae),e(lae,Ero),e(Qn,Cro),e(Qn,zR),e(zR,wro),e(Qn,Aro),e(Qn,WR),e(WR,yro),e(Qn,Lro),e(k,xro),e(k,Hn),e(Hn,iae),e(iae,$ro),e(Hn,kro),e(Hn,QR),e(QR,Sro),e(Hn,Rro),e(Hn,HR),e(HR,Pro),e(Hn,Bro),e(k,Iro),e(k,Ig),e(Ig,dae),e(dae,Nro),e(Ig,qro),e(Ig,UR),e(UR,jro),e(Ig,Dro),e(k,Gro),e(k,Un),e(Un,cae),e(cae,Oro),e(Un,Vro),e(Un,JR),e(JR,Xro),e(Un,zro),e(Un,YR),e(YR,Wro),e(Un,Qro),e(k,Hro),e(k,Ng),e(Ng,fae),e(fae,Uro),e(Ng,Jro),e(Ng,KR),e(KR,Yro),e(Ng,Kro),e(k,Zro),e(k,Jn),e(Jn,mae),e(mae,eto),e(Jn,oto),e(Jn,ZR),e(ZR,rto),e(Jn,tto),e(Jn,eP),e(eP,ato),e(Jn,nto),e(k,sto),e(k,Yn),e(Yn,gae),e(gae,lto),e(Yn,ito),e(Yn,oP),e(oP,dto),e(Yn,cto),e(Yn,rP),e(rP,fto),e(Yn,mto),e(k,gto),e(k,Kn),e(Kn,hae),e(hae,hto),e(Kn,pto),e(Kn,tP),e(tP,uto),e(Kn,_to),e(Kn,aP),e(aP,bto),e(Kn,vto),e(k,Fto),e(k,qg),e(qg,pae),e(pae,Tto),e(qg,Mto),e(qg,nP),e(nP,Eto),e(qg,Cto),e(k,wto),e(k,Zn),e(Zn,uae),e(uae,Ato),e(Zn,yto),e(Zn,sP),e(sP,Lto),e(Zn,xto),e(Zn,lP),e(lP,$to),e(Zn,kto),e(k,Sto),e(k,es),e(es,_ae),e(_ae,Rto),e(es,Pto),e(es,iP),e(iP,Bto),e(es,Ito),e(es,dP),e(dP,Nto),e(es,qto),e(k,jto),e(k,os),e(os,bae),e(bae,Dto),e(os,Gto),e(os,cP),e(cP,Oto),e(os,Vto),e(os,fP),e(fP,Xto),e(os,zto),e(k,Wto),e(k,jg),e(jg,vae),e(vae,Qto),e(jg,Hto),e(jg,mP),e(mP,Uto),e(jg,Jto),e(k,Yto),e(k,rs),e(rs,Fae),e(Fae,Kto),e(rs,Zto),e(rs,gP),e(gP,eao),e(rs,oao),e(rs,hP),e(hP,rao),e(rs,tao),e(k,aao),e(k,ts),e(ts,Tae),e(Tae,nao),e(ts,sao),e(ts,pP),e(pP,lao),e(ts,iao),e(ts,uP),e(uP,dao),e(ts,cao),e(k,fao),e(k,as),e(as,Mae),e(Mae,mao),e(as,gao),e(as,_P),e(_P,hao),e(as,pao),e(as,bP),e(bP,uao),e(as,_ao),e(k,bao),e(k,ns),e(ns,Eae),e(Eae,vao),e(ns,Fao),e(ns,vP),e(vP,Tao),e(ns,Mao),e(ns,FP),e(FP,Eao),e(ns,Cao),e(k,wao),e(k,ss),e(ss,Cae),e(Cae,Aao),e(ss,yao),e(ss,TP),e(TP,Lao),e(ss,xao),e(ss,MP),e(MP,$ao),e(ss,kao),e(k,Sao),e(k,ls),e(ls,wae),e(wae,Rao),e(ls,Pao),e(ls,EP),e(EP,Bao),e(ls,Iao),e(ls,CP),e(CP,Nao),e(ls,qao),e(k,jao),e(k,is),e(is,Aae),e(Aae,Dao),e(is,Gao),e(is,wP),e(wP,Oao),e(is,Vao),e(is,AP),e(AP,Xao),e(is,zao),e(k,Wao),e(k,Dg),e(Dg,yae),e(yae,Qao),e(Dg,Hao),e(Dg,yP),e(yP,Uao),e(Dg,Jao),e(k,Yao),e(k,ds),e(ds,Lae),e(Lae,Kao),e(ds,Zao),e(ds,LP),e(LP,eno),e(ds,ono),e(ds,xP),e(xP,rno),e(ds,tno),e(k,ano),e(k,Gg),e(Gg,xae),e(xae,nno),e(Gg,sno),e(Gg,$P),e($P,lno),e(Gg,ino),e(k,dno),e(k,Og),e(Og,$ae),e($ae,cno),e(Og,fno),e(Og,kP),e(kP,mno),e(Og,gno),e(k,hno),e(k,cs),e(cs,kae),e(kae,pno),e(cs,uno),e(cs,SP),e(SP,_no),e(cs,bno),e(cs,RP),e(RP,vno),e(cs,Fno),e(k,Tno),e(k,fs),e(fs,Sae),e(Sae,Mno),e(fs,Eno),e(fs,PP),e(PP,Cno),e(fs,wno),e(fs,BP),e(BP,Ano),e(fs,yno),e(k,Lno),e(k,ms),e(ms,Rae),e(Rae,xno),e(ms,$no),e(ms,IP),e(IP,kno),e(ms,Sno),e(ms,NP),e(NP,Rno),e(ms,Pno),e(k,Bno),e(k,Vg),e(Vg,Pae),e(Pae,Ino),e(Vg,Nno),e(Vg,qP),e(qP,qno),e(Vg,jno),e(k,Dno),e(k,gs),e(gs,Bae),e(Bae,Gno),e(gs,Ono),e(gs,jP),e(jP,Vno),e(gs,Xno),e(gs,DP),e(DP,zno),e(gs,Wno),e(k,Qno),e(k,hs),e(hs,Iae),e(Iae,Hno),e(hs,Uno),e(hs,GP),e(GP,Jno),e(hs,Yno),e(hs,OP),e(OP,Kno),e(hs,Zno),e(k,eso),e(k,ps),e(ps,Nae),e(Nae,oso),e(ps,rso),e(ps,VP),e(VP,tso),e(ps,aso),e(ps,XP),e(XP,nso),e(ps,sso),e(k,lso),e(k,us),e(us,qae),e(qae,iso),e(us,dso),e(us,zP),e(zP,cso),e(us,fso),e(us,WP),e(WP,mso),e(us,gso),e(k,hso),e(k,_s),e(_s,jae),e(jae,pso),e(_s,uso),e(_s,QP),e(QP,_so),e(_s,bso),e(_s,HP),e(HP,vso),e(_s,Fso),e(k,Tso),e(k,Xg),e(Xg,Dae),e(Dae,Mso),e(Xg,Eso),e(Xg,UP),e(UP,Cso),e(Xg,wso),e(k,Aso),e(k,bs),e(bs,Gae),e(Gae,yso),e(bs,Lso),e(bs,JP),e(JP,xso),e(bs,$so),e(bs,YP),e(YP,kso),e(bs,Sso),e(k,Rso),e(k,zg),e(zg,Oae),e(Oae,Pso),e(zg,Bso),e(zg,KP),e(KP,Iso),e(zg,Nso),e(k,qso),e(k,Wg),e(Wg,Vae),e(Vae,jso),e(Wg,Dso),e(Wg,ZP),e(ZP,Gso),e(Wg,Oso),e(k,Vso),e(k,Qg),e(Qg,Xae),e(Xae,Xso),e(Qg,zso),e(Qg,eB),e(eB,Wso),e(Qg,Qso),e(k,Hso),e(k,Hg),e(Hg,zae),e(zae,Uso),e(Hg,Jso),e(Hg,oB),e(oB,Yso),e(Hg,Kso),e(k,Zso),e(k,vs),e(vs,Wae),e(Wae,elo),e(vs,olo),e(vs,rB),e(rB,rlo),e(vs,tlo),e(vs,tB),e(tB,alo),e(vs,nlo),e(k,slo),e(k,Ug),e(Ug,Qae),e(Qae,llo),e(Ug,ilo),e(Ug,aB),e(aB,dlo),e(Ug,clo),e(k,flo),e(k,Fs),e(Fs,Hae),e(Hae,mlo),e(Fs,glo),e(Fs,nB),e(nB,hlo),e(Fs,plo),e(Fs,sB),e(sB,ulo),e(Fs,_lo),e(k,blo),e(k,Ts),e(Ts,Uae),e(Uae,vlo),e(Ts,Flo),e(Ts,lB),e(lB,Tlo),e(Ts,Mlo),e(Ts,iB),e(iB,Elo),e(Ts,Clo),e(k,wlo),e(k,Ms),e(Ms,Jae),e(Jae,Alo),e(Ms,ylo),e(Ms,dB),e(dB,Llo),e(Ms,xlo),e(Ms,cB),e(cB,$lo),e(Ms,klo),e(k,Slo),e(k,Es),e(Es,Yae),e(Yae,Rlo),e(Es,Plo),e(Es,fB),e(fB,Blo),e(Es,Ilo),e(Es,mB),e(mB,Nlo),e(Es,qlo),e(k,jlo),e(k,Cs),e(Cs,Kae),e(Kae,Dlo),e(Cs,Glo),e(Cs,gB),e(gB,Olo),e(Cs,Vlo),e(Cs,hB),e(hB,Xlo),e(Cs,zlo),e(k,Wlo),e(k,ws),e(ws,Zae),e(Zae,Qlo),e(ws,Hlo),e(ws,pB),e(pB,Ulo),e(ws,Jlo),e(ws,uB),e(uB,Ylo),e(ws,Klo),e(k,Zlo),e(k,Jg),e(Jg,ene),e(ene,eio),e(Jg,oio),e(Jg,_B),e(_B,rio),e(Jg,tio),e(k,aio),e(k,Yg),e(Yg,one),e(one,nio),e(Yg,sio),e(Yg,bB),e(bB,lio),e(Yg,iio),e(k,dio),e(k,As),e(As,rne),e(rne,cio),e(As,fio),e(As,vB),e(vB,mio),e(As,gio),e(As,FB),e(FB,hio),e(As,pio),e(k,uio),e(k,ys),e(ys,tne),e(tne,_io),e(ys,bio),e(ys,TB),e(TB,vio),e(ys,Fio),e(ys,MB),e(MB,Tio),e(ys,Mio),e(k,Eio),e(k,Ls),e(Ls,ane),e(ane,Cio),e(Ls,wio),e(Ls,EB),e(EB,Aio),e(Ls,yio),e(Ls,CB),e(CB,Lio),e(Ls,xio),e(k,$io),e(k,Kg),e(Kg,nne),e(nne,kio),e(Kg,Sio),e(Kg,wB),e(wB,Rio),e(Kg,Pio),e(k,Bio),e(k,Zg),e(Zg,sne),e(sne,Iio),e(Zg,Nio),e(Zg,AB),e(AB,qio),e(Zg,jio),e(k,Dio),e(k,eh),e(eh,lne),e(lne,Gio),e(eh,Oio),e(eh,yB),e(yB,Vio),e(eh,Xio),e(k,zio),e(k,xs),e(xs,ine),e(ine,Wio),e(xs,Qio),e(xs,LB),e(LB,Hio),e(xs,Uio),e(xs,xB),e(xB,Jio),e(xs,Yio),e(k,Kio),e(k,oh),e(oh,dne),e(dne,Zio),e(oh,edo),e(oh,$B),e($B,odo),e(oh,rdo),e(k,tdo),e(k,rh),e(rh,cne),e(cne,ado),e(rh,ndo),e(rh,kB),e(kB,sdo),e(rh,ldo),e(k,ido),e(k,th),e(th,fne),e(fne,ddo),e(th,cdo),e(th,SB),e(SB,fdo),e(th,mdo),e(k,gdo),e(k,$s),e($s,mne),e(mne,hdo),e($s,pdo),e($s,RB),e(RB,udo),e($s,_do),e($s,PB),e(PB,bdo),e($s,vdo),e(k,Fdo),e(k,ah),e(ah,gne),e(gne,Tdo),e(ah,Mdo),e(ah,BB),e(BB,Edo),e(ah,Cdo),e(k,wdo),e(k,nh),e(nh,hne),e(hne,Ado),e(nh,ydo),e(nh,IB),e(IB,Ldo),e(nh,xdo),e(k,$do),e(k,ks),e(ks,pne),e(pne,kdo),e(ks,Sdo),e(ks,NB),e(NB,Rdo),e(ks,Pdo),e(ks,qB),e(qB,Bdo),e(ks,Ido),e(k,Ndo),e(k,Ss),e(Ss,une),e(une,qdo),e(Ss,jdo),e(Ss,jB),e(jB,Ddo),e(Ss,Gdo),e(Ss,DB),e(DB,Odo),e(Ss,Vdo),e(k,Xdo),e(k,Rs),e(Rs,_ne),e(_ne,zdo),e(Rs,Wdo),e(Rs,GB),e(GB,Qdo),e(Rs,Hdo),e(Rs,OB),e(OB,Udo),e(Rs,Jdo),e(k,Ydo),e(k,Ps),e(Ps,bne),e(bne,Kdo),e(Ps,Zdo),e(Ps,VB),e(VB,eco),e(Ps,oco),e(Ps,XB),e(XB,rco),e(Ps,tco),e(Cr,aco),M(sh,Cr,null),e(wo,nco),e(wo,lh),M(zA,lh,null),e(lh,sco),e(lh,vne),e(vne,lco),b(f,Lqe,_),b(f,Ei,_),e(Ei,ih),e(ih,Fne),M(WA,Fne,null),e(Ei,ico),e(Ei,Tne),e(Tne,dco),b(f,xqe,_),b(f,Ao,_),M(QA,Ao,null),e(Ao,cco),e(Ao,HA),e(HA,fco),e(HA,zB),e(zB,mco),e(HA,gco),e(Ao,hco),e(Ao,UA),e(UA,pco),e(UA,Mne),e(Mne,uco),e(UA,_co),e(Ao,bco),e(Ao,He),M(JA,He,null),e(He,vco),e(He,Ene),e(Ene,Fco),e(He,Tco),e(He,ya),e(ya,Mco),e(ya,Cne),e(Cne,Eco),e(ya,Cco),e(ya,wne),e(wne,wco),e(ya,Aco),e(ya,Ane),e(Ane,yco),e(ya,Lco),e(He,xco),e(He,Y),e(Y,dh),e(dh,yne),e(yne,$co),e(dh,kco),e(dh,WB),e(WB,Sco),e(dh,Rco),e(Y,Pco),e(Y,ch),e(ch,Lne),e(Lne,Bco),e(ch,Ico),e(ch,QB),e(QB,Nco),e(ch,qco),e(Y,jco),e(Y,fh),e(fh,xne),e(xne,Dco),e(fh,Gco),e(fh,HB),e(HB,Oco),e(fh,Vco),e(Y,Xco),e(Y,mh),e(mh,$ne),e($ne,zco),e(mh,Wco),e(mh,UB),e(UB,Qco),e(mh,Hco),e(Y,Uco),e(Y,gh),e(gh,kne),e(kne,Jco),e(gh,Yco),e(gh,JB),e(JB,Kco),e(gh,Zco),e(Y,efo),e(Y,hh),e(hh,Sne),e(Sne,ofo),e(hh,rfo),e(hh,YB),e(YB,tfo),e(hh,afo),e(Y,nfo),e(Y,ph),e(ph,Rne),e(Rne,sfo),e(ph,lfo),e(ph,KB),e(KB,ifo),e(ph,dfo),e(Y,cfo),e(Y,uh),e(uh,Pne),e(Pne,ffo),e(uh,mfo),e(uh,ZB),e(ZB,gfo),e(uh,hfo),e(Y,pfo),e(Y,_h),e(_h,Bne),e(Bne,ufo),e(_h,_fo),e(_h,eI),e(eI,bfo),e(_h,vfo),e(Y,Ffo),e(Y,bh),e(bh,Ine),e(Ine,Tfo),e(bh,Mfo),e(bh,oI),e(oI,Efo),e(bh,Cfo),e(Y,wfo),e(Y,vh),e(vh,Nne),e(Nne,Afo),e(vh,yfo),e(vh,rI),e(rI,Lfo),e(vh,xfo),e(Y,$fo),e(Y,Fh),e(Fh,qne),e(qne,kfo),e(Fh,Sfo),e(Fh,tI),e(tI,Rfo),e(Fh,Pfo),e(Y,Bfo),e(Y,Th),e(Th,jne),e(jne,Ifo),e(Th,Nfo),e(Th,aI),e(aI,qfo),e(Th,jfo),e(Y,Dfo),e(Y,Mh),e(Mh,Dne),e(Dne,Gfo),e(Mh,Ofo),e(Mh,nI),e(nI,Vfo),e(Mh,Xfo),e(Y,zfo),e(Y,Eh),e(Eh,Gne),e(Gne,Wfo),e(Eh,Qfo),e(Eh,sI),e(sI,Hfo),e(Eh,Ufo),e(Y,Jfo),e(Y,Ch),e(Ch,One),e(One,Yfo),e(Ch,Kfo),e(Ch,lI),e(lI,Zfo),e(Ch,emo),e(Y,omo),e(Y,wh),e(wh,Vne),e(Vne,rmo),e(wh,tmo),e(wh,iI),e(iI,amo),e(wh,nmo),e(Y,smo),e(Y,Ah),e(Ah,Xne),e(Xne,lmo),e(Ah,imo),e(Ah,dI),e(dI,dmo),e(Ah,cmo),e(Y,fmo),e(Y,yh),e(yh,zne),e(zne,mmo),e(yh,gmo),e(yh,cI),e(cI,hmo),e(yh,pmo),e(Y,umo),e(Y,Lh),e(Lh,Wne),e(Wne,_mo),e(Lh,bmo),e(Lh,fI),e(fI,vmo),e(Lh,Fmo),e(Y,Tmo),e(Y,xh),e(xh,Qne),e(Qne,Mmo),e(xh,Emo),e(xh,mI),e(mI,Cmo),e(xh,wmo),e(Y,Amo),e(Y,$h),e($h,Hne),e(Hne,ymo),e($h,Lmo),e($h,gI),e(gI,xmo),e($h,$mo),e(Y,kmo),e(Y,kh),e(kh,Une),e(Une,Smo),e(kh,Rmo),e(kh,hI),e(hI,Pmo),e(kh,Bmo),e(Y,Imo),e(Y,Sh),e(Sh,Jne),e(Jne,Nmo),e(Sh,qmo),e(Sh,pI),e(pI,jmo),e(Sh,Dmo),e(Y,Gmo),e(Y,Rh),e(Rh,Yne),e(Yne,Omo),e(Rh,Vmo),e(Rh,uI),e(uI,Xmo),e(Rh,zmo),e(Y,Wmo),e(Y,Ph),e(Ph,Kne),e(Kne,Qmo),e(Ph,Hmo),e(Ph,_I),e(_I,Umo),e(Ph,Jmo),e(Y,Ymo),e(Y,Bh),e(Bh,Zne),e(Zne,Kmo),e(Bh,Zmo),e(Bh,bI),e(bI,ego),e(Bh,ogo),e(Y,rgo),e(Y,Ih),e(Ih,ese),e(ese,tgo),e(Ih,ago),e(Ih,vI),e(vI,ngo),e(Ih,sgo),e(Y,lgo),e(Y,Nh),e(Nh,ose),e(ose,igo),e(Nh,dgo),e(Nh,FI),e(FI,cgo),e(Nh,fgo),e(Y,mgo),e(Y,qh),e(qh,rse),e(rse,ggo),e(qh,hgo),e(qh,TI),e(TI,pgo),e(qh,ugo),e(He,_go),M(jh,He,null),e(He,bgo),M(Dh,He,null),e(Ao,vgo),e(Ao,Gh),M(YA,Gh,null),e(Gh,Fgo),e(Gh,tse),e(tse,Tgo),b(f,$qe,_),b(f,Ci,_),e(Ci,Oh),e(Oh,ase),M(KA,ase,null),e(Ci,Mgo),e(Ci,nse),e(nse,Ego),b(f,kqe,_),b(f,yo,_),M(ZA,yo,null),e(yo,Cgo),e(yo,ey),e(ey,wgo),e(ey,MI),e(MI,Ago),e(ey,ygo),e(yo,Lgo),e(yo,oy),e(oy,xgo),e(oy,sse),e(sse,$go),e(oy,kgo),e(yo,Sgo),e(yo,Ue),M(ry,Ue,null),e(Ue,Rgo),e(Ue,lse),e(lse,Pgo),e(Ue,Bgo),e(Ue,wi),e(wi,Igo),e(wi,ise),e(ise,Ngo),e(wi,qgo),e(wi,dse),e(dse,jgo),e(wi,Dgo),e(Ue,Ggo),e(Ue,he),e(he,Vh),e(Vh,cse),e(cse,Ogo),e(Vh,Vgo),e(Vh,EI),e(EI,Xgo),e(Vh,zgo),e(he,Wgo),e(he,Xh),e(Xh,fse),e(fse,Qgo),e(Xh,Hgo),e(Xh,mse),e(mse,Ugo),e(Xh,Jgo),e(he,Ygo),e(he,zh),e(zh,gse),e(gse,Kgo),e(zh,Zgo),e(zh,CI),e(CI,eho),e(zh,oho),e(he,rho),e(he,Wh),e(Wh,hse),e(hse,tho),e(Wh,aho),e(Wh,wI),e(wI,nho),e(Wh,sho),e(he,lho),e(he,Qh),e(Qh,pse),e(pse,iho),e(Qh,dho),e(Qh,AI),e(AI,cho),e(Qh,fho),e(he,mho),e(he,Hh),e(Hh,use),e(use,gho),e(Hh,hho),e(Hh,yI),e(yI,pho),e(Hh,uho),e(he,_ho),e(he,Uh),e(Uh,_se),e(_se,bho),e(Uh,vho),e(Uh,LI),e(LI,Fho),e(Uh,Tho),e(he,Mho),e(he,Jh),e(Jh,bse),e(bse,Eho),e(Jh,Cho),e(Jh,xI),e(xI,who),e(Jh,Aho),e(he,yho),e(he,Yh),e(Yh,vse),e(vse,Lho),e(Yh,xho),e(Yh,$I),e($I,$ho),e(Yh,kho),e(he,Sho),e(he,Kh),e(Kh,Fse),e(Fse,Rho),e(Kh,Pho),e(Kh,kI),e(kI,Bho),e(Kh,Iho),e(he,Nho),e(he,Zh),e(Zh,Tse),e(Tse,qho),e(Zh,jho),e(Zh,SI),e(SI,Dho),e(Zh,Gho),e(he,Oho),e(he,ep),e(ep,Mse),e(Mse,Vho),e(ep,Xho),e(ep,RI),e(RI,zho),e(ep,Who),e(he,Qho),e(he,op),e(op,Ese),e(Ese,Hho),e(op,Uho),e(op,PI),e(PI,Jho),e(op,Yho),e(he,Kho),e(he,rp),e(rp,Cse),e(Cse,Zho),e(rp,epo),e(rp,BI),e(BI,opo),e(rp,rpo),e(he,tpo),e(he,tp),e(tp,wse),e(wse,apo),e(tp,npo),e(tp,II),e(II,spo),e(tp,lpo),e(he,ipo),e(he,ap),e(ap,Ase),e(Ase,dpo),e(ap,cpo),e(ap,NI),e(NI,fpo),e(ap,mpo),e(he,gpo),e(he,np),e(np,yse),e(yse,hpo),e(np,ppo),e(np,qI),e(qI,upo),e(np,_po),e(he,bpo),e(he,sp),e(sp,Lse),e(Lse,vpo),e(sp,Fpo),e(sp,jI),e(jI,Tpo),e(sp,Mpo),e(Ue,Epo),M(lp,Ue,null),e(Ue,Cpo),M(ip,Ue,null),e(yo,wpo),e(yo,dp),M(ty,dp,null),e(dp,Apo),e(dp,xse),e(xse,ypo),b(f,Sqe,_),b(f,Ai,_),e(Ai,cp),e(cp,$se),M(ay,$se,null),e(Ai,Lpo),e(Ai,kse),e(kse,xpo),b(f,Rqe,_),b(f,Lo,_),M(ny,Lo,null),e(Lo,$po),e(Lo,yi),e(yi,kpo),e(yi,DI),e(DI,Spo),e(yi,Rpo),e(yi,GI),e(GI,Ppo),e(yi,Bpo),e(Lo,Ipo),e(Lo,sy),e(sy,Npo),e(sy,Sse),e(Sse,qpo),e(sy,jpo),e(Lo,Dpo),e(Lo,tt),M(ly,tt,null),e(tt,Gpo),e(tt,Rse),e(Rse,Opo),e(tt,Vpo),e(tt,Li),e(Li,Xpo),e(Li,Pse),e(Pse,zpo),e(Li,Wpo),e(Li,OI),e(OI,Qpo),e(Li,Hpo),e(tt,Upo),M(fp,tt,null),e(Lo,Jpo),e(Lo,Je),M(iy,Je,null),e(Je,Ypo),e(Je,Bse),e(Bse,Kpo),e(Je,Zpo),e(Je,La),e(La,euo),e(La,Ise),e(Ise,ouo),e(La,ruo),e(La,Nse),e(Nse,tuo),e(La,auo),e(La,qse),e(qse,nuo),e(La,suo),e(Je,luo),e(Je,x),e(x,mp),e(mp,jse),e(jse,iuo),e(mp,duo),e(mp,VI),e(VI,cuo),e(mp,fuo),e(x,muo),e(x,gp),e(gp,Dse),e(Dse,guo),e(gp,huo),e(gp,XI),e(XI,puo),e(gp,uuo),e(x,_uo),e(x,hp),e(hp,Gse),e(Gse,buo),e(hp,vuo),e(hp,zI),e(zI,Fuo),e(hp,Tuo),e(x,Muo),e(x,pp),e(pp,Ose),e(Ose,Euo),e(pp,Cuo),e(pp,WI),e(WI,wuo),e(pp,Auo),e(x,yuo),e(x,up),e(up,Vse),e(Vse,Luo),e(up,xuo),e(up,QI),e(QI,$uo),e(up,kuo),e(x,Suo),e(x,_p),e(_p,Xse),e(Xse,Ruo),e(_p,Puo),e(_p,HI),e(HI,Buo),e(_p,Iuo),e(x,Nuo),e(x,bp),e(bp,zse),e(zse,quo),e(bp,juo),e(bp,UI),e(UI,Duo),e(bp,Guo),e(x,Ouo),e(x,vp),e(vp,Wse),e(Wse,Vuo),e(vp,Xuo),e(vp,JI),e(JI,zuo),e(vp,Wuo),e(x,Quo),e(x,Fp),e(Fp,Qse),e(Qse,Huo),e(Fp,Uuo),e(Fp,YI),e(YI,Juo),e(Fp,Yuo),e(x,Kuo),e(x,Tp),e(Tp,Hse),e(Hse,Zuo),e(Tp,e_o),e(Tp,KI),e(KI,o_o),e(Tp,r_o),e(x,t_o),e(x,Mp),e(Mp,Use),e(Use,a_o),e(Mp,n_o),e(Mp,ZI),e(ZI,s_o),e(Mp,l_o),e(x,i_o),e(x,Ep),e(Ep,Jse),e(Jse,d_o),e(Ep,c_o),e(Ep,eN),e(eN,f_o),e(Ep,m_o),e(x,g_o),e(x,Cp),e(Cp,Yse),e(Yse,h_o),e(Cp,p_o),e(Cp,oN),e(oN,u_o),e(Cp,__o),e(x,b_o),e(x,wp),e(wp,Kse),e(Kse,v_o),e(wp,F_o),e(wp,rN),e(rN,T_o),e(wp,M_o),e(x,E_o),e(x,Ap),e(Ap,Zse),e(Zse,C_o),e(Ap,w_o),e(Ap,tN),e(tN,A_o),e(Ap,y_o),e(x,L_o),e(x,yp),e(yp,ele),e(ele,x_o),e(yp,$_o),e(yp,aN),e(aN,k_o),e(yp,S_o),e(x,R_o),e(x,Lp),e(Lp,ole),e(ole,P_o),e(Lp,B_o),e(Lp,nN),e(nN,I_o),e(Lp,N_o),e(x,q_o),e(x,xp),e(xp,rle),e(rle,j_o),e(xp,D_o),e(xp,sN),e(sN,G_o),e(xp,O_o),e(x,V_o),e(x,$p),e($p,tle),e(tle,X_o),e($p,z_o),e($p,lN),e(lN,W_o),e($p,Q_o),e(x,H_o),e(x,kp),e(kp,ale),e(ale,U_o),e(kp,J_o),e(kp,iN),e(iN,Y_o),e(kp,K_o),e(x,Z_o),e(x,Sp),e(Sp,nle),e(nle,e1o),e(Sp,o1o),e(Sp,dN),e(dN,r1o),e(Sp,t1o),e(x,a1o),e(x,Rp),e(Rp,sle),e(sle,n1o),e(Rp,s1o),e(Rp,cN),e(cN,l1o),e(Rp,i1o),e(x,d1o),e(x,Pp),e(Pp,lle),e(lle,c1o),e(Pp,f1o),e(Pp,fN),e(fN,m1o),e(Pp,g1o),e(x,h1o),e(x,Bp),e(Bp,ile),e(ile,p1o),e(Bp,u1o),e(Bp,mN),e(mN,_1o),e(Bp,b1o),e(x,v1o),e(x,Ip),e(Ip,dle),e(dle,F1o),e(Ip,T1o),e(Ip,gN),e(gN,M1o),e(Ip,E1o),e(x,C1o),e(x,Np),e(Np,cle),e(cle,w1o),e(Np,A1o),e(Np,hN),e(hN,y1o),e(Np,L1o),e(x,x1o),e(x,qp),e(qp,fle),e(fle,$1o),e(qp,k1o),e(qp,pN),e(pN,S1o),e(qp,R1o),e(x,P1o),e(x,jp),e(jp,mle),e(mle,B1o),e(jp,I1o),e(jp,uN),e(uN,N1o),e(jp,q1o),e(x,j1o),e(x,Dp),e(Dp,gle),e(gle,D1o),e(Dp,G1o),e(Dp,_N),e(_N,O1o),e(Dp,V1o),e(x,X1o),e(x,Gp),e(Gp,hle),e(hle,z1o),e(Gp,W1o),e(Gp,bN),e(bN,Q1o),e(Gp,H1o),e(x,U1o),e(x,Op),e(Op,ple),e(ple,J1o),e(Op,Y1o),e(Op,vN),e(vN,K1o),e(Op,Z1o),e(x,e3o),e(x,Vp),e(Vp,ule),e(ule,o3o),e(Vp,r3o),e(Vp,FN),e(FN,t3o),e(Vp,a3o),e(x,n3o),e(x,Bs),e(Bs,_le),e(_le,s3o),e(Bs,l3o),e(Bs,TN),e(TN,i3o),e(Bs,d3o),e(Bs,MN),e(MN,c3o),e(Bs,f3o),e(x,m3o),e(x,Xp),e(Xp,ble),e(ble,g3o),e(Xp,h3o),e(Xp,EN),e(EN,p3o),e(Xp,u3o),e(x,_3o),e(x,zp),e(zp,vle),e(vle,b3o),e(zp,v3o),e(zp,CN),e(CN,F3o),e(zp,T3o),e(x,M3o),e(x,Wp),e(Wp,Fle),e(Fle,E3o),e(Wp,C3o),e(Wp,wN),e(wN,w3o),e(Wp,A3o),e(x,y3o),e(x,Qp),e(Qp,Tle),e(Tle,L3o),e(Qp,x3o),e(Qp,AN),e(AN,$3o),e(Qp,k3o),e(x,S3o),e(x,Hp),e(Hp,Mle),e(Mle,R3o),e(Hp,P3o),e(Hp,yN),e(yN,B3o),e(Hp,I3o),e(x,N3o),e(x,Up),e(Up,Ele),e(Ele,q3o),e(Up,j3o),e(Up,LN),e(LN,D3o),e(Up,G3o),e(x,O3o),e(x,Jp),e(Jp,Cle),e(Cle,V3o),e(Jp,X3o),e(Jp,xN),e(xN,z3o),e(Jp,W3o),e(x,Q3o),e(x,Yp),e(Yp,wle),e(wle,H3o),e(Yp,U3o),e(Yp,$N),e($N,J3o),e(Yp,Y3o),e(x,K3o),e(x,Kp),e(Kp,Ale),e(Ale,Z3o),e(Kp,ebo),e(Kp,kN),e(kN,obo),e(Kp,rbo),e(x,tbo),e(x,Zp),e(Zp,yle),e(yle,abo),e(Zp,nbo),e(Zp,SN),e(SN,sbo),e(Zp,lbo),e(x,ibo),e(x,eu),e(eu,Lle),e(Lle,dbo),e(eu,cbo),e(eu,RN),e(RN,fbo),e(eu,mbo),e(x,gbo),e(x,ou),e(ou,xle),e(xle,hbo),e(ou,pbo),e(ou,PN),e(PN,ubo),e(ou,_bo),e(x,bbo),e(x,ru),e(ru,$le),e($le,vbo),e(ru,Fbo),e(ru,BN),e(BN,Tbo),e(ru,Mbo),e(x,Ebo),e(x,tu),e(tu,kle),e(kle,Cbo),e(tu,wbo),e(tu,IN),e(IN,Abo),e(tu,ybo),e(x,Lbo),e(x,au),e(au,Sle),e(Sle,xbo),e(au,$bo),e(au,NN),e(NN,kbo),e(au,Sbo),e(x,Rbo),e(x,nu),e(nu,Rle),e(Rle,Pbo),e(nu,Bbo),e(nu,qN),e(qN,Ibo),e(nu,Nbo),e(x,qbo),e(x,su),e(su,Ple),e(Ple,jbo),e(su,Dbo),e(su,jN),e(jN,Gbo),e(su,Obo),e(x,Vbo),e(x,lu),e(lu,Ble),e(Ble,Xbo),e(lu,zbo),e(lu,DN),e(DN,Wbo),e(lu,Qbo),e(x,Hbo),e(x,iu),e(iu,Ile),e(Ile,Ubo),e(iu,Jbo),e(iu,GN),e(GN,Ybo),e(iu,Kbo),e(x,Zbo),e(x,du),e(du,Nle),e(Nle,e2o),e(du,o2o),e(du,ON),e(ON,r2o),e(du,t2o),e(x,a2o),e(x,cu),e(cu,qle),e(qle,n2o),e(cu,s2o),e(cu,VN),e(VN,l2o),e(cu,i2o),e(x,d2o),e(x,fu),e(fu,jle),e(jle,c2o),e(fu,f2o),e(fu,XN),e(XN,m2o),e(fu,g2o),e(x,h2o),e(x,mu),e(mu,Dle),e(Dle,p2o),e(mu,u2o),e(mu,zN),e(zN,_2o),e(mu,b2o),e(x,v2o),e(x,gu),e(gu,Gle),e(Gle,F2o),e(gu,T2o),e(gu,WN),e(WN,M2o),e(gu,E2o),e(x,C2o),e(x,hu),e(hu,Ole),e(Ole,w2o),e(hu,A2o),e(hu,QN),e(QN,y2o),e(hu,L2o),e(x,x2o),e(x,pu),e(pu,Vle),e(Vle,$2o),e(pu,k2o),e(pu,HN),e(HN,S2o),e(pu,R2o),e(x,P2o),e(x,uu),e(uu,Xle),e(Xle,B2o),e(uu,I2o),e(uu,UN),e(UN,N2o),e(uu,q2o),e(x,j2o),e(x,_u),e(_u,zle),e(zle,D2o),e(_u,G2o),e(_u,JN),e(JN,O2o),e(_u,V2o),e(x,X2o),e(x,bu),e(bu,Wle),e(Wle,z2o),e(bu,W2o),e(bu,YN),e(YN,Q2o),e(bu,H2o),e(x,U2o),e(x,vu),e(vu,Qle),e(Qle,J2o),e(vu,Y2o),e(vu,KN),e(KN,K2o),e(vu,Z2o),e(x,evo),e(x,Fu),e(Fu,Hle),e(Hle,ovo),e(Fu,rvo),e(Fu,ZN),e(ZN,tvo),e(Fu,avo),e(x,nvo),e(x,Tu),e(Tu,Ule),e(Ule,svo),e(Tu,lvo),e(Tu,eq),e(eq,ivo),e(Tu,dvo),e(x,cvo),e(x,Mu),e(Mu,Jle),e(Jle,fvo),e(Mu,mvo),e(Mu,oq),e(oq,gvo),e(Mu,hvo),e(x,pvo),e(x,Eu),e(Eu,Yle),e(Yle,uvo),e(Eu,_vo),e(Eu,rq),e(rq,bvo),e(Eu,vvo),e(x,Fvo),e(x,Cu),e(Cu,Kle),e(Kle,Tvo),e(Cu,Mvo),e(Cu,tq),e(tq,Evo),e(Cu,Cvo),e(x,wvo),e(x,wu),e(wu,Zle),e(Zle,Avo),e(wu,yvo),e(wu,aq),e(aq,Lvo),e(wu,xvo),e(x,$vo),e(x,Au),e(Au,eie),e(eie,kvo),e(Au,Svo),e(Au,nq),e(nq,Rvo),e(Au,Pvo),e(x,Bvo),e(x,yu),e(yu,oie),e(oie,Ivo),e(yu,Nvo),e(yu,sq),e(sq,qvo),e(yu,jvo),e(x,Dvo),e(x,Lu),e(Lu,rie),e(rie,Gvo),e(Lu,Ovo),e(Lu,lq),e(lq,Vvo),e(Lu,Xvo),e(x,zvo),e(x,xu),e(xu,tie),e(tie,Wvo),e(xu,Qvo),e(xu,iq),e(iq,Hvo),e(xu,Uvo),e(x,Jvo),e(x,$u),e($u,aie),e(aie,Yvo),e($u,Kvo),e($u,dq),e(dq,Zvo),e($u,eFo),e(x,oFo),e(x,ku),e(ku,nie),e(nie,rFo),e(ku,tFo),e(ku,cq),e(cq,aFo),e(ku,nFo),e(x,sFo),e(x,Su),e(Su,sie),e(sie,lFo),e(Su,iFo),e(Su,fq),e(fq,dFo),e(Su,cFo),e(x,fFo),e(x,Ru),e(Ru,lie),e(lie,mFo),e(Ru,gFo),e(Ru,mq),e(mq,hFo),e(Ru,pFo),e(x,uFo),e(x,Pu),e(Pu,iie),e(iie,_Fo),e(Pu,bFo),e(Pu,gq),e(gq,vFo),e(Pu,FFo),e(x,TFo),e(x,Bu),e(Bu,die),e(die,MFo),e(Bu,EFo),e(Bu,hq),e(hq,CFo),e(Bu,wFo),e(x,AFo),e(x,Iu),e(Iu,cie),e(cie,yFo),e(Iu,LFo),e(Iu,pq),e(pq,xFo),e(Iu,$Fo),e(x,kFo),e(x,Nu),e(Nu,fie),e(fie,SFo),e(Nu,RFo),e(Nu,uq),e(uq,PFo),e(Nu,BFo),e(x,IFo),e(x,qu),e(qu,mie),e(mie,NFo),e(qu,qFo),e(qu,_q),e(_q,jFo),e(qu,DFo),e(x,GFo),e(x,ju),e(ju,gie),e(gie,OFo),e(ju,VFo),e(ju,bq),e(bq,XFo),e(ju,zFo),e(x,WFo),e(x,Du),e(Du,hie),e(hie,QFo),e(Du,HFo),e(Du,vq),e(vq,UFo),e(Du,JFo),e(x,YFo),e(x,Gu),e(Gu,pie),e(pie,KFo),e(Gu,ZFo),e(Gu,Fq),e(Fq,eTo),e(Gu,oTo),e(x,rTo),e(x,Ou),e(Ou,uie),e(uie,tTo),e(Ou,aTo),e(Ou,Tq),e(Tq,nTo),e(Ou,sTo),e(x,lTo),e(x,Vu),e(Vu,_ie),e(_ie,iTo),e(Vu,dTo),e(Vu,Mq),e(Mq,cTo),e(Vu,fTo),e(x,mTo),e(x,Xu),e(Xu,bie),e(bie,gTo),e(Xu,hTo),e(Xu,Eq),e(Eq,pTo),e(Xu,uTo),e(x,_To),e(x,zu),e(zu,vie),e(vie,bTo),e(zu,vTo),e(zu,Cq),e(Cq,FTo),e(zu,TTo),e(x,MTo),e(x,Wu),e(Wu,Fie),e(Fie,ETo),e(Wu,CTo),e(Wu,wq),e(wq,wTo),e(Wu,ATo),e(x,yTo),e(x,Qu),e(Qu,Tie),e(Tie,LTo),e(Qu,xTo),e(Qu,Aq),e(Aq,$To),e(Qu,kTo),e(x,STo),e(x,Hu),e(Hu,Mie),e(Mie,RTo),e(Hu,PTo),e(Hu,yq),e(yq,BTo),e(Hu,ITo),e(x,NTo),e(x,Uu),e(Uu,Eie),e(Eie,qTo),e(Uu,jTo),e(Uu,Lq),e(Lq,DTo),e(Uu,GTo),e(x,OTo),e(x,Ju),e(Ju,Cie),e(Cie,VTo),e(Ju,XTo),e(Ju,xq),e(xq,zTo),e(Ju,WTo),e(x,QTo),e(x,Yu),e(Yu,wie),e(wie,HTo),e(Yu,UTo),e(Yu,$q),e($q,JTo),e(Yu,YTo),e(x,KTo),e(x,Ku),e(Ku,Aie),e(Aie,ZTo),e(Ku,e7o),e(Ku,kq),e(kq,o7o),e(Ku,r7o),e(x,t7o),e(x,Zu),e(Zu,yie),e(yie,a7o),e(Zu,n7o),e(Zu,Sq),e(Sq,s7o),e(Zu,l7o),e(x,i7o),e(x,e_),e(e_,Lie),e(Lie,d7o),e(e_,c7o),e(e_,Rq),e(Rq,f7o),e(e_,m7o),e(x,g7o),e(x,o_),e(o_,xie),e(xie,h7o),e(o_,p7o),e(o_,Pq),e(Pq,u7o),e(o_,_7o),e(x,b7o),e(x,r_),e(r_,$ie),e($ie,v7o),e(r_,F7o),e(r_,Bq),e(Bq,T7o),e(r_,M7o),e(x,E7o),e(x,t_),e(t_,kie),e(kie,C7o),e(t_,w7o),e(t_,Iq),e(Iq,A7o),e(t_,y7o),e(x,L7o),e(x,a_),e(a_,Sie),e(Sie,x7o),e(a_,$7o),e(a_,Nq),e(Nq,k7o),e(a_,S7o),e(x,R7o),e(x,n_),e(n_,Rie),e(Rie,P7o),e(n_,B7o),e(n_,qq),e(qq,I7o),e(n_,N7o),e(Je,q7o),e(Je,s_),e(s_,j7o),e(s_,Pie),e(Pie,D7o),e(s_,G7o),e(s_,Bie),e(Bie,O7o),e(Je,V7o),M(l_,Je,null),b(f,Pqe,_),b(f,xi,_),e(xi,i_),e(i_,Iie),M(dy,Iie,null),e(xi,X7o),e(xi,Nie),e(Nie,z7o),b(f,Bqe,_),b(f,xo,_),M(cy,xo,null),e(xo,W7o),e(xo,$i),e($i,Q7o),e($i,jq),e(jq,H7o),e($i,U7o),e($i,Dq),e(Dq,J7o),e($i,Y7o),e(xo,K7o),e(xo,fy),e(fy,Z7o),e(fy,qie),e(qie,eMo),e(fy,oMo),e(xo,rMo),e(xo,at),M(my,at,null),e(at,tMo),e(at,jie),e(jie,aMo),e(at,nMo),e(at,ki),e(ki,sMo),e(ki,Die),e(Die,lMo),e(ki,iMo),e(ki,Gq),e(Gq,dMo),e(ki,cMo),e(at,fMo),M(d_,at,null),e(xo,mMo),e(xo,Ye),M(gy,Ye,null),e(Ye,gMo),e(Ye,Gie),e(Gie,hMo),e(Ye,pMo),e(Ye,xa),e(xa,uMo),e(xa,Oie),e(Oie,_Mo),e(xa,bMo),e(xa,Vie),e(Vie,vMo),e(xa,FMo),e(xa,Xie),e(Xie,TMo),e(xa,MMo),e(Ye,EMo),e(Ye,G),e(G,c_),e(c_,zie),e(zie,CMo),e(c_,wMo),e(c_,Oq),e(Oq,AMo),e(c_,yMo),e(G,LMo),e(G,f_),e(f_,Wie),e(Wie,xMo),e(f_,$Mo),e(f_,Vq),e(Vq,kMo),e(f_,SMo),e(G,RMo),e(G,m_),e(m_,Qie),e(Qie,PMo),e(m_,BMo),e(m_,Xq),e(Xq,IMo),e(m_,NMo),e(G,qMo),e(G,g_),e(g_,Hie),e(Hie,jMo),e(g_,DMo),e(g_,zq),e(zq,GMo),e(g_,OMo),e(G,VMo),e(G,h_),e(h_,Uie),e(Uie,XMo),e(h_,zMo),e(h_,Wq),e(Wq,WMo),e(h_,QMo),e(G,HMo),e(G,p_),e(p_,Jie),e(Jie,UMo),e(p_,JMo),e(p_,Qq),e(Qq,YMo),e(p_,KMo),e(G,ZMo),e(G,u_),e(u_,Yie),e(Yie,e4o),e(u_,o4o),e(u_,Hq),e(Hq,r4o),e(u_,t4o),e(G,a4o),e(G,__),e(__,Kie),e(Kie,n4o),e(__,s4o),e(__,Uq),e(Uq,l4o),e(__,i4o),e(G,d4o),e(G,b_),e(b_,Zie),e(Zie,c4o),e(b_,f4o),e(b_,Jq),e(Jq,m4o),e(b_,g4o),e(G,h4o),e(G,v_),e(v_,ede),e(ede,p4o),e(v_,u4o),e(v_,Yq),e(Yq,_4o),e(v_,b4o),e(G,v4o),e(G,F_),e(F_,ode),e(ode,F4o),e(F_,T4o),e(F_,Kq),e(Kq,M4o),e(F_,E4o),e(G,C4o),e(G,T_),e(T_,rde),e(rde,w4o),e(T_,A4o),e(T_,Zq),e(Zq,y4o),e(T_,L4o),e(G,x4o),e(G,M_),e(M_,tde),e(tde,$4o),e(M_,k4o),e(M_,ej),e(ej,S4o),e(M_,R4o),e(G,P4o),e(G,E_),e(E_,ade),e(ade,B4o),e(E_,I4o),e(E_,oj),e(oj,N4o),e(E_,q4o),e(G,j4o),e(G,C_),e(C_,nde),e(nde,D4o),e(C_,G4o),e(C_,rj),e(rj,O4o),e(C_,V4o),e(G,X4o),e(G,w_),e(w_,sde),e(sde,z4o),e(w_,W4o),e(w_,tj),e(tj,Q4o),e(w_,H4o),e(G,U4o),e(G,A_),e(A_,lde),e(lde,J4o),e(A_,Y4o),e(A_,aj),e(aj,K4o),e(A_,Z4o),e(G,eEo),e(G,y_),e(y_,ide),e(ide,oEo),e(y_,rEo),e(y_,nj),e(nj,tEo),e(y_,aEo),e(G,nEo),e(G,L_),e(L_,dde),e(dde,sEo),e(L_,lEo),e(L_,sj),e(sj,iEo),e(L_,dEo),e(G,cEo),e(G,x_),e(x_,cde),e(cde,fEo),e(x_,mEo),e(x_,lj),e(lj,gEo),e(x_,hEo),e(G,pEo),e(G,$_),e($_,fde),e(fde,uEo),e($_,_Eo),e($_,ij),e(ij,bEo),e($_,vEo),e(G,FEo),e(G,k_),e(k_,mde),e(mde,TEo),e(k_,MEo),e(k_,dj),e(dj,EEo),e(k_,CEo),e(G,wEo),e(G,S_),e(S_,gde),e(gde,AEo),e(S_,yEo),e(S_,cj),e(cj,LEo),e(S_,xEo),e(G,$Eo),e(G,R_),e(R_,hde),e(hde,kEo),e(R_,SEo),e(R_,fj),e(fj,REo),e(R_,PEo),e(G,BEo),e(G,P_),e(P_,pde),e(pde,IEo),e(P_,NEo),e(P_,mj),e(mj,qEo),e(P_,jEo),e(G,DEo),e(G,B_),e(B_,ude),e(ude,GEo),e(B_,OEo),e(B_,gj),e(gj,VEo),e(B_,XEo),e(G,zEo),e(G,I_),e(I_,_de),e(_de,WEo),e(I_,QEo),e(I_,hj),e(hj,HEo),e(I_,UEo),e(G,JEo),e(G,N_),e(N_,bde),e(bde,YEo),e(N_,KEo),e(N_,pj),e(pj,ZEo),e(N_,eCo),e(G,oCo),e(G,q_),e(q_,vde),e(vde,rCo),e(q_,tCo),e(q_,uj),e(uj,aCo),e(q_,nCo),e(G,sCo),e(G,j_),e(j_,Fde),e(Fde,lCo),e(j_,iCo),e(j_,_j),e(_j,dCo),e(j_,cCo),e(G,fCo),e(G,D_),e(D_,Tde),e(Tde,mCo),e(D_,gCo),e(D_,bj),e(bj,hCo),e(D_,pCo),e(G,uCo),e(G,G_),e(G_,Mde),e(Mde,_Co),e(G_,bCo),e(G_,vj),e(vj,vCo),e(G_,FCo),e(G,TCo),e(G,O_),e(O_,Ede),e(Ede,MCo),e(O_,ECo),e(O_,Fj),e(Fj,CCo),e(O_,wCo),e(G,ACo),e(G,V_),e(V_,Cde),e(Cde,yCo),e(V_,LCo),e(V_,Tj),e(Tj,xCo),e(V_,$Co),e(G,kCo),e(G,X_),e(X_,wde),e(wde,SCo),e(X_,RCo),e(X_,Mj),e(Mj,PCo),e(X_,BCo),e(G,ICo),e(G,z_),e(z_,Ade),e(Ade,NCo),e(z_,qCo),e(z_,Ej),e(Ej,jCo),e(z_,DCo),e(G,GCo),e(G,W_),e(W_,yde),e(yde,OCo),e(W_,VCo),e(W_,Cj),e(Cj,XCo),e(W_,zCo),e(G,WCo),e(G,Q_),e(Q_,Lde),e(Lde,QCo),e(Q_,HCo),e(Q_,wj),e(wj,UCo),e(Q_,JCo),e(G,YCo),e(G,H_),e(H_,xde),e(xde,KCo),e(H_,ZCo),e(H_,Aj),e(Aj,e5o),e(H_,o5o),e(G,r5o),e(G,U_),e(U_,$de),e($de,t5o),e(U_,a5o),e(U_,yj),e(yj,n5o),e(U_,s5o),e(G,l5o),e(G,J_),e(J_,kde),e(kde,i5o),e(J_,d5o),e(J_,Lj),e(Lj,c5o),e(J_,f5o),e(G,m5o),e(G,Y_),e(Y_,Sde),e(Sde,g5o),e(Y_,h5o),e(Y_,xj),e(xj,p5o),e(Y_,u5o),e(Ye,_5o),e(Ye,K_),e(K_,b5o),e(K_,Rde),e(Rde,v5o),e(K_,F5o),e(K_,Pde),e(Pde,T5o),e(Ye,M5o),M(Z_,Ye,null),b(f,Iqe,_),b(f,Si,_),e(Si,e1),e(e1,Bde),M(hy,Bde,null),e(Si,E5o),e(Si,Ide),e(Ide,C5o),b(f,Nqe,_),b(f,$o,_),M(py,$o,null),e($o,w5o),e($o,Ri),e(Ri,A5o),e(Ri,$j),e($j,y5o),e(Ri,L5o),e(Ri,kj),e(kj,x5o),e(Ri,$5o),e($o,k5o),e($o,uy),e(uy,S5o),e(uy,Nde),e(Nde,R5o),e(uy,P5o),e($o,B5o),e($o,nt),M(_y,nt,null),e(nt,I5o),e(nt,qde),e(qde,N5o),e(nt,q5o),e(nt,Pi),e(Pi,j5o),e(Pi,jde),e(jde,D5o),e(Pi,G5o),e(Pi,Sj),e(Sj,O5o),e(Pi,V5o),e(nt,X5o),M(o1,nt,null),e($o,z5o),e($o,Ke),M(by,Ke,null),e(Ke,W5o),e(Ke,Dde),e(Dde,Q5o),e(Ke,H5o),e(Ke,$a),e($a,U5o),e($a,Gde),e(Gde,J5o),e($a,Y5o),e($a,Ode),e(Ode,K5o),e($a,Z5o),e($a,Vde),e(Vde,ewo),e($a,owo),e(Ke,rwo),e(Ke,z),e(z,r1),e(r1,Xde),e(Xde,two),e(r1,awo),e(r1,Rj),e(Rj,nwo),e(r1,swo),e(z,lwo),e(z,t1),e(t1,zde),e(zde,iwo),e(t1,dwo),e(t1,Pj),e(Pj,cwo),e(t1,fwo),e(z,mwo),e(z,a1),e(a1,Wde),e(Wde,gwo),e(a1,hwo),e(a1,Bj),e(Bj,pwo),e(a1,uwo),e(z,_wo),e(z,n1),e(n1,Qde),e(Qde,bwo),e(n1,vwo),e(n1,Ij),e(Ij,Fwo),e(n1,Two),e(z,Mwo),e(z,s1),e(s1,Hde),e(Hde,Ewo),e(s1,Cwo),e(s1,Nj),e(Nj,wwo),e(s1,Awo),e(z,ywo),e(z,l1),e(l1,Ude),e(Ude,Lwo),e(l1,xwo),e(l1,qj),e(qj,$wo),e(l1,kwo),e(z,Swo),e(z,i1),e(i1,Jde),e(Jde,Rwo),e(i1,Pwo),e(i1,jj),e(jj,Bwo),e(i1,Iwo),e(z,Nwo),e(z,d1),e(d1,Yde),e(Yde,qwo),e(d1,jwo),e(d1,Dj),e(Dj,Dwo),e(d1,Gwo),e(z,Owo),e(z,c1),e(c1,Kde),e(Kde,Vwo),e(c1,Xwo),e(c1,Gj),e(Gj,zwo),e(c1,Wwo),e(z,Qwo),e(z,f1),e(f1,Zde),e(Zde,Hwo),e(f1,Uwo),e(f1,Oj),e(Oj,Jwo),e(f1,Ywo),e(z,Kwo),e(z,m1),e(m1,ece),e(ece,Zwo),e(m1,e0o),e(m1,Vj),e(Vj,o0o),e(m1,r0o),e(z,t0o),e(z,g1),e(g1,oce),e(oce,a0o),e(g1,n0o),e(g1,Xj),e(Xj,s0o),e(g1,l0o),e(z,i0o),e(z,h1),e(h1,rce),e(rce,d0o),e(h1,c0o),e(h1,zj),e(zj,f0o),e(h1,m0o),e(z,g0o),e(z,p1),e(p1,tce),e(tce,h0o),e(p1,p0o),e(p1,Wj),e(Wj,u0o),e(p1,_0o),e(z,b0o),e(z,u1),e(u1,ace),e(ace,v0o),e(u1,F0o),e(u1,Qj),e(Qj,T0o),e(u1,M0o),e(z,E0o),e(z,_1),e(_1,nce),e(nce,C0o),e(_1,w0o),e(_1,Hj),e(Hj,A0o),e(_1,y0o),e(z,L0o),e(z,b1),e(b1,sce),e(sce,x0o),e(b1,$0o),e(b1,Uj),e(Uj,k0o),e(b1,S0o),e(z,R0o),e(z,v1),e(v1,lce),e(lce,P0o),e(v1,B0o),e(v1,Jj),e(Jj,I0o),e(v1,N0o),e(z,q0o),e(z,F1),e(F1,ice),e(ice,j0o),e(F1,D0o),e(F1,Yj),e(Yj,G0o),e(F1,O0o),e(z,V0o),e(z,T1),e(T1,dce),e(dce,X0o),e(T1,z0o),e(T1,Kj),e(Kj,W0o),e(T1,Q0o),e(z,H0o),e(z,M1),e(M1,cce),e(cce,U0o),e(M1,J0o),e(M1,Zj),e(Zj,Y0o),e(M1,K0o),e(z,Z0o),e(z,E1),e(E1,fce),e(fce,e6o),e(E1,o6o),e(E1,eD),e(eD,r6o),e(E1,t6o),e(z,a6o),e(z,C1),e(C1,mce),e(mce,n6o),e(C1,s6o),e(C1,oD),e(oD,l6o),e(C1,i6o),e(z,d6o),e(z,w1),e(w1,gce),e(gce,c6o),e(w1,f6o),e(w1,rD),e(rD,m6o),e(w1,g6o),e(z,h6o),e(z,A1),e(A1,hce),e(hce,p6o),e(A1,u6o),e(A1,tD),e(tD,_6o),e(A1,b6o),e(z,v6o),e(z,y1),e(y1,pce),e(pce,F6o),e(y1,T6o),e(y1,aD),e(aD,M6o),e(y1,E6o),e(z,C6o),e(z,L1),e(L1,uce),e(uce,w6o),e(L1,A6o),e(L1,nD),e(nD,y6o),e(L1,L6o),e(z,x6o),e(z,x1),e(x1,_ce),e(_ce,$6o),e(x1,k6o),e(x1,sD),e(sD,S6o),e(x1,R6o),e(z,P6o),e(z,$1),e($1,bce),e(bce,B6o),e($1,I6o),e($1,lD),e(lD,N6o),e($1,q6o),e(z,j6o),e(z,k1),e(k1,vce),e(vce,D6o),e(k1,G6o),e(k1,iD),e(iD,O6o),e(k1,V6o),e(z,X6o),e(z,S1),e(S1,Fce),e(Fce,z6o),e(S1,W6o),e(S1,dD),e(dD,Q6o),e(S1,H6o),e(z,U6o),e(z,R1),e(R1,Tce),e(Tce,J6o),e(R1,Y6o),e(R1,cD),e(cD,K6o),e(R1,Z6o),e(z,eAo),e(z,P1),e(P1,Mce),e(Mce,oAo),e(P1,rAo),e(P1,fD),e(fD,tAo),e(P1,aAo),e(z,nAo),e(z,B1),e(B1,Ece),e(Ece,sAo),e(B1,lAo),e(B1,mD),e(mD,iAo),e(B1,dAo),e(z,cAo),e(z,I1),e(I1,Cce),e(Cce,fAo),e(I1,mAo),e(I1,gD),e(gD,gAo),e(I1,hAo),e(z,pAo),e(z,N1),e(N1,wce),e(wce,uAo),e(N1,_Ao),e(N1,hD),e(hD,bAo),e(N1,vAo),e(z,FAo),e(z,q1),e(q1,Ace),e(Ace,TAo),e(q1,MAo),e(q1,pD),e(pD,EAo),e(q1,CAo),e(Ke,wAo),e(Ke,j1),e(j1,AAo),e(j1,yce),e(yce,yAo),e(j1,LAo),e(j1,Lce),e(Lce,xAo),e(Ke,$Ao),M(D1,Ke,null),b(f,qqe,_),b(f,Bi,_),e(Bi,G1),e(G1,xce),M(vy,xce,null),e(Bi,kAo),e(Bi,$ce),e($ce,SAo),b(f,jqe,_),b(f,ko,_),M(Fy,ko,null),e(ko,RAo),e(ko,Ii),e(Ii,PAo),e(Ii,uD),e(uD,BAo),e(Ii,IAo),e(Ii,_D),e(_D,NAo),e(Ii,qAo),e(ko,jAo),e(ko,Ty),e(Ty,DAo),e(Ty,kce),e(kce,GAo),e(Ty,OAo),e(ko,VAo),e(ko,st),M(My,st,null),e(st,XAo),e(st,Sce),e(Sce,zAo),e(st,WAo),e(st,Ni),e(Ni,QAo),e(Ni,Rce),e(Rce,HAo),e(Ni,UAo),e(Ni,bD),e(bD,JAo),e(Ni,YAo),e(st,KAo),M(O1,st,null),e(ko,ZAo),e(ko,Ze),M(Ey,Ze,null),e(Ze,eyo),e(Ze,Pce),e(Pce,oyo),e(Ze,ryo),e(Ze,ka),e(ka,tyo),e(ka,Bce),e(Bce,ayo),e(ka,nyo),e(ka,Ice),e(Ice,syo),e(ka,lyo),e(ka,Nce),e(Nce,iyo),e(ka,dyo),e(Ze,cyo),e(Ze,Q),e(Q,V1),e(V1,qce),e(qce,fyo),e(V1,myo),e(V1,vD),e(vD,gyo),e(V1,hyo),e(Q,pyo),e(Q,X1),e(X1,jce),e(jce,uyo),e(X1,_yo),e(X1,FD),e(FD,byo),e(X1,vyo),e(Q,Fyo),e(Q,z1),e(z1,Dce),e(Dce,Tyo),e(z1,Myo),e(z1,TD),e(TD,Eyo),e(z1,Cyo),e(Q,wyo),e(Q,W1),e(W1,Gce),e(Gce,Ayo),e(W1,yyo),e(W1,MD),e(MD,Lyo),e(W1,xyo),e(Q,$yo),e(Q,Q1),e(Q1,Oce),e(Oce,kyo),e(Q1,Syo),e(Q1,ED),e(ED,Ryo),e(Q1,Pyo),e(Q,Byo),e(Q,H1),e(H1,Vce),e(Vce,Iyo),e(H1,Nyo),e(H1,CD),e(CD,qyo),e(H1,jyo),e(Q,Dyo),e(Q,U1),e(U1,Xce),e(Xce,Gyo),e(U1,Oyo),e(U1,wD),e(wD,Vyo),e(U1,Xyo),e(Q,zyo),e(Q,J1),e(J1,zce),e(zce,Wyo),e(J1,Qyo),e(J1,AD),e(AD,Hyo),e(J1,Uyo),e(Q,Jyo),e(Q,Y1),e(Y1,Wce),e(Wce,Yyo),e(Y1,Kyo),e(Y1,yD),e(yD,Zyo),e(Y1,eLo),e(Q,oLo),e(Q,K1),e(K1,Qce),e(Qce,rLo),e(K1,tLo),e(K1,LD),e(LD,aLo),e(K1,nLo),e(Q,sLo),e(Q,Z1),e(Z1,Hce),e(Hce,lLo),e(Z1,iLo),e(Z1,xD),e(xD,dLo),e(Z1,cLo),e(Q,fLo),e(Q,e3),e(e3,Uce),e(Uce,mLo),e(e3,gLo),e(e3,$D),e($D,hLo),e(e3,pLo),e(Q,uLo),e(Q,o3),e(o3,Jce),e(Jce,_Lo),e(o3,bLo),e(o3,kD),e(kD,vLo),e(o3,FLo),e(Q,TLo),e(Q,r3),e(r3,Yce),e(Yce,MLo),e(r3,ELo),e(r3,SD),e(SD,CLo),e(r3,wLo),e(Q,ALo),e(Q,t3),e(t3,Kce),e(Kce,yLo),e(t3,LLo),e(t3,RD),e(RD,xLo),e(t3,$Lo),e(Q,kLo),e(Q,a3),e(a3,Zce),e(Zce,SLo),e(a3,RLo),e(a3,PD),e(PD,PLo),e(a3,BLo),e(Q,ILo),e(Q,n3),e(n3,efe),e(efe,NLo),e(n3,qLo),e(n3,BD),e(BD,jLo),e(n3,DLo),e(Q,GLo),e(Q,s3),e(s3,ofe),e(ofe,OLo),e(s3,VLo),e(s3,ID),e(ID,XLo),e(s3,zLo),e(Q,WLo),e(Q,l3),e(l3,rfe),e(rfe,QLo),e(l3,HLo),e(l3,ND),e(ND,ULo),e(l3,JLo),e(Q,YLo),e(Q,i3),e(i3,tfe),e(tfe,KLo),e(i3,ZLo),e(i3,qD),e(qD,e8o),e(i3,o8o),e(Q,r8o),e(Q,d3),e(d3,afe),e(afe,t8o),e(d3,a8o),e(d3,jD),e(jD,n8o),e(d3,s8o),e(Q,l8o),e(Q,c3),e(c3,nfe),e(nfe,i8o),e(c3,d8o),e(c3,DD),e(DD,c8o),e(c3,f8o),e(Q,m8o),e(Q,f3),e(f3,sfe),e(sfe,g8o),e(f3,h8o),e(f3,GD),e(GD,p8o),e(f3,u8o),e(Q,_8o),e(Q,m3),e(m3,lfe),e(lfe,b8o),e(m3,v8o),e(m3,OD),e(OD,F8o),e(m3,T8o),e(Q,M8o),e(Q,g3),e(g3,ife),e(ife,E8o),e(g3,C8o),e(g3,VD),e(VD,w8o),e(g3,A8o),e(Q,y8o),e(Q,h3),e(h3,dfe),e(dfe,L8o),e(h3,x8o),e(h3,XD),e(XD,$8o),e(h3,k8o),e(Q,S8o),e(Q,p3),e(p3,cfe),e(cfe,R8o),e(p3,P8o),e(p3,zD),e(zD,B8o),e(p3,I8o),e(Q,N8o),e(Q,u3),e(u3,ffe),e(ffe,q8o),e(u3,j8o),e(u3,WD),e(WD,D8o),e(u3,G8o),e(Q,O8o),e(Q,_3),e(_3,mfe),e(mfe,V8o),e(_3,X8o),e(_3,QD),e(QD,z8o),e(_3,W8o),e(Q,Q8o),e(Q,b3),e(b3,gfe),e(gfe,H8o),e(b3,U8o),e(b3,HD),e(HD,J8o),e(b3,Y8o),e(Q,K8o),e(Q,v3),e(v3,hfe),e(hfe,Z8o),e(v3,e9o),e(v3,pfe),e(pfe,o9o),e(v3,r9o),e(Q,t9o),e(Q,F3),e(F3,ufe),e(ufe,a9o),e(F3,n9o),e(F3,UD),e(UD,s9o),e(F3,l9o),e(Q,i9o),e(Q,T3),e(T3,_fe),e(_fe,d9o),e(T3,c9o),e(T3,JD),e(JD,f9o),e(T3,m9o),e(Q,g9o),e(Q,M3),e(M3,bfe),e(bfe,h9o),e(M3,p9o),e(M3,YD),e(YD,u9o),e(M3,_9o),e(Q,b9o),e(Q,E3),e(E3,vfe),e(vfe,v9o),e(E3,F9o),e(E3,KD),e(KD,T9o),e(E3,M9o),e(Ze,E9o),e(Ze,C3),e(C3,C9o),e(C3,Ffe),e(Ffe,w9o),e(C3,A9o),e(C3,Tfe),e(Tfe,y9o),e(Ze,L9o),M(w3,Ze,null),b(f,Dqe,_),b(f,qi,_),e(qi,A3),e(A3,Mfe),M(Cy,Mfe,null),e(qi,x9o),e(qi,Efe),e(Efe,$9o),b(f,Gqe,_),b(f,So,_),M(wy,So,null),e(So,k9o),e(So,ji),e(ji,S9o),e(ji,ZD),e(ZD,R9o),e(ji,P9o),e(ji,eG),e(eG,B9o),e(ji,I9o),e(So,N9o),e(So,Ay),e(Ay,q9o),e(Ay,Cfe),e(Cfe,j9o),e(Ay,D9o),e(So,G9o),e(So,lt),M(yy,lt,null),e(lt,O9o),e(lt,wfe),e(wfe,V9o),e(lt,X9o),e(lt,Di),e(Di,z9o),e(Di,Afe),e(Afe,W9o),e(Di,Q9o),e(Di,oG),e(oG,H9o),e(Di,U9o),e(lt,J9o),M(y3,lt,null),e(So,Y9o),e(So,eo),M(Ly,eo,null),e(eo,K9o),e(eo,yfe),e(yfe,Z9o),e(eo,exo),e(eo,Sa),e(Sa,oxo),e(Sa,Lfe),e(Lfe,rxo),e(Sa,txo),e(Sa,xfe),e(xfe,axo),e(Sa,nxo),e(Sa,$fe),e($fe,sxo),e(Sa,lxo),e(eo,ixo),e(eo,_e),e(_e,L3),e(L3,kfe),e(kfe,dxo),e(L3,cxo),e(L3,rG),e(rG,fxo),e(L3,mxo),e(_e,gxo),e(_e,x3),e(x3,Sfe),e(Sfe,hxo),e(x3,pxo),e(x3,tG),e(tG,uxo),e(x3,_xo),e(_e,bxo),e(_e,$3),e($3,Rfe),e(Rfe,vxo),e($3,Fxo),e($3,aG),e(aG,Txo),e($3,Mxo),e(_e,Exo),e(_e,k3),e(k3,Pfe),e(Pfe,Cxo),e(k3,wxo),e(k3,nG),e(nG,Axo),e(k3,yxo),e(_e,Lxo),e(_e,S3),e(S3,Bfe),e(Bfe,xxo),e(S3,$xo),e(S3,sG),e(sG,kxo),e(S3,Sxo),e(_e,Rxo),e(_e,R3),e(R3,Ife),e(Ife,Pxo),e(R3,Bxo),e(R3,lG),e(lG,Ixo),e(R3,Nxo),e(_e,qxo),e(_e,P3),e(P3,Nfe),e(Nfe,jxo),e(P3,Dxo),e(P3,iG),e(iG,Gxo),e(P3,Oxo),e(_e,Vxo),e(_e,B3),e(B3,qfe),e(qfe,Xxo),e(B3,zxo),e(B3,dG),e(dG,Wxo),e(B3,Qxo),e(_e,Hxo),e(_e,I3),e(I3,jfe),e(jfe,Uxo),e(I3,Jxo),e(I3,cG),e(cG,Yxo),e(I3,Kxo),e(_e,Zxo),e(_e,N3),e(N3,Dfe),e(Dfe,e$o),e(N3,o$o),e(N3,fG),e(fG,r$o),e(N3,t$o),e(_e,a$o),e(_e,q3),e(q3,Gfe),e(Gfe,n$o),e(q3,s$o),e(q3,mG),e(mG,l$o),e(q3,i$o),e(_e,d$o),e(_e,j3),e(j3,Ofe),e(Ofe,c$o),e(j3,f$o),e(j3,gG),e(gG,m$o),e(j3,g$o),e(_e,h$o),e(_e,D3),e(D3,Vfe),e(Vfe,p$o),e(D3,u$o),e(D3,hG),e(hG,_$o),e(D3,b$o),e(_e,v$o),e(_e,G3),e(G3,Xfe),e(Xfe,F$o),e(G3,T$o),e(G3,pG),e(pG,M$o),e(G3,E$o),e(_e,C$o),e(_e,O3),e(O3,zfe),e(zfe,w$o),e(O3,A$o),e(O3,uG),e(uG,y$o),e(O3,L$o),e(_e,x$o),e(_e,V3),e(V3,Wfe),e(Wfe,$$o),e(V3,k$o),e(V3,_G),e(_G,S$o),e(V3,R$o),e(eo,P$o),e(eo,X3),e(X3,B$o),e(X3,Qfe),e(Qfe,I$o),e(X3,N$o),e(X3,Hfe),e(Hfe,q$o),e(eo,j$o),M(z3,eo,null),b(f,Oqe,_),b(f,Gi,_),e(Gi,W3),e(W3,Ufe),M(xy,Ufe,null),e(Gi,D$o),e(Gi,Jfe),e(Jfe,G$o),b(f,Vqe,_),b(f,Ro,_),M($y,Ro,null),e(Ro,O$o),e(Ro,Oi),e(Oi,V$o),e(Oi,bG),e(bG,X$o),e(Oi,z$o),e(Oi,vG),e(vG,W$o),e(Oi,Q$o),e(Ro,H$o),e(Ro,ky),e(ky,U$o),e(ky,Yfe),e(Yfe,J$o),e(ky,Y$o),e(Ro,K$o),e(Ro,it),M(Sy,it,null),e(it,Z$o),e(it,Kfe),e(Kfe,eko),e(it,oko),e(it,Vi),e(Vi,rko),e(Vi,Zfe),e(Zfe,tko),e(Vi,ako),e(Vi,FG),e(FG,nko),e(Vi,sko),e(it,lko),M(Q3,it,null),e(Ro,iko),e(Ro,oo),M(Ry,oo,null),e(oo,dko),e(oo,eme),e(eme,cko),e(oo,fko),e(oo,Ra),e(Ra,mko),e(Ra,ome),e(ome,gko),e(Ra,hko),e(Ra,rme),e(rme,pko),e(Ra,uko),e(Ra,tme),e(tme,_ko),e(Ra,bko),e(oo,vko),e(oo,N),e(N,H3),e(H3,ame),e(ame,Fko),e(H3,Tko),e(H3,TG),e(TG,Mko),e(H3,Eko),e(N,Cko),e(N,U3),e(U3,nme),e(nme,wko),e(U3,Ako),e(U3,MG),e(MG,yko),e(U3,Lko),e(N,xko),e(N,J3),e(J3,sme),e(sme,$ko),e(J3,kko),e(J3,EG),e(EG,Sko),e(J3,Rko),e(N,Pko),e(N,Y3),e(Y3,lme),e(lme,Bko),e(Y3,Iko),e(Y3,CG),e(CG,Nko),e(Y3,qko),e(N,jko),e(N,K3),e(K3,ime),e(ime,Dko),e(K3,Gko),e(K3,wG),e(wG,Oko),e(K3,Vko),e(N,Xko),e(N,Z3),e(Z3,dme),e(dme,zko),e(Z3,Wko),e(Z3,AG),e(AG,Qko),e(Z3,Hko),e(N,Uko),e(N,eb),e(eb,cme),e(cme,Jko),e(eb,Yko),e(eb,yG),e(yG,Kko),e(eb,Zko),e(N,eSo),e(N,ob),e(ob,fme),e(fme,oSo),e(ob,rSo),e(ob,LG),e(LG,tSo),e(ob,aSo),e(N,nSo),e(N,rb),e(rb,mme),e(mme,sSo),e(rb,lSo),e(rb,xG),e(xG,iSo),e(rb,dSo),e(N,cSo),e(N,tb),e(tb,gme),e(gme,fSo),e(tb,mSo),e(tb,$G),e($G,gSo),e(tb,hSo),e(N,pSo),e(N,ab),e(ab,hme),e(hme,uSo),e(ab,_So),e(ab,kG),e(kG,bSo),e(ab,vSo),e(N,FSo),e(N,nb),e(nb,pme),e(pme,TSo),e(nb,MSo),e(nb,SG),e(SG,ESo),e(nb,CSo),e(N,wSo),e(N,sb),e(sb,ume),e(ume,ASo),e(sb,ySo),e(sb,RG),e(RG,LSo),e(sb,xSo),e(N,$So),e(N,lb),e(lb,_me),e(_me,kSo),e(lb,SSo),e(lb,PG),e(PG,RSo),e(lb,PSo),e(N,BSo),e(N,ib),e(ib,bme),e(bme,ISo),e(ib,NSo),e(ib,BG),e(BG,qSo),e(ib,jSo),e(N,DSo),e(N,db),e(db,vme),e(vme,GSo),e(db,OSo),e(db,IG),e(IG,VSo),e(db,XSo),e(N,zSo),e(N,cb),e(cb,Fme),e(Fme,WSo),e(cb,QSo),e(cb,NG),e(NG,HSo),e(cb,USo),e(N,JSo),e(N,fb),e(fb,Tme),e(Tme,YSo),e(fb,KSo),e(fb,qG),e(qG,ZSo),e(fb,eRo),e(N,oRo),e(N,mb),e(mb,Mme),e(Mme,rRo),e(mb,tRo),e(mb,jG),e(jG,aRo),e(mb,nRo),e(N,sRo),e(N,gb),e(gb,Eme),e(Eme,lRo),e(gb,iRo),e(gb,DG),e(DG,dRo),e(gb,cRo),e(N,fRo),e(N,hb),e(hb,Cme),e(Cme,mRo),e(hb,gRo),e(hb,GG),e(GG,hRo),e(hb,pRo),e(N,uRo),e(N,pb),e(pb,wme),e(wme,_Ro),e(pb,bRo),e(pb,OG),e(OG,vRo),e(pb,FRo),e(N,TRo),e(N,ub),e(ub,Ame),e(Ame,MRo),e(ub,ERo),e(ub,VG),e(VG,CRo),e(ub,wRo),e(N,ARo),e(N,_b),e(_b,yme),e(yme,yRo),e(_b,LRo),e(_b,XG),e(XG,xRo),e(_b,$Ro),e(N,kRo),e(N,bb),e(bb,Lme),e(Lme,SRo),e(bb,RRo),e(bb,zG),e(zG,PRo),e(bb,BRo),e(N,IRo),e(N,vb),e(vb,xme),e(xme,NRo),e(vb,qRo),e(vb,WG),e(WG,jRo),e(vb,DRo),e(N,GRo),e(N,Fb),e(Fb,$me),e($me,ORo),e(Fb,VRo),e(Fb,QG),e(QG,XRo),e(Fb,zRo),e(N,WRo),e(N,Tb),e(Tb,kme),e(kme,QRo),e(Tb,HRo),e(Tb,HG),e(HG,URo),e(Tb,JRo),e(N,YRo),e(N,Mb),e(Mb,Sme),e(Sme,KRo),e(Mb,ZRo),e(Mb,UG),e(UG,ePo),e(Mb,oPo),e(N,rPo),e(N,Eb),e(Eb,Rme),e(Rme,tPo),e(Eb,aPo),e(Eb,JG),e(JG,nPo),e(Eb,sPo),e(N,lPo),e(N,Cb),e(Cb,Pme),e(Pme,iPo),e(Cb,dPo),e(Cb,YG),e(YG,cPo),e(Cb,fPo),e(N,mPo),e(N,wb),e(wb,Bme),e(Bme,gPo),e(wb,hPo),e(wb,KG),e(KG,pPo),e(wb,uPo),e(N,_Po),e(N,Ab),e(Ab,Ime),e(Ime,bPo),e(Ab,vPo),e(Ab,ZG),e(ZG,FPo),e(Ab,TPo),e(N,MPo),e(N,yb),e(yb,Nme),e(Nme,EPo),e(yb,CPo),e(yb,eO),e(eO,wPo),e(yb,APo),e(N,yPo),e(N,Lb),e(Lb,qme),e(qme,LPo),e(Lb,xPo),e(Lb,oO),e(oO,$Po),e(Lb,kPo),e(N,SPo),e(N,xb),e(xb,jme),e(jme,RPo),e(xb,PPo),e(xb,rO),e(rO,BPo),e(xb,IPo),e(N,NPo),e(N,$b),e($b,Dme),e(Dme,qPo),e($b,jPo),e($b,tO),e(tO,DPo),e($b,GPo),e(N,OPo),e(N,kb),e(kb,Gme),e(Gme,VPo),e(kb,XPo),e(kb,aO),e(aO,zPo),e(kb,WPo),e(N,QPo),e(N,Sb),e(Sb,Ome),e(Ome,HPo),e(Sb,UPo),e(Sb,nO),e(nO,JPo),e(Sb,YPo),e(N,KPo),e(N,Rb),e(Rb,Vme),e(Vme,ZPo),e(Rb,eBo),e(Rb,sO),e(sO,oBo),e(Rb,rBo),e(N,tBo),e(N,Pb),e(Pb,Xme),e(Xme,aBo),e(Pb,nBo),e(Pb,lO),e(lO,sBo),e(Pb,lBo),e(N,iBo),e(N,Bb),e(Bb,zme),e(zme,dBo),e(Bb,cBo),e(Bb,iO),e(iO,fBo),e(Bb,mBo),e(N,gBo),e(N,Ib),e(Ib,Wme),e(Wme,hBo),e(Ib,pBo),e(Ib,dO),e(dO,uBo),e(Ib,_Bo),e(N,bBo),e(N,Nb),e(Nb,Qme),e(Qme,vBo),e(Nb,FBo),e(Nb,cO),e(cO,TBo),e(Nb,MBo),e(N,EBo),e(N,qb),e(qb,Hme),e(Hme,CBo),e(qb,wBo),e(qb,fO),e(fO,ABo),e(qb,yBo),e(N,LBo),e(N,jb),e(jb,Ume),e(Ume,xBo),e(jb,$Bo),e(jb,mO),e(mO,kBo),e(jb,SBo),e(N,RBo),e(N,Db),e(Db,Jme),e(Jme,PBo),e(Db,BBo),e(Db,gO),e(gO,IBo),e(Db,NBo),e(oo,qBo),e(oo,Gb),e(Gb,jBo),e(Gb,Yme),e(Yme,DBo),e(Gb,GBo),e(Gb,Kme),e(Kme,OBo),e(oo,VBo),M(Ob,oo,null),b(f,Xqe,_),b(f,Xi,_),e(Xi,Vb),e(Vb,Zme),M(Py,Zme,null),e(Xi,XBo),e(Xi,ege),e(ege,zBo),b(f,zqe,_),b(f,Po,_),M(By,Po,null),e(Po,WBo),e(Po,zi),e(zi,QBo),e(zi,hO),e(hO,HBo),e(zi,UBo),e(zi,pO),e(pO,JBo),e(zi,YBo),e(Po,KBo),e(Po,Iy),e(Iy,ZBo),e(Iy,oge),e(oge,eIo),e(Iy,oIo),e(Po,rIo),e(Po,dt),M(Ny,dt,null),e(dt,tIo),e(dt,rge),e(rge,aIo),e(dt,nIo),e(dt,Wi),e(Wi,sIo),e(Wi,tge),e(tge,lIo),e(Wi,iIo),e(Wi,uO),e(uO,dIo),e(Wi,cIo),e(dt,fIo),M(Xb,dt,null),e(Po,mIo),e(Po,ro),M(qy,ro,null),e(ro,gIo),e(ro,age),e(age,hIo),e(ro,pIo),e(ro,Pa),e(Pa,uIo),e(Pa,nge),e(nge,_Io),e(Pa,bIo),e(Pa,sge),e(sge,vIo),e(Pa,FIo),e(Pa,lge),e(lge,TIo),e(Pa,MIo),e(ro,EIo),e(ro,K),e(K,zb),e(zb,ige),e(ige,CIo),e(zb,wIo),e(zb,_O),e(_O,AIo),e(zb,yIo),e(K,LIo),e(K,Wb),e(Wb,dge),e(dge,xIo),e(Wb,$Io),e(Wb,bO),e(bO,kIo),e(Wb,SIo),e(K,RIo),e(K,Qb),e(Qb,cge),e(cge,PIo),e(Qb,BIo),e(Qb,vO),e(vO,IIo),e(Qb,NIo),e(K,qIo),e(K,Hb),e(Hb,fge),e(fge,jIo),e(Hb,DIo),e(Hb,FO),e(FO,GIo),e(Hb,OIo),e(K,VIo),e(K,Ub),e(Ub,mge),e(mge,XIo),e(Ub,zIo),e(Ub,TO),e(TO,WIo),e(Ub,QIo),e(K,HIo),e(K,Jb),e(Jb,gge),e(gge,UIo),e(Jb,JIo),e(Jb,MO),e(MO,YIo),e(Jb,KIo),e(K,ZIo),e(K,Yb),e(Yb,hge),e(hge,eNo),e(Yb,oNo),e(Yb,EO),e(EO,rNo),e(Yb,tNo),e(K,aNo),e(K,Kb),e(Kb,pge),e(pge,nNo),e(Kb,sNo),e(Kb,CO),e(CO,lNo),e(Kb,iNo),e(K,dNo),e(K,Zb),e(Zb,uge),e(uge,cNo),e(Zb,fNo),e(Zb,wO),e(wO,mNo),e(Zb,gNo),e(K,hNo),e(K,e2),e(e2,_ge),e(_ge,pNo),e(e2,uNo),e(e2,AO),e(AO,_No),e(e2,bNo),e(K,vNo),e(K,o2),e(o2,bge),e(bge,FNo),e(o2,TNo),e(o2,yO),e(yO,MNo),e(o2,ENo),e(K,CNo),e(K,r2),e(r2,vge),e(vge,wNo),e(r2,ANo),e(r2,LO),e(LO,yNo),e(r2,LNo),e(K,xNo),e(K,t2),e(t2,Fge),e(Fge,$No),e(t2,kNo),e(t2,xO),e(xO,SNo),e(t2,RNo),e(K,PNo),e(K,a2),e(a2,Tge),e(Tge,BNo),e(a2,INo),e(a2,$O),e($O,NNo),e(a2,qNo),e(K,jNo),e(K,n2),e(n2,Mge),e(Mge,DNo),e(n2,GNo),e(n2,kO),e(kO,ONo),e(n2,VNo),e(K,XNo),e(K,s2),e(s2,Ege),e(Ege,zNo),e(s2,WNo),e(s2,SO),e(SO,QNo),e(s2,HNo),e(K,UNo),e(K,l2),e(l2,Cge),e(Cge,JNo),e(l2,YNo),e(l2,RO),e(RO,KNo),e(l2,ZNo),e(K,eqo),e(K,i2),e(i2,wge),e(wge,oqo),e(i2,rqo),e(i2,PO),e(PO,tqo),e(i2,aqo),e(K,nqo),e(K,d2),e(d2,Age),e(Age,sqo),e(d2,lqo),e(d2,BO),e(BO,iqo),e(d2,dqo),e(K,cqo),e(K,c2),e(c2,yge),e(yge,fqo),e(c2,mqo),e(c2,IO),e(IO,gqo),e(c2,hqo),e(K,pqo),e(K,f2),e(f2,Lge),e(Lge,uqo),e(f2,_qo),e(f2,NO),e(NO,bqo),e(f2,vqo),e(K,Fqo),e(K,m2),e(m2,xge),e(xge,Tqo),e(m2,Mqo),e(m2,qO),e(qO,Eqo),e(m2,Cqo),e(K,wqo),e(K,g2),e(g2,$ge),e($ge,Aqo),e(g2,yqo),e(g2,jO),e(jO,Lqo),e(g2,xqo),e(K,$qo),e(K,h2),e(h2,kge),e(kge,kqo),e(h2,Sqo),e(h2,DO),e(DO,Rqo),e(h2,Pqo),e(K,Bqo),e(K,p2),e(p2,Sge),e(Sge,Iqo),e(p2,Nqo),e(p2,GO),e(GO,qqo),e(p2,jqo),e(K,Dqo),e(K,u2),e(u2,Rge),e(Rge,Gqo),e(u2,Oqo),e(u2,OO),e(OO,Vqo),e(u2,Xqo),e(K,zqo),e(K,_2),e(_2,Pge),e(Pge,Wqo),e(_2,Qqo),e(_2,VO),e(VO,Hqo),e(_2,Uqo),e(K,Jqo),e(K,b2),e(b2,Bge),e(Bge,Yqo),e(b2,Kqo),e(b2,XO),e(XO,Zqo),e(b2,ejo),e(K,ojo),e(K,v2),e(v2,Ige),e(Ige,rjo),e(v2,tjo),e(v2,zO),e(zO,ajo),e(v2,njo),e(ro,sjo),e(ro,F2),e(F2,ljo),e(F2,Nge),e(Nge,ijo),e(F2,djo),e(F2,qge),e(qge,cjo),e(ro,fjo),M(T2,ro,null),b(f,Wqe,_),b(f,Qi,_),e(Qi,M2),e(M2,jge),M(jy,jge,null),e(Qi,mjo),e(Qi,Dge),e(Dge,gjo),b(f,Qqe,_),b(f,Bo,_),M(Dy,Bo,null),e(Bo,hjo),e(Bo,Hi),e(Hi,pjo),e(Hi,WO),e(WO,ujo),e(Hi,_jo),e(Hi,QO),e(QO,bjo),e(Hi,vjo),e(Bo,Fjo),e(Bo,Gy),e(Gy,Tjo),e(Gy,Gge),e(Gge,Mjo),e(Gy,Ejo),e(Bo,Cjo),e(Bo,ct),M(Oy,ct,null),e(ct,wjo),e(ct,Oge),e(Oge,Ajo),e(ct,yjo),e(ct,Ui),e(Ui,Ljo),e(Ui,Vge),e(Vge,xjo),e(Ui,$jo),e(Ui,HO),e(HO,kjo),e(Ui,Sjo),e(ct,Rjo),M(E2,ct,null),e(Bo,Pjo),e(Bo,to),M(Vy,to,null),e(to,Bjo),e(to,Xge),e(Xge,Ijo),e(to,Njo),e(to,Ba),e(Ba,qjo),e(Ba,zge),e(zge,jjo),e(Ba,Djo),e(Ba,Wge),e(Wge,Gjo),e(Ba,Ojo),e(Ba,Qge),e(Qge,Vjo),e(Ba,Xjo),e(to,zjo),e(to,Yr),e(Yr,C2),e(C2,Hge),e(Hge,Wjo),e(C2,Qjo),e(C2,UO),e(UO,Hjo),e(C2,Ujo),e(Yr,Jjo),e(Yr,w2),e(w2,Uge),e(Uge,Yjo),e(w2,Kjo),e(w2,JO),e(JO,Zjo),e(w2,eDo),e(Yr,oDo),e(Yr,A2),e(A2,Jge),e(Jge,rDo),e(A2,tDo),e(A2,YO),e(YO,aDo),e(A2,nDo),e(Yr,sDo),e(Yr,y2),e(y2,Yge),e(Yge,lDo),e(y2,iDo),e(y2,KO),e(KO,dDo),e(y2,cDo),e(Yr,fDo),e(Yr,L2),e(L2,Kge),e(Kge,mDo),e(L2,gDo),e(L2,ZO),e(ZO,hDo),e(L2,pDo),e(to,uDo),e(to,x2),e(x2,_Do),e(x2,Zge),e(Zge,bDo),e(x2,vDo),e(x2,ehe),e(ehe,FDo),e(to,TDo),M($2,to,null),b(f,Hqe,_),b(f,Ji,_),e(Ji,k2),e(k2,ohe),M(Xy,ohe,null),e(Ji,MDo),e(Ji,rhe),e(rhe,EDo),b(f,Uqe,_),b(f,Io,_),M(zy,Io,null),e(Io,CDo),e(Io,Yi),e(Yi,wDo),e(Yi,eV),e(eV,ADo),e(Yi,yDo),e(Yi,oV),e(oV,LDo),e(Yi,xDo),e(Io,$Do),e(Io,Wy),e(Wy,kDo),e(Wy,the),e(the,SDo),e(Wy,RDo),e(Io,PDo),e(Io,ft),M(Qy,ft,null),e(ft,BDo),e(ft,ahe),e(ahe,IDo),e(ft,NDo),e(ft,Ki),e(Ki,qDo),e(Ki,nhe),e(nhe,jDo),e(Ki,DDo),e(Ki,rV),e(rV,GDo),e(Ki,ODo),e(ft,VDo),M(S2,ft,null),e(Io,XDo),e(Io,ao),M(Hy,ao,null),e(ao,zDo),e(ao,she),e(she,WDo),e(ao,QDo),e(ao,Ia),e(Ia,HDo),e(Ia,lhe),e(lhe,UDo),e(Ia,JDo),e(Ia,ihe),e(ihe,YDo),e(Ia,KDo),e(Ia,dhe),e(dhe,ZDo),e(Ia,eGo),e(ao,oGo),e(ao,H),e(H,R2),e(R2,che),e(che,rGo),e(R2,tGo),e(R2,tV),e(tV,aGo),e(R2,nGo),e(H,sGo),e(H,P2),e(P2,fhe),e(fhe,lGo),e(P2,iGo),e(P2,aV),e(aV,dGo),e(P2,cGo),e(H,fGo),e(H,B2),e(B2,mhe),e(mhe,mGo),e(B2,gGo),e(B2,nV),e(nV,hGo),e(B2,pGo),e(H,uGo),e(H,I2),e(I2,ghe),e(ghe,_Go),e(I2,bGo),e(I2,sV),e(sV,vGo),e(I2,FGo),e(H,TGo),e(H,N2),e(N2,hhe),e(hhe,MGo),e(N2,EGo),e(N2,lV),e(lV,CGo),e(N2,wGo),e(H,AGo),e(H,q2),e(q2,phe),e(phe,yGo),e(q2,LGo),e(q2,iV),e(iV,xGo),e(q2,$Go),e(H,kGo),e(H,j2),e(j2,uhe),e(uhe,SGo),e(j2,RGo),e(j2,dV),e(dV,PGo),e(j2,BGo),e(H,IGo),e(H,D2),e(D2,_he),e(_he,NGo),e(D2,qGo),e(D2,cV),e(cV,jGo),e(D2,DGo),e(H,GGo),e(H,G2),e(G2,bhe),e(bhe,OGo),e(G2,VGo),e(G2,fV),e(fV,XGo),e(G2,zGo),e(H,WGo),e(H,O2),e(O2,vhe),e(vhe,QGo),e(O2,HGo),e(O2,mV),e(mV,UGo),e(O2,JGo),e(H,YGo),e(H,V2),e(V2,Fhe),e(Fhe,KGo),e(V2,ZGo),e(V2,gV),e(gV,eOo),e(V2,oOo),e(H,rOo),e(H,X2),e(X2,The),e(The,tOo),e(X2,aOo),e(X2,hV),e(hV,nOo),e(X2,sOo),e(H,lOo),e(H,z2),e(z2,Mhe),e(Mhe,iOo),e(z2,dOo),e(z2,pV),e(pV,cOo),e(z2,fOo),e(H,mOo),e(H,W2),e(W2,Ehe),e(Ehe,gOo),e(W2,hOo),e(W2,uV),e(uV,pOo),e(W2,uOo),e(H,_Oo),e(H,Q2),e(Q2,Che),e(Che,bOo),e(Q2,vOo),e(Q2,_V),e(_V,FOo),e(Q2,TOo),e(H,MOo),e(H,H2),e(H2,whe),e(whe,EOo),e(H2,COo),e(H2,bV),e(bV,wOo),e(H2,AOo),e(H,yOo),e(H,U2),e(U2,Ahe),e(Ahe,LOo),e(U2,xOo),e(U2,vV),e(vV,$Oo),e(U2,kOo),e(H,SOo),e(H,J2),e(J2,yhe),e(yhe,ROo),e(J2,POo),e(J2,FV),e(FV,BOo),e(J2,IOo),e(H,NOo),e(H,Y2),e(Y2,Lhe),e(Lhe,qOo),e(Y2,jOo),e(Y2,TV),e(TV,DOo),e(Y2,GOo),e(H,OOo),e(H,K2),e(K2,xhe),e(xhe,VOo),e(K2,XOo),e(K2,MV),e(MV,zOo),e(K2,WOo),e(H,QOo),e(H,Z2),e(Z2,$he),e($he,HOo),e(Z2,UOo),e(Z2,EV),e(EV,JOo),e(Z2,YOo),e(H,KOo),e(H,ev),e(ev,khe),e(khe,ZOo),e(ev,eVo),e(ev,CV),e(CV,oVo),e(ev,rVo),e(H,tVo),e(H,ov),e(ov,She),e(She,aVo),e(ov,nVo),e(ov,wV),e(wV,sVo),e(ov,lVo),e(H,iVo),e(H,rv),e(rv,Rhe),e(Rhe,dVo),e(rv,cVo),e(rv,AV),e(AV,fVo),e(rv,mVo),e(H,gVo),e(H,tv),e(tv,Phe),e(Phe,hVo),e(tv,pVo),e(tv,yV),e(yV,uVo),e(tv,_Vo),e(H,bVo),e(H,av),e(av,Bhe),e(Bhe,vVo),e(av,FVo),e(av,LV),e(LV,TVo),e(av,MVo),e(H,EVo),e(H,nv),e(nv,Ihe),e(Ihe,CVo),e(nv,wVo),e(nv,xV),e(xV,AVo),e(nv,yVo),e(H,LVo),e(H,sv),e(sv,Nhe),e(Nhe,xVo),e(sv,$Vo),e(sv,$V),e($V,kVo),e(sv,SVo),e(H,RVo),e(H,lv),e(lv,qhe),e(qhe,PVo),e(lv,BVo),e(lv,kV),e(kV,IVo),e(lv,NVo),e(H,qVo),e(H,iv),e(iv,jhe),e(jhe,jVo),e(iv,DVo),e(iv,SV),e(SV,GVo),e(iv,OVo),e(H,VVo),e(H,dv),e(dv,Dhe),e(Dhe,XVo),e(dv,zVo),e(dv,RV),e(RV,WVo),e(dv,QVo),e(H,HVo),e(H,cv),e(cv,Ghe),e(Ghe,UVo),e(cv,JVo),e(cv,PV),e(PV,YVo),e(cv,KVo),e(H,ZVo),e(H,fv),e(fv,Ohe),e(Ohe,eXo),e(fv,oXo),e(fv,BV),e(BV,rXo),e(fv,tXo),e(H,aXo),e(H,mv),e(mv,Vhe),e(Vhe,nXo),e(mv,sXo),e(mv,IV),e(IV,lXo),e(mv,iXo),e(ao,dXo),e(ao,gv),e(gv,cXo),e(gv,Xhe),e(Xhe,fXo),e(gv,mXo),e(gv,zhe),e(zhe,gXo),e(ao,hXo),M(hv,ao,null),b(f,Jqe,_),b(f,Zi,_),e(Zi,pv),e(pv,Whe),M(Uy,Whe,null),e(Zi,pXo),e(Zi,Qhe),e(Qhe,uXo),b(f,Yqe,_),b(f,No,_),M(Jy,No,null),e(No,_Xo),e(No,ed),e(ed,bXo),e(ed,NV),e(NV,vXo),e(ed,FXo),e(ed,qV),e(qV,TXo),e(ed,MXo),e(No,EXo),e(No,Yy),e(Yy,CXo),e(Yy,Hhe),e(Hhe,wXo),e(Yy,AXo),e(No,yXo),e(No,mt),M(Ky,mt,null),e(mt,LXo),e(mt,Uhe),e(Uhe,xXo),e(mt,$Xo),e(mt,od),e(od,kXo),e(od,Jhe),e(Jhe,SXo),e(od,RXo),e(od,jV),e(jV,PXo),e(od,BXo),e(mt,IXo),M(uv,mt,null),e(No,NXo),e(No,no),M(Zy,no,null),e(no,qXo),e(no,Yhe),e(Yhe,jXo),e(no,DXo),e(no,Na),e(Na,GXo),e(Na,Khe),e(Khe,OXo),e(Na,VXo),e(Na,Zhe),e(Zhe,XXo),e(Na,zXo),e(Na,epe),e(epe,WXo),e(Na,QXo),e(no,HXo),e(no,V),e(V,_v),e(_v,ope),e(ope,UXo),e(_v,JXo),e(_v,DV),e(DV,YXo),e(_v,KXo),e(V,ZXo),e(V,bv),e(bv,rpe),e(rpe,ezo),e(bv,ozo),e(bv,GV),e(GV,rzo),e(bv,tzo),e(V,azo),e(V,vv),e(vv,tpe),e(tpe,nzo),e(vv,szo),e(vv,OV),e(OV,lzo),e(vv,izo),e(V,dzo),e(V,Fv),e(Fv,ape),e(ape,czo),e(Fv,fzo),e(Fv,VV),e(VV,mzo),e(Fv,gzo),e(V,hzo),e(V,Tv),e(Tv,npe),e(npe,pzo),e(Tv,uzo),e(Tv,XV),e(XV,_zo),e(Tv,bzo),e(V,vzo),e(V,Mv),e(Mv,spe),e(spe,Fzo),e(Mv,Tzo),e(Mv,zV),e(zV,Mzo),e(Mv,Ezo),e(V,Czo),e(V,Ev),e(Ev,lpe),e(lpe,wzo),e(Ev,Azo),e(Ev,WV),e(WV,yzo),e(Ev,Lzo),e(V,xzo),e(V,Cv),e(Cv,ipe),e(ipe,$zo),e(Cv,kzo),e(Cv,QV),e(QV,Szo),e(Cv,Rzo),e(V,Pzo),e(V,wv),e(wv,dpe),e(dpe,Bzo),e(wv,Izo),e(wv,HV),e(HV,Nzo),e(wv,qzo),e(V,jzo),e(V,Av),e(Av,cpe),e(cpe,Dzo),e(Av,Gzo),e(Av,UV),e(UV,Ozo),e(Av,Vzo),e(V,Xzo),e(V,yv),e(yv,fpe),e(fpe,zzo),e(yv,Wzo),e(yv,JV),e(JV,Qzo),e(yv,Hzo),e(V,Uzo),e(V,Lv),e(Lv,mpe),e(mpe,Jzo),e(Lv,Yzo),e(Lv,YV),e(YV,Kzo),e(Lv,Zzo),e(V,eWo),e(V,xv),e(xv,gpe),e(gpe,oWo),e(xv,rWo),e(xv,KV),e(KV,tWo),e(xv,aWo),e(V,nWo),e(V,$v),e($v,hpe),e(hpe,sWo),e($v,lWo),e($v,ZV),e(ZV,iWo),e($v,dWo),e(V,cWo),e(V,kv),e(kv,ppe),e(ppe,fWo),e(kv,mWo),e(kv,eX),e(eX,gWo),e(kv,hWo),e(V,pWo),e(V,Sv),e(Sv,upe),e(upe,uWo),e(Sv,_Wo),e(Sv,oX),e(oX,bWo),e(Sv,vWo),e(V,FWo),e(V,Rv),e(Rv,_pe),e(_pe,TWo),e(Rv,MWo),e(Rv,rX),e(rX,EWo),e(Rv,CWo),e(V,wWo),e(V,Pv),e(Pv,bpe),e(bpe,AWo),e(Pv,yWo),e(Pv,tX),e(tX,LWo),e(Pv,xWo),e(V,$Wo),e(V,Bv),e(Bv,vpe),e(vpe,kWo),e(Bv,SWo),e(Bv,aX),e(aX,RWo),e(Bv,PWo),e(V,BWo),e(V,Iv),e(Iv,Fpe),e(Fpe,IWo),e(Iv,NWo),e(Iv,nX),e(nX,qWo),e(Iv,jWo),e(V,DWo),e(V,Nv),e(Nv,Tpe),e(Tpe,GWo),e(Nv,OWo),e(Nv,sX),e(sX,VWo),e(Nv,XWo),e(V,zWo),e(V,qv),e(qv,Mpe),e(Mpe,WWo),e(qv,QWo),e(qv,lX),e(lX,HWo),e(qv,UWo),e(V,JWo),e(V,jv),e(jv,Epe),e(Epe,YWo),e(jv,KWo),e(jv,iX),e(iX,ZWo),e(jv,eQo),e(V,oQo),e(V,Dv),e(Dv,Cpe),e(Cpe,rQo),e(Dv,tQo),e(Dv,dX),e(dX,aQo),e(Dv,nQo),e(V,sQo),e(V,Gv),e(Gv,wpe),e(wpe,lQo),e(Gv,iQo),e(Gv,cX),e(cX,dQo),e(Gv,cQo),e(V,fQo),e(V,Ov),e(Ov,Ape),e(Ape,mQo),e(Ov,gQo),e(Ov,fX),e(fX,hQo),e(Ov,pQo),e(V,uQo),e(V,Vv),e(Vv,ype),e(ype,_Qo),e(Vv,bQo),e(Vv,mX),e(mX,vQo),e(Vv,FQo),e(V,TQo),e(V,Xv),e(Xv,Lpe),e(Lpe,MQo),e(Xv,EQo),e(Xv,gX),e(gX,CQo),e(Xv,wQo),e(V,AQo),e(V,zv),e(zv,xpe),e(xpe,yQo),e(zv,LQo),e(zv,hX),e(hX,xQo),e(zv,$Qo),e(V,kQo),e(V,Wv),e(Wv,$pe),e($pe,SQo),e(Wv,RQo),e(Wv,pX),e(pX,PQo),e(Wv,BQo),e(V,IQo),e(V,Qv),e(Qv,kpe),e(kpe,NQo),e(Qv,qQo),e(Qv,uX),e(uX,jQo),e(Qv,DQo),e(V,GQo),e(V,Hv),e(Hv,Spe),e(Spe,OQo),e(Hv,VQo),e(Hv,_X),e(_X,XQo),e(Hv,zQo),e(V,WQo),e(V,Uv),e(Uv,Rpe),e(Rpe,QQo),e(Uv,HQo),e(Uv,bX),e(bX,UQo),e(Uv,JQo),e(V,YQo),e(V,Jv),e(Jv,Ppe),e(Ppe,KQo),e(Jv,ZQo),e(Jv,vX),e(vX,eHo),e(Jv,oHo),e(V,rHo),e(V,Yv),e(Yv,Bpe),e(Bpe,tHo),e(Yv,aHo),e(Yv,FX),e(FX,nHo),e(Yv,sHo),e(V,lHo),e(V,Kv),e(Kv,Ipe),e(Ipe,iHo),e(Kv,dHo),e(Kv,TX),e(TX,cHo),e(Kv,fHo),e(V,mHo),e(V,Zv),e(Zv,Npe),e(Npe,gHo),e(Zv,hHo),e(Zv,MX),e(MX,pHo),e(Zv,uHo),e(V,_Ho),e(V,eF),e(eF,qpe),e(qpe,bHo),e(eF,vHo),e(eF,EX),e(EX,FHo),e(eF,THo),e(V,MHo),e(V,oF),e(oF,jpe),e(jpe,EHo),e(oF,CHo),e(oF,CX),e(CX,wHo),e(oF,AHo),e(V,yHo),e(V,rF),e(rF,Dpe),e(Dpe,LHo),e(rF,xHo),e(rF,wX),e(wX,$Ho),e(rF,kHo),e(no,SHo),e(no,tF),e(tF,RHo),e(tF,Gpe),e(Gpe,PHo),e(tF,BHo),e(tF,Ope),e(Ope,IHo),e(no,NHo),M(aF,no,null),b(f,Kqe,_),b(f,rd,_),e(rd,nF),e(nF,Vpe),M(eL,Vpe,null),e(rd,qHo),e(rd,Xpe),e(Xpe,jHo),b(f,Zqe,_),b(f,qo,_),M(oL,qo,null),e(qo,DHo),e(qo,td),e(td,GHo),e(td,AX),e(AX,OHo),e(td,VHo),e(td,yX),e(yX,XHo),e(td,zHo),e(qo,WHo),e(qo,rL),e(rL,QHo),e(rL,zpe),e(zpe,HHo),e(rL,UHo),e(qo,JHo),e(qo,gt),M(tL,gt,null),e(gt,YHo),e(gt,Wpe),e(Wpe,KHo),e(gt,ZHo),e(gt,ad),e(ad,eUo),e(ad,Qpe),e(Qpe,oUo),e(ad,rUo),e(ad,LX),e(LX,tUo),e(ad,aUo),e(gt,nUo),M(sF,gt,null),e(qo,sUo),e(qo,so),M(aL,so,null),e(so,lUo),e(so,Hpe),e(Hpe,iUo),e(so,dUo),e(so,qa),e(qa,cUo),e(qa,Upe),e(Upe,fUo),e(qa,mUo),e(qa,Jpe),e(Jpe,gUo),e(qa,hUo),e(qa,Ype),e(Ype,pUo),e(qa,uUo),e(so,_Uo),e(so,Kpe),e(Kpe,lF),e(lF,Zpe),e(Zpe,bUo),e(lF,vUo),e(lF,xX),e(xX,FUo),e(lF,TUo),e(so,MUo),e(so,iF),e(iF,EUo),e(iF,eue),e(eue,CUo),e(iF,wUo),e(iF,oue),e(oue,AUo),e(so,yUo),M(dF,so,null),b(f,eje,_),b(f,nd,_),e(nd,cF),e(cF,rue),M(nL,rue,null),e(nd,LUo),e(nd,tue),e(tue,xUo),b(f,oje,_),b(f,jo,_),M(sL,jo,null),e(jo,$Uo),e(jo,sd),e(sd,kUo),e(sd,$X),e($X,SUo),e(sd,RUo),e(sd,kX),e(kX,PUo),e(sd,BUo),e(jo,IUo),e(jo,lL),e(lL,NUo),e(lL,aue),e(aue,qUo),e(lL,jUo),e(jo,DUo),e(jo,ht),M(iL,ht,null),e(ht,GUo),e(ht,nue),e(nue,OUo),e(ht,VUo),e(ht,ld),e(ld,XUo),e(ld,sue),e(sue,zUo),e(ld,WUo),e(ld,SX),e(SX,QUo),e(ld,HUo),e(ht,UUo),M(fF,ht,null),e(jo,JUo),e(jo,lo),M(dL,lo,null),e(lo,YUo),e(lo,lue),e(lue,KUo),e(lo,ZUo),e(lo,ja),e(ja,eJo),e(ja,iue),e(iue,oJo),e(ja,rJo),e(ja,due),e(due,tJo),e(ja,aJo),e(ja,cue),e(cue,nJo),e(ja,sJo),e(lo,lJo),e(lo,Fe),e(Fe,mF),e(mF,fue),e(fue,iJo),e(mF,dJo),e(mF,RX),e(RX,cJo),e(mF,fJo),e(Fe,mJo),e(Fe,gF),e(gF,mue),e(mue,gJo),e(gF,hJo),e(gF,PX),e(PX,pJo),e(gF,uJo),e(Fe,_Jo),e(Fe,hF),e(hF,gue),e(gue,bJo),e(hF,vJo),e(hF,BX),e(BX,FJo),e(hF,TJo),e(Fe,MJo),e(Fe,pF),e(pF,hue),e(hue,EJo),e(pF,CJo),e(pF,IX),e(IX,wJo),e(pF,AJo),e(Fe,yJo),e(Fe,Is),e(Is,pue),e(pue,LJo),e(Is,xJo),e(Is,NX),e(NX,$Jo),e(Is,kJo),e(Is,qX),e(qX,SJo),e(Is,RJo),e(Fe,PJo),e(Fe,uF),e(uF,uue),e(uue,BJo),e(uF,IJo),e(uF,jX),e(jX,NJo),e(uF,qJo),e(Fe,jJo),e(Fe,pt),e(pt,_ue),e(_ue,DJo),e(pt,GJo),e(pt,DX),e(DX,OJo),e(pt,VJo),e(pt,GX),e(GX,XJo),e(pt,zJo),e(pt,OX),e(OX,WJo),e(pt,QJo),e(Fe,HJo),e(Fe,_F),e(_F,bue),e(bue,UJo),e(_F,JJo),e(_F,VX),e(VX,YJo),e(_F,KJo),e(Fe,ZJo),e(Fe,bF),e(bF,vue),e(vue,eYo),e(bF,oYo),e(bF,XX),e(XX,rYo),e(bF,tYo),e(Fe,aYo),e(Fe,vF),e(vF,Fue),e(Fue,nYo),e(vF,sYo),e(vF,zX),e(zX,lYo),e(vF,iYo),e(Fe,dYo),e(Fe,FF),e(FF,Tue),e(Tue,cYo),e(FF,fYo),e(FF,WX),e(WX,mYo),e(FF,gYo),e(Fe,hYo),e(Fe,TF),e(TF,Mue),e(Mue,pYo),e(TF,uYo),e(TF,QX),e(QX,_Yo),e(TF,bYo),e(Fe,vYo),e(Fe,MF),e(MF,Eue),e(Eue,FYo),e(MF,TYo),e(MF,HX),e(HX,MYo),e(MF,EYo),e(Fe,CYo),e(Fe,EF),e(EF,Cue),e(Cue,wYo),e(EF,AYo),e(EF,UX),e(UX,yYo),e(EF,LYo),e(lo,xYo),e(lo,CF),e(CF,$Yo),e(CF,wue),e(wue,kYo),e(CF,SYo),e(CF,Aue),e(Aue,RYo),e(lo,PYo),M(wF,lo,null),b(f,rje,_),b(f,id,_),e(id,AF),e(AF,yue),M(cL,yue,null),e(id,BYo),e(id,Lue),e(Lue,IYo),b(f,tje,_),b(f,Do,_),M(fL,Do,null),e(Do,NYo),e(Do,dd),e(dd,qYo),e(dd,JX),e(JX,jYo),e(dd,DYo),e(dd,YX),e(YX,GYo),e(dd,OYo),e(Do,VYo),e(Do,mL),e(mL,XYo),e(mL,xue),e(xue,zYo),e(mL,WYo),e(Do,QYo),e(Do,ut),M(gL,ut,null),e(ut,HYo),e(ut,$ue),e($ue,UYo),e(ut,JYo),e(ut,cd),e(cd,YYo),e(cd,kue),e(kue,KYo),e(cd,ZYo),e(cd,KX),e(KX,eKo),e(cd,oKo),e(ut,rKo),M(yF,ut,null),e(Do,tKo),e(Do,io),M(hL,io,null),e(io,aKo),e(io,Sue),e(Sue,nKo),e(io,sKo),e(io,Da),e(Da,lKo),e(Da,Rue),e(Rue,iKo),e(Da,dKo),e(Da,Pue),e(Pue,cKo),e(Da,fKo),e(Da,Bue),e(Bue,mKo),e(Da,gKo),e(io,hKo),e(io,Iue),e(Iue,LF),e(LF,Nue),e(Nue,pKo),e(LF,uKo),e(LF,ZX),e(ZX,_Ko),e(LF,bKo),e(io,vKo),e(io,xF),e(xF,FKo),e(xF,que),e(que,TKo),e(xF,MKo),e(xF,jue),e(jue,EKo),e(io,CKo),M($F,io,null),b(f,aje,_),b(f,fd,_),e(fd,kF),e(kF,Due),M(pL,Due,null),e(fd,wKo),e(fd,Gue),e(Gue,AKo),b(f,nje,_),b(f,Go,_),M(uL,Go,null),e(Go,yKo),e(Go,md),e(md,LKo),e(md,ez),e(ez,xKo),e(md,$Ko),e(md,oz),e(oz,kKo),e(md,SKo),e(Go,RKo),e(Go,_L),e(_L,PKo),e(_L,Oue),e(Oue,BKo),e(_L,IKo),e(Go,NKo),e(Go,_t),M(bL,_t,null),e(_t,qKo),e(_t,Vue),e(Vue,jKo),e(_t,DKo),e(_t,gd),e(gd,GKo),e(gd,Xue),e(Xue,OKo),e(gd,VKo),e(gd,rz),e(rz,XKo),e(gd,zKo),e(_t,WKo),M(SF,_t,null),e(Go,QKo),e(Go,co),M(vL,co,null),e(co,HKo),e(co,zue),e(zue,UKo),e(co,JKo),e(co,Ga),e(Ga,YKo),e(Ga,Wue),e(Wue,KKo),e(Ga,ZKo),e(Ga,Que),e(Que,eZo),e(Ga,oZo),e(Ga,Hue),e(Hue,rZo),e(Ga,tZo),e(co,aZo),e(co,ke),e(ke,RF),e(RF,Uue),e(Uue,nZo),e(RF,sZo),e(RF,tz),e(tz,lZo),e(RF,iZo),e(ke,dZo),e(ke,PF),e(PF,Jue),e(Jue,cZo),e(PF,fZo),e(PF,az),e(az,mZo),e(PF,gZo),e(ke,hZo),e(ke,BF),e(BF,Yue),e(Yue,pZo),e(BF,uZo),e(BF,nz),e(nz,_Zo),e(BF,bZo),e(ke,vZo),e(ke,IF),e(IF,Kue),e(Kue,FZo),e(IF,TZo),e(IF,sz),e(sz,MZo),e(IF,EZo),e(ke,CZo),e(ke,NF),e(NF,Zue),e(Zue,wZo),e(NF,AZo),e(NF,lz),e(lz,yZo),e(NF,LZo),e(ke,xZo),e(ke,qF),e(qF,e_e),e(e_e,$Zo),e(qF,kZo),e(qF,iz),e(iz,SZo),e(qF,RZo),e(ke,PZo),e(ke,jF),e(jF,o_e),e(o_e,BZo),e(jF,IZo),e(jF,dz),e(dz,NZo),e(jF,qZo),e(ke,jZo),e(ke,DF),e(DF,r_e),e(r_e,DZo),e(DF,GZo),e(DF,cz),e(cz,OZo),e(DF,VZo),e(ke,XZo),e(ke,GF),e(GF,t_e),e(t_e,zZo),e(GF,WZo),e(GF,fz),e(fz,QZo),e(GF,HZo),e(co,UZo),e(co,OF),e(OF,JZo),e(OF,a_e),e(a_e,YZo),e(OF,KZo),e(OF,n_e),e(n_e,ZZo),e(co,eer),M(VF,co,null),b(f,sje,_),b(f,hd,_),e(hd,XF),e(XF,s_e),M(FL,s_e,null),e(hd,oer),e(hd,l_e),e(l_e,rer),b(f,lje,_),b(f,Oo,_),M(TL,Oo,null),e(Oo,ter),e(Oo,pd),e(pd,aer),e(pd,mz),e(mz,ner),e(pd,ser),e(pd,gz),e(gz,ler),e(pd,ier),e(Oo,der),e(Oo,ML),e(ML,cer),e(ML,i_e),e(i_e,fer),e(ML,mer),e(Oo,ger),e(Oo,bt),M(EL,bt,null),e(bt,her),e(bt,d_e),e(d_e,per),e(bt,uer),e(bt,ud),e(ud,_er),e(ud,c_e),e(c_e,ber),e(ud,ver),e(ud,hz),e(hz,Fer),e(ud,Ter),e(bt,Mer),M(zF,bt,null),e(Oo,Eer),e(Oo,fo),M(CL,fo,null),e(fo,Cer),e(fo,f_e),e(f_e,wer),e(fo,Aer),e(fo,Oa),e(Oa,yer),e(Oa,m_e),e(m_e,Ler),e(Oa,xer),e(Oa,g_e),e(g_e,$er),e(Oa,ker),e(Oa,h_e),e(h_e,Ser),e(Oa,Rer),e(fo,Per),e(fo,Kr),e(Kr,WF),e(WF,p_e),e(p_e,Ber),e(WF,Ier),e(WF,pz),e(pz,Ner),e(WF,qer),e(Kr,jer),e(Kr,QF),e(QF,u_e),e(u_e,Der),e(QF,Ger),e(QF,uz),e(uz,Oer),e(QF,Ver),e(Kr,Xer),e(Kr,HF),e(HF,__e),e(__e,zer),e(HF,Wer),e(HF,_z),e(_z,Qer),e(HF,Her),e(Kr,Uer),e(Kr,UF),e(UF,b_e),e(b_e,Jer),e(UF,Yer),e(UF,bz),e(bz,Ker),e(UF,Zer),e(Kr,eor),e(Kr,JF),e(JF,v_e),e(v_e,oor),e(JF,ror),e(JF,vz),e(vz,tor),e(JF,aor),e(fo,nor),e(fo,YF),e(YF,sor),e(YF,F_e),e(F_e,lor),e(YF,ior),e(YF,T_e),e(T_e,dor),e(fo,cor),M(KF,fo,null),b(f,ije,_),b(f,_d,_),e(_d,ZF),e(ZF,M_e),M(wL,M_e,null),e(_d,mor),e(_d,E_e),e(E_e,gor),b(f,dje,_),b(f,Vo,_),M(AL,Vo,null),e(Vo,hor),e(Vo,bd),e(bd,por),e(bd,Fz),e(Fz,uor),e(bd,_or),e(bd,Tz),e(Tz,bor),e(bd,vor),e(Vo,For),e(Vo,yL),e(yL,Tor),e(yL,C_e),e(C_e,Mor),e(yL,Eor),e(Vo,Cor),e(Vo,vt),M(LL,vt,null),e(vt,wor),e(vt,w_e),e(w_e,Aor),e(vt,yor),e(vt,vd),e(vd,Lor),e(vd,A_e),e(A_e,xor),e(vd,$or),e(vd,Mz),e(Mz,kor),e(vd,Sor),e(vt,Ror),M(eT,vt,null),e(Vo,Por),e(Vo,mo),M(xL,mo,null),e(mo,Bor),e(mo,y_e),e(y_e,Ior),e(mo,Nor),e(mo,Va),e(Va,qor),e(Va,L_e),e(L_e,jor),e(Va,Dor),e(Va,x_e),e(x_e,Gor),e(Va,Oor),e(Va,$_e),e($_e,Vor),e(Va,Xor),e(mo,zor),e(mo,Se),e(Se,oT),e(oT,k_e),e(k_e,Wor),e(oT,Qor),e(oT,Ez),e(Ez,Hor),e(oT,Uor),e(Se,Jor),e(Se,rT),e(rT,S_e),e(S_e,Yor),e(rT,Kor),e(rT,Cz),e(Cz,Zor),e(rT,err),e(Se,orr),e(Se,tT),e(tT,R_e),e(R_e,rrr),e(tT,trr),e(tT,wz),e(wz,arr),e(tT,nrr),e(Se,srr),e(Se,aT),e(aT,P_e),e(P_e,lrr),e(aT,irr),e(aT,Az),e(Az,drr),e(aT,crr),e(Se,frr),e(Se,nT),e(nT,B_e),e(B_e,mrr),e(nT,grr),e(nT,yz),e(yz,hrr),e(nT,prr),e(Se,urr),e(Se,sT),e(sT,I_e),e(I_e,_rr),e(sT,brr),e(sT,Lz),e(Lz,vrr),e(sT,Frr),e(Se,Trr),e(Se,lT),e(lT,N_e),e(N_e,Mrr),e(lT,Err),e(lT,xz),e(xz,Crr),e(lT,wrr),e(Se,Arr),e(Se,iT),e(iT,q_e),e(q_e,yrr),e(iT,Lrr),e(iT,$z),e($z,xrr),e(iT,$rr),e(Se,krr),e(Se,dT),e(dT,j_e),e(j_e,Srr),e(dT,Rrr),e(dT,kz),e(kz,Prr),e(dT,Brr),e(mo,Irr),e(mo,cT),e(cT,Nrr),e(cT,D_e),e(D_e,qrr),e(cT,jrr),e(cT,G_e),e(G_e,Drr),e(mo,Grr),M(fT,mo,null),b(f,cje,_),b(f,Fd,_),e(Fd,mT),e(mT,O_e),M($L,O_e,null),e(Fd,Orr),e(Fd,V_e),e(V_e,Vrr),b(f,fje,_),b(f,Xo,_),M(kL,Xo,null),e(Xo,Xrr),e(Xo,Td),e(Td,zrr),e(Td,Sz),e(Sz,Wrr),e(Td,Qrr),e(Td,Rz),e(Rz,Hrr),e(Td,Urr),e(Xo,Jrr),e(Xo,SL),e(SL,Yrr),e(SL,X_e),e(X_e,Krr),e(SL,Zrr),e(Xo,etr),e(Xo,Ft),M(RL,Ft,null),e(Ft,otr),e(Ft,z_e),e(z_e,rtr),e(Ft,ttr),e(Ft,Md),e(Md,atr),e(Md,W_e),e(W_e,ntr),e(Md,str),e(Md,Pz),e(Pz,ltr),e(Md,itr),e(Ft,dtr),M(gT,Ft,null),e(Xo,ctr),e(Xo,go),M(PL,go,null),e(go,ftr),e(go,Q_e),e(Q_e,mtr),e(go,gtr),e(go,Xa),e(Xa,htr),e(Xa,H_e),e(H_e,ptr),e(Xa,utr),e(Xa,U_e),e(U_e,_tr),e(Xa,btr),e(Xa,J_e),e(J_e,vtr),e(Xa,Ftr),e(go,Ttr),e(go,BL),e(BL,hT),e(hT,Y_e),e(Y_e,Mtr),e(hT,Etr),e(hT,Bz),e(Bz,Ctr),e(hT,wtr),e(BL,Atr),e(BL,pT),e(pT,K_e),e(K_e,ytr),e(pT,Ltr),e(pT,Iz),e(Iz,xtr),e(pT,$tr),e(go,ktr),e(go,uT),e(uT,Str),e(uT,Z_e),e(Z_e,Rtr),e(uT,Ptr),e(uT,e1e),e(e1e,Btr),e(go,Itr),M(_T,go,null),b(f,mje,_),b(f,Ed,_),e(Ed,bT),e(bT,o1e),M(IL,o1e,null),e(Ed,Ntr),e(Ed,r1e),e(r1e,qtr),b(f,gje,_),b(f,zo,_),M(NL,zo,null),e(zo,jtr),e(zo,Cd),e(Cd,Dtr),e(Cd,Nz),e(Nz,Gtr),e(Cd,Otr),e(Cd,qz),e(qz,Vtr),e(Cd,Xtr),e(zo,ztr),e(zo,qL),e(qL,Wtr),e(qL,t1e),e(t1e,Qtr),e(qL,Htr),e(zo,Utr),e(zo,Tt),M(jL,Tt,null),e(Tt,Jtr),e(Tt,a1e),e(a1e,Ytr),e(Tt,Ktr),e(Tt,wd),e(wd,Ztr),e(wd,n1e),e(n1e,ear),e(wd,oar),e(wd,jz),e(jz,rar),e(wd,tar),e(Tt,aar),M(vT,Tt,null),e(zo,nar),e(zo,ho),M(DL,ho,null),e(ho,sar),e(ho,s1e),e(s1e,lar),e(ho,iar),e(ho,za),e(za,dar),e(za,l1e),e(l1e,car),e(za,far),e(za,i1e),e(i1e,mar),e(za,gar),e(za,d1e),e(d1e,har),e(za,par),e(ho,uar),e(ho,Zr),e(Zr,FT),e(FT,c1e),e(c1e,_ar),e(FT,bar),e(FT,Dz),e(Dz,Far),e(FT,Tar),e(Zr,Mar),e(Zr,TT),e(TT,f1e),e(f1e,Ear),e(TT,Car),e(TT,Gz),e(Gz,war),e(TT,Aar),e(Zr,yar),e(Zr,MT),e(MT,m1e),e(m1e,Lar),e(MT,xar),e(MT,Oz),e(Oz,$ar),e(MT,kar),e(Zr,Sar),e(Zr,ET),e(ET,g1e),e(g1e,Rar),e(ET,Par),e(ET,Vz),e(Vz,Bar),e(ET,Iar),e(Zr,Nar),e(Zr,CT),e(CT,h1e),e(h1e,qar),e(CT,jar),e(CT,Xz),e(Xz,Dar),e(CT,Gar),e(ho,Oar),e(ho,wT),e(wT,Var),e(wT,p1e),e(p1e,Xar),e(wT,zar),e(wT,u1e),e(u1e,War),e(ho,Qar),M(AT,ho,null),b(f,hje,_),b(f,Ad,_),e(Ad,yT),e(yT,_1e),M(GL,_1e,null),e(Ad,Har),e(Ad,b1e),e(b1e,Uar),b(f,pje,_),b(f,Wo,_),M(OL,Wo,null),e(Wo,Jar),e(Wo,yd),e(yd,Yar),e(yd,zz),e(zz,Kar),e(yd,Zar),e(yd,Wz),e(Wz,enr),e(yd,onr),e(Wo,rnr),e(Wo,VL),e(VL,tnr),e(VL,v1e),e(v1e,anr),e(VL,nnr),e(Wo,snr),e(Wo,Mt),M(XL,Mt,null),e(Mt,lnr),e(Mt,F1e),e(F1e,inr),e(Mt,dnr),e(Mt,Ld),e(Ld,cnr),e(Ld,T1e),e(T1e,fnr),e(Ld,mnr),e(Ld,Qz),e(Qz,gnr),e(Ld,hnr),e(Mt,pnr),M(LT,Mt,null),e(Wo,unr),e(Wo,po),M(zL,po,null),e(po,_nr),e(po,M1e),e(M1e,bnr),e(po,vnr),e(po,Wa),e(Wa,Fnr),e(Wa,E1e),e(E1e,Tnr),e(Wa,Mnr),e(Wa,C1e),e(C1e,Enr),e(Wa,Cnr),e(Wa,w1e),e(w1e,wnr),e(Wa,Anr),e(po,ynr),e(po,xd),e(xd,xT),e(xT,A1e),e(A1e,Lnr),e(xT,xnr),e(xT,Hz),e(Hz,$nr),e(xT,knr),e(xd,Snr),e(xd,$T),e($T,y1e),e(y1e,Rnr),e($T,Pnr),e($T,Uz),e(Uz,Bnr),e($T,Inr),e(xd,Nnr),e(xd,kT),e(kT,L1e),e(L1e,qnr),e(kT,jnr),e(kT,Jz),e(Jz,Dnr),e(kT,Gnr),e(po,Onr),e(po,ST),e(ST,Vnr),e(ST,x1e),e(x1e,Xnr),e(ST,znr),e(ST,$1e),e($1e,Wnr),e(po,Qnr),M(RT,po,null),b(f,uje,_),b(f,$d,_),e($d,PT),e(PT,k1e),M(WL,k1e,null),e($d,Hnr),e($d,S1e),e(S1e,Unr),b(f,_je,_),b(f,Qo,_),M(QL,Qo,null),e(Qo,Jnr),e(Qo,kd),e(kd,Ynr),e(kd,Yz),e(Yz,Knr),e(kd,Znr),e(kd,Kz),e(Kz,esr),e(kd,osr),e(Qo,rsr),e(Qo,HL),e(HL,tsr),e(HL,R1e),e(R1e,asr),e(HL,nsr),e(Qo,ssr),e(Qo,Et),M(UL,Et,null),e(Et,lsr),e(Et,P1e),e(P1e,isr),e(Et,dsr),e(Et,Sd),e(Sd,csr),e(Sd,B1e),e(B1e,fsr),e(Sd,msr),e(Sd,Zz),e(Zz,gsr),e(Sd,hsr),e(Et,psr),M(BT,Et,null),e(Qo,usr),e(Qo,uo),M(JL,uo,null),e(uo,_sr),e(uo,I1e),e(I1e,bsr),e(uo,vsr),e(uo,Qa),e(Qa,Fsr),e(Qa,N1e),e(N1e,Tsr),e(Qa,Msr),e(Qa,q1e),e(q1e,Esr),e(Qa,Csr),e(Qa,j1e),e(j1e,wsr),e(Qa,Asr),e(uo,ysr),e(uo,YL),e(YL,IT),e(IT,D1e),e(D1e,Lsr),e(IT,xsr),e(IT,eW),e(eW,$sr),e(IT,ksr),e(YL,Ssr),e(YL,NT),e(NT,G1e),e(G1e,Rsr),e(NT,Psr),e(NT,oW),e(oW,Bsr),e(NT,Isr),e(uo,Nsr),e(uo,qT),e(qT,qsr),e(qT,O1e),e(O1e,jsr),e(qT,Dsr),e(qT,V1e),e(V1e,Gsr),e(uo,Osr),M(jT,uo,null),b(f,bje,_),b(f,Rd,_),e(Rd,DT),e(DT,X1e),M(KL,X1e,null),e(Rd,Vsr),e(Rd,z1e),e(z1e,Xsr),b(f,vje,_),b(f,Ho,_),M(ZL,Ho,null),e(Ho,zsr),e(Ho,Pd),e(Pd,Wsr),e(Pd,rW),e(rW,Qsr),e(Pd,Hsr),e(Pd,tW),e(tW,Usr),e(Pd,Jsr),e(Ho,Ysr),e(Ho,e8),e(e8,Ksr),e(e8,W1e),e(W1e,Zsr),e(e8,elr),e(Ho,olr),e(Ho,Ct),M(o8,Ct,null),e(Ct,rlr),e(Ct,Q1e),e(Q1e,tlr),e(Ct,alr),e(Ct,Bd),e(Bd,nlr),e(Bd,H1e),e(H1e,slr),e(Bd,llr),e(Bd,aW),e(aW,ilr),e(Bd,dlr),e(Ct,clr),M(GT,Ct,null),e(Ho,flr),e(Ho,_o),M(r8,_o,null),e(_o,mlr),e(_o,U1e),e(U1e,glr),e(_o,hlr),e(_o,Ha),e(Ha,plr),e(Ha,J1e),e(J1e,ulr),e(Ha,_lr),e(Ha,Y1e),e(Y1e,blr),e(Ha,vlr),e(Ha,K1e),e(K1e,Flr),e(Ha,Tlr),e(_o,Mlr),e(_o,Z1e),e(Z1e,OT),e(OT,e3e),e(e3e,Elr),e(OT,Clr),e(OT,nW),e(nW,wlr),e(OT,Alr),e(_o,ylr),e(_o,VT),e(VT,Llr),e(VT,o3e),e(o3e,xlr),e(VT,$lr),e(VT,r3e),e(r3e,klr),e(_o,Slr),M(XT,_o,null),b(f,Fje,_),b(f,Id,_),e(Id,zT),e(zT,t3e),M(t8,t3e,null),e(Id,Rlr),e(Id,a3e),e(a3e,Plr),b(f,Tje,_),b(f,Uo,_),M(a8,Uo,null),e(Uo,Blr),e(Uo,Nd),e(Nd,Ilr),e(Nd,sW),e(sW,Nlr),e(Nd,qlr),e(Nd,lW),e(lW,jlr),e(Nd,Dlr),e(Uo,Glr),e(Uo,n8),e(n8,Olr),e(n8,n3e),e(n3e,Vlr),e(n8,Xlr),e(Uo,zlr),e(Uo,wt),M(s8,wt,null),e(wt,Wlr),e(wt,s3e),e(s3e,Qlr),e(wt,Hlr),e(wt,qd),e(qd,Ulr),e(qd,l3e),e(l3e,Jlr),e(qd,Ylr),e(qd,iW),e(iW,Klr),e(qd,Zlr),e(wt,eir),M(WT,wt,null),e(Uo,oir),e(Uo,bo),M(l8,bo,null),e(bo,rir),e(bo,i3e),e(i3e,tir),e(bo,air),e(bo,Ua),e(Ua,nir),e(Ua,d3e),e(d3e,sir),e(Ua,lir),e(Ua,c3e),e(c3e,iir),e(Ua,dir),e(Ua,f3e),e(f3e,cir),e(Ua,fir),e(bo,mir),e(bo,Ja),e(Ja,QT),e(QT,m3e),e(m3e,gir),e(QT,hir),e(QT,dW),e(dW,pir),e(QT,uir),e(Ja,_ir),e(Ja,HT),e(HT,g3e),e(g3e,bir),e(HT,vir),e(HT,cW),e(cW,Fir),e(HT,Tir),e(Ja,Mir),e(Ja,UT),e(UT,h3e),e(h3e,Eir),e(UT,Cir),e(UT,fW),e(fW,wir),e(UT,Air),e(Ja,yir),e(Ja,JT),e(JT,p3e),e(p3e,Lir),e(JT,xir),e(JT,mW),e(mW,$ir),e(JT,kir),e(bo,Sir),e(bo,YT),e(YT,Rir),e(YT,u3e),e(u3e,Pir),e(YT,Bir),e(YT,_3e),e(_3e,Iir),e(bo,Nir),M(KT,bo,null),b(f,Mje,_),b(f,jd,_),e(jd,ZT),e(ZT,b3e),M(i8,b3e,null),e(jd,qir),e(jd,v3e),e(v3e,jir),b(f,Eje,_),b(f,Jo,_),M(d8,Jo,null),e(Jo,Dir),e(Jo,Dd),e(Dd,Gir),e(Dd,gW),e(gW,Oir),e(Dd,Vir),e(Dd,hW),e(hW,Xir),e(Dd,zir),e(Jo,Wir),e(Jo,c8),e(c8,Qir),e(c8,F3e),e(F3e,Hir),e(c8,Uir),e(Jo,Jir),e(Jo,At),M(f8,At,null),e(At,Yir),e(At,T3e),e(T3e,Kir),e(At,Zir),e(At,Gd),e(Gd,edr),e(Gd,M3e),e(M3e,odr),e(Gd,rdr),e(Gd,pW),e(pW,tdr),e(Gd,adr),e(At,ndr),M(e7,At,null),e(Jo,sdr),e(Jo,vo),M(m8,vo,null),e(vo,ldr),e(vo,E3e),e(E3e,idr),e(vo,ddr),e(vo,Ya),e(Ya,cdr),e(Ya,C3e),e(C3e,fdr),e(Ya,mdr),e(Ya,w3e),e(w3e,gdr),e(Ya,hdr),e(Ya,A3e),e(A3e,pdr),e(Ya,udr),e(vo,_dr),e(vo,y3e),e(y3e,o7),e(o7,L3e),e(L3e,bdr),e(o7,vdr),e(o7,uW),e(uW,Fdr),e(o7,Tdr),e(vo,Mdr),e(vo,r7),e(r7,Edr),e(r7,x3e),e(x3e,Cdr),e(r7,wdr),e(r7,$3e),e($3e,Adr),e(vo,ydr),M(t7,vo,null),b(f,Cje,_),b(f,Od,_),e(Od,a7),e(a7,k3e),M(g8,k3e,null),e(Od,Ldr),e(Od,S3e),e(S3e,xdr),b(f,wje,_),b(f,Yo,_),M(h8,Yo,null),e(Yo,$dr),e(Yo,Vd),e(Vd,kdr),e(Vd,_W),e(_W,Sdr),e(Vd,Rdr),e(Vd,bW),e(bW,Pdr),e(Vd,Bdr),e(Yo,Idr),e(Yo,p8),e(p8,Ndr),e(p8,R3e),e(R3e,qdr),e(p8,jdr),e(Yo,Ddr),e(Yo,yt),M(u8,yt,null),e(yt,Gdr),e(yt,P3e),e(P3e,Odr),e(yt,Vdr),e(yt,Xd),e(Xd,Xdr),e(Xd,B3e),e(B3e,zdr),e(Xd,Wdr),e(Xd,vW),e(vW,Qdr),e(Xd,Hdr),e(yt,Udr),M(n7,yt,null),e(Yo,Jdr),e(Yo,wr),M(_8,wr,null),e(wr,Ydr),e(wr,I3e),e(I3e,Kdr),e(wr,Zdr),e(wr,Ka),e(Ka,ecr),e(Ka,N3e),e(N3e,ocr),e(Ka,rcr),e(Ka,q3e),e(q3e,tcr),e(Ka,acr),e(Ka,j3e),e(j3e,ncr),e(Ka,scr),e(wr,lcr),e(wr,q),e(q,s7),e(s7,D3e),e(D3e,icr),e(s7,dcr),e(s7,FW),e(FW,ccr),e(s7,fcr),e(q,mcr),e(q,l7),e(l7,G3e),e(G3e,gcr),e(l7,hcr),e(l7,TW),e(TW,pcr),e(l7,ucr),e(q,_cr),e(q,i7),e(i7,O3e),e(O3e,bcr),e(i7,vcr),e(i7,MW),e(MW,Fcr),e(i7,Tcr),e(q,Mcr),e(q,d7),e(d7,V3e),e(V3e,Ecr),e(d7,Ccr),e(d7,EW),e(EW,wcr),e(d7,Acr),e(q,ycr),e(q,c7),e(c7,X3e),e(X3e,Lcr),e(c7,xcr),e(c7,CW),e(CW,$cr),e(c7,kcr),e(q,Scr),e(q,f7),e(f7,z3e),e(z3e,Rcr),e(f7,Pcr),e(f7,wW),e(wW,Bcr),e(f7,Icr),e(q,Ncr),e(q,m7),e(m7,W3e),e(W3e,qcr),e(m7,jcr),e(m7,AW),e(AW,Dcr),e(m7,Gcr),e(q,Ocr),e(q,g7),e(g7,Q3e),e(Q3e,Vcr),e(g7,Xcr),e(g7,yW),e(yW,zcr),e(g7,Wcr),e(q,Qcr),e(q,h7),e(h7,H3e),e(H3e,Hcr),e(h7,Ucr),e(h7,LW),e(LW,Jcr),e(h7,Ycr),e(q,Kcr),e(q,p7),e(p7,U3e),e(U3e,Zcr),e(p7,efr),e(p7,xW),e(xW,ofr),e(p7,rfr),e(q,tfr),e(q,u7),e(u7,J3e),e(J3e,afr),e(u7,nfr),e(u7,$W),e($W,sfr),e(u7,lfr),e(q,ifr),e(q,_7),e(_7,Y3e),e(Y3e,dfr),e(_7,cfr),e(_7,kW),e(kW,ffr),e(_7,mfr),e(q,gfr),e(q,b7),e(b7,K3e),e(K3e,hfr),e(b7,pfr),e(b7,SW),e(SW,ufr),e(b7,_fr),e(q,bfr),e(q,v7),e(v7,Z3e),e(Z3e,vfr),e(v7,Ffr),e(v7,RW),e(RW,Tfr),e(v7,Mfr),e(q,Efr),e(q,F7),e(F7,ebe),e(ebe,Cfr),e(F7,wfr),e(F7,PW),e(PW,Afr),e(F7,yfr),e(q,Lfr),e(q,T7),e(T7,obe),e(obe,xfr),e(T7,$fr),e(T7,BW),e(BW,kfr),e(T7,Sfr),e(q,Rfr),e(q,M7),e(M7,rbe),e(rbe,Pfr),e(M7,Bfr),e(M7,IW),e(IW,Ifr),e(M7,Nfr),e(q,qfr),e(q,Ns),e(Ns,tbe),e(tbe,jfr),e(Ns,Dfr),e(Ns,NW),e(NW,Gfr),e(Ns,Ofr),e(Ns,qW),e(qW,Vfr),e(Ns,Xfr),e(q,zfr),e(q,E7),e(E7,abe),e(abe,Wfr),e(E7,Qfr),e(E7,jW),e(jW,Hfr),e(E7,Ufr),e(q,Jfr),e(q,C7),e(C7,nbe),e(nbe,Yfr),e(C7,Kfr),e(C7,DW),e(DW,Zfr),e(C7,emr),e(q,omr),e(q,w7),e(w7,sbe),e(sbe,rmr),e(w7,tmr),e(w7,GW),e(GW,amr),e(w7,nmr),e(q,smr),e(q,A7),e(A7,lbe),e(lbe,lmr),e(A7,imr),e(A7,OW),e(OW,dmr),e(A7,cmr),e(q,fmr),e(q,y7),e(y7,ibe),e(ibe,mmr),e(y7,gmr),e(y7,VW),e(VW,hmr),e(y7,pmr),e(q,umr),e(q,L7),e(L7,dbe),e(dbe,_mr),e(L7,bmr),e(L7,XW),e(XW,vmr),e(L7,Fmr),e(q,Tmr),e(q,x7),e(x7,cbe),e(cbe,Mmr),e(x7,Emr),e(x7,zW),e(zW,Cmr),e(x7,wmr),e(q,Amr),e(q,$7),e($7,fbe),e(fbe,ymr),e($7,Lmr),e($7,WW),e(WW,xmr),e($7,$mr),e(q,kmr),e(q,k7),e(k7,mbe),e(mbe,Smr),e(k7,Rmr),e(k7,QW),e(QW,Pmr),e(k7,Bmr),e(q,Imr),e(q,S7),e(S7,gbe),e(gbe,Nmr),e(S7,qmr),e(S7,HW),e(HW,jmr),e(S7,Dmr),e(q,Gmr),e(q,R7),e(R7,hbe),e(hbe,Omr),e(R7,Vmr),e(R7,UW),e(UW,Xmr),e(R7,zmr),e(q,Wmr),e(q,P7),e(P7,pbe),e(pbe,Qmr),e(P7,Hmr),e(P7,JW),e(JW,Umr),e(P7,Jmr),e(q,Ymr),e(q,B7),e(B7,ube),e(ube,Kmr),e(B7,Zmr),e(B7,YW),e(YW,egr),e(B7,ogr),e(q,rgr),e(q,I7),e(I7,_be),e(_be,tgr),e(I7,agr),e(I7,KW),e(KW,ngr),e(I7,sgr),e(q,lgr),e(q,N7),e(N7,bbe),e(bbe,igr),e(N7,dgr),e(N7,ZW),e(ZW,cgr),e(N7,fgr),e(q,mgr),e(q,q7),e(q7,vbe),e(vbe,ggr),e(q7,hgr),e(q7,eQ),e(eQ,pgr),e(q7,ugr),e(q,_gr),e(q,j7),e(j7,Fbe),e(Fbe,bgr),e(j7,vgr),e(j7,oQ),e(oQ,Fgr),e(j7,Tgr),e(q,Mgr),e(q,D7),e(D7,Tbe),e(Tbe,Egr),e(D7,Cgr),e(D7,rQ),e(rQ,wgr),e(D7,Agr),e(q,ygr),e(q,G7),e(G7,Mbe),e(Mbe,Lgr),e(G7,xgr),e(G7,tQ),e(tQ,$gr),e(G7,kgr),e(q,Sgr),e(q,O7),e(O7,Ebe),e(Ebe,Rgr),e(O7,Pgr),e(O7,aQ),e(aQ,Bgr),e(O7,Igr),e(q,Ngr),e(q,V7),e(V7,Cbe),e(Cbe,qgr),e(V7,jgr),e(V7,nQ),e(nQ,Dgr),e(V7,Ggr),e(q,Ogr),e(q,X7),e(X7,wbe),e(wbe,Vgr),e(X7,Xgr),e(X7,sQ),e(sQ,zgr),e(X7,Wgr),e(q,Qgr),e(q,z7),e(z7,Abe),e(Abe,Hgr),e(z7,Ugr),e(z7,lQ),e(lQ,Jgr),e(z7,Ygr),e(q,Kgr),e(q,W7),e(W7,ybe),e(ybe,Zgr),e(W7,ehr),e(W7,iQ),e(iQ,ohr),e(W7,rhr),e(q,thr),e(q,Q7),e(Q7,Lbe),e(Lbe,ahr),e(Q7,nhr),e(Q7,dQ),e(dQ,shr),e(Q7,lhr),e(q,ihr),e(q,H7),e(H7,xbe),e(xbe,dhr),e(H7,chr),e(H7,cQ),e(cQ,fhr),e(H7,mhr),e(q,ghr),e(q,U7),e(U7,$be),e($be,hhr),e(U7,phr),e(U7,fQ),e(fQ,uhr),e(U7,_hr),e(q,bhr),e(q,J7),e(J7,kbe),e(kbe,vhr),e(J7,Fhr),e(J7,mQ),e(mQ,Thr),e(J7,Mhr),e(wr,Ehr),M(Y7,wr,null),b(f,Aje,_),b(f,zd,_),e(zd,K7),e(K7,Sbe),M(b8,Sbe,null),e(zd,Chr),e(zd,Rbe),e(Rbe,whr),b(f,yje,_),b(f,Ko,_),M(v8,Ko,null),e(Ko,Ahr),e(Ko,Wd),e(Wd,yhr),e(Wd,gQ),e(gQ,Lhr),e(Wd,xhr),e(Wd,hQ),e(hQ,$hr),e(Wd,khr),e(Ko,Shr),e(Ko,F8),e(F8,Rhr),e(F8,Pbe),e(Pbe,Phr),e(F8,Bhr),e(Ko,Ihr),e(Ko,Lt),M(T8,Lt,null),e(Lt,Nhr),e(Lt,Bbe),e(Bbe,qhr),e(Lt,jhr),e(Lt,Qd),e(Qd,Dhr),e(Qd,Ibe),e(Ibe,Ghr),e(Qd,Ohr),e(Qd,pQ),e(pQ,Vhr),e(Qd,Xhr),e(Lt,zhr),M(Z7,Lt,null),e(Ko,Whr),e(Ko,Ar),M(M8,Ar,null),e(Ar,Qhr),e(Ar,Nbe),e(Nbe,Hhr),e(Ar,Uhr),e(Ar,Za),e(Za,Jhr),e(Za,qbe),e(qbe,Yhr),e(Za,Khr),e(Za,jbe),e(jbe,Zhr),e(Za,epr),e(Za,Dbe),e(Dbe,opr),e(Za,rpr),e(Ar,tpr),e(Ar,se),e(se,eM),e(eM,Gbe),e(Gbe,apr),e(eM,npr),e(eM,uQ),e(uQ,spr),e(eM,lpr),e(se,ipr),e(se,oM),e(oM,Obe),e(Obe,dpr),e(oM,cpr),e(oM,_Q),e(_Q,fpr),e(oM,mpr),e(se,gpr),e(se,rM),e(rM,Vbe),e(Vbe,hpr),e(rM,ppr),e(rM,bQ),e(bQ,upr),e(rM,_pr),e(se,bpr),e(se,tM),e(tM,Xbe),e(Xbe,vpr),e(tM,Fpr),e(tM,vQ),e(vQ,Tpr),e(tM,Mpr),e(se,Epr),e(se,aM),e(aM,zbe),e(zbe,Cpr),e(aM,wpr),e(aM,FQ),e(FQ,Apr),e(aM,ypr),e(se,Lpr),e(se,nM),e(nM,Wbe),e(Wbe,xpr),e(nM,$pr),e(nM,TQ),e(TQ,kpr),e(nM,Spr),e(se,Rpr),e(se,sM),e(sM,Qbe),e(Qbe,Ppr),e(sM,Bpr),e(sM,MQ),e(MQ,Ipr),e(sM,Npr),e(se,qpr),e(se,lM),e(lM,Hbe),e(Hbe,jpr),e(lM,Dpr),e(lM,EQ),e(EQ,Gpr),e(lM,Opr),e(se,Vpr),e(se,iM),e(iM,Ube),e(Ube,Xpr),e(iM,zpr),e(iM,CQ),e(CQ,Wpr),e(iM,Qpr),e(se,Hpr),e(se,dM),e(dM,Jbe),e(Jbe,Upr),e(dM,Jpr),e(dM,wQ),e(wQ,Ypr),e(dM,Kpr),e(se,Zpr),e(se,cM),e(cM,Ybe),e(Ybe,eur),e(cM,our),e(cM,AQ),e(AQ,rur),e(cM,tur),e(se,aur),e(se,fM),e(fM,Kbe),e(Kbe,nur),e(fM,sur),e(fM,yQ),e(yQ,lur),e(fM,iur),e(se,dur),e(se,mM),e(mM,Zbe),e(Zbe,cur),e(mM,fur),e(mM,LQ),e(LQ,mur),e(mM,gur),e(se,hur),e(se,gM),e(gM,e2e),e(e2e,pur),e(gM,uur),e(gM,xQ),e(xQ,_ur),e(gM,bur),e(se,vur),e(se,hM),e(hM,o2e),e(o2e,Fur),e(hM,Tur),e(hM,$Q),e($Q,Mur),e(hM,Eur),e(se,Cur),e(se,pM),e(pM,r2e),e(r2e,wur),e(pM,Aur),e(pM,kQ),e(kQ,yur),e(pM,Lur),e(se,xur),e(se,uM),e(uM,t2e),e(t2e,$ur),e(uM,kur),e(uM,SQ),e(SQ,Sur),e(uM,Rur),e(se,Pur),e(se,_M),e(_M,a2e),e(a2e,Bur),e(_M,Iur),e(_M,RQ),e(RQ,Nur),e(_M,qur),e(se,jur),e(se,bM),e(bM,n2e),e(n2e,Dur),e(bM,Gur),e(bM,PQ),e(PQ,Our),e(bM,Vur),e(se,Xur),e(se,vM),e(vM,s2e),e(s2e,zur),e(vM,Wur),e(vM,BQ),e(BQ,Qur),e(vM,Hur),e(se,Uur),e(se,FM),e(FM,l2e),e(l2e,Jur),e(FM,Yur),e(FM,IQ),e(IQ,Kur),e(FM,Zur),e(se,e_r),e(se,TM),e(TM,i2e),e(i2e,o_r),e(TM,r_r),e(TM,NQ),e(NQ,t_r),e(TM,a_r),e(se,n_r),e(se,MM),e(MM,d2e),e(d2e,s_r),e(MM,l_r),e(MM,qQ),e(qQ,i_r),e(MM,d_r),e(Ar,c_r),M(EM,Ar,null),b(f,Lje,_),b(f,Hd,_),e(Hd,CM),e(CM,c2e),M(E8,c2e,null),e(Hd,f_r),e(Hd,f2e),e(f2e,m_r),b(f,xje,_),b(f,Zo,_),M(C8,Zo,null),e(Zo,g_r),e(Zo,Ud),e(Ud,h_r),e(Ud,jQ),e(jQ,p_r),e(Ud,u_r),e(Ud,DQ),e(DQ,__r),e(Ud,b_r),e(Zo,v_r),e(Zo,w8),e(w8,F_r),e(w8,m2e),e(m2e,T_r),e(w8,M_r),e(Zo,E_r),e(Zo,xt),M(A8,xt,null),e(xt,C_r),e(xt,g2e),e(g2e,w_r),e(xt,A_r),e(xt,Jd),e(Jd,y_r),e(Jd,h2e),e(h2e,L_r),e(Jd,x_r),e(Jd,GQ),e(GQ,$_r),e(Jd,k_r),e(xt,S_r),M(wM,xt,null),e(Zo,R_r),e(Zo,yr),M(y8,yr,null),e(yr,P_r),e(yr,p2e),e(p2e,B_r),e(yr,I_r),e(yr,en),e(en,N_r),e(en,u2e),e(u2e,q_r),e(en,j_r),e(en,_2e),e(_2e,D_r),e(en,G_r),e(en,b2e),e(b2e,O_r),e(en,V_r),e(yr,X_r),e(yr,Me),e(Me,AM),e(AM,v2e),e(v2e,z_r),e(AM,W_r),e(AM,OQ),e(OQ,Q_r),e(AM,H_r),e(Me,U_r),e(Me,yM),e(yM,F2e),e(F2e,J_r),e(yM,Y_r),e(yM,VQ),e(VQ,K_r),e(yM,Z_r),e(Me,e1r),e(Me,LM),e(LM,T2e),e(T2e,o1r),e(LM,r1r),e(LM,XQ),e(XQ,t1r),e(LM,a1r),e(Me,n1r),e(Me,xM),e(xM,M2e),e(M2e,s1r),e(xM,l1r),e(xM,zQ),e(zQ,i1r),e(xM,d1r),e(Me,c1r),e(Me,$M),e($M,E2e),e(E2e,f1r),e($M,m1r),e($M,WQ),e(WQ,g1r),e($M,h1r),e(Me,p1r),e(Me,kM),e(kM,C2e),e(C2e,u1r),e(kM,_1r),e(kM,QQ),e(QQ,b1r),e(kM,v1r),e(Me,F1r),e(Me,SM),e(SM,w2e),e(w2e,T1r),e(SM,M1r),e(SM,HQ),e(HQ,E1r),e(SM,C1r),e(Me,w1r),e(Me,RM),e(RM,A2e),e(A2e,A1r),e(RM,y1r),e(RM,UQ),e(UQ,L1r),e(RM,x1r),e(Me,$1r),e(Me,PM),e(PM,y2e),e(y2e,k1r),e(PM,S1r),e(PM,JQ),e(JQ,R1r),e(PM,P1r),e(Me,B1r),e(Me,BM),e(BM,L2e),e(L2e,I1r),e(BM,N1r),e(BM,YQ),e(YQ,q1r),e(BM,j1r),e(Me,D1r),e(Me,IM),e(IM,x2e),e(x2e,G1r),e(IM,O1r),e(IM,KQ),e(KQ,V1r),e(IM,X1r),e(Me,z1r),e(Me,NM),e(NM,$2e),e($2e,W1r),e(NM,Q1r),e(NM,ZQ),e(ZQ,H1r),e(NM,U1r),e(yr,J1r),M(qM,yr,null),b(f,$je,_),b(f,Yd,_),e(Yd,jM),e(jM,k2e),M(L8,k2e,null),e(Yd,Y1r),e(Yd,S2e),e(S2e,K1r),b(f,kje,_),b(f,er,_),M(x8,er,null),e(er,Z1r),e(er,Kd),e(Kd,e3r),e(Kd,eH),e(eH,o3r),e(Kd,r3r),e(Kd,oH),e(oH,t3r),e(Kd,a3r),e(er,n3r),e(er,$8),e($8,s3r),e($8,R2e),e(R2e,l3r),e($8,i3r),e(er,d3r),e(er,$t),M(k8,$t,null),e($t,c3r),e($t,P2e),e(P2e,f3r),e($t,m3r),e($t,Zd),e(Zd,g3r),e(Zd,B2e),e(B2e,h3r),e(Zd,p3r),e(Zd,rH),e(rH,u3r),e(Zd,_3r),e($t,b3r),M(DM,$t,null),e(er,v3r),e(er,Lr),M(S8,Lr,null),e(Lr,F3r),e(Lr,I2e),e(I2e,T3r),e(Lr,M3r),e(Lr,on),e(on,E3r),e(on,N2e),e(N2e,C3r),e(on,w3r),e(on,q2e),e(q2e,A3r),e(on,y3r),e(on,j2e),e(j2e,L3r),e(on,x3r),e(Lr,$3r),e(Lr,rn),e(rn,GM),e(GM,D2e),e(D2e,k3r),e(GM,S3r),e(GM,tH),e(tH,R3r),e(GM,P3r),e(rn,B3r),e(rn,OM),e(OM,G2e),e(G2e,I3r),e(OM,N3r),e(OM,aH),e(aH,q3r),e(OM,j3r),e(rn,D3r),e(rn,VM),e(VM,O2e),e(O2e,G3r),e(VM,O3r),e(VM,nH),e(nH,V3r),e(VM,X3r),e(rn,z3r),e(rn,XM),e(XM,V2e),e(V2e,W3r),e(XM,Q3r),e(XM,sH),e(sH,H3r),e(XM,U3r),e(Lr,J3r),M(zM,Lr,null),b(f,Sje,_),b(f,ec,_),e(ec,WM),e(WM,X2e),M(R8,X2e,null),e(ec,Y3r),e(ec,z2e),e(z2e,K3r),b(f,Rje,_),b(f,or,_),M(P8,or,null),e(or,Z3r),e(or,oc),e(oc,ebr),e(oc,lH),e(lH,obr),e(oc,rbr),e(oc,iH),e(iH,tbr),e(oc,abr),e(or,nbr),e(or,B8),e(B8,sbr),e(B8,W2e),e(W2e,lbr),e(B8,ibr),e(or,dbr),e(or,kt),M(I8,kt,null),e(kt,cbr),e(kt,Q2e),e(Q2e,fbr),e(kt,mbr),e(kt,rc),e(rc,gbr),e(rc,H2e),e(H2e,hbr),e(rc,pbr),e(rc,dH),e(dH,ubr),e(rc,_br),e(kt,bbr),M(QM,kt,null),e(or,vbr),e(or,xr),M(N8,xr,null),e(xr,Fbr),e(xr,U2e),e(U2e,Tbr),e(xr,Mbr),e(xr,tn),e(tn,Ebr),e(tn,J2e),e(J2e,Cbr),e(tn,wbr),e(tn,Y2e),e(Y2e,Abr),e(tn,ybr),e(tn,K2e),e(K2e,Lbr),e(tn,xbr),e(xr,$br),e(xr,ie),e(ie,HM),e(HM,Z2e),e(Z2e,kbr),e(HM,Sbr),e(HM,cH),e(cH,Rbr),e(HM,Pbr),e(ie,Bbr),e(ie,UM),e(UM,eve),e(eve,Ibr),e(UM,Nbr),e(UM,fH),e(fH,qbr),e(UM,jbr),e(ie,Dbr),e(ie,JM),e(JM,ove),e(ove,Gbr),e(JM,Obr),e(JM,mH),e(mH,Vbr),e(JM,Xbr),e(ie,zbr),e(ie,YM),e(YM,rve),e(rve,Wbr),e(YM,Qbr),e(YM,gH),e(gH,Hbr),e(YM,Ubr),e(ie,Jbr),e(ie,KM),e(KM,tve),e(tve,Ybr),e(KM,Kbr),e(KM,hH),e(hH,Zbr),e(KM,e2r),e(ie,o2r),e(ie,ZM),e(ZM,ave),e(ave,r2r),e(ZM,t2r),e(ZM,pH),e(pH,a2r),e(ZM,n2r),e(ie,s2r),e(ie,e4),e(e4,nve),e(nve,l2r),e(e4,i2r),e(e4,uH),e(uH,d2r),e(e4,c2r),e(ie,f2r),e(ie,o4),e(o4,sve),e(sve,m2r),e(o4,g2r),e(o4,_H),e(_H,h2r),e(o4,p2r),e(ie,u2r),e(ie,r4),e(r4,lve),e(lve,_2r),e(r4,b2r),e(r4,bH),e(bH,v2r),e(r4,F2r),e(ie,T2r),e(ie,t4),e(t4,ive),e(ive,M2r),e(t4,E2r),e(t4,vH),e(vH,C2r),e(t4,w2r),e(ie,A2r),e(ie,a4),e(a4,dve),e(dve,y2r),e(a4,L2r),e(a4,FH),e(FH,x2r),e(a4,$2r),e(ie,k2r),e(ie,n4),e(n4,cve),e(cve,S2r),e(n4,R2r),e(n4,TH),e(TH,P2r),e(n4,B2r),e(ie,I2r),e(ie,s4),e(s4,fve),e(fve,N2r),e(s4,q2r),e(s4,MH),e(MH,j2r),e(s4,D2r),e(ie,G2r),e(ie,l4),e(l4,mve),e(mve,O2r),e(l4,V2r),e(l4,EH),e(EH,X2r),e(l4,z2r),e(ie,W2r),e(ie,i4),e(i4,gve),e(gve,Q2r),e(i4,H2r),e(i4,CH),e(CH,U2r),e(i4,J2r),e(ie,Y2r),e(ie,d4),e(d4,hve),e(hve,K2r),e(d4,Z2r),e(d4,wH),e(wH,evr),e(d4,ovr),e(ie,rvr),e(ie,c4),e(c4,pve),e(pve,tvr),e(c4,avr),e(c4,AH),e(AH,nvr),e(c4,svr),e(ie,lvr),e(ie,f4),e(f4,uve),e(uve,ivr),e(f4,dvr),e(f4,yH),e(yH,cvr),e(f4,fvr),e(ie,mvr),e(ie,m4),e(m4,_ve),e(_ve,gvr),e(m4,hvr),e(m4,LH),e(LH,pvr),e(m4,uvr),e(ie,_vr),e(ie,g4),e(g4,bve),e(bve,bvr),e(g4,vvr),e(g4,xH),e(xH,Fvr),e(g4,Tvr),e(xr,Mvr),M(h4,xr,null),b(f,Pje,_),b(f,tc,_),e(tc,p4),e(p4,vve),M(q8,vve,null),e(tc,Evr),e(tc,Fve),e(Fve,Cvr),b(f,Bje,_),b(f,rr,_),M(j8,rr,null),e(rr,wvr),e(rr,ac),e(ac,Avr),e(ac,$H),e($H,yvr),e(ac,Lvr),e(ac,kH),e(kH,xvr),e(ac,$vr),e(rr,kvr),e(rr,D8),e(D8,Svr),e(D8,Tve),e(Tve,Rvr),e(D8,Pvr),e(rr,Bvr),e(rr,St),M(G8,St,null),e(St,Ivr),e(St,Mve),e(Mve,Nvr),e(St,qvr),e(St,nc),e(nc,jvr),e(nc,Eve),e(Eve,Dvr),e(nc,Gvr),e(nc,SH),e(SH,Ovr),e(nc,Vvr),e(St,Xvr),M(u4,St,null),e(rr,zvr),e(rr,$r),M(O8,$r,null),e($r,Wvr),e($r,Cve),e(Cve,Qvr),e($r,Hvr),e($r,an),e(an,Uvr),e(an,wve),e(wve,Jvr),e(an,Yvr),e(an,Ave),e(Ave,Kvr),e(an,Zvr),e(an,yve),e(yve,eFr),e(an,oFr),e($r,rFr),e($r,ye),e(ye,_4),e(_4,Lve),e(Lve,tFr),e(_4,aFr),e(_4,RH),e(RH,nFr),e(_4,sFr),e(ye,lFr),e(ye,b4),e(b4,xve),e(xve,iFr),e(b4,dFr),e(b4,PH),e(PH,cFr),e(b4,fFr),e(ye,mFr),e(ye,v4),e(v4,$ve),e($ve,gFr),e(v4,hFr),e(v4,BH),e(BH,pFr),e(v4,uFr),e(ye,_Fr),e(ye,F4),e(F4,kve),e(kve,bFr),e(F4,vFr),e(F4,IH),e(IH,FFr),e(F4,TFr),e(ye,MFr),e(ye,T4),e(T4,Sve),e(Sve,EFr),e(T4,CFr),e(T4,NH),e(NH,wFr),e(T4,AFr),e(ye,yFr),e(ye,M4),e(M4,Rve),e(Rve,LFr),e(M4,xFr),e(M4,qH),e(qH,$Fr),e(M4,kFr),e(ye,SFr),e(ye,E4),e(E4,Pve),e(Pve,RFr),e(E4,PFr),e(E4,jH),e(jH,BFr),e(E4,IFr),e(ye,NFr),e(ye,C4),e(C4,Bve),e(Bve,qFr),e(C4,jFr),e(C4,DH),e(DH,DFr),e(C4,GFr),e(ye,OFr),e(ye,w4),e(w4,Ive),e(Ive,VFr),e(w4,XFr),e(w4,GH),e(GH,zFr),e(w4,WFr),e(ye,QFr),e(ye,A4),e(A4,Nve),e(Nve,HFr),e(A4,UFr),e(A4,OH),e(OH,JFr),e(A4,YFr),e($r,KFr),M(y4,$r,null),b(f,Ije,_),b(f,sc,_),e(sc,L4),e(L4,qve),M(V8,qve,null),e(sc,ZFr),e(sc,jve),e(jve,eTr),b(f,Nje,_),b(f,tr,_),M(X8,tr,null),e(tr,oTr),e(tr,lc),e(lc,rTr),e(lc,VH),e(VH,tTr),e(lc,aTr),e(lc,XH),e(XH,nTr),e(lc,sTr),e(tr,lTr),e(tr,z8),e(z8,iTr),e(z8,Dve),e(Dve,dTr),e(z8,cTr),e(tr,fTr),e(tr,Rt),M(W8,Rt,null),e(Rt,mTr),e(Rt,Gve),e(Gve,gTr),e(Rt,hTr),e(Rt,ic),e(ic,pTr),e(ic,Ove),e(Ove,uTr),e(ic,_Tr),e(ic,zH),e(zH,bTr),e(ic,vTr),e(Rt,FTr),M(x4,Rt,null),e(tr,TTr),e(tr,kr),M(Q8,kr,null),e(kr,MTr),e(kr,Vve),e(Vve,ETr),e(kr,CTr),e(kr,nn),e(nn,wTr),e(nn,Xve),e(Xve,ATr),e(nn,yTr),e(nn,zve),e(zve,LTr),e(nn,xTr),e(nn,Wve),e(Wve,$Tr),e(nn,kTr),e(kr,STr),e(kr,oe),e(oe,$4),e($4,Qve),e(Qve,RTr),e($4,PTr),e($4,WH),e(WH,BTr),e($4,ITr),e(oe,NTr),e(oe,k4),e(k4,Hve),e(Hve,qTr),e(k4,jTr),e(k4,QH),e(QH,DTr),e(k4,GTr),e(oe,OTr),e(oe,S4),e(S4,Uve),e(Uve,VTr),e(S4,XTr),e(S4,HH),e(HH,zTr),e(S4,WTr),e(oe,QTr),e(oe,R4),e(R4,Jve),e(Jve,HTr),e(R4,UTr),e(R4,UH),e(UH,JTr),e(R4,YTr),e(oe,KTr),e(oe,P4),e(P4,Yve),e(Yve,ZTr),e(P4,e7r),e(P4,JH),e(JH,o7r),e(P4,r7r),e(oe,t7r),e(oe,B4),e(B4,Kve),e(Kve,a7r),e(B4,n7r),e(B4,YH),e(YH,s7r),e(B4,l7r),e(oe,i7r),e(oe,I4),e(I4,Zve),e(Zve,d7r),e(I4,c7r),e(I4,KH),e(KH,f7r),e(I4,m7r),e(oe,g7r),e(oe,N4),e(N4,eFe),e(eFe,h7r),e(N4,p7r),e(N4,ZH),e(ZH,u7r),e(N4,_7r),e(oe,b7r),e(oe,q4),e(q4,oFe),e(oFe,v7r),e(q4,F7r),e(q4,eU),e(eU,T7r),e(q4,M7r),e(oe,E7r),e(oe,j4),e(j4,rFe),e(rFe,C7r),e(j4,w7r),e(j4,oU),e(oU,A7r),e(j4,y7r),e(oe,L7r),e(oe,D4),e(D4,tFe),e(tFe,x7r),e(D4,$7r),e(D4,rU),e(rU,k7r),e(D4,S7r),e(oe,R7r),e(oe,G4),e(G4,aFe),e(aFe,P7r),e(G4,B7r),e(G4,tU),e(tU,I7r),e(G4,N7r),e(oe,q7r),e(oe,O4),e(O4,nFe),e(nFe,j7r),e(O4,D7r),e(O4,aU),e(aU,G7r),e(O4,O7r),e(oe,V7r),e(oe,V4),e(V4,sFe),e(sFe,X7r),e(V4,z7r),e(V4,nU),e(nU,W7r),e(V4,Q7r),e(oe,H7r),e(oe,X4),e(X4,lFe),e(lFe,U7r),e(X4,J7r),e(X4,sU),e(sU,Y7r),e(X4,K7r),e(oe,Z7r),e(oe,z4),e(z4,iFe),e(iFe,eMr),e(z4,oMr),e(z4,lU),e(lU,rMr),e(z4,tMr),e(oe,aMr),e(oe,W4),e(W4,dFe),e(dFe,nMr),e(W4,sMr),e(W4,iU),e(iU,lMr),e(W4,iMr),e(oe,dMr),e(oe,Q4),e(Q4,cFe),e(cFe,cMr),e(Q4,fMr),e(Q4,dU),e(dU,mMr),e(Q4,gMr),e(oe,hMr),e(oe,H4),e(H4,fFe),e(fFe,pMr),e(H4,uMr),e(H4,cU),e(cU,_Mr),e(H4,bMr),e(oe,vMr),e(oe,U4),e(U4,mFe),e(mFe,FMr),e(U4,TMr),e(U4,fU),e(fU,MMr),e(U4,EMr),e(oe,CMr),e(oe,J4),e(J4,gFe),e(gFe,wMr),e(J4,AMr),e(J4,mU),e(mU,yMr),e(J4,LMr),e(oe,xMr),e(oe,Y4),e(Y4,hFe),e(hFe,$Mr),e(Y4,kMr),e(Y4,gU),e(gU,SMr),e(Y4,RMr),e(oe,PMr),e(oe,K4),e(K4,pFe),e(pFe,BMr),e(K4,IMr),e(K4,hU),e(hU,NMr),e(K4,qMr),e(oe,jMr),e(oe,Z4),e(Z4,uFe),e(uFe,DMr),e(Z4,GMr),e(Z4,pU),e(pU,OMr),e(Z4,VMr),e(oe,XMr),e(oe,eE),e(eE,_Fe),e(_Fe,zMr),e(eE,WMr),e(eE,uU),e(uU,QMr),e(eE,HMr),e(oe,UMr),e(oe,oE),e(oE,bFe),e(bFe,JMr),e(oE,YMr),e(oE,_U),e(_U,KMr),e(oE,ZMr),e(kr,e4r),M(rE,kr,null),b(f,qje,_),b(f,dc,_),e(dc,tE),e(tE,vFe),M(H8,vFe,null),e(dc,o4r),e(dc,FFe),e(FFe,r4r),b(f,jje,_),b(f,ar,_),M(U8,ar,null),e(ar,t4r),e(ar,cc),e(cc,a4r),e(cc,bU),e(bU,n4r),e(cc,s4r),e(cc,vU),e(vU,l4r),e(cc,i4r),e(ar,d4r),e(ar,J8),e(J8,c4r),e(J8,TFe),e(TFe,f4r),e(J8,m4r),e(ar,g4r),e(ar,Pt),M(Y8,Pt,null),e(Pt,h4r),e(Pt,MFe),e(MFe,p4r),e(Pt,u4r),e(Pt,fc),e(fc,_4r),e(fc,EFe),e(EFe,b4r),e(fc,v4r),e(fc,FU),e(FU,F4r),e(fc,T4r),e(Pt,M4r),M(aE,Pt,null),e(ar,E4r),e(ar,Sr),M(K8,Sr,null),e(Sr,C4r),e(Sr,CFe),e(CFe,w4r),e(Sr,A4r),e(Sr,sn),e(sn,y4r),e(sn,wFe),e(wFe,L4r),e(sn,x4r),e(sn,AFe),e(AFe,$4r),e(sn,k4r),e(sn,yFe),e(yFe,S4r),e(sn,R4r),e(Sr,P4r),e(Sr,pe),e(pe,nE),e(nE,LFe),e(LFe,B4r),e(nE,I4r),e(nE,TU),e(TU,N4r),e(nE,q4r),e(pe,j4r),e(pe,sE),e(sE,xFe),e(xFe,D4r),e(sE,G4r),e(sE,MU),e(MU,O4r),e(sE,V4r),e(pe,X4r),e(pe,lE),e(lE,$Fe),e($Fe,z4r),e(lE,W4r),e(lE,EU),e(EU,Q4r),e(lE,H4r),e(pe,U4r),e(pe,iE),e(iE,kFe),e(kFe,J4r),e(iE,Y4r),e(iE,CU),e(CU,K4r),e(iE,Z4r),e(pe,eEr),e(pe,dE),e(dE,SFe),e(SFe,oEr),e(dE,rEr),e(dE,wU),e(wU,tEr),e(dE,aEr),e(pe,nEr),e(pe,cE),e(cE,RFe),e(RFe,sEr),e(cE,lEr),e(cE,AU),e(AU,iEr),e(cE,dEr),e(pe,cEr),e(pe,fE),e(fE,PFe),e(PFe,fEr),e(fE,mEr),e(fE,yU),e(yU,gEr),e(fE,hEr),e(pe,pEr),e(pe,mE),e(mE,BFe),e(BFe,uEr),e(mE,_Er),e(mE,LU),e(LU,bEr),e(mE,vEr),e(pe,FEr),e(pe,gE),e(gE,IFe),e(IFe,TEr),e(gE,MEr),e(gE,xU),e(xU,EEr),e(gE,CEr),e(pe,wEr),e(pe,hE),e(hE,NFe),e(NFe,AEr),e(hE,yEr),e(hE,$U),e($U,LEr),e(hE,xEr),e(pe,$Er),e(pe,pE),e(pE,qFe),e(qFe,kEr),e(pE,SEr),e(pE,kU),e(kU,REr),e(pE,PEr),e(pe,BEr),e(pe,uE),e(uE,jFe),e(jFe,IEr),e(uE,NEr),e(uE,SU),e(SU,qEr),e(uE,jEr),e(pe,DEr),e(pe,_E),e(_E,DFe),e(DFe,GEr),e(_E,OEr),e(_E,RU),e(RU,VEr),e(_E,XEr),e(pe,zEr),e(pe,bE),e(bE,GFe),e(GFe,WEr),e(bE,QEr),e(bE,PU),e(PU,HEr),e(bE,UEr),e(pe,JEr),e(pe,vE),e(vE,OFe),e(OFe,YEr),e(vE,KEr),e(vE,BU),e(BU,ZEr),e(vE,eCr),e(pe,oCr),e(pe,FE),e(FE,VFe),e(VFe,rCr),e(FE,tCr),e(FE,IU),e(IU,aCr),e(FE,nCr),e(pe,sCr),e(pe,TE),e(TE,XFe),e(XFe,lCr),e(TE,iCr),e(TE,NU),e(NU,dCr),e(TE,cCr),e(Sr,fCr),M(ME,Sr,null),b(f,Dje,_),b(f,mc,_),e(mc,EE),e(EE,zFe),M(Z8,zFe,null),e(mc,mCr),e(mc,WFe),e(WFe,gCr),b(f,Gje,_),b(f,nr,_),M(e9,nr,null),e(nr,hCr),e(nr,gc),e(gc,pCr),e(gc,qU),e(qU,uCr),e(gc,_Cr),e(gc,jU),e(jU,bCr),e(gc,vCr),e(nr,FCr),e(nr,o9),e(o9,TCr),e(o9,QFe),e(QFe,MCr),e(o9,ECr),e(nr,CCr),e(nr,Bt),M(r9,Bt,null),e(Bt,wCr),e(Bt,HFe),e(HFe,ACr),e(Bt,yCr),e(Bt,hc),e(hc,LCr),e(hc,UFe),e(UFe,xCr),e(hc,$Cr),e(hc,DU),e(DU,kCr),e(hc,SCr),e(Bt,RCr),M(CE,Bt,null),e(nr,PCr),e(nr,Rr),M(t9,Rr,null),e(Rr,BCr),e(Rr,JFe),e(JFe,ICr),e(Rr,NCr),e(Rr,ln),e(ln,qCr),e(ln,YFe),e(YFe,jCr),e(ln,DCr),e(ln,KFe),e(KFe,GCr),e(ln,OCr),e(ln,ZFe),e(ZFe,VCr),e(ln,XCr),e(Rr,zCr),e(Rr,a9),e(a9,wE),e(wE,eTe),e(eTe,WCr),e(wE,QCr),e(wE,GU),e(GU,HCr),e(wE,UCr),e(a9,JCr),e(a9,AE),e(AE,oTe),e(oTe,YCr),e(AE,KCr),e(AE,OU),e(OU,ZCr),e(AE,e5r),e(Rr,o5r),M(yE,Rr,null),b(f,Oje,_),b(f,pc,_),e(pc,LE),e(LE,rTe),M(n9,rTe,null),e(pc,r5r),e(pc,tTe),e(tTe,t5r),b(f,Vje,_),b(f,sr,_),M(s9,sr,null),e(sr,a5r),e(sr,uc),e(uc,n5r),e(uc,VU),e(VU,s5r),e(uc,l5r),e(uc,XU),e(XU,i5r),e(uc,d5r),e(sr,c5r),e(sr,l9),e(l9,f5r),e(l9,aTe),e(aTe,m5r),e(l9,g5r),e(sr,h5r),e(sr,It),M(i9,It,null),e(It,p5r),e(It,nTe),e(nTe,u5r),e(It,_5r),e(It,_c),e(_c,b5r),e(_c,sTe),e(sTe,v5r),e(_c,F5r),e(_c,zU),e(zU,T5r),e(_c,M5r),e(It,E5r),M(xE,It,null),e(sr,C5r),e(sr,Pr),M(d9,Pr,null),e(Pr,w5r),e(Pr,lTe),e(lTe,A5r),e(Pr,y5r),e(Pr,dn),e(dn,L5r),e(dn,iTe),e(iTe,x5r),e(dn,$5r),e(dn,dTe),e(dTe,k5r),e(dn,S5r),e(dn,cTe),e(cTe,R5r),e(dn,P5r),e(Pr,B5r),e(Pr,fTe),e(fTe,$E),e($E,mTe),e(mTe,I5r),e($E,N5r),e($E,WU),e(WU,q5r),e($E,j5r),e(Pr,D5r),M(kE,Pr,null),b(f,Xje,_),b(f,bc,_),e(bc,SE),e(SE,gTe),M(c9,gTe,null),e(bc,G5r),e(bc,hTe),e(hTe,O5r),b(f,zje,_),b(f,lr,_),M(f9,lr,null),e(lr,V5r),e(lr,vc),e(vc,X5r),e(vc,QU),e(QU,z5r),e(vc,W5r),e(vc,HU),e(HU,Q5r),e(vc,H5r),e(lr,U5r),e(lr,m9),e(m9,J5r),e(m9,pTe),e(pTe,Y5r),e(m9,K5r),e(lr,Z5r),e(lr,Nt),M(g9,Nt,null),e(Nt,ewr),e(Nt,uTe),e(uTe,owr),e(Nt,rwr),e(Nt,Fc),e(Fc,twr),e(Fc,_Te),e(_Te,awr),e(Fc,nwr),e(Fc,UU),e(UU,swr),e(Fc,lwr),e(Nt,iwr),M(RE,Nt,null),e(lr,dwr),e(lr,Br),M(h9,Br,null),e(Br,cwr),e(Br,bTe),e(bTe,fwr),e(Br,mwr),e(Br,cn),e(cn,gwr),e(cn,vTe),e(vTe,hwr),e(cn,pwr),e(cn,FTe),e(FTe,uwr),e(cn,_wr),e(cn,TTe),e(TTe,bwr),e(cn,vwr),e(Br,Fwr),e(Br,de),e(de,PE),e(PE,MTe),e(MTe,Twr),e(PE,Mwr),e(PE,JU),e(JU,Ewr),e(PE,Cwr),e(de,wwr),e(de,BE),e(BE,ETe),e(ETe,Awr),e(BE,ywr),e(BE,YU),e(YU,Lwr),e(BE,xwr),e(de,$wr),e(de,IE),e(IE,CTe),e(CTe,kwr),e(IE,Swr),e(IE,KU),e(KU,Rwr),e(IE,Pwr),e(de,Bwr),e(de,NE),e(NE,wTe),e(wTe,Iwr),e(NE,Nwr),e(NE,ZU),e(ZU,qwr),e(NE,jwr),e(de,Dwr),e(de,qE),e(qE,ATe),e(ATe,Gwr),e(qE,Owr),e(qE,eJ),e(eJ,Vwr),e(qE,Xwr),e(de,zwr),e(de,jE),e(jE,yTe),e(yTe,Wwr),e(jE,Qwr),e(jE,oJ),e(oJ,Hwr),e(jE,Uwr),e(de,Jwr),e(de,DE),e(DE,LTe),e(LTe,Ywr),e(DE,Kwr),e(DE,rJ),e(rJ,Zwr),e(DE,e0r),e(de,o0r),e(de,GE),e(GE,xTe),e(xTe,r0r),e(GE,t0r),e(GE,tJ),e(tJ,a0r),e(GE,n0r),e(de,s0r),e(de,OE),e(OE,$Te),e($Te,l0r),e(OE,i0r),e(OE,aJ),e(aJ,d0r),e(OE,c0r),e(de,f0r),e(de,VE),e(VE,kTe),e(kTe,m0r),e(VE,g0r),e(VE,nJ),e(nJ,h0r),e(VE,p0r),e(de,u0r),e(de,XE),e(XE,STe),e(STe,_0r),e(XE,b0r),e(XE,sJ),e(sJ,v0r),e(XE,F0r),e(de,T0r),e(de,zE),e(zE,RTe),e(RTe,M0r),e(zE,E0r),e(zE,lJ),e(lJ,C0r),e(zE,w0r),e(de,A0r),e(de,WE),e(WE,PTe),e(PTe,y0r),e(WE,L0r),e(WE,iJ),e(iJ,x0r),e(WE,$0r),e(de,k0r),e(de,QE),e(QE,BTe),e(BTe,S0r),e(QE,R0r),e(QE,dJ),e(dJ,P0r),e(QE,B0r),e(de,I0r),e(de,HE),e(HE,ITe),e(ITe,N0r),e(HE,q0r),e(HE,cJ),e(cJ,j0r),e(HE,D0r),e(de,G0r),e(de,UE),e(UE,NTe),e(NTe,O0r),e(UE,V0r),e(UE,fJ),e(fJ,X0r),e(UE,z0r),e(de,W0r),e(de,JE),e(JE,qTe),e(qTe,Q0r),e(JE,H0r),e(JE,mJ),e(mJ,U0r),e(JE,J0r),e(de,Y0r),e(de,YE),e(YE,jTe),e(jTe,K0r),e(YE,Z0r),e(YE,gJ),e(gJ,e6r),e(YE,o6r),e(de,r6r),e(de,KE),e(KE,DTe),e(DTe,t6r),e(KE,a6r),e(KE,hJ),e(hJ,n6r),e(KE,s6r),e(de,l6r),e(de,ZE),e(ZE,GTe),e(GTe,i6r),e(ZE,d6r),e(ZE,pJ),e(pJ,c6r),e(ZE,f6r),e(Br,m6r),M(eC,Br,null),b(f,Wje,_),b(f,Tc,_),e(Tc,oC),e(oC,OTe),M(p9,OTe,null),e(Tc,g6r),e(Tc,VTe),e(VTe,h6r),b(f,Qje,_),b(f,ir,_),M(u9,ir,null),e(ir,p6r),e(ir,Mc),e(Mc,u6r),e(Mc,uJ),e(uJ,_6r),e(Mc,b6r),e(Mc,_J),e(_J,v6r),e(Mc,F6r),e(ir,T6r),e(ir,_9),e(_9,M6r),e(_9,XTe),e(XTe,E6r),e(_9,C6r),e(ir,w6r),e(ir,qt),M(b9,qt,null),e(qt,A6r),e(qt,zTe),e(zTe,y6r),e(qt,L6r),e(qt,Ec),e(Ec,x6r),e(Ec,WTe),e(WTe,$6r),e(Ec,k6r),e(Ec,bJ),e(bJ,S6r),e(Ec,R6r),e(qt,P6r),M(rC,qt,null),e(ir,B6r),e(ir,Ir),M(v9,Ir,null),e(Ir,I6r),e(Ir,QTe),e(QTe,N6r),e(Ir,q6r),e(Ir,fn),e(fn,j6r),e(fn,HTe),e(HTe,D6r),e(fn,G6r),e(fn,UTe),e(UTe,O6r),e(fn,V6r),e(fn,JTe),e(JTe,X6r),e(fn,z6r),e(Ir,W6r),e(Ir,ce),e(ce,tC),e(tC,YTe),e(YTe,Q6r),e(tC,H6r),e(tC,vJ),e(vJ,U6r),e(tC,J6r),e(ce,Y6r),e(ce,aC),e(aC,KTe),e(KTe,K6r),e(aC,Z6r),e(aC,FJ),e(FJ,eAr),e(aC,oAr),e(ce,rAr),e(ce,nC),e(nC,ZTe),e(ZTe,tAr),e(nC,aAr),e(nC,TJ),e(TJ,nAr),e(nC,sAr),e(ce,lAr),e(ce,sC),e(sC,e7e),e(e7e,iAr),e(sC,dAr),e(sC,MJ),e(MJ,cAr),e(sC,fAr),e(ce,mAr),e(ce,lC),e(lC,o7e),e(o7e,gAr),e(lC,hAr),e(lC,EJ),e(EJ,pAr),e(lC,uAr),e(ce,_Ar),e(ce,iC),e(iC,r7e),e(r7e,bAr),e(iC,vAr),e(iC,CJ),e(CJ,FAr),e(iC,TAr),e(ce,MAr),e(ce,dC),e(dC,t7e),e(t7e,EAr),e(dC,CAr),e(dC,wJ),e(wJ,wAr),e(dC,AAr),e(ce,yAr),e(ce,cC),e(cC,a7e),e(a7e,LAr),e(cC,xAr),e(cC,AJ),e(AJ,$Ar),e(cC,kAr),e(ce,SAr),e(ce,fC),e(fC,n7e),e(n7e,RAr),e(fC,PAr),e(fC,yJ),e(yJ,BAr),e(fC,IAr),e(ce,NAr),e(ce,mC),e(mC,s7e),e(s7e,qAr),e(mC,jAr),e(mC,LJ),e(LJ,DAr),e(mC,GAr),e(ce,OAr),e(ce,gC),e(gC,l7e),e(l7e,VAr),e(gC,XAr),e(gC,xJ),e(xJ,zAr),e(gC,WAr),e(ce,QAr),e(ce,hC),e(hC,i7e),e(i7e,HAr),e(hC,UAr),e(hC,$J),e($J,JAr),e(hC,YAr),e(ce,KAr),e(ce,pC),e(pC,d7e),e(d7e,ZAr),e(pC,eyr),e(pC,kJ),e(kJ,oyr),e(pC,ryr),e(ce,tyr),e(ce,uC),e(uC,c7e),e(c7e,ayr),e(uC,nyr),e(uC,SJ),e(SJ,syr),e(uC,lyr),e(ce,iyr),e(ce,_C),e(_C,f7e),e(f7e,dyr),e(_C,cyr),e(_C,RJ),e(RJ,fyr),e(_C,myr),e(ce,gyr),e(ce,bC),e(bC,m7e),e(m7e,hyr),e(bC,pyr),e(bC,PJ),e(PJ,uyr),e(bC,_yr),e(ce,byr),e(ce,vC),e(vC,g7e),e(g7e,vyr),e(vC,Fyr),e(vC,BJ),e(BJ,Tyr),e(vC,Myr),e(ce,Eyr),e(ce,FC),e(FC,h7e),e(h7e,Cyr),e(FC,wyr),e(FC,IJ),e(IJ,Ayr),e(FC,yyr),e(ce,Lyr),e(ce,TC),e(TC,p7e),e(p7e,xyr),e(TC,$yr),e(TC,NJ),e(NJ,kyr),e(TC,Syr),e(ce,Ryr),e(ce,MC),e(MC,u7e),e(u7e,Pyr),e(MC,Byr),e(MC,qJ),e(qJ,Iyr),e(MC,Nyr),e(Ir,qyr),M(EC,Ir,null),b(f,Hje,_),b(f,Cc,_),e(Cc,CC),e(CC,_7e),M(F9,_7e,null),e(Cc,jyr),e(Cc,b7e),e(b7e,Dyr),b(f,Uje,_),b(f,dr,_),M(T9,dr,null),e(dr,Gyr),e(dr,wc),e(wc,Oyr),e(wc,jJ),e(jJ,Vyr),e(wc,Xyr),e(wc,DJ),e(DJ,zyr),e(wc,Wyr),e(dr,Qyr),e(dr,M9),e(M9,Hyr),e(M9,v7e),e(v7e,Uyr),e(M9,Jyr),e(dr,Yyr),e(dr,jt),M(E9,jt,null),e(jt,Kyr),e(jt,F7e),e(F7e,Zyr),e(jt,eLr),e(jt,Ac),e(Ac,oLr),e(Ac,T7e),e(T7e,rLr),e(Ac,tLr),e(Ac,GJ),e(GJ,aLr),e(Ac,nLr),e(jt,sLr),M(wC,jt,null),e(dr,lLr),e(dr,Nr),M(C9,Nr,null),e(Nr,iLr),e(Nr,M7e),e(M7e,dLr),e(Nr,cLr),e(Nr,mn),e(mn,fLr),e(mn,E7e),e(E7e,mLr),e(mn,gLr),e(mn,C7e),e(C7e,hLr),e(mn,pLr),e(mn,w7e),e(w7e,uLr),e(mn,_Lr),e(Nr,bLr),e(Nr,A7e),e(A7e,AC),e(AC,y7e),e(y7e,vLr),e(AC,FLr),e(AC,OJ),e(OJ,TLr),e(AC,MLr),e(Nr,ELr),M(yC,Nr,null),b(f,Jje,_),b(f,yc,_),e(yc,LC),e(LC,L7e),M(w9,L7e,null),e(yc,CLr),e(yc,x7e),e(x7e,wLr),b(f,Yje,_),b(f,cr,_),M(A9,cr,null),e(cr,ALr),e(cr,Lc),e(Lc,yLr),e(Lc,VJ),e(VJ,LLr),e(Lc,xLr),e(Lc,XJ),e(XJ,$Lr),e(Lc,kLr),e(cr,SLr),e(cr,y9),e(y9,RLr),e(y9,$7e),e($7e,PLr),e(y9,BLr),e(cr,ILr),e(cr,Dt),M(L9,Dt,null),e(Dt,NLr),e(Dt,k7e),e(k7e,qLr),e(Dt,jLr),e(Dt,xc),e(xc,DLr),e(xc,S7e),e(S7e,GLr),e(xc,OLr),e(xc,zJ),e(zJ,VLr),e(xc,XLr),e(Dt,zLr),M(xC,Dt,null),e(cr,WLr),e(cr,qr),M(x9,qr,null),e(qr,QLr),e(qr,R7e),e(R7e,HLr),e(qr,ULr),e(qr,gn),e(gn,JLr),e(gn,P7e),e(P7e,YLr),e(gn,KLr),e(gn,B7e),e(B7e,ZLr),e(gn,e8r),e(gn,I7e),e(I7e,o8r),e(gn,r8r),e(qr,t8r),e(qr,N7e),e(N7e,$C),e($C,q7e),e(q7e,a8r),e($C,n8r),e($C,WJ),e(WJ,s8r),e($C,l8r),e(qr,i8r),M(kC,qr,null),b(f,Kje,_),b(f,$c,_),e($c,SC),e(SC,j7e),M($9,j7e,null),e($c,d8r),e($c,D7e),e(D7e,c8r),b(f,Zje,_),b(f,fr,_),M(k9,fr,null),e(fr,f8r),e(fr,kc),e(kc,m8r),e(kc,QJ),e(QJ,g8r),e(kc,h8r),e(kc,HJ),e(HJ,p8r),e(kc,u8r),e(fr,_8r),e(fr,S9),e(S9,b8r),e(S9,G7e),e(G7e,v8r),e(S9,F8r),e(fr,T8r),e(fr,Gt),M(R9,Gt,null),e(Gt,M8r),e(Gt,O7e),e(O7e,E8r),e(Gt,C8r),e(Gt,Sc),e(Sc,w8r),e(Sc,V7e),e(V7e,A8r),e(Sc,y8r),e(Sc,UJ),e(UJ,L8r),e(Sc,x8r),e(Gt,$8r),M(RC,Gt,null),e(fr,k8r),e(fr,jr),M(P9,jr,null),e(jr,S8r),e(jr,X7e),e(X7e,R8r),e(jr,P8r),e(jr,hn),e(hn,B8r),e(hn,z7e),e(z7e,I8r),e(hn,N8r),e(hn,W7e),e(W7e,q8r),e(hn,j8r),e(hn,Q7e),e(Q7e,D8r),e(hn,G8r),e(jr,O8r),e(jr,te),e(te,PC),e(PC,H7e),e(H7e,V8r),e(PC,X8r),e(PC,JJ),e(JJ,z8r),e(PC,W8r),e(te,Q8r),e(te,BC),e(BC,U7e),e(U7e,H8r),e(BC,U8r),e(BC,YJ),e(YJ,J8r),e(BC,Y8r),e(te,K8r),e(te,IC),e(IC,J7e),e(J7e,Z8r),e(IC,e9r),e(IC,KJ),e(KJ,o9r),e(IC,r9r),e(te,t9r),e(te,NC),e(NC,Y7e),e(Y7e,a9r),e(NC,n9r),e(NC,ZJ),e(ZJ,s9r),e(NC,l9r),e(te,i9r),e(te,qC),e(qC,K7e),e(K7e,d9r),e(qC,c9r),e(qC,eY),e(eY,f9r),e(qC,m9r),e(te,g9r),e(te,jC),e(jC,Z7e),e(Z7e,h9r),e(jC,p9r),e(jC,oY),e(oY,u9r),e(jC,_9r),e(te,b9r),e(te,DC),e(DC,eMe),e(eMe,v9r),e(DC,F9r),e(DC,rY),e(rY,T9r),e(DC,M9r),e(te,E9r),e(te,GC),e(GC,oMe),e(oMe,C9r),e(GC,w9r),e(GC,tY),e(tY,A9r),e(GC,y9r),e(te,L9r),e(te,OC),e(OC,rMe),e(rMe,x9r),e(OC,$9r),e(OC,aY),e(aY,k9r),e(OC,S9r),e(te,R9r),e(te,VC),e(VC,tMe),e(tMe,P9r),e(VC,B9r),e(VC,nY),e(nY,I9r),e(VC,N9r),e(te,q9r),e(te,XC),e(XC,aMe),e(aMe,j9r),e(XC,D9r),e(XC,sY),e(sY,G9r),e(XC,O9r),e(te,V9r),e(te,zC),e(zC,nMe),e(nMe,X9r),e(zC,z9r),e(zC,lY),e(lY,W9r),e(zC,Q9r),e(te,H9r),e(te,WC),e(WC,sMe),e(sMe,U9r),e(WC,J9r),e(WC,iY),e(iY,Y9r),e(WC,K9r),e(te,Z9r),e(te,QC),e(QC,lMe),e(lMe,exr),e(QC,oxr),e(QC,dY),e(dY,rxr),e(QC,txr),e(te,axr),e(te,HC),e(HC,iMe),e(iMe,nxr),e(HC,sxr),e(HC,cY),e(cY,lxr),e(HC,ixr),e(te,dxr),e(te,UC),e(UC,dMe),e(dMe,cxr),e(UC,fxr),e(UC,fY),e(fY,mxr),e(UC,gxr),e(te,hxr),e(te,JC),e(JC,cMe),e(cMe,pxr),e(JC,uxr),e(JC,mY),e(mY,_xr),e(JC,bxr),e(te,vxr),e(te,YC),e(YC,fMe),e(fMe,Fxr),e(YC,Txr),e(YC,gY),e(gY,Mxr),e(YC,Exr),e(te,Cxr),e(te,KC),e(KC,mMe),e(mMe,wxr),e(KC,Axr),e(KC,hY),e(hY,yxr),e(KC,Lxr),e(te,xxr),e(te,ZC),e(ZC,gMe),e(gMe,$xr),e(ZC,kxr),e(ZC,pY),e(pY,Sxr),e(ZC,Rxr),e(te,Pxr),e(te,e5),e(e5,hMe),e(hMe,Bxr),e(e5,Ixr),e(e5,uY),e(uY,Nxr),e(e5,qxr),e(te,jxr),e(te,o5),e(o5,pMe),e(pMe,Dxr),e(o5,Gxr),e(o5,_Y),e(_Y,Oxr),e(o5,Vxr),e(te,Xxr),e(te,r5),e(r5,uMe),e(uMe,zxr),e(r5,Wxr),e(r5,bY),e(bY,Qxr),e(r5,Hxr),e(te,Uxr),e(te,t5),e(t5,_Me),e(_Me,Jxr),e(t5,Yxr),e(t5,vY),e(vY,Kxr),e(t5,Zxr),e(te,e$r),e(te,a5),e(a5,bMe),e(bMe,o$r),e(a5,r$r),e(a5,FY),e(FY,t$r),e(a5,a$r),e(jr,n$r),M(n5,jr,null),b(f,eDe,_),b(f,Rc,_),e(Rc,s5),e(s5,vMe),M(B9,vMe,null),e(Rc,s$r),e(Rc,FMe),e(FMe,l$r),b(f,oDe,_),b(f,mr,_),M(I9,mr,null),e(mr,i$r),e(mr,Pc),e(Pc,d$r),e(Pc,TY),e(TY,c$r),e(Pc,f$r),e(Pc,MY),e(MY,m$r),e(Pc,g$r),e(mr,h$r),e(mr,N9),e(N9,p$r),e(N9,TMe),e(TMe,u$r),e(N9,_$r),e(mr,b$r),e(mr,Ot),M(q9,Ot,null),e(Ot,v$r),e(Ot,MMe),e(MMe,F$r),e(Ot,T$r),e(Ot,Bc),e(Bc,M$r),e(Bc,EMe),e(EMe,E$r),e(Bc,C$r),e(Bc,EY),e(EY,w$r),e(Bc,A$r),e(Ot,y$r),M(l5,Ot,null),e(mr,L$r),e(mr,Dr),M(j9,Dr,null),e(Dr,x$r),e(Dr,CMe),e(CMe,$$r),e(Dr,k$r),e(Dr,pn),e(pn,S$r),e(pn,wMe),e(wMe,R$r),e(pn,P$r),e(pn,AMe),e(AMe,B$r),e(pn,I$r),e(pn,yMe),e(yMe,N$r),e(pn,q$r),e(Dr,j$r),e(Dr,Re),e(Re,i5),e(i5,LMe),e(LMe,D$r),e(i5,G$r),e(i5,CY),e(CY,O$r),e(i5,V$r),e(Re,X$r),e(Re,d5),e(d5,xMe),e(xMe,z$r),e(d5,W$r),e(d5,wY),e(wY,Q$r),e(d5,H$r),e(Re,U$r),e(Re,c5),e(c5,$Me),e($Me,J$r),e(c5,Y$r),e(c5,AY),e(AY,K$r),e(c5,Z$r),e(Re,ekr),e(Re,f5),e(f5,kMe),e(kMe,okr),e(f5,rkr),e(f5,yY),e(yY,tkr),e(f5,akr),e(Re,nkr),e(Re,m5),e(m5,SMe),e(SMe,skr),e(m5,lkr),e(m5,LY),e(LY,ikr),e(m5,dkr),e(Re,ckr),e(Re,g5),e(g5,RMe),e(RMe,fkr),e(g5,mkr),e(g5,xY),e(xY,gkr),e(g5,hkr),e(Re,pkr),e(Re,h5),e(h5,PMe),e(PMe,ukr),e(h5,_kr),e(h5,$Y),e($Y,bkr),e(h5,vkr),e(Re,Fkr),e(Re,p5),e(p5,BMe),e(BMe,Tkr),e(p5,Mkr),e(p5,kY),e(kY,Ekr),e(p5,Ckr),e(Re,wkr),e(Re,u5),e(u5,IMe),e(IMe,Akr),e(u5,ykr),e(u5,SY),e(SY,Lkr),e(u5,xkr),e(Dr,$kr),M(_5,Dr,null),b(f,rDe,_),b(f,Ic,_),e(Ic,b5),e(b5,NMe),M(D9,NMe,null),e(Ic,kkr),e(Ic,qMe),e(qMe,Skr),b(f,tDe,_),b(f,gr,_),M(G9,gr,null),e(gr,Rkr),e(gr,Nc),e(Nc,Pkr),e(Nc,RY),e(RY,Bkr),e(Nc,Ikr),e(Nc,PY),e(PY,Nkr),e(Nc,qkr),e(gr,jkr),e(gr,O9),e(O9,Dkr),e(O9,jMe),e(jMe,Gkr),e(O9,Okr),e(gr,Vkr),e(gr,Vt),M(V9,Vt,null),e(Vt,Xkr),e(Vt,DMe),e(DMe,zkr),e(Vt,Wkr),e(Vt,qc),e(qc,Qkr),e(qc,GMe),e(GMe,Hkr),e(qc,Ukr),e(qc,BY),e(BY,Jkr),e(qc,Ykr),e(Vt,Kkr),M(v5,Vt,null),e(gr,Zkr),e(gr,Gr),M(X9,Gr,null),e(Gr,eSr),e(Gr,OMe),e(OMe,oSr),e(Gr,rSr),e(Gr,un),e(un,tSr),e(un,VMe),e(VMe,aSr),e(un,nSr),e(un,XMe),e(XMe,sSr),e(un,lSr),e(un,zMe),e(zMe,iSr),e(un,dSr),e(Gr,cSr),e(Gr,Ee),e(Ee,F5),e(F5,WMe),e(WMe,fSr),e(F5,mSr),e(F5,IY),e(IY,gSr),e(F5,hSr),e(Ee,pSr),e(Ee,T5),e(T5,QMe),e(QMe,uSr),e(T5,_Sr),e(T5,NY),e(NY,bSr),e(T5,vSr),e(Ee,FSr),e(Ee,M5),e(M5,HMe),e(HMe,TSr),e(M5,MSr),e(M5,qY),e(qY,ESr),e(M5,CSr),e(Ee,wSr),e(Ee,E5),e(E5,UMe),e(UMe,ASr),e(E5,ySr),e(E5,jY),e(jY,LSr),e(E5,xSr),e(Ee,$Sr),e(Ee,C5),e(C5,JMe),e(JMe,kSr),e(C5,SSr),e(C5,DY),e(DY,RSr),e(C5,PSr),e(Ee,BSr),e(Ee,w5),e(w5,YMe),e(YMe,ISr),e(w5,NSr),e(w5,GY),e(GY,qSr),e(w5,jSr),e(Ee,DSr),e(Ee,A5),e(A5,KMe),e(KMe,GSr),e(A5,OSr),e(A5,OY),e(OY,VSr),e(A5,XSr),e(Ee,zSr),e(Ee,y5),e(y5,ZMe),e(ZMe,WSr),e(y5,QSr),e(y5,VY),e(VY,HSr),e(y5,USr),e(Ee,JSr),e(Ee,L5),e(L5,e4e),e(e4e,YSr),e(L5,KSr),e(L5,XY),e(XY,ZSr),e(L5,eRr),e(Ee,oRr),e(Ee,x5),e(x5,o4e),e(o4e,rRr),e(x5,tRr),e(x5,zY),e(zY,aRr),e(x5,nRr),e(Ee,sRr),e(Ee,$5),e($5,r4e),e(r4e,lRr),e($5,iRr),e($5,WY),e(WY,dRr),e($5,cRr),e(Ee,fRr),e(Ee,k5),e(k5,t4e),e(t4e,mRr),e(k5,gRr),e(k5,QY),e(QY,hRr),e(k5,pRr),e(Gr,uRr),M(S5,Gr,null),b(f,aDe,_),b(f,jc,_),e(jc,R5),e(R5,a4e),M(z9,a4e,null),e(jc,_Rr),e(jc,n4e),e(n4e,bRr),b(f,nDe,_),b(f,hr,_),M(W9,hr,null),e(hr,vRr),e(hr,Dc),e(Dc,FRr),e(Dc,HY),e(HY,TRr),e(Dc,MRr),e(Dc,UY),e(UY,ERr),e(Dc,CRr),e(hr,wRr),e(hr,Q9),e(Q9,ARr),e(Q9,s4e),e(s4e,yRr),e(Q9,LRr),e(hr,xRr),e(hr,Xt),M(H9,Xt,null),e(Xt,$Rr),e(Xt,l4e),e(l4e,kRr),e(Xt,SRr),e(Xt,Gc),e(Gc,RRr),e(Gc,i4e),e(i4e,PRr),e(Gc,BRr),e(Gc,JY),e(JY,IRr),e(Gc,NRr),e(Xt,qRr),M(P5,Xt,null),e(hr,jRr),e(hr,Or),M(U9,Or,null),e(Or,DRr),e(Or,d4e),e(d4e,GRr),e(Or,ORr),e(Or,_n),e(_n,VRr),e(_n,c4e),e(c4e,XRr),e(_n,zRr),e(_n,f4e),e(f4e,WRr),e(_n,QRr),e(_n,m4e),e(m4e,HRr),e(_n,URr),e(Or,JRr),e(Or,Le),e(Le,B5),e(B5,g4e),e(g4e,YRr),e(B5,KRr),e(B5,YY),e(YY,ZRr),e(B5,ePr),e(Le,oPr),e(Le,I5),e(I5,h4e),e(h4e,rPr),e(I5,tPr),e(I5,KY),e(KY,aPr),e(I5,nPr),e(Le,sPr),e(Le,N5),e(N5,p4e),e(p4e,lPr),e(N5,iPr),e(N5,ZY),e(ZY,dPr),e(N5,cPr),e(Le,fPr),e(Le,q5),e(q5,u4e),e(u4e,mPr),e(q5,gPr),e(q5,eK),e(eK,hPr),e(q5,pPr),e(Le,uPr),e(Le,j5),e(j5,_4e),e(_4e,_Pr),e(j5,bPr),e(j5,oK),e(oK,vPr),e(j5,FPr),e(Le,TPr),e(Le,D5),e(D5,b4e),e(b4e,MPr),e(D5,EPr),e(D5,rK),e(rK,CPr),e(D5,wPr),e(Le,APr),e(Le,G5),e(G5,v4e),e(v4e,yPr),e(G5,LPr),e(G5,tK),e(tK,xPr),e(G5,$Pr),e(Le,kPr),e(Le,O5),e(O5,F4e),e(F4e,SPr),e(O5,RPr),e(O5,aK),e(aK,PPr),e(O5,BPr),e(Le,IPr),e(Le,V5),e(V5,T4e),e(T4e,NPr),e(V5,qPr),e(V5,nK),e(nK,jPr),e(V5,DPr),e(Le,GPr),e(Le,X5),e(X5,M4e),e(M4e,OPr),e(X5,VPr),e(X5,sK),e(sK,XPr),e(X5,zPr),e(Or,WPr),M(z5,Or,null),b(f,sDe,_),b(f,Oc,_),e(Oc,W5),e(W5,E4e),M(J9,E4e,null),e(Oc,QPr),e(Oc,C4e),e(C4e,HPr),b(f,lDe,_),b(f,pr,_),M(Y9,pr,null),e(pr,UPr),e(pr,Vc),e(Vc,JPr),e(Vc,lK),e(lK,YPr),e(Vc,KPr),e(Vc,iK),e(iK,ZPr),e(Vc,eBr),e(pr,oBr),e(pr,K9),e(K9,rBr),e(K9,w4e),e(w4e,tBr),e(K9,aBr),e(pr,nBr),e(pr,zt),M(Z9,zt,null),e(zt,sBr),e(zt,A4e),e(A4e,lBr),e(zt,iBr),e(zt,Xc),e(Xc,dBr),e(Xc,y4e),e(y4e,cBr),e(Xc,fBr),e(Xc,dK),e(dK,mBr),e(Xc,gBr),e(zt,hBr),M(Q5,zt,null),e(pr,pBr),e(pr,Vr),M(ex,Vr,null),e(Vr,uBr),e(Vr,L4e),e(L4e,_Br),e(Vr,bBr),e(Vr,bn),e(bn,vBr),e(bn,x4e),e(x4e,FBr),e(bn,TBr),e(bn,$4e),e($4e,MBr),e(bn,EBr),e(bn,k4e),e(k4e,CBr),e(bn,wBr),e(Vr,ABr),e(Vr,Pe),e(Pe,H5),e(H5,S4e),e(S4e,yBr),e(H5,LBr),e(H5,cK),e(cK,xBr),e(H5,$Br),e(Pe,kBr),e(Pe,U5),e(U5,R4e),e(R4e,SBr),e(U5,RBr),e(U5,fK),e(fK,PBr),e(U5,BBr),e(Pe,IBr),e(Pe,J5),e(J5,P4e),e(P4e,NBr),e(J5,qBr),e(J5,mK),e(mK,jBr),e(J5,DBr),e(Pe,GBr),e(Pe,Y5),e(Y5,B4e),e(B4e,OBr),e(Y5,VBr),e(Y5,gK),e(gK,XBr),e(Y5,zBr),e(Pe,WBr),e(Pe,K5),e(K5,I4e),e(I4e,QBr),e(K5,HBr),e(K5,hK),e(hK,UBr),e(K5,JBr),e(Pe,YBr),e(Pe,Z5),e(Z5,N4e),e(N4e,KBr),e(Z5,ZBr),e(Z5,pK),e(pK,eIr),e(Z5,oIr),e(Pe,rIr),e(Pe,ew),e(ew,q4e),e(q4e,tIr),e(ew,aIr),e(ew,uK),e(uK,nIr),e(ew,sIr),e(Pe,lIr),e(Pe,ow),e(ow,j4e),e(j4e,iIr),e(ow,dIr),e(ow,_K),e(_K,cIr),e(ow,fIr),e(Pe,mIr),e(Pe,rw),e(rw,D4e),e(D4e,gIr),e(rw,hIr),e(rw,bK),e(bK,pIr),e(rw,uIr),e(Vr,_Ir),M(tw,Vr,null),b(f,iDe,_),b(f,zc,_),e(zc,aw),e(aw,G4e),M(ox,G4e,null),e(zc,bIr),e(zc,O4e),e(O4e,vIr),b(f,dDe,_),b(f,ur,_),M(rx,ur,null),e(ur,FIr),e(ur,Wc),e(Wc,TIr),e(Wc,vK),e(vK,MIr),e(Wc,EIr),e(Wc,FK),e(FK,CIr),e(Wc,wIr),e(ur,AIr),e(ur,tx),e(tx,yIr),e(tx,V4e),e(V4e,LIr),e(tx,xIr),e(ur,$Ir),e(ur,Wt),M(ax,Wt,null),e(Wt,kIr),e(Wt,X4e),e(X4e,SIr),e(Wt,RIr),e(Wt,Qc),e(Qc,PIr),e(Qc,z4e),e(z4e,BIr),e(Qc,IIr),e(Qc,TK),e(TK,NIr),e(Qc,qIr),e(Wt,jIr),M(nw,Wt,null),e(ur,DIr),e(ur,Xr),M(nx,Xr,null),e(Xr,GIr),e(Xr,W4e),e(W4e,OIr),e(Xr,VIr),e(Xr,vn),e(vn,XIr),e(vn,Q4e),e(Q4e,zIr),e(vn,WIr),e(vn,H4e),e(H4e,QIr),e(vn,HIr),e(vn,U4e),e(U4e,UIr),e(vn,JIr),e(Xr,YIr),e(Xr,xe),e(xe,sw),e(sw,J4e),e(J4e,KIr),e(sw,ZIr),e(sw,MK),e(MK,eNr),e(sw,oNr),e(xe,rNr),e(xe,lw),e(lw,Y4e),e(Y4e,tNr),e(lw,aNr),e(lw,EK),e(EK,nNr),e(lw,sNr),e(xe,lNr),e(xe,iw),e(iw,K4e),e(K4e,iNr),e(iw,dNr),e(iw,CK),e(CK,cNr),e(iw,fNr),e(xe,mNr),e(xe,dw),e(dw,Z4e),e(Z4e,gNr),e(dw,hNr),e(dw,wK),e(wK,pNr),e(dw,uNr),e(xe,_Nr),e(xe,cw),e(cw,eEe),e(eEe,bNr),e(cw,vNr),e(cw,AK),e(AK,FNr),e(cw,TNr),e(xe,MNr),e(xe,fw),e(fw,oEe),e(oEe,ENr),e(fw,CNr),e(fw,yK),e(yK,wNr),e(fw,ANr),e(xe,yNr),e(xe,mw),e(mw,rEe),e(rEe,LNr),e(mw,xNr),e(mw,LK),e(LK,$Nr),e(mw,kNr),e(xe,SNr),e(xe,gw),e(gw,tEe),e(tEe,RNr),e(gw,PNr),e(gw,xK),e(xK,BNr),e(gw,INr),e(xe,NNr),e(xe,hw),e(hw,aEe),e(aEe,qNr),e(hw,jNr),e(hw,$K),e($K,DNr),e(hw,GNr),e(xe,ONr),e(xe,pw),e(pw,nEe),e(nEe,VNr),e(pw,XNr),e(pw,kK),e(kK,zNr),e(pw,WNr),e(Xr,QNr),M(uw,Xr,null),b(f,cDe,_),b(f,Hc,_),e(Hc,_w),e(_w,sEe),M(sx,sEe,null),e(Hc,HNr),e(Hc,lEe),e(lEe,UNr),b(f,fDe,_),b(f,_r,_),M(lx,_r,null),e(_r,JNr),e(_r,Uc),e(Uc,YNr),e(Uc,SK),e(SK,KNr),e(Uc,ZNr),e(Uc,RK),e(RK,eqr),e(Uc,oqr),e(_r,rqr),e(_r,ix),e(ix,tqr),e(ix,iEe),e(iEe,aqr),e(ix,nqr),e(_r,sqr),e(_r,Qt),M(dx,Qt,null),e(Qt,lqr),e(Qt,dEe),e(dEe,iqr),e(Qt,dqr),e(Qt,Jc),e(Jc,cqr),e(Jc,cEe),e(cEe,fqr),e(Jc,mqr),e(Jc,PK),e(PK,gqr),e(Jc,hqr),e(Qt,pqr),M(bw,Qt,null),e(_r,uqr),e(_r,zr),M(cx,zr,null),e(zr,_qr),e(zr,fEe),e(fEe,bqr),e(zr,vqr),e(zr,Fn),e(Fn,Fqr),e(Fn,mEe),e(mEe,Tqr),e(Fn,Mqr),e(Fn,gEe),e(gEe,Eqr),e(Fn,Cqr),e(Fn,hEe),e(hEe,wqr),e(Fn,Aqr),e(zr,yqr),e(zr,$e),e($e,vw),e(vw,pEe),e(pEe,Lqr),e(vw,xqr),e(vw,BK),e(BK,$qr),e(vw,kqr),e($e,Sqr),e($e,Fw),e(Fw,uEe),e(uEe,Rqr),e(Fw,Pqr),e(Fw,IK),e(IK,Bqr),e(Fw,Iqr),e($e,Nqr),e($e,Tw),e(Tw,_Ee),e(_Ee,qqr),e(Tw,jqr),e(Tw,NK),e(NK,Dqr),e(Tw,Gqr),e($e,Oqr),e($e,Mw),e(Mw,bEe),e(bEe,Vqr),e(Mw,Xqr),e(Mw,qK),e(qK,zqr),e(Mw,Wqr),e($e,Qqr),e($e,Ew),e(Ew,vEe),e(vEe,Hqr),e(Ew,Uqr),e(Ew,jK),e(jK,Jqr),e(Ew,Yqr),e($e,Kqr),e($e,Cw),e(Cw,FEe),e(FEe,Zqr),e(Cw,ejr),e(Cw,DK),e(DK,ojr),e(Cw,rjr),e($e,tjr),e($e,ww),e(ww,TEe),e(TEe,ajr),e(ww,njr),e(ww,GK),e(GK,sjr),e(ww,ljr),e($e,ijr),e($e,Aw),e(Aw,MEe),e(MEe,djr),e(Aw,cjr),e(Aw,OK),e(OK,fjr),e(Aw,mjr),e($e,gjr),e($e,yw),e(yw,EEe),e(EEe,hjr),e(yw,pjr),e(yw,VK),e(VK,ujr),e(yw,_jr),e($e,bjr),e($e,Lw),e(Lw,CEe),e(CEe,vjr),e(Lw,Fjr),e(Lw,XK),e(XK,Tjr),e(Lw,Mjr),e(zr,Ejr),M(xw,zr,null),b(f,mDe,_),b(f,Yc,_),e(Yc,$w),e($w,wEe),M(fx,wEe,null),e(Yc,Cjr),e(Yc,AEe),e(AEe,wjr),b(f,gDe,_),b(f,br,_),M(mx,br,null),e(br,Ajr),e(br,Kc),e(Kc,yjr),e(Kc,zK),e(zK,Ljr),e(Kc,xjr),e(Kc,WK),e(WK,$jr),e(Kc,kjr),e(br,Sjr),e(br,gx),e(gx,Rjr),e(gx,yEe),e(yEe,Pjr),e(gx,Bjr),e(br,Ijr),e(br,Ht),M(hx,Ht,null),e(Ht,Njr),e(Ht,LEe),e(LEe,qjr),e(Ht,jjr),e(Ht,Zc),e(Zc,Djr),e(Zc,xEe),e(xEe,Gjr),e(Zc,Ojr),e(Zc,QK),e(QK,Vjr),e(Zc,Xjr),e(Ht,zjr),M(kw,Ht,null),e(br,Wjr),e(br,Wr),M(px,Wr,null),e(Wr,Qjr),e(Wr,$Ee),e($Ee,Hjr),e(Wr,Ujr),e(Wr,Tn),e(Tn,Jjr),e(Tn,kEe),e(kEe,Yjr),e(Tn,Kjr),e(Tn,SEe),e(SEe,Zjr),e(Tn,eDr),e(Tn,REe),e(REe,oDr),e(Tn,rDr),e(Wr,tDr),e(Wr,De),e(De,Sw),e(Sw,PEe),e(PEe,aDr),e(Sw,nDr),e(Sw,HK),e(HK,sDr),e(Sw,lDr),e(De,iDr),e(De,Rw),e(Rw,BEe),e(BEe,dDr),e(Rw,cDr),e(Rw,UK),e(UK,fDr),e(Rw,mDr),e(De,gDr),e(De,Pw),e(Pw,IEe),e(IEe,hDr),e(Pw,pDr),e(Pw,JK),e(JK,uDr),e(Pw,_Dr),e(De,bDr),e(De,Bw),e(Bw,NEe),e(NEe,vDr),e(Bw,FDr),e(Bw,YK),e(YK,TDr),e(Bw,MDr),e(De,EDr),e(De,Iw),e(Iw,qEe),e(qEe,CDr),e(Iw,wDr),e(Iw,KK),e(KK,ADr),e(Iw,yDr),e(De,LDr),e(De,Nw),e(Nw,jEe),e(jEe,xDr),e(Nw,$Dr),e(Nw,ZK),e(ZK,kDr),e(Nw,SDr),e(De,RDr),e(De,qw),e(qw,DEe),e(DEe,PDr),e(qw,BDr),e(qw,eZ),e(eZ,IDr),e(qw,NDr),e(De,qDr),e(De,jw),e(jw,GEe),e(GEe,jDr),e(jw,DDr),e(jw,oZ),e(oZ,GDr),e(jw,ODr),e(Wr,VDr),M(Dw,Wr,null),b(f,hDe,_),b(f,ef,_),e(ef,Gw),e(Gw,OEe),M(ux,OEe,null),e(ef,XDr),e(ef,VEe),e(VEe,zDr),b(f,pDe,_),b(f,vr,_),M(_x,vr,null),e(vr,WDr),e(vr,of),e(of,QDr),e(of,rZ),e(rZ,HDr),e(of,UDr),e(of,tZ),e(tZ,JDr),e(of,YDr),e(vr,KDr),e(vr,bx),e(bx,ZDr),e(bx,XEe),e(XEe,eGr),e(bx,oGr),e(vr,rGr),e(vr,Ut),M(vx,Ut,null),e(Ut,tGr),e(Ut,zEe),e(zEe,aGr),e(Ut,nGr),e(Ut,rf),e(rf,sGr),e(rf,WEe),e(WEe,lGr),e(rf,iGr),e(rf,aZ),e(aZ,dGr),e(rf,cGr),e(Ut,fGr),M(Ow,Ut,null),e(vr,mGr),e(vr,Qr),M(Fx,Qr,null),e(Qr,gGr),e(Qr,QEe),e(QEe,hGr),e(Qr,pGr),e(Qr,Mn),e(Mn,uGr),e(Mn,HEe),e(HEe,_Gr),e(Mn,bGr),e(Mn,UEe),e(UEe,vGr),e(Mn,FGr),e(Mn,JEe),e(JEe,TGr),e(Mn,MGr),e(Qr,EGr),e(Qr,Ge),e(Ge,Vw),e(Vw,YEe),e(YEe,CGr),e(Vw,wGr),e(Vw,nZ),e(nZ,AGr),e(Vw,yGr),e(Ge,LGr),e(Ge,Xw),e(Xw,KEe),e(KEe,xGr),e(Xw,$Gr),e(Xw,sZ),e(sZ,kGr),e(Xw,SGr),e(Ge,RGr),e(Ge,zw),e(zw,ZEe),e(ZEe,PGr),e(zw,BGr),e(zw,lZ),e(lZ,IGr),e(zw,NGr),e(Ge,qGr),e(Ge,Ww),e(Ww,eCe),e(eCe,jGr),e(Ww,DGr),e(Ww,iZ),e(iZ,GGr),e(Ww,OGr),e(Ge,VGr),e(Ge,Qw),e(Qw,oCe),e(oCe,XGr),e(Qw,zGr),e(Qw,dZ),e(dZ,WGr),e(Qw,QGr),e(Ge,HGr),e(Ge,Hw),e(Hw,rCe),e(rCe,UGr),e(Hw,JGr),e(Hw,cZ),e(cZ,YGr),e(Hw,KGr),e(Ge,ZGr),e(Ge,Uw),e(Uw,tCe),e(tCe,eOr),e(Uw,oOr),e(Uw,fZ),e(fZ,rOr),e(Uw,tOr),e(Ge,aOr),e(Ge,Jw),e(Jw,aCe),e(aCe,nOr),e(Jw,sOr),e(Jw,mZ),e(mZ,lOr),e(Jw,iOr),e(Qr,dOr),M(Yw,Qr,null),b(f,uDe,_),b(f,tf,_),e(tf,Kw),e(Kw,nCe),M(Tx,nCe,null),e(tf,cOr),e(tf,sCe),e(sCe,fOr),b(f,_De,_),b(f,Fr,_),M(Mx,Fr,null),e(Fr,mOr),e(Fr,af),e(af,gOr),e(af,gZ),e(gZ,hOr),e(af,pOr),e(af,hZ),e(hZ,uOr),e(af,_Or),e(Fr,bOr),e(Fr,Ex),e(Ex,vOr),e(Ex,lCe),e(lCe,FOr),e(Ex,TOr),e(Fr,MOr),e(Fr,Jt),M(Cx,Jt,null),e(Jt,EOr),e(Jt,iCe),e(iCe,COr),e(Jt,wOr),e(Jt,nf),e(nf,AOr),e(nf,dCe),e(dCe,yOr),e(nf,LOr),e(nf,pZ),e(pZ,xOr),e(nf,$Or),e(Jt,kOr),M(Zw,Jt,null),e(Fr,SOr),e(Fr,Hr),M(wx,Hr,null),e(Hr,ROr),e(Hr,cCe),e(cCe,POr),e(Hr,BOr),e(Hr,En),e(En,IOr),e(En,fCe),e(fCe,NOr),e(En,qOr),e(En,mCe),e(mCe,jOr),e(En,DOr),e(En,gCe),e(gCe,GOr),e(En,OOr),e(Hr,VOr),e(Hr,hCe),e(hCe,e0),e(e0,pCe),e(pCe,XOr),e(e0,zOr),e(e0,uZ),e(uZ,WOr),e(e0,QOr),e(Hr,HOr),M(o0,Hr,null),b(f,bDe,_),b(f,sf,_),e(sf,r0),e(r0,uCe),M(Ax,uCe,null),e(sf,UOr),e(sf,_Ce),e(_Ce,JOr),b(f,vDe,_),b(f,Tr,_),M(yx,Tr,null),e(Tr,YOr),e(Tr,lf),e(lf,KOr),e(lf,_Z),e(_Z,ZOr),e(lf,eVr),e(lf,bZ),e(bZ,oVr),e(lf,rVr),e(Tr,tVr),e(Tr,Lx),e(Lx,aVr),e(Lx,bCe),e(bCe,nVr),e(Lx,sVr),e(Tr,lVr),e(Tr,Yt),M(xx,Yt,null),e(Yt,iVr),e(Yt,vCe),e(vCe,dVr),e(Yt,cVr),e(Yt,df),e(df,fVr),e(df,FCe),e(FCe,mVr),e(df,gVr),e(df,vZ),e(vZ,hVr),e(df,pVr),e(Yt,uVr),M(t0,Yt,null),e(Tr,_Vr),e(Tr,Ur),M($x,Ur,null),e(Ur,bVr),e(Ur,TCe),e(TCe,vVr),e(Ur,FVr),e(Ur,Cn),e(Cn,TVr),e(Cn,MCe),e(MCe,MVr),e(Cn,EVr),e(Cn,ECe),e(ECe,CVr),e(Cn,wVr),e(Cn,CCe),e(CCe,AVr),e(Cn,yVr),e(Ur,LVr),e(Ur,kx),e(kx,a0),e(a0,wCe),e(wCe,xVr),e(a0,$Vr),e(a0,FZ),e(FZ,kVr),e(a0,SVr),e(kx,RVr),e(kx,n0),e(n0,ACe),e(ACe,PVr),e(n0,BVr),e(n0,TZ),e(TZ,IVr),e(n0,NVr),e(Ur,qVr),M(s0,Ur,null),b(f,FDe,_),b(f,cf,_),e(cf,l0),e(l0,yCe),M(Sx,yCe,null),e(cf,jVr),e(cf,LCe),e(LCe,DVr),b(f,TDe,_),b(f,Mr,_),M(Rx,Mr,null),e(Mr,GVr),e(Mr,ff),e(ff,OVr),e(ff,MZ),e(MZ,VVr),e(ff,XVr),e(ff,EZ),e(EZ,zVr),e(ff,WVr),e(Mr,QVr),e(Mr,Px),e(Px,HVr),e(Px,xCe),e(xCe,UVr),e(Px,JVr),e(Mr,YVr),e(Mr,Kt),M(Bx,Kt,null),e(Kt,KVr),e(Kt,$Ce),e($Ce,ZVr),e(Kt,eXr),e(Kt,mf),e(mf,oXr),e(mf,kCe),e(kCe,rXr),e(mf,tXr),e(mf,CZ),e(CZ,aXr),e(mf,nXr),e(Kt,sXr),M(i0,Kt,null),e(Mr,lXr),e(Mr,Jr),M(Ix,Jr,null),e(Jr,iXr),e(Jr,SCe),e(SCe,dXr),e(Jr,cXr),e(Jr,wn),e(wn,fXr),e(wn,RCe),e(RCe,mXr),e(wn,gXr),e(wn,PCe),e(PCe,hXr),e(wn,pXr),e(wn,BCe),e(BCe,uXr),e(wn,_Xr),e(Jr,bXr),e(Jr,ICe),e(ICe,d0),e(d0,NCe),e(NCe,vXr),e(d0,FXr),e(d0,wZ),e(wZ,TXr),e(d0,MXr),e(Jr,EXr),M(c0,Jr,null),MDe=!0},p(f,[_]){const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),Tf.$set(Nx);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),wg.$set(qCe);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),sh.$set(jCe);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),jh.$set(DCe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),Dh.$set(qx);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),lp.$set(GCe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),ip.$set(An);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),fp.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),l_.$set(VCe);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),d_.$set(XCe);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),Z_.$set(jx);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),o1.$set(zCe);const Dx={};_&2&&(Dx.$$scope={dirty:_,ctx:f}),D1.$set(Dx);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),O1.$set(WCe);const Gx={};_&2&&(Gx.$$scope={dirty:_,ctx:f}),w3.$set(Gx);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),y3.$set(QCe);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),z3.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),Q3.$set(UCe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),Ob.$set(gf);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),Xb.$set(JCe);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),T2.$set(YCe);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),E2.$set(KCe);const Ox={};_&2&&(Ox.$$scope={dirty:_,ctx:f}),$2.$set(Ox);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),S2.$set(ZCe);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),hv.$set(e5e);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),uv.$set(o5e);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),aF.$set(et);const Vx={};_&2&&(Vx.$$scope={dirty:_,ctx:f}),sF.$set(Vx);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),dF.$set(r5e);const Xx={};_&2&&(Xx.$$scope={dirty:_,ctx:f}),fF.$set(Xx);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),wF.$set(t5e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),yF.$set(ot);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),$F.$set(a5e);const hf={};_&2&&(hf.$$scope={dirty:_,ctx:f}),SF.$set(hf);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),VF.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),zF.$set(s5e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),KF.$set(y);const f0={};_&2&&(f0.$$scope={dirty:_,ctx:f}),eT.$set(f0);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),fT.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),gT.$set(i5e);const m0={};_&2&&(m0.$$scope={dirty:_,ctx:f}),_T.$set(m0);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),vT.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),AT.$set(c5e);const g0={};_&2&&(g0.$$scope={dirty:_,ctx:f}),LT.$set(g0);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),RT.$set(f5e);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),BT.$set(m5e);const h0={};_&2&&(h0.$$scope={dirty:_,ctx:f}),jT.$set(h0);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),GT.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),XT.$set(h5e);const p0={};_&2&&(p0.$$scope={dirty:_,ctx:f}),WT.$set(p0);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),KT.$set(p5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),e7.$set(u5e);const u0={};_&2&&(u0.$$scope={dirty:_,ctx:f}),t7.$set(u0);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),n7.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),Y7.$set(b5e);const _0={};_&2&&(_0.$$scope={dirty:_,ctx:f}),Z7.$set(_0);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),EM.$set(v5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),wM.$set(F5e);const b0={};_&2&&(b0.$$scope={dirty:_,ctx:f}),qM.$set(b0);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),DM.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),zM.$set(M5e);const v0={};_&2&&(v0.$$scope={dirty:_,ctx:f}),QM.$set(v0);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),h4.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),u4.$set(C5e);const F0={};_&2&&(F0.$$scope={dirty:_,ctx:f}),y4.$set(F0);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),x4.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),rE.$set(A5e);const T0={};_&2&&(T0.$$scope={dirty:_,ctx:f}),aE.$set(T0);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),ME.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),CE.$set(L5e);const M0={};_&2&&(M0.$$scope={dirty:_,ctx:f}),yE.$set(M0);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),xE.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),kE.$set($5e);const E0={};_&2&&(E0.$$scope={dirty:_,ctx:f}),RE.$set(E0);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),eC.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),rC.$set(S5e);const C0={};_&2&&(C0.$$scope={dirty:_,ctx:f}),EC.$set(C0);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),wC.$set(R5e);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),yC.$set(P5e);const w0={};_&2&&(w0.$$scope={dirty:_,ctx:f}),xC.$set(w0);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),kC.$set(B5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),RC.$set(I5e);const A0={};_&2&&(A0.$$scope={dirty:_,ctx:f}),n5.$set(A0);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:f}),l5.$set(N5e);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),_5.$set(q5e);const y0={};_&2&&(y0.$$scope={dirty:_,ctx:f}),v5.$set(y0);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:f}),S5.$set(j5e);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:f}),P5.$set(D5e);const L0={};_&2&&(L0.$$scope={dirty:_,ctx:f}),z5.$set(L0);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),Q5.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),tw.$set(O5e);const x0={};_&2&&(x0.$$scope={dirty:_,ctx:f}),nw.$set(x0);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),uw.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),bw.$set(X5e);const $0={};_&2&&($0.$$scope={dirty:_,ctx:f}),xw.$set($0);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),kw.$set(z5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),Dw.$set(W5e);const k0={};_&2&&(k0.$$scope={dirty:_,ctx:f}),Ow.$set(k0);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),Yw.$set(Q5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:f}),Zw.$set(H5e);const S0={};_&2&&(S0.$$scope={dirty:_,ctx:f}),o0.$set(S0);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:f}),t0.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:f}),s0.$set(J5e);const R0={};_&2&&(R0.$$scope={dirty:_,ctx:f}),i0.$set(R0);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:f}),c0.$set(Y5e)},i(f){MDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(Tf.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(wg.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(sh.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ry.$$.fragment,f),E(lp.$$.fragment,f),E(ip.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(fp.$$.fragment,f),E(iy.$$.fragment,f),E(l_.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(d_.$$.fragment,f),E(gy.$$.fragment,f),E(Z_.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(o1.$$.fragment,f),E(by.$$.fragment,f),E(D1.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(O1.$$.fragment,f),E(Ey.$$.fragment,f),E(w3.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(y3.$$.fragment,f),E(Ly.$$.fragment,f),E(z3.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Q3.$$.fragment,f),E(Ry.$$.fragment,f),E(Ob.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(Xb.$$.fragment,f),E(qy.$$.fragment,f),E(T2.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(E2.$$.fragment,f),E(Vy.$$.fragment,f),E($2.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(S2.$$.fragment,f),E(Hy.$$.fragment,f),E(hv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(uv.$$.fragment,f),E(Zy.$$.fragment,f),E(aF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(sF.$$.fragment,f),E(aL.$$.fragment,f),E(dF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(fF.$$.fragment,f),E(dL.$$.fragment,f),E(wF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(yF.$$.fragment,f),E(hL.$$.fragment,f),E($F.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(SF.$$.fragment,f),E(vL.$$.fragment,f),E(VF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(zF.$$.fragment,f),E(CL.$$.fragment,f),E(KF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(eT.$$.fragment,f),E(xL.$$.fragment,f),E(fT.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(gT.$$.fragment,f),E(PL.$$.fragment,f),E(_T.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(vT.$$.fragment,f),E(DL.$$.fragment,f),E(AT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(LT.$$.fragment,f),E(zL.$$.fragment,f),E(RT.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(BT.$$.fragment,f),E(JL.$$.fragment,f),E(jT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(GT.$$.fragment,f),E(r8.$$.fragment,f),E(XT.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(WT.$$.fragment,f),E(l8.$$.fragment,f),E(KT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(e7.$$.fragment,f),E(m8.$$.fragment,f),E(t7.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(n7.$$.fragment,f),E(_8.$$.fragment,f),E(Y7.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(Z7.$$.fragment,f),E(M8.$$.fragment,f),E(EM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(wM.$$.fragment,f),E(y8.$$.fragment,f),E(qM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(DM.$$.fragment,f),E(S8.$$.fragment,f),E(zM.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(QM.$$.fragment,f),E(N8.$$.fragment,f),E(h4.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(u4.$$.fragment,f),E(O8.$$.fragment,f),E(y4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(x4.$$.fragment,f),E(Q8.$$.fragment,f),E(rE.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(aE.$$.fragment,f),E(K8.$$.fragment,f),E(ME.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(CE.$$.fragment,f),E(t9.$$.fragment,f),E(yE.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(xE.$$.fragment,f),E(d9.$$.fragment,f),E(kE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(RE.$$.fragment,f),E(h9.$$.fragment,f),E(eC.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(rC.$$.fragment,f),E(v9.$$.fragment,f),E(EC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(wC.$$.fragment,f),E(C9.$$.fragment,f),E(yC.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(xC.$$.fragment,f),E(x9.$$.fragment,f),E(kC.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(RC.$$.fragment,f),E(P9.$$.fragment,f),E(n5.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(l5.$$.fragment,f),E(j9.$$.fragment,f),E(_5.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(v5.$$.fragment,f),E(X9.$$.fragment,f),E(S5.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(P5.$$.fragment,f),E(U9.$$.fragment,f),E(z5.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(Q5.$$.fragment,f),E(ex.$$.fragment,f),E(tw.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(nw.$$.fragment,f),E(nx.$$.fragment,f),E(uw.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(bw.$$.fragment,f),E(cx.$$.fragment,f),E(xw.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(kw.$$.fragment,f),E(px.$$.fragment,f),E(Dw.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(Ow.$$.fragment,f),E(Fx.$$.fragment,f),E(Yw.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(Zw.$$.fragment,f),E(wx.$$.fragment,f),E(o0.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(t0.$$.fragment,f),E($x.$$.fragment,f),E(s0.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(i0.$$.fragment,f),E(Ix.$$.fragment,f),E(c0.$$.fragment,f),MDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(Tf.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(wg.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(sh.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ry.$$.fragment,f),C(lp.$$.fragment,f),C(ip.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(fp.$$.fragment,f),C(iy.$$.fragment,f),C(l_.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(d_.$$.fragment,f),C(gy.$$.fragment,f),C(Z_.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(o1.$$.fragment,f),C(by.$$.fragment,f),C(D1.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(O1.$$.fragment,f),C(Ey.$$.fragment,f),C(w3.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(y3.$$.fragment,f),C(Ly.$$.fragment,f),C(z3.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Q3.$$.fragment,f),C(Ry.$$.fragment,f),C(Ob.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(Xb.$$.fragment,f),C(qy.$$.fragment,f),C(T2.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(E2.$$.fragment,f),C(Vy.$$.fragment,f),C($2.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(S2.$$.fragment,f),C(Hy.$$.fragment,f),C(hv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(uv.$$.fragment,f),C(Zy.$$.fragment,f),C(aF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(sF.$$.fragment,f),C(aL.$$.fragment,f),C(dF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(fF.$$.fragment,f),C(dL.$$.fragment,f),C(wF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(yF.$$.fragment,f),C(hL.$$.fragment,f),C($F.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(SF.$$.fragment,f),C(vL.$$.fragment,f),C(VF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(zF.$$.fragment,f),C(CL.$$.fragment,f),C(KF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(eT.$$.fragment,f),C(xL.$$.fragment,f),C(fT.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(gT.$$.fragment,f),C(PL.$$.fragment,f),C(_T.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(vT.$$.fragment,f),C(DL.$$.fragment,f),C(AT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(LT.$$.fragment,f),C(zL.$$.fragment,f),C(RT.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(BT.$$.fragment,f),C(JL.$$.fragment,f),C(jT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(GT.$$.fragment,f),C(r8.$$.fragment,f),C(XT.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(WT.$$.fragment,f),C(l8.$$.fragment,f),C(KT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(e7.$$.fragment,f),C(m8.$$.fragment,f),C(t7.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(n7.$$.fragment,f),C(_8.$$.fragment,f),C(Y7.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(Z7.$$.fragment,f),C(M8.$$.fragment,f),C(EM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(wM.$$.fragment,f),C(y8.$$.fragment,f),C(qM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(DM.$$.fragment,f),C(S8.$$.fragment,f),C(zM.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(QM.$$.fragment,f),C(N8.$$.fragment,f),C(h4.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(u4.$$.fragment,f),C(O8.$$.fragment,f),C(y4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(x4.$$.fragment,f),C(Q8.$$.fragment,f),C(rE.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(aE.$$.fragment,f),C(K8.$$.fragment,f),C(ME.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(CE.$$.fragment,f),C(t9.$$.fragment,f),C(yE.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(xE.$$.fragment,f),C(d9.$$.fragment,f),C(kE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(RE.$$.fragment,f),C(h9.$$.fragment,f),C(eC.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(rC.$$.fragment,f),C(v9.$$.fragment,f),C(EC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(wC.$$.fragment,f),C(C9.$$.fragment,f),C(yC.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(xC.$$.fragment,f),C(x9.$$.fragment,f),C(kC.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(RC.$$.fragment,f),C(P9.$$.fragment,f),C(n5.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(l5.$$.fragment,f),C(j9.$$.fragment,f),C(_5.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(v5.$$.fragment,f),C(X9.$$.fragment,f),C(S5.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(P5.$$.fragment,f),C(U9.$$.fragment,f),C(z5.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(Q5.$$.fragment,f),C(ex.$$.fragment,f),C(tw.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(nw.$$.fragment,f),C(nx.$$.fragment,f),C(uw.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(bw.$$.fragment,f),C(cx.$$.fragment,f),C(xw.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(kw.$$.fragment,f),C(px.$$.fragment,f),C(Dw.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(Ow.$$.fragment,f),C(Fx.$$.fragment,f),C(Yw.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(Zw.$$.fragment,f),C(wx.$$.fragment,f),C(o0.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(t0.$$.fragment,f),C($x.$$.fragment,f),C(s0.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(i0.$$.fragment,f),C(Ix.$$.fragment,f),C(c0.$$.fragment,f),MDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(je),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(vqe),f&&t(vi),w(SA),f&&t(Fqe),f&&t(kn),f&&t(Tqe),w(RA,f),f&&t(Mqe),f&&t(rk),f&&t(Eqe),w(Tf,f),f&&t(Cqe),f&&t(Fi),w(PA),f&&t(wqe),f&&t(Co),w(BA),w(qA),w(wg),w(jA),f&&t(Aqe),f&&t(Mi),w(DA),f&&t(yqe),f&&t(wo),w(GA),w(XA),w(sh),w(zA),f&&t(Lqe),f&&t(Ei),w(WA),f&&t(xqe),f&&t(Ao),w(QA),w(JA),w(jh),w(Dh),w(YA),f&&t($qe),f&&t(Ci),w(KA),f&&t(kqe),f&&t(yo),w(ZA),w(ry),w(lp),w(ip),w(ty),f&&t(Sqe),f&&t(Ai),w(ay),f&&t(Rqe),f&&t(Lo),w(ny),w(ly),w(fp),w(iy),w(l_),f&&t(Pqe),f&&t(xi),w(dy),f&&t(Bqe),f&&t(xo),w(cy),w(my),w(d_),w(gy),w(Z_),f&&t(Iqe),f&&t(Si),w(hy),f&&t(Nqe),f&&t($o),w(py),w(_y),w(o1),w(by),w(D1),f&&t(qqe),f&&t(Bi),w(vy),f&&t(jqe),f&&t(ko),w(Fy),w(My),w(O1),w(Ey),w(w3),f&&t(Dqe),f&&t(qi),w(Cy),f&&t(Gqe),f&&t(So),w(wy),w(yy),w(y3),w(Ly),w(z3),f&&t(Oqe),f&&t(Gi),w(xy),f&&t(Vqe),f&&t(Ro),w($y),w(Sy),w(Q3),w(Ry),w(Ob),f&&t(Xqe),f&&t(Xi),w(Py),f&&t(zqe),f&&t(Po),w(By),w(Ny),w(Xb),w(qy),w(T2),f&&t(Wqe),f&&t(Qi),w(jy),f&&t(Qqe),f&&t(Bo),w(Dy),w(Oy),w(E2),w(Vy),w($2),f&&t(Hqe),f&&t(Ji),w(Xy),f&&t(Uqe),f&&t(Io),w(zy),w(Qy),w(S2),w(Hy),w(hv),f&&t(Jqe),f&&t(Zi),w(Uy),f&&t(Yqe),f&&t(No),w(Jy),w(Ky),w(uv),w(Zy),w(aF),f&&t(Kqe),f&&t(rd),w(eL),f&&t(Zqe),f&&t(qo),w(oL),w(tL),w(sF),w(aL),w(dF),f&&t(eje),f&&t(nd),w(nL),f&&t(oje),f&&t(jo),w(sL),w(iL),w(fF),w(dL),w(wF),f&&t(rje),f&&t(id),w(cL),f&&t(tje),f&&t(Do),w(fL),w(gL),w(yF),w(hL),w($F),f&&t(aje),f&&t(fd),w(pL),f&&t(nje),f&&t(Go),w(uL),w(bL),w(SF),w(vL),w(VF),f&&t(sje),f&&t(hd),w(FL),f&&t(lje),f&&t(Oo),w(TL),w(EL),w(zF),w(CL),w(KF),f&&t(ije),f&&t(_d),w(wL),f&&t(dje),f&&t(Vo),w(AL),w(LL),w(eT),w(xL),w(fT),f&&t(cje),f&&t(Fd),w($L),f&&t(fje),f&&t(Xo),w(kL),w(RL),w(gT),w(PL),w(_T),f&&t(mje),f&&t(Ed),w(IL),f&&t(gje),f&&t(zo),w(NL),w(jL),w(vT),w(DL),w(AT),f&&t(hje),f&&t(Ad),w(GL),f&&t(pje),f&&t(Wo),w(OL),w(XL),w(LT),w(zL),w(RT),f&&t(uje),f&&t($d),w(WL),f&&t(_je),f&&t(Qo),w(QL),w(UL),w(BT),w(JL),w(jT),f&&t(bje),f&&t(Rd),w(KL),f&&t(vje),f&&t(Ho),w(ZL),w(o8),w(GT),w(r8),w(XT),f&&t(Fje),f&&t(Id),w(t8),f&&t(Tje),f&&t(Uo),w(a8),w(s8),w(WT),w(l8),w(KT),f&&t(Mje),f&&t(jd),w(i8),f&&t(Eje),f&&t(Jo),w(d8),w(f8),w(e7),w(m8),w(t7),f&&t(Cje),f&&t(Od),w(g8),f&&t(wje),f&&t(Yo),w(h8),w(u8),w(n7),w(_8),w(Y7),f&&t(Aje),f&&t(zd),w(b8),f&&t(yje),f&&t(Ko),w(v8),w(T8),w(Z7),w(M8),w(EM),f&&t(Lje),f&&t(Hd),w(E8),f&&t(xje),f&&t(Zo),w(C8),w(A8),w(wM),w(y8),w(qM),f&&t($je),f&&t(Yd),w(L8),f&&t(kje),f&&t(er),w(x8),w(k8),w(DM),w(S8),w(zM),f&&t(Sje),f&&t(ec),w(R8),f&&t(Rje),f&&t(or),w(P8),w(I8),w(QM),w(N8),w(h4),f&&t(Pje),f&&t(tc),w(q8),f&&t(Bje),f&&t(rr),w(j8),w(G8),w(u4),w(O8),w(y4),f&&t(Ije),f&&t(sc),w(V8),f&&t(Nje),f&&t(tr),w(X8),w(W8),w(x4),w(Q8),w(rE),f&&t(qje),f&&t(dc),w(H8),f&&t(jje),f&&t(ar),w(U8),w(Y8),w(aE),w(K8),w(ME),f&&t(Dje),f&&t(mc),w(Z8),f&&t(Gje),f&&t(nr),w(e9),w(r9),w(CE),w(t9),w(yE),f&&t(Oje),f&&t(pc),w(n9),f&&t(Vje),f&&t(sr),w(s9),w(i9),w(xE),w(d9),w(kE),f&&t(Xje),f&&t(bc),w(c9),f&&t(zje),f&&t(lr),w(f9),w(g9),w(RE),w(h9),w(eC),f&&t(Wje),f&&t(Tc),w(p9),f&&t(Qje),f&&t(ir),w(u9),w(b9),w(rC),w(v9),w(EC),f&&t(Hje),f&&t(Cc),w(F9),f&&t(Uje),f&&t(dr),w(T9),w(E9),w(wC),w(C9),w(yC),f&&t(Jje),f&&t(yc),w(w9),f&&t(Yje),f&&t(cr),w(A9),w(L9),w(xC),w(x9),w(kC),f&&t(Kje),f&&t($c),w($9),f&&t(Zje),f&&t(fr),w(k9),w(R9),w(RC),w(P9),w(n5),f&&t(eDe),f&&t(Rc),w(B9),f&&t(oDe),f&&t(mr),w(I9),w(q9),w(l5),w(j9),w(_5),f&&t(rDe),f&&t(Ic),w(D9),f&&t(tDe),f&&t(gr),w(G9),w(V9),w(v5),w(X9),w(S5),f&&t(aDe),f&&t(jc),w(z9),f&&t(nDe),f&&t(hr),w(W9),w(H9),w(P5),w(U9),w(z5),f&&t(sDe),f&&t(Oc),w(J9),f&&t(lDe),f&&t(pr),w(Y9),w(Z9),w(Q5),w(ex),w(tw),f&&t(iDe),f&&t(zc),w(ox),f&&t(dDe),f&&t(ur),w(rx),w(ax),w(nw),w(nx),w(uw),f&&t(cDe),f&&t(Hc),w(sx),f&&t(fDe),f&&t(_r),w(lx),w(dx),w(bw),w(cx),w(xw),f&&t(mDe),f&&t(Yc),w(fx),f&&t(gDe),f&&t(br),w(mx),w(hx),w(kw),w(px),w(Dw),f&&t(hDe),f&&t(ef),w(ux),f&&t(pDe),f&&t(vr),w(_x),w(vx),w(Ow),w(Fx),w(Yw),f&&t(uDe),f&&t(tf),w(Tx),f&&t(_De),f&&t(Fr),w(Mx),w(Cx),w(Zw),w(wx),w(o0),f&&t(bDe),f&&t(sf),w(Ax),f&&t(vDe),f&&t(Tr),w(yx),w(xx),w(t0),w($x),w(s0),f&&t(FDe),f&&t(cf),w(Sx),f&&t(TDe),f&&t(Mr),w(Rx),w(Bx),w(i0),w(Ix),w(c0)}}}const hRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function pRt(L){return pkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class MRt extends fkt{constructor(g){super();mkt(this,g,pRt,gRt,gkt,{})}}export{MRt as default,hRt as metadata};
