import{S as CGt,i as wGt,s as AGt,e as a,k as l,w as F,t as o,M as LGt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as yGt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as QKr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xGt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,$L,$f,Oe,Qe,wi,Rn,kL,Pn,Bn,SL,Ai,In,RL,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),$L=o(")."),$f=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),kL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),SL=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),RL=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var iS=s(p);m=r(iS,"NewModelConfig"),iS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var dS=s(Mi);xf=r(dS,"model_type"),dS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var cS=s(Ei);Ci=r(cS,'"new-model"'),cS.forEach(t),$L=r(Ae,")."),Ae.forEach(t),$f=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),kL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var fS=s(Pn);Bn=r(fS,"PreTrainedModel"),fS.forEach(t),SL=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);In=r(Sf,"config_class"),Sf.forEach(t),RL=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var mS=s(Li);kf=r(mS,"NewModelConfig"),mS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,at),e(g,Ei),e(Ei,Ci),e(g,$L),b(We,$f,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,kL),e(Oe,Pn),e(Pn,Bn),e(Oe,SL),e(Oe,Ai),e(Ai,In),e(Oe,RL),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(We){We&&t(g),We&&t($f),We&&t(Oe)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,$L,$f,Oe,Qe,wi,Rn,kL,Pn,Bn,SL,Ai,In,RL,Li,kf,xa,We,Ae,iS,yi,dS,cS,Co,$a,fS,Sf,mS,TQe,sOe,xi,Rf,Cte,PL,MQe,wte,EQe,lOe,Nn,CQe,Ate,wQe,AQe,Lte,LQe,yQe,iOe,BL,dOe,gS,xQe,cOe,Pf,fOe,$i,Bf,yte,IL,$Qe,xte,kQe,mOe,wo,NL,SQe,qL,RQe,hS,PQe,BQe,IQe,jL,NQe,$te,qQe,jQe,DQe,Ar,DL,GQe,kte,OQe,VQe,ki,XQe,Ste,zQe,QQe,Rte,WQe,HQe,UQe,A,If,Pte,JQe,YQe,pS,KQe,ZQe,eWe,Nf,Bte,oWe,rWe,_S,tWe,aWe,nWe,qf,Ite,sWe,lWe,uS,iWe,dWe,cWe,jf,Nte,fWe,mWe,bS,gWe,hWe,pWe,Df,qte,_We,uWe,vS,bWe,vWe,FWe,Gf,jte,TWe,MWe,FS,EWe,CWe,wWe,Of,Dte,AWe,LWe,TS,yWe,xWe,$We,Vf,Gte,kWe,SWe,MS,RWe,PWe,BWe,Xf,Ote,IWe,NWe,ES,qWe,jWe,DWe,zf,Vte,GWe,OWe,CS,VWe,XWe,zWe,Qf,Xte,QWe,WWe,wS,HWe,UWe,JWe,Wf,zte,YWe,KWe,AS,ZWe,eHe,oHe,Hf,Qte,rHe,tHe,LS,aHe,nHe,sHe,Uf,Wte,lHe,iHe,yS,dHe,cHe,fHe,Jf,Hte,mHe,gHe,xS,hHe,pHe,_He,Yf,Ute,uHe,bHe,$S,vHe,FHe,THe,Kf,Jte,MHe,EHe,kS,CHe,wHe,AHe,Zf,Yte,LHe,yHe,SS,xHe,$He,kHe,em,Kte,SHe,RHe,RS,PHe,BHe,IHe,om,Zte,NHe,qHe,PS,jHe,DHe,GHe,rm,eae,OHe,VHe,BS,XHe,zHe,QHe,tm,oae,WHe,HHe,IS,UHe,JHe,YHe,am,rae,KHe,ZHe,NS,eUe,oUe,rUe,nm,tae,tUe,aUe,qS,nUe,sUe,lUe,sm,aae,iUe,dUe,jS,cUe,fUe,mUe,lm,nae,gUe,hUe,DS,pUe,_Ue,uUe,im,sae,bUe,vUe,GS,FUe,TUe,MUe,dm,lae,EUe,CUe,OS,wUe,AUe,LUe,cm,iae,yUe,xUe,VS,$Ue,kUe,SUe,fm,dae,RUe,PUe,XS,BUe,IUe,NUe,mm,cae,qUe,jUe,zS,DUe,GUe,OUe,gm,fae,VUe,XUe,QS,zUe,QUe,WUe,hm,mae,HUe,UUe,WS,JUe,YUe,KUe,pm,gae,ZUe,eJe,HS,oJe,rJe,tJe,_m,hae,aJe,nJe,US,sJe,lJe,iJe,um,pae,dJe,cJe,JS,fJe,mJe,gJe,bm,_ae,hJe,pJe,YS,_Je,uJe,bJe,vm,uae,vJe,FJe,KS,TJe,MJe,EJe,Fm,bae,CJe,wJe,ZS,AJe,LJe,yJe,Tm,vae,xJe,$Je,eR,kJe,SJe,RJe,Mm,Fae,PJe,BJe,oR,IJe,NJe,qJe,Em,Tae,jJe,DJe,rR,GJe,OJe,VJe,Cm,Mae,XJe,zJe,tR,QJe,WJe,HJe,wm,Eae,UJe,JJe,aR,YJe,KJe,ZJe,Am,Cae,eYe,oYe,nR,rYe,tYe,aYe,Lm,wae,nYe,sYe,sR,lYe,iYe,dYe,ym,Aae,cYe,fYe,lR,mYe,gYe,hYe,xm,Lae,pYe,_Ye,iR,uYe,bYe,vYe,$m,yae,FYe,TYe,dR,MYe,EYe,CYe,km,xae,wYe,AYe,cR,LYe,yYe,xYe,Sm,$ae,$Ye,kYe,fR,SYe,RYe,PYe,Rm,kae,BYe,IYe,mR,NYe,qYe,jYe,Pm,Sae,DYe,GYe,gR,OYe,VYe,XYe,Bm,Rae,zYe,QYe,hR,WYe,HYe,UYe,Im,Pae,JYe,YYe,pR,KYe,ZYe,eKe,Nm,Bae,oKe,rKe,_R,tKe,aKe,nKe,qm,Iae,sKe,lKe,uR,iKe,dKe,cKe,jm,Nae,fKe,mKe,bR,gKe,hKe,pKe,Dm,qae,_Ke,uKe,vR,bKe,vKe,FKe,Gm,jae,TKe,MKe,FR,EKe,CKe,wKe,Om,Dae,AKe,LKe,TR,yKe,xKe,$Ke,Vm,Gae,kKe,SKe,MR,RKe,PKe,BKe,Xm,Oae,IKe,NKe,ER,qKe,jKe,DKe,zm,Vae,GKe,OKe,CR,VKe,XKe,zKe,Qm,Xae,QKe,WKe,wR,HKe,UKe,JKe,Wm,zae,YKe,KKe,AR,ZKe,eZe,oZe,Hm,Qae,rZe,tZe,LR,aZe,nZe,sZe,Um,Wae,lZe,iZe,yR,dZe,cZe,fZe,Jm,Hae,mZe,gZe,xR,hZe,pZe,_Ze,Ym,Uae,uZe,bZe,$R,vZe,FZe,TZe,Km,Jae,MZe,EZe,kR,CZe,wZe,AZe,Zm,Yae,LZe,yZe,SR,xZe,$Ze,kZe,eg,Kae,SZe,RZe,RR,PZe,BZe,IZe,og,Zae,NZe,qZe,PR,jZe,DZe,GZe,rg,ene,OZe,VZe,BR,XZe,zZe,QZe,tg,one,WZe,HZe,IR,UZe,JZe,YZe,ag,rne,KZe,ZZe,NR,eeo,oeo,reo,ng,tne,teo,aeo,qR,neo,seo,leo,sg,ane,ieo,deo,jR,ceo,feo,meo,lg,nne,geo,heo,DR,peo,_eo,ueo,ig,sne,beo,veo,GR,Feo,Teo,Meo,dg,lne,Eeo,Ceo,OR,weo,Aeo,Leo,cg,ine,yeo,xeo,VR,$eo,keo,Seo,fg,dne,Reo,Peo,XR,Beo,Ieo,Neo,mg,cne,qeo,jeo,zR,Deo,Geo,Oeo,gg,fne,Veo,Xeo,QR,zeo,Qeo,Weo,hg,mne,Heo,Ueo,WR,Jeo,Yeo,Keo,pg,gne,Zeo,eoo,HR,ooo,roo,too,_g,hne,aoo,noo,UR,soo,loo,ioo,ug,pne,doo,coo,JR,foo,moo,goo,bg,_ne,hoo,poo,YR,_oo,uoo,boo,vg,une,voo,Foo,KR,Too,Moo,Eoo,Fg,bne,Coo,woo,ZR,Aoo,Loo,yoo,Tg,vne,xoo,$oo,eP,koo,Soo,Roo,Mg,Fne,Poo,Boo,oP,Ioo,Noo,qoo,Eg,Tne,joo,Doo,rP,Goo,Ooo,Voo,Cg,Mne,Xoo,zoo,tP,Qoo,Woo,Hoo,wg,Ene,Uoo,Joo,aP,Yoo,Koo,Zoo,Ag,Cne,ero,oro,nP,rro,tro,aro,Lg,wne,nro,sro,sP,lro,iro,dro,yg,Ane,cro,fro,lP,mro,gro,hro,xg,Lne,pro,_ro,iP,uro,bro,vro,$g,yne,Fro,Tro,dP,Mro,Ero,Cro,kg,xne,wro,Aro,cP,Lro,yro,xro,Sg,$ne,$ro,kro,fP,Sro,Rro,Pro,Rg,kne,Bro,Iro,mP,Nro,qro,jro,Pg,Sne,Dro,Gro,gP,Oro,Vro,Xro,Bg,Rne,zro,Qro,hP,Wro,Hro,Uro,Ig,Pne,Jro,Yro,pP,Kro,Zro,eto,Ng,Bne,oto,rto,_P,tto,ato,nto,qg,Ine,sto,lto,uP,ito,dto,cto,jg,Nne,fto,mto,bP,gto,hto,pto,Dg,qne,_to,uto,vP,bto,vto,Fto,Gg,jne,Tto,Mto,FP,Eto,Cto,wto,Og,Dne,Ato,Lto,TP,yto,xto,$to,Vg,kto,Xg,GL,Sto,Gne,Rto,gOe,Si,zg,One,OL,Pto,Vne,Bto,hOe,Ao,VL,Ito,XL,Nto,MP,qto,jto,Dto,zL,Gto,Xne,Oto,Vto,Xto,Lr,QL,zto,zne,Qto,Wto,ka,Hto,Qne,Uto,Jto,Wne,Yto,Kto,Hne,Zto,eao,oao,k,qn,Une,rao,tao,EP,aao,nao,CP,sao,lao,iao,jn,Jne,dao,cao,wP,fao,mao,AP,gao,hao,pao,Dn,Yne,_ao,uao,LP,bao,vao,yP,Fao,Tao,Mao,Qg,Kne,Eao,Cao,xP,wao,Aao,Lao,Gn,Zne,yao,xao,$P,$ao,kao,kP,Sao,Rao,Pao,Wg,ese,Bao,Iao,SP,Nao,qao,jao,Hg,ose,Dao,Gao,RP,Oao,Vao,Xao,Ug,rse,zao,Qao,PP,Wao,Hao,Uao,On,tse,Jao,Yao,BP,Kao,Zao,IP,eno,ono,rno,Vn,ase,tno,ano,NP,nno,sno,qP,lno,ino,dno,Xn,nse,cno,fno,jP,mno,gno,DP,hno,pno,_no,Jg,sse,uno,bno,GP,vno,Fno,Tno,Yg,lse,Mno,Eno,OP,Cno,wno,Ano,Kg,ise,Lno,yno,VP,xno,$no,kno,zn,dse,Sno,Rno,XP,Pno,Bno,zP,Ino,Nno,qno,Zg,cse,jno,Dno,QP,Gno,Ono,Vno,Qn,fse,Xno,zno,WP,Qno,Wno,HP,Hno,Uno,Jno,Wn,mse,Yno,Kno,UP,Zno,eso,JP,oso,rso,tso,Hn,gse,aso,nso,YP,sso,lso,KP,iso,dso,cso,eh,hse,fso,mso,ZP,gso,hso,pso,Un,pse,_so,uso,eB,bso,vso,oB,Fso,Tso,Mso,Jn,_se,Eso,Cso,rB,wso,Aso,tB,Lso,yso,xso,Yn,use,$so,kso,aB,Sso,Rso,nB,Pso,Bso,Iso,Kn,bse,Nso,qso,sB,jso,Dso,lB,Gso,Oso,Vso,Zn,vse,Xso,zso,iB,Qso,Wso,dB,Hso,Uso,Jso,es,Fse,Yso,Kso,cB,Zso,elo,fB,olo,rlo,tlo,oh,Tse,alo,nlo,mB,slo,llo,ilo,os,Mse,dlo,clo,gB,flo,mlo,hB,glo,hlo,plo,rh,Ese,_lo,ulo,pB,blo,vlo,Flo,rs,Cse,Tlo,Mlo,_B,Elo,Clo,uB,wlo,Alo,Llo,ts,wse,ylo,xlo,bB,$lo,klo,vB,Slo,Rlo,Plo,as,Ase,Blo,Ilo,FB,Nlo,qlo,TB,jlo,Dlo,Glo,th,Lse,Olo,Vlo,MB,Xlo,zlo,Qlo,ns,yse,Wlo,Hlo,EB,Ulo,Jlo,CB,Ylo,Klo,Zlo,ss,xse,eio,oio,wB,rio,tio,AB,aio,nio,sio,ls,$se,lio,iio,LB,dio,cio,yB,fio,mio,gio,ah,kse,hio,pio,xB,_io,uio,bio,is,Sse,vio,Fio,$B,Tio,Mio,kB,Eio,Cio,wio,ds,Rse,Aio,Lio,SB,yio,xio,RB,$io,kio,Sio,cs,Pse,Rio,Pio,PB,Bio,Iio,BB,Nio,qio,jio,fs,Bse,Dio,Gio,IB,Oio,Vio,NB,Xio,zio,Qio,ms,Ise,Wio,Hio,qB,Uio,Jio,jB,Yio,Kio,Zio,gs,Nse,edo,odo,DB,rdo,tdo,GB,ado,ndo,sdo,hs,qse,ldo,ido,OB,ddo,cdo,VB,fdo,mdo,gdo,ps,jse,hdo,pdo,XB,_do,udo,zB,bdo,vdo,Fdo,nh,Dse,Tdo,Mdo,QB,Edo,Cdo,wdo,_s,Gse,Ado,Ldo,WB,ydo,xdo,HB,$do,kdo,Sdo,sh,Ose,Rdo,Pdo,UB,Bdo,Ido,Ndo,lh,Vse,qdo,jdo,JB,Ddo,Gdo,Odo,us,Xse,Vdo,Xdo,YB,zdo,Qdo,KB,Wdo,Hdo,Udo,bs,zse,Jdo,Ydo,ZB,Kdo,Zdo,eI,eco,oco,rco,vs,Qse,tco,aco,oI,nco,sco,rI,lco,ico,dco,ih,Wse,cco,fco,tI,mco,gco,hco,Fs,Hse,pco,_co,aI,uco,bco,nI,vco,Fco,Tco,Ts,Use,Mco,Eco,sI,Cco,wco,lI,Aco,Lco,yco,Ms,Jse,xco,$co,iI,kco,Sco,dI,Rco,Pco,Bco,Es,Yse,Ico,Nco,cI,qco,jco,fI,Dco,Gco,Oco,Cs,Kse,Vco,Xco,mI,zco,Qco,gI,Wco,Hco,Uco,ws,Zse,Jco,Yco,hI,Kco,Zco,pI,efo,ofo,rfo,dh,ele,tfo,afo,_I,nfo,sfo,lfo,As,ole,ifo,dfo,uI,cfo,ffo,bI,mfo,gfo,hfo,ch,rle,pfo,_fo,vI,ufo,bfo,vfo,fh,tle,Ffo,Tfo,FI,Mfo,Efo,Cfo,mh,ale,wfo,Afo,TI,Lfo,yfo,xfo,gh,nle,$fo,kfo,MI,Sfo,Rfo,Pfo,Ls,sle,Bfo,Ifo,EI,Nfo,qfo,CI,jfo,Dfo,Gfo,hh,lle,Ofo,Vfo,wI,Xfo,zfo,Qfo,ys,ile,Wfo,Hfo,AI,Ufo,Jfo,LI,Yfo,Kfo,Zfo,xs,dle,emo,omo,yI,rmo,tmo,xI,amo,nmo,smo,$s,cle,lmo,imo,$I,dmo,cmo,kI,fmo,mmo,gmo,ks,fle,hmo,pmo,SI,_mo,umo,RI,bmo,vmo,Fmo,Ss,mle,Tmo,Mmo,PI,Emo,Cmo,BI,wmo,Amo,Lmo,Rs,gle,ymo,xmo,II,$mo,kmo,NI,Smo,Rmo,Pmo,ph,hle,Bmo,Imo,qI,Nmo,qmo,jmo,_h,ple,Dmo,Gmo,jI,Omo,Vmo,Xmo,Ps,_le,zmo,Qmo,DI,Wmo,Hmo,GI,Umo,Jmo,Ymo,Bs,ule,Kmo,Zmo,OI,ego,ogo,VI,rgo,tgo,ago,Is,ble,ngo,sgo,XI,lgo,igo,zI,dgo,cgo,fgo,uh,vle,mgo,ggo,QI,hgo,pgo,_go,bh,Fle,ugo,bgo,WI,vgo,Fgo,Tgo,vh,Tle,Mgo,Ego,HI,Cgo,wgo,Ago,Ns,Mle,Lgo,ygo,UI,xgo,$go,JI,kgo,Sgo,Rgo,qs,Ele,Pgo,Bgo,YI,Igo,Ngo,KI,qgo,jgo,Dgo,Fh,Cle,Ggo,Ogo,ZI,Vgo,Xgo,zgo,Th,wle,Qgo,Wgo,eN,Hgo,Ugo,Jgo,Mh,Ale,Ygo,Kgo,oN,Zgo,eho,oho,js,Lle,rho,tho,rN,aho,nho,tN,sho,lho,iho,Eh,yle,dho,cho,aN,fho,mho,gho,Ch,xle,hho,pho,nN,_ho,uho,bho,Ds,$le,vho,Fho,sN,Tho,Mho,lN,Eho,Cho,who,Gs,kle,Aho,Lho,iN,yho,xho,dN,$ho,kho,Sho,Os,Sle,Rho,Pho,cN,Bho,Iho,fN,Nho,qho,jho,Vs,Rle,Dho,Gho,mN,Oho,Vho,gN,Xho,zho,Qho,wh,Who,Ah,WL,Hho,Ple,Uho,pOe,Ri,Lh,Ble,HL,Jho,Ile,Yho,_Oe,Lo,UL,Kho,JL,Zho,hN,epo,opo,rpo,YL,tpo,Nle,apo,npo,spo,He,KL,lpo,qle,ipo,dpo,Sa,cpo,jle,fpo,mpo,Dle,gpo,hpo,Gle,ppo,_po,upo,Y,yh,Ole,bpo,vpo,pN,Fpo,Tpo,Mpo,xh,Vle,Epo,Cpo,_N,wpo,Apo,Lpo,$h,Xle,ypo,xpo,uN,$po,kpo,Spo,kh,zle,Rpo,Ppo,bN,Bpo,Ipo,Npo,Sh,Qle,qpo,jpo,vN,Dpo,Gpo,Opo,Rh,Wle,Vpo,Xpo,FN,zpo,Qpo,Wpo,Ph,Hle,Hpo,Upo,TN,Jpo,Ypo,Kpo,Bh,Ule,Zpo,e_o,MN,o_o,r_o,t_o,Ih,Jle,a_o,n_o,EN,s_o,l_o,i_o,Nh,Yle,d_o,c_o,CN,f_o,m_o,g_o,qh,Kle,h_o,p_o,wN,__o,u_o,b_o,jh,Zle,v_o,F_o,AN,T_o,M_o,E_o,Dh,eie,C_o,w_o,LN,A_o,L_o,y_o,Gh,oie,x_o,$_o,yN,k_o,S_o,R_o,Oh,rie,P_o,B_o,xN,I_o,N_o,q_o,Vh,tie,j_o,D_o,$N,G_o,O_o,V_o,Xh,aie,X_o,z_o,kN,Q_o,W_o,H_o,zh,nie,U_o,J_o,SN,Y_o,K_o,Z_o,Qh,sie,euo,ouo,RN,ruo,tuo,auo,Wh,lie,nuo,suo,PN,luo,iuo,duo,Hh,iie,cuo,fuo,BN,muo,guo,huo,Uh,die,puo,_uo,IN,uuo,buo,vuo,Jh,cie,Fuo,Tuo,NN,Muo,Euo,Cuo,Yh,fie,wuo,Auo,qN,Luo,yuo,xuo,Kh,mie,$uo,kuo,jN,Suo,Ruo,Puo,Zh,gie,Buo,Iuo,DN,Nuo,quo,juo,ep,hie,Duo,Guo,GN,Ouo,Vuo,Xuo,op,pie,zuo,Quo,ON,Wuo,Huo,Uuo,rp,_ie,Juo,Yuo,VN,Kuo,Zuo,e1o,tp,uie,o1o,r1o,XN,t1o,a1o,n1o,ap,bie,s1o,l1o,zN,i1o,d1o,c1o,np,vie,f1o,m1o,QN,g1o,h1o,p1o,sp,Fie,_1o,u1o,WN,b1o,v1o,F1o,lp,T1o,ip,M1o,dp,ZL,E1o,Tie,C1o,uOe,Pi,cp,Mie,ey,w1o,Eie,A1o,bOe,yo,oy,L1o,ry,y1o,HN,x1o,$1o,k1o,ty,S1o,Cie,R1o,P1o,B1o,Ue,ay,I1o,wie,N1o,q1o,Bi,j1o,Aie,D1o,G1o,Lie,O1o,V1o,X1o,he,fp,yie,z1o,Q1o,UN,W1o,H1o,U1o,mp,xie,J1o,Y1o,$ie,K1o,Z1o,e3o,gp,kie,o3o,r3o,JN,t3o,a3o,n3o,hp,Sie,s3o,l3o,YN,i3o,d3o,c3o,pp,Rie,f3o,m3o,KN,g3o,h3o,p3o,_p,Pie,_3o,u3o,ZN,b3o,v3o,F3o,up,Bie,T3o,M3o,eq,E3o,C3o,w3o,bp,Iie,A3o,L3o,oq,y3o,x3o,$3o,vp,Nie,k3o,S3o,rq,R3o,P3o,B3o,Fp,qie,I3o,N3o,tq,q3o,j3o,D3o,Tp,jie,G3o,O3o,aq,V3o,X3o,z3o,Mp,Die,Q3o,W3o,nq,H3o,U3o,J3o,Ep,Gie,Y3o,K3o,sq,Z3o,e2o,o2o,Cp,Oie,r2o,t2o,lq,a2o,n2o,s2o,wp,Vie,l2o,i2o,iq,d2o,c2o,f2o,Ap,Xie,m2o,g2o,dq,h2o,p2o,_2o,Lp,zie,u2o,b2o,cq,v2o,F2o,T2o,yp,Qie,M2o,E2o,fq,C2o,w2o,A2o,xp,L2o,$p,y2o,kp,ny,x2o,Wie,$2o,vOe,Ii,Sp,Hie,sy,k2o,Uie,S2o,FOe,xo,ly,R2o,Ni,P2o,mq,B2o,I2o,gq,N2o,q2o,j2o,iy,D2o,Jie,G2o,O2o,V2o,nt,dy,X2o,Yie,z2o,Q2o,qi,W2o,Kie,H2o,U2o,hq,J2o,Y2o,K2o,Rp,Z2o,Je,cy,ebo,Zie,obo,rbo,Ra,tbo,ede,abo,nbo,ode,sbo,lbo,rde,ibo,dbo,cbo,y,Pp,tde,fbo,mbo,pq,gbo,hbo,pbo,Bp,ade,_bo,ubo,_q,bbo,vbo,Fbo,Ip,nde,Tbo,Mbo,uq,Ebo,Cbo,wbo,Np,sde,Abo,Lbo,bq,ybo,xbo,$bo,qp,lde,kbo,Sbo,vq,Rbo,Pbo,Bbo,jp,ide,Ibo,Nbo,Fq,qbo,jbo,Dbo,Dp,dde,Gbo,Obo,Tq,Vbo,Xbo,zbo,Gp,cde,Qbo,Wbo,Mq,Hbo,Ubo,Jbo,Op,fde,Ybo,Kbo,Eq,Zbo,evo,ovo,Vp,mde,rvo,tvo,Cq,avo,nvo,svo,Xp,gde,lvo,ivo,wq,dvo,cvo,fvo,zp,hde,mvo,gvo,Aq,hvo,pvo,_vo,Qp,pde,uvo,bvo,Lq,vvo,Fvo,Tvo,Wp,_de,Mvo,Evo,yq,Cvo,wvo,Avo,Hp,ude,Lvo,yvo,xq,xvo,$vo,kvo,Up,bde,Svo,Rvo,$q,Pvo,Bvo,Ivo,Jp,vde,Nvo,qvo,kq,jvo,Dvo,Gvo,Yp,Fde,Ovo,Vvo,Sq,Xvo,zvo,Qvo,Kp,Tde,Wvo,Hvo,Rq,Uvo,Jvo,Yvo,Zp,Mde,Kvo,Zvo,Pq,eFo,oFo,rFo,e_,Ede,tFo,aFo,Bq,nFo,sFo,lFo,o_,Cde,iFo,dFo,Iq,cFo,fFo,mFo,r_,wde,gFo,hFo,Nq,pFo,_Fo,uFo,t_,Ade,bFo,vFo,qq,FFo,TFo,MFo,a_,Lde,EFo,CFo,jq,wFo,AFo,LFo,n_,yde,yFo,xFo,Dq,$Fo,kFo,SFo,s_,xde,RFo,PFo,Gq,BFo,IFo,NFo,l_,$de,qFo,jFo,Oq,DFo,GFo,OFo,i_,kde,VFo,XFo,Vq,zFo,QFo,WFo,d_,Sde,HFo,UFo,Xq,JFo,YFo,KFo,c_,Rde,ZFo,eTo,zq,oTo,rTo,tTo,f_,Pde,aTo,nTo,Qq,sTo,lTo,iTo,m_,Bde,dTo,cTo,Wq,fTo,mTo,gTo,Xs,Ide,hTo,pTo,Hq,_To,uTo,Uq,bTo,vTo,FTo,g_,Nde,TTo,MTo,Jq,ETo,CTo,wTo,h_,qde,ATo,LTo,Yq,yTo,xTo,$To,p_,jde,kTo,STo,Kq,RTo,PTo,BTo,__,Dde,ITo,NTo,Zq,qTo,jTo,DTo,u_,Gde,GTo,OTo,ej,VTo,XTo,zTo,b_,Ode,QTo,WTo,oj,HTo,UTo,JTo,v_,Vde,YTo,KTo,rj,ZTo,e7o,o7o,F_,Xde,r7o,t7o,tj,a7o,n7o,s7o,T_,zde,l7o,i7o,aj,d7o,c7o,f7o,M_,Qde,m7o,g7o,nj,h7o,p7o,_7o,E_,Wde,u7o,b7o,sj,v7o,F7o,T7o,C_,Hde,M7o,E7o,lj,C7o,w7o,A7o,w_,Ude,L7o,y7o,ij,x7o,$7o,k7o,A_,Jde,S7o,R7o,dj,P7o,B7o,I7o,L_,Yde,N7o,q7o,cj,j7o,D7o,G7o,y_,Kde,O7o,V7o,fj,X7o,z7o,Q7o,x_,Zde,W7o,H7o,mj,U7o,J7o,Y7o,$_,ece,K7o,Z7o,gj,eMo,oMo,rMo,k_,oce,tMo,aMo,hj,nMo,sMo,lMo,S_,rce,iMo,dMo,pj,cMo,fMo,mMo,R_,tce,gMo,hMo,_j,pMo,_Mo,uMo,P_,ace,bMo,vMo,uj,FMo,TMo,MMo,B_,nce,EMo,CMo,bj,wMo,AMo,LMo,I_,sce,yMo,xMo,vj,$Mo,kMo,SMo,N_,lce,RMo,PMo,Fj,BMo,IMo,NMo,q_,ice,qMo,jMo,Tj,DMo,GMo,OMo,j_,dce,VMo,XMo,Mj,zMo,QMo,WMo,D_,cce,HMo,UMo,Ej,JMo,YMo,KMo,G_,fce,ZMo,eEo,Cj,oEo,rEo,tEo,O_,mce,aEo,nEo,wj,sEo,lEo,iEo,V_,gce,dEo,cEo,Aj,fEo,mEo,gEo,X_,hce,hEo,pEo,Lj,_Eo,uEo,bEo,z_,pce,vEo,FEo,yj,TEo,MEo,EEo,Q_,_ce,CEo,wEo,xj,AEo,LEo,yEo,W_,uce,xEo,$Eo,$j,kEo,SEo,REo,H_,bce,PEo,BEo,kj,IEo,NEo,qEo,U_,vce,jEo,DEo,Sj,GEo,OEo,VEo,J_,Fce,XEo,zEo,Rj,QEo,WEo,HEo,Y_,Tce,UEo,JEo,Pj,YEo,KEo,ZEo,K_,Mce,e4o,o4o,Bj,r4o,t4o,a4o,Z_,Ece,n4o,s4o,Ij,l4o,i4o,d4o,eu,Cce,c4o,f4o,Nj,m4o,g4o,h4o,ou,wce,p4o,_4o,qj,u4o,b4o,v4o,ru,Ace,F4o,T4o,jj,M4o,E4o,C4o,tu,Lce,w4o,A4o,Dj,L4o,y4o,x4o,au,yce,$4o,k4o,Gj,S4o,R4o,P4o,nu,xce,B4o,I4o,Oj,N4o,q4o,j4o,su,$ce,D4o,G4o,Vj,O4o,V4o,X4o,lu,kce,z4o,Q4o,Xj,W4o,H4o,U4o,iu,Sce,J4o,Y4o,zj,K4o,Z4o,eCo,du,Rce,oCo,rCo,Qj,tCo,aCo,nCo,cu,Pce,sCo,lCo,Wj,iCo,dCo,cCo,fu,Bce,fCo,mCo,Hj,gCo,hCo,pCo,mu,Ice,_Co,uCo,Uj,bCo,vCo,FCo,gu,Nce,TCo,MCo,Jj,ECo,CCo,wCo,hu,qce,ACo,LCo,Yj,yCo,xCo,$Co,pu,jce,kCo,SCo,Kj,RCo,PCo,BCo,_u,Dce,ICo,NCo,Zj,qCo,jCo,DCo,uu,Gce,GCo,OCo,eD,VCo,XCo,zCo,bu,Oce,QCo,WCo,oD,HCo,UCo,JCo,vu,Vce,YCo,KCo,rD,ZCo,e5o,o5o,Fu,Xce,r5o,t5o,tD,a5o,n5o,s5o,Tu,zce,l5o,i5o,aD,d5o,c5o,f5o,Mu,Qce,m5o,g5o,nD,h5o,p5o,_5o,Eu,Wce,u5o,b5o,sD,v5o,F5o,T5o,Cu,Hce,M5o,E5o,lD,C5o,w5o,A5o,wu,Uce,L5o,y5o,iD,x5o,$5o,k5o,Au,Jce,S5o,R5o,dD,P5o,B5o,I5o,Lu,Yce,N5o,q5o,cD,j5o,D5o,G5o,yu,Kce,O5o,V5o,fD,X5o,z5o,Q5o,xu,Zce,W5o,H5o,mD,U5o,J5o,Y5o,$u,efe,K5o,Z5o,gD,e0o,o0o,r0o,ku,ofe,t0o,a0o,hD,n0o,s0o,l0o,Su,rfe,i0o,d0o,pD,c0o,f0o,m0o,Ru,g0o,tfe,h0o,p0o,afe,_0o,u0o,Pu,TOe,ji,Bu,nfe,fy,b0o,sfe,v0o,MOe,$o,my,F0o,Di,T0o,_D,M0o,E0o,uD,C0o,w0o,A0o,gy,L0o,lfe,y0o,x0o,$0o,st,hy,k0o,ife,S0o,R0o,Gi,P0o,dfe,B0o,I0o,bD,N0o,q0o,j0o,Iu,D0o,Ye,py,G0o,cfe,O0o,V0o,Pa,X0o,ffe,z0o,Q0o,mfe,W0o,H0o,gfe,U0o,J0o,Y0o,G,Nu,hfe,K0o,Z0o,vD,ewo,owo,rwo,qu,pfe,two,awo,FD,nwo,swo,lwo,ju,_fe,iwo,dwo,TD,cwo,fwo,mwo,Du,ufe,gwo,hwo,MD,pwo,_wo,uwo,Gu,bfe,bwo,vwo,ED,Fwo,Two,Mwo,Ou,vfe,Ewo,Cwo,CD,wwo,Awo,Lwo,Vu,Ffe,ywo,xwo,wD,$wo,kwo,Swo,Xu,Tfe,Rwo,Pwo,AD,Bwo,Iwo,Nwo,zu,Mfe,qwo,jwo,LD,Dwo,Gwo,Owo,Qu,Efe,Vwo,Xwo,yD,zwo,Qwo,Wwo,Wu,Cfe,Hwo,Uwo,xD,Jwo,Ywo,Kwo,Hu,wfe,Zwo,eAo,$D,oAo,rAo,tAo,Uu,Afe,aAo,nAo,kD,sAo,lAo,iAo,Ju,Lfe,dAo,cAo,SD,fAo,mAo,gAo,Yu,yfe,hAo,pAo,RD,_Ao,uAo,bAo,Ku,xfe,vAo,FAo,PD,TAo,MAo,EAo,Zu,$fe,CAo,wAo,BD,AAo,LAo,yAo,e1,kfe,xAo,$Ao,ID,kAo,SAo,RAo,o1,Sfe,PAo,BAo,ND,IAo,NAo,qAo,r1,Rfe,jAo,DAo,qD,GAo,OAo,VAo,t1,Pfe,XAo,zAo,jD,QAo,WAo,HAo,a1,Bfe,UAo,JAo,DD,YAo,KAo,ZAo,n1,Ife,e6o,o6o,GD,r6o,t6o,a6o,s1,Nfe,n6o,s6o,OD,l6o,i6o,d6o,l1,qfe,c6o,f6o,VD,m6o,g6o,h6o,i1,jfe,p6o,_6o,XD,u6o,b6o,v6o,d1,Dfe,F6o,T6o,zD,M6o,E6o,C6o,c1,Gfe,w6o,A6o,QD,L6o,y6o,x6o,f1,Ofe,$6o,k6o,WD,S6o,R6o,P6o,m1,Vfe,B6o,I6o,HD,N6o,q6o,j6o,g1,Xfe,D6o,G6o,UD,O6o,V6o,X6o,h1,zfe,z6o,Q6o,JD,W6o,H6o,U6o,p1,Qfe,J6o,Y6o,YD,K6o,Z6o,eLo,_1,Wfe,oLo,rLo,KD,tLo,aLo,nLo,u1,Hfe,sLo,lLo,ZD,iLo,dLo,cLo,b1,Ufe,fLo,mLo,eG,gLo,hLo,pLo,v1,Jfe,_Lo,uLo,oG,bLo,vLo,FLo,F1,Yfe,TLo,MLo,rG,ELo,CLo,wLo,T1,Kfe,ALo,LLo,tG,yLo,xLo,$Lo,M1,Zfe,kLo,SLo,aG,RLo,PLo,BLo,E1,eme,ILo,NLo,nG,qLo,jLo,DLo,C1,ome,GLo,OLo,sG,VLo,XLo,zLo,w1,rme,QLo,WLo,lG,HLo,ULo,JLo,A1,tme,YLo,KLo,iG,ZLo,eyo,oyo,L1,ryo,ame,tyo,ayo,nme,nyo,syo,y1,EOe,Oi,x1,sme,_y,lyo,lme,iyo,COe,ko,uy,dyo,Vi,cyo,dG,fyo,myo,cG,gyo,hyo,pyo,by,_yo,ime,uyo,byo,vyo,lt,vy,Fyo,dme,Tyo,Myo,Xi,Eyo,cme,Cyo,wyo,fG,Ayo,Lyo,yyo,$1,xyo,Ke,Fy,$yo,fme,kyo,Syo,Ba,Ryo,mme,Pyo,Byo,gme,Iyo,Nyo,hme,qyo,jyo,Dyo,z,k1,pme,Gyo,Oyo,mG,Vyo,Xyo,zyo,S1,_me,Qyo,Wyo,gG,Hyo,Uyo,Jyo,R1,ume,Yyo,Kyo,hG,Zyo,e8o,o8o,P1,bme,r8o,t8o,pG,a8o,n8o,s8o,B1,vme,l8o,i8o,_G,d8o,c8o,f8o,I1,Fme,m8o,g8o,uG,h8o,p8o,_8o,N1,Tme,u8o,b8o,bG,v8o,F8o,T8o,q1,Mme,M8o,E8o,vG,C8o,w8o,A8o,j1,Eme,L8o,y8o,FG,x8o,$8o,k8o,D1,Cme,S8o,R8o,TG,P8o,B8o,I8o,G1,wme,N8o,q8o,MG,j8o,D8o,G8o,O1,Ame,O8o,V8o,EG,X8o,z8o,Q8o,V1,Lme,W8o,H8o,CG,U8o,J8o,Y8o,X1,yme,K8o,Z8o,wG,e9o,o9o,r9o,z1,xme,t9o,a9o,AG,n9o,s9o,l9o,Q1,$me,i9o,d9o,LG,c9o,f9o,m9o,W1,kme,g9o,h9o,yG,p9o,_9o,u9o,H1,Sme,b9o,v9o,xG,F9o,T9o,M9o,U1,Rme,E9o,C9o,$G,w9o,A9o,L9o,J1,Pme,y9o,x9o,kG,$9o,k9o,S9o,Y1,Bme,R9o,P9o,SG,B9o,I9o,N9o,K1,Ime,q9o,j9o,RG,D9o,G9o,O9o,Z1,Nme,V9o,X9o,PG,z9o,Q9o,W9o,e3,qme,H9o,U9o,BG,J9o,Y9o,K9o,o3,jme,Z9o,exo,IG,oxo,rxo,txo,r3,Dme,axo,nxo,NG,sxo,lxo,ixo,t3,Gme,dxo,cxo,qG,fxo,mxo,gxo,a3,Ome,hxo,pxo,jG,_xo,uxo,bxo,n3,Vme,vxo,Fxo,DG,Txo,Mxo,Exo,s3,Xme,Cxo,wxo,GG,Axo,Lxo,yxo,l3,zme,xxo,$xo,OG,kxo,Sxo,Rxo,i3,Qme,Pxo,Bxo,VG,Ixo,Nxo,qxo,d3,Wme,jxo,Dxo,XG,Gxo,Oxo,Vxo,c3,Hme,Xxo,zxo,zG,Qxo,Wxo,Hxo,f3,Ume,Uxo,Jxo,QG,Yxo,Kxo,Zxo,m3,Jme,e$o,o$o,WG,r$o,t$o,a$o,g3,Yme,n$o,s$o,HG,l$o,i$o,d$o,h3,Kme,c$o,f$o,UG,m$o,g$o,h$o,p3,p$o,Zme,_$o,u$o,ege,b$o,v$o,_3,wOe,zi,u3,oge,Ty,F$o,rge,T$o,AOe,So,My,M$o,Qi,E$o,JG,C$o,w$o,YG,A$o,L$o,y$o,Ey,x$o,tge,$$o,k$o,S$o,it,Cy,R$o,age,P$o,B$o,Wi,I$o,nge,N$o,q$o,KG,j$o,D$o,G$o,b3,O$o,Ze,wy,V$o,sge,X$o,z$o,Ia,Q$o,lge,W$o,H$o,ige,U$o,J$o,dge,Y$o,K$o,Z$o,Q,v3,cge,eko,oko,ZG,rko,tko,ako,F3,fge,nko,sko,eO,lko,iko,dko,T3,mge,cko,fko,oO,mko,gko,hko,M3,gge,pko,_ko,rO,uko,bko,vko,E3,hge,Fko,Tko,tO,Mko,Eko,Cko,C3,pge,wko,Ako,aO,Lko,yko,xko,w3,_ge,$ko,kko,nO,Sko,Rko,Pko,A3,uge,Bko,Iko,sO,Nko,qko,jko,L3,bge,Dko,Gko,lO,Oko,Vko,Xko,y3,vge,zko,Qko,iO,Wko,Hko,Uko,x3,Fge,Jko,Yko,dO,Kko,Zko,eSo,$3,Tge,oSo,rSo,cO,tSo,aSo,nSo,k3,Mge,sSo,lSo,fO,iSo,dSo,cSo,S3,Ege,fSo,mSo,mO,gSo,hSo,pSo,R3,Cge,_So,uSo,gO,bSo,vSo,FSo,P3,wge,TSo,MSo,hO,ESo,CSo,wSo,B3,Age,ASo,LSo,pO,ySo,xSo,$So,I3,Lge,kSo,SSo,_O,RSo,PSo,BSo,N3,yge,ISo,NSo,uO,qSo,jSo,DSo,q3,xge,GSo,OSo,bO,VSo,XSo,zSo,j3,$ge,QSo,WSo,vO,HSo,USo,JSo,D3,kge,YSo,KSo,FO,ZSo,eRo,oRo,G3,Sge,rRo,tRo,TO,aRo,nRo,sRo,O3,Rge,lRo,iRo,MO,dRo,cRo,fRo,V3,Pge,mRo,gRo,EO,hRo,pRo,_Ro,X3,Bge,uRo,bRo,CO,vRo,FRo,TRo,z3,Ige,MRo,ERo,wO,CRo,wRo,ARo,Q3,Nge,LRo,yRo,AO,xRo,$Ro,kRo,W3,qge,SRo,RRo,LO,PRo,BRo,IRo,H3,jge,NRo,qRo,yO,jRo,DRo,GRo,U3,Dge,ORo,VRo,xO,XRo,zRo,QRo,J3,Gge,WRo,HRo,$O,URo,JRo,YRo,Y3,Oge,KRo,ZRo,Vge,ePo,oPo,rPo,K3,Xge,tPo,aPo,kO,nPo,sPo,lPo,Z3,zge,iPo,dPo,SO,cPo,fPo,mPo,e2,Qge,gPo,hPo,RO,pPo,_Po,uPo,o2,Wge,bPo,vPo,PO,FPo,TPo,MPo,r2,EPo,Hge,CPo,wPo,Uge,APo,LPo,t2,LOe,Hi,a2,Jge,Ay,yPo,Yge,xPo,yOe,Ro,Ly,$Po,Ui,kPo,BO,SPo,RPo,IO,PPo,BPo,IPo,yy,NPo,Kge,qPo,jPo,DPo,dt,xy,GPo,Zge,OPo,VPo,Ji,XPo,ehe,zPo,QPo,NO,WPo,HPo,UPo,n2,JPo,eo,$y,YPo,ohe,KPo,ZPo,Na,eBo,rhe,oBo,rBo,the,tBo,aBo,ahe,nBo,sBo,lBo,pe,s2,nhe,iBo,dBo,qO,cBo,fBo,mBo,l2,she,gBo,hBo,jO,pBo,_Bo,uBo,i2,lhe,bBo,vBo,DO,FBo,TBo,MBo,d2,ihe,EBo,CBo,GO,wBo,ABo,LBo,c2,dhe,yBo,xBo,OO,$Bo,kBo,SBo,f2,che,RBo,PBo,VO,BBo,IBo,NBo,m2,fhe,qBo,jBo,XO,DBo,GBo,OBo,g2,mhe,VBo,XBo,zO,zBo,QBo,WBo,h2,ghe,HBo,UBo,QO,JBo,YBo,KBo,p2,hhe,ZBo,eIo,WO,oIo,rIo,tIo,_2,phe,aIo,nIo,HO,sIo,lIo,iIo,u2,_he,dIo,cIo,UO,fIo,mIo,gIo,b2,uhe,hIo,pIo,JO,_Io,uIo,bIo,v2,bhe,vIo,FIo,YO,TIo,MIo,EIo,F2,vhe,CIo,wIo,KO,AIo,LIo,yIo,T2,Fhe,xIo,$Io,ZO,kIo,SIo,RIo,M2,The,PIo,BIo,eV,IIo,NIo,qIo,E2,jIo,Mhe,DIo,GIo,Ehe,OIo,VIo,C2,xOe,Yi,w2,Che,ky,XIo,whe,zIo,$Oe,Po,Sy,QIo,Ki,WIo,oV,HIo,UIo,rV,JIo,YIo,KIo,Ry,ZIo,Ahe,eNo,oNo,rNo,ct,Py,tNo,Lhe,aNo,nNo,Zi,sNo,yhe,lNo,iNo,tV,dNo,cNo,fNo,A2,mNo,oo,By,gNo,xhe,hNo,pNo,qa,_No,$he,uNo,bNo,khe,vNo,FNo,She,TNo,MNo,ENo,N,L2,Rhe,CNo,wNo,aV,ANo,LNo,yNo,y2,Phe,xNo,$No,nV,kNo,SNo,RNo,x2,Bhe,PNo,BNo,sV,INo,NNo,qNo,$2,Ihe,jNo,DNo,lV,GNo,ONo,VNo,k2,Nhe,XNo,zNo,iV,QNo,WNo,HNo,S2,qhe,UNo,JNo,dV,YNo,KNo,ZNo,R2,jhe,eqo,oqo,cV,rqo,tqo,aqo,P2,Dhe,nqo,sqo,fV,lqo,iqo,dqo,B2,Ghe,cqo,fqo,mV,mqo,gqo,hqo,I2,Ohe,pqo,_qo,gV,uqo,bqo,vqo,N2,Vhe,Fqo,Tqo,hV,Mqo,Eqo,Cqo,q2,Xhe,wqo,Aqo,pV,Lqo,yqo,xqo,j2,zhe,$qo,kqo,_V,Sqo,Rqo,Pqo,D2,Qhe,Bqo,Iqo,uV,Nqo,qqo,jqo,G2,Whe,Dqo,Gqo,bV,Oqo,Vqo,Xqo,O2,Hhe,zqo,Qqo,vV,Wqo,Hqo,Uqo,V2,Uhe,Jqo,Yqo,FV,Kqo,Zqo,ejo,X2,Jhe,ojo,rjo,TV,tjo,ajo,njo,z2,Yhe,sjo,ljo,MV,ijo,djo,cjo,Q2,Khe,fjo,mjo,EV,gjo,hjo,pjo,W2,Zhe,_jo,ujo,CV,bjo,vjo,Fjo,H2,epe,Tjo,Mjo,wV,Ejo,Cjo,wjo,U2,ope,Ajo,Ljo,AV,yjo,xjo,$jo,J2,rpe,kjo,Sjo,LV,Rjo,Pjo,Bjo,Y2,tpe,Ijo,Njo,yV,qjo,jjo,Djo,K2,ape,Gjo,Ojo,xV,Vjo,Xjo,zjo,Z2,npe,Qjo,Wjo,$V,Hjo,Ujo,Jjo,eb,spe,Yjo,Kjo,kV,Zjo,eDo,oDo,ob,lpe,rDo,tDo,SV,aDo,nDo,sDo,rb,ipe,lDo,iDo,RV,dDo,cDo,fDo,tb,dpe,mDo,gDo,PV,hDo,pDo,_Do,ab,cpe,uDo,bDo,BV,vDo,FDo,TDo,nb,fpe,MDo,EDo,IV,CDo,wDo,ADo,sb,mpe,LDo,yDo,NV,xDo,$Do,kDo,lb,gpe,SDo,RDo,qV,PDo,BDo,IDo,ib,hpe,NDo,qDo,jV,jDo,DDo,GDo,db,ppe,ODo,VDo,DV,XDo,zDo,QDo,cb,_pe,WDo,HDo,GV,UDo,JDo,YDo,fb,upe,KDo,ZDo,OV,eGo,oGo,rGo,mb,bpe,tGo,aGo,VV,nGo,sGo,lGo,gb,vpe,iGo,dGo,XV,cGo,fGo,mGo,hb,Fpe,gGo,hGo,zV,pGo,_Go,uGo,pb,Tpe,bGo,vGo,QV,FGo,TGo,MGo,_b,Mpe,EGo,CGo,WV,wGo,AGo,LGo,ub,Epe,yGo,xGo,HV,$Go,kGo,SGo,bb,Cpe,RGo,PGo,UV,BGo,IGo,NGo,vb,wpe,qGo,jGo,JV,DGo,GGo,OGo,Fb,Ape,VGo,XGo,YV,zGo,QGo,WGo,Tb,Lpe,HGo,UGo,KV,JGo,YGo,KGo,Mb,ZGo,ype,eOo,oOo,xpe,rOo,tOo,Eb,kOe,ed,Cb,$pe,Iy,aOo,kpe,nOo,SOe,Bo,Ny,sOo,od,lOo,ZV,iOo,dOo,eX,cOo,fOo,mOo,qy,gOo,Spe,hOo,pOo,_Oo,ft,jy,uOo,Rpe,bOo,vOo,rd,FOo,Ppe,TOo,MOo,oX,EOo,COo,wOo,wb,AOo,ro,Dy,LOo,Bpe,yOo,xOo,ja,$Oo,Ipe,kOo,SOo,Npe,ROo,POo,qpe,BOo,IOo,NOo,Z,Ab,jpe,qOo,jOo,rX,DOo,GOo,OOo,Lb,Dpe,VOo,XOo,tX,zOo,QOo,WOo,yb,Gpe,HOo,UOo,aX,JOo,YOo,KOo,xb,Ope,ZOo,eVo,nX,oVo,rVo,tVo,$b,Vpe,aVo,nVo,sX,sVo,lVo,iVo,kb,Xpe,dVo,cVo,lX,fVo,mVo,gVo,Sb,zpe,hVo,pVo,iX,_Vo,uVo,bVo,Rb,Qpe,vVo,FVo,dX,TVo,MVo,EVo,Pb,Wpe,CVo,wVo,cX,AVo,LVo,yVo,Bb,Hpe,xVo,$Vo,fX,kVo,SVo,RVo,Ib,Upe,PVo,BVo,mX,IVo,NVo,qVo,Nb,Jpe,jVo,DVo,gX,GVo,OVo,VVo,qb,Ype,XVo,zVo,hX,QVo,WVo,HVo,jb,Kpe,UVo,JVo,pX,YVo,KVo,ZVo,Db,Zpe,eXo,oXo,_X,rXo,tXo,aXo,Gb,e_e,nXo,sXo,uX,lXo,iXo,dXo,Ob,o_e,cXo,fXo,bX,mXo,gXo,hXo,Vb,r_e,pXo,_Xo,vX,uXo,bXo,vXo,Xb,t_e,FXo,TXo,FX,MXo,EXo,CXo,zb,a_e,wXo,AXo,TX,LXo,yXo,xXo,Qb,n_e,$Xo,kXo,MX,SXo,RXo,PXo,Wb,s_e,BXo,IXo,EX,NXo,qXo,jXo,Hb,l_e,DXo,GXo,CX,OXo,VXo,XXo,Ub,i_e,zXo,QXo,wX,WXo,HXo,UXo,Jb,d_e,JXo,YXo,AX,KXo,ZXo,ezo,Yb,c_e,ozo,rzo,LX,tzo,azo,nzo,Kb,f_e,szo,lzo,yX,izo,dzo,czo,Zb,m_e,fzo,mzo,xX,gzo,hzo,pzo,ev,g_e,_zo,uzo,$X,bzo,vzo,Fzo,ov,h_e,Tzo,Mzo,kX,Ezo,Czo,wzo,rv,Azo,p_e,Lzo,yzo,__e,xzo,$zo,tv,ROe,td,av,u_e,Gy,kzo,b_e,Szo,POe,Io,Oy,Rzo,ad,Pzo,SX,Bzo,Izo,RX,Nzo,qzo,jzo,Vy,Dzo,v_e,Gzo,Ozo,Vzo,mt,Xy,Xzo,F_e,zzo,Qzo,nd,Wzo,T_e,Hzo,Uzo,PX,Jzo,Yzo,Kzo,nv,Zzo,to,zy,eQo,M_e,oQo,rQo,Da,tQo,E_e,aQo,nQo,C_e,sQo,lQo,w_e,iQo,dQo,cQo,No,sv,A_e,fQo,mQo,BX,gQo,hQo,pQo,lv,L_e,_Qo,uQo,IX,bQo,vQo,FQo,iv,y_e,TQo,MQo,NX,EQo,CQo,wQo,dv,x_e,AQo,LQo,qX,yQo,xQo,$Qo,cv,$_e,kQo,SQo,jX,RQo,PQo,BQo,fv,k_e,IQo,NQo,DX,qQo,jQo,DQo,mv,GQo,S_e,OQo,VQo,R_e,XQo,zQo,gv,BOe,sd,hv,P_e,Qy,QQo,B_e,WQo,IOe,qo,Wy,HQo,ld,UQo,GX,JQo,YQo,OX,KQo,ZQo,eWo,Hy,oWo,I_e,rWo,tWo,aWo,gt,Uy,nWo,N_e,sWo,lWo,id,iWo,q_e,dWo,cWo,VX,fWo,mWo,gWo,pv,hWo,ao,Jy,pWo,j_e,_Wo,uWo,Ga,bWo,D_e,vWo,FWo,G_e,TWo,MWo,O_e,EWo,CWo,wWo,H,_v,V_e,AWo,LWo,XX,yWo,xWo,$Wo,uv,X_e,kWo,SWo,zX,RWo,PWo,BWo,bv,z_e,IWo,NWo,QX,qWo,jWo,DWo,vv,Q_e,GWo,OWo,WX,VWo,XWo,zWo,Fv,W_e,QWo,WWo,HX,HWo,UWo,JWo,Tv,H_e,YWo,KWo,UX,ZWo,eHo,oHo,Mv,U_e,rHo,tHo,JX,aHo,nHo,sHo,Ev,J_e,lHo,iHo,YX,dHo,cHo,fHo,Cv,Y_e,mHo,gHo,KX,hHo,pHo,_Ho,wv,K_e,uHo,bHo,ZX,vHo,FHo,THo,Av,Z_e,MHo,EHo,ez,CHo,wHo,AHo,Lv,eue,LHo,yHo,oz,xHo,$Ho,kHo,yv,oue,SHo,RHo,rz,PHo,BHo,IHo,xv,rue,NHo,qHo,tz,jHo,DHo,GHo,$v,tue,OHo,VHo,az,XHo,zHo,QHo,kv,aue,WHo,HHo,nz,UHo,JHo,YHo,Sv,nue,KHo,ZHo,sz,eUo,oUo,rUo,Rv,sue,tUo,aUo,lz,nUo,sUo,lUo,Pv,lue,iUo,dUo,iz,cUo,fUo,mUo,Bv,iue,gUo,hUo,dz,pUo,_Uo,uUo,Iv,due,bUo,vUo,cz,FUo,TUo,MUo,Nv,cue,EUo,CUo,fz,wUo,AUo,LUo,qv,fue,yUo,xUo,mz,$Uo,kUo,SUo,jv,mue,RUo,PUo,gz,BUo,IUo,NUo,Dv,gue,qUo,jUo,hz,DUo,GUo,OUo,Gv,hue,VUo,XUo,pz,zUo,QUo,WUo,Ov,pue,HUo,UUo,_z,JUo,YUo,KUo,Vv,_ue,ZUo,eJo,uz,oJo,rJo,tJo,Xv,uue,aJo,nJo,bz,sJo,lJo,iJo,zv,bue,dJo,cJo,vz,fJo,mJo,gJo,Qv,vue,hJo,pJo,Fz,_Jo,uJo,bJo,Wv,Fue,vJo,FJo,Tz,TJo,MJo,EJo,Hv,Tue,CJo,wJo,Mz,AJo,LJo,yJo,Uv,Mue,xJo,$Jo,Ez,kJo,SJo,RJo,Jv,Eue,PJo,BJo,Cz,IJo,NJo,qJo,Yv,Cue,jJo,DJo,wz,GJo,OJo,VJo,Kv,XJo,wue,zJo,QJo,Aue,WJo,HJo,Zv,NOe,dd,eF,Lue,Yy,UJo,yue,JJo,qOe,jo,Ky,YJo,cd,KJo,Az,ZJo,eYo,Lz,oYo,rYo,tYo,Zy,aYo,xue,nYo,sYo,lYo,ht,e8,iYo,$ue,dYo,cYo,fd,fYo,kue,mYo,gYo,yz,hYo,pYo,_Yo,oF,uYo,no,o8,bYo,Sue,vYo,FYo,Oa,TYo,Rue,MYo,EYo,Pue,CYo,wYo,Bue,AYo,LYo,yYo,V,rF,Iue,xYo,$Yo,xz,kYo,SYo,RYo,tF,Nue,PYo,BYo,$z,IYo,NYo,qYo,aF,que,jYo,DYo,kz,GYo,OYo,VYo,nF,jue,XYo,zYo,Sz,QYo,WYo,HYo,sF,Due,UYo,JYo,Rz,YYo,KYo,ZYo,lF,Gue,eKo,oKo,Pz,rKo,tKo,aKo,iF,Oue,nKo,sKo,Bz,lKo,iKo,dKo,dF,Vue,cKo,fKo,Iz,mKo,gKo,hKo,cF,Xue,pKo,_Ko,Nz,uKo,bKo,vKo,fF,zue,FKo,TKo,qz,MKo,EKo,CKo,mF,Que,wKo,AKo,jz,LKo,yKo,xKo,gF,Wue,$Ko,kKo,Dz,SKo,RKo,PKo,hF,Hue,BKo,IKo,Gz,NKo,qKo,jKo,pF,Uue,DKo,GKo,Oz,OKo,VKo,XKo,_F,Jue,zKo,QKo,Vz,WKo,HKo,UKo,uF,Yue,JKo,YKo,Xz,KKo,ZKo,eZo,bF,Kue,oZo,rZo,zz,tZo,aZo,nZo,vF,Zue,sZo,lZo,Qz,iZo,dZo,cZo,FF,e1e,fZo,mZo,Wz,gZo,hZo,pZo,TF,o1e,_Zo,uZo,Hz,bZo,vZo,FZo,MF,r1e,TZo,MZo,Uz,EZo,CZo,wZo,EF,t1e,AZo,LZo,Jz,yZo,xZo,$Zo,CF,a1e,kZo,SZo,Yz,RZo,PZo,BZo,wF,n1e,IZo,NZo,Kz,qZo,jZo,DZo,AF,s1e,GZo,OZo,Zz,VZo,XZo,zZo,LF,l1e,QZo,WZo,eQ,HZo,UZo,JZo,yF,i1e,YZo,KZo,oQ,ZZo,eer,oer,xF,d1e,rer,ter,rQ,aer,ner,ser,$F,c1e,ler,ier,tQ,der,cer,fer,kF,f1e,mer,ger,aQ,her,per,_er,SF,m1e,uer,ber,nQ,ver,Fer,Ter,RF,g1e,Mer,Eer,sQ,Cer,wer,Aer,PF,h1e,Ler,yer,lQ,xer,$er,ker,BF,p1e,Ser,Rer,iQ,Per,Ber,Ier,IF,_1e,Ner,qer,dQ,jer,Der,Ger,NF,u1e,Oer,Ver,cQ,Xer,zer,Qer,qF,b1e,Wer,Her,fQ,Uer,Jer,Yer,jF,v1e,Ker,Zer,mQ,eor,oor,ror,DF,F1e,tor,aor,gQ,nor,sor,lor,GF,T1e,ior,dor,hQ,cor,mor,gor,OF,M1e,hor,por,pQ,_or,uor,bor,VF,vor,E1e,For,Tor,C1e,Mor,Eor,XF,jOe,md,zF,w1e,r8,Cor,A1e,wor,DOe,Do,t8,Aor,gd,Lor,_Q,yor,xor,uQ,$or,kor,Sor,a8,Ror,L1e,Por,Bor,Ior,pt,n8,Nor,y1e,qor,jor,hd,Dor,x1e,Gor,Oor,bQ,Vor,Xor,zor,QF,Qor,so,s8,Wor,$1e,Hor,Uor,Va,Jor,k1e,Yor,Kor,S1e,Zor,err,R1e,orr,rrr,trr,P1e,WF,B1e,arr,nrr,vQ,srr,lrr,irr,HF,drr,I1e,crr,frr,N1e,mrr,grr,UF,GOe,pd,JF,q1e,l8,hrr,j1e,prr,OOe,Go,i8,_rr,_d,urr,FQ,brr,vrr,TQ,Frr,Trr,Mrr,d8,Err,D1e,Crr,wrr,Arr,_t,c8,Lrr,G1e,yrr,xrr,ud,$rr,O1e,krr,Srr,MQ,Rrr,Prr,Brr,YF,Irr,lo,f8,Nrr,V1e,qrr,jrr,Xa,Drr,X1e,Grr,Orr,z1e,Vrr,Xrr,Q1e,zrr,Qrr,Wrr,Fe,KF,W1e,Hrr,Urr,EQ,Jrr,Yrr,Krr,ZF,H1e,Zrr,etr,CQ,otr,rtr,ttr,eT,U1e,atr,ntr,wQ,str,ltr,itr,oT,J1e,dtr,ctr,AQ,ftr,mtr,gtr,zs,Y1e,htr,ptr,LQ,_tr,utr,yQ,btr,vtr,Ftr,rT,K1e,Ttr,Mtr,xQ,Etr,Ctr,wtr,Qs,Z1e,Atr,Ltr,$Q,ytr,xtr,kQ,$tr,ktr,Str,ut,e3e,Rtr,Ptr,SQ,Btr,Itr,RQ,Ntr,qtr,PQ,jtr,Dtr,Gtr,tT,o3e,Otr,Vtr,BQ,Xtr,ztr,Qtr,aT,r3e,Wtr,Htr,IQ,Utr,Jtr,Ytr,nT,t3e,Ktr,Ztr,NQ,ear,oar,rar,sT,a3e,tar,aar,qQ,nar,sar,lar,lT,n3e,iar,dar,jQ,car,far,mar,iT,s3e,gar,har,DQ,par,_ar,uar,dT,l3e,bar,Far,GQ,Tar,Mar,Ear,cT,Car,i3e,war,Aar,d3e,Lar,yar,fT,VOe,bd,mT,c3e,m8,xar,f3e,$ar,XOe,Oo,g8,kar,vd,Sar,OQ,Rar,Par,VQ,Bar,Iar,Nar,h8,qar,m3e,jar,Dar,Gar,bt,p8,Oar,g3e,Var,Xar,Fd,zar,h3e,Qar,War,XQ,Har,Uar,Jar,gT,Yar,io,_8,Kar,p3e,Zar,enr,za,onr,_3e,rnr,tnr,u3e,anr,nnr,b3e,snr,lnr,inr,v3e,hT,F3e,dnr,cnr,zQ,fnr,mnr,gnr,pT,hnr,T3e,pnr,_nr,M3e,unr,bnr,_T,zOe,Td,uT,E3e,u8,vnr,C3e,Fnr,QOe,Vo,b8,Tnr,Md,Mnr,QQ,Enr,Cnr,WQ,wnr,Anr,Lnr,v8,ynr,w3e,xnr,$nr,knr,vt,F8,Snr,A3e,Rnr,Pnr,Ed,Bnr,L3e,Inr,Nnr,HQ,qnr,jnr,Dnr,bT,Gnr,co,T8,Onr,y3e,Vnr,Xnr,Qa,znr,x3e,Qnr,Wnr,$3e,Hnr,Unr,k3e,Jnr,Ynr,Knr,S3e,vT,R3e,Znr,esr,UQ,osr,rsr,tsr,FT,asr,P3e,nsr,ssr,B3e,lsr,isr,TT,WOe,Cd,MT,I3e,M8,dsr,N3e,csr,HOe,Xo,E8,fsr,wd,msr,JQ,gsr,hsr,YQ,psr,_sr,usr,C8,bsr,q3e,vsr,Fsr,Tsr,Ft,w8,Msr,j3e,Esr,Csr,Ad,wsr,D3e,Asr,Lsr,KQ,ysr,xsr,$sr,ET,ksr,fo,A8,Ssr,G3e,Rsr,Psr,Wa,Bsr,O3e,Isr,Nsr,V3e,qsr,jsr,X3e,Dsr,Gsr,Osr,Pe,CT,z3e,Vsr,Xsr,ZQ,zsr,Qsr,Wsr,wT,Q3e,Hsr,Usr,eW,Jsr,Ysr,Ksr,AT,W3e,Zsr,elr,oW,olr,rlr,tlr,LT,H3e,alr,nlr,rW,slr,llr,ilr,yT,U3e,dlr,clr,tW,flr,mlr,glr,xT,J3e,hlr,plr,aW,_lr,ulr,blr,$T,Y3e,vlr,Flr,nW,Tlr,Mlr,Elr,kT,K3e,Clr,wlr,sW,Alr,Llr,ylr,ST,Z3e,xlr,$lr,lW,klr,Slr,Rlr,RT,Plr,e2e,Blr,Ilr,o2e,Nlr,qlr,PT,UOe,Ld,BT,r2e,L8,jlr,t2e,Dlr,JOe,zo,y8,Glr,yd,Olr,iW,Vlr,Xlr,dW,zlr,Qlr,Wlr,x8,Hlr,a2e,Ulr,Jlr,Ylr,Tt,$8,Klr,n2e,Zlr,eir,xd,oir,s2e,rir,tir,cW,air,nir,sir,IT,lir,mo,k8,iir,l2e,dir,cir,Ha,fir,i2e,mir,gir,d2e,hir,pir,c2e,_ir,uir,bir,et,NT,f2e,vir,Fir,fW,Tir,Mir,Eir,qT,m2e,Cir,wir,mW,Air,Lir,yir,jT,g2e,xir,$ir,gW,kir,Sir,Rir,DT,h2e,Pir,Bir,hW,Iir,Nir,qir,GT,p2e,jir,Dir,pW,Gir,Oir,Vir,OT,Xir,_2e,zir,Qir,u2e,Wir,Hir,VT,YOe,$d,XT,b2e,S8,Uir,v2e,Jir,KOe,Qo,R8,Yir,kd,Kir,_W,Zir,edr,uW,odr,rdr,tdr,P8,adr,F2e,ndr,sdr,ldr,Mt,B8,idr,T2e,ddr,cdr,Sd,fdr,M2e,mdr,gdr,bW,hdr,pdr,_dr,zT,udr,go,I8,bdr,E2e,vdr,Fdr,Ua,Tdr,C2e,Mdr,Edr,w2e,Cdr,wdr,A2e,Adr,Ldr,ydr,Le,QT,L2e,xdr,$dr,vW,kdr,Sdr,Rdr,WT,y2e,Pdr,Bdr,FW,Idr,Ndr,qdr,HT,x2e,jdr,Ddr,TW,Gdr,Odr,Vdr,UT,$2e,Xdr,zdr,MW,Qdr,Wdr,Hdr,JT,k2e,Udr,Jdr,EW,Ydr,Kdr,Zdr,YT,S2e,ecr,ocr,CW,rcr,tcr,acr,KT,R2e,ncr,scr,wW,lcr,icr,dcr,ZT,P2e,ccr,fcr,AW,mcr,gcr,hcr,e7,B2e,pcr,_cr,LW,ucr,bcr,vcr,o7,I2e,Fcr,Tcr,yW,Mcr,Ecr,Ccr,r7,wcr,N2e,Acr,Lcr,q2e,ycr,xcr,t7,ZOe,Rd,a7,j2e,N8,$cr,D2e,kcr,eVe,Wo,q8,Scr,Pd,Rcr,xW,Pcr,Bcr,$W,Icr,Ncr,qcr,j8,jcr,G2e,Dcr,Gcr,Ocr,Et,D8,Vcr,O2e,Xcr,zcr,Bd,Qcr,V2e,Wcr,Hcr,kW,Ucr,Jcr,Ycr,n7,Kcr,ho,G8,Zcr,X2e,efr,ofr,Ja,rfr,z2e,tfr,afr,Q2e,nfr,sfr,W2e,lfr,ifr,dfr,O8,s7,H2e,cfr,ffr,SW,mfr,gfr,hfr,l7,U2e,pfr,_fr,RW,ufr,bfr,vfr,i7,Ffr,J2e,Tfr,Mfr,Y2e,Efr,Cfr,d7,oVe,Id,c7,K2e,V8,wfr,Z2e,Afr,rVe,Ho,X8,Lfr,Nd,yfr,PW,xfr,$fr,BW,kfr,Sfr,Rfr,z8,Pfr,ebe,Bfr,Ifr,Nfr,Ct,Q8,qfr,obe,jfr,Dfr,qd,Gfr,rbe,Ofr,Vfr,IW,Xfr,zfr,Qfr,f7,Wfr,po,W8,Hfr,tbe,Ufr,Jfr,Ya,Yfr,abe,Kfr,Zfr,nbe,emr,omr,sbe,rmr,tmr,amr,ot,m7,lbe,nmr,smr,NW,lmr,imr,dmr,g7,ibe,cmr,fmr,qW,mmr,gmr,hmr,h7,dbe,pmr,_mr,jW,umr,bmr,vmr,p7,cbe,Fmr,Tmr,DW,Mmr,Emr,Cmr,_7,fbe,wmr,Amr,GW,Lmr,ymr,xmr,u7,$mr,mbe,kmr,Smr,gbe,Rmr,Pmr,b7,tVe,jd,v7,hbe,H8,Bmr,pbe,Imr,aVe,Uo,U8,Nmr,Dd,qmr,OW,jmr,Dmr,VW,Gmr,Omr,Vmr,J8,Xmr,_be,zmr,Qmr,Wmr,wt,Y8,Hmr,ube,Umr,Jmr,Gd,Ymr,bbe,Kmr,Zmr,XW,egr,ogr,rgr,F7,tgr,_o,K8,agr,vbe,ngr,sgr,Ka,lgr,Fbe,igr,dgr,Tbe,cgr,fgr,Mbe,mgr,ggr,hgr,Od,T7,Ebe,pgr,_gr,zW,ugr,bgr,vgr,M7,Cbe,Fgr,Tgr,QW,Mgr,Egr,Cgr,E7,wbe,wgr,Agr,WW,Lgr,ygr,xgr,C7,$gr,Abe,kgr,Sgr,Lbe,Rgr,Pgr,w7,nVe,Vd,A7,ybe,Z8,Bgr,xbe,Igr,sVe,Jo,e9,Ngr,Xd,qgr,HW,jgr,Dgr,UW,Ggr,Ogr,Vgr,o9,Xgr,$be,zgr,Qgr,Wgr,At,r9,Hgr,kbe,Ugr,Jgr,zd,Ygr,Sbe,Kgr,Zgr,JW,ehr,ohr,rhr,L7,thr,uo,t9,ahr,Rbe,nhr,shr,Za,lhr,Pbe,ihr,dhr,Bbe,chr,fhr,Ibe,mhr,ghr,hhr,a9,y7,Nbe,phr,_hr,YW,uhr,bhr,vhr,x7,qbe,Fhr,Thr,KW,Mhr,Ehr,Chr,$7,whr,jbe,Ahr,Lhr,Dbe,yhr,xhr,k7,lVe,Qd,S7,Gbe,n9,$hr,Obe,khr,iVe,Yo,s9,Shr,Wd,Rhr,ZW,Phr,Bhr,eH,Ihr,Nhr,qhr,l9,jhr,Vbe,Dhr,Ghr,Ohr,Lt,i9,Vhr,Xbe,Xhr,zhr,Hd,Qhr,zbe,Whr,Hhr,oH,Uhr,Jhr,Yhr,R7,Khr,bo,d9,Zhr,Qbe,epr,opr,en,rpr,Wbe,tpr,apr,Hbe,npr,spr,Ube,lpr,ipr,dpr,Jbe,P7,Ybe,cpr,fpr,rH,mpr,gpr,hpr,B7,ppr,Kbe,_pr,upr,Zbe,bpr,vpr,I7,dVe,Ud,N7,eve,c9,Fpr,ove,Tpr,cVe,Ko,f9,Mpr,Jd,Epr,tH,Cpr,wpr,aH,Apr,Lpr,ypr,m9,xpr,rve,$pr,kpr,Spr,yt,g9,Rpr,tve,Ppr,Bpr,Yd,Ipr,ave,Npr,qpr,nH,jpr,Dpr,Gpr,q7,Opr,vo,h9,Vpr,nve,Xpr,zpr,on,Qpr,sve,Wpr,Hpr,lve,Upr,Jpr,ive,Ypr,Kpr,Zpr,rn,j7,dve,e_r,o_r,sH,r_r,t_r,a_r,D7,cve,n_r,s_r,lH,l_r,i_r,d_r,G7,fve,c_r,f_r,iH,m_r,g_r,h_r,O7,mve,p_r,__r,dH,u_r,b_r,v_r,V7,F_r,gve,T_r,M_r,hve,E_r,C_r,X7,fVe,Kd,z7,pve,p9,w_r,_ve,A_r,mVe,Zo,_9,L_r,Zd,y_r,cH,x_r,$_r,fH,k_r,S_r,R_r,u9,P_r,uve,B_r,I_r,N_r,xt,b9,q_r,bve,j_r,D_r,ec,G_r,vve,O_r,V_r,mH,X_r,z_r,Q_r,Q7,W_r,Fo,v9,H_r,Fve,U_r,J_r,tn,Y_r,Tve,K_r,Z_r,Mve,eur,our,Eve,rur,tur,aur,Cve,W7,wve,nur,sur,gH,lur,iur,dur,H7,cur,Ave,fur,mur,Lve,gur,hur,U7,gVe,oc,J7,yve,F9,pur,xve,_ur,hVe,er,T9,uur,rc,bur,hH,vur,Fur,pH,Tur,Mur,Eur,M9,Cur,$ve,wur,Aur,Lur,$t,E9,yur,kve,xur,$ur,tc,kur,Sve,Sur,Rur,_H,Pur,Bur,Iur,Y7,Nur,yr,C9,qur,Rve,jur,Dur,an,Gur,Pve,Our,Vur,Bve,Xur,zur,Ive,Qur,Wur,Hur,j,K7,Nve,Uur,Jur,uH,Yur,Kur,Zur,Z7,qve,e1r,o1r,bH,r1r,t1r,a1r,eM,jve,n1r,s1r,vH,l1r,i1r,d1r,oM,Dve,c1r,f1r,FH,m1r,g1r,h1r,rM,Gve,p1r,_1r,TH,u1r,b1r,v1r,tM,Ove,F1r,T1r,MH,M1r,E1r,C1r,aM,Vve,w1r,A1r,EH,L1r,y1r,x1r,nM,Xve,$1r,k1r,CH,S1r,R1r,P1r,sM,zve,B1r,I1r,wH,N1r,q1r,j1r,lM,Qve,D1r,G1r,AH,O1r,V1r,X1r,iM,Wve,z1r,Q1r,LH,W1r,H1r,U1r,dM,Hve,J1r,Y1r,yH,K1r,Z1r,e3r,cM,Uve,o3r,r3r,xH,t3r,a3r,n3r,fM,Jve,s3r,l3r,$H,i3r,d3r,c3r,mM,Yve,f3r,m3r,kH,g3r,h3r,p3r,gM,Kve,_3r,u3r,SH,b3r,v3r,F3r,hM,Zve,T3r,M3r,RH,E3r,C3r,w3r,Ws,eFe,A3r,L3r,PH,y3r,x3r,BH,$3r,k3r,S3r,pM,oFe,R3r,P3r,IH,B3r,I3r,N3r,_M,rFe,q3r,j3r,NH,D3r,G3r,O3r,uM,tFe,V3r,X3r,qH,z3r,Q3r,W3r,bM,aFe,H3r,U3r,jH,J3r,Y3r,K3r,vM,nFe,Z3r,e2r,DH,o2r,r2r,t2r,FM,sFe,a2r,n2r,GH,s2r,l2r,i2r,TM,lFe,d2r,c2r,OH,f2r,m2r,g2r,MM,iFe,h2r,p2r,VH,_2r,u2r,b2r,EM,dFe,v2r,F2r,XH,T2r,M2r,E2r,CM,cFe,C2r,w2r,zH,A2r,L2r,y2r,wM,fFe,x2r,$2r,QH,k2r,S2r,R2r,AM,mFe,P2r,B2r,WH,I2r,N2r,q2r,LM,gFe,j2r,D2r,HH,G2r,O2r,V2r,yM,hFe,X2r,z2r,UH,Q2r,W2r,H2r,xM,pFe,U2r,J2r,JH,Y2r,K2r,Z2r,$M,_Fe,ebr,obr,YH,rbr,tbr,abr,kM,uFe,nbr,sbr,KH,lbr,ibr,dbr,SM,bFe,cbr,fbr,ZH,mbr,gbr,hbr,RM,vFe,pbr,_br,eU,ubr,bbr,vbr,PM,FFe,Fbr,Tbr,oU,Mbr,Ebr,Cbr,BM,TFe,wbr,Abr,rU,Lbr,ybr,xbr,IM,MFe,$br,kbr,tU,Sbr,Rbr,Pbr,NM,EFe,Bbr,Ibr,aU,Nbr,qbr,jbr,qM,CFe,Dbr,Gbr,nU,Obr,Vbr,Xbr,jM,wFe,zbr,Qbr,sU,Wbr,Hbr,Ubr,DM,AFe,Jbr,Ybr,lU,Kbr,Zbr,evr,GM,LFe,ovr,rvr,iU,tvr,avr,nvr,OM,yFe,svr,lvr,dU,ivr,dvr,cvr,VM,xFe,fvr,mvr,cU,gvr,hvr,pvr,XM,pVe,ac,zM,$Fe,w9,_vr,kFe,uvr,_Ve,or,A9,bvr,nc,vvr,fU,Fvr,Tvr,mU,Mvr,Evr,Cvr,L9,wvr,SFe,Avr,Lvr,yvr,kt,y9,xvr,RFe,$vr,kvr,sc,Svr,PFe,Rvr,Pvr,gU,Bvr,Ivr,Nvr,QM,qvr,xr,x9,jvr,BFe,Dvr,Gvr,nn,Ovr,IFe,Vvr,Xvr,NFe,zvr,Qvr,qFe,Wvr,Hvr,Uvr,se,WM,jFe,Jvr,Yvr,hU,Kvr,Zvr,eFr,HM,DFe,oFr,rFr,pU,tFr,aFr,nFr,UM,GFe,sFr,lFr,_U,iFr,dFr,cFr,JM,OFe,fFr,mFr,uU,gFr,hFr,pFr,YM,VFe,_Fr,uFr,bU,bFr,vFr,FFr,KM,XFe,TFr,MFr,vU,EFr,CFr,wFr,ZM,zFe,AFr,LFr,FU,yFr,xFr,$Fr,eE,QFe,kFr,SFr,TU,RFr,PFr,BFr,oE,WFe,IFr,NFr,MU,qFr,jFr,DFr,rE,HFe,GFr,OFr,EU,VFr,XFr,zFr,tE,UFe,QFr,WFr,CU,HFr,UFr,JFr,aE,JFe,YFr,KFr,wU,ZFr,eTr,oTr,nE,YFe,rTr,tTr,AU,aTr,nTr,sTr,sE,KFe,lTr,iTr,LU,dTr,cTr,fTr,lE,ZFe,mTr,gTr,yU,hTr,pTr,_Tr,iE,eTe,uTr,bTr,xU,vTr,FTr,TTr,dE,oTe,MTr,ETr,$U,CTr,wTr,ATr,cE,rTe,LTr,yTr,kU,xTr,$Tr,kTr,fE,tTe,STr,RTr,SU,PTr,BTr,ITr,mE,aTe,NTr,qTr,RU,jTr,DTr,GTr,gE,nTe,OTr,VTr,PU,XTr,zTr,QTr,hE,sTe,WTr,HTr,BU,UTr,JTr,YTr,pE,lTe,KTr,ZTr,IU,e7r,o7r,r7r,_E,uVe,lc,uE,iTe,$9,t7r,dTe,a7r,bVe,rr,k9,n7r,ic,s7r,NU,l7r,i7r,qU,d7r,c7r,f7r,S9,m7r,cTe,g7r,h7r,p7r,St,R9,_7r,fTe,u7r,b7r,dc,v7r,mTe,F7r,T7r,jU,M7r,E7r,C7r,bE,w7r,$r,P9,A7r,gTe,L7r,y7r,sn,x7r,hTe,$7r,k7r,pTe,S7r,R7r,_Te,P7r,B7r,I7r,Me,vE,uTe,N7r,q7r,DU,j7r,D7r,G7r,FE,bTe,O7r,V7r,GU,X7r,z7r,Q7r,TE,vTe,W7r,H7r,OU,U7r,J7r,Y7r,ME,FTe,K7r,Z7r,VU,eMr,oMr,rMr,EE,TTe,tMr,aMr,XU,nMr,sMr,lMr,CE,MTe,iMr,dMr,zU,cMr,fMr,mMr,wE,ETe,gMr,hMr,QU,pMr,_Mr,uMr,AE,CTe,bMr,vMr,WU,FMr,TMr,MMr,LE,wTe,EMr,CMr,HU,wMr,AMr,LMr,yE,ATe,yMr,xMr,UU,$Mr,kMr,SMr,xE,LTe,RMr,PMr,JU,BMr,IMr,NMr,$E,yTe,qMr,jMr,YU,DMr,GMr,OMr,kE,xTe,VMr,XMr,KU,zMr,QMr,WMr,SE,vVe,cc,RE,$Te,B9,HMr,kTe,UMr,FVe,tr,I9,JMr,fc,YMr,ZU,KMr,ZMr,eJ,eEr,oEr,rEr,N9,tEr,STe,aEr,nEr,sEr,Rt,q9,lEr,RTe,iEr,dEr,mc,cEr,PTe,fEr,mEr,oJ,gEr,hEr,pEr,PE,_Er,kr,j9,uEr,BTe,bEr,vEr,ln,FEr,ITe,TEr,MEr,NTe,EEr,CEr,qTe,wEr,AEr,LEr,dn,BE,jTe,yEr,xEr,rJ,$Er,kEr,SEr,IE,DTe,REr,PEr,tJ,BEr,IEr,NEr,NE,GTe,qEr,jEr,aJ,DEr,GEr,OEr,qE,OTe,VEr,XEr,nJ,zEr,QEr,WEr,jE,TVe,gc,DE,VTe,D9,HEr,XTe,UEr,MVe,ar,G9,JEr,hc,YEr,sJ,KEr,ZEr,lJ,e4r,o4r,r4r,O9,t4r,zTe,a4r,n4r,s4r,Pt,V9,l4r,QTe,i4r,d4r,pc,c4r,WTe,f4r,m4r,iJ,g4r,h4r,p4r,GE,_4r,Sr,X9,u4r,HTe,b4r,v4r,cn,F4r,UTe,T4r,M4r,JTe,E4r,C4r,YTe,w4r,A4r,L4r,ie,OE,KTe,y4r,x4r,dJ,$4r,k4r,S4r,VE,ZTe,R4r,P4r,cJ,B4r,I4r,N4r,XE,e7e,q4r,j4r,fJ,D4r,G4r,O4r,zE,o7e,V4r,X4r,mJ,z4r,Q4r,W4r,QE,r7e,H4r,U4r,gJ,J4r,Y4r,K4r,WE,t7e,Z4r,eCr,hJ,oCr,rCr,tCr,HE,a7e,aCr,nCr,pJ,sCr,lCr,iCr,UE,n7e,dCr,cCr,_J,fCr,mCr,gCr,JE,s7e,hCr,pCr,uJ,_Cr,uCr,bCr,YE,l7e,vCr,FCr,bJ,TCr,MCr,ECr,KE,i7e,CCr,wCr,vJ,ACr,LCr,yCr,ZE,d7e,xCr,$Cr,FJ,kCr,SCr,RCr,e4,c7e,PCr,BCr,TJ,ICr,NCr,qCr,o4,f7e,jCr,DCr,MJ,GCr,OCr,VCr,r4,m7e,XCr,zCr,EJ,QCr,WCr,HCr,t4,g7e,UCr,JCr,CJ,YCr,KCr,ZCr,a4,h7e,e5r,o5r,wJ,r5r,t5r,a5r,n4,p7e,n5r,s5r,AJ,l5r,i5r,d5r,s4,_7e,c5r,f5r,LJ,m5r,g5r,h5r,l4,u7e,p5r,_5r,yJ,u5r,b5r,v5r,i4,EVe,_c,d4,b7e,z9,F5r,v7e,T5r,CVe,nr,Q9,M5r,uc,E5r,xJ,C5r,w5r,$J,A5r,L5r,y5r,W9,x5r,F7e,$5r,k5r,S5r,Bt,H9,R5r,T7e,P5r,B5r,bc,I5r,M7e,N5r,q5r,kJ,j5r,D5r,G5r,c4,O5r,Rr,U9,V5r,E7e,X5r,z5r,fn,Q5r,C7e,W5r,H5r,w7e,U5r,J5r,A7e,Y5r,K5r,Z5r,ye,f4,L7e,e0r,o0r,SJ,r0r,t0r,a0r,m4,y7e,n0r,s0r,RJ,l0r,i0r,d0r,g4,x7e,c0r,f0r,PJ,m0r,g0r,h0r,h4,$7e,p0r,_0r,BJ,u0r,b0r,v0r,p4,k7e,F0r,T0r,IJ,M0r,E0r,C0r,_4,S7e,w0r,A0r,NJ,L0r,y0r,x0r,u4,R7e,$0r,k0r,qJ,S0r,R0r,P0r,b4,P7e,B0r,I0r,jJ,N0r,q0r,j0r,v4,B7e,D0r,G0r,DJ,O0r,V0r,X0r,F4,I7e,z0r,Q0r,GJ,W0r,H0r,U0r,T4,wVe,vc,M4,N7e,J9,J0r,q7e,Y0r,AVe,sr,Y9,K0r,Fc,Z0r,OJ,ewr,owr,VJ,rwr,twr,awr,K9,nwr,j7e,swr,lwr,iwr,It,Z9,dwr,D7e,cwr,fwr,Tc,mwr,G7e,gwr,hwr,XJ,pwr,_wr,uwr,E4,bwr,Pr,ex,vwr,O7e,Fwr,Twr,mn,Mwr,V7e,Ewr,Cwr,X7e,wwr,Awr,z7e,Lwr,ywr,xwr,te,C4,Q7e,$wr,kwr,zJ,Swr,Rwr,Pwr,w4,W7e,Bwr,Iwr,QJ,Nwr,qwr,jwr,A4,H7e,Dwr,Gwr,WJ,Owr,Vwr,Xwr,L4,U7e,zwr,Qwr,HJ,Wwr,Hwr,Uwr,y4,J7e,Jwr,Ywr,UJ,Kwr,Zwr,eAr,x4,Y7e,oAr,rAr,JJ,tAr,aAr,nAr,$4,K7e,sAr,lAr,YJ,iAr,dAr,cAr,k4,Z7e,fAr,mAr,KJ,gAr,hAr,pAr,S4,eMe,_Ar,uAr,ZJ,bAr,vAr,FAr,R4,oMe,TAr,MAr,eY,EAr,CAr,wAr,P4,rMe,AAr,LAr,oY,yAr,xAr,$Ar,B4,tMe,kAr,SAr,rY,RAr,PAr,BAr,I4,aMe,IAr,NAr,tY,qAr,jAr,DAr,N4,nMe,GAr,OAr,aY,VAr,XAr,zAr,q4,sMe,QAr,WAr,nY,HAr,UAr,JAr,j4,lMe,YAr,KAr,sY,ZAr,e6r,o6r,D4,iMe,r6r,t6r,lY,a6r,n6r,s6r,G4,dMe,l6r,i6r,iY,d6r,c6r,f6r,O4,cMe,m6r,g6r,dY,h6r,p6r,_6r,V4,fMe,u6r,b6r,cY,v6r,F6r,T6r,X4,mMe,M6r,E6r,fY,C6r,w6r,A6r,z4,gMe,L6r,y6r,mY,x6r,$6r,k6r,Q4,hMe,S6r,R6r,gY,P6r,B6r,I6r,W4,pMe,N6r,q6r,hY,j6r,D6r,G6r,H4,_Me,O6r,V6r,pY,X6r,z6r,Q6r,U4,uMe,W6r,H6r,_Y,U6r,J6r,Y6r,J4,LVe,Mc,Y4,bMe,ox,K6r,vMe,Z6r,yVe,lr,rx,eLr,Ec,oLr,uY,rLr,tLr,bY,aLr,nLr,sLr,tx,lLr,FMe,iLr,dLr,cLr,Nt,ax,fLr,TMe,mLr,gLr,Cc,hLr,MMe,pLr,_Lr,vY,uLr,bLr,vLr,K4,FLr,Br,nx,TLr,EMe,MLr,ELr,gn,CLr,CMe,wLr,ALr,wMe,LLr,yLr,AMe,xLr,$Lr,kLr,_e,Z4,LMe,SLr,RLr,FY,PLr,BLr,ILr,eC,yMe,NLr,qLr,TY,jLr,DLr,GLr,oC,xMe,OLr,VLr,MY,XLr,zLr,QLr,rC,$Me,WLr,HLr,EY,ULr,JLr,YLr,tC,kMe,KLr,ZLr,CY,eyr,oyr,ryr,aC,SMe,tyr,ayr,wY,nyr,syr,lyr,nC,RMe,iyr,dyr,AY,cyr,fyr,myr,sC,PMe,gyr,hyr,LY,pyr,_yr,uyr,lC,BMe,byr,vyr,yY,Fyr,Tyr,Myr,iC,IMe,Eyr,Cyr,xY,wyr,Ayr,Lyr,dC,NMe,yyr,xyr,$Y,$yr,kyr,Syr,cC,qMe,Ryr,Pyr,kY,Byr,Iyr,Nyr,fC,jMe,qyr,jyr,SY,Dyr,Gyr,Oyr,mC,DMe,Vyr,Xyr,RY,zyr,Qyr,Wyr,gC,GMe,Hyr,Uyr,PY,Jyr,Yyr,Kyr,hC,OMe,Zyr,e8r,BY,o8r,r8r,t8r,pC,VMe,a8r,n8r,IY,s8r,l8r,i8r,_C,xVe,wc,uC,XMe,sx,d8r,zMe,c8r,$Ve,ir,lx,f8r,Ac,m8r,NY,g8r,h8r,qY,p8r,_8r,u8r,ix,b8r,QMe,v8r,F8r,T8r,qt,dx,M8r,WMe,E8r,C8r,Lc,w8r,HMe,A8r,L8r,jY,y8r,x8r,$8r,bC,k8r,Ir,cx,S8r,UMe,R8r,P8r,hn,B8r,JMe,I8r,N8r,YMe,q8r,j8r,KMe,D8r,G8r,O8r,fx,vC,ZMe,V8r,X8r,DY,z8r,Q8r,W8r,FC,eEe,H8r,U8r,GY,J8r,Y8r,K8r,TC,kVe,yc,MC,oEe,mx,Z8r,rEe,e9r,SVe,dr,gx,o9r,xc,r9r,OY,t9r,a9r,VY,n9r,s9r,l9r,hx,i9r,tEe,d9r,c9r,f9r,jt,px,m9r,aEe,g9r,h9r,$c,p9r,nEe,_9r,u9r,XY,b9r,v9r,F9r,EC,T9r,Nr,_x,M9r,sEe,E9r,C9r,pn,w9r,lEe,A9r,L9r,iEe,y9r,x9r,dEe,$9r,k9r,S9r,cEe,CC,fEe,R9r,P9r,zY,B9r,I9r,N9r,wC,RVe,kc,AC,mEe,ux,q9r,gEe,j9r,PVe,cr,bx,D9r,Sc,G9r,QY,O9r,V9r,WY,X9r,z9r,Q9r,vx,W9r,hEe,H9r,U9r,J9r,Dt,Fx,Y9r,pEe,K9r,Z9r,Rc,exr,_Ee,oxr,rxr,HY,txr,axr,nxr,LC,sxr,qr,Tx,lxr,uEe,ixr,dxr,_n,cxr,bEe,fxr,mxr,vEe,gxr,hxr,FEe,pxr,_xr,uxr,de,yC,TEe,bxr,vxr,UY,Fxr,Txr,Mxr,xC,MEe,Exr,Cxr,JY,wxr,Axr,Lxr,$C,EEe,yxr,xxr,YY,$xr,kxr,Sxr,kC,CEe,Rxr,Pxr,KY,Bxr,Ixr,Nxr,SC,wEe,qxr,jxr,ZY,Dxr,Gxr,Oxr,RC,AEe,Vxr,Xxr,eK,zxr,Qxr,Wxr,PC,LEe,Hxr,Uxr,oK,Jxr,Yxr,Kxr,BC,yEe,Zxr,e$r,rK,o$r,r$r,t$r,IC,xEe,a$r,n$r,tK,s$r,l$r,i$r,NC,$Ee,d$r,c$r,aK,f$r,m$r,g$r,qC,kEe,h$r,p$r,nK,_$r,u$r,b$r,jC,SEe,v$r,F$r,sK,T$r,M$r,E$r,DC,REe,C$r,w$r,lK,A$r,L$r,y$r,GC,PEe,x$r,$$r,iK,k$r,S$r,R$r,OC,BEe,P$r,B$r,dK,I$r,N$r,q$r,VC,IEe,j$r,D$r,cK,G$r,O$r,V$r,XC,NEe,X$r,z$r,fK,Q$r,W$r,H$r,zC,qEe,U$r,J$r,mK,Y$r,K$r,Z$r,QC,jEe,ekr,okr,gK,rkr,tkr,akr,WC,DEe,nkr,skr,hK,lkr,ikr,dkr,HC,BVe,Pc,UC,GEe,Mx,ckr,OEe,fkr,IVe,fr,Ex,mkr,Bc,gkr,pK,hkr,pkr,_K,_kr,ukr,bkr,Cx,vkr,VEe,Fkr,Tkr,Mkr,Gt,wx,Ekr,XEe,Ckr,wkr,Ic,Akr,zEe,Lkr,ykr,uK,xkr,$kr,kkr,JC,Skr,jr,Ax,Rkr,QEe,Pkr,Bkr,un,Ikr,WEe,Nkr,qkr,HEe,jkr,Dkr,UEe,Gkr,Okr,Vkr,ce,YC,JEe,Xkr,zkr,bK,Qkr,Wkr,Hkr,KC,YEe,Ukr,Jkr,vK,Ykr,Kkr,Zkr,ZC,KEe,eSr,oSr,FK,rSr,tSr,aSr,e5,ZEe,nSr,sSr,TK,lSr,iSr,dSr,o5,e4e,cSr,fSr,MK,mSr,gSr,hSr,r5,o4e,pSr,_Sr,EK,uSr,bSr,vSr,t5,r4e,FSr,TSr,CK,MSr,ESr,CSr,a5,t4e,wSr,ASr,wK,LSr,ySr,xSr,n5,a4e,$Sr,kSr,AK,SSr,RSr,PSr,s5,n4e,BSr,ISr,LK,NSr,qSr,jSr,l5,s4e,DSr,GSr,yK,OSr,VSr,XSr,i5,l4e,zSr,QSr,xK,WSr,HSr,USr,d5,i4e,JSr,YSr,$K,KSr,ZSr,eRr,c5,d4e,oRr,rRr,kK,tRr,aRr,nRr,f5,c4e,sRr,lRr,SK,iRr,dRr,cRr,m5,f4e,fRr,mRr,RK,gRr,hRr,pRr,g5,m4e,_Rr,uRr,PK,bRr,vRr,FRr,h5,g4e,TRr,MRr,BK,ERr,CRr,wRr,p5,h4e,ARr,LRr,IK,yRr,xRr,$Rr,_5,p4e,kRr,SRr,NK,RRr,PRr,BRr,u5,NVe,Nc,b5,_4e,Lx,IRr,u4e,NRr,qVe,mr,yx,qRr,qc,jRr,qK,DRr,GRr,jK,ORr,VRr,XRr,xx,zRr,b4e,QRr,WRr,HRr,Ot,$x,URr,v4e,JRr,YRr,jc,KRr,F4e,ZRr,ePr,DK,oPr,rPr,tPr,v5,aPr,Dr,kx,nPr,T4e,sPr,lPr,bn,iPr,M4e,dPr,cPr,E4e,fPr,mPr,C4e,gPr,hPr,pPr,w4e,F5,A4e,_Pr,uPr,GK,bPr,vPr,FPr,T5,jVe,Dc,M5,L4e,Sx,TPr,y4e,MPr,DVe,gr,Rx,EPr,Gc,CPr,OK,wPr,APr,VK,LPr,yPr,xPr,Px,$Pr,x4e,kPr,SPr,RPr,Vt,Bx,PPr,$4e,BPr,IPr,Oc,NPr,k4e,qPr,jPr,XK,DPr,GPr,OPr,E5,VPr,Gr,Ix,XPr,S4e,zPr,QPr,vn,WPr,R4e,HPr,UPr,P4e,JPr,YPr,B4e,KPr,ZPr,eBr,I4e,C5,N4e,oBr,rBr,zK,tBr,aBr,nBr,w5,GVe,Vc,A5,q4e,Nx,sBr,j4e,lBr,OVe,hr,qx,iBr,Xc,dBr,QK,cBr,fBr,WK,mBr,gBr,hBr,jx,pBr,D4e,_Br,uBr,bBr,Xt,Dx,vBr,G4e,FBr,TBr,zc,MBr,O4e,EBr,CBr,HK,wBr,ABr,LBr,L5,yBr,Or,Gx,xBr,V4e,$Br,kBr,Fn,SBr,X4e,RBr,PBr,z4e,BBr,IBr,Q4e,NBr,qBr,jBr,oe,y5,W4e,DBr,GBr,UK,OBr,VBr,XBr,x5,H4e,zBr,QBr,JK,WBr,HBr,UBr,$5,U4e,JBr,YBr,YK,KBr,ZBr,eIr,k5,J4e,oIr,rIr,KK,tIr,aIr,nIr,S5,Y4e,sIr,lIr,ZK,iIr,dIr,cIr,R5,K4e,fIr,mIr,eZ,gIr,hIr,pIr,P5,Z4e,_Ir,uIr,oZ,bIr,vIr,FIr,B5,eCe,TIr,MIr,rZ,EIr,CIr,wIr,I5,oCe,AIr,LIr,tZ,yIr,xIr,$Ir,N5,rCe,kIr,SIr,aZ,RIr,PIr,BIr,q5,tCe,IIr,NIr,nZ,qIr,jIr,DIr,j5,aCe,GIr,OIr,sZ,VIr,XIr,zIr,D5,nCe,QIr,WIr,lZ,HIr,UIr,JIr,G5,sCe,YIr,KIr,iZ,ZIr,eNr,oNr,O5,lCe,rNr,tNr,dZ,aNr,nNr,sNr,V5,iCe,lNr,iNr,cZ,dNr,cNr,fNr,X5,dCe,mNr,gNr,fZ,hNr,pNr,_Nr,z5,cCe,uNr,bNr,mZ,vNr,FNr,TNr,Q5,fCe,MNr,ENr,gZ,CNr,wNr,ANr,W5,mCe,LNr,yNr,hZ,xNr,$Nr,kNr,H5,gCe,SNr,RNr,pZ,PNr,BNr,INr,U5,hCe,NNr,qNr,_Z,jNr,DNr,GNr,J5,pCe,ONr,VNr,uZ,XNr,zNr,QNr,Y5,_Ce,WNr,HNr,bZ,UNr,JNr,YNr,K5,uCe,KNr,ZNr,vZ,eqr,oqr,rqr,Z5,bCe,tqr,aqr,FZ,nqr,sqr,lqr,e0,vCe,iqr,dqr,TZ,cqr,fqr,mqr,o0,VVe,Qc,r0,FCe,Ox,gqr,TCe,hqr,XVe,pr,Vx,pqr,Wc,_qr,MZ,uqr,bqr,EZ,vqr,Fqr,Tqr,Xx,Mqr,MCe,Eqr,Cqr,wqr,zt,zx,Aqr,ECe,Lqr,yqr,Hc,xqr,CCe,$qr,kqr,CZ,Sqr,Rqr,Pqr,t0,Bqr,Vr,Qx,Iqr,wCe,Nqr,qqr,Tn,jqr,ACe,Dqr,Gqr,LCe,Oqr,Vqr,yCe,Xqr,zqr,Qqr,xe,a0,xCe,Wqr,Hqr,wZ,Uqr,Jqr,Yqr,n0,$Ce,Kqr,Zqr,AZ,ejr,ojr,rjr,s0,kCe,tjr,ajr,LZ,njr,sjr,ljr,l0,SCe,ijr,djr,yZ,cjr,fjr,mjr,i0,RCe,gjr,hjr,xZ,pjr,_jr,ujr,d0,PCe,bjr,vjr,$Z,Fjr,Tjr,Mjr,c0,BCe,Ejr,Cjr,kZ,wjr,Ajr,Ljr,f0,ICe,yjr,xjr,SZ,$jr,kjr,Sjr,m0,NCe,Rjr,Pjr,RZ,Bjr,Ijr,Njr,g0,qCe,qjr,jjr,PZ,Djr,Gjr,Ojr,h0,zVe,Uc,p0,jCe,Wx,Vjr,DCe,Xjr,QVe,_r,Hx,zjr,Jc,Qjr,BZ,Wjr,Hjr,IZ,Ujr,Jjr,Yjr,Ux,Kjr,GCe,Zjr,eDr,oDr,Qt,Jx,rDr,OCe,tDr,aDr,Yc,nDr,VCe,sDr,lDr,NZ,iDr,dDr,cDr,_0,fDr,Xr,Yx,mDr,XCe,gDr,hDr,Mn,pDr,zCe,_Dr,uDr,QCe,bDr,vDr,WCe,FDr,TDr,MDr,Ee,u0,HCe,EDr,CDr,qZ,wDr,ADr,LDr,b0,UCe,yDr,xDr,jZ,$Dr,kDr,SDr,v0,JCe,RDr,PDr,DZ,BDr,IDr,NDr,F0,YCe,qDr,jDr,GZ,DDr,GDr,ODr,T0,KCe,VDr,XDr,OZ,zDr,QDr,WDr,M0,ZCe,HDr,UDr,VZ,JDr,YDr,KDr,E0,e5e,ZDr,eGr,XZ,oGr,rGr,tGr,C0,o5e,aGr,nGr,zZ,sGr,lGr,iGr,w0,r5e,dGr,cGr,QZ,fGr,mGr,gGr,A0,t5e,hGr,pGr,WZ,_Gr,uGr,bGr,L0,a5e,vGr,FGr,HZ,TGr,MGr,EGr,y0,n5e,CGr,wGr,UZ,AGr,LGr,yGr,x0,s5e,xGr,$Gr,JZ,kGr,SGr,RGr,$0,WVe,Kc,k0,l5e,Kx,PGr,i5e,BGr,HVe,ur,Zx,IGr,Zc,NGr,YZ,qGr,jGr,KZ,DGr,GGr,OGr,e$,VGr,d5e,XGr,zGr,QGr,Wt,o$,WGr,c5e,HGr,UGr,ef,JGr,f5e,YGr,KGr,ZZ,ZGr,eOr,oOr,S0,rOr,zr,r$,tOr,m5e,aOr,nOr,En,sOr,g5e,lOr,iOr,h5e,dOr,cOr,p5e,fOr,mOr,gOr,$e,R0,_5e,hOr,pOr,eee,_Or,uOr,bOr,P0,u5e,vOr,FOr,oee,TOr,MOr,EOr,B0,b5e,COr,wOr,ree,AOr,LOr,yOr,I0,v5e,xOr,$Or,tee,kOr,SOr,ROr,N0,F5e,POr,BOr,aee,IOr,NOr,qOr,q0,T5e,jOr,DOr,nee,GOr,OOr,VOr,j0,M5e,XOr,zOr,see,QOr,WOr,HOr,D0,E5e,UOr,JOr,lee,YOr,KOr,ZOr,G0,C5e,eVr,oVr,iee,rVr,tVr,aVr,O0,w5e,nVr,sVr,dee,lVr,iVr,dVr,V0,UVe,of,X0,A5e,t$,cVr,L5e,fVr,JVe,br,a$,mVr,rf,gVr,cee,hVr,pVr,fee,_Vr,uVr,bVr,n$,vVr,y5e,FVr,TVr,MVr,Ht,s$,EVr,x5e,CVr,wVr,tf,AVr,$5e,LVr,yVr,mee,xVr,$Vr,kVr,z0,SVr,Qr,l$,RVr,k5e,PVr,BVr,Cn,IVr,S5e,NVr,qVr,R5e,jVr,DVr,P5e,GVr,OVr,VVr,ke,Q0,B5e,XVr,zVr,gee,QVr,WVr,HVr,W0,I5e,UVr,JVr,hee,YVr,KVr,ZVr,H0,N5e,eXr,oXr,pee,rXr,tXr,aXr,U0,q5e,nXr,sXr,_ee,lXr,iXr,dXr,J0,j5e,cXr,fXr,uee,mXr,gXr,hXr,Y0,D5e,pXr,_Xr,bee,uXr,bXr,vXr,K0,G5e,FXr,TXr,vee,MXr,EXr,CXr,Z0,O5e,wXr,AXr,Fee,LXr,yXr,xXr,ew,V5e,$Xr,kXr,Tee,SXr,RXr,PXr,ow,X5e,BXr,IXr,Mee,NXr,qXr,jXr,rw,YVe,af,tw,z5e,i$,DXr,Q5e,GXr,KVe,vr,d$,OXr,nf,VXr,Eee,XXr,zXr,Cee,QXr,WXr,HXr,c$,UXr,W5e,JXr,YXr,KXr,Ut,f$,ZXr,H5e,ezr,ozr,sf,rzr,U5e,tzr,azr,wee,nzr,szr,lzr,aw,izr,Wr,m$,dzr,J5e,czr,fzr,wn,mzr,Y5e,gzr,hzr,K5e,pzr,_zr,Z5e,uzr,bzr,vzr,Se,nw,e0e,Fzr,Tzr,Aee,Mzr,Ezr,Czr,sw,o0e,wzr,Azr,Lee,Lzr,yzr,xzr,lw,r0e,$zr,kzr,yee,Szr,Rzr,Pzr,iw,t0e,Bzr,Izr,xee,Nzr,qzr,jzr,dw,a0e,Dzr,Gzr,$ee,Ozr,Vzr,Xzr,cw,n0e,zzr,Qzr,kee,Wzr,Hzr,Uzr,fw,s0e,Jzr,Yzr,See,Kzr,Zzr,eQr,mw,l0e,oQr,rQr,Ree,tQr,aQr,nQr,gw,i0e,sQr,lQr,Pee,iQr,dQr,cQr,hw,d0e,fQr,mQr,Bee,gQr,hQr,pQr,pw,ZVe,lf,_w,c0e,g$,_Qr,f0e,uQr,eXe,Fr,h$,bQr,df,vQr,Iee,FQr,TQr,Nee,MQr,EQr,CQr,p$,wQr,m0e,AQr,LQr,yQr,Jt,_$,xQr,g0e,$Qr,kQr,cf,SQr,h0e,RQr,PQr,qee,BQr,IQr,NQr,uw,qQr,Hr,u$,jQr,p0e,DQr,GQr,An,OQr,_0e,VQr,XQr,u0e,zQr,QQr,b0e,WQr,HQr,UQr,Re,bw,v0e,JQr,YQr,jee,KQr,ZQr,eWr,vw,F0e,oWr,rWr,Dee,tWr,aWr,nWr,Fw,T0e,sWr,lWr,Gee,iWr,dWr,cWr,Tw,M0e,fWr,mWr,Oee,gWr,hWr,pWr,Mw,E0e,_Wr,uWr,Vee,bWr,vWr,FWr,Ew,C0e,TWr,MWr,Xee,EWr,CWr,wWr,Cw,w0e,AWr,LWr,zee,yWr,xWr,$Wr,ww,A0e,kWr,SWr,Qee,RWr,PWr,BWr,Aw,L0e,IWr,NWr,Wee,qWr,jWr,DWr,Lw,y0e,GWr,OWr,Hee,VWr,XWr,zWr,yw,oXe,ff,xw,x0e,b$,QWr,$0e,WWr,rXe,Tr,v$,HWr,mf,UWr,Uee,JWr,YWr,Jee,KWr,ZWr,eHr,F$,oHr,k0e,rHr,tHr,aHr,Yt,T$,nHr,S0e,sHr,lHr,gf,iHr,R0e,dHr,cHr,Yee,fHr,mHr,gHr,$w,hHr,Ur,M$,pHr,P0e,_Hr,uHr,Ln,bHr,B0e,vHr,FHr,I0e,THr,MHr,N0e,EHr,CHr,wHr,Ve,kw,q0e,AHr,LHr,Kee,yHr,xHr,$Hr,Sw,j0e,kHr,SHr,Zee,RHr,PHr,BHr,Rw,D0e,IHr,NHr,eoe,qHr,jHr,DHr,Pw,G0e,GHr,OHr,ooe,VHr,XHr,zHr,Bw,O0e,QHr,WHr,roe,HHr,UHr,JHr,Iw,V0e,YHr,KHr,toe,ZHr,eUr,oUr,Nw,X0e,rUr,tUr,aoe,aUr,nUr,sUr,qw,z0e,lUr,iUr,noe,dUr,cUr,fUr,jw,tXe,hf,Dw,Q0e,E$,mUr,W0e,gUr,aXe,Mr,C$,hUr,pf,pUr,soe,_Ur,uUr,loe,bUr,vUr,FUr,w$,TUr,H0e,MUr,EUr,CUr,Kt,A$,wUr,U0e,AUr,LUr,_f,yUr,J0e,xUr,$Ur,ioe,kUr,SUr,RUr,Gw,PUr,Jr,L$,BUr,Y0e,IUr,NUr,yn,qUr,K0e,jUr,DUr,Z0e,GUr,OUr,ewe,VUr,XUr,zUr,Xe,Ow,owe,QUr,WUr,doe,HUr,UUr,JUr,Vw,rwe,YUr,KUr,coe,ZUr,eJr,oJr,Xw,twe,rJr,tJr,foe,aJr,nJr,sJr,zw,awe,lJr,iJr,moe,dJr,cJr,fJr,Qw,nwe,mJr,gJr,goe,hJr,pJr,_Jr,Ww,swe,uJr,bJr,hoe,vJr,FJr,TJr,Hw,lwe,MJr,EJr,poe,CJr,wJr,AJr,Uw,iwe,LJr,yJr,_oe,xJr,$Jr,kJr,Jw,nXe,uf,Yw,dwe,y$,SJr,cwe,RJr,sXe,Er,x$,PJr,bf,BJr,uoe,IJr,NJr,boe,qJr,jJr,DJr,$$,GJr,fwe,OJr,VJr,XJr,Zt,k$,zJr,mwe,QJr,WJr,vf,HJr,gwe,UJr,JJr,voe,YJr,KJr,ZJr,Kw,eYr,Yr,S$,oYr,hwe,rYr,tYr,xn,aYr,pwe,nYr,sYr,_we,lYr,iYr,uwe,dYr,cYr,fYr,bwe,Zw,vwe,mYr,gYr,Foe,hYr,pYr,_Yr,eA,lXe,Ff,oA,Fwe,R$,uYr,Twe,bYr,iXe,Cr,P$,vYr,Tf,FYr,Toe,TYr,MYr,Moe,EYr,CYr,wYr,B$,AYr,Mwe,LYr,yYr,xYr,ea,I$,$Yr,Ewe,kYr,SYr,Mf,RYr,Cwe,PYr,BYr,Eoe,IYr,NYr,qYr,rA,jYr,Kr,N$,DYr,wwe,GYr,OYr,$n,VYr,Awe,XYr,zYr,Lwe,QYr,WYr,ywe,HYr,UYr,JYr,q$,tA,xwe,YYr,KYr,Coe,ZYr,eKr,oKr,aA,$we,rKr,tKr,woe,aKr,nKr,sKr,nA,dXe,Ef,sA,kwe,j$,lKr,Swe,iKr,cXe,wr,D$,dKr,Cf,cKr,Aoe,fKr,mKr,Loe,gKr,hKr,pKr,G$,_Kr,Rwe,uKr,bKr,vKr,oa,O$,FKr,Pwe,TKr,MKr,wf,EKr,Bwe,CKr,wKr,yoe,AKr,LKr,yKr,lA,xKr,Zr,V$,$Kr,Iwe,kKr,SKr,kn,RKr,Nwe,PKr,BKr,qwe,IKr,NKr,jwe,qKr,jKr,DKr,Dwe,iA,Gwe,GKr,OKr,xoe,VKr,XKr,zKr,dA,fXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),PL=new re({}),BL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new QKr({props:{warning:!0,$$slots:{default:[xGt]},$$scope:{ctx:x}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L601"}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L624"}}),Vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L747"}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L401"}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17313/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L415"}}),wh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L614"}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),lp=new QKr({props:{$$slots:{default:[SGt]},$$scope:{ctx:x}}}),ip=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),ZL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L89"}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L103"}}),xp=new QKr({props:{$$slots:{default:[PGt]},$$scope:{ctx:x}}}),$p=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),ny=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L256"}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L768"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L775"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L790"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),$1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L797"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L804"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L813"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L858"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),wb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),tv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L865"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),nv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),Qy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L851"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L822"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L829"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L874"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L913"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L840"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L920"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L943"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L927"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L934"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L952"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),H8=new re({}),U8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L959"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L906"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L881"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),c9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L888"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),p9=new re({}),_9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L897"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),$9=new re({}),k9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),B9=new re({}),I9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),D9=new re({}),G9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:x}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[JOt]},$$scope:{ctx:x}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:x}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:x}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:x}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:x}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:x}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:x}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:x}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:x}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:x}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:x}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:x}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:x}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:x}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:x}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:x}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:x}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:x}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:x}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:x}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:x}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:x}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:x}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:x}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:x}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:x}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:x}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:x}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:x}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:x}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:x}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),$L=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),kL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),SL=o("AutoModel"),Ai=o(`, and
`),In=a("a"),RL=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),iS=o("will create a model that is an instance of "),yi=a("a"),dS=o("BertModel"),cS=o("."),Co=l(),$a=a("p"),fS=o("There is one class of "),Sf=a("code"),mS=o("AutoModel"),TQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sOe=l(),xi=a("h2"),Rf=a("a"),Cte=a("span"),F(PL.$$.fragment),MQe=l(),wte=a("span"),EQe=o("Extending the Auto Classes"),lOe=l(),Nn=a("p"),CQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ate=a("code"),wQe=o("NewModel"),AQe=o(", make sure you have a "),Lte=a("code"),LQe=o("NewModelConfig"),yQe=o(` then you can add those to the auto
classes like this:`),iOe=l(),F(BL.$$.fragment),dOe=l(),gS=a("p"),xQe=o("You will then be able to use the auto classes like you would usually do!"),cOe=l(),F(Pf.$$.fragment),fOe=l(),$i=a("h2"),Bf=a("a"),yte=a("span"),F(IL.$$.fragment),$Qe=l(),xte=a("span"),kQe=o("AutoConfig"),mOe=l(),wo=a("div"),F(NL.$$.fragment),SQe=l(),qL=a("p"),RQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),hS=a("a"),PQe=o("from_pretrained()"),BQe=o(" class method."),IQe=l(),jL=a("p"),NQe=o("This class cannot be instantiated directly using "),$te=a("code"),qQe=o("__init__()"),jQe=o(" (throws an error)."),DQe=l(),Ar=a("div"),F(DL.$$.fragment),GQe=l(),kte=a("p"),OQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),VQe=l(),ki=a("p"),XQe=o("The configuration class to instantiate is selected based on the "),Ste=a("code"),zQe=o("model_type"),QQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rte=a("code"),WQe=o("pretrained_model_name_or_path"),HQe=o(":"),UQe=l(),A=a("ul"),If=a("li"),Pte=a("strong"),JQe=o("albert"),YQe=o(" \u2014 "),pS=a("a"),KQe=o("AlbertConfig"),ZQe=o(" (ALBERT model)"),eWe=l(),Nf=a("li"),Bte=a("strong"),oWe=o("bart"),rWe=o(" \u2014 "),_S=a("a"),tWe=o("BartConfig"),aWe=o(" (BART model)"),nWe=l(),qf=a("li"),Ite=a("strong"),sWe=o("beit"),lWe=o(" \u2014 "),uS=a("a"),iWe=o("BeitConfig"),dWe=o(" (BEiT model)"),cWe=l(),jf=a("li"),Nte=a("strong"),fWe=o("bert"),mWe=o(" \u2014 "),bS=a("a"),gWe=o("BertConfig"),hWe=o(" (BERT model)"),pWe=l(),Df=a("li"),qte=a("strong"),_We=o("bert-generation"),uWe=o(" \u2014 "),vS=a("a"),bWe=o("BertGenerationConfig"),vWe=o(" (Bert Generation model)"),FWe=l(),Gf=a("li"),jte=a("strong"),TWe=o("big_bird"),MWe=o(" \u2014 "),FS=a("a"),EWe=o("BigBirdConfig"),CWe=o(" (BigBird model)"),wWe=l(),Of=a("li"),Dte=a("strong"),AWe=o("bigbird_pegasus"),LWe=o(" \u2014 "),TS=a("a"),yWe=o("BigBirdPegasusConfig"),xWe=o(" (BigBird-Pegasus model)"),$We=l(),Vf=a("li"),Gte=a("strong"),kWe=o("blenderbot"),SWe=o(" \u2014 "),MS=a("a"),RWe=o("BlenderbotConfig"),PWe=o(" (Blenderbot model)"),BWe=l(),Xf=a("li"),Ote=a("strong"),IWe=o("blenderbot-small"),NWe=o(" \u2014 "),ES=a("a"),qWe=o("BlenderbotSmallConfig"),jWe=o(" (BlenderbotSmall model)"),DWe=l(),zf=a("li"),Vte=a("strong"),GWe=o("bloom"),OWe=o(" \u2014 "),CS=a("a"),VWe=o("BloomConfig"),XWe=o(" (BLOOM model)"),zWe=l(),Qf=a("li"),Xte=a("strong"),QWe=o("camembert"),WWe=o(" \u2014 "),wS=a("a"),HWe=o("CamembertConfig"),UWe=o(" (CamemBERT model)"),JWe=l(),Wf=a("li"),zte=a("strong"),YWe=o("canine"),KWe=o(" \u2014 "),AS=a("a"),ZWe=o("CanineConfig"),eHe=o(" (CANINE model)"),oHe=l(),Hf=a("li"),Qte=a("strong"),rHe=o("clip"),tHe=o(" \u2014 "),LS=a("a"),aHe=o("CLIPConfig"),nHe=o(" (CLIP model)"),sHe=l(),Uf=a("li"),Wte=a("strong"),lHe=o("convbert"),iHe=o(" \u2014 "),yS=a("a"),dHe=o("ConvBertConfig"),cHe=o(" (ConvBERT model)"),fHe=l(),Jf=a("li"),Hte=a("strong"),mHe=o("convnext"),gHe=o(" \u2014 "),xS=a("a"),hHe=o("ConvNextConfig"),pHe=o(" (ConvNeXT model)"),_He=l(),Yf=a("li"),Ute=a("strong"),uHe=o("ctrl"),bHe=o(" \u2014 "),$S=a("a"),vHe=o("CTRLConfig"),FHe=o(" (CTRL model)"),THe=l(),Kf=a("li"),Jte=a("strong"),MHe=o("cvt"),EHe=o(" \u2014 "),kS=a("a"),CHe=o("CvtConfig"),wHe=o(" (CvT model)"),AHe=l(),Zf=a("li"),Yte=a("strong"),LHe=o("data2vec-audio"),yHe=o(" \u2014 "),SS=a("a"),xHe=o("Data2VecAudioConfig"),$He=o(" (Data2VecAudio model)"),kHe=l(),em=a("li"),Kte=a("strong"),SHe=o("data2vec-text"),RHe=o(" \u2014 "),RS=a("a"),PHe=o("Data2VecTextConfig"),BHe=o(" (Data2VecText model)"),IHe=l(),om=a("li"),Zte=a("strong"),NHe=o("data2vec-vision"),qHe=o(" \u2014 "),PS=a("a"),jHe=o("Data2VecVisionConfig"),DHe=o(" (Data2VecVision model)"),GHe=l(),rm=a("li"),eae=a("strong"),OHe=o("deberta"),VHe=o(" \u2014 "),BS=a("a"),XHe=o("DebertaConfig"),zHe=o(" (DeBERTa model)"),QHe=l(),tm=a("li"),oae=a("strong"),WHe=o("deberta-v2"),HHe=o(" \u2014 "),IS=a("a"),UHe=o("DebertaV2Config"),JHe=o(" (DeBERTa-v2 model)"),YHe=l(),am=a("li"),rae=a("strong"),KHe=o("decision_transformer"),ZHe=o(" \u2014 "),NS=a("a"),eUe=o("DecisionTransformerConfig"),oUe=o(" (Decision Transformer model)"),rUe=l(),nm=a("li"),tae=a("strong"),tUe=o("deit"),aUe=o(" \u2014 "),qS=a("a"),nUe=o("DeiTConfig"),sUe=o(" (DeiT model)"),lUe=l(),sm=a("li"),aae=a("strong"),iUe=o("detr"),dUe=o(" \u2014 "),jS=a("a"),cUe=o("DetrConfig"),fUe=o(" (DETR model)"),mUe=l(),lm=a("li"),nae=a("strong"),gUe=o("distilbert"),hUe=o(" \u2014 "),DS=a("a"),pUe=o("DistilBertConfig"),_Ue=o(" (DistilBERT model)"),uUe=l(),im=a("li"),sae=a("strong"),bUe=o("dpr"),vUe=o(" \u2014 "),GS=a("a"),FUe=o("DPRConfig"),TUe=o(" (DPR model)"),MUe=l(),dm=a("li"),lae=a("strong"),EUe=o("dpt"),CUe=o(" \u2014 "),OS=a("a"),wUe=o("DPTConfig"),AUe=o(" (DPT model)"),LUe=l(),cm=a("li"),iae=a("strong"),yUe=o("electra"),xUe=o(" \u2014 "),VS=a("a"),$Ue=o("ElectraConfig"),kUe=o(" (ELECTRA model)"),SUe=l(),fm=a("li"),dae=a("strong"),RUe=o("encoder-decoder"),PUe=o(" \u2014 "),XS=a("a"),BUe=o("EncoderDecoderConfig"),IUe=o(" (Encoder decoder model)"),NUe=l(),mm=a("li"),cae=a("strong"),qUe=o("flaubert"),jUe=o(" \u2014 "),zS=a("a"),DUe=o("FlaubertConfig"),GUe=o(" (FlauBERT model)"),OUe=l(),gm=a("li"),fae=a("strong"),VUe=o("flava"),XUe=o(" \u2014 "),QS=a("a"),zUe=o("FlavaConfig"),QUe=o(" (FLAVA model)"),WUe=l(),hm=a("li"),mae=a("strong"),HUe=o("fnet"),UUe=o(" \u2014 "),WS=a("a"),JUe=o("FNetConfig"),YUe=o(" (FNet model)"),KUe=l(),pm=a("li"),gae=a("strong"),ZUe=o("fsmt"),eJe=o(" \u2014 "),HS=a("a"),oJe=o("FSMTConfig"),rJe=o(" (FairSeq Machine-Translation model)"),tJe=l(),_m=a("li"),hae=a("strong"),aJe=o("funnel"),nJe=o(" \u2014 "),US=a("a"),sJe=o("FunnelConfig"),lJe=o(" (Funnel Transformer model)"),iJe=l(),um=a("li"),pae=a("strong"),dJe=o("glpn"),cJe=o(" \u2014 "),JS=a("a"),fJe=o("GLPNConfig"),mJe=o(" (GLPN model)"),gJe=l(),bm=a("li"),_ae=a("strong"),hJe=o("gpt2"),pJe=o(" \u2014 "),YS=a("a"),_Je=o("GPT2Config"),uJe=o(" (OpenAI GPT-2 model)"),bJe=l(),vm=a("li"),uae=a("strong"),vJe=o("gpt_neo"),FJe=o(" \u2014 "),KS=a("a"),TJe=o("GPTNeoConfig"),MJe=o(" (GPT Neo model)"),EJe=l(),Fm=a("li"),bae=a("strong"),CJe=o("gpt_neox"),wJe=o(" \u2014 "),ZS=a("a"),AJe=o("GPTNeoXConfig"),LJe=o(" (GPT NeoX model)"),yJe=l(),Tm=a("li"),vae=a("strong"),xJe=o("gptj"),$Je=o(" \u2014 "),eR=a("a"),kJe=o("GPTJConfig"),SJe=o(" (GPT-J model)"),RJe=l(),Mm=a("li"),Fae=a("strong"),PJe=o("groupvit"),BJe=o(" \u2014 "),oR=a("a"),IJe=o("GroupViTConfig"),NJe=o(" (GroupViT model)"),qJe=l(),Em=a("li"),Tae=a("strong"),jJe=o("hubert"),DJe=o(" \u2014 "),rR=a("a"),GJe=o("HubertConfig"),OJe=o(" (Hubert model)"),VJe=l(),Cm=a("li"),Mae=a("strong"),XJe=o("ibert"),zJe=o(" \u2014 "),tR=a("a"),QJe=o("IBertConfig"),WJe=o(" (I-BERT model)"),HJe=l(),wm=a("li"),Eae=a("strong"),UJe=o("imagegpt"),JJe=o(" \u2014 "),aR=a("a"),YJe=o("ImageGPTConfig"),KJe=o(" (ImageGPT model)"),ZJe=l(),Am=a("li"),Cae=a("strong"),eYe=o("layoutlm"),oYe=o(" \u2014 "),nR=a("a"),rYe=o("LayoutLMConfig"),tYe=o(" (LayoutLM model)"),aYe=l(),Lm=a("li"),wae=a("strong"),nYe=o("layoutlmv2"),sYe=o(" \u2014 "),sR=a("a"),lYe=o("LayoutLMv2Config"),iYe=o(" (LayoutLMv2 model)"),dYe=l(),ym=a("li"),Aae=a("strong"),cYe=o("layoutlmv3"),fYe=o(" \u2014 "),lR=a("a"),mYe=o("LayoutLMv3Config"),gYe=o(" (LayoutLMv3 model)"),hYe=l(),xm=a("li"),Lae=a("strong"),pYe=o("led"),_Ye=o(" \u2014 "),iR=a("a"),uYe=o("LEDConfig"),bYe=o(" (LED model)"),vYe=l(),$m=a("li"),yae=a("strong"),FYe=o("levit"),TYe=o(" \u2014 "),dR=a("a"),MYe=o("LevitConfig"),EYe=o(" (LeViT model)"),CYe=l(),km=a("li"),xae=a("strong"),wYe=o("longformer"),AYe=o(" \u2014 "),cR=a("a"),LYe=o("LongformerConfig"),yYe=o(" (Longformer model)"),xYe=l(),Sm=a("li"),$ae=a("strong"),$Ye=o("longt5"),kYe=o(" \u2014 "),fR=a("a"),SYe=o("LongT5Config"),RYe=o(" (LongT5 model)"),PYe=l(),Rm=a("li"),kae=a("strong"),BYe=o("luke"),IYe=o(" \u2014 "),mR=a("a"),NYe=o("LukeConfig"),qYe=o(" (LUKE model)"),jYe=l(),Pm=a("li"),Sae=a("strong"),DYe=o("lxmert"),GYe=o(" \u2014 "),gR=a("a"),OYe=o("LxmertConfig"),VYe=o(" (LXMERT model)"),XYe=l(),Bm=a("li"),Rae=a("strong"),zYe=o("m2m_100"),QYe=o(" \u2014 "),hR=a("a"),WYe=o("M2M100Config"),HYe=o(" (M2M100 model)"),UYe=l(),Im=a("li"),Pae=a("strong"),JYe=o("marian"),YYe=o(" \u2014 "),pR=a("a"),KYe=o("MarianConfig"),ZYe=o(" (Marian model)"),eKe=l(),Nm=a("li"),Bae=a("strong"),oKe=o("maskformer"),rKe=o(" \u2014 "),_R=a("a"),tKe=o("MaskFormerConfig"),aKe=o(" (MaskFormer model)"),nKe=l(),qm=a("li"),Iae=a("strong"),sKe=o("mbart"),lKe=o(" \u2014 "),uR=a("a"),iKe=o("MBartConfig"),dKe=o(" (mBART model)"),cKe=l(),jm=a("li"),Nae=a("strong"),fKe=o("mctct"),mKe=o(" \u2014 "),bR=a("a"),gKe=o("MCTCTConfig"),hKe=o(" (M-CTC-T model)"),pKe=l(),Dm=a("li"),qae=a("strong"),_Ke=o("megatron-bert"),uKe=o(" \u2014 "),vR=a("a"),bKe=o("MegatronBertConfig"),vKe=o(" (Megatron-BERT model)"),FKe=l(),Gm=a("li"),jae=a("strong"),TKe=o("mobilebert"),MKe=o(" \u2014 "),FR=a("a"),EKe=o("MobileBertConfig"),CKe=o(" (MobileBERT model)"),wKe=l(),Om=a("li"),Dae=a("strong"),AKe=o("mpnet"),LKe=o(" \u2014 "),TR=a("a"),yKe=o("MPNetConfig"),xKe=o(" (MPNet model)"),$Ke=l(),Vm=a("li"),Gae=a("strong"),kKe=o("mt5"),SKe=o(" \u2014 "),MR=a("a"),RKe=o("MT5Config"),PKe=o(" (MT5 model)"),BKe=l(),Xm=a("li"),Oae=a("strong"),IKe=o("nezha"),NKe=o(" \u2014 "),ER=a("a"),qKe=o("NezhaConfig"),jKe=o(" (Nezha model)"),DKe=l(),zm=a("li"),Vae=a("strong"),GKe=o("nystromformer"),OKe=o(" \u2014 "),CR=a("a"),VKe=o("NystromformerConfig"),XKe=o(" (Nystr\xF6mformer model)"),zKe=l(),Qm=a("li"),Xae=a("strong"),QKe=o("openai-gpt"),WKe=o(" \u2014 "),wR=a("a"),HKe=o("OpenAIGPTConfig"),UKe=o(" (OpenAI GPT model)"),JKe=l(),Wm=a("li"),zae=a("strong"),YKe=o("opt"),KKe=o(" \u2014 "),AR=a("a"),ZKe=o("OPTConfig"),eZe=o(" (OPT model)"),oZe=l(),Hm=a("li"),Qae=a("strong"),rZe=o("pegasus"),tZe=o(" \u2014 "),LR=a("a"),aZe=o("PegasusConfig"),nZe=o(" (Pegasus model)"),sZe=l(),Um=a("li"),Wae=a("strong"),lZe=o("perceiver"),iZe=o(" \u2014 "),yR=a("a"),dZe=o("PerceiverConfig"),cZe=o(" (Perceiver model)"),fZe=l(),Jm=a("li"),Hae=a("strong"),mZe=o("plbart"),gZe=o(" \u2014 "),xR=a("a"),hZe=o("PLBartConfig"),pZe=o(" (PLBart model)"),_Ze=l(),Ym=a("li"),Uae=a("strong"),uZe=o("poolformer"),bZe=o(" \u2014 "),$R=a("a"),vZe=o("PoolFormerConfig"),FZe=o(" (PoolFormer model)"),TZe=l(),Km=a("li"),Jae=a("strong"),MZe=o("prophetnet"),EZe=o(" \u2014 "),kR=a("a"),CZe=o("ProphetNetConfig"),wZe=o(" (ProphetNet model)"),AZe=l(),Zm=a("li"),Yae=a("strong"),LZe=o("qdqbert"),yZe=o(" \u2014 "),SR=a("a"),xZe=o("QDQBertConfig"),$Ze=o(" (QDQBert model)"),kZe=l(),eg=a("li"),Kae=a("strong"),SZe=o("rag"),RZe=o(" \u2014 "),RR=a("a"),PZe=o("RagConfig"),BZe=o(" (RAG model)"),IZe=l(),og=a("li"),Zae=a("strong"),NZe=o("realm"),qZe=o(" \u2014 "),PR=a("a"),jZe=o("RealmConfig"),DZe=o(" (REALM model)"),GZe=l(),rg=a("li"),ene=a("strong"),OZe=o("reformer"),VZe=o(" \u2014 "),BR=a("a"),XZe=o("ReformerConfig"),zZe=o(" (Reformer model)"),QZe=l(),tg=a("li"),one=a("strong"),WZe=o("regnet"),HZe=o(" \u2014 "),IR=a("a"),UZe=o("RegNetConfig"),JZe=o(" (RegNet model)"),YZe=l(),ag=a("li"),rne=a("strong"),KZe=o("rembert"),ZZe=o(" \u2014 "),NR=a("a"),eeo=o("RemBertConfig"),oeo=o(" (RemBERT model)"),reo=l(),ng=a("li"),tne=a("strong"),teo=o("resnet"),aeo=o(" \u2014 "),qR=a("a"),neo=o("ResNetConfig"),seo=o(" (ResNet model)"),leo=l(),sg=a("li"),ane=a("strong"),ieo=o("retribert"),deo=o(" \u2014 "),jR=a("a"),ceo=o("RetriBertConfig"),feo=o(" (RetriBERT model)"),meo=l(),lg=a("li"),nne=a("strong"),geo=o("roberta"),heo=o(" \u2014 "),DR=a("a"),peo=o("RobertaConfig"),_eo=o(" (RoBERTa model)"),ueo=l(),ig=a("li"),sne=a("strong"),beo=o("roformer"),veo=o(" \u2014 "),GR=a("a"),Feo=o("RoFormerConfig"),Teo=o(" (RoFormer model)"),Meo=l(),dg=a("li"),lne=a("strong"),Eeo=o("segformer"),Ceo=o(" \u2014 "),OR=a("a"),weo=o("SegformerConfig"),Aeo=o(" (SegFormer model)"),Leo=l(),cg=a("li"),ine=a("strong"),yeo=o("sew"),xeo=o(" \u2014 "),VR=a("a"),$eo=o("SEWConfig"),keo=o(" (SEW model)"),Seo=l(),fg=a("li"),dne=a("strong"),Reo=o("sew-d"),Peo=o(" \u2014 "),XR=a("a"),Beo=o("SEWDConfig"),Ieo=o(" (SEW-D model)"),Neo=l(),mg=a("li"),cne=a("strong"),qeo=o("speech-encoder-decoder"),jeo=o(" \u2014 "),zR=a("a"),Deo=o("SpeechEncoderDecoderConfig"),Geo=o(" (Speech Encoder decoder model)"),Oeo=l(),gg=a("li"),fne=a("strong"),Veo=o("speech_to_text"),Xeo=o(" \u2014 "),QR=a("a"),zeo=o("Speech2TextConfig"),Qeo=o(" (Speech2Text model)"),Weo=l(),hg=a("li"),mne=a("strong"),Heo=o("speech_to_text_2"),Ueo=o(" \u2014 "),WR=a("a"),Jeo=o("Speech2Text2Config"),Yeo=o(" (Speech2Text2 model)"),Keo=l(),pg=a("li"),gne=a("strong"),Zeo=o("splinter"),eoo=o(" \u2014 "),HR=a("a"),ooo=o("SplinterConfig"),roo=o(" (Splinter model)"),too=l(),_g=a("li"),hne=a("strong"),aoo=o("squeezebert"),noo=o(" \u2014 "),UR=a("a"),soo=o("SqueezeBertConfig"),loo=o(" (SqueezeBERT model)"),ioo=l(),ug=a("li"),pne=a("strong"),doo=o("swin"),coo=o(" \u2014 "),JR=a("a"),foo=o("SwinConfig"),moo=o(" (Swin Transformer model)"),goo=l(),bg=a("li"),_ne=a("strong"),hoo=o("t5"),poo=o(" \u2014 "),YR=a("a"),_oo=o("T5Config"),uoo=o(" (T5 model)"),boo=l(),vg=a("li"),une=a("strong"),voo=o("tapas"),Foo=o(" \u2014 "),KR=a("a"),Too=o("TapasConfig"),Moo=o(" (TAPAS model)"),Eoo=l(),Fg=a("li"),bne=a("strong"),Coo=o("trajectory_transformer"),woo=o(" \u2014 "),ZR=a("a"),Aoo=o("TrajectoryTransformerConfig"),Loo=o(" (Trajectory Transformer model)"),yoo=l(),Tg=a("li"),vne=a("strong"),xoo=o("transfo-xl"),$oo=o(" \u2014 "),eP=a("a"),koo=o("TransfoXLConfig"),Soo=o(" (Transformer-XL model)"),Roo=l(),Mg=a("li"),Fne=a("strong"),Poo=o("trocr"),Boo=o(" \u2014 "),oP=a("a"),Ioo=o("TrOCRConfig"),Noo=o(" (TrOCR model)"),qoo=l(),Eg=a("li"),Tne=a("strong"),joo=o("unispeech"),Doo=o(" \u2014 "),rP=a("a"),Goo=o("UniSpeechConfig"),Ooo=o(" (UniSpeech model)"),Voo=l(),Cg=a("li"),Mne=a("strong"),Xoo=o("unispeech-sat"),zoo=o(" \u2014 "),tP=a("a"),Qoo=o("UniSpeechSatConfig"),Woo=o(" (UniSpeechSat model)"),Hoo=l(),wg=a("li"),Ene=a("strong"),Uoo=o("van"),Joo=o(" \u2014 "),aP=a("a"),Yoo=o("VanConfig"),Koo=o(" (VAN model)"),Zoo=l(),Ag=a("li"),Cne=a("strong"),ero=o("vilt"),oro=o(" \u2014 "),nP=a("a"),rro=o("ViltConfig"),tro=o(" (ViLT model)"),aro=l(),Lg=a("li"),wne=a("strong"),nro=o("vision-encoder-decoder"),sro=o(" \u2014 "),sP=a("a"),lro=o("VisionEncoderDecoderConfig"),iro=o(" (Vision Encoder decoder model)"),dro=l(),yg=a("li"),Ane=a("strong"),cro=o("vision-text-dual-encoder"),fro=o(" \u2014 "),lP=a("a"),mro=o("VisionTextDualEncoderConfig"),gro=o(" (VisionTextDualEncoder model)"),hro=l(),xg=a("li"),Lne=a("strong"),pro=o("visual_bert"),_ro=o(" \u2014 "),iP=a("a"),uro=o("VisualBertConfig"),bro=o(" (VisualBERT model)"),vro=l(),$g=a("li"),yne=a("strong"),Fro=o("vit"),Tro=o(" \u2014 "),dP=a("a"),Mro=o("ViTConfig"),Ero=o(" (ViT model)"),Cro=l(),kg=a("li"),xne=a("strong"),wro=o("vit_mae"),Aro=o(" \u2014 "),cP=a("a"),Lro=o("ViTMAEConfig"),yro=o(" (ViTMAE model)"),xro=l(),Sg=a("li"),$ne=a("strong"),$ro=o("wav2vec2"),kro=o(" \u2014 "),fP=a("a"),Sro=o("Wav2Vec2Config"),Rro=o(" (Wav2Vec2 model)"),Pro=l(),Rg=a("li"),kne=a("strong"),Bro=o("wav2vec2-conformer"),Iro=o(" \u2014 "),mP=a("a"),Nro=o("Wav2Vec2ConformerConfig"),qro=o(" (Wav2Vec2-Conformer model)"),jro=l(),Pg=a("li"),Sne=a("strong"),Dro=o("wavlm"),Gro=o(" \u2014 "),gP=a("a"),Oro=o("WavLMConfig"),Vro=o(" (WavLM model)"),Xro=l(),Bg=a("li"),Rne=a("strong"),zro=o("xglm"),Qro=o(" \u2014 "),hP=a("a"),Wro=o("XGLMConfig"),Hro=o(" (XGLM model)"),Uro=l(),Ig=a("li"),Pne=a("strong"),Jro=o("xlm"),Yro=o(" \u2014 "),pP=a("a"),Kro=o("XLMConfig"),Zro=o(" (XLM model)"),eto=l(),Ng=a("li"),Bne=a("strong"),oto=o("xlm-prophetnet"),rto=o(" \u2014 "),_P=a("a"),tto=o("XLMProphetNetConfig"),ato=o(" (XLM-ProphetNet model)"),nto=l(),qg=a("li"),Ine=a("strong"),sto=o("xlm-roberta"),lto=o(" \u2014 "),uP=a("a"),ito=o("XLMRobertaConfig"),dto=o(" (XLM-RoBERTa model)"),cto=l(),jg=a("li"),Nne=a("strong"),fto=o("xlm-roberta-xl"),mto=o(" \u2014 "),bP=a("a"),gto=o("XLMRobertaXLConfig"),hto=o(" (XLM-RoBERTa-XL model)"),pto=l(),Dg=a("li"),qne=a("strong"),_to=o("xlnet"),uto=o(" \u2014 "),vP=a("a"),bto=o("XLNetConfig"),vto=o(" (XLNet model)"),Fto=l(),Gg=a("li"),jne=a("strong"),Tto=o("yolos"),Mto=o(" \u2014 "),FP=a("a"),Eto=o("YolosConfig"),Cto=o(" (YOLOS model)"),wto=l(),Og=a("li"),Dne=a("strong"),Ato=o("yoso"),Lto=o(" \u2014 "),TP=a("a"),yto=o("YosoConfig"),xto=o(" (YOSO model)"),$to=l(),F(Vg.$$.fragment),kto=l(),Xg=a("div"),F(GL.$$.fragment),Sto=l(),Gne=a("p"),Rto=o("Register a new configuration for this class."),gOe=l(),Si=a("h2"),zg=a("a"),One=a("span"),F(OL.$$.fragment),Pto=l(),Vne=a("span"),Bto=o("AutoTokenizer"),hOe=l(),Ao=a("div"),F(VL.$$.fragment),Ito=l(),XL=a("p"),Nto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MP=a("a"),qto=o("AutoTokenizer.from_pretrained()"),jto=o(" class method."),Dto=l(),zL=a("p"),Gto=o("This class cannot be instantiated directly using "),Xne=a("code"),Oto=o("__init__()"),Vto=o(" (throws an error)."),Xto=l(),Lr=a("div"),F(QL.$$.fragment),zto=l(),zne=a("p"),Qto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Wto=l(),ka=a("p"),Hto=o("The tokenizer class to instantiate is selected based on the "),Qne=a("code"),Uto=o("model_type"),Jto=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),Yto=o("pretrained_model_name_or_path"),Kto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=a("code"),Zto=o("pretrained_model_name_or_path"),eao=o(":"),oao=l(),k=a("ul"),qn=a("li"),Une=a("strong"),rao=o("albert"),tao=o(" \u2014 "),EP=a("a"),aao=o("AlbertTokenizer"),nao=o(" or "),CP=a("a"),sao=o("AlbertTokenizerFast"),lao=o(" (ALBERT model)"),iao=l(),jn=a("li"),Jne=a("strong"),dao=o("bart"),cao=o(" \u2014 "),wP=a("a"),fao=o("BartTokenizer"),mao=o(" or "),AP=a("a"),gao=o("BartTokenizerFast"),hao=o(" (BART model)"),pao=l(),Dn=a("li"),Yne=a("strong"),_ao=o("barthez"),uao=o(" \u2014 "),LP=a("a"),bao=o("BarthezTokenizer"),vao=o(" or "),yP=a("a"),Fao=o("BarthezTokenizerFast"),Tao=o(" (BARThez model)"),Mao=l(),Qg=a("li"),Kne=a("strong"),Eao=o("bartpho"),Cao=o(" \u2014 "),xP=a("a"),wao=o("BartphoTokenizer"),Aao=o(" (BARTpho model)"),Lao=l(),Gn=a("li"),Zne=a("strong"),yao=o("bert"),xao=o(" \u2014 "),$P=a("a"),$ao=o("BertTokenizer"),kao=o(" or "),kP=a("a"),Sao=o("BertTokenizerFast"),Rao=o(" (BERT model)"),Pao=l(),Wg=a("li"),ese=a("strong"),Bao=o("bert-generation"),Iao=o(" \u2014 "),SP=a("a"),Nao=o("BertGenerationTokenizer"),qao=o(" (Bert Generation model)"),jao=l(),Hg=a("li"),ose=a("strong"),Dao=o("bert-japanese"),Gao=o(" \u2014 "),RP=a("a"),Oao=o("BertJapaneseTokenizer"),Vao=o(" (BertJapanese model)"),Xao=l(),Ug=a("li"),rse=a("strong"),zao=o("bertweet"),Qao=o(" \u2014 "),PP=a("a"),Wao=o("BertweetTokenizer"),Hao=o(" (BERTweet model)"),Uao=l(),On=a("li"),tse=a("strong"),Jao=o("big_bird"),Yao=o(" \u2014 "),BP=a("a"),Kao=o("BigBirdTokenizer"),Zao=o(" or "),IP=a("a"),eno=o("BigBirdTokenizerFast"),ono=o(" (BigBird model)"),rno=l(),Vn=a("li"),ase=a("strong"),tno=o("bigbird_pegasus"),ano=o(" \u2014 "),NP=a("a"),nno=o("PegasusTokenizer"),sno=o(" or "),qP=a("a"),lno=o("PegasusTokenizerFast"),ino=o(" (BigBird-Pegasus model)"),dno=l(),Xn=a("li"),nse=a("strong"),cno=o("blenderbot"),fno=o(" \u2014 "),jP=a("a"),mno=o("BlenderbotTokenizer"),gno=o(" or "),DP=a("a"),hno=o("BlenderbotTokenizerFast"),pno=o(" (Blenderbot model)"),_no=l(),Jg=a("li"),sse=a("strong"),uno=o("blenderbot-small"),bno=o(" \u2014 "),GP=a("a"),vno=o("BlenderbotSmallTokenizer"),Fno=o(" (BlenderbotSmall model)"),Tno=l(),Yg=a("li"),lse=a("strong"),Mno=o("bloom"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("BloomTokenizerFast"),wno=o(" (BLOOM model)"),Ano=l(),Kg=a("li"),ise=a("strong"),Lno=o("byt5"),yno=o(" \u2014 "),VP=a("a"),xno=o("ByT5Tokenizer"),$no=o(" (ByT5 model)"),kno=l(),zn=a("li"),dse=a("strong"),Sno=o("camembert"),Rno=o(" \u2014 "),XP=a("a"),Pno=o("CamembertTokenizer"),Bno=o(" or "),zP=a("a"),Ino=o("CamembertTokenizerFast"),Nno=o(" (CamemBERT model)"),qno=l(),Zg=a("li"),cse=a("strong"),jno=o("canine"),Dno=o(" \u2014 "),QP=a("a"),Gno=o("CanineTokenizer"),Ono=o(" (CANINE model)"),Vno=l(),Qn=a("li"),fse=a("strong"),Xno=o("clip"),zno=o(" \u2014 "),WP=a("a"),Qno=o("CLIPTokenizer"),Wno=o(" or "),HP=a("a"),Hno=o("CLIPTokenizerFast"),Uno=o(" (CLIP model)"),Jno=l(),Wn=a("li"),mse=a("strong"),Yno=o("convbert"),Kno=o(" \u2014 "),UP=a("a"),Zno=o("ConvBertTokenizer"),eso=o(" or "),JP=a("a"),oso=o("ConvBertTokenizerFast"),rso=o(" (ConvBERT model)"),tso=l(),Hn=a("li"),gse=a("strong"),aso=o("cpm"),nso=o(" \u2014 "),YP=a("a"),sso=o("CpmTokenizer"),lso=o(" or "),KP=a("a"),iso=o("CpmTokenizerFast"),dso=o(" (CPM model)"),cso=l(),eh=a("li"),hse=a("strong"),fso=o("ctrl"),mso=o(" \u2014 "),ZP=a("a"),gso=o("CTRLTokenizer"),hso=o(" (CTRL model)"),pso=l(),Un=a("li"),pse=a("strong"),_so=o("data2vec-text"),uso=o(" \u2014 "),eB=a("a"),bso=o("RobertaTokenizer"),vso=o(" or "),oB=a("a"),Fso=o("RobertaTokenizerFast"),Tso=o(" (Data2VecText model)"),Mso=l(),Jn=a("li"),_se=a("strong"),Eso=o("deberta"),Cso=o(" \u2014 "),rB=a("a"),wso=o("DebertaTokenizer"),Aso=o(" or "),tB=a("a"),Lso=o("DebertaTokenizerFast"),yso=o(" (DeBERTa model)"),xso=l(),Yn=a("li"),use=a("strong"),$so=o("deberta-v2"),kso=o(" \u2014 "),aB=a("a"),Sso=o("DebertaV2Tokenizer"),Rso=o(" or "),nB=a("a"),Pso=o("DebertaV2TokenizerFast"),Bso=o(" (DeBERTa-v2 model)"),Iso=l(),Kn=a("li"),bse=a("strong"),Nso=o("distilbert"),qso=o(" \u2014 "),sB=a("a"),jso=o("DistilBertTokenizer"),Dso=o(" or "),lB=a("a"),Gso=o("DistilBertTokenizerFast"),Oso=o(" (DistilBERT model)"),Vso=l(),Zn=a("li"),vse=a("strong"),Xso=o("dpr"),zso=o(" \u2014 "),iB=a("a"),Qso=o("DPRQuestionEncoderTokenizer"),Wso=o(" or "),dB=a("a"),Hso=o("DPRQuestionEncoderTokenizerFast"),Uso=o(" (DPR model)"),Jso=l(),es=a("li"),Fse=a("strong"),Yso=o("electra"),Kso=o(" \u2014 "),cB=a("a"),Zso=o("ElectraTokenizer"),elo=o(" or "),fB=a("a"),olo=o("ElectraTokenizerFast"),rlo=o(" (ELECTRA model)"),tlo=l(),oh=a("li"),Tse=a("strong"),alo=o("flaubert"),nlo=o(" \u2014 "),mB=a("a"),slo=o("FlaubertTokenizer"),llo=o(" (FlauBERT model)"),ilo=l(),os=a("li"),Mse=a("strong"),dlo=o("fnet"),clo=o(" \u2014 "),gB=a("a"),flo=o("FNetTokenizer"),mlo=o(" or "),hB=a("a"),glo=o("FNetTokenizerFast"),hlo=o(" (FNet model)"),plo=l(),rh=a("li"),Ese=a("strong"),_lo=o("fsmt"),ulo=o(" \u2014 "),pB=a("a"),blo=o("FSMTTokenizer"),vlo=o(" (FairSeq Machine-Translation model)"),Flo=l(),rs=a("li"),Cse=a("strong"),Tlo=o("funnel"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("FunnelTokenizer"),Clo=o(" or "),uB=a("a"),wlo=o("FunnelTokenizerFast"),Alo=o(" (Funnel Transformer model)"),Llo=l(),ts=a("li"),wse=a("strong"),ylo=o("gpt2"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("GPT2Tokenizer"),klo=o(" or "),vB=a("a"),Slo=o("GPT2TokenizerFast"),Rlo=o(" (OpenAI GPT-2 model)"),Plo=l(),as=a("li"),Ase=a("strong"),Blo=o("gpt_neo"),Ilo=o(" \u2014 "),FB=a("a"),Nlo=o("GPT2Tokenizer"),qlo=o(" or "),TB=a("a"),jlo=o("GPT2TokenizerFast"),Dlo=o(" (GPT Neo model)"),Glo=l(),th=a("li"),Lse=a("strong"),Olo=o("gpt_neox"),Vlo=o(" \u2014 "),MB=a("a"),Xlo=o("GPTNeoXTokenizerFast"),zlo=o(" (GPT NeoX model)"),Qlo=l(),ns=a("li"),yse=a("strong"),Wlo=o("gptj"),Hlo=o(" \u2014 "),EB=a("a"),Ulo=o("GPT2Tokenizer"),Jlo=o(" or "),CB=a("a"),Ylo=o("GPT2TokenizerFast"),Klo=o(" (GPT-J model)"),Zlo=l(),ss=a("li"),xse=a("strong"),eio=o("groupvit"),oio=o(" \u2014 "),wB=a("a"),rio=o("CLIPTokenizer"),tio=o(" or "),AB=a("a"),aio=o("CLIPTokenizerFast"),nio=o(" (GroupViT model)"),sio=l(),ls=a("li"),$se=a("strong"),lio=o("herbert"),iio=o(" \u2014 "),LB=a("a"),dio=o("HerbertTokenizer"),cio=o(" or "),yB=a("a"),fio=o("HerbertTokenizerFast"),mio=o(" (HerBERT model)"),gio=l(),ah=a("li"),kse=a("strong"),hio=o("hubert"),pio=o(" \u2014 "),xB=a("a"),_io=o("Wav2Vec2CTCTokenizer"),uio=o(" (Hubert model)"),bio=l(),is=a("li"),Sse=a("strong"),vio=o("ibert"),Fio=o(" \u2014 "),$B=a("a"),Tio=o("RobertaTokenizer"),Mio=o(" or "),kB=a("a"),Eio=o("RobertaTokenizerFast"),Cio=o(" (I-BERT model)"),wio=l(),ds=a("li"),Rse=a("strong"),Aio=o("layoutlm"),Lio=o(" \u2014 "),SB=a("a"),yio=o("LayoutLMTokenizer"),xio=o(" or "),RB=a("a"),$io=o("LayoutLMTokenizerFast"),kio=o(" (LayoutLM model)"),Sio=l(),cs=a("li"),Pse=a("strong"),Rio=o("layoutlmv2"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("LayoutLMv2Tokenizer"),Iio=o(" or "),BB=a("a"),Nio=o("LayoutLMv2TokenizerFast"),qio=o(" (LayoutLMv2 model)"),jio=l(),fs=a("li"),Bse=a("strong"),Dio=o("layoutlmv3"),Gio=o(" \u2014 "),IB=a("a"),Oio=o("LayoutLMv3Tokenizer"),Vio=o(" or "),NB=a("a"),Xio=o("LayoutLMv3TokenizerFast"),zio=o(" (LayoutLMv3 model)"),Qio=l(),ms=a("li"),Ise=a("strong"),Wio=o("layoutxlm"),Hio=o(" \u2014 "),qB=a("a"),Uio=o("LayoutXLMTokenizer"),Jio=o(" or "),jB=a("a"),Yio=o("LayoutXLMTokenizerFast"),Kio=o(" (LayoutXLM model)"),Zio=l(),gs=a("li"),Nse=a("strong"),edo=o("led"),odo=o(" \u2014 "),DB=a("a"),rdo=o("LEDTokenizer"),tdo=o(" or "),GB=a("a"),ado=o("LEDTokenizerFast"),ndo=o(" (LED model)"),sdo=l(),hs=a("li"),qse=a("strong"),ldo=o("longformer"),ido=o(" \u2014 "),OB=a("a"),ddo=o("LongformerTokenizer"),cdo=o(" or "),VB=a("a"),fdo=o("LongformerTokenizerFast"),mdo=o(" (Longformer model)"),gdo=l(),ps=a("li"),jse=a("strong"),hdo=o("longt5"),pdo=o(" \u2014 "),XB=a("a"),_do=o("T5Tokenizer"),udo=o(" or "),zB=a("a"),bdo=o("T5TokenizerFast"),vdo=o(" (LongT5 model)"),Fdo=l(),nh=a("li"),Dse=a("strong"),Tdo=o("luke"),Mdo=o(" \u2014 "),QB=a("a"),Edo=o("LukeTokenizer"),Cdo=o(" (LUKE model)"),wdo=l(),_s=a("li"),Gse=a("strong"),Ado=o("lxmert"),Ldo=o(" \u2014 "),WB=a("a"),ydo=o("LxmertTokenizer"),xdo=o(" or "),HB=a("a"),$do=o("LxmertTokenizerFast"),kdo=o(" (LXMERT model)"),Sdo=l(),sh=a("li"),Ose=a("strong"),Rdo=o("m2m_100"),Pdo=o(" \u2014 "),UB=a("a"),Bdo=o("M2M100Tokenizer"),Ido=o(" (M2M100 model)"),Ndo=l(),lh=a("li"),Vse=a("strong"),qdo=o("marian"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("MarianTokenizer"),Gdo=o(" (Marian model)"),Odo=l(),us=a("li"),Xse=a("strong"),Vdo=o("mbart"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("MBartTokenizer"),Qdo=o(" or "),KB=a("a"),Wdo=o("MBartTokenizerFast"),Hdo=o(" (mBART model)"),Udo=l(),bs=a("li"),zse=a("strong"),Jdo=o("mbart50"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("MBart50Tokenizer"),Zdo=o(" or "),eI=a("a"),eco=o("MBart50TokenizerFast"),oco=o(" (mBART-50 model)"),rco=l(),vs=a("li"),Qse=a("strong"),tco=o("megatron-bert"),aco=o(" \u2014 "),oI=a("a"),nco=o("BertTokenizer"),sco=o(" or "),rI=a("a"),lco=o("BertTokenizerFast"),ico=o(" (Megatron-BERT model)"),dco=l(),ih=a("li"),Wse=a("strong"),cco=o("mluke"),fco=o(" \u2014 "),tI=a("a"),mco=o("MLukeTokenizer"),gco=o(" (mLUKE model)"),hco=l(),Fs=a("li"),Hse=a("strong"),pco=o("mobilebert"),_co=o(" \u2014 "),aI=a("a"),uco=o("MobileBertTokenizer"),bco=o(" or "),nI=a("a"),vco=o("MobileBertTokenizerFast"),Fco=o(" (MobileBERT model)"),Tco=l(),Ts=a("li"),Use=a("strong"),Mco=o("mpnet"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("MPNetTokenizer"),wco=o(" or "),lI=a("a"),Aco=o("MPNetTokenizerFast"),Lco=o(" (MPNet model)"),yco=l(),Ms=a("li"),Jse=a("strong"),xco=o("mt5"),$co=o(" \u2014 "),iI=a("a"),kco=o("MT5Tokenizer"),Sco=o(" or "),dI=a("a"),Rco=o("MT5TokenizerFast"),Pco=o(" (MT5 model)"),Bco=l(),Es=a("li"),Yse=a("strong"),Ico=o("nezha"),Nco=o(" \u2014 "),cI=a("a"),qco=o("BertTokenizer"),jco=o(" or "),fI=a("a"),Dco=o("BertTokenizerFast"),Gco=o(" (Nezha model)"),Oco=l(),Cs=a("li"),Kse=a("strong"),Vco=o("nystromformer"),Xco=o(" \u2014 "),mI=a("a"),zco=o("AlbertTokenizer"),Qco=o(" or "),gI=a("a"),Wco=o("AlbertTokenizerFast"),Hco=o(" (Nystr\xF6mformer model)"),Uco=l(),ws=a("li"),Zse=a("strong"),Jco=o("openai-gpt"),Yco=o(" \u2014 "),hI=a("a"),Kco=o("OpenAIGPTTokenizer"),Zco=o(" or "),pI=a("a"),efo=o("OpenAIGPTTokenizerFast"),ofo=o(" (OpenAI GPT model)"),rfo=l(),dh=a("li"),ele=a("strong"),tfo=o("opt"),afo=o(" \u2014 "),_I=a("a"),nfo=o("GPT2Tokenizer"),sfo=o(" (OPT model)"),lfo=l(),As=a("li"),ole=a("strong"),ifo=o("pegasus"),dfo=o(" \u2014 "),uI=a("a"),cfo=o("PegasusTokenizer"),ffo=o(" or "),bI=a("a"),mfo=o("PegasusTokenizerFast"),gfo=o(" (Pegasus model)"),hfo=l(),ch=a("li"),rle=a("strong"),pfo=o("perceiver"),_fo=o(" \u2014 "),vI=a("a"),ufo=o("PerceiverTokenizer"),bfo=o(" (Perceiver model)"),vfo=l(),fh=a("li"),tle=a("strong"),Ffo=o("phobert"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("PhobertTokenizer"),Efo=o(" (PhoBERT model)"),Cfo=l(),mh=a("li"),ale=a("strong"),wfo=o("plbart"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("PLBartTokenizer"),yfo=o(" (PLBart model)"),xfo=l(),gh=a("li"),nle=a("strong"),$fo=o("prophetnet"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("ProphetNetTokenizer"),Rfo=o(" (ProphetNet model)"),Pfo=l(),Ls=a("li"),sle=a("strong"),Bfo=o("qdqbert"),Ifo=o(" \u2014 "),EI=a("a"),Nfo=o("BertTokenizer"),qfo=o(" or "),CI=a("a"),jfo=o("BertTokenizerFast"),Dfo=o(" (QDQBert model)"),Gfo=l(),hh=a("li"),lle=a("strong"),Ofo=o("rag"),Vfo=o(" \u2014 "),wI=a("a"),Xfo=o("RagTokenizer"),zfo=o(" (RAG model)"),Qfo=l(),ys=a("li"),ile=a("strong"),Wfo=o("realm"),Hfo=o(" \u2014 "),AI=a("a"),Ufo=o("RealmTokenizer"),Jfo=o(" or "),LI=a("a"),Yfo=o("RealmTokenizerFast"),Kfo=o(" (REALM model)"),Zfo=l(),xs=a("li"),dle=a("strong"),emo=o("reformer"),omo=o(" \u2014 "),yI=a("a"),rmo=o("ReformerTokenizer"),tmo=o(" or "),xI=a("a"),amo=o("ReformerTokenizerFast"),nmo=o(" (Reformer model)"),smo=l(),$s=a("li"),cle=a("strong"),lmo=o("rembert"),imo=o(" \u2014 "),$I=a("a"),dmo=o("RemBertTokenizer"),cmo=o(" or "),kI=a("a"),fmo=o("RemBertTokenizerFast"),mmo=o(" (RemBERT model)"),gmo=l(),ks=a("li"),fle=a("strong"),hmo=o("retribert"),pmo=o(" \u2014 "),SI=a("a"),_mo=o("RetriBertTokenizer"),umo=o(" or "),RI=a("a"),bmo=o("RetriBertTokenizerFast"),vmo=o(" (RetriBERT model)"),Fmo=l(),Ss=a("li"),mle=a("strong"),Tmo=o("roberta"),Mmo=o(" \u2014 "),PI=a("a"),Emo=o("RobertaTokenizer"),Cmo=o(" or "),BI=a("a"),wmo=o("RobertaTokenizerFast"),Amo=o(" (RoBERTa model)"),Lmo=l(),Rs=a("li"),gle=a("strong"),ymo=o("roformer"),xmo=o(" \u2014 "),II=a("a"),$mo=o("RoFormerTokenizer"),kmo=o(" or "),NI=a("a"),Smo=o("RoFormerTokenizerFast"),Rmo=o(" (RoFormer model)"),Pmo=l(),ph=a("li"),hle=a("strong"),Bmo=o("speech_to_text"),Imo=o(" \u2014 "),qI=a("a"),Nmo=o("Speech2TextTokenizer"),qmo=o(" (Speech2Text model)"),jmo=l(),_h=a("li"),ple=a("strong"),Dmo=o("speech_to_text_2"),Gmo=o(" \u2014 "),jI=a("a"),Omo=o("Speech2Text2Tokenizer"),Vmo=o(" (Speech2Text2 model)"),Xmo=l(),Ps=a("li"),_le=a("strong"),zmo=o("splinter"),Qmo=o(" \u2014 "),DI=a("a"),Wmo=o("SplinterTokenizer"),Hmo=o(" or "),GI=a("a"),Umo=o("SplinterTokenizerFast"),Jmo=o(" (Splinter model)"),Ymo=l(),Bs=a("li"),ule=a("strong"),Kmo=o("squeezebert"),Zmo=o(" \u2014 "),OI=a("a"),ego=o("SqueezeBertTokenizer"),ogo=o(" or "),VI=a("a"),rgo=o("SqueezeBertTokenizerFast"),tgo=o(" (SqueezeBERT model)"),ago=l(),Is=a("li"),ble=a("strong"),ngo=o("t5"),sgo=o(" \u2014 "),XI=a("a"),lgo=o("T5Tokenizer"),igo=o(" or "),zI=a("a"),dgo=o("T5TokenizerFast"),cgo=o(" (T5 model)"),fgo=l(),uh=a("li"),vle=a("strong"),mgo=o("tapas"),ggo=o(" \u2014 "),QI=a("a"),hgo=o("TapasTokenizer"),pgo=o(" (TAPAS model)"),_go=l(),bh=a("li"),Fle=a("strong"),ugo=o("tapex"),bgo=o(" \u2014 "),WI=a("a"),vgo=o("TapexTokenizer"),Fgo=o(" (TAPEX model)"),Tgo=l(),vh=a("li"),Tle=a("strong"),Mgo=o("transfo-xl"),Ego=o(" \u2014 "),HI=a("a"),Cgo=o("TransfoXLTokenizer"),wgo=o(" (Transformer-XL model)"),Ago=l(),Ns=a("li"),Mle=a("strong"),Lgo=o("vilt"),ygo=o(" \u2014 "),UI=a("a"),xgo=o("BertTokenizer"),$go=o(" or "),JI=a("a"),kgo=o("BertTokenizerFast"),Sgo=o(" (ViLT model)"),Rgo=l(),qs=a("li"),Ele=a("strong"),Pgo=o("visual_bert"),Bgo=o(" \u2014 "),YI=a("a"),Igo=o("BertTokenizer"),Ngo=o(" or "),KI=a("a"),qgo=o("BertTokenizerFast"),jgo=o(" (VisualBERT model)"),Dgo=l(),Fh=a("li"),Cle=a("strong"),Ggo=o("wav2vec2"),Ogo=o(" \u2014 "),ZI=a("a"),Vgo=o("Wav2Vec2CTCTokenizer"),Xgo=o(" (Wav2Vec2 model)"),zgo=l(),Th=a("li"),wle=a("strong"),Qgo=o("wav2vec2-conformer"),Wgo=o(" \u2014 "),eN=a("a"),Hgo=o("Wav2Vec2CTCTokenizer"),Ugo=o(" (Wav2Vec2-Conformer model)"),Jgo=l(),Mh=a("li"),Ale=a("strong"),Ygo=o("wav2vec2_phoneme"),Kgo=o(" \u2014 "),oN=a("a"),Zgo=o("Wav2Vec2PhonemeCTCTokenizer"),eho=o(" (Wav2Vec2Phoneme model)"),oho=l(),js=a("li"),Lle=a("strong"),rho=o("xglm"),tho=o(" \u2014 "),rN=a("a"),aho=o("XGLMTokenizer"),nho=o(" or "),tN=a("a"),sho=o("XGLMTokenizerFast"),lho=o(" (XGLM model)"),iho=l(),Eh=a("li"),yle=a("strong"),dho=o("xlm"),cho=o(" \u2014 "),aN=a("a"),fho=o("XLMTokenizer"),mho=o(" (XLM model)"),gho=l(),Ch=a("li"),xle=a("strong"),hho=o("xlm-prophetnet"),pho=o(" \u2014 "),nN=a("a"),_ho=o("XLMProphetNetTokenizer"),uho=o(" (XLM-ProphetNet model)"),bho=l(),Ds=a("li"),$le=a("strong"),vho=o("xlm-roberta"),Fho=o(" \u2014 "),sN=a("a"),Tho=o("XLMRobertaTokenizer"),Mho=o(" or "),lN=a("a"),Eho=o("XLMRobertaTokenizerFast"),Cho=o(" (XLM-RoBERTa model)"),who=l(),Gs=a("li"),kle=a("strong"),Aho=o("xlm-roberta-xl"),Lho=o(" \u2014 "),iN=a("a"),yho=o("RobertaTokenizer"),xho=o(" or "),dN=a("a"),$ho=o("RobertaTokenizerFast"),kho=o(" (XLM-RoBERTa-XL model)"),Sho=l(),Os=a("li"),Sle=a("strong"),Rho=o("xlnet"),Pho=o(" \u2014 "),cN=a("a"),Bho=o("XLNetTokenizer"),Iho=o(" or "),fN=a("a"),Nho=o("XLNetTokenizerFast"),qho=o(" (XLNet model)"),jho=l(),Vs=a("li"),Rle=a("strong"),Dho=o("yoso"),Gho=o(" \u2014 "),mN=a("a"),Oho=o("AlbertTokenizer"),Vho=o(" or "),gN=a("a"),Xho=o("AlbertTokenizerFast"),zho=o(" (YOSO model)"),Qho=l(),F(wh.$$.fragment),Who=l(),Ah=a("div"),F(WL.$$.fragment),Hho=l(),Ple=a("p"),Uho=o("Register a new tokenizer in this mapping."),pOe=l(),Ri=a("h2"),Lh=a("a"),Ble=a("span"),F(HL.$$.fragment),Jho=l(),Ile=a("span"),Yho=o("AutoFeatureExtractor"),_Oe=l(),Lo=a("div"),F(UL.$$.fragment),Kho=l(),JL=a("p"),Zho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hN=a("a"),epo=o("AutoFeatureExtractor.from_pretrained()"),opo=o(" class method."),rpo=l(),YL=a("p"),tpo=o("This class cannot be instantiated directly using "),Nle=a("code"),apo=o("__init__()"),npo=o(" (throws an error)."),spo=l(),He=a("div"),F(KL.$$.fragment),lpo=l(),qle=a("p"),ipo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dpo=l(),Sa=a("p"),cpo=o("The feature extractor class to instantiate is selected based on the "),jle=a("code"),fpo=o("model_type"),mpo=o(` property of the config object
(either passed as an argument or loaded from `),Dle=a("code"),gpo=o("pretrained_model_name_or_path"),hpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gle=a("code"),ppo=o("pretrained_model_name_or_path"),_po=o(":"),upo=l(),Y=a("ul"),yh=a("li"),Ole=a("strong"),bpo=o("beit"),vpo=o(" \u2014 "),pN=a("a"),Fpo=o("BeitFeatureExtractor"),Tpo=o(" (BEiT model)"),Mpo=l(),xh=a("li"),Vle=a("strong"),Epo=o("clip"),Cpo=o(" \u2014 "),_N=a("a"),wpo=o("CLIPFeatureExtractor"),Apo=o(" (CLIP model)"),Lpo=l(),$h=a("li"),Xle=a("strong"),ypo=o("convnext"),xpo=o(" \u2014 "),uN=a("a"),$po=o("ConvNextFeatureExtractor"),kpo=o(" (ConvNeXT model)"),Spo=l(),kh=a("li"),zle=a("strong"),Rpo=o("cvt"),Ppo=o(" \u2014 "),bN=a("a"),Bpo=o("ConvNextFeatureExtractor"),Ipo=o(" (CvT model)"),Npo=l(),Sh=a("li"),Qle=a("strong"),qpo=o("data2vec-audio"),jpo=o(" \u2014 "),vN=a("a"),Dpo=o("Wav2Vec2FeatureExtractor"),Gpo=o(" (Data2VecAudio model)"),Opo=l(),Rh=a("li"),Wle=a("strong"),Vpo=o("data2vec-vision"),Xpo=o(" \u2014 "),FN=a("a"),zpo=o("BeitFeatureExtractor"),Qpo=o(" (Data2VecVision model)"),Wpo=l(),Ph=a("li"),Hle=a("strong"),Hpo=o("deit"),Upo=o(" \u2014 "),TN=a("a"),Jpo=o("DeiTFeatureExtractor"),Ypo=o(" (DeiT model)"),Kpo=l(),Bh=a("li"),Ule=a("strong"),Zpo=o("detr"),e_o=o(" \u2014 "),MN=a("a"),o_o=o("DetrFeatureExtractor"),r_o=o(" (DETR model)"),t_o=l(),Ih=a("li"),Jle=a("strong"),a_o=o("dpt"),n_o=o(" \u2014 "),EN=a("a"),s_o=o("DPTFeatureExtractor"),l_o=o(" (DPT model)"),i_o=l(),Nh=a("li"),Yle=a("strong"),d_o=o("flava"),c_o=o(" \u2014 "),CN=a("a"),f_o=o("FlavaFeatureExtractor"),m_o=o(" (FLAVA model)"),g_o=l(),qh=a("li"),Kle=a("strong"),h_o=o("glpn"),p_o=o(" \u2014 "),wN=a("a"),__o=o("GLPNFeatureExtractor"),u_o=o(" (GLPN model)"),b_o=l(),jh=a("li"),Zle=a("strong"),v_o=o("groupvit"),F_o=o(" \u2014 "),AN=a("a"),T_o=o("CLIPFeatureExtractor"),M_o=o(" (GroupViT model)"),E_o=l(),Dh=a("li"),eie=a("strong"),C_o=o("hubert"),w_o=o(" \u2014 "),LN=a("a"),A_o=o("Wav2Vec2FeatureExtractor"),L_o=o(" (Hubert model)"),y_o=l(),Gh=a("li"),oie=a("strong"),x_o=o("imagegpt"),$_o=o(" \u2014 "),yN=a("a"),k_o=o("ImageGPTFeatureExtractor"),S_o=o(" (ImageGPT model)"),R_o=l(),Oh=a("li"),rie=a("strong"),P_o=o("layoutlmv2"),B_o=o(" \u2014 "),xN=a("a"),I_o=o("LayoutLMv2FeatureExtractor"),N_o=o(" (LayoutLMv2 model)"),q_o=l(),Vh=a("li"),tie=a("strong"),j_o=o("layoutlmv3"),D_o=o(" \u2014 "),$N=a("a"),G_o=o("LayoutLMv3FeatureExtractor"),O_o=o(" (LayoutLMv3 model)"),V_o=l(),Xh=a("li"),aie=a("strong"),X_o=o("levit"),z_o=o(" \u2014 "),kN=a("a"),Q_o=o("LevitFeatureExtractor"),W_o=o(" (LeViT model)"),H_o=l(),zh=a("li"),nie=a("strong"),U_o=o("maskformer"),J_o=o(" \u2014 "),SN=a("a"),Y_o=o("MaskFormerFeatureExtractor"),K_o=o(" (MaskFormer model)"),Z_o=l(),Qh=a("li"),sie=a("strong"),euo=o("mctct"),ouo=o(" \u2014 "),RN=a("a"),ruo=o("MCTCTFeatureExtractor"),tuo=o(" (M-CTC-T model)"),auo=l(),Wh=a("li"),lie=a("strong"),nuo=o("perceiver"),suo=o(" \u2014 "),PN=a("a"),luo=o("PerceiverFeatureExtractor"),iuo=o(" (Perceiver model)"),duo=l(),Hh=a("li"),iie=a("strong"),cuo=o("poolformer"),fuo=o(" \u2014 "),BN=a("a"),muo=o("PoolFormerFeatureExtractor"),guo=o(" (PoolFormer model)"),huo=l(),Uh=a("li"),die=a("strong"),puo=o("regnet"),_uo=o(" \u2014 "),IN=a("a"),uuo=o("ConvNextFeatureExtractor"),buo=o(" (RegNet model)"),vuo=l(),Jh=a("li"),cie=a("strong"),Fuo=o("resnet"),Tuo=o(" \u2014 "),NN=a("a"),Muo=o("ConvNextFeatureExtractor"),Euo=o(" (ResNet model)"),Cuo=l(),Yh=a("li"),fie=a("strong"),wuo=o("segformer"),Auo=o(" \u2014 "),qN=a("a"),Luo=o("SegformerFeatureExtractor"),yuo=o(" (SegFormer model)"),xuo=l(),Kh=a("li"),mie=a("strong"),$uo=o("speech_to_text"),kuo=o(" \u2014 "),jN=a("a"),Suo=o("Speech2TextFeatureExtractor"),Ruo=o(" (Speech2Text model)"),Puo=l(),Zh=a("li"),gie=a("strong"),Buo=o("swin"),Iuo=o(" \u2014 "),DN=a("a"),Nuo=o("ViTFeatureExtractor"),quo=o(" (Swin Transformer model)"),juo=l(),ep=a("li"),hie=a("strong"),Duo=o("van"),Guo=o(" \u2014 "),GN=a("a"),Ouo=o("ConvNextFeatureExtractor"),Vuo=o(" (VAN model)"),Xuo=l(),op=a("li"),pie=a("strong"),zuo=o("vilt"),Quo=o(" \u2014 "),ON=a("a"),Wuo=o("ViltFeatureExtractor"),Huo=o(" (ViLT model)"),Uuo=l(),rp=a("li"),_ie=a("strong"),Juo=o("vit"),Yuo=o(" \u2014 "),VN=a("a"),Kuo=o("ViTFeatureExtractor"),Zuo=o(" (ViT model)"),e1o=l(),tp=a("li"),uie=a("strong"),o1o=o("vit_mae"),r1o=o(" \u2014 "),XN=a("a"),t1o=o("ViTFeatureExtractor"),a1o=o(" (ViTMAE model)"),n1o=l(),ap=a("li"),bie=a("strong"),s1o=o("wav2vec2"),l1o=o(" \u2014 "),zN=a("a"),i1o=o("Wav2Vec2FeatureExtractor"),d1o=o(" (Wav2Vec2 model)"),c1o=l(),np=a("li"),vie=a("strong"),f1o=o("wav2vec2-conformer"),m1o=o(" \u2014 "),QN=a("a"),g1o=o("Wav2Vec2FeatureExtractor"),h1o=o(" (Wav2Vec2-Conformer model)"),p1o=l(),sp=a("li"),Fie=a("strong"),_1o=o("yolos"),u1o=o(" \u2014 "),WN=a("a"),b1o=o("YolosFeatureExtractor"),v1o=o(" (YOLOS model)"),F1o=l(),F(lp.$$.fragment),T1o=l(),F(ip.$$.fragment),M1o=l(),dp=a("div"),F(ZL.$$.fragment),E1o=l(),Tie=a("p"),C1o=o("Register a new feature extractor for this class."),uOe=l(),Pi=a("h2"),cp=a("a"),Mie=a("span"),F(ey.$$.fragment),w1o=l(),Eie=a("span"),A1o=o("AutoProcessor"),bOe=l(),yo=a("div"),F(oy.$$.fragment),L1o=l(),ry=a("p"),y1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HN=a("a"),x1o=o("AutoProcessor.from_pretrained()"),$1o=o(" class method."),k1o=l(),ty=a("p"),S1o=o("This class cannot be instantiated directly using "),Cie=a("code"),R1o=o("__init__()"),P1o=o(" (throws an error)."),B1o=l(),Ue=a("div"),F(ay.$$.fragment),I1o=l(),wie=a("p"),N1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),q1o=l(),Bi=a("p"),j1o=o("The processor class to instantiate is selected based on the "),Aie=a("code"),D1o=o("model_type"),G1o=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),O1o=o("pretrained_model_name_or_path"),V1o=o(" if possible):"),X1o=l(),he=a("ul"),fp=a("li"),yie=a("strong"),z1o=o("clip"),Q1o=o(" \u2014 "),UN=a("a"),W1o=o("CLIPProcessor"),H1o=o(" (CLIP model)"),U1o=l(),mp=a("li"),xie=a("strong"),J1o=o("flava"),Y1o=o(" \u2014 "),$ie=a("code"),K1o=o("FLAVAProcessor"),Z1o=o(" (FLAVA model)"),e3o=l(),gp=a("li"),kie=a("strong"),o3o=o("groupvit"),r3o=o(" \u2014 "),JN=a("a"),t3o=o("CLIPProcessor"),a3o=o(" (GroupViT model)"),n3o=l(),hp=a("li"),Sie=a("strong"),s3o=o("layoutlmv2"),l3o=o(" \u2014 "),YN=a("a"),i3o=o("LayoutLMv2Processor"),d3o=o(" (LayoutLMv2 model)"),c3o=l(),pp=a("li"),Rie=a("strong"),f3o=o("layoutlmv3"),m3o=o(" \u2014 "),KN=a("a"),g3o=o("LayoutLMv3Processor"),h3o=o(" (LayoutLMv3 model)"),p3o=l(),_p=a("li"),Pie=a("strong"),_3o=o("layoutxlm"),u3o=o(" \u2014 "),ZN=a("a"),b3o=o("LayoutXLMProcessor"),v3o=o(" (LayoutXLM model)"),F3o=l(),up=a("li"),Bie=a("strong"),T3o=o("sew"),M3o=o(" \u2014 "),eq=a("a"),E3o=o("Wav2Vec2Processor"),C3o=o(" (SEW model)"),w3o=l(),bp=a("li"),Iie=a("strong"),A3o=o("sew-d"),L3o=o(" \u2014 "),oq=a("a"),y3o=o("Wav2Vec2Processor"),x3o=o(" (SEW-D model)"),$3o=l(),vp=a("li"),Nie=a("strong"),k3o=o("speech_to_text"),S3o=o(" \u2014 "),rq=a("a"),R3o=o("Speech2TextProcessor"),P3o=o(" (Speech2Text model)"),B3o=l(),Fp=a("li"),qie=a("strong"),I3o=o("speech_to_text_2"),N3o=o(" \u2014 "),tq=a("a"),q3o=o("Speech2Text2Processor"),j3o=o(" (Speech2Text2 model)"),D3o=l(),Tp=a("li"),jie=a("strong"),G3o=o("trocr"),O3o=o(" \u2014 "),aq=a("a"),V3o=o("TrOCRProcessor"),X3o=o(" (TrOCR model)"),z3o=l(),Mp=a("li"),Die=a("strong"),Q3o=o("unispeech"),W3o=o(" \u2014 "),nq=a("a"),H3o=o("Wav2Vec2Processor"),U3o=o(" (UniSpeech model)"),J3o=l(),Ep=a("li"),Gie=a("strong"),Y3o=o("unispeech-sat"),K3o=o(" \u2014 "),sq=a("a"),Z3o=o("Wav2Vec2Processor"),e2o=o(" (UniSpeechSat model)"),o2o=l(),Cp=a("li"),Oie=a("strong"),r2o=o("vilt"),t2o=o(" \u2014 "),lq=a("a"),a2o=o("ViltProcessor"),n2o=o(" (ViLT model)"),s2o=l(),wp=a("li"),Vie=a("strong"),l2o=o("vision-text-dual-encoder"),i2o=o(" \u2014 "),iq=a("a"),d2o=o("VisionTextDualEncoderProcessor"),c2o=o(" (VisionTextDualEncoder model)"),f2o=l(),Ap=a("li"),Xie=a("strong"),m2o=o("wav2vec2"),g2o=o(" \u2014 "),dq=a("a"),h2o=o("Wav2Vec2Processor"),p2o=o(" (Wav2Vec2 model)"),_2o=l(),Lp=a("li"),zie=a("strong"),u2o=o("wav2vec2-conformer"),b2o=o(" \u2014 "),cq=a("a"),v2o=o("Wav2Vec2Processor"),F2o=o(" (Wav2Vec2-Conformer model)"),T2o=l(),yp=a("li"),Qie=a("strong"),M2o=o("wavlm"),E2o=o(" \u2014 "),fq=a("a"),C2o=o("Wav2Vec2Processor"),w2o=o(" (WavLM model)"),A2o=l(),F(xp.$$.fragment),L2o=l(),F($p.$$.fragment),y2o=l(),kp=a("div"),F(ny.$$.fragment),x2o=l(),Wie=a("p"),$2o=o("Register a new processor for this class."),vOe=l(),Ii=a("h2"),Sp=a("a"),Hie=a("span"),F(sy.$$.fragment),k2o=l(),Uie=a("span"),S2o=o("AutoModel"),FOe=l(),xo=a("div"),F(ly.$$.fragment),R2o=l(),Ni=a("p"),P2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mq=a("a"),B2o=o("from_pretrained()"),I2o=o(" class method or the "),gq=a("a"),N2o=o("from_config()"),q2o=o(` class
method.`),j2o=l(),iy=a("p"),D2o=o("This class cannot be instantiated directly using "),Jie=a("code"),G2o=o("__init__()"),O2o=o(" (throws an error)."),V2o=l(),nt=a("div"),F(dy.$$.fragment),X2o=l(),Yie=a("p"),z2o=o("Instantiates one of the base model classes of the library from a configuration."),Q2o=l(),qi=a("p"),W2o=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),H2o=o("not"),U2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=a("a"),J2o=o("from_pretrained()"),Y2o=o(" to load the model weights."),K2o=l(),F(Rp.$$.fragment),Z2o=l(),Je=a("div"),F(cy.$$.fragment),ebo=l(),Zie=a("p"),obo=o("Instantiate one of the base model classes of the library from a pretrained model."),rbo=l(),Ra=a("p"),tbo=o("The model class to instantiate is selected based on the "),ede=a("code"),abo=o("model_type"),nbo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),sbo=o("pretrained_model_name_or_path"),lbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),ibo=o("pretrained_model_name_or_path"),dbo=o(":"),cbo=l(),y=a("ul"),Pp=a("li"),tde=a("strong"),fbo=o("albert"),mbo=o(" \u2014 "),pq=a("a"),gbo=o("AlbertModel"),hbo=o(" (ALBERT model)"),pbo=l(),Bp=a("li"),ade=a("strong"),_bo=o("bart"),ubo=o(" \u2014 "),_q=a("a"),bbo=o("BartModel"),vbo=o(" (BART model)"),Fbo=l(),Ip=a("li"),nde=a("strong"),Tbo=o("beit"),Mbo=o(" \u2014 "),uq=a("a"),Ebo=o("BeitModel"),Cbo=o(" (BEiT model)"),wbo=l(),Np=a("li"),sde=a("strong"),Abo=o("bert"),Lbo=o(" \u2014 "),bq=a("a"),ybo=o("BertModel"),xbo=o(" (BERT model)"),$bo=l(),qp=a("li"),lde=a("strong"),kbo=o("bert-generation"),Sbo=o(" \u2014 "),vq=a("a"),Rbo=o("BertGenerationEncoder"),Pbo=o(" (Bert Generation model)"),Bbo=l(),jp=a("li"),ide=a("strong"),Ibo=o("big_bird"),Nbo=o(" \u2014 "),Fq=a("a"),qbo=o("BigBirdModel"),jbo=o(" (BigBird model)"),Dbo=l(),Dp=a("li"),dde=a("strong"),Gbo=o("bigbird_pegasus"),Obo=o(" \u2014 "),Tq=a("a"),Vbo=o("BigBirdPegasusModel"),Xbo=o(" (BigBird-Pegasus model)"),zbo=l(),Gp=a("li"),cde=a("strong"),Qbo=o("blenderbot"),Wbo=o(" \u2014 "),Mq=a("a"),Hbo=o("BlenderbotModel"),Ubo=o(" (Blenderbot model)"),Jbo=l(),Op=a("li"),fde=a("strong"),Ybo=o("blenderbot-small"),Kbo=o(" \u2014 "),Eq=a("a"),Zbo=o("BlenderbotSmallModel"),evo=o(" (BlenderbotSmall model)"),ovo=l(),Vp=a("li"),mde=a("strong"),rvo=o("bloom"),tvo=o(" \u2014 "),Cq=a("a"),avo=o("BloomModel"),nvo=o(" (BLOOM model)"),svo=l(),Xp=a("li"),gde=a("strong"),lvo=o("camembert"),ivo=o(" \u2014 "),wq=a("a"),dvo=o("CamembertModel"),cvo=o(" (CamemBERT model)"),fvo=l(),zp=a("li"),hde=a("strong"),mvo=o("canine"),gvo=o(" \u2014 "),Aq=a("a"),hvo=o("CanineModel"),pvo=o(" (CANINE model)"),_vo=l(),Qp=a("li"),pde=a("strong"),uvo=o("clip"),bvo=o(" \u2014 "),Lq=a("a"),vvo=o("CLIPModel"),Fvo=o(" (CLIP model)"),Tvo=l(),Wp=a("li"),_de=a("strong"),Mvo=o("convbert"),Evo=o(" \u2014 "),yq=a("a"),Cvo=o("ConvBertModel"),wvo=o(" (ConvBERT model)"),Avo=l(),Hp=a("li"),ude=a("strong"),Lvo=o("convnext"),yvo=o(" \u2014 "),xq=a("a"),xvo=o("ConvNextModel"),$vo=o(" (ConvNeXT model)"),kvo=l(),Up=a("li"),bde=a("strong"),Svo=o("ctrl"),Rvo=o(" \u2014 "),$q=a("a"),Pvo=o("CTRLModel"),Bvo=o(" (CTRL model)"),Ivo=l(),Jp=a("li"),vde=a("strong"),Nvo=o("cvt"),qvo=o(" \u2014 "),kq=a("a"),jvo=o("CvtModel"),Dvo=o(" (CvT model)"),Gvo=l(),Yp=a("li"),Fde=a("strong"),Ovo=o("data2vec-audio"),Vvo=o(" \u2014 "),Sq=a("a"),Xvo=o("Data2VecAudioModel"),zvo=o(" (Data2VecAudio model)"),Qvo=l(),Kp=a("li"),Tde=a("strong"),Wvo=o("data2vec-text"),Hvo=o(" \u2014 "),Rq=a("a"),Uvo=o("Data2VecTextModel"),Jvo=o(" (Data2VecText model)"),Yvo=l(),Zp=a("li"),Mde=a("strong"),Kvo=o("data2vec-vision"),Zvo=o(" \u2014 "),Pq=a("a"),eFo=o("Data2VecVisionModel"),oFo=o(" (Data2VecVision model)"),rFo=l(),e_=a("li"),Ede=a("strong"),tFo=o("deberta"),aFo=o(" \u2014 "),Bq=a("a"),nFo=o("DebertaModel"),sFo=o(" (DeBERTa model)"),lFo=l(),o_=a("li"),Cde=a("strong"),iFo=o("deberta-v2"),dFo=o(" \u2014 "),Iq=a("a"),cFo=o("DebertaV2Model"),fFo=o(" (DeBERTa-v2 model)"),mFo=l(),r_=a("li"),wde=a("strong"),gFo=o("decision_transformer"),hFo=o(" \u2014 "),Nq=a("a"),pFo=o("DecisionTransformerModel"),_Fo=o(" (Decision Transformer model)"),uFo=l(),t_=a("li"),Ade=a("strong"),bFo=o("deit"),vFo=o(" \u2014 "),qq=a("a"),FFo=o("DeiTModel"),TFo=o(" (DeiT model)"),MFo=l(),a_=a("li"),Lde=a("strong"),EFo=o("detr"),CFo=o(" \u2014 "),jq=a("a"),wFo=o("DetrModel"),AFo=o(" (DETR model)"),LFo=l(),n_=a("li"),yde=a("strong"),yFo=o("distilbert"),xFo=o(" \u2014 "),Dq=a("a"),$Fo=o("DistilBertModel"),kFo=o(" (DistilBERT model)"),SFo=l(),s_=a("li"),xde=a("strong"),RFo=o("dpr"),PFo=o(" \u2014 "),Gq=a("a"),BFo=o("DPRQuestionEncoder"),IFo=o(" (DPR model)"),NFo=l(),l_=a("li"),$de=a("strong"),qFo=o("dpt"),jFo=o(" \u2014 "),Oq=a("a"),DFo=o("DPTModel"),GFo=o(" (DPT model)"),OFo=l(),i_=a("li"),kde=a("strong"),VFo=o("electra"),XFo=o(" \u2014 "),Vq=a("a"),zFo=o("ElectraModel"),QFo=o(" (ELECTRA model)"),WFo=l(),d_=a("li"),Sde=a("strong"),HFo=o("flaubert"),UFo=o(" \u2014 "),Xq=a("a"),JFo=o("FlaubertModel"),YFo=o(" (FlauBERT model)"),KFo=l(),c_=a("li"),Rde=a("strong"),ZFo=o("flava"),eTo=o(" \u2014 "),zq=a("a"),oTo=o("FlavaModel"),rTo=o(" (FLAVA model)"),tTo=l(),f_=a("li"),Pde=a("strong"),aTo=o("fnet"),nTo=o(" \u2014 "),Qq=a("a"),sTo=o("FNetModel"),lTo=o(" (FNet model)"),iTo=l(),m_=a("li"),Bde=a("strong"),dTo=o("fsmt"),cTo=o(" \u2014 "),Wq=a("a"),fTo=o("FSMTModel"),mTo=o(" (FairSeq Machine-Translation model)"),gTo=l(),Xs=a("li"),Ide=a("strong"),hTo=o("funnel"),pTo=o(" \u2014 "),Hq=a("a"),_To=o("FunnelModel"),uTo=o(" or "),Uq=a("a"),bTo=o("FunnelBaseModel"),vTo=o(" (Funnel Transformer model)"),FTo=l(),g_=a("li"),Nde=a("strong"),TTo=o("glpn"),MTo=o(" \u2014 "),Jq=a("a"),ETo=o("GLPNModel"),CTo=o(" (GLPN model)"),wTo=l(),h_=a("li"),qde=a("strong"),ATo=o("gpt2"),LTo=o(" \u2014 "),Yq=a("a"),yTo=o("GPT2Model"),xTo=o(" (OpenAI GPT-2 model)"),$To=l(),p_=a("li"),jde=a("strong"),kTo=o("gpt_neo"),STo=o(" \u2014 "),Kq=a("a"),RTo=o("GPTNeoModel"),PTo=o(" (GPT Neo model)"),BTo=l(),__=a("li"),Dde=a("strong"),ITo=o("gpt_neox"),NTo=o(" \u2014 "),Zq=a("a"),qTo=o("GPTNeoXModel"),jTo=o(" (GPT NeoX model)"),DTo=l(),u_=a("li"),Gde=a("strong"),GTo=o("gptj"),OTo=o(" \u2014 "),ej=a("a"),VTo=o("GPTJModel"),XTo=o(" (GPT-J model)"),zTo=l(),b_=a("li"),Ode=a("strong"),QTo=o("groupvit"),WTo=o(" \u2014 "),oj=a("a"),HTo=o("GroupViTModel"),UTo=o(" (GroupViT model)"),JTo=l(),v_=a("li"),Vde=a("strong"),YTo=o("hubert"),KTo=o(" \u2014 "),rj=a("a"),ZTo=o("HubertModel"),e7o=o(" (Hubert model)"),o7o=l(),F_=a("li"),Xde=a("strong"),r7o=o("ibert"),t7o=o(" \u2014 "),tj=a("a"),a7o=o("IBertModel"),n7o=o(" (I-BERT model)"),s7o=l(),T_=a("li"),zde=a("strong"),l7o=o("imagegpt"),i7o=o(" \u2014 "),aj=a("a"),d7o=o("ImageGPTModel"),c7o=o(" (ImageGPT model)"),f7o=l(),M_=a("li"),Qde=a("strong"),m7o=o("layoutlm"),g7o=o(" \u2014 "),nj=a("a"),h7o=o("LayoutLMModel"),p7o=o(" (LayoutLM model)"),_7o=l(),E_=a("li"),Wde=a("strong"),u7o=o("layoutlmv2"),b7o=o(" \u2014 "),sj=a("a"),v7o=o("LayoutLMv2Model"),F7o=o(" (LayoutLMv2 model)"),T7o=l(),C_=a("li"),Hde=a("strong"),M7o=o("layoutlmv3"),E7o=o(" \u2014 "),lj=a("a"),C7o=o("LayoutLMv3Model"),w7o=o(" (LayoutLMv3 model)"),A7o=l(),w_=a("li"),Ude=a("strong"),L7o=o("led"),y7o=o(" \u2014 "),ij=a("a"),x7o=o("LEDModel"),$7o=o(" (LED model)"),k7o=l(),A_=a("li"),Jde=a("strong"),S7o=o("levit"),R7o=o(" \u2014 "),dj=a("a"),P7o=o("LevitModel"),B7o=o(" (LeViT model)"),I7o=l(),L_=a("li"),Yde=a("strong"),N7o=o("longformer"),q7o=o(" \u2014 "),cj=a("a"),j7o=o("LongformerModel"),D7o=o(" (Longformer model)"),G7o=l(),y_=a("li"),Kde=a("strong"),O7o=o("longt5"),V7o=o(" \u2014 "),fj=a("a"),X7o=o("LongT5Model"),z7o=o(" (LongT5 model)"),Q7o=l(),x_=a("li"),Zde=a("strong"),W7o=o("luke"),H7o=o(" \u2014 "),mj=a("a"),U7o=o("LukeModel"),J7o=o(" (LUKE model)"),Y7o=l(),$_=a("li"),ece=a("strong"),K7o=o("lxmert"),Z7o=o(" \u2014 "),gj=a("a"),eMo=o("LxmertModel"),oMo=o(" (LXMERT model)"),rMo=l(),k_=a("li"),oce=a("strong"),tMo=o("m2m_100"),aMo=o(" \u2014 "),hj=a("a"),nMo=o("M2M100Model"),sMo=o(" (M2M100 model)"),lMo=l(),S_=a("li"),rce=a("strong"),iMo=o("marian"),dMo=o(" \u2014 "),pj=a("a"),cMo=o("MarianModel"),fMo=o(" (Marian model)"),mMo=l(),R_=a("li"),tce=a("strong"),gMo=o("maskformer"),hMo=o(" \u2014 "),_j=a("a"),pMo=o("MaskFormerModel"),_Mo=o(" (MaskFormer model)"),uMo=l(),P_=a("li"),ace=a("strong"),bMo=o("mbart"),vMo=o(" \u2014 "),uj=a("a"),FMo=o("MBartModel"),TMo=o(" (mBART model)"),MMo=l(),B_=a("li"),nce=a("strong"),EMo=o("mctct"),CMo=o(" \u2014 "),bj=a("a"),wMo=o("MCTCTModel"),AMo=o(" (M-CTC-T model)"),LMo=l(),I_=a("li"),sce=a("strong"),yMo=o("megatron-bert"),xMo=o(" \u2014 "),vj=a("a"),$Mo=o("MegatronBertModel"),kMo=o(" (Megatron-BERT model)"),SMo=l(),N_=a("li"),lce=a("strong"),RMo=o("mobilebert"),PMo=o(" \u2014 "),Fj=a("a"),BMo=o("MobileBertModel"),IMo=o(" (MobileBERT model)"),NMo=l(),q_=a("li"),ice=a("strong"),qMo=o("mpnet"),jMo=o(" \u2014 "),Tj=a("a"),DMo=o("MPNetModel"),GMo=o(" (MPNet model)"),OMo=l(),j_=a("li"),dce=a("strong"),VMo=o("mt5"),XMo=o(" \u2014 "),Mj=a("a"),zMo=o("MT5Model"),QMo=o(" (MT5 model)"),WMo=l(),D_=a("li"),cce=a("strong"),HMo=o("nezha"),UMo=o(" \u2014 "),Ej=a("a"),JMo=o("NezhaModel"),YMo=o(" (Nezha model)"),KMo=l(),G_=a("li"),fce=a("strong"),ZMo=o("nystromformer"),eEo=o(" \u2014 "),Cj=a("a"),oEo=o("NystromformerModel"),rEo=o(" (Nystr\xF6mformer model)"),tEo=l(),O_=a("li"),mce=a("strong"),aEo=o("openai-gpt"),nEo=o(" \u2014 "),wj=a("a"),sEo=o("OpenAIGPTModel"),lEo=o(" (OpenAI GPT model)"),iEo=l(),V_=a("li"),gce=a("strong"),dEo=o("opt"),cEo=o(" \u2014 "),Aj=a("a"),fEo=o("OPTModel"),mEo=o(" (OPT model)"),gEo=l(),X_=a("li"),hce=a("strong"),hEo=o("pegasus"),pEo=o(" \u2014 "),Lj=a("a"),_Eo=o("PegasusModel"),uEo=o(" (Pegasus model)"),bEo=l(),z_=a("li"),pce=a("strong"),vEo=o("perceiver"),FEo=o(" \u2014 "),yj=a("a"),TEo=o("PerceiverModel"),MEo=o(" (Perceiver model)"),EEo=l(),Q_=a("li"),_ce=a("strong"),CEo=o("plbart"),wEo=o(" \u2014 "),xj=a("a"),AEo=o("PLBartModel"),LEo=o(" (PLBart model)"),yEo=l(),W_=a("li"),uce=a("strong"),xEo=o("poolformer"),$Eo=o(" \u2014 "),$j=a("a"),kEo=o("PoolFormerModel"),SEo=o(" (PoolFormer model)"),REo=l(),H_=a("li"),bce=a("strong"),PEo=o("prophetnet"),BEo=o(" \u2014 "),kj=a("a"),IEo=o("ProphetNetModel"),NEo=o(" (ProphetNet model)"),qEo=l(),U_=a("li"),vce=a("strong"),jEo=o("qdqbert"),DEo=o(" \u2014 "),Sj=a("a"),GEo=o("QDQBertModel"),OEo=o(" (QDQBert model)"),VEo=l(),J_=a("li"),Fce=a("strong"),XEo=o("reformer"),zEo=o(" \u2014 "),Rj=a("a"),QEo=o("ReformerModel"),WEo=o(" (Reformer model)"),HEo=l(),Y_=a("li"),Tce=a("strong"),UEo=o("regnet"),JEo=o(" \u2014 "),Pj=a("a"),YEo=o("RegNetModel"),KEo=o(" (RegNet model)"),ZEo=l(),K_=a("li"),Mce=a("strong"),e4o=o("rembert"),o4o=o(" \u2014 "),Bj=a("a"),r4o=o("RemBertModel"),t4o=o(" (RemBERT model)"),a4o=l(),Z_=a("li"),Ece=a("strong"),n4o=o("resnet"),s4o=o(" \u2014 "),Ij=a("a"),l4o=o("ResNetModel"),i4o=o(" (ResNet model)"),d4o=l(),eu=a("li"),Cce=a("strong"),c4o=o("retribert"),f4o=o(" \u2014 "),Nj=a("a"),m4o=o("RetriBertModel"),g4o=o(" (RetriBERT model)"),h4o=l(),ou=a("li"),wce=a("strong"),p4o=o("roberta"),_4o=o(" \u2014 "),qj=a("a"),u4o=o("RobertaModel"),b4o=o(" (RoBERTa model)"),v4o=l(),ru=a("li"),Ace=a("strong"),F4o=o("roformer"),T4o=o(" \u2014 "),jj=a("a"),M4o=o("RoFormerModel"),E4o=o(" (RoFormer model)"),C4o=l(),tu=a("li"),Lce=a("strong"),w4o=o("segformer"),A4o=o(" \u2014 "),Dj=a("a"),L4o=o("SegformerModel"),y4o=o(" (SegFormer model)"),x4o=l(),au=a("li"),yce=a("strong"),$4o=o("sew"),k4o=o(" \u2014 "),Gj=a("a"),S4o=o("SEWModel"),R4o=o(" (SEW model)"),P4o=l(),nu=a("li"),xce=a("strong"),B4o=o("sew-d"),I4o=o(" \u2014 "),Oj=a("a"),N4o=o("SEWDModel"),q4o=o(" (SEW-D model)"),j4o=l(),su=a("li"),$ce=a("strong"),D4o=o("speech_to_text"),G4o=o(" \u2014 "),Vj=a("a"),O4o=o("Speech2TextModel"),V4o=o(" (Speech2Text model)"),X4o=l(),lu=a("li"),kce=a("strong"),z4o=o("splinter"),Q4o=o(" \u2014 "),Xj=a("a"),W4o=o("SplinterModel"),H4o=o(" (Splinter model)"),U4o=l(),iu=a("li"),Sce=a("strong"),J4o=o("squeezebert"),Y4o=o(" \u2014 "),zj=a("a"),K4o=o("SqueezeBertModel"),Z4o=o(" (SqueezeBERT model)"),eCo=l(),du=a("li"),Rce=a("strong"),oCo=o("swin"),rCo=o(" \u2014 "),Qj=a("a"),tCo=o("SwinModel"),aCo=o(" (Swin Transformer model)"),nCo=l(),cu=a("li"),Pce=a("strong"),sCo=o("t5"),lCo=o(" \u2014 "),Wj=a("a"),iCo=o("T5Model"),dCo=o(" (T5 model)"),cCo=l(),fu=a("li"),Bce=a("strong"),fCo=o("tapas"),mCo=o(" \u2014 "),Hj=a("a"),gCo=o("TapasModel"),hCo=o(" (TAPAS model)"),pCo=l(),mu=a("li"),Ice=a("strong"),_Co=o("trajectory_transformer"),uCo=o(" \u2014 "),Uj=a("a"),bCo=o("TrajectoryTransformerModel"),vCo=o(" (Trajectory Transformer model)"),FCo=l(),gu=a("li"),Nce=a("strong"),TCo=o("transfo-xl"),MCo=o(" \u2014 "),Jj=a("a"),ECo=o("TransfoXLModel"),CCo=o(" (Transformer-XL model)"),wCo=l(),hu=a("li"),qce=a("strong"),ACo=o("unispeech"),LCo=o(" \u2014 "),Yj=a("a"),yCo=o("UniSpeechModel"),xCo=o(" (UniSpeech model)"),$Co=l(),pu=a("li"),jce=a("strong"),kCo=o("unispeech-sat"),SCo=o(" \u2014 "),Kj=a("a"),RCo=o("UniSpeechSatModel"),PCo=o(" (UniSpeechSat model)"),BCo=l(),_u=a("li"),Dce=a("strong"),ICo=o("van"),NCo=o(" \u2014 "),Zj=a("a"),qCo=o("VanModel"),jCo=o(" (VAN model)"),DCo=l(),uu=a("li"),Gce=a("strong"),GCo=o("vilt"),OCo=o(" \u2014 "),eD=a("a"),VCo=o("ViltModel"),XCo=o(" (ViLT model)"),zCo=l(),bu=a("li"),Oce=a("strong"),QCo=o("vision-text-dual-encoder"),WCo=o(" \u2014 "),oD=a("a"),HCo=o("VisionTextDualEncoderModel"),UCo=o(" (VisionTextDualEncoder model)"),JCo=l(),vu=a("li"),Vce=a("strong"),YCo=o("visual_bert"),KCo=o(" \u2014 "),rD=a("a"),ZCo=o("VisualBertModel"),e5o=o(" (VisualBERT model)"),o5o=l(),Fu=a("li"),Xce=a("strong"),r5o=o("vit"),t5o=o(" \u2014 "),tD=a("a"),a5o=o("ViTModel"),n5o=o(" (ViT model)"),s5o=l(),Tu=a("li"),zce=a("strong"),l5o=o("vit_mae"),i5o=o(" \u2014 "),aD=a("a"),d5o=o("ViTMAEModel"),c5o=o(" (ViTMAE model)"),f5o=l(),Mu=a("li"),Qce=a("strong"),m5o=o("wav2vec2"),g5o=o(" \u2014 "),nD=a("a"),h5o=o("Wav2Vec2Model"),p5o=o(" (Wav2Vec2 model)"),_5o=l(),Eu=a("li"),Wce=a("strong"),u5o=o("wav2vec2-conformer"),b5o=o(" \u2014 "),sD=a("a"),v5o=o("Wav2Vec2ConformerModel"),F5o=o(" (Wav2Vec2-Conformer model)"),T5o=l(),Cu=a("li"),Hce=a("strong"),M5o=o("wavlm"),E5o=o(" \u2014 "),lD=a("a"),C5o=o("WavLMModel"),w5o=o(" (WavLM model)"),A5o=l(),wu=a("li"),Uce=a("strong"),L5o=o("xglm"),y5o=o(" \u2014 "),iD=a("a"),x5o=o("XGLMModel"),$5o=o(" (XGLM model)"),k5o=l(),Au=a("li"),Jce=a("strong"),S5o=o("xlm"),R5o=o(" \u2014 "),dD=a("a"),P5o=o("XLMModel"),B5o=o(" (XLM model)"),I5o=l(),Lu=a("li"),Yce=a("strong"),N5o=o("xlm-prophetnet"),q5o=o(" \u2014 "),cD=a("a"),j5o=o("XLMProphetNetModel"),D5o=o(" (XLM-ProphetNet model)"),G5o=l(),yu=a("li"),Kce=a("strong"),O5o=o("xlm-roberta"),V5o=o(" \u2014 "),fD=a("a"),X5o=o("XLMRobertaModel"),z5o=o(" (XLM-RoBERTa model)"),Q5o=l(),xu=a("li"),Zce=a("strong"),W5o=o("xlm-roberta-xl"),H5o=o(" \u2014 "),mD=a("a"),U5o=o("XLMRobertaXLModel"),J5o=o(" (XLM-RoBERTa-XL model)"),Y5o=l(),$u=a("li"),efe=a("strong"),K5o=o("xlnet"),Z5o=o(" \u2014 "),gD=a("a"),e0o=o("XLNetModel"),o0o=o(" (XLNet model)"),r0o=l(),ku=a("li"),ofe=a("strong"),t0o=o("yolos"),a0o=o(" \u2014 "),hD=a("a"),n0o=o("YolosModel"),s0o=o(" (YOLOS model)"),l0o=l(),Su=a("li"),rfe=a("strong"),i0o=o("yoso"),d0o=o(" \u2014 "),pD=a("a"),c0o=o("YosoModel"),f0o=o(" (YOSO model)"),m0o=l(),Ru=a("p"),g0o=o("The model is set in evaluation mode by default using "),tfe=a("code"),h0o=o("model.eval()"),p0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),_0o=o("model.train()"),u0o=l(),F(Pu.$$.fragment),TOe=l(),ji=a("h2"),Bu=a("a"),nfe=a("span"),F(fy.$$.fragment),b0o=l(),sfe=a("span"),v0o=o("AutoModelForPreTraining"),MOe=l(),$o=a("div"),F(my.$$.fragment),F0o=l(),Di=a("p"),T0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_D=a("a"),M0o=o("from_pretrained()"),E0o=o(" class method or the "),uD=a("a"),C0o=o("from_config()"),w0o=o(` class
method.`),A0o=l(),gy=a("p"),L0o=o("This class cannot be instantiated directly using "),lfe=a("code"),y0o=o("__init__()"),x0o=o(" (throws an error)."),$0o=l(),st=a("div"),F(hy.$$.fragment),k0o=l(),ife=a("p"),S0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R0o=l(),Gi=a("p"),P0o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),B0o=o("not"),I0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),N0o=o("from_pretrained()"),q0o=o(" to load the model weights."),j0o=l(),F(Iu.$$.fragment),D0o=l(),Ye=a("div"),F(py.$$.fragment),G0o=l(),cfe=a("p"),O0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),V0o=l(),Pa=a("p"),X0o=o("The model class to instantiate is selected based on the "),ffe=a("code"),z0o=o("model_type"),Q0o=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),W0o=o("pretrained_model_name_or_path"),H0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),U0o=o("pretrained_model_name_or_path"),J0o=o(":"),Y0o=l(),G=a("ul"),Nu=a("li"),hfe=a("strong"),K0o=o("albert"),Z0o=o(" \u2014 "),vD=a("a"),ewo=o("AlbertForPreTraining"),owo=o(" (ALBERT model)"),rwo=l(),qu=a("li"),pfe=a("strong"),two=o("bart"),awo=o(" \u2014 "),FD=a("a"),nwo=o("BartForConditionalGeneration"),swo=o(" (BART model)"),lwo=l(),ju=a("li"),_fe=a("strong"),iwo=o("bert"),dwo=o(" \u2014 "),TD=a("a"),cwo=o("BertForPreTraining"),fwo=o(" (BERT model)"),mwo=l(),Du=a("li"),ufe=a("strong"),gwo=o("big_bird"),hwo=o(" \u2014 "),MD=a("a"),pwo=o("BigBirdForPreTraining"),_wo=o(" (BigBird model)"),uwo=l(),Gu=a("li"),bfe=a("strong"),bwo=o("bloom"),vwo=o(" \u2014 "),ED=a("a"),Fwo=o("BloomForCausalLM"),Two=o(" (BLOOM model)"),Mwo=l(),Ou=a("li"),vfe=a("strong"),Ewo=o("camembert"),Cwo=o(" \u2014 "),CD=a("a"),wwo=o("CamembertForMaskedLM"),Awo=o(" (CamemBERT model)"),Lwo=l(),Vu=a("li"),Ffe=a("strong"),ywo=o("ctrl"),xwo=o(" \u2014 "),wD=a("a"),$wo=o("CTRLLMHeadModel"),kwo=o(" (CTRL model)"),Swo=l(),Xu=a("li"),Tfe=a("strong"),Rwo=o("data2vec-text"),Pwo=o(" \u2014 "),AD=a("a"),Bwo=o("Data2VecTextForMaskedLM"),Iwo=o(" (Data2VecText model)"),Nwo=l(),zu=a("li"),Mfe=a("strong"),qwo=o("deberta"),jwo=o(" \u2014 "),LD=a("a"),Dwo=o("DebertaForMaskedLM"),Gwo=o(" (DeBERTa model)"),Owo=l(),Qu=a("li"),Efe=a("strong"),Vwo=o("deberta-v2"),Xwo=o(" \u2014 "),yD=a("a"),zwo=o("DebertaV2ForMaskedLM"),Qwo=o(" (DeBERTa-v2 model)"),Wwo=l(),Wu=a("li"),Cfe=a("strong"),Hwo=o("distilbert"),Uwo=o(" \u2014 "),xD=a("a"),Jwo=o("DistilBertForMaskedLM"),Ywo=o(" (DistilBERT model)"),Kwo=l(),Hu=a("li"),wfe=a("strong"),Zwo=o("electra"),eAo=o(" \u2014 "),$D=a("a"),oAo=o("ElectraForPreTraining"),rAo=o(" (ELECTRA model)"),tAo=l(),Uu=a("li"),Afe=a("strong"),aAo=o("flaubert"),nAo=o(" \u2014 "),kD=a("a"),sAo=o("FlaubertWithLMHeadModel"),lAo=o(" (FlauBERT model)"),iAo=l(),Ju=a("li"),Lfe=a("strong"),dAo=o("flava"),cAo=o(" \u2014 "),SD=a("a"),fAo=o("FlavaForPreTraining"),mAo=o(" (FLAVA model)"),gAo=l(),Yu=a("li"),yfe=a("strong"),hAo=o("fnet"),pAo=o(" \u2014 "),RD=a("a"),_Ao=o("FNetForPreTraining"),uAo=o(" (FNet model)"),bAo=l(),Ku=a("li"),xfe=a("strong"),vAo=o("fsmt"),FAo=o(" \u2014 "),PD=a("a"),TAo=o("FSMTForConditionalGeneration"),MAo=o(" (FairSeq Machine-Translation model)"),EAo=l(),Zu=a("li"),$fe=a("strong"),CAo=o("funnel"),wAo=o(" \u2014 "),BD=a("a"),AAo=o("FunnelForPreTraining"),LAo=o(" (Funnel Transformer model)"),yAo=l(),e1=a("li"),kfe=a("strong"),xAo=o("gpt2"),$Ao=o(" \u2014 "),ID=a("a"),kAo=o("GPT2LMHeadModel"),SAo=o(" (OpenAI GPT-2 model)"),RAo=l(),o1=a("li"),Sfe=a("strong"),PAo=o("ibert"),BAo=o(" \u2014 "),ND=a("a"),IAo=o("IBertForMaskedLM"),NAo=o(" (I-BERT model)"),qAo=l(),r1=a("li"),Rfe=a("strong"),jAo=o("layoutlm"),DAo=o(" \u2014 "),qD=a("a"),GAo=o("LayoutLMForMaskedLM"),OAo=o(" (LayoutLM model)"),VAo=l(),t1=a("li"),Pfe=a("strong"),XAo=o("longformer"),zAo=o(" \u2014 "),jD=a("a"),QAo=o("LongformerForMaskedLM"),WAo=o(" (Longformer model)"),HAo=l(),a1=a("li"),Bfe=a("strong"),UAo=o("lxmert"),JAo=o(" \u2014 "),DD=a("a"),YAo=o("LxmertForPreTraining"),KAo=o(" (LXMERT model)"),ZAo=l(),n1=a("li"),Ife=a("strong"),e6o=o("megatron-bert"),o6o=o(" \u2014 "),GD=a("a"),r6o=o("MegatronBertForPreTraining"),t6o=o(" (Megatron-BERT model)"),a6o=l(),s1=a("li"),Nfe=a("strong"),n6o=o("mobilebert"),s6o=o(" \u2014 "),OD=a("a"),l6o=o("MobileBertForPreTraining"),i6o=o(" (MobileBERT model)"),d6o=l(),l1=a("li"),qfe=a("strong"),c6o=o("mpnet"),f6o=o(" \u2014 "),VD=a("a"),m6o=o("MPNetForMaskedLM"),g6o=o(" (MPNet model)"),h6o=l(),i1=a("li"),jfe=a("strong"),p6o=o("nezha"),_6o=o(" \u2014 "),XD=a("a"),u6o=o("NezhaForPreTraining"),b6o=o(" (Nezha model)"),v6o=l(),d1=a("li"),Dfe=a("strong"),F6o=o("openai-gpt"),T6o=o(" \u2014 "),zD=a("a"),M6o=o("OpenAIGPTLMHeadModel"),E6o=o(" (OpenAI GPT model)"),C6o=l(),c1=a("li"),Gfe=a("strong"),w6o=o("retribert"),A6o=o(" \u2014 "),QD=a("a"),L6o=o("RetriBertModel"),y6o=o(" (RetriBERT model)"),x6o=l(),f1=a("li"),Ofe=a("strong"),$6o=o("roberta"),k6o=o(" \u2014 "),WD=a("a"),S6o=o("RobertaForMaskedLM"),R6o=o(" (RoBERTa model)"),P6o=l(),m1=a("li"),Vfe=a("strong"),B6o=o("splinter"),I6o=o(" \u2014 "),HD=a("a"),N6o=o("SplinterForPreTraining"),q6o=o(" (Splinter model)"),j6o=l(),g1=a("li"),Xfe=a("strong"),D6o=o("squeezebert"),G6o=o(" \u2014 "),UD=a("a"),O6o=o("SqueezeBertForMaskedLM"),V6o=o(" (SqueezeBERT model)"),X6o=l(),h1=a("li"),zfe=a("strong"),z6o=o("t5"),Q6o=o(" \u2014 "),JD=a("a"),W6o=o("T5ForConditionalGeneration"),H6o=o(" (T5 model)"),U6o=l(),p1=a("li"),Qfe=a("strong"),J6o=o("tapas"),Y6o=o(" \u2014 "),YD=a("a"),K6o=o("TapasForMaskedLM"),Z6o=o(" (TAPAS model)"),eLo=l(),_1=a("li"),Wfe=a("strong"),oLo=o("transfo-xl"),rLo=o(" \u2014 "),KD=a("a"),tLo=o("TransfoXLLMHeadModel"),aLo=o(" (Transformer-XL model)"),nLo=l(),u1=a("li"),Hfe=a("strong"),sLo=o("unispeech"),lLo=o(" \u2014 "),ZD=a("a"),iLo=o("UniSpeechForPreTraining"),dLo=o(" (UniSpeech model)"),cLo=l(),b1=a("li"),Ufe=a("strong"),fLo=o("unispeech-sat"),mLo=o(" \u2014 "),eG=a("a"),gLo=o("UniSpeechSatForPreTraining"),hLo=o(" (UniSpeechSat model)"),pLo=l(),v1=a("li"),Jfe=a("strong"),_Lo=o("visual_bert"),uLo=o(" \u2014 "),oG=a("a"),bLo=o("VisualBertForPreTraining"),vLo=o(" (VisualBERT model)"),FLo=l(),F1=a("li"),Yfe=a("strong"),TLo=o("vit_mae"),MLo=o(" \u2014 "),rG=a("a"),ELo=o("ViTMAEForPreTraining"),CLo=o(" (ViTMAE model)"),wLo=l(),T1=a("li"),Kfe=a("strong"),ALo=o("wav2vec2"),LLo=o(" \u2014 "),tG=a("a"),yLo=o("Wav2Vec2ForPreTraining"),xLo=o(" (Wav2Vec2 model)"),$Lo=l(),M1=a("li"),Zfe=a("strong"),kLo=o("wav2vec2-conformer"),SLo=o(" \u2014 "),aG=a("a"),RLo=o("Wav2Vec2ConformerForPreTraining"),PLo=o(" (Wav2Vec2-Conformer model)"),BLo=l(),E1=a("li"),eme=a("strong"),ILo=o("xlm"),NLo=o(" \u2014 "),nG=a("a"),qLo=o("XLMWithLMHeadModel"),jLo=o(" (XLM model)"),DLo=l(),C1=a("li"),ome=a("strong"),GLo=o("xlm-roberta"),OLo=o(" \u2014 "),sG=a("a"),VLo=o("XLMRobertaForMaskedLM"),XLo=o(" (XLM-RoBERTa model)"),zLo=l(),w1=a("li"),rme=a("strong"),QLo=o("xlm-roberta-xl"),WLo=o(" \u2014 "),lG=a("a"),HLo=o("XLMRobertaXLForMaskedLM"),ULo=o(" (XLM-RoBERTa-XL model)"),JLo=l(),A1=a("li"),tme=a("strong"),YLo=o("xlnet"),KLo=o(" \u2014 "),iG=a("a"),ZLo=o("XLNetLMHeadModel"),eyo=o(" (XLNet model)"),oyo=l(),L1=a("p"),ryo=o("The model is set in evaluation mode by default using "),ame=a("code"),tyo=o("model.eval()"),ayo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=a("code"),nyo=o("model.train()"),syo=l(),F(y1.$$.fragment),EOe=l(),Oi=a("h2"),x1=a("a"),sme=a("span"),F(_y.$$.fragment),lyo=l(),lme=a("span"),iyo=o("AutoModelForCausalLM"),COe=l(),ko=a("div"),F(uy.$$.fragment),dyo=l(),Vi=a("p"),cyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dG=a("a"),fyo=o("from_pretrained()"),myo=o(" class method or the "),cG=a("a"),gyo=o("from_config()"),hyo=o(` class
method.`),pyo=l(),by=a("p"),_yo=o("This class cannot be instantiated directly using "),ime=a("code"),uyo=o("__init__()"),byo=o(" (throws an error)."),vyo=l(),lt=a("div"),F(vy.$$.fragment),Fyo=l(),dme=a("p"),Tyo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Myo=l(),Xi=a("p"),Eyo=o(`Note:
Loading a model from its configuration file does `),cme=a("strong"),Cyo=o("not"),wyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),Ayo=o("from_pretrained()"),Lyo=o(" to load the model weights."),yyo=l(),F($1.$$.fragment),xyo=l(),Ke=a("div"),F(Fy.$$.fragment),$yo=l(),fme=a("p"),kyo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Syo=l(),Ba=a("p"),Ryo=o("The model class to instantiate is selected based on the "),mme=a("code"),Pyo=o("model_type"),Byo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),Iyo=o("pretrained_model_name_or_path"),Nyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),qyo=o("pretrained_model_name_or_path"),jyo=o(":"),Dyo=l(),z=a("ul"),k1=a("li"),pme=a("strong"),Gyo=o("bart"),Oyo=o(" \u2014 "),mG=a("a"),Vyo=o("BartForCausalLM"),Xyo=o(" (BART model)"),zyo=l(),S1=a("li"),_me=a("strong"),Qyo=o("bert"),Wyo=o(" \u2014 "),gG=a("a"),Hyo=o("BertLMHeadModel"),Uyo=o(" (BERT model)"),Jyo=l(),R1=a("li"),ume=a("strong"),Yyo=o("bert-generation"),Kyo=o(" \u2014 "),hG=a("a"),Zyo=o("BertGenerationDecoder"),e8o=o(" (Bert Generation model)"),o8o=l(),P1=a("li"),bme=a("strong"),r8o=o("big_bird"),t8o=o(" \u2014 "),pG=a("a"),a8o=o("BigBirdForCausalLM"),n8o=o(" (BigBird model)"),s8o=l(),B1=a("li"),vme=a("strong"),l8o=o("bigbird_pegasus"),i8o=o(" \u2014 "),_G=a("a"),d8o=o("BigBirdPegasusForCausalLM"),c8o=o(" (BigBird-Pegasus model)"),f8o=l(),I1=a("li"),Fme=a("strong"),m8o=o("blenderbot"),g8o=o(" \u2014 "),uG=a("a"),h8o=o("BlenderbotForCausalLM"),p8o=o(" (Blenderbot model)"),_8o=l(),N1=a("li"),Tme=a("strong"),u8o=o("blenderbot-small"),b8o=o(" \u2014 "),bG=a("a"),v8o=o("BlenderbotSmallForCausalLM"),F8o=o(" (BlenderbotSmall model)"),T8o=l(),q1=a("li"),Mme=a("strong"),M8o=o("bloom"),E8o=o(" \u2014 "),vG=a("a"),C8o=o("BloomForCausalLM"),w8o=o(" (BLOOM model)"),A8o=l(),j1=a("li"),Eme=a("strong"),L8o=o("camembert"),y8o=o(" \u2014 "),FG=a("a"),x8o=o("CamembertForCausalLM"),$8o=o(" (CamemBERT model)"),k8o=l(),D1=a("li"),Cme=a("strong"),S8o=o("ctrl"),R8o=o(" \u2014 "),TG=a("a"),P8o=o("CTRLLMHeadModel"),B8o=o(" (CTRL model)"),I8o=l(),G1=a("li"),wme=a("strong"),N8o=o("data2vec-text"),q8o=o(" \u2014 "),MG=a("a"),j8o=o("Data2VecTextForCausalLM"),D8o=o(" (Data2VecText model)"),G8o=l(),O1=a("li"),Ame=a("strong"),O8o=o("electra"),V8o=o(" \u2014 "),EG=a("a"),X8o=o("ElectraForCausalLM"),z8o=o(" (ELECTRA model)"),Q8o=l(),V1=a("li"),Lme=a("strong"),W8o=o("gpt2"),H8o=o(" \u2014 "),CG=a("a"),U8o=o("GPT2LMHeadModel"),J8o=o(" (OpenAI GPT-2 model)"),Y8o=l(),X1=a("li"),yme=a("strong"),K8o=o("gpt_neo"),Z8o=o(" \u2014 "),wG=a("a"),e9o=o("GPTNeoForCausalLM"),o9o=o(" (GPT Neo model)"),r9o=l(),z1=a("li"),xme=a("strong"),t9o=o("gpt_neox"),a9o=o(" \u2014 "),AG=a("a"),n9o=o("GPTNeoXForCausalLM"),s9o=o(" (GPT NeoX model)"),l9o=l(),Q1=a("li"),$me=a("strong"),i9o=o("gptj"),d9o=o(" \u2014 "),LG=a("a"),c9o=o("GPTJForCausalLM"),f9o=o(" (GPT-J model)"),m9o=l(),W1=a("li"),kme=a("strong"),g9o=o("marian"),h9o=o(" \u2014 "),yG=a("a"),p9o=o("MarianForCausalLM"),_9o=o(" (Marian model)"),u9o=l(),H1=a("li"),Sme=a("strong"),b9o=o("mbart"),v9o=o(" \u2014 "),xG=a("a"),F9o=o("MBartForCausalLM"),T9o=o(" (mBART model)"),M9o=l(),U1=a("li"),Rme=a("strong"),E9o=o("megatron-bert"),C9o=o(" \u2014 "),$G=a("a"),w9o=o("MegatronBertForCausalLM"),A9o=o(" (Megatron-BERT model)"),L9o=l(),J1=a("li"),Pme=a("strong"),y9o=o("openai-gpt"),x9o=o(" \u2014 "),kG=a("a"),$9o=o("OpenAIGPTLMHeadModel"),k9o=o(" (OpenAI GPT model)"),S9o=l(),Y1=a("li"),Bme=a("strong"),R9o=o("opt"),P9o=o(" \u2014 "),SG=a("a"),B9o=o("OPTForCausalLM"),I9o=o(" (OPT model)"),N9o=l(),K1=a("li"),Ime=a("strong"),q9o=o("pegasus"),j9o=o(" \u2014 "),RG=a("a"),D9o=o("PegasusForCausalLM"),G9o=o(" (Pegasus model)"),O9o=l(),Z1=a("li"),Nme=a("strong"),V9o=o("plbart"),X9o=o(" \u2014 "),PG=a("a"),z9o=o("PLBartForCausalLM"),Q9o=o(" (PLBart model)"),W9o=l(),e3=a("li"),qme=a("strong"),H9o=o("prophetnet"),U9o=o(" \u2014 "),BG=a("a"),J9o=o("ProphetNetForCausalLM"),Y9o=o(" (ProphetNet model)"),K9o=l(),o3=a("li"),jme=a("strong"),Z9o=o("qdqbert"),exo=o(" \u2014 "),IG=a("a"),oxo=o("QDQBertLMHeadModel"),rxo=o(" (QDQBert model)"),txo=l(),r3=a("li"),Dme=a("strong"),axo=o("reformer"),nxo=o(" \u2014 "),NG=a("a"),sxo=o("ReformerModelWithLMHead"),lxo=o(" (Reformer model)"),ixo=l(),t3=a("li"),Gme=a("strong"),dxo=o("rembert"),cxo=o(" \u2014 "),qG=a("a"),fxo=o("RemBertForCausalLM"),mxo=o(" (RemBERT model)"),gxo=l(),a3=a("li"),Ome=a("strong"),hxo=o("roberta"),pxo=o(" \u2014 "),jG=a("a"),_xo=o("RobertaForCausalLM"),uxo=o(" (RoBERTa model)"),bxo=l(),n3=a("li"),Vme=a("strong"),vxo=o("roformer"),Fxo=o(" \u2014 "),DG=a("a"),Txo=o("RoFormerForCausalLM"),Mxo=o(" (RoFormer model)"),Exo=l(),s3=a("li"),Xme=a("strong"),Cxo=o("speech_to_text_2"),wxo=o(" \u2014 "),GG=a("a"),Axo=o("Speech2Text2ForCausalLM"),Lxo=o(" (Speech2Text2 model)"),yxo=l(),l3=a("li"),zme=a("strong"),xxo=o("transfo-xl"),$xo=o(" \u2014 "),OG=a("a"),kxo=o("TransfoXLLMHeadModel"),Sxo=o(" (Transformer-XL model)"),Rxo=l(),i3=a("li"),Qme=a("strong"),Pxo=o("trocr"),Bxo=o(" \u2014 "),VG=a("a"),Ixo=o("TrOCRForCausalLM"),Nxo=o(" (TrOCR model)"),qxo=l(),d3=a("li"),Wme=a("strong"),jxo=o("xglm"),Dxo=o(" \u2014 "),XG=a("a"),Gxo=o("XGLMForCausalLM"),Oxo=o(" (XGLM model)"),Vxo=l(),c3=a("li"),Hme=a("strong"),Xxo=o("xlm"),zxo=o(" \u2014 "),zG=a("a"),Qxo=o("XLMWithLMHeadModel"),Wxo=o(" (XLM model)"),Hxo=l(),f3=a("li"),Ume=a("strong"),Uxo=o("xlm-prophetnet"),Jxo=o(" \u2014 "),QG=a("a"),Yxo=o("XLMProphetNetForCausalLM"),Kxo=o(" (XLM-ProphetNet model)"),Zxo=l(),m3=a("li"),Jme=a("strong"),e$o=o("xlm-roberta"),o$o=o(" \u2014 "),WG=a("a"),r$o=o("XLMRobertaForCausalLM"),t$o=o(" (XLM-RoBERTa model)"),a$o=l(),g3=a("li"),Yme=a("strong"),n$o=o("xlm-roberta-xl"),s$o=o(" \u2014 "),HG=a("a"),l$o=o("XLMRobertaXLForCausalLM"),i$o=o(" (XLM-RoBERTa-XL model)"),d$o=l(),h3=a("li"),Kme=a("strong"),c$o=o("xlnet"),f$o=o(" \u2014 "),UG=a("a"),m$o=o("XLNetLMHeadModel"),g$o=o(" (XLNet model)"),h$o=l(),p3=a("p"),p$o=o("The model is set in evaluation mode by default using "),Zme=a("code"),_$o=o("model.eval()"),u$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),b$o=o("model.train()"),v$o=l(),F(_3.$$.fragment),wOe=l(),zi=a("h2"),u3=a("a"),oge=a("span"),F(Ty.$$.fragment),F$o=l(),rge=a("span"),T$o=o("AutoModelForMaskedLM"),AOe=l(),So=a("div"),F(My.$$.fragment),M$o=l(),Qi=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JG=a("a"),C$o=o("from_pretrained()"),w$o=o(" class method or the "),YG=a("a"),A$o=o("from_config()"),L$o=o(` class
method.`),y$o=l(),Ey=a("p"),x$o=o("This class cannot be instantiated directly using "),tge=a("code"),$$o=o("__init__()"),k$o=o(" (throws an error)."),S$o=l(),it=a("div"),F(Cy.$$.fragment),R$o=l(),age=a("p"),P$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B$o=l(),Wi=a("p"),I$o=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),N$o=o("not"),q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),j$o=o("from_pretrained()"),D$o=o(" to load the model weights."),G$o=l(),F(b3.$$.fragment),O$o=l(),Ze=a("div"),F(wy.$$.fragment),V$o=l(),sge=a("p"),X$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z$o=l(),Ia=a("p"),Q$o=o("The model class to instantiate is selected based on the "),lge=a("code"),W$o=o("model_type"),H$o=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),U$o=o("pretrained_model_name_or_path"),J$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),Y$o=o("pretrained_model_name_or_path"),K$o=o(":"),Z$o=l(),Q=a("ul"),v3=a("li"),cge=a("strong"),eko=o("albert"),oko=o(" \u2014 "),ZG=a("a"),rko=o("AlbertForMaskedLM"),tko=o(" (ALBERT model)"),ako=l(),F3=a("li"),fge=a("strong"),nko=o("bart"),sko=o(" \u2014 "),eO=a("a"),lko=o("BartForConditionalGeneration"),iko=o(" (BART model)"),dko=l(),T3=a("li"),mge=a("strong"),cko=o("bert"),fko=o(" \u2014 "),oO=a("a"),mko=o("BertForMaskedLM"),gko=o(" (BERT model)"),hko=l(),M3=a("li"),gge=a("strong"),pko=o("big_bird"),_ko=o(" \u2014 "),rO=a("a"),uko=o("BigBirdForMaskedLM"),bko=o(" (BigBird model)"),vko=l(),E3=a("li"),hge=a("strong"),Fko=o("camembert"),Tko=o(" \u2014 "),tO=a("a"),Mko=o("CamembertForMaskedLM"),Eko=o(" (CamemBERT model)"),Cko=l(),C3=a("li"),pge=a("strong"),wko=o("convbert"),Ako=o(" \u2014 "),aO=a("a"),Lko=o("ConvBertForMaskedLM"),yko=o(" (ConvBERT model)"),xko=l(),w3=a("li"),_ge=a("strong"),$ko=o("data2vec-text"),kko=o(" \u2014 "),nO=a("a"),Sko=o("Data2VecTextForMaskedLM"),Rko=o(" (Data2VecText model)"),Pko=l(),A3=a("li"),uge=a("strong"),Bko=o("deberta"),Iko=o(" \u2014 "),sO=a("a"),Nko=o("DebertaForMaskedLM"),qko=o(" (DeBERTa model)"),jko=l(),L3=a("li"),bge=a("strong"),Dko=o("deberta-v2"),Gko=o(" \u2014 "),lO=a("a"),Oko=o("DebertaV2ForMaskedLM"),Vko=o(" (DeBERTa-v2 model)"),Xko=l(),y3=a("li"),vge=a("strong"),zko=o("distilbert"),Qko=o(" \u2014 "),iO=a("a"),Wko=o("DistilBertForMaskedLM"),Hko=o(" (DistilBERT model)"),Uko=l(),x3=a("li"),Fge=a("strong"),Jko=o("electra"),Yko=o(" \u2014 "),dO=a("a"),Kko=o("ElectraForMaskedLM"),Zko=o(" (ELECTRA model)"),eSo=l(),$3=a("li"),Tge=a("strong"),oSo=o("flaubert"),rSo=o(" \u2014 "),cO=a("a"),tSo=o("FlaubertWithLMHeadModel"),aSo=o(" (FlauBERT model)"),nSo=l(),k3=a("li"),Mge=a("strong"),sSo=o("fnet"),lSo=o(" \u2014 "),fO=a("a"),iSo=o("FNetForMaskedLM"),dSo=o(" (FNet model)"),cSo=l(),S3=a("li"),Ege=a("strong"),fSo=o("funnel"),mSo=o(" \u2014 "),mO=a("a"),gSo=o("FunnelForMaskedLM"),hSo=o(" (Funnel Transformer model)"),pSo=l(),R3=a("li"),Cge=a("strong"),_So=o("ibert"),uSo=o(" \u2014 "),gO=a("a"),bSo=o("IBertForMaskedLM"),vSo=o(" (I-BERT model)"),FSo=l(),P3=a("li"),wge=a("strong"),TSo=o("layoutlm"),MSo=o(" \u2014 "),hO=a("a"),ESo=o("LayoutLMForMaskedLM"),CSo=o(" (LayoutLM model)"),wSo=l(),B3=a("li"),Age=a("strong"),ASo=o("longformer"),LSo=o(" \u2014 "),pO=a("a"),ySo=o("LongformerForMaskedLM"),xSo=o(" (Longformer model)"),$So=l(),I3=a("li"),Lge=a("strong"),kSo=o("luke"),SSo=o(" \u2014 "),_O=a("a"),RSo=o("LukeForMaskedLM"),PSo=o(" (LUKE model)"),BSo=l(),N3=a("li"),yge=a("strong"),ISo=o("mbart"),NSo=o(" \u2014 "),uO=a("a"),qSo=o("MBartForConditionalGeneration"),jSo=o(" (mBART model)"),DSo=l(),q3=a("li"),xge=a("strong"),GSo=o("megatron-bert"),OSo=o(" \u2014 "),bO=a("a"),VSo=o("MegatronBertForMaskedLM"),XSo=o(" (Megatron-BERT model)"),zSo=l(),j3=a("li"),$ge=a("strong"),QSo=o("mobilebert"),WSo=o(" \u2014 "),vO=a("a"),HSo=o("MobileBertForMaskedLM"),USo=o(" (MobileBERT model)"),JSo=l(),D3=a("li"),kge=a("strong"),YSo=o("mpnet"),KSo=o(" \u2014 "),FO=a("a"),ZSo=o("MPNetForMaskedLM"),eRo=o(" (MPNet model)"),oRo=l(),G3=a("li"),Sge=a("strong"),rRo=o("nezha"),tRo=o(" \u2014 "),TO=a("a"),aRo=o("NezhaForMaskedLM"),nRo=o(" (Nezha model)"),sRo=l(),O3=a("li"),Rge=a("strong"),lRo=o("nystromformer"),iRo=o(" \u2014 "),MO=a("a"),dRo=o("NystromformerForMaskedLM"),cRo=o(" (Nystr\xF6mformer model)"),fRo=l(),V3=a("li"),Pge=a("strong"),mRo=o("perceiver"),gRo=o(" \u2014 "),EO=a("a"),hRo=o("PerceiverForMaskedLM"),pRo=o(" (Perceiver model)"),_Ro=l(),X3=a("li"),Bge=a("strong"),uRo=o("qdqbert"),bRo=o(" \u2014 "),CO=a("a"),vRo=o("QDQBertForMaskedLM"),FRo=o(" (QDQBert model)"),TRo=l(),z3=a("li"),Ige=a("strong"),MRo=o("reformer"),ERo=o(" \u2014 "),wO=a("a"),CRo=o("ReformerForMaskedLM"),wRo=o(" (Reformer model)"),ARo=l(),Q3=a("li"),Nge=a("strong"),LRo=o("rembert"),yRo=o(" \u2014 "),AO=a("a"),xRo=o("RemBertForMaskedLM"),$Ro=o(" (RemBERT model)"),kRo=l(),W3=a("li"),qge=a("strong"),SRo=o("roberta"),RRo=o(" \u2014 "),LO=a("a"),PRo=o("RobertaForMaskedLM"),BRo=o(" (RoBERTa model)"),IRo=l(),H3=a("li"),jge=a("strong"),NRo=o("roformer"),qRo=o(" \u2014 "),yO=a("a"),jRo=o("RoFormerForMaskedLM"),DRo=o(" (RoFormer model)"),GRo=l(),U3=a("li"),Dge=a("strong"),ORo=o("squeezebert"),VRo=o(" \u2014 "),xO=a("a"),XRo=o("SqueezeBertForMaskedLM"),zRo=o(" (SqueezeBERT model)"),QRo=l(),J3=a("li"),Gge=a("strong"),WRo=o("tapas"),HRo=o(" \u2014 "),$O=a("a"),URo=o("TapasForMaskedLM"),JRo=o(" (TAPAS model)"),YRo=l(),Y3=a("li"),Oge=a("strong"),KRo=o("wav2vec2"),ZRo=o(" \u2014 "),Vge=a("code"),ePo=o("Wav2Vec2ForMaskedLM"),oPo=o(" (Wav2Vec2 model)"),rPo=l(),K3=a("li"),Xge=a("strong"),tPo=o("xlm"),aPo=o(" \u2014 "),kO=a("a"),nPo=o("XLMWithLMHeadModel"),sPo=o(" (XLM model)"),lPo=l(),Z3=a("li"),zge=a("strong"),iPo=o("xlm-roberta"),dPo=o(" \u2014 "),SO=a("a"),cPo=o("XLMRobertaForMaskedLM"),fPo=o(" (XLM-RoBERTa model)"),mPo=l(),e2=a("li"),Qge=a("strong"),gPo=o("xlm-roberta-xl"),hPo=o(" \u2014 "),RO=a("a"),pPo=o("XLMRobertaXLForMaskedLM"),_Po=o(" (XLM-RoBERTa-XL model)"),uPo=l(),o2=a("li"),Wge=a("strong"),bPo=o("yoso"),vPo=o(" \u2014 "),PO=a("a"),FPo=o("YosoForMaskedLM"),TPo=o(" (YOSO model)"),MPo=l(),r2=a("p"),EPo=o("The model is set in evaluation mode by default using "),Hge=a("code"),CPo=o("model.eval()"),wPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),APo=o("model.train()"),LPo=l(),F(t2.$$.fragment),LOe=l(),Hi=a("h2"),a2=a("a"),Jge=a("span"),F(Ay.$$.fragment),yPo=l(),Yge=a("span"),xPo=o("AutoModelForSeq2SeqLM"),yOe=l(),Ro=a("div"),F(Ly.$$.fragment),$Po=l(),Ui=a("p"),kPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BO=a("a"),SPo=o("from_pretrained()"),RPo=o(" class method or the "),IO=a("a"),PPo=o("from_config()"),BPo=o(` class
method.`),IPo=l(),yy=a("p"),NPo=o("This class cannot be instantiated directly using "),Kge=a("code"),qPo=o("__init__()"),jPo=o(" (throws an error)."),DPo=l(),dt=a("div"),F(xy.$$.fragment),GPo=l(),Zge=a("p"),OPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VPo=l(),Ji=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),zPo=o("not"),QPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),WPo=o("from_pretrained()"),HPo=o(" to load the model weights."),UPo=l(),F(n2.$$.fragment),JPo=l(),eo=a("div"),F($y.$$.fragment),YPo=l(),ohe=a("p"),KPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZPo=l(),Na=a("p"),eBo=o("The model class to instantiate is selected based on the "),rhe=a("code"),oBo=o("model_type"),rBo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),tBo=o("pretrained_model_name_or_path"),aBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),nBo=o("pretrained_model_name_or_path"),sBo=o(":"),lBo=l(),pe=a("ul"),s2=a("li"),nhe=a("strong"),iBo=o("bart"),dBo=o(" \u2014 "),qO=a("a"),cBo=o("BartForConditionalGeneration"),fBo=o(" (BART model)"),mBo=l(),l2=a("li"),she=a("strong"),gBo=o("bigbird_pegasus"),hBo=o(" \u2014 "),jO=a("a"),pBo=o("BigBirdPegasusForConditionalGeneration"),_Bo=o(" (BigBird-Pegasus model)"),uBo=l(),i2=a("li"),lhe=a("strong"),bBo=o("blenderbot"),vBo=o(" \u2014 "),DO=a("a"),FBo=o("BlenderbotForConditionalGeneration"),TBo=o(" (Blenderbot model)"),MBo=l(),d2=a("li"),ihe=a("strong"),EBo=o("blenderbot-small"),CBo=o(" \u2014 "),GO=a("a"),wBo=o("BlenderbotSmallForConditionalGeneration"),ABo=o(" (BlenderbotSmall model)"),LBo=l(),c2=a("li"),dhe=a("strong"),yBo=o("encoder-decoder"),xBo=o(" \u2014 "),OO=a("a"),$Bo=o("EncoderDecoderModel"),kBo=o(" (Encoder decoder model)"),SBo=l(),f2=a("li"),che=a("strong"),RBo=o("fsmt"),PBo=o(" \u2014 "),VO=a("a"),BBo=o("FSMTForConditionalGeneration"),IBo=o(" (FairSeq Machine-Translation model)"),NBo=l(),m2=a("li"),fhe=a("strong"),qBo=o("led"),jBo=o(" \u2014 "),XO=a("a"),DBo=o("LEDForConditionalGeneration"),GBo=o(" (LED model)"),OBo=l(),g2=a("li"),mhe=a("strong"),VBo=o("longt5"),XBo=o(" \u2014 "),zO=a("a"),zBo=o("LongT5ForConditionalGeneration"),QBo=o(" (LongT5 model)"),WBo=l(),h2=a("li"),ghe=a("strong"),HBo=o("m2m_100"),UBo=o(" \u2014 "),QO=a("a"),JBo=o("M2M100ForConditionalGeneration"),YBo=o(" (M2M100 model)"),KBo=l(),p2=a("li"),hhe=a("strong"),ZBo=o("marian"),eIo=o(" \u2014 "),WO=a("a"),oIo=o("MarianMTModel"),rIo=o(" (Marian model)"),tIo=l(),_2=a("li"),phe=a("strong"),aIo=o("mbart"),nIo=o(" \u2014 "),HO=a("a"),sIo=o("MBartForConditionalGeneration"),lIo=o(" (mBART model)"),iIo=l(),u2=a("li"),_he=a("strong"),dIo=o("mt5"),cIo=o(" \u2014 "),UO=a("a"),fIo=o("MT5ForConditionalGeneration"),mIo=o(" (MT5 model)"),gIo=l(),b2=a("li"),uhe=a("strong"),hIo=o("pegasus"),pIo=o(" \u2014 "),JO=a("a"),_Io=o("PegasusForConditionalGeneration"),uIo=o(" (Pegasus model)"),bIo=l(),v2=a("li"),bhe=a("strong"),vIo=o("plbart"),FIo=o(" \u2014 "),YO=a("a"),TIo=o("PLBartForConditionalGeneration"),MIo=o(" (PLBart model)"),EIo=l(),F2=a("li"),vhe=a("strong"),CIo=o("prophetnet"),wIo=o(" \u2014 "),KO=a("a"),AIo=o("ProphetNetForConditionalGeneration"),LIo=o(" (ProphetNet model)"),yIo=l(),T2=a("li"),Fhe=a("strong"),xIo=o("t5"),$Io=o(" \u2014 "),ZO=a("a"),kIo=o("T5ForConditionalGeneration"),SIo=o(" (T5 model)"),RIo=l(),M2=a("li"),The=a("strong"),PIo=o("xlm-prophetnet"),BIo=o(" \u2014 "),eV=a("a"),IIo=o("XLMProphetNetForConditionalGeneration"),NIo=o(" (XLM-ProphetNet model)"),qIo=l(),E2=a("p"),jIo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),DIo=o("model.eval()"),GIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),OIo=o("model.train()"),VIo=l(),F(C2.$$.fragment),xOe=l(),Yi=a("h2"),w2=a("a"),Che=a("span"),F(ky.$$.fragment),XIo=l(),whe=a("span"),zIo=o("AutoModelForSequenceClassification"),$Oe=l(),Po=a("div"),F(Sy.$$.fragment),QIo=l(),Ki=a("p"),WIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oV=a("a"),HIo=o("from_pretrained()"),UIo=o(" class method or the "),rV=a("a"),JIo=o("from_config()"),YIo=o(` class
method.`),KIo=l(),Ry=a("p"),ZIo=o("This class cannot be instantiated directly using "),Ahe=a("code"),eNo=o("__init__()"),oNo=o(" (throws an error)."),rNo=l(),ct=a("div"),F(Py.$$.fragment),tNo=l(),Lhe=a("p"),aNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nNo=l(),Zi=a("p"),sNo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),lNo=o("not"),iNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),dNo=o("from_pretrained()"),cNo=o(" to load the model weights."),fNo=l(),F(A2.$$.fragment),mNo=l(),oo=a("div"),F(By.$$.fragment),gNo=l(),xhe=a("p"),hNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pNo=l(),qa=a("p"),_No=o("The model class to instantiate is selected based on the "),$he=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),vNo=o("pretrained_model_name_or_path"),FNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),TNo=o("pretrained_model_name_or_path"),MNo=o(":"),ENo=l(),N=a("ul"),L2=a("li"),Rhe=a("strong"),CNo=o("albert"),wNo=o(" \u2014 "),aV=a("a"),ANo=o("AlbertForSequenceClassification"),LNo=o(" (ALBERT model)"),yNo=l(),y2=a("li"),Phe=a("strong"),xNo=o("bart"),$No=o(" \u2014 "),nV=a("a"),kNo=o("BartForSequenceClassification"),SNo=o(" (BART model)"),RNo=l(),x2=a("li"),Bhe=a("strong"),PNo=o("bert"),BNo=o(" \u2014 "),sV=a("a"),INo=o("BertForSequenceClassification"),NNo=o(" (BERT model)"),qNo=l(),$2=a("li"),Ihe=a("strong"),jNo=o("big_bird"),DNo=o(" \u2014 "),lV=a("a"),GNo=o("BigBirdForSequenceClassification"),ONo=o(" (BigBird model)"),VNo=l(),k2=a("li"),Nhe=a("strong"),XNo=o("bigbird_pegasus"),zNo=o(" \u2014 "),iV=a("a"),QNo=o("BigBirdPegasusForSequenceClassification"),WNo=o(" (BigBird-Pegasus model)"),HNo=l(),S2=a("li"),qhe=a("strong"),UNo=o("bloom"),JNo=o(" \u2014 "),dV=a("a"),YNo=o("BloomForSequenceClassification"),KNo=o(" (BLOOM model)"),ZNo=l(),R2=a("li"),jhe=a("strong"),eqo=o("camembert"),oqo=o(" \u2014 "),cV=a("a"),rqo=o("CamembertForSequenceClassification"),tqo=o(" (CamemBERT model)"),aqo=l(),P2=a("li"),Dhe=a("strong"),nqo=o("canine"),sqo=o(" \u2014 "),fV=a("a"),lqo=o("CanineForSequenceClassification"),iqo=o(" (CANINE model)"),dqo=l(),B2=a("li"),Ghe=a("strong"),cqo=o("convbert"),fqo=o(" \u2014 "),mV=a("a"),mqo=o("ConvBertForSequenceClassification"),gqo=o(" (ConvBERT model)"),hqo=l(),I2=a("li"),Ohe=a("strong"),pqo=o("ctrl"),_qo=o(" \u2014 "),gV=a("a"),uqo=o("CTRLForSequenceClassification"),bqo=o(" (CTRL model)"),vqo=l(),N2=a("li"),Vhe=a("strong"),Fqo=o("data2vec-text"),Tqo=o(" \u2014 "),hV=a("a"),Mqo=o("Data2VecTextForSequenceClassification"),Eqo=o(" (Data2VecText model)"),Cqo=l(),q2=a("li"),Xhe=a("strong"),wqo=o("deberta"),Aqo=o(" \u2014 "),pV=a("a"),Lqo=o("DebertaForSequenceClassification"),yqo=o(" (DeBERTa model)"),xqo=l(),j2=a("li"),zhe=a("strong"),$qo=o("deberta-v2"),kqo=o(" \u2014 "),_V=a("a"),Sqo=o("DebertaV2ForSequenceClassification"),Rqo=o(" (DeBERTa-v2 model)"),Pqo=l(),D2=a("li"),Qhe=a("strong"),Bqo=o("distilbert"),Iqo=o(" \u2014 "),uV=a("a"),Nqo=o("DistilBertForSequenceClassification"),qqo=o(" (DistilBERT model)"),jqo=l(),G2=a("li"),Whe=a("strong"),Dqo=o("electra"),Gqo=o(" \u2014 "),bV=a("a"),Oqo=o("ElectraForSequenceClassification"),Vqo=o(" (ELECTRA model)"),Xqo=l(),O2=a("li"),Hhe=a("strong"),zqo=o("flaubert"),Qqo=o(" \u2014 "),vV=a("a"),Wqo=o("FlaubertForSequenceClassification"),Hqo=o(" (FlauBERT model)"),Uqo=l(),V2=a("li"),Uhe=a("strong"),Jqo=o("fnet"),Yqo=o(" \u2014 "),FV=a("a"),Kqo=o("FNetForSequenceClassification"),Zqo=o(" (FNet model)"),ejo=l(),X2=a("li"),Jhe=a("strong"),ojo=o("funnel"),rjo=o(" \u2014 "),TV=a("a"),tjo=o("FunnelForSequenceClassification"),ajo=o(" (Funnel Transformer model)"),njo=l(),z2=a("li"),Yhe=a("strong"),sjo=o("gpt2"),ljo=o(" \u2014 "),MV=a("a"),ijo=o("GPT2ForSequenceClassification"),djo=o(" (OpenAI GPT-2 model)"),cjo=l(),Q2=a("li"),Khe=a("strong"),fjo=o("gpt_neo"),mjo=o(" \u2014 "),EV=a("a"),gjo=o("GPTNeoForSequenceClassification"),hjo=o(" (GPT Neo model)"),pjo=l(),W2=a("li"),Zhe=a("strong"),_jo=o("gptj"),ujo=o(" \u2014 "),CV=a("a"),bjo=o("GPTJForSequenceClassification"),vjo=o(" (GPT-J model)"),Fjo=l(),H2=a("li"),epe=a("strong"),Tjo=o("ibert"),Mjo=o(" \u2014 "),wV=a("a"),Ejo=o("IBertForSequenceClassification"),Cjo=o(" (I-BERT model)"),wjo=l(),U2=a("li"),ope=a("strong"),Ajo=o("layoutlm"),Ljo=o(" \u2014 "),AV=a("a"),yjo=o("LayoutLMForSequenceClassification"),xjo=o(" (LayoutLM model)"),$jo=l(),J2=a("li"),rpe=a("strong"),kjo=o("layoutlmv2"),Sjo=o(" \u2014 "),LV=a("a"),Rjo=o("LayoutLMv2ForSequenceClassification"),Pjo=o(" (LayoutLMv2 model)"),Bjo=l(),Y2=a("li"),tpe=a("strong"),Ijo=o("layoutlmv3"),Njo=o(" \u2014 "),yV=a("a"),qjo=o("LayoutLMv3ForSequenceClassification"),jjo=o(" (LayoutLMv3 model)"),Djo=l(),K2=a("li"),ape=a("strong"),Gjo=o("led"),Ojo=o(" \u2014 "),xV=a("a"),Vjo=o("LEDForSequenceClassification"),Xjo=o(" (LED model)"),zjo=l(),Z2=a("li"),npe=a("strong"),Qjo=o("longformer"),Wjo=o(" \u2014 "),$V=a("a"),Hjo=o("LongformerForSequenceClassification"),Ujo=o(" (Longformer model)"),Jjo=l(),eb=a("li"),spe=a("strong"),Yjo=o("mbart"),Kjo=o(" \u2014 "),kV=a("a"),Zjo=o("MBartForSequenceClassification"),eDo=o(" (mBART model)"),oDo=l(),ob=a("li"),lpe=a("strong"),rDo=o("megatron-bert"),tDo=o(" \u2014 "),SV=a("a"),aDo=o("MegatronBertForSequenceClassification"),nDo=o(" (Megatron-BERT model)"),sDo=l(),rb=a("li"),ipe=a("strong"),lDo=o("mobilebert"),iDo=o(" \u2014 "),RV=a("a"),dDo=o("MobileBertForSequenceClassification"),cDo=o(" (MobileBERT model)"),fDo=l(),tb=a("li"),dpe=a("strong"),mDo=o("mpnet"),gDo=o(" \u2014 "),PV=a("a"),hDo=o("MPNetForSequenceClassification"),pDo=o(" (MPNet model)"),_Do=l(),ab=a("li"),cpe=a("strong"),uDo=o("nezha"),bDo=o(" \u2014 "),BV=a("a"),vDo=o("NezhaForSequenceClassification"),FDo=o(" (Nezha model)"),TDo=l(),nb=a("li"),fpe=a("strong"),MDo=o("nystromformer"),EDo=o(" \u2014 "),IV=a("a"),CDo=o("NystromformerForSequenceClassification"),wDo=o(" (Nystr\xF6mformer model)"),ADo=l(),sb=a("li"),mpe=a("strong"),LDo=o("openai-gpt"),yDo=o(" \u2014 "),NV=a("a"),xDo=o("OpenAIGPTForSequenceClassification"),$Do=o(" (OpenAI GPT model)"),kDo=l(),lb=a("li"),gpe=a("strong"),SDo=o("perceiver"),RDo=o(" \u2014 "),qV=a("a"),PDo=o("PerceiverForSequenceClassification"),BDo=o(" (Perceiver model)"),IDo=l(),ib=a("li"),hpe=a("strong"),NDo=o("plbart"),qDo=o(" \u2014 "),jV=a("a"),jDo=o("PLBartForSequenceClassification"),DDo=o(" (PLBart model)"),GDo=l(),db=a("li"),ppe=a("strong"),ODo=o("qdqbert"),VDo=o(" \u2014 "),DV=a("a"),XDo=o("QDQBertForSequenceClassification"),zDo=o(" (QDQBert model)"),QDo=l(),cb=a("li"),_pe=a("strong"),WDo=o("reformer"),HDo=o(" \u2014 "),GV=a("a"),UDo=o("ReformerForSequenceClassification"),JDo=o(" (Reformer model)"),YDo=l(),fb=a("li"),upe=a("strong"),KDo=o("rembert"),ZDo=o(" \u2014 "),OV=a("a"),eGo=o("RemBertForSequenceClassification"),oGo=o(" (RemBERT model)"),rGo=l(),mb=a("li"),bpe=a("strong"),tGo=o("roberta"),aGo=o(" \u2014 "),VV=a("a"),nGo=o("RobertaForSequenceClassification"),sGo=o(" (RoBERTa model)"),lGo=l(),gb=a("li"),vpe=a("strong"),iGo=o("roformer"),dGo=o(" \u2014 "),XV=a("a"),cGo=o("RoFormerForSequenceClassification"),fGo=o(" (RoFormer model)"),mGo=l(),hb=a("li"),Fpe=a("strong"),gGo=o("squeezebert"),hGo=o(" \u2014 "),zV=a("a"),pGo=o("SqueezeBertForSequenceClassification"),_Go=o(" (SqueezeBERT model)"),uGo=l(),pb=a("li"),Tpe=a("strong"),bGo=o("tapas"),vGo=o(" \u2014 "),QV=a("a"),FGo=o("TapasForSequenceClassification"),TGo=o(" (TAPAS model)"),MGo=l(),_b=a("li"),Mpe=a("strong"),EGo=o("transfo-xl"),CGo=o(" \u2014 "),WV=a("a"),wGo=o("TransfoXLForSequenceClassification"),AGo=o(" (Transformer-XL model)"),LGo=l(),ub=a("li"),Epe=a("strong"),yGo=o("xlm"),xGo=o(" \u2014 "),HV=a("a"),$Go=o("XLMForSequenceClassification"),kGo=o(" (XLM model)"),SGo=l(),bb=a("li"),Cpe=a("strong"),RGo=o("xlm-roberta"),PGo=o(" \u2014 "),UV=a("a"),BGo=o("XLMRobertaForSequenceClassification"),IGo=o(" (XLM-RoBERTa model)"),NGo=l(),vb=a("li"),wpe=a("strong"),qGo=o("xlm-roberta-xl"),jGo=o(" \u2014 "),JV=a("a"),DGo=o("XLMRobertaXLForSequenceClassification"),GGo=o(" (XLM-RoBERTa-XL model)"),OGo=l(),Fb=a("li"),Ape=a("strong"),VGo=o("xlnet"),XGo=o(" \u2014 "),YV=a("a"),zGo=o("XLNetForSequenceClassification"),QGo=o(" (XLNet model)"),WGo=l(),Tb=a("li"),Lpe=a("strong"),HGo=o("yoso"),UGo=o(" \u2014 "),KV=a("a"),JGo=o("YosoForSequenceClassification"),YGo=o(" (YOSO model)"),KGo=l(),Mb=a("p"),ZGo=o("The model is set in evaluation mode by default using "),ype=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),rOo=o("model.train()"),tOo=l(),F(Eb.$$.fragment),kOe=l(),ed=a("h2"),Cb=a("a"),$pe=a("span"),F(Iy.$$.fragment),aOo=l(),kpe=a("span"),nOo=o("AutoModelForMultipleChoice"),SOe=l(),Bo=a("div"),F(Ny.$$.fragment),sOo=l(),od=a("p"),lOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZV=a("a"),iOo=o("from_pretrained()"),dOo=o(" class method or the "),eX=a("a"),cOo=o("from_config()"),fOo=o(` class
method.`),mOo=l(),qy=a("p"),gOo=o("This class cannot be instantiated directly using "),Spe=a("code"),hOo=o("__init__()"),pOo=o(" (throws an error)."),_Oo=l(),ft=a("div"),F(jy.$$.fragment),uOo=l(),Rpe=a("p"),bOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vOo=l(),rd=a("p"),FOo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),TOo=o("not"),MOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),EOo=o("from_pretrained()"),COo=o(" to load the model weights."),wOo=l(),F(wb.$$.fragment),AOo=l(),ro=a("div"),F(Dy.$$.fragment),LOo=l(),Bpe=a("p"),yOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xOo=l(),ja=a("p"),$Oo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),kOo=o("model_type"),SOo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),ROo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),BOo=o("pretrained_model_name_or_path"),IOo=o(":"),NOo=l(),Z=a("ul"),Ab=a("li"),jpe=a("strong"),qOo=o("albert"),jOo=o(" \u2014 "),rX=a("a"),DOo=o("AlbertForMultipleChoice"),GOo=o(" (ALBERT model)"),OOo=l(),Lb=a("li"),Dpe=a("strong"),VOo=o("bert"),XOo=o(" \u2014 "),tX=a("a"),zOo=o("BertForMultipleChoice"),QOo=o(" (BERT model)"),WOo=l(),yb=a("li"),Gpe=a("strong"),HOo=o("big_bird"),UOo=o(" \u2014 "),aX=a("a"),JOo=o("BigBirdForMultipleChoice"),YOo=o(" (BigBird model)"),KOo=l(),xb=a("li"),Ope=a("strong"),ZOo=o("camembert"),eVo=o(" \u2014 "),nX=a("a"),oVo=o("CamembertForMultipleChoice"),rVo=o(" (CamemBERT model)"),tVo=l(),$b=a("li"),Vpe=a("strong"),aVo=o("canine"),nVo=o(" \u2014 "),sX=a("a"),sVo=o("CanineForMultipleChoice"),lVo=o(" (CANINE model)"),iVo=l(),kb=a("li"),Xpe=a("strong"),dVo=o("convbert"),cVo=o(" \u2014 "),lX=a("a"),fVo=o("ConvBertForMultipleChoice"),mVo=o(" (ConvBERT model)"),gVo=l(),Sb=a("li"),zpe=a("strong"),hVo=o("data2vec-text"),pVo=o(" \u2014 "),iX=a("a"),_Vo=o("Data2VecTextForMultipleChoice"),uVo=o(" (Data2VecText model)"),bVo=l(),Rb=a("li"),Qpe=a("strong"),vVo=o("deberta-v2"),FVo=o(" \u2014 "),dX=a("a"),TVo=o("DebertaV2ForMultipleChoice"),MVo=o(" (DeBERTa-v2 model)"),EVo=l(),Pb=a("li"),Wpe=a("strong"),CVo=o("distilbert"),wVo=o(" \u2014 "),cX=a("a"),AVo=o("DistilBertForMultipleChoice"),LVo=o(" (DistilBERT model)"),yVo=l(),Bb=a("li"),Hpe=a("strong"),xVo=o("electra"),$Vo=o(" \u2014 "),fX=a("a"),kVo=o("ElectraForMultipleChoice"),SVo=o(" (ELECTRA model)"),RVo=l(),Ib=a("li"),Upe=a("strong"),PVo=o("flaubert"),BVo=o(" \u2014 "),mX=a("a"),IVo=o("FlaubertForMultipleChoice"),NVo=o(" (FlauBERT model)"),qVo=l(),Nb=a("li"),Jpe=a("strong"),jVo=o("fnet"),DVo=o(" \u2014 "),gX=a("a"),GVo=o("FNetForMultipleChoice"),OVo=o(" (FNet model)"),VVo=l(),qb=a("li"),Ype=a("strong"),XVo=o("funnel"),zVo=o(" \u2014 "),hX=a("a"),QVo=o("FunnelForMultipleChoice"),WVo=o(" (Funnel Transformer model)"),HVo=l(),jb=a("li"),Kpe=a("strong"),UVo=o("ibert"),JVo=o(" \u2014 "),pX=a("a"),YVo=o("IBertForMultipleChoice"),KVo=o(" (I-BERT model)"),ZVo=l(),Db=a("li"),Zpe=a("strong"),eXo=o("longformer"),oXo=o(" \u2014 "),_X=a("a"),rXo=o("LongformerForMultipleChoice"),tXo=o(" (Longformer model)"),aXo=l(),Gb=a("li"),e_e=a("strong"),nXo=o("megatron-bert"),sXo=o(" \u2014 "),uX=a("a"),lXo=o("MegatronBertForMultipleChoice"),iXo=o(" (Megatron-BERT model)"),dXo=l(),Ob=a("li"),o_e=a("strong"),cXo=o("mobilebert"),fXo=o(" \u2014 "),bX=a("a"),mXo=o("MobileBertForMultipleChoice"),gXo=o(" (MobileBERT model)"),hXo=l(),Vb=a("li"),r_e=a("strong"),pXo=o("mpnet"),_Xo=o(" \u2014 "),vX=a("a"),uXo=o("MPNetForMultipleChoice"),bXo=o(" (MPNet model)"),vXo=l(),Xb=a("li"),t_e=a("strong"),FXo=o("nezha"),TXo=o(" \u2014 "),FX=a("a"),MXo=o("NezhaForMultipleChoice"),EXo=o(" (Nezha model)"),CXo=l(),zb=a("li"),a_e=a("strong"),wXo=o("nystromformer"),AXo=o(" \u2014 "),TX=a("a"),LXo=o("NystromformerForMultipleChoice"),yXo=o(" (Nystr\xF6mformer model)"),xXo=l(),Qb=a("li"),n_e=a("strong"),$Xo=o("qdqbert"),kXo=o(" \u2014 "),MX=a("a"),SXo=o("QDQBertForMultipleChoice"),RXo=o(" (QDQBert model)"),PXo=l(),Wb=a("li"),s_e=a("strong"),BXo=o("rembert"),IXo=o(" \u2014 "),EX=a("a"),NXo=o("RemBertForMultipleChoice"),qXo=o(" (RemBERT model)"),jXo=l(),Hb=a("li"),l_e=a("strong"),DXo=o("roberta"),GXo=o(" \u2014 "),CX=a("a"),OXo=o("RobertaForMultipleChoice"),VXo=o(" (RoBERTa model)"),XXo=l(),Ub=a("li"),i_e=a("strong"),zXo=o("roformer"),QXo=o(" \u2014 "),wX=a("a"),WXo=o("RoFormerForMultipleChoice"),HXo=o(" (RoFormer model)"),UXo=l(),Jb=a("li"),d_e=a("strong"),JXo=o("squeezebert"),YXo=o(" \u2014 "),AX=a("a"),KXo=o("SqueezeBertForMultipleChoice"),ZXo=o(" (SqueezeBERT model)"),ezo=l(),Yb=a("li"),c_e=a("strong"),ozo=o("xlm"),rzo=o(" \u2014 "),LX=a("a"),tzo=o("XLMForMultipleChoice"),azo=o(" (XLM model)"),nzo=l(),Kb=a("li"),f_e=a("strong"),szo=o("xlm-roberta"),lzo=o(" \u2014 "),yX=a("a"),izo=o("XLMRobertaForMultipleChoice"),dzo=o(" (XLM-RoBERTa model)"),czo=l(),Zb=a("li"),m_e=a("strong"),fzo=o("xlm-roberta-xl"),mzo=o(" \u2014 "),xX=a("a"),gzo=o("XLMRobertaXLForMultipleChoice"),hzo=o(" (XLM-RoBERTa-XL model)"),pzo=l(),ev=a("li"),g_e=a("strong"),_zo=o("xlnet"),uzo=o(" \u2014 "),$X=a("a"),bzo=o("XLNetForMultipleChoice"),vzo=o(" (XLNet model)"),Fzo=l(),ov=a("li"),h_e=a("strong"),Tzo=o("yoso"),Mzo=o(" \u2014 "),kX=a("a"),Ezo=o("YosoForMultipleChoice"),Czo=o(" (YOSO model)"),wzo=l(),rv=a("p"),Azo=o("The model is set in evaluation mode by default using "),p_e=a("code"),Lzo=o("model.eval()"),yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=a("code"),xzo=o("model.train()"),$zo=l(),F(tv.$$.fragment),ROe=l(),td=a("h2"),av=a("a"),u_e=a("span"),F(Gy.$$.fragment),kzo=l(),b_e=a("span"),Szo=o("AutoModelForNextSentencePrediction"),POe=l(),Io=a("div"),F(Oy.$$.fragment),Rzo=l(),ad=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SX=a("a"),Bzo=o("from_pretrained()"),Izo=o(" class method or the "),RX=a("a"),Nzo=o("from_config()"),qzo=o(` class
method.`),jzo=l(),Vy=a("p"),Dzo=o("This class cannot be instantiated directly using "),v_e=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),mt=a("div"),F(Xy.$$.fragment),Xzo=l(),F_e=a("p"),zzo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qzo=l(),nd=a("p"),Wzo=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),Hzo=o("not"),Uzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Kzo=l(),F(nv.$$.fragment),Zzo=l(),to=a("div"),F(zy.$$.fragment),eQo=l(),M_e=a("p"),oQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rQo=l(),Da=a("p"),tQo=o("The model class to instantiate is selected based on the "),E_e=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),No=a("ul"),sv=a("li"),A_e=a("strong"),fQo=o("bert"),mQo=o(" \u2014 "),BX=a("a"),gQo=o("BertForNextSentencePrediction"),hQo=o(" (BERT model)"),pQo=l(),lv=a("li"),L_e=a("strong"),_Qo=o("fnet"),uQo=o(" \u2014 "),IX=a("a"),bQo=o("FNetForNextSentencePrediction"),vQo=o(" (FNet model)"),FQo=l(),iv=a("li"),y_e=a("strong"),TQo=o("megatron-bert"),MQo=o(" \u2014 "),NX=a("a"),EQo=o("MegatronBertForNextSentencePrediction"),CQo=o(" (Megatron-BERT model)"),wQo=l(),dv=a("li"),x_e=a("strong"),AQo=o("mobilebert"),LQo=o(" \u2014 "),qX=a("a"),yQo=o("MobileBertForNextSentencePrediction"),xQo=o(" (MobileBERT model)"),$Qo=l(),cv=a("li"),$_e=a("strong"),kQo=o("nezha"),SQo=o(" \u2014 "),jX=a("a"),RQo=o("NezhaForNextSentencePrediction"),PQo=o(" (Nezha model)"),BQo=l(),fv=a("li"),k_e=a("strong"),IQo=o("qdqbert"),NQo=o(" \u2014 "),DX=a("a"),qQo=o("QDQBertForNextSentencePrediction"),jQo=o(" (QDQBert model)"),DQo=l(),mv=a("p"),GQo=o("The model is set in evaluation mode by default using "),S_e=a("code"),OQo=o("model.eval()"),VQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),XQo=o("model.train()"),zQo=l(),F(gv.$$.fragment),BOe=l(),sd=a("h2"),hv=a("a"),P_e=a("span"),F(Qy.$$.fragment),QQo=l(),B_e=a("span"),WQo=o("AutoModelForTokenClassification"),IOe=l(),qo=a("div"),F(Wy.$$.fragment),HQo=l(),ld=a("p"),UQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GX=a("a"),JQo=o("from_pretrained()"),YQo=o(" class method or the "),OX=a("a"),KQo=o("from_config()"),ZQo=o(` class
method.`),eWo=l(),Hy=a("p"),oWo=o("This class cannot be instantiated directly using "),I_e=a("code"),rWo=o("__init__()"),tWo=o(" (throws an error)."),aWo=l(),gt=a("div"),F(Uy.$$.fragment),nWo=l(),N_e=a("p"),sWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lWo=l(),id=a("p"),iWo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),dWo=o("not"),cWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),fWo=o("from_pretrained()"),mWo=o(" to load the model weights."),gWo=l(),F(pv.$$.fragment),hWo=l(),ao=a("div"),F(Jy.$$.fragment),pWo=l(),j_e=a("p"),_Wo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uWo=l(),Ga=a("p"),bWo=o("The model class to instantiate is selected based on the "),D_e=a("code"),vWo=o("model_type"),FWo=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),TWo=o("pretrained_model_name_or_path"),MWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(":"),wWo=l(),H=a("ul"),_v=a("li"),V_e=a("strong"),AWo=o("albert"),LWo=o(" \u2014 "),XX=a("a"),yWo=o("AlbertForTokenClassification"),xWo=o(" (ALBERT model)"),$Wo=l(),uv=a("li"),X_e=a("strong"),kWo=o("bert"),SWo=o(" \u2014 "),zX=a("a"),RWo=o("BertForTokenClassification"),PWo=o(" (BERT model)"),BWo=l(),bv=a("li"),z_e=a("strong"),IWo=o("big_bird"),NWo=o(" \u2014 "),QX=a("a"),qWo=o("BigBirdForTokenClassification"),jWo=o(" (BigBird model)"),DWo=l(),vv=a("li"),Q_e=a("strong"),GWo=o("bloom"),OWo=o(" \u2014 "),WX=a("a"),VWo=o("BloomForTokenClassification"),XWo=o(" (BLOOM model)"),zWo=l(),Fv=a("li"),W_e=a("strong"),QWo=o("camembert"),WWo=o(" \u2014 "),HX=a("a"),HWo=o("CamembertForTokenClassification"),UWo=o(" (CamemBERT model)"),JWo=l(),Tv=a("li"),H_e=a("strong"),YWo=o("canine"),KWo=o(" \u2014 "),UX=a("a"),ZWo=o("CanineForTokenClassification"),eHo=o(" (CANINE model)"),oHo=l(),Mv=a("li"),U_e=a("strong"),rHo=o("convbert"),tHo=o(" \u2014 "),JX=a("a"),aHo=o("ConvBertForTokenClassification"),nHo=o(" (ConvBERT model)"),sHo=l(),Ev=a("li"),J_e=a("strong"),lHo=o("data2vec-text"),iHo=o(" \u2014 "),YX=a("a"),dHo=o("Data2VecTextForTokenClassification"),cHo=o(" (Data2VecText model)"),fHo=l(),Cv=a("li"),Y_e=a("strong"),mHo=o("deberta"),gHo=o(" \u2014 "),KX=a("a"),hHo=o("DebertaForTokenClassification"),pHo=o(" (DeBERTa model)"),_Ho=l(),wv=a("li"),K_e=a("strong"),uHo=o("deberta-v2"),bHo=o(" \u2014 "),ZX=a("a"),vHo=o("DebertaV2ForTokenClassification"),FHo=o(" (DeBERTa-v2 model)"),THo=l(),Av=a("li"),Z_e=a("strong"),MHo=o("distilbert"),EHo=o(" \u2014 "),ez=a("a"),CHo=o("DistilBertForTokenClassification"),wHo=o(" (DistilBERT model)"),AHo=l(),Lv=a("li"),eue=a("strong"),LHo=o("electra"),yHo=o(" \u2014 "),oz=a("a"),xHo=o("ElectraForTokenClassification"),$Ho=o(" (ELECTRA model)"),kHo=l(),yv=a("li"),oue=a("strong"),SHo=o("flaubert"),RHo=o(" \u2014 "),rz=a("a"),PHo=o("FlaubertForTokenClassification"),BHo=o(" (FlauBERT model)"),IHo=l(),xv=a("li"),rue=a("strong"),NHo=o("fnet"),qHo=o(" \u2014 "),tz=a("a"),jHo=o("FNetForTokenClassification"),DHo=o(" (FNet model)"),GHo=l(),$v=a("li"),tue=a("strong"),OHo=o("funnel"),VHo=o(" \u2014 "),az=a("a"),XHo=o("FunnelForTokenClassification"),zHo=o(" (Funnel Transformer model)"),QHo=l(),kv=a("li"),aue=a("strong"),WHo=o("gpt2"),HHo=o(" \u2014 "),nz=a("a"),UHo=o("GPT2ForTokenClassification"),JHo=o(" (OpenAI GPT-2 model)"),YHo=l(),Sv=a("li"),nue=a("strong"),KHo=o("ibert"),ZHo=o(" \u2014 "),sz=a("a"),eUo=o("IBertForTokenClassification"),oUo=o(" (I-BERT model)"),rUo=l(),Rv=a("li"),sue=a("strong"),tUo=o("layoutlm"),aUo=o(" \u2014 "),lz=a("a"),nUo=o("LayoutLMForTokenClassification"),sUo=o(" (LayoutLM model)"),lUo=l(),Pv=a("li"),lue=a("strong"),iUo=o("layoutlmv2"),dUo=o(" \u2014 "),iz=a("a"),cUo=o("LayoutLMv2ForTokenClassification"),fUo=o(" (LayoutLMv2 model)"),mUo=l(),Bv=a("li"),iue=a("strong"),gUo=o("layoutlmv3"),hUo=o(" \u2014 "),dz=a("a"),pUo=o("LayoutLMv3ForTokenClassification"),_Uo=o(" (LayoutLMv3 model)"),uUo=l(),Iv=a("li"),due=a("strong"),bUo=o("longformer"),vUo=o(" \u2014 "),cz=a("a"),FUo=o("LongformerForTokenClassification"),TUo=o(" (Longformer model)"),MUo=l(),Nv=a("li"),cue=a("strong"),EUo=o("megatron-bert"),CUo=o(" \u2014 "),fz=a("a"),wUo=o("MegatronBertForTokenClassification"),AUo=o(" (Megatron-BERT model)"),LUo=l(),qv=a("li"),fue=a("strong"),yUo=o("mobilebert"),xUo=o(" \u2014 "),mz=a("a"),$Uo=o("MobileBertForTokenClassification"),kUo=o(" (MobileBERT model)"),SUo=l(),jv=a("li"),mue=a("strong"),RUo=o("mpnet"),PUo=o(" \u2014 "),gz=a("a"),BUo=o("MPNetForTokenClassification"),IUo=o(" (MPNet model)"),NUo=l(),Dv=a("li"),gue=a("strong"),qUo=o("nezha"),jUo=o(" \u2014 "),hz=a("a"),DUo=o("NezhaForTokenClassification"),GUo=o(" (Nezha model)"),OUo=l(),Gv=a("li"),hue=a("strong"),VUo=o("nystromformer"),XUo=o(" \u2014 "),pz=a("a"),zUo=o("NystromformerForTokenClassification"),QUo=o(" (Nystr\xF6mformer model)"),WUo=l(),Ov=a("li"),pue=a("strong"),HUo=o("qdqbert"),UUo=o(" \u2014 "),_z=a("a"),JUo=o("QDQBertForTokenClassification"),YUo=o(" (QDQBert model)"),KUo=l(),Vv=a("li"),_ue=a("strong"),ZUo=o("rembert"),eJo=o(" \u2014 "),uz=a("a"),oJo=o("RemBertForTokenClassification"),rJo=o(" (RemBERT model)"),tJo=l(),Xv=a("li"),uue=a("strong"),aJo=o("roberta"),nJo=o(" \u2014 "),bz=a("a"),sJo=o("RobertaForTokenClassification"),lJo=o(" (RoBERTa model)"),iJo=l(),zv=a("li"),bue=a("strong"),dJo=o("roformer"),cJo=o(" \u2014 "),vz=a("a"),fJo=o("RoFormerForTokenClassification"),mJo=o(" (RoFormer model)"),gJo=l(),Qv=a("li"),vue=a("strong"),hJo=o("squeezebert"),pJo=o(" \u2014 "),Fz=a("a"),_Jo=o("SqueezeBertForTokenClassification"),uJo=o(" (SqueezeBERT model)"),bJo=l(),Wv=a("li"),Fue=a("strong"),vJo=o("xlm"),FJo=o(" \u2014 "),Tz=a("a"),TJo=o("XLMForTokenClassification"),MJo=o(" (XLM model)"),EJo=l(),Hv=a("li"),Tue=a("strong"),CJo=o("xlm-roberta"),wJo=o(" \u2014 "),Mz=a("a"),AJo=o("XLMRobertaForTokenClassification"),LJo=o(" (XLM-RoBERTa model)"),yJo=l(),Uv=a("li"),Mue=a("strong"),xJo=o("xlm-roberta-xl"),$Jo=o(" \u2014 "),Ez=a("a"),kJo=o("XLMRobertaXLForTokenClassification"),SJo=o(" (XLM-RoBERTa-XL model)"),RJo=l(),Jv=a("li"),Eue=a("strong"),PJo=o("xlnet"),BJo=o(" \u2014 "),Cz=a("a"),IJo=o("XLNetForTokenClassification"),NJo=o(" (XLNet model)"),qJo=l(),Yv=a("li"),Cue=a("strong"),jJo=o("yoso"),DJo=o(" \u2014 "),wz=a("a"),GJo=o("YosoForTokenClassification"),OJo=o(" (YOSO model)"),VJo=l(),Kv=a("p"),XJo=o("The model is set in evaluation mode by default using "),wue=a("code"),zJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),WJo=o("model.train()"),HJo=l(),F(Zv.$$.fragment),NOe=l(),dd=a("h2"),eF=a("a"),Lue=a("span"),F(Yy.$$.fragment),UJo=l(),yue=a("span"),JJo=o("AutoModelForQuestionAnswering"),qOe=l(),jo=a("div"),F(Ky.$$.fragment),YJo=l(),cd=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Az=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),Lz=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),Zy=a("p"),aYo=o("This class cannot be instantiated directly using "),xue=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),ht=a("div"),F(e8.$$.fragment),iYo=l(),$ue=a("p"),dYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cYo=l(),fd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),F(oF.$$.fragment),uYo=l(),no=a("div"),F(o8.$$.fragment),bYo=l(),Sue=a("p"),vYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FYo=l(),Oa=a("p"),TYo=o("The model class to instantiate is selected based on the "),Rue=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),AYo=o("pretrained_model_name_or_path"),LYo=o(":"),yYo=l(),V=a("ul"),rF=a("li"),Iue=a("strong"),xYo=o("albert"),$Yo=o(" \u2014 "),xz=a("a"),kYo=o("AlbertForQuestionAnswering"),SYo=o(" (ALBERT model)"),RYo=l(),tF=a("li"),Nue=a("strong"),PYo=o("bart"),BYo=o(" \u2014 "),$z=a("a"),IYo=o("BartForQuestionAnswering"),NYo=o(" (BART model)"),qYo=l(),aF=a("li"),que=a("strong"),jYo=o("bert"),DYo=o(" \u2014 "),kz=a("a"),GYo=o("BertForQuestionAnswering"),OYo=o(" (BERT model)"),VYo=l(),nF=a("li"),jue=a("strong"),XYo=o("big_bird"),zYo=o(" \u2014 "),Sz=a("a"),QYo=o("BigBirdForQuestionAnswering"),WYo=o(" (BigBird model)"),HYo=l(),sF=a("li"),Due=a("strong"),UYo=o("bigbird_pegasus"),JYo=o(" \u2014 "),Rz=a("a"),YYo=o("BigBirdPegasusForQuestionAnswering"),KYo=o(" (BigBird-Pegasus model)"),ZYo=l(),lF=a("li"),Gue=a("strong"),eKo=o("camembert"),oKo=o(" \u2014 "),Pz=a("a"),rKo=o("CamembertForQuestionAnswering"),tKo=o(" (CamemBERT model)"),aKo=l(),iF=a("li"),Oue=a("strong"),nKo=o("canine"),sKo=o(" \u2014 "),Bz=a("a"),lKo=o("CanineForQuestionAnswering"),iKo=o(" (CANINE model)"),dKo=l(),dF=a("li"),Vue=a("strong"),cKo=o("convbert"),fKo=o(" \u2014 "),Iz=a("a"),mKo=o("ConvBertForQuestionAnswering"),gKo=o(" (ConvBERT model)"),hKo=l(),cF=a("li"),Xue=a("strong"),pKo=o("data2vec-text"),_Ko=o(" \u2014 "),Nz=a("a"),uKo=o("Data2VecTextForQuestionAnswering"),bKo=o(" (Data2VecText model)"),vKo=l(),fF=a("li"),zue=a("strong"),FKo=o("deberta"),TKo=o(" \u2014 "),qz=a("a"),MKo=o("DebertaForQuestionAnswering"),EKo=o(" (DeBERTa model)"),CKo=l(),mF=a("li"),Que=a("strong"),wKo=o("deberta-v2"),AKo=o(" \u2014 "),jz=a("a"),LKo=o("DebertaV2ForQuestionAnswering"),yKo=o(" (DeBERTa-v2 model)"),xKo=l(),gF=a("li"),Wue=a("strong"),$Ko=o("distilbert"),kKo=o(" \u2014 "),Dz=a("a"),SKo=o("DistilBertForQuestionAnswering"),RKo=o(" (DistilBERT model)"),PKo=l(),hF=a("li"),Hue=a("strong"),BKo=o("electra"),IKo=o(" \u2014 "),Gz=a("a"),NKo=o("ElectraForQuestionAnswering"),qKo=o(" (ELECTRA model)"),jKo=l(),pF=a("li"),Uue=a("strong"),DKo=o("flaubert"),GKo=o(" \u2014 "),Oz=a("a"),OKo=o("FlaubertForQuestionAnsweringSimple"),VKo=o(" (FlauBERT model)"),XKo=l(),_F=a("li"),Jue=a("strong"),zKo=o("fnet"),QKo=o(" \u2014 "),Vz=a("a"),WKo=o("FNetForQuestionAnswering"),HKo=o(" (FNet model)"),UKo=l(),uF=a("li"),Yue=a("strong"),JKo=o("funnel"),YKo=o(" \u2014 "),Xz=a("a"),KKo=o("FunnelForQuestionAnswering"),ZKo=o(" (Funnel Transformer model)"),eZo=l(),bF=a("li"),Kue=a("strong"),oZo=o("gptj"),rZo=o(" \u2014 "),zz=a("a"),tZo=o("GPTJForQuestionAnswering"),aZo=o(" (GPT-J model)"),nZo=l(),vF=a("li"),Zue=a("strong"),sZo=o("ibert"),lZo=o(" \u2014 "),Qz=a("a"),iZo=o("IBertForQuestionAnswering"),dZo=o(" (I-BERT model)"),cZo=l(),FF=a("li"),e1e=a("strong"),fZo=o("layoutlmv2"),mZo=o(" \u2014 "),Wz=a("a"),gZo=o("LayoutLMv2ForQuestionAnswering"),hZo=o(" (LayoutLMv2 model)"),pZo=l(),TF=a("li"),o1e=a("strong"),_Zo=o("layoutlmv3"),uZo=o(" \u2014 "),Hz=a("a"),bZo=o("LayoutLMv3ForQuestionAnswering"),vZo=o(" (LayoutLMv3 model)"),FZo=l(),MF=a("li"),r1e=a("strong"),TZo=o("led"),MZo=o(" \u2014 "),Uz=a("a"),EZo=o("LEDForQuestionAnswering"),CZo=o(" (LED model)"),wZo=l(),EF=a("li"),t1e=a("strong"),AZo=o("longformer"),LZo=o(" \u2014 "),Jz=a("a"),yZo=o("LongformerForQuestionAnswering"),xZo=o(" (Longformer model)"),$Zo=l(),CF=a("li"),a1e=a("strong"),kZo=o("lxmert"),SZo=o(" \u2014 "),Yz=a("a"),RZo=o("LxmertForQuestionAnswering"),PZo=o(" (LXMERT model)"),BZo=l(),wF=a("li"),n1e=a("strong"),IZo=o("mbart"),NZo=o(" \u2014 "),Kz=a("a"),qZo=o("MBartForQuestionAnswering"),jZo=o(" (mBART model)"),DZo=l(),AF=a("li"),s1e=a("strong"),GZo=o("megatron-bert"),OZo=o(" \u2014 "),Zz=a("a"),VZo=o("MegatronBertForQuestionAnswering"),XZo=o(" (Megatron-BERT model)"),zZo=l(),LF=a("li"),l1e=a("strong"),QZo=o("mobilebert"),WZo=o(" \u2014 "),eQ=a("a"),HZo=o("MobileBertForQuestionAnswering"),UZo=o(" (MobileBERT model)"),JZo=l(),yF=a("li"),i1e=a("strong"),YZo=o("mpnet"),KZo=o(" \u2014 "),oQ=a("a"),ZZo=o("MPNetForQuestionAnswering"),eer=o(" (MPNet model)"),oer=l(),xF=a("li"),d1e=a("strong"),rer=o("nezha"),ter=o(" \u2014 "),rQ=a("a"),aer=o("NezhaForQuestionAnswering"),ner=o(" (Nezha model)"),ser=l(),$F=a("li"),c1e=a("strong"),ler=o("nystromformer"),ier=o(" \u2014 "),tQ=a("a"),der=o("NystromformerForQuestionAnswering"),cer=o(" (Nystr\xF6mformer model)"),fer=l(),kF=a("li"),f1e=a("strong"),mer=o("qdqbert"),ger=o(" \u2014 "),aQ=a("a"),her=o("QDQBertForQuestionAnswering"),per=o(" (QDQBert model)"),_er=l(),SF=a("li"),m1e=a("strong"),uer=o("reformer"),ber=o(" \u2014 "),nQ=a("a"),ver=o("ReformerForQuestionAnswering"),Fer=o(" (Reformer model)"),Ter=l(),RF=a("li"),g1e=a("strong"),Mer=o("rembert"),Eer=o(" \u2014 "),sQ=a("a"),Cer=o("RemBertForQuestionAnswering"),wer=o(" (RemBERT model)"),Aer=l(),PF=a("li"),h1e=a("strong"),Ler=o("roberta"),yer=o(" \u2014 "),lQ=a("a"),xer=o("RobertaForQuestionAnswering"),$er=o(" (RoBERTa model)"),ker=l(),BF=a("li"),p1e=a("strong"),Ser=o("roformer"),Rer=o(" \u2014 "),iQ=a("a"),Per=o("RoFormerForQuestionAnswering"),Ber=o(" (RoFormer model)"),Ier=l(),IF=a("li"),_1e=a("strong"),Ner=o("splinter"),qer=o(" \u2014 "),dQ=a("a"),jer=o("SplinterForQuestionAnswering"),Der=o(" (Splinter model)"),Ger=l(),NF=a("li"),u1e=a("strong"),Oer=o("squeezebert"),Ver=o(" \u2014 "),cQ=a("a"),Xer=o("SqueezeBertForQuestionAnswering"),zer=o(" (SqueezeBERT model)"),Qer=l(),qF=a("li"),b1e=a("strong"),Wer=o("xlm"),Her=o(" \u2014 "),fQ=a("a"),Uer=o("XLMForQuestionAnsweringSimple"),Jer=o(" (XLM model)"),Yer=l(),jF=a("li"),v1e=a("strong"),Ker=o("xlm-roberta"),Zer=o(" \u2014 "),mQ=a("a"),eor=o("XLMRobertaForQuestionAnswering"),oor=o(" (XLM-RoBERTa model)"),ror=l(),DF=a("li"),F1e=a("strong"),tor=o("xlm-roberta-xl"),aor=o(" \u2014 "),gQ=a("a"),nor=o("XLMRobertaXLForQuestionAnswering"),sor=o(" (XLM-RoBERTa-XL model)"),lor=l(),GF=a("li"),T1e=a("strong"),ior=o("xlnet"),dor=o(" \u2014 "),hQ=a("a"),cor=o("XLNetForQuestionAnsweringSimple"),mor=o(" (XLNet model)"),gor=l(),OF=a("li"),M1e=a("strong"),hor=o("yoso"),por=o(" \u2014 "),pQ=a("a"),_or=o("YosoForQuestionAnswering"),uor=o(" (YOSO model)"),bor=l(),VF=a("p"),vor=o("The model is set in evaluation mode by default using "),E1e=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),Mor=o("model.train()"),Eor=l(),F(XF.$$.fragment),jOe=l(),md=a("h2"),zF=a("a"),w1e=a("span"),F(r8.$$.fragment),Cor=l(),A1e=a("span"),wor=o("AutoModelForTableQuestionAnswering"),DOe=l(),Do=a("div"),F(t8.$$.fragment),Aor=l(),gd=a("p"),Lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Q=a("a"),yor=o("from_pretrained()"),xor=o(" class method or the "),uQ=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),a8=a("p"),Ror=o("This class cannot be instantiated directly using "),L1e=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),pt=a("div"),F(n8.$$.fragment),Nor=l(),y1e=a("p"),qor=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jor=l(),hd=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(QF.$$.fragment),Qor=l(),so=a("div"),F(s8.$$.fragment),Wor=l(),$1e=a("p"),Hor=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Uor=l(),Va=a("p"),Jor=o("The model class to instantiate is selected based on the "),k1e=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),P1e=a("ul"),WF=a("li"),B1e=a("strong"),arr=o("tapas"),nrr=o(" \u2014 "),vQ=a("a"),srr=o("TapasForQuestionAnswering"),lrr=o(" (TAPAS model)"),irr=l(),HF=a("p"),drr=o("The model is set in evaluation mode by default using "),I1e=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=a("code"),mrr=o("model.train()"),grr=l(),F(UF.$$.fragment),GOe=l(),pd=a("h2"),JF=a("a"),q1e=a("span"),F(l8.$$.fragment),hrr=l(),j1e=a("span"),prr=o("AutoModelForImageClassification"),OOe=l(),Go=a("div"),F(i8.$$.fragment),_rr=l(),_d=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),TQ=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),d8=a("p"),Err=o("This class cannot be instantiated directly using "),D1e=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),_t=a("div"),F(c8.$$.fragment),Lrr=l(),G1e=a("p"),yrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xrr=l(),ud=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(YF.$$.fragment),Irr=l(),lo=a("div"),F(f8.$$.fragment),Nrr=l(),V1e=a("p"),qrr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jrr=l(),Xa=a("p"),Drr=o("The model class to instantiate is selected based on the "),X1e=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),zrr=o("pretrained_model_name_or_path"),Qrr=o(":"),Wrr=l(),Fe=a("ul"),KF=a("li"),W1e=a("strong"),Hrr=o("beit"),Urr=o(" \u2014 "),EQ=a("a"),Jrr=o("BeitForImageClassification"),Yrr=o(" (BEiT model)"),Krr=l(),ZF=a("li"),H1e=a("strong"),Zrr=o("convnext"),etr=o(" \u2014 "),CQ=a("a"),otr=o("ConvNextForImageClassification"),rtr=o(" (ConvNeXT model)"),ttr=l(),eT=a("li"),U1e=a("strong"),atr=o("cvt"),ntr=o(" \u2014 "),wQ=a("a"),str=o("CvtForImageClassification"),ltr=o(" (CvT model)"),itr=l(),oT=a("li"),J1e=a("strong"),dtr=o("data2vec-vision"),ctr=o(" \u2014 "),AQ=a("a"),ftr=o("Data2VecVisionForImageClassification"),mtr=o(" (Data2VecVision model)"),gtr=l(),zs=a("li"),Y1e=a("strong"),htr=o("deit"),ptr=o(" \u2014 "),LQ=a("a"),_tr=o("DeiTForImageClassification"),utr=o(" or "),yQ=a("a"),btr=o("DeiTForImageClassificationWithTeacher"),vtr=o(" (DeiT model)"),Ftr=l(),rT=a("li"),K1e=a("strong"),Ttr=o("imagegpt"),Mtr=o(" \u2014 "),xQ=a("a"),Etr=o("ImageGPTForImageClassification"),Ctr=o(" (ImageGPT model)"),wtr=l(),Qs=a("li"),Z1e=a("strong"),Atr=o("levit"),Ltr=o(" \u2014 "),$Q=a("a"),ytr=o("LevitForImageClassification"),xtr=o(" or "),kQ=a("a"),$tr=o("LevitForImageClassificationWithTeacher"),ktr=o(" (LeViT model)"),Str=l(),ut=a("li"),e3e=a("strong"),Rtr=o("perceiver"),Ptr=o(" \u2014 "),SQ=a("a"),Btr=o("PerceiverForImageClassificationLearned"),Itr=o(" or "),RQ=a("a"),Ntr=o("PerceiverForImageClassificationFourier"),qtr=o(" or "),PQ=a("a"),jtr=o("PerceiverForImageClassificationConvProcessing"),Dtr=o(" (Perceiver model)"),Gtr=l(),tT=a("li"),o3e=a("strong"),Otr=o("poolformer"),Vtr=o(" \u2014 "),BQ=a("a"),Xtr=o("PoolFormerForImageClassification"),ztr=o(" (PoolFormer model)"),Qtr=l(),aT=a("li"),r3e=a("strong"),Wtr=o("regnet"),Htr=o(" \u2014 "),IQ=a("a"),Utr=o("RegNetForImageClassification"),Jtr=o(" (RegNet model)"),Ytr=l(),nT=a("li"),t3e=a("strong"),Ktr=o("resnet"),Ztr=o(" \u2014 "),NQ=a("a"),ear=o("ResNetForImageClassification"),oar=o(" (ResNet model)"),rar=l(),sT=a("li"),a3e=a("strong"),tar=o("segformer"),aar=o(" \u2014 "),qQ=a("a"),nar=o("SegformerForImageClassification"),sar=o(" (SegFormer model)"),lar=l(),lT=a("li"),n3e=a("strong"),iar=o("swin"),dar=o(" \u2014 "),jQ=a("a"),car=o("SwinForImageClassification"),far=o(" (Swin Transformer model)"),mar=l(),iT=a("li"),s3e=a("strong"),gar=o("van"),har=o(" \u2014 "),DQ=a("a"),par=o("VanForImageClassification"),_ar=o(" (VAN model)"),uar=l(),dT=a("li"),l3e=a("strong"),bar=o("vit"),Far=o(" \u2014 "),GQ=a("a"),Tar=o("ViTForImageClassification"),Mar=o(" (ViT model)"),Ear=l(),cT=a("p"),Car=o("The model is set in evaluation mode by default using "),i3e=a("code"),war=o("model.eval()"),Aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d3e=a("code"),Lar=o("model.train()"),yar=l(),F(fT.$$.fragment),VOe=l(),bd=a("h2"),mT=a("a"),c3e=a("span"),F(m8.$$.fragment),xar=l(),f3e=a("span"),$ar=o("AutoModelForVision2Seq"),XOe=l(),Oo=a("div"),F(g8.$$.fragment),kar=l(),vd=a("p"),Sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=a("a"),Rar=o("from_pretrained()"),Par=o(" class method or the "),VQ=a("a"),Bar=o("from_config()"),Iar=o(` class
method.`),Nar=l(),h8=a("p"),qar=o("This class cannot be instantiated directly using "),m3e=a("code"),jar=o("__init__()"),Dar=o(" (throws an error)."),Gar=l(),bt=a("div"),F(p8.$$.fragment),Oar=l(),g3e=a("p"),Var=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xar=l(),Fd=a("p"),zar=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),Qar=o("not"),War=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Har=o("from_pretrained()"),Uar=o(" to load the model weights."),Jar=l(),F(gT.$$.fragment),Yar=l(),io=a("div"),F(_8.$$.fragment),Kar=l(),p3e=a("p"),Zar=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),enr=l(),za=a("p"),onr=o("The model class to instantiate is selected based on the "),_3e=a("code"),rnr=o("model_type"),tnr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),snr=o("pretrained_model_name_or_path"),lnr=o(":"),inr=l(),v3e=a("ul"),hT=a("li"),F3e=a("strong"),dnr=o("vision-encoder-decoder"),cnr=o(" \u2014 "),zQ=a("a"),fnr=o("VisionEncoderDecoderModel"),mnr=o(" (Vision Encoder decoder model)"),gnr=l(),pT=a("p"),hnr=o("The model is set in evaluation mode by default using "),T3e=a("code"),pnr=o("model.eval()"),_nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M3e=a("code"),unr=o("model.train()"),bnr=l(),F(_T.$$.fragment),zOe=l(),Td=a("h2"),uT=a("a"),E3e=a("span"),F(u8.$$.fragment),vnr=l(),C3e=a("span"),Fnr=o("AutoModelForVisualQuestionAnswering"),QOe=l(),Vo=a("div"),F(b8.$$.fragment),Tnr=l(),Md=a("p"),Mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QQ=a("a"),Enr=o("from_pretrained()"),Cnr=o(" class method or the "),WQ=a("a"),wnr=o("from_config()"),Anr=o(` class
method.`),Lnr=l(),v8=a("p"),ynr=o("This class cannot be instantiated directly using "),w3e=a("code"),xnr=o("__init__()"),$nr=o(" (throws an error)."),knr=l(),vt=a("div"),F(F8.$$.fragment),Snr=l(),A3e=a("p"),Rnr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Pnr=l(),Ed=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),Inr=o("not"),Nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),qnr=o("from_pretrained()"),jnr=o(" to load the model weights."),Dnr=l(),F(bT.$$.fragment),Gnr=l(),co=a("div"),F(T8.$$.fragment),Onr=l(),y3e=a("p"),Vnr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Xnr=l(),Qa=a("p"),znr=o("The model class to instantiate is selected based on the "),x3e=a("code"),Qnr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),Hnr=o("pretrained_model_name_or_path"),Unr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(":"),Knr=l(),S3e=a("ul"),vT=a("li"),R3e=a("strong"),Znr=o("vilt"),esr=o(" \u2014 "),UQ=a("a"),osr=o("ViltForQuestionAnswering"),rsr=o(" (ViLT model)"),tsr=l(),FT=a("p"),asr=o("The model is set in evaluation mode by default using "),P3e=a("code"),nsr=o("model.eval()"),ssr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B3e=a("code"),lsr=o("model.train()"),isr=l(),F(TT.$$.fragment),WOe=l(),Cd=a("h2"),MT=a("a"),I3e=a("span"),F(M8.$$.fragment),dsr=l(),N3e=a("span"),csr=o("AutoModelForAudioClassification"),HOe=l(),Xo=a("div"),F(E8.$$.fragment),fsr=l(),wd=a("p"),msr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JQ=a("a"),gsr=o("from_pretrained()"),hsr=o(" class method or the "),YQ=a("a"),psr=o("from_config()"),_sr=o(` class
method.`),usr=l(),C8=a("p"),bsr=o("This class cannot be instantiated directly using "),q3e=a("code"),vsr=o("__init__()"),Fsr=o(" (throws an error)."),Tsr=l(),Ft=a("div"),F(w8.$$.fragment),Msr=l(),j3e=a("p"),Esr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Csr=l(),Ad=a("p"),wsr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),Asr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),ysr=o("from_pretrained()"),xsr=o(" to load the model weights."),$sr=l(),F(ET.$$.fragment),ksr=l(),fo=a("div"),F(A8.$$.fragment),Ssr=l(),G3e=a("p"),Rsr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Psr=l(),Wa=a("p"),Bsr=o("The model class to instantiate is selected based on the "),O3e=a("code"),Isr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),qsr=o("pretrained_model_name_or_path"),jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),Dsr=o("pretrained_model_name_or_path"),Gsr=o(":"),Osr=l(),Pe=a("ul"),CT=a("li"),z3e=a("strong"),Vsr=o("data2vec-audio"),Xsr=o(" \u2014 "),ZQ=a("a"),zsr=o("Data2VecAudioForSequenceClassification"),Qsr=o(" (Data2VecAudio model)"),Wsr=l(),wT=a("li"),Q3e=a("strong"),Hsr=o("hubert"),Usr=o(" \u2014 "),eW=a("a"),Jsr=o("HubertForSequenceClassification"),Ysr=o(" (Hubert model)"),Ksr=l(),AT=a("li"),W3e=a("strong"),Zsr=o("sew"),elr=o(" \u2014 "),oW=a("a"),olr=o("SEWForSequenceClassification"),rlr=o(" (SEW model)"),tlr=l(),LT=a("li"),H3e=a("strong"),alr=o("sew-d"),nlr=o(" \u2014 "),rW=a("a"),slr=o("SEWDForSequenceClassification"),llr=o(" (SEW-D model)"),ilr=l(),yT=a("li"),U3e=a("strong"),dlr=o("unispeech"),clr=o(" \u2014 "),tW=a("a"),flr=o("UniSpeechForSequenceClassification"),mlr=o(" (UniSpeech model)"),glr=l(),xT=a("li"),J3e=a("strong"),hlr=o("unispeech-sat"),plr=o(" \u2014 "),aW=a("a"),_lr=o("UniSpeechSatForSequenceClassification"),ulr=o(" (UniSpeechSat model)"),blr=l(),$T=a("li"),Y3e=a("strong"),vlr=o("wav2vec2"),Flr=o(" \u2014 "),nW=a("a"),Tlr=o("Wav2Vec2ForSequenceClassification"),Mlr=o(" (Wav2Vec2 model)"),Elr=l(),kT=a("li"),K3e=a("strong"),Clr=o("wav2vec2-conformer"),wlr=o(" \u2014 "),sW=a("a"),Alr=o("Wav2Vec2ConformerForSequenceClassification"),Llr=o(" (Wav2Vec2-Conformer model)"),ylr=l(),ST=a("li"),Z3e=a("strong"),xlr=o("wavlm"),$lr=o(" \u2014 "),lW=a("a"),klr=o("WavLMForSequenceClassification"),Slr=o(" (WavLM model)"),Rlr=l(),RT=a("p"),Plr=o("The model is set in evaluation mode by default using "),e2e=a("code"),Blr=o("model.eval()"),Ilr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=a("code"),Nlr=o("model.train()"),qlr=l(),F(PT.$$.fragment),UOe=l(),Ld=a("h2"),BT=a("a"),r2e=a("span"),F(L8.$$.fragment),jlr=l(),t2e=a("span"),Dlr=o("AutoModelForAudioFrameClassification"),JOe=l(),zo=a("div"),F(y8.$$.fragment),Glr=l(),yd=a("p"),Olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iW=a("a"),Vlr=o("from_pretrained()"),Xlr=o(" class method or the "),dW=a("a"),zlr=o("from_config()"),Qlr=o(` class
method.`),Wlr=l(),x8=a("p"),Hlr=o("This class cannot be instantiated directly using "),a2e=a("code"),Ulr=o("__init__()"),Jlr=o(" (throws an error)."),Ylr=l(),Tt=a("div"),F($8.$$.fragment),Klr=l(),n2e=a("p"),Zlr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eir=l(),xd=a("p"),oir=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),rir=o("not"),tir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),air=o("from_pretrained()"),nir=o(" to load the model weights."),sir=l(),F(IT.$$.fragment),lir=l(),mo=a("div"),F(k8.$$.fragment),iir=l(),l2e=a("p"),dir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),cir=l(),Ha=a("p"),fir=o("The model class to instantiate is selected based on the "),i2e=a("code"),mir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),hir=o("pretrained_model_name_or_path"),pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),_ir=o("pretrained_model_name_or_path"),uir=o(":"),bir=l(),et=a("ul"),NT=a("li"),f2e=a("strong"),vir=o("data2vec-audio"),Fir=o(" \u2014 "),fW=a("a"),Tir=o("Data2VecAudioForAudioFrameClassification"),Mir=o(" (Data2VecAudio model)"),Eir=l(),qT=a("li"),m2e=a("strong"),Cir=o("unispeech-sat"),wir=o(" \u2014 "),mW=a("a"),Air=o("UniSpeechSatForAudioFrameClassification"),Lir=o(" (UniSpeechSat model)"),yir=l(),jT=a("li"),g2e=a("strong"),xir=o("wav2vec2"),$ir=o(" \u2014 "),gW=a("a"),kir=o("Wav2Vec2ForAudioFrameClassification"),Sir=o(" (Wav2Vec2 model)"),Rir=l(),DT=a("li"),h2e=a("strong"),Pir=o("wav2vec2-conformer"),Bir=o(" \u2014 "),hW=a("a"),Iir=o("Wav2Vec2ConformerForAudioFrameClassification"),Nir=o(" (Wav2Vec2-Conformer model)"),qir=l(),GT=a("li"),p2e=a("strong"),jir=o("wavlm"),Dir=o(" \u2014 "),pW=a("a"),Gir=o("WavLMForAudioFrameClassification"),Oir=o(" (WavLM model)"),Vir=l(),OT=a("p"),Xir=o("The model is set in evaluation mode by default using "),_2e=a("code"),zir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),Wir=o("model.train()"),Hir=l(),F(VT.$$.fragment),YOe=l(),$d=a("h2"),XT=a("a"),b2e=a("span"),F(S8.$$.fragment),Uir=l(),v2e=a("span"),Jir=o("AutoModelForCTC"),KOe=l(),Qo=a("div"),F(R8.$$.fragment),Yir=l(),kd=a("p"),Kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_W=a("a"),Zir=o("from_pretrained()"),edr=o(" class method or the "),uW=a("a"),odr=o("from_config()"),rdr=o(` class
method.`),tdr=l(),P8=a("p"),adr=o("This class cannot be instantiated directly using "),F2e=a("code"),ndr=o("__init__()"),sdr=o(" (throws an error)."),ldr=l(),Mt=a("div"),F(B8.$$.fragment),idr=l(),T2e=a("p"),ddr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cdr=l(),Sd=a("p"),fdr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),mdr=o("not"),gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),hdr=o("from_pretrained()"),pdr=o(" to load the model weights."),_dr=l(),F(zT.$$.fragment),udr=l(),go=a("div"),F(I8.$$.fragment),bdr=l(),E2e=a("p"),vdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fdr=l(),Ua=a("p"),Tdr=o("The model class to instantiate is selected based on the "),C2e=a("code"),Mdr=o("model_type"),Edr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),Adr=o("pretrained_model_name_or_path"),Ldr=o(":"),ydr=l(),Le=a("ul"),QT=a("li"),L2e=a("strong"),xdr=o("data2vec-audio"),$dr=o(" \u2014 "),vW=a("a"),kdr=o("Data2VecAudioForCTC"),Sdr=o(" (Data2VecAudio model)"),Rdr=l(),WT=a("li"),y2e=a("strong"),Pdr=o("hubert"),Bdr=o(" \u2014 "),FW=a("a"),Idr=o("HubertForCTC"),Ndr=o(" (Hubert model)"),qdr=l(),HT=a("li"),x2e=a("strong"),jdr=o("mctct"),Ddr=o(" \u2014 "),TW=a("a"),Gdr=o("MCTCTForCTC"),Odr=o(" (M-CTC-T model)"),Vdr=l(),UT=a("li"),$2e=a("strong"),Xdr=o("sew"),zdr=o(" \u2014 "),MW=a("a"),Qdr=o("SEWForCTC"),Wdr=o(" (SEW model)"),Hdr=l(),JT=a("li"),k2e=a("strong"),Udr=o("sew-d"),Jdr=o(" \u2014 "),EW=a("a"),Ydr=o("SEWDForCTC"),Kdr=o(" (SEW-D model)"),Zdr=l(),YT=a("li"),S2e=a("strong"),ecr=o("unispeech"),ocr=o(" \u2014 "),CW=a("a"),rcr=o("UniSpeechForCTC"),tcr=o(" (UniSpeech model)"),acr=l(),KT=a("li"),R2e=a("strong"),ncr=o("unispeech-sat"),scr=o(" \u2014 "),wW=a("a"),lcr=o("UniSpeechSatForCTC"),icr=o(" (UniSpeechSat model)"),dcr=l(),ZT=a("li"),P2e=a("strong"),ccr=o("wav2vec2"),fcr=o(" \u2014 "),AW=a("a"),mcr=o("Wav2Vec2ForCTC"),gcr=o(" (Wav2Vec2 model)"),hcr=l(),e7=a("li"),B2e=a("strong"),pcr=o("wav2vec2-conformer"),_cr=o(" \u2014 "),LW=a("a"),ucr=o("Wav2Vec2ConformerForCTC"),bcr=o(" (Wav2Vec2-Conformer model)"),vcr=l(),o7=a("li"),I2e=a("strong"),Fcr=o("wavlm"),Tcr=o(" \u2014 "),yW=a("a"),Mcr=o("WavLMForCTC"),Ecr=o(" (WavLM model)"),Ccr=l(),r7=a("p"),wcr=o("The model is set in evaluation mode by default using "),N2e=a("code"),Acr=o("model.eval()"),Lcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),ycr=o("model.train()"),xcr=l(),F(t7.$$.fragment),ZOe=l(),Rd=a("h2"),a7=a("a"),j2e=a("span"),F(N8.$$.fragment),$cr=l(),D2e=a("span"),kcr=o("AutoModelForSpeechSeq2Seq"),eVe=l(),Wo=a("div"),F(q8.$$.fragment),Scr=l(),Pd=a("p"),Rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xW=a("a"),Pcr=o("from_pretrained()"),Bcr=o(" class method or the "),$W=a("a"),Icr=o("from_config()"),Ncr=o(` class
method.`),qcr=l(),j8=a("p"),jcr=o("This class cannot be instantiated directly using "),G2e=a("code"),Dcr=o("__init__()"),Gcr=o(" (throws an error)."),Ocr=l(),Et=a("div"),F(D8.$$.fragment),Vcr=l(),O2e=a("p"),Xcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zcr=l(),Bd=a("p"),Qcr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),Wcr=o("not"),Hcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" to load the model weights."),Ycr=l(),F(n7.$$.fragment),Kcr=l(),ho=a("div"),F(G8.$$.fragment),Zcr=l(),X2e=a("p"),efr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ofr=l(),Ja=a("p"),rfr=o("The model class to instantiate is selected based on the "),z2e=a("code"),tfr=o("model_type"),afr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(":"),dfr=l(),O8=a("ul"),s7=a("li"),H2e=a("strong"),cfr=o("speech-encoder-decoder"),ffr=o(" \u2014 "),SW=a("a"),mfr=o("SpeechEncoderDecoderModel"),gfr=o(" (Speech Encoder decoder model)"),hfr=l(),l7=a("li"),U2e=a("strong"),pfr=o("speech_to_text"),_fr=o(" \u2014 "),RW=a("a"),ufr=o("Speech2TextForConditionalGeneration"),bfr=o(" (Speech2Text model)"),vfr=l(),i7=a("p"),Ffr=o("The model is set in evaluation mode by default using "),J2e=a("code"),Tfr=o("model.eval()"),Mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=a("code"),Efr=o("model.train()"),Cfr=l(),F(d7.$$.fragment),oVe=l(),Id=a("h2"),c7=a("a"),K2e=a("span"),F(V8.$$.fragment),wfr=l(),Z2e=a("span"),Afr=o("AutoModelForAudioXVector"),rVe=l(),Ho=a("div"),F(X8.$$.fragment),Lfr=l(),Nd=a("p"),yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PW=a("a"),xfr=o("from_pretrained()"),$fr=o(" class method or the "),BW=a("a"),kfr=o("from_config()"),Sfr=o(` class
method.`),Rfr=l(),z8=a("p"),Pfr=o("This class cannot be instantiated directly using "),ebe=a("code"),Bfr=o("__init__()"),Ifr=o(" (throws an error)."),Nfr=l(),Ct=a("div"),F(Q8.$$.fragment),qfr=l(),obe=a("p"),jfr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dfr=l(),qd=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Ofr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Xfr=o("from_pretrained()"),zfr=o(" to load the model weights."),Qfr=l(),F(f7.$$.fragment),Wfr=l(),po=a("div"),F(W8.$$.fragment),Hfr=l(),tbe=a("p"),Ufr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jfr=l(),Ya=a("p"),Yfr=o("The model class to instantiate is selected based on the "),abe=a("code"),Kfr=o("model_type"),Zfr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),ot=a("ul"),m7=a("li"),lbe=a("strong"),nmr=o("data2vec-audio"),smr=o(" \u2014 "),NW=a("a"),lmr=o("Data2VecAudioForXVector"),imr=o(" (Data2VecAudio model)"),dmr=l(),g7=a("li"),ibe=a("strong"),cmr=o("unispeech-sat"),fmr=o(" \u2014 "),qW=a("a"),mmr=o("UniSpeechSatForXVector"),gmr=o(" (UniSpeechSat model)"),hmr=l(),h7=a("li"),dbe=a("strong"),pmr=o("wav2vec2"),_mr=o(" \u2014 "),jW=a("a"),umr=o("Wav2Vec2ForXVector"),bmr=o(" (Wav2Vec2 model)"),vmr=l(),p7=a("li"),cbe=a("strong"),Fmr=o("wav2vec2-conformer"),Tmr=o(" \u2014 "),DW=a("a"),Mmr=o("Wav2Vec2ConformerForXVector"),Emr=o(" (Wav2Vec2-Conformer model)"),Cmr=l(),_7=a("li"),fbe=a("strong"),wmr=o("wavlm"),Amr=o(" \u2014 "),GW=a("a"),Lmr=o("WavLMForXVector"),ymr=o(" (WavLM model)"),xmr=l(),u7=a("p"),$mr=o("The model is set in evaluation mode by default using "),mbe=a("code"),kmr=o("model.eval()"),Smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),Rmr=o("model.train()"),Pmr=l(),F(b7.$$.fragment),tVe=l(),jd=a("h2"),v7=a("a"),hbe=a("span"),F(H8.$$.fragment),Bmr=l(),pbe=a("span"),Imr=o("AutoModelForMaskedImageModeling"),aVe=l(),Uo=a("div"),F(U8.$$.fragment),Nmr=l(),Dd=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OW=a("a"),jmr=o("from_pretrained()"),Dmr=o(" class method or the "),VW=a("a"),Gmr=o("from_config()"),Omr=o(` class
method.`),Vmr=l(),J8=a("p"),Xmr=o("This class cannot be instantiated directly using "),_be=a("code"),zmr=o("__init__()"),Qmr=o(" (throws an error)."),Wmr=l(),wt=a("div"),F(Y8.$$.fragment),Hmr=l(),ube=a("p"),Umr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Jmr=l(),Gd=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),egr=o("from_pretrained()"),ogr=o(" to load the model weights."),rgr=l(),F(F7.$$.fragment),tgr=l(),_o=a("div"),F(K8.$$.fragment),agr=l(),vbe=a("p"),ngr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),sgr=l(),Ka=a("p"),lgr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),Od=a("ul"),T7=a("li"),Ebe=a("strong"),pgr=o("deit"),_gr=o(" \u2014 "),zW=a("a"),ugr=o("DeiTForMaskedImageModeling"),bgr=o(" (DeiT model)"),vgr=l(),M7=a("li"),Cbe=a("strong"),Fgr=o("swin"),Tgr=o(" \u2014 "),QW=a("a"),Mgr=o("SwinForMaskedImageModeling"),Egr=o(" (Swin Transformer model)"),Cgr=l(),E7=a("li"),wbe=a("strong"),wgr=o("vit"),Agr=o(" \u2014 "),WW=a("a"),Lgr=o("ViTForMaskedImageModeling"),ygr=o(" (ViT model)"),xgr=l(),C7=a("p"),$gr=o("The model is set in evaluation mode by default using "),Abe=a("code"),kgr=o("model.eval()"),Sgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),Rgr=o("model.train()"),Pgr=l(),F(w7.$$.fragment),nVe=l(),Vd=a("h2"),A7=a("a"),ybe=a("span"),F(Z8.$$.fragment),Bgr=l(),xbe=a("span"),Igr=o("AutoModelForObjectDetection"),sVe=l(),Jo=a("div"),F(e9.$$.fragment),Ngr=l(),Xd=a("p"),qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HW=a("a"),jgr=o("from_pretrained()"),Dgr=o(" class method or the "),UW=a("a"),Ggr=o("from_config()"),Ogr=o(` class
method.`),Vgr=l(),o9=a("p"),Xgr=o("This class cannot be instantiated directly using "),$be=a("code"),zgr=o("__init__()"),Qgr=o(" (throws an error)."),Wgr=l(),At=a("div"),F(r9.$$.fragment),Hgr=l(),kbe=a("p"),Ugr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Jgr=l(),zd=a("p"),Ygr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Kgr=o("not"),Zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),ehr=o("from_pretrained()"),ohr=o(" to load the model weights."),rhr=l(),F(L7.$$.fragment),thr=l(),uo=a("div"),F(t9.$$.fragment),ahr=l(),Rbe=a("p"),nhr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),shr=l(),Za=a("p"),lhr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),ihr=o("model_type"),dhr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),chr=o("pretrained_model_name_or_path"),fhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),mhr=o("pretrained_model_name_or_path"),ghr=o(":"),hhr=l(),a9=a("ul"),y7=a("li"),Nbe=a("strong"),phr=o("detr"),_hr=o(" \u2014 "),YW=a("a"),uhr=o("DetrForObjectDetection"),bhr=o(" (DETR model)"),vhr=l(),x7=a("li"),qbe=a("strong"),Fhr=o("yolos"),Thr=o(" \u2014 "),KW=a("a"),Mhr=o("YolosForObjectDetection"),Ehr=o(" (YOLOS model)"),Chr=l(),$7=a("p"),whr=o("The model is set in evaluation mode by default using "),jbe=a("code"),Ahr=o("model.eval()"),Lhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),yhr=o("model.train()"),xhr=l(),F(k7.$$.fragment),lVe=l(),Qd=a("h2"),S7=a("a"),Gbe=a("span"),F(n9.$$.fragment),$hr=l(),Obe=a("span"),khr=o("AutoModelForImageSegmentation"),iVe=l(),Yo=a("div"),F(s9.$$.fragment),Shr=l(),Wd=a("p"),Rhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZW=a("a"),Phr=o("from_pretrained()"),Bhr=o(" class method or the "),eH=a("a"),Ihr=o("from_config()"),Nhr=o(` class
method.`),qhr=l(),l9=a("p"),jhr=o("This class cannot be instantiated directly using "),Vbe=a("code"),Dhr=o("__init__()"),Ghr=o(" (throws an error)."),Ohr=l(),Lt=a("div"),F(i9.$$.fragment),Vhr=l(),Xbe=a("p"),Xhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zhr=l(),Hd=a("p"),Qhr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),Whr=o("not"),Hhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" to load the model weights."),Yhr=l(),F(R7.$$.fragment),Khr=l(),bo=a("div"),F(d9.$$.fragment),Zhr=l(),Qbe=a("p"),epr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),opr=l(),en=a("p"),rpr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),tpr=o("model_type"),apr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),npr=o("pretrained_model_name_or_path"),spr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),lpr=o("pretrained_model_name_or_path"),ipr=o(":"),dpr=l(),Jbe=a("ul"),P7=a("li"),Ybe=a("strong"),cpr=o("detr"),fpr=o(" \u2014 "),rH=a("a"),mpr=o("DetrForSegmentation"),gpr=o(" (DETR model)"),hpr=l(),B7=a("p"),ppr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),_pr=o("model.eval()"),upr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),bpr=o("model.train()"),vpr=l(),F(I7.$$.fragment),dVe=l(),Ud=a("h2"),N7=a("a"),eve=a("span"),F(c9.$$.fragment),Fpr=l(),ove=a("span"),Tpr=o("AutoModelForSemanticSegmentation"),cVe=l(),Ko=a("div"),F(f9.$$.fragment),Mpr=l(),Jd=a("p"),Epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tH=a("a"),Cpr=o("from_pretrained()"),wpr=o(" class method or the "),aH=a("a"),Apr=o("from_config()"),Lpr=o(` class
method.`),ypr=l(),m9=a("p"),xpr=o("This class cannot be instantiated directly using "),rve=a("code"),$pr=o("__init__()"),kpr=o(" (throws an error)."),Spr=l(),yt=a("div"),F(g9.$$.fragment),Rpr=l(),tve=a("p"),Ppr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Bpr=l(),Yd=a("p"),Ipr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),Npr=o("not"),qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),jpr=o("from_pretrained()"),Dpr=o(" to load the model weights."),Gpr=l(),F(q7.$$.fragment),Opr=l(),vo=a("div"),F(h9.$$.fragment),Vpr=l(),nve=a("p"),Xpr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zpr=l(),on=a("p"),Qpr=o("The model class to instantiate is selected based on the "),sve=a("code"),Wpr=o("model_type"),Hpr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),Ypr=o("pretrained_model_name_or_path"),Kpr=o(":"),Zpr=l(),rn=a("ul"),j7=a("li"),dve=a("strong"),e_r=o("beit"),o_r=o(" \u2014 "),sH=a("a"),r_r=o("BeitForSemanticSegmentation"),t_r=o(" (BEiT model)"),a_r=l(),D7=a("li"),cve=a("strong"),n_r=o("data2vec-vision"),s_r=o(" \u2014 "),lH=a("a"),l_r=o("Data2VecVisionForSemanticSegmentation"),i_r=o(" (Data2VecVision model)"),d_r=l(),G7=a("li"),fve=a("strong"),c_r=o("dpt"),f_r=o(" \u2014 "),iH=a("a"),m_r=o("DPTForSemanticSegmentation"),g_r=o(" (DPT model)"),h_r=l(),O7=a("li"),mve=a("strong"),p_r=o("segformer"),__r=o(" \u2014 "),dH=a("a"),u_r=o("SegformerForSemanticSegmentation"),b_r=o(" (SegFormer model)"),v_r=l(),V7=a("p"),F_r=o("The model is set in evaluation mode by default using "),gve=a("code"),T_r=o("model.eval()"),M_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hve=a("code"),E_r=o("model.train()"),C_r=l(),F(X7.$$.fragment),fVe=l(),Kd=a("h2"),z7=a("a"),pve=a("span"),F(p9.$$.fragment),w_r=l(),_ve=a("span"),A_r=o("AutoModelForInstanceSegmentation"),mVe=l(),Zo=a("div"),F(_9.$$.fragment),L_r=l(),Zd=a("p"),y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cH=a("a"),x_r=o("from_pretrained()"),$_r=o(" class method or the "),fH=a("a"),k_r=o("from_config()"),S_r=o(` class
method.`),R_r=l(),u9=a("p"),P_r=o("This class cannot be instantiated directly using "),uve=a("code"),B_r=o("__init__()"),I_r=o(" (throws an error)."),N_r=l(),xt=a("div"),F(b9.$$.fragment),q_r=l(),bve=a("p"),j_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),D_r=l(),ec=a("p"),G_r=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),O_r=o("not"),V_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),X_r=o("from_pretrained()"),z_r=o(" to load the model weights."),Q_r=l(),F(Q7.$$.fragment),W_r=l(),Fo=a("div"),F(v9.$$.fragment),H_r=l(),Fve=a("p"),U_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J_r=l(),tn=a("p"),Y_r=o("The model class to instantiate is selected based on the "),Tve=a("code"),K_r=o("model_type"),Z_r=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),eur=o("pretrained_model_name_or_path"),our=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(":"),aur=l(),Cve=a("ul"),W7=a("li"),wve=a("strong"),nur=o("maskformer"),sur=o(" \u2014 "),gH=a("a"),lur=o("MaskFormerForInstanceSegmentation"),iur=o(" (MaskFormer model)"),dur=l(),H7=a("p"),cur=o("The model is set in evaluation mode by default using "),Ave=a("code"),fur=o("model.eval()"),mur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lve=a("code"),gur=o("model.train()"),hur=l(),F(U7.$$.fragment),gVe=l(),oc=a("h2"),J7=a("a"),yve=a("span"),F(F9.$$.fragment),pur=l(),xve=a("span"),_ur=o("TFAutoModel"),hVe=l(),er=a("div"),F(T9.$$.fragment),uur=l(),rc=a("p"),bur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hH=a("a"),vur=o("from_pretrained()"),Fur=o(" class method or the "),pH=a("a"),Tur=o("from_config()"),Mur=o(` class
method.`),Eur=l(),M9=a("p"),Cur=o("This class cannot be instantiated directly using "),$ve=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),$t=a("div"),F(E9.$$.fragment),yur=l(),kve=a("p"),xur=o("Instantiates one of the base model classes of the library from a configuration."),$ur=l(),tc=a("p"),kur=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),Sur=o("not"),Rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Pur=o("from_pretrained()"),Bur=o(" to load the model weights."),Iur=l(),F(Y7.$$.fragment),Nur=l(),yr=a("div"),F(C9.$$.fragment),qur=l(),Rve=a("p"),jur=o("Instantiate one of the base model classes of the library from a pretrained model."),Dur=l(),an=a("p"),Gur=o("The model class to instantiate is selected based on the "),Pve=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(":"),Hur=l(),j=a("ul"),K7=a("li"),Nve=a("strong"),Uur=o("albert"),Jur=o(" \u2014 "),uH=a("a"),Yur=o("TFAlbertModel"),Kur=o(" (ALBERT model)"),Zur=l(),Z7=a("li"),qve=a("strong"),e1r=o("bart"),o1r=o(" \u2014 "),bH=a("a"),r1r=o("TFBartModel"),t1r=o(" (BART model)"),a1r=l(),eM=a("li"),jve=a("strong"),n1r=o("bert"),s1r=o(" \u2014 "),vH=a("a"),l1r=o("TFBertModel"),i1r=o(" (BERT model)"),d1r=l(),oM=a("li"),Dve=a("strong"),c1r=o("blenderbot"),f1r=o(" \u2014 "),FH=a("a"),m1r=o("TFBlenderbotModel"),g1r=o(" (Blenderbot model)"),h1r=l(),rM=a("li"),Gve=a("strong"),p1r=o("blenderbot-small"),_1r=o(" \u2014 "),TH=a("a"),u1r=o("TFBlenderbotSmallModel"),b1r=o(" (BlenderbotSmall model)"),v1r=l(),tM=a("li"),Ove=a("strong"),F1r=o("camembert"),T1r=o(" \u2014 "),MH=a("a"),M1r=o("TFCamembertModel"),E1r=o(" (CamemBERT model)"),C1r=l(),aM=a("li"),Vve=a("strong"),w1r=o("clip"),A1r=o(" \u2014 "),EH=a("a"),L1r=o("TFCLIPModel"),y1r=o(" (CLIP model)"),x1r=l(),nM=a("li"),Xve=a("strong"),$1r=o("convbert"),k1r=o(" \u2014 "),CH=a("a"),S1r=o("TFConvBertModel"),R1r=o(" (ConvBERT model)"),P1r=l(),sM=a("li"),zve=a("strong"),B1r=o("convnext"),I1r=o(" \u2014 "),wH=a("a"),N1r=o("TFConvNextModel"),q1r=o(" (ConvNeXT model)"),j1r=l(),lM=a("li"),Qve=a("strong"),D1r=o("ctrl"),G1r=o(" \u2014 "),AH=a("a"),O1r=o("TFCTRLModel"),V1r=o(" (CTRL model)"),X1r=l(),iM=a("li"),Wve=a("strong"),z1r=o("data2vec-vision"),Q1r=o(" \u2014 "),LH=a("a"),W1r=o("TFData2VecVisionModel"),H1r=o(" (Data2VecVision model)"),U1r=l(),dM=a("li"),Hve=a("strong"),J1r=o("deberta"),Y1r=o(" \u2014 "),yH=a("a"),K1r=o("TFDebertaModel"),Z1r=o(" (DeBERTa model)"),e3r=l(),cM=a("li"),Uve=a("strong"),o3r=o("deberta-v2"),r3r=o(" \u2014 "),xH=a("a"),t3r=o("TFDebertaV2Model"),a3r=o(" (DeBERTa-v2 model)"),n3r=l(),fM=a("li"),Jve=a("strong"),s3r=o("distilbert"),l3r=o(" \u2014 "),$H=a("a"),i3r=o("TFDistilBertModel"),d3r=o(" (DistilBERT model)"),c3r=l(),mM=a("li"),Yve=a("strong"),f3r=o("dpr"),m3r=o(" \u2014 "),kH=a("a"),g3r=o("TFDPRQuestionEncoder"),h3r=o(" (DPR model)"),p3r=l(),gM=a("li"),Kve=a("strong"),_3r=o("electra"),u3r=o(" \u2014 "),SH=a("a"),b3r=o("TFElectraModel"),v3r=o(" (ELECTRA model)"),F3r=l(),hM=a("li"),Zve=a("strong"),T3r=o("flaubert"),M3r=o(" \u2014 "),RH=a("a"),E3r=o("TFFlaubertModel"),C3r=o(" (FlauBERT model)"),w3r=l(),Ws=a("li"),eFe=a("strong"),A3r=o("funnel"),L3r=o(" \u2014 "),PH=a("a"),y3r=o("TFFunnelModel"),x3r=o(" or "),BH=a("a"),$3r=o("TFFunnelBaseModel"),k3r=o(" (Funnel Transformer model)"),S3r=l(),pM=a("li"),oFe=a("strong"),R3r=o("gpt2"),P3r=o(" \u2014 "),IH=a("a"),B3r=o("TFGPT2Model"),I3r=o(" (OpenAI GPT-2 model)"),N3r=l(),_M=a("li"),rFe=a("strong"),q3r=o("gptj"),j3r=o(" \u2014 "),NH=a("a"),D3r=o("TFGPTJModel"),G3r=o(" (GPT-J model)"),O3r=l(),uM=a("li"),tFe=a("strong"),V3r=o("hubert"),X3r=o(" \u2014 "),qH=a("a"),z3r=o("TFHubertModel"),Q3r=o(" (Hubert model)"),W3r=l(),bM=a("li"),aFe=a("strong"),H3r=o("layoutlm"),U3r=o(" \u2014 "),jH=a("a"),J3r=o("TFLayoutLMModel"),Y3r=o(" (LayoutLM model)"),K3r=l(),vM=a("li"),nFe=a("strong"),Z3r=o("led"),e2r=o(" \u2014 "),DH=a("a"),o2r=o("TFLEDModel"),r2r=o(" (LED model)"),t2r=l(),FM=a("li"),sFe=a("strong"),a2r=o("longformer"),n2r=o(" \u2014 "),GH=a("a"),s2r=o("TFLongformerModel"),l2r=o(" (Longformer model)"),i2r=l(),TM=a("li"),lFe=a("strong"),d2r=o("lxmert"),c2r=o(" \u2014 "),OH=a("a"),f2r=o("TFLxmertModel"),m2r=o(" (LXMERT model)"),g2r=l(),MM=a("li"),iFe=a("strong"),h2r=o("marian"),p2r=o(" \u2014 "),VH=a("a"),_2r=o("TFMarianModel"),u2r=o(" (Marian model)"),b2r=l(),EM=a("li"),dFe=a("strong"),v2r=o("mbart"),F2r=o(" \u2014 "),XH=a("a"),T2r=o("TFMBartModel"),M2r=o(" (mBART model)"),E2r=l(),CM=a("li"),cFe=a("strong"),C2r=o("mobilebert"),w2r=o(" \u2014 "),zH=a("a"),A2r=o("TFMobileBertModel"),L2r=o(" (MobileBERT model)"),y2r=l(),wM=a("li"),fFe=a("strong"),x2r=o("mpnet"),$2r=o(" \u2014 "),QH=a("a"),k2r=o("TFMPNetModel"),S2r=o(" (MPNet model)"),R2r=l(),AM=a("li"),mFe=a("strong"),P2r=o("mt5"),B2r=o(" \u2014 "),WH=a("a"),I2r=o("TFMT5Model"),N2r=o(" (MT5 model)"),q2r=l(),LM=a("li"),gFe=a("strong"),j2r=o("openai-gpt"),D2r=o(" \u2014 "),HH=a("a"),G2r=o("TFOpenAIGPTModel"),O2r=o(" (OpenAI GPT model)"),V2r=l(),yM=a("li"),hFe=a("strong"),X2r=o("opt"),z2r=o(" \u2014 "),UH=a("a"),Q2r=o("TFOPTModel"),W2r=o(" (OPT model)"),H2r=l(),xM=a("li"),pFe=a("strong"),U2r=o("pegasus"),J2r=o(" \u2014 "),JH=a("a"),Y2r=o("TFPegasusModel"),K2r=o(" (Pegasus model)"),Z2r=l(),$M=a("li"),_Fe=a("strong"),ebr=o("rembert"),obr=o(" \u2014 "),YH=a("a"),rbr=o("TFRemBertModel"),tbr=o(" (RemBERT model)"),abr=l(),kM=a("li"),uFe=a("strong"),nbr=o("roberta"),sbr=o(" \u2014 "),KH=a("a"),lbr=o("TFRobertaModel"),ibr=o(" (RoBERTa model)"),dbr=l(),SM=a("li"),bFe=a("strong"),cbr=o("roformer"),fbr=o(" \u2014 "),ZH=a("a"),mbr=o("TFRoFormerModel"),gbr=o(" (RoFormer model)"),hbr=l(),RM=a("li"),vFe=a("strong"),pbr=o("speech_to_text"),_br=o(" \u2014 "),eU=a("a"),ubr=o("TFSpeech2TextModel"),bbr=o(" (Speech2Text model)"),vbr=l(),PM=a("li"),FFe=a("strong"),Fbr=o("swin"),Tbr=o(" \u2014 "),oU=a("a"),Mbr=o("TFSwinModel"),Ebr=o(" (Swin Transformer model)"),Cbr=l(),BM=a("li"),TFe=a("strong"),wbr=o("t5"),Abr=o(" \u2014 "),rU=a("a"),Lbr=o("TFT5Model"),ybr=o(" (T5 model)"),xbr=l(),IM=a("li"),MFe=a("strong"),$br=o("tapas"),kbr=o(" \u2014 "),tU=a("a"),Sbr=o("TFTapasModel"),Rbr=o(" (TAPAS model)"),Pbr=l(),NM=a("li"),EFe=a("strong"),Bbr=o("transfo-xl"),Ibr=o(" \u2014 "),aU=a("a"),Nbr=o("TFTransfoXLModel"),qbr=o(" (Transformer-XL model)"),jbr=l(),qM=a("li"),CFe=a("strong"),Dbr=o("vit"),Gbr=o(" \u2014 "),nU=a("a"),Obr=o("TFViTModel"),Vbr=o(" (ViT model)"),Xbr=l(),jM=a("li"),wFe=a("strong"),zbr=o("vit_mae"),Qbr=o(" \u2014 "),sU=a("a"),Wbr=o("TFViTMAEModel"),Hbr=o(" (ViTMAE model)"),Ubr=l(),DM=a("li"),AFe=a("strong"),Jbr=o("wav2vec2"),Ybr=o(" \u2014 "),lU=a("a"),Kbr=o("TFWav2Vec2Model"),Zbr=o(" (Wav2Vec2 model)"),evr=l(),GM=a("li"),LFe=a("strong"),ovr=o("xlm"),rvr=o(" \u2014 "),iU=a("a"),tvr=o("TFXLMModel"),avr=o(" (XLM model)"),nvr=l(),OM=a("li"),yFe=a("strong"),svr=o("xlm-roberta"),lvr=o(" \u2014 "),dU=a("a"),ivr=o("TFXLMRobertaModel"),dvr=o(" (XLM-RoBERTa model)"),cvr=l(),VM=a("li"),xFe=a("strong"),fvr=o("xlnet"),mvr=o(" \u2014 "),cU=a("a"),gvr=o("TFXLNetModel"),hvr=o(" (XLNet model)"),pvr=l(),F(XM.$$.fragment),pVe=l(),ac=a("h2"),zM=a("a"),$Fe=a("span"),F(w9.$$.fragment),_vr=l(),kFe=a("span"),uvr=o("TFAutoModelForPreTraining"),_Ve=l(),or=a("div"),F(A9.$$.fragment),bvr=l(),nc=a("p"),vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fU=a("a"),Fvr=o("from_pretrained()"),Tvr=o(" class method or the "),mU=a("a"),Mvr=o("from_config()"),Evr=o(` class
method.`),Cvr=l(),L9=a("p"),wvr=o("This class cannot be instantiated directly using "),SFe=a("code"),Avr=o("__init__()"),Lvr=o(" (throws an error)."),yvr=l(),kt=a("div"),F(y9.$$.fragment),xvr=l(),RFe=a("p"),$vr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kvr=l(),sc=a("p"),Svr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),Rvr=o("not"),Pvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" to load the model weights."),Nvr=l(),F(QM.$$.fragment),qvr=l(),xr=a("div"),F(x9.$$.fragment),jvr=l(),BFe=a("p"),Dvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gvr=l(),nn=a("p"),Ovr=o("The model class to instantiate is selected based on the "),IFe=a("code"),Vvr=o("model_type"),Xvr=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),zvr=o("pretrained_model_name_or_path"),Qvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),Wvr=o("pretrained_model_name_or_path"),Hvr=o(":"),Uvr=l(),se=a("ul"),WM=a("li"),jFe=a("strong"),Jvr=o("albert"),Yvr=o(" \u2014 "),hU=a("a"),Kvr=o("TFAlbertForPreTraining"),Zvr=o(" (ALBERT model)"),eFr=l(),HM=a("li"),DFe=a("strong"),oFr=o("bart"),rFr=o(" \u2014 "),pU=a("a"),tFr=o("TFBartForConditionalGeneration"),aFr=o(" (BART model)"),nFr=l(),UM=a("li"),GFe=a("strong"),sFr=o("bert"),lFr=o(" \u2014 "),_U=a("a"),iFr=o("TFBertForPreTraining"),dFr=o(" (BERT model)"),cFr=l(),JM=a("li"),OFe=a("strong"),fFr=o("camembert"),mFr=o(" \u2014 "),uU=a("a"),gFr=o("TFCamembertForMaskedLM"),hFr=o(" (CamemBERT model)"),pFr=l(),YM=a("li"),VFe=a("strong"),_Fr=o("ctrl"),uFr=o(" \u2014 "),bU=a("a"),bFr=o("TFCTRLLMHeadModel"),vFr=o(" (CTRL model)"),FFr=l(),KM=a("li"),XFe=a("strong"),TFr=o("distilbert"),MFr=o(" \u2014 "),vU=a("a"),EFr=o("TFDistilBertForMaskedLM"),CFr=o(" (DistilBERT model)"),wFr=l(),ZM=a("li"),zFe=a("strong"),AFr=o("electra"),LFr=o(" \u2014 "),FU=a("a"),yFr=o("TFElectraForPreTraining"),xFr=o(" (ELECTRA model)"),$Fr=l(),eE=a("li"),QFe=a("strong"),kFr=o("flaubert"),SFr=o(" \u2014 "),TU=a("a"),RFr=o("TFFlaubertWithLMHeadModel"),PFr=o(" (FlauBERT model)"),BFr=l(),oE=a("li"),WFe=a("strong"),IFr=o("funnel"),NFr=o(" \u2014 "),MU=a("a"),qFr=o("TFFunnelForPreTraining"),jFr=o(" (Funnel Transformer model)"),DFr=l(),rE=a("li"),HFe=a("strong"),GFr=o("gpt2"),OFr=o(" \u2014 "),EU=a("a"),VFr=o("TFGPT2LMHeadModel"),XFr=o(" (OpenAI GPT-2 model)"),zFr=l(),tE=a("li"),UFe=a("strong"),QFr=o("layoutlm"),WFr=o(" \u2014 "),CU=a("a"),HFr=o("TFLayoutLMForMaskedLM"),UFr=o(" (LayoutLM model)"),JFr=l(),aE=a("li"),JFe=a("strong"),YFr=o("lxmert"),KFr=o(" \u2014 "),wU=a("a"),ZFr=o("TFLxmertForPreTraining"),eTr=o(" (LXMERT model)"),oTr=l(),nE=a("li"),YFe=a("strong"),rTr=o("mobilebert"),tTr=o(" \u2014 "),AU=a("a"),aTr=o("TFMobileBertForPreTraining"),nTr=o(" (MobileBERT model)"),sTr=l(),sE=a("li"),KFe=a("strong"),lTr=o("mpnet"),iTr=o(" \u2014 "),LU=a("a"),dTr=o("TFMPNetForMaskedLM"),cTr=o(" (MPNet model)"),fTr=l(),lE=a("li"),ZFe=a("strong"),mTr=o("openai-gpt"),gTr=o(" \u2014 "),yU=a("a"),hTr=o("TFOpenAIGPTLMHeadModel"),pTr=o(" (OpenAI GPT model)"),_Tr=l(),iE=a("li"),eTe=a("strong"),uTr=o("roberta"),bTr=o(" \u2014 "),xU=a("a"),vTr=o("TFRobertaForMaskedLM"),FTr=o(" (RoBERTa model)"),TTr=l(),dE=a("li"),oTe=a("strong"),MTr=o("t5"),ETr=o(" \u2014 "),$U=a("a"),CTr=o("TFT5ForConditionalGeneration"),wTr=o(" (T5 model)"),ATr=l(),cE=a("li"),rTe=a("strong"),LTr=o("tapas"),yTr=o(" \u2014 "),kU=a("a"),xTr=o("TFTapasForMaskedLM"),$Tr=o(" (TAPAS model)"),kTr=l(),fE=a("li"),tTe=a("strong"),STr=o("transfo-xl"),RTr=o(" \u2014 "),SU=a("a"),PTr=o("TFTransfoXLLMHeadModel"),BTr=o(" (Transformer-XL model)"),ITr=l(),mE=a("li"),aTe=a("strong"),NTr=o("vit_mae"),qTr=o(" \u2014 "),RU=a("a"),jTr=o("TFViTMAEForPreTraining"),DTr=o(" (ViTMAE model)"),GTr=l(),gE=a("li"),nTe=a("strong"),OTr=o("xlm"),VTr=o(" \u2014 "),PU=a("a"),XTr=o("TFXLMWithLMHeadModel"),zTr=o(" (XLM model)"),QTr=l(),hE=a("li"),sTe=a("strong"),WTr=o("xlm-roberta"),HTr=o(" \u2014 "),BU=a("a"),UTr=o("TFXLMRobertaForMaskedLM"),JTr=o(" (XLM-RoBERTa model)"),YTr=l(),pE=a("li"),lTe=a("strong"),KTr=o("xlnet"),ZTr=o(" \u2014 "),IU=a("a"),e7r=o("TFXLNetLMHeadModel"),o7r=o(" (XLNet model)"),r7r=l(),F(_E.$$.fragment),uVe=l(),lc=a("h2"),uE=a("a"),iTe=a("span"),F($9.$$.fragment),t7r=l(),dTe=a("span"),a7r=o("TFAutoModelForCausalLM"),bVe=l(),rr=a("div"),F(k9.$$.fragment),n7r=l(),ic=a("p"),s7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NU=a("a"),l7r=o("from_pretrained()"),i7r=o(" class method or the "),qU=a("a"),d7r=o("from_config()"),c7r=o(` class
method.`),f7r=l(),S9=a("p"),m7r=o("This class cannot be instantiated directly using "),cTe=a("code"),g7r=o("__init__()"),h7r=o(" (throws an error)."),p7r=l(),St=a("div"),F(R9.$$.fragment),_7r=l(),fTe=a("p"),u7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b7r=l(),dc=a("p"),v7r=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),F7r=o("not"),T7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),M7r=o("from_pretrained()"),E7r=o(" to load the model weights."),C7r=l(),F(bE.$$.fragment),w7r=l(),$r=a("div"),F(P9.$$.fragment),A7r=l(),gTe=a("p"),L7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y7r=l(),sn=a("p"),x7r=o("The model class to instantiate is selected based on the "),hTe=a("code"),$7r=o("model_type"),k7r=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),S7r=o("pretrained_model_name_or_path"),R7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),P7r=o("pretrained_model_name_or_path"),B7r=o(":"),I7r=l(),Me=a("ul"),vE=a("li"),uTe=a("strong"),N7r=o("bert"),q7r=o(" \u2014 "),DU=a("a"),j7r=o("TFBertLMHeadModel"),D7r=o(" (BERT model)"),G7r=l(),FE=a("li"),bTe=a("strong"),O7r=o("camembert"),V7r=o(" \u2014 "),GU=a("a"),X7r=o("TFCamembertForCausalLM"),z7r=o(" (CamemBERT model)"),Q7r=l(),TE=a("li"),vTe=a("strong"),W7r=o("ctrl"),H7r=o(" \u2014 "),OU=a("a"),U7r=o("TFCTRLLMHeadModel"),J7r=o(" (CTRL model)"),Y7r=l(),ME=a("li"),FTe=a("strong"),K7r=o("gpt2"),Z7r=o(" \u2014 "),VU=a("a"),eMr=o("TFGPT2LMHeadModel"),oMr=o(" (OpenAI GPT-2 model)"),rMr=l(),EE=a("li"),TTe=a("strong"),tMr=o("gptj"),aMr=o(" \u2014 "),XU=a("a"),nMr=o("TFGPTJForCausalLM"),sMr=o(" (GPT-J model)"),lMr=l(),CE=a("li"),MTe=a("strong"),iMr=o("openai-gpt"),dMr=o(" \u2014 "),zU=a("a"),cMr=o("TFOpenAIGPTLMHeadModel"),fMr=o(" (OpenAI GPT model)"),mMr=l(),wE=a("li"),ETe=a("strong"),gMr=o("opt"),hMr=o(" \u2014 "),QU=a("a"),pMr=o("TFOPTForCausalLM"),_Mr=o(" (OPT model)"),uMr=l(),AE=a("li"),CTe=a("strong"),bMr=o("rembert"),vMr=o(" \u2014 "),WU=a("a"),FMr=o("TFRemBertForCausalLM"),TMr=o(" (RemBERT model)"),MMr=l(),LE=a("li"),wTe=a("strong"),EMr=o("roberta"),CMr=o(" \u2014 "),HU=a("a"),wMr=o("TFRobertaForCausalLM"),AMr=o(" (RoBERTa model)"),LMr=l(),yE=a("li"),ATe=a("strong"),yMr=o("roformer"),xMr=o(" \u2014 "),UU=a("a"),$Mr=o("TFRoFormerForCausalLM"),kMr=o(" (RoFormer model)"),SMr=l(),xE=a("li"),LTe=a("strong"),RMr=o("transfo-xl"),PMr=o(" \u2014 "),JU=a("a"),BMr=o("TFTransfoXLLMHeadModel"),IMr=o(" (Transformer-XL model)"),NMr=l(),$E=a("li"),yTe=a("strong"),qMr=o("xlm"),jMr=o(" \u2014 "),YU=a("a"),DMr=o("TFXLMWithLMHeadModel"),GMr=o(" (XLM model)"),OMr=l(),kE=a("li"),xTe=a("strong"),VMr=o("xlnet"),XMr=o(" \u2014 "),KU=a("a"),zMr=o("TFXLNetLMHeadModel"),QMr=o(" (XLNet model)"),WMr=l(),F(SE.$$.fragment),vVe=l(),cc=a("h2"),RE=a("a"),$Te=a("span"),F(B9.$$.fragment),HMr=l(),kTe=a("span"),UMr=o("TFAutoModelForImageClassification"),FVe=l(),tr=a("div"),F(I9.$$.fragment),JMr=l(),fc=a("p"),YMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZU=a("a"),KMr=o("from_pretrained()"),ZMr=o(" class method or the "),eJ=a("a"),eEr=o("from_config()"),oEr=o(` class
method.`),rEr=l(),N9=a("p"),tEr=o("This class cannot be instantiated directly using "),STe=a("code"),aEr=o("__init__()"),nEr=o(" (throws an error)."),sEr=l(),Rt=a("div"),F(q9.$$.fragment),lEr=l(),RTe=a("p"),iEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dEr=l(),mc=a("p"),cEr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),fEr=o("not"),mEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),gEr=o("from_pretrained()"),hEr=o(" to load the model weights."),pEr=l(),F(PE.$$.fragment),_Er=l(),kr=a("div"),F(j9.$$.fragment),uEr=l(),BTe=a("p"),bEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vEr=l(),ln=a("p"),FEr=o("The model class to instantiate is selected based on the "),ITe=a("code"),TEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),LEr=l(),dn=a("ul"),BE=a("li"),jTe=a("strong"),yEr=o("convnext"),xEr=o(" \u2014 "),rJ=a("a"),$Er=o("TFConvNextForImageClassification"),kEr=o(" (ConvNeXT model)"),SEr=l(),IE=a("li"),DTe=a("strong"),REr=o("data2vec-vision"),PEr=o(" \u2014 "),tJ=a("a"),BEr=o("TFData2VecVisionForImageClassification"),IEr=o(" (Data2VecVision model)"),NEr=l(),NE=a("li"),GTe=a("strong"),qEr=o("swin"),jEr=o(" \u2014 "),aJ=a("a"),DEr=o("TFSwinForImageClassification"),GEr=o(" (Swin Transformer model)"),OEr=l(),qE=a("li"),OTe=a("strong"),VEr=o("vit"),XEr=o(" \u2014 "),nJ=a("a"),zEr=o("TFViTForImageClassification"),QEr=o(" (ViT model)"),WEr=l(),F(jE.$$.fragment),TVe=l(),gc=a("h2"),DE=a("a"),VTe=a("span"),F(D9.$$.fragment),HEr=l(),XTe=a("span"),UEr=o("TFAutoModelForMaskedLM"),MVe=l(),ar=a("div"),F(G9.$$.fragment),JEr=l(),hc=a("p"),YEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sJ=a("a"),KEr=o("from_pretrained()"),ZEr=o(" class method or the "),lJ=a("a"),e4r=o("from_config()"),o4r=o(` class
method.`),r4r=l(),O9=a("p"),t4r=o("This class cannot be instantiated directly using "),zTe=a("code"),a4r=o("__init__()"),n4r=o(" (throws an error)."),s4r=l(),Pt=a("div"),F(V9.$$.fragment),l4r=l(),QTe=a("p"),i4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d4r=l(),pc=a("p"),c4r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),f4r=o("not"),m4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),g4r=o("from_pretrained()"),h4r=o(" to load the model weights."),p4r=l(),F(GE.$$.fragment),_4r=l(),Sr=a("div"),F(X9.$$.fragment),u4r=l(),HTe=a("p"),b4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v4r=l(),cn=a("p"),F4r=o("The model class to instantiate is selected based on the "),UTe=a("code"),T4r=o("model_type"),M4r=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),E4r=o("pretrained_model_name_or_path"),C4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(":"),L4r=l(),ie=a("ul"),OE=a("li"),KTe=a("strong"),y4r=o("albert"),x4r=o(" \u2014 "),dJ=a("a"),$4r=o("TFAlbertForMaskedLM"),k4r=o(" (ALBERT model)"),S4r=l(),VE=a("li"),ZTe=a("strong"),R4r=o("bert"),P4r=o(" \u2014 "),cJ=a("a"),B4r=o("TFBertForMaskedLM"),I4r=o(" (BERT model)"),N4r=l(),XE=a("li"),e7e=a("strong"),q4r=o("camembert"),j4r=o(" \u2014 "),fJ=a("a"),D4r=o("TFCamembertForMaskedLM"),G4r=o(" (CamemBERT model)"),O4r=l(),zE=a("li"),o7e=a("strong"),V4r=o("convbert"),X4r=o(" \u2014 "),mJ=a("a"),z4r=o("TFConvBertForMaskedLM"),Q4r=o(" (ConvBERT model)"),W4r=l(),QE=a("li"),r7e=a("strong"),H4r=o("deberta"),U4r=o(" \u2014 "),gJ=a("a"),J4r=o("TFDebertaForMaskedLM"),Y4r=o(" (DeBERTa model)"),K4r=l(),WE=a("li"),t7e=a("strong"),Z4r=o("deberta-v2"),eCr=o(" \u2014 "),hJ=a("a"),oCr=o("TFDebertaV2ForMaskedLM"),rCr=o(" (DeBERTa-v2 model)"),tCr=l(),HE=a("li"),a7e=a("strong"),aCr=o("distilbert"),nCr=o(" \u2014 "),pJ=a("a"),sCr=o("TFDistilBertForMaskedLM"),lCr=o(" (DistilBERT model)"),iCr=l(),UE=a("li"),n7e=a("strong"),dCr=o("electra"),cCr=o(" \u2014 "),_J=a("a"),fCr=o("TFElectraForMaskedLM"),mCr=o(" (ELECTRA model)"),gCr=l(),JE=a("li"),s7e=a("strong"),hCr=o("flaubert"),pCr=o(" \u2014 "),uJ=a("a"),_Cr=o("TFFlaubertWithLMHeadModel"),uCr=o(" (FlauBERT model)"),bCr=l(),YE=a("li"),l7e=a("strong"),vCr=o("funnel"),FCr=o(" \u2014 "),bJ=a("a"),TCr=o("TFFunnelForMaskedLM"),MCr=o(" (Funnel Transformer model)"),ECr=l(),KE=a("li"),i7e=a("strong"),CCr=o("layoutlm"),wCr=o(" \u2014 "),vJ=a("a"),ACr=o("TFLayoutLMForMaskedLM"),LCr=o(" (LayoutLM model)"),yCr=l(),ZE=a("li"),d7e=a("strong"),xCr=o("longformer"),$Cr=o(" \u2014 "),FJ=a("a"),kCr=o("TFLongformerForMaskedLM"),SCr=o(" (Longformer model)"),RCr=l(),e4=a("li"),c7e=a("strong"),PCr=o("mobilebert"),BCr=o(" \u2014 "),TJ=a("a"),ICr=o("TFMobileBertForMaskedLM"),NCr=o(" (MobileBERT model)"),qCr=l(),o4=a("li"),f7e=a("strong"),jCr=o("mpnet"),DCr=o(" \u2014 "),MJ=a("a"),GCr=o("TFMPNetForMaskedLM"),OCr=o(" (MPNet model)"),VCr=l(),r4=a("li"),m7e=a("strong"),XCr=o("rembert"),zCr=o(" \u2014 "),EJ=a("a"),QCr=o("TFRemBertForMaskedLM"),WCr=o(" (RemBERT model)"),HCr=l(),t4=a("li"),g7e=a("strong"),UCr=o("roberta"),JCr=o(" \u2014 "),CJ=a("a"),YCr=o("TFRobertaForMaskedLM"),KCr=o(" (RoBERTa model)"),ZCr=l(),a4=a("li"),h7e=a("strong"),e5r=o("roformer"),o5r=o(" \u2014 "),wJ=a("a"),r5r=o("TFRoFormerForMaskedLM"),t5r=o(" (RoFormer model)"),a5r=l(),n4=a("li"),p7e=a("strong"),n5r=o("tapas"),s5r=o(" \u2014 "),AJ=a("a"),l5r=o("TFTapasForMaskedLM"),i5r=o(" (TAPAS model)"),d5r=l(),s4=a("li"),_7e=a("strong"),c5r=o("xlm"),f5r=o(" \u2014 "),LJ=a("a"),m5r=o("TFXLMWithLMHeadModel"),g5r=o(" (XLM model)"),h5r=l(),l4=a("li"),u7e=a("strong"),p5r=o("xlm-roberta"),_5r=o(" \u2014 "),yJ=a("a"),u5r=o("TFXLMRobertaForMaskedLM"),b5r=o(" (XLM-RoBERTa model)"),v5r=l(),F(i4.$$.fragment),EVe=l(),_c=a("h2"),d4=a("a"),b7e=a("span"),F(z9.$$.fragment),F5r=l(),v7e=a("span"),T5r=o("TFAutoModelForSeq2SeqLM"),CVe=l(),nr=a("div"),F(Q9.$$.fragment),M5r=l(),uc=a("p"),E5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xJ=a("a"),C5r=o("from_pretrained()"),w5r=o(" class method or the "),$J=a("a"),A5r=o("from_config()"),L5r=o(` class
method.`),y5r=l(),W9=a("p"),x5r=o("This class cannot be instantiated directly using "),F7e=a("code"),$5r=o("__init__()"),k5r=o(" (throws an error)."),S5r=l(),Bt=a("div"),F(H9.$$.fragment),R5r=l(),T7e=a("p"),P5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B5r=l(),bc=a("p"),I5r=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),N5r=o("not"),q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),j5r=o("from_pretrained()"),D5r=o(" to load the model weights."),G5r=l(),F(c4.$$.fragment),O5r=l(),Rr=a("div"),F(U9.$$.fragment),V5r=l(),E7e=a("p"),X5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z5r=l(),fn=a("p"),Q5r=o("The model class to instantiate is selected based on the "),C7e=a("code"),W5r=o("model_type"),H5r=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),U5r=o("pretrained_model_name_or_path"),J5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),Y5r=o("pretrained_model_name_or_path"),K5r=o(":"),Z5r=l(),ye=a("ul"),f4=a("li"),L7e=a("strong"),e0r=o("bart"),o0r=o(" \u2014 "),SJ=a("a"),r0r=o("TFBartForConditionalGeneration"),t0r=o(" (BART model)"),a0r=l(),m4=a("li"),y7e=a("strong"),n0r=o("blenderbot"),s0r=o(" \u2014 "),RJ=a("a"),l0r=o("TFBlenderbotForConditionalGeneration"),i0r=o(" (Blenderbot model)"),d0r=l(),g4=a("li"),x7e=a("strong"),c0r=o("blenderbot-small"),f0r=o(" \u2014 "),PJ=a("a"),m0r=o("TFBlenderbotSmallForConditionalGeneration"),g0r=o(" (BlenderbotSmall model)"),h0r=l(),h4=a("li"),$7e=a("strong"),p0r=o("encoder-decoder"),_0r=o(" \u2014 "),BJ=a("a"),u0r=o("TFEncoderDecoderModel"),b0r=o(" (Encoder decoder model)"),v0r=l(),p4=a("li"),k7e=a("strong"),F0r=o("led"),T0r=o(" \u2014 "),IJ=a("a"),M0r=o("TFLEDForConditionalGeneration"),E0r=o(" (LED model)"),C0r=l(),_4=a("li"),S7e=a("strong"),w0r=o("marian"),A0r=o(" \u2014 "),NJ=a("a"),L0r=o("TFMarianMTModel"),y0r=o(" (Marian model)"),x0r=l(),u4=a("li"),R7e=a("strong"),$0r=o("mbart"),k0r=o(" \u2014 "),qJ=a("a"),S0r=o("TFMBartForConditionalGeneration"),R0r=o(" (mBART model)"),P0r=l(),b4=a("li"),P7e=a("strong"),B0r=o("mt5"),I0r=o(" \u2014 "),jJ=a("a"),N0r=o("TFMT5ForConditionalGeneration"),q0r=o(" (MT5 model)"),j0r=l(),v4=a("li"),B7e=a("strong"),D0r=o("pegasus"),G0r=o(" \u2014 "),DJ=a("a"),O0r=o("TFPegasusForConditionalGeneration"),V0r=o(" (Pegasus model)"),X0r=l(),F4=a("li"),I7e=a("strong"),z0r=o("t5"),Q0r=o(" \u2014 "),GJ=a("a"),W0r=o("TFT5ForConditionalGeneration"),H0r=o(" (T5 model)"),U0r=l(),F(T4.$$.fragment),wVe=l(),vc=a("h2"),M4=a("a"),N7e=a("span"),F(J9.$$.fragment),J0r=l(),q7e=a("span"),Y0r=o("TFAutoModelForSequenceClassification"),AVe=l(),sr=a("div"),F(Y9.$$.fragment),K0r=l(),Fc=a("p"),Z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OJ=a("a"),ewr=o("from_pretrained()"),owr=o(" class method or the "),VJ=a("a"),rwr=o("from_config()"),twr=o(` class
method.`),awr=l(),K9=a("p"),nwr=o("This class cannot be instantiated directly using "),j7e=a("code"),swr=o("__init__()"),lwr=o(" (throws an error)."),iwr=l(),It=a("div"),F(Z9.$$.fragment),dwr=l(),D7e=a("p"),cwr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fwr=l(),Tc=a("p"),mwr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),gwr=o("not"),hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),pwr=o("from_pretrained()"),_wr=o(" to load the model weights."),uwr=l(),F(E4.$$.fragment),bwr=l(),Pr=a("div"),F(ex.$$.fragment),vwr=l(),O7e=a("p"),Fwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Twr=l(),mn=a("p"),Mwr=o("The model class to instantiate is selected based on the "),V7e=a("code"),Ewr=o("model_type"),Cwr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),Lwr=o("pretrained_model_name_or_path"),ywr=o(":"),xwr=l(),te=a("ul"),C4=a("li"),Q7e=a("strong"),$wr=o("albert"),kwr=o(" \u2014 "),zJ=a("a"),Swr=o("TFAlbertForSequenceClassification"),Rwr=o(" (ALBERT model)"),Pwr=l(),w4=a("li"),W7e=a("strong"),Bwr=o("bert"),Iwr=o(" \u2014 "),QJ=a("a"),Nwr=o("TFBertForSequenceClassification"),qwr=o(" (BERT model)"),jwr=l(),A4=a("li"),H7e=a("strong"),Dwr=o("camembert"),Gwr=o(" \u2014 "),WJ=a("a"),Owr=o("TFCamembertForSequenceClassification"),Vwr=o(" (CamemBERT model)"),Xwr=l(),L4=a("li"),U7e=a("strong"),zwr=o("convbert"),Qwr=o(" \u2014 "),HJ=a("a"),Wwr=o("TFConvBertForSequenceClassification"),Hwr=o(" (ConvBERT model)"),Uwr=l(),y4=a("li"),J7e=a("strong"),Jwr=o("ctrl"),Ywr=o(" \u2014 "),UJ=a("a"),Kwr=o("TFCTRLForSequenceClassification"),Zwr=o(" (CTRL model)"),eAr=l(),x4=a("li"),Y7e=a("strong"),oAr=o("deberta"),rAr=o(" \u2014 "),JJ=a("a"),tAr=o("TFDebertaForSequenceClassification"),aAr=o(" (DeBERTa model)"),nAr=l(),$4=a("li"),K7e=a("strong"),sAr=o("deberta-v2"),lAr=o(" \u2014 "),YJ=a("a"),iAr=o("TFDebertaV2ForSequenceClassification"),dAr=o(" (DeBERTa-v2 model)"),cAr=l(),k4=a("li"),Z7e=a("strong"),fAr=o("distilbert"),mAr=o(" \u2014 "),KJ=a("a"),gAr=o("TFDistilBertForSequenceClassification"),hAr=o(" (DistilBERT model)"),pAr=l(),S4=a("li"),eMe=a("strong"),_Ar=o("electra"),uAr=o(" \u2014 "),ZJ=a("a"),bAr=o("TFElectraForSequenceClassification"),vAr=o(" (ELECTRA model)"),FAr=l(),R4=a("li"),oMe=a("strong"),TAr=o("flaubert"),MAr=o(" \u2014 "),eY=a("a"),EAr=o("TFFlaubertForSequenceClassification"),CAr=o(" (FlauBERT model)"),wAr=l(),P4=a("li"),rMe=a("strong"),AAr=o("funnel"),LAr=o(" \u2014 "),oY=a("a"),yAr=o("TFFunnelForSequenceClassification"),xAr=o(" (Funnel Transformer model)"),$Ar=l(),B4=a("li"),tMe=a("strong"),kAr=o("gpt2"),SAr=o(" \u2014 "),rY=a("a"),RAr=o("TFGPT2ForSequenceClassification"),PAr=o(" (OpenAI GPT-2 model)"),BAr=l(),I4=a("li"),aMe=a("strong"),IAr=o("gptj"),NAr=o(" \u2014 "),tY=a("a"),qAr=o("TFGPTJForSequenceClassification"),jAr=o(" (GPT-J model)"),DAr=l(),N4=a("li"),nMe=a("strong"),GAr=o("layoutlm"),OAr=o(" \u2014 "),aY=a("a"),VAr=o("TFLayoutLMForSequenceClassification"),XAr=o(" (LayoutLM model)"),zAr=l(),q4=a("li"),sMe=a("strong"),QAr=o("longformer"),WAr=o(" \u2014 "),nY=a("a"),HAr=o("TFLongformerForSequenceClassification"),UAr=o(" (Longformer model)"),JAr=l(),j4=a("li"),lMe=a("strong"),YAr=o("mobilebert"),KAr=o(" \u2014 "),sY=a("a"),ZAr=o("TFMobileBertForSequenceClassification"),e6r=o(" (MobileBERT model)"),o6r=l(),D4=a("li"),iMe=a("strong"),r6r=o("mpnet"),t6r=o(" \u2014 "),lY=a("a"),a6r=o("TFMPNetForSequenceClassification"),n6r=o(" (MPNet model)"),s6r=l(),G4=a("li"),dMe=a("strong"),l6r=o("openai-gpt"),i6r=o(" \u2014 "),iY=a("a"),d6r=o("TFOpenAIGPTForSequenceClassification"),c6r=o(" (OpenAI GPT model)"),f6r=l(),O4=a("li"),cMe=a("strong"),m6r=o("rembert"),g6r=o(" \u2014 "),dY=a("a"),h6r=o("TFRemBertForSequenceClassification"),p6r=o(" (RemBERT model)"),_6r=l(),V4=a("li"),fMe=a("strong"),u6r=o("roberta"),b6r=o(" \u2014 "),cY=a("a"),v6r=o("TFRobertaForSequenceClassification"),F6r=o(" (RoBERTa model)"),T6r=l(),X4=a("li"),mMe=a("strong"),M6r=o("roformer"),E6r=o(" \u2014 "),fY=a("a"),C6r=o("TFRoFormerForSequenceClassification"),w6r=o(" (RoFormer model)"),A6r=l(),z4=a("li"),gMe=a("strong"),L6r=o("tapas"),y6r=o(" \u2014 "),mY=a("a"),x6r=o("TFTapasForSequenceClassification"),$6r=o(" (TAPAS model)"),k6r=l(),Q4=a("li"),hMe=a("strong"),S6r=o("transfo-xl"),R6r=o(" \u2014 "),gY=a("a"),P6r=o("TFTransfoXLForSequenceClassification"),B6r=o(" (Transformer-XL model)"),I6r=l(),W4=a("li"),pMe=a("strong"),N6r=o("xlm"),q6r=o(" \u2014 "),hY=a("a"),j6r=o("TFXLMForSequenceClassification"),D6r=o(" (XLM model)"),G6r=l(),H4=a("li"),_Me=a("strong"),O6r=o("xlm-roberta"),V6r=o(" \u2014 "),pY=a("a"),X6r=o("TFXLMRobertaForSequenceClassification"),z6r=o(" (XLM-RoBERTa model)"),Q6r=l(),U4=a("li"),uMe=a("strong"),W6r=o("xlnet"),H6r=o(" \u2014 "),_Y=a("a"),U6r=o("TFXLNetForSequenceClassification"),J6r=o(" (XLNet model)"),Y6r=l(),F(J4.$$.fragment),LVe=l(),Mc=a("h2"),Y4=a("a"),bMe=a("span"),F(ox.$$.fragment),K6r=l(),vMe=a("span"),Z6r=o("TFAutoModelForMultipleChoice"),yVe=l(),lr=a("div"),F(rx.$$.fragment),eLr=l(),Ec=a("p"),oLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uY=a("a"),rLr=o("from_pretrained()"),tLr=o(" class method or the "),bY=a("a"),aLr=o("from_config()"),nLr=o(` class
method.`),sLr=l(),tx=a("p"),lLr=o("This class cannot be instantiated directly using "),FMe=a("code"),iLr=o("__init__()"),dLr=o(" (throws an error)."),cLr=l(),Nt=a("div"),F(ax.$$.fragment),fLr=l(),TMe=a("p"),mLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gLr=l(),Cc=a("p"),hLr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),pLr=o("not"),_Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),uLr=o("from_pretrained()"),bLr=o(" to load the model weights."),vLr=l(),F(K4.$$.fragment),FLr=l(),Br=a("div"),F(nx.$$.fragment),TLr=l(),EMe=a("p"),MLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ELr=l(),gn=a("p"),CLr=o("The model class to instantiate is selected based on the "),CMe=a("code"),wLr=o("model_type"),ALr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),LLr=o("pretrained_model_name_or_path"),yLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),xLr=o("pretrained_model_name_or_path"),$Lr=o(":"),kLr=l(),_e=a("ul"),Z4=a("li"),LMe=a("strong"),SLr=o("albert"),RLr=o(" \u2014 "),FY=a("a"),PLr=o("TFAlbertForMultipleChoice"),BLr=o(" (ALBERT model)"),ILr=l(),eC=a("li"),yMe=a("strong"),NLr=o("bert"),qLr=o(" \u2014 "),TY=a("a"),jLr=o("TFBertForMultipleChoice"),DLr=o(" (BERT model)"),GLr=l(),oC=a("li"),xMe=a("strong"),OLr=o("camembert"),VLr=o(" \u2014 "),MY=a("a"),XLr=o("TFCamembertForMultipleChoice"),zLr=o(" (CamemBERT model)"),QLr=l(),rC=a("li"),$Me=a("strong"),WLr=o("convbert"),HLr=o(" \u2014 "),EY=a("a"),ULr=o("TFConvBertForMultipleChoice"),JLr=o(" (ConvBERT model)"),YLr=l(),tC=a("li"),kMe=a("strong"),KLr=o("distilbert"),ZLr=o(" \u2014 "),CY=a("a"),eyr=o("TFDistilBertForMultipleChoice"),oyr=o(" (DistilBERT model)"),ryr=l(),aC=a("li"),SMe=a("strong"),tyr=o("electra"),ayr=o(" \u2014 "),wY=a("a"),nyr=o("TFElectraForMultipleChoice"),syr=o(" (ELECTRA model)"),lyr=l(),nC=a("li"),RMe=a("strong"),iyr=o("flaubert"),dyr=o(" \u2014 "),AY=a("a"),cyr=o("TFFlaubertForMultipleChoice"),fyr=o(" (FlauBERT model)"),myr=l(),sC=a("li"),PMe=a("strong"),gyr=o("funnel"),hyr=o(" \u2014 "),LY=a("a"),pyr=o("TFFunnelForMultipleChoice"),_yr=o(" (Funnel Transformer model)"),uyr=l(),lC=a("li"),BMe=a("strong"),byr=o("longformer"),vyr=o(" \u2014 "),yY=a("a"),Fyr=o("TFLongformerForMultipleChoice"),Tyr=o(" (Longformer model)"),Myr=l(),iC=a("li"),IMe=a("strong"),Eyr=o("mobilebert"),Cyr=o(" \u2014 "),xY=a("a"),wyr=o("TFMobileBertForMultipleChoice"),Ayr=o(" (MobileBERT model)"),Lyr=l(),dC=a("li"),NMe=a("strong"),yyr=o("mpnet"),xyr=o(" \u2014 "),$Y=a("a"),$yr=o("TFMPNetForMultipleChoice"),kyr=o(" (MPNet model)"),Syr=l(),cC=a("li"),qMe=a("strong"),Ryr=o("rembert"),Pyr=o(" \u2014 "),kY=a("a"),Byr=o("TFRemBertForMultipleChoice"),Iyr=o(" (RemBERT model)"),Nyr=l(),fC=a("li"),jMe=a("strong"),qyr=o("roberta"),jyr=o(" \u2014 "),SY=a("a"),Dyr=o("TFRobertaForMultipleChoice"),Gyr=o(" (RoBERTa model)"),Oyr=l(),mC=a("li"),DMe=a("strong"),Vyr=o("roformer"),Xyr=o(" \u2014 "),RY=a("a"),zyr=o("TFRoFormerForMultipleChoice"),Qyr=o(" (RoFormer model)"),Wyr=l(),gC=a("li"),GMe=a("strong"),Hyr=o("xlm"),Uyr=o(" \u2014 "),PY=a("a"),Jyr=o("TFXLMForMultipleChoice"),Yyr=o(" (XLM model)"),Kyr=l(),hC=a("li"),OMe=a("strong"),Zyr=o("xlm-roberta"),e8r=o(" \u2014 "),BY=a("a"),o8r=o("TFXLMRobertaForMultipleChoice"),r8r=o(" (XLM-RoBERTa model)"),t8r=l(),pC=a("li"),VMe=a("strong"),a8r=o("xlnet"),n8r=o(" \u2014 "),IY=a("a"),s8r=o("TFXLNetForMultipleChoice"),l8r=o(" (XLNet model)"),i8r=l(),F(_C.$$.fragment),xVe=l(),wc=a("h2"),uC=a("a"),XMe=a("span"),F(sx.$$.fragment),d8r=l(),zMe=a("span"),c8r=o("TFAutoModelForNextSentencePrediction"),$Ve=l(),ir=a("div"),F(lx.$$.fragment),f8r=l(),Ac=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NY=a("a"),g8r=o("from_pretrained()"),h8r=o(" class method or the "),qY=a("a"),p8r=o("from_config()"),_8r=o(` class
method.`),u8r=l(),ix=a("p"),b8r=o("This class cannot be instantiated directly using "),QMe=a("code"),v8r=o("__init__()"),F8r=o(" (throws an error)."),T8r=l(),qt=a("div"),F(dx.$$.fragment),M8r=l(),WMe=a("p"),E8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C8r=l(),Lc=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),A8r=o("not"),L8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),y8r=o("from_pretrained()"),x8r=o(" to load the model weights."),$8r=l(),F(bC.$$.fragment),k8r=l(),Ir=a("div"),F(cx.$$.fragment),S8r=l(),UMe=a("p"),R8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P8r=l(),hn=a("p"),B8r=o("The model class to instantiate is selected based on the "),JMe=a("code"),I8r=o("model_type"),N8r=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),q8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),fx=a("ul"),vC=a("li"),ZMe=a("strong"),V8r=o("bert"),X8r=o(" \u2014 "),DY=a("a"),z8r=o("TFBertForNextSentencePrediction"),Q8r=o(" (BERT model)"),W8r=l(),FC=a("li"),eEe=a("strong"),H8r=o("mobilebert"),U8r=o(" \u2014 "),GY=a("a"),J8r=o("TFMobileBertForNextSentencePrediction"),Y8r=o(" (MobileBERT model)"),K8r=l(),F(TC.$$.fragment),kVe=l(),yc=a("h2"),MC=a("a"),oEe=a("span"),F(mx.$$.fragment),Z8r=l(),rEe=a("span"),e9r=o("TFAutoModelForTableQuestionAnswering"),SVe=l(),dr=a("div"),F(gx.$$.fragment),o9r=l(),xc=a("p"),r9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OY=a("a"),t9r=o("from_pretrained()"),a9r=o(" class method or the "),VY=a("a"),n9r=o("from_config()"),s9r=o(` class
method.`),l9r=l(),hx=a("p"),i9r=o("This class cannot be instantiated directly using "),tEe=a("code"),d9r=o("__init__()"),c9r=o(" (throws an error)."),f9r=l(),jt=a("div"),F(px.$$.fragment),m9r=l(),aEe=a("p"),g9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h9r=l(),$c=a("p"),p9r=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),_9r=o("not"),u9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),b9r=o("from_pretrained()"),v9r=o(" to load the model weights."),F9r=l(),F(EC.$$.fragment),T9r=l(),Nr=a("div"),F(_x.$$.fragment),M9r=l(),sEe=a("p"),E9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),C9r=l(),pn=a("p"),w9r=o("The model class to instantiate is selected based on the "),lEe=a("code"),A9r=o("model_type"),L9r=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),y9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),$9r=o("pretrained_model_name_or_path"),k9r=o(":"),S9r=l(),cEe=a("ul"),CC=a("li"),fEe=a("strong"),R9r=o("tapas"),P9r=o(" \u2014 "),zY=a("a"),B9r=o("TFTapasForQuestionAnswering"),I9r=o(" (TAPAS model)"),N9r=l(),F(wC.$$.fragment),RVe=l(),kc=a("h2"),AC=a("a"),mEe=a("span"),F(ux.$$.fragment),q9r=l(),gEe=a("span"),j9r=o("TFAutoModelForTokenClassification"),PVe=l(),cr=a("div"),F(bx.$$.fragment),D9r=l(),Sc=a("p"),G9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=a("a"),O9r=o("from_pretrained()"),V9r=o(" class method or the "),WY=a("a"),X9r=o("from_config()"),z9r=o(` class
method.`),Q9r=l(),vx=a("p"),W9r=o("This class cannot be instantiated directly using "),hEe=a("code"),H9r=o("__init__()"),U9r=o(" (throws an error)."),J9r=l(),Dt=a("div"),F(Fx.$$.fragment),Y9r=l(),pEe=a("p"),K9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z9r=l(),Rc=a("p"),exr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),oxr=o("not"),rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),txr=o("from_pretrained()"),axr=o(" to load the model weights."),nxr=l(),F(LC.$$.fragment),sxr=l(),qr=a("div"),F(Tx.$$.fragment),lxr=l(),uEe=a("p"),ixr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dxr=l(),_n=a("p"),cxr=o("The model class to instantiate is selected based on the "),bEe=a("code"),fxr=o("model_type"),mxr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),pxr=o("pretrained_model_name_or_path"),_xr=o(":"),uxr=l(),de=a("ul"),yC=a("li"),TEe=a("strong"),bxr=o("albert"),vxr=o(" \u2014 "),UY=a("a"),Fxr=o("TFAlbertForTokenClassification"),Txr=o(" (ALBERT model)"),Mxr=l(),xC=a("li"),MEe=a("strong"),Exr=o("bert"),Cxr=o(" \u2014 "),JY=a("a"),wxr=o("TFBertForTokenClassification"),Axr=o(" (BERT model)"),Lxr=l(),$C=a("li"),EEe=a("strong"),yxr=o("camembert"),xxr=o(" \u2014 "),YY=a("a"),$xr=o("TFCamembertForTokenClassification"),kxr=o(" (CamemBERT model)"),Sxr=l(),kC=a("li"),CEe=a("strong"),Rxr=o("convbert"),Pxr=o(" \u2014 "),KY=a("a"),Bxr=o("TFConvBertForTokenClassification"),Ixr=o(" (ConvBERT model)"),Nxr=l(),SC=a("li"),wEe=a("strong"),qxr=o("deberta"),jxr=o(" \u2014 "),ZY=a("a"),Dxr=o("TFDebertaForTokenClassification"),Gxr=o(" (DeBERTa model)"),Oxr=l(),RC=a("li"),AEe=a("strong"),Vxr=o("deberta-v2"),Xxr=o(" \u2014 "),eK=a("a"),zxr=o("TFDebertaV2ForTokenClassification"),Qxr=o(" (DeBERTa-v2 model)"),Wxr=l(),PC=a("li"),LEe=a("strong"),Hxr=o("distilbert"),Uxr=o(" \u2014 "),oK=a("a"),Jxr=o("TFDistilBertForTokenClassification"),Yxr=o(" (DistilBERT model)"),Kxr=l(),BC=a("li"),yEe=a("strong"),Zxr=o("electra"),e$r=o(" \u2014 "),rK=a("a"),o$r=o("TFElectraForTokenClassification"),r$r=o(" (ELECTRA model)"),t$r=l(),IC=a("li"),xEe=a("strong"),a$r=o("flaubert"),n$r=o(" \u2014 "),tK=a("a"),s$r=o("TFFlaubertForTokenClassification"),l$r=o(" (FlauBERT model)"),i$r=l(),NC=a("li"),$Ee=a("strong"),d$r=o("funnel"),c$r=o(" \u2014 "),aK=a("a"),f$r=o("TFFunnelForTokenClassification"),m$r=o(" (Funnel Transformer model)"),g$r=l(),qC=a("li"),kEe=a("strong"),h$r=o("layoutlm"),p$r=o(" \u2014 "),nK=a("a"),_$r=o("TFLayoutLMForTokenClassification"),u$r=o(" (LayoutLM model)"),b$r=l(),jC=a("li"),SEe=a("strong"),v$r=o("longformer"),F$r=o(" \u2014 "),sK=a("a"),T$r=o("TFLongformerForTokenClassification"),M$r=o(" (Longformer model)"),E$r=l(),DC=a("li"),REe=a("strong"),C$r=o("mobilebert"),w$r=o(" \u2014 "),lK=a("a"),A$r=o("TFMobileBertForTokenClassification"),L$r=o(" (MobileBERT model)"),y$r=l(),GC=a("li"),PEe=a("strong"),x$r=o("mpnet"),$$r=o(" \u2014 "),iK=a("a"),k$r=o("TFMPNetForTokenClassification"),S$r=o(" (MPNet model)"),R$r=l(),OC=a("li"),BEe=a("strong"),P$r=o("rembert"),B$r=o(" \u2014 "),dK=a("a"),I$r=o("TFRemBertForTokenClassification"),N$r=o(" (RemBERT model)"),q$r=l(),VC=a("li"),IEe=a("strong"),j$r=o("roberta"),D$r=o(" \u2014 "),cK=a("a"),G$r=o("TFRobertaForTokenClassification"),O$r=o(" (RoBERTa model)"),V$r=l(),XC=a("li"),NEe=a("strong"),X$r=o("roformer"),z$r=o(" \u2014 "),fK=a("a"),Q$r=o("TFRoFormerForTokenClassification"),W$r=o(" (RoFormer model)"),H$r=l(),zC=a("li"),qEe=a("strong"),U$r=o("xlm"),J$r=o(" \u2014 "),mK=a("a"),Y$r=o("TFXLMForTokenClassification"),K$r=o(" (XLM model)"),Z$r=l(),QC=a("li"),jEe=a("strong"),ekr=o("xlm-roberta"),okr=o(" \u2014 "),gK=a("a"),rkr=o("TFXLMRobertaForTokenClassification"),tkr=o(" (XLM-RoBERTa model)"),akr=l(),WC=a("li"),DEe=a("strong"),nkr=o("xlnet"),skr=o(" \u2014 "),hK=a("a"),lkr=o("TFXLNetForTokenClassification"),ikr=o(" (XLNet model)"),dkr=l(),F(HC.$$.fragment),BVe=l(),Pc=a("h2"),UC=a("a"),GEe=a("span"),F(Mx.$$.fragment),ckr=l(),OEe=a("span"),fkr=o("TFAutoModelForQuestionAnswering"),IVe=l(),fr=a("div"),F(Ex.$$.fragment),mkr=l(),Bc=a("p"),gkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pK=a("a"),hkr=o("from_pretrained()"),pkr=o(" class method or the "),_K=a("a"),_kr=o("from_config()"),ukr=o(` class
method.`),bkr=l(),Cx=a("p"),vkr=o("This class cannot be instantiated directly using "),VEe=a("code"),Fkr=o("__init__()"),Tkr=o(" (throws an error)."),Mkr=l(),Gt=a("div"),F(wx.$$.fragment),Ekr=l(),XEe=a("p"),Ckr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wkr=l(),Ic=a("p"),Akr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),Lkr=o("not"),ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),xkr=o("from_pretrained()"),$kr=o(" to load the model weights."),kkr=l(),F(JC.$$.fragment),Skr=l(),jr=a("div"),F(Ax.$$.fragment),Rkr=l(),QEe=a("p"),Pkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bkr=l(),un=a("p"),Ikr=o("The model class to instantiate is selected based on the "),WEe=a("code"),Nkr=o("model_type"),qkr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),jkr=o("pretrained_model_name_or_path"),Dkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),Gkr=o("pretrained_model_name_or_path"),Okr=o(":"),Vkr=l(),ce=a("ul"),YC=a("li"),JEe=a("strong"),Xkr=o("albert"),zkr=o(" \u2014 "),bK=a("a"),Qkr=o("TFAlbertForQuestionAnswering"),Wkr=o(" (ALBERT model)"),Hkr=l(),KC=a("li"),YEe=a("strong"),Ukr=o("bert"),Jkr=o(" \u2014 "),vK=a("a"),Ykr=o("TFBertForQuestionAnswering"),Kkr=o(" (BERT model)"),Zkr=l(),ZC=a("li"),KEe=a("strong"),eSr=o("camembert"),oSr=o(" \u2014 "),FK=a("a"),rSr=o("TFCamembertForQuestionAnswering"),tSr=o(" (CamemBERT model)"),aSr=l(),e5=a("li"),ZEe=a("strong"),nSr=o("convbert"),sSr=o(" \u2014 "),TK=a("a"),lSr=o("TFConvBertForQuestionAnswering"),iSr=o(" (ConvBERT model)"),dSr=l(),o5=a("li"),e4e=a("strong"),cSr=o("deberta"),fSr=o(" \u2014 "),MK=a("a"),mSr=o("TFDebertaForQuestionAnswering"),gSr=o(" (DeBERTa model)"),hSr=l(),r5=a("li"),o4e=a("strong"),pSr=o("deberta-v2"),_Sr=o(" \u2014 "),EK=a("a"),uSr=o("TFDebertaV2ForQuestionAnswering"),bSr=o(" (DeBERTa-v2 model)"),vSr=l(),t5=a("li"),r4e=a("strong"),FSr=o("distilbert"),TSr=o(" \u2014 "),CK=a("a"),MSr=o("TFDistilBertForQuestionAnswering"),ESr=o(" (DistilBERT model)"),CSr=l(),a5=a("li"),t4e=a("strong"),wSr=o("electra"),ASr=o(" \u2014 "),wK=a("a"),LSr=o("TFElectraForQuestionAnswering"),ySr=o(" (ELECTRA model)"),xSr=l(),n5=a("li"),a4e=a("strong"),$Sr=o("flaubert"),kSr=o(" \u2014 "),AK=a("a"),SSr=o("TFFlaubertForQuestionAnsweringSimple"),RSr=o(" (FlauBERT model)"),PSr=l(),s5=a("li"),n4e=a("strong"),BSr=o("funnel"),ISr=o(" \u2014 "),LK=a("a"),NSr=o("TFFunnelForQuestionAnswering"),qSr=o(" (Funnel Transformer model)"),jSr=l(),l5=a("li"),s4e=a("strong"),DSr=o("gptj"),GSr=o(" \u2014 "),yK=a("a"),OSr=o("TFGPTJForQuestionAnswering"),VSr=o(" (GPT-J model)"),XSr=l(),i5=a("li"),l4e=a("strong"),zSr=o("longformer"),QSr=o(" \u2014 "),xK=a("a"),WSr=o("TFLongformerForQuestionAnswering"),HSr=o(" (Longformer model)"),USr=l(),d5=a("li"),i4e=a("strong"),JSr=o("mobilebert"),YSr=o(" \u2014 "),$K=a("a"),KSr=o("TFMobileBertForQuestionAnswering"),ZSr=o(" (MobileBERT model)"),eRr=l(),c5=a("li"),d4e=a("strong"),oRr=o("mpnet"),rRr=o(" \u2014 "),kK=a("a"),tRr=o("TFMPNetForQuestionAnswering"),aRr=o(" (MPNet model)"),nRr=l(),f5=a("li"),c4e=a("strong"),sRr=o("rembert"),lRr=o(" \u2014 "),SK=a("a"),iRr=o("TFRemBertForQuestionAnswering"),dRr=o(" (RemBERT model)"),cRr=l(),m5=a("li"),f4e=a("strong"),fRr=o("roberta"),mRr=o(" \u2014 "),RK=a("a"),gRr=o("TFRobertaForQuestionAnswering"),hRr=o(" (RoBERTa model)"),pRr=l(),g5=a("li"),m4e=a("strong"),_Rr=o("roformer"),uRr=o(" \u2014 "),PK=a("a"),bRr=o("TFRoFormerForQuestionAnswering"),vRr=o(" (RoFormer model)"),FRr=l(),h5=a("li"),g4e=a("strong"),TRr=o("xlm"),MRr=o(" \u2014 "),BK=a("a"),ERr=o("TFXLMForQuestionAnsweringSimple"),CRr=o(" (XLM model)"),wRr=l(),p5=a("li"),h4e=a("strong"),ARr=o("xlm-roberta"),LRr=o(" \u2014 "),IK=a("a"),yRr=o("TFXLMRobertaForQuestionAnswering"),xRr=o(" (XLM-RoBERTa model)"),$Rr=l(),_5=a("li"),p4e=a("strong"),kRr=o("xlnet"),SRr=o(" \u2014 "),NK=a("a"),RRr=o("TFXLNetForQuestionAnsweringSimple"),PRr=o(" (XLNet model)"),BRr=l(),F(u5.$$.fragment),NVe=l(),Nc=a("h2"),b5=a("a"),_4e=a("span"),F(Lx.$$.fragment),IRr=l(),u4e=a("span"),NRr=o("TFAutoModelForVision2Seq"),qVe=l(),mr=a("div"),F(yx.$$.fragment),qRr=l(),qc=a("p"),jRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qK=a("a"),DRr=o("from_pretrained()"),GRr=o(" class method or the "),jK=a("a"),ORr=o("from_config()"),VRr=o(` class
method.`),XRr=l(),xx=a("p"),zRr=o("This class cannot be instantiated directly using "),b4e=a("code"),QRr=o("__init__()"),WRr=o(" (throws an error)."),HRr=l(),Ot=a("div"),F($x.$$.fragment),URr=l(),v4e=a("p"),JRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YRr=l(),jc=a("p"),KRr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),ZRr=o("not"),ePr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),oPr=o("from_pretrained()"),rPr=o(" to load the model weights."),tPr=l(),F(v5.$$.fragment),aPr=l(),Dr=a("div"),F(kx.$$.fragment),nPr=l(),T4e=a("p"),sPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lPr=l(),bn=a("p"),iPr=o("The model class to instantiate is selected based on the "),M4e=a("code"),dPr=o("model_type"),cPr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),fPr=o("pretrained_model_name_or_path"),mPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),gPr=o("pretrained_model_name_or_path"),hPr=o(":"),pPr=l(),w4e=a("ul"),F5=a("li"),A4e=a("strong"),_Pr=o("vision-encoder-decoder"),uPr=o(" \u2014 "),GK=a("a"),bPr=o("TFVisionEncoderDecoderModel"),vPr=o(" (Vision Encoder decoder model)"),FPr=l(),F(T5.$$.fragment),jVe=l(),Dc=a("h2"),M5=a("a"),L4e=a("span"),F(Sx.$$.fragment),TPr=l(),y4e=a("span"),MPr=o("TFAutoModelForSpeechSeq2Seq"),DVe=l(),gr=a("div"),F(Rx.$$.fragment),EPr=l(),Gc=a("p"),CPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OK=a("a"),wPr=o("from_pretrained()"),APr=o(" class method or the "),VK=a("a"),LPr=o("from_config()"),yPr=o(` class
method.`),xPr=l(),Px=a("p"),$Pr=o("This class cannot be instantiated directly using "),x4e=a("code"),kPr=o("__init__()"),SPr=o(" (throws an error)."),RPr=l(),Vt=a("div"),F(Bx.$$.fragment),PPr=l(),$4e=a("p"),BPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IPr=l(),Oc=a("p"),NPr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),qPr=o("not"),jPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),DPr=o("from_pretrained()"),GPr=o(" to load the model weights."),OPr=l(),F(E5.$$.fragment),VPr=l(),Gr=a("div"),F(Ix.$$.fragment),XPr=l(),S4e=a("p"),zPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),QPr=l(),vn=a("p"),WPr=o("The model class to instantiate is selected based on the "),R4e=a("code"),HPr=o("model_type"),UPr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),JPr=o("pretrained_model_name_or_path"),YPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(":"),eBr=l(),I4e=a("ul"),C5=a("li"),N4e=a("strong"),oBr=o("speech_to_text"),rBr=o(" \u2014 "),zK=a("a"),tBr=o("TFSpeech2TextForConditionalGeneration"),aBr=o(" (Speech2Text model)"),nBr=l(),F(w5.$$.fragment),GVe=l(),Vc=a("h2"),A5=a("a"),q4e=a("span"),F(Nx.$$.fragment),sBr=l(),j4e=a("span"),lBr=o("FlaxAutoModel"),OVe=l(),hr=a("div"),F(qx.$$.fragment),iBr=l(),Xc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QK=a("a"),cBr=o("from_pretrained()"),fBr=o(" class method or the "),WK=a("a"),mBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),jx=a("p"),pBr=o("This class cannot be instantiated directly using "),D4e=a("code"),_Br=o("__init__()"),uBr=o(" (throws an error)."),bBr=l(),Xt=a("div"),F(Dx.$$.fragment),vBr=l(),G4e=a("p"),FBr=o("Instantiates one of the base model classes of the library from a configuration."),TBr=l(),zc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),LBr=l(),F(L5.$$.fragment),yBr=l(),Or=a("div"),F(Gx.$$.fragment),xBr=l(),V4e=a("p"),$Br=o("Instantiate one of the base model classes of the library from a pretrained model."),kBr=l(),Fn=a("p"),SBr=o("The model class to instantiate is selected based on the "),X4e=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),oe=a("ul"),y5=a("li"),W4e=a("strong"),DBr=o("albert"),GBr=o(" \u2014 "),UK=a("a"),OBr=o("FlaxAlbertModel"),VBr=o(" (ALBERT model)"),XBr=l(),x5=a("li"),H4e=a("strong"),zBr=o("bart"),QBr=o(" \u2014 "),JK=a("a"),WBr=o("FlaxBartModel"),HBr=o(" (BART model)"),UBr=l(),$5=a("li"),U4e=a("strong"),JBr=o("beit"),YBr=o(" \u2014 "),YK=a("a"),KBr=o("FlaxBeitModel"),ZBr=o(" (BEiT model)"),eIr=l(),k5=a("li"),J4e=a("strong"),oIr=o("bert"),rIr=o(" \u2014 "),KK=a("a"),tIr=o("FlaxBertModel"),aIr=o(" (BERT model)"),nIr=l(),S5=a("li"),Y4e=a("strong"),sIr=o("big_bird"),lIr=o(" \u2014 "),ZK=a("a"),iIr=o("FlaxBigBirdModel"),dIr=o(" (BigBird model)"),cIr=l(),R5=a("li"),K4e=a("strong"),fIr=o("blenderbot"),mIr=o(" \u2014 "),eZ=a("a"),gIr=o("FlaxBlenderbotModel"),hIr=o(" (Blenderbot model)"),pIr=l(),P5=a("li"),Z4e=a("strong"),_Ir=o("blenderbot-small"),uIr=o(" \u2014 "),oZ=a("a"),bIr=o("FlaxBlenderbotSmallModel"),vIr=o(" (BlenderbotSmall model)"),FIr=l(),B5=a("li"),eCe=a("strong"),TIr=o("clip"),MIr=o(" \u2014 "),rZ=a("a"),EIr=o("FlaxCLIPModel"),CIr=o(" (CLIP model)"),wIr=l(),I5=a("li"),oCe=a("strong"),AIr=o("distilbert"),LIr=o(" \u2014 "),tZ=a("a"),yIr=o("FlaxDistilBertModel"),xIr=o(" (DistilBERT model)"),$Ir=l(),N5=a("li"),rCe=a("strong"),kIr=o("electra"),SIr=o(" \u2014 "),aZ=a("a"),RIr=o("FlaxElectraModel"),PIr=o(" (ELECTRA model)"),BIr=l(),q5=a("li"),tCe=a("strong"),IIr=o("gpt2"),NIr=o(" \u2014 "),nZ=a("a"),qIr=o("FlaxGPT2Model"),jIr=o(" (OpenAI GPT-2 model)"),DIr=l(),j5=a("li"),aCe=a("strong"),GIr=o("gpt_neo"),OIr=o(" \u2014 "),sZ=a("a"),VIr=o("FlaxGPTNeoModel"),XIr=o(" (GPT Neo model)"),zIr=l(),D5=a("li"),nCe=a("strong"),QIr=o("gptj"),WIr=o(" \u2014 "),lZ=a("a"),HIr=o("FlaxGPTJModel"),UIr=o(" (GPT-J model)"),JIr=l(),G5=a("li"),sCe=a("strong"),YIr=o("longt5"),KIr=o(" \u2014 "),iZ=a("a"),ZIr=o("FlaxLongT5Model"),eNr=o(" (LongT5 model)"),oNr=l(),O5=a("li"),lCe=a("strong"),rNr=o("marian"),tNr=o(" \u2014 "),dZ=a("a"),aNr=o("FlaxMarianModel"),nNr=o(" (Marian model)"),sNr=l(),V5=a("li"),iCe=a("strong"),lNr=o("mbart"),iNr=o(" \u2014 "),cZ=a("a"),dNr=o("FlaxMBartModel"),cNr=o(" (mBART model)"),fNr=l(),X5=a("li"),dCe=a("strong"),mNr=o("mt5"),gNr=o(" \u2014 "),fZ=a("a"),hNr=o("FlaxMT5Model"),pNr=o(" (MT5 model)"),_Nr=l(),z5=a("li"),cCe=a("strong"),uNr=o("opt"),bNr=o(" \u2014 "),mZ=a("a"),vNr=o("FlaxOPTModel"),FNr=o(" (OPT model)"),TNr=l(),Q5=a("li"),fCe=a("strong"),MNr=o("pegasus"),ENr=o(" \u2014 "),gZ=a("a"),CNr=o("FlaxPegasusModel"),wNr=o(" (Pegasus model)"),ANr=l(),W5=a("li"),mCe=a("strong"),LNr=o("roberta"),yNr=o(" \u2014 "),hZ=a("a"),xNr=o("FlaxRobertaModel"),$Nr=o(" (RoBERTa model)"),kNr=l(),H5=a("li"),gCe=a("strong"),SNr=o("roformer"),RNr=o(" \u2014 "),pZ=a("a"),PNr=o("FlaxRoFormerModel"),BNr=o(" (RoFormer model)"),INr=l(),U5=a("li"),hCe=a("strong"),NNr=o("t5"),qNr=o(" \u2014 "),_Z=a("a"),jNr=o("FlaxT5Model"),DNr=o(" (T5 model)"),GNr=l(),J5=a("li"),pCe=a("strong"),ONr=o("vision-text-dual-encoder"),VNr=o(" \u2014 "),uZ=a("a"),XNr=o("FlaxVisionTextDualEncoderModel"),zNr=o(" (VisionTextDualEncoder model)"),QNr=l(),Y5=a("li"),_Ce=a("strong"),WNr=o("vit"),HNr=o(" \u2014 "),bZ=a("a"),UNr=o("FlaxViTModel"),JNr=o(" (ViT model)"),YNr=l(),K5=a("li"),uCe=a("strong"),KNr=o("wav2vec2"),ZNr=o(" \u2014 "),vZ=a("a"),eqr=o("FlaxWav2Vec2Model"),oqr=o(" (Wav2Vec2 model)"),rqr=l(),Z5=a("li"),bCe=a("strong"),tqr=o("xglm"),aqr=o(" \u2014 "),FZ=a("a"),nqr=o("FlaxXGLMModel"),sqr=o(" (XGLM model)"),lqr=l(),e0=a("li"),vCe=a("strong"),iqr=o("xlm-roberta"),dqr=o(" \u2014 "),TZ=a("a"),cqr=o("FlaxXLMRobertaModel"),fqr=o(" (XLM-RoBERTa model)"),mqr=l(),F(o0.$$.fragment),VVe=l(),Qc=a("h2"),r0=a("a"),FCe=a("span"),F(Ox.$$.fragment),gqr=l(),TCe=a("span"),hqr=o("FlaxAutoModelForCausalLM"),XVe=l(),pr=a("div"),F(Vx.$$.fragment),pqr=l(),Wc=a("p"),_qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MZ=a("a"),uqr=o("from_pretrained()"),bqr=o(" class method or the "),EZ=a("a"),vqr=o("from_config()"),Fqr=o(` class
method.`),Tqr=l(),Xx=a("p"),Mqr=o("This class cannot be instantiated directly using "),MCe=a("code"),Eqr=o("__init__()"),Cqr=o(" (throws an error)."),wqr=l(),zt=a("div"),F(zx.$$.fragment),Aqr=l(),ECe=a("p"),Lqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yqr=l(),Hc=a("p"),xqr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),$qr=o("not"),kqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),Sqr=o("from_pretrained()"),Rqr=o(" to load the model weights."),Pqr=l(),F(t0.$$.fragment),Bqr=l(),Vr=a("div"),F(Qx.$$.fragment),Iqr=l(),wCe=a("p"),Nqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qqr=l(),Tn=a("p"),jqr=o("The model class to instantiate is selected based on the "),ACe=a("code"),Dqr=o("model_type"),Gqr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),Oqr=o("pretrained_model_name_or_path"),Vqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(":"),Qqr=l(),xe=a("ul"),a0=a("li"),xCe=a("strong"),Wqr=o("bart"),Hqr=o(" \u2014 "),wZ=a("a"),Uqr=o("FlaxBartForCausalLM"),Jqr=o(" (BART model)"),Yqr=l(),n0=a("li"),$Ce=a("strong"),Kqr=o("bert"),Zqr=o(" \u2014 "),AZ=a("a"),ejr=o("FlaxBertForCausalLM"),ojr=o(" (BERT model)"),rjr=l(),s0=a("li"),kCe=a("strong"),tjr=o("big_bird"),ajr=o(" \u2014 "),LZ=a("a"),njr=o("FlaxBigBirdForCausalLM"),sjr=o(" (BigBird model)"),ljr=l(),l0=a("li"),SCe=a("strong"),ijr=o("electra"),djr=o(" \u2014 "),yZ=a("a"),cjr=o("FlaxElectraForCausalLM"),fjr=o(" (ELECTRA model)"),mjr=l(),i0=a("li"),RCe=a("strong"),gjr=o("gpt2"),hjr=o(" \u2014 "),xZ=a("a"),pjr=o("FlaxGPT2LMHeadModel"),_jr=o(" (OpenAI GPT-2 model)"),ujr=l(),d0=a("li"),PCe=a("strong"),bjr=o("gpt_neo"),vjr=o(" \u2014 "),$Z=a("a"),Fjr=o("FlaxGPTNeoForCausalLM"),Tjr=o(" (GPT Neo model)"),Mjr=l(),c0=a("li"),BCe=a("strong"),Ejr=o("gptj"),Cjr=o(" \u2014 "),kZ=a("a"),wjr=o("FlaxGPTJForCausalLM"),Ajr=o(" (GPT-J model)"),Ljr=l(),f0=a("li"),ICe=a("strong"),yjr=o("opt"),xjr=o(" \u2014 "),SZ=a("a"),$jr=o("FlaxOPTForCausalLM"),kjr=o(" (OPT model)"),Sjr=l(),m0=a("li"),NCe=a("strong"),Rjr=o("roberta"),Pjr=o(" \u2014 "),RZ=a("a"),Bjr=o("FlaxRobertaForCausalLM"),Ijr=o(" (RoBERTa model)"),Njr=l(),g0=a("li"),qCe=a("strong"),qjr=o("xglm"),jjr=o(" \u2014 "),PZ=a("a"),Djr=o("FlaxXGLMForCausalLM"),Gjr=o(" (XGLM model)"),Ojr=l(),F(h0.$$.fragment),zVe=l(),Uc=a("h2"),p0=a("a"),jCe=a("span"),F(Wx.$$.fragment),Vjr=l(),DCe=a("span"),Xjr=o("FlaxAutoModelForPreTraining"),QVe=l(),_r=a("div"),F(Hx.$$.fragment),zjr=l(),Jc=a("p"),Qjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BZ=a("a"),Wjr=o("from_pretrained()"),Hjr=o(" class method or the "),IZ=a("a"),Ujr=o("from_config()"),Jjr=o(` class
method.`),Yjr=l(),Ux=a("p"),Kjr=o("This class cannot be instantiated directly using "),GCe=a("code"),Zjr=o("__init__()"),eDr=o(" (throws an error)."),oDr=l(),Qt=a("div"),F(Jx.$$.fragment),rDr=l(),OCe=a("p"),tDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aDr=l(),Yc=a("p"),nDr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),sDr=o("not"),lDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),iDr=o("from_pretrained()"),dDr=o(" to load the model weights."),cDr=l(),F(_0.$$.fragment),fDr=l(),Xr=a("div"),F(Yx.$$.fragment),mDr=l(),XCe=a("p"),gDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hDr=l(),Mn=a("p"),pDr=o("The model class to instantiate is selected based on the "),zCe=a("code"),_Dr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(":"),MDr=l(),Ee=a("ul"),u0=a("li"),HCe=a("strong"),EDr=o("albert"),CDr=o(" \u2014 "),qZ=a("a"),wDr=o("FlaxAlbertForPreTraining"),ADr=o(" (ALBERT model)"),LDr=l(),b0=a("li"),UCe=a("strong"),yDr=o("bart"),xDr=o(" \u2014 "),jZ=a("a"),$Dr=o("FlaxBartForConditionalGeneration"),kDr=o(" (BART model)"),SDr=l(),v0=a("li"),JCe=a("strong"),RDr=o("bert"),PDr=o(" \u2014 "),DZ=a("a"),BDr=o("FlaxBertForPreTraining"),IDr=o(" (BERT model)"),NDr=l(),F0=a("li"),YCe=a("strong"),qDr=o("big_bird"),jDr=o(" \u2014 "),GZ=a("a"),DDr=o("FlaxBigBirdForPreTraining"),GDr=o(" (BigBird model)"),ODr=l(),T0=a("li"),KCe=a("strong"),VDr=o("electra"),XDr=o(" \u2014 "),OZ=a("a"),zDr=o("FlaxElectraForPreTraining"),QDr=o(" (ELECTRA model)"),WDr=l(),M0=a("li"),ZCe=a("strong"),HDr=o("longt5"),UDr=o(" \u2014 "),VZ=a("a"),JDr=o("FlaxLongT5ForConditionalGeneration"),YDr=o(" (LongT5 model)"),KDr=l(),E0=a("li"),e5e=a("strong"),ZDr=o("mbart"),eGr=o(" \u2014 "),XZ=a("a"),oGr=o("FlaxMBartForConditionalGeneration"),rGr=o(" (mBART model)"),tGr=l(),C0=a("li"),o5e=a("strong"),aGr=o("mt5"),nGr=o(" \u2014 "),zZ=a("a"),sGr=o("FlaxMT5ForConditionalGeneration"),lGr=o(" (MT5 model)"),iGr=l(),w0=a("li"),r5e=a("strong"),dGr=o("roberta"),cGr=o(" \u2014 "),QZ=a("a"),fGr=o("FlaxRobertaForMaskedLM"),mGr=o(" (RoBERTa model)"),gGr=l(),A0=a("li"),t5e=a("strong"),hGr=o("roformer"),pGr=o(" \u2014 "),WZ=a("a"),_Gr=o("FlaxRoFormerForMaskedLM"),uGr=o(" (RoFormer model)"),bGr=l(),L0=a("li"),a5e=a("strong"),vGr=o("t5"),FGr=o(" \u2014 "),HZ=a("a"),TGr=o("FlaxT5ForConditionalGeneration"),MGr=o(" (T5 model)"),EGr=l(),y0=a("li"),n5e=a("strong"),CGr=o("wav2vec2"),wGr=o(" \u2014 "),UZ=a("a"),AGr=o("FlaxWav2Vec2ForPreTraining"),LGr=o(" (Wav2Vec2 model)"),yGr=l(),x0=a("li"),s5e=a("strong"),xGr=o("xlm-roberta"),$Gr=o(" \u2014 "),JZ=a("a"),kGr=o("FlaxXLMRobertaForMaskedLM"),SGr=o(" (XLM-RoBERTa model)"),RGr=l(),F($0.$$.fragment),WVe=l(),Kc=a("h2"),k0=a("a"),l5e=a("span"),F(Kx.$$.fragment),PGr=l(),i5e=a("span"),BGr=o("FlaxAutoModelForMaskedLM"),HVe=l(),ur=a("div"),F(Zx.$$.fragment),IGr=l(),Zc=a("p"),NGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YZ=a("a"),qGr=o("from_pretrained()"),jGr=o(" class method or the "),KZ=a("a"),DGr=o("from_config()"),GGr=o(` class
method.`),OGr=l(),e$=a("p"),VGr=o("This class cannot be instantiated directly using "),d5e=a("code"),XGr=o("__init__()"),zGr=o(" (throws an error)."),QGr=l(),Wt=a("div"),F(o$.$$.fragment),WGr=l(),c5e=a("p"),HGr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UGr=l(),ef=a("p"),JGr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),YGr=o("not"),KGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),ZGr=o("from_pretrained()"),eOr=o(" to load the model weights."),oOr=l(),F(S0.$$.fragment),rOr=l(),zr=a("div"),F(r$.$$.fragment),tOr=l(),m5e=a("p"),aOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nOr=l(),En=a("p"),sOr=o("The model class to instantiate is selected based on the "),g5e=a("code"),lOr=o("model_type"),iOr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),dOr=o("pretrained_model_name_or_path"),cOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),fOr=o("pretrained_model_name_or_path"),mOr=o(":"),gOr=l(),$e=a("ul"),R0=a("li"),_5e=a("strong"),hOr=o("albert"),pOr=o(" \u2014 "),eee=a("a"),_Or=o("FlaxAlbertForMaskedLM"),uOr=o(" (ALBERT model)"),bOr=l(),P0=a("li"),u5e=a("strong"),vOr=o("bart"),FOr=o(" \u2014 "),oee=a("a"),TOr=o("FlaxBartForConditionalGeneration"),MOr=o(" (BART model)"),EOr=l(),B0=a("li"),b5e=a("strong"),COr=o("bert"),wOr=o(" \u2014 "),ree=a("a"),AOr=o("FlaxBertForMaskedLM"),LOr=o(" (BERT model)"),yOr=l(),I0=a("li"),v5e=a("strong"),xOr=o("big_bird"),$Or=o(" \u2014 "),tee=a("a"),kOr=o("FlaxBigBirdForMaskedLM"),SOr=o(" (BigBird model)"),ROr=l(),N0=a("li"),F5e=a("strong"),POr=o("distilbert"),BOr=o(" \u2014 "),aee=a("a"),IOr=o("FlaxDistilBertForMaskedLM"),NOr=o(" (DistilBERT model)"),qOr=l(),q0=a("li"),T5e=a("strong"),jOr=o("electra"),DOr=o(" \u2014 "),nee=a("a"),GOr=o("FlaxElectraForMaskedLM"),OOr=o(" (ELECTRA model)"),VOr=l(),j0=a("li"),M5e=a("strong"),XOr=o("mbart"),zOr=o(" \u2014 "),see=a("a"),QOr=o("FlaxMBartForConditionalGeneration"),WOr=o(" (mBART model)"),HOr=l(),D0=a("li"),E5e=a("strong"),UOr=o("roberta"),JOr=o(" \u2014 "),lee=a("a"),YOr=o("FlaxRobertaForMaskedLM"),KOr=o(" (RoBERTa model)"),ZOr=l(),G0=a("li"),C5e=a("strong"),eVr=o("roformer"),oVr=o(" \u2014 "),iee=a("a"),rVr=o("FlaxRoFormerForMaskedLM"),tVr=o(" (RoFormer model)"),aVr=l(),O0=a("li"),w5e=a("strong"),nVr=o("xlm-roberta"),sVr=o(" \u2014 "),dee=a("a"),lVr=o("FlaxXLMRobertaForMaskedLM"),iVr=o(" (XLM-RoBERTa model)"),dVr=l(),F(V0.$$.fragment),UVe=l(),of=a("h2"),X0=a("a"),A5e=a("span"),F(t$.$$.fragment),cVr=l(),L5e=a("span"),fVr=o("FlaxAutoModelForSeq2SeqLM"),JVe=l(),br=a("div"),F(a$.$$.fragment),mVr=l(),rf=a("p"),gVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cee=a("a"),hVr=o("from_pretrained()"),pVr=o(" class method or the "),fee=a("a"),_Vr=o("from_config()"),uVr=o(` class
method.`),bVr=l(),n$=a("p"),vVr=o("This class cannot be instantiated directly using "),y5e=a("code"),FVr=o("__init__()"),TVr=o(" (throws an error)."),MVr=l(),Ht=a("div"),F(s$.$$.fragment),EVr=l(),x5e=a("p"),CVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wVr=l(),tf=a("p"),AVr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),LVr=o("not"),yVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),xVr=o("from_pretrained()"),$Vr=o(" to load the model weights."),kVr=l(),F(z0.$$.fragment),SVr=l(),Qr=a("div"),F(l$.$$.fragment),RVr=l(),k5e=a("p"),PVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BVr=l(),Cn=a("p"),IVr=o("The model class to instantiate is selected based on the "),S5e=a("code"),NVr=o("model_type"),qVr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),jVr=o("pretrained_model_name_or_path"),DVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=a("code"),GVr=o("pretrained_model_name_or_path"),OVr=o(":"),VVr=l(),ke=a("ul"),Q0=a("li"),B5e=a("strong"),XVr=o("bart"),zVr=o(" \u2014 "),gee=a("a"),QVr=o("FlaxBartForConditionalGeneration"),WVr=o(" (BART model)"),HVr=l(),W0=a("li"),I5e=a("strong"),UVr=o("blenderbot"),JVr=o(" \u2014 "),hee=a("a"),YVr=o("FlaxBlenderbotForConditionalGeneration"),KVr=o(" (Blenderbot model)"),ZVr=l(),H0=a("li"),N5e=a("strong"),eXr=o("blenderbot-small"),oXr=o(" \u2014 "),pee=a("a"),rXr=o("FlaxBlenderbotSmallForConditionalGeneration"),tXr=o(" (BlenderbotSmall model)"),aXr=l(),U0=a("li"),q5e=a("strong"),nXr=o("encoder-decoder"),sXr=o(" \u2014 "),_ee=a("a"),lXr=o("FlaxEncoderDecoderModel"),iXr=o(" (Encoder decoder model)"),dXr=l(),J0=a("li"),j5e=a("strong"),cXr=o("longt5"),fXr=o(" \u2014 "),uee=a("a"),mXr=o("FlaxLongT5ForConditionalGeneration"),gXr=o(" (LongT5 model)"),hXr=l(),Y0=a("li"),D5e=a("strong"),pXr=o("marian"),_Xr=o(" \u2014 "),bee=a("a"),uXr=o("FlaxMarianMTModel"),bXr=o(" (Marian model)"),vXr=l(),K0=a("li"),G5e=a("strong"),FXr=o("mbart"),TXr=o(" \u2014 "),vee=a("a"),MXr=o("FlaxMBartForConditionalGeneration"),EXr=o(" (mBART model)"),CXr=l(),Z0=a("li"),O5e=a("strong"),wXr=o("mt5"),AXr=o(" \u2014 "),Fee=a("a"),LXr=o("FlaxMT5ForConditionalGeneration"),yXr=o(" (MT5 model)"),xXr=l(),ew=a("li"),V5e=a("strong"),$Xr=o("pegasus"),kXr=o(" \u2014 "),Tee=a("a"),SXr=o("FlaxPegasusForConditionalGeneration"),RXr=o(" (Pegasus model)"),PXr=l(),ow=a("li"),X5e=a("strong"),BXr=o("t5"),IXr=o(" \u2014 "),Mee=a("a"),NXr=o("FlaxT5ForConditionalGeneration"),qXr=o(" (T5 model)"),jXr=l(),F(rw.$$.fragment),YVe=l(),af=a("h2"),tw=a("a"),z5e=a("span"),F(i$.$$.fragment),DXr=l(),Q5e=a("span"),GXr=o("FlaxAutoModelForSequenceClassification"),KVe=l(),vr=a("div"),F(d$.$$.fragment),OXr=l(),nf=a("p"),VXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eee=a("a"),XXr=o("from_pretrained()"),zXr=o(" class method or the "),Cee=a("a"),QXr=o("from_config()"),WXr=o(` class
method.`),HXr=l(),c$=a("p"),UXr=o("This class cannot be instantiated directly using "),W5e=a("code"),JXr=o("__init__()"),YXr=o(" (throws an error)."),KXr=l(),Ut=a("div"),F(f$.$$.fragment),ZXr=l(),H5e=a("p"),ezr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ozr=l(),sf=a("p"),rzr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),tzr=o("not"),azr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),nzr=o("from_pretrained()"),szr=o(" to load the model weights."),lzr=l(),F(aw.$$.fragment),izr=l(),Wr=a("div"),F(m$.$$.fragment),dzr=l(),J5e=a("p"),czr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fzr=l(),wn=a("p"),mzr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),gzr=o("model_type"),hzr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),pzr=o("pretrained_model_name_or_path"),_zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),uzr=o("pretrained_model_name_or_path"),bzr=o(":"),vzr=l(),Se=a("ul"),nw=a("li"),e0e=a("strong"),Fzr=o("albert"),Tzr=o(" \u2014 "),Aee=a("a"),Mzr=o("FlaxAlbertForSequenceClassification"),Ezr=o(" (ALBERT model)"),Czr=l(),sw=a("li"),o0e=a("strong"),wzr=o("bart"),Azr=o(" \u2014 "),Lee=a("a"),Lzr=o("FlaxBartForSequenceClassification"),yzr=o(" (BART model)"),xzr=l(),lw=a("li"),r0e=a("strong"),$zr=o("bert"),kzr=o(" \u2014 "),yee=a("a"),Szr=o("FlaxBertForSequenceClassification"),Rzr=o(" (BERT model)"),Pzr=l(),iw=a("li"),t0e=a("strong"),Bzr=o("big_bird"),Izr=o(" \u2014 "),xee=a("a"),Nzr=o("FlaxBigBirdForSequenceClassification"),qzr=o(" (BigBird model)"),jzr=l(),dw=a("li"),a0e=a("strong"),Dzr=o("distilbert"),Gzr=o(" \u2014 "),$ee=a("a"),Ozr=o("FlaxDistilBertForSequenceClassification"),Vzr=o(" (DistilBERT model)"),Xzr=l(),cw=a("li"),n0e=a("strong"),zzr=o("electra"),Qzr=o(" \u2014 "),kee=a("a"),Wzr=o("FlaxElectraForSequenceClassification"),Hzr=o(" (ELECTRA model)"),Uzr=l(),fw=a("li"),s0e=a("strong"),Jzr=o("mbart"),Yzr=o(" \u2014 "),See=a("a"),Kzr=o("FlaxMBartForSequenceClassification"),Zzr=o(" (mBART model)"),eQr=l(),mw=a("li"),l0e=a("strong"),oQr=o("roberta"),rQr=o(" \u2014 "),Ree=a("a"),tQr=o("FlaxRobertaForSequenceClassification"),aQr=o(" (RoBERTa model)"),nQr=l(),gw=a("li"),i0e=a("strong"),sQr=o("roformer"),lQr=o(" \u2014 "),Pee=a("a"),iQr=o("FlaxRoFormerForSequenceClassification"),dQr=o(" (RoFormer model)"),cQr=l(),hw=a("li"),d0e=a("strong"),fQr=o("xlm-roberta"),mQr=o(" \u2014 "),Bee=a("a"),gQr=o("FlaxXLMRobertaForSequenceClassification"),hQr=o(" (XLM-RoBERTa model)"),pQr=l(),F(pw.$$.fragment),ZVe=l(),lf=a("h2"),_w=a("a"),c0e=a("span"),F(g$.$$.fragment),_Qr=l(),f0e=a("span"),uQr=o("FlaxAutoModelForQuestionAnswering"),eXe=l(),Fr=a("div"),F(h$.$$.fragment),bQr=l(),df=a("p"),vQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iee=a("a"),FQr=o("from_pretrained()"),TQr=o(" class method or the "),Nee=a("a"),MQr=o("from_config()"),EQr=o(` class
method.`),CQr=l(),p$=a("p"),wQr=o("This class cannot be instantiated directly using "),m0e=a("code"),AQr=o("__init__()"),LQr=o(" (throws an error)."),yQr=l(),Jt=a("div"),F(_$.$$.fragment),xQr=l(),g0e=a("p"),$Qr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kQr=l(),cf=a("p"),SQr=o(`Note:
Loading a model from its configuration file does `),h0e=a("strong"),RQr=o("not"),PQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),BQr=o("from_pretrained()"),IQr=o(" to load the model weights."),NQr=l(),F(uw.$$.fragment),qQr=l(),Hr=a("div"),F(u$.$$.fragment),jQr=l(),p0e=a("p"),DQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GQr=l(),An=a("p"),OQr=o("The model class to instantiate is selected based on the "),_0e=a("code"),VQr=o("model_type"),XQr=o(` property of the config object (either
passed as an argument or loaded from `),u0e=a("code"),zQr=o("pretrained_model_name_or_path"),QQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=a("code"),WQr=o("pretrained_model_name_or_path"),HQr=o(":"),UQr=l(),Re=a("ul"),bw=a("li"),v0e=a("strong"),JQr=o("albert"),YQr=o(" \u2014 "),jee=a("a"),KQr=o("FlaxAlbertForQuestionAnswering"),ZQr=o(" (ALBERT model)"),eWr=l(),vw=a("li"),F0e=a("strong"),oWr=o("bart"),rWr=o(" \u2014 "),Dee=a("a"),tWr=o("FlaxBartForQuestionAnswering"),aWr=o(" (BART model)"),nWr=l(),Fw=a("li"),T0e=a("strong"),sWr=o("bert"),lWr=o(" \u2014 "),Gee=a("a"),iWr=o("FlaxBertForQuestionAnswering"),dWr=o(" (BERT model)"),cWr=l(),Tw=a("li"),M0e=a("strong"),fWr=o("big_bird"),mWr=o(" \u2014 "),Oee=a("a"),gWr=o("FlaxBigBirdForQuestionAnswering"),hWr=o(" (BigBird model)"),pWr=l(),Mw=a("li"),E0e=a("strong"),_Wr=o("distilbert"),uWr=o(" \u2014 "),Vee=a("a"),bWr=o("FlaxDistilBertForQuestionAnswering"),vWr=o(" (DistilBERT model)"),FWr=l(),Ew=a("li"),C0e=a("strong"),TWr=o("electra"),MWr=o(" \u2014 "),Xee=a("a"),EWr=o("FlaxElectraForQuestionAnswering"),CWr=o(" (ELECTRA model)"),wWr=l(),Cw=a("li"),w0e=a("strong"),AWr=o("mbart"),LWr=o(" \u2014 "),zee=a("a"),yWr=o("FlaxMBartForQuestionAnswering"),xWr=o(" (mBART model)"),$Wr=l(),ww=a("li"),A0e=a("strong"),kWr=o("roberta"),SWr=o(" \u2014 "),Qee=a("a"),RWr=o("FlaxRobertaForQuestionAnswering"),PWr=o(" (RoBERTa model)"),BWr=l(),Aw=a("li"),L0e=a("strong"),IWr=o("roformer"),NWr=o(" \u2014 "),Wee=a("a"),qWr=o("FlaxRoFormerForQuestionAnswering"),jWr=o(" (RoFormer model)"),DWr=l(),Lw=a("li"),y0e=a("strong"),GWr=o("xlm-roberta"),OWr=o(" \u2014 "),Hee=a("a"),VWr=o("FlaxXLMRobertaForQuestionAnswering"),XWr=o(" (XLM-RoBERTa model)"),zWr=l(),F(yw.$$.fragment),oXe=l(),ff=a("h2"),xw=a("a"),x0e=a("span"),F(b$.$$.fragment),QWr=l(),$0e=a("span"),WWr=o("FlaxAutoModelForTokenClassification"),rXe=l(),Tr=a("div"),F(v$.$$.fragment),HWr=l(),mf=a("p"),UWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uee=a("a"),JWr=o("from_pretrained()"),YWr=o(" class method or the "),Jee=a("a"),KWr=o("from_config()"),ZWr=o(` class
method.`),eHr=l(),F$=a("p"),oHr=o("This class cannot be instantiated directly using "),k0e=a("code"),rHr=o("__init__()"),tHr=o(" (throws an error)."),aHr=l(),Yt=a("div"),F(T$.$$.fragment),nHr=l(),S0e=a("p"),sHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lHr=l(),gf=a("p"),iHr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),dHr=o("not"),cHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),fHr=o("from_pretrained()"),mHr=o(" to load the model weights."),gHr=l(),F($w.$$.fragment),hHr=l(),Ur=a("div"),F(M$.$$.fragment),pHr=l(),P0e=a("p"),_Hr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uHr=l(),Ln=a("p"),bHr=o("The model class to instantiate is selected based on the "),B0e=a("code"),vHr=o("model_type"),FHr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),THr=o("pretrained_model_name_or_path"),MHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),EHr=o("pretrained_model_name_or_path"),CHr=o(":"),wHr=l(),Ve=a("ul"),kw=a("li"),q0e=a("strong"),AHr=o("albert"),LHr=o(" \u2014 "),Kee=a("a"),yHr=o("FlaxAlbertForTokenClassification"),xHr=o(" (ALBERT model)"),$Hr=l(),Sw=a("li"),j0e=a("strong"),kHr=o("bert"),SHr=o(" \u2014 "),Zee=a("a"),RHr=o("FlaxBertForTokenClassification"),PHr=o(" (BERT model)"),BHr=l(),Rw=a("li"),D0e=a("strong"),IHr=o("big_bird"),NHr=o(" \u2014 "),eoe=a("a"),qHr=o("FlaxBigBirdForTokenClassification"),jHr=o(" (BigBird model)"),DHr=l(),Pw=a("li"),G0e=a("strong"),GHr=o("distilbert"),OHr=o(" \u2014 "),ooe=a("a"),VHr=o("FlaxDistilBertForTokenClassification"),XHr=o(" (DistilBERT model)"),zHr=l(),Bw=a("li"),O0e=a("strong"),QHr=o("electra"),WHr=o(" \u2014 "),roe=a("a"),HHr=o("FlaxElectraForTokenClassification"),UHr=o(" (ELECTRA model)"),JHr=l(),Iw=a("li"),V0e=a("strong"),YHr=o("roberta"),KHr=o(" \u2014 "),toe=a("a"),ZHr=o("FlaxRobertaForTokenClassification"),eUr=o(" (RoBERTa model)"),oUr=l(),Nw=a("li"),X0e=a("strong"),rUr=o("roformer"),tUr=o(" \u2014 "),aoe=a("a"),aUr=o("FlaxRoFormerForTokenClassification"),nUr=o(" (RoFormer model)"),sUr=l(),qw=a("li"),z0e=a("strong"),lUr=o("xlm-roberta"),iUr=o(" \u2014 "),noe=a("a"),dUr=o("FlaxXLMRobertaForTokenClassification"),cUr=o(" (XLM-RoBERTa model)"),fUr=l(),F(jw.$$.fragment),tXe=l(),hf=a("h2"),Dw=a("a"),Q0e=a("span"),F(E$.$$.fragment),mUr=l(),W0e=a("span"),gUr=o("FlaxAutoModelForMultipleChoice"),aXe=l(),Mr=a("div"),F(C$.$$.fragment),hUr=l(),pf=a("p"),pUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),soe=a("a"),_Ur=o("from_pretrained()"),uUr=o(" class method or the "),loe=a("a"),bUr=o("from_config()"),vUr=o(` class
method.`),FUr=l(),w$=a("p"),TUr=o("This class cannot be instantiated directly using "),H0e=a("code"),MUr=o("__init__()"),EUr=o(" (throws an error)."),CUr=l(),Kt=a("div"),F(A$.$$.fragment),wUr=l(),U0e=a("p"),AUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LUr=l(),_f=a("p"),yUr=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),xUr=o("not"),$Ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),kUr=o("from_pretrained()"),SUr=o(" to load the model weights."),RUr=l(),F(Gw.$$.fragment),PUr=l(),Jr=a("div"),F(L$.$$.fragment),BUr=l(),Y0e=a("p"),IUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NUr=l(),yn=a("p"),qUr=o("The model class to instantiate is selected based on the "),K0e=a("code"),jUr=o("model_type"),DUr=o(` property of the config object (either
passed as an argument or loaded from `),Z0e=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=a("code"),VUr=o("pretrained_model_name_or_path"),XUr=o(":"),zUr=l(),Xe=a("ul"),Ow=a("li"),owe=a("strong"),QUr=o("albert"),WUr=o(" \u2014 "),doe=a("a"),HUr=o("FlaxAlbertForMultipleChoice"),UUr=o(" (ALBERT model)"),JUr=l(),Vw=a("li"),rwe=a("strong"),YUr=o("bert"),KUr=o(" \u2014 "),coe=a("a"),ZUr=o("FlaxBertForMultipleChoice"),eJr=o(" (BERT model)"),oJr=l(),Xw=a("li"),twe=a("strong"),rJr=o("big_bird"),tJr=o(" \u2014 "),foe=a("a"),aJr=o("FlaxBigBirdForMultipleChoice"),nJr=o(" (BigBird model)"),sJr=l(),zw=a("li"),awe=a("strong"),lJr=o("distilbert"),iJr=o(" \u2014 "),moe=a("a"),dJr=o("FlaxDistilBertForMultipleChoice"),cJr=o(" (DistilBERT model)"),fJr=l(),Qw=a("li"),nwe=a("strong"),mJr=o("electra"),gJr=o(" \u2014 "),goe=a("a"),hJr=o("FlaxElectraForMultipleChoice"),pJr=o(" (ELECTRA model)"),_Jr=l(),Ww=a("li"),swe=a("strong"),uJr=o("roberta"),bJr=o(" \u2014 "),hoe=a("a"),vJr=o("FlaxRobertaForMultipleChoice"),FJr=o(" (RoBERTa model)"),TJr=l(),Hw=a("li"),lwe=a("strong"),MJr=o("roformer"),EJr=o(" \u2014 "),poe=a("a"),CJr=o("FlaxRoFormerForMultipleChoice"),wJr=o(" (RoFormer model)"),AJr=l(),Uw=a("li"),iwe=a("strong"),LJr=o("xlm-roberta"),yJr=o(" \u2014 "),_oe=a("a"),xJr=o("FlaxXLMRobertaForMultipleChoice"),$Jr=o(" (XLM-RoBERTa model)"),kJr=l(),F(Jw.$$.fragment),nXe=l(),uf=a("h2"),Yw=a("a"),dwe=a("span"),F(y$.$$.fragment),SJr=l(),cwe=a("span"),RJr=o("FlaxAutoModelForNextSentencePrediction"),sXe=l(),Er=a("div"),F(x$.$$.fragment),PJr=l(),bf=a("p"),BJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uoe=a("a"),IJr=o("from_pretrained()"),NJr=o(" class method or the "),boe=a("a"),qJr=o("from_config()"),jJr=o(` class
method.`),DJr=l(),$$=a("p"),GJr=o("This class cannot be instantiated directly using "),fwe=a("code"),OJr=o("__init__()"),VJr=o(" (throws an error)."),XJr=l(),Zt=a("div"),F(k$.$$.fragment),zJr=l(),mwe=a("p"),QJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WJr=l(),vf=a("p"),HJr=o(`Note:
Loading a model from its configuration file does `),gwe=a("strong"),UJr=o("not"),JJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),YJr=o("from_pretrained()"),KJr=o(" to load the model weights."),ZJr=l(),F(Kw.$$.fragment),eYr=l(),Yr=a("div"),F(S$.$$.fragment),oYr=l(),hwe=a("p"),rYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tYr=l(),xn=a("p"),aYr=o("The model class to instantiate is selected based on the "),pwe=a("code"),nYr=o("model_type"),sYr=o(` property of the config object (either
passed as an argument or loaded from `),_we=a("code"),lYr=o("pretrained_model_name_or_path"),iYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uwe=a("code"),dYr=o("pretrained_model_name_or_path"),cYr=o(":"),fYr=l(),bwe=a("ul"),Zw=a("li"),vwe=a("strong"),mYr=o("bert"),gYr=o(" \u2014 "),Foe=a("a"),hYr=o("FlaxBertForNextSentencePrediction"),pYr=o(" (BERT model)"),_Yr=l(),F(eA.$$.fragment),lXe=l(),Ff=a("h2"),oA=a("a"),Fwe=a("span"),F(R$.$$.fragment),uYr=l(),Twe=a("span"),bYr=o("FlaxAutoModelForImageClassification"),iXe=l(),Cr=a("div"),F(P$.$$.fragment),vYr=l(),Tf=a("p"),FYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Toe=a("a"),TYr=o("from_pretrained()"),MYr=o(" class method or the "),Moe=a("a"),EYr=o("from_config()"),CYr=o(` class
method.`),wYr=l(),B$=a("p"),AYr=o("This class cannot be instantiated directly using "),Mwe=a("code"),LYr=o("__init__()"),yYr=o(" (throws an error)."),xYr=l(),ea=a("div"),F(I$.$$.fragment),$Yr=l(),Ewe=a("p"),kYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SYr=l(),Mf=a("p"),RYr=o(`Note:
Loading a model from its configuration file does `),Cwe=a("strong"),PYr=o("not"),BYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),IYr=o("from_pretrained()"),NYr=o(" to load the model weights."),qYr=l(),F(rA.$$.fragment),jYr=l(),Kr=a("div"),F(N$.$$.fragment),DYr=l(),wwe=a("p"),GYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OYr=l(),$n=a("p"),VYr=o("The model class to instantiate is selected based on the "),Awe=a("code"),XYr=o("model_type"),zYr=o(` property of the config object (either
passed as an argument or loaded from `),Lwe=a("code"),QYr=o("pretrained_model_name_or_path"),WYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ywe=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(":"),JYr=l(),q$=a("ul"),tA=a("li"),xwe=a("strong"),YYr=o("beit"),KYr=o(" \u2014 "),Coe=a("a"),ZYr=o("FlaxBeitForImageClassification"),eKr=o(" (BEiT model)"),oKr=l(),aA=a("li"),$we=a("strong"),rKr=o("vit"),tKr=o(" \u2014 "),woe=a("a"),aKr=o("FlaxViTForImageClassification"),nKr=o(" (ViT model)"),sKr=l(),F(nA.$$.fragment),dXe=l(),Ef=a("h2"),sA=a("a"),kwe=a("span"),F(j$.$$.fragment),lKr=l(),Swe=a("span"),iKr=o("FlaxAutoModelForVision2Seq"),cXe=l(),wr=a("div"),F(D$.$$.fragment),dKr=l(),Cf=a("p"),cKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aoe=a("a"),fKr=o("from_pretrained()"),mKr=o(" class method or the "),Loe=a("a"),gKr=o("from_config()"),hKr=o(` class
method.`),pKr=l(),G$=a("p"),_Kr=o("This class cannot be instantiated directly using "),Rwe=a("code"),uKr=o("__init__()"),bKr=o(" (throws an error)."),vKr=l(),oa=a("div"),F(O$.$$.fragment),FKr=l(),Pwe=a("p"),TKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MKr=l(),wf=a("p"),EKr=o(`Note:
Loading a model from its configuration file does `),Bwe=a("strong"),CKr=o("not"),wKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=a("a"),AKr=o("from_pretrained()"),LKr=o(" to load the model weights."),yKr=l(),F(lA.$$.fragment),xKr=l(),Zr=a("div"),F(V$.$$.fragment),$Kr=l(),Iwe=a("p"),kKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SKr=l(),kn=a("p"),RKr=o("The model class to instantiate is selected based on the "),Nwe=a("code"),PKr=o("model_type"),BKr=o(` property of the config object (either
passed as an argument or loaded from `),qwe=a("code"),IKr=o("pretrained_model_name_or_path"),NKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=a("code"),qKr=o("pretrained_model_name_or_path"),jKr=o(":"),DKr=l(),Dwe=a("ul"),iA=a("li"),Gwe=a("strong"),GKr=o("vision-encoder-decoder"),OKr=o(" \u2014 "),xoe=a("a"),VKr=o("FlaxVisionEncoderDecoderModel"),XKr=o(" (Vision Encoder decoder model)"),zKr=l(),F(dA.$$.fragment),this.h()},l(f){const u=LGt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var X$=s(p);m=n(X$,"A",{id:!0,class:!0,href:!0});var Owe=s(m);_=n(Owe,"SPAN",{});var Vwe=s(_);T(d.$$.fragment,Vwe),Vwe.forEach(t),Owe.forEach(t),h=i(X$),Eo=n(X$,"SPAN",{});var Xwe=s(Eo);Mi=r(Xwe,"Auto Classes"),Xwe.forEach(t),X$.forEach(t),xf=i(f),at=n(f,"P",{});var z$=s(at);Ei=r(z$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(z$,"CODE",{});var zwe=s(Ci);$L=r(zwe,"from_pretrained()"),zwe.forEach(t),$f=r(z$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),z$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var Qwe=s(Rn);kL=r(Qwe,"AutoConfig"),Qwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var Wwe=s(Bn);SL=r(Wwe,"AutoModel"),Wwe.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var Hwe=s(In);RL=r(Hwe,"AutoTokenizer"),Hwe.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),kf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var Q$=s(Ae);iS=r(Q$,"will create a model that is an instance of "),yi=n(Q$,"A",{href:!0});var Uwe=s(yi);dS=r(Uwe,"BertModel"),Uwe.forEach(t),cS=r(Q$,"."),Q$.forEach(t),Co=i(f),$a=n(f,"P",{});var W$=s($a);fS=r(W$,"There is one class of "),Sf=n(W$,"CODE",{});var Jwe=s(Sf);mS=r(Jwe,"AutoModel"),Jwe.forEach(t),TQe=r(W$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),W$.forEach(t),sOe=i(f),xi=n(f,"H2",{class:!0});var H$=s(xi);Rf=n(H$,"A",{id:!0,class:!0,href:!0});var Ywe=s(Rf);Cte=n(Ywe,"SPAN",{});var Kwe=s(Cte);T(PL.$$.fragment,Kwe),Kwe.forEach(t),Ywe.forEach(t),MQe=i(H$),wte=n(H$,"SPAN",{});var Zwe=s(wte);EQe=r(Zwe,"Extending the Auto Classes"),Zwe.forEach(t),H$.forEach(t),lOe=i(f),Nn=n(f,"P",{});var Af=s(Nn);CQe=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ate=n(Af,"CODE",{});var eAe=s(Ate);wQe=r(eAe,"NewModel"),eAe.forEach(t),AQe=r(Af,", make sure you have a "),Lte=n(Af,"CODE",{});var oAe=s(Lte);LQe=r(oAe,"NewModelConfig"),oAe.forEach(t),yQe=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),iOe=i(f),T(BL.$$.fragment,f),dOe=i(f),gS=n(f,"P",{});var rAe=s(gS);xQe=r(rAe,"You will then be able to use the auto classes like you would usually do!"),rAe.forEach(t),cOe=i(f),T(Pf.$$.fragment,f),fOe=i(f),$i=n(f,"H2",{class:!0});var U$=s($i);Bf=n(U$,"A",{id:!0,class:!0,href:!0});var tAe=s(Bf);yte=n(tAe,"SPAN",{});var aAe=s(yte);T(IL.$$.fragment,aAe),aAe.forEach(t),tAe.forEach(t),$Qe=i(U$),xte=n(U$,"SPAN",{});var nAe=s(xte);kQe=r(nAe,"AutoConfig"),nAe.forEach(t),U$.forEach(t),mOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(NL.$$.fragment,rt),SQe=i(rt),qL=n(rt,"P",{});var J$=s(qL);RQe=r(J$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),hS=n(J$,"A",{href:!0});var sAe=s(hS);PQe=r(sAe,"from_pretrained()"),sAe.forEach(t),BQe=r(J$," class method."),J$.forEach(t),IQe=i(rt),jL=n(rt,"P",{});var Y$=s(jL);NQe=r(Y$,"This class cannot be instantiated directly using "),$te=n(Y$,"CODE",{});var lAe=s($te);qQe=r(lAe,"__init__()"),lAe.forEach(t),jQe=r(Y$," (throws an error)."),Y$.forEach(t),DQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(DL.$$.fragment,tt),GQe=i(tt),kte=n(tt,"P",{});var iAe=s(kte);OQe=r(iAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),iAe.forEach(t),VQe=i(tt),ki=n(tt,"P",{});var Lf=s(ki);XQe=r(Lf,"The configuration class to instantiate is selected based on the "),Ste=n(Lf,"CODE",{});var dAe=s(Ste);zQe=r(dAe,"model_type"),dAe.forEach(t),QQe=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rte=n(Lf,"CODE",{});var cAe=s(Rte);WQe=r(cAe,"pretrained_model_name_or_path"),cAe.forEach(t),HQe=r(Lf,":"),Lf.forEach(t),UQe=i(tt),A=n(tt,"UL",{});var L=s(A);If=n(L,"LI",{});var cA=s(If);Pte=n(cA,"STRONG",{});var fAe=s(Pte);JQe=r(fAe,"albert"),fAe.forEach(t),YQe=r(cA," \u2014 "),pS=n(cA,"A",{href:!0});var mAe=s(pS);KQe=r(mAe,"AlbertConfig"),mAe.forEach(t),ZQe=r(cA," (ALBERT model)"),cA.forEach(t),eWe=i(L),Nf=n(L,"LI",{});var fA=s(Nf);Bte=n(fA,"STRONG",{});var gAe=s(Bte);oWe=r(gAe,"bart"),gAe.forEach(t),rWe=r(fA," \u2014 "),_S=n(fA,"A",{href:!0});var hAe=s(_S);tWe=r(hAe,"BartConfig"),hAe.forEach(t),aWe=r(fA," (BART model)"),fA.forEach(t),nWe=i(L),qf=n(L,"LI",{});var mA=s(qf);Ite=n(mA,"STRONG",{});var pAe=s(Ite);sWe=r(pAe,"beit"),pAe.forEach(t),lWe=r(mA," \u2014 "),uS=n(mA,"A",{href:!0});var _Ae=s(uS);iWe=r(_Ae,"BeitConfig"),_Ae.forEach(t),dWe=r(mA," (BEiT model)"),mA.forEach(t),cWe=i(L),jf=n(L,"LI",{});var gA=s(jf);Nte=n(gA,"STRONG",{});var uAe=s(Nte);fWe=r(uAe,"bert"),uAe.forEach(t),mWe=r(gA," \u2014 "),bS=n(gA,"A",{href:!0});var bAe=s(bS);gWe=r(bAe,"BertConfig"),bAe.forEach(t),hWe=r(gA," (BERT model)"),gA.forEach(t),pWe=i(L),Df=n(L,"LI",{});var hA=s(Df);qte=n(hA,"STRONG",{});var vAe=s(qte);_We=r(vAe,"bert-generation"),vAe.forEach(t),uWe=r(hA," \u2014 "),vS=n(hA,"A",{href:!0});var FAe=s(vS);bWe=r(FAe,"BertGenerationConfig"),FAe.forEach(t),vWe=r(hA," (Bert Generation model)"),hA.forEach(t),FWe=i(L),Gf=n(L,"LI",{});var pA=s(Gf);jte=n(pA,"STRONG",{});var TAe=s(jte);TWe=r(TAe,"big_bird"),TAe.forEach(t),MWe=r(pA," \u2014 "),FS=n(pA,"A",{href:!0});var MAe=s(FS);EWe=r(MAe,"BigBirdConfig"),MAe.forEach(t),CWe=r(pA," (BigBird model)"),pA.forEach(t),wWe=i(L),Of=n(L,"LI",{});var _A=s(Of);Dte=n(_A,"STRONG",{});var EAe=s(Dte);AWe=r(EAe,"bigbird_pegasus"),EAe.forEach(t),LWe=r(_A," \u2014 "),TS=n(_A,"A",{href:!0});var CAe=s(TS);yWe=r(CAe,"BigBirdPegasusConfig"),CAe.forEach(t),xWe=r(_A," (BigBird-Pegasus model)"),_A.forEach(t),$We=i(L),Vf=n(L,"LI",{});var uA=s(Vf);Gte=n(uA,"STRONG",{});var wAe=s(Gte);kWe=r(wAe,"blenderbot"),wAe.forEach(t),SWe=r(uA," \u2014 "),MS=n(uA,"A",{href:!0});var AAe=s(MS);RWe=r(AAe,"BlenderbotConfig"),AAe.forEach(t),PWe=r(uA," (Blenderbot model)"),uA.forEach(t),BWe=i(L),Xf=n(L,"LI",{});var bA=s(Xf);Ote=n(bA,"STRONG",{});var LAe=s(Ote);IWe=r(LAe,"blenderbot-small"),LAe.forEach(t),NWe=r(bA," \u2014 "),ES=n(bA,"A",{href:!0});var yAe=s(ES);qWe=r(yAe,"BlenderbotSmallConfig"),yAe.forEach(t),jWe=r(bA," (BlenderbotSmall model)"),bA.forEach(t),DWe=i(L),zf=n(L,"LI",{});var vA=s(zf);Vte=n(vA,"STRONG",{});var xAe=s(Vte);GWe=r(xAe,"bloom"),xAe.forEach(t),OWe=r(vA," \u2014 "),CS=n(vA,"A",{href:!0});var $Ae=s(CS);VWe=r($Ae,"BloomConfig"),$Ae.forEach(t),XWe=r(vA," (BLOOM model)"),vA.forEach(t),zWe=i(L),Qf=n(L,"LI",{});var FA=s(Qf);Xte=n(FA,"STRONG",{});var kAe=s(Xte);QWe=r(kAe,"camembert"),kAe.forEach(t),WWe=r(FA," \u2014 "),wS=n(FA,"A",{href:!0});var SAe=s(wS);HWe=r(SAe,"CamembertConfig"),SAe.forEach(t),UWe=r(FA," (CamemBERT model)"),FA.forEach(t),JWe=i(L),Wf=n(L,"LI",{});var TA=s(Wf);zte=n(TA,"STRONG",{});var RAe=s(zte);YWe=r(RAe,"canine"),RAe.forEach(t),KWe=r(TA," \u2014 "),AS=n(TA,"A",{href:!0});var PAe=s(AS);ZWe=r(PAe,"CanineConfig"),PAe.forEach(t),eHe=r(TA," (CANINE model)"),TA.forEach(t),oHe=i(L),Hf=n(L,"LI",{});var MA=s(Hf);Qte=n(MA,"STRONG",{});var BAe=s(Qte);rHe=r(BAe,"clip"),BAe.forEach(t),tHe=r(MA," \u2014 "),LS=n(MA,"A",{href:!0});var IAe=s(LS);aHe=r(IAe,"CLIPConfig"),IAe.forEach(t),nHe=r(MA," (CLIP model)"),MA.forEach(t),sHe=i(L),Uf=n(L,"LI",{});var EA=s(Uf);Wte=n(EA,"STRONG",{});var NAe=s(Wte);lHe=r(NAe,"convbert"),NAe.forEach(t),iHe=r(EA," \u2014 "),yS=n(EA,"A",{href:!0});var qAe=s(yS);dHe=r(qAe,"ConvBertConfig"),qAe.forEach(t),cHe=r(EA," (ConvBERT model)"),EA.forEach(t),fHe=i(L),Jf=n(L,"LI",{});var CA=s(Jf);Hte=n(CA,"STRONG",{});var jAe=s(Hte);mHe=r(jAe,"convnext"),jAe.forEach(t),gHe=r(CA," \u2014 "),xS=n(CA,"A",{href:!0});var DAe=s(xS);hHe=r(DAe,"ConvNextConfig"),DAe.forEach(t),pHe=r(CA," (ConvNeXT model)"),CA.forEach(t),_He=i(L),Yf=n(L,"LI",{});var wA=s(Yf);Ute=n(wA,"STRONG",{});var GAe=s(Ute);uHe=r(GAe,"ctrl"),GAe.forEach(t),bHe=r(wA," \u2014 "),$S=n(wA,"A",{href:!0});var OAe=s($S);vHe=r(OAe,"CTRLConfig"),OAe.forEach(t),FHe=r(wA," (CTRL model)"),wA.forEach(t),THe=i(L),Kf=n(L,"LI",{});var AA=s(Kf);Jte=n(AA,"STRONG",{});var VAe=s(Jte);MHe=r(VAe,"cvt"),VAe.forEach(t),EHe=r(AA," \u2014 "),kS=n(AA,"A",{href:!0});var XAe=s(kS);CHe=r(XAe,"CvtConfig"),XAe.forEach(t),wHe=r(AA," (CvT model)"),AA.forEach(t),AHe=i(L),Zf=n(L,"LI",{});var LA=s(Zf);Yte=n(LA,"STRONG",{});var zAe=s(Yte);LHe=r(zAe,"data2vec-audio"),zAe.forEach(t),yHe=r(LA," \u2014 "),SS=n(LA,"A",{href:!0});var QAe=s(SS);xHe=r(QAe,"Data2VecAudioConfig"),QAe.forEach(t),$He=r(LA," (Data2VecAudio model)"),LA.forEach(t),kHe=i(L),em=n(L,"LI",{});var yA=s(em);Kte=n(yA,"STRONG",{});var WAe=s(Kte);SHe=r(WAe,"data2vec-text"),WAe.forEach(t),RHe=r(yA," \u2014 "),RS=n(yA,"A",{href:!0});var HAe=s(RS);PHe=r(HAe,"Data2VecTextConfig"),HAe.forEach(t),BHe=r(yA," (Data2VecText model)"),yA.forEach(t),IHe=i(L),om=n(L,"LI",{});var xA=s(om);Zte=n(xA,"STRONG",{});var UAe=s(Zte);NHe=r(UAe,"data2vec-vision"),UAe.forEach(t),qHe=r(xA," \u2014 "),PS=n(xA,"A",{href:!0});var JAe=s(PS);jHe=r(JAe,"Data2VecVisionConfig"),JAe.forEach(t),DHe=r(xA," (Data2VecVision model)"),xA.forEach(t),GHe=i(L),rm=n(L,"LI",{});var $A=s(rm);eae=n($A,"STRONG",{});var YAe=s(eae);OHe=r(YAe,"deberta"),YAe.forEach(t),VHe=r($A," \u2014 "),BS=n($A,"A",{href:!0});var KAe=s(BS);XHe=r(KAe,"DebertaConfig"),KAe.forEach(t),zHe=r($A," (DeBERTa model)"),$A.forEach(t),QHe=i(L),tm=n(L,"LI",{});var kA=s(tm);oae=n(kA,"STRONG",{});var ZAe=s(oae);WHe=r(ZAe,"deberta-v2"),ZAe.forEach(t),HHe=r(kA," \u2014 "),IS=n(kA,"A",{href:!0});var e6e=s(IS);UHe=r(e6e,"DebertaV2Config"),e6e.forEach(t),JHe=r(kA," (DeBERTa-v2 model)"),kA.forEach(t),YHe=i(L),am=n(L,"LI",{});var SA=s(am);rae=n(SA,"STRONG",{});var o6e=s(rae);KHe=r(o6e,"decision_transformer"),o6e.forEach(t),ZHe=r(SA," \u2014 "),NS=n(SA,"A",{href:!0});var r6e=s(NS);eUe=r(r6e,"DecisionTransformerConfig"),r6e.forEach(t),oUe=r(SA," (Decision Transformer model)"),SA.forEach(t),rUe=i(L),nm=n(L,"LI",{});var RA=s(nm);tae=n(RA,"STRONG",{});var WKr=s(tae);tUe=r(WKr,"deit"),WKr.forEach(t),aUe=r(RA," \u2014 "),qS=n(RA,"A",{href:!0});var HKr=s(qS);nUe=r(HKr,"DeiTConfig"),HKr.forEach(t),sUe=r(RA," (DeiT model)"),RA.forEach(t),lUe=i(L),sm=n(L,"LI",{});var t6e=s(sm);aae=n(t6e,"STRONG",{});var UKr=s(aae);iUe=r(UKr,"detr"),UKr.forEach(t),dUe=r(t6e," \u2014 "),jS=n(t6e,"A",{href:!0});var JKr=s(jS);cUe=r(JKr,"DetrConfig"),JKr.forEach(t),fUe=r(t6e," (DETR model)"),t6e.forEach(t),mUe=i(L),lm=n(L,"LI",{});var a6e=s(lm);nae=n(a6e,"STRONG",{});var YKr=s(nae);gUe=r(YKr,"distilbert"),YKr.forEach(t),hUe=r(a6e," \u2014 "),DS=n(a6e,"A",{href:!0});var KKr=s(DS);pUe=r(KKr,"DistilBertConfig"),KKr.forEach(t),_Ue=r(a6e," (DistilBERT model)"),a6e.forEach(t),uUe=i(L),im=n(L,"LI",{});var n6e=s(im);sae=n(n6e,"STRONG",{});var ZKr=s(sae);bUe=r(ZKr,"dpr"),ZKr.forEach(t),vUe=r(n6e," \u2014 "),GS=n(n6e,"A",{href:!0});var eZr=s(GS);FUe=r(eZr,"DPRConfig"),eZr.forEach(t),TUe=r(n6e," (DPR model)"),n6e.forEach(t),MUe=i(L),dm=n(L,"LI",{});var s6e=s(dm);lae=n(s6e,"STRONG",{});var oZr=s(lae);EUe=r(oZr,"dpt"),oZr.forEach(t),CUe=r(s6e," \u2014 "),OS=n(s6e,"A",{href:!0});var rZr=s(OS);wUe=r(rZr,"DPTConfig"),rZr.forEach(t),AUe=r(s6e," (DPT model)"),s6e.forEach(t),LUe=i(L),cm=n(L,"LI",{});var l6e=s(cm);iae=n(l6e,"STRONG",{});var tZr=s(iae);yUe=r(tZr,"electra"),tZr.forEach(t),xUe=r(l6e," \u2014 "),VS=n(l6e,"A",{href:!0});var aZr=s(VS);$Ue=r(aZr,"ElectraConfig"),aZr.forEach(t),kUe=r(l6e," (ELECTRA model)"),l6e.forEach(t),SUe=i(L),fm=n(L,"LI",{});var i6e=s(fm);dae=n(i6e,"STRONG",{});var nZr=s(dae);RUe=r(nZr,"encoder-decoder"),nZr.forEach(t),PUe=r(i6e," \u2014 "),XS=n(i6e,"A",{href:!0});var sZr=s(XS);BUe=r(sZr,"EncoderDecoderConfig"),sZr.forEach(t),IUe=r(i6e," (Encoder decoder model)"),i6e.forEach(t),NUe=i(L),mm=n(L,"LI",{});var d6e=s(mm);cae=n(d6e,"STRONG",{});var lZr=s(cae);qUe=r(lZr,"flaubert"),lZr.forEach(t),jUe=r(d6e," \u2014 "),zS=n(d6e,"A",{href:!0});var iZr=s(zS);DUe=r(iZr,"FlaubertConfig"),iZr.forEach(t),GUe=r(d6e," (FlauBERT model)"),d6e.forEach(t),OUe=i(L),gm=n(L,"LI",{});var c6e=s(gm);fae=n(c6e,"STRONG",{});var dZr=s(fae);VUe=r(dZr,"flava"),dZr.forEach(t),XUe=r(c6e," \u2014 "),QS=n(c6e,"A",{href:!0});var cZr=s(QS);zUe=r(cZr,"FlavaConfig"),cZr.forEach(t),QUe=r(c6e," (FLAVA model)"),c6e.forEach(t),WUe=i(L),hm=n(L,"LI",{});var f6e=s(hm);mae=n(f6e,"STRONG",{});var fZr=s(mae);HUe=r(fZr,"fnet"),fZr.forEach(t),UUe=r(f6e," \u2014 "),WS=n(f6e,"A",{href:!0});var mZr=s(WS);JUe=r(mZr,"FNetConfig"),mZr.forEach(t),YUe=r(f6e," (FNet model)"),f6e.forEach(t),KUe=i(L),pm=n(L,"LI",{});var m6e=s(pm);gae=n(m6e,"STRONG",{});var gZr=s(gae);ZUe=r(gZr,"fsmt"),gZr.forEach(t),eJe=r(m6e," \u2014 "),HS=n(m6e,"A",{href:!0});var hZr=s(HS);oJe=r(hZr,"FSMTConfig"),hZr.forEach(t),rJe=r(m6e," (FairSeq Machine-Translation model)"),m6e.forEach(t),tJe=i(L),_m=n(L,"LI",{});var g6e=s(_m);hae=n(g6e,"STRONG",{});var pZr=s(hae);aJe=r(pZr,"funnel"),pZr.forEach(t),nJe=r(g6e," \u2014 "),US=n(g6e,"A",{href:!0});var _Zr=s(US);sJe=r(_Zr,"FunnelConfig"),_Zr.forEach(t),lJe=r(g6e," (Funnel Transformer model)"),g6e.forEach(t),iJe=i(L),um=n(L,"LI",{});var h6e=s(um);pae=n(h6e,"STRONG",{});var uZr=s(pae);dJe=r(uZr,"glpn"),uZr.forEach(t),cJe=r(h6e," \u2014 "),JS=n(h6e,"A",{href:!0});var bZr=s(JS);fJe=r(bZr,"GLPNConfig"),bZr.forEach(t),mJe=r(h6e," (GLPN model)"),h6e.forEach(t),gJe=i(L),bm=n(L,"LI",{});var p6e=s(bm);_ae=n(p6e,"STRONG",{});var vZr=s(_ae);hJe=r(vZr,"gpt2"),vZr.forEach(t),pJe=r(p6e," \u2014 "),YS=n(p6e,"A",{href:!0});var FZr=s(YS);_Je=r(FZr,"GPT2Config"),FZr.forEach(t),uJe=r(p6e," (OpenAI GPT-2 model)"),p6e.forEach(t),bJe=i(L),vm=n(L,"LI",{});var _6e=s(vm);uae=n(_6e,"STRONG",{});var TZr=s(uae);vJe=r(TZr,"gpt_neo"),TZr.forEach(t),FJe=r(_6e," \u2014 "),KS=n(_6e,"A",{href:!0});var MZr=s(KS);TJe=r(MZr,"GPTNeoConfig"),MZr.forEach(t),MJe=r(_6e," (GPT Neo model)"),_6e.forEach(t),EJe=i(L),Fm=n(L,"LI",{});var u6e=s(Fm);bae=n(u6e,"STRONG",{});var EZr=s(bae);CJe=r(EZr,"gpt_neox"),EZr.forEach(t),wJe=r(u6e," \u2014 "),ZS=n(u6e,"A",{href:!0});var CZr=s(ZS);AJe=r(CZr,"GPTNeoXConfig"),CZr.forEach(t),LJe=r(u6e," (GPT NeoX model)"),u6e.forEach(t),yJe=i(L),Tm=n(L,"LI",{});var b6e=s(Tm);vae=n(b6e,"STRONG",{});var wZr=s(vae);xJe=r(wZr,"gptj"),wZr.forEach(t),$Je=r(b6e," \u2014 "),eR=n(b6e,"A",{href:!0});var AZr=s(eR);kJe=r(AZr,"GPTJConfig"),AZr.forEach(t),SJe=r(b6e," (GPT-J model)"),b6e.forEach(t),RJe=i(L),Mm=n(L,"LI",{});var v6e=s(Mm);Fae=n(v6e,"STRONG",{});var LZr=s(Fae);PJe=r(LZr,"groupvit"),LZr.forEach(t),BJe=r(v6e," \u2014 "),oR=n(v6e,"A",{href:!0});var yZr=s(oR);IJe=r(yZr,"GroupViTConfig"),yZr.forEach(t),NJe=r(v6e," (GroupViT model)"),v6e.forEach(t),qJe=i(L),Em=n(L,"LI",{});var F6e=s(Em);Tae=n(F6e,"STRONG",{});var xZr=s(Tae);jJe=r(xZr,"hubert"),xZr.forEach(t),DJe=r(F6e," \u2014 "),rR=n(F6e,"A",{href:!0});var $Zr=s(rR);GJe=r($Zr,"HubertConfig"),$Zr.forEach(t),OJe=r(F6e," (Hubert model)"),F6e.forEach(t),VJe=i(L),Cm=n(L,"LI",{});var T6e=s(Cm);Mae=n(T6e,"STRONG",{});var kZr=s(Mae);XJe=r(kZr,"ibert"),kZr.forEach(t),zJe=r(T6e," \u2014 "),tR=n(T6e,"A",{href:!0});var SZr=s(tR);QJe=r(SZr,"IBertConfig"),SZr.forEach(t),WJe=r(T6e," (I-BERT model)"),T6e.forEach(t),HJe=i(L),wm=n(L,"LI",{});var M6e=s(wm);Eae=n(M6e,"STRONG",{});var RZr=s(Eae);UJe=r(RZr,"imagegpt"),RZr.forEach(t),JJe=r(M6e," \u2014 "),aR=n(M6e,"A",{href:!0});var PZr=s(aR);YJe=r(PZr,"ImageGPTConfig"),PZr.forEach(t),KJe=r(M6e," (ImageGPT model)"),M6e.forEach(t),ZJe=i(L),Am=n(L,"LI",{});var E6e=s(Am);Cae=n(E6e,"STRONG",{});var BZr=s(Cae);eYe=r(BZr,"layoutlm"),BZr.forEach(t),oYe=r(E6e," \u2014 "),nR=n(E6e,"A",{href:!0});var IZr=s(nR);rYe=r(IZr,"LayoutLMConfig"),IZr.forEach(t),tYe=r(E6e," (LayoutLM model)"),E6e.forEach(t),aYe=i(L),Lm=n(L,"LI",{});var C6e=s(Lm);wae=n(C6e,"STRONG",{});var NZr=s(wae);nYe=r(NZr,"layoutlmv2"),NZr.forEach(t),sYe=r(C6e," \u2014 "),sR=n(C6e,"A",{href:!0});var qZr=s(sR);lYe=r(qZr,"LayoutLMv2Config"),qZr.forEach(t),iYe=r(C6e," (LayoutLMv2 model)"),C6e.forEach(t),dYe=i(L),ym=n(L,"LI",{});var w6e=s(ym);Aae=n(w6e,"STRONG",{});var jZr=s(Aae);cYe=r(jZr,"layoutlmv3"),jZr.forEach(t),fYe=r(w6e," \u2014 "),lR=n(w6e,"A",{href:!0});var DZr=s(lR);mYe=r(DZr,"LayoutLMv3Config"),DZr.forEach(t),gYe=r(w6e," (LayoutLMv3 model)"),w6e.forEach(t),hYe=i(L),xm=n(L,"LI",{});var A6e=s(xm);Lae=n(A6e,"STRONG",{});var GZr=s(Lae);pYe=r(GZr,"led"),GZr.forEach(t),_Ye=r(A6e," \u2014 "),iR=n(A6e,"A",{href:!0});var OZr=s(iR);uYe=r(OZr,"LEDConfig"),OZr.forEach(t),bYe=r(A6e," (LED model)"),A6e.forEach(t),vYe=i(L),$m=n(L,"LI",{});var L6e=s($m);yae=n(L6e,"STRONG",{});var VZr=s(yae);FYe=r(VZr,"levit"),VZr.forEach(t),TYe=r(L6e," \u2014 "),dR=n(L6e,"A",{href:!0});var XZr=s(dR);MYe=r(XZr,"LevitConfig"),XZr.forEach(t),EYe=r(L6e," (LeViT model)"),L6e.forEach(t),CYe=i(L),km=n(L,"LI",{});var y6e=s(km);xae=n(y6e,"STRONG",{});var zZr=s(xae);wYe=r(zZr,"longformer"),zZr.forEach(t),AYe=r(y6e," \u2014 "),cR=n(y6e,"A",{href:!0});var QZr=s(cR);LYe=r(QZr,"LongformerConfig"),QZr.forEach(t),yYe=r(y6e," (Longformer model)"),y6e.forEach(t),xYe=i(L),Sm=n(L,"LI",{});var x6e=s(Sm);$ae=n(x6e,"STRONG",{});var WZr=s($ae);$Ye=r(WZr,"longt5"),WZr.forEach(t),kYe=r(x6e," \u2014 "),fR=n(x6e,"A",{href:!0});var HZr=s(fR);SYe=r(HZr,"LongT5Config"),HZr.forEach(t),RYe=r(x6e," (LongT5 model)"),x6e.forEach(t),PYe=i(L),Rm=n(L,"LI",{});var $6e=s(Rm);kae=n($6e,"STRONG",{});var UZr=s(kae);BYe=r(UZr,"luke"),UZr.forEach(t),IYe=r($6e," \u2014 "),mR=n($6e,"A",{href:!0});var JZr=s(mR);NYe=r(JZr,"LukeConfig"),JZr.forEach(t),qYe=r($6e," (LUKE model)"),$6e.forEach(t),jYe=i(L),Pm=n(L,"LI",{});var k6e=s(Pm);Sae=n(k6e,"STRONG",{});var YZr=s(Sae);DYe=r(YZr,"lxmert"),YZr.forEach(t),GYe=r(k6e," \u2014 "),gR=n(k6e,"A",{href:!0});var KZr=s(gR);OYe=r(KZr,"LxmertConfig"),KZr.forEach(t),VYe=r(k6e," (LXMERT model)"),k6e.forEach(t),XYe=i(L),Bm=n(L,"LI",{});var S6e=s(Bm);Rae=n(S6e,"STRONG",{});var ZZr=s(Rae);zYe=r(ZZr,"m2m_100"),ZZr.forEach(t),QYe=r(S6e," \u2014 "),hR=n(S6e,"A",{href:!0});var eet=s(hR);WYe=r(eet,"M2M100Config"),eet.forEach(t),HYe=r(S6e," (M2M100 model)"),S6e.forEach(t),UYe=i(L),Im=n(L,"LI",{});var R6e=s(Im);Pae=n(R6e,"STRONG",{});var oet=s(Pae);JYe=r(oet,"marian"),oet.forEach(t),YYe=r(R6e," \u2014 "),pR=n(R6e,"A",{href:!0});var ret=s(pR);KYe=r(ret,"MarianConfig"),ret.forEach(t),ZYe=r(R6e," (Marian model)"),R6e.forEach(t),eKe=i(L),Nm=n(L,"LI",{});var P6e=s(Nm);Bae=n(P6e,"STRONG",{});var tet=s(Bae);oKe=r(tet,"maskformer"),tet.forEach(t),rKe=r(P6e," \u2014 "),_R=n(P6e,"A",{href:!0});var aet=s(_R);tKe=r(aet,"MaskFormerConfig"),aet.forEach(t),aKe=r(P6e," (MaskFormer model)"),P6e.forEach(t),nKe=i(L),qm=n(L,"LI",{});var B6e=s(qm);Iae=n(B6e,"STRONG",{});var net=s(Iae);sKe=r(net,"mbart"),net.forEach(t),lKe=r(B6e," \u2014 "),uR=n(B6e,"A",{href:!0});var set=s(uR);iKe=r(set,"MBartConfig"),set.forEach(t),dKe=r(B6e," (mBART model)"),B6e.forEach(t),cKe=i(L),jm=n(L,"LI",{});var I6e=s(jm);Nae=n(I6e,"STRONG",{});var iet=s(Nae);fKe=r(iet,"mctct"),iet.forEach(t),mKe=r(I6e," \u2014 "),bR=n(I6e,"A",{href:!0});var det=s(bR);gKe=r(det,"MCTCTConfig"),det.forEach(t),hKe=r(I6e," (M-CTC-T model)"),I6e.forEach(t),pKe=i(L),Dm=n(L,"LI",{});var N6e=s(Dm);qae=n(N6e,"STRONG",{});var cet=s(qae);_Ke=r(cet,"megatron-bert"),cet.forEach(t),uKe=r(N6e," \u2014 "),vR=n(N6e,"A",{href:!0});var fet=s(vR);bKe=r(fet,"MegatronBertConfig"),fet.forEach(t),vKe=r(N6e," (Megatron-BERT model)"),N6e.forEach(t),FKe=i(L),Gm=n(L,"LI",{});var q6e=s(Gm);jae=n(q6e,"STRONG",{});var met=s(jae);TKe=r(met,"mobilebert"),met.forEach(t),MKe=r(q6e," \u2014 "),FR=n(q6e,"A",{href:!0});var get=s(FR);EKe=r(get,"MobileBertConfig"),get.forEach(t),CKe=r(q6e," (MobileBERT model)"),q6e.forEach(t),wKe=i(L),Om=n(L,"LI",{});var j6e=s(Om);Dae=n(j6e,"STRONG",{});var het=s(Dae);AKe=r(het,"mpnet"),het.forEach(t),LKe=r(j6e," \u2014 "),TR=n(j6e,"A",{href:!0});var pet=s(TR);yKe=r(pet,"MPNetConfig"),pet.forEach(t),xKe=r(j6e," (MPNet model)"),j6e.forEach(t),$Ke=i(L),Vm=n(L,"LI",{});var D6e=s(Vm);Gae=n(D6e,"STRONG",{});var _et=s(Gae);kKe=r(_et,"mt5"),_et.forEach(t),SKe=r(D6e," \u2014 "),MR=n(D6e,"A",{href:!0});var uet=s(MR);RKe=r(uet,"MT5Config"),uet.forEach(t),PKe=r(D6e," (MT5 model)"),D6e.forEach(t),BKe=i(L),Xm=n(L,"LI",{});var G6e=s(Xm);Oae=n(G6e,"STRONG",{});var bet=s(Oae);IKe=r(bet,"nezha"),bet.forEach(t),NKe=r(G6e," \u2014 "),ER=n(G6e,"A",{href:!0});var vet=s(ER);qKe=r(vet,"NezhaConfig"),vet.forEach(t),jKe=r(G6e," (Nezha model)"),G6e.forEach(t),DKe=i(L),zm=n(L,"LI",{});var O6e=s(zm);Vae=n(O6e,"STRONG",{});var Fet=s(Vae);GKe=r(Fet,"nystromformer"),Fet.forEach(t),OKe=r(O6e," \u2014 "),CR=n(O6e,"A",{href:!0});var Tet=s(CR);VKe=r(Tet,"NystromformerConfig"),Tet.forEach(t),XKe=r(O6e," (Nystr\xF6mformer model)"),O6e.forEach(t),zKe=i(L),Qm=n(L,"LI",{});var V6e=s(Qm);Xae=n(V6e,"STRONG",{});var Met=s(Xae);QKe=r(Met,"openai-gpt"),Met.forEach(t),WKe=r(V6e," \u2014 "),wR=n(V6e,"A",{href:!0});var Eet=s(wR);HKe=r(Eet,"OpenAIGPTConfig"),Eet.forEach(t),UKe=r(V6e," (OpenAI GPT model)"),V6e.forEach(t),JKe=i(L),Wm=n(L,"LI",{});var X6e=s(Wm);zae=n(X6e,"STRONG",{});var Cet=s(zae);YKe=r(Cet,"opt"),Cet.forEach(t),KKe=r(X6e," \u2014 "),AR=n(X6e,"A",{href:!0});var wet=s(AR);ZKe=r(wet,"OPTConfig"),wet.forEach(t),eZe=r(X6e," (OPT model)"),X6e.forEach(t),oZe=i(L),Hm=n(L,"LI",{});var z6e=s(Hm);Qae=n(z6e,"STRONG",{});var Aet=s(Qae);rZe=r(Aet,"pegasus"),Aet.forEach(t),tZe=r(z6e," \u2014 "),LR=n(z6e,"A",{href:!0});var Let=s(LR);aZe=r(Let,"PegasusConfig"),Let.forEach(t),nZe=r(z6e," (Pegasus model)"),z6e.forEach(t),sZe=i(L),Um=n(L,"LI",{});var Q6e=s(Um);Wae=n(Q6e,"STRONG",{});var yet=s(Wae);lZe=r(yet,"perceiver"),yet.forEach(t),iZe=r(Q6e," \u2014 "),yR=n(Q6e,"A",{href:!0});var xet=s(yR);dZe=r(xet,"PerceiverConfig"),xet.forEach(t),cZe=r(Q6e," (Perceiver model)"),Q6e.forEach(t),fZe=i(L),Jm=n(L,"LI",{});var W6e=s(Jm);Hae=n(W6e,"STRONG",{});var $et=s(Hae);mZe=r($et,"plbart"),$et.forEach(t),gZe=r(W6e," \u2014 "),xR=n(W6e,"A",{href:!0});var ket=s(xR);hZe=r(ket,"PLBartConfig"),ket.forEach(t),pZe=r(W6e," (PLBart model)"),W6e.forEach(t),_Ze=i(L),Ym=n(L,"LI",{});var H6e=s(Ym);Uae=n(H6e,"STRONG",{});var Set=s(Uae);uZe=r(Set,"poolformer"),Set.forEach(t),bZe=r(H6e," \u2014 "),$R=n(H6e,"A",{href:!0});var Ret=s($R);vZe=r(Ret,"PoolFormerConfig"),Ret.forEach(t),FZe=r(H6e," (PoolFormer model)"),H6e.forEach(t),TZe=i(L),Km=n(L,"LI",{});var U6e=s(Km);Jae=n(U6e,"STRONG",{});var Pet=s(Jae);MZe=r(Pet,"prophetnet"),Pet.forEach(t),EZe=r(U6e," \u2014 "),kR=n(U6e,"A",{href:!0});var Bet=s(kR);CZe=r(Bet,"ProphetNetConfig"),Bet.forEach(t),wZe=r(U6e," (ProphetNet model)"),U6e.forEach(t),AZe=i(L),Zm=n(L,"LI",{});var J6e=s(Zm);Yae=n(J6e,"STRONG",{});var Iet=s(Yae);LZe=r(Iet,"qdqbert"),Iet.forEach(t),yZe=r(J6e," \u2014 "),SR=n(J6e,"A",{href:!0});var Net=s(SR);xZe=r(Net,"QDQBertConfig"),Net.forEach(t),$Ze=r(J6e," (QDQBert model)"),J6e.forEach(t),kZe=i(L),eg=n(L,"LI",{});var Y6e=s(eg);Kae=n(Y6e,"STRONG",{});var qet=s(Kae);SZe=r(qet,"rag"),qet.forEach(t),RZe=r(Y6e," \u2014 "),RR=n(Y6e,"A",{href:!0});var jet=s(RR);PZe=r(jet,"RagConfig"),jet.forEach(t),BZe=r(Y6e," (RAG model)"),Y6e.forEach(t),IZe=i(L),og=n(L,"LI",{});var K6e=s(og);Zae=n(K6e,"STRONG",{});var Det=s(Zae);NZe=r(Det,"realm"),Det.forEach(t),qZe=r(K6e," \u2014 "),PR=n(K6e,"A",{href:!0});var Get=s(PR);jZe=r(Get,"RealmConfig"),Get.forEach(t),DZe=r(K6e," (REALM model)"),K6e.forEach(t),GZe=i(L),rg=n(L,"LI",{});var Z6e=s(rg);ene=n(Z6e,"STRONG",{});var Oet=s(ene);OZe=r(Oet,"reformer"),Oet.forEach(t),VZe=r(Z6e," \u2014 "),BR=n(Z6e,"A",{href:!0});var Vet=s(BR);XZe=r(Vet,"ReformerConfig"),Vet.forEach(t),zZe=r(Z6e," (Reformer model)"),Z6e.forEach(t),QZe=i(L),tg=n(L,"LI",{});var eLe=s(tg);one=n(eLe,"STRONG",{});var Xet=s(one);WZe=r(Xet,"regnet"),Xet.forEach(t),HZe=r(eLe," \u2014 "),IR=n(eLe,"A",{href:!0});var zet=s(IR);UZe=r(zet,"RegNetConfig"),zet.forEach(t),JZe=r(eLe," (RegNet model)"),eLe.forEach(t),YZe=i(L),ag=n(L,"LI",{});var oLe=s(ag);rne=n(oLe,"STRONG",{});var Qet=s(rne);KZe=r(Qet,"rembert"),Qet.forEach(t),ZZe=r(oLe," \u2014 "),NR=n(oLe,"A",{href:!0});var Wet=s(NR);eeo=r(Wet,"RemBertConfig"),Wet.forEach(t),oeo=r(oLe," (RemBERT model)"),oLe.forEach(t),reo=i(L),ng=n(L,"LI",{});var rLe=s(ng);tne=n(rLe,"STRONG",{});var Het=s(tne);teo=r(Het,"resnet"),Het.forEach(t),aeo=r(rLe," \u2014 "),qR=n(rLe,"A",{href:!0});var Uet=s(qR);neo=r(Uet,"ResNetConfig"),Uet.forEach(t),seo=r(rLe," (ResNet model)"),rLe.forEach(t),leo=i(L),sg=n(L,"LI",{});var tLe=s(sg);ane=n(tLe,"STRONG",{});var Jet=s(ane);ieo=r(Jet,"retribert"),Jet.forEach(t),deo=r(tLe," \u2014 "),jR=n(tLe,"A",{href:!0});var Yet=s(jR);ceo=r(Yet,"RetriBertConfig"),Yet.forEach(t),feo=r(tLe," (RetriBERT model)"),tLe.forEach(t),meo=i(L),lg=n(L,"LI",{});var aLe=s(lg);nne=n(aLe,"STRONG",{});var Ket=s(nne);geo=r(Ket,"roberta"),Ket.forEach(t),heo=r(aLe," \u2014 "),DR=n(aLe,"A",{href:!0});var Zet=s(DR);peo=r(Zet,"RobertaConfig"),Zet.forEach(t),_eo=r(aLe," (RoBERTa model)"),aLe.forEach(t),ueo=i(L),ig=n(L,"LI",{});var nLe=s(ig);sne=n(nLe,"STRONG",{});var eot=s(sne);beo=r(eot,"roformer"),eot.forEach(t),veo=r(nLe," \u2014 "),GR=n(nLe,"A",{href:!0});var oot=s(GR);Feo=r(oot,"RoFormerConfig"),oot.forEach(t),Teo=r(nLe," (RoFormer model)"),nLe.forEach(t),Meo=i(L),dg=n(L,"LI",{});var sLe=s(dg);lne=n(sLe,"STRONG",{});var rot=s(lne);Eeo=r(rot,"segformer"),rot.forEach(t),Ceo=r(sLe," \u2014 "),OR=n(sLe,"A",{href:!0});var tot=s(OR);weo=r(tot,"SegformerConfig"),tot.forEach(t),Aeo=r(sLe," (SegFormer model)"),sLe.forEach(t),Leo=i(L),cg=n(L,"LI",{});var lLe=s(cg);ine=n(lLe,"STRONG",{});var aot=s(ine);yeo=r(aot,"sew"),aot.forEach(t),xeo=r(lLe," \u2014 "),VR=n(lLe,"A",{href:!0});var not=s(VR);$eo=r(not,"SEWConfig"),not.forEach(t),keo=r(lLe," (SEW model)"),lLe.forEach(t),Seo=i(L),fg=n(L,"LI",{});var iLe=s(fg);dne=n(iLe,"STRONG",{});var sot=s(dne);Reo=r(sot,"sew-d"),sot.forEach(t),Peo=r(iLe," \u2014 "),XR=n(iLe,"A",{href:!0});var lot=s(XR);Beo=r(lot,"SEWDConfig"),lot.forEach(t),Ieo=r(iLe," (SEW-D model)"),iLe.forEach(t),Neo=i(L),mg=n(L,"LI",{});var dLe=s(mg);cne=n(dLe,"STRONG",{});var iot=s(cne);qeo=r(iot,"speech-encoder-decoder"),iot.forEach(t),jeo=r(dLe," \u2014 "),zR=n(dLe,"A",{href:!0});var dot=s(zR);Deo=r(dot,"SpeechEncoderDecoderConfig"),dot.forEach(t),Geo=r(dLe," (Speech Encoder decoder model)"),dLe.forEach(t),Oeo=i(L),gg=n(L,"LI",{});var cLe=s(gg);fne=n(cLe,"STRONG",{});var cot=s(fne);Veo=r(cot,"speech_to_text"),cot.forEach(t),Xeo=r(cLe," \u2014 "),QR=n(cLe,"A",{href:!0});var fot=s(QR);zeo=r(fot,"Speech2TextConfig"),fot.forEach(t),Qeo=r(cLe," (Speech2Text model)"),cLe.forEach(t),Weo=i(L),hg=n(L,"LI",{});var fLe=s(hg);mne=n(fLe,"STRONG",{});var mot=s(mne);Heo=r(mot,"speech_to_text_2"),mot.forEach(t),Ueo=r(fLe," \u2014 "),WR=n(fLe,"A",{href:!0});var got=s(WR);Jeo=r(got,"Speech2Text2Config"),got.forEach(t),Yeo=r(fLe," (Speech2Text2 model)"),fLe.forEach(t),Keo=i(L),pg=n(L,"LI",{});var mLe=s(pg);gne=n(mLe,"STRONG",{});var hot=s(gne);Zeo=r(hot,"splinter"),hot.forEach(t),eoo=r(mLe," \u2014 "),HR=n(mLe,"A",{href:!0});var pot=s(HR);ooo=r(pot,"SplinterConfig"),pot.forEach(t),roo=r(mLe," (Splinter model)"),mLe.forEach(t),too=i(L),_g=n(L,"LI",{});var gLe=s(_g);hne=n(gLe,"STRONG",{});var _ot=s(hne);aoo=r(_ot,"squeezebert"),_ot.forEach(t),noo=r(gLe," \u2014 "),UR=n(gLe,"A",{href:!0});var uot=s(UR);soo=r(uot,"SqueezeBertConfig"),uot.forEach(t),loo=r(gLe," (SqueezeBERT model)"),gLe.forEach(t),ioo=i(L),ug=n(L,"LI",{});var hLe=s(ug);pne=n(hLe,"STRONG",{});var bot=s(pne);doo=r(bot,"swin"),bot.forEach(t),coo=r(hLe," \u2014 "),JR=n(hLe,"A",{href:!0});var vot=s(JR);foo=r(vot,"SwinConfig"),vot.forEach(t),moo=r(hLe," (Swin Transformer model)"),hLe.forEach(t),goo=i(L),bg=n(L,"LI",{});var pLe=s(bg);_ne=n(pLe,"STRONG",{});var Fot=s(_ne);hoo=r(Fot,"t5"),Fot.forEach(t),poo=r(pLe," \u2014 "),YR=n(pLe,"A",{href:!0});var Tot=s(YR);_oo=r(Tot,"T5Config"),Tot.forEach(t),uoo=r(pLe," (T5 model)"),pLe.forEach(t),boo=i(L),vg=n(L,"LI",{});var _Le=s(vg);une=n(_Le,"STRONG",{});var Mot=s(une);voo=r(Mot,"tapas"),Mot.forEach(t),Foo=r(_Le," \u2014 "),KR=n(_Le,"A",{href:!0});var Eot=s(KR);Too=r(Eot,"TapasConfig"),Eot.forEach(t),Moo=r(_Le," (TAPAS model)"),_Le.forEach(t),Eoo=i(L),Fg=n(L,"LI",{});var uLe=s(Fg);bne=n(uLe,"STRONG",{});var Cot=s(bne);Coo=r(Cot,"trajectory_transformer"),Cot.forEach(t),woo=r(uLe," \u2014 "),ZR=n(uLe,"A",{href:!0});var wot=s(ZR);Aoo=r(wot,"TrajectoryTransformerConfig"),wot.forEach(t),Loo=r(uLe," (Trajectory Transformer model)"),uLe.forEach(t),yoo=i(L),Tg=n(L,"LI",{});var bLe=s(Tg);vne=n(bLe,"STRONG",{});var Aot=s(vne);xoo=r(Aot,"transfo-xl"),Aot.forEach(t),$oo=r(bLe," \u2014 "),eP=n(bLe,"A",{href:!0});var Lot=s(eP);koo=r(Lot,"TransfoXLConfig"),Lot.forEach(t),Soo=r(bLe," (Transformer-XL model)"),bLe.forEach(t),Roo=i(L),Mg=n(L,"LI",{});var vLe=s(Mg);Fne=n(vLe,"STRONG",{});var yot=s(Fne);Poo=r(yot,"trocr"),yot.forEach(t),Boo=r(vLe," \u2014 "),oP=n(vLe,"A",{href:!0});var xot=s(oP);Ioo=r(xot,"TrOCRConfig"),xot.forEach(t),Noo=r(vLe," (TrOCR model)"),vLe.forEach(t),qoo=i(L),Eg=n(L,"LI",{});var FLe=s(Eg);Tne=n(FLe,"STRONG",{});var $ot=s(Tne);joo=r($ot,"unispeech"),$ot.forEach(t),Doo=r(FLe," \u2014 "),rP=n(FLe,"A",{href:!0});var kot=s(rP);Goo=r(kot,"UniSpeechConfig"),kot.forEach(t),Ooo=r(FLe," (UniSpeech model)"),FLe.forEach(t),Voo=i(L),Cg=n(L,"LI",{});var TLe=s(Cg);Mne=n(TLe,"STRONG",{});var Sot=s(Mne);Xoo=r(Sot,"unispeech-sat"),Sot.forEach(t),zoo=r(TLe," \u2014 "),tP=n(TLe,"A",{href:!0});var Rot=s(tP);Qoo=r(Rot,"UniSpeechSatConfig"),Rot.forEach(t),Woo=r(TLe," (UniSpeechSat model)"),TLe.forEach(t),Hoo=i(L),wg=n(L,"LI",{});var MLe=s(wg);Ene=n(MLe,"STRONG",{});var Pot=s(Ene);Uoo=r(Pot,"van"),Pot.forEach(t),Joo=r(MLe," \u2014 "),aP=n(MLe,"A",{href:!0});var Bot=s(aP);Yoo=r(Bot,"VanConfig"),Bot.forEach(t),Koo=r(MLe," (VAN model)"),MLe.forEach(t),Zoo=i(L),Ag=n(L,"LI",{});var ELe=s(Ag);Cne=n(ELe,"STRONG",{});var Iot=s(Cne);ero=r(Iot,"vilt"),Iot.forEach(t),oro=r(ELe," \u2014 "),nP=n(ELe,"A",{href:!0});var Not=s(nP);rro=r(Not,"ViltConfig"),Not.forEach(t),tro=r(ELe," (ViLT model)"),ELe.forEach(t),aro=i(L),Lg=n(L,"LI",{});var CLe=s(Lg);wne=n(CLe,"STRONG",{});var qot=s(wne);nro=r(qot,"vision-encoder-decoder"),qot.forEach(t),sro=r(CLe," \u2014 "),sP=n(CLe,"A",{href:!0});var jot=s(sP);lro=r(jot,"VisionEncoderDecoderConfig"),jot.forEach(t),iro=r(CLe," (Vision Encoder decoder model)"),CLe.forEach(t),dro=i(L),yg=n(L,"LI",{});var wLe=s(yg);Ane=n(wLe,"STRONG",{});var Dot=s(Ane);cro=r(Dot,"vision-text-dual-encoder"),Dot.forEach(t),fro=r(wLe," \u2014 "),lP=n(wLe,"A",{href:!0});var Got=s(lP);mro=r(Got,"VisionTextDualEncoderConfig"),Got.forEach(t),gro=r(wLe," (VisionTextDualEncoder model)"),wLe.forEach(t),hro=i(L),xg=n(L,"LI",{});var ALe=s(xg);Lne=n(ALe,"STRONG",{});var Oot=s(Lne);pro=r(Oot,"visual_bert"),Oot.forEach(t),_ro=r(ALe," \u2014 "),iP=n(ALe,"A",{href:!0});var Vot=s(iP);uro=r(Vot,"VisualBertConfig"),Vot.forEach(t),bro=r(ALe," (VisualBERT model)"),ALe.forEach(t),vro=i(L),$g=n(L,"LI",{});var LLe=s($g);yne=n(LLe,"STRONG",{});var Xot=s(yne);Fro=r(Xot,"vit"),Xot.forEach(t),Tro=r(LLe," \u2014 "),dP=n(LLe,"A",{href:!0});var zot=s(dP);Mro=r(zot,"ViTConfig"),zot.forEach(t),Ero=r(LLe," (ViT model)"),LLe.forEach(t),Cro=i(L),kg=n(L,"LI",{});var yLe=s(kg);xne=n(yLe,"STRONG",{});var Qot=s(xne);wro=r(Qot,"vit_mae"),Qot.forEach(t),Aro=r(yLe," \u2014 "),cP=n(yLe,"A",{href:!0});var Wot=s(cP);Lro=r(Wot,"ViTMAEConfig"),Wot.forEach(t),yro=r(yLe," (ViTMAE model)"),yLe.forEach(t),xro=i(L),Sg=n(L,"LI",{});var xLe=s(Sg);$ne=n(xLe,"STRONG",{});var Hot=s($ne);$ro=r(Hot,"wav2vec2"),Hot.forEach(t),kro=r(xLe," \u2014 "),fP=n(xLe,"A",{href:!0});var Uot=s(fP);Sro=r(Uot,"Wav2Vec2Config"),Uot.forEach(t),Rro=r(xLe," (Wav2Vec2 model)"),xLe.forEach(t),Pro=i(L),Rg=n(L,"LI",{});var $Le=s(Rg);kne=n($Le,"STRONG",{});var Jot=s(kne);Bro=r(Jot,"wav2vec2-conformer"),Jot.forEach(t),Iro=r($Le," \u2014 "),mP=n($Le,"A",{href:!0});var Yot=s(mP);Nro=r(Yot,"Wav2Vec2ConformerConfig"),Yot.forEach(t),qro=r($Le," (Wav2Vec2-Conformer model)"),$Le.forEach(t),jro=i(L),Pg=n(L,"LI",{});var kLe=s(Pg);Sne=n(kLe,"STRONG",{});var Kot=s(Sne);Dro=r(Kot,"wavlm"),Kot.forEach(t),Gro=r(kLe," \u2014 "),gP=n(kLe,"A",{href:!0});var Zot=s(gP);Oro=r(Zot,"WavLMConfig"),Zot.forEach(t),Vro=r(kLe," (WavLM model)"),kLe.forEach(t),Xro=i(L),Bg=n(L,"LI",{});var SLe=s(Bg);Rne=n(SLe,"STRONG",{});var ert=s(Rne);zro=r(ert,"xglm"),ert.forEach(t),Qro=r(SLe," \u2014 "),hP=n(SLe,"A",{href:!0});var ort=s(hP);Wro=r(ort,"XGLMConfig"),ort.forEach(t),Hro=r(SLe," (XGLM model)"),SLe.forEach(t),Uro=i(L),Ig=n(L,"LI",{});var RLe=s(Ig);Pne=n(RLe,"STRONG",{});var rrt=s(Pne);Jro=r(rrt,"xlm"),rrt.forEach(t),Yro=r(RLe," \u2014 "),pP=n(RLe,"A",{href:!0});var trt=s(pP);Kro=r(trt,"XLMConfig"),trt.forEach(t),Zro=r(RLe," (XLM model)"),RLe.forEach(t),eto=i(L),Ng=n(L,"LI",{});var PLe=s(Ng);Bne=n(PLe,"STRONG",{});var art=s(Bne);oto=r(art,"xlm-prophetnet"),art.forEach(t),rto=r(PLe," \u2014 "),_P=n(PLe,"A",{href:!0});var nrt=s(_P);tto=r(nrt,"XLMProphetNetConfig"),nrt.forEach(t),ato=r(PLe," (XLM-ProphetNet model)"),PLe.forEach(t),nto=i(L),qg=n(L,"LI",{});var BLe=s(qg);Ine=n(BLe,"STRONG",{});var srt=s(Ine);sto=r(srt,"xlm-roberta"),srt.forEach(t),lto=r(BLe," \u2014 "),uP=n(BLe,"A",{href:!0});var lrt=s(uP);ito=r(lrt,"XLMRobertaConfig"),lrt.forEach(t),dto=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),cto=i(L),jg=n(L,"LI",{});var ILe=s(jg);Nne=n(ILe,"STRONG",{});var irt=s(Nne);fto=r(irt,"xlm-roberta-xl"),irt.forEach(t),mto=r(ILe," \u2014 "),bP=n(ILe,"A",{href:!0});var drt=s(bP);gto=r(drt,"XLMRobertaXLConfig"),drt.forEach(t),hto=r(ILe," (XLM-RoBERTa-XL model)"),ILe.forEach(t),pto=i(L),Dg=n(L,"LI",{});var NLe=s(Dg);qne=n(NLe,"STRONG",{});var crt=s(qne);_to=r(crt,"xlnet"),crt.forEach(t),uto=r(NLe," \u2014 "),vP=n(NLe,"A",{href:!0});var frt=s(vP);bto=r(frt,"XLNetConfig"),frt.forEach(t),vto=r(NLe," (XLNet model)"),NLe.forEach(t),Fto=i(L),Gg=n(L,"LI",{});var qLe=s(Gg);jne=n(qLe,"STRONG",{});var mrt=s(jne);Tto=r(mrt,"yolos"),mrt.forEach(t),Mto=r(qLe," \u2014 "),FP=n(qLe,"A",{href:!0});var grt=s(FP);Eto=r(grt,"YolosConfig"),grt.forEach(t),Cto=r(qLe," (YOLOS model)"),qLe.forEach(t),wto=i(L),Og=n(L,"LI",{});var jLe=s(Og);Dne=n(jLe,"STRONG",{});var hrt=s(Dne);Ato=r(hrt,"yoso"),hrt.forEach(t),Lto=r(jLe," \u2014 "),TP=n(jLe,"A",{href:!0});var prt=s(TP);yto=r(prt,"YosoConfig"),prt.forEach(t),xto=r(jLe," (YOSO model)"),jLe.forEach(t),L.forEach(t),$to=i(tt),T(Vg.$$.fragment,tt),tt.forEach(t),kto=i(rt),Xg=n(rt,"DIV",{class:!0});var mXe=s(Xg);T(GL.$$.fragment,mXe),Sto=i(mXe),Gne=n(mXe,"P",{});var _rt=s(Gne);Rto=r(_rt,"Register a new configuration for this class."),_rt.forEach(t),mXe.forEach(t),rt.forEach(t),gOe=i(f),Si=n(f,"H2",{class:!0});var gXe=s(Si);zg=n(gXe,"A",{id:!0,class:!0,href:!0});var urt=s(zg);One=n(urt,"SPAN",{});var brt=s(One);T(OL.$$.fragment,brt),brt.forEach(t),urt.forEach(t),Pto=i(gXe),Vne=n(gXe,"SPAN",{});var vrt=s(Vne);Bto=r(vrt,"AutoTokenizer"),vrt.forEach(t),gXe.forEach(t),hOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(VL.$$.fragment,Hs),Ito=i(Hs),XL=n(Hs,"P",{});var hXe=s(XL);Nto=r(hXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MP=n(hXe,"A",{href:!0});var Frt=s(MP);qto=r(Frt,"AutoTokenizer.from_pretrained()"),Frt.forEach(t),jto=r(hXe," class method."),hXe.forEach(t),Dto=i(Hs),zL=n(Hs,"P",{});var pXe=s(zL);Gto=r(pXe,"This class cannot be instantiated directly using "),Xne=n(pXe,"CODE",{});var Trt=s(Xne);Oto=r(Trt,"__init__()"),Trt.forEach(t),Vto=r(pXe," (throws an error)."),pXe.forEach(t),Xto=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(QL.$$.fragment,Us),zto=i(Us),zne=n(Us,"P",{});var Mrt=s(zne);Qto=r(Mrt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mrt.forEach(t),Wto=i(Us),ka=n(Us,"P",{});var PA=s(ka);Hto=r(PA,"The tokenizer class to instantiate is selected based on the "),Qne=n(PA,"CODE",{});var Ert=s(Qne);Uto=r(Ert,"model_type"),Ert.forEach(t),Jto=r(PA,` property of the config object (either
passed as an argument or loaded from `),Wne=n(PA,"CODE",{});var Crt=s(Wne);Yto=r(Crt,"pretrained_model_name_or_path"),Crt.forEach(t),Kto=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=n(PA,"CODE",{});var wrt=s(Hne);Zto=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),eao=r(PA,":"),PA.forEach(t),oao=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var K$=s(qn);Une=n(K$,"STRONG",{});var Art=s(Une);rao=r(Art,"albert"),Art.forEach(t),tao=r(K$," \u2014 "),EP=n(K$,"A",{href:!0});var Lrt=s(EP);aao=r(Lrt,"AlbertTokenizer"),Lrt.forEach(t),nao=r(K$," or "),CP=n(K$,"A",{href:!0});var yrt=s(CP);sao=r(yrt,"AlbertTokenizerFast"),yrt.forEach(t),lao=r(K$," (ALBERT model)"),K$.forEach(t),iao=i(S),jn=n(S,"LI",{});var Z$=s(jn);Jne=n(Z$,"STRONG",{});var xrt=s(Jne);dao=r(xrt,"bart"),xrt.forEach(t),cao=r(Z$," \u2014 "),wP=n(Z$,"A",{href:!0});var $rt=s(wP);fao=r($rt,"BartTokenizer"),$rt.forEach(t),mao=r(Z$," or "),AP=n(Z$,"A",{href:!0});var krt=s(AP);gao=r(krt,"BartTokenizerFast"),krt.forEach(t),hao=r(Z$," (BART model)"),Z$.forEach(t),pao=i(S),Dn=n(S,"LI",{});var ek=s(Dn);Yne=n(ek,"STRONG",{});var Srt=s(Yne);_ao=r(Srt,"barthez"),Srt.forEach(t),uao=r(ek," \u2014 "),LP=n(ek,"A",{href:!0});var Rrt=s(LP);bao=r(Rrt,"BarthezTokenizer"),Rrt.forEach(t),vao=r(ek," or "),yP=n(ek,"A",{href:!0});var Prt=s(yP);Fao=r(Prt,"BarthezTokenizerFast"),Prt.forEach(t),Tao=r(ek," (BARThez model)"),ek.forEach(t),Mao=i(S),Qg=n(S,"LI",{});var DLe=s(Qg);Kne=n(DLe,"STRONG",{});var Brt=s(Kne);Eao=r(Brt,"bartpho"),Brt.forEach(t),Cao=r(DLe," \u2014 "),xP=n(DLe,"A",{href:!0});var Irt=s(xP);wao=r(Irt,"BartphoTokenizer"),Irt.forEach(t),Aao=r(DLe," (BARTpho model)"),DLe.forEach(t),Lao=i(S),Gn=n(S,"LI",{});var ok=s(Gn);Zne=n(ok,"STRONG",{});var Nrt=s(Zne);yao=r(Nrt,"bert"),Nrt.forEach(t),xao=r(ok," \u2014 "),$P=n(ok,"A",{href:!0});var qrt=s($P);$ao=r(qrt,"BertTokenizer"),qrt.forEach(t),kao=r(ok," or "),kP=n(ok,"A",{href:!0});var jrt=s(kP);Sao=r(jrt,"BertTokenizerFast"),jrt.forEach(t),Rao=r(ok," (BERT model)"),ok.forEach(t),Pao=i(S),Wg=n(S,"LI",{});var GLe=s(Wg);ese=n(GLe,"STRONG",{});var Drt=s(ese);Bao=r(Drt,"bert-generation"),Drt.forEach(t),Iao=r(GLe," \u2014 "),SP=n(GLe,"A",{href:!0});var Grt=s(SP);Nao=r(Grt,"BertGenerationTokenizer"),Grt.forEach(t),qao=r(GLe," (Bert Generation model)"),GLe.forEach(t),jao=i(S),Hg=n(S,"LI",{});var OLe=s(Hg);ose=n(OLe,"STRONG",{});var Ort=s(ose);Dao=r(Ort,"bert-japanese"),Ort.forEach(t),Gao=r(OLe," \u2014 "),RP=n(OLe,"A",{href:!0});var Vrt=s(RP);Oao=r(Vrt,"BertJapaneseTokenizer"),Vrt.forEach(t),Vao=r(OLe," (BertJapanese model)"),OLe.forEach(t),Xao=i(S),Ug=n(S,"LI",{});var VLe=s(Ug);rse=n(VLe,"STRONG",{});var Xrt=s(rse);zao=r(Xrt,"bertweet"),Xrt.forEach(t),Qao=r(VLe," \u2014 "),PP=n(VLe,"A",{href:!0});var zrt=s(PP);Wao=r(zrt,"BertweetTokenizer"),zrt.forEach(t),Hao=r(VLe," (BERTweet model)"),VLe.forEach(t),Uao=i(S),On=n(S,"LI",{});var rk=s(On);tse=n(rk,"STRONG",{});var Qrt=s(tse);Jao=r(Qrt,"big_bird"),Qrt.forEach(t),Yao=r(rk," \u2014 "),BP=n(rk,"A",{href:!0});var Wrt=s(BP);Kao=r(Wrt,"BigBirdTokenizer"),Wrt.forEach(t),Zao=r(rk," or "),IP=n(rk,"A",{href:!0});var Hrt=s(IP);eno=r(Hrt,"BigBirdTokenizerFast"),Hrt.forEach(t),ono=r(rk," (BigBird model)"),rk.forEach(t),rno=i(S),Vn=n(S,"LI",{});var tk=s(Vn);ase=n(tk,"STRONG",{});var Urt=s(ase);tno=r(Urt,"bigbird_pegasus"),Urt.forEach(t),ano=r(tk," \u2014 "),NP=n(tk,"A",{href:!0});var Jrt=s(NP);nno=r(Jrt,"PegasusTokenizer"),Jrt.forEach(t),sno=r(tk," or "),qP=n(tk,"A",{href:!0});var Yrt=s(qP);lno=r(Yrt,"PegasusTokenizerFast"),Yrt.forEach(t),ino=r(tk," (BigBird-Pegasus model)"),tk.forEach(t),dno=i(S),Xn=n(S,"LI",{});var ak=s(Xn);nse=n(ak,"STRONG",{});var Krt=s(nse);cno=r(Krt,"blenderbot"),Krt.forEach(t),fno=r(ak," \u2014 "),jP=n(ak,"A",{href:!0});var Zrt=s(jP);mno=r(Zrt,"BlenderbotTokenizer"),Zrt.forEach(t),gno=r(ak," or "),DP=n(ak,"A",{href:!0});var ett=s(DP);hno=r(ett,"BlenderbotTokenizerFast"),ett.forEach(t),pno=r(ak," (Blenderbot model)"),ak.forEach(t),_no=i(S),Jg=n(S,"LI",{});var XLe=s(Jg);sse=n(XLe,"STRONG",{});var ott=s(sse);uno=r(ott,"blenderbot-small"),ott.forEach(t),bno=r(XLe," \u2014 "),GP=n(XLe,"A",{href:!0});var rtt=s(GP);vno=r(rtt,"BlenderbotSmallTokenizer"),rtt.forEach(t),Fno=r(XLe," (BlenderbotSmall model)"),XLe.forEach(t),Tno=i(S),Yg=n(S,"LI",{});var zLe=s(Yg);lse=n(zLe,"STRONG",{});var ttt=s(lse);Mno=r(ttt,"bloom"),ttt.forEach(t),Eno=r(zLe," \u2014 "),OP=n(zLe,"A",{href:!0});var att=s(OP);Cno=r(att,"BloomTokenizerFast"),att.forEach(t),wno=r(zLe," (BLOOM model)"),zLe.forEach(t),Ano=i(S),Kg=n(S,"LI",{});var QLe=s(Kg);ise=n(QLe,"STRONG",{});var ntt=s(ise);Lno=r(ntt,"byt5"),ntt.forEach(t),yno=r(QLe," \u2014 "),VP=n(QLe,"A",{href:!0});var stt=s(VP);xno=r(stt,"ByT5Tokenizer"),stt.forEach(t),$no=r(QLe," (ByT5 model)"),QLe.forEach(t),kno=i(S),zn=n(S,"LI",{});var nk=s(zn);dse=n(nk,"STRONG",{});var ltt=s(dse);Sno=r(ltt,"camembert"),ltt.forEach(t),Rno=r(nk," \u2014 "),XP=n(nk,"A",{href:!0});var itt=s(XP);Pno=r(itt,"CamembertTokenizer"),itt.forEach(t),Bno=r(nk," or "),zP=n(nk,"A",{href:!0});var dtt=s(zP);Ino=r(dtt,"CamembertTokenizerFast"),dtt.forEach(t),Nno=r(nk," (CamemBERT model)"),nk.forEach(t),qno=i(S),Zg=n(S,"LI",{});var WLe=s(Zg);cse=n(WLe,"STRONG",{});var ctt=s(cse);jno=r(ctt,"canine"),ctt.forEach(t),Dno=r(WLe," \u2014 "),QP=n(WLe,"A",{href:!0});var ftt=s(QP);Gno=r(ftt,"CanineTokenizer"),ftt.forEach(t),Ono=r(WLe," (CANINE model)"),WLe.forEach(t),Vno=i(S),Qn=n(S,"LI",{});var sk=s(Qn);fse=n(sk,"STRONG",{});var mtt=s(fse);Xno=r(mtt,"clip"),mtt.forEach(t),zno=r(sk," \u2014 "),WP=n(sk,"A",{href:!0});var gtt=s(WP);Qno=r(gtt,"CLIPTokenizer"),gtt.forEach(t),Wno=r(sk," or "),HP=n(sk,"A",{href:!0});var htt=s(HP);Hno=r(htt,"CLIPTokenizerFast"),htt.forEach(t),Uno=r(sk," (CLIP model)"),sk.forEach(t),Jno=i(S),Wn=n(S,"LI",{});var lk=s(Wn);mse=n(lk,"STRONG",{});var ptt=s(mse);Yno=r(ptt,"convbert"),ptt.forEach(t),Kno=r(lk," \u2014 "),UP=n(lk,"A",{href:!0});var _tt=s(UP);Zno=r(_tt,"ConvBertTokenizer"),_tt.forEach(t),eso=r(lk," or "),JP=n(lk,"A",{href:!0});var utt=s(JP);oso=r(utt,"ConvBertTokenizerFast"),utt.forEach(t),rso=r(lk," (ConvBERT model)"),lk.forEach(t),tso=i(S),Hn=n(S,"LI",{});var ik=s(Hn);gse=n(ik,"STRONG",{});var btt=s(gse);aso=r(btt,"cpm"),btt.forEach(t),nso=r(ik," \u2014 "),YP=n(ik,"A",{href:!0});var vtt=s(YP);sso=r(vtt,"CpmTokenizer"),vtt.forEach(t),lso=r(ik," or "),KP=n(ik,"A",{href:!0});var Ftt=s(KP);iso=r(Ftt,"CpmTokenizerFast"),Ftt.forEach(t),dso=r(ik," (CPM model)"),ik.forEach(t),cso=i(S),eh=n(S,"LI",{});var HLe=s(eh);hse=n(HLe,"STRONG",{});var Ttt=s(hse);fso=r(Ttt,"ctrl"),Ttt.forEach(t),mso=r(HLe," \u2014 "),ZP=n(HLe,"A",{href:!0});var Mtt=s(ZP);gso=r(Mtt,"CTRLTokenizer"),Mtt.forEach(t),hso=r(HLe," (CTRL model)"),HLe.forEach(t),pso=i(S),Un=n(S,"LI",{});var dk=s(Un);pse=n(dk,"STRONG",{});var Ett=s(pse);_so=r(Ett,"data2vec-text"),Ett.forEach(t),uso=r(dk," \u2014 "),eB=n(dk,"A",{href:!0});var Ctt=s(eB);bso=r(Ctt,"RobertaTokenizer"),Ctt.forEach(t),vso=r(dk," or "),oB=n(dk,"A",{href:!0});var wtt=s(oB);Fso=r(wtt,"RobertaTokenizerFast"),wtt.forEach(t),Tso=r(dk," (Data2VecText model)"),dk.forEach(t),Mso=i(S),Jn=n(S,"LI",{});var ck=s(Jn);_se=n(ck,"STRONG",{});var Att=s(_se);Eso=r(Att,"deberta"),Att.forEach(t),Cso=r(ck," \u2014 "),rB=n(ck,"A",{href:!0});var Ltt=s(rB);wso=r(Ltt,"DebertaTokenizer"),Ltt.forEach(t),Aso=r(ck," or "),tB=n(ck,"A",{href:!0});var ytt=s(tB);Lso=r(ytt,"DebertaTokenizerFast"),ytt.forEach(t),yso=r(ck," (DeBERTa model)"),ck.forEach(t),xso=i(S),Yn=n(S,"LI",{});var fk=s(Yn);use=n(fk,"STRONG",{});var xtt=s(use);$so=r(xtt,"deberta-v2"),xtt.forEach(t),kso=r(fk," \u2014 "),aB=n(fk,"A",{href:!0});var $tt=s(aB);Sso=r($tt,"DebertaV2Tokenizer"),$tt.forEach(t),Rso=r(fk," or "),nB=n(fk,"A",{href:!0});var ktt=s(nB);Pso=r(ktt,"DebertaV2TokenizerFast"),ktt.forEach(t),Bso=r(fk," (DeBERTa-v2 model)"),fk.forEach(t),Iso=i(S),Kn=n(S,"LI",{});var mk=s(Kn);bse=n(mk,"STRONG",{});var Stt=s(bse);Nso=r(Stt,"distilbert"),Stt.forEach(t),qso=r(mk," \u2014 "),sB=n(mk,"A",{href:!0});var Rtt=s(sB);jso=r(Rtt,"DistilBertTokenizer"),Rtt.forEach(t),Dso=r(mk," or "),lB=n(mk,"A",{href:!0});var Ptt=s(lB);Gso=r(Ptt,"DistilBertTokenizerFast"),Ptt.forEach(t),Oso=r(mk," (DistilBERT model)"),mk.forEach(t),Vso=i(S),Zn=n(S,"LI",{});var gk=s(Zn);vse=n(gk,"STRONG",{});var Btt=s(vse);Xso=r(Btt,"dpr"),Btt.forEach(t),zso=r(gk," \u2014 "),iB=n(gk,"A",{href:!0});var Itt=s(iB);Qso=r(Itt,"DPRQuestionEncoderTokenizer"),Itt.forEach(t),Wso=r(gk," or "),dB=n(gk,"A",{href:!0});var Ntt=s(dB);Hso=r(Ntt,"DPRQuestionEncoderTokenizerFast"),Ntt.forEach(t),Uso=r(gk," (DPR model)"),gk.forEach(t),Jso=i(S),es=n(S,"LI",{});var hk=s(es);Fse=n(hk,"STRONG",{});var qtt=s(Fse);Yso=r(qtt,"electra"),qtt.forEach(t),Kso=r(hk," \u2014 "),cB=n(hk,"A",{href:!0});var jtt=s(cB);Zso=r(jtt,"ElectraTokenizer"),jtt.forEach(t),elo=r(hk," or "),fB=n(hk,"A",{href:!0});var Dtt=s(fB);olo=r(Dtt,"ElectraTokenizerFast"),Dtt.forEach(t),rlo=r(hk," (ELECTRA model)"),hk.forEach(t),tlo=i(S),oh=n(S,"LI",{});var ULe=s(oh);Tse=n(ULe,"STRONG",{});var Gtt=s(Tse);alo=r(Gtt,"flaubert"),Gtt.forEach(t),nlo=r(ULe," \u2014 "),mB=n(ULe,"A",{href:!0});var Ott=s(mB);slo=r(Ott,"FlaubertTokenizer"),Ott.forEach(t),llo=r(ULe," (FlauBERT model)"),ULe.forEach(t),ilo=i(S),os=n(S,"LI",{});var pk=s(os);Mse=n(pk,"STRONG",{});var Vtt=s(Mse);dlo=r(Vtt,"fnet"),Vtt.forEach(t),clo=r(pk," \u2014 "),gB=n(pk,"A",{href:!0});var Xtt=s(gB);flo=r(Xtt,"FNetTokenizer"),Xtt.forEach(t),mlo=r(pk," or "),hB=n(pk,"A",{href:!0});var ztt=s(hB);glo=r(ztt,"FNetTokenizerFast"),ztt.forEach(t),hlo=r(pk," (FNet model)"),pk.forEach(t),plo=i(S),rh=n(S,"LI",{});var JLe=s(rh);Ese=n(JLe,"STRONG",{});var Qtt=s(Ese);_lo=r(Qtt,"fsmt"),Qtt.forEach(t),ulo=r(JLe," \u2014 "),pB=n(JLe,"A",{href:!0});var Wtt=s(pB);blo=r(Wtt,"FSMTTokenizer"),Wtt.forEach(t),vlo=r(JLe," (FairSeq Machine-Translation model)"),JLe.forEach(t),Flo=i(S),rs=n(S,"LI",{});var _k=s(rs);Cse=n(_k,"STRONG",{});var Htt=s(Cse);Tlo=r(Htt,"funnel"),Htt.forEach(t),Mlo=r(_k," \u2014 "),_B=n(_k,"A",{href:!0});var Utt=s(_B);Elo=r(Utt,"FunnelTokenizer"),Utt.forEach(t),Clo=r(_k," or "),uB=n(_k,"A",{href:!0});var Jtt=s(uB);wlo=r(Jtt,"FunnelTokenizerFast"),Jtt.forEach(t),Alo=r(_k," (Funnel Transformer model)"),_k.forEach(t),Llo=i(S),ts=n(S,"LI",{});var uk=s(ts);wse=n(uk,"STRONG",{});var Ytt=s(wse);ylo=r(Ytt,"gpt2"),Ytt.forEach(t),xlo=r(uk," \u2014 "),bB=n(uk,"A",{href:!0});var Ktt=s(bB);$lo=r(Ktt,"GPT2Tokenizer"),Ktt.forEach(t),klo=r(uk," or "),vB=n(uk,"A",{href:!0});var Ztt=s(vB);Slo=r(Ztt,"GPT2TokenizerFast"),Ztt.forEach(t),Rlo=r(uk," (OpenAI GPT-2 model)"),uk.forEach(t),Plo=i(S),as=n(S,"LI",{});var bk=s(as);Ase=n(bk,"STRONG",{});var eat=s(Ase);Blo=r(eat,"gpt_neo"),eat.forEach(t),Ilo=r(bk," \u2014 "),FB=n(bk,"A",{href:!0});var oat=s(FB);Nlo=r(oat,"GPT2Tokenizer"),oat.forEach(t),qlo=r(bk," or "),TB=n(bk,"A",{href:!0});var rat=s(TB);jlo=r(rat,"GPT2TokenizerFast"),rat.forEach(t),Dlo=r(bk," (GPT Neo model)"),bk.forEach(t),Glo=i(S),th=n(S,"LI",{});var YLe=s(th);Lse=n(YLe,"STRONG",{});var tat=s(Lse);Olo=r(tat,"gpt_neox"),tat.forEach(t),Vlo=r(YLe," \u2014 "),MB=n(YLe,"A",{href:!0});var aat=s(MB);Xlo=r(aat,"GPTNeoXTokenizerFast"),aat.forEach(t),zlo=r(YLe," (GPT NeoX model)"),YLe.forEach(t),Qlo=i(S),ns=n(S,"LI",{});var vk=s(ns);yse=n(vk,"STRONG",{});var nat=s(yse);Wlo=r(nat,"gptj"),nat.forEach(t),Hlo=r(vk," \u2014 "),EB=n(vk,"A",{href:!0});var sat=s(EB);Ulo=r(sat,"GPT2Tokenizer"),sat.forEach(t),Jlo=r(vk," or "),CB=n(vk,"A",{href:!0});var lat=s(CB);Ylo=r(lat,"GPT2TokenizerFast"),lat.forEach(t),Klo=r(vk," (GPT-J model)"),vk.forEach(t),Zlo=i(S),ss=n(S,"LI",{});var Fk=s(ss);xse=n(Fk,"STRONG",{});var iat=s(xse);eio=r(iat,"groupvit"),iat.forEach(t),oio=r(Fk," \u2014 "),wB=n(Fk,"A",{href:!0});var dat=s(wB);rio=r(dat,"CLIPTokenizer"),dat.forEach(t),tio=r(Fk," or "),AB=n(Fk,"A",{href:!0});var cat=s(AB);aio=r(cat,"CLIPTokenizerFast"),cat.forEach(t),nio=r(Fk," (GroupViT model)"),Fk.forEach(t),sio=i(S),ls=n(S,"LI",{});var Tk=s(ls);$se=n(Tk,"STRONG",{});var fat=s($se);lio=r(fat,"herbert"),fat.forEach(t),iio=r(Tk," \u2014 "),LB=n(Tk,"A",{href:!0});var mat=s(LB);dio=r(mat,"HerbertTokenizer"),mat.forEach(t),cio=r(Tk," or "),yB=n(Tk,"A",{href:!0});var gat=s(yB);fio=r(gat,"HerbertTokenizerFast"),gat.forEach(t),mio=r(Tk," (HerBERT model)"),Tk.forEach(t),gio=i(S),ah=n(S,"LI",{});var KLe=s(ah);kse=n(KLe,"STRONG",{});var hat=s(kse);hio=r(hat,"hubert"),hat.forEach(t),pio=r(KLe," \u2014 "),xB=n(KLe,"A",{href:!0});var pat=s(xB);_io=r(pat,"Wav2Vec2CTCTokenizer"),pat.forEach(t),uio=r(KLe," (Hubert model)"),KLe.forEach(t),bio=i(S),is=n(S,"LI",{});var Mk=s(is);Sse=n(Mk,"STRONG",{});var _at=s(Sse);vio=r(_at,"ibert"),_at.forEach(t),Fio=r(Mk," \u2014 "),$B=n(Mk,"A",{href:!0});var uat=s($B);Tio=r(uat,"RobertaTokenizer"),uat.forEach(t),Mio=r(Mk," or "),kB=n(Mk,"A",{href:!0});var bat=s(kB);Eio=r(bat,"RobertaTokenizerFast"),bat.forEach(t),Cio=r(Mk," (I-BERT model)"),Mk.forEach(t),wio=i(S),ds=n(S,"LI",{});var Ek=s(ds);Rse=n(Ek,"STRONG",{});var vat=s(Rse);Aio=r(vat,"layoutlm"),vat.forEach(t),Lio=r(Ek," \u2014 "),SB=n(Ek,"A",{href:!0});var Fat=s(SB);yio=r(Fat,"LayoutLMTokenizer"),Fat.forEach(t),xio=r(Ek," or "),RB=n(Ek,"A",{href:!0});var Tat=s(RB);$io=r(Tat,"LayoutLMTokenizerFast"),Tat.forEach(t),kio=r(Ek," (LayoutLM model)"),Ek.forEach(t),Sio=i(S),cs=n(S,"LI",{});var Ck=s(cs);Pse=n(Ck,"STRONG",{});var Mat=s(Pse);Rio=r(Mat,"layoutlmv2"),Mat.forEach(t),Pio=r(Ck," \u2014 "),PB=n(Ck,"A",{href:!0});var Eat=s(PB);Bio=r(Eat,"LayoutLMv2Tokenizer"),Eat.forEach(t),Iio=r(Ck," or "),BB=n(Ck,"A",{href:!0});var Cat=s(BB);Nio=r(Cat,"LayoutLMv2TokenizerFast"),Cat.forEach(t),qio=r(Ck," (LayoutLMv2 model)"),Ck.forEach(t),jio=i(S),fs=n(S,"LI",{});var wk=s(fs);Bse=n(wk,"STRONG",{});var wat=s(Bse);Dio=r(wat,"layoutlmv3"),wat.forEach(t),Gio=r(wk," \u2014 "),IB=n(wk,"A",{href:!0});var Aat=s(IB);Oio=r(Aat,"LayoutLMv3Tokenizer"),Aat.forEach(t),Vio=r(wk," or "),NB=n(wk,"A",{href:!0});var Lat=s(NB);Xio=r(Lat,"LayoutLMv3TokenizerFast"),Lat.forEach(t),zio=r(wk," (LayoutLMv3 model)"),wk.forEach(t),Qio=i(S),ms=n(S,"LI",{});var Ak=s(ms);Ise=n(Ak,"STRONG",{});var yat=s(Ise);Wio=r(yat,"layoutxlm"),yat.forEach(t),Hio=r(Ak," \u2014 "),qB=n(Ak,"A",{href:!0});var xat=s(qB);Uio=r(xat,"LayoutXLMTokenizer"),xat.forEach(t),Jio=r(Ak," or "),jB=n(Ak,"A",{href:!0});var $at=s(jB);Yio=r($at,"LayoutXLMTokenizerFast"),$at.forEach(t),Kio=r(Ak," (LayoutXLM model)"),Ak.forEach(t),Zio=i(S),gs=n(S,"LI",{});var Lk=s(gs);Nse=n(Lk,"STRONG",{});var kat=s(Nse);edo=r(kat,"led"),kat.forEach(t),odo=r(Lk," \u2014 "),DB=n(Lk,"A",{href:!0});var Sat=s(DB);rdo=r(Sat,"LEDTokenizer"),Sat.forEach(t),tdo=r(Lk," or "),GB=n(Lk,"A",{href:!0});var Rat=s(GB);ado=r(Rat,"LEDTokenizerFast"),Rat.forEach(t),ndo=r(Lk," (LED model)"),Lk.forEach(t),sdo=i(S),hs=n(S,"LI",{});var yk=s(hs);qse=n(yk,"STRONG",{});var Pat=s(qse);ldo=r(Pat,"longformer"),Pat.forEach(t),ido=r(yk," \u2014 "),OB=n(yk,"A",{href:!0});var Bat=s(OB);ddo=r(Bat,"LongformerTokenizer"),Bat.forEach(t),cdo=r(yk," or "),VB=n(yk,"A",{href:!0});var Iat=s(VB);fdo=r(Iat,"LongformerTokenizerFast"),Iat.forEach(t),mdo=r(yk," (Longformer model)"),yk.forEach(t),gdo=i(S),ps=n(S,"LI",{});var xk=s(ps);jse=n(xk,"STRONG",{});var Nat=s(jse);hdo=r(Nat,"longt5"),Nat.forEach(t),pdo=r(xk," \u2014 "),XB=n(xk,"A",{href:!0});var qat=s(XB);_do=r(qat,"T5Tokenizer"),qat.forEach(t),udo=r(xk," or "),zB=n(xk,"A",{href:!0});var jat=s(zB);bdo=r(jat,"T5TokenizerFast"),jat.forEach(t),vdo=r(xk," (LongT5 model)"),xk.forEach(t),Fdo=i(S),nh=n(S,"LI",{});var ZLe=s(nh);Dse=n(ZLe,"STRONG",{});var Dat=s(Dse);Tdo=r(Dat,"luke"),Dat.forEach(t),Mdo=r(ZLe," \u2014 "),QB=n(ZLe,"A",{href:!0});var Gat=s(QB);Edo=r(Gat,"LukeTokenizer"),Gat.forEach(t),Cdo=r(ZLe," (LUKE model)"),ZLe.forEach(t),wdo=i(S),_s=n(S,"LI",{});var $k=s(_s);Gse=n($k,"STRONG",{});var Oat=s(Gse);Ado=r(Oat,"lxmert"),Oat.forEach(t),Ldo=r($k," \u2014 "),WB=n($k,"A",{href:!0});var Vat=s(WB);ydo=r(Vat,"LxmertTokenizer"),Vat.forEach(t),xdo=r($k," or "),HB=n($k,"A",{href:!0});var Xat=s(HB);$do=r(Xat,"LxmertTokenizerFast"),Xat.forEach(t),kdo=r($k," (LXMERT model)"),$k.forEach(t),Sdo=i(S),sh=n(S,"LI",{});var eye=s(sh);Ose=n(eye,"STRONG",{});var zat=s(Ose);Rdo=r(zat,"m2m_100"),zat.forEach(t),Pdo=r(eye," \u2014 "),UB=n(eye,"A",{href:!0});var Qat=s(UB);Bdo=r(Qat,"M2M100Tokenizer"),Qat.forEach(t),Ido=r(eye," (M2M100 model)"),eye.forEach(t),Ndo=i(S),lh=n(S,"LI",{});var oye=s(lh);Vse=n(oye,"STRONG",{});var Wat=s(Vse);qdo=r(Wat,"marian"),Wat.forEach(t),jdo=r(oye," \u2014 "),JB=n(oye,"A",{href:!0});var Hat=s(JB);Ddo=r(Hat,"MarianTokenizer"),Hat.forEach(t),Gdo=r(oye," (Marian model)"),oye.forEach(t),Odo=i(S),us=n(S,"LI",{});var kk=s(us);Xse=n(kk,"STRONG",{});var Uat=s(Xse);Vdo=r(Uat,"mbart"),Uat.forEach(t),Xdo=r(kk," \u2014 "),YB=n(kk,"A",{href:!0});var Jat=s(YB);zdo=r(Jat,"MBartTokenizer"),Jat.forEach(t),Qdo=r(kk," or "),KB=n(kk,"A",{href:!0});var Yat=s(KB);Wdo=r(Yat,"MBartTokenizerFast"),Yat.forEach(t),Hdo=r(kk," (mBART model)"),kk.forEach(t),Udo=i(S),bs=n(S,"LI",{});var Sk=s(bs);zse=n(Sk,"STRONG",{});var Kat=s(zse);Jdo=r(Kat,"mbart50"),Kat.forEach(t),Ydo=r(Sk," \u2014 "),ZB=n(Sk,"A",{href:!0});var Zat=s(ZB);Kdo=r(Zat,"MBart50Tokenizer"),Zat.forEach(t),Zdo=r(Sk," or "),eI=n(Sk,"A",{href:!0});var ent=s(eI);eco=r(ent,"MBart50TokenizerFast"),ent.forEach(t),oco=r(Sk," (mBART-50 model)"),Sk.forEach(t),rco=i(S),vs=n(S,"LI",{});var Rk=s(vs);Qse=n(Rk,"STRONG",{});var ont=s(Qse);tco=r(ont,"megatron-bert"),ont.forEach(t),aco=r(Rk," \u2014 "),oI=n(Rk,"A",{href:!0});var rnt=s(oI);nco=r(rnt,"BertTokenizer"),rnt.forEach(t),sco=r(Rk," or "),rI=n(Rk,"A",{href:!0});var tnt=s(rI);lco=r(tnt,"BertTokenizerFast"),tnt.forEach(t),ico=r(Rk," (Megatron-BERT model)"),Rk.forEach(t),dco=i(S),ih=n(S,"LI",{});var rye=s(ih);Wse=n(rye,"STRONG",{});var ant=s(Wse);cco=r(ant,"mluke"),ant.forEach(t),fco=r(rye," \u2014 "),tI=n(rye,"A",{href:!0});var nnt=s(tI);mco=r(nnt,"MLukeTokenizer"),nnt.forEach(t),gco=r(rye," (mLUKE model)"),rye.forEach(t),hco=i(S),Fs=n(S,"LI",{});var Pk=s(Fs);Hse=n(Pk,"STRONG",{});var snt=s(Hse);pco=r(snt,"mobilebert"),snt.forEach(t),_co=r(Pk," \u2014 "),aI=n(Pk,"A",{href:!0});var lnt=s(aI);uco=r(lnt,"MobileBertTokenizer"),lnt.forEach(t),bco=r(Pk," or "),nI=n(Pk,"A",{href:!0});var int=s(nI);vco=r(int,"MobileBertTokenizerFast"),int.forEach(t),Fco=r(Pk," (MobileBERT model)"),Pk.forEach(t),Tco=i(S),Ts=n(S,"LI",{});var Bk=s(Ts);Use=n(Bk,"STRONG",{});var dnt=s(Use);Mco=r(dnt,"mpnet"),dnt.forEach(t),Eco=r(Bk," \u2014 "),sI=n(Bk,"A",{href:!0});var cnt=s(sI);Cco=r(cnt,"MPNetTokenizer"),cnt.forEach(t),wco=r(Bk," or "),lI=n(Bk,"A",{href:!0});var fnt=s(lI);Aco=r(fnt,"MPNetTokenizerFast"),fnt.forEach(t),Lco=r(Bk," (MPNet model)"),Bk.forEach(t),yco=i(S),Ms=n(S,"LI",{});var Ik=s(Ms);Jse=n(Ik,"STRONG",{});var mnt=s(Jse);xco=r(mnt,"mt5"),mnt.forEach(t),$co=r(Ik," \u2014 "),iI=n(Ik,"A",{href:!0});var gnt=s(iI);kco=r(gnt,"MT5Tokenizer"),gnt.forEach(t),Sco=r(Ik," or "),dI=n(Ik,"A",{href:!0});var hnt=s(dI);Rco=r(hnt,"MT5TokenizerFast"),hnt.forEach(t),Pco=r(Ik," (MT5 model)"),Ik.forEach(t),Bco=i(S),Es=n(S,"LI",{});var Nk=s(Es);Yse=n(Nk,"STRONG",{});var pnt=s(Yse);Ico=r(pnt,"nezha"),pnt.forEach(t),Nco=r(Nk," \u2014 "),cI=n(Nk,"A",{href:!0});var _nt=s(cI);qco=r(_nt,"BertTokenizer"),_nt.forEach(t),jco=r(Nk," or "),fI=n(Nk,"A",{href:!0});var unt=s(fI);Dco=r(unt,"BertTokenizerFast"),unt.forEach(t),Gco=r(Nk," (Nezha model)"),Nk.forEach(t),Oco=i(S),Cs=n(S,"LI",{});var qk=s(Cs);Kse=n(qk,"STRONG",{});var bnt=s(Kse);Vco=r(bnt,"nystromformer"),bnt.forEach(t),Xco=r(qk," \u2014 "),mI=n(qk,"A",{href:!0});var vnt=s(mI);zco=r(vnt,"AlbertTokenizer"),vnt.forEach(t),Qco=r(qk," or "),gI=n(qk,"A",{href:!0});var Fnt=s(gI);Wco=r(Fnt,"AlbertTokenizerFast"),Fnt.forEach(t),Hco=r(qk," (Nystr\xF6mformer model)"),qk.forEach(t),Uco=i(S),ws=n(S,"LI",{});var jk=s(ws);Zse=n(jk,"STRONG",{});var Tnt=s(Zse);Jco=r(Tnt,"openai-gpt"),Tnt.forEach(t),Yco=r(jk," \u2014 "),hI=n(jk,"A",{href:!0});var Mnt=s(hI);Kco=r(Mnt,"OpenAIGPTTokenizer"),Mnt.forEach(t),Zco=r(jk," or "),pI=n(jk,"A",{href:!0});var Ent=s(pI);efo=r(Ent,"OpenAIGPTTokenizerFast"),Ent.forEach(t),ofo=r(jk," (OpenAI GPT model)"),jk.forEach(t),rfo=i(S),dh=n(S,"LI",{});var tye=s(dh);ele=n(tye,"STRONG",{});var Cnt=s(ele);tfo=r(Cnt,"opt"),Cnt.forEach(t),afo=r(tye," \u2014 "),_I=n(tye,"A",{href:!0});var wnt=s(_I);nfo=r(wnt,"GPT2Tokenizer"),wnt.forEach(t),sfo=r(tye," (OPT model)"),tye.forEach(t),lfo=i(S),As=n(S,"LI",{});var Dk=s(As);ole=n(Dk,"STRONG",{});var Ant=s(ole);ifo=r(Ant,"pegasus"),Ant.forEach(t),dfo=r(Dk," \u2014 "),uI=n(Dk,"A",{href:!0});var Lnt=s(uI);cfo=r(Lnt,"PegasusTokenizer"),Lnt.forEach(t),ffo=r(Dk," or "),bI=n(Dk,"A",{href:!0});var ynt=s(bI);mfo=r(ynt,"PegasusTokenizerFast"),ynt.forEach(t),gfo=r(Dk," (Pegasus model)"),Dk.forEach(t),hfo=i(S),ch=n(S,"LI",{});var aye=s(ch);rle=n(aye,"STRONG",{});var xnt=s(rle);pfo=r(xnt,"perceiver"),xnt.forEach(t),_fo=r(aye," \u2014 "),vI=n(aye,"A",{href:!0});var $nt=s(vI);ufo=r($nt,"PerceiverTokenizer"),$nt.forEach(t),bfo=r(aye," (Perceiver model)"),aye.forEach(t),vfo=i(S),fh=n(S,"LI",{});var nye=s(fh);tle=n(nye,"STRONG",{});var knt=s(tle);Ffo=r(knt,"phobert"),knt.forEach(t),Tfo=r(nye," \u2014 "),FI=n(nye,"A",{href:!0});var Snt=s(FI);Mfo=r(Snt,"PhobertTokenizer"),Snt.forEach(t),Efo=r(nye," (PhoBERT model)"),nye.forEach(t),Cfo=i(S),mh=n(S,"LI",{});var sye=s(mh);ale=n(sye,"STRONG",{});var Rnt=s(ale);wfo=r(Rnt,"plbart"),Rnt.forEach(t),Afo=r(sye," \u2014 "),TI=n(sye,"A",{href:!0});var Pnt=s(TI);Lfo=r(Pnt,"PLBartTokenizer"),Pnt.forEach(t),yfo=r(sye," (PLBart model)"),sye.forEach(t),xfo=i(S),gh=n(S,"LI",{});var lye=s(gh);nle=n(lye,"STRONG",{});var Bnt=s(nle);$fo=r(Bnt,"prophetnet"),Bnt.forEach(t),kfo=r(lye," \u2014 "),MI=n(lye,"A",{href:!0});var Int=s(MI);Sfo=r(Int,"ProphetNetTokenizer"),Int.forEach(t),Rfo=r(lye," (ProphetNet model)"),lye.forEach(t),Pfo=i(S),Ls=n(S,"LI",{});var Gk=s(Ls);sle=n(Gk,"STRONG",{});var Nnt=s(sle);Bfo=r(Nnt,"qdqbert"),Nnt.forEach(t),Ifo=r(Gk," \u2014 "),EI=n(Gk,"A",{href:!0});var qnt=s(EI);Nfo=r(qnt,"BertTokenizer"),qnt.forEach(t),qfo=r(Gk," or "),CI=n(Gk,"A",{href:!0});var jnt=s(CI);jfo=r(jnt,"BertTokenizerFast"),jnt.forEach(t),Dfo=r(Gk," (QDQBert model)"),Gk.forEach(t),Gfo=i(S),hh=n(S,"LI",{});var iye=s(hh);lle=n(iye,"STRONG",{});var Dnt=s(lle);Ofo=r(Dnt,"rag"),Dnt.forEach(t),Vfo=r(iye," \u2014 "),wI=n(iye,"A",{href:!0});var Gnt=s(wI);Xfo=r(Gnt,"RagTokenizer"),Gnt.forEach(t),zfo=r(iye," (RAG model)"),iye.forEach(t),Qfo=i(S),ys=n(S,"LI",{});var Ok=s(ys);ile=n(Ok,"STRONG",{});var Ont=s(ile);Wfo=r(Ont,"realm"),Ont.forEach(t),Hfo=r(Ok," \u2014 "),AI=n(Ok,"A",{href:!0});var Vnt=s(AI);Ufo=r(Vnt,"RealmTokenizer"),Vnt.forEach(t),Jfo=r(Ok," or "),LI=n(Ok,"A",{href:!0});var Xnt=s(LI);Yfo=r(Xnt,"RealmTokenizerFast"),Xnt.forEach(t),Kfo=r(Ok," (REALM model)"),Ok.forEach(t),Zfo=i(S),xs=n(S,"LI",{});var Vk=s(xs);dle=n(Vk,"STRONG",{});var znt=s(dle);emo=r(znt,"reformer"),znt.forEach(t),omo=r(Vk," \u2014 "),yI=n(Vk,"A",{href:!0});var Qnt=s(yI);rmo=r(Qnt,"ReformerTokenizer"),Qnt.forEach(t),tmo=r(Vk," or "),xI=n(Vk,"A",{href:!0});var Wnt=s(xI);amo=r(Wnt,"ReformerTokenizerFast"),Wnt.forEach(t),nmo=r(Vk," (Reformer model)"),Vk.forEach(t),smo=i(S),$s=n(S,"LI",{});var Xk=s($s);cle=n(Xk,"STRONG",{});var Hnt=s(cle);lmo=r(Hnt,"rembert"),Hnt.forEach(t),imo=r(Xk," \u2014 "),$I=n(Xk,"A",{href:!0});var Unt=s($I);dmo=r(Unt,"RemBertTokenizer"),Unt.forEach(t),cmo=r(Xk," or "),kI=n(Xk,"A",{href:!0});var Jnt=s(kI);fmo=r(Jnt,"RemBertTokenizerFast"),Jnt.forEach(t),mmo=r(Xk," (RemBERT model)"),Xk.forEach(t),gmo=i(S),ks=n(S,"LI",{});var zk=s(ks);fle=n(zk,"STRONG",{});var Ynt=s(fle);hmo=r(Ynt,"retribert"),Ynt.forEach(t),pmo=r(zk," \u2014 "),SI=n(zk,"A",{href:!0});var Knt=s(SI);_mo=r(Knt,"RetriBertTokenizer"),Knt.forEach(t),umo=r(zk," or "),RI=n(zk,"A",{href:!0});var Znt=s(RI);bmo=r(Znt,"RetriBertTokenizerFast"),Znt.forEach(t),vmo=r(zk," (RetriBERT model)"),zk.forEach(t),Fmo=i(S),Ss=n(S,"LI",{});var Qk=s(Ss);mle=n(Qk,"STRONG",{});var est=s(mle);Tmo=r(est,"roberta"),est.forEach(t),Mmo=r(Qk," \u2014 "),PI=n(Qk,"A",{href:!0});var ost=s(PI);Emo=r(ost,"RobertaTokenizer"),ost.forEach(t),Cmo=r(Qk," or "),BI=n(Qk,"A",{href:!0});var rst=s(BI);wmo=r(rst,"RobertaTokenizerFast"),rst.forEach(t),Amo=r(Qk," (RoBERTa model)"),Qk.forEach(t),Lmo=i(S),Rs=n(S,"LI",{});var Wk=s(Rs);gle=n(Wk,"STRONG",{});var tst=s(gle);ymo=r(tst,"roformer"),tst.forEach(t),xmo=r(Wk," \u2014 "),II=n(Wk,"A",{href:!0});var ast=s(II);$mo=r(ast,"RoFormerTokenizer"),ast.forEach(t),kmo=r(Wk," or "),NI=n(Wk,"A",{href:!0});var nst=s(NI);Smo=r(nst,"RoFormerTokenizerFast"),nst.forEach(t),Rmo=r(Wk," (RoFormer model)"),Wk.forEach(t),Pmo=i(S),ph=n(S,"LI",{});var dye=s(ph);hle=n(dye,"STRONG",{});var sst=s(hle);Bmo=r(sst,"speech_to_text"),sst.forEach(t),Imo=r(dye," \u2014 "),qI=n(dye,"A",{href:!0});var lst=s(qI);Nmo=r(lst,"Speech2TextTokenizer"),lst.forEach(t),qmo=r(dye," (Speech2Text model)"),dye.forEach(t),jmo=i(S),_h=n(S,"LI",{});var cye=s(_h);ple=n(cye,"STRONG",{});var ist=s(ple);Dmo=r(ist,"speech_to_text_2"),ist.forEach(t),Gmo=r(cye," \u2014 "),jI=n(cye,"A",{href:!0});var dst=s(jI);Omo=r(dst,"Speech2Text2Tokenizer"),dst.forEach(t),Vmo=r(cye," (Speech2Text2 model)"),cye.forEach(t),Xmo=i(S),Ps=n(S,"LI",{});var Hk=s(Ps);_le=n(Hk,"STRONG",{});var cst=s(_le);zmo=r(cst,"splinter"),cst.forEach(t),Qmo=r(Hk," \u2014 "),DI=n(Hk,"A",{href:!0});var fst=s(DI);Wmo=r(fst,"SplinterTokenizer"),fst.forEach(t),Hmo=r(Hk," or "),GI=n(Hk,"A",{href:!0});var mst=s(GI);Umo=r(mst,"SplinterTokenizerFast"),mst.forEach(t),Jmo=r(Hk," (Splinter model)"),Hk.forEach(t),Ymo=i(S),Bs=n(S,"LI",{});var Uk=s(Bs);ule=n(Uk,"STRONG",{});var gst=s(ule);Kmo=r(gst,"squeezebert"),gst.forEach(t),Zmo=r(Uk," \u2014 "),OI=n(Uk,"A",{href:!0});var hst=s(OI);ego=r(hst,"SqueezeBertTokenizer"),hst.forEach(t),ogo=r(Uk," or "),VI=n(Uk,"A",{href:!0});var pst=s(VI);rgo=r(pst,"SqueezeBertTokenizerFast"),pst.forEach(t),tgo=r(Uk," (SqueezeBERT model)"),Uk.forEach(t),ago=i(S),Is=n(S,"LI",{});var Jk=s(Is);ble=n(Jk,"STRONG",{});var _st=s(ble);ngo=r(_st,"t5"),_st.forEach(t),sgo=r(Jk," \u2014 "),XI=n(Jk,"A",{href:!0});var ust=s(XI);lgo=r(ust,"T5Tokenizer"),ust.forEach(t),igo=r(Jk," or "),zI=n(Jk,"A",{href:!0});var bst=s(zI);dgo=r(bst,"T5TokenizerFast"),bst.forEach(t),cgo=r(Jk," (T5 model)"),Jk.forEach(t),fgo=i(S),uh=n(S,"LI",{});var fye=s(uh);vle=n(fye,"STRONG",{});var vst=s(vle);mgo=r(vst,"tapas"),vst.forEach(t),ggo=r(fye," \u2014 "),QI=n(fye,"A",{href:!0});var Fst=s(QI);hgo=r(Fst,"TapasTokenizer"),Fst.forEach(t),pgo=r(fye," (TAPAS model)"),fye.forEach(t),_go=i(S),bh=n(S,"LI",{});var mye=s(bh);Fle=n(mye,"STRONG",{});var Tst=s(Fle);ugo=r(Tst,"tapex"),Tst.forEach(t),bgo=r(mye," \u2014 "),WI=n(mye,"A",{href:!0});var Mst=s(WI);vgo=r(Mst,"TapexTokenizer"),Mst.forEach(t),Fgo=r(mye," (TAPEX model)"),mye.forEach(t),Tgo=i(S),vh=n(S,"LI",{});var gye=s(vh);Tle=n(gye,"STRONG",{});var Est=s(Tle);Mgo=r(Est,"transfo-xl"),Est.forEach(t),Ego=r(gye," \u2014 "),HI=n(gye,"A",{href:!0});var Cst=s(HI);Cgo=r(Cst,"TransfoXLTokenizer"),Cst.forEach(t),wgo=r(gye," (Transformer-XL model)"),gye.forEach(t),Ago=i(S),Ns=n(S,"LI",{});var Yk=s(Ns);Mle=n(Yk,"STRONG",{});var wst=s(Mle);Lgo=r(wst,"vilt"),wst.forEach(t),ygo=r(Yk," \u2014 "),UI=n(Yk,"A",{href:!0});var Ast=s(UI);xgo=r(Ast,"BertTokenizer"),Ast.forEach(t),$go=r(Yk," or "),JI=n(Yk,"A",{href:!0});var Lst=s(JI);kgo=r(Lst,"BertTokenizerFast"),Lst.forEach(t),Sgo=r(Yk," (ViLT model)"),Yk.forEach(t),Rgo=i(S),qs=n(S,"LI",{});var Kk=s(qs);Ele=n(Kk,"STRONG",{});var yst=s(Ele);Pgo=r(yst,"visual_bert"),yst.forEach(t),Bgo=r(Kk," \u2014 "),YI=n(Kk,"A",{href:!0});var xst=s(YI);Igo=r(xst,"BertTokenizer"),xst.forEach(t),Ngo=r(Kk," or "),KI=n(Kk,"A",{href:!0});var $st=s(KI);qgo=r($st,"BertTokenizerFast"),$st.forEach(t),jgo=r(Kk," (VisualBERT model)"),Kk.forEach(t),Dgo=i(S),Fh=n(S,"LI",{});var hye=s(Fh);Cle=n(hye,"STRONG",{});var kst=s(Cle);Ggo=r(kst,"wav2vec2"),kst.forEach(t),Ogo=r(hye," \u2014 "),ZI=n(hye,"A",{href:!0});var Sst=s(ZI);Vgo=r(Sst,"Wav2Vec2CTCTokenizer"),Sst.forEach(t),Xgo=r(hye," (Wav2Vec2 model)"),hye.forEach(t),zgo=i(S),Th=n(S,"LI",{});var pye=s(Th);wle=n(pye,"STRONG",{});var Rst=s(wle);Qgo=r(Rst,"wav2vec2-conformer"),Rst.forEach(t),Wgo=r(pye," \u2014 "),eN=n(pye,"A",{href:!0});var Pst=s(eN);Hgo=r(Pst,"Wav2Vec2CTCTokenizer"),Pst.forEach(t),Ugo=r(pye," (Wav2Vec2-Conformer model)"),pye.forEach(t),Jgo=i(S),Mh=n(S,"LI",{});var _ye=s(Mh);Ale=n(_ye,"STRONG",{});var Bst=s(Ale);Ygo=r(Bst,"wav2vec2_phoneme"),Bst.forEach(t),Kgo=r(_ye," \u2014 "),oN=n(_ye,"A",{href:!0});var Ist=s(oN);Zgo=r(Ist,"Wav2Vec2PhonemeCTCTokenizer"),Ist.forEach(t),eho=r(_ye," (Wav2Vec2Phoneme model)"),_ye.forEach(t),oho=i(S),js=n(S,"LI",{});var Zk=s(js);Lle=n(Zk,"STRONG",{});var Nst=s(Lle);rho=r(Nst,"xglm"),Nst.forEach(t),tho=r(Zk," \u2014 "),rN=n(Zk,"A",{href:!0});var qst=s(rN);aho=r(qst,"XGLMTokenizer"),qst.forEach(t),nho=r(Zk," or "),tN=n(Zk,"A",{href:!0});var jst=s(tN);sho=r(jst,"XGLMTokenizerFast"),jst.forEach(t),lho=r(Zk," (XGLM model)"),Zk.forEach(t),iho=i(S),Eh=n(S,"LI",{});var uye=s(Eh);yle=n(uye,"STRONG",{});var Dst=s(yle);dho=r(Dst,"xlm"),Dst.forEach(t),cho=r(uye," \u2014 "),aN=n(uye,"A",{href:!0});var Gst=s(aN);fho=r(Gst,"XLMTokenizer"),Gst.forEach(t),mho=r(uye," (XLM model)"),uye.forEach(t),gho=i(S),Ch=n(S,"LI",{});var bye=s(Ch);xle=n(bye,"STRONG",{});var Ost=s(xle);hho=r(Ost,"xlm-prophetnet"),Ost.forEach(t),pho=r(bye," \u2014 "),nN=n(bye,"A",{href:!0});var Vst=s(nN);_ho=r(Vst,"XLMProphetNetTokenizer"),Vst.forEach(t),uho=r(bye," (XLM-ProphetNet model)"),bye.forEach(t),bho=i(S),Ds=n(S,"LI",{});var eS=s(Ds);$le=n(eS,"STRONG",{});var Xst=s($le);vho=r(Xst,"xlm-roberta"),Xst.forEach(t),Fho=r(eS," \u2014 "),sN=n(eS,"A",{href:!0});var zst=s(sN);Tho=r(zst,"XLMRobertaTokenizer"),zst.forEach(t),Mho=r(eS," or "),lN=n(eS,"A",{href:!0});var Qst=s(lN);Eho=r(Qst,"XLMRobertaTokenizerFast"),Qst.forEach(t),Cho=r(eS," (XLM-RoBERTa model)"),eS.forEach(t),who=i(S),Gs=n(S,"LI",{});var oS=s(Gs);kle=n(oS,"STRONG",{});var Wst=s(kle);Aho=r(Wst,"xlm-roberta-xl"),Wst.forEach(t),Lho=r(oS," \u2014 "),iN=n(oS,"A",{href:!0});var Hst=s(iN);yho=r(Hst,"RobertaTokenizer"),Hst.forEach(t),xho=r(oS," or "),dN=n(oS,"A",{href:!0});var Ust=s(dN);$ho=r(Ust,"RobertaTokenizerFast"),Ust.forEach(t),kho=r(oS," (XLM-RoBERTa-XL model)"),oS.forEach(t),Sho=i(S),Os=n(S,"LI",{});var rS=s(Os);Sle=n(rS,"STRONG",{});var Jst=s(Sle);Rho=r(Jst,"xlnet"),Jst.forEach(t),Pho=r(rS," \u2014 "),cN=n(rS,"A",{href:!0});var Yst=s(cN);Bho=r(Yst,"XLNetTokenizer"),Yst.forEach(t),Iho=r(rS," or "),fN=n(rS,"A",{href:!0});var Kst=s(fN);Nho=r(Kst,"XLNetTokenizerFast"),Kst.forEach(t),qho=r(rS," (XLNet model)"),rS.forEach(t),jho=i(S),Vs=n(S,"LI",{});var tS=s(Vs);Rle=n(tS,"STRONG",{});var Zst=s(Rle);Dho=r(Zst,"yoso"),Zst.forEach(t),Gho=r(tS," \u2014 "),mN=n(tS,"A",{href:!0});var elt=s(mN);Oho=r(elt,"AlbertTokenizer"),elt.forEach(t),Vho=r(tS," or "),gN=n(tS,"A",{href:!0});var olt=s(gN);Xho=r(olt,"AlbertTokenizerFast"),olt.forEach(t),zho=r(tS," (YOSO model)"),tS.forEach(t),S.forEach(t),Qho=i(Us),T(wh.$$.fragment,Us),Us.forEach(t),Who=i(Hs),Ah=n(Hs,"DIV",{class:!0});var _Xe=s(Ah);T(WL.$$.fragment,_Xe),Hho=i(_Xe),Ple=n(_Xe,"P",{});var rlt=s(Ple);Uho=r(rlt,"Register a new tokenizer in this mapping."),rlt.forEach(t),_Xe.forEach(t),Hs.forEach(t),pOe=i(f),Ri=n(f,"H2",{class:!0});var uXe=s(Ri);Lh=n(uXe,"A",{id:!0,class:!0,href:!0});var tlt=s(Lh);Ble=n(tlt,"SPAN",{});var alt=s(Ble);T(HL.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),Jho=i(uXe),Ile=n(uXe,"SPAN",{});var nlt=s(Ile);Yho=r(nlt,"AutoFeatureExtractor"),nlt.forEach(t),uXe.forEach(t),_Oe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(UL.$$.fragment,Js),Kho=i(Js),JL=n(Js,"P",{});var bXe=s(JL);Zho=r(bXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hN=n(bXe,"A",{href:!0});var slt=s(hN);epo=r(slt,"AutoFeatureExtractor.from_pretrained()"),slt.forEach(t),opo=r(bXe," class method."),bXe.forEach(t),rpo=i(Js),YL=n(Js,"P",{});var vXe=s(YL);tpo=r(vXe,"This class cannot be instantiated directly using "),Nle=n(vXe,"CODE",{});var llt=s(Nle);apo=r(llt,"__init__()"),llt.forEach(t),npo=r(vXe," (throws an error)."),vXe.forEach(t),spo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(KL.$$.fragment,ra),lpo=i(ra),qle=n(ra,"P",{});var ilt=s(qle);ipo=r(ilt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ilt.forEach(t),dpo=i(ra),Sa=n(ra,"P",{});var BA=s(Sa);cpo=r(BA,"The feature extractor class to instantiate is selected based on the "),jle=n(BA,"CODE",{});var dlt=s(jle);fpo=r(dlt,"model_type"),dlt.forEach(t),mpo=r(BA,` property of the config object
(either passed as an argument or loaded from `),Dle=n(BA,"CODE",{});var clt=s(Dle);gpo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),hpo=r(BA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gle=n(BA,"CODE",{});var flt=s(Gle);ppo=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),_po=r(BA,":"),BA.forEach(t),upo=i(ra),Y=n(ra,"UL",{});var K=s(Y);yh=n(K,"LI",{});var vye=s(yh);Ole=n(vye,"STRONG",{});var mlt=s(Ole);bpo=r(mlt,"beit"),mlt.forEach(t),vpo=r(vye," \u2014 "),pN=n(vye,"A",{href:!0});var glt=s(pN);Fpo=r(glt,"BeitFeatureExtractor"),glt.forEach(t),Tpo=r(vye," (BEiT model)"),vye.forEach(t),Mpo=i(K),xh=n(K,"LI",{});var Fye=s(xh);Vle=n(Fye,"STRONG",{});var hlt=s(Vle);Epo=r(hlt,"clip"),hlt.forEach(t),Cpo=r(Fye," \u2014 "),_N=n(Fye,"A",{href:!0});var plt=s(_N);wpo=r(plt,"CLIPFeatureExtractor"),plt.forEach(t),Apo=r(Fye," (CLIP model)"),Fye.forEach(t),Lpo=i(K),$h=n(K,"LI",{});var Tye=s($h);Xle=n(Tye,"STRONG",{});var _lt=s(Xle);ypo=r(_lt,"convnext"),_lt.forEach(t),xpo=r(Tye," \u2014 "),uN=n(Tye,"A",{href:!0});var ult=s(uN);$po=r(ult,"ConvNextFeatureExtractor"),ult.forEach(t),kpo=r(Tye," (ConvNeXT model)"),Tye.forEach(t),Spo=i(K),kh=n(K,"LI",{});var Mye=s(kh);zle=n(Mye,"STRONG",{});var blt=s(zle);Rpo=r(blt,"cvt"),blt.forEach(t),Ppo=r(Mye," \u2014 "),bN=n(Mye,"A",{href:!0});var vlt=s(bN);Bpo=r(vlt,"ConvNextFeatureExtractor"),vlt.forEach(t),Ipo=r(Mye," (CvT model)"),Mye.forEach(t),Npo=i(K),Sh=n(K,"LI",{});var Eye=s(Sh);Qle=n(Eye,"STRONG",{});var Flt=s(Qle);qpo=r(Flt,"data2vec-audio"),Flt.forEach(t),jpo=r(Eye," \u2014 "),vN=n(Eye,"A",{href:!0});var Tlt=s(vN);Dpo=r(Tlt,"Wav2Vec2FeatureExtractor"),Tlt.forEach(t),Gpo=r(Eye," (Data2VecAudio model)"),Eye.forEach(t),Opo=i(K),Rh=n(K,"LI",{});var Cye=s(Rh);Wle=n(Cye,"STRONG",{});var Mlt=s(Wle);Vpo=r(Mlt,"data2vec-vision"),Mlt.forEach(t),Xpo=r(Cye," \u2014 "),FN=n(Cye,"A",{href:!0});var Elt=s(FN);zpo=r(Elt,"BeitFeatureExtractor"),Elt.forEach(t),Qpo=r(Cye," (Data2VecVision model)"),Cye.forEach(t),Wpo=i(K),Ph=n(K,"LI",{});var wye=s(Ph);Hle=n(wye,"STRONG",{});var Clt=s(Hle);Hpo=r(Clt,"deit"),Clt.forEach(t),Upo=r(wye," \u2014 "),TN=n(wye,"A",{href:!0});var wlt=s(TN);Jpo=r(wlt,"DeiTFeatureExtractor"),wlt.forEach(t),Ypo=r(wye," (DeiT model)"),wye.forEach(t),Kpo=i(K),Bh=n(K,"LI",{});var Aye=s(Bh);Ule=n(Aye,"STRONG",{});var Alt=s(Ule);Zpo=r(Alt,"detr"),Alt.forEach(t),e_o=r(Aye," \u2014 "),MN=n(Aye,"A",{href:!0});var Llt=s(MN);o_o=r(Llt,"DetrFeatureExtractor"),Llt.forEach(t),r_o=r(Aye," (DETR model)"),Aye.forEach(t),t_o=i(K),Ih=n(K,"LI",{});var Lye=s(Ih);Jle=n(Lye,"STRONG",{});var ylt=s(Jle);a_o=r(ylt,"dpt"),ylt.forEach(t),n_o=r(Lye," \u2014 "),EN=n(Lye,"A",{href:!0});var xlt=s(EN);s_o=r(xlt,"DPTFeatureExtractor"),xlt.forEach(t),l_o=r(Lye," (DPT model)"),Lye.forEach(t),i_o=i(K),Nh=n(K,"LI",{});var yye=s(Nh);Yle=n(yye,"STRONG",{});var $lt=s(Yle);d_o=r($lt,"flava"),$lt.forEach(t),c_o=r(yye," \u2014 "),CN=n(yye,"A",{href:!0});var klt=s(CN);f_o=r(klt,"FlavaFeatureExtractor"),klt.forEach(t),m_o=r(yye," (FLAVA model)"),yye.forEach(t),g_o=i(K),qh=n(K,"LI",{});var xye=s(qh);Kle=n(xye,"STRONG",{});var Slt=s(Kle);h_o=r(Slt,"glpn"),Slt.forEach(t),p_o=r(xye," \u2014 "),wN=n(xye,"A",{href:!0});var Rlt=s(wN);__o=r(Rlt,"GLPNFeatureExtractor"),Rlt.forEach(t),u_o=r(xye," (GLPN model)"),xye.forEach(t),b_o=i(K),jh=n(K,"LI",{});var $ye=s(jh);Zle=n($ye,"STRONG",{});var Plt=s(Zle);v_o=r(Plt,"groupvit"),Plt.forEach(t),F_o=r($ye," \u2014 "),AN=n($ye,"A",{href:!0});var Blt=s(AN);T_o=r(Blt,"CLIPFeatureExtractor"),Blt.forEach(t),M_o=r($ye," (GroupViT model)"),$ye.forEach(t),E_o=i(K),Dh=n(K,"LI",{});var kye=s(Dh);eie=n(kye,"STRONG",{});var Ilt=s(eie);C_o=r(Ilt,"hubert"),Ilt.forEach(t),w_o=r(kye," \u2014 "),LN=n(kye,"A",{href:!0});var Nlt=s(LN);A_o=r(Nlt,"Wav2Vec2FeatureExtractor"),Nlt.forEach(t),L_o=r(kye," (Hubert model)"),kye.forEach(t),y_o=i(K),Gh=n(K,"LI",{});var Sye=s(Gh);oie=n(Sye,"STRONG",{});var qlt=s(oie);x_o=r(qlt,"imagegpt"),qlt.forEach(t),$_o=r(Sye," \u2014 "),yN=n(Sye,"A",{href:!0});var jlt=s(yN);k_o=r(jlt,"ImageGPTFeatureExtractor"),jlt.forEach(t),S_o=r(Sye," (ImageGPT model)"),Sye.forEach(t),R_o=i(K),Oh=n(K,"LI",{});var Rye=s(Oh);rie=n(Rye,"STRONG",{});var Dlt=s(rie);P_o=r(Dlt,"layoutlmv2"),Dlt.forEach(t),B_o=r(Rye," \u2014 "),xN=n(Rye,"A",{href:!0});var Glt=s(xN);I_o=r(Glt,"LayoutLMv2FeatureExtractor"),Glt.forEach(t),N_o=r(Rye," (LayoutLMv2 model)"),Rye.forEach(t),q_o=i(K),Vh=n(K,"LI",{});var Pye=s(Vh);tie=n(Pye,"STRONG",{});var Olt=s(tie);j_o=r(Olt,"layoutlmv3"),Olt.forEach(t),D_o=r(Pye," \u2014 "),$N=n(Pye,"A",{href:!0});var Vlt=s($N);G_o=r(Vlt,"LayoutLMv3FeatureExtractor"),Vlt.forEach(t),O_o=r(Pye," (LayoutLMv3 model)"),Pye.forEach(t),V_o=i(K),Xh=n(K,"LI",{});var Bye=s(Xh);aie=n(Bye,"STRONG",{});var Xlt=s(aie);X_o=r(Xlt,"levit"),Xlt.forEach(t),z_o=r(Bye," \u2014 "),kN=n(Bye,"A",{href:!0});var zlt=s(kN);Q_o=r(zlt,"LevitFeatureExtractor"),zlt.forEach(t),W_o=r(Bye," (LeViT model)"),Bye.forEach(t),H_o=i(K),zh=n(K,"LI",{});var Iye=s(zh);nie=n(Iye,"STRONG",{});var Qlt=s(nie);U_o=r(Qlt,"maskformer"),Qlt.forEach(t),J_o=r(Iye," \u2014 "),SN=n(Iye,"A",{href:!0});var Wlt=s(SN);Y_o=r(Wlt,"MaskFormerFeatureExtractor"),Wlt.forEach(t),K_o=r(Iye," (MaskFormer model)"),Iye.forEach(t),Z_o=i(K),Qh=n(K,"LI",{});var Nye=s(Qh);sie=n(Nye,"STRONG",{});var Hlt=s(sie);euo=r(Hlt,"mctct"),Hlt.forEach(t),ouo=r(Nye," \u2014 "),RN=n(Nye,"A",{href:!0});var Ult=s(RN);ruo=r(Ult,"MCTCTFeatureExtractor"),Ult.forEach(t),tuo=r(Nye," (M-CTC-T model)"),Nye.forEach(t),auo=i(K),Wh=n(K,"LI",{});var qye=s(Wh);lie=n(qye,"STRONG",{});var Jlt=s(lie);nuo=r(Jlt,"perceiver"),Jlt.forEach(t),suo=r(qye," \u2014 "),PN=n(qye,"A",{href:!0});var Ylt=s(PN);luo=r(Ylt,"PerceiverFeatureExtractor"),Ylt.forEach(t),iuo=r(qye," (Perceiver model)"),qye.forEach(t),duo=i(K),Hh=n(K,"LI",{});var jye=s(Hh);iie=n(jye,"STRONG",{});var Klt=s(iie);cuo=r(Klt,"poolformer"),Klt.forEach(t),fuo=r(jye," \u2014 "),BN=n(jye,"A",{href:!0});var Zlt=s(BN);muo=r(Zlt,"PoolFormerFeatureExtractor"),Zlt.forEach(t),guo=r(jye," (PoolFormer model)"),jye.forEach(t),huo=i(K),Uh=n(K,"LI",{});var Dye=s(Uh);die=n(Dye,"STRONG",{});var eit=s(die);puo=r(eit,"regnet"),eit.forEach(t),_uo=r(Dye," \u2014 "),IN=n(Dye,"A",{href:!0});var oit=s(IN);uuo=r(oit,"ConvNextFeatureExtractor"),oit.forEach(t),buo=r(Dye," (RegNet model)"),Dye.forEach(t),vuo=i(K),Jh=n(K,"LI",{});var Gye=s(Jh);cie=n(Gye,"STRONG",{});var rit=s(cie);Fuo=r(rit,"resnet"),rit.forEach(t),Tuo=r(Gye," \u2014 "),NN=n(Gye,"A",{href:!0});var tit=s(NN);Muo=r(tit,"ConvNextFeatureExtractor"),tit.forEach(t),Euo=r(Gye," (ResNet model)"),Gye.forEach(t),Cuo=i(K),Yh=n(K,"LI",{});var Oye=s(Yh);fie=n(Oye,"STRONG",{});var ait=s(fie);wuo=r(ait,"segformer"),ait.forEach(t),Auo=r(Oye," \u2014 "),qN=n(Oye,"A",{href:!0});var nit=s(qN);Luo=r(nit,"SegformerFeatureExtractor"),nit.forEach(t),yuo=r(Oye," (SegFormer model)"),Oye.forEach(t),xuo=i(K),Kh=n(K,"LI",{});var Vye=s(Kh);mie=n(Vye,"STRONG",{});var sit=s(mie);$uo=r(sit,"speech_to_text"),sit.forEach(t),kuo=r(Vye," \u2014 "),jN=n(Vye,"A",{href:!0});var lit=s(jN);Suo=r(lit,"Speech2TextFeatureExtractor"),lit.forEach(t),Ruo=r(Vye," (Speech2Text model)"),Vye.forEach(t),Puo=i(K),Zh=n(K,"LI",{});var Xye=s(Zh);gie=n(Xye,"STRONG",{});var iit=s(gie);Buo=r(iit,"swin"),iit.forEach(t),Iuo=r(Xye," \u2014 "),DN=n(Xye,"A",{href:!0});var dit=s(DN);Nuo=r(dit,"ViTFeatureExtractor"),dit.forEach(t),quo=r(Xye," (Swin Transformer model)"),Xye.forEach(t),juo=i(K),ep=n(K,"LI",{});var zye=s(ep);hie=n(zye,"STRONG",{});var cit=s(hie);Duo=r(cit,"van"),cit.forEach(t),Guo=r(zye," \u2014 "),GN=n(zye,"A",{href:!0});var fit=s(GN);Ouo=r(fit,"ConvNextFeatureExtractor"),fit.forEach(t),Vuo=r(zye," (VAN model)"),zye.forEach(t),Xuo=i(K),op=n(K,"LI",{});var Qye=s(op);pie=n(Qye,"STRONG",{});var mit=s(pie);zuo=r(mit,"vilt"),mit.forEach(t),Quo=r(Qye," \u2014 "),ON=n(Qye,"A",{href:!0});var git=s(ON);Wuo=r(git,"ViltFeatureExtractor"),git.forEach(t),Huo=r(Qye," (ViLT model)"),Qye.forEach(t),Uuo=i(K),rp=n(K,"LI",{});var Wye=s(rp);_ie=n(Wye,"STRONG",{});var hit=s(_ie);Juo=r(hit,"vit"),hit.forEach(t),Yuo=r(Wye," \u2014 "),VN=n(Wye,"A",{href:!0});var pit=s(VN);Kuo=r(pit,"ViTFeatureExtractor"),pit.forEach(t),Zuo=r(Wye," (ViT model)"),Wye.forEach(t),e1o=i(K),tp=n(K,"LI",{});var Hye=s(tp);uie=n(Hye,"STRONG",{});var _it=s(uie);o1o=r(_it,"vit_mae"),_it.forEach(t),r1o=r(Hye," \u2014 "),XN=n(Hye,"A",{href:!0});var uit=s(XN);t1o=r(uit,"ViTFeatureExtractor"),uit.forEach(t),a1o=r(Hye," (ViTMAE model)"),Hye.forEach(t),n1o=i(K),ap=n(K,"LI",{});var Uye=s(ap);bie=n(Uye,"STRONG",{});var bit=s(bie);s1o=r(bit,"wav2vec2"),bit.forEach(t),l1o=r(Uye," \u2014 "),zN=n(Uye,"A",{href:!0});var vit=s(zN);i1o=r(vit,"Wav2Vec2FeatureExtractor"),vit.forEach(t),d1o=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),c1o=i(K),np=n(K,"LI",{});var Jye=s(np);vie=n(Jye,"STRONG",{});var Fit=s(vie);f1o=r(Fit,"wav2vec2-conformer"),Fit.forEach(t),m1o=r(Jye," \u2014 "),QN=n(Jye,"A",{href:!0});var Tit=s(QN);g1o=r(Tit,"Wav2Vec2FeatureExtractor"),Tit.forEach(t),h1o=r(Jye," (Wav2Vec2-Conformer model)"),Jye.forEach(t),p1o=i(K),sp=n(K,"LI",{});var Yye=s(sp);Fie=n(Yye,"STRONG",{});var Mit=s(Fie);_1o=r(Mit,"yolos"),Mit.forEach(t),u1o=r(Yye," \u2014 "),WN=n(Yye,"A",{href:!0});var Eit=s(WN);b1o=r(Eit,"YolosFeatureExtractor"),Eit.forEach(t),v1o=r(Yye," (YOLOS model)"),Yye.forEach(t),K.forEach(t),F1o=i(ra),T(lp.$$.fragment,ra),T1o=i(ra),T(ip.$$.fragment,ra),ra.forEach(t),M1o=i(Js),dp=n(Js,"DIV",{class:!0});var FXe=s(dp);T(ZL.$$.fragment,FXe),E1o=i(FXe),Tie=n(FXe,"P",{});var Cit=s(Tie);C1o=r(Cit,"Register a new feature extractor for this class."),Cit.forEach(t),FXe.forEach(t),Js.forEach(t),uOe=i(f),Pi=n(f,"H2",{class:!0});var TXe=s(Pi);cp=n(TXe,"A",{id:!0,class:!0,href:!0});var wit=s(cp);Mie=n(wit,"SPAN",{});var Ait=s(Mie);T(ey.$$.fragment,Ait),Ait.forEach(t),wit.forEach(t),w1o=i(TXe),Eie=n(TXe,"SPAN",{});var Lit=s(Eie);A1o=r(Lit,"AutoProcessor"),Lit.forEach(t),TXe.forEach(t),bOe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(oy.$$.fragment,Ys),L1o=i(Ys),ry=n(Ys,"P",{});var MXe=s(ry);y1o=r(MXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HN=n(MXe,"A",{href:!0});var yit=s(HN);x1o=r(yit,"AutoProcessor.from_pretrained()"),yit.forEach(t),$1o=r(MXe," class method."),MXe.forEach(t),k1o=i(Ys),ty=n(Ys,"P",{});var EXe=s(ty);S1o=r(EXe,"This class cannot be instantiated directly using "),Cie=n(EXe,"CODE",{});var xit=s(Cie);R1o=r(xit,"__init__()"),xit.forEach(t),P1o=r(EXe," (throws an error)."),EXe.forEach(t),B1o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(ay.$$.fragment,ta),I1o=i(ta),wie=n(ta,"P",{});var $it=s(wie);N1o=r($it,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$it.forEach(t),q1o=i(ta),Bi=n(ta,"P",{});var $oe=s(Bi);j1o=r($oe,"The processor class to instantiate is selected based on the "),Aie=n($oe,"CODE",{});var kit=s(Aie);D1o=r(kit,"model_type"),kit.forEach(t),G1o=r($oe,` property of the config object (either
passed as an argument or loaded from `),Lie=n($oe,"CODE",{});var Sit=s(Lie);O1o=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),V1o=r($oe," if possible):"),$oe.forEach(t),X1o=i(ta),he=n(ta,"UL",{});var ue=s(he);fp=n(ue,"LI",{});var Kye=s(fp);yie=n(Kye,"STRONG",{});var Rit=s(yie);z1o=r(Rit,"clip"),Rit.forEach(t),Q1o=r(Kye," \u2014 "),UN=n(Kye,"A",{href:!0});var Pit=s(UN);W1o=r(Pit,"CLIPProcessor"),Pit.forEach(t),H1o=r(Kye," (CLIP model)"),Kye.forEach(t),U1o=i(ue),mp=n(ue,"LI",{});var Zye=s(mp);xie=n(Zye,"STRONG",{});var Bit=s(xie);J1o=r(Bit,"flava"),Bit.forEach(t),Y1o=r(Zye," \u2014 "),$ie=n(Zye,"CODE",{});var Iit=s($ie);K1o=r(Iit,"FLAVAProcessor"),Iit.forEach(t),Z1o=r(Zye," (FLAVA model)"),Zye.forEach(t),e3o=i(ue),gp=n(ue,"LI",{});var e8e=s(gp);kie=n(e8e,"STRONG",{});var Nit=s(kie);o3o=r(Nit,"groupvit"),Nit.forEach(t),r3o=r(e8e," \u2014 "),JN=n(e8e,"A",{href:!0});var qit=s(JN);t3o=r(qit,"CLIPProcessor"),qit.forEach(t),a3o=r(e8e," (GroupViT model)"),e8e.forEach(t),n3o=i(ue),hp=n(ue,"LI",{});var o8e=s(hp);Sie=n(o8e,"STRONG",{});var jit=s(Sie);s3o=r(jit,"layoutlmv2"),jit.forEach(t),l3o=r(o8e," \u2014 "),YN=n(o8e,"A",{href:!0});var Dit=s(YN);i3o=r(Dit,"LayoutLMv2Processor"),Dit.forEach(t),d3o=r(o8e," (LayoutLMv2 model)"),o8e.forEach(t),c3o=i(ue),pp=n(ue,"LI",{});var r8e=s(pp);Rie=n(r8e,"STRONG",{});var Git=s(Rie);f3o=r(Git,"layoutlmv3"),Git.forEach(t),m3o=r(r8e," \u2014 "),KN=n(r8e,"A",{href:!0});var Oit=s(KN);g3o=r(Oit,"LayoutLMv3Processor"),Oit.forEach(t),h3o=r(r8e," (LayoutLMv3 model)"),r8e.forEach(t),p3o=i(ue),_p=n(ue,"LI",{});var t8e=s(_p);Pie=n(t8e,"STRONG",{});var Vit=s(Pie);_3o=r(Vit,"layoutxlm"),Vit.forEach(t),u3o=r(t8e," \u2014 "),ZN=n(t8e,"A",{href:!0});var Xit=s(ZN);b3o=r(Xit,"LayoutXLMProcessor"),Xit.forEach(t),v3o=r(t8e," (LayoutXLM model)"),t8e.forEach(t),F3o=i(ue),up=n(ue,"LI",{});var a8e=s(up);Bie=n(a8e,"STRONG",{});var zit=s(Bie);T3o=r(zit,"sew"),zit.forEach(t),M3o=r(a8e," \u2014 "),eq=n(a8e,"A",{href:!0});var Qit=s(eq);E3o=r(Qit,"Wav2Vec2Processor"),Qit.forEach(t),C3o=r(a8e," (SEW model)"),a8e.forEach(t),w3o=i(ue),bp=n(ue,"LI",{});var n8e=s(bp);Iie=n(n8e,"STRONG",{});var Wit=s(Iie);A3o=r(Wit,"sew-d"),Wit.forEach(t),L3o=r(n8e," \u2014 "),oq=n(n8e,"A",{href:!0});var Hit=s(oq);y3o=r(Hit,"Wav2Vec2Processor"),Hit.forEach(t),x3o=r(n8e," (SEW-D model)"),n8e.forEach(t),$3o=i(ue),vp=n(ue,"LI",{});var s8e=s(vp);Nie=n(s8e,"STRONG",{});var Uit=s(Nie);k3o=r(Uit,"speech_to_text"),Uit.forEach(t),S3o=r(s8e," \u2014 "),rq=n(s8e,"A",{href:!0});var Jit=s(rq);R3o=r(Jit,"Speech2TextProcessor"),Jit.forEach(t),P3o=r(s8e," (Speech2Text model)"),s8e.forEach(t),B3o=i(ue),Fp=n(ue,"LI",{});var l8e=s(Fp);qie=n(l8e,"STRONG",{});var Yit=s(qie);I3o=r(Yit,"speech_to_text_2"),Yit.forEach(t),N3o=r(l8e," \u2014 "),tq=n(l8e,"A",{href:!0});var Kit=s(tq);q3o=r(Kit,"Speech2Text2Processor"),Kit.forEach(t),j3o=r(l8e," (Speech2Text2 model)"),l8e.forEach(t),D3o=i(ue),Tp=n(ue,"LI",{});var i8e=s(Tp);jie=n(i8e,"STRONG",{});var Zit=s(jie);G3o=r(Zit,"trocr"),Zit.forEach(t),O3o=r(i8e," \u2014 "),aq=n(i8e,"A",{href:!0});var edt=s(aq);V3o=r(edt,"TrOCRProcessor"),edt.forEach(t),X3o=r(i8e," (TrOCR model)"),i8e.forEach(t),z3o=i(ue),Mp=n(ue,"LI",{});var d8e=s(Mp);Die=n(d8e,"STRONG",{});var odt=s(Die);Q3o=r(odt,"unispeech"),odt.forEach(t),W3o=r(d8e," \u2014 "),nq=n(d8e,"A",{href:!0});var rdt=s(nq);H3o=r(rdt,"Wav2Vec2Processor"),rdt.forEach(t),U3o=r(d8e," (UniSpeech model)"),d8e.forEach(t),J3o=i(ue),Ep=n(ue,"LI",{});var c8e=s(Ep);Gie=n(c8e,"STRONG",{});var tdt=s(Gie);Y3o=r(tdt,"unispeech-sat"),tdt.forEach(t),K3o=r(c8e," \u2014 "),sq=n(c8e,"A",{href:!0});var adt=s(sq);Z3o=r(adt,"Wav2Vec2Processor"),adt.forEach(t),e2o=r(c8e," (UniSpeechSat model)"),c8e.forEach(t),o2o=i(ue),Cp=n(ue,"LI",{});var f8e=s(Cp);Oie=n(f8e,"STRONG",{});var ndt=s(Oie);r2o=r(ndt,"vilt"),ndt.forEach(t),t2o=r(f8e," \u2014 "),lq=n(f8e,"A",{href:!0});var sdt=s(lq);a2o=r(sdt,"ViltProcessor"),sdt.forEach(t),n2o=r(f8e," (ViLT model)"),f8e.forEach(t),s2o=i(ue),wp=n(ue,"LI",{});var m8e=s(wp);Vie=n(m8e,"STRONG",{});var ldt=s(Vie);l2o=r(ldt,"vision-text-dual-encoder"),ldt.forEach(t),i2o=r(m8e," \u2014 "),iq=n(m8e,"A",{href:!0});var idt=s(iq);d2o=r(idt,"VisionTextDualEncoderProcessor"),idt.forEach(t),c2o=r(m8e," (VisionTextDualEncoder model)"),m8e.forEach(t),f2o=i(ue),Ap=n(ue,"LI",{});var g8e=s(Ap);Xie=n(g8e,"STRONG",{});var ddt=s(Xie);m2o=r(ddt,"wav2vec2"),ddt.forEach(t),g2o=r(g8e," \u2014 "),dq=n(g8e,"A",{href:!0});var cdt=s(dq);h2o=r(cdt,"Wav2Vec2Processor"),cdt.forEach(t),p2o=r(g8e," (Wav2Vec2 model)"),g8e.forEach(t),_2o=i(ue),Lp=n(ue,"LI",{});var h8e=s(Lp);zie=n(h8e,"STRONG",{});var fdt=s(zie);u2o=r(fdt,"wav2vec2-conformer"),fdt.forEach(t),b2o=r(h8e," \u2014 "),cq=n(h8e,"A",{href:!0});var mdt=s(cq);v2o=r(mdt,"Wav2Vec2Processor"),mdt.forEach(t),F2o=r(h8e," (Wav2Vec2-Conformer model)"),h8e.forEach(t),T2o=i(ue),yp=n(ue,"LI",{});var p8e=s(yp);Qie=n(p8e,"STRONG",{});var gdt=s(Qie);M2o=r(gdt,"wavlm"),gdt.forEach(t),E2o=r(p8e," \u2014 "),fq=n(p8e,"A",{href:!0});var hdt=s(fq);C2o=r(hdt,"Wav2Vec2Processor"),hdt.forEach(t),w2o=r(p8e," (WavLM model)"),p8e.forEach(t),ue.forEach(t),A2o=i(ta),T(xp.$$.fragment,ta),L2o=i(ta),T($p.$$.fragment,ta),ta.forEach(t),y2o=i(Ys),kp=n(Ys,"DIV",{class:!0});var CXe=s(kp);T(ny.$$.fragment,CXe),x2o=i(CXe),Wie=n(CXe,"P",{});var pdt=s(Wie);$2o=r(pdt,"Register a new processor for this class."),pdt.forEach(t),CXe.forEach(t),Ys.forEach(t),vOe=i(f),Ii=n(f,"H2",{class:!0});var wXe=s(Ii);Sp=n(wXe,"A",{id:!0,class:!0,href:!0});var _dt=s(Sp);Hie=n(_dt,"SPAN",{});var udt=s(Hie);T(sy.$$.fragment,udt),udt.forEach(t),_dt.forEach(t),k2o=i(wXe),Uie=n(wXe,"SPAN",{});var bdt=s(Uie);S2o=r(bdt,"AutoModel"),bdt.forEach(t),wXe.forEach(t),FOe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(ly.$$.fragment,Ks),R2o=i(Ks),Ni=n(Ks,"P",{});var koe=s(Ni);P2o=r(koe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mq=n(koe,"A",{href:!0});var vdt=s(mq);B2o=r(vdt,"from_pretrained()"),vdt.forEach(t),I2o=r(koe," class method or the "),gq=n(koe,"A",{href:!0});var Fdt=s(gq);N2o=r(Fdt,"from_config()"),Fdt.forEach(t),q2o=r(koe,` class
method.`),koe.forEach(t),j2o=i(Ks),iy=n(Ks,"P",{});var AXe=s(iy);D2o=r(AXe,"This class cannot be instantiated directly using "),Jie=n(AXe,"CODE",{});var Tdt=s(Jie);G2o=r(Tdt,"__init__()"),Tdt.forEach(t),O2o=r(AXe," (throws an error)."),AXe.forEach(t),V2o=i(Ks),nt=n(Ks,"DIV",{class:!0});var IA=s(nt);T(dy.$$.fragment,IA),X2o=i(IA),Yie=n(IA,"P",{});var Mdt=s(Yie);z2o=r(Mdt,"Instantiates one of the base model classes of the library from a configuration."),Mdt.forEach(t),Q2o=i(IA),qi=n(IA,"P",{});var Soe=s(qi);W2o=r(Soe,`Note:
Loading a model from its configuration file does `),Kie=n(Soe,"STRONG",{});var Edt=s(Kie);H2o=r(Edt,"not"),Edt.forEach(t),U2o=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=n(Soe,"A",{href:!0});var Cdt=s(hq);J2o=r(Cdt,"from_pretrained()"),Cdt.forEach(t),Y2o=r(Soe," to load the model weights."),Soe.forEach(t),K2o=i(IA),T(Rp.$$.fragment,IA),IA.forEach(t),Z2o=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(cy.$$.fragment,aa),ebo=i(aa),Zie=n(aa,"P",{});var wdt=s(Zie);obo=r(wdt,"Instantiate one of the base model classes of the library from a pretrained model."),wdt.forEach(t),rbo=i(aa),Ra=n(aa,"P",{});var NA=s(Ra);tbo=r(NA,"The model class to instantiate is selected based on the "),ede=n(NA,"CODE",{});var Adt=s(ede);abo=r(Adt,"model_type"),Adt.forEach(t),nbo=r(NA,` property of the config object (either
passed as an argument or loaded from `),ode=n(NA,"CODE",{});var Ldt=s(ode);sbo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),lbo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(NA,"CODE",{});var ydt=s(rde);ibo=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),dbo=r(NA,":"),NA.forEach(t),cbo=i(aa),y=n(aa,"UL",{});var $=s(y);Pp=n($,"LI",{});var _8e=s(Pp);tde=n(_8e,"STRONG",{});var xdt=s(tde);fbo=r(xdt,"albert"),xdt.forEach(t),mbo=r(_8e," \u2014 "),pq=n(_8e,"A",{href:!0});var $dt=s(pq);gbo=r($dt,"AlbertModel"),$dt.forEach(t),hbo=r(_8e," (ALBERT model)"),_8e.forEach(t),pbo=i($),Bp=n($,"LI",{});var u8e=s(Bp);ade=n(u8e,"STRONG",{});var kdt=s(ade);_bo=r(kdt,"bart"),kdt.forEach(t),ubo=r(u8e," \u2014 "),_q=n(u8e,"A",{href:!0});var Sdt=s(_q);bbo=r(Sdt,"BartModel"),Sdt.forEach(t),vbo=r(u8e," (BART model)"),u8e.forEach(t),Fbo=i($),Ip=n($,"LI",{});var b8e=s(Ip);nde=n(b8e,"STRONG",{});var Rdt=s(nde);Tbo=r(Rdt,"beit"),Rdt.forEach(t),Mbo=r(b8e," \u2014 "),uq=n(b8e,"A",{href:!0});var Pdt=s(uq);Ebo=r(Pdt,"BeitModel"),Pdt.forEach(t),Cbo=r(b8e," (BEiT model)"),b8e.forEach(t),wbo=i($),Np=n($,"LI",{});var v8e=s(Np);sde=n(v8e,"STRONG",{});var Bdt=s(sde);Abo=r(Bdt,"bert"),Bdt.forEach(t),Lbo=r(v8e," \u2014 "),bq=n(v8e,"A",{href:!0});var Idt=s(bq);ybo=r(Idt,"BertModel"),Idt.forEach(t),xbo=r(v8e," (BERT model)"),v8e.forEach(t),$bo=i($),qp=n($,"LI",{});var F8e=s(qp);lde=n(F8e,"STRONG",{});var Ndt=s(lde);kbo=r(Ndt,"bert-generation"),Ndt.forEach(t),Sbo=r(F8e," \u2014 "),vq=n(F8e,"A",{href:!0});var qdt=s(vq);Rbo=r(qdt,"BertGenerationEncoder"),qdt.forEach(t),Pbo=r(F8e," (Bert Generation model)"),F8e.forEach(t),Bbo=i($),jp=n($,"LI",{});var T8e=s(jp);ide=n(T8e,"STRONG",{});var jdt=s(ide);Ibo=r(jdt,"big_bird"),jdt.forEach(t),Nbo=r(T8e," \u2014 "),Fq=n(T8e,"A",{href:!0});var Ddt=s(Fq);qbo=r(Ddt,"BigBirdModel"),Ddt.forEach(t),jbo=r(T8e," (BigBird model)"),T8e.forEach(t),Dbo=i($),Dp=n($,"LI",{});var M8e=s(Dp);dde=n(M8e,"STRONG",{});var Gdt=s(dde);Gbo=r(Gdt,"bigbird_pegasus"),Gdt.forEach(t),Obo=r(M8e," \u2014 "),Tq=n(M8e,"A",{href:!0});var Odt=s(Tq);Vbo=r(Odt,"BigBirdPegasusModel"),Odt.forEach(t),Xbo=r(M8e," (BigBird-Pegasus model)"),M8e.forEach(t),zbo=i($),Gp=n($,"LI",{});var E8e=s(Gp);cde=n(E8e,"STRONG",{});var Vdt=s(cde);Qbo=r(Vdt,"blenderbot"),Vdt.forEach(t),Wbo=r(E8e," \u2014 "),Mq=n(E8e,"A",{href:!0});var Xdt=s(Mq);Hbo=r(Xdt,"BlenderbotModel"),Xdt.forEach(t),Ubo=r(E8e," (Blenderbot model)"),E8e.forEach(t),Jbo=i($),Op=n($,"LI",{});var C8e=s(Op);fde=n(C8e,"STRONG",{});var zdt=s(fde);Ybo=r(zdt,"blenderbot-small"),zdt.forEach(t),Kbo=r(C8e," \u2014 "),Eq=n(C8e,"A",{href:!0});var Qdt=s(Eq);Zbo=r(Qdt,"BlenderbotSmallModel"),Qdt.forEach(t),evo=r(C8e," (BlenderbotSmall model)"),C8e.forEach(t),ovo=i($),Vp=n($,"LI",{});var w8e=s(Vp);mde=n(w8e,"STRONG",{});var Wdt=s(mde);rvo=r(Wdt,"bloom"),Wdt.forEach(t),tvo=r(w8e," \u2014 "),Cq=n(w8e,"A",{href:!0});var Hdt=s(Cq);avo=r(Hdt,"BloomModel"),Hdt.forEach(t),nvo=r(w8e," (BLOOM model)"),w8e.forEach(t),svo=i($),Xp=n($,"LI",{});var A8e=s(Xp);gde=n(A8e,"STRONG",{});var Udt=s(gde);lvo=r(Udt,"camembert"),Udt.forEach(t),ivo=r(A8e," \u2014 "),wq=n(A8e,"A",{href:!0});var Jdt=s(wq);dvo=r(Jdt,"CamembertModel"),Jdt.forEach(t),cvo=r(A8e," (CamemBERT model)"),A8e.forEach(t),fvo=i($),zp=n($,"LI",{});var L8e=s(zp);hde=n(L8e,"STRONG",{});var Ydt=s(hde);mvo=r(Ydt,"canine"),Ydt.forEach(t),gvo=r(L8e," \u2014 "),Aq=n(L8e,"A",{href:!0});var Kdt=s(Aq);hvo=r(Kdt,"CanineModel"),Kdt.forEach(t),pvo=r(L8e," (CANINE model)"),L8e.forEach(t),_vo=i($),Qp=n($,"LI",{});var y8e=s(Qp);pde=n(y8e,"STRONG",{});var Zdt=s(pde);uvo=r(Zdt,"clip"),Zdt.forEach(t),bvo=r(y8e," \u2014 "),Lq=n(y8e,"A",{href:!0});var ect=s(Lq);vvo=r(ect,"CLIPModel"),ect.forEach(t),Fvo=r(y8e," (CLIP model)"),y8e.forEach(t),Tvo=i($),Wp=n($,"LI",{});var x8e=s(Wp);_de=n(x8e,"STRONG",{});var oct=s(_de);Mvo=r(oct,"convbert"),oct.forEach(t),Evo=r(x8e," \u2014 "),yq=n(x8e,"A",{href:!0});var rct=s(yq);Cvo=r(rct,"ConvBertModel"),rct.forEach(t),wvo=r(x8e," (ConvBERT model)"),x8e.forEach(t),Avo=i($),Hp=n($,"LI",{});var $8e=s(Hp);ude=n($8e,"STRONG",{});var tct=s(ude);Lvo=r(tct,"convnext"),tct.forEach(t),yvo=r($8e," \u2014 "),xq=n($8e,"A",{href:!0});var act=s(xq);xvo=r(act,"ConvNextModel"),act.forEach(t),$vo=r($8e," (ConvNeXT model)"),$8e.forEach(t),kvo=i($),Up=n($,"LI",{});var k8e=s(Up);bde=n(k8e,"STRONG",{});var nct=s(bde);Svo=r(nct,"ctrl"),nct.forEach(t),Rvo=r(k8e," \u2014 "),$q=n(k8e,"A",{href:!0});var sct=s($q);Pvo=r(sct,"CTRLModel"),sct.forEach(t),Bvo=r(k8e," (CTRL model)"),k8e.forEach(t),Ivo=i($),Jp=n($,"LI",{});var S8e=s(Jp);vde=n(S8e,"STRONG",{});var lct=s(vde);Nvo=r(lct,"cvt"),lct.forEach(t),qvo=r(S8e," \u2014 "),kq=n(S8e,"A",{href:!0});var ict=s(kq);jvo=r(ict,"CvtModel"),ict.forEach(t),Dvo=r(S8e," (CvT model)"),S8e.forEach(t),Gvo=i($),Yp=n($,"LI",{});var R8e=s(Yp);Fde=n(R8e,"STRONG",{});var dct=s(Fde);Ovo=r(dct,"data2vec-audio"),dct.forEach(t),Vvo=r(R8e," \u2014 "),Sq=n(R8e,"A",{href:!0});var cct=s(Sq);Xvo=r(cct,"Data2VecAudioModel"),cct.forEach(t),zvo=r(R8e," (Data2VecAudio model)"),R8e.forEach(t),Qvo=i($),Kp=n($,"LI",{});var P8e=s(Kp);Tde=n(P8e,"STRONG",{});var fct=s(Tde);Wvo=r(fct,"data2vec-text"),fct.forEach(t),Hvo=r(P8e," \u2014 "),Rq=n(P8e,"A",{href:!0});var mct=s(Rq);Uvo=r(mct,"Data2VecTextModel"),mct.forEach(t),Jvo=r(P8e," (Data2VecText model)"),P8e.forEach(t),Yvo=i($),Zp=n($,"LI",{});var B8e=s(Zp);Mde=n(B8e,"STRONG",{});var gct=s(Mde);Kvo=r(gct,"data2vec-vision"),gct.forEach(t),Zvo=r(B8e," \u2014 "),Pq=n(B8e,"A",{href:!0});var hct=s(Pq);eFo=r(hct,"Data2VecVisionModel"),hct.forEach(t),oFo=r(B8e," (Data2VecVision model)"),B8e.forEach(t),rFo=i($),e_=n($,"LI",{});var I8e=s(e_);Ede=n(I8e,"STRONG",{});var pct=s(Ede);tFo=r(pct,"deberta"),pct.forEach(t),aFo=r(I8e," \u2014 "),Bq=n(I8e,"A",{href:!0});var _ct=s(Bq);nFo=r(_ct,"DebertaModel"),_ct.forEach(t),sFo=r(I8e," (DeBERTa model)"),I8e.forEach(t),lFo=i($),o_=n($,"LI",{});var N8e=s(o_);Cde=n(N8e,"STRONG",{});var uct=s(Cde);iFo=r(uct,"deberta-v2"),uct.forEach(t),dFo=r(N8e," \u2014 "),Iq=n(N8e,"A",{href:!0});var bct=s(Iq);cFo=r(bct,"DebertaV2Model"),bct.forEach(t),fFo=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),mFo=i($),r_=n($,"LI",{});var q8e=s(r_);wde=n(q8e,"STRONG",{});var vct=s(wde);gFo=r(vct,"decision_transformer"),vct.forEach(t),hFo=r(q8e," \u2014 "),Nq=n(q8e,"A",{href:!0});var Fct=s(Nq);pFo=r(Fct,"DecisionTransformerModel"),Fct.forEach(t),_Fo=r(q8e," (Decision Transformer model)"),q8e.forEach(t),uFo=i($),t_=n($,"LI",{});var j8e=s(t_);Ade=n(j8e,"STRONG",{});var Tct=s(Ade);bFo=r(Tct,"deit"),Tct.forEach(t),vFo=r(j8e," \u2014 "),qq=n(j8e,"A",{href:!0});var Mct=s(qq);FFo=r(Mct,"DeiTModel"),Mct.forEach(t),TFo=r(j8e," (DeiT model)"),j8e.forEach(t),MFo=i($),a_=n($,"LI",{});var D8e=s(a_);Lde=n(D8e,"STRONG",{});var Ect=s(Lde);EFo=r(Ect,"detr"),Ect.forEach(t),CFo=r(D8e," \u2014 "),jq=n(D8e,"A",{href:!0});var Cct=s(jq);wFo=r(Cct,"DetrModel"),Cct.forEach(t),AFo=r(D8e," (DETR model)"),D8e.forEach(t),LFo=i($),n_=n($,"LI",{});var G8e=s(n_);yde=n(G8e,"STRONG",{});var wct=s(yde);yFo=r(wct,"distilbert"),wct.forEach(t),xFo=r(G8e," \u2014 "),Dq=n(G8e,"A",{href:!0});var Act=s(Dq);$Fo=r(Act,"DistilBertModel"),Act.forEach(t),kFo=r(G8e," (DistilBERT model)"),G8e.forEach(t),SFo=i($),s_=n($,"LI",{});var O8e=s(s_);xde=n(O8e,"STRONG",{});var Lct=s(xde);RFo=r(Lct,"dpr"),Lct.forEach(t),PFo=r(O8e," \u2014 "),Gq=n(O8e,"A",{href:!0});var yct=s(Gq);BFo=r(yct,"DPRQuestionEncoder"),yct.forEach(t),IFo=r(O8e," (DPR model)"),O8e.forEach(t),NFo=i($),l_=n($,"LI",{});var V8e=s(l_);$de=n(V8e,"STRONG",{});var xct=s($de);qFo=r(xct,"dpt"),xct.forEach(t),jFo=r(V8e," \u2014 "),Oq=n(V8e,"A",{href:!0});var $ct=s(Oq);DFo=r($ct,"DPTModel"),$ct.forEach(t),GFo=r(V8e," (DPT model)"),V8e.forEach(t),OFo=i($),i_=n($,"LI",{});var X8e=s(i_);kde=n(X8e,"STRONG",{});var kct=s(kde);VFo=r(kct,"electra"),kct.forEach(t),XFo=r(X8e," \u2014 "),Vq=n(X8e,"A",{href:!0});var Sct=s(Vq);zFo=r(Sct,"ElectraModel"),Sct.forEach(t),QFo=r(X8e," (ELECTRA model)"),X8e.forEach(t),WFo=i($),d_=n($,"LI",{});var z8e=s(d_);Sde=n(z8e,"STRONG",{});var Rct=s(Sde);HFo=r(Rct,"flaubert"),Rct.forEach(t),UFo=r(z8e," \u2014 "),Xq=n(z8e,"A",{href:!0});var Pct=s(Xq);JFo=r(Pct,"FlaubertModel"),Pct.forEach(t),YFo=r(z8e," (FlauBERT model)"),z8e.forEach(t),KFo=i($),c_=n($,"LI",{});var Q8e=s(c_);Rde=n(Q8e,"STRONG",{});var Bct=s(Rde);ZFo=r(Bct,"flava"),Bct.forEach(t),eTo=r(Q8e," \u2014 "),zq=n(Q8e,"A",{href:!0});var Ict=s(zq);oTo=r(Ict,"FlavaModel"),Ict.forEach(t),rTo=r(Q8e," (FLAVA model)"),Q8e.forEach(t),tTo=i($),f_=n($,"LI",{});var W8e=s(f_);Pde=n(W8e,"STRONG",{});var Nct=s(Pde);aTo=r(Nct,"fnet"),Nct.forEach(t),nTo=r(W8e," \u2014 "),Qq=n(W8e,"A",{href:!0});var qct=s(Qq);sTo=r(qct,"FNetModel"),qct.forEach(t),lTo=r(W8e," (FNet model)"),W8e.forEach(t),iTo=i($),m_=n($,"LI",{});var H8e=s(m_);Bde=n(H8e,"STRONG",{});var jct=s(Bde);dTo=r(jct,"fsmt"),jct.forEach(t),cTo=r(H8e," \u2014 "),Wq=n(H8e,"A",{href:!0});var Dct=s(Wq);fTo=r(Dct,"FSMTModel"),Dct.forEach(t),mTo=r(H8e," (FairSeq Machine-Translation model)"),H8e.forEach(t),gTo=i($),Xs=n($,"LI",{});var aS=s(Xs);Ide=n(aS,"STRONG",{});var Gct=s(Ide);hTo=r(Gct,"funnel"),Gct.forEach(t),pTo=r(aS," \u2014 "),Hq=n(aS,"A",{href:!0});var Oct=s(Hq);_To=r(Oct,"FunnelModel"),Oct.forEach(t),uTo=r(aS," or "),Uq=n(aS,"A",{href:!0});var Vct=s(Uq);bTo=r(Vct,"FunnelBaseModel"),Vct.forEach(t),vTo=r(aS," (Funnel Transformer model)"),aS.forEach(t),FTo=i($),g_=n($,"LI",{});var U8e=s(g_);Nde=n(U8e,"STRONG",{});var Xct=s(Nde);TTo=r(Xct,"glpn"),Xct.forEach(t),MTo=r(U8e," \u2014 "),Jq=n(U8e,"A",{href:!0});var zct=s(Jq);ETo=r(zct,"GLPNModel"),zct.forEach(t),CTo=r(U8e," (GLPN model)"),U8e.forEach(t),wTo=i($),h_=n($,"LI",{});var J8e=s(h_);qde=n(J8e,"STRONG",{});var Qct=s(qde);ATo=r(Qct,"gpt2"),Qct.forEach(t),LTo=r(J8e," \u2014 "),Yq=n(J8e,"A",{href:!0});var Wct=s(Yq);yTo=r(Wct,"GPT2Model"),Wct.forEach(t),xTo=r(J8e," (OpenAI GPT-2 model)"),J8e.forEach(t),$To=i($),p_=n($,"LI",{});var Y8e=s(p_);jde=n(Y8e,"STRONG",{});var Hct=s(jde);kTo=r(Hct,"gpt_neo"),Hct.forEach(t),STo=r(Y8e," \u2014 "),Kq=n(Y8e,"A",{href:!0});var Uct=s(Kq);RTo=r(Uct,"GPTNeoModel"),Uct.forEach(t),PTo=r(Y8e," (GPT Neo model)"),Y8e.forEach(t),BTo=i($),__=n($,"LI",{});var K8e=s(__);Dde=n(K8e,"STRONG",{});var Jct=s(Dde);ITo=r(Jct,"gpt_neox"),Jct.forEach(t),NTo=r(K8e," \u2014 "),Zq=n(K8e,"A",{href:!0});var Yct=s(Zq);qTo=r(Yct,"GPTNeoXModel"),Yct.forEach(t),jTo=r(K8e," (GPT NeoX model)"),K8e.forEach(t),DTo=i($),u_=n($,"LI",{});var Z8e=s(u_);Gde=n(Z8e,"STRONG",{});var Kct=s(Gde);GTo=r(Kct,"gptj"),Kct.forEach(t),OTo=r(Z8e," \u2014 "),ej=n(Z8e,"A",{href:!0});var Zct=s(ej);VTo=r(Zct,"GPTJModel"),Zct.forEach(t),XTo=r(Z8e," (GPT-J model)"),Z8e.forEach(t),zTo=i($),b_=n($,"LI",{});var e9e=s(b_);Ode=n(e9e,"STRONG",{});var eft=s(Ode);QTo=r(eft,"groupvit"),eft.forEach(t),WTo=r(e9e," \u2014 "),oj=n(e9e,"A",{href:!0});var oft=s(oj);HTo=r(oft,"GroupViTModel"),oft.forEach(t),UTo=r(e9e," (GroupViT model)"),e9e.forEach(t),JTo=i($),v_=n($,"LI",{});var o9e=s(v_);Vde=n(o9e,"STRONG",{});var rft=s(Vde);YTo=r(rft,"hubert"),rft.forEach(t),KTo=r(o9e," \u2014 "),rj=n(o9e,"A",{href:!0});var tft=s(rj);ZTo=r(tft,"HubertModel"),tft.forEach(t),e7o=r(o9e," (Hubert model)"),o9e.forEach(t),o7o=i($),F_=n($,"LI",{});var r9e=s(F_);Xde=n(r9e,"STRONG",{});var aft=s(Xde);r7o=r(aft,"ibert"),aft.forEach(t),t7o=r(r9e," \u2014 "),tj=n(r9e,"A",{href:!0});var nft=s(tj);a7o=r(nft,"IBertModel"),nft.forEach(t),n7o=r(r9e," (I-BERT model)"),r9e.forEach(t),s7o=i($),T_=n($,"LI",{});var t9e=s(T_);zde=n(t9e,"STRONG",{});var sft=s(zde);l7o=r(sft,"imagegpt"),sft.forEach(t),i7o=r(t9e," \u2014 "),aj=n(t9e,"A",{href:!0});var lft=s(aj);d7o=r(lft,"ImageGPTModel"),lft.forEach(t),c7o=r(t9e," (ImageGPT model)"),t9e.forEach(t),f7o=i($),M_=n($,"LI",{});var a9e=s(M_);Qde=n(a9e,"STRONG",{});var ift=s(Qde);m7o=r(ift,"layoutlm"),ift.forEach(t),g7o=r(a9e," \u2014 "),nj=n(a9e,"A",{href:!0});var dft=s(nj);h7o=r(dft,"LayoutLMModel"),dft.forEach(t),p7o=r(a9e," (LayoutLM model)"),a9e.forEach(t),_7o=i($),E_=n($,"LI",{});var n9e=s(E_);Wde=n(n9e,"STRONG",{});var cft=s(Wde);u7o=r(cft,"layoutlmv2"),cft.forEach(t),b7o=r(n9e," \u2014 "),sj=n(n9e,"A",{href:!0});var fft=s(sj);v7o=r(fft,"LayoutLMv2Model"),fft.forEach(t),F7o=r(n9e," (LayoutLMv2 model)"),n9e.forEach(t),T7o=i($),C_=n($,"LI",{});var s9e=s(C_);Hde=n(s9e,"STRONG",{});var mft=s(Hde);M7o=r(mft,"layoutlmv3"),mft.forEach(t),E7o=r(s9e," \u2014 "),lj=n(s9e,"A",{href:!0});var gft=s(lj);C7o=r(gft,"LayoutLMv3Model"),gft.forEach(t),w7o=r(s9e," (LayoutLMv3 model)"),s9e.forEach(t),A7o=i($),w_=n($,"LI",{});var l9e=s(w_);Ude=n(l9e,"STRONG",{});var hft=s(Ude);L7o=r(hft,"led"),hft.forEach(t),y7o=r(l9e," \u2014 "),ij=n(l9e,"A",{href:!0});var pft=s(ij);x7o=r(pft,"LEDModel"),pft.forEach(t),$7o=r(l9e," (LED model)"),l9e.forEach(t),k7o=i($),A_=n($,"LI",{});var i9e=s(A_);Jde=n(i9e,"STRONG",{});var _ft=s(Jde);S7o=r(_ft,"levit"),_ft.forEach(t),R7o=r(i9e," \u2014 "),dj=n(i9e,"A",{href:!0});var uft=s(dj);P7o=r(uft,"LevitModel"),uft.forEach(t),B7o=r(i9e," (LeViT model)"),i9e.forEach(t),I7o=i($),L_=n($,"LI",{});var d9e=s(L_);Yde=n(d9e,"STRONG",{});var bft=s(Yde);N7o=r(bft,"longformer"),bft.forEach(t),q7o=r(d9e," \u2014 "),cj=n(d9e,"A",{href:!0});var vft=s(cj);j7o=r(vft,"LongformerModel"),vft.forEach(t),D7o=r(d9e," (Longformer model)"),d9e.forEach(t),G7o=i($),y_=n($,"LI",{});var c9e=s(y_);Kde=n(c9e,"STRONG",{});var Fft=s(Kde);O7o=r(Fft,"longt5"),Fft.forEach(t),V7o=r(c9e," \u2014 "),fj=n(c9e,"A",{href:!0});var Tft=s(fj);X7o=r(Tft,"LongT5Model"),Tft.forEach(t),z7o=r(c9e," (LongT5 model)"),c9e.forEach(t),Q7o=i($),x_=n($,"LI",{});var f9e=s(x_);Zde=n(f9e,"STRONG",{});var Mft=s(Zde);W7o=r(Mft,"luke"),Mft.forEach(t),H7o=r(f9e," \u2014 "),mj=n(f9e,"A",{href:!0});var Eft=s(mj);U7o=r(Eft,"LukeModel"),Eft.forEach(t),J7o=r(f9e," (LUKE model)"),f9e.forEach(t),Y7o=i($),$_=n($,"LI",{});var m9e=s($_);ece=n(m9e,"STRONG",{});var Cft=s(ece);K7o=r(Cft,"lxmert"),Cft.forEach(t),Z7o=r(m9e," \u2014 "),gj=n(m9e,"A",{href:!0});var wft=s(gj);eMo=r(wft,"LxmertModel"),wft.forEach(t),oMo=r(m9e," (LXMERT model)"),m9e.forEach(t),rMo=i($),k_=n($,"LI",{});var g9e=s(k_);oce=n(g9e,"STRONG",{});var Aft=s(oce);tMo=r(Aft,"m2m_100"),Aft.forEach(t),aMo=r(g9e," \u2014 "),hj=n(g9e,"A",{href:!0});var Lft=s(hj);nMo=r(Lft,"M2M100Model"),Lft.forEach(t),sMo=r(g9e," (M2M100 model)"),g9e.forEach(t),lMo=i($),S_=n($,"LI",{});var h9e=s(S_);rce=n(h9e,"STRONG",{});var yft=s(rce);iMo=r(yft,"marian"),yft.forEach(t),dMo=r(h9e," \u2014 "),pj=n(h9e,"A",{href:!0});var xft=s(pj);cMo=r(xft,"MarianModel"),xft.forEach(t),fMo=r(h9e," (Marian model)"),h9e.forEach(t),mMo=i($),R_=n($,"LI",{});var p9e=s(R_);tce=n(p9e,"STRONG",{});var $ft=s(tce);gMo=r($ft,"maskformer"),$ft.forEach(t),hMo=r(p9e," \u2014 "),_j=n(p9e,"A",{href:!0});var kft=s(_j);pMo=r(kft,"MaskFormerModel"),kft.forEach(t),_Mo=r(p9e," (MaskFormer model)"),p9e.forEach(t),uMo=i($),P_=n($,"LI",{});var _9e=s(P_);ace=n(_9e,"STRONG",{});var Sft=s(ace);bMo=r(Sft,"mbart"),Sft.forEach(t),vMo=r(_9e," \u2014 "),uj=n(_9e,"A",{href:!0});var Rft=s(uj);FMo=r(Rft,"MBartModel"),Rft.forEach(t),TMo=r(_9e," (mBART model)"),_9e.forEach(t),MMo=i($),B_=n($,"LI",{});var u9e=s(B_);nce=n(u9e,"STRONG",{});var Pft=s(nce);EMo=r(Pft,"mctct"),Pft.forEach(t),CMo=r(u9e," \u2014 "),bj=n(u9e,"A",{href:!0});var Bft=s(bj);wMo=r(Bft,"MCTCTModel"),Bft.forEach(t),AMo=r(u9e," (M-CTC-T model)"),u9e.forEach(t),LMo=i($),I_=n($,"LI",{});var b9e=s(I_);sce=n(b9e,"STRONG",{});var Ift=s(sce);yMo=r(Ift,"megatron-bert"),Ift.forEach(t),xMo=r(b9e," \u2014 "),vj=n(b9e,"A",{href:!0});var Nft=s(vj);$Mo=r(Nft,"MegatronBertModel"),Nft.forEach(t),kMo=r(b9e," (Megatron-BERT model)"),b9e.forEach(t),SMo=i($),N_=n($,"LI",{});var v9e=s(N_);lce=n(v9e,"STRONG",{});var qft=s(lce);RMo=r(qft,"mobilebert"),qft.forEach(t),PMo=r(v9e," \u2014 "),Fj=n(v9e,"A",{href:!0});var jft=s(Fj);BMo=r(jft,"MobileBertModel"),jft.forEach(t),IMo=r(v9e," (MobileBERT model)"),v9e.forEach(t),NMo=i($),q_=n($,"LI",{});var F9e=s(q_);ice=n(F9e,"STRONG",{});var Dft=s(ice);qMo=r(Dft,"mpnet"),Dft.forEach(t),jMo=r(F9e," \u2014 "),Tj=n(F9e,"A",{href:!0});var Gft=s(Tj);DMo=r(Gft,"MPNetModel"),Gft.forEach(t),GMo=r(F9e," (MPNet model)"),F9e.forEach(t),OMo=i($),j_=n($,"LI",{});var T9e=s(j_);dce=n(T9e,"STRONG",{});var Oft=s(dce);VMo=r(Oft,"mt5"),Oft.forEach(t),XMo=r(T9e," \u2014 "),Mj=n(T9e,"A",{href:!0});var Vft=s(Mj);zMo=r(Vft,"MT5Model"),Vft.forEach(t),QMo=r(T9e," (MT5 model)"),T9e.forEach(t),WMo=i($),D_=n($,"LI",{});var M9e=s(D_);cce=n(M9e,"STRONG",{});var Xft=s(cce);HMo=r(Xft,"nezha"),Xft.forEach(t),UMo=r(M9e," \u2014 "),Ej=n(M9e,"A",{href:!0});var zft=s(Ej);JMo=r(zft,"NezhaModel"),zft.forEach(t),YMo=r(M9e," (Nezha model)"),M9e.forEach(t),KMo=i($),G_=n($,"LI",{});var E9e=s(G_);fce=n(E9e,"STRONG",{});var Qft=s(fce);ZMo=r(Qft,"nystromformer"),Qft.forEach(t),eEo=r(E9e," \u2014 "),Cj=n(E9e,"A",{href:!0});var Wft=s(Cj);oEo=r(Wft,"NystromformerModel"),Wft.forEach(t),rEo=r(E9e," (Nystr\xF6mformer model)"),E9e.forEach(t),tEo=i($),O_=n($,"LI",{});var C9e=s(O_);mce=n(C9e,"STRONG",{});var Hft=s(mce);aEo=r(Hft,"openai-gpt"),Hft.forEach(t),nEo=r(C9e," \u2014 "),wj=n(C9e,"A",{href:!0});var Uft=s(wj);sEo=r(Uft,"OpenAIGPTModel"),Uft.forEach(t),lEo=r(C9e," (OpenAI GPT model)"),C9e.forEach(t),iEo=i($),V_=n($,"LI",{});var w9e=s(V_);gce=n(w9e,"STRONG",{});var Jft=s(gce);dEo=r(Jft,"opt"),Jft.forEach(t),cEo=r(w9e," \u2014 "),Aj=n(w9e,"A",{href:!0});var Yft=s(Aj);fEo=r(Yft,"OPTModel"),Yft.forEach(t),mEo=r(w9e," (OPT model)"),w9e.forEach(t),gEo=i($),X_=n($,"LI",{});var A9e=s(X_);hce=n(A9e,"STRONG",{});var Kft=s(hce);hEo=r(Kft,"pegasus"),Kft.forEach(t),pEo=r(A9e," \u2014 "),Lj=n(A9e,"A",{href:!0});var Zft=s(Lj);_Eo=r(Zft,"PegasusModel"),Zft.forEach(t),uEo=r(A9e," (Pegasus model)"),A9e.forEach(t),bEo=i($),z_=n($,"LI",{});var L9e=s(z_);pce=n(L9e,"STRONG",{});var emt=s(pce);vEo=r(emt,"perceiver"),emt.forEach(t),FEo=r(L9e," \u2014 "),yj=n(L9e,"A",{href:!0});var omt=s(yj);TEo=r(omt,"PerceiverModel"),omt.forEach(t),MEo=r(L9e," (Perceiver model)"),L9e.forEach(t),EEo=i($),Q_=n($,"LI",{});var y9e=s(Q_);_ce=n(y9e,"STRONG",{});var rmt=s(_ce);CEo=r(rmt,"plbart"),rmt.forEach(t),wEo=r(y9e," \u2014 "),xj=n(y9e,"A",{href:!0});var tmt=s(xj);AEo=r(tmt,"PLBartModel"),tmt.forEach(t),LEo=r(y9e," (PLBart model)"),y9e.forEach(t),yEo=i($),W_=n($,"LI",{});var x9e=s(W_);uce=n(x9e,"STRONG",{});var amt=s(uce);xEo=r(amt,"poolformer"),amt.forEach(t),$Eo=r(x9e," \u2014 "),$j=n(x9e,"A",{href:!0});var nmt=s($j);kEo=r(nmt,"PoolFormerModel"),nmt.forEach(t),SEo=r(x9e," (PoolFormer model)"),x9e.forEach(t),REo=i($),H_=n($,"LI",{});var $9e=s(H_);bce=n($9e,"STRONG",{});var smt=s(bce);PEo=r(smt,"prophetnet"),smt.forEach(t),BEo=r($9e," \u2014 "),kj=n($9e,"A",{href:!0});var lmt=s(kj);IEo=r(lmt,"ProphetNetModel"),lmt.forEach(t),NEo=r($9e," (ProphetNet model)"),$9e.forEach(t),qEo=i($),U_=n($,"LI",{});var k9e=s(U_);vce=n(k9e,"STRONG",{});var imt=s(vce);jEo=r(imt,"qdqbert"),imt.forEach(t),DEo=r(k9e," \u2014 "),Sj=n(k9e,"A",{href:!0});var dmt=s(Sj);GEo=r(dmt,"QDQBertModel"),dmt.forEach(t),OEo=r(k9e," (QDQBert model)"),k9e.forEach(t),VEo=i($),J_=n($,"LI",{});var S9e=s(J_);Fce=n(S9e,"STRONG",{});var cmt=s(Fce);XEo=r(cmt,"reformer"),cmt.forEach(t),zEo=r(S9e," \u2014 "),Rj=n(S9e,"A",{href:!0});var fmt=s(Rj);QEo=r(fmt,"ReformerModel"),fmt.forEach(t),WEo=r(S9e," (Reformer model)"),S9e.forEach(t),HEo=i($),Y_=n($,"LI",{});var R9e=s(Y_);Tce=n(R9e,"STRONG",{});var mmt=s(Tce);UEo=r(mmt,"regnet"),mmt.forEach(t),JEo=r(R9e," \u2014 "),Pj=n(R9e,"A",{href:!0});var gmt=s(Pj);YEo=r(gmt,"RegNetModel"),gmt.forEach(t),KEo=r(R9e," (RegNet model)"),R9e.forEach(t),ZEo=i($),K_=n($,"LI",{});var P9e=s(K_);Mce=n(P9e,"STRONG",{});var hmt=s(Mce);e4o=r(hmt,"rembert"),hmt.forEach(t),o4o=r(P9e," \u2014 "),Bj=n(P9e,"A",{href:!0});var pmt=s(Bj);r4o=r(pmt,"RemBertModel"),pmt.forEach(t),t4o=r(P9e," (RemBERT model)"),P9e.forEach(t),a4o=i($),Z_=n($,"LI",{});var B9e=s(Z_);Ece=n(B9e,"STRONG",{});var _mt=s(Ece);n4o=r(_mt,"resnet"),_mt.forEach(t),s4o=r(B9e," \u2014 "),Ij=n(B9e,"A",{href:!0});var umt=s(Ij);l4o=r(umt,"ResNetModel"),umt.forEach(t),i4o=r(B9e," (ResNet model)"),B9e.forEach(t),d4o=i($),eu=n($,"LI",{});var I9e=s(eu);Cce=n(I9e,"STRONG",{});var bmt=s(Cce);c4o=r(bmt,"retribert"),bmt.forEach(t),f4o=r(I9e," \u2014 "),Nj=n(I9e,"A",{href:!0});var vmt=s(Nj);m4o=r(vmt,"RetriBertModel"),vmt.forEach(t),g4o=r(I9e," (RetriBERT model)"),I9e.forEach(t),h4o=i($),ou=n($,"LI",{});var N9e=s(ou);wce=n(N9e,"STRONG",{});var Fmt=s(wce);p4o=r(Fmt,"roberta"),Fmt.forEach(t),_4o=r(N9e," \u2014 "),qj=n(N9e,"A",{href:!0});var Tmt=s(qj);u4o=r(Tmt,"RobertaModel"),Tmt.forEach(t),b4o=r(N9e," (RoBERTa model)"),N9e.forEach(t),v4o=i($),ru=n($,"LI",{});var q9e=s(ru);Ace=n(q9e,"STRONG",{});var Mmt=s(Ace);F4o=r(Mmt,"roformer"),Mmt.forEach(t),T4o=r(q9e," \u2014 "),jj=n(q9e,"A",{href:!0});var Emt=s(jj);M4o=r(Emt,"RoFormerModel"),Emt.forEach(t),E4o=r(q9e," (RoFormer model)"),q9e.forEach(t),C4o=i($),tu=n($,"LI",{});var j9e=s(tu);Lce=n(j9e,"STRONG",{});var Cmt=s(Lce);w4o=r(Cmt,"segformer"),Cmt.forEach(t),A4o=r(j9e," \u2014 "),Dj=n(j9e,"A",{href:!0});var wmt=s(Dj);L4o=r(wmt,"SegformerModel"),wmt.forEach(t),y4o=r(j9e," (SegFormer model)"),j9e.forEach(t),x4o=i($),au=n($,"LI",{});var D9e=s(au);yce=n(D9e,"STRONG",{});var Amt=s(yce);$4o=r(Amt,"sew"),Amt.forEach(t),k4o=r(D9e," \u2014 "),Gj=n(D9e,"A",{href:!0});var Lmt=s(Gj);S4o=r(Lmt,"SEWModel"),Lmt.forEach(t),R4o=r(D9e," (SEW model)"),D9e.forEach(t),P4o=i($),nu=n($,"LI",{});var G9e=s(nu);xce=n(G9e,"STRONG",{});var ymt=s(xce);B4o=r(ymt,"sew-d"),ymt.forEach(t),I4o=r(G9e," \u2014 "),Oj=n(G9e,"A",{href:!0});var xmt=s(Oj);N4o=r(xmt,"SEWDModel"),xmt.forEach(t),q4o=r(G9e," (SEW-D model)"),G9e.forEach(t),j4o=i($),su=n($,"LI",{});var O9e=s(su);$ce=n(O9e,"STRONG",{});var $mt=s($ce);D4o=r($mt,"speech_to_text"),$mt.forEach(t),G4o=r(O9e," \u2014 "),Vj=n(O9e,"A",{href:!0});var kmt=s(Vj);O4o=r(kmt,"Speech2TextModel"),kmt.forEach(t),V4o=r(O9e," (Speech2Text model)"),O9e.forEach(t),X4o=i($),lu=n($,"LI",{});var V9e=s(lu);kce=n(V9e,"STRONG",{});var Smt=s(kce);z4o=r(Smt,"splinter"),Smt.forEach(t),Q4o=r(V9e," \u2014 "),Xj=n(V9e,"A",{href:!0});var Rmt=s(Xj);W4o=r(Rmt,"SplinterModel"),Rmt.forEach(t),H4o=r(V9e," (Splinter model)"),V9e.forEach(t),U4o=i($),iu=n($,"LI",{});var X9e=s(iu);Sce=n(X9e,"STRONG",{});var Pmt=s(Sce);J4o=r(Pmt,"squeezebert"),Pmt.forEach(t),Y4o=r(X9e," \u2014 "),zj=n(X9e,"A",{href:!0});var Bmt=s(zj);K4o=r(Bmt,"SqueezeBertModel"),Bmt.forEach(t),Z4o=r(X9e," (SqueezeBERT model)"),X9e.forEach(t),eCo=i($),du=n($,"LI",{});var z9e=s(du);Rce=n(z9e,"STRONG",{});var Imt=s(Rce);oCo=r(Imt,"swin"),Imt.forEach(t),rCo=r(z9e," \u2014 "),Qj=n(z9e,"A",{href:!0});var Nmt=s(Qj);tCo=r(Nmt,"SwinModel"),Nmt.forEach(t),aCo=r(z9e," (Swin Transformer model)"),z9e.forEach(t),nCo=i($),cu=n($,"LI",{});var Q9e=s(cu);Pce=n(Q9e,"STRONG",{});var qmt=s(Pce);sCo=r(qmt,"t5"),qmt.forEach(t),lCo=r(Q9e," \u2014 "),Wj=n(Q9e,"A",{href:!0});var jmt=s(Wj);iCo=r(jmt,"T5Model"),jmt.forEach(t),dCo=r(Q9e," (T5 model)"),Q9e.forEach(t),cCo=i($),fu=n($,"LI",{});var W9e=s(fu);Bce=n(W9e,"STRONG",{});var Dmt=s(Bce);fCo=r(Dmt,"tapas"),Dmt.forEach(t),mCo=r(W9e," \u2014 "),Hj=n(W9e,"A",{href:!0});var Gmt=s(Hj);gCo=r(Gmt,"TapasModel"),Gmt.forEach(t),hCo=r(W9e," (TAPAS model)"),W9e.forEach(t),pCo=i($),mu=n($,"LI",{});var H9e=s(mu);Ice=n(H9e,"STRONG",{});var Omt=s(Ice);_Co=r(Omt,"trajectory_transformer"),Omt.forEach(t),uCo=r(H9e," \u2014 "),Uj=n(H9e,"A",{href:!0});var Vmt=s(Uj);bCo=r(Vmt,"TrajectoryTransformerModel"),Vmt.forEach(t),vCo=r(H9e," (Trajectory Transformer model)"),H9e.forEach(t),FCo=i($),gu=n($,"LI",{});var U9e=s(gu);Nce=n(U9e,"STRONG",{});var Xmt=s(Nce);TCo=r(Xmt,"transfo-xl"),Xmt.forEach(t),MCo=r(U9e," \u2014 "),Jj=n(U9e,"A",{href:!0});var zmt=s(Jj);ECo=r(zmt,"TransfoXLModel"),zmt.forEach(t),CCo=r(U9e," (Transformer-XL model)"),U9e.forEach(t),wCo=i($),hu=n($,"LI",{});var J9e=s(hu);qce=n(J9e,"STRONG",{});var Qmt=s(qce);ACo=r(Qmt,"unispeech"),Qmt.forEach(t),LCo=r(J9e," \u2014 "),Yj=n(J9e,"A",{href:!0});var Wmt=s(Yj);yCo=r(Wmt,"UniSpeechModel"),Wmt.forEach(t),xCo=r(J9e," (UniSpeech model)"),J9e.forEach(t),$Co=i($),pu=n($,"LI",{});var Y9e=s(pu);jce=n(Y9e,"STRONG",{});var Hmt=s(jce);kCo=r(Hmt,"unispeech-sat"),Hmt.forEach(t),SCo=r(Y9e," \u2014 "),Kj=n(Y9e,"A",{href:!0});var Umt=s(Kj);RCo=r(Umt,"UniSpeechSatModel"),Umt.forEach(t),PCo=r(Y9e," (UniSpeechSat model)"),Y9e.forEach(t),BCo=i($),_u=n($,"LI",{});var K9e=s(_u);Dce=n(K9e,"STRONG",{});var Jmt=s(Dce);ICo=r(Jmt,"van"),Jmt.forEach(t),NCo=r(K9e," \u2014 "),Zj=n(K9e,"A",{href:!0});var Ymt=s(Zj);qCo=r(Ymt,"VanModel"),Ymt.forEach(t),jCo=r(K9e," (VAN model)"),K9e.forEach(t),DCo=i($),uu=n($,"LI",{});var Z9e=s(uu);Gce=n(Z9e,"STRONG",{});var Kmt=s(Gce);GCo=r(Kmt,"vilt"),Kmt.forEach(t),OCo=r(Z9e," \u2014 "),eD=n(Z9e,"A",{href:!0});var Zmt=s(eD);VCo=r(Zmt,"ViltModel"),Zmt.forEach(t),XCo=r(Z9e," (ViLT model)"),Z9e.forEach(t),zCo=i($),bu=n($,"LI",{});var exe=s(bu);Oce=n(exe,"STRONG",{});var egt=s(Oce);QCo=r(egt,"vision-text-dual-encoder"),egt.forEach(t),WCo=r(exe," \u2014 "),oD=n(exe,"A",{href:!0});var ogt=s(oD);HCo=r(ogt,"VisionTextDualEncoderModel"),ogt.forEach(t),UCo=r(exe," (VisionTextDualEncoder model)"),exe.forEach(t),JCo=i($),vu=n($,"LI",{});var oxe=s(vu);Vce=n(oxe,"STRONG",{});var rgt=s(Vce);YCo=r(rgt,"visual_bert"),rgt.forEach(t),KCo=r(oxe," \u2014 "),rD=n(oxe,"A",{href:!0});var tgt=s(rD);ZCo=r(tgt,"VisualBertModel"),tgt.forEach(t),e5o=r(oxe," (VisualBERT model)"),oxe.forEach(t),o5o=i($),Fu=n($,"LI",{});var rxe=s(Fu);Xce=n(rxe,"STRONG",{});var agt=s(Xce);r5o=r(agt,"vit"),agt.forEach(t),t5o=r(rxe," \u2014 "),tD=n(rxe,"A",{href:!0});var ngt=s(tD);a5o=r(ngt,"ViTModel"),ngt.forEach(t),n5o=r(rxe," (ViT model)"),rxe.forEach(t),s5o=i($),Tu=n($,"LI",{});var txe=s(Tu);zce=n(txe,"STRONG",{});var sgt=s(zce);l5o=r(sgt,"vit_mae"),sgt.forEach(t),i5o=r(txe," \u2014 "),aD=n(txe,"A",{href:!0});var lgt=s(aD);d5o=r(lgt,"ViTMAEModel"),lgt.forEach(t),c5o=r(txe," (ViTMAE model)"),txe.forEach(t),f5o=i($),Mu=n($,"LI",{});var axe=s(Mu);Qce=n(axe,"STRONG",{});var igt=s(Qce);m5o=r(igt,"wav2vec2"),igt.forEach(t),g5o=r(axe," \u2014 "),nD=n(axe,"A",{href:!0});var dgt=s(nD);h5o=r(dgt,"Wav2Vec2Model"),dgt.forEach(t),p5o=r(axe," (Wav2Vec2 model)"),axe.forEach(t),_5o=i($),Eu=n($,"LI",{});var nxe=s(Eu);Wce=n(nxe,"STRONG",{});var cgt=s(Wce);u5o=r(cgt,"wav2vec2-conformer"),cgt.forEach(t),b5o=r(nxe," \u2014 "),sD=n(nxe,"A",{href:!0});var fgt=s(sD);v5o=r(fgt,"Wav2Vec2ConformerModel"),fgt.forEach(t),F5o=r(nxe," (Wav2Vec2-Conformer model)"),nxe.forEach(t),T5o=i($),Cu=n($,"LI",{});var sxe=s(Cu);Hce=n(sxe,"STRONG",{});var mgt=s(Hce);M5o=r(mgt,"wavlm"),mgt.forEach(t),E5o=r(sxe," \u2014 "),lD=n(sxe,"A",{href:!0});var ggt=s(lD);C5o=r(ggt,"WavLMModel"),ggt.forEach(t),w5o=r(sxe," (WavLM model)"),sxe.forEach(t),A5o=i($),wu=n($,"LI",{});var lxe=s(wu);Uce=n(lxe,"STRONG",{});var hgt=s(Uce);L5o=r(hgt,"xglm"),hgt.forEach(t),y5o=r(lxe," \u2014 "),iD=n(lxe,"A",{href:!0});var pgt=s(iD);x5o=r(pgt,"XGLMModel"),pgt.forEach(t),$5o=r(lxe," (XGLM model)"),lxe.forEach(t),k5o=i($),Au=n($,"LI",{});var ixe=s(Au);Jce=n(ixe,"STRONG",{});var _gt=s(Jce);S5o=r(_gt,"xlm"),_gt.forEach(t),R5o=r(ixe," \u2014 "),dD=n(ixe,"A",{href:!0});var ugt=s(dD);P5o=r(ugt,"XLMModel"),ugt.forEach(t),B5o=r(ixe," (XLM model)"),ixe.forEach(t),I5o=i($),Lu=n($,"LI",{});var dxe=s(Lu);Yce=n(dxe,"STRONG",{});var bgt=s(Yce);N5o=r(bgt,"xlm-prophetnet"),bgt.forEach(t),q5o=r(dxe," \u2014 "),cD=n(dxe,"A",{href:!0});var vgt=s(cD);j5o=r(vgt,"XLMProphetNetModel"),vgt.forEach(t),D5o=r(dxe," (XLM-ProphetNet model)"),dxe.forEach(t),G5o=i($),yu=n($,"LI",{});var cxe=s(yu);Kce=n(cxe,"STRONG",{});var Fgt=s(Kce);O5o=r(Fgt,"xlm-roberta"),Fgt.forEach(t),V5o=r(cxe," \u2014 "),fD=n(cxe,"A",{href:!0});var Tgt=s(fD);X5o=r(Tgt,"XLMRobertaModel"),Tgt.forEach(t),z5o=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),Q5o=i($),xu=n($,"LI",{});var fxe=s(xu);Zce=n(fxe,"STRONG",{});var Mgt=s(Zce);W5o=r(Mgt,"xlm-roberta-xl"),Mgt.forEach(t),H5o=r(fxe," \u2014 "),mD=n(fxe,"A",{href:!0});var Egt=s(mD);U5o=r(Egt,"XLMRobertaXLModel"),Egt.forEach(t),J5o=r(fxe," (XLM-RoBERTa-XL model)"),fxe.forEach(t),Y5o=i($),$u=n($,"LI",{});var mxe=s($u);efe=n(mxe,"STRONG",{});var Cgt=s(efe);K5o=r(Cgt,"xlnet"),Cgt.forEach(t),Z5o=r(mxe," \u2014 "),gD=n(mxe,"A",{href:!0});var wgt=s(gD);e0o=r(wgt,"XLNetModel"),wgt.forEach(t),o0o=r(mxe," (XLNet model)"),mxe.forEach(t),r0o=i($),ku=n($,"LI",{});var gxe=s(ku);ofe=n(gxe,"STRONG",{});var Agt=s(ofe);t0o=r(Agt,"yolos"),Agt.forEach(t),a0o=r(gxe," \u2014 "),hD=n(gxe,"A",{href:!0});var Lgt=s(hD);n0o=r(Lgt,"YolosModel"),Lgt.forEach(t),s0o=r(gxe," (YOLOS model)"),gxe.forEach(t),l0o=i($),Su=n($,"LI",{});var hxe=s(Su);rfe=n(hxe,"STRONG",{});var ygt=s(rfe);i0o=r(ygt,"yoso"),ygt.forEach(t),d0o=r(hxe," \u2014 "),pD=n(hxe,"A",{href:!0});var xgt=s(pD);c0o=r(xgt,"YosoModel"),xgt.forEach(t),f0o=r(hxe," (YOSO model)"),hxe.forEach(t),$.forEach(t),m0o=i(aa),Ru=n(aa,"P",{});var pxe=s(Ru);g0o=r(pxe,"The model is set in evaluation mode by default using "),tfe=n(pxe,"CODE",{});var $gt=s(tfe);h0o=r($gt,"model.eval()"),$gt.forEach(t),p0o=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(pxe,"CODE",{});var kgt=s(afe);_0o=r(kgt,"model.train()"),kgt.forEach(t),pxe.forEach(t),u0o=i(aa),T(Pu.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),TOe=i(f),ji=n(f,"H2",{class:!0});var LXe=s(ji);Bu=n(LXe,"A",{id:!0,class:!0,href:!0});var Sgt=s(Bu);nfe=n(Sgt,"SPAN",{});var Rgt=s(nfe);T(fy.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),b0o=i(LXe),sfe=n(LXe,"SPAN",{});var Pgt=s(sfe);v0o=r(Pgt,"AutoModelForPreTraining"),Pgt.forEach(t),LXe.forEach(t),MOe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(my.$$.fragment,Zs),F0o=i(Zs),Di=n(Zs,"P",{});var Roe=s(Di);T0o=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_D=n(Roe,"A",{href:!0});var Bgt=s(_D);M0o=r(Bgt,"from_pretrained()"),Bgt.forEach(t),E0o=r(Roe," class method or the "),uD=n(Roe,"A",{href:!0});var Igt=s(uD);C0o=r(Igt,"from_config()"),Igt.forEach(t),w0o=r(Roe,` class
method.`),Roe.forEach(t),A0o=i(Zs),gy=n(Zs,"P",{});var yXe=s(gy);L0o=r(yXe,"This class cannot be instantiated directly using "),lfe=n(yXe,"CODE",{});var Ngt=s(lfe);y0o=r(Ngt,"__init__()"),Ngt.forEach(t),x0o=r(yXe," (throws an error)."),yXe.forEach(t),$0o=i(Zs),st=n(Zs,"DIV",{class:!0});var qA=s(st);T(hy.$$.fragment,qA),k0o=i(qA),ife=n(qA,"P",{});var qgt=s(ife);S0o=r(qgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qgt.forEach(t),R0o=i(qA),Gi=n(qA,"P",{});var Poe=s(Gi);P0o=r(Poe,`Note:
Loading a model from its configuration file does `),dfe=n(Poe,"STRONG",{});var jgt=s(dfe);B0o=r(jgt,"not"),jgt.forEach(t),I0o=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(Poe,"A",{href:!0});var Dgt=s(bD);N0o=r(Dgt,"from_pretrained()"),Dgt.forEach(t),q0o=r(Poe," to load the model weights."),Poe.forEach(t),j0o=i(qA),T(Iu.$$.fragment,qA),qA.forEach(t),D0o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(py.$$.fragment,na),G0o=i(na),cfe=n(na,"P",{});var Ggt=s(cfe);O0o=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),V0o=i(na),Pa=n(na,"P",{});var jA=s(Pa);X0o=r(jA,"The model class to instantiate is selected based on the "),ffe=n(jA,"CODE",{});var Ogt=s(ffe);z0o=r(Ogt,"model_type"),Ogt.forEach(t),Q0o=r(jA,` property of the config object (either
passed as an argument or loaded from `),mfe=n(jA,"CODE",{});var Vgt=s(mfe);W0o=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),H0o=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(jA,"CODE",{});var Xgt=s(gfe);U0o=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),J0o=r(jA,":"),jA.forEach(t),Y0o=i(na),G=n(na,"UL",{});var O=s(G);Nu=n(O,"LI",{});var _xe=s(Nu);hfe=n(_xe,"STRONG",{});var zgt=s(hfe);K0o=r(zgt,"albert"),zgt.forEach(t),Z0o=r(_xe," \u2014 "),vD=n(_xe,"A",{href:!0});var Qgt=s(vD);ewo=r(Qgt,"AlbertForPreTraining"),Qgt.forEach(t),owo=r(_xe," (ALBERT model)"),_xe.forEach(t),rwo=i(O),qu=n(O,"LI",{});var uxe=s(qu);pfe=n(uxe,"STRONG",{});var Wgt=s(pfe);two=r(Wgt,"bart"),Wgt.forEach(t),awo=r(uxe," \u2014 "),FD=n(uxe,"A",{href:!0});var Hgt=s(FD);nwo=r(Hgt,"BartForConditionalGeneration"),Hgt.forEach(t),swo=r(uxe," (BART model)"),uxe.forEach(t),lwo=i(O),ju=n(O,"LI",{});var bxe=s(ju);_fe=n(bxe,"STRONG",{});var Ugt=s(_fe);iwo=r(Ugt,"bert"),Ugt.forEach(t),dwo=r(bxe," \u2014 "),TD=n(bxe,"A",{href:!0});var Jgt=s(TD);cwo=r(Jgt,"BertForPreTraining"),Jgt.forEach(t),fwo=r(bxe," (BERT model)"),bxe.forEach(t),mwo=i(O),Du=n(O,"LI",{});var vxe=s(Du);ufe=n(vxe,"STRONG",{});var Ygt=s(ufe);gwo=r(Ygt,"big_bird"),Ygt.forEach(t),hwo=r(vxe," \u2014 "),MD=n(vxe,"A",{href:!0});var Kgt=s(MD);pwo=r(Kgt,"BigBirdForPreTraining"),Kgt.forEach(t),_wo=r(vxe," (BigBird model)"),vxe.forEach(t),uwo=i(O),Gu=n(O,"LI",{});var Fxe=s(Gu);bfe=n(Fxe,"STRONG",{});var Zgt=s(bfe);bwo=r(Zgt,"bloom"),Zgt.forEach(t),vwo=r(Fxe," \u2014 "),ED=n(Fxe,"A",{href:!0});var eht=s(ED);Fwo=r(eht,"BloomForCausalLM"),eht.forEach(t),Two=r(Fxe," (BLOOM model)"),Fxe.forEach(t),Mwo=i(O),Ou=n(O,"LI",{});var Txe=s(Ou);vfe=n(Txe,"STRONG",{});var oht=s(vfe);Ewo=r(oht,"camembert"),oht.forEach(t),Cwo=r(Txe," \u2014 "),CD=n(Txe,"A",{href:!0});var rht=s(CD);wwo=r(rht,"CamembertForMaskedLM"),rht.forEach(t),Awo=r(Txe," (CamemBERT model)"),Txe.forEach(t),Lwo=i(O),Vu=n(O,"LI",{});var Mxe=s(Vu);Ffe=n(Mxe,"STRONG",{});var tht=s(Ffe);ywo=r(tht,"ctrl"),tht.forEach(t),xwo=r(Mxe," \u2014 "),wD=n(Mxe,"A",{href:!0});var aht=s(wD);$wo=r(aht,"CTRLLMHeadModel"),aht.forEach(t),kwo=r(Mxe," (CTRL model)"),Mxe.forEach(t),Swo=i(O),Xu=n(O,"LI",{});var Exe=s(Xu);Tfe=n(Exe,"STRONG",{});var nht=s(Tfe);Rwo=r(nht,"data2vec-text"),nht.forEach(t),Pwo=r(Exe," \u2014 "),AD=n(Exe,"A",{href:!0});var sht=s(AD);Bwo=r(sht,"Data2VecTextForMaskedLM"),sht.forEach(t),Iwo=r(Exe," (Data2VecText model)"),Exe.forEach(t),Nwo=i(O),zu=n(O,"LI",{});var Cxe=s(zu);Mfe=n(Cxe,"STRONG",{});var lht=s(Mfe);qwo=r(lht,"deberta"),lht.forEach(t),jwo=r(Cxe," \u2014 "),LD=n(Cxe,"A",{href:!0});var iht=s(LD);Dwo=r(iht,"DebertaForMaskedLM"),iht.forEach(t),Gwo=r(Cxe," (DeBERTa model)"),Cxe.forEach(t),Owo=i(O),Qu=n(O,"LI",{});var wxe=s(Qu);Efe=n(wxe,"STRONG",{});var dht=s(Efe);Vwo=r(dht,"deberta-v2"),dht.forEach(t),Xwo=r(wxe," \u2014 "),yD=n(wxe,"A",{href:!0});var cht=s(yD);zwo=r(cht,"DebertaV2ForMaskedLM"),cht.forEach(t),Qwo=r(wxe," (DeBERTa-v2 model)"),wxe.forEach(t),Wwo=i(O),Wu=n(O,"LI",{});var Axe=s(Wu);Cfe=n(Axe,"STRONG",{});var fht=s(Cfe);Hwo=r(fht,"distilbert"),fht.forEach(t),Uwo=r(Axe," \u2014 "),xD=n(Axe,"A",{href:!0});var mht=s(xD);Jwo=r(mht,"DistilBertForMaskedLM"),mht.forEach(t),Ywo=r(Axe," (DistilBERT model)"),Axe.forEach(t),Kwo=i(O),Hu=n(O,"LI",{});var Lxe=s(Hu);wfe=n(Lxe,"STRONG",{});var ght=s(wfe);Zwo=r(ght,"electra"),ght.forEach(t),eAo=r(Lxe," \u2014 "),$D=n(Lxe,"A",{href:!0});var hht=s($D);oAo=r(hht,"ElectraForPreTraining"),hht.forEach(t),rAo=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),tAo=i(O),Uu=n(O,"LI",{});var yxe=s(Uu);Afe=n(yxe,"STRONG",{});var pht=s(Afe);aAo=r(pht,"flaubert"),pht.forEach(t),nAo=r(yxe," \u2014 "),kD=n(yxe,"A",{href:!0});var _ht=s(kD);sAo=r(_ht,"FlaubertWithLMHeadModel"),_ht.forEach(t),lAo=r(yxe," (FlauBERT model)"),yxe.forEach(t),iAo=i(O),Ju=n(O,"LI",{});var xxe=s(Ju);Lfe=n(xxe,"STRONG",{});var uht=s(Lfe);dAo=r(uht,"flava"),uht.forEach(t),cAo=r(xxe," \u2014 "),SD=n(xxe,"A",{href:!0});var bht=s(SD);fAo=r(bht,"FlavaForPreTraining"),bht.forEach(t),mAo=r(xxe," (FLAVA model)"),xxe.forEach(t),gAo=i(O),Yu=n(O,"LI",{});var $xe=s(Yu);yfe=n($xe,"STRONG",{});var vht=s(yfe);hAo=r(vht,"fnet"),vht.forEach(t),pAo=r($xe," \u2014 "),RD=n($xe,"A",{href:!0});var Fht=s(RD);_Ao=r(Fht,"FNetForPreTraining"),Fht.forEach(t),uAo=r($xe," (FNet model)"),$xe.forEach(t),bAo=i(O),Ku=n(O,"LI",{});var kxe=s(Ku);xfe=n(kxe,"STRONG",{});var Tht=s(xfe);vAo=r(Tht,"fsmt"),Tht.forEach(t),FAo=r(kxe," \u2014 "),PD=n(kxe,"A",{href:!0});var Mht=s(PD);TAo=r(Mht,"FSMTForConditionalGeneration"),Mht.forEach(t),MAo=r(kxe," (FairSeq Machine-Translation model)"),kxe.forEach(t),EAo=i(O),Zu=n(O,"LI",{});var Sxe=s(Zu);$fe=n(Sxe,"STRONG",{});var Eht=s($fe);CAo=r(Eht,"funnel"),Eht.forEach(t),wAo=r(Sxe," \u2014 "),BD=n(Sxe,"A",{href:!0});var Cht=s(BD);AAo=r(Cht,"FunnelForPreTraining"),Cht.forEach(t),LAo=r(Sxe," (Funnel Transformer model)"),Sxe.forEach(t),yAo=i(O),e1=n(O,"LI",{});var Rxe=s(e1);kfe=n(Rxe,"STRONG",{});var wht=s(kfe);xAo=r(wht,"gpt2"),wht.forEach(t),$Ao=r(Rxe," \u2014 "),ID=n(Rxe,"A",{href:!0});var Aht=s(ID);kAo=r(Aht,"GPT2LMHeadModel"),Aht.forEach(t),SAo=r(Rxe," (OpenAI GPT-2 model)"),Rxe.forEach(t),RAo=i(O),o1=n(O,"LI",{});var Pxe=s(o1);Sfe=n(Pxe,"STRONG",{});var Lht=s(Sfe);PAo=r(Lht,"ibert"),Lht.forEach(t),BAo=r(Pxe," \u2014 "),ND=n(Pxe,"A",{href:!0});var yht=s(ND);IAo=r(yht,"IBertForMaskedLM"),yht.forEach(t),NAo=r(Pxe," (I-BERT model)"),Pxe.forEach(t),qAo=i(O),r1=n(O,"LI",{});var Bxe=s(r1);Rfe=n(Bxe,"STRONG",{});var xht=s(Rfe);jAo=r(xht,"layoutlm"),xht.forEach(t),DAo=r(Bxe," \u2014 "),qD=n(Bxe,"A",{href:!0});var $ht=s(qD);GAo=r($ht,"LayoutLMForMaskedLM"),$ht.forEach(t),OAo=r(Bxe," (LayoutLM model)"),Bxe.forEach(t),VAo=i(O),t1=n(O,"LI",{});var Ixe=s(t1);Pfe=n(Ixe,"STRONG",{});var kht=s(Pfe);XAo=r(kht,"longformer"),kht.forEach(t),zAo=r(Ixe," \u2014 "),jD=n(Ixe,"A",{href:!0});var Sht=s(jD);QAo=r(Sht,"LongformerForMaskedLM"),Sht.forEach(t),WAo=r(Ixe," (Longformer model)"),Ixe.forEach(t),HAo=i(O),a1=n(O,"LI",{});var Nxe=s(a1);Bfe=n(Nxe,"STRONG",{});var Rht=s(Bfe);UAo=r(Rht,"lxmert"),Rht.forEach(t),JAo=r(Nxe," \u2014 "),DD=n(Nxe,"A",{href:!0});var Pht=s(DD);YAo=r(Pht,"LxmertForPreTraining"),Pht.forEach(t),KAo=r(Nxe," (LXMERT model)"),Nxe.forEach(t),ZAo=i(O),n1=n(O,"LI",{});var qxe=s(n1);Ife=n(qxe,"STRONG",{});var Bht=s(Ife);e6o=r(Bht,"megatron-bert"),Bht.forEach(t),o6o=r(qxe," \u2014 "),GD=n(qxe,"A",{href:!0});var Iht=s(GD);r6o=r(Iht,"MegatronBertForPreTraining"),Iht.forEach(t),t6o=r(qxe," (Megatron-BERT model)"),qxe.forEach(t),a6o=i(O),s1=n(O,"LI",{});var jxe=s(s1);Nfe=n(jxe,"STRONG",{});var Nht=s(Nfe);n6o=r(Nht,"mobilebert"),Nht.forEach(t),s6o=r(jxe," \u2014 "),OD=n(jxe,"A",{href:!0});var qht=s(OD);l6o=r(qht,"MobileBertForPreTraining"),qht.forEach(t),i6o=r(jxe," (MobileBERT model)"),jxe.forEach(t),d6o=i(O),l1=n(O,"LI",{});var Dxe=s(l1);qfe=n(Dxe,"STRONG",{});var jht=s(qfe);c6o=r(jht,"mpnet"),jht.forEach(t),f6o=r(Dxe," \u2014 "),VD=n(Dxe,"A",{href:!0});var Dht=s(VD);m6o=r(Dht,"MPNetForMaskedLM"),Dht.forEach(t),g6o=r(Dxe," (MPNet model)"),Dxe.forEach(t),h6o=i(O),i1=n(O,"LI",{});var Gxe=s(i1);jfe=n(Gxe,"STRONG",{});var Ght=s(jfe);p6o=r(Ght,"nezha"),Ght.forEach(t),_6o=r(Gxe," \u2014 "),XD=n(Gxe,"A",{href:!0});var Oht=s(XD);u6o=r(Oht,"NezhaForPreTraining"),Oht.forEach(t),b6o=r(Gxe," (Nezha model)"),Gxe.forEach(t),v6o=i(O),d1=n(O,"LI",{});var Oxe=s(d1);Dfe=n(Oxe,"STRONG",{});var Vht=s(Dfe);F6o=r(Vht,"openai-gpt"),Vht.forEach(t),T6o=r(Oxe," \u2014 "),zD=n(Oxe,"A",{href:!0});var Xht=s(zD);M6o=r(Xht,"OpenAIGPTLMHeadModel"),Xht.forEach(t),E6o=r(Oxe," (OpenAI GPT model)"),Oxe.forEach(t),C6o=i(O),c1=n(O,"LI",{});var Vxe=s(c1);Gfe=n(Vxe,"STRONG",{});var zht=s(Gfe);w6o=r(zht,"retribert"),zht.forEach(t),A6o=r(Vxe," \u2014 "),QD=n(Vxe,"A",{href:!0});var Qht=s(QD);L6o=r(Qht,"RetriBertModel"),Qht.forEach(t),y6o=r(Vxe," (RetriBERT model)"),Vxe.forEach(t),x6o=i(O),f1=n(O,"LI",{});var Xxe=s(f1);Ofe=n(Xxe,"STRONG",{});var Wht=s(Ofe);$6o=r(Wht,"roberta"),Wht.forEach(t),k6o=r(Xxe," \u2014 "),WD=n(Xxe,"A",{href:!0});var Hht=s(WD);S6o=r(Hht,"RobertaForMaskedLM"),Hht.forEach(t),R6o=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),P6o=i(O),m1=n(O,"LI",{});var zxe=s(m1);Vfe=n(zxe,"STRONG",{});var Uht=s(Vfe);B6o=r(Uht,"splinter"),Uht.forEach(t),I6o=r(zxe," \u2014 "),HD=n(zxe,"A",{href:!0});var Jht=s(HD);N6o=r(Jht,"SplinterForPreTraining"),Jht.forEach(t),q6o=r(zxe," (Splinter model)"),zxe.forEach(t),j6o=i(O),g1=n(O,"LI",{});var Qxe=s(g1);Xfe=n(Qxe,"STRONG",{});var Yht=s(Xfe);D6o=r(Yht,"squeezebert"),Yht.forEach(t),G6o=r(Qxe," \u2014 "),UD=n(Qxe,"A",{href:!0});var Kht=s(UD);O6o=r(Kht,"SqueezeBertForMaskedLM"),Kht.forEach(t),V6o=r(Qxe," (SqueezeBERT model)"),Qxe.forEach(t),X6o=i(O),h1=n(O,"LI",{});var Wxe=s(h1);zfe=n(Wxe,"STRONG",{});var Zht=s(zfe);z6o=r(Zht,"t5"),Zht.forEach(t),Q6o=r(Wxe," \u2014 "),JD=n(Wxe,"A",{href:!0});var ept=s(JD);W6o=r(ept,"T5ForConditionalGeneration"),ept.forEach(t),H6o=r(Wxe," (T5 model)"),Wxe.forEach(t),U6o=i(O),p1=n(O,"LI",{});var Hxe=s(p1);Qfe=n(Hxe,"STRONG",{});var opt=s(Qfe);J6o=r(opt,"tapas"),opt.forEach(t),Y6o=r(Hxe," \u2014 "),YD=n(Hxe,"A",{href:!0});var rpt=s(YD);K6o=r(rpt,"TapasForMaskedLM"),rpt.forEach(t),Z6o=r(Hxe," (TAPAS model)"),Hxe.forEach(t),eLo=i(O),_1=n(O,"LI",{});var Uxe=s(_1);Wfe=n(Uxe,"STRONG",{});var tpt=s(Wfe);oLo=r(tpt,"transfo-xl"),tpt.forEach(t),rLo=r(Uxe," \u2014 "),KD=n(Uxe,"A",{href:!0});var apt=s(KD);tLo=r(apt,"TransfoXLLMHeadModel"),apt.forEach(t),aLo=r(Uxe," (Transformer-XL model)"),Uxe.forEach(t),nLo=i(O),u1=n(O,"LI",{});var Jxe=s(u1);Hfe=n(Jxe,"STRONG",{});var npt=s(Hfe);sLo=r(npt,"unispeech"),npt.forEach(t),lLo=r(Jxe," \u2014 "),ZD=n(Jxe,"A",{href:!0});var spt=s(ZD);iLo=r(spt,"UniSpeechForPreTraining"),spt.forEach(t),dLo=r(Jxe," (UniSpeech model)"),Jxe.forEach(t),cLo=i(O),b1=n(O,"LI",{});var Yxe=s(b1);Ufe=n(Yxe,"STRONG",{});var lpt=s(Ufe);fLo=r(lpt,"unispeech-sat"),lpt.forEach(t),mLo=r(Yxe," \u2014 "),eG=n(Yxe,"A",{href:!0});var ipt=s(eG);gLo=r(ipt,"UniSpeechSatForPreTraining"),ipt.forEach(t),hLo=r(Yxe," (UniSpeechSat model)"),Yxe.forEach(t),pLo=i(O),v1=n(O,"LI",{});var Kxe=s(v1);Jfe=n(Kxe,"STRONG",{});var dpt=s(Jfe);_Lo=r(dpt,"visual_bert"),dpt.forEach(t),uLo=r(Kxe," \u2014 "),oG=n(Kxe,"A",{href:!0});var cpt=s(oG);bLo=r(cpt,"VisualBertForPreTraining"),cpt.forEach(t),vLo=r(Kxe," (VisualBERT model)"),Kxe.forEach(t),FLo=i(O),F1=n(O,"LI",{});var Zxe=s(F1);Yfe=n(Zxe,"STRONG",{});var fpt=s(Yfe);TLo=r(fpt,"vit_mae"),fpt.forEach(t),MLo=r(Zxe," \u2014 "),rG=n(Zxe,"A",{href:!0});var mpt=s(rG);ELo=r(mpt,"ViTMAEForPreTraining"),mpt.forEach(t),CLo=r(Zxe," (ViTMAE model)"),Zxe.forEach(t),wLo=i(O),T1=n(O,"LI",{});var e$e=s(T1);Kfe=n(e$e,"STRONG",{});var gpt=s(Kfe);ALo=r(gpt,"wav2vec2"),gpt.forEach(t),LLo=r(e$e," \u2014 "),tG=n(e$e,"A",{href:!0});var hpt=s(tG);yLo=r(hpt,"Wav2Vec2ForPreTraining"),hpt.forEach(t),xLo=r(e$e," (Wav2Vec2 model)"),e$e.forEach(t),$Lo=i(O),M1=n(O,"LI",{});var o$e=s(M1);Zfe=n(o$e,"STRONG",{});var ppt=s(Zfe);kLo=r(ppt,"wav2vec2-conformer"),ppt.forEach(t),SLo=r(o$e," \u2014 "),aG=n(o$e,"A",{href:!0});var _pt=s(aG);RLo=r(_pt,"Wav2Vec2ConformerForPreTraining"),_pt.forEach(t),PLo=r(o$e," (Wav2Vec2-Conformer model)"),o$e.forEach(t),BLo=i(O),E1=n(O,"LI",{});var r$e=s(E1);eme=n(r$e,"STRONG",{});var upt=s(eme);ILo=r(upt,"xlm"),upt.forEach(t),NLo=r(r$e," \u2014 "),nG=n(r$e,"A",{href:!0});var bpt=s(nG);qLo=r(bpt,"XLMWithLMHeadModel"),bpt.forEach(t),jLo=r(r$e," (XLM model)"),r$e.forEach(t),DLo=i(O),C1=n(O,"LI",{});var t$e=s(C1);ome=n(t$e,"STRONG",{});var vpt=s(ome);GLo=r(vpt,"xlm-roberta"),vpt.forEach(t),OLo=r(t$e," \u2014 "),sG=n(t$e,"A",{href:!0});var Fpt=s(sG);VLo=r(Fpt,"XLMRobertaForMaskedLM"),Fpt.forEach(t),XLo=r(t$e," (XLM-RoBERTa model)"),t$e.forEach(t),zLo=i(O),w1=n(O,"LI",{});var a$e=s(w1);rme=n(a$e,"STRONG",{});var Tpt=s(rme);QLo=r(Tpt,"xlm-roberta-xl"),Tpt.forEach(t),WLo=r(a$e," \u2014 "),lG=n(a$e,"A",{href:!0});var Mpt=s(lG);HLo=r(Mpt,"XLMRobertaXLForMaskedLM"),Mpt.forEach(t),ULo=r(a$e," (XLM-RoBERTa-XL model)"),a$e.forEach(t),JLo=i(O),A1=n(O,"LI",{});var n$e=s(A1);tme=n(n$e,"STRONG",{});var Ept=s(tme);YLo=r(Ept,"xlnet"),Ept.forEach(t),KLo=r(n$e," \u2014 "),iG=n(n$e,"A",{href:!0});var Cpt=s(iG);ZLo=r(Cpt,"XLNetLMHeadModel"),Cpt.forEach(t),eyo=r(n$e," (XLNet model)"),n$e.forEach(t),O.forEach(t),oyo=i(na),L1=n(na,"P",{});var s$e=s(L1);ryo=r(s$e,"The model is set in evaluation mode by default using "),ame=n(s$e,"CODE",{});var wpt=s(ame);tyo=r(wpt,"model.eval()"),wpt.forEach(t),ayo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=n(s$e,"CODE",{});var Apt=s(nme);nyo=r(Apt,"model.train()"),Apt.forEach(t),s$e.forEach(t),syo=i(na),T(y1.$$.fragment,na),na.forEach(t),Zs.forEach(t),EOe=i(f),Oi=n(f,"H2",{class:!0});var xXe=s(Oi);x1=n(xXe,"A",{id:!0,class:!0,href:!0});var Lpt=s(x1);sme=n(Lpt,"SPAN",{});var ypt=s(sme);T(_y.$$.fragment,ypt),ypt.forEach(t),Lpt.forEach(t),lyo=i(xXe),lme=n(xXe,"SPAN",{});var xpt=s(lme);iyo=r(xpt,"AutoModelForCausalLM"),xpt.forEach(t),xXe.forEach(t),COe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(uy.$$.fragment,el),dyo=i(el),Vi=n(el,"P",{});var Boe=s(Vi);cyo=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dG=n(Boe,"A",{href:!0});var $pt=s(dG);fyo=r($pt,"from_pretrained()"),$pt.forEach(t),myo=r(Boe," class method or the "),cG=n(Boe,"A",{href:!0});var kpt=s(cG);gyo=r(kpt,"from_config()"),kpt.forEach(t),hyo=r(Boe,` class
method.`),Boe.forEach(t),pyo=i(el),by=n(el,"P",{});var $Xe=s(by);_yo=r($Xe,"This class cannot be instantiated directly using "),ime=n($Xe,"CODE",{});var Spt=s(ime);uyo=r(Spt,"__init__()"),Spt.forEach(t),byo=r($Xe," (throws an error)."),$Xe.forEach(t),vyo=i(el),lt=n(el,"DIV",{class:!0});var DA=s(lt);T(vy.$$.fragment,DA),Fyo=i(DA),dme=n(DA,"P",{});var Rpt=s(dme);Tyo=r(Rpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rpt.forEach(t),Myo=i(DA),Xi=n(DA,"P",{});var Ioe=s(Xi);Eyo=r(Ioe,`Note:
Loading a model from its configuration file does `),cme=n(Ioe,"STRONG",{});var Ppt=s(cme);Cyo=r(Ppt,"not"),Ppt.forEach(t),wyo=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(Ioe,"A",{href:!0});var Bpt=s(fG);Ayo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),Lyo=r(Ioe," to load the model weights."),Ioe.forEach(t),yyo=i(DA),T($1.$$.fragment,DA),DA.forEach(t),xyo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(Fy.$$.fragment,sa),$yo=i(sa),fme=n(sa,"P",{});var Ipt=s(fme);kyo=r(Ipt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ipt.forEach(t),Syo=i(sa),Ba=n(sa,"P",{});var GA=s(Ba);Ryo=r(GA,"The model class to instantiate is selected based on the "),mme=n(GA,"CODE",{});var Npt=s(mme);Pyo=r(Npt,"model_type"),Npt.forEach(t),Byo=r(GA,` property of the config object (either
passed as an argument or loaded from `),gme=n(GA,"CODE",{});var qpt=s(gme);Iyo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),Nyo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(GA,"CODE",{});var jpt=s(hme);qyo=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),jyo=r(GA,":"),GA.forEach(t),Dyo=i(sa),z=n(sa,"UL",{});var W=s(z);k1=n(W,"LI",{});var l$e=s(k1);pme=n(l$e,"STRONG",{});var Dpt=s(pme);Gyo=r(Dpt,"bart"),Dpt.forEach(t),Oyo=r(l$e," \u2014 "),mG=n(l$e,"A",{href:!0});var Gpt=s(mG);Vyo=r(Gpt,"BartForCausalLM"),Gpt.forEach(t),Xyo=r(l$e," (BART model)"),l$e.forEach(t),zyo=i(W),S1=n(W,"LI",{});var i$e=s(S1);_me=n(i$e,"STRONG",{});var Opt=s(_me);Qyo=r(Opt,"bert"),Opt.forEach(t),Wyo=r(i$e," \u2014 "),gG=n(i$e,"A",{href:!0});var Vpt=s(gG);Hyo=r(Vpt,"BertLMHeadModel"),Vpt.forEach(t),Uyo=r(i$e," (BERT model)"),i$e.forEach(t),Jyo=i(W),R1=n(W,"LI",{});var d$e=s(R1);ume=n(d$e,"STRONG",{});var Xpt=s(ume);Yyo=r(Xpt,"bert-generation"),Xpt.forEach(t),Kyo=r(d$e," \u2014 "),hG=n(d$e,"A",{href:!0});var zpt=s(hG);Zyo=r(zpt,"BertGenerationDecoder"),zpt.forEach(t),e8o=r(d$e," (Bert Generation model)"),d$e.forEach(t),o8o=i(W),P1=n(W,"LI",{});var c$e=s(P1);bme=n(c$e,"STRONG",{});var Qpt=s(bme);r8o=r(Qpt,"big_bird"),Qpt.forEach(t),t8o=r(c$e," \u2014 "),pG=n(c$e,"A",{href:!0});var Wpt=s(pG);a8o=r(Wpt,"BigBirdForCausalLM"),Wpt.forEach(t),n8o=r(c$e," (BigBird model)"),c$e.forEach(t),s8o=i(W),B1=n(W,"LI",{});var f$e=s(B1);vme=n(f$e,"STRONG",{});var Hpt=s(vme);l8o=r(Hpt,"bigbird_pegasus"),Hpt.forEach(t),i8o=r(f$e," \u2014 "),_G=n(f$e,"A",{href:!0});var Upt=s(_G);d8o=r(Upt,"BigBirdPegasusForCausalLM"),Upt.forEach(t),c8o=r(f$e," (BigBird-Pegasus model)"),f$e.forEach(t),f8o=i(W),I1=n(W,"LI",{});var m$e=s(I1);Fme=n(m$e,"STRONG",{});var Jpt=s(Fme);m8o=r(Jpt,"blenderbot"),Jpt.forEach(t),g8o=r(m$e," \u2014 "),uG=n(m$e,"A",{href:!0});var Ypt=s(uG);h8o=r(Ypt,"BlenderbotForCausalLM"),Ypt.forEach(t),p8o=r(m$e," (Blenderbot model)"),m$e.forEach(t),_8o=i(W),N1=n(W,"LI",{});var g$e=s(N1);Tme=n(g$e,"STRONG",{});var Kpt=s(Tme);u8o=r(Kpt,"blenderbot-small"),Kpt.forEach(t),b8o=r(g$e," \u2014 "),bG=n(g$e,"A",{href:!0});var Zpt=s(bG);v8o=r(Zpt,"BlenderbotSmallForCausalLM"),Zpt.forEach(t),F8o=r(g$e," (BlenderbotSmall model)"),g$e.forEach(t),T8o=i(W),q1=n(W,"LI",{});var h$e=s(q1);Mme=n(h$e,"STRONG",{});var e_t=s(Mme);M8o=r(e_t,"bloom"),e_t.forEach(t),E8o=r(h$e," \u2014 "),vG=n(h$e,"A",{href:!0});var o_t=s(vG);C8o=r(o_t,"BloomForCausalLM"),o_t.forEach(t),w8o=r(h$e," (BLOOM model)"),h$e.forEach(t),A8o=i(W),j1=n(W,"LI",{});var p$e=s(j1);Eme=n(p$e,"STRONG",{});var r_t=s(Eme);L8o=r(r_t,"camembert"),r_t.forEach(t),y8o=r(p$e," \u2014 "),FG=n(p$e,"A",{href:!0});var t_t=s(FG);x8o=r(t_t,"CamembertForCausalLM"),t_t.forEach(t),$8o=r(p$e," (CamemBERT model)"),p$e.forEach(t),k8o=i(W),D1=n(W,"LI",{});var _$e=s(D1);Cme=n(_$e,"STRONG",{});var a_t=s(Cme);S8o=r(a_t,"ctrl"),a_t.forEach(t),R8o=r(_$e," \u2014 "),TG=n(_$e,"A",{href:!0});var n_t=s(TG);P8o=r(n_t,"CTRLLMHeadModel"),n_t.forEach(t),B8o=r(_$e," (CTRL model)"),_$e.forEach(t),I8o=i(W),G1=n(W,"LI",{});var u$e=s(G1);wme=n(u$e,"STRONG",{});var s_t=s(wme);N8o=r(s_t,"data2vec-text"),s_t.forEach(t),q8o=r(u$e," \u2014 "),MG=n(u$e,"A",{href:!0});var l_t=s(MG);j8o=r(l_t,"Data2VecTextForCausalLM"),l_t.forEach(t),D8o=r(u$e," (Data2VecText model)"),u$e.forEach(t),G8o=i(W),O1=n(W,"LI",{});var b$e=s(O1);Ame=n(b$e,"STRONG",{});var i_t=s(Ame);O8o=r(i_t,"electra"),i_t.forEach(t),V8o=r(b$e," \u2014 "),EG=n(b$e,"A",{href:!0});var d_t=s(EG);X8o=r(d_t,"ElectraForCausalLM"),d_t.forEach(t),z8o=r(b$e," (ELECTRA model)"),b$e.forEach(t),Q8o=i(W),V1=n(W,"LI",{});var v$e=s(V1);Lme=n(v$e,"STRONG",{});var c_t=s(Lme);W8o=r(c_t,"gpt2"),c_t.forEach(t),H8o=r(v$e," \u2014 "),CG=n(v$e,"A",{href:!0});var f_t=s(CG);U8o=r(f_t,"GPT2LMHeadModel"),f_t.forEach(t),J8o=r(v$e," (OpenAI GPT-2 model)"),v$e.forEach(t),Y8o=i(W),X1=n(W,"LI",{});var F$e=s(X1);yme=n(F$e,"STRONG",{});var m_t=s(yme);K8o=r(m_t,"gpt_neo"),m_t.forEach(t),Z8o=r(F$e," \u2014 "),wG=n(F$e,"A",{href:!0});var g_t=s(wG);e9o=r(g_t,"GPTNeoForCausalLM"),g_t.forEach(t),o9o=r(F$e," (GPT Neo model)"),F$e.forEach(t),r9o=i(W),z1=n(W,"LI",{});var T$e=s(z1);xme=n(T$e,"STRONG",{});var h_t=s(xme);t9o=r(h_t,"gpt_neox"),h_t.forEach(t),a9o=r(T$e," \u2014 "),AG=n(T$e,"A",{href:!0});var p_t=s(AG);n9o=r(p_t,"GPTNeoXForCausalLM"),p_t.forEach(t),s9o=r(T$e," (GPT NeoX model)"),T$e.forEach(t),l9o=i(W),Q1=n(W,"LI",{});var M$e=s(Q1);$me=n(M$e,"STRONG",{});var __t=s($me);i9o=r(__t,"gptj"),__t.forEach(t),d9o=r(M$e," \u2014 "),LG=n(M$e,"A",{href:!0});var u_t=s(LG);c9o=r(u_t,"GPTJForCausalLM"),u_t.forEach(t),f9o=r(M$e," (GPT-J model)"),M$e.forEach(t),m9o=i(W),W1=n(W,"LI",{});var E$e=s(W1);kme=n(E$e,"STRONG",{});var b_t=s(kme);g9o=r(b_t,"marian"),b_t.forEach(t),h9o=r(E$e," \u2014 "),yG=n(E$e,"A",{href:!0});var v_t=s(yG);p9o=r(v_t,"MarianForCausalLM"),v_t.forEach(t),_9o=r(E$e," (Marian model)"),E$e.forEach(t),u9o=i(W),H1=n(W,"LI",{});var C$e=s(H1);Sme=n(C$e,"STRONG",{});var F_t=s(Sme);b9o=r(F_t,"mbart"),F_t.forEach(t),v9o=r(C$e," \u2014 "),xG=n(C$e,"A",{href:!0});var T_t=s(xG);F9o=r(T_t,"MBartForCausalLM"),T_t.forEach(t),T9o=r(C$e," (mBART model)"),C$e.forEach(t),M9o=i(W),U1=n(W,"LI",{});var w$e=s(U1);Rme=n(w$e,"STRONG",{});var M_t=s(Rme);E9o=r(M_t,"megatron-bert"),M_t.forEach(t),C9o=r(w$e," \u2014 "),$G=n(w$e,"A",{href:!0});var E_t=s($G);w9o=r(E_t,"MegatronBertForCausalLM"),E_t.forEach(t),A9o=r(w$e," (Megatron-BERT model)"),w$e.forEach(t),L9o=i(W),J1=n(W,"LI",{});var A$e=s(J1);Pme=n(A$e,"STRONG",{});var C_t=s(Pme);y9o=r(C_t,"openai-gpt"),C_t.forEach(t),x9o=r(A$e," \u2014 "),kG=n(A$e,"A",{href:!0});var w_t=s(kG);$9o=r(w_t,"OpenAIGPTLMHeadModel"),w_t.forEach(t),k9o=r(A$e," (OpenAI GPT model)"),A$e.forEach(t),S9o=i(W),Y1=n(W,"LI",{});var L$e=s(Y1);Bme=n(L$e,"STRONG",{});var A_t=s(Bme);R9o=r(A_t,"opt"),A_t.forEach(t),P9o=r(L$e," \u2014 "),SG=n(L$e,"A",{href:!0});var L_t=s(SG);B9o=r(L_t,"OPTForCausalLM"),L_t.forEach(t),I9o=r(L$e," (OPT model)"),L$e.forEach(t),N9o=i(W),K1=n(W,"LI",{});var y$e=s(K1);Ime=n(y$e,"STRONG",{});var y_t=s(Ime);q9o=r(y_t,"pegasus"),y_t.forEach(t),j9o=r(y$e," \u2014 "),RG=n(y$e,"A",{href:!0});var x_t=s(RG);D9o=r(x_t,"PegasusForCausalLM"),x_t.forEach(t),G9o=r(y$e," (Pegasus model)"),y$e.forEach(t),O9o=i(W),Z1=n(W,"LI",{});var x$e=s(Z1);Nme=n(x$e,"STRONG",{});var $_t=s(Nme);V9o=r($_t,"plbart"),$_t.forEach(t),X9o=r(x$e," \u2014 "),PG=n(x$e,"A",{href:!0});var k_t=s(PG);z9o=r(k_t,"PLBartForCausalLM"),k_t.forEach(t),Q9o=r(x$e," (PLBart model)"),x$e.forEach(t),W9o=i(W),e3=n(W,"LI",{});var $$e=s(e3);qme=n($$e,"STRONG",{});var S_t=s(qme);H9o=r(S_t,"prophetnet"),S_t.forEach(t),U9o=r($$e," \u2014 "),BG=n($$e,"A",{href:!0});var R_t=s(BG);J9o=r(R_t,"ProphetNetForCausalLM"),R_t.forEach(t),Y9o=r($$e," (ProphetNet model)"),$$e.forEach(t),K9o=i(W),o3=n(W,"LI",{});var k$e=s(o3);jme=n(k$e,"STRONG",{});var P_t=s(jme);Z9o=r(P_t,"qdqbert"),P_t.forEach(t),exo=r(k$e," \u2014 "),IG=n(k$e,"A",{href:!0});var B_t=s(IG);oxo=r(B_t,"QDQBertLMHeadModel"),B_t.forEach(t),rxo=r(k$e," (QDQBert model)"),k$e.forEach(t),txo=i(W),r3=n(W,"LI",{});var S$e=s(r3);Dme=n(S$e,"STRONG",{});var I_t=s(Dme);axo=r(I_t,"reformer"),I_t.forEach(t),nxo=r(S$e," \u2014 "),NG=n(S$e,"A",{href:!0});var N_t=s(NG);sxo=r(N_t,"ReformerModelWithLMHead"),N_t.forEach(t),lxo=r(S$e," (Reformer model)"),S$e.forEach(t),ixo=i(W),t3=n(W,"LI",{});var R$e=s(t3);Gme=n(R$e,"STRONG",{});var q_t=s(Gme);dxo=r(q_t,"rembert"),q_t.forEach(t),cxo=r(R$e," \u2014 "),qG=n(R$e,"A",{href:!0});var j_t=s(qG);fxo=r(j_t,"RemBertForCausalLM"),j_t.forEach(t),mxo=r(R$e," (RemBERT model)"),R$e.forEach(t),gxo=i(W),a3=n(W,"LI",{});var P$e=s(a3);Ome=n(P$e,"STRONG",{});var D_t=s(Ome);hxo=r(D_t,"roberta"),D_t.forEach(t),pxo=r(P$e," \u2014 "),jG=n(P$e,"A",{href:!0});var G_t=s(jG);_xo=r(G_t,"RobertaForCausalLM"),G_t.forEach(t),uxo=r(P$e," (RoBERTa model)"),P$e.forEach(t),bxo=i(W),n3=n(W,"LI",{});var B$e=s(n3);Vme=n(B$e,"STRONG",{});var O_t=s(Vme);vxo=r(O_t,"roformer"),O_t.forEach(t),Fxo=r(B$e," \u2014 "),DG=n(B$e,"A",{href:!0});var V_t=s(DG);Txo=r(V_t,"RoFormerForCausalLM"),V_t.forEach(t),Mxo=r(B$e," (RoFormer model)"),B$e.forEach(t),Exo=i(W),s3=n(W,"LI",{});var I$e=s(s3);Xme=n(I$e,"STRONG",{});var X_t=s(Xme);Cxo=r(X_t,"speech_to_text_2"),X_t.forEach(t),wxo=r(I$e," \u2014 "),GG=n(I$e,"A",{href:!0});var z_t=s(GG);Axo=r(z_t,"Speech2Text2ForCausalLM"),z_t.forEach(t),Lxo=r(I$e," (Speech2Text2 model)"),I$e.forEach(t),yxo=i(W),l3=n(W,"LI",{});var N$e=s(l3);zme=n(N$e,"STRONG",{});var Q_t=s(zme);xxo=r(Q_t,"transfo-xl"),Q_t.forEach(t),$xo=r(N$e," \u2014 "),OG=n(N$e,"A",{href:!0});var W_t=s(OG);kxo=r(W_t,"TransfoXLLMHeadModel"),W_t.forEach(t),Sxo=r(N$e," (Transformer-XL model)"),N$e.forEach(t),Rxo=i(W),i3=n(W,"LI",{});var q$e=s(i3);Qme=n(q$e,"STRONG",{});var H_t=s(Qme);Pxo=r(H_t,"trocr"),H_t.forEach(t),Bxo=r(q$e," \u2014 "),VG=n(q$e,"A",{href:!0});var U_t=s(VG);Ixo=r(U_t,"TrOCRForCausalLM"),U_t.forEach(t),Nxo=r(q$e," (TrOCR model)"),q$e.forEach(t),qxo=i(W),d3=n(W,"LI",{});var j$e=s(d3);Wme=n(j$e,"STRONG",{});var J_t=s(Wme);jxo=r(J_t,"xglm"),J_t.forEach(t),Dxo=r(j$e," \u2014 "),XG=n(j$e,"A",{href:!0});var Y_t=s(XG);Gxo=r(Y_t,"XGLMForCausalLM"),Y_t.forEach(t),Oxo=r(j$e," (XGLM model)"),j$e.forEach(t),Vxo=i(W),c3=n(W,"LI",{});var D$e=s(c3);Hme=n(D$e,"STRONG",{});var K_t=s(Hme);Xxo=r(K_t,"xlm"),K_t.forEach(t),zxo=r(D$e," \u2014 "),zG=n(D$e,"A",{href:!0});var Z_t=s(zG);Qxo=r(Z_t,"XLMWithLMHeadModel"),Z_t.forEach(t),Wxo=r(D$e," (XLM model)"),D$e.forEach(t),Hxo=i(W),f3=n(W,"LI",{});var G$e=s(f3);Ume=n(G$e,"STRONG",{});var eut=s(Ume);Uxo=r(eut,"xlm-prophetnet"),eut.forEach(t),Jxo=r(G$e," \u2014 "),QG=n(G$e,"A",{href:!0});var out=s(QG);Yxo=r(out,"XLMProphetNetForCausalLM"),out.forEach(t),Kxo=r(G$e," (XLM-ProphetNet model)"),G$e.forEach(t),Zxo=i(W),m3=n(W,"LI",{});var O$e=s(m3);Jme=n(O$e,"STRONG",{});var rut=s(Jme);e$o=r(rut,"xlm-roberta"),rut.forEach(t),o$o=r(O$e," \u2014 "),WG=n(O$e,"A",{href:!0});var tut=s(WG);r$o=r(tut,"XLMRobertaForCausalLM"),tut.forEach(t),t$o=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),a$o=i(W),g3=n(W,"LI",{});var V$e=s(g3);Yme=n(V$e,"STRONG",{});var aut=s(Yme);n$o=r(aut,"xlm-roberta-xl"),aut.forEach(t),s$o=r(V$e," \u2014 "),HG=n(V$e,"A",{href:!0});var nut=s(HG);l$o=r(nut,"XLMRobertaXLForCausalLM"),nut.forEach(t),i$o=r(V$e," (XLM-RoBERTa-XL model)"),V$e.forEach(t),d$o=i(W),h3=n(W,"LI",{});var X$e=s(h3);Kme=n(X$e,"STRONG",{});var sut=s(Kme);c$o=r(sut,"xlnet"),sut.forEach(t),f$o=r(X$e," \u2014 "),UG=n(X$e,"A",{href:!0});var lut=s(UG);m$o=r(lut,"XLNetLMHeadModel"),lut.forEach(t),g$o=r(X$e," (XLNet model)"),X$e.forEach(t),W.forEach(t),h$o=i(sa),p3=n(sa,"P",{});var z$e=s(p3);p$o=r(z$e,"The model is set in evaluation mode by default using "),Zme=n(z$e,"CODE",{});var iut=s(Zme);_$o=r(iut,"model.eval()"),iut.forEach(t),u$o=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(z$e,"CODE",{});var dut=s(ege);b$o=r(dut,"model.train()"),dut.forEach(t),z$e.forEach(t),v$o=i(sa),T(_3.$$.fragment,sa),sa.forEach(t),el.forEach(t),wOe=i(f),zi=n(f,"H2",{class:!0});var kXe=s(zi);u3=n(kXe,"A",{id:!0,class:!0,href:!0});var cut=s(u3);oge=n(cut,"SPAN",{});var fut=s(oge);T(Ty.$$.fragment,fut),fut.forEach(t),cut.forEach(t),F$o=i(kXe),rge=n(kXe,"SPAN",{});var mut=s(rge);T$o=r(mut,"AutoModelForMaskedLM"),mut.forEach(t),kXe.forEach(t),AOe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(My.$$.fragment,ol),M$o=i(ol),Qi=n(ol,"P",{});var Noe=s(Qi);E$o=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JG=n(Noe,"A",{href:!0});var gut=s(JG);C$o=r(gut,"from_pretrained()"),gut.forEach(t),w$o=r(Noe," class method or the "),YG=n(Noe,"A",{href:!0});var hut=s(YG);A$o=r(hut,"from_config()"),hut.forEach(t),L$o=r(Noe,` class
method.`),Noe.forEach(t),y$o=i(ol),Ey=n(ol,"P",{});var SXe=s(Ey);x$o=r(SXe,"This class cannot be instantiated directly using "),tge=n(SXe,"CODE",{});var put=s(tge);$$o=r(put,"__init__()"),put.forEach(t),k$o=r(SXe," (throws an error)."),SXe.forEach(t),S$o=i(ol),it=n(ol,"DIV",{class:!0});var OA=s(it);T(Cy.$$.fragment,OA),R$o=i(OA),age=n(OA,"P",{});var _ut=s(age);P$o=r(_ut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_ut.forEach(t),B$o=i(OA),Wi=n(OA,"P",{});var qoe=s(Wi);I$o=r(qoe,`Note:
Loading a model from its configuration file does `),nge=n(qoe,"STRONG",{});var uut=s(nge);N$o=r(uut,"not"),uut.forEach(t),q$o=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(qoe,"A",{href:!0});var but=s(KG);j$o=r(but,"from_pretrained()"),but.forEach(t),D$o=r(qoe," to load the model weights."),qoe.forEach(t),G$o=i(OA),T(b3.$$.fragment,OA),OA.forEach(t),O$o=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(wy.$$.fragment,la),V$o=i(la),sge=n(la,"P",{});var vut=s(sge);X$o=r(vut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vut.forEach(t),z$o=i(la),Ia=n(la,"P",{});var VA=s(Ia);Q$o=r(VA,"The model class to instantiate is selected based on the "),lge=n(VA,"CODE",{});var Fut=s(lge);W$o=r(Fut,"model_type"),Fut.forEach(t),H$o=r(VA,` property of the config object (either
passed as an argument or loaded from `),ige=n(VA,"CODE",{});var Tut=s(ige);U$o=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),J$o=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(VA,"CODE",{});var Mut=s(dge);Y$o=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),K$o=r(VA,":"),VA.forEach(t),Z$o=i(la),Q=n(la,"UL",{});var U=s(Q);v3=n(U,"LI",{});var Q$e=s(v3);cge=n(Q$e,"STRONG",{});var Eut=s(cge);eko=r(Eut,"albert"),Eut.forEach(t),oko=r(Q$e," \u2014 "),ZG=n(Q$e,"A",{href:!0});var Cut=s(ZG);rko=r(Cut,"AlbertForMaskedLM"),Cut.forEach(t),tko=r(Q$e," (ALBERT model)"),Q$e.forEach(t),ako=i(U),F3=n(U,"LI",{});var W$e=s(F3);fge=n(W$e,"STRONG",{});var wut=s(fge);nko=r(wut,"bart"),wut.forEach(t),sko=r(W$e," \u2014 "),eO=n(W$e,"A",{href:!0});var Aut=s(eO);lko=r(Aut,"BartForConditionalGeneration"),Aut.forEach(t),iko=r(W$e," (BART model)"),W$e.forEach(t),dko=i(U),T3=n(U,"LI",{});var H$e=s(T3);mge=n(H$e,"STRONG",{});var Lut=s(mge);cko=r(Lut,"bert"),Lut.forEach(t),fko=r(H$e," \u2014 "),oO=n(H$e,"A",{href:!0});var yut=s(oO);mko=r(yut,"BertForMaskedLM"),yut.forEach(t),gko=r(H$e," (BERT model)"),H$e.forEach(t),hko=i(U),M3=n(U,"LI",{});var U$e=s(M3);gge=n(U$e,"STRONG",{});var xut=s(gge);pko=r(xut,"big_bird"),xut.forEach(t),_ko=r(U$e," \u2014 "),rO=n(U$e,"A",{href:!0});var $ut=s(rO);uko=r($ut,"BigBirdForMaskedLM"),$ut.forEach(t),bko=r(U$e," (BigBird model)"),U$e.forEach(t),vko=i(U),E3=n(U,"LI",{});var J$e=s(E3);hge=n(J$e,"STRONG",{});var kut=s(hge);Fko=r(kut,"camembert"),kut.forEach(t),Tko=r(J$e," \u2014 "),tO=n(J$e,"A",{href:!0});var Sut=s(tO);Mko=r(Sut,"CamembertForMaskedLM"),Sut.forEach(t),Eko=r(J$e," (CamemBERT model)"),J$e.forEach(t),Cko=i(U),C3=n(U,"LI",{});var Y$e=s(C3);pge=n(Y$e,"STRONG",{});var Rut=s(pge);wko=r(Rut,"convbert"),Rut.forEach(t),Ako=r(Y$e," \u2014 "),aO=n(Y$e,"A",{href:!0});var Put=s(aO);Lko=r(Put,"ConvBertForMaskedLM"),Put.forEach(t),yko=r(Y$e," (ConvBERT model)"),Y$e.forEach(t),xko=i(U),w3=n(U,"LI",{});var K$e=s(w3);_ge=n(K$e,"STRONG",{});var But=s(_ge);$ko=r(But,"data2vec-text"),But.forEach(t),kko=r(K$e," \u2014 "),nO=n(K$e,"A",{href:!0});var Iut=s(nO);Sko=r(Iut,"Data2VecTextForMaskedLM"),Iut.forEach(t),Rko=r(K$e," (Data2VecText model)"),K$e.forEach(t),Pko=i(U),A3=n(U,"LI",{});var Z$e=s(A3);uge=n(Z$e,"STRONG",{});var Nut=s(uge);Bko=r(Nut,"deberta"),Nut.forEach(t),Iko=r(Z$e," \u2014 "),sO=n(Z$e,"A",{href:!0});var qut=s(sO);Nko=r(qut,"DebertaForMaskedLM"),qut.forEach(t),qko=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),jko=i(U),L3=n(U,"LI",{});var eke=s(L3);bge=n(eke,"STRONG",{});var jut=s(bge);Dko=r(jut,"deberta-v2"),jut.forEach(t),Gko=r(eke," \u2014 "),lO=n(eke,"A",{href:!0});var Dut=s(lO);Oko=r(Dut,"DebertaV2ForMaskedLM"),Dut.forEach(t),Vko=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),Xko=i(U),y3=n(U,"LI",{});var oke=s(y3);vge=n(oke,"STRONG",{});var Gut=s(vge);zko=r(Gut,"distilbert"),Gut.forEach(t),Qko=r(oke," \u2014 "),iO=n(oke,"A",{href:!0});var Out=s(iO);Wko=r(Out,"DistilBertForMaskedLM"),Out.forEach(t),Hko=r(oke," (DistilBERT model)"),oke.forEach(t),Uko=i(U),x3=n(U,"LI",{});var rke=s(x3);Fge=n(rke,"STRONG",{});var Vut=s(Fge);Jko=r(Vut,"electra"),Vut.forEach(t),Yko=r(rke," \u2014 "),dO=n(rke,"A",{href:!0});var Xut=s(dO);Kko=r(Xut,"ElectraForMaskedLM"),Xut.forEach(t),Zko=r(rke," (ELECTRA model)"),rke.forEach(t),eSo=i(U),$3=n(U,"LI",{});var tke=s($3);Tge=n(tke,"STRONG",{});var zut=s(Tge);oSo=r(zut,"flaubert"),zut.forEach(t),rSo=r(tke," \u2014 "),cO=n(tke,"A",{href:!0});var Qut=s(cO);tSo=r(Qut,"FlaubertWithLMHeadModel"),Qut.forEach(t),aSo=r(tke," (FlauBERT model)"),tke.forEach(t),nSo=i(U),k3=n(U,"LI",{});var ake=s(k3);Mge=n(ake,"STRONG",{});var Wut=s(Mge);sSo=r(Wut,"fnet"),Wut.forEach(t),lSo=r(ake," \u2014 "),fO=n(ake,"A",{href:!0});var Hut=s(fO);iSo=r(Hut,"FNetForMaskedLM"),Hut.forEach(t),dSo=r(ake," (FNet model)"),ake.forEach(t),cSo=i(U),S3=n(U,"LI",{});var nke=s(S3);Ege=n(nke,"STRONG",{});var Uut=s(Ege);fSo=r(Uut,"funnel"),Uut.forEach(t),mSo=r(nke," \u2014 "),mO=n(nke,"A",{href:!0});var Jut=s(mO);gSo=r(Jut,"FunnelForMaskedLM"),Jut.forEach(t),hSo=r(nke," (Funnel Transformer model)"),nke.forEach(t),pSo=i(U),R3=n(U,"LI",{});var ske=s(R3);Cge=n(ske,"STRONG",{});var Yut=s(Cge);_So=r(Yut,"ibert"),Yut.forEach(t),uSo=r(ske," \u2014 "),gO=n(ske,"A",{href:!0});var Kut=s(gO);bSo=r(Kut,"IBertForMaskedLM"),Kut.forEach(t),vSo=r(ske," (I-BERT model)"),ske.forEach(t),FSo=i(U),P3=n(U,"LI",{});var lke=s(P3);wge=n(lke,"STRONG",{});var Zut=s(wge);TSo=r(Zut,"layoutlm"),Zut.forEach(t),MSo=r(lke," \u2014 "),hO=n(lke,"A",{href:!0});var e1t=s(hO);ESo=r(e1t,"LayoutLMForMaskedLM"),e1t.forEach(t),CSo=r(lke," (LayoutLM model)"),lke.forEach(t),wSo=i(U),B3=n(U,"LI",{});var ike=s(B3);Age=n(ike,"STRONG",{});var o1t=s(Age);ASo=r(o1t,"longformer"),o1t.forEach(t),LSo=r(ike," \u2014 "),pO=n(ike,"A",{href:!0});var r1t=s(pO);ySo=r(r1t,"LongformerForMaskedLM"),r1t.forEach(t),xSo=r(ike," (Longformer model)"),ike.forEach(t),$So=i(U),I3=n(U,"LI",{});var dke=s(I3);Lge=n(dke,"STRONG",{});var t1t=s(Lge);kSo=r(t1t,"luke"),t1t.forEach(t),SSo=r(dke," \u2014 "),_O=n(dke,"A",{href:!0});var a1t=s(_O);RSo=r(a1t,"LukeForMaskedLM"),a1t.forEach(t),PSo=r(dke," (LUKE model)"),dke.forEach(t),BSo=i(U),N3=n(U,"LI",{});var cke=s(N3);yge=n(cke,"STRONG",{});var n1t=s(yge);ISo=r(n1t,"mbart"),n1t.forEach(t),NSo=r(cke," \u2014 "),uO=n(cke,"A",{href:!0});var s1t=s(uO);qSo=r(s1t,"MBartForConditionalGeneration"),s1t.forEach(t),jSo=r(cke," (mBART model)"),cke.forEach(t),DSo=i(U),q3=n(U,"LI",{});var fke=s(q3);xge=n(fke,"STRONG",{});var l1t=s(xge);GSo=r(l1t,"megatron-bert"),l1t.forEach(t),OSo=r(fke," \u2014 "),bO=n(fke,"A",{href:!0});var i1t=s(bO);VSo=r(i1t,"MegatronBertForMaskedLM"),i1t.forEach(t),XSo=r(fke," (Megatron-BERT model)"),fke.forEach(t),zSo=i(U),j3=n(U,"LI",{});var mke=s(j3);$ge=n(mke,"STRONG",{});var d1t=s($ge);QSo=r(d1t,"mobilebert"),d1t.forEach(t),WSo=r(mke," \u2014 "),vO=n(mke,"A",{href:!0});var c1t=s(vO);HSo=r(c1t,"MobileBertForMaskedLM"),c1t.forEach(t),USo=r(mke," (MobileBERT model)"),mke.forEach(t),JSo=i(U),D3=n(U,"LI",{});var gke=s(D3);kge=n(gke,"STRONG",{});var f1t=s(kge);YSo=r(f1t,"mpnet"),f1t.forEach(t),KSo=r(gke," \u2014 "),FO=n(gke,"A",{href:!0});var m1t=s(FO);ZSo=r(m1t,"MPNetForMaskedLM"),m1t.forEach(t),eRo=r(gke," (MPNet model)"),gke.forEach(t),oRo=i(U),G3=n(U,"LI",{});var hke=s(G3);Sge=n(hke,"STRONG",{});var g1t=s(Sge);rRo=r(g1t,"nezha"),g1t.forEach(t),tRo=r(hke," \u2014 "),TO=n(hke,"A",{href:!0});var h1t=s(TO);aRo=r(h1t,"NezhaForMaskedLM"),h1t.forEach(t),nRo=r(hke," (Nezha model)"),hke.forEach(t),sRo=i(U),O3=n(U,"LI",{});var pke=s(O3);Rge=n(pke,"STRONG",{});var p1t=s(Rge);lRo=r(p1t,"nystromformer"),p1t.forEach(t),iRo=r(pke," \u2014 "),MO=n(pke,"A",{href:!0});var _1t=s(MO);dRo=r(_1t,"NystromformerForMaskedLM"),_1t.forEach(t),cRo=r(pke," (Nystr\xF6mformer model)"),pke.forEach(t),fRo=i(U),V3=n(U,"LI",{});var _ke=s(V3);Pge=n(_ke,"STRONG",{});var u1t=s(Pge);mRo=r(u1t,"perceiver"),u1t.forEach(t),gRo=r(_ke," \u2014 "),EO=n(_ke,"A",{href:!0});var b1t=s(EO);hRo=r(b1t,"PerceiverForMaskedLM"),b1t.forEach(t),pRo=r(_ke," (Perceiver model)"),_ke.forEach(t),_Ro=i(U),X3=n(U,"LI",{});var uke=s(X3);Bge=n(uke,"STRONG",{});var v1t=s(Bge);uRo=r(v1t,"qdqbert"),v1t.forEach(t),bRo=r(uke," \u2014 "),CO=n(uke,"A",{href:!0});var F1t=s(CO);vRo=r(F1t,"QDQBertForMaskedLM"),F1t.forEach(t),FRo=r(uke," (QDQBert model)"),uke.forEach(t),TRo=i(U),z3=n(U,"LI",{});var bke=s(z3);Ige=n(bke,"STRONG",{});var T1t=s(Ige);MRo=r(T1t,"reformer"),T1t.forEach(t),ERo=r(bke," \u2014 "),wO=n(bke,"A",{href:!0});var M1t=s(wO);CRo=r(M1t,"ReformerForMaskedLM"),M1t.forEach(t),wRo=r(bke," (Reformer model)"),bke.forEach(t),ARo=i(U),Q3=n(U,"LI",{});var vke=s(Q3);Nge=n(vke,"STRONG",{});var E1t=s(Nge);LRo=r(E1t,"rembert"),E1t.forEach(t),yRo=r(vke," \u2014 "),AO=n(vke,"A",{href:!0});var C1t=s(AO);xRo=r(C1t,"RemBertForMaskedLM"),C1t.forEach(t),$Ro=r(vke," (RemBERT model)"),vke.forEach(t),kRo=i(U),W3=n(U,"LI",{});var Fke=s(W3);qge=n(Fke,"STRONG",{});var w1t=s(qge);SRo=r(w1t,"roberta"),w1t.forEach(t),RRo=r(Fke," \u2014 "),LO=n(Fke,"A",{href:!0});var A1t=s(LO);PRo=r(A1t,"RobertaForMaskedLM"),A1t.forEach(t),BRo=r(Fke," (RoBERTa model)"),Fke.forEach(t),IRo=i(U),H3=n(U,"LI",{});var Tke=s(H3);jge=n(Tke,"STRONG",{});var L1t=s(jge);NRo=r(L1t,"roformer"),L1t.forEach(t),qRo=r(Tke," \u2014 "),yO=n(Tke,"A",{href:!0});var y1t=s(yO);jRo=r(y1t,"RoFormerForMaskedLM"),y1t.forEach(t),DRo=r(Tke," (RoFormer model)"),Tke.forEach(t),GRo=i(U),U3=n(U,"LI",{});var Mke=s(U3);Dge=n(Mke,"STRONG",{});var x1t=s(Dge);ORo=r(x1t,"squeezebert"),x1t.forEach(t),VRo=r(Mke," \u2014 "),xO=n(Mke,"A",{href:!0});var $1t=s(xO);XRo=r($1t,"SqueezeBertForMaskedLM"),$1t.forEach(t),zRo=r(Mke," (SqueezeBERT model)"),Mke.forEach(t),QRo=i(U),J3=n(U,"LI",{});var Eke=s(J3);Gge=n(Eke,"STRONG",{});var k1t=s(Gge);WRo=r(k1t,"tapas"),k1t.forEach(t),HRo=r(Eke," \u2014 "),$O=n(Eke,"A",{href:!0});var S1t=s($O);URo=r(S1t,"TapasForMaskedLM"),S1t.forEach(t),JRo=r(Eke," (TAPAS model)"),Eke.forEach(t),YRo=i(U),Y3=n(U,"LI",{});var Cke=s(Y3);Oge=n(Cke,"STRONG",{});var R1t=s(Oge);KRo=r(R1t,"wav2vec2"),R1t.forEach(t),ZRo=r(Cke," \u2014 "),Vge=n(Cke,"CODE",{});var P1t=s(Vge);ePo=r(P1t,"Wav2Vec2ForMaskedLM"),P1t.forEach(t),oPo=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),rPo=i(U),K3=n(U,"LI",{});var wke=s(K3);Xge=n(wke,"STRONG",{});var B1t=s(Xge);tPo=r(B1t,"xlm"),B1t.forEach(t),aPo=r(wke," \u2014 "),kO=n(wke,"A",{href:!0});var I1t=s(kO);nPo=r(I1t,"XLMWithLMHeadModel"),I1t.forEach(t),sPo=r(wke," (XLM model)"),wke.forEach(t),lPo=i(U),Z3=n(U,"LI",{});var Ake=s(Z3);zge=n(Ake,"STRONG",{});var N1t=s(zge);iPo=r(N1t,"xlm-roberta"),N1t.forEach(t),dPo=r(Ake," \u2014 "),SO=n(Ake,"A",{href:!0});var q1t=s(SO);cPo=r(q1t,"XLMRobertaForMaskedLM"),q1t.forEach(t),fPo=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),mPo=i(U),e2=n(U,"LI",{});var Lke=s(e2);Qge=n(Lke,"STRONG",{});var j1t=s(Qge);gPo=r(j1t,"xlm-roberta-xl"),j1t.forEach(t),hPo=r(Lke," \u2014 "),RO=n(Lke,"A",{href:!0});var D1t=s(RO);pPo=r(D1t,"XLMRobertaXLForMaskedLM"),D1t.forEach(t),_Po=r(Lke," (XLM-RoBERTa-XL model)"),Lke.forEach(t),uPo=i(U),o2=n(U,"LI",{});var yke=s(o2);Wge=n(yke,"STRONG",{});var G1t=s(Wge);bPo=r(G1t,"yoso"),G1t.forEach(t),vPo=r(yke," \u2014 "),PO=n(yke,"A",{href:!0});var O1t=s(PO);FPo=r(O1t,"YosoForMaskedLM"),O1t.forEach(t),TPo=r(yke," (YOSO model)"),yke.forEach(t),U.forEach(t),MPo=i(la),r2=n(la,"P",{});var xke=s(r2);EPo=r(xke,"The model is set in evaluation mode by default using "),Hge=n(xke,"CODE",{});var V1t=s(Hge);CPo=r(V1t,"model.eval()"),V1t.forEach(t),wPo=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(xke,"CODE",{});var X1t=s(Uge);APo=r(X1t,"model.train()"),X1t.forEach(t),xke.forEach(t),LPo=i(la),T(t2.$$.fragment,la),la.forEach(t),ol.forEach(t),LOe=i(f),Hi=n(f,"H2",{class:!0});var RXe=s(Hi);a2=n(RXe,"A",{id:!0,class:!0,href:!0});var z1t=s(a2);Jge=n(z1t,"SPAN",{});var Q1t=s(Jge);T(Ay.$$.fragment,Q1t),Q1t.forEach(t),z1t.forEach(t),yPo=i(RXe),Yge=n(RXe,"SPAN",{});var W1t=s(Yge);xPo=r(W1t,"AutoModelForSeq2SeqLM"),W1t.forEach(t),RXe.forEach(t),yOe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(Ly.$$.fragment,rl),$Po=i(rl),Ui=n(rl,"P",{});var joe=s(Ui);kPo=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BO=n(joe,"A",{href:!0});var H1t=s(BO);SPo=r(H1t,"from_pretrained()"),H1t.forEach(t),RPo=r(joe," class method or the "),IO=n(joe,"A",{href:!0});var U1t=s(IO);PPo=r(U1t,"from_config()"),U1t.forEach(t),BPo=r(joe,` class
method.`),joe.forEach(t),IPo=i(rl),yy=n(rl,"P",{});var PXe=s(yy);NPo=r(PXe,"This class cannot be instantiated directly using "),Kge=n(PXe,"CODE",{});var J1t=s(Kge);qPo=r(J1t,"__init__()"),J1t.forEach(t),jPo=r(PXe," (throws an error)."),PXe.forEach(t),DPo=i(rl),dt=n(rl,"DIV",{class:!0});var XA=s(dt);T(xy.$$.fragment,XA),GPo=i(XA),Zge=n(XA,"P",{});var Y1t=s(Zge);OPo=r(Y1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y1t.forEach(t),VPo=i(XA),Ji=n(XA,"P",{});var Doe=s(Ji);XPo=r(Doe,`Note:
Loading a model from its configuration file does `),ehe=n(Doe,"STRONG",{});var K1t=s(ehe);zPo=r(K1t,"not"),K1t.forEach(t),QPo=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(Doe,"A",{href:!0});var Z1t=s(NO);WPo=r(Z1t,"from_pretrained()"),Z1t.forEach(t),HPo=r(Doe," to load the model weights."),Doe.forEach(t),UPo=i(XA),T(n2.$$.fragment,XA),XA.forEach(t),JPo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T($y.$$.fragment,ia),YPo=i(ia),ohe=n(ia,"P",{});var e3t=s(ohe);KPo=r(e3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e3t.forEach(t),ZPo=i(ia),Na=n(ia,"P",{});var zA=s(Na);eBo=r(zA,"The model class to instantiate is selected based on the "),rhe=n(zA,"CODE",{});var o3t=s(rhe);oBo=r(o3t,"model_type"),o3t.forEach(t),rBo=r(zA,` property of the config object (either
passed as an argument or loaded from `),the=n(zA,"CODE",{});var r3t=s(the);tBo=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),aBo=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(zA,"CODE",{});var t3t=s(ahe);nBo=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),sBo=r(zA,":"),zA.forEach(t),lBo=i(ia),pe=n(ia,"UL",{});var be=s(pe);s2=n(be,"LI",{});var $ke=s(s2);nhe=n($ke,"STRONG",{});var a3t=s(nhe);iBo=r(a3t,"bart"),a3t.forEach(t),dBo=r($ke," \u2014 "),qO=n($ke,"A",{href:!0});var n3t=s(qO);cBo=r(n3t,"BartForConditionalGeneration"),n3t.forEach(t),fBo=r($ke," (BART model)"),$ke.forEach(t),mBo=i(be),l2=n(be,"LI",{});var kke=s(l2);she=n(kke,"STRONG",{});var s3t=s(she);gBo=r(s3t,"bigbird_pegasus"),s3t.forEach(t),hBo=r(kke," \u2014 "),jO=n(kke,"A",{href:!0});var l3t=s(jO);pBo=r(l3t,"BigBirdPegasusForConditionalGeneration"),l3t.forEach(t),_Bo=r(kke," (BigBird-Pegasus model)"),kke.forEach(t),uBo=i(be),i2=n(be,"LI",{});var Ske=s(i2);lhe=n(Ske,"STRONG",{});var i3t=s(lhe);bBo=r(i3t,"blenderbot"),i3t.forEach(t),vBo=r(Ske," \u2014 "),DO=n(Ske,"A",{href:!0});var d3t=s(DO);FBo=r(d3t,"BlenderbotForConditionalGeneration"),d3t.forEach(t),TBo=r(Ske," (Blenderbot model)"),Ske.forEach(t),MBo=i(be),d2=n(be,"LI",{});var Rke=s(d2);ihe=n(Rke,"STRONG",{});var c3t=s(ihe);EBo=r(c3t,"blenderbot-small"),c3t.forEach(t),CBo=r(Rke," \u2014 "),GO=n(Rke,"A",{href:!0});var f3t=s(GO);wBo=r(f3t,"BlenderbotSmallForConditionalGeneration"),f3t.forEach(t),ABo=r(Rke," (BlenderbotSmall model)"),Rke.forEach(t),LBo=i(be),c2=n(be,"LI",{});var Pke=s(c2);dhe=n(Pke,"STRONG",{});var m3t=s(dhe);yBo=r(m3t,"encoder-decoder"),m3t.forEach(t),xBo=r(Pke," \u2014 "),OO=n(Pke,"A",{href:!0});var g3t=s(OO);$Bo=r(g3t,"EncoderDecoderModel"),g3t.forEach(t),kBo=r(Pke," (Encoder decoder model)"),Pke.forEach(t),SBo=i(be),f2=n(be,"LI",{});var Bke=s(f2);che=n(Bke,"STRONG",{});var h3t=s(che);RBo=r(h3t,"fsmt"),h3t.forEach(t),PBo=r(Bke," \u2014 "),VO=n(Bke,"A",{href:!0});var p3t=s(VO);BBo=r(p3t,"FSMTForConditionalGeneration"),p3t.forEach(t),IBo=r(Bke," (FairSeq Machine-Translation model)"),Bke.forEach(t),NBo=i(be),m2=n(be,"LI",{});var Ike=s(m2);fhe=n(Ike,"STRONG",{});var _3t=s(fhe);qBo=r(_3t,"led"),_3t.forEach(t),jBo=r(Ike," \u2014 "),XO=n(Ike,"A",{href:!0});var u3t=s(XO);DBo=r(u3t,"LEDForConditionalGeneration"),u3t.forEach(t),GBo=r(Ike," (LED model)"),Ike.forEach(t),OBo=i(be),g2=n(be,"LI",{});var Nke=s(g2);mhe=n(Nke,"STRONG",{});var b3t=s(mhe);VBo=r(b3t,"longt5"),b3t.forEach(t),XBo=r(Nke," \u2014 "),zO=n(Nke,"A",{href:!0});var v3t=s(zO);zBo=r(v3t,"LongT5ForConditionalGeneration"),v3t.forEach(t),QBo=r(Nke," (LongT5 model)"),Nke.forEach(t),WBo=i(be),h2=n(be,"LI",{});var qke=s(h2);ghe=n(qke,"STRONG",{});var F3t=s(ghe);HBo=r(F3t,"m2m_100"),F3t.forEach(t),UBo=r(qke," \u2014 "),QO=n(qke,"A",{href:!0});var T3t=s(QO);JBo=r(T3t,"M2M100ForConditionalGeneration"),T3t.forEach(t),YBo=r(qke," (M2M100 model)"),qke.forEach(t),KBo=i(be),p2=n(be,"LI",{});var jke=s(p2);hhe=n(jke,"STRONG",{});var M3t=s(hhe);ZBo=r(M3t,"marian"),M3t.forEach(t),eIo=r(jke," \u2014 "),WO=n(jke,"A",{href:!0});var E3t=s(WO);oIo=r(E3t,"MarianMTModel"),E3t.forEach(t),rIo=r(jke," (Marian model)"),jke.forEach(t),tIo=i(be),_2=n(be,"LI",{});var Dke=s(_2);phe=n(Dke,"STRONG",{});var C3t=s(phe);aIo=r(C3t,"mbart"),C3t.forEach(t),nIo=r(Dke," \u2014 "),HO=n(Dke,"A",{href:!0});var w3t=s(HO);sIo=r(w3t,"MBartForConditionalGeneration"),w3t.forEach(t),lIo=r(Dke," (mBART model)"),Dke.forEach(t),iIo=i(be),u2=n(be,"LI",{});var Gke=s(u2);_he=n(Gke,"STRONG",{});var A3t=s(_he);dIo=r(A3t,"mt5"),A3t.forEach(t),cIo=r(Gke," \u2014 "),UO=n(Gke,"A",{href:!0});var L3t=s(UO);fIo=r(L3t,"MT5ForConditionalGeneration"),L3t.forEach(t),mIo=r(Gke," (MT5 model)"),Gke.forEach(t),gIo=i(be),b2=n(be,"LI",{});var Oke=s(b2);uhe=n(Oke,"STRONG",{});var y3t=s(uhe);hIo=r(y3t,"pegasus"),y3t.forEach(t),pIo=r(Oke," \u2014 "),JO=n(Oke,"A",{href:!0});var x3t=s(JO);_Io=r(x3t,"PegasusForConditionalGeneration"),x3t.forEach(t),uIo=r(Oke," (Pegasus model)"),Oke.forEach(t),bIo=i(be),v2=n(be,"LI",{});var Vke=s(v2);bhe=n(Vke,"STRONG",{});var $3t=s(bhe);vIo=r($3t,"plbart"),$3t.forEach(t),FIo=r(Vke," \u2014 "),YO=n(Vke,"A",{href:!0});var k3t=s(YO);TIo=r(k3t,"PLBartForConditionalGeneration"),k3t.forEach(t),MIo=r(Vke," (PLBart model)"),Vke.forEach(t),EIo=i(be),F2=n(be,"LI",{});var Xke=s(F2);vhe=n(Xke,"STRONG",{});var S3t=s(vhe);CIo=r(S3t,"prophetnet"),S3t.forEach(t),wIo=r(Xke," \u2014 "),KO=n(Xke,"A",{href:!0});var R3t=s(KO);AIo=r(R3t,"ProphetNetForConditionalGeneration"),R3t.forEach(t),LIo=r(Xke," (ProphetNet model)"),Xke.forEach(t),yIo=i(be),T2=n(be,"LI",{});var zke=s(T2);Fhe=n(zke,"STRONG",{});var P3t=s(Fhe);xIo=r(P3t,"t5"),P3t.forEach(t),$Io=r(zke," \u2014 "),ZO=n(zke,"A",{href:!0});var B3t=s(ZO);kIo=r(B3t,"T5ForConditionalGeneration"),B3t.forEach(t),SIo=r(zke," (T5 model)"),zke.forEach(t),RIo=i(be),M2=n(be,"LI",{});var Qke=s(M2);The=n(Qke,"STRONG",{});var I3t=s(The);PIo=r(I3t,"xlm-prophetnet"),I3t.forEach(t),BIo=r(Qke," \u2014 "),eV=n(Qke,"A",{href:!0});var N3t=s(eV);IIo=r(N3t,"XLMProphetNetForConditionalGeneration"),N3t.forEach(t),NIo=r(Qke," (XLM-ProphetNet model)"),Qke.forEach(t),be.forEach(t),qIo=i(ia),E2=n(ia,"P",{});var Wke=s(E2);jIo=r(Wke,"The model is set in evaluation mode by default using "),Mhe=n(Wke,"CODE",{});var q3t=s(Mhe);DIo=r(q3t,"model.eval()"),q3t.forEach(t),GIo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(Wke,"CODE",{});var j3t=s(Ehe);OIo=r(j3t,"model.train()"),j3t.forEach(t),Wke.forEach(t),VIo=i(ia),T(C2.$$.fragment,ia),ia.forEach(t),rl.forEach(t),xOe=i(f),Yi=n(f,"H2",{class:!0});var BXe=s(Yi);w2=n(BXe,"A",{id:!0,class:!0,href:!0});var D3t=s(w2);Che=n(D3t,"SPAN",{});var G3t=s(Che);T(ky.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),XIo=i(BXe),whe=n(BXe,"SPAN",{});var O3t=s(whe);zIo=r(O3t,"AutoModelForSequenceClassification"),O3t.forEach(t),BXe.forEach(t),$Oe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(Sy.$$.fragment,tl),QIo=i(tl),Ki=n(tl,"P",{});var Goe=s(Ki);WIo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oV=n(Goe,"A",{href:!0});var V3t=s(oV);HIo=r(V3t,"from_pretrained()"),V3t.forEach(t),UIo=r(Goe," class method or the "),rV=n(Goe,"A",{href:!0});var X3t=s(rV);JIo=r(X3t,"from_config()"),X3t.forEach(t),YIo=r(Goe,` class
method.`),Goe.forEach(t),KIo=i(tl),Ry=n(tl,"P",{});var IXe=s(Ry);ZIo=r(IXe,"This class cannot be instantiated directly using "),Ahe=n(IXe,"CODE",{});var z3t=s(Ahe);eNo=r(z3t,"__init__()"),z3t.forEach(t),oNo=r(IXe," (throws an error)."),IXe.forEach(t),rNo=i(tl),ct=n(tl,"DIV",{class:!0});var QA=s(ct);T(Py.$$.fragment,QA),tNo=i(QA),Lhe=n(QA,"P",{});var Q3t=s(Lhe);aNo=r(Q3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q3t.forEach(t),nNo=i(QA),Zi=n(QA,"P",{});var Ooe=s(Zi);sNo=r(Ooe,`Note:
Loading a model from its configuration file does `),yhe=n(Ooe,"STRONG",{});var W3t=s(yhe);lNo=r(W3t,"not"),W3t.forEach(t),iNo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(Ooe,"A",{href:!0});var H3t=s(tV);dNo=r(H3t,"from_pretrained()"),H3t.forEach(t),cNo=r(Ooe," to load the model weights."),Ooe.forEach(t),fNo=i(QA),T(A2.$$.fragment,QA),QA.forEach(t),mNo=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(By.$$.fragment,da),gNo=i(da),xhe=n(da,"P",{});var U3t=s(xhe);hNo=r(U3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U3t.forEach(t),pNo=i(da),qa=n(da,"P",{});var WA=s(qa);_No=r(WA,"The model class to instantiate is selected based on the "),$he=n(WA,"CODE",{});var J3t=s($he);uNo=r(J3t,"model_type"),J3t.forEach(t),bNo=r(WA,` property of the config object (either
passed as an argument or loaded from `),khe=n(WA,"CODE",{});var Y3t=s(khe);vNo=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),FNo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(WA,"CODE",{});var K3t=s(She);TNo=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),MNo=r(WA,":"),WA.forEach(t),ENo=i(da),N=n(da,"UL",{});var q=s(N);L2=n(q,"LI",{});var Hke=s(L2);Rhe=n(Hke,"STRONG",{});var Z3t=s(Rhe);CNo=r(Z3t,"albert"),Z3t.forEach(t),wNo=r(Hke," \u2014 "),aV=n(Hke,"A",{href:!0});var e2t=s(aV);ANo=r(e2t,"AlbertForSequenceClassification"),e2t.forEach(t),LNo=r(Hke," (ALBERT model)"),Hke.forEach(t),yNo=i(q),y2=n(q,"LI",{});var Uke=s(y2);Phe=n(Uke,"STRONG",{});var o2t=s(Phe);xNo=r(o2t,"bart"),o2t.forEach(t),$No=r(Uke," \u2014 "),nV=n(Uke,"A",{href:!0});var r2t=s(nV);kNo=r(r2t,"BartForSequenceClassification"),r2t.forEach(t),SNo=r(Uke," (BART model)"),Uke.forEach(t),RNo=i(q),x2=n(q,"LI",{});var Jke=s(x2);Bhe=n(Jke,"STRONG",{});var t2t=s(Bhe);PNo=r(t2t,"bert"),t2t.forEach(t),BNo=r(Jke," \u2014 "),sV=n(Jke,"A",{href:!0});var a2t=s(sV);INo=r(a2t,"BertForSequenceClassification"),a2t.forEach(t),NNo=r(Jke," (BERT model)"),Jke.forEach(t),qNo=i(q),$2=n(q,"LI",{});var Yke=s($2);Ihe=n(Yke,"STRONG",{});var n2t=s(Ihe);jNo=r(n2t,"big_bird"),n2t.forEach(t),DNo=r(Yke," \u2014 "),lV=n(Yke,"A",{href:!0});var s2t=s(lV);GNo=r(s2t,"BigBirdForSequenceClassification"),s2t.forEach(t),ONo=r(Yke," (BigBird model)"),Yke.forEach(t),VNo=i(q),k2=n(q,"LI",{});var Kke=s(k2);Nhe=n(Kke,"STRONG",{});var l2t=s(Nhe);XNo=r(l2t,"bigbird_pegasus"),l2t.forEach(t),zNo=r(Kke," \u2014 "),iV=n(Kke,"A",{href:!0});var i2t=s(iV);QNo=r(i2t,"BigBirdPegasusForSequenceClassification"),i2t.forEach(t),WNo=r(Kke," (BigBird-Pegasus model)"),Kke.forEach(t),HNo=i(q),S2=n(q,"LI",{});var Zke=s(S2);qhe=n(Zke,"STRONG",{});var d2t=s(qhe);UNo=r(d2t,"bloom"),d2t.forEach(t),JNo=r(Zke," \u2014 "),dV=n(Zke,"A",{href:!0});var c2t=s(dV);YNo=r(c2t,"BloomForSequenceClassification"),c2t.forEach(t),KNo=r(Zke," (BLOOM model)"),Zke.forEach(t),ZNo=i(q),R2=n(q,"LI",{});var eSe=s(R2);jhe=n(eSe,"STRONG",{});var f2t=s(jhe);eqo=r(f2t,"camembert"),f2t.forEach(t),oqo=r(eSe," \u2014 "),cV=n(eSe,"A",{href:!0});var m2t=s(cV);rqo=r(m2t,"CamembertForSequenceClassification"),m2t.forEach(t),tqo=r(eSe," (CamemBERT model)"),eSe.forEach(t),aqo=i(q),P2=n(q,"LI",{});var oSe=s(P2);Dhe=n(oSe,"STRONG",{});var g2t=s(Dhe);nqo=r(g2t,"canine"),g2t.forEach(t),sqo=r(oSe," \u2014 "),fV=n(oSe,"A",{href:!0});var h2t=s(fV);lqo=r(h2t,"CanineForSequenceClassification"),h2t.forEach(t),iqo=r(oSe," (CANINE model)"),oSe.forEach(t),dqo=i(q),B2=n(q,"LI",{});var rSe=s(B2);Ghe=n(rSe,"STRONG",{});var p2t=s(Ghe);cqo=r(p2t,"convbert"),p2t.forEach(t),fqo=r(rSe," \u2014 "),mV=n(rSe,"A",{href:!0});var _2t=s(mV);mqo=r(_2t,"ConvBertForSequenceClassification"),_2t.forEach(t),gqo=r(rSe," (ConvBERT model)"),rSe.forEach(t),hqo=i(q),I2=n(q,"LI",{});var tSe=s(I2);Ohe=n(tSe,"STRONG",{});var u2t=s(Ohe);pqo=r(u2t,"ctrl"),u2t.forEach(t),_qo=r(tSe," \u2014 "),gV=n(tSe,"A",{href:!0});var b2t=s(gV);uqo=r(b2t,"CTRLForSequenceClassification"),b2t.forEach(t),bqo=r(tSe," (CTRL model)"),tSe.forEach(t),vqo=i(q),N2=n(q,"LI",{});var aSe=s(N2);Vhe=n(aSe,"STRONG",{});var v2t=s(Vhe);Fqo=r(v2t,"data2vec-text"),v2t.forEach(t),Tqo=r(aSe," \u2014 "),hV=n(aSe,"A",{href:!0});var F2t=s(hV);Mqo=r(F2t,"Data2VecTextForSequenceClassification"),F2t.forEach(t),Eqo=r(aSe," (Data2VecText model)"),aSe.forEach(t),Cqo=i(q),q2=n(q,"LI",{});var nSe=s(q2);Xhe=n(nSe,"STRONG",{});var T2t=s(Xhe);wqo=r(T2t,"deberta"),T2t.forEach(t),Aqo=r(nSe," \u2014 "),pV=n(nSe,"A",{href:!0});var M2t=s(pV);Lqo=r(M2t,"DebertaForSequenceClassification"),M2t.forEach(t),yqo=r(nSe," (DeBERTa model)"),nSe.forEach(t),xqo=i(q),j2=n(q,"LI",{});var sSe=s(j2);zhe=n(sSe,"STRONG",{});var E2t=s(zhe);$qo=r(E2t,"deberta-v2"),E2t.forEach(t),kqo=r(sSe," \u2014 "),_V=n(sSe,"A",{href:!0});var C2t=s(_V);Sqo=r(C2t,"DebertaV2ForSequenceClassification"),C2t.forEach(t),Rqo=r(sSe," (DeBERTa-v2 model)"),sSe.forEach(t),Pqo=i(q),D2=n(q,"LI",{});var lSe=s(D2);Qhe=n(lSe,"STRONG",{});var w2t=s(Qhe);Bqo=r(w2t,"distilbert"),w2t.forEach(t),Iqo=r(lSe," \u2014 "),uV=n(lSe,"A",{href:!0});var A2t=s(uV);Nqo=r(A2t,"DistilBertForSequenceClassification"),A2t.forEach(t),qqo=r(lSe," (DistilBERT model)"),lSe.forEach(t),jqo=i(q),G2=n(q,"LI",{});var iSe=s(G2);Whe=n(iSe,"STRONG",{});var L2t=s(Whe);Dqo=r(L2t,"electra"),L2t.forEach(t),Gqo=r(iSe," \u2014 "),bV=n(iSe,"A",{href:!0});var y2t=s(bV);Oqo=r(y2t,"ElectraForSequenceClassification"),y2t.forEach(t),Vqo=r(iSe," (ELECTRA model)"),iSe.forEach(t),Xqo=i(q),O2=n(q,"LI",{});var dSe=s(O2);Hhe=n(dSe,"STRONG",{});var x2t=s(Hhe);zqo=r(x2t,"flaubert"),x2t.forEach(t),Qqo=r(dSe," \u2014 "),vV=n(dSe,"A",{href:!0});var $2t=s(vV);Wqo=r($2t,"FlaubertForSequenceClassification"),$2t.forEach(t),Hqo=r(dSe," (FlauBERT model)"),dSe.forEach(t),Uqo=i(q),V2=n(q,"LI",{});var cSe=s(V2);Uhe=n(cSe,"STRONG",{});var k2t=s(Uhe);Jqo=r(k2t,"fnet"),k2t.forEach(t),Yqo=r(cSe," \u2014 "),FV=n(cSe,"A",{href:!0});var S2t=s(FV);Kqo=r(S2t,"FNetForSequenceClassification"),S2t.forEach(t),Zqo=r(cSe," (FNet model)"),cSe.forEach(t),ejo=i(q),X2=n(q,"LI",{});var fSe=s(X2);Jhe=n(fSe,"STRONG",{});var R2t=s(Jhe);ojo=r(R2t,"funnel"),R2t.forEach(t),rjo=r(fSe," \u2014 "),TV=n(fSe,"A",{href:!0});var P2t=s(TV);tjo=r(P2t,"FunnelForSequenceClassification"),P2t.forEach(t),ajo=r(fSe," (Funnel Transformer model)"),fSe.forEach(t),njo=i(q),z2=n(q,"LI",{});var mSe=s(z2);Yhe=n(mSe,"STRONG",{});var B2t=s(Yhe);sjo=r(B2t,"gpt2"),B2t.forEach(t),ljo=r(mSe," \u2014 "),MV=n(mSe,"A",{href:!0});var I2t=s(MV);ijo=r(I2t,"GPT2ForSequenceClassification"),I2t.forEach(t),djo=r(mSe," (OpenAI GPT-2 model)"),mSe.forEach(t),cjo=i(q),Q2=n(q,"LI",{});var gSe=s(Q2);Khe=n(gSe,"STRONG",{});var N2t=s(Khe);fjo=r(N2t,"gpt_neo"),N2t.forEach(t),mjo=r(gSe," \u2014 "),EV=n(gSe,"A",{href:!0});var q2t=s(EV);gjo=r(q2t,"GPTNeoForSequenceClassification"),q2t.forEach(t),hjo=r(gSe," (GPT Neo model)"),gSe.forEach(t),pjo=i(q),W2=n(q,"LI",{});var hSe=s(W2);Zhe=n(hSe,"STRONG",{});var j2t=s(Zhe);_jo=r(j2t,"gptj"),j2t.forEach(t),ujo=r(hSe," \u2014 "),CV=n(hSe,"A",{href:!0});var D2t=s(CV);bjo=r(D2t,"GPTJForSequenceClassification"),D2t.forEach(t),vjo=r(hSe," (GPT-J model)"),hSe.forEach(t),Fjo=i(q),H2=n(q,"LI",{});var pSe=s(H2);epe=n(pSe,"STRONG",{});var G2t=s(epe);Tjo=r(G2t,"ibert"),G2t.forEach(t),Mjo=r(pSe," \u2014 "),wV=n(pSe,"A",{href:!0});var O2t=s(wV);Ejo=r(O2t,"IBertForSequenceClassification"),O2t.forEach(t),Cjo=r(pSe," (I-BERT model)"),pSe.forEach(t),wjo=i(q),U2=n(q,"LI",{});var _Se=s(U2);ope=n(_Se,"STRONG",{});var V2t=s(ope);Ajo=r(V2t,"layoutlm"),V2t.forEach(t),Ljo=r(_Se," \u2014 "),AV=n(_Se,"A",{href:!0});var X2t=s(AV);yjo=r(X2t,"LayoutLMForSequenceClassification"),X2t.forEach(t),xjo=r(_Se," (LayoutLM model)"),_Se.forEach(t),$jo=i(q),J2=n(q,"LI",{});var uSe=s(J2);rpe=n(uSe,"STRONG",{});var z2t=s(rpe);kjo=r(z2t,"layoutlmv2"),z2t.forEach(t),Sjo=r(uSe," \u2014 "),LV=n(uSe,"A",{href:!0});var Q2t=s(LV);Rjo=r(Q2t,"LayoutLMv2ForSequenceClassification"),Q2t.forEach(t),Pjo=r(uSe," (LayoutLMv2 model)"),uSe.forEach(t),Bjo=i(q),Y2=n(q,"LI",{});var bSe=s(Y2);tpe=n(bSe,"STRONG",{});var W2t=s(tpe);Ijo=r(W2t,"layoutlmv3"),W2t.forEach(t),Njo=r(bSe," \u2014 "),yV=n(bSe,"A",{href:!0});var H2t=s(yV);qjo=r(H2t,"LayoutLMv3ForSequenceClassification"),H2t.forEach(t),jjo=r(bSe," (LayoutLMv3 model)"),bSe.forEach(t),Djo=i(q),K2=n(q,"LI",{});var vSe=s(K2);ape=n(vSe,"STRONG",{});var U2t=s(ape);Gjo=r(U2t,"led"),U2t.forEach(t),Ojo=r(vSe," \u2014 "),xV=n(vSe,"A",{href:!0});var J2t=s(xV);Vjo=r(J2t,"LEDForSequenceClassification"),J2t.forEach(t),Xjo=r(vSe," (LED model)"),vSe.forEach(t),zjo=i(q),Z2=n(q,"LI",{});var FSe=s(Z2);npe=n(FSe,"STRONG",{});var Y2t=s(npe);Qjo=r(Y2t,"longformer"),Y2t.forEach(t),Wjo=r(FSe," \u2014 "),$V=n(FSe,"A",{href:!0});var K2t=s($V);Hjo=r(K2t,"LongformerForSequenceClassification"),K2t.forEach(t),Ujo=r(FSe," (Longformer model)"),FSe.forEach(t),Jjo=i(q),eb=n(q,"LI",{});var TSe=s(eb);spe=n(TSe,"STRONG",{});var Z2t=s(spe);Yjo=r(Z2t,"mbart"),Z2t.forEach(t),Kjo=r(TSe," \u2014 "),kV=n(TSe,"A",{href:!0});var ebt=s(kV);Zjo=r(ebt,"MBartForSequenceClassification"),ebt.forEach(t),eDo=r(TSe," (mBART model)"),TSe.forEach(t),oDo=i(q),ob=n(q,"LI",{});var MSe=s(ob);lpe=n(MSe,"STRONG",{});var obt=s(lpe);rDo=r(obt,"megatron-bert"),obt.forEach(t),tDo=r(MSe," \u2014 "),SV=n(MSe,"A",{href:!0});var rbt=s(SV);aDo=r(rbt,"MegatronBertForSequenceClassification"),rbt.forEach(t),nDo=r(MSe," (Megatron-BERT model)"),MSe.forEach(t),sDo=i(q),rb=n(q,"LI",{});var ESe=s(rb);ipe=n(ESe,"STRONG",{});var tbt=s(ipe);lDo=r(tbt,"mobilebert"),tbt.forEach(t),iDo=r(ESe," \u2014 "),RV=n(ESe,"A",{href:!0});var abt=s(RV);dDo=r(abt,"MobileBertForSequenceClassification"),abt.forEach(t),cDo=r(ESe," (MobileBERT model)"),ESe.forEach(t),fDo=i(q),tb=n(q,"LI",{});var CSe=s(tb);dpe=n(CSe,"STRONG",{});var nbt=s(dpe);mDo=r(nbt,"mpnet"),nbt.forEach(t),gDo=r(CSe," \u2014 "),PV=n(CSe,"A",{href:!0});var sbt=s(PV);hDo=r(sbt,"MPNetForSequenceClassification"),sbt.forEach(t),pDo=r(CSe," (MPNet model)"),CSe.forEach(t),_Do=i(q),ab=n(q,"LI",{});var wSe=s(ab);cpe=n(wSe,"STRONG",{});var lbt=s(cpe);uDo=r(lbt,"nezha"),lbt.forEach(t),bDo=r(wSe," \u2014 "),BV=n(wSe,"A",{href:!0});var ibt=s(BV);vDo=r(ibt,"NezhaForSequenceClassification"),ibt.forEach(t),FDo=r(wSe," (Nezha model)"),wSe.forEach(t),TDo=i(q),nb=n(q,"LI",{});var ASe=s(nb);fpe=n(ASe,"STRONG",{});var dbt=s(fpe);MDo=r(dbt,"nystromformer"),dbt.forEach(t),EDo=r(ASe," \u2014 "),IV=n(ASe,"A",{href:!0});var cbt=s(IV);CDo=r(cbt,"NystromformerForSequenceClassification"),cbt.forEach(t),wDo=r(ASe," (Nystr\xF6mformer model)"),ASe.forEach(t),ADo=i(q),sb=n(q,"LI",{});var LSe=s(sb);mpe=n(LSe,"STRONG",{});var fbt=s(mpe);LDo=r(fbt,"openai-gpt"),fbt.forEach(t),yDo=r(LSe," \u2014 "),NV=n(LSe,"A",{href:!0});var mbt=s(NV);xDo=r(mbt,"OpenAIGPTForSequenceClassification"),mbt.forEach(t),$Do=r(LSe," (OpenAI GPT model)"),LSe.forEach(t),kDo=i(q),lb=n(q,"LI",{});var ySe=s(lb);gpe=n(ySe,"STRONG",{});var gbt=s(gpe);SDo=r(gbt,"perceiver"),gbt.forEach(t),RDo=r(ySe," \u2014 "),qV=n(ySe,"A",{href:!0});var hbt=s(qV);PDo=r(hbt,"PerceiverForSequenceClassification"),hbt.forEach(t),BDo=r(ySe," (Perceiver model)"),ySe.forEach(t),IDo=i(q),ib=n(q,"LI",{});var xSe=s(ib);hpe=n(xSe,"STRONG",{});var pbt=s(hpe);NDo=r(pbt,"plbart"),pbt.forEach(t),qDo=r(xSe," \u2014 "),jV=n(xSe,"A",{href:!0});var _bt=s(jV);jDo=r(_bt,"PLBartForSequenceClassification"),_bt.forEach(t),DDo=r(xSe," (PLBart model)"),xSe.forEach(t),GDo=i(q),db=n(q,"LI",{});var $Se=s(db);ppe=n($Se,"STRONG",{});var ubt=s(ppe);ODo=r(ubt,"qdqbert"),ubt.forEach(t),VDo=r($Se," \u2014 "),DV=n($Se,"A",{href:!0});var bbt=s(DV);XDo=r(bbt,"QDQBertForSequenceClassification"),bbt.forEach(t),zDo=r($Se," (QDQBert model)"),$Se.forEach(t),QDo=i(q),cb=n(q,"LI",{});var kSe=s(cb);_pe=n(kSe,"STRONG",{});var vbt=s(_pe);WDo=r(vbt,"reformer"),vbt.forEach(t),HDo=r(kSe," \u2014 "),GV=n(kSe,"A",{href:!0});var Fbt=s(GV);UDo=r(Fbt,"ReformerForSequenceClassification"),Fbt.forEach(t),JDo=r(kSe," (Reformer model)"),kSe.forEach(t),YDo=i(q),fb=n(q,"LI",{});var SSe=s(fb);upe=n(SSe,"STRONG",{});var Tbt=s(upe);KDo=r(Tbt,"rembert"),Tbt.forEach(t),ZDo=r(SSe," \u2014 "),OV=n(SSe,"A",{href:!0});var Mbt=s(OV);eGo=r(Mbt,"RemBertForSequenceClassification"),Mbt.forEach(t),oGo=r(SSe," (RemBERT model)"),SSe.forEach(t),rGo=i(q),mb=n(q,"LI",{});var RSe=s(mb);bpe=n(RSe,"STRONG",{});var Ebt=s(bpe);tGo=r(Ebt,"roberta"),Ebt.forEach(t),aGo=r(RSe," \u2014 "),VV=n(RSe,"A",{href:!0});var Cbt=s(VV);nGo=r(Cbt,"RobertaForSequenceClassification"),Cbt.forEach(t),sGo=r(RSe," (RoBERTa model)"),RSe.forEach(t),lGo=i(q),gb=n(q,"LI",{});var PSe=s(gb);vpe=n(PSe,"STRONG",{});var wbt=s(vpe);iGo=r(wbt,"roformer"),wbt.forEach(t),dGo=r(PSe," \u2014 "),XV=n(PSe,"A",{href:!0});var Abt=s(XV);cGo=r(Abt,"RoFormerForSequenceClassification"),Abt.forEach(t),fGo=r(PSe," (RoFormer model)"),PSe.forEach(t),mGo=i(q),hb=n(q,"LI",{});var BSe=s(hb);Fpe=n(BSe,"STRONG",{});var Lbt=s(Fpe);gGo=r(Lbt,"squeezebert"),Lbt.forEach(t),hGo=r(BSe," \u2014 "),zV=n(BSe,"A",{href:!0});var ybt=s(zV);pGo=r(ybt,"SqueezeBertForSequenceClassification"),ybt.forEach(t),_Go=r(BSe," (SqueezeBERT model)"),BSe.forEach(t),uGo=i(q),pb=n(q,"LI",{});var ISe=s(pb);Tpe=n(ISe,"STRONG",{});var xbt=s(Tpe);bGo=r(xbt,"tapas"),xbt.forEach(t),vGo=r(ISe," \u2014 "),QV=n(ISe,"A",{href:!0});var $bt=s(QV);FGo=r($bt,"TapasForSequenceClassification"),$bt.forEach(t),TGo=r(ISe," (TAPAS model)"),ISe.forEach(t),MGo=i(q),_b=n(q,"LI",{});var NSe=s(_b);Mpe=n(NSe,"STRONG",{});var kbt=s(Mpe);EGo=r(kbt,"transfo-xl"),kbt.forEach(t),CGo=r(NSe," \u2014 "),WV=n(NSe,"A",{href:!0});var Sbt=s(WV);wGo=r(Sbt,"TransfoXLForSequenceClassification"),Sbt.forEach(t),AGo=r(NSe," (Transformer-XL model)"),NSe.forEach(t),LGo=i(q),ub=n(q,"LI",{});var qSe=s(ub);Epe=n(qSe,"STRONG",{});var Rbt=s(Epe);yGo=r(Rbt,"xlm"),Rbt.forEach(t),xGo=r(qSe," \u2014 "),HV=n(qSe,"A",{href:!0});var Pbt=s(HV);$Go=r(Pbt,"XLMForSequenceClassification"),Pbt.forEach(t),kGo=r(qSe," (XLM model)"),qSe.forEach(t),SGo=i(q),bb=n(q,"LI",{});var jSe=s(bb);Cpe=n(jSe,"STRONG",{});var Bbt=s(Cpe);RGo=r(Bbt,"xlm-roberta"),Bbt.forEach(t),PGo=r(jSe," \u2014 "),UV=n(jSe,"A",{href:!0});var Ibt=s(UV);BGo=r(Ibt,"XLMRobertaForSequenceClassification"),Ibt.forEach(t),IGo=r(jSe," (XLM-RoBERTa model)"),jSe.forEach(t),NGo=i(q),vb=n(q,"LI",{});var DSe=s(vb);wpe=n(DSe,"STRONG",{});var Nbt=s(wpe);qGo=r(Nbt,"xlm-roberta-xl"),Nbt.forEach(t),jGo=r(DSe," \u2014 "),JV=n(DSe,"A",{href:!0});var qbt=s(JV);DGo=r(qbt,"XLMRobertaXLForSequenceClassification"),qbt.forEach(t),GGo=r(DSe," (XLM-RoBERTa-XL model)"),DSe.forEach(t),OGo=i(q),Fb=n(q,"LI",{});var GSe=s(Fb);Ape=n(GSe,"STRONG",{});var jbt=s(Ape);VGo=r(jbt,"xlnet"),jbt.forEach(t),XGo=r(GSe," \u2014 "),YV=n(GSe,"A",{href:!0});var Dbt=s(YV);zGo=r(Dbt,"XLNetForSequenceClassification"),Dbt.forEach(t),QGo=r(GSe," (XLNet model)"),GSe.forEach(t),WGo=i(q),Tb=n(q,"LI",{});var OSe=s(Tb);Lpe=n(OSe,"STRONG",{});var Gbt=s(Lpe);HGo=r(Gbt,"yoso"),Gbt.forEach(t),UGo=r(OSe," \u2014 "),KV=n(OSe,"A",{href:!0});var Obt=s(KV);JGo=r(Obt,"YosoForSequenceClassification"),Obt.forEach(t),YGo=r(OSe," (YOSO model)"),OSe.forEach(t),q.forEach(t),KGo=i(da),Mb=n(da,"P",{});var VSe=s(Mb);ZGo=r(VSe,"The model is set in evaluation mode by default using "),ype=n(VSe,"CODE",{});var Vbt=s(ype);eOo=r(Vbt,"model.eval()"),Vbt.forEach(t),oOo=r(VSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(VSe,"CODE",{});var Xbt=s(xpe);rOo=r(Xbt,"model.train()"),Xbt.forEach(t),VSe.forEach(t),tOo=i(da),T(Eb.$$.fragment,da),da.forEach(t),tl.forEach(t),kOe=i(f),ed=n(f,"H2",{class:!0});var NXe=s(ed);Cb=n(NXe,"A",{id:!0,class:!0,href:!0});var zbt=s(Cb);$pe=n(zbt,"SPAN",{});var Qbt=s($pe);T(Iy.$$.fragment,Qbt),Qbt.forEach(t),zbt.forEach(t),aOo=i(NXe),kpe=n(NXe,"SPAN",{});var Wbt=s(kpe);nOo=r(Wbt,"AutoModelForMultipleChoice"),Wbt.forEach(t),NXe.forEach(t),SOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(Ny.$$.fragment,al),sOo=i(al),od=n(al,"P",{});var Voe=s(od);lOo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZV=n(Voe,"A",{href:!0});var Hbt=s(ZV);iOo=r(Hbt,"from_pretrained()"),Hbt.forEach(t),dOo=r(Voe," class method or the "),eX=n(Voe,"A",{href:!0});var Ubt=s(eX);cOo=r(Ubt,"from_config()"),Ubt.forEach(t),fOo=r(Voe,` class
method.`),Voe.forEach(t),mOo=i(al),qy=n(al,"P",{});var qXe=s(qy);gOo=r(qXe,"This class cannot be instantiated directly using "),Spe=n(qXe,"CODE",{});var Jbt=s(Spe);hOo=r(Jbt,"__init__()"),Jbt.forEach(t),pOo=r(qXe," (throws an error)."),qXe.forEach(t),_Oo=i(al),ft=n(al,"DIV",{class:!0});var HA=s(ft);T(jy.$$.fragment,HA),uOo=i(HA),Rpe=n(HA,"P",{});var Ybt=s(Rpe);bOo=r(Ybt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ybt.forEach(t),vOo=i(HA),rd=n(HA,"P",{});var Xoe=s(rd);FOo=r(Xoe,`Note:
Loading a model from its configuration file does `),Ppe=n(Xoe,"STRONG",{});var Kbt=s(Ppe);TOo=r(Kbt,"not"),Kbt.forEach(t),MOo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(Xoe,"A",{href:!0});var Zbt=s(oX);EOo=r(Zbt,"from_pretrained()"),Zbt.forEach(t),COo=r(Xoe," to load the model weights."),Xoe.forEach(t),wOo=i(HA),T(wb.$$.fragment,HA),HA.forEach(t),AOo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(Dy.$$.fragment,ca),LOo=i(ca),Bpe=n(ca,"P",{});var evt=s(Bpe);yOo=r(evt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),evt.forEach(t),xOo=i(ca),ja=n(ca,"P",{});var UA=s(ja);$Oo=r(UA,"The model class to instantiate is selected based on the "),Ipe=n(UA,"CODE",{});var ovt=s(Ipe);kOo=r(ovt,"model_type"),ovt.forEach(t),SOo=r(UA,` property of the config object (either
passed as an argument or loaded from `),Npe=n(UA,"CODE",{});var rvt=s(Npe);ROo=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),POo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(UA,"CODE",{});var tvt=s(qpe);BOo=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),IOo=r(UA,":"),UA.forEach(t),NOo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);Ab=n(ee,"LI",{});var XSe=s(Ab);jpe=n(XSe,"STRONG",{});var avt=s(jpe);qOo=r(avt,"albert"),avt.forEach(t),jOo=r(XSe," \u2014 "),rX=n(XSe,"A",{href:!0});var nvt=s(rX);DOo=r(nvt,"AlbertForMultipleChoice"),nvt.forEach(t),GOo=r(XSe," (ALBERT model)"),XSe.forEach(t),OOo=i(ee),Lb=n(ee,"LI",{});var zSe=s(Lb);Dpe=n(zSe,"STRONG",{});var svt=s(Dpe);VOo=r(svt,"bert"),svt.forEach(t),XOo=r(zSe," \u2014 "),tX=n(zSe,"A",{href:!0});var lvt=s(tX);zOo=r(lvt,"BertForMultipleChoice"),lvt.forEach(t),QOo=r(zSe," (BERT model)"),zSe.forEach(t),WOo=i(ee),yb=n(ee,"LI",{});var QSe=s(yb);Gpe=n(QSe,"STRONG",{});var ivt=s(Gpe);HOo=r(ivt,"big_bird"),ivt.forEach(t),UOo=r(QSe," \u2014 "),aX=n(QSe,"A",{href:!0});var dvt=s(aX);JOo=r(dvt,"BigBirdForMultipleChoice"),dvt.forEach(t),YOo=r(QSe," (BigBird model)"),QSe.forEach(t),KOo=i(ee),xb=n(ee,"LI",{});var WSe=s(xb);Ope=n(WSe,"STRONG",{});var cvt=s(Ope);ZOo=r(cvt,"camembert"),cvt.forEach(t),eVo=r(WSe," \u2014 "),nX=n(WSe,"A",{href:!0});var fvt=s(nX);oVo=r(fvt,"CamembertForMultipleChoice"),fvt.forEach(t),rVo=r(WSe," (CamemBERT model)"),WSe.forEach(t),tVo=i(ee),$b=n(ee,"LI",{});var HSe=s($b);Vpe=n(HSe,"STRONG",{});var mvt=s(Vpe);aVo=r(mvt,"canine"),mvt.forEach(t),nVo=r(HSe," \u2014 "),sX=n(HSe,"A",{href:!0});var gvt=s(sX);sVo=r(gvt,"CanineForMultipleChoice"),gvt.forEach(t),lVo=r(HSe," (CANINE model)"),HSe.forEach(t),iVo=i(ee),kb=n(ee,"LI",{});var USe=s(kb);Xpe=n(USe,"STRONG",{});var hvt=s(Xpe);dVo=r(hvt,"convbert"),hvt.forEach(t),cVo=r(USe," \u2014 "),lX=n(USe,"A",{href:!0});var pvt=s(lX);fVo=r(pvt,"ConvBertForMultipleChoice"),pvt.forEach(t),mVo=r(USe," (ConvBERT model)"),USe.forEach(t),gVo=i(ee),Sb=n(ee,"LI",{});var JSe=s(Sb);zpe=n(JSe,"STRONG",{});var _vt=s(zpe);hVo=r(_vt,"data2vec-text"),_vt.forEach(t),pVo=r(JSe," \u2014 "),iX=n(JSe,"A",{href:!0});var uvt=s(iX);_Vo=r(uvt,"Data2VecTextForMultipleChoice"),uvt.forEach(t),uVo=r(JSe," (Data2VecText model)"),JSe.forEach(t),bVo=i(ee),Rb=n(ee,"LI",{});var YSe=s(Rb);Qpe=n(YSe,"STRONG",{});var bvt=s(Qpe);vVo=r(bvt,"deberta-v2"),bvt.forEach(t),FVo=r(YSe," \u2014 "),dX=n(YSe,"A",{href:!0});var vvt=s(dX);TVo=r(vvt,"DebertaV2ForMultipleChoice"),vvt.forEach(t),MVo=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),EVo=i(ee),Pb=n(ee,"LI",{});var KSe=s(Pb);Wpe=n(KSe,"STRONG",{});var Fvt=s(Wpe);CVo=r(Fvt,"distilbert"),Fvt.forEach(t),wVo=r(KSe," \u2014 "),cX=n(KSe,"A",{href:!0});var Tvt=s(cX);AVo=r(Tvt,"DistilBertForMultipleChoice"),Tvt.forEach(t),LVo=r(KSe," (DistilBERT model)"),KSe.forEach(t),yVo=i(ee),Bb=n(ee,"LI",{});var ZSe=s(Bb);Hpe=n(ZSe,"STRONG",{});var Mvt=s(Hpe);xVo=r(Mvt,"electra"),Mvt.forEach(t),$Vo=r(ZSe," \u2014 "),fX=n(ZSe,"A",{href:!0});var Evt=s(fX);kVo=r(Evt,"ElectraForMultipleChoice"),Evt.forEach(t),SVo=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),RVo=i(ee),Ib=n(ee,"LI",{});var eRe=s(Ib);Upe=n(eRe,"STRONG",{});var Cvt=s(Upe);PVo=r(Cvt,"flaubert"),Cvt.forEach(t),BVo=r(eRe," \u2014 "),mX=n(eRe,"A",{href:!0});var wvt=s(mX);IVo=r(wvt,"FlaubertForMultipleChoice"),wvt.forEach(t),NVo=r(eRe," (FlauBERT model)"),eRe.forEach(t),qVo=i(ee),Nb=n(ee,"LI",{});var oRe=s(Nb);Jpe=n(oRe,"STRONG",{});var Avt=s(Jpe);jVo=r(Avt,"fnet"),Avt.forEach(t),DVo=r(oRe," \u2014 "),gX=n(oRe,"A",{href:!0});var Lvt=s(gX);GVo=r(Lvt,"FNetForMultipleChoice"),Lvt.forEach(t),OVo=r(oRe," (FNet model)"),oRe.forEach(t),VVo=i(ee),qb=n(ee,"LI",{});var rRe=s(qb);Ype=n(rRe,"STRONG",{});var yvt=s(Ype);XVo=r(yvt,"funnel"),yvt.forEach(t),zVo=r(rRe," \u2014 "),hX=n(rRe,"A",{href:!0});var xvt=s(hX);QVo=r(xvt,"FunnelForMultipleChoice"),xvt.forEach(t),WVo=r(rRe," (Funnel Transformer model)"),rRe.forEach(t),HVo=i(ee),jb=n(ee,"LI",{});var tRe=s(jb);Kpe=n(tRe,"STRONG",{});var $vt=s(Kpe);UVo=r($vt,"ibert"),$vt.forEach(t),JVo=r(tRe," \u2014 "),pX=n(tRe,"A",{href:!0});var kvt=s(pX);YVo=r(kvt,"IBertForMultipleChoice"),kvt.forEach(t),KVo=r(tRe," (I-BERT model)"),tRe.forEach(t),ZVo=i(ee),Db=n(ee,"LI",{});var aRe=s(Db);Zpe=n(aRe,"STRONG",{});var Svt=s(Zpe);eXo=r(Svt,"longformer"),Svt.forEach(t),oXo=r(aRe," \u2014 "),_X=n(aRe,"A",{href:!0});var Rvt=s(_X);rXo=r(Rvt,"LongformerForMultipleChoice"),Rvt.forEach(t),tXo=r(aRe," (Longformer model)"),aRe.forEach(t),aXo=i(ee),Gb=n(ee,"LI",{});var nRe=s(Gb);e_e=n(nRe,"STRONG",{});var Pvt=s(e_e);nXo=r(Pvt,"megatron-bert"),Pvt.forEach(t),sXo=r(nRe," \u2014 "),uX=n(nRe,"A",{href:!0});var Bvt=s(uX);lXo=r(Bvt,"MegatronBertForMultipleChoice"),Bvt.forEach(t),iXo=r(nRe," (Megatron-BERT model)"),nRe.forEach(t),dXo=i(ee),Ob=n(ee,"LI",{});var sRe=s(Ob);o_e=n(sRe,"STRONG",{});var Ivt=s(o_e);cXo=r(Ivt,"mobilebert"),Ivt.forEach(t),fXo=r(sRe," \u2014 "),bX=n(sRe,"A",{href:!0});var Nvt=s(bX);mXo=r(Nvt,"MobileBertForMultipleChoice"),Nvt.forEach(t),gXo=r(sRe," (MobileBERT model)"),sRe.forEach(t),hXo=i(ee),Vb=n(ee,"LI",{});var lRe=s(Vb);r_e=n(lRe,"STRONG",{});var qvt=s(r_e);pXo=r(qvt,"mpnet"),qvt.forEach(t),_Xo=r(lRe," \u2014 "),vX=n(lRe,"A",{href:!0});var jvt=s(vX);uXo=r(jvt,"MPNetForMultipleChoice"),jvt.forEach(t),bXo=r(lRe," (MPNet model)"),lRe.forEach(t),vXo=i(ee),Xb=n(ee,"LI",{});var iRe=s(Xb);t_e=n(iRe,"STRONG",{});var Dvt=s(t_e);FXo=r(Dvt,"nezha"),Dvt.forEach(t),TXo=r(iRe," \u2014 "),FX=n(iRe,"A",{href:!0});var Gvt=s(FX);MXo=r(Gvt,"NezhaForMultipleChoice"),Gvt.forEach(t),EXo=r(iRe," (Nezha model)"),iRe.forEach(t),CXo=i(ee),zb=n(ee,"LI",{});var dRe=s(zb);a_e=n(dRe,"STRONG",{});var Ovt=s(a_e);wXo=r(Ovt,"nystromformer"),Ovt.forEach(t),AXo=r(dRe," \u2014 "),TX=n(dRe,"A",{href:!0});var Vvt=s(TX);LXo=r(Vvt,"NystromformerForMultipleChoice"),Vvt.forEach(t),yXo=r(dRe," (Nystr\xF6mformer model)"),dRe.forEach(t),xXo=i(ee),Qb=n(ee,"LI",{});var cRe=s(Qb);n_e=n(cRe,"STRONG",{});var Xvt=s(n_e);$Xo=r(Xvt,"qdqbert"),Xvt.forEach(t),kXo=r(cRe," \u2014 "),MX=n(cRe,"A",{href:!0});var zvt=s(MX);SXo=r(zvt,"QDQBertForMultipleChoice"),zvt.forEach(t),RXo=r(cRe," (QDQBert model)"),cRe.forEach(t),PXo=i(ee),Wb=n(ee,"LI",{});var fRe=s(Wb);s_e=n(fRe,"STRONG",{});var Qvt=s(s_e);BXo=r(Qvt,"rembert"),Qvt.forEach(t),IXo=r(fRe," \u2014 "),EX=n(fRe,"A",{href:!0});var Wvt=s(EX);NXo=r(Wvt,"RemBertForMultipleChoice"),Wvt.forEach(t),qXo=r(fRe," (RemBERT model)"),fRe.forEach(t),jXo=i(ee),Hb=n(ee,"LI",{});var mRe=s(Hb);l_e=n(mRe,"STRONG",{});var Hvt=s(l_e);DXo=r(Hvt,"roberta"),Hvt.forEach(t),GXo=r(mRe," \u2014 "),CX=n(mRe,"A",{href:!0});var Uvt=s(CX);OXo=r(Uvt,"RobertaForMultipleChoice"),Uvt.forEach(t),VXo=r(mRe," (RoBERTa model)"),mRe.forEach(t),XXo=i(ee),Ub=n(ee,"LI",{});var gRe=s(Ub);i_e=n(gRe,"STRONG",{});var Jvt=s(i_e);zXo=r(Jvt,"roformer"),Jvt.forEach(t),QXo=r(gRe," \u2014 "),wX=n(gRe,"A",{href:!0});var Yvt=s(wX);WXo=r(Yvt,"RoFormerForMultipleChoice"),Yvt.forEach(t),HXo=r(gRe," (RoFormer model)"),gRe.forEach(t),UXo=i(ee),Jb=n(ee,"LI",{});var hRe=s(Jb);d_e=n(hRe,"STRONG",{});var Kvt=s(d_e);JXo=r(Kvt,"squeezebert"),Kvt.forEach(t),YXo=r(hRe," \u2014 "),AX=n(hRe,"A",{href:!0});var Zvt=s(AX);KXo=r(Zvt,"SqueezeBertForMultipleChoice"),Zvt.forEach(t),ZXo=r(hRe," (SqueezeBERT model)"),hRe.forEach(t),ezo=i(ee),Yb=n(ee,"LI",{});var pRe=s(Yb);c_e=n(pRe,"STRONG",{});var eFt=s(c_e);ozo=r(eFt,"xlm"),eFt.forEach(t),rzo=r(pRe," \u2014 "),LX=n(pRe,"A",{href:!0});var oFt=s(LX);tzo=r(oFt,"XLMForMultipleChoice"),oFt.forEach(t),azo=r(pRe," (XLM model)"),pRe.forEach(t),nzo=i(ee),Kb=n(ee,"LI",{});var _Re=s(Kb);f_e=n(_Re,"STRONG",{});var rFt=s(f_e);szo=r(rFt,"xlm-roberta"),rFt.forEach(t),lzo=r(_Re," \u2014 "),yX=n(_Re,"A",{href:!0});var tFt=s(yX);izo=r(tFt,"XLMRobertaForMultipleChoice"),tFt.forEach(t),dzo=r(_Re," (XLM-RoBERTa model)"),_Re.forEach(t),czo=i(ee),Zb=n(ee,"LI",{});var uRe=s(Zb);m_e=n(uRe,"STRONG",{});var aFt=s(m_e);fzo=r(aFt,"xlm-roberta-xl"),aFt.forEach(t),mzo=r(uRe," \u2014 "),xX=n(uRe,"A",{href:!0});var nFt=s(xX);gzo=r(nFt,"XLMRobertaXLForMultipleChoice"),nFt.forEach(t),hzo=r(uRe," (XLM-RoBERTa-XL model)"),uRe.forEach(t),pzo=i(ee),ev=n(ee,"LI",{});var bRe=s(ev);g_e=n(bRe,"STRONG",{});var sFt=s(g_e);_zo=r(sFt,"xlnet"),sFt.forEach(t),uzo=r(bRe," \u2014 "),$X=n(bRe,"A",{href:!0});var lFt=s($X);bzo=r(lFt,"XLNetForMultipleChoice"),lFt.forEach(t),vzo=r(bRe," (XLNet model)"),bRe.forEach(t),Fzo=i(ee),ov=n(ee,"LI",{});var vRe=s(ov);h_e=n(vRe,"STRONG",{});var iFt=s(h_e);Tzo=r(iFt,"yoso"),iFt.forEach(t),Mzo=r(vRe," \u2014 "),kX=n(vRe,"A",{href:!0});var dFt=s(kX);Ezo=r(dFt,"YosoForMultipleChoice"),dFt.forEach(t),Czo=r(vRe," (YOSO model)"),vRe.forEach(t),ee.forEach(t),wzo=i(ca),rv=n(ca,"P",{});var FRe=s(rv);Azo=r(FRe,"The model is set in evaluation mode by default using "),p_e=n(FRe,"CODE",{});var cFt=s(p_e);Lzo=r(cFt,"model.eval()"),cFt.forEach(t),yzo=r(FRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=n(FRe,"CODE",{});var fFt=s(__e);xzo=r(fFt,"model.train()"),fFt.forEach(t),FRe.forEach(t),$zo=i(ca),T(tv.$$.fragment,ca),ca.forEach(t),al.forEach(t),ROe=i(f),td=n(f,"H2",{class:!0});var jXe=s(td);av=n(jXe,"A",{id:!0,class:!0,href:!0});var mFt=s(av);u_e=n(mFt,"SPAN",{});var gFt=s(u_e);T(Gy.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),kzo=i(jXe),b_e=n(jXe,"SPAN",{});var hFt=s(b_e);Szo=r(hFt,"AutoModelForNextSentencePrediction"),hFt.forEach(t),jXe.forEach(t),POe=i(f),Io=n(f,"DIV",{class:!0});var nl=s(Io);T(Oy.$$.fragment,nl),Rzo=i(nl),ad=n(nl,"P",{});var zoe=s(ad);Pzo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SX=n(zoe,"A",{href:!0});var pFt=s(SX);Bzo=r(pFt,"from_pretrained()"),pFt.forEach(t),Izo=r(zoe," class method or the "),RX=n(zoe,"A",{href:!0});var _Ft=s(RX);Nzo=r(_Ft,"from_config()"),_Ft.forEach(t),qzo=r(zoe,` class
method.`),zoe.forEach(t),jzo=i(nl),Vy=n(nl,"P",{});var DXe=s(Vy);Dzo=r(DXe,"This class cannot be instantiated directly using "),v_e=n(DXe,"CODE",{});var uFt=s(v_e);Gzo=r(uFt,"__init__()"),uFt.forEach(t),Ozo=r(DXe," (throws an error)."),DXe.forEach(t),Vzo=i(nl),mt=n(nl,"DIV",{class:!0});var JA=s(mt);T(Xy.$$.fragment,JA),Xzo=i(JA),F_e=n(JA,"P",{});var bFt=s(F_e);zzo=r(bFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bFt.forEach(t),Qzo=i(JA),nd=n(JA,"P",{});var Qoe=s(nd);Wzo=r(Qoe,`Note:
Loading a model from its configuration file does `),T_e=n(Qoe,"STRONG",{});var vFt=s(T_e);Hzo=r(vFt,"not"),vFt.forEach(t),Uzo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(Qoe,"A",{href:!0});var FFt=s(PX);Jzo=r(FFt,"from_pretrained()"),FFt.forEach(t),Yzo=r(Qoe," to load the model weights."),Qoe.forEach(t),Kzo=i(JA),T(nv.$$.fragment,JA),JA.forEach(t),Zzo=i(nl),to=n(nl,"DIV",{class:!0});var fa=s(to);T(zy.$$.fragment,fa),eQo=i(fa),M_e=n(fa,"P",{});var TFt=s(M_e);oQo=r(TFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TFt.forEach(t),rQo=i(fa),Da=n(fa,"P",{});var YA=s(Da);tQo=r(YA,"The model class to instantiate is selected based on the "),E_e=n(YA,"CODE",{});var MFt=s(E_e);aQo=r(MFt,"model_type"),MFt.forEach(t),nQo=r(YA,` property of the config object (either
passed as an argument or loaded from `),C_e=n(YA,"CODE",{});var EFt=s(C_e);sQo=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),lQo=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(YA,"CODE",{});var CFt=s(w_e);iQo=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),dQo=r(YA,":"),YA.forEach(t),cQo=i(fa),No=n(fa,"UL",{});var ma=s(No);sv=n(ma,"LI",{});var TRe=s(sv);A_e=n(TRe,"STRONG",{});var wFt=s(A_e);fQo=r(wFt,"bert"),wFt.forEach(t),mQo=r(TRe," \u2014 "),BX=n(TRe,"A",{href:!0});var AFt=s(BX);gQo=r(AFt,"BertForNextSentencePrediction"),AFt.forEach(t),hQo=r(TRe," (BERT model)"),TRe.forEach(t),pQo=i(ma),lv=n(ma,"LI",{});var MRe=s(lv);L_e=n(MRe,"STRONG",{});var LFt=s(L_e);_Qo=r(LFt,"fnet"),LFt.forEach(t),uQo=r(MRe," \u2014 "),IX=n(MRe,"A",{href:!0});var yFt=s(IX);bQo=r(yFt,"FNetForNextSentencePrediction"),yFt.forEach(t),vQo=r(MRe," (FNet model)"),MRe.forEach(t),FQo=i(ma),iv=n(ma,"LI",{});var ERe=s(iv);y_e=n(ERe,"STRONG",{});var xFt=s(y_e);TQo=r(xFt,"megatron-bert"),xFt.forEach(t),MQo=r(ERe," \u2014 "),NX=n(ERe,"A",{href:!0});var $Ft=s(NX);EQo=r($Ft,"MegatronBertForNextSentencePrediction"),$Ft.forEach(t),CQo=r(ERe," (Megatron-BERT model)"),ERe.forEach(t),wQo=i(ma),dv=n(ma,"LI",{});var CRe=s(dv);x_e=n(CRe,"STRONG",{});var kFt=s(x_e);AQo=r(kFt,"mobilebert"),kFt.forEach(t),LQo=r(CRe," \u2014 "),qX=n(CRe,"A",{href:!0});var SFt=s(qX);yQo=r(SFt,"MobileBertForNextSentencePrediction"),SFt.forEach(t),xQo=r(CRe," (MobileBERT model)"),CRe.forEach(t),$Qo=i(ma),cv=n(ma,"LI",{});var wRe=s(cv);$_e=n(wRe,"STRONG",{});var RFt=s($_e);kQo=r(RFt,"nezha"),RFt.forEach(t),SQo=r(wRe," \u2014 "),jX=n(wRe,"A",{href:!0});var PFt=s(jX);RQo=r(PFt,"NezhaForNextSentencePrediction"),PFt.forEach(t),PQo=r(wRe," (Nezha model)"),wRe.forEach(t),BQo=i(ma),fv=n(ma,"LI",{});var ARe=s(fv);k_e=n(ARe,"STRONG",{});var BFt=s(k_e);IQo=r(BFt,"qdqbert"),BFt.forEach(t),NQo=r(ARe," \u2014 "),DX=n(ARe,"A",{href:!0});var IFt=s(DX);qQo=r(IFt,"QDQBertForNextSentencePrediction"),IFt.forEach(t),jQo=r(ARe," (QDQBert model)"),ARe.forEach(t),ma.forEach(t),DQo=i(fa),mv=n(fa,"P",{});var LRe=s(mv);GQo=r(LRe,"The model is set in evaluation mode by default using "),S_e=n(LRe,"CODE",{});var NFt=s(S_e);OQo=r(NFt,"model.eval()"),NFt.forEach(t),VQo=r(LRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(LRe,"CODE",{});var qFt=s(R_e);XQo=r(qFt,"model.train()"),qFt.forEach(t),LRe.forEach(t),zQo=i(fa),T(gv.$$.fragment,fa),fa.forEach(t),nl.forEach(t),BOe=i(f),sd=n(f,"H2",{class:!0});var GXe=s(sd);hv=n(GXe,"A",{id:!0,class:!0,href:!0});var jFt=s(hv);P_e=n(jFt,"SPAN",{});var DFt=s(P_e);T(Qy.$$.fragment,DFt),DFt.forEach(t),jFt.forEach(t),QQo=i(GXe),B_e=n(GXe,"SPAN",{});var GFt=s(B_e);WQo=r(GFt,"AutoModelForTokenClassification"),GFt.forEach(t),GXe.forEach(t),IOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(Wy.$$.fragment,sl),HQo=i(sl),ld=n(sl,"P",{});var Woe=s(ld);UQo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GX=n(Woe,"A",{href:!0});var OFt=s(GX);JQo=r(OFt,"from_pretrained()"),OFt.forEach(t),YQo=r(Woe," class method or the "),OX=n(Woe,"A",{href:!0});var VFt=s(OX);KQo=r(VFt,"from_config()"),VFt.forEach(t),ZQo=r(Woe,` class
method.`),Woe.forEach(t),eWo=i(sl),Hy=n(sl,"P",{});var OXe=s(Hy);oWo=r(OXe,"This class cannot be instantiated directly using "),I_e=n(OXe,"CODE",{});var XFt=s(I_e);rWo=r(XFt,"__init__()"),XFt.forEach(t),tWo=r(OXe," (throws an error)."),OXe.forEach(t),aWo=i(sl),gt=n(sl,"DIV",{class:!0});var KA=s(gt);T(Uy.$$.fragment,KA),nWo=i(KA),N_e=n(KA,"P",{});var zFt=s(N_e);sWo=r(zFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zFt.forEach(t),lWo=i(KA),id=n(KA,"P",{});var Hoe=s(id);iWo=r(Hoe,`Note:
Loading a model from its configuration file does `),q_e=n(Hoe,"STRONG",{});var QFt=s(q_e);dWo=r(QFt,"not"),QFt.forEach(t),cWo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(Hoe,"A",{href:!0});var WFt=s(VX);fWo=r(WFt,"from_pretrained()"),WFt.forEach(t),mWo=r(Hoe," to load the model weights."),Hoe.forEach(t),gWo=i(KA),T(pv.$$.fragment,KA),KA.forEach(t),hWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(Jy.$$.fragment,ga),pWo=i(ga),j_e=n(ga,"P",{});var HFt=s(j_e);_Wo=r(HFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HFt.forEach(t),uWo=i(ga),Ga=n(ga,"P",{});var ZA=s(Ga);bWo=r(ZA,"The model class to instantiate is selected based on the "),D_e=n(ZA,"CODE",{});var UFt=s(D_e);vWo=r(UFt,"model_type"),UFt.forEach(t),FWo=r(ZA,` property of the config object (either
passed as an argument or loaded from `),G_e=n(ZA,"CODE",{});var JFt=s(G_e);TWo=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),MWo=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(ZA,"CODE",{});var YFt=s(O_e);EWo=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),CWo=r(ZA,":"),ZA.forEach(t),wWo=i(ga),H=n(ga,"UL",{});var J=s(H);_v=n(J,"LI",{});var yRe=s(_v);V_e=n(yRe,"STRONG",{});var KFt=s(V_e);AWo=r(KFt,"albert"),KFt.forEach(t),LWo=r(yRe," \u2014 "),XX=n(yRe,"A",{href:!0});var ZFt=s(XX);yWo=r(ZFt,"AlbertForTokenClassification"),ZFt.forEach(t),xWo=r(yRe," (ALBERT model)"),yRe.forEach(t),$Wo=i(J),uv=n(J,"LI",{});var xRe=s(uv);X_e=n(xRe,"STRONG",{});var eTt=s(X_e);kWo=r(eTt,"bert"),eTt.forEach(t),SWo=r(xRe," \u2014 "),zX=n(xRe,"A",{href:!0});var oTt=s(zX);RWo=r(oTt,"BertForTokenClassification"),oTt.forEach(t),PWo=r(xRe," (BERT model)"),xRe.forEach(t),BWo=i(J),bv=n(J,"LI",{});var $Re=s(bv);z_e=n($Re,"STRONG",{});var rTt=s(z_e);IWo=r(rTt,"big_bird"),rTt.forEach(t),NWo=r($Re," \u2014 "),QX=n($Re,"A",{href:!0});var tTt=s(QX);qWo=r(tTt,"BigBirdForTokenClassification"),tTt.forEach(t),jWo=r($Re," (BigBird model)"),$Re.forEach(t),DWo=i(J),vv=n(J,"LI",{});var kRe=s(vv);Q_e=n(kRe,"STRONG",{});var aTt=s(Q_e);GWo=r(aTt,"bloom"),aTt.forEach(t),OWo=r(kRe," \u2014 "),WX=n(kRe,"A",{href:!0});var nTt=s(WX);VWo=r(nTt,"BloomForTokenClassification"),nTt.forEach(t),XWo=r(kRe," (BLOOM model)"),kRe.forEach(t),zWo=i(J),Fv=n(J,"LI",{});var SRe=s(Fv);W_e=n(SRe,"STRONG",{});var sTt=s(W_e);QWo=r(sTt,"camembert"),sTt.forEach(t),WWo=r(SRe," \u2014 "),HX=n(SRe,"A",{href:!0});var lTt=s(HX);HWo=r(lTt,"CamembertForTokenClassification"),lTt.forEach(t),UWo=r(SRe," (CamemBERT model)"),SRe.forEach(t),JWo=i(J),Tv=n(J,"LI",{});var RRe=s(Tv);H_e=n(RRe,"STRONG",{});var iTt=s(H_e);YWo=r(iTt,"canine"),iTt.forEach(t),KWo=r(RRe," \u2014 "),UX=n(RRe,"A",{href:!0});var dTt=s(UX);ZWo=r(dTt,"CanineForTokenClassification"),dTt.forEach(t),eHo=r(RRe," (CANINE model)"),RRe.forEach(t),oHo=i(J),Mv=n(J,"LI",{});var PRe=s(Mv);U_e=n(PRe,"STRONG",{});var cTt=s(U_e);rHo=r(cTt,"convbert"),cTt.forEach(t),tHo=r(PRe," \u2014 "),JX=n(PRe,"A",{href:!0});var fTt=s(JX);aHo=r(fTt,"ConvBertForTokenClassification"),fTt.forEach(t),nHo=r(PRe," (ConvBERT model)"),PRe.forEach(t),sHo=i(J),Ev=n(J,"LI",{});var BRe=s(Ev);J_e=n(BRe,"STRONG",{});var mTt=s(J_e);lHo=r(mTt,"data2vec-text"),mTt.forEach(t),iHo=r(BRe," \u2014 "),YX=n(BRe,"A",{href:!0});var gTt=s(YX);dHo=r(gTt,"Data2VecTextForTokenClassification"),gTt.forEach(t),cHo=r(BRe," (Data2VecText model)"),BRe.forEach(t),fHo=i(J),Cv=n(J,"LI",{});var IRe=s(Cv);Y_e=n(IRe,"STRONG",{});var hTt=s(Y_e);mHo=r(hTt,"deberta"),hTt.forEach(t),gHo=r(IRe," \u2014 "),KX=n(IRe,"A",{href:!0});var pTt=s(KX);hHo=r(pTt,"DebertaForTokenClassification"),pTt.forEach(t),pHo=r(IRe," (DeBERTa model)"),IRe.forEach(t),_Ho=i(J),wv=n(J,"LI",{});var NRe=s(wv);K_e=n(NRe,"STRONG",{});var _Tt=s(K_e);uHo=r(_Tt,"deberta-v2"),_Tt.forEach(t),bHo=r(NRe," \u2014 "),ZX=n(NRe,"A",{href:!0});var uTt=s(ZX);vHo=r(uTt,"DebertaV2ForTokenClassification"),uTt.forEach(t),FHo=r(NRe," (DeBERTa-v2 model)"),NRe.forEach(t),THo=i(J),Av=n(J,"LI",{});var qRe=s(Av);Z_e=n(qRe,"STRONG",{});var bTt=s(Z_e);MHo=r(bTt,"distilbert"),bTt.forEach(t),EHo=r(qRe," \u2014 "),ez=n(qRe,"A",{href:!0});var vTt=s(ez);CHo=r(vTt,"DistilBertForTokenClassification"),vTt.forEach(t),wHo=r(qRe," (DistilBERT model)"),qRe.forEach(t),AHo=i(J),Lv=n(J,"LI",{});var jRe=s(Lv);eue=n(jRe,"STRONG",{});var FTt=s(eue);LHo=r(FTt,"electra"),FTt.forEach(t),yHo=r(jRe," \u2014 "),oz=n(jRe,"A",{href:!0});var TTt=s(oz);xHo=r(TTt,"ElectraForTokenClassification"),TTt.forEach(t),$Ho=r(jRe," (ELECTRA model)"),jRe.forEach(t),kHo=i(J),yv=n(J,"LI",{});var DRe=s(yv);oue=n(DRe,"STRONG",{});var MTt=s(oue);SHo=r(MTt,"flaubert"),MTt.forEach(t),RHo=r(DRe," \u2014 "),rz=n(DRe,"A",{href:!0});var ETt=s(rz);PHo=r(ETt,"FlaubertForTokenClassification"),ETt.forEach(t),BHo=r(DRe," (FlauBERT model)"),DRe.forEach(t),IHo=i(J),xv=n(J,"LI",{});var GRe=s(xv);rue=n(GRe,"STRONG",{});var CTt=s(rue);NHo=r(CTt,"fnet"),CTt.forEach(t),qHo=r(GRe," \u2014 "),tz=n(GRe,"A",{href:!0});var wTt=s(tz);jHo=r(wTt,"FNetForTokenClassification"),wTt.forEach(t),DHo=r(GRe," (FNet model)"),GRe.forEach(t),GHo=i(J),$v=n(J,"LI",{});var ORe=s($v);tue=n(ORe,"STRONG",{});var ATt=s(tue);OHo=r(ATt,"funnel"),ATt.forEach(t),VHo=r(ORe," \u2014 "),az=n(ORe,"A",{href:!0});var LTt=s(az);XHo=r(LTt,"FunnelForTokenClassification"),LTt.forEach(t),zHo=r(ORe," (Funnel Transformer model)"),ORe.forEach(t),QHo=i(J),kv=n(J,"LI",{});var VRe=s(kv);aue=n(VRe,"STRONG",{});var yTt=s(aue);WHo=r(yTt,"gpt2"),yTt.forEach(t),HHo=r(VRe," \u2014 "),nz=n(VRe,"A",{href:!0});var xTt=s(nz);UHo=r(xTt,"GPT2ForTokenClassification"),xTt.forEach(t),JHo=r(VRe," (OpenAI GPT-2 model)"),VRe.forEach(t),YHo=i(J),Sv=n(J,"LI",{});var XRe=s(Sv);nue=n(XRe,"STRONG",{});var $Tt=s(nue);KHo=r($Tt,"ibert"),$Tt.forEach(t),ZHo=r(XRe," \u2014 "),sz=n(XRe,"A",{href:!0});var kTt=s(sz);eUo=r(kTt,"IBertForTokenClassification"),kTt.forEach(t),oUo=r(XRe," (I-BERT model)"),XRe.forEach(t),rUo=i(J),Rv=n(J,"LI",{});var zRe=s(Rv);sue=n(zRe,"STRONG",{});var STt=s(sue);tUo=r(STt,"layoutlm"),STt.forEach(t),aUo=r(zRe," \u2014 "),lz=n(zRe,"A",{href:!0});var RTt=s(lz);nUo=r(RTt,"LayoutLMForTokenClassification"),RTt.forEach(t),sUo=r(zRe," (LayoutLM model)"),zRe.forEach(t),lUo=i(J),Pv=n(J,"LI",{});var QRe=s(Pv);lue=n(QRe,"STRONG",{});var PTt=s(lue);iUo=r(PTt,"layoutlmv2"),PTt.forEach(t),dUo=r(QRe," \u2014 "),iz=n(QRe,"A",{href:!0});var BTt=s(iz);cUo=r(BTt,"LayoutLMv2ForTokenClassification"),BTt.forEach(t),fUo=r(QRe," (LayoutLMv2 model)"),QRe.forEach(t),mUo=i(J),Bv=n(J,"LI",{});var WRe=s(Bv);iue=n(WRe,"STRONG",{});var ITt=s(iue);gUo=r(ITt,"layoutlmv3"),ITt.forEach(t),hUo=r(WRe," \u2014 "),dz=n(WRe,"A",{href:!0});var NTt=s(dz);pUo=r(NTt,"LayoutLMv3ForTokenClassification"),NTt.forEach(t),_Uo=r(WRe," (LayoutLMv3 model)"),WRe.forEach(t),uUo=i(J),Iv=n(J,"LI",{});var HRe=s(Iv);due=n(HRe,"STRONG",{});var qTt=s(due);bUo=r(qTt,"longformer"),qTt.forEach(t),vUo=r(HRe," \u2014 "),cz=n(HRe,"A",{href:!0});var jTt=s(cz);FUo=r(jTt,"LongformerForTokenClassification"),jTt.forEach(t),TUo=r(HRe," (Longformer model)"),HRe.forEach(t),MUo=i(J),Nv=n(J,"LI",{});var URe=s(Nv);cue=n(URe,"STRONG",{});var DTt=s(cue);EUo=r(DTt,"megatron-bert"),DTt.forEach(t),CUo=r(URe," \u2014 "),fz=n(URe,"A",{href:!0});var GTt=s(fz);wUo=r(GTt,"MegatronBertForTokenClassification"),GTt.forEach(t),AUo=r(URe," (Megatron-BERT model)"),URe.forEach(t),LUo=i(J),qv=n(J,"LI",{});var JRe=s(qv);fue=n(JRe,"STRONG",{});var OTt=s(fue);yUo=r(OTt,"mobilebert"),OTt.forEach(t),xUo=r(JRe," \u2014 "),mz=n(JRe,"A",{href:!0});var VTt=s(mz);$Uo=r(VTt,"MobileBertForTokenClassification"),VTt.forEach(t),kUo=r(JRe," (MobileBERT model)"),JRe.forEach(t),SUo=i(J),jv=n(J,"LI",{});var YRe=s(jv);mue=n(YRe,"STRONG",{});var XTt=s(mue);RUo=r(XTt,"mpnet"),XTt.forEach(t),PUo=r(YRe," \u2014 "),gz=n(YRe,"A",{href:!0});var zTt=s(gz);BUo=r(zTt,"MPNetForTokenClassification"),zTt.forEach(t),IUo=r(YRe," (MPNet model)"),YRe.forEach(t),NUo=i(J),Dv=n(J,"LI",{});var KRe=s(Dv);gue=n(KRe,"STRONG",{});var QTt=s(gue);qUo=r(QTt,"nezha"),QTt.forEach(t),jUo=r(KRe," \u2014 "),hz=n(KRe,"A",{href:!0});var WTt=s(hz);DUo=r(WTt,"NezhaForTokenClassification"),WTt.forEach(t),GUo=r(KRe," (Nezha model)"),KRe.forEach(t),OUo=i(J),Gv=n(J,"LI",{});var ZRe=s(Gv);hue=n(ZRe,"STRONG",{});var HTt=s(hue);VUo=r(HTt,"nystromformer"),HTt.forEach(t),XUo=r(ZRe," \u2014 "),pz=n(ZRe,"A",{href:!0});var UTt=s(pz);zUo=r(UTt,"NystromformerForTokenClassification"),UTt.forEach(t),QUo=r(ZRe," (Nystr\xF6mformer model)"),ZRe.forEach(t),WUo=i(J),Ov=n(J,"LI",{});var ePe=s(Ov);pue=n(ePe,"STRONG",{});var JTt=s(pue);HUo=r(JTt,"qdqbert"),JTt.forEach(t),UUo=r(ePe," \u2014 "),_z=n(ePe,"A",{href:!0});var YTt=s(_z);JUo=r(YTt,"QDQBertForTokenClassification"),YTt.forEach(t),YUo=r(ePe," (QDQBert model)"),ePe.forEach(t),KUo=i(J),Vv=n(J,"LI",{});var oPe=s(Vv);_ue=n(oPe,"STRONG",{});var KTt=s(_ue);ZUo=r(KTt,"rembert"),KTt.forEach(t),eJo=r(oPe," \u2014 "),uz=n(oPe,"A",{href:!0});var ZTt=s(uz);oJo=r(ZTt,"RemBertForTokenClassification"),ZTt.forEach(t),rJo=r(oPe," (RemBERT model)"),oPe.forEach(t),tJo=i(J),Xv=n(J,"LI",{});var rPe=s(Xv);uue=n(rPe,"STRONG",{});var e7t=s(uue);aJo=r(e7t,"roberta"),e7t.forEach(t),nJo=r(rPe," \u2014 "),bz=n(rPe,"A",{href:!0});var o7t=s(bz);sJo=r(o7t,"RobertaForTokenClassification"),o7t.forEach(t),lJo=r(rPe," (RoBERTa model)"),rPe.forEach(t),iJo=i(J),zv=n(J,"LI",{});var tPe=s(zv);bue=n(tPe,"STRONG",{});var r7t=s(bue);dJo=r(r7t,"roformer"),r7t.forEach(t),cJo=r(tPe," \u2014 "),vz=n(tPe,"A",{href:!0});var t7t=s(vz);fJo=r(t7t,"RoFormerForTokenClassification"),t7t.forEach(t),mJo=r(tPe," (RoFormer model)"),tPe.forEach(t),gJo=i(J),Qv=n(J,"LI",{});var aPe=s(Qv);vue=n(aPe,"STRONG",{});var a7t=s(vue);hJo=r(a7t,"squeezebert"),a7t.forEach(t),pJo=r(aPe," \u2014 "),Fz=n(aPe,"A",{href:!0});var n7t=s(Fz);_Jo=r(n7t,"SqueezeBertForTokenClassification"),n7t.forEach(t),uJo=r(aPe," (SqueezeBERT model)"),aPe.forEach(t),bJo=i(J),Wv=n(J,"LI",{});var nPe=s(Wv);Fue=n(nPe,"STRONG",{});var s7t=s(Fue);vJo=r(s7t,"xlm"),s7t.forEach(t),FJo=r(nPe," \u2014 "),Tz=n(nPe,"A",{href:!0});var l7t=s(Tz);TJo=r(l7t,"XLMForTokenClassification"),l7t.forEach(t),MJo=r(nPe," (XLM model)"),nPe.forEach(t),EJo=i(J),Hv=n(J,"LI",{});var sPe=s(Hv);Tue=n(sPe,"STRONG",{});var i7t=s(Tue);CJo=r(i7t,"xlm-roberta"),i7t.forEach(t),wJo=r(sPe," \u2014 "),Mz=n(sPe,"A",{href:!0});var d7t=s(Mz);AJo=r(d7t,"XLMRobertaForTokenClassification"),d7t.forEach(t),LJo=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),yJo=i(J),Uv=n(J,"LI",{});var lPe=s(Uv);Mue=n(lPe,"STRONG",{});var c7t=s(Mue);xJo=r(c7t,"xlm-roberta-xl"),c7t.forEach(t),$Jo=r(lPe," \u2014 "),Ez=n(lPe,"A",{href:!0});var f7t=s(Ez);kJo=r(f7t,"XLMRobertaXLForTokenClassification"),f7t.forEach(t),SJo=r(lPe," (XLM-RoBERTa-XL model)"),lPe.forEach(t),RJo=i(J),Jv=n(J,"LI",{});var iPe=s(Jv);Eue=n(iPe,"STRONG",{});var m7t=s(Eue);PJo=r(m7t,"xlnet"),m7t.forEach(t),BJo=r(iPe," \u2014 "),Cz=n(iPe,"A",{href:!0});var g7t=s(Cz);IJo=r(g7t,"XLNetForTokenClassification"),g7t.forEach(t),NJo=r(iPe," (XLNet model)"),iPe.forEach(t),qJo=i(J),Yv=n(J,"LI",{});var dPe=s(Yv);Cue=n(dPe,"STRONG",{});var h7t=s(Cue);jJo=r(h7t,"yoso"),h7t.forEach(t),DJo=r(dPe," \u2014 "),wz=n(dPe,"A",{href:!0});var p7t=s(wz);GJo=r(p7t,"YosoForTokenClassification"),p7t.forEach(t),OJo=r(dPe," (YOSO model)"),dPe.forEach(t),J.forEach(t),VJo=i(ga),Kv=n(ga,"P",{});var cPe=s(Kv);XJo=r(cPe,"The model is set in evaluation mode by default using "),wue=n(cPe,"CODE",{});var _7t=s(wue);zJo=r(_7t,"model.eval()"),_7t.forEach(t),QJo=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(cPe,"CODE",{});var u7t=s(Aue);WJo=r(u7t,"model.train()"),u7t.forEach(t),cPe.forEach(t),HJo=i(ga),T(Zv.$$.fragment,ga),ga.forEach(t),sl.forEach(t),NOe=i(f),dd=n(f,"H2",{class:!0});var VXe=s(dd);eF=n(VXe,"A",{id:!0,class:!0,href:!0});var b7t=s(eF);Lue=n(b7t,"SPAN",{});var v7t=s(Lue);T(Yy.$$.fragment,v7t),v7t.forEach(t),b7t.forEach(t),UJo=i(VXe),yue=n(VXe,"SPAN",{});var F7t=s(yue);JJo=r(F7t,"AutoModelForQuestionAnswering"),F7t.forEach(t),VXe.forEach(t),qOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(Ky.$$.fragment,ll),YJo=i(ll),cd=n(ll,"P",{});var Uoe=s(cd);KJo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Az=n(Uoe,"A",{href:!0});var T7t=s(Az);ZJo=r(T7t,"from_pretrained()"),T7t.forEach(t),eYo=r(Uoe," class method or the "),Lz=n(Uoe,"A",{href:!0});var M7t=s(Lz);oYo=r(M7t,"from_config()"),M7t.forEach(t),rYo=r(Uoe,` class
method.`),Uoe.forEach(t),tYo=i(ll),Zy=n(ll,"P",{});var XXe=s(Zy);aYo=r(XXe,"This class cannot be instantiated directly using "),xue=n(XXe,"CODE",{});var E7t=s(xue);nYo=r(E7t,"__init__()"),E7t.forEach(t),sYo=r(XXe," (throws an error)."),XXe.forEach(t),lYo=i(ll),ht=n(ll,"DIV",{class:!0});var e6=s(ht);T(e8.$$.fragment,e6),iYo=i(e6),$ue=n(e6,"P",{});var C7t=s($ue);dYo=r(C7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C7t.forEach(t),cYo=i(e6),fd=n(e6,"P",{});var Joe=s(fd);fYo=r(Joe,`Note:
Loading a model from its configuration file does `),kue=n(Joe,"STRONG",{});var w7t=s(kue);mYo=r(w7t,"not"),w7t.forEach(t),gYo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Joe,"A",{href:!0});var A7t=s(yz);hYo=r(A7t,"from_pretrained()"),A7t.forEach(t),pYo=r(Joe," to load the model weights."),Joe.forEach(t),_Yo=i(e6),T(oF.$$.fragment,e6),e6.forEach(t),uYo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(o8.$$.fragment,ha),bYo=i(ha),Sue=n(ha,"P",{});var L7t=s(Sue);vYo=r(L7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L7t.forEach(t),FYo=i(ha),Oa=n(ha,"P",{});var o6=s(Oa);TYo=r(o6,"The model class to instantiate is selected based on the "),Rue=n(o6,"CODE",{});var y7t=s(Rue);MYo=r(y7t,"model_type"),y7t.forEach(t),EYo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(o6,"CODE",{});var x7t=s(Pue);CYo=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),wYo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(o6,"CODE",{});var $7t=s(Bue);AYo=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),LYo=r(o6,":"),o6.forEach(t),yYo=i(ha),V=n(ha,"UL",{});var X=s(V);rF=n(X,"LI",{});var fPe=s(rF);Iue=n(fPe,"STRONG",{});var k7t=s(Iue);xYo=r(k7t,"albert"),k7t.forEach(t),$Yo=r(fPe," \u2014 "),xz=n(fPe,"A",{href:!0});var S7t=s(xz);kYo=r(S7t,"AlbertForQuestionAnswering"),S7t.forEach(t),SYo=r(fPe," (ALBERT model)"),fPe.forEach(t),RYo=i(X),tF=n(X,"LI",{});var mPe=s(tF);Nue=n(mPe,"STRONG",{});var R7t=s(Nue);PYo=r(R7t,"bart"),R7t.forEach(t),BYo=r(mPe," \u2014 "),$z=n(mPe,"A",{href:!0});var P7t=s($z);IYo=r(P7t,"BartForQuestionAnswering"),P7t.forEach(t),NYo=r(mPe," (BART model)"),mPe.forEach(t),qYo=i(X),aF=n(X,"LI",{});var gPe=s(aF);que=n(gPe,"STRONG",{});var B7t=s(que);jYo=r(B7t,"bert"),B7t.forEach(t),DYo=r(gPe," \u2014 "),kz=n(gPe,"A",{href:!0});var I7t=s(kz);GYo=r(I7t,"BertForQuestionAnswering"),I7t.forEach(t),OYo=r(gPe," (BERT model)"),gPe.forEach(t),VYo=i(X),nF=n(X,"LI",{});var hPe=s(nF);jue=n(hPe,"STRONG",{});var N7t=s(jue);XYo=r(N7t,"big_bird"),N7t.forEach(t),zYo=r(hPe," \u2014 "),Sz=n(hPe,"A",{href:!0});var q7t=s(Sz);QYo=r(q7t,"BigBirdForQuestionAnswering"),q7t.forEach(t),WYo=r(hPe," (BigBird model)"),hPe.forEach(t),HYo=i(X),sF=n(X,"LI",{});var pPe=s(sF);Due=n(pPe,"STRONG",{});var j7t=s(Due);UYo=r(j7t,"bigbird_pegasus"),j7t.forEach(t),JYo=r(pPe," \u2014 "),Rz=n(pPe,"A",{href:!0});var D7t=s(Rz);YYo=r(D7t,"BigBirdPegasusForQuestionAnswering"),D7t.forEach(t),KYo=r(pPe," (BigBird-Pegasus model)"),pPe.forEach(t),ZYo=i(X),lF=n(X,"LI",{});var _Pe=s(lF);Gue=n(_Pe,"STRONG",{});var G7t=s(Gue);eKo=r(G7t,"camembert"),G7t.forEach(t),oKo=r(_Pe," \u2014 "),Pz=n(_Pe,"A",{href:!0});var O7t=s(Pz);rKo=r(O7t,"CamembertForQuestionAnswering"),O7t.forEach(t),tKo=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),aKo=i(X),iF=n(X,"LI",{});var uPe=s(iF);Oue=n(uPe,"STRONG",{});var V7t=s(Oue);nKo=r(V7t,"canine"),V7t.forEach(t),sKo=r(uPe," \u2014 "),Bz=n(uPe,"A",{href:!0});var X7t=s(Bz);lKo=r(X7t,"CanineForQuestionAnswering"),X7t.forEach(t),iKo=r(uPe," (CANINE model)"),uPe.forEach(t),dKo=i(X),dF=n(X,"LI",{});var bPe=s(dF);Vue=n(bPe,"STRONG",{});var z7t=s(Vue);cKo=r(z7t,"convbert"),z7t.forEach(t),fKo=r(bPe," \u2014 "),Iz=n(bPe,"A",{href:!0});var Q7t=s(Iz);mKo=r(Q7t,"ConvBertForQuestionAnswering"),Q7t.forEach(t),gKo=r(bPe," (ConvBERT model)"),bPe.forEach(t),hKo=i(X),cF=n(X,"LI",{});var vPe=s(cF);Xue=n(vPe,"STRONG",{});var W7t=s(Xue);pKo=r(W7t,"data2vec-text"),W7t.forEach(t),_Ko=r(vPe," \u2014 "),Nz=n(vPe,"A",{href:!0});var H7t=s(Nz);uKo=r(H7t,"Data2VecTextForQuestionAnswering"),H7t.forEach(t),bKo=r(vPe," (Data2VecText model)"),vPe.forEach(t),vKo=i(X),fF=n(X,"LI",{});var FPe=s(fF);zue=n(FPe,"STRONG",{});var U7t=s(zue);FKo=r(U7t,"deberta"),U7t.forEach(t),TKo=r(FPe," \u2014 "),qz=n(FPe,"A",{href:!0});var J7t=s(qz);MKo=r(J7t,"DebertaForQuestionAnswering"),J7t.forEach(t),EKo=r(FPe," (DeBERTa model)"),FPe.forEach(t),CKo=i(X),mF=n(X,"LI",{});var TPe=s(mF);Que=n(TPe,"STRONG",{});var Y7t=s(Que);wKo=r(Y7t,"deberta-v2"),Y7t.forEach(t),AKo=r(TPe," \u2014 "),jz=n(TPe,"A",{href:!0});var K7t=s(jz);LKo=r(K7t,"DebertaV2ForQuestionAnswering"),K7t.forEach(t),yKo=r(TPe," (DeBERTa-v2 model)"),TPe.forEach(t),xKo=i(X),gF=n(X,"LI",{});var MPe=s(gF);Wue=n(MPe,"STRONG",{});var Z7t=s(Wue);$Ko=r(Z7t,"distilbert"),Z7t.forEach(t),kKo=r(MPe," \u2014 "),Dz=n(MPe,"A",{href:!0});var eMt=s(Dz);SKo=r(eMt,"DistilBertForQuestionAnswering"),eMt.forEach(t),RKo=r(MPe," (DistilBERT model)"),MPe.forEach(t),PKo=i(X),hF=n(X,"LI",{});var EPe=s(hF);Hue=n(EPe,"STRONG",{});var oMt=s(Hue);BKo=r(oMt,"electra"),oMt.forEach(t),IKo=r(EPe," \u2014 "),Gz=n(EPe,"A",{href:!0});var rMt=s(Gz);NKo=r(rMt,"ElectraForQuestionAnswering"),rMt.forEach(t),qKo=r(EPe," (ELECTRA model)"),EPe.forEach(t),jKo=i(X),pF=n(X,"LI",{});var CPe=s(pF);Uue=n(CPe,"STRONG",{});var tMt=s(Uue);DKo=r(tMt,"flaubert"),tMt.forEach(t),GKo=r(CPe," \u2014 "),Oz=n(CPe,"A",{href:!0});var aMt=s(Oz);OKo=r(aMt,"FlaubertForQuestionAnsweringSimple"),aMt.forEach(t),VKo=r(CPe," (FlauBERT model)"),CPe.forEach(t),XKo=i(X),_F=n(X,"LI",{});var wPe=s(_F);Jue=n(wPe,"STRONG",{});var nMt=s(Jue);zKo=r(nMt,"fnet"),nMt.forEach(t),QKo=r(wPe," \u2014 "),Vz=n(wPe,"A",{href:!0});var sMt=s(Vz);WKo=r(sMt,"FNetForQuestionAnswering"),sMt.forEach(t),HKo=r(wPe," (FNet model)"),wPe.forEach(t),UKo=i(X),uF=n(X,"LI",{});var APe=s(uF);Yue=n(APe,"STRONG",{});var lMt=s(Yue);JKo=r(lMt,"funnel"),lMt.forEach(t),YKo=r(APe," \u2014 "),Xz=n(APe,"A",{href:!0});var iMt=s(Xz);KKo=r(iMt,"FunnelForQuestionAnswering"),iMt.forEach(t),ZKo=r(APe," (Funnel Transformer model)"),APe.forEach(t),eZo=i(X),bF=n(X,"LI",{});var LPe=s(bF);Kue=n(LPe,"STRONG",{});var dMt=s(Kue);oZo=r(dMt,"gptj"),dMt.forEach(t),rZo=r(LPe," \u2014 "),zz=n(LPe,"A",{href:!0});var cMt=s(zz);tZo=r(cMt,"GPTJForQuestionAnswering"),cMt.forEach(t),aZo=r(LPe," (GPT-J model)"),LPe.forEach(t),nZo=i(X),vF=n(X,"LI",{});var yPe=s(vF);Zue=n(yPe,"STRONG",{});var fMt=s(Zue);sZo=r(fMt,"ibert"),fMt.forEach(t),lZo=r(yPe," \u2014 "),Qz=n(yPe,"A",{href:!0});var mMt=s(Qz);iZo=r(mMt,"IBertForQuestionAnswering"),mMt.forEach(t),dZo=r(yPe," (I-BERT model)"),yPe.forEach(t),cZo=i(X),FF=n(X,"LI",{});var xPe=s(FF);e1e=n(xPe,"STRONG",{});var gMt=s(e1e);fZo=r(gMt,"layoutlmv2"),gMt.forEach(t),mZo=r(xPe," \u2014 "),Wz=n(xPe,"A",{href:!0});var hMt=s(Wz);gZo=r(hMt,"LayoutLMv2ForQuestionAnswering"),hMt.forEach(t),hZo=r(xPe," (LayoutLMv2 model)"),xPe.forEach(t),pZo=i(X),TF=n(X,"LI",{});var $Pe=s(TF);o1e=n($Pe,"STRONG",{});var pMt=s(o1e);_Zo=r(pMt,"layoutlmv3"),pMt.forEach(t),uZo=r($Pe," \u2014 "),Hz=n($Pe,"A",{href:!0});var _Mt=s(Hz);bZo=r(_Mt,"LayoutLMv3ForQuestionAnswering"),_Mt.forEach(t),vZo=r($Pe," (LayoutLMv3 model)"),$Pe.forEach(t),FZo=i(X),MF=n(X,"LI",{});var kPe=s(MF);r1e=n(kPe,"STRONG",{});var uMt=s(r1e);TZo=r(uMt,"led"),uMt.forEach(t),MZo=r(kPe," \u2014 "),Uz=n(kPe,"A",{href:!0});var bMt=s(Uz);EZo=r(bMt,"LEDForQuestionAnswering"),bMt.forEach(t),CZo=r(kPe," (LED model)"),kPe.forEach(t),wZo=i(X),EF=n(X,"LI",{});var SPe=s(EF);t1e=n(SPe,"STRONG",{});var vMt=s(t1e);AZo=r(vMt,"longformer"),vMt.forEach(t),LZo=r(SPe," \u2014 "),Jz=n(SPe,"A",{href:!0});var FMt=s(Jz);yZo=r(FMt,"LongformerForQuestionAnswering"),FMt.forEach(t),xZo=r(SPe," (Longformer model)"),SPe.forEach(t),$Zo=i(X),CF=n(X,"LI",{});var RPe=s(CF);a1e=n(RPe,"STRONG",{});var TMt=s(a1e);kZo=r(TMt,"lxmert"),TMt.forEach(t),SZo=r(RPe," \u2014 "),Yz=n(RPe,"A",{href:!0});var MMt=s(Yz);RZo=r(MMt,"LxmertForQuestionAnswering"),MMt.forEach(t),PZo=r(RPe," (LXMERT model)"),RPe.forEach(t),BZo=i(X),wF=n(X,"LI",{});var PPe=s(wF);n1e=n(PPe,"STRONG",{});var EMt=s(n1e);IZo=r(EMt,"mbart"),EMt.forEach(t),NZo=r(PPe," \u2014 "),Kz=n(PPe,"A",{href:!0});var CMt=s(Kz);qZo=r(CMt,"MBartForQuestionAnswering"),CMt.forEach(t),jZo=r(PPe," (mBART model)"),PPe.forEach(t),DZo=i(X),AF=n(X,"LI",{});var BPe=s(AF);s1e=n(BPe,"STRONG",{});var wMt=s(s1e);GZo=r(wMt,"megatron-bert"),wMt.forEach(t),OZo=r(BPe," \u2014 "),Zz=n(BPe,"A",{href:!0});var AMt=s(Zz);VZo=r(AMt,"MegatronBertForQuestionAnswering"),AMt.forEach(t),XZo=r(BPe," (Megatron-BERT model)"),BPe.forEach(t),zZo=i(X),LF=n(X,"LI",{});var IPe=s(LF);l1e=n(IPe,"STRONG",{});var LMt=s(l1e);QZo=r(LMt,"mobilebert"),LMt.forEach(t),WZo=r(IPe," \u2014 "),eQ=n(IPe,"A",{href:!0});var yMt=s(eQ);HZo=r(yMt,"MobileBertForQuestionAnswering"),yMt.forEach(t),UZo=r(IPe," (MobileBERT model)"),IPe.forEach(t),JZo=i(X),yF=n(X,"LI",{});var NPe=s(yF);i1e=n(NPe,"STRONG",{});var xMt=s(i1e);YZo=r(xMt,"mpnet"),xMt.forEach(t),KZo=r(NPe," \u2014 "),oQ=n(NPe,"A",{href:!0});var $Mt=s(oQ);ZZo=r($Mt,"MPNetForQuestionAnswering"),$Mt.forEach(t),eer=r(NPe," (MPNet model)"),NPe.forEach(t),oer=i(X),xF=n(X,"LI",{});var qPe=s(xF);d1e=n(qPe,"STRONG",{});var kMt=s(d1e);rer=r(kMt,"nezha"),kMt.forEach(t),ter=r(qPe," \u2014 "),rQ=n(qPe,"A",{href:!0});var SMt=s(rQ);aer=r(SMt,"NezhaForQuestionAnswering"),SMt.forEach(t),ner=r(qPe," (Nezha model)"),qPe.forEach(t),ser=i(X),$F=n(X,"LI",{});var jPe=s($F);c1e=n(jPe,"STRONG",{});var RMt=s(c1e);ler=r(RMt,"nystromformer"),RMt.forEach(t),ier=r(jPe," \u2014 "),tQ=n(jPe,"A",{href:!0});var PMt=s(tQ);der=r(PMt,"NystromformerForQuestionAnswering"),PMt.forEach(t),cer=r(jPe," (Nystr\xF6mformer model)"),jPe.forEach(t),fer=i(X),kF=n(X,"LI",{});var DPe=s(kF);f1e=n(DPe,"STRONG",{});var BMt=s(f1e);mer=r(BMt,"qdqbert"),BMt.forEach(t),ger=r(DPe," \u2014 "),aQ=n(DPe,"A",{href:!0});var IMt=s(aQ);her=r(IMt,"QDQBertForQuestionAnswering"),IMt.forEach(t),per=r(DPe," (QDQBert model)"),DPe.forEach(t),_er=i(X),SF=n(X,"LI",{});var GPe=s(SF);m1e=n(GPe,"STRONG",{});var NMt=s(m1e);uer=r(NMt,"reformer"),NMt.forEach(t),ber=r(GPe," \u2014 "),nQ=n(GPe,"A",{href:!0});var qMt=s(nQ);ver=r(qMt,"ReformerForQuestionAnswering"),qMt.forEach(t),Fer=r(GPe," (Reformer model)"),GPe.forEach(t),Ter=i(X),RF=n(X,"LI",{});var OPe=s(RF);g1e=n(OPe,"STRONG",{});var jMt=s(g1e);Mer=r(jMt,"rembert"),jMt.forEach(t),Eer=r(OPe," \u2014 "),sQ=n(OPe,"A",{href:!0});var DMt=s(sQ);Cer=r(DMt,"RemBertForQuestionAnswering"),DMt.forEach(t),wer=r(OPe," (RemBERT model)"),OPe.forEach(t),Aer=i(X),PF=n(X,"LI",{});var VPe=s(PF);h1e=n(VPe,"STRONG",{});var GMt=s(h1e);Ler=r(GMt,"roberta"),GMt.forEach(t),yer=r(VPe," \u2014 "),lQ=n(VPe,"A",{href:!0});var OMt=s(lQ);xer=r(OMt,"RobertaForQuestionAnswering"),OMt.forEach(t),$er=r(VPe," (RoBERTa model)"),VPe.forEach(t),ker=i(X),BF=n(X,"LI",{});var XPe=s(BF);p1e=n(XPe,"STRONG",{});var VMt=s(p1e);Ser=r(VMt,"roformer"),VMt.forEach(t),Rer=r(XPe," \u2014 "),iQ=n(XPe,"A",{href:!0});var XMt=s(iQ);Per=r(XMt,"RoFormerForQuestionAnswering"),XMt.forEach(t),Ber=r(XPe," (RoFormer model)"),XPe.forEach(t),Ier=i(X),IF=n(X,"LI",{});var zPe=s(IF);_1e=n(zPe,"STRONG",{});var zMt=s(_1e);Ner=r(zMt,"splinter"),zMt.forEach(t),qer=r(zPe," \u2014 "),dQ=n(zPe,"A",{href:!0});var QMt=s(dQ);jer=r(QMt,"SplinterForQuestionAnswering"),QMt.forEach(t),Der=r(zPe," (Splinter model)"),zPe.forEach(t),Ger=i(X),NF=n(X,"LI",{});var QPe=s(NF);u1e=n(QPe,"STRONG",{});var WMt=s(u1e);Oer=r(WMt,"squeezebert"),WMt.forEach(t),Ver=r(QPe," \u2014 "),cQ=n(QPe,"A",{href:!0});var HMt=s(cQ);Xer=r(HMt,"SqueezeBertForQuestionAnswering"),HMt.forEach(t),zer=r(QPe," (SqueezeBERT model)"),QPe.forEach(t),Qer=i(X),qF=n(X,"LI",{});var WPe=s(qF);b1e=n(WPe,"STRONG",{});var UMt=s(b1e);Wer=r(UMt,"xlm"),UMt.forEach(t),Her=r(WPe," \u2014 "),fQ=n(WPe,"A",{href:!0});var JMt=s(fQ);Uer=r(JMt,"XLMForQuestionAnsweringSimple"),JMt.forEach(t),Jer=r(WPe," (XLM model)"),WPe.forEach(t),Yer=i(X),jF=n(X,"LI",{});var HPe=s(jF);v1e=n(HPe,"STRONG",{});var YMt=s(v1e);Ker=r(YMt,"xlm-roberta"),YMt.forEach(t),Zer=r(HPe," \u2014 "),mQ=n(HPe,"A",{href:!0});var KMt=s(mQ);eor=r(KMt,"XLMRobertaForQuestionAnswering"),KMt.forEach(t),oor=r(HPe," (XLM-RoBERTa model)"),HPe.forEach(t),ror=i(X),DF=n(X,"LI",{});var UPe=s(DF);F1e=n(UPe,"STRONG",{});var ZMt=s(F1e);tor=r(ZMt,"xlm-roberta-xl"),ZMt.forEach(t),aor=r(UPe," \u2014 "),gQ=n(UPe,"A",{href:!0});var eEt=s(gQ);nor=r(eEt,"XLMRobertaXLForQuestionAnswering"),eEt.forEach(t),sor=r(UPe," (XLM-RoBERTa-XL model)"),UPe.forEach(t),lor=i(X),GF=n(X,"LI",{});var JPe=s(GF);T1e=n(JPe,"STRONG",{});var oEt=s(T1e);ior=r(oEt,"xlnet"),oEt.forEach(t),dor=r(JPe," \u2014 "),hQ=n(JPe,"A",{href:!0});var rEt=s(hQ);cor=r(rEt,"XLNetForQuestionAnsweringSimple"),rEt.forEach(t),mor=r(JPe," (XLNet model)"),JPe.forEach(t),gor=i(X),OF=n(X,"LI",{});var YPe=s(OF);M1e=n(YPe,"STRONG",{});var tEt=s(M1e);hor=r(tEt,"yoso"),tEt.forEach(t),por=r(YPe," \u2014 "),pQ=n(YPe,"A",{href:!0});var aEt=s(pQ);_or=r(aEt,"YosoForQuestionAnswering"),aEt.forEach(t),uor=r(YPe," (YOSO model)"),YPe.forEach(t),X.forEach(t),bor=i(ha),VF=n(ha,"P",{});var KPe=s(VF);vor=r(KPe,"The model is set in evaluation mode by default using "),E1e=n(KPe,"CODE",{});var nEt=s(E1e);For=r(nEt,"model.eval()"),nEt.forEach(t),Tor=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(KPe,"CODE",{});var sEt=s(C1e);Mor=r(sEt,"model.train()"),sEt.forEach(t),KPe.forEach(t),Eor=i(ha),T(XF.$$.fragment,ha),ha.forEach(t),ll.forEach(t),jOe=i(f),md=n(f,"H2",{class:!0});var zXe=s(md);zF=n(zXe,"A",{id:!0,class:!0,href:!0});var lEt=s(zF);w1e=n(lEt,"SPAN",{});var iEt=s(w1e);T(r8.$$.fragment,iEt),iEt.forEach(t),lEt.forEach(t),Cor=i(zXe),A1e=n(zXe,"SPAN",{});var dEt=s(A1e);wor=r(dEt,"AutoModelForTableQuestionAnswering"),dEt.forEach(t),zXe.forEach(t),DOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(t8.$$.fragment,il),Aor=i(il),gd=n(il,"P",{});var Yoe=s(gd);Lor=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Q=n(Yoe,"A",{href:!0});var cEt=s(_Q);yor=r(cEt,"from_pretrained()"),cEt.forEach(t),xor=r(Yoe," class method or the "),uQ=n(Yoe,"A",{href:!0});var fEt=s(uQ);$or=r(fEt,"from_config()"),fEt.forEach(t),kor=r(Yoe,` class
method.`),Yoe.forEach(t),Sor=i(il),a8=n(il,"P",{});var QXe=s(a8);Ror=r(QXe,"This class cannot be instantiated directly using "),L1e=n(QXe,"CODE",{});var mEt=s(L1e);Por=r(mEt,"__init__()"),mEt.forEach(t),Bor=r(QXe," (throws an error)."),QXe.forEach(t),Ior=i(il),pt=n(il,"DIV",{class:!0});var r6=s(pt);T(n8.$$.fragment,r6),Nor=i(r6),y1e=n(r6,"P",{});var gEt=s(y1e);qor=r(gEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gEt.forEach(t),jor=i(r6),hd=n(r6,"P",{});var Koe=s(hd);Dor=r(Koe,`Note:
Loading a model from its configuration file does `),x1e=n(Koe,"STRONG",{});var hEt=s(x1e);Gor=r(hEt,"not"),hEt.forEach(t),Oor=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(Koe,"A",{href:!0});var pEt=s(bQ);Vor=r(pEt,"from_pretrained()"),pEt.forEach(t),Xor=r(Koe," to load the model weights."),Koe.forEach(t),zor=i(r6),T(QF.$$.fragment,r6),r6.forEach(t),Qor=i(il),so=n(il,"DIV",{class:!0});var pa=s(so);T(s8.$$.fragment,pa),Wor=i(pa),$1e=n(pa,"P",{});var _Et=s($1e);Hor=r(_Et,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Et.forEach(t),Uor=i(pa),Va=n(pa,"P",{});var t6=s(Va);Jor=r(t6,"The model class to instantiate is selected based on the "),k1e=n(t6,"CODE",{});var uEt=s(k1e);Yor=r(uEt,"model_type"),uEt.forEach(t),Kor=r(t6,` property of the config object (either
passed as an argument or loaded from `),S1e=n(t6,"CODE",{});var bEt=s(S1e);Zor=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),err=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(t6,"CODE",{});var vEt=s(R1e);orr=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),rrr=r(t6,":"),t6.forEach(t),trr=i(pa),P1e=n(pa,"UL",{});var FEt=s(P1e);WF=n(FEt,"LI",{});var ZPe=s(WF);B1e=n(ZPe,"STRONG",{});var TEt=s(B1e);arr=r(TEt,"tapas"),TEt.forEach(t),nrr=r(ZPe," \u2014 "),vQ=n(ZPe,"A",{href:!0});var MEt=s(vQ);srr=r(MEt,"TapasForQuestionAnswering"),MEt.forEach(t),lrr=r(ZPe," (TAPAS model)"),ZPe.forEach(t),FEt.forEach(t),irr=i(pa),HF=n(pa,"P",{});var eBe=s(HF);drr=r(eBe,"The model is set in evaluation mode by default using "),I1e=n(eBe,"CODE",{});var EEt=s(I1e);crr=r(EEt,"model.eval()"),EEt.forEach(t),frr=r(eBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=n(eBe,"CODE",{});var CEt=s(N1e);mrr=r(CEt,"model.train()"),CEt.forEach(t),eBe.forEach(t),grr=i(pa),T(UF.$$.fragment,pa),pa.forEach(t),il.forEach(t),GOe=i(f),pd=n(f,"H2",{class:!0});var WXe=s(pd);JF=n(WXe,"A",{id:!0,class:!0,href:!0});var wEt=s(JF);q1e=n(wEt,"SPAN",{});var AEt=s(q1e);T(l8.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),hrr=i(WXe),j1e=n(WXe,"SPAN",{});var LEt=s(j1e);prr=r(LEt,"AutoModelForImageClassification"),LEt.forEach(t),WXe.forEach(t),OOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(i8.$$.fragment,dl),_rr=i(dl),_d=n(dl,"P",{});var Zoe=s(_d);urr=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=n(Zoe,"A",{href:!0});var yEt=s(FQ);brr=r(yEt,"from_pretrained()"),yEt.forEach(t),vrr=r(Zoe," class method or the "),TQ=n(Zoe,"A",{href:!0});var xEt=s(TQ);Frr=r(xEt,"from_config()"),xEt.forEach(t),Trr=r(Zoe,` class
method.`),Zoe.forEach(t),Mrr=i(dl),d8=n(dl,"P",{});var HXe=s(d8);Err=r(HXe,"This class cannot be instantiated directly using "),D1e=n(HXe,"CODE",{});var $Et=s(D1e);Crr=r($Et,"__init__()"),$Et.forEach(t),wrr=r(HXe," (throws an error)."),HXe.forEach(t),Arr=i(dl),_t=n(dl,"DIV",{class:!0});var a6=s(_t);T(c8.$$.fragment,a6),Lrr=i(a6),G1e=n(a6,"P",{});var kEt=s(G1e);yrr=r(kEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kEt.forEach(t),xrr=i(a6),ud=n(a6,"P",{});var ere=s(ud);$rr=r(ere,`Note:
Loading a model from its configuration file does `),O1e=n(ere,"STRONG",{});var SEt=s(O1e);krr=r(SEt,"not"),SEt.forEach(t),Srr=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(ere,"A",{href:!0});var REt=s(MQ);Rrr=r(REt,"from_pretrained()"),REt.forEach(t),Prr=r(ere," to load the model weights."),ere.forEach(t),Brr=i(a6),T(YF.$$.fragment,a6),a6.forEach(t),Irr=i(dl),lo=n(dl,"DIV",{class:!0});var _a=s(lo);T(f8.$$.fragment,_a),Nrr=i(_a),V1e=n(_a,"P",{});var PEt=s(V1e);qrr=r(PEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PEt.forEach(t),jrr=i(_a),Xa=n(_a,"P",{});var n6=s(Xa);Drr=r(n6,"The model class to instantiate is selected based on the "),X1e=n(n6,"CODE",{});var BEt=s(X1e);Grr=r(BEt,"model_type"),BEt.forEach(t),Orr=r(n6,` property of the config object (either
passed as an argument or loaded from `),z1e=n(n6,"CODE",{});var IEt=s(z1e);Vrr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),Xrr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(n6,"CODE",{});var NEt=s(Q1e);zrr=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),Qrr=r(n6,":"),n6.forEach(t),Wrr=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);KF=n(Te,"LI",{});var oBe=s(KF);W1e=n(oBe,"STRONG",{});var qEt=s(W1e);Hrr=r(qEt,"beit"),qEt.forEach(t),Urr=r(oBe," \u2014 "),EQ=n(oBe,"A",{href:!0});var jEt=s(EQ);Jrr=r(jEt,"BeitForImageClassification"),jEt.forEach(t),Yrr=r(oBe," (BEiT model)"),oBe.forEach(t),Krr=i(Te),ZF=n(Te,"LI",{});var rBe=s(ZF);H1e=n(rBe,"STRONG",{});var DEt=s(H1e);Zrr=r(DEt,"convnext"),DEt.forEach(t),etr=r(rBe," \u2014 "),CQ=n(rBe,"A",{href:!0});var GEt=s(CQ);otr=r(GEt,"ConvNextForImageClassification"),GEt.forEach(t),rtr=r(rBe," (ConvNeXT model)"),rBe.forEach(t),ttr=i(Te),eT=n(Te,"LI",{});var tBe=s(eT);U1e=n(tBe,"STRONG",{});var OEt=s(U1e);atr=r(OEt,"cvt"),OEt.forEach(t),ntr=r(tBe," \u2014 "),wQ=n(tBe,"A",{href:!0});var VEt=s(wQ);str=r(VEt,"CvtForImageClassification"),VEt.forEach(t),ltr=r(tBe," (CvT model)"),tBe.forEach(t),itr=i(Te),oT=n(Te,"LI",{});var aBe=s(oT);J1e=n(aBe,"STRONG",{});var XEt=s(J1e);dtr=r(XEt,"data2vec-vision"),XEt.forEach(t),ctr=r(aBe," \u2014 "),AQ=n(aBe,"A",{href:!0});var zEt=s(AQ);ftr=r(zEt,"Data2VecVisionForImageClassification"),zEt.forEach(t),mtr=r(aBe," (Data2VecVision model)"),aBe.forEach(t),gtr=i(Te),zs=n(Te,"LI",{});var nS=s(zs);Y1e=n(nS,"STRONG",{});var QEt=s(Y1e);htr=r(QEt,"deit"),QEt.forEach(t),ptr=r(nS," \u2014 "),LQ=n(nS,"A",{href:!0});var WEt=s(LQ);_tr=r(WEt,"DeiTForImageClassification"),WEt.forEach(t),utr=r(nS," or "),yQ=n(nS,"A",{href:!0});var HEt=s(yQ);btr=r(HEt,"DeiTForImageClassificationWithTeacher"),HEt.forEach(t),vtr=r(nS," (DeiT model)"),nS.forEach(t),Ftr=i(Te),rT=n(Te,"LI",{});var nBe=s(rT);K1e=n(nBe,"STRONG",{});var UEt=s(K1e);Ttr=r(UEt,"imagegpt"),UEt.forEach(t),Mtr=r(nBe," \u2014 "),xQ=n(nBe,"A",{href:!0});var JEt=s(xQ);Etr=r(JEt,"ImageGPTForImageClassification"),JEt.forEach(t),Ctr=r(nBe," (ImageGPT model)"),nBe.forEach(t),wtr=i(Te),Qs=n(Te,"LI",{});var sS=s(Qs);Z1e=n(sS,"STRONG",{});var YEt=s(Z1e);Atr=r(YEt,"levit"),YEt.forEach(t),Ltr=r(sS," \u2014 "),$Q=n(sS,"A",{href:!0});var KEt=s($Q);ytr=r(KEt,"LevitForImageClassification"),KEt.forEach(t),xtr=r(sS," or "),kQ=n(sS,"A",{href:!0});var ZEt=s(kQ);$tr=r(ZEt,"LevitForImageClassificationWithTeacher"),ZEt.forEach(t),ktr=r(sS," (LeViT model)"),sS.forEach(t),Str=i(Te),ut=n(Te,"LI",{});var yf=s(ut);e3e=n(yf,"STRONG",{});var e4t=s(e3e);Rtr=r(e4t,"perceiver"),e4t.forEach(t),Ptr=r(yf," \u2014 "),SQ=n(yf,"A",{href:!0});var o4t=s(SQ);Btr=r(o4t,"PerceiverForImageClassificationLearned"),o4t.forEach(t),Itr=r(yf," or "),RQ=n(yf,"A",{href:!0});var r4t=s(RQ);Ntr=r(r4t,"PerceiverForImageClassificationFourier"),r4t.forEach(t),qtr=r(yf," or "),PQ=n(yf,"A",{href:!0});var t4t=s(PQ);jtr=r(t4t,"PerceiverForImageClassificationConvProcessing"),t4t.forEach(t),Dtr=r(yf," (Perceiver model)"),yf.forEach(t),Gtr=i(Te),tT=n(Te,"LI",{});var sBe=s(tT);o3e=n(sBe,"STRONG",{});var a4t=s(o3e);Otr=r(a4t,"poolformer"),a4t.forEach(t),Vtr=r(sBe," \u2014 "),BQ=n(sBe,"A",{href:!0});var n4t=s(BQ);Xtr=r(n4t,"PoolFormerForImageClassification"),n4t.forEach(t),ztr=r(sBe," (PoolFormer model)"),sBe.forEach(t),Qtr=i(Te),aT=n(Te,"LI",{});var lBe=s(aT);r3e=n(lBe,"STRONG",{});var s4t=s(r3e);Wtr=r(s4t,"regnet"),s4t.forEach(t),Htr=r(lBe," \u2014 "),IQ=n(lBe,"A",{href:!0});var l4t=s(IQ);Utr=r(l4t,"RegNetForImageClassification"),l4t.forEach(t),Jtr=r(lBe," (RegNet model)"),lBe.forEach(t),Ytr=i(Te),nT=n(Te,"LI",{});var iBe=s(nT);t3e=n(iBe,"STRONG",{});var i4t=s(t3e);Ktr=r(i4t,"resnet"),i4t.forEach(t),Ztr=r(iBe," \u2014 "),NQ=n(iBe,"A",{href:!0});var d4t=s(NQ);ear=r(d4t,"ResNetForImageClassification"),d4t.forEach(t),oar=r(iBe," (ResNet model)"),iBe.forEach(t),rar=i(Te),sT=n(Te,"LI",{});var dBe=s(sT);a3e=n(dBe,"STRONG",{});var c4t=s(a3e);tar=r(c4t,"segformer"),c4t.forEach(t),aar=r(dBe," \u2014 "),qQ=n(dBe,"A",{href:!0});var f4t=s(qQ);nar=r(f4t,"SegformerForImageClassification"),f4t.forEach(t),sar=r(dBe," (SegFormer model)"),dBe.forEach(t),lar=i(Te),lT=n(Te,"LI",{});var cBe=s(lT);n3e=n(cBe,"STRONG",{});var m4t=s(n3e);iar=r(m4t,"swin"),m4t.forEach(t),dar=r(cBe," \u2014 "),jQ=n(cBe,"A",{href:!0});var g4t=s(jQ);car=r(g4t,"SwinForImageClassification"),g4t.forEach(t),far=r(cBe," (Swin Transformer model)"),cBe.forEach(t),mar=i(Te),iT=n(Te,"LI",{});var fBe=s(iT);s3e=n(fBe,"STRONG",{});var h4t=s(s3e);gar=r(h4t,"van"),h4t.forEach(t),har=r(fBe," \u2014 "),DQ=n(fBe,"A",{href:!0});var p4t=s(DQ);par=r(p4t,"VanForImageClassification"),p4t.forEach(t),_ar=r(fBe," (VAN model)"),fBe.forEach(t),uar=i(Te),dT=n(Te,"LI",{});var mBe=s(dT);l3e=n(mBe,"STRONG",{});var _4t=s(l3e);bar=r(_4t,"vit"),_4t.forEach(t),Far=r(mBe," \u2014 "),GQ=n(mBe,"A",{href:!0});var u4t=s(GQ);Tar=r(u4t,"ViTForImageClassification"),u4t.forEach(t),Mar=r(mBe," (ViT model)"),mBe.forEach(t),Te.forEach(t),Ear=i(_a),cT=n(_a,"P",{});var gBe=s(cT);Car=r(gBe,"The model is set in evaluation mode by default using "),i3e=n(gBe,"CODE",{});var b4t=s(i3e);war=r(b4t,"model.eval()"),b4t.forEach(t),Aar=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d3e=n(gBe,"CODE",{});var v4t=s(d3e);Lar=r(v4t,"model.train()"),v4t.forEach(t),gBe.forEach(t),yar=i(_a),T(fT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),VOe=i(f),bd=n(f,"H2",{class:!0});var UXe=s(bd);mT=n(UXe,"A",{id:!0,class:!0,href:!0});var F4t=s(mT);c3e=n(F4t,"SPAN",{});var T4t=s(c3e);T(m8.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),xar=i(UXe),f3e=n(UXe,"SPAN",{});var M4t=s(f3e);$ar=r(M4t,"AutoModelForVision2Seq"),M4t.forEach(t),UXe.forEach(t),XOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(g8.$$.fragment,cl),kar=i(cl),vd=n(cl,"P",{});var ore=s(vd);Sar=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=n(ore,"A",{href:!0});var E4t=s(OQ);Rar=r(E4t,"from_pretrained()"),E4t.forEach(t),Par=r(ore," class method or the "),VQ=n(ore,"A",{href:!0});var C4t=s(VQ);Bar=r(C4t,"from_config()"),C4t.forEach(t),Iar=r(ore,` class
method.`),ore.forEach(t),Nar=i(cl),h8=n(cl,"P",{});var JXe=s(h8);qar=r(JXe,"This class cannot be instantiated directly using "),m3e=n(JXe,"CODE",{});var w4t=s(m3e);jar=r(w4t,"__init__()"),w4t.forEach(t),Dar=r(JXe," (throws an error)."),JXe.forEach(t),Gar=i(cl),bt=n(cl,"DIV",{class:!0});var s6=s(bt);T(p8.$$.fragment,s6),Oar=i(s6),g3e=n(s6,"P",{});var A4t=s(g3e);Var=r(A4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A4t.forEach(t),Xar=i(s6),Fd=n(s6,"P",{});var rre=s(Fd);zar=r(rre,`Note:
Loading a model from its configuration file does `),h3e=n(rre,"STRONG",{});var L4t=s(h3e);Qar=r(L4t,"not"),L4t.forEach(t),War=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(rre,"A",{href:!0});var y4t=s(XQ);Har=r(y4t,"from_pretrained()"),y4t.forEach(t),Uar=r(rre," to load the model weights."),rre.forEach(t),Jar=i(s6),T(gT.$$.fragment,s6),s6.forEach(t),Yar=i(cl),io=n(cl,"DIV",{class:!0});var ua=s(io);T(_8.$$.fragment,ua),Kar=i(ua),p3e=n(ua,"P",{});var x4t=s(p3e);Zar=r(x4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),x4t.forEach(t),enr=i(ua),za=n(ua,"P",{});var l6=s(za);onr=r(l6,"The model class to instantiate is selected based on the "),_3e=n(l6,"CODE",{});var $4t=s(_3e);rnr=r($4t,"model_type"),$4t.forEach(t),tnr=r(l6,` property of the config object (either
passed as an argument or loaded from `),u3e=n(l6,"CODE",{});var k4t=s(u3e);anr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),nnr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(l6,"CODE",{});var S4t=s(b3e);snr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),lnr=r(l6,":"),l6.forEach(t),inr=i(ua),v3e=n(ua,"UL",{});var R4t=s(v3e);hT=n(R4t,"LI",{});var hBe=s(hT);F3e=n(hBe,"STRONG",{});var P4t=s(F3e);dnr=r(P4t,"vision-encoder-decoder"),P4t.forEach(t),cnr=r(hBe," \u2014 "),zQ=n(hBe,"A",{href:!0});var B4t=s(zQ);fnr=r(B4t,"VisionEncoderDecoderModel"),B4t.forEach(t),mnr=r(hBe," (Vision Encoder decoder model)"),hBe.forEach(t),R4t.forEach(t),gnr=i(ua),pT=n(ua,"P",{});var pBe=s(pT);hnr=r(pBe,"The model is set in evaluation mode by default using "),T3e=n(pBe,"CODE",{});var I4t=s(T3e);pnr=r(I4t,"model.eval()"),I4t.forEach(t),_nr=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M3e=n(pBe,"CODE",{});var N4t=s(M3e);unr=r(N4t,"model.train()"),N4t.forEach(t),pBe.forEach(t),bnr=i(ua),T(_T.$$.fragment,ua),ua.forEach(t),cl.forEach(t),zOe=i(f),Td=n(f,"H2",{class:!0});var YXe=s(Td);uT=n(YXe,"A",{id:!0,class:!0,href:!0});var q4t=s(uT);E3e=n(q4t,"SPAN",{});var j4t=s(E3e);T(u8.$$.fragment,j4t),j4t.forEach(t),q4t.forEach(t),vnr=i(YXe),C3e=n(YXe,"SPAN",{});var D4t=s(C3e);Fnr=r(D4t,"AutoModelForVisualQuestionAnswering"),D4t.forEach(t),YXe.forEach(t),QOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(b8.$$.fragment,fl),Tnr=i(fl),Md=n(fl,"P",{});var tre=s(Md);Mnr=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QQ=n(tre,"A",{href:!0});var G4t=s(QQ);Enr=r(G4t,"from_pretrained()"),G4t.forEach(t),Cnr=r(tre," class method or the "),WQ=n(tre,"A",{href:!0});var O4t=s(WQ);wnr=r(O4t,"from_config()"),O4t.forEach(t),Anr=r(tre,` class
method.`),tre.forEach(t),Lnr=i(fl),v8=n(fl,"P",{});var KXe=s(v8);ynr=r(KXe,"This class cannot be instantiated directly using "),w3e=n(KXe,"CODE",{});var V4t=s(w3e);xnr=r(V4t,"__init__()"),V4t.forEach(t),$nr=r(KXe," (throws an error)."),KXe.forEach(t),knr=i(fl),vt=n(fl,"DIV",{class:!0});var i6=s(vt);T(F8.$$.fragment,i6),Snr=i(i6),A3e=n(i6,"P",{});var X4t=s(A3e);Rnr=r(X4t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),X4t.forEach(t),Pnr=i(i6),Ed=n(i6,"P",{});var are=s(Ed);Bnr=r(are,`Note:
Loading a model from its configuration file does `),L3e=n(are,"STRONG",{});var z4t=s(L3e);Inr=r(z4t,"not"),z4t.forEach(t),Nnr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(are,"A",{href:!0});var Q4t=s(HQ);qnr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),jnr=r(are," to load the model weights."),are.forEach(t),Dnr=i(i6),T(bT.$$.fragment,i6),i6.forEach(t),Gnr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(T8.$$.fragment,ba),Onr=i(ba),y3e=n(ba,"P",{});var W4t=s(y3e);Vnr=r(W4t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),W4t.forEach(t),Xnr=i(ba),Qa=n(ba,"P",{});var d6=s(Qa);znr=r(d6,"The model class to instantiate is selected based on the "),x3e=n(d6,"CODE",{});var H4t=s(x3e);Qnr=r(H4t,"model_type"),H4t.forEach(t),Wnr=r(d6,` property of the config object (either
passed as an argument or loaded from `),$3e=n(d6,"CODE",{});var U4t=s($3e);Hnr=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),Unr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(d6,"CODE",{});var J4t=s(k3e);Jnr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),Ynr=r(d6,":"),d6.forEach(t),Knr=i(ba),S3e=n(ba,"UL",{});var Y4t=s(S3e);vT=n(Y4t,"LI",{});var _Be=s(vT);R3e=n(_Be,"STRONG",{});var K4t=s(R3e);Znr=r(K4t,"vilt"),K4t.forEach(t),esr=r(_Be," \u2014 "),UQ=n(_Be,"A",{href:!0});var Z4t=s(UQ);osr=r(Z4t,"ViltForQuestionAnswering"),Z4t.forEach(t),rsr=r(_Be," (ViLT model)"),_Be.forEach(t),Y4t.forEach(t),tsr=i(ba),FT=n(ba,"P",{});var uBe=s(FT);asr=r(uBe,"The model is set in evaluation mode by default using "),P3e=n(uBe,"CODE",{});var eCt=s(P3e);nsr=r(eCt,"model.eval()"),eCt.forEach(t),ssr=r(uBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B3e=n(uBe,"CODE",{});var oCt=s(B3e);lsr=r(oCt,"model.train()"),oCt.forEach(t),uBe.forEach(t),isr=i(ba),T(TT.$$.fragment,ba),ba.forEach(t),fl.forEach(t),WOe=i(f),Cd=n(f,"H2",{class:!0});var ZXe=s(Cd);MT=n(ZXe,"A",{id:!0,class:!0,href:!0});var rCt=s(MT);I3e=n(rCt,"SPAN",{});var tCt=s(I3e);T(M8.$$.fragment,tCt),tCt.forEach(t),rCt.forEach(t),dsr=i(ZXe),N3e=n(ZXe,"SPAN",{});var aCt=s(N3e);csr=r(aCt,"AutoModelForAudioClassification"),aCt.forEach(t),ZXe.forEach(t),HOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(E8.$$.fragment,ml),fsr=i(ml),wd=n(ml,"P",{});var nre=s(wd);msr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JQ=n(nre,"A",{href:!0});var nCt=s(JQ);gsr=r(nCt,"from_pretrained()"),nCt.forEach(t),hsr=r(nre," class method or the "),YQ=n(nre,"A",{href:!0});var sCt=s(YQ);psr=r(sCt,"from_config()"),sCt.forEach(t),_sr=r(nre,` class
method.`),nre.forEach(t),usr=i(ml),C8=n(ml,"P",{});var eze=s(C8);bsr=r(eze,"This class cannot be instantiated directly using "),q3e=n(eze,"CODE",{});var lCt=s(q3e);vsr=r(lCt,"__init__()"),lCt.forEach(t),Fsr=r(eze," (throws an error)."),eze.forEach(t),Tsr=i(ml),Ft=n(ml,"DIV",{class:!0});var c6=s(Ft);T(w8.$$.fragment,c6),Msr=i(c6),j3e=n(c6,"P",{});var iCt=s(j3e);Esr=r(iCt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),iCt.forEach(t),Csr=i(c6),Ad=n(c6,"P",{});var sre=s(Ad);wsr=r(sre,`Note:
Loading a model from its configuration file does `),D3e=n(sre,"STRONG",{});var dCt=s(D3e);Asr=r(dCt,"not"),dCt.forEach(t),Lsr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(sre,"A",{href:!0});var cCt=s(KQ);ysr=r(cCt,"from_pretrained()"),cCt.forEach(t),xsr=r(sre," to load the model weights."),sre.forEach(t),$sr=i(c6),T(ET.$$.fragment,c6),c6.forEach(t),ksr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(A8.$$.fragment,va),Ssr=i(va),G3e=n(va,"P",{});var fCt=s(G3e);Rsr=r(fCt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fCt.forEach(t),Psr=i(va),Wa=n(va,"P",{});var f6=s(Wa);Bsr=r(f6,"The model class to instantiate is selected based on the "),O3e=n(f6,"CODE",{});var mCt=s(O3e);Isr=r(mCt,"model_type"),mCt.forEach(t),Nsr=r(f6,` property of the config object (either
passed as an argument or loaded from `),V3e=n(f6,"CODE",{});var gCt=s(V3e);qsr=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),jsr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(f6,"CODE",{});var hCt=s(X3e);Dsr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),Gsr=r(f6,":"),f6.forEach(t),Osr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);CT=n(ze,"LI",{});var bBe=s(CT);z3e=n(bBe,"STRONG",{});var pCt=s(z3e);Vsr=r(pCt,"data2vec-audio"),pCt.forEach(t),Xsr=r(bBe," \u2014 "),ZQ=n(bBe,"A",{href:!0});var _Ct=s(ZQ);zsr=r(_Ct,"Data2VecAudioForSequenceClassification"),_Ct.forEach(t),Qsr=r(bBe," (Data2VecAudio model)"),bBe.forEach(t),Wsr=i(ze),wT=n(ze,"LI",{});var vBe=s(wT);Q3e=n(vBe,"STRONG",{});var uCt=s(Q3e);Hsr=r(uCt,"hubert"),uCt.forEach(t),Usr=r(vBe," \u2014 "),eW=n(vBe,"A",{href:!0});var bCt=s(eW);Jsr=r(bCt,"HubertForSequenceClassification"),bCt.forEach(t),Ysr=r(vBe," (Hubert model)"),vBe.forEach(t),Ksr=i(ze),AT=n(ze,"LI",{});var FBe=s(AT);W3e=n(FBe,"STRONG",{});var vCt=s(W3e);Zsr=r(vCt,"sew"),vCt.forEach(t),elr=r(FBe," \u2014 "),oW=n(FBe,"A",{href:!0});var FCt=s(oW);olr=r(FCt,"SEWForSequenceClassification"),FCt.forEach(t),rlr=r(FBe," (SEW model)"),FBe.forEach(t),tlr=i(ze),LT=n(ze,"LI",{});var TBe=s(LT);H3e=n(TBe,"STRONG",{});var TCt=s(H3e);alr=r(TCt,"sew-d"),TCt.forEach(t),nlr=r(TBe," \u2014 "),rW=n(TBe,"A",{href:!0});var MCt=s(rW);slr=r(MCt,"SEWDForSequenceClassification"),MCt.forEach(t),llr=r(TBe," (SEW-D model)"),TBe.forEach(t),ilr=i(ze),yT=n(ze,"LI",{});var MBe=s(yT);U3e=n(MBe,"STRONG",{});var ECt=s(U3e);dlr=r(ECt,"unispeech"),ECt.forEach(t),clr=r(MBe," \u2014 "),tW=n(MBe,"A",{href:!0});var CCt=s(tW);flr=r(CCt,"UniSpeechForSequenceClassification"),CCt.forEach(t),mlr=r(MBe," (UniSpeech model)"),MBe.forEach(t),glr=i(ze),xT=n(ze,"LI",{});var EBe=s(xT);J3e=n(EBe,"STRONG",{});var wCt=s(J3e);hlr=r(wCt,"unispeech-sat"),wCt.forEach(t),plr=r(EBe," \u2014 "),aW=n(EBe,"A",{href:!0});var ACt=s(aW);_lr=r(ACt,"UniSpeechSatForSequenceClassification"),ACt.forEach(t),ulr=r(EBe," (UniSpeechSat model)"),EBe.forEach(t),blr=i(ze),$T=n(ze,"LI",{});var CBe=s($T);Y3e=n(CBe,"STRONG",{});var LCt=s(Y3e);vlr=r(LCt,"wav2vec2"),LCt.forEach(t),Flr=r(CBe," \u2014 "),nW=n(CBe,"A",{href:!0});var yCt=s(nW);Tlr=r(yCt,"Wav2Vec2ForSequenceClassification"),yCt.forEach(t),Mlr=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),Elr=i(ze),kT=n(ze,"LI",{});var wBe=s(kT);K3e=n(wBe,"STRONG",{});var xCt=s(K3e);Clr=r(xCt,"wav2vec2-conformer"),xCt.forEach(t),wlr=r(wBe," \u2014 "),sW=n(wBe,"A",{href:!0});var $Ct=s(sW);Alr=r($Ct,"Wav2Vec2ConformerForSequenceClassification"),$Ct.forEach(t),Llr=r(wBe," (Wav2Vec2-Conformer model)"),wBe.forEach(t),ylr=i(ze),ST=n(ze,"LI",{});var ABe=s(ST);Z3e=n(ABe,"STRONG",{});var kCt=s(Z3e);xlr=r(kCt,"wavlm"),kCt.forEach(t),$lr=r(ABe," \u2014 "),lW=n(ABe,"A",{href:!0});var SCt=s(lW);klr=r(SCt,"WavLMForSequenceClassification"),SCt.forEach(t),Slr=r(ABe," (WavLM model)"),ABe.forEach(t),ze.forEach(t),Rlr=i(va),RT=n(va,"P",{});var LBe=s(RT);Plr=r(LBe,"The model is set in evaluation mode by default using "),e2e=n(LBe,"CODE",{});var RCt=s(e2e);Blr=r(RCt,"model.eval()"),RCt.forEach(t),Ilr=r(LBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=n(LBe,"CODE",{});var PCt=s(o2e);Nlr=r(PCt,"model.train()"),PCt.forEach(t),LBe.forEach(t),qlr=i(va),T(PT.$$.fragment,va),va.forEach(t),ml.forEach(t),UOe=i(f),Ld=n(f,"H2",{class:!0});var oze=s(Ld);BT=n(oze,"A",{id:!0,class:!0,href:!0});var BCt=s(BT);r2e=n(BCt,"SPAN",{});var ICt=s(r2e);T(L8.$$.fragment,ICt),ICt.forEach(t),BCt.forEach(t),jlr=i(oze),t2e=n(oze,"SPAN",{});var NCt=s(t2e);Dlr=r(NCt,"AutoModelForAudioFrameClassification"),NCt.forEach(t),oze.forEach(t),JOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(y8.$$.fragment,gl),Glr=i(gl),yd=n(gl,"P",{});var lre=s(yd);Olr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iW=n(lre,"A",{href:!0});var qCt=s(iW);Vlr=r(qCt,"from_pretrained()"),qCt.forEach(t),Xlr=r(lre," class method or the "),dW=n(lre,"A",{href:!0});var jCt=s(dW);zlr=r(jCt,"from_config()"),jCt.forEach(t),Qlr=r(lre,` class
method.`),lre.forEach(t),Wlr=i(gl),x8=n(gl,"P",{});var rze=s(x8);Hlr=r(rze,"This class cannot be instantiated directly using "),a2e=n(rze,"CODE",{});var DCt=s(a2e);Ulr=r(DCt,"__init__()"),DCt.forEach(t),Jlr=r(rze," (throws an error)."),rze.forEach(t),Ylr=i(gl),Tt=n(gl,"DIV",{class:!0});var m6=s(Tt);T($8.$$.fragment,m6),Klr=i(m6),n2e=n(m6,"P",{});var GCt=s(n2e);Zlr=r(GCt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),GCt.forEach(t),eir=i(m6),xd=n(m6,"P",{});var ire=s(xd);oir=r(ire,`Note:
Loading a model from its configuration file does `),s2e=n(ire,"STRONG",{});var OCt=s(s2e);rir=r(OCt,"not"),OCt.forEach(t),tir=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(ire,"A",{href:!0});var VCt=s(cW);air=r(VCt,"from_pretrained()"),VCt.forEach(t),nir=r(ire," to load the model weights."),ire.forEach(t),sir=i(m6),T(IT.$$.fragment,m6),m6.forEach(t),lir=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T(k8.$$.fragment,Fa),iir=i(Fa),l2e=n(Fa,"P",{});var XCt=s(l2e);dir=r(XCt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),XCt.forEach(t),cir=i(Fa),Ha=n(Fa,"P",{});var g6=s(Ha);fir=r(g6,"The model class to instantiate is selected based on the "),i2e=n(g6,"CODE",{});var zCt=s(i2e);mir=r(zCt,"model_type"),zCt.forEach(t),gir=r(g6,` property of the config object (either
passed as an argument or loaded from `),d2e=n(g6,"CODE",{});var QCt=s(d2e);hir=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),pir=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(g6,"CODE",{});var WCt=s(c2e);_ir=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),uir=r(g6,":"),g6.forEach(t),bir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);NT=n(hl,"LI",{});var yBe=s(NT);f2e=n(yBe,"STRONG",{});var HCt=s(f2e);vir=r(HCt,"data2vec-audio"),HCt.forEach(t),Fir=r(yBe," \u2014 "),fW=n(yBe,"A",{href:!0});var UCt=s(fW);Tir=r(UCt,"Data2VecAudioForAudioFrameClassification"),UCt.forEach(t),Mir=r(yBe," (Data2VecAudio model)"),yBe.forEach(t),Eir=i(hl),qT=n(hl,"LI",{});var xBe=s(qT);m2e=n(xBe,"STRONG",{});var JCt=s(m2e);Cir=r(JCt,"unispeech-sat"),JCt.forEach(t),wir=r(xBe," \u2014 "),mW=n(xBe,"A",{href:!0});var YCt=s(mW);Air=r(YCt,"UniSpeechSatForAudioFrameClassification"),YCt.forEach(t),Lir=r(xBe," (UniSpeechSat model)"),xBe.forEach(t),yir=i(hl),jT=n(hl,"LI",{});var $Be=s(jT);g2e=n($Be,"STRONG",{});var KCt=s(g2e);xir=r(KCt,"wav2vec2"),KCt.forEach(t),$ir=r($Be," \u2014 "),gW=n($Be,"A",{href:!0});var ZCt=s(gW);kir=r(ZCt,"Wav2Vec2ForAudioFrameClassification"),ZCt.forEach(t),Sir=r($Be," (Wav2Vec2 model)"),$Be.forEach(t),Rir=i(hl),DT=n(hl,"LI",{});var kBe=s(DT);h2e=n(kBe,"STRONG",{});var e5t=s(h2e);Pir=r(e5t,"wav2vec2-conformer"),e5t.forEach(t),Bir=r(kBe," \u2014 "),hW=n(kBe,"A",{href:!0});var o5t=s(hW);Iir=r(o5t,"Wav2Vec2ConformerForAudioFrameClassification"),o5t.forEach(t),Nir=r(kBe," (Wav2Vec2-Conformer model)"),kBe.forEach(t),qir=i(hl),GT=n(hl,"LI",{});var SBe=s(GT);p2e=n(SBe,"STRONG",{});var r5t=s(p2e);jir=r(r5t,"wavlm"),r5t.forEach(t),Dir=r(SBe," \u2014 "),pW=n(SBe,"A",{href:!0});var t5t=s(pW);Gir=r(t5t,"WavLMForAudioFrameClassification"),t5t.forEach(t),Oir=r(SBe," (WavLM model)"),SBe.forEach(t),hl.forEach(t),Vir=i(Fa),OT=n(Fa,"P",{});var RBe=s(OT);Xir=r(RBe,"The model is set in evaluation mode by default using "),_2e=n(RBe,"CODE",{});var a5t=s(_2e);zir=r(a5t,"model.eval()"),a5t.forEach(t),Qir=r(RBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(RBe,"CODE",{});var n5t=s(u2e);Wir=r(n5t,"model.train()"),n5t.forEach(t),RBe.forEach(t),Hir=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),YOe=i(f),$d=n(f,"H2",{class:!0});var tze=s($d);XT=n(tze,"A",{id:!0,class:!0,href:!0});var s5t=s(XT);b2e=n(s5t,"SPAN",{});var l5t=s(b2e);T(S8.$$.fragment,l5t),l5t.forEach(t),s5t.forEach(t),Uir=i(tze),v2e=n(tze,"SPAN",{});var i5t=s(v2e);Jir=r(i5t,"AutoModelForCTC"),i5t.forEach(t),tze.forEach(t),KOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(R8.$$.fragment,pl),Yir=i(pl),kd=n(pl,"P",{});var dre=s(kd);Kir=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_W=n(dre,"A",{href:!0});var d5t=s(_W);Zir=r(d5t,"from_pretrained()"),d5t.forEach(t),edr=r(dre," class method or the "),uW=n(dre,"A",{href:!0});var c5t=s(uW);odr=r(c5t,"from_config()"),c5t.forEach(t),rdr=r(dre,` class
method.`),dre.forEach(t),tdr=i(pl),P8=n(pl,"P",{});var aze=s(P8);adr=r(aze,"This class cannot be instantiated directly using "),F2e=n(aze,"CODE",{});var f5t=s(F2e);ndr=r(f5t,"__init__()"),f5t.forEach(t),sdr=r(aze," (throws an error)."),aze.forEach(t),ldr=i(pl),Mt=n(pl,"DIV",{class:!0});var h6=s(Mt);T(B8.$$.fragment,h6),idr=i(h6),T2e=n(h6,"P",{});var m5t=s(T2e);ddr=r(m5t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),m5t.forEach(t),cdr=i(h6),Sd=n(h6,"P",{});var cre=s(Sd);fdr=r(cre,`Note:
Loading a model from its configuration file does `),M2e=n(cre,"STRONG",{});var g5t=s(M2e);mdr=r(g5t,"not"),g5t.forEach(t),gdr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(cre,"A",{href:!0});var h5t=s(bW);hdr=r(h5t,"from_pretrained()"),h5t.forEach(t),pdr=r(cre," to load the model weights."),cre.forEach(t),_dr=i(h6),T(zT.$$.fragment,h6),h6.forEach(t),udr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(I8.$$.fragment,Ta),bdr=i(Ta),E2e=n(Ta,"P",{});var p5t=s(E2e);vdr=r(p5t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),p5t.forEach(t),Fdr=i(Ta),Ua=n(Ta,"P",{});var p6=s(Ua);Tdr=r(p6,"The model class to instantiate is selected based on the "),C2e=n(p6,"CODE",{});var _5t=s(C2e);Mdr=r(_5t,"model_type"),_5t.forEach(t),Edr=r(p6,` property of the config object (either
passed as an argument or loaded from `),w2e=n(p6,"CODE",{});var u5t=s(w2e);Cdr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),wdr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(p6,"CODE",{});var b5t=s(A2e);Adr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),Ldr=r(p6,":"),p6.forEach(t),ydr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);QT=n(Be,"LI",{});var PBe=s(QT);L2e=n(PBe,"STRONG",{});var v5t=s(L2e);xdr=r(v5t,"data2vec-audio"),v5t.forEach(t),$dr=r(PBe," \u2014 "),vW=n(PBe,"A",{href:!0});var F5t=s(vW);kdr=r(F5t,"Data2VecAudioForCTC"),F5t.forEach(t),Sdr=r(PBe," (Data2VecAudio model)"),PBe.forEach(t),Rdr=i(Be),WT=n(Be,"LI",{});var BBe=s(WT);y2e=n(BBe,"STRONG",{});var T5t=s(y2e);Pdr=r(T5t,"hubert"),T5t.forEach(t),Bdr=r(BBe," \u2014 "),FW=n(BBe,"A",{href:!0});var M5t=s(FW);Idr=r(M5t,"HubertForCTC"),M5t.forEach(t),Ndr=r(BBe," (Hubert model)"),BBe.forEach(t),qdr=i(Be),HT=n(Be,"LI",{});var IBe=s(HT);x2e=n(IBe,"STRONG",{});var E5t=s(x2e);jdr=r(E5t,"mctct"),E5t.forEach(t),Ddr=r(IBe," \u2014 "),TW=n(IBe,"A",{href:!0});var C5t=s(TW);Gdr=r(C5t,"MCTCTForCTC"),C5t.forEach(t),Odr=r(IBe," (M-CTC-T model)"),IBe.forEach(t),Vdr=i(Be),UT=n(Be,"LI",{});var NBe=s(UT);$2e=n(NBe,"STRONG",{});var w5t=s($2e);Xdr=r(w5t,"sew"),w5t.forEach(t),zdr=r(NBe," \u2014 "),MW=n(NBe,"A",{href:!0});var A5t=s(MW);Qdr=r(A5t,"SEWForCTC"),A5t.forEach(t),Wdr=r(NBe," (SEW model)"),NBe.forEach(t),Hdr=i(Be),JT=n(Be,"LI",{});var qBe=s(JT);k2e=n(qBe,"STRONG",{});var L5t=s(k2e);Udr=r(L5t,"sew-d"),L5t.forEach(t),Jdr=r(qBe," \u2014 "),EW=n(qBe,"A",{href:!0});var y5t=s(EW);Ydr=r(y5t,"SEWDForCTC"),y5t.forEach(t),Kdr=r(qBe," (SEW-D model)"),qBe.forEach(t),Zdr=i(Be),YT=n(Be,"LI",{});var jBe=s(YT);S2e=n(jBe,"STRONG",{});var x5t=s(S2e);ecr=r(x5t,"unispeech"),x5t.forEach(t),ocr=r(jBe," \u2014 "),CW=n(jBe,"A",{href:!0});var $5t=s(CW);rcr=r($5t,"UniSpeechForCTC"),$5t.forEach(t),tcr=r(jBe," (UniSpeech model)"),jBe.forEach(t),acr=i(Be),KT=n(Be,"LI",{});var DBe=s(KT);R2e=n(DBe,"STRONG",{});var k5t=s(R2e);ncr=r(k5t,"unispeech-sat"),k5t.forEach(t),scr=r(DBe," \u2014 "),wW=n(DBe,"A",{href:!0});var S5t=s(wW);lcr=r(S5t,"UniSpeechSatForCTC"),S5t.forEach(t),icr=r(DBe," (UniSpeechSat model)"),DBe.forEach(t),dcr=i(Be),ZT=n(Be,"LI",{});var GBe=s(ZT);P2e=n(GBe,"STRONG",{});var R5t=s(P2e);ccr=r(R5t,"wav2vec2"),R5t.forEach(t),fcr=r(GBe," \u2014 "),AW=n(GBe,"A",{href:!0});var P5t=s(AW);mcr=r(P5t,"Wav2Vec2ForCTC"),P5t.forEach(t),gcr=r(GBe," (Wav2Vec2 model)"),GBe.forEach(t),hcr=i(Be),e7=n(Be,"LI",{});var OBe=s(e7);B2e=n(OBe,"STRONG",{});var B5t=s(B2e);pcr=r(B5t,"wav2vec2-conformer"),B5t.forEach(t),_cr=r(OBe," \u2014 "),LW=n(OBe,"A",{href:!0});var I5t=s(LW);ucr=r(I5t,"Wav2Vec2ConformerForCTC"),I5t.forEach(t),bcr=r(OBe," (Wav2Vec2-Conformer model)"),OBe.forEach(t),vcr=i(Be),o7=n(Be,"LI",{});var VBe=s(o7);I2e=n(VBe,"STRONG",{});var N5t=s(I2e);Fcr=r(N5t,"wavlm"),N5t.forEach(t),Tcr=r(VBe," \u2014 "),yW=n(VBe,"A",{href:!0});var q5t=s(yW);Mcr=r(q5t,"WavLMForCTC"),q5t.forEach(t),Ecr=r(VBe," (WavLM model)"),VBe.forEach(t),Be.forEach(t),Ccr=i(Ta),r7=n(Ta,"P",{});var XBe=s(r7);wcr=r(XBe,"The model is set in evaluation mode by default using "),N2e=n(XBe,"CODE",{});var j5t=s(N2e);Acr=r(j5t,"model.eval()"),j5t.forEach(t),Lcr=r(XBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(XBe,"CODE",{});var D5t=s(q2e);ycr=r(D5t,"model.train()"),D5t.forEach(t),XBe.forEach(t),xcr=i(Ta),T(t7.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),ZOe=i(f),Rd=n(f,"H2",{class:!0});var nze=s(Rd);a7=n(nze,"A",{id:!0,class:!0,href:!0});var G5t=s(a7);j2e=n(G5t,"SPAN",{});var O5t=s(j2e);T(N8.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),$cr=i(nze),D2e=n(nze,"SPAN",{});var V5t=s(D2e);kcr=r(V5t,"AutoModelForSpeechSeq2Seq"),V5t.forEach(t),nze.forEach(t),eVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(q8.$$.fragment,_l),Scr=i(_l),Pd=n(_l,"P",{});var fre=s(Pd);Rcr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xW=n(fre,"A",{href:!0});var X5t=s(xW);Pcr=r(X5t,"from_pretrained()"),X5t.forEach(t),Bcr=r(fre," class method or the "),$W=n(fre,"A",{href:!0});var z5t=s($W);Icr=r(z5t,"from_config()"),z5t.forEach(t),Ncr=r(fre,` class
method.`),fre.forEach(t),qcr=i(_l),j8=n(_l,"P",{});var sze=s(j8);jcr=r(sze,"This class cannot be instantiated directly using "),G2e=n(sze,"CODE",{});var Q5t=s(G2e);Dcr=r(Q5t,"__init__()"),Q5t.forEach(t),Gcr=r(sze," (throws an error)."),sze.forEach(t),Ocr=i(_l),Et=n(_l,"DIV",{class:!0});var _6=s(Et);T(D8.$$.fragment,_6),Vcr=i(_6),O2e=n(_6,"P",{});var W5t=s(O2e);Xcr=r(W5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),W5t.forEach(t),zcr=i(_6),Bd=n(_6,"P",{});var mre=s(Bd);Qcr=r(mre,`Note:
Loading a model from its configuration file does `),V2e=n(mre,"STRONG",{});var H5t=s(V2e);Wcr=r(H5t,"not"),H5t.forEach(t),Hcr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(mre,"A",{href:!0});var U5t=s(kW);Ucr=r(U5t,"from_pretrained()"),U5t.forEach(t),Jcr=r(mre," to load the model weights."),mre.forEach(t),Ycr=i(_6),T(n7.$$.fragment,_6),_6.forEach(t),Kcr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(G8.$$.fragment,Ma),Zcr=i(Ma),X2e=n(Ma,"P",{});var J5t=s(X2e);efr=r(J5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),J5t.forEach(t),ofr=i(Ma),Ja=n(Ma,"P",{});var u6=s(Ja);rfr=r(u6,"The model class to instantiate is selected based on the "),z2e=n(u6,"CODE",{});var Y5t=s(z2e);tfr=r(Y5t,"model_type"),Y5t.forEach(t),afr=r(u6,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(u6,"CODE",{});var K5t=s(Q2e);nfr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),sfr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(u6,"CODE",{});var Z5t=s(W2e);lfr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),ifr=r(u6,":"),u6.forEach(t),dfr=i(Ma),O8=n(Ma,"UL",{});var lze=s(O8);s7=n(lze,"LI",{});var zBe=s(s7);H2e=n(zBe,"STRONG",{});var e0t=s(H2e);cfr=r(e0t,"speech-encoder-decoder"),e0t.forEach(t),ffr=r(zBe," \u2014 "),SW=n(zBe,"A",{href:!0});var o0t=s(SW);mfr=r(o0t,"SpeechEncoderDecoderModel"),o0t.forEach(t),gfr=r(zBe," (Speech Encoder decoder model)"),zBe.forEach(t),hfr=i(lze),l7=n(lze,"LI",{});var QBe=s(l7);U2e=n(QBe,"STRONG",{});var r0t=s(U2e);pfr=r(r0t,"speech_to_text"),r0t.forEach(t),_fr=r(QBe," \u2014 "),RW=n(QBe,"A",{href:!0});var t0t=s(RW);ufr=r(t0t,"Speech2TextForConditionalGeneration"),t0t.forEach(t),bfr=r(QBe," (Speech2Text model)"),QBe.forEach(t),lze.forEach(t),vfr=i(Ma),i7=n(Ma,"P",{});var WBe=s(i7);Ffr=r(WBe,"The model is set in evaluation mode by default using "),J2e=n(WBe,"CODE",{});var a0t=s(J2e);Tfr=r(a0t,"model.eval()"),a0t.forEach(t),Mfr=r(WBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=n(WBe,"CODE",{});var n0t=s(Y2e);Efr=r(n0t,"model.train()"),n0t.forEach(t),WBe.forEach(t),Cfr=i(Ma),T(d7.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),oVe=i(f),Id=n(f,"H2",{class:!0});var ize=s(Id);c7=n(ize,"A",{id:!0,class:!0,href:!0});var s0t=s(c7);K2e=n(s0t,"SPAN",{});var l0t=s(K2e);T(V8.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),wfr=i(ize),Z2e=n(ize,"SPAN",{});var i0t=s(Z2e);Afr=r(i0t,"AutoModelForAudioXVector"),i0t.forEach(t),ize.forEach(t),rVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(X8.$$.fragment,ul),Lfr=i(ul),Nd=n(ul,"P",{});var gre=s(Nd);yfr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PW=n(gre,"A",{href:!0});var d0t=s(PW);xfr=r(d0t,"from_pretrained()"),d0t.forEach(t),$fr=r(gre," class method or the "),BW=n(gre,"A",{href:!0});var c0t=s(BW);kfr=r(c0t,"from_config()"),c0t.forEach(t),Sfr=r(gre,` class
method.`),gre.forEach(t),Rfr=i(ul),z8=n(ul,"P",{});var dze=s(z8);Pfr=r(dze,"This class cannot be instantiated directly using "),ebe=n(dze,"CODE",{});var f0t=s(ebe);Bfr=r(f0t,"__init__()"),f0t.forEach(t),Ifr=r(dze," (throws an error)."),dze.forEach(t),Nfr=i(ul),Ct=n(ul,"DIV",{class:!0});var b6=s(Ct);T(Q8.$$.fragment,b6),qfr=i(b6),obe=n(b6,"P",{});var m0t=s(obe);jfr=r(m0t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),m0t.forEach(t),Dfr=i(b6),qd=n(b6,"P",{});var hre=s(qd);Gfr=r(hre,`Note:
Loading a model from its configuration file does `),rbe=n(hre,"STRONG",{});var g0t=s(rbe);Ofr=r(g0t,"not"),g0t.forEach(t),Vfr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(hre,"A",{href:!0});var h0t=s(IW);Xfr=r(h0t,"from_pretrained()"),h0t.forEach(t),zfr=r(hre," to load the model weights."),hre.forEach(t),Qfr=i(b6),T(f7.$$.fragment,b6),b6.forEach(t),Wfr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(W8.$$.fragment,Ea),Hfr=i(Ea),tbe=n(Ea,"P",{});var p0t=s(tbe);Ufr=r(p0t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),p0t.forEach(t),Jfr=i(Ea),Ya=n(Ea,"P",{});var v6=s(Ya);Yfr=r(v6,"The model class to instantiate is selected based on the "),abe=n(v6,"CODE",{});var _0t=s(abe);Kfr=r(_0t,"model_type"),_0t.forEach(t),Zfr=r(v6,` property of the config object (either
passed as an argument or loaded from `),nbe=n(v6,"CODE",{});var u0t=s(nbe);emr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),omr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(v6,"CODE",{});var b0t=s(sbe);rmr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),tmr=r(v6,":"),v6.forEach(t),amr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);m7=n(bl,"LI",{});var HBe=s(m7);lbe=n(HBe,"STRONG",{});var v0t=s(lbe);nmr=r(v0t,"data2vec-audio"),v0t.forEach(t),smr=r(HBe," \u2014 "),NW=n(HBe,"A",{href:!0});var F0t=s(NW);lmr=r(F0t,"Data2VecAudioForXVector"),F0t.forEach(t),imr=r(HBe," (Data2VecAudio model)"),HBe.forEach(t),dmr=i(bl),g7=n(bl,"LI",{});var UBe=s(g7);ibe=n(UBe,"STRONG",{});var T0t=s(ibe);cmr=r(T0t,"unispeech-sat"),T0t.forEach(t),fmr=r(UBe," \u2014 "),qW=n(UBe,"A",{href:!0});var M0t=s(qW);mmr=r(M0t,"UniSpeechSatForXVector"),M0t.forEach(t),gmr=r(UBe," (UniSpeechSat model)"),UBe.forEach(t),hmr=i(bl),h7=n(bl,"LI",{});var JBe=s(h7);dbe=n(JBe,"STRONG",{});var E0t=s(dbe);pmr=r(E0t,"wav2vec2"),E0t.forEach(t),_mr=r(JBe," \u2014 "),jW=n(JBe,"A",{href:!0});var C0t=s(jW);umr=r(C0t,"Wav2Vec2ForXVector"),C0t.forEach(t),bmr=r(JBe," (Wav2Vec2 model)"),JBe.forEach(t),vmr=i(bl),p7=n(bl,"LI",{});var YBe=s(p7);cbe=n(YBe,"STRONG",{});var w0t=s(cbe);Fmr=r(w0t,"wav2vec2-conformer"),w0t.forEach(t),Tmr=r(YBe," \u2014 "),DW=n(YBe,"A",{href:!0});var A0t=s(DW);Mmr=r(A0t,"Wav2Vec2ConformerForXVector"),A0t.forEach(t),Emr=r(YBe," (Wav2Vec2-Conformer model)"),YBe.forEach(t),Cmr=i(bl),_7=n(bl,"LI",{});var KBe=s(_7);fbe=n(KBe,"STRONG",{});var L0t=s(fbe);wmr=r(L0t,"wavlm"),L0t.forEach(t),Amr=r(KBe," \u2014 "),GW=n(KBe,"A",{href:!0});var y0t=s(GW);Lmr=r(y0t,"WavLMForXVector"),y0t.forEach(t),ymr=r(KBe," (WavLM model)"),KBe.forEach(t),bl.forEach(t),xmr=i(Ea),u7=n(Ea,"P",{});var ZBe=s(u7);$mr=r(ZBe,"The model is set in evaluation mode by default using "),mbe=n(ZBe,"CODE",{});var x0t=s(mbe);kmr=r(x0t,"model.eval()"),x0t.forEach(t),Smr=r(ZBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(ZBe,"CODE",{});var $0t=s(gbe);Rmr=r($0t,"model.train()"),$0t.forEach(t),ZBe.forEach(t),Pmr=i(Ea),T(b7.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),tVe=i(f),jd=n(f,"H2",{class:!0});var cze=s(jd);v7=n(cze,"A",{id:!0,class:!0,href:!0});var k0t=s(v7);hbe=n(k0t,"SPAN",{});var S0t=s(hbe);T(H8.$$.fragment,S0t),S0t.forEach(t),k0t.forEach(t),Bmr=i(cze),pbe=n(cze,"SPAN",{});var R0t=s(pbe);Imr=r(R0t,"AutoModelForMaskedImageModeling"),R0t.forEach(t),cze.forEach(t),aVe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(U8.$$.fragment,vl),Nmr=i(vl),Dd=n(vl,"P",{});var pre=s(Dd);qmr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OW=n(pre,"A",{href:!0});var P0t=s(OW);jmr=r(P0t,"from_pretrained()"),P0t.forEach(t),Dmr=r(pre," class method or the "),VW=n(pre,"A",{href:!0});var B0t=s(VW);Gmr=r(B0t,"from_config()"),B0t.forEach(t),Omr=r(pre,` class
method.`),pre.forEach(t),Vmr=i(vl),J8=n(vl,"P",{});var fze=s(J8);Xmr=r(fze,"This class cannot be instantiated directly using "),_be=n(fze,"CODE",{});var I0t=s(_be);zmr=r(I0t,"__init__()"),I0t.forEach(t),Qmr=r(fze," (throws an error)."),fze.forEach(t),Wmr=i(vl),wt=n(vl,"DIV",{class:!0});var F6=s(wt);T(Y8.$$.fragment,F6),Hmr=i(F6),ube=n(F6,"P",{});var N0t=s(ube);Umr=r(N0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),N0t.forEach(t),Jmr=i(F6),Gd=n(F6,"P",{});var _re=s(Gd);Ymr=r(_re,`Note:
Loading a model from its configuration file does `),bbe=n(_re,"STRONG",{});var q0t=s(bbe);Kmr=r(q0t,"not"),q0t.forEach(t),Zmr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(_re,"A",{href:!0});var j0t=s(XW);egr=r(j0t,"from_pretrained()"),j0t.forEach(t),ogr=r(_re," to load the model weights."),_re.forEach(t),rgr=i(F6),T(F7.$$.fragment,F6),F6.forEach(t),tgr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(K8.$$.fragment,Ca),agr=i(Ca),vbe=n(Ca,"P",{});var D0t=s(vbe);ngr=r(D0t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),D0t.forEach(t),sgr=i(Ca),Ka=n(Ca,"P",{});var T6=s(Ka);lgr=r(T6,"The model class to instantiate is selected based on the "),Fbe=n(T6,"CODE",{});var G0t=s(Fbe);igr=r(G0t,"model_type"),G0t.forEach(t),dgr=r(T6,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(T6,"CODE",{});var O0t=s(Tbe);cgr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),fgr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(T6,"CODE",{});var V0t=s(Mbe);mgr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),ggr=r(T6,":"),T6.forEach(t),hgr=i(Ca),Od=n(Ca,"UL",{});var ure=s(Od);T7=n(ure,"LI",{});var eIe=s(T7);Ebe=n(eIe,"STRONG",{});var X0t=s(Ebe);pgr=r(X0t,"deit"),X0t.forEach(t),_gr=r(eIe," \u2014 "),zW=n(eIe,"A",{href:!0});var z0t=s(zW);ugr=r(z0t,"DeiTForMaskedImageModeling"),z0t.forEach(t),bgr=r(eIe," (DeiT model)"),eIe.forEach(t),vgr=i(ure),M7=n(ure,"LI",{});var oIe=s(M7);Cbe=n(oIe,"STRONG",{});var Q0t=s(Cbe);Fgr=r(Q0t,"swin"),Q0t.forEach(t),Tgr=r(oIe," \u2014 "),QW=n(oIe,"A",{href:!0});var W0t=s(QW);Mgr=r(W0t,"SwinForMaskedImageModeling"),W0t.forEach(t),Egr=r(oIe," (Swin Transformer model)"),oIe.forEach(t),Cgr=i(ure),E7=n(ure,"LI",{});var rIe=s(E7);wbe=n(rIe,"STRONG",{});var H0t=s(wbe);wgr=r(H0t,"vit"),H0t.forEach(t),Agr=r(rIe," \u2014 "),WW=n(rIe,"A",{href:!0});var U0t=s(WW);Lgr=r(U0t,"ViTForMaskedImageModeling"),U0t.forEach(t),ygr=r(rIe," (ViT model)"),rIe.forEach(t),ure.forEach(t),xgr=i(Ca),C7=n(Ca,"P",{});var tIe=s(C7);$gr=r(tIe,"The model is set in evaluation mode by default using "),Abe=n(tIe,"CODE",{});var J0t=s(Abe);kgr=r(J0t,"model.eval()"),J0t.forEach(t),Sgr=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(tIe,"CODE",{});var Y0t=s(Lbe);Rgr=r(Y0t,"model.train()"),Y0t.forEach(t),tIe.forEach(t),Pgr=i(Ca),T(w7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),nVe=i(f),Vd=n(f,"H2",{class:!0});var mze=s(Vd);A7=n(mze,"A",{id:!0,class:!0,href:!0});var K0t=s(A7);ybe=n(K0t,"SPAN",{});var Z0t=s(ybe);T(Z8.$$.fragment,Z0t),Z0t.forEach(t),K0t.forEach(t),Bgr=i(mze),xbe=n(mze,"SPAN",{});var ewt=s(xbe);Igr=r(ewt,"AutoModelForObjectDetection"),ewt.forEach(t),mze.forEach(t),sVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(e9.$$.fragment,Fl),Ngr=i(Fl),Xd=n(Fl,"P",{});var bre=s(Xd);qgr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HW=n(bre,"A",{href:!0});var owt=s(HW);jgr=r(owt,"from_pretrained()"),owt.forEach(t),Dgr=r(bre," class method or the "),UW=n(bre,"A",{href:!0});var rwt=s(UW);Ggr=r(rwt,"from_config()"),rwt.forEach(t),Ogr=r(bre,` class
method.`),bre.forEach(t),Vgr=i(Fl),o9=n(Fl,"P",{});var gze=s(o9);Xgr=r(gze,"This class cannot be instantiated directly using "),$be=n(gze,"CODE",{});var twt=s($be);zgr=r(twt,"__init__()"),twt.forEach(t),Qgr=r(gze," (throws an error)."),gze.forEach(t),Wgr=i(Fl),At=n(Fl,"DIV",{class:!0});var M6=s(At);T(r9.$$.fragment,M6),Hgr=i(M6),kbe=n(M6,"P",{});var awt=s(kbe);Ugr=r(awt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),awt.forEach(t),Jgr=i(M6),zd=n(M6,"P",{});var vre=s(zd);Ygr=r(vre,`Note:
Loading a model from its configuration file does `),Sbe=n(vre,"STRONG",{});var nwt=s(Sbe);Kgr=r(nwt,"not"),nwt.forEach(t),Zgr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(vre,"A",{href:!0});var swt=s(JW);ehr=r(swt,"from_pretrained()"),swt.forEach(t),ohr=r(vre," to load the model weights."),vre.forEach(t),rhr=i(M6),T(L7.$$.fragment,M6),M6.forEach(t),thr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(t9.$$.fragment,wa),ahr=i(wa),Rbe=n(wa,"P",{});var lwt=s(Rbe);nhr=r(lwt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lwt.forEach(t),shr=i(wa),Za=n(wa,"P",{});var E6=s(Za);lhr=r(E6,"The model class to instantiate is selected based on the "),Pbe=n(E6,"CODE",{});var iwt=s(Pbe);ihr=r(iwt,"model_type"),iwt.forEach(t),dhr=r(E6,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(E6,"CODE",{});var dwt=s(Bbe);chr=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),fhr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(E6,"CODE",{});var cwt=s(Ibe);mhr=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),ghr=r(E6,":"),E6.forEach(t),hhr=i(wa),a9=n(wa,"UL",{});var hze=s(a9);y7=n(hze,"LI",{});var aIe=s(y7);Nbe=n(aIe,"STRONG",{});var fwt=s(Nbe);phr=r(fwt,"detr"),fwt.forEach(t),_hr=r(aIe," \u2014 "),YW=n(aIe,"A",{href:!0});var mwt=s(YW);uhr=r(mwt,"DetrForObjectDetection"),mwt.forEach(t),bhr=r(aIe," (DETR model)"),aIe.forEach(t),vhr=i(hze),x7=n(hze,"LI",{});var nIe=s(x7);qbe=n(nIe,"STRONG",{});var gwt=s(qbe);Fhr=r(gwt,"yolos"),gwt.forEach(t),Thr=r(nIe," \u2014 "),KW=n(nIe,"A",{href:!0});var hwt=s(KW);Mhr=r(hwt,"YolosForObjectDetection"),hwt.forEach(t),Ehr=r(nIe," (YOLOS model)"),nIe.forEach(t),hze.forEach(t),Chr=i(wa),$7=n(wa,"P",{});var sIe=s($7);whr=r(sIe,"The model is set in evaluation mode by default using "),jbe=n(sIe,"CODE",{});var pwt=s(jbe);Ahr=r(pwt,"model.eval()"),pwt.forEach(t),Lhr=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(sIe,"CODE",{});var _wt=s(Dbe);yhr=r(_wt,"model.train()"),_wt.forEach(t),sIe.forEach(t),xhr=i(wa),T(k7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),lVe=i(f),Qd=n(f,"H2",{class:!0});var pze=s(Qd);S7=n(pze,"A",{id:!0,class:!0,href:!0});var uwt=s(S7);Gbe=n(uwt,"SPAN",{});var bwt=s(Gbe);T(n9.$$.fragment,bwt),bwt.forEach(t),uwt.forEach(t),$hr=i(pze),Obe=n(pze,"SPAN",{});var vwt=s(Obe);khr=r(vwt,"AutoModelForImageSegmentation"),vwt.forEach(t),pze.forEach(t),iVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(s9.$$.fragment,Tl),Shr=i(Tl),Wd=n(Tl,"P",{});var Fre=s(Wd);Rhr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZW=n(Fre,"A",{href:!0});var Fwt=s(ZW);Phr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),Bhr=r(Fre," class method or the "),eH=n(Fre,"A",{href:!0});var Twt=s(eH);Ihr=r(Twt,"from_config()"),Twt.forEach(t),Nhr=r(Fre,` class
method.`),Fre.forEach(t),qhr=i(Tl),l9=n(Tl,"P",{});var _ze=s(l9);jhr=r(_ze,"This class cannot be instantiated directly using "),Vbe=n(_ze,"CODE",{});var Mwt=s(Vbe);Dhr=r(Mwt,"__init__()"),Mwt.forEach(t),Ghr=r(_ze," (throws an error)."),_ze.forEach(t),Ohr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var C6=s(Lt);T(i9.$$.fragment,C6),Vhr=i(C6),Xbe=n(C6,"P",{});var Ewt=s(Xbe);Xhr=r(Ewt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ewt.forEach(t),zhr=i(C6),Hd=n(C6,"P",{});var Tre=s(Hd);Qhr=r(Tre,`Note:
Loading a model from its configuration file does `),zbe=n(Tre,"STRONG",{});var Cwt=s(zbe);Whr=r(Cwt,"not"),Cwt.forEach(t),Hhr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(Tre,"A",{href:!0});var wwt=s(oH);Uhr=r(wwt,"from_pretrained()"),wwt.forEach(t),Jhr=r(Tre," to load the model weights."),Tre.forEach(t),Yhr=i(C6),T(R7.$$.fragment,C6),C6.forEach(t),Khr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(d9.$$.fragment,Aa),Zhr=i(Aa),Qbe=n(Aa,"P",{});var Awt=s(Qbe);epr=r(Awt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Awt.forEach(t),opr=i(Aa),en=n(Aa,"P",{});var w6=s(en);rpr=r(w6,"The model class to instantiate is selected based on the "),Wbe=n(w6,"CODE",{});var Lwt=s(Wbe);tpr=r(Lwt,"model_type"),Lwt.forEach(t),apr=r(w6,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(w6,"CODE",{});var ywt=s(Hbe);npr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),spr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(w6,"CODE",{});var xwt=s(Ube);lpr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),ipr=r(w6,":"),w6.forEach(t),dpr=i(Aa),Jbe=n(Aa,"UL",{});var $wt=s(Jbe);P7=n($wt,"LI",{});var lIe=s(P7);Ybe=n(lIe,"STRONG",{});var kwt=s(Ybe);cpr=r(kwt,"detr"),kwt.forEach(t),fpr=r(lIe," \u2014 "),rH=n(lIe,"A",{href:!0});var Swt=s(rH);mpr=r(Swt,"DetrForSegmentation"),Swt.forEach(t),gpr=r(lIe," (DETR model)"),lIe.forEach(t),$wt.forEach(t),hpr=i(Aa),B7=n(Aa,"P",{});var iIe=s(B7);ppr=r(iIe,"The model is set in evaluation mode by default using "),Kbe=n(iIe,"CODE",{});var Rwt=s(Kbe);_pr=r(Rwt,"model.eval()"),Rwt.forEach(t),upr=r(iIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(iIe,"CODE",{});var Pwt=s(Zbe);bpr=r(Pwt,"model.train()"),Pwt.forEach(t),iIe.forEach(t),vpr=i(Aa),T(I7.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),dVe=i(f),Ud=n(f,"H2",{class:!0});var uze=s(Ud);N7=n(uze,"A",{id:!0,class:!0,href:!0});var Bwt=s(N7);eve=n(Bwt,"SPAN",{});var Iwt=s(eve);T(c9.$$.fragment,Iwt),Iwt.forEach(t),Bwt.forEach(t),Fpr=i(uze),ove=n(uze,"SPAN",{});var Nwt=s(ove);Tpr=r(Nwt,"AutoModelForSemanticSegmentation"),Nwt.forEach(t),uze.forEach(t),cVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(f9.$$.fragment,Ml),Mpr=i(Ml),Jd=n(Ml,"P",{});var Mre=s(Jd);Epr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tH=n(Mre,"A",{href:!0});var qwt=s(tH);Cpr=r(qwt,"from_pretrained()"),qwt.forEach(t),wpr=r(Mre," class method or the "),aH=n(Mre,"A",{href:!0});var jwt=s(aH);Apr=r(jwt,"from_config()"),jwt.forEach(t),Lpr=r(Mre,` class
method.`),Mre.forEach(t),ypr=i(Ml),m9=n(Ml,"P",{});var bze=s(m9);xpr=r(bze,"This class cannot be instantiated directly using "),rve=n(bze,"CODE",{});var Dwt=s(rve);$pr=r(Dwt,"__init__()"),Dwt.forEach(t),kpr=r(bze," (throws an error)."),bze.forEach(t),Spr=i(Ml),yt=n(Ml,"DIV",{class:!0});var A6=s(yt);T(g9.$$.fragment,A6),Rpr=i(A6),tve=n(A6,"P",{});var Gwt=s(tve);Ppr=r(Gwt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gwt.forEach(t),Bpr=i(A6),Yd=n(A6,"P",{});var Ere=s(Yd);Ipr=r(Ere,`Note:
Loading a model from its configuration file does `),ave=n(Ere,"STRONG",{});var Owt=s(ave);Npr=r(Owt,"not"),Owt.forEach(t),qpr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(Ere,"A",{href:!0});var Vwt=s(nH);jpr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),Dpr=r(Ere," to load the model weights."),Ere.forEach(t),Gpr=i(A6),T(q7.$$.fragment,A6),A6.forEach(t),Opr=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(h9.$$.fragment,La),Vpr=i(La),nve=n(La,"P",{});var Xwt=s(nve);Xpr=r(Xwt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xwt.forEach(t),zpr=i(La),on=n(La,"P",{});var L6=s(on);Qpr=r(L6,"The model class to instantiate is selected based on the "),sve=n(L6,"CODE",{});var zwt=s(sve);Wpr=r(zwt,"model_type"),zwt.forEach(t),Hpr=r(L6,` property of the config object (either
passed as an argument or loaded from `),lve=n(L6,"CODE",{});var Qwt=s(lve);Upr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),Jpr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(L6,"CODE",{});var Wwt=s(ive);Ypr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),Kpr=r(L6,":"),L6.forEach(t),Zpr=i(La),rn=n(La,"UL",{});var y6=s(rn);j7=n(y6,"LI",{});var dIe=s(j7);dve=n(dIe,"STRONG",{});var Hwt=s(dve);e_r=r(Hwt,"beit"),Hwt.forEach(t),o_r=r(dIe," \u2014 "),sH=n(dIe,"A",{href:!0});var Uwt=s(sH);r_r=r(Uwt,"BeitForSemanticSegmentation"),Uwt.forEach(t),t_r=r(dIe," (BEiT model)"),dIe.forEach(t),a_r=i(y6),D7=n(y6,"LI",{});var cIe=s(D7);cve=n(cIe,"STRONG",{});var Jwt=s(cve);n_r=r(Jwt,"data2vec-vision"),Jwt.forEach(t),s_r=r(cIe," \u2014 "),lH=n(cIe,"A",{href:!0});var Ywt=s(lH);l_r=r(Ywt,"Data2VecVisionForSemanticSegmentation"),Ywt.forEach(t),i_r=r(cIe," (Data2VecVision model)"),cIe.forEach(t),d_r=i(y6),G7=n(y6,"LI",{});var fIe=s(G7);fve=n(fIe,"STRONG",{});var Kwt=s(fve);c_r=r(Kwt,"dpt"),Kwt.forEach(t),f_r=r(fIe," \u2014 "),iH=n(fIe,"A",{href:!0});var Zwt=s(iH);m_r=r(Zwt,"DPTForSemanticSegmentation"),Zwt.forEach(t),g_r=r(fIe," (DPT model)"),fIe.forEach(t),h_r=i(y6),O7=n(y6,"LI",{});var mIe=s(O7);mve=n(mIe,"STRONG",{});var eAt=s(mve);p_r=r(eAt,"segformer"),eAt.forEach(t),__r=r(mIe," \u2014 "),dH=n(mIe,"A",{href:!0});var oAt=s(dH);u_r=r(oAt,"SegformerForSemanticSegmentation"),oAt.forEach(t),b_r=r(mIe," (SegFormer model)"),mIe.forEach(t),y6.forEach(t),v_r=i(La),V7=n(La,"P",{});var gIe=s(V7);F_r=r(gIe,"The model is set in evaluation mode by default using "),gve=n(gIe,"CODE",{});var rAt=s(gve);T_r=r(rAt,"model.eval()"),rAt.forEach(t),M_r=r(gIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hve=n(gIe,"CODE",{});var tAt=s(hve);E_r=r(tAt,"model.train()"),tAt.forEach(t),gIe.forEach(t),C_r=i(La),T(X7.$$.fragment,La),La.forEach(t),Ml.forEach(t),fVe=i(f),Kd=n(f,"H2",{class:!0});var vze=s(Kd);z7=n(vze,"A",{id:!0,class:!0,href:!0});var aAt=s(z7);pve=n(aAt,"SPAN",{});var nAt=s(pve);T(p9.$$.fragment,nAt),nAt.forEach(t),aAt.forEach(t),w_r=i(vze),_ve=n(vze,"SPAN",{});var sAt=s(_ve);A_r=r(sAt,"AutoModelForInstanceSegmentation"),sAt.forEach(t),vze.forEach(t),mVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(_9.$$.fragment,El),L_r=i(El),Zd=n(El,"P",{});var Cre=s(Zd);y_r=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cH=n(Cre,"A",{href:!0});var lAt=s(cH);x_r=r(lAt,"from_pretrained()"),lAt.forEach(t),$_r=r(Cre," class method or the "),fH=n(Cre,"A",{href:!0});var iAt=s(fH);k_r=r(iAt,"from_config()"),iAt.forEach(t),S_r=r(Cre,` class
method.`),Cre.forEach(t),R_r=i(El),u9=n(El,"P",{});var Fze=s(u9);P_r=r(Fze,"This class cannot be instantiated directly using "),uve=n(Fze,"CODE",{});var dAt=s(uve);B_r=r(dAt,"__init__()"),dAt.forEach(t),I_r=r(Fze," (throws an error)."),Fze.forEach(t),N_r=i(El),xt=n(El,"DIV",{class:!0});var x6=s(xt);T(b9.$$.fragment,x6),q_r=i(x6),bve=n(x6,"P",{});var cAt=s(bve);j_r=r(cAt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cAt.forEach(t),D_r=i(x6),ec=n(x6,"P",{});var wre=s(ec);G_r=r(wre,`Note:
Loading a model from its configuration file does `),vve=n(wre,"STRONG",{});var fAt=s(vve);O_r=r(fAt,"not"),fAt.forEach(t),V_r=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(wre,"A",{href:!0});var mAt=s(mH);X_r=r(mAt,"from_pretrained()"),mAt.forEach(t),z_r=r(wre," to load the model weights."),wre.forEach(t),Q_r=i(x6),T(Q7.$$.fragment,x6),x6.forEach(t),W_r=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(v9.$$.fragment,ya),H_r=i(ya),Fve=n(ya,"P",{});var gAt=s(Fve);U_r=r(gAt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gAt.forEach(t),J_r=i(ya),tn=n(ya,"P",{});var $6=s(tn);Y_r=r($6,"The model class to instantiate is selected based on the "),Tve=n($6,"CODE",{});var hAt=s(Tve);K_r=r(hAt,"model_type"),hAt.forEach(t),Z_r=r($6,` property of the config object (either
passed as an argument or loaded from `),Mve=n($6,"CODE",{});var pAt=s(Mve);eur=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),our=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n($6,"CODE",{});var _At=s(Eve);rur=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),tur=r($6,":"),$6.forEach(t),aur=i(ya),Cve=n(ya,"UL",{});var uAt=s(Cve);W7=n(uAt,"LI",{});var hIe=s(W7);wve=n(hIe,"STRONG",{});var bAt=s(wve);nur=r(bAt,"maskformer"),bAt.forEach(t),sur=r(hIe," \u2014 "),gH=n(hIe,"A",{href:!0});var vAt=s(gH);lur=r(vAt,"MaskFormerForInstanceSegmentation"),vAt.forEach(t),iur=r(hIe," (MaskFormer model)"),hIe.forEach(t),uAt.forEach(t),dur=i(ya),H7=n(ya,"P",{});var pIe=s(H7);cur=r(pIe,"The model is set in evaluation mode by default using "),Ave=n(pIe,"CODE",{});var FAt=s(Ave);fur=r(FAt,"model.eval()"),FAt.forEach(t),mur=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lve=n(pIe,"CODE",{});var TAt=s(Lve);gur=r(TAt,"model.train()"),TAt.forEach(t),pIe.forEach(t),hur=i(ya),T(U7.$$.fragment,ya),ya.forEach(t),El.forEach(t),gVe=i(f),oc=n(f,"H2",{class:!0});var Tze=s(oc);J7=n(Tze,"A",{id:!0,class:!0,href:!0});var MAt=s(J7);yve=n(MAt,"SPAN",{});var EAt=s(yve);T(F9.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),pur=i(Tze),xve=n(Tze,"SPAN",{});var CAt=s(xve);_ur=r(CAt,"TFAutoModel"),CAt.forEach(t),Tze.forEach(t),hVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(T9.$$.fragment,Cl),uur=i(Cl),rc=n(Cl,"P",{});var Are=s(rc);bur=r(Are,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hH=n(Are,"A",{href:!0});var wAt=s(hH);vur=r(wAt,"from_pretrained()"),wAt.forEach(t),Fur=r(Are," class method or the "),pH=n(Are,"A",{href:!0});var AAt=s(pH);Tur=r(AAt,"from_config()"),AAt.forEach(t),Mur=r(Are,` class
method.`),Are.forEach(t),Eur=i(Cl),M9=n(Cl,"P",{});var Mze=s(M9);Cur=r(Mze,"This class cannot be instantiated directly using "),$ve=n(Mze,"CODE",{});var LAt=s($ve);wur=r(LAt,"__init__()"),LAt.forEach(t),Aur=r(Mze," (throws an error)."),Mze.forEach(t),Lur=i(Cl),$t=n(Cl,"DIV",{class:!0});var k6=s($t);T(E9.$$.fragment,k6),yur=i(k6),kve=n(k6,"P",{});var yAt=s(kve);xur=r(yAt,"Instantiates one of the base model classes of the library from a configuration."),yAt.forEach(t),$ur=i(k6),tc=n(k6,"P",{});var Lre=s(tc);kur=r(Lre,`Note:
Loading a model from its configuration file does `),Sve=n(Lre,"STRONG",{});var xAt=s(Sve);Sur=r(xAt,"not"),xAt.forEach(t),Rur=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(Lre,"A",{href:!0});var $At=s(_H);Pur=r($At,"from_pretrained()"),$At.forEach(t),Bur=r(Lre," to load the model weights."),Lre.forEach(t),Iur=i(k6),T(Y7.$$.fragment,k6),k6.forEach(t),Nur=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(C9.$$.fragment,wl),qur=i(wl),Rve=n(wl,"P",{});var kAt=s(Rve);jur=r(kAt,"Instantiate one of the base model classes of the library from a pretrained model."),kAt.forEach(t),Dur=i(wl),an=n(wl,"P",{});var S6=s(an);Gur=r(S6,"The model class to instantiate is selected based on the "),Pve=n(S6,"CODE",{});var SAt=s(Pve);Our=r(SAt,"model_type"),SAt.forEach(t),Vur=r(S6,` property of the config object (either
passed as an argument or loaded from `),Bve=n(S6,"CODE",{});var RAt=s(Bve);Xur=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),zur=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(S6,"CODE",{});var PAt=s(Ive);Qur=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),Wur=r(S6,":"),S6.forEach(t),Hur=i(wl),j=n(wl,"UL",{});var D=s(j);K7=n(D,"LI",{});var _Ie=s(K7);Nve=n(_Ie,"STRONG",{});var BAt=s(Nve);Uur=r(BAt,"albert"),BAt.forEach(t),Jur=r(_Ie," \u2014 "),uH=n(_Ie,"A",{href:!0});var IAt=s(uH);Yur=r(IAt,"TFAlbertModel"),IAt.forEach(t),Kur=r(_Ie," (ALBERT model)"),_Ie.forEach(t),Zur=i(D),Z7=n(D,"LI",{});var uIe=s(Z7);qve=n(uIe,"STRONG",{});var NAt=s(qve);e1r=r(NAt,"bart"),NAt.forEach(t),o1r=r(uIe," \u2014 "),bH=n(uIe,"A",{href:!0});var qAt=s(bH);r1r=r(qAt,"TFBartModel"),qAt.forEach(t),t1r=r(uIe," (BART model)"),uIe.forEach(t),a1r=i(D),eM=n(D,"LI",{});var bIe=s(eM);jve=n(bIe,"STRONG",{});var jAt=s(jve);n1r=r(jAt,"bert"),jAt.forEach(t),s1r=r(bIe," \u2014 "),vH=n(bIe,"A",{href:!0});var DAt=s(vH);l1r=r(DAt,"TFBertModel"),DAt.forEach(t),i1r=r(bIe," (BERT model)"),bIe.forEach(t),d1r=i(D),oM=n(D,"LI",{});var vIe=s(oM);Dve=n(vIe,"STRONG",{});var GAt=s(Dve);c1r=r(GAt,"blenderbot"),GAt.forEach(t),f1r=r(vIe," \u2014 "),FH=n(vIe,"A",{href:!0});var OAt=s(FH);m1r=r(OAt,"TFBlenderbotModel"),OAt.forEach(t),g1r=r(vIe," (Blenderbot model)"),vIe.forEach(t),h1r=i(D),rM=n(D,"LI",{});var FIe=s(rM);Gve=n(FIe,"STRONG",{});var VAt=s(Gve);p1r=r(VAt,"blenderbot-small"),VAt.forEach(t),_1r=r(FIe," \u2014 "),TH=n(FIe,"A",{href:!0});var XAt=s(TH);u1r=r(XAt,"TFBlenderbotSmallModel"),XAt.forEach(t),b1r=r(FIe," (BlenderbotSmall model)"),FIe.forEach(t),v1r=i(D),tM=n(D,"LI",{});var TIe=s(tM);Ove=n(TIe,"STRONG",{});var zAt=s(Ove);F1r=r(zAt,"camembert"),zAt.forEach(t),T1r=r(TIe," \u2014 "),MH=n(TIe,"A",{href:!0});var QAt=s(MH);M1r=r(QAt,"TFCamembertModel"),QAt.forEach(t),E1r=r(TIe," (CamemBERT model)"),TIe.forEach(t),C1r=i(D),aM=n(D,"LI",{});var MIe=s(aM);Vve=n(MIe,"STRONG",{});var WAt=s(Vve);w1r=r(WAt,"clip"),WAt.forEach(t),A1r=r(MIe," \u2014 "),EH=n(MIe,"A",{href:!0});var HAt=s(EH);L1r=r(HAt,"TFCLIPModel"),HAt.forEach(t),y1r=r(MIe," (CLIP model)"),MIe.forEach(t),x1r=i(D),nM=n(D,"LI",{});var EIe=s(nM);Xve=n(EIe,"STRONG",{});var UAt=s(Xve);$1r=r(UAt,"convbert"),UAt.forEach(t),k1r=r(EIe," \u2014 "),CH=n(EIe,"A",{href:!0});var JAt=s(CH);S1r=r(JAt,"TFConvBertModel"),JAt.forEach(t),R1r=r(EIe," (ConvBERT model)"),EIe.forEach(t),P1r=i(D),sM=n(D,"LI",{});var CIe=s(sM);zve=n(CIe,"STRONG",{});var YAt=s(zve);B1r=r(YAt,"convnext"),YAt.forEach(t),I1r=r(CIe," \u2014 "),wH=n(CIe,"A",{href:!0});var KAt=s(wH);N1r=r(KAt,"TFConvNextModel"),KAt.forEach(t),q1r=r(CIe," (ConvNeXT model)"),CIe.forEach(t),j1r=i(D),lM=n(D,"LI",{});var wIe=s(lM);Qve=n(wIe,"STRONG",{});var ZAt=s(Qve);D1r=r(ZAt,"ctrl"),ZAt.forEach(t),G1r=r(wIe," \u2014 "),AH=n(wIe,"A",{href:!0});var e6t=s(AH);O1r=r(e6t,"TFCTRLModel"),e6t.forEach(t),V1r=r(wIe," (CTRL model)"),wIe.forEach(t),X1r=i(D),iM=n(D,"LI",{});var AIe=s(iM);Wve=n(AIe,"STRONG",{});var o6t=s(Wve);z1r=r(o6t,"data2vec-vision"),o6t.forEach(t),Q1r=r(AIe," \u2014 "),LH=n(AIe,"A",{href:!0});var r6t=s(LH);W1r=r(r6t,"TFData2VecVisionModel"),r6t.forEach(t),H1r=r(AIe," (Data2VecVision model)"),AIe.forEach(t),U1r=i(D),dM=n(D,"LI",{});var LIe=s(dM);Hve=n(LIe,"STRONG",{});var t6t=s(Hve);J1r=r(t6t,"deberta"),t6t.forEach(t),Y1r=r(LIe," \u2014 "),yH=n(LIe,"A",{href:!0});var a6t=s(yH);K1r=r(a6t,"TFDebertaModel"),a6t.forEach(t),Z1r=r(LIe," (DeBERTa model)"),LIe.forEach(t),e3r=i(D),cM=n(D,"LI",{});var yIe=s(cM);Uve=n(yIe,"STRONG",{});var n6t=s(Uve);o3r=r(n6t,"deberta-v2"),n6t.forEach(t),r3r=r(yIe," \u2014 "),xH=n(yIe,"A",{href:!0});var s6t=s(xH);t3r=r(s6t,"TFDebertaV2Model"),s6t.forEach(t),a3r=r(yIe," (DeBERTa-v2 model)"),yIe.forEach(t),n3r=i(D),fM=n(D,"LI",{});var xIe=s(fM);Jve=n(xIe,"STRONG",{});var l6t=s(Jve);s3r=r(l6t,"distilbert"),l6t.forEach(t),l3r=r(xIe," \u2014 "),$H=n(xIe,"A",{href:!0});var i6t=s($H);i3r=r(i6t,"TFDistilBertModel"),i6t.forEach(t),d3r=r(xIe," (DistilBERT model)"),xIe.forEach(t),c3r=i(D),mM=n(D,"LI",{});var $Ie=s(mM);Yve=n($Ie,"STRONG",{});var d6t=s(Yve);f3r=r(d6t,"dpr"),d6t.forEach(t),m3r=r($Ie," \u2014 "),kH=n($Ie,"A",{href:!0});var c6t=s(kH);g3r=r(c6t,"TFDPRQuestionEncoder"),c6t.forEach(t),h3r=r($Ie," (DPR model)"),$Ie.forEach(t),p3r=i(D),gM=n(D,"LI",{});var kIe=s(gM);Kve=n(kIe,"STRONG",{});var f6t=s(Kve);_3r=r(f6t,"electra"),f6t.forEach(t),u3r=r(kIe," \u2014 "),SH=n(kIe,"A",{href:!0});var m6t=s(SH);b3r=r(m6t,"TFElectraModel"),m6t.forEach(t),v3r=r(kIe," (ELECTRA model)"),kIe.forEach(t),F3r=i(D),hM=n(D,"LI",{});var SIe=s(hM);Zve=n(SIe,"STRONG",{});var g6t=s(Zve);T3r=r(g6t,"flaubert"),g6t.forEach(t),M3r=r(SIe," \u2014 "),RH=n(SIe,"A",{href:!0});var h6t=s(RH);E3r=r(h6t,"TFFlaubertModel"),h6t.forEach(t),C3r=r(SIe," (FlauBERT model)"),SIe.forEach(t),w3r=i(D),Ws=n(D,"LI",{});var lS=s(Ws);eFe=n(lS,"STRONG",{});var p6t=s(eFe);A3r=r(p6t,"funnel"),p6t.forEach(t),L3r=r(lS," \u2014 "),PH=n(lS,"A",{href:!0});var _6t=s(PH);y3r=r(_6t,"TFFunnelModel"),_6t.forEach(t),x3r=r(lS," or "),BH=n(lS,"A",{href:!0});var u6t=s(BH);$3r=r(u6t,"TFFunnelBaseModel"),u6t.forEach(t),k3r=r(lS," (Funnel Transformer model)"),lS.forEach(t),S3r=i(D),pM=n(D,"LI",{});var RIe=s(pM);oFe=n(RIe,"STRONG",{});var b6t=s(oFe);R3r=r(b6t,"gpt2"),b6t.forEach(t),P3r=r(RIe," \u2014 "),IH=n(RIe,"A",{href:!0});var v6t=s(IH);B3r=r(v6t,"TFGPT2Model"),v6t.forEach(t),I3r=r(RIe," (OpenAI GPT-2 model)"),RIe.forEach(t),N3r=i(D),_M=n(D,"LI",{});var PIe=s(_M);rFe=n(PIe,"STRONG",{});var F6t=s(rFe);q3r=r(F6t,"gptj"),F6t.forEach(t),j3r=r(PIe," \u2014 "),NH=n(PIe,"A",{href:!0});var T6t=s(NH);D3r=r(T6t,"TFGPTJModel"),T6t.forEach(t),G3r=r(PIe," (GPT-J model)"),PIe.forEach(t),O3r=i(D),uM=n(D,"LI",{});var BIe=s(uM);tFe=n(BIe,"STRONG",{});var M6t=s(tFe);V3r=r(M6t,"hubert"),M6t.forEach(t),X3r=r(BIe," \u2014 "),qH=n(BIe,"A",{href:!0});var E6t=s(qH);z3r=r(E6t,"TFHubertModel"),E6t.forEach(t),Q3r=r(BIe," (Hubert model)"),BIe.forEach(t),W3r=i(D),bM=n(D,"LI",{});var IIe=s(bM);aFe=n(IIe,"STRONG",{});var C6t=s(aFe);H3r=r(C6t,"layoutlm"),C6t.forEach(t),U3r=r(IIe," \u2014 "),jH=n(IIe,"A",{href:!0});var w6t=s(jH);J3r=r(w6t,"TFLayoutLMModel"),w6t.forEach(t),Y3r=r(IIe," (LayoutLM model)"),IIe.forEach(t),K3r=i(D),vM=n(D,"LI",{});var NIe=s(vM);nFe=n(NIe,"STRONG",{});var A6t=s(nFe);Z3r=r(A6t,"led"),A6t.forEach(t),e2r=r(NIe," \u2014 "),DH=n(NIe,"A",{href:!0});var L6t=s(DH);o2r=r(L6t,"TFLEDModel"),L6t.forEach(t),r2r=r(NIe," (LED model)"),NIe.forEach(t),t2r=i(D),FM=n(D,"LI",{});var qIe=s(FM);sFe=n(qIe,"STRONG",{});var y6t=s(sFe);a2r=r(y6t,"longformer"),y6t.forEach(t),n2r=r(qIe," \u2014 "),GH=n(qIe,"A",{href:!0});var x6t=s(GH);s2r=r(x6t,"TFLongformerModel"),x6t.forEach(t),l2r=r(qIe," (Longformer model)"),qIe.forEach(t),i2r=i(D),TM=n(D,"LI",{});var jIe=s(TM);lFe=n(jIe,"STRONG",{});var $6t=s(lFe);d2r=r($6t,"lxmert"),$6t.forEach(t),c2r=r(jIe," \u2014 "),OH=n(jIe,"A",{href:!0});var k6t=s(OH);f2r=r(k6t,"TFLxmertModel"),k6t.forEach(t),m2r=r(jIe," (LXMERT model)"),jIe.forEach(t),g2r=i(D),MM=n(D,"LI",{});var DIe=s(MM);iFe=n(DIe,"STRONG",{});var S6t=s(iFe);h2r=r(S6t,"marian"),S6t.forEach(t),p2r=r(DIe," \u2014 "),VH=n(DIe,"A",{href:!0});var R6t=s(VH);_2r=r(R6t,"TFMarianModel"),R6t.forEach(t),u2r=r(DIe," (Marian model)"),DIe.forEach(t),b2r=i(D),EM=n(D,"LI",{});var GIe=s(EM);dFe=n(GIe,"STRONG",{});var P6t=s(dFe);v2r=r(P6t,"mbart"),P6t.forEach(t),F2r=r(GIe," \u2014 "),XH=n(GIe,"A",{href:!0});var B6t=s(XH);T2r=r(B6t,"TFMBartModel"),B6t.forEach(t),M2r=r(GIe," (mBART model)"),GIe.forEach(t),E2r=i(D),CM=n(D,"LI",{});var OIe=s(CM);cFe=n(OIe,"STRONG",{});var I6t=s(cFe);C2r=r(I6t,"mobilebert"),I6t.forEach(t),w2r=r(OIe," \u2014 "),zH=n(OIe,"A",{href:!0});var N6t=s(zH);A2r=r(N6t,"TFMobileBertModel"),N6t.forEach(t),L2r=r(OIe," (MobileBERT model)"),OIe.forEach(t),y2r=i(D),wM=n(D,"LI",{});var VIe=s(wM);fFe=n(VIe,"STRONG",{});var q6t=s(fFe);x2r=r(q6t,"mpnet"),q6t.forEach(t),$2r=r(VIe," \u2014 "),QH=n(VIe,"A",{href:!0});var j6t=s(QH);k2r=r(j6t,"TFMPNetModel"),j6t.forEach(t),S2r=r(VIe," (MPNet model)"),VIe.forEach(t),R2r=i(D),AM=n(D,"LI",{});var XIe=s(AM);mFe=n(XIe,"STRONG",{});var D6t=s(mFe);P2r=r(D6t,"mt5"),D6t.forEach(t),B2r=r(XIe," \u2014 "),WH=n(XIe,"A",{href:!0});var G6t=s(WH);I2r=r(G6t,"TFMT5Model"),G6t.forEach(t),N2r=r(XIe," (MT5 model)"),XIe.forEach(t),q2r=i(D),LM=n(D,"LI",{});var zIe=s(LM);gFe=n(zIe,"STRONG",{});var O6t=s(gFe);j2r=r(O6t,"openai-gpt"),O6t.forEach(t),D2r=r(zIe," \u2014 "),HH=n(zIe,"A",{href:!0});var V6t=s(HH);G2r=r(V6t,"TFOpenAIGPTModel"),V6t.forEach(t),O2r=r(zIe," (OpenAI GPT model)"),zIe.forEach(t),V2r=i(D),yM=n(D,"LI",{});var QIe=s(yM);hFe=n(QIe,"STRONG",{});var X6t=s(hFe);X2r=r(X6t,"opt"),X6t.forEach(t),z2r=r(QIe," \u2014 "),UH=n(QIe,"A",{href:!0});var z6t=s(UH);Q2r=r(z6t,"TFOPTModel"),z6t.forEach(t),W2r=r(QIe," (OPT model)"),QIe.forEach(t),H2r=i(D),xM=n(D,"LI",{});var WIe=s(xM);pFe=n(WIe,"STRONG",{});var Q6t=s(pFe);U2r=r(Q6t,"pegasus"),Q6t.forEach(t),J2r=r(WIe," \u2014 "),JH=n(WIe,"A",{href:!0});var W6t=s(JH);Y2r=r(W6t,"TFPegasusModel"),W6t.forEach(t),K2r=r(WIe," (Pegasus model)"),WIe.forEach(t),Z2r=i(D),$M=n(D,"LI",{});var HIe=s($M);_Fe=n(HIe,"STRONG",{});var H6t=s(_Fe);ebr=r(H6t,"rembert"),H6t.forEach(t),obr=r(HIe," \u2014 "),YH=n(HIe,"A",{href:!0});var U6t=s(YH);rbr=r(U6t,"TFRemBertModel"),U6t.forEach(t),tbr=r(HIe," (RemBERT model)"),HIe.forEach(t),abr=i(D),kM=n(D,"LI",{});var UIe=s(kM);uFe=n(UIe,"STRONG",{});var J6t=s(uFe);nbr=r(J6t,"roberta"),J6t.forEach(t),sbr=r(UIe," \u2014 "),KH=n(UIe,"A",{href:!0});var Y6t=s(KH);lbr=r(Y6t,"TFRobertaModel"),Y6t.forEach(t),ibr=r(UIe," (RoBERTa model)"),UIe.forEach(t),dbr=i(D),SM=n(D,"LI",{});var JIe=s(SM);bFe=n(JIe,"STRONG",{});var K6t=s(bFe);cbr=r(K6t,"roformer"),K6t.forEach(t),fbr=r(JIe," \u2014 "),ZH=n(JIe,"A",{href:!0});var Z6t=s(ZH);mbr=r(Z6t,"TFRoFormerModel"),Z6t.forEach(t),gbr=r(JIe," (RoFormer model)"),JIe.forEach(t),hbr=i(D),RM=n(D,"LI",{});var YIe=s(RM);vFe=n(YIe,"STRONG",{});var eLt=s(vFe);pbr=r(eLt,"speech_to_text"),eLt.forEach(t),_br=r(YIe," \u2014 "),eU=n(YIe,"A",{href:!0});var oLt=s(eU);ubr=r(oLt,"TFSpeech2TextModel"),oLt.forEach(t),bbr=r(YIe," (Speech2Text model)"),YIe.forEach(t),vbr=i(D),PM=n(D,"LI",{});var KIe=s(PM);FFe=n(KIe,"STRONG",{});var rLt=s(FFe);Fbr=r(rLt,"swin"),rLt.forEach(t),Tbr=r(KIe," \u2014 "),oU=n(KIe,"A",{href:!0});var tLt=s(oU);Mbr=r(tLt,"TFSwinModel"),tLt.forEach(t),Ebr=r(KIe," (Swin Transformer model)"),KIe.forEach(t),Cbr=i(D),BM=n(D,"LI",{});var ZIe=s(BM);TFe=n(ZIe,"STRONG",{});var aLt=s(TFe);wbr=r(aLt,"t5"),aLt.forEach(t),Abr=r(ZIe," \u2014 "),rU=n(ZIe,"A",{href:!0});var nLt=s(rU);Lbr=r(nLt,"TFT5Model"),nLt.forEach(t),ybr=r(ZIe," (T5 model)"),ZIe.forEach(t),xbr=i(D),IM=n(D,"LI",{});var eNe=s(IM);MFe=n(eNe,"STRONG",{});var sLt=s(MFe);$br=r(sLt,"tapas"),sLt.forEach(t),kbr=r(eNe," \u2014 "),tU=n(eNe,"A",{href:!0});var lLt=s(tU);Sbr=r(lLt,"TFTapasModel"),lLt.forEach(t),Rbr=r(eNe," (TAPAS model)"),eNe.forEach(t),Pbr=i(D),NM=n(D,"LI",{});var oNe=s(NM);EFe=n(oNe,"STRONG",{});var iLt=s(EFe);Bbr=r(iLt,"transfo-xl"),iLt.forEach(t),Ibr=r(oNe," \u2014 "),aU=n(oNe,"A",{href:!0});var dLt=s(aU);Nbr=r(dLt,"TFTransfoXLModel"),dLt.forEach(t),qbr=r(oNe," (Transformer-XL model)"),oNe.forEach(t),jbr=i(D),qM=n(D,"LI",{});var rNe=s(qM);CFe=n(rNe,"STRONG",{});var cLt=s(CFe);Dbr=r(cLt,"vit"),cLt.forEach(t),Gbr=r(rNe," \u2014 "),nU=n(rNe,"A",{href:!0});var fLt=s(nU);Obr=r(fLt,"TFViTModel"),fLt.forEach(t),Vbr=r(rNe," (ViT model)"),rNe.forEach(t),Xbr=i(D),jM=n(D,"LI",{});var tNe=s(jM);wFe=n(tNe,"STRONG",{});var mLt=s(wFe);zbr=r(mLt,"vit_mae"),mLt.forEach(t),Qbr=r(tNe," \u2014 "),sU=n(tNe,"A",{href:!0});var gLt=s(sU);Wbr=r(gLt,"TFViTMAEModel"),gLt.forEach(t),Hbr=r(tNe," (ViTMAE model)"),tNe.forEach(t),Ubr=i(D),DM=n(D,"LI",{});var aNe=s(DM);AFe=n(aNe,"STRONG",{});var hLt=s(AFe);Jbr=r(hLt,"wav2vec2"),hLt.forEach(t),Ybr=r(aNe," \u2014 "),lU=n(aNe,"A",{href:!0});var pLt=s(lU);Kbr=r(pLt,"TFWav2Vec2Model"),pLt.forEach(t),Zbr=r(aNe," (Wav2Vec2 model)"),aNe.forEach(t),evr=i(D),GM=n(D,"LI",{});var nNe=s(GM);LFe=n(nNe,"STRONG",{});var _Lt=s(LFe);ovr=r(_Lt,"xlm"),_Lt.forEach(t),rvr=r(nNe," \u2014 "),iU=n(nNe,"A",{href:!0});var uLt=s(iU);tvr=r(uLt,"TFXLMModel"),uLt.forEach(t),avr=r(nNe," (XLM model)"),nNe.forEach(t),nvr=i(D),OM=n(D,"LI",{});var sNe=s(OM);yFe=n(sNe,"STRONG",{});var bLt=s(yFe);svr=r(bLt,"xlm-roberta"),bLt.forEach(t),lvr=r(sNe," \u2014 "),dU=n(sNe,"A",{href:!0});var vLt=s(dU);ivr=r(vLt,"TFXLMRobertaModel"),vLt.forEach(t),dvr=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),cvr=i(D),VM=n(D,"LI",{});var lNe=s(VM);xFe=n(lNe,"STRONG",{});var FLt=s(xFe);fvr=r(FLt,"xlnet"),FLt.forEach(t),mvr=r(lNe," \u2014 "),cU=n(lNe,"A",{href:!0});var TLt=s(cU);gvr=r(TLt,"TFXLNetModel"),TLt.forEach(t),hvr=r(lNe," (XLNet model)"),lNe.forEach(t),D.forEach(t),pvr=i(wl),T(XM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),pVe=i(f),ac=n(f,"H2",{class:!0});var Eze=s(ac);zM=n(Eze,"A",{id:!0,class:!0,href:!0});var MLt=s(zM);$Fe=n(MLt,"SPAN",{});var ELt=s($Fe);T(w9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),_vr=i(Eze),kFe=n(Eze,"SPAN",{});var CLt=s(kFe);uvr=r(CLt,"TFAutoModelForPreTraining"),CLt.forEach(t),Eze.forEach(t),_Ve=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(A9.$$.fragment,Al),bvr=i(Al),nc=n(Al,"P",{});var yre=s(nc);vvr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fU=n(yre,"A",{href:!0});var wLt=s(fU);Fvr=r(wLt,"from_pretrained()"),wLt.forEach(t),Tvr=r(yre," class method or the "),mU=n(yre,"A",{href:!0});var ALt=s(mU);Mvr=r(ALt,"from_config()"),ALt.forEach(t),Evr=r(yre,` class
method.`),yre.forEach(t),Cvr=i(Al),L9=n(Al,"P",{});var Cze=s(L9);wvr=r(Cze,"This class cannot be instantiated directly using "),SFe=n(Cze,"CODE",{});var LLt=s(SFe);Avr=r(LLt,"__init__()"),LLt.forEach(t),Lvr=r(Cze," (throws an error)."),Cze.forEach(t),yvr=i(Al),kt=n(Al,"DIV",{class:!0});var R6=s(kt);T(y9.$$.fragment,R6),xvr=i(R6),RFe=n(R6,"P",{});var yLt=s(RFe);$vr=r(yLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yLt.forEach(t),kvr=i(R6),sc=n(R6,"P",{});var xre=s(sc);Svr=r(xre,`Note:
Loading a model from its configuration file does `),PFe=n(xre,"STRONG",{});var xLt=s(PFe);Rvr=r(xLt,"not"),xLt.forEach(t),Pvr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(xre,"A",{href:!0});var $Lt=s(gU);Bvr=r($Lt,"from_pretrained()"),$Lt.forEach(t),Ivr=r(xre," to load the model weights."),xre.forEach(t),Nvr=i(R6),T(QM.$$.fragment,R6),R6.forEach(t),qvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(x9.$$.fragment,Ll),jvr=i(Ll),BFe=n(Ll,"P",{});var kLt=s(BFe);Dvr=r(kLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kLt.forEach(t),Gvr=i(Ll),nn=n(Ll,"P",{});var P6=s(nn);Ovr=r(P6,"The model class to instantiate is selected based on the "),IFe=n(P6,"CODE",{});var SLt=s(IFe);Vvr=r(SLt,"model_type"),SLt.forEach(t),Xvr=r(P6,` property of the config object (either
passed as an argument or loaded from `),NFe=n(P6,"CODE",{});var RLt=s(NFe);zvr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),Qvr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(P6,"CODE",{});var PLt=s(qFe);Wvr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),Hvr=r(P6,":"),P6.forEach(t),Uvr=i(Ll),se=n(Ll,"UL",{});var le=s(se);WM=n(le,"LI",{});var iNe=s(WM);jFe=n(iNe,"STRONG",{});var BLt=s(jFe);Jvr=r(BLt,"albert"),BLt.forEach(t),Yvr=r(iNe," \u2014 "),hU=n(iNe,"A",{href:!0});var ILt=s(hU);Kvr=r(ILt,"TFAlbertForPreTraining"),ILt.forEach(t),Zvr=r(iNe," (ALBERT model)"),iNe.forEach(t),eFr=i(le),HM=n(le,"LI",{});var dNe=s(HM);DFe=n(dNe,"STRONG",{});var NLt=s(DFe);oFr=r(NLt,"bart"),NLt.forEach(t),rFr=r(dNe," \u2014 "),pU=n(dNe,"A",{href:!0});var qLt=s(pU);tFr=r(qLt,"TFBartForConditionalGeneration"),qLt.forEach(t),aFr=r(dNe," (BART model)"),dNe.forEach(t),nFr=i(le),UM=n(le,"LI",{});var cNe=s(UM);GFe=n(cNe,"STRONG",{});var jLt=s(GFe);sFr=r(jLt,"bert"),jLt.forEach(t),lFr=r(cNe," \u2014 "),_U=n(cNe,"A",{href:!0});var DLt=s(_U);iFr=r(DLt,"TFBertForPreTraining"),DLt.forEach(t),dFr=r(cNe," (BERT model)"),cNe.forEach(t),cFr=i(le),JM=n(le,"LI",{});var fNe=s(JM);OFe=n(fNe,"STRONG",{});var GLt=s(OFe);fFr=r(GLt,"camembert"),GLt.forEach(t),mFr=r(fNe," \u2014 "),uU=n(fNe,"A",{href:!0});var OLt=s(uU);gFr=r(OLt,"TFCamembertForMaskedLM"),OLt.forEach(t),hFr=r(fNe," (CamemBERT model)"),fNe.forEach(t),pFr=i(le),YM=n(le,"LI",{});var mNe=s(YM);VFe=n(mNe,"STRONG",{});var VLt=s(VFe);_Fr=r(VLt,"ctrl"),VLt.forEach(t),uFr=r(mNe," \u2014 "),bU=n(mNe,"A",{href:!0});var XLt=s(bU);bFr=r(XLt,"TFCTRLLMHeadModel"),XLt.forEach(t),vFr=r(mNe," (CTRL model)"),mNe.forEach(t),FFr=i(le),KM=n(le,"LI",{});var gNe=s(KM);XFe=n(gNe,"STRONG",{});var zLt=s(XFe);TFr=r(zLt,"distilbert"),zLt.forEach(t),MFr=r(gNe," \u2014 "),vU=n(gNe,"A",{href:!0});var QLt=s(vU);EFr=r(QLt,"TFDistilBertForMaskedLM"),QLt.forEach(t),CFr=r(gNe," (DistilBERT model)"),gNe.forEach(t),wFr=i(le),ZM=n(le,"LI",{});var hNe=s(ZM);zFe=n(hNe,"STRONG",{});var WLt=s(zFe);AFr=r(WLt,"electra"),WLt.forEach(t),LFr=r(hNe," \u2014 "),FU=n(hNe,"A",{href:!0});var HLt=s(FU);yFr=r(HLt,"TFElectraForPreTraining"),HLt.forEach(t),xFr=r(hNe," (ELECTRA model)"),hNe.forEach(t),$Fr=i(le),eE=n(le,"LI",{});var pNe=s(eE);QFe=n(pNe,"STRONG",{});var ULt=s(QFe);kFr=r(ULt,"flaubert"),ULt.forEach(t),SFr=r(pNe," \u2014 "),TU=n(pNe,"A",{href:!0});var JLt=s(TU);RFr=r(JLt,"TFFlaubertWithLMHeadModel"),JLt.forEach(t),PFr=r(pNe," (FlauBERT model)"),pNe.forEach(t),BFr=i(le),oE=n(le,"LI",{});var _Ne=s(oE);WFe=n(_Ne,"STRONG",{});var YLt=s(WFe);IFr=r(YLt,"funnel"),YLt.forEach(t),NFr=r(_Ne," \u2014 "),MU=n(_Ne,"A",{href:!0});var KLt=s(MU);qFr=r(KLt,"TFFunnelForPreTraining"),KLt.forEach(t),jFr=r(_Ne," (Funnel Transformer model)"),_Ne.forEach(t),DFr=i(le),rE=n(le,"LI",{});var uNe=s(rE);HFe=n(uNe,"STRONG",{});var ZLt=s(HFe);GFr=r(ZLt,"gpt2"),ZLt.forEach(t),OFr=r(uNe," \u2014 "),EU=n(uNe,"A",{href:!0});var eyt=s(EU);VFr=r(eyt,"TFGPT2LMHeadModel"),eyt.forEach(t),XFr=r(uNe," (OpenAI GPT-2 model)"),uNe.forEach(t),zFr=i(le),tE=n(le,"LI",{});var bNe=s(tE);UFe=n(bNe,"STRONG",{});var oyt=s(UFe);QFr=r(oyt,"layoutlm"),oyt.forEach(t),WFr=r(bNe," \u2014 "),CU=n(bNe,"A",{href:!0});var ryt=s(CU);HFr=r(ryt,"TFLayoutLMForMaskedLM"),ryt.forEach(t),UFr=r(bNe," (LayoutLM model)"),bNe.forEach(t),JFr=i(le),aE=n(le,"LI",{});var vNe=s(aE);JFe=n(vNe,"STRONG",{});var tyt=s(JFe);YFr=r(tyt,"lxmert"),tyt.forEach(t),KFr=r(vNe," \u2014 "),wU=n(vNe,"A",{href:!0});var ayt=s(wU);ZFr=r(ayt,"TFLxmertForPreTraining"),ayt.forEach(t),eTr=r(vNe," (LXMERT model)"),vNe.forEach(t),oTr=i(le),nE=n(le,"LI",{});var FNe=s(nE);YFe=n(FNe,"STRONG",{});var nyt=s(YFe);rTr=r(nyt,"mobilebert"),nyt.forEach(t),tTr=r(FNe," \u2014 "),AU=n(FNe,"A",{href:!0});var syt=s(AU);aTr=r(syt,"TFMobileBertForPreTraining"),syt.forEach(t),nTr=r(FNe," (MobileBERT model)"),FNe.forEach(t),sTr=i(le),sE=n(le,"LI",{});var TNe=s(sE);KFe=n(TNe,"STRONG",{});var lyt=s(KFe);lTr=r(lyt,"mpnet"),lyt.forEach(t),iTr=r(TNe," \u2014 "),LU=n(TNe,"A",{href:!0});var iyt=s(LU);dTr=r(iyt,"TFMPNetForMaskedLM"),iyt.forEach(t),cTr=r(TNe," (MPNet model)"),TNe.forEach(t),fTr=i(le),lE=n(le,"LI",{});var MNe=s(lE);ZFe=n(MNe,"STRONG",{});var dyt=s(ZFe);mTr=r(dyt,"openai-gpt"),dyt.forEach(t),gTr=r(MNe," \u2014 "),yU=n(MNe,"A",{href:!0});var cyt=s(yU);hTr=r(cyt,"TFOpenAIGPTLMHeadModel"),cyt.forEach(t),pTr=r(MNe," (OpenAI GPT model)"),MNe.forEach(t),_Tr=i(le),iE=n(le,"LI",{});var ENe=s(iE);eTe=n(ENe,"STRONG",{});var fyt=s(eTe);uTr=r(fyt,"roberta"),fyt.forEach(t),bTr=r(ENe," \u2014 "),xU=n(ENe,"A",{href:!0});var myt=s(xU);vTr=r(myt,"TFRobertaForMaskedLM"),myt.forEach(t),FTr=r(ENe," (RoBERTa model)"),ENe.forEach(t),TTr=i(le),dE=n(le,"LI",{});var CNe=s(dE);oTe=n(CNe,"STRONG",{});var gyt=s(oTe);MTr=r(gyt,"t5"),gyt.forEach(t),ETr=r(CNe," \u2014 "),$U=n(CNe,"A",{href:!0});var hyt=s($U);CTr=r(hyt,"TFT5ForConditionalGeneration"),hyt.forEach(t),wTr=r(CNe," (T5 model)"),CNe.forEach(t),ATr=i(le),cE=n(le,"LI",{});var wNe=s(cE);rTe=n(wNe,"STRONG",{});var pyt=s(rTe);LTr=r(pyt,"tapas"),pyt.forEach(t),yTr=r(wNe," \u2014 "),kU=n(wNe,"A",{href:!0});var _yt=s(kU);xTr=r(_yt,"TFTapasForMaskedLM"),_yt.forEach(t),$Tr=r(wNe," (TAPAS model)"),wNe.forEach(t),kTr=i(le),fE=n(le,"LI",{});var ANe=s(fE);tTe=n(ANe,"STRONG",{});var uyt=s(tTe);STr=r(uyt,"transfo-xl"),uyt.forEach(t),RTr=r(ANe," \u2014 "),SU=n(ANe,"A",{href:!0});var byt=s(SU);PTr=r(byt,"TFTransfoXLLMHeadModel"),byt.forEach(t),BTr=r(ANe," (Transformer-XL model)"),ANe.forEach(t),ITr=i(le),mE=n(le,"LI",{});var LNe=s(mE);aTe=n(LNe,"STRONG",{});var vyt=s(aTe);NTr=r(vyt,"vit_mae"),vyt.forEach(t),qTr=r(LNe," \u2014 "),RU=n(LNe,"A",{href:!0});var Fyt=s(RU);jTr=r(Fyt,"TFViTMAEForPreTraining"),Fyt.forEach(t),DTr=r(LNe," (ViTMAE model)"),LNe.forEach(t),GTr=i(le),gE=n(le,"LI",{});var yNe=s(gE);nTe=n(yNe,"STRONG",{});var Tyt=s(nTe);OTr=r(Tyt,"xlm"),Tyt.forEach(t),VTr=r(yNe," \u2014 "),PU=n(yNe,"A",{href:!0});var Myt=s(PU);XTr=r(Myt,"TFXLMWithLMHeadModel"),Myt.forEach(t),zTr=r(yNe," (XLM model)"),yNe.forEach(t),QTr=i(le),hE=n(le,"LI",{});var xNe=s(hE);sTe=n(xNe,"STRONG",{});var Eyt=s(sTe);WTr=r(Eyt,"xlm-roberta"),Eyt.forEach(t),HTr=r(xNe," \u2014 "),BU=n(xNe,"A",{href:!0});var Cyt=s(BU);UTr=r(Cyt,"TFXLMRobertaForMaskedLM"),Cyt.forEach(t),JTr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),YTr=i(le),pE=n(le,"LI",{});var $Ne=s(pE);lTe=n($Ne,"STRONG",{});var wyt=s(lTe);KTr=r(wyt,"xlnet"),wyt.forEach(t),ZTr=r($Ne," \u2014 "),IU=n($Ne,"A",{href:!0});var Ayt=s(IU);e7r=r(Ayt,"TFXLNetLMHeadModel"),Ayt.forEach(t),o7r=r($Ne," (XLNet model)"),$Ne.forEach(t),le.forEach(t),r7r=i(Ll),T(_E.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),uVe=i(f),lc=n(f,"H2",{class:!0});var wze=s(lc);uE=n(wze,"A",{id:!0,class:!0,href:!0});var Lyt=s(uE);iTe=n(Lyt,"SPAN",{});var yyt=s(iTe);T($9.$$.fragment,yyt),yyt.forEach(t),Lyt.forEach(t),t7r=i(wze),dTe=n(wze,"SPAN",{});var xyt=s(dTe);a7r=r(xyt,"TFAutoModelForCausalLM"),xyt.forEach(t),wze.forEach(t),bVe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(k9.$$.fragment,yl),n7r=i(yl),ic=n(yl,"P",{});var $re=s(ic);s7r=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NU=n($re,"A",{href:!0});var $yt=s(NU);l7r=r($yt,"from_pretrained()"),$yt.forEach(t),i7r=r($re," class method or the "),qU=n($re,"A",{href:!0});var kyt=s(qU);d7r=r(kyt,"from_config()"),kyt.forEach(t),c7r=r($re,` class
method.`),$re.forEach(t),f7r=i(yl),S9=n(yl,"P",{});var Aze=s(S9);m7r=r(Aze,"This class cannot be instantiated directly using "),cTe=n(Aze,"CODE",{});var Syt=s(cTe);g7r=r(Syt,"__init__()"),Syt.forEach(t),h7r=r(Aze," (throws an error)."),Aze.forEach(t),p7r=i(yl),St=n(yl,"DIV",{class:!0});var B6=s(St);T(R9.$$.fragment,B6),_7r=i(B6),fTe=n(B6,"P",{});var Ryt=s(fTe);u7r=r(Ryt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ryt.forEach(t),b7r=i(B6),dc=n(B6,"P",{});var kre=s(dc);v7r=r(kre,`Note:
Loading a model from its configuration file does `),mTe=n(kre,"STRONG",{});var Pyt=s(mTe);F7r=r(Pyt,"not"),Pyt.forEach(t),T7r=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(kre,"A",{href:!0});var Byt=s(jU);M7r=r(Byt,"from_pretrained()"),Byt.forEach(t),E7r=r(kre," to load the model weights."),kre.forEach(t),C7r=i(B6),T(bE.$$.fragment,B6),B6.forEach(t),w7r=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(P9.$$.fragment,xl),A7r=i(xl),gTe=n(xl,"P",{});var Iyt=s(gTe);L7r=r(Iyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Iyt.forEach(t),y7r=i(xl),sn=n(xl,"P",{});var I6=s(sn);x7r=r(I6,"The model class to instantiate is selected based on the "),hTe=n(I6,"CODE",{});var Nyt=s(hTe);$7r=r(Nyt,"model_type"),Nyt.forEach(t),k7r=r(I6,` property of the config object (either
passed as an argument or loaded from `),pTe=n(I6,"CODE",{});var qyt=s(pTe);S7r=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),R7r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(I6,"CODE",{});var jyt=s(_Te);P7r=r(jyt,"pretrained_model_name_or_path"),jyt.forEach(t),B7r=r(I6,":"),I6.forEach(t),I7r=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);vE=n(Ce,"LI",{});var kNe=s(vE);uTe=n(kNe,"STRONG",{});var Dyt=s(uTe);N7r=r(Dyt,"bert"),Dyt.forEach(t),q7r=r(kNe," \u2014 "),DU=n(kNe,"A",{href:!0});var Gyt=s(DU);j7r=r(Gyt,"TFBertLMHeadModel"),Gyt.forEach(t),D7r=r(kNe," (BERT model)"),kNe.forEach(t),G7r=i(Ce),FE=n(Ce,"LI",{});var SNe=s(FE);bTe=n(SNe,"STRONG",{});var Oyt=s(bTe);O7r=r(Oyt,"camembert"),Oyt.forEach(t),V7r=r(SNe," \u2014 "),GU=n(SNe,"A",{href:!0});var Vyt=s(GU);X7r=r(Vyt,"TFCamembertForCausalLM"),Vyt.forEach(t),z7r=r(SNe," (CamemBERT model)"),SNe.forEach(t),Q7r=i(Ce),TE=n(Ce,"LI",{});var RNe=s(TE);vTe=n(RNe,"STRONG",{});var Xyt=s(vTe);W7r=r(Xyt,"ctrl"),Xyt.forEach(t),H7r=r(RNe," \u2014 "),OU=n(RNe,"A",{href:!0});var zyt=s(OU);U7r=r(zyt,"TFCTRLLMHeadModel"),zyt.forEach(t),J7r=r(RNe," (CTRL model)"),RNe.forEach(t),Y7r=i(Ce),ME=n(Ce,"LI",{});var PNe=s(ME);FTe=n(PNe,"STRONG",{});var Qyt=s(FTe);K7r=r(Qyt,"gpt2"),Qyt.forEach(t),Z7r=r(PNe," \u2014 "),VU=n(PNe,"A",{href:!0});var Wyt=s(VU);eMr=r(Wyt,"TFGPT2LMHeadModel"),Wyt.forEach(t),oMr=r(PNe," (OpenAI GPT-2 model)"),PNe.forEach(t),rMr=i(Ce),EE=n(Ce,"LI",{});var BNe=s(EE);TTe=n(BNe,"STRONG",{});var Hyt=s(TTe);tMr=r(Hyt,"gptj"),Hyt.forEach(t),aMr=r(BNe," \u2014 "),XU=n(BNe,"A",{href:!0});var Uyt=s(XU);nMr=r(Uyt,"TFGPTJForCausalLM"),Uyt.forEach(t),sMr=r(BNe," (GPT-J model)"),BNe.forEach(t),lMr=i(Ce),CE=n(Ce,"LI",{});var INe=s(CE);MTe=n(INe,"STRONG",{});var Jyt=s(MTe);iMr=r(Jyt,"openai-gpt"),Jyt.forEach(t),dMr=r(INe," \u2014 "),zU=n(INe,"A",{href:!0});var Yyt=s(zU);cMr=r(Yyt,"TFOpenAIGPTLMHeadModel"),Yyt.forEach(t),fMr=r(INe," (OpenAI GPT model)"),INe.forEach(t),mMr=i(Ce),wE=n(Ce,"LI",{});var NNe=s(wE);ETe=n(NNe,"STRONG",{});var Kyt=s(ETe);gMr=r(Kyt,"opt"),Kyt.forEach(t),hMr=r(NNe," \u2014 "),QU=n(NNe,"A",{href:!0});var Zyt=s(QU);pMr=r(Zyt,"TFOPTForCausalLM"),Zyt.forEach(t),_Mr=r(NNe," (OPT model)"),NNe.forEach(t),uMr=i(Ce),AE=n(Ce,"LI",{});var qNe=s(AE);CTe=n(qNe,"STRONG",{});var e8t=s(CTe);bMr=r(e8t,"rembert"),e8t.forEach(t),vMr=r(qNe," \u2014 "),WU=n(qNe,"A",{href:!0});var o8t=s(WU);FMr=r(o8t,"TFRemBertForCausalLM"),o8t.forEach(t),TMr=r(qNe," (RemBERT model)"),qNe.forEach(t),MMr=i(Ce),LE=n(Ce,"LI",{});var jNe=s(LE);wTe=n(jNe,"STRONG",{});var r8t=s(wTe);EMr=r(r8t,"roberta"),r8t.forEach(t),CMr=r(jNe," \u2014 "),HU=n(jNe,"A",{href:!0});var t8t=s(HU);wMr=r(t8t,"TFRobertaForCausalLM"),t8t.forEach(t),AMr=r(jNe," (RoBERTa model)"),jNe.forEach(t),LMr=i(Ce),yE=n(Ce,"LI",{});var DNe=s(yE);ATe=n(DNe,"STRONG",{});var a8t=s(ATe);yMr=r(a8t,"roformer"),a8t.forEach(t),xMr=r(DNe," \u2014 "),UU=n(DNe,"A",{href:!0});var n8t=s(UU);$Mr=r(n8t,"TFRoFormerForCausalLM"),n8t.forEach(t),kMr=r(DNe," (RoFormer model)"),DNe.forEach(t),SMr=i(Ce),xE=n(Ce,"LI",{});var GNe=s(xE);LTe=n(GNe,"STRONG",{});var s8t=s(LTe);RMr=r(s8t,"transfo-xl"),s8t.forEach(t),PMr=r(GNe," \u2014 "),JU=n(GNe,"A",{href:!0});var l8t=s(JU);BMr=r(l8t,"TFTransfoXLLMHeadModel"),l8t.forEach(t),IMr=r(GNe," (Transformer-XL model)"),GNe.forEach(t),NMr=i(Ce),$E=n(Ce,"LI",{});var ONe=s($E);yTe=n(ONe,"STRONG",{});var i8t=s(yTe);qMr=r(i8t,"xlm"),i8t.forEach(t),jMr=r(ONe," \u2014 "),YU=n(ONe,"A",{href:!0});var d8t=s(YU);DMr=r(d8t,"TFXLMWithLMHeadModel"),d8t.forEach(t),GMr=r(ONe," (XLM model)"),ONe.forEach(t),OMr=i(Ce),kE=n(Ce,"LI",{});var VNe=s(kE);xTe=n(VNe,"STRONG",{});var c8t=s(xTe);VMr=r(c8t,"xlnet"),c8t.forEach(t),XMr=r(VNe," \u2014 "),KU=n(VNe,"A",{href:!0});var f8t=s(KU);zMr=r(f8t,"TFXLNetLMHeadModel"),f8t.forEach(t),QMr=r(VNe," (XLNet model)"),VNe.forEach(t),Ce.forEach(t),WMr=i(xl),T(SE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),vVe=i(f),cc=n(f,"H2",{class:!0});var Lze=s(cc);RE=n(Lze,"A",{id:!0,class:!0,href:!0});var m8t=s(RE);$Te=n(m8t,"SPAN",{});var g8t=s($Te);T(B9.$$.fragment,g8t),g8t.forEach(t),m8t.forEach(t),HMr=i(Lze),kTe=n(Lze,"SPAN",{});var h8t=s(kTe);UMr=r(h8t,"TFAutoModelForImageClassification"),h8t.forEach(t),Lze.forEach(t),FVe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(I9.$$.fragment,$l),JMr=i($l),fc=n($l,"P",{});var Sre=s(fc);YMr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZU=n(Sre,"A",{href:!0});var p8t=s(ZU);KMr=r(p8t,"from_pretrained()"),p8t.forEach(t),ZMr=r(Sre," class method or the "),eJ=n(Sre,"A",{href:!0});var _8t=s(eJ);eEr=r(_8t,"from_config()"),_8t.forEach(t),oEr=r(Sre,` class
method.`),Sre.forEach(t),rEr=i($l),N9=n($l,"P",{});var yze=s(N9);tEr=r(yze,"This class cannot be instantiated directly using "),STe=n(yze,"CODE",{});var u8t=s(STe);aEr=r(u8t,"__init__()"),u8t.forEach(t),nEr=r(yze," (throws an error)."),yze.forEach(t),sEr=i($l),Rt=n($l,"DIV",{class:!0});var N6=s(Rt);T(q9.$$.fragment,N6),lEr=i(N6),RTe=n(N6,"P",{});var b8t=s(RTe);iEr=r(b8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b8t.forEach(t),dEr=i(N6),mc=n(N6,"P",{});var Rre=s(mc);cEr=r(Rre,`Note:
Loading a model from its configuration file does `),PTe=n(Rre,"STRONG",{});var v8t=s(PTe);fEr=r(v8t,"not"),v8t.forEach(t),mEr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Rre,"A",{href:!0});var F8t=s(oJ);gEr=r(F8t,"from_pretrained()"),F8t.forEach(t),hEr=r(Rre," to load the model weights."),Rre.forEach(t),pEr=i(N6),T(PE.$$.fragment,N6),N6.forEach(t),_Er=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(j9.$$.fragment,kl),uEr=i(kl),BTe=n(kl,"P",{});var T8t=s(BTe);bEr=r(T8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),T8t.forEach(t),vEr=i(kl),ln=n(kl,"P",{});var q6=s(ln);FEr=r(q6,"The model class to instantiate is selected based on the "),ITe=n(q6,"CODE",{});var M8t=s(ITe);TEr=r(M8t,"model_type"),M8t.forEach(t),MEr=r(q6,` property of the config object (either
passed as an argument or loaded from `),NTe=n(q6,"CODE",{});var E8t=s(NTe);EEr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),CEr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(q6,"CODE",{});var C8t=s(qTe);wEr=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),AEr=r(q6,":"),q6.forEach(t),LEr=i(kl),dn=n(kl,"UL",{});var j6=s(dn);BE=n(j6,"LI",{});var XNe=s(BE);jTe=n(XNe,"STRONG",{});var w8t=s(jTe);yEr=r(w8t,"convnext"),w8t.forEach(t),xEr=r(XNe," \u2014 "),rJ=n(XNe,"A",{href:!0});var A8t=s(rJ);$Er=r(A8t,"TFConvNextForImageClassification"),A8t.forEach(t),kEr=r(XNe," (ConvNeXT model)"),XNe.forEach(t),SEr=i(j6),IE=n(j6,"LI",{});var zNe=s(IE);DTe=n(zNe,"STRONG",{});var L8t=s(DTe);REr=r(L8t,"data2vec-vision"),L8t.forEach(t),PEr=r(zNe," \u2014 "),tJ=n(zNe,"A",{href:!0});var y8t=s(tJ);BEr=r(y8t,"TFData2VecVisionForImageClassification"),y8t.forEach(t),IEr=r(zNe," (Data2VecVision model)"),zNe.forEach(t),NEr=i(j6),NE=n(j6,"LI",{});var QNe=s(NE);GTe=n(QNe,"STRONG",{});var x8t=s(GTe);qEr=r(x8t,"swin"),x8t.forEach(t),jEr=r(QNe," \u2014 "),aJ=n(QNe,"A",{href:!0});var $8t=s(aJ);DEr=r($8t,"TFSwinForImageClassification"),$8t.forEach(t),GEr=r(QNe," (Swin Transformer model)"),QNe.forEach(t),OEr=i(j6),qE=n(j6,"LI",{});var WNe=s(qE);OTe=n(WNe,"STRONG",{});var k8t=s(OTe);VEr=r(k8t,"vit"),k8t.forEach(t),XEr=r(WNe," \u2014 "),nJ=n(WNe,"A",{href:!0});var S8t=s(nJ);zEr=r(S8t,"TFViTForImageClassification"),S8t.forEach(t),QEr=r(WNe," (ViT model)"),WNe.forEach(t),j6.forEach(t),WEr=i(kl),T(jE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),TVe=i(f),gc=n(f,"H2",{class:!0});var xze=s(gc);DE=n(xze,"A",{id:!0,class:!0,href:!0});var R8t=s(DE);VTe=n(R8t,"SPAN",{});var P8t=s(VTe);T(D9.$$.fragment,P8t),P8t.forEach(t),R8t.forEach(t),HEr=i(xze),XTe=n(xze,"SPAN",{});var B8t=s(XTe);UEr=r(B8t,"TFAutoModelForMaskedLM"),B8t.forEach(t),xze.forEach(t),MVe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(G9.$$.fragment,Sl),JEr=i(Sl),hc=n(Sl,"P",{});var Pre=s(hc);YEr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sJ=n(Pre,"A",{href:!0});var I8t=s(sJ);KEr=r(I8t,"from_pretrained()"),I8t.forEach(t),ZEr=r(Pre," class method or the "),lJ=n(Pre,"A",{href:!0});var N8t=s(lJ);e4r=r(N8t,"from_config()"),N8t.forEach(t),o4r=r(Pre,` class
method.`),Pre.forEach(t),r4r=i(Sl),O9=n(Sl,"P",{});var $ze=s(O9);t4r=r($ze,"This class cannot be instantiated directly using "),zTe=n($ze,"CODE",{});var q8t=s(zTe);a4r=r(q8t,"__init__()"),q8t.forEach(t),n4r=r($ze," (throws an error)."),$ze.forEach(t),s4r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var D6=s(Pt);T(V9.$$.fragment,D6),l4r=i(D6),QTe=n(D6,"P",{});var j8t=s(QTe);i4r=r(j8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),j8t.forEach(t),d4r=i(D6),pc=n(D6,"P",{});var Bre=s(pc);c4r=r(Bre,`Note:
Loading a model from its configuration file does `),WTe=n(Bre,"STRONG",{});var D8t=s(WTe);f4r=r(D8t,"not"),D8t.forEach(t),m4r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(Bre,"A",{href:!0});var G8t=s(iJ);g4r=r(G8t,"from_pretrained()"),G8t.forEach(t),h4r=r(Bre," to load the model weights."),Bre.forEach(t),p4r=i(D6),T(GE.$$.fragment,D6),D6.forEach(t),_4r=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(X9.$$.fragment,Rl),u4r=i(Rl),HTe=n(Rl,"P",{});var O8t=s(HTe);b4r=r(O8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O8t.forEach(t),v4r=i(Rl),cn=n(Rl,"P",{});var G6=s(cn);F4r=r(G6,"The model class to instantiate is selected based on the "),UTe=n(G6,"CODE",{});var V8t=s(UTe);T4r=r(V8t,"model_type"),V8t.forEach(t),M4r=r(G6,` property of the config object (either
passed as an argument or loaded from `),JTe=n(G6,"CODE",{});var X8t=s(JTe);E4r=r(X8t,"pretrained_model_name_or_path"),X8t.forEach(t),C4r=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=n(G6,"CODE",{});var z8t=s(YTe);w4r=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),A4r=r(G6,":"),G6.forEach(t),L4r=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);OE=n(fe,"LI",{});var HNe=s(OE);KTe=n(HNe,"STRONG",{});var Q8t=s(KTe);y4r=r(Q8t,"albert"),Q8t.forEach(t),x4r=r(HNe," \u2014 "),dJ=n(HNe,"A",{href:!0});var W8t=s(dJ);$4r=r(W8t,"TFAlbertForMaskedLM"),W8t.forEach(t),k4r=r(HNe," (ALBERT model)"),HNe.forEach(t),S4r=i(fe),VE=n(fe,"LI",{});var UNe=s(VE);ZTe=n(UNe,"STRONG",{});var H8t=s(ZTe);R4r=r(H8t,"bert"),H8t.forEach(t),P4r=r(UNe," \u2014 "),cJ=n(UNe,"A",{href:!0});var U8t=s(cJ);B4r=r(U8t,"TFBertForMaskedLM"),U8t.forEach(t),I4r=r(UNe," (BERT model)"),UNe.forEach(t),N4r=i(fe),XE=n(fe,"LI",{});var JNe=s(XE);e7e=n(JNe,"STRONG",{});var J8t=s(e7e);q4r=r(J8t,"camembert"),J8t.forEach(t),j4r=r(JNe," \u2014 "),fJ=n(JNe,"A",{href:!0});var Y8t=s(fJ);D4r=r(Y8t,"TFCamembertForMaskedLM"),Y8t.forEach(t),G4r=r(JNe," (CamemBERT model)"),JNe.forEach(t),O4r=i(fe),zE=n(fe,"LI",{});var YNe=s(zE);o7e=n(YNe,"STRONG",{});var K8t=s(o7e);V4r=r(K8t,"convbert"),K8t.forEach(t),X4r=r(YNe," \u2014 "),mJ=n(YNe,"A",{href:!0});var Z8t=s(mJ);z4r=r(Z8t,"TFConvBertForMaskedLM"),Z8t.forEach(t),Q4r=r(YNe," (ConvBERT model)"),YNe.forEach(t),W4r=i(fe),QE=n(fe,"LI",{});var KNe=s(QE);r7e=n(KNe,"STRONG",{});var e9t=s(r7e);H4r=r(e9t,"deberta"),e9t.forEach(t),U4r=r(KNe," \u2014 "),gJ=n(KNe,"A",{href:!0});var o9t=s(gJ);J4r=r(o9t,"TFDebertaForMaskedLM"),o9t.forEach(t),Y4r=r(KNe," (DeBERTa model)"),KNe.forEach(t),K4r=i(fe),WE=n(fe,"LI",{});var ZNe=s(WE);t7e=n(ZNe,"STRONG",{});var r9t=s(t7e);Z4r=r(r9t,"deberta-v2"),r9t.forEach(t),eCr=r(ZNe," \u2014 "),hJ=n(ZNe,"A",{href:!0});var t9t=s(hJ);oCr=r(t9t,"TFDebertaV2ForMaskedLM"),t9t.forEach(t),rCr=r(ZNe," (DeBERTa-v2 model)"),ZNe.forEach(t),tCr=i(fe),HE=n(fe,"LI",{});var eqe=s(HE);a7e=n(eqe,"STRONG",{});var a9t=s(a7e);aCr=r(a9t,"distilbert"),a9t.forEach(t),nCr=r(eqe," \u2014 "),pJ=n(eqe,"A",{href:!0});var n9t=s(pJ);sCr=r(n9t,"TFDistilBertForMaskedLM"),n9t.forEach(t),lCr=r(eqe," (DistilBERT model)"),eqe.forEach(t),iCr=i(fe),UE=n(fe,"LI",{});var oqe=s(UE);n7e=n(oqe,"STRONG",{});var s9t=s(n7e);dCr=r(s9t,"electra"),s9t.forEach(t),cCr=r(oqe," \u2014 "),_J=n(oqe,"A",{href:!0});var l9t=s(_J);fCr=r(l9t,"TFElectraForMaskedLM"),l9t.forEach(t),mCr=r(oqe," (ELECTRA model)"),oqe.forEach(t),gCr=i(fe),JE=n(fe,"LI",{});var rqe=s(JE);s7e=n(rqe,"STRONG",{});var i9t=s(s7e);hCr=r(i9t,"flaubert"),i9t.forEach(t),pCr=r(rqe," \u2014 "),uJ=n(rqe,"A",{href:!0});var d9t=s(uJ);_Cr=r(d9t,"TFFlaubertWithLMHeadModel"),d9t.forEach(t),uCr=r(rqe," (FlauBERT model)"),rqe.forEach(t),bCr=i(fe),YE=n(fe,"LI",{});var tqe=s(YE);l7e=n(tqe,"STRONG",{});var c9t=s(l7e);vCr=r(c9t,"funnel"),c9t.forEach(t),FCr=r(tqe," \u2014 "),bJ=n(tqe,"A",{href:!0});var f9t=s(bJ);TCr=r(f9t,"TFFunnelForMaskedLM"),f9t.forEach(t),MCr=r(tqe," (Funnel Transformer model)"),tqe.forEach(t),ECr=i(fe),KE=n(fe,"LI",{});var aqe=s(KE);i7e=n(aqe,"STRONG",{});var m9t=s(i7e);CCr=r(m9t,"layoutlm"),m9t.forEach(t),wCr=r(aqe," \u2014 "),vJ=n(aqe,"A",{href:!0});var g9t=s(vJ);ACr=r(g9t,"TFLayoutLMForMaskedLM"),g9t.forEach(t),LCr=r(aqe," (LayoutLM model)"),aqe.forEach(t),yCr=i(fe),ZE=n(fe,"LI",{});var nqe=s(ZE);d7e=n(nqe,"STRONG",{});var h9t=s(d7e);xCr=r(h9t,"longformer"),h9t.forEach(t),$Cr=r(nqe," \u2014 "),FJ=n(nqe,"A",{href:!0});var p9t=s(FJ);kCr=r(p9t,"TFLongformerForMaskedLM"),p9t.forEach(t),SCr=r(nqe," (Longformer model)"),nqe.forEach(t),RCr=i(fe),e4=n(fe,"LI",{});var sqe=s(e4);c7e=n(sqe,"STRONG",{});var _9t=s(c7e);PCr=r(_9t,"mobilebert"),_9t.forEach(t),BCr=r(sqe," \u2014 "),TJ=n(sqe,"A",{href:!0});var u9t=s(TJ);ICr=r(u9t,"TFMobileBertForMaskedLM"),u9t.forEach(t),NCr=r(sqe," (MobileBERT model)"),sqe.forEach(t),qCr=i(fe),o4=n(fe,"LI",{});var lqe=s(o4);f7e=n(lqe,"STRONG",{});var b9t=s(f7e);jCr=r(b9t,"mpnet"),b9t.forEach(t),DCr=r(lqe," \u2014 "),MJ=n(lqe,"A",{href:!0});var v9t=s(MJ);GCr=r(v9t,"TFMPNetForMaskedLM"),v9t.forEach(t),OCr=r(lqe," (MPNet model)"),lqe.forEach(t),VCr=i(fe),r4=n(fe,"LI",{});var iqe=s(r4);m7e=n(iqe,"STRONG",{});var F9t=s(m7e);XCr=r(F9t,"rembert"),F9t.forEach(t),zCr=r(iqe," \u2014 "),EJ=n(iqe,"A",{href:!0});var T9t=s(EJ);QCr=r(T9t,"TFRemBertForMaskedLM"),T9t.forEach(t),WCr=r(iqe," (RemBERT model)"),iqe.forEach(t),HCr=i(fe),t4=n(fe,"LI",{});var dqe=s(t4);g7e=n(dqe,"STRONG",{});var M9t=s(g7e);UCr=r(M9t,"roberta"),M9t.forEach(t),JCr=r(dqe," \u2014 "),CJ=n(dqe,"A",{href:!0});var E9t=s(CJ);YCr=r(E9t,"TFRobertaForMaskedLM"),E9t.forEach(t),KCr=r(dqe," (RoBERTa model)"),dqe.forEach(t),ZCr=i(fe),a4=n(fe,"LI",{});var cqe=s(a4);h7e=n(cqe,"STRONG",{});var C9t=s(h7e);e5r=r(C9t,"roformer"),C9t.forEach(t),o5r=r(cqe," \u2014 "),wJ=n(cqe,"A",{href:!0});var w9t=s(wJ);r5r=r(w9t,"TFRoFormerForMaskedLM"),w9t.forEach(t),t5r=r(cqe," (RoFormer model)"),cqe.forEach(t),a5r=i(fe),n4=n(fe,"LI",{});var fqe=s(n4);p7e=n(fqe,"STRONG",{});var A9t=s(p7e);n5r=r(A9t,"tapas"),A9t.forEach(t),s5r=r(fqe," \u2014 "),AJ=n(fqe,"A",{href:!0});var L9t=s(AJ);l5r=r(L9t,"TFTapasForMaskedLM"),L9t.forEach(t),i5r=r(fqe," (TAPAS model)"),fqe.forEach(t),d5r=i(fe),s4=n(fe,"LI",{});var mqe=s(s4);_7e=n(mqe,"STRONG",{});var y9t=s(_7e);c5r=r(y9t,"xlm"),y9t.forEach(t),f5r=r(mqe," \u2014 "),LJ=n(mqe,"A",{href:!0});var x9t=s(LJ);m5r=r(x9t,"TFXLMWithLMHeadModel"),x9t.forEach(t),g5r=r(mqe," (XLM model)"),mqe.forEach(t),h5r=i(fe),l4=n(fe,"LI",{});var gqe=s(l4);u7e=n(gqe,"STRONG",{});var $9t=s(u7e);p5r=r($9t,"xlm-roberta"),$9t.forEach(t),_5r=r(gqe," \u2014 "),yJ=n(gqe,"A",{href:!0});var k9t=s(yJ);u5r=r(k9t,"TFXLMRobertaForMaskedLM"),k9t.forEach(t),b5r=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),fe.forEach(t),v5r=i(Rl),T(i4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),EVe=i(f),_c=n(f,"H2",{class:!0});var kze=s(_c);d4=n(kze,"A",{id:!0,class:!0,href:!0});var S9t=s(d4);b7e=n(S9t,"SPAN",{});var R9t=s(b7e);T(z9.$$.fragment,R9t),R9t.forEach(t),S9t.forEach(t),F5r=i(kze),v7e=n(kze,"SPAN",{});var P9t=s(v7e);T5r=r(P9t,"TFAutoModelForSeq2SeqLM"),P9t.forEach(t),kze.forEach(t),CVe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(Q9.$$.fragment,Pl),M5r=i(Pl),uc=n(Pl,"P",{});var Ire=s(uc);E5r=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xJ=n(Ire,"A",{href:!0});var B9t=s(xJ);C5r=r(B9t,"from_pretrained()"),B9t.forEach(t),w5r=r(Ire," class method or the "),$J=n(Ire,"A",{href:!0});var I9t=s($J);A5r=r(I9t,"from_config()"),I9t.forEach(t),L5r=r(Ire,` class
method.`),Ire.forEach(t),y5r=i(Pl),W9=n(Pl,"P",{});var Sze=s(W9);x5r=r(Sze,"This class cannot be instantiated directly using "),F7e=n(Sze,"CODE",{});var N9t=s(F7e);$5r=r(N9t,"__init__()"),N9t.forEach(t),k5r=r(Sze," (throws an error)."),Sze.forEach(t),S5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var O6=s(Bt);T(H9.$$.fragment,O6),R5r=i(O6),T7e=n(O6,"P",{});var q9t=s(T7e);P5r=r(q9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q9t.forEach(t),B5r=i(O6),bc=n(O6,"P",{});var Nre=s(bc);I5r=r(Nre,`Note:
Loading a model from its configuration file does `),M7e=n(Nre,"STRONG",{});var j9t=s(M7e);N5r=r(j9t,"not"),j9t.forEach(t),q5r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(Nre,"A",{href:!0});var D9t=s(kJ);j5r=r(D9t,"from_pretrained()"),D9t.forEach(t),D5r=r(Nre," to load the model weights."),Nre.forEach(t),G5r=i(O6),T(c4.$$.fragment,O6),O6.forEach(t),O5r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(U9.$$.fragment,Bl),V5r=i(Bl),E7e=n(Bl,"P",{});var G9t=s(E7e);X5r=r(G9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G9t.forEach(t),z5r=i(Bl),fn=n(Bl,"P",{});var V6=s(fn);Q5r=r(V6,"The model class to instantiate is selected based on the "),C7e=n(V6,"CODE",{});var O9t=s(C7e);W5r=r(O9t,"model_type"),O9t.forEach(t),H5r=r(V6,` property of the config object (either
passed as an argument or loaded from `),w7e=n(V6,"CODE",{});var V9t=s(w7e);U5r=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),J5r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(V6,"CODE",{});var X9t=s(A7e);Y5r=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),K5r=r(V6,":"),V6.forEach(t),Z5r=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);f4=n(Ie,"LI",{});var hqe=s(f4);L7e=n(hqe,"STRONG",{});var z9t=s(L7e);e0r=r(z9t,"bart"),z9t.forEach(t),o0r=r(hqe," \u2014 "),SJ=n(hqe,"A",{href:!0});var Q9t=s(SJ);r0r=r(Q9t,"TFBartForConditionalGeneration"),Q9t.forEach(t),t0r=r(hqe," (BART model)"),hqe.forEach(t),a0r=i(Ie),m4=n(Ie,"LI",{});var pqe=s(m4);y7e=n(pqe,"STRONG",{});var W9t=s(y7e);n0r=r(W9t,"blenderbot"),W9t.forEach(t),s0r=r(pqe," \u2014 "),RJ=n(pqe,"A",{href:!0});var H9t=s(RJ);l0r=r(H9t,"TFBlenderbotForConditionalGeneration"),H9t.forEach(t),i0r=r(pqe," (Blenderbot model)"),pqe.forEach(t),d0r=i(Ie),g4=n(Ie,"LI",{});var _qe=s(g4);x7e=n(_qe,"STRONG",{});var U9t=s(x7e);c0r=r(U9t,"blenderbot-small"),U9t.forEach(t),f0r=r(_qe," \u2014 "),PJ=n(_qe,"A",{href:!0});var J9t=s(PJ);m0r=r(J9t,"TFBlenderbotSmallForConditionalGeneration"),J9t.forEach(t),g0r=r(_qe," (BlenderbotSmall model)"),_qe.forEach(t),h0r=i(Ie),h4=n(Ie,"LI",{});var uqe=s(h4);$7e=n(uqe,"STRONG",{});var Y9t=s($7e);p0r=r(Y9t,"encoder-decoder"),Y9t.forEach(t),_0r=r(uqe," \u2014 "),BJ=n(uqe,"A",{href:!0});var K9t=s(BJ);u0r=r(K9t,"TFEncoderDecoderModel"),K9t.forEach(t),b0r=r(uqe," (Encoder decoder model)"),uqe.forEach(t),v0r=i(Ie),p4=n(Ie,"LI",{});var bqe=s(p4);k7e=n(bqe,"STRONG",{});var Z9t=s(k7e);F0r=r(Z9t,"led"),Z9t.forEach(t),T0r=r(bqe," \u2014 "),IJ=n(bqe,"A",{href:!0});var ext=s(IJ);M0r=r(ext,"TFLEDForConditionalGeneration"),ext.forEach(t),E0r=r(bqe," (LED model)"),bqe.forEach(t),C0r=i(Ie),_4=n(Ie,"LI",{});var vqe=s(_4);S7e=n(vqe,"STRONG",{});var oxt=s(S7e);w0r=r(oxt,"marian"),oxt.forEach(t),A0r=r(vqe," \u2014 "),NJ=n(vqe,"A",{href:!0});var rxt=s(NJ);L0r=r(rxt,"TFMarianMTModel"),rxt.forEach(t),y0r=r(vqe," (Marian model)"),vqe.forEach(t),x0r=i(Ie),u4=n(Ie,"LI",{});var Fqe=s(u4);R7e=n(Fqe,"STRONG",{});var txt=s(R7e);$0r=r(txt,"mbart"),txt.forEach(t),k0r=r(Fqe," \u2014 "),qJ=n(Fqe,"A",{href:!0});var axt=s(qJ);S0r=r(axt,"TFMBartForConditionalGeneration"),axt.forEach(t),R0r=r(Fqe," (mBART model)"),Fqe.forEach(t),P0r=i(Ie),b4=n(Ie,"LI",{});var Tqe=s(b4);P7e=n(Tqe,"STRONG",{});var nxt=s(P7e);B0r=r(nxt,"mt5"),nxt.forEach(t),I0r=r(Tqe," \u2014 "),jJ=n(Tqe,"A",{href:!0});var sxt=s(jJ);N0r=r(sxt,"TFMT5ForConditionalGeneration"),sxt.forEach(t),q0r=r(Tqe," (MT5 model)"),Tqe.forEach(t),j0r=i(Ie),v4=n(Ie,"LI",{});var Mqe=s(v4);B7e=n(Mqe,"STRONG",{});var lxt=s(B7e);D0r=r(lxt,"pegasus"),lxt.forEach(t),G0r=r(Mqe," \u2014 "),DJ=n(Mqe,"A",{href:!0});var ixt=s(DJ);O0r=r(ixt,"TFPegasusForConditionalGeneration"),ixt.forEach(t),V0r=r(Mqe," (Pegasus model)"),Mqe.forEach(t),X0r=i(Ie),F4=n(Ie,"LI",{});var Eqe=s(F4);I7e=n(Eqe,"STRONG",{});var dxt=s(I7e);z0r=r(dxt,"t5"),dxt.forEach(t),Q0r=r(Eqe," \u2014 "),GJ=n(Eqe,"A",{href:!0});var cxt=s(GJ);W0r=r(cxt,"TFT5ForConditionalGeneration"),cxt.forEach(t),H0r=r(Eqe," (T5 model)"),Eqe.forEach(t),Ie.forEach(t),U0r=i(Bl),T(T4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),wVe=i(f),vc=n(f,"H2",{class:!0});var Rze=s(vc);M4=n(Rze,"A",{id:!0,class:!0,href:!0});var fxt=s(M4);N7e=n(fxt,"SPAN",{});var mxt=s(N7e);T(J9.$$.fragment,mxt),mxt.forEach(t),fxt.forEach(t),J0r=i(Rze),q7e=n(Rze,"SPAN",{});var gxt=s(q7e);Y0r=r(gxt,"TFAutoModelForSequenceClassification"),gxt.forEach(t),Rze.forEach(t),AVe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(Y9.$$.fragment,Il),K0r=i(Il),Fc=n(Il,"P",{});var qre=s(Fc);Z0r=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OJ=n(qre,"A",{href:!0});var hxt=s(OJ);ewr=r(hxt,"from_pretrained()"),hxt.forEach(t),owr=r(qre," class method or the "),VJ=n(qre,"A",{href:!0});var pxt=s(VJ);rwr=r(pxt,"from_config()"),pxt.forEach(t),twr=r(qre,` class
method.`),qre.forEach(t),awr=i(Il),K9=n(Il,"P",{});var Pze=s(K9);nwr=r(Pze,"This class cannot be instantiated directly using "),j7e=n(Pze,"CODE",{});var _xt=s(j7e);swr=r(_xt,"__init__()"),_xt.forEach(t),lwr=r(Pze," (throws an error)."),Pze.forEach(t),iwr=i(Il),It=n(Il,"DIV",{class:!0});var X6=s(It);T(Z9.$$.fragment,X6),dwr=i(X6),D7e=n(X6,"P",{});var uxt=s(D7e);cwr=r(uxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uxt.forEach(t),fwr=i(X6),Tc=n(X6,"P",{});var jre=s(Tc);mwr=r(jre,`Note:
Loading a model from its configuration file does `),G7e=n(jre,"STRONG",{});var bxt=s(G7e);gwr=r(bxt,"not"),bxt.forEach(t),hwr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(jre,"A",{href:!0});var vxt=s(XJ);pwr=r(vxt,"from_pretrained()"),vxt.forEach(t),_wr=r(jre," to load the model weights."),jre.forEach(t),uwr=i(X6),T(E4.$$.fragment,X6),X6.forEach(t),bwr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(ex.$$.fragment,Nl),vwr=i(Nl),O7e=n(Nl,"P",{});var Fxt=s(O7e);Fwr=r(Fxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fxt.forEach(t),Twr=i(Nl),mn=n(Nl,"P",{});var z6=s(mn);Mwr=r(z6,"The model class to instantiate is selected based on the "),V7e=n(z6,"CODE",{});var Txt=s(V7e);Ewr=r(Txt,"model_type"),Txt.forEach(t),Cwr=r(z6,` property of the config object (either
passed as an argument or loaded from `),X7e=n(z6,"CODE",{});var Mxt=s(X7e);wwr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),Awr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(z6,"CODE",{});var Ext=s(z7e);Lwr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),ywr=r(z6,":"),z6.forEach(t),xwr=i(Nl),te=n(Nl,"UL",{});var ne=s(te);C4=n(ne,"LI",{});var Cqe=s(C4);Q7e=n(Cqe,"STRONG",{});var Cxt=s(Q7e);$wr=r(Cxt,"albert"),Cxt.forEach(t),kwr=r(Cqe," \u2014 "),zJ=n(Cqe,"A",{href:!0});var wxt=s(zJ);Swr=r(wxt,"TFAlbertForSequenceClassification"),wxt.forEach(t),Rwr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),Pwr=i(ne),w4=n(ne,"LI",{});var wqe=s(w4);W7e=n(wqe,"STRONG",{});var Axt=s(W7e);Bwr=r(Axt,"bert"),Axt.forEach(t),Iwr=r(wqe," \u2014 "),QJ=n(wqe,"A",{href:!0});var Lxt=s(QJ);Nwr=r(Lxt,"TFBertForSequenceClassification"),Lxt.forEach(t),qwr=r(wqe," (BERT model)"),wqe.forEach(t),jwr=i(ne),A4=n(ne,"LI",{});var Aqe=s(A4);H7e=n(Aqe,"STRONG",{});var yxt=s(H7e);Dwr=r(yxt,"camembert"),yxt.forEach(t),Gwr=r(Aqe," \u2014 "),WJ=n(Aqe,"A",{href:!0});var xxt=s(WJ);Owr=r(xxt,"TFCamembertForSequenceClassification"),xxt.forEach(t),Vwr=r(Aqe," (CamemBERT model)"),Aqe.forEach(t),Xwr=i(ne),L4=n(ne,"LI",{});var Lqe=s(L4);U7e=n(Lqe,"STRONG",{});var $xt=s(U7e);zwr=r($xt,"convbert"),$xt.forEach(t),Qwr=r(Lqe," \u2014 "),HJ=n(Lqe,"A",{href:!0});var kxt=s(HJ);Wwr=r(kxt,"TFConvBertForSequenceClassification"),kxt.forEach(t),Hwr=r(Lqe," (ConvBERT model)"),Lqe.forEach(t),Uwr=i(ne),y4=n(ne,"LI",{});var yqe=s(y4);J7e=n(yqe,"STRONG",{});var Sxt=s(J7e);Jwr=r(Sxt,"ctrl"),Sxt.forEach(t),Ywr=r(yqe," \u2014 "),UJ=n(yqe,"A",{href:!0});var Rxt=s(UJ);Kwr=r(Rxt,"TFCTRLForSequenceClassification"),Rxt.forEach(t),Zwr=r(yqe," (CTRL model)"),yqe.forEach(t),eAr=i(ne),x4=n(ne,"LI",{});var xqe=s(x4);Y7e=n(xqe,"STRONG",{});var Pxt=s(Y7e);oAr=r(Pxt,"deberta"),Pxt.forEach(t),rAr=r(xqe," \u2014 "),JJ=n(xqe,"A",{href:!0});var Bxt=s(JJ);tAr=r(Bxt,"TFDebertaForSequenceClassification"),Bxt.forEach(t),aAr=r(xqe," (DeBERTa model)"),xqe.forEach(t),nAr=i(ne),$4=n(ne,"LI",{});var $qe=s($4);K7e=n($qe,"STRONG",{});var Ixt=s(K7e);sAr=r(Ixt,"deberta-v2"),Ixt.forEach(t),lAr=r($qe," \u2014 "),YJ=n($qe,"A",{href:!0});var Nxt=s(YJ);iAr=r(Nxt,"TFDebertaV2ForSequenceClassification"),Nxt.forEach(t),dAr=r($qe," (DeBERTa-v2 model)"),$qe.forEach(t),cAr=i(ne),k4=n(ne,"LI",{});var kqe=s(k4);Z7e=n(kqe,"STRONG",{});var qxt=s(Z7e);fAr=r(qxt,"distilbert"),qxt.forEach(t),mAr=r(kqe," \u2014 "),KJ=n(kqe,"A",{href:!0});var jxt=s(KJ);gAr=r(jxt,"TFDistilBertForSequenceClassification"),jxt.forEach(t),hAr=r(kqe," (DistilBERT model)"),kqe.forEach(t),pAr=i(ne),S4=n(ne,"LI",{});var Sqe=s(S4);eMe=n(Sqe,"STRONG",{});var Dxt=s(eMe);_Ar=r(Dxt,"electra"),Dxt.forEach(t),uAr=r(Sqe," \u2014 "),ZJ=n(Sqe,"A",{href:!0});var Gxt=s(ZJ);bAr=r(Gxt,"TFElectraForSequenceClassification"),Gxt.forEach(t),vAr=r(Sqe," (ELECTRA model)"),Sqe.forEach(t),FAr=i(ne),R4=n(ne,"LI",{});var Rqe=s(R4);oMe=n(Rqe,"STRONG",{});var Oxt=s(oMe);TAr=r(Oxt,"flaubert"),Oxt.forEach(t),MAr=r(Rqe," \u2014 "),eY=n(Rqe,"A",{href:!0});var Vxt=s(eY);EAr=r(Vxt,"TFFlaubertForSequenceClassification"),Vxt.forEach(t),CAr=r(Rqe," (FlauBERT model)"),Rqe.forEach(t),wAr=i(ne),P4=n(ne,"LI",{});var Pqe=s(P4);rMe=n(Pqe,"STRONG",{});var Xxt=s(rMe);AAr=r(Xxt,"funnel"),Xxt.forEach(t),LAr=r(Pqe," \u2014 "),oY=n(Pqe,"A",{href:!0});var zxt=s(oY);yAr=r(zxt,"TFFunnelForSequenceClassification"),zxt.forEach(t),xAr=r(Pqe," (Funnel Transformer model)"),Pqe.forEach(t),$Ar=i(ne),B4=n(ne,"LI",{});var Bqe=s(B4);tMe=n(Bqe,"STRONG",{});var Qxt=s(tMe);kAr=r(Qxt,"gpt2"),Qxt.forEach(t),SAr=r(Bqe," \u2014 "),rY=n(Bqe,"A",{href:!0});var Wxt=s(rY);RAr=r(Wxt,"TFGPT2ForSequenceClassification"),Wxt.forEach(t),PAr=r(Bqe," (OpenAI GPT-2 model)"),Bqe.forEach(t),BAr=i(ne),I4=n(ne,"LI",{});var Iqe=s(I4);aMe=n(Iqe,"STRONG",{});var Hxt=s(aMe);IAr=r(Hxt,"gptj"),Hxt.forEach(t),NAr=r(Iqe," \u2014 "),tY=n(Iqe,"A",{href:!0});var Uxt=s(tY);qAr=r(Uxt,"TFGPTJForSequenceClassification"),Uxt.forEach(t),jAr=r(Iqe," (GPT-J model)"),Iqe.forEach(t),DAr=i(ne),N4=n(ne,"LI",{});var Nqe=s(N4);nMe=n(Nqe,"STRONG",{});var Jxt=s(nMe);GAr=r(Jxt,"layoutlm"),Jxt.forEach(t),OAr=r(Nqe," \u2014 "),aY=n(Nqe,"A",{href:!0});var Yxt=s(aY);VAr=r(Yxt,"TFLayoutLMForSequenceClassification"),Yxt.forEach(t),XAr=r(Nqe," (LayoutLM model)"),Nqe.forEach(t),zAr=i(ne),q4=n(ne,"LI",{});var qqe=s(q4);sMe=n(qqe,"STRONG",{});var Kxt=s(sMe);QAr=r(Kxt,"longformer"),Kxt.forEach(t),WAr=r(qqe," \u2014 "),nY=n(qqe,"A",{href:!0});var Zxt=s(nY);HAr=r(Zxt,"TFLongformerForSequenceClassification"),Zxt.forEach(t),UAr=r(qqe," (Longformer model)"),qqe.forEach(t),JAr=i(ne),j4=n(ne,"LI",{});var jqe=s(j4);lMe=n(jqe,"STRONG",{});var e$t=s(lMe);YAr=r(e$t,"mobilebert"),e$t.forEach(t),KAr=r(jqe," \u2014 "),sY=n(jqe,"A",{href:!0});var o$t=s(sY);ZAr=r(o$t,"TFMobileBertForSequenceClassification"),o$t.forEach(t),e6r=r(jqe," (MobileBERT model)"),jqe.forEach(t),o6r=i(ne),D4=n(ne,"LI",{});var Dqe=s(D4);iMe=n(Dqe,"STRONG",{});var r$t=s(iMe);r6r=r(r$t,"mpnet"),r$t.forEach(t),t6r=r(Dqe," \u2014 "),lY=n(Dqe,"A",{href:!0});var t$t=s(lY);a6r=r(t$t,"TFMPNetForSequenceClassification"),t$t.forEach(t),n6r=r(Dqe," (MPNet model)"),Dqe.forEach(t),s6r=i(ne),G4=n(ne,"LI",{});var Gqe=s(G4);dMe=n(Gqe,"STRONG",{});var a$t=s(dMe);l6r=r(a$t,"openai-gpt"),a$t.forEach(t),i6r=r(Gqe," \u2014 "),iY=n(Gqe,"A",{href:!0});var n$t=s(iY);d6r=r(n$t,"TFOpenAIGPTForSequenceClassification"),n$t.forEach(t),c6r=r(Gqe," (OpenAI GPT model)"),Gqe.forEach(t),f6r=i(ne),O4=n(ne,"LI",{});var Oqe=s(O4);cMe=n(Oqe,"STRONG",{});var s$t=s(cMe);m6r=r(s$t,"rembert"),s$t.forEach(t),g6r=r(Oqe," \u2014 "),dY=n(Oqe,"A",{href:!0});var l$t=s(dY);h6r=r(l$t,"TFRemBertForSequenceClassification"),l$t.forEach(t),p6r=r(Oqe," (RemBERT model)"),Oqe.forEach(t),_6r=i(ne),V4=n(ne,"LI",{});var Vqe=s(V4);fMe=n(Vqe,"STRONG",{});var i$t=s(fMe);u6r=r(i$t,"roberta"),i$t.forEach(t),b6r=r(Vqe," \u2014 "),cY=n(Vqe,"A",{href:!0});var d$t=s(cY);v6r=r(d$t,"TFRobertaForSequenceClassification"),d$t.forEach(t),F6r=r(Vqe," (RoBERTa model)"),Vqe.forEach(t),T6r=i(ne),X4=n(ne,"LI",{});var Xqe=s(X4);mMe=n(Xqe,"STRONG",{});var c$t=s(mMe);M6r=r(c$t,"roformer"),c$t.forEach(t),E6r=r(Xqe," \u2014 "),fY=n(Xqe,"A",{href:!0});var f$t=s(fY);C6r=r(f$t,"TFRoFormerForSequenceClassification"),f$t.forEach(t),w6r=r(Xqe," (RoFormer model)"),Xqe.forEach(t),A6r=i(ne),z4=n(ne,"LI",{});var zqe=s(z4);gMe=n(zqe,"STRONG",{});var m$t=s(gMe);L6r=r(m$t,"tapas"),m$t.forEach(t),y6r=r(zqe," \u2014 "),mY=n(zqe,"A",{href:!0});var g$t=s(mY);x6r=r(g$t,"TFTapasForSequenceClassification"),g$t.forEach(t),$6r=r(zqe," (TAPAS model)"),zqe.forEach(t),k6r=i(ne),Q4=n(ne,"LI",{});var Qqe=s(Q4);hMe=n(Qqe,"STRONG",{});var h$t=s(hMe);S6r=r(h$t,"transfo-xl"),h$t.forEach(t),R6r=r(Qqe," \u2014 "),gY=n(Qqe,"A",{href:!0});var p$t=s(gY);P6r=r(p$t,"TFTransfoXLForSequenceClassification"),p$t.forEach(t),B6r=r(Qqe," (Transformer-XL model)"),Qqe.forEach(t),I6r=i(ne),W4=n(ne,"LI",{});var Wqe=s(W4);pMe=n(Wqe,"STRONG",{});var _$t=s(pMe);N6r=r(_$t,"xlm"),_$t.forEach(t),q6r=r(Wqe," \u2014 "),hY=n(Wqe,"A",{href:!0});var u$t=s(hY);j6r=r(u$t,"TFXLMForSequenceClassification"),u$t.forEach(t),D6r=r(Wqe," (XLM model)"),Wqe.forEach(t),G6r=i(ne),H4=n(ne,"LI",{});var Hqe=s(H4);_Me=n(Hqe,"STRONG",{});var b$t=s(_Me);O6r=r(b$t,"xlm-roberta"),b$t.forEach(t),V6r=r(Hqe," \u2014 "),pY=n(Hqe,"A",{href:!0});var v$t=s(pY);X6r=r(v$t,"TFXLMRobertaForSequenceClassification"),v$t.forEach(t),z6r=r(Hqe," (XLM-RoBERTa model)"),Hqe.forEach(t),Q6r=i(ne),U4=n(ne,"LI",{});var Uqe=s(U4);uMe=n(Uqe,"STRONG",{});var F$t=s(uMe);W6r=r(F$t,"xlnet"),F$t.forEach(t),H6r=r(Uqe," \u2014 "),_Y=n(Uqe,"A",{href:!0});var T$t=s(_Y);U6r=r(T$t,"TFXLNetForSequenceClassification"),T$t.forEach(t),J6r=r(Uqe," (XLNet model)"),Uqe.forEach(t),ne.forEach(t),Y6r=i(Nl),T(J4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),LVe=i(f),Mc=n(f,"H2",{class:!0});var Bze=s(Mc);Y4=n(Bze,"A",{id:!0,class:!0,href:!0});var M$t=s(Y4);bMe=n(M$t,"SPAN",{});var E$t=s(bMe);T(ox.$$.fragment,E$t),E$t.forEach(t),M$t.forEach(t),K6r=i(Bze),vMe=n(Bze,"SPAN",{});var C$t=s(vMe);Z6r=r(C$t,"TFAutoModelForMultipleChoice"),C$t.forEach(t),Bze.forEach(t),yVe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(rx.$$.fragment,ql),eLr=i(ql),Ec=n(ql,"P",{});var Dre=s(Ec);oLr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uY=n(Dre,"A",{href:!0});var w$t=s(uY);rLr=r(w$t,"from_pretrained()"),w$t.forEach(t),tLr=r(Dre," class method or the "),bY=n(Dre,"A",{href:!0});var A$t=s(bY);aLr=r(A$t,"from_config()"),A$t.forEach(t),nLr=r(Dre,` class
method.`),Dre.forEach(t),sLr=i(ql),tx=n(ql,"P",{});var Ize=s(tx);lLr=r(Ize,"This class cannot be instantiated directly using "),FMe=n(Ize,"CODE",{});var L$t=s(FMe);iLr=r(L$t,"__init__()"),L$t.forEach(t),dLr=r(Ize," (throws an error)."),Ize.forEach(t),cLr=i(ql),Nt=n(ql,"DIV",{class:!0});var Q6=s(Nt);T(ax.$$.fragment,Q6),fLr=i(Q6),TMe=n(Q6,"P",{});var y$t=s(TMe);mLr=r(y$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),y$t.forEach(t),gLr=i(Q6),Cc=n(Q6,"P",{});var Gre=s(Cc);hLr=r(Gre,`Note:
Loading a model from its configuration file does `),MMe=n(Gre,"STRONG",{});var x$t=s(MMe);pLr=r(x$t,"not"),x$t.forEach(t),_Lr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(Gre,"A",{href:!0});var $$t=s(vY);uLr=r($$t,"from_pretrained()"),$$t.forEach(t),bLr=r(Gre," to load the model weights."),Gre.forEach(t),vLr=i(Q6),T(K4.$$.fragment,Q6),Q6.forEach(t),FLr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(nx.$$.fragment,jl),TLr=i(jl),EMe=n(jl,"P",{});var k$t=s(EMe);MLr=r(k$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),k$t.forEach(t),ELr=i(jl),gn=n(jl,"P",{});var W6=s(gn);CLr=r(W6,"The model class to instantiate is selected based on the "),CMe=n(W6,"CODE",{});var S$t=s(CMe);wLr=r(S$t,"model_type"),S$t.forEach(t),ALr=r(W6,` property of the config object (either
passed as an argument or loaded from `),wMe=n(W6,"CODE",{});var R$t=s(wMe);LLr=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),yLr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(W6,"CODE",{});var P$t=s(AMe);xLr=r(P$t,"pretrained_model_name_or_path"),P$t.forEach(t),$Lr=r(W6,":"),W6.forEach(t),kLr=i(jl),_e=n(jl,"UL",{});var ve=s(_e);Z4=n(ve,"LI",{});var Jqe=s(Z4);LMe=n(Jqe,"STRONG",{});var B$t=s(LMe);SLr=r(B$t,"albert"),B$t.forEach(t),RLr=r(Jqe," \u2014 "),FY=n(Jqe,"A",{href:!0});var I$t=s(FY);PLr=r(I$t,"TFAlbertForMultipleChoice"),I$t.forEach(t),BLr=r(Jqe," (ALBERT model)"),Jqe.forEach(t),ILr=i(ve),eC=n(ve,"LI",{});var Yqe=s(eC);yMe=n(Yqe,"STRONG",{});var N$t=s(yMe);NLr=r(N$t,"bert"),N$t.forEach(t),qLr=r(Yqe," \u2014 "),TY=n(Yqe,"A",{href:!0});var q$t=s(TY);jLr=r(q$t,"TFBertForMultipleChoice"),q$t.forEach(t),DLr=r(Yqe," (BERT model)"),Yqe.forEach(t),GLr=i(ve),oC=n(ve,"LI",{});var Kqe=s(oC);xMe=n(Kqe,"STRONG",{});var j$t=s(xMe);OLr=r(j$t,"camembert"),j$t.forEach(t),VLr=r(Kqe," \u2014 "),MY=n(Kqe,"A",{href:!0});var D$t=s(MY);XLr=r(D$t,"TFCamembertForMultipleChoice"),D$t.forEach(t),zLr=r(Kqe," (CamemBERT model)"),Kqe.forEach(t),QLr=i(ve),rC=n(ve,"LI",{});var Zqe=s(rC);$Me=n(Zqe,"STRONG",{});var G$t=s($Me);WLr=r(G$t,"convbert"),G$t.forEach(t),HLr=r(Zqe," \u2014 "),EY=n(Zqe,"A",{href:!0});var O$t=s(EY);ULr=r(O$t,"TFConvBertForMultipleChoice"),O$t.forEach(t),JLr=r(Zqe," (ConvBERT model)"),Zqe.forEach(t),YLr=i(ve),tC=n(ve,"LI",{});var eje=s(tC);kMe=n(eje,"STRONG",{});var V$t=s(kMe);KLr=r(V$t,"distilbert"),V$t.forEach(t),ZLr=r(eje," \u2014 "),CY=n(eje,"A",{href:!0});var X$t=s(CY);eyr=r(X$t,"TFDistilBertForMultipleChoice"),X$t.forEach(t),oyr=r(eje," (DistilBERT model)"),eje.forEach(t),ryr=i(ve),aC=n(ve,"LI",{});var oje=s(aC);SMe=n(oje,"STRONG",{});var z$t=s(SMe);tyr=r(z$t,"electra"),z$t.forEach(t),ayr=r(oje," \u2014 "),wY=n(oje,"A",{href:!0});var Q$t=s(wY);nyr=r(Q$t,"TFElectraForMultipleChoice"),Q$t.forEach(t),syr=r(oje," (ELECTRA model)"),oje.forEach(t),lyr=i(ve),nC=n(ve,"LI",{});var rje=s(nC);RMe=n(rje,"STRONG",{});var W$t=s(RMe);iyr=r(W$t,"flaubert"),W$t.forEach(t),dyr=r(rje," \u2014 "),AY=n(rje,"A",{href:!0});var H$t=s(AY);cyr=r(H$t,"TFFlaubertForMultipleChoice"),H$t.forEach(t),fyr=r(rje," (FlauBERT model)"),rje.forEach(t),myr=i(ve),sC=n(ve,"LI",{});var tje=s(sC);PMe=n(tje,"STRONG",{});var U$t=s(PMe);gyr=r(U$t,"funnel"),U$t.forEach(t),hyr=r(tje," \u2014 "),LY=n(tje,"A",{href:!0});var J$t=s(LY);pyr=r(J$t,"TFFunnelForMultipleChoice"),J$t.forEach(t),_yr=r(tje," (Funnel Transformer model)"),tje.forEach(t),uyr=i(ve),lC=n(ve,"LI",{});var aje=s(lC);BMe=n(aje,"STRONG",{});var Y$t=s(BMe);byr=r(Y$t,"longformer"),Y$t.forEach(t),vyr=r(aje," \u2014 "),yY=n(aje,"A",{href:!0});var K$t=s(yY);Fyr=r(K$t,"TFLongformerForMultipleChoice"),K$t.forEach(t),Tyr=r(aje," (Longformer model)"),aje.forEach(t),Myr=i(ve),iC=n(ve,"LI",{});var nje=s(iC);IMe=n(nje,"STRONG",{});var Z$t=s(IMe);Eyr=r(Z$t,"mobilebert"),Z$t.forEach(t),Cyr=r(nje," \u2014 "),xY=n(nje,"A",{href:!0});var ekt=s(xY);wyr=r(ekt,"TFMobileBertForMultipleChoice"),ekt.forEach(t),Ayr=r(nje," (MobileBERT model)"),nje.forEach(t),Lyr=i(ve),dC=n(ve,"LI",{});var sje=s(dC);NMe=n(sje,"STRONG",{});var okt=s(NMe);yyr=r(okt,"mpnet"),okt.forEach(t),xyr=r(sje," \u2014 "),$Y=n(sje,"A",{href:!0});var rkt=s($Y);$yr=r(rkt,"TFMPNetForMultipleChoice"),rkt.forEach(t),kyr=r(sje," (MPNet model)"),sje.forEach(t),Syr=i(ve),cC=n(ve,"LI",{});var lje=s(cC);qMe=n(lje,"STRONG",{});var tkt=s(qMe);Ryr=r(tkt,"rembert"),tkt.forEach(t),Pyr=r(lje," \u2014 "),kY=n(lje,"A",{href:!0});var akt=s(kY);Byr=r(akt,"TFRemBertForMultipleChoice"),akt.forEach(t),Iyr=r(lje," (RemBERT model)"),lje.forEach(t),Nyr=i(ve),fC=n(ve,"LI",{});var ije=s(fC);jMe=n(ije,"STRONG",{});var nkt=s(jMe);qyr=r(nkt,"roberta"),nkt.forEach(t),jyr=r(ije," \u2014 "),SY=n(ije,"A",{href:!0});var skt=s(SY);Dyr=r(skt,"TFRobertaForMultipleChoice"),skt.forEach(t),Gyr=r(ije," (RoBERTa model)"),ije.forEach(t),Oyr=i(ve),mC=n(ve,"LI",{});var dje=s(mC);DMe=n(dje,"STRONG",{});var lkt=s(DMe);Vyr=r(lkt,"roformer"),lkt.forEach(t),Xyr=r(dje," \u2014 "),RY=n(dje,"A",{href:!0});var ikt=s(RY);zyr=r(ikt,"TFRoFormerForMultipleChoice"),ikt.forEach(t),Qyr=r(dje," (RoFormer model)"),dje.forEach(t),Wyr=i(ve),gC=n(ve,"LI",{});var cje=s(gC);GMe=n(cje,"STRONG",{});var dkt=s(GMe);Hyr=r(dkt,"xlm"),dkt.forEach(t),Uyr=r(cje," \u2014 "),PY=n(cje,"A",{href:!0});var ckt=s(PY);Jyr=r(ckt,"TFXLMForMultipleChoice"),ckt.forEach(t),Yyr=r(cje," (XLM model)"),cje.forEach(t),Kyr=i(ve),hC=n(ve,"LI",{});var fje=s(hC);OMe=n(fje,"STRONG",{});var fkt=s(OMe);Zyr=r(fkt,"xlm-roberta"),fkt.forEach(t),e8r=r(fje," \u2014 "),BY=n(fje,"A",{href:!0});var mkt=s(BY);o8r=r(mkt,"TFXLMRobertaForMultipleChoice"),mkt.forEach(t),r8r=r(fje," (XLM-RoBERTa model)"),fje.forEach(t),t8r=i(ve),pC=n(ve,"LI",{});var mje=s(pC);VMe=n(mje,"STRONG",{});var gkt=s(VMe);a8r=r(gkt,"xlnet"),gkt.forEach(t),n8r=r(mje," \u2014 "),IY=n(mje,"A",{href:!0});var hkt=s(IY);s8r=r(hkt,"TFXLNetForMultipleChoice"),hkt.forEach(t),l8r=r(mje," (XLNet model)"),mje.forEach(t),ve.forEach(t),i8r=i(jl),T(_C.$$.fragment,jl),jl.forEach(t),ql.forEach(t),xVe=i(f),wc=n(f,"H2",{class:!0});var Nze=s(wc);uC=n(Nze,"A",{id:!0,class:!0,href:!0});var pkt=s(uC);XMe=n(pkt,"SPAN",{});var _kt=s(XMe);T(sx.$$.fragment,_kt),_kt.forEach(t),pkt.forEach(t),d8r=i(Nze),zMe=n(Nze,"SPAN",{});var ukt=s(zMe);c8r=r(ukt,"TFAutoModelForNextSentencePrediction"),ukt.forEach(t),Nze.forEach(t),$Ve=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(lx.$$.fragment,Dl),f8r=i(Dl),Ac=n(Dl,"P",{});var Ore=s(Ac);m8r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NY=n(Ore,"A",{href:!0});var bkt=s(NY);g8r=r(bkt,"from_pretrained()"),bkt.forEach(t),h8r=r(Ore," class method or the "),qY=n(Ore,"A",{href:!0});var vkt=s(qY);p8r=r(vkt,"from_config()"),vkt.forEach(t),_8r=r(Ore,` class
method.`),Ore.forEach(t),u8r=i(Dl),ix=n(Dl,"P",{});var qze=s(ix);b8r=r(qze,"This class cannot be instantiated directly using "),QMe=n(qze,"CODE",{});var Fkt=s(QMe);v8r=r(Fkt,"__init__()"),Fkt.forEach(t),F8r=r(qze," (throws an error)."),qze.forEach(t),T8r=i(Dl),qt=n(Dl,"DIV",{class:!0});var H6=s(qt);T(dx.$$.fragment,H6),M8r=i(H6),WMe=n(H6,"P",{});var Tkt=s(WMe);E8r=r(Tkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tkt.forEach(t),C8r=i(H6),Lc=n(H6,"P",{});var Vre=s(Lc);w8r=r(Vre,`Note:
Loading a model from its configuration file does `),HMe=n(Vre,"STRONG",{});var Mkt=s(HMe);A8r=r(Mkt,"not"),Mkt.forEach(t),L8r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(Vre,"A",{href:!0});var Ekt=s(jY);y8r=r(Ekt,"from_pretrained()"),Ekt.forEach(t),x8r=r(Vre," to load the model weights."),Vre.forEach(t),$8r=i(H6),T(bC.$$.fragment,H6),H6.forEach(t),k8r=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(cx.$$.fragment,Gl),S8r=i(Gl),UMe=n(Gl,"P",{});var Ckt=s(UMe);R8r=r(Ckt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ckt.forEach(t),P8r=i(Gl),hn=n(Gl,"P",{});var U6=s(hn);B8r=r(U6,"The model class to instantiate is selected based on the "),JMe=n(U6,"CODE",{});var wkt=s(JMe);I8r=r(wkt,"model_type"),wkt.forEach(t),N8r=r(U6,` property of the config object (either
passed as an argument or loaded from `),YMe=n(U6,"CODE",{});var Akt=s(YMe);q8r=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),j8r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(U6,"CODE",{});var Lkt=s(KMe);D8r=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),G8r=r(U6,":"),U6.forEach(t),O8r=i(Gl),fx=n(Gl,"UL",{});var jze=s(fx);vC=n(jze,"LI",{});var gje=s(vC);ZMe=n(gje,"STRONG",{});var ykt=s(ZMe);V8r=r(ykt,"bert"),ykt.forEach(t),X8r=r(gje," \u2014 "),DY=n(gje,"A",{href:!0});var xkt=s(DY);z8r=r(xkt,"TFBertForNextSentencePrediction"),xkt.forEach(t),Q8r=r(gje," (BERT model)"),gje.forEach(t),W8r=i(jze),FC=n(jze,"LI",{});var hje=s(FC);eEe=n(hje,"STRONG",{});var $kt=s(eEe);H8r=r($kt,"mobilebert"),$kt.forEach(t),U8r=r(hje," \u2014 "),GY=n(hje,"A",{href:!0});var kkt=s(GY);J8r=r(kkt,"TFMobileBertForNextSentencePrediction"),kkt.forEach(t),Y8r=r(hje," (MobileBERT model)"),hje.forEach(t),jze.forEach(t),K8r=i(Gl),T(TC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),kVe=i(f),yc=n(f,"H2",{class:!0});var Dze=s(yc);MC=n(Dze,"A",{id:!0,class:!0,href:!0});var Skt=s(MC);oEe=n(Skt,"SPAN",{});var Rkt=s(oEe);T(mx.$$.fragment,Rkt),Rkt.forEach(t),Skt.forEach(t),Z8r=i(Dze),rEe=n(Dze,"SPAN",{});var Pkt=s(rEe);e9r=r(Pkt,"TFAutoModelForTableQuestionAnswering"),Pkt.forEach(t),Dze.forEach(t),SVe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(gx.$$.fragment,Ol),o9r=i(Ol),xc=n(Ol,"P",{});var Xre=s(xc);r9r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OY=n(Xre,"A",{href:!0});var Bkt=s(OY);t9r=r(Bkt,"from_pretrained()"),Bkt.forEach(t),a9r=r(Xre," class method or the "),VY=n(Xre,"A",{href:!0});var Ikt=s(VY);n9r=r(Ikt,"from_config()"),Ikt.forEach(t),s9r=r(Xre,` class
method.`),Xre.forEach(t),l9r=i(Ol),hx=n(Ol,"P",{});var Gze=s(hx);i9r=r(Gze,"This class cannot be instantiated directly using "),tEe=n(Gze,"CODE",{});var Nkt=s(tEe);d9r=r(Nkt,"__init__()"),Nkt.forEach(t),c9r=r(Gze," (throws an error)."),Gze.forEach(t),f9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var J6=s(jt);T(px.$$.fragment,J6),m9r=i(J6),aEe=n(J6,"P",{});var qkt=s(aEe);g9r=r(qkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qkt.forEach(t),h9r=i(J6),$c=n(J6,"P",{});var zre=s($c);p9r=r(zre,`Note:
Loading a model from its configuration file does `),nEe=n(zre,"STRONG",{});var jkt=s(nEe);_9r=r(jkt,"not"),jkt.forEach(t),u9r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(zre,"A",{href:!0});var Dkt=s(XY);b9r=r(Dkt,"from_pretrained()"),Dkt.forEach(t),v9r=r(zre," to load the model weights."),zre.forEach(t),F9r=i(J6),T(EC.$$.fragment,J6),J6.forEach(t),T9r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(_x.$$.fragment,Vl),M9r=i(Vl),sEe=n(Vl,"P",{});var Gkt=s(sEe);E9r=r(Gkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Gkt.forEach(t),C9r=i(Vl),pn=n(Vl,"P",{});var Y6=s(pn);w9r=r(Y6,"The model class to instantiate is selected based on the "),lEe=n(Y6,"CODE",{});var Okt=s(lEe);A9r=r(Okt,"model_type"),Okt.forEach(t),L9r=r(Y6,` property of the config object (either
passed as an argument or loaded from `),iEe=n(Y6,"CODE",{});var Vkt=s(iEe);y9r=r(Vkt,"pretrained_model_name_or_path"),Vkt.forEach(t),x9r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(Y6,"CODE",{});var Xkt=s(dEe);$9r=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),k9r=r(Y6,":"),Y6.forEach(t),S9r=i(Vl),cEe=n(Vl,"UL",{});var zkt=s(cEe);CC=n(zkt,"LI",{});var pje=s(CC);fEe=n(pje,"STRONG",{});var Qkt=s(fEe);R9r=r(Qkt,"tapas"),Qkt.forEach(t),P9r=r(pje," \u2014 "),zY=n(pje,"A",{href:!0});var Wkt=s(zY);B9r=r(Wkt,"TFTapasForQuestionAnswering"),Wkt.forEach(t),I9r=r(pje," (TAPAS model)"),pje.forEach(t),zkt.forEach(t),N9r=i(Vl),T(wC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),RVe=i(f),kc=n(f,"H2",{class:!0});var Oze=s(kc);AC=n(Oze,"A",{id:!0,class:!0,href:!0});var Hkt=s(AC);mEe=n(Hkt,"SPAN",{});var Ukt=s(mEe);T(ux.$$.fragment,Ukt),Ukt.forEach(t),Hkt.forEach(t),q9r=i(Oze),gEe=n(Oze,"SPAN",{});var Jkt=s(gEe);j9r=r(Jkt,"TFAutoModelForTokenClassification"),Jkt.forEach(t),Oze.forEach(t),PVe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(bx.$$.fragment,Xl),D9r=i(Xl),Sc=n(Xl,"P",{});var Qre=s(Sc);G9r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=n(Qre,"A",{href:!0});var Ykt=s(QY);O9r=r(Ykt,"from_pretrained()"),Ykt.forEach(t),V9r=r(Qre," class method or the "),WY=n(Qre,"A",{href:!0});var Kkt=s(WY);X9r=r(Kkt,"from_config()"),Kkt.forEach(t),z9r=r(Qre,` class
method.`),Qre.forEach(t),Q9r=i(Xl),vx=n(Xl,"P",{});var Vze=s(vx);W9r=r(Vze,"This class cannot be instantiated directly using "),hEe=n(Vze,"CODE",{});var Zkt=s(hEe);H9r=r(Zkt,"__init__()"),Zkt.forEach(t),U9r=r(Vze," (throws an error)."),Vze.forEach(t),J9r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var K6=s(Dt);T(Fx.$$.fragment,K6),Y9r=i(K6),pEe=n(K6,"P",{});var eSt=s(pEe);K9r=r(eSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eSt.forEach(t),Z9r=i(K6),Rc=n(K6,"P",{});var Wre=s(Rc);exr=r(Wre,`Note:
Loading a model from its configuration file does `),_Ee=n(Wre,"STRONG",{});var oSt=s(_Ee);oxr=r(oSt,"not"),oSt.forEach(t),rxr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Wre,"A",{href:!0});var rSt=s(HY);txr=r(rSt,"from_pretrained()"),rSt.forEach(t),axr=r(Wre," to load the model weights."),Wre.forEach(t),nxr=i(K6),T(LC.$$.fragment,K6),K6.forEach(t),sxr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Tx.$$.fragment,zl),lxr=i(zl),uEe=n(zl,"P",{});var tSt=s(uEe);ixr=r(tSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tSt.forEach(t),dxr=i(zl),_n=n(zl,"P",{});var Z6=s(_n);cxr=r(Z6,"The model class to instantiate is selected based on the "),bEe=n(Z6,"CODE",{});var aSt=s(bEe);fxr=r(aSt,"model_type"),aSt.forEach(t),mxr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),vEe=n(Z6,"CODE",{});var nSt=s(vEe);gxr=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),hxr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(Z6,"CODE",{});var sSt=s(FEe);pxr=r(sSt,"pretrained_model_name_or_path"),sSt.forEach(t),_xr=r(Z6,":"),Z6.forEach(t),uxr=i(zl),de=n(zl,"UL",{});var me=s(de);yC=n(me,"LI",{});var _je=s(yC);TEe=n(_je,"STRONG",{});var lSt=s(TEe);bxr=r(lSt,"albert"),lSt.forEach(t),vxr=r(_je," \u2014 "),UY=n(_je,"A",{href:!0});var iSt=s(UY);Fxr=r(iSt,"TFAlbertForTokenClassification"),iSt.forEach(t),Txr=r(_je," (ALBERT model)"),_je.forEach(t),Mxr=i(me),xC=n(me,"LI",{});var uje=s(xC);MEe=n(uje,"STRONG",{});var dSt=s(MEe);Exr=r(dSt,"bert"),dSt.forEach(t),Cxr=r(uje," \u2014 "),JY=n(uje,"A",{href:!0});var cSt=s(JY);wxr=r(cSt,"TFBertForTokenClassification"),cSt.forEach(t),Axr=r(uje," (BERT model)"),uje.forEach(t),Lxr=i(me),$C=n(me,"LI",{});var bje=s($C);EEe=n(bje,"STRONG",{});var fSt=s(EEe);yxr=r(fSt,"camembert"),fSt.forEach(t),xxr=r(bje," \u2014 "),YY=n(bje,"A",{href:!0});var mSt=s(YY);$xr=r(mSt,"TFCamembertForTokenClassification"),mSt.forEach(t),kxr=r(bje," (CamemBERT model)"),bje.forEach(t),Sxr=i(me),kC=n(me,"LI",{});var vje=s(kC);CEe=n(vje,"STRONG",{});var gSt=s(CEe);Rxr=r(gSt,"convbert"),gSt.forEach(t),Pxr=r(vje," \u2014 "),KY=n(vje,"A",{href:!0});var hSt=s(KY);Bxr=r(hSt,"TFConvBertForTokenClassification"),hSt.forEach(t),Ixr=r(vje," (ConvBERT model)"),vje.forEach(t),Nxr=i(me),SC=n(me,"LI",{});var Fje=s(SC);wEe=n(Fje,"STRONG",{});var pSt=s(wEe);qxr=r(pSt,"deberta"),pSt.forEach(t),jxr=r(Fje," \u2014 "),ZY=n(Fje,"A",{href:!0});var _St=s(ZY);Dxr=r(_St,"TFDebertaForTokenClassification"),_St.forEach(t),Gxr=r(Fje," (DeBERTa model)"),Fje.forEach(t),Oxr=i(me),RC=n(me,"LI",{});var Tje=s(RC);AEe=n(Tje,"STRONG",{});var uSt=s(AEe);Vxr=r(uSt,"deberta-v2"),uSt.forEach(t),Xxr=r(Tje," \u2014 "),eK=n(Tje,"A",{href:!0});var bSt=s(eK);zxr=r(bSt,"TFDebertaV2ForTokenClassification"),bSt.forEach(t),Qxr=r(Tje," (DeBERTa-v2 model)"),Tje.forEach(t),Wxr=i(me),PC=n(me,"LI",{});var Mje=s(PC);LEe=n(Mje,"STRONG",{});var vSt=s(LEe);Hxr=r(vSt,"distilbert"),vSt.forEach(t),Uxr=r(Mje," \u2014 "),oK=n(Mje,"A",{href:!0});var FSt=s(oK);Jxr=r(FSt,"TFDistilBertForTokenClassification"),FSt.forEach(t),Yxr=r(Mje," (DistilBERT model)"),Mje.forEach(t),Kxr=i(me),BC=n(me,"LI",{});var Eje=s(BC);yEe=n(Eje,"STRONG",{});var TSt=s(yEe);Zxr=r(TSt,"electra"),TSt.forEach(t),e$r=r(Eje," \u2014 "),rK=n(Eje,"A",{href:!0});var MSt=s(rK);o$r=r(MSt,"TFElectraForTokenClassification"),MSt.forEach(t),r$r=r(Eje," (ELECTRA model)"),Eje.forEach(t),t$r=i(me),IC=n(me,"LI",{});var Cje=s(IC);xEe=n(Cje,"STRONG",{});var ESt=s(xEe);a$r=r(ESt,"flaubert"),ESt.forEach(t),n$r=r(Cje," \u2014 "),tK=n(Cje,"A",{href:!0});var CSt=s(tK);s$r=r(CSt,"TFFlaubertForTokenClassification"),CSt.forEach(t),l$r=r(Cje," (FlauBERT model)"),Cje.forEach(t),i$r=i(me),NC=n(me,"LI",{});var wje=s(NC);$Ee=n(wje,"STRONG",{});var wSt=s($Ee);d$r=r(wSt,"funnel"),wSt.forEach(t),c$r=r(wje," \u2014 "),aK=n(wje,"A",{href:!0});var ASt=s(aK);f$r=r(ASt,"TFFunnelForTokenClassification"),ASt.forEach(t),m$r=r(wje," (Funnel Transformer model)"),wje.forEach(t),g$r=i(me),qC=n(me,"LI",{});var Aje=s(qC);kEe=n(Aje,"STRONG",{});var LSt=s(kEe);h$r=r(LSt,"layoutlm"),LSt.forEach(t),p$r=r(Aje," \u2014 "),nK=n(Aje,"A",{href:!0});var ySt=s(nK);_$r=r(ySt,"TFLayoutLMForTokenClassification"),ySt.forEach(t),u$r=r(Aje," (LayoutLM model)"),Aje.forEach(t),b$r=i(me),jC=n(me,"LI",{});var Lje=s(jC);SEe=n(Lje,"STRONG",{});var xSt=s(SEe);v$r=r(xSt,"longformer"),xSt.forEach(t),F$r=r(Lje," \u2014 "),sK=n(Lje,"A",{href:!0});var $St=s(sK);T$r=r($St,"TFLongformerForTokenClassification"),$St.forEach(t),M$r=r(Lje," (Longformer model)"),Lje.forEach(t),E$r=i(me),DC=n(me,"LI",{});var yje=s(DC);REe=n(yje,"STRONG",{});var kSt=s(REe);C$r=r(kSt,"mobilebert"),kSt.forEach(t),w$r=r(yje," \u2014 "),lK=n(yje,"A",{href:!0});var SSt=s(lK);A$r=r(SSt,"TFMobileBertForTokenClassification"),SSt.forEach(t),L$r=r(yje," (MobileBERT model)"),yje.forEach(t),y$r=i(me),GC=n(me,"LI",{});var xje=s(GC);PEe=n(xje,"STRONG",{});var RSt=s(PEe);x$r=r(RSt,"mpnet"),RSt.forEach(t),$$r=r(xje," \u2014 "),iK=n(xje,"A",{href:!0});var PSt=s(iK);k$r=r(PSt,"TFMPNetForTokenClassification"),PSt.forEach(t),S$r=r(xje," (MPNet model)"),xje.forEach(t),R$r=i(me),OC=n(me,"LI",{});var $je=s(OC);BEe=n($je,"STRONG",{});var BSt=s(BEe);P$r=r(BSt,"rembert"),BSt.forEach(t),B$r=r($je," \u2014 "),dK=n($je,"A",{href:!0});var ISt=s(dK);I$r=r(ISt,"TFRemBertForTokenClassification"),ISt.forEach(t),N$r=r($je," (RemBERT model)"),$je.forEach(t),q$r=i(me),VC=n(me,"LI",{});var kje=s(VC);IEe=n(kje,"STRONG",{});var NSt=s(IEe);j$r=r(NSt,"roberta"),NSt.forEach(t),D$r=r(kje," \u2014 "),cK=n(kje,"A",{href:!0});var qSt=s(cK);G$r=r(qSt,"TFRobertaForTokenClassification"),qSt.forEach(t),O$r=r(kje," (RoBERTa model)"),kje.forEach(t),V$r=i(me),XC=n(me,"LI",{});var Sje=s(XC);NEe=n(Sje,"STRONG",{});var jSt=s(NEe);X$r=r(jSt,"roformer"),jSt.forEach(t),z$r=r(Sje," \u2014 "),fK=n(Sje,"A",{href:!0});var DSt=s(fK);Q$r=r(DSt,"TFRoFormerForTokenClassification"),DSt.forEach(t),W$r=r(Sje," (RoFormer model)"),Sje.forEach(t),H$r=i(me),zC=n(me,"LI",{});var Rje=s(zC);qEe=n(Rje,"STRONG",{});var GSt=s(qEe);U$r=r(GSt,"xlm"),GSt.forEach(t),J$r=r(Rje," \u2014 "),mK=n(Rje,"A",{href:!0});var OSt=s(mK);Y$r=r(OSt,"TFXLMForTokenClassification"),OSt.forEach(t),K$r=r(Rje," (XLM model)"),Rje.forEach(t),Z$r=i(me),QC=n(me,"LI",{});var Pje=s(QC);jEe=n(Pje,"STRONG",{});var VSt=s(jEe);ekr=r(VSt,"xlm-roberta"),VSt.forEach(t),okr=r(Pje," \u2014 "),gK=n(Pje,"A",{href:!0});var XSt=s(gK);rkr=r(XSt,"TFXLMRobertaForTokenClassification"),XSt.forEach(t),tkr=r(Pje," (XLM-RoBERTa model)"),Pje.forEach(t),akr=i(me),WC=n(me,"LI",{});var Bje=s(WC);DEe=n(Bje,"STRONG",{});var zSt=s(DEe);nkr=r(zSt,"xlnet"),zSt.forEach(t),skr=r(Bje," \u2014 "),hK=n(Bje,"A",{href:!0});var QSt=s(hK);lkr=r(QSt,"TFXLNetForTokenClassification"),QSt.forEach(t),ikr=r(Bje," (XLNet model)"),Bje.forEach(t),me.forEach(t),dkr=i(zl),T(HC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),BVe=i(f),Pc=n(f,"H2",{class:!0});var Xze=s(Pc);UC=n(Xze,"A",{id:!0,class:!0,href:!0});var WSt=s(UC);GEe=n(WSt,"SPAN",{});var HSt=s(GEe);T(Mx.$$.fragment,HSt),HSt.forEach(t),WSt.forEach(t),ckr=i(Xze),OEe=n(Xze,"SPAN",{});var USt=s(OEe);fkr=r(USt,"TFAutoModelForQuestionAnswering"),USt.forEach(t),Xze.forEach(t),IVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Ex.$$.fragment,Ql),mkr=i(Ql),Bc=n(Ql,"P",{});var Hre=s(Bc);gkr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pK=n(Hre,"A",{href:!0});var JSt=s(pK);hkr=r(JSt,"from_pretrained()"),JSt.forEach(t),pkr=r(Hre," class method or the "),_K=n(Hre,"A",{href:!0});var YSt=s(_K);_kr=r(YSt,"from_config()"),YSt.forEach(t),ukr=r(Hre,` class
method.`),Hre.forEach(t),bkr=i(Ql),Cx=n(Ql,"P",{});var zze=s(Cx);vkr=r(zze,"This class cannot be instantiated directly using "),VEe=n(zze,"CODE",{});var KSt=s(VEe);Fkr=r(KSt,"__init__()"),KSt.forEach(t),Tkr=r(zze," (throws an error)."),zze.forEach(t),Mkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var eL=s(Gt);T(wx.$$.fragment,eL),Ekr=i(eL),XEe=n(eL,"P",{});var ZSt=s(XEe);Ckr=r(ZSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZSt.forEach(t),wkr=i(eL),Ic=n(eL,"P",{});var Ure=s(Ic);Akr=r(Ure,`Note:
Loading a model from its configuration file does `),zEe=n(Ure,"STRONG",{});var eRt=s(zEe);Lkr=r(eRt,"not"),eRt.forEach(t),ykr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Ure,"A",{href:!0});var oRt=s(uK);xkr=r(oRt,"from_pretrained()"),oRt.forEach(t),$kr=r(Ure," to load the model weights."),Ure.forEach(t),kkr=i(eL),T(JC.$$.fragment,eL),eL.forEach(t),Skr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(Ax.$$.fragment,Wl),Rkr=i(Wl),QEe=n(Wl,"P",{});var rRt=s(QEe);Pkr=r(rRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rRt.forEach(t),Bkr=i(Wl),un=n(Wl,"P",{});var oL=s(un);Ikr=r(oL,"The model class to instantiate is selected based on the "),WEe=n(oL,"CODE",{});var tRt=s(WEe);Nkr=r(tRt,"model_type"),tRt.forEach(t),qkr=r(oL,` property of the config object (either
passed as an argument or loaded from `),HEe=n(oL,"CODE",{});var aRt=s(HEe);jkr=r(aRt,"pretrained_model_name_or_path"),aRt.forEach(t),Dkr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(oL,"CODE",{});var nRt=s(UEe);Gkr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),Okr=r(oL,":"),oL.forEach(t),Vkr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);YC=n(ge,"LI",{});var Ije=s(YC);JEe=n(Ije,"STRONG",{});var sRt=s(JEe);Xkr=r(sRt,"albert"),sRt.forEach(t),zkr=r(Ije," \u2014 "),bK=n(Ije,"A",{href:!0});var lRt=s(bK);Qkr=r(lRt,"TFAlbertForQuestionAnswering"),lRt.forEach(t),Wkr=r(Ije," (ALBERT model)"),Ije.forEach(t),Hkr=i(ge),KC=n(ge,"LI",{});var Nje=s(KC);YEe=n(Nje,"STRONG",{});var iRt=s(YEe);Ukr=r(iRt,"bert"),iRt.forEach(t),Jkr=r(Nje," \u2014 "),vK=n(Nje,"A",{href:!0});var dRt=s(vK);Ykr=r(dRt,"TFBertForQuestionAnswering"),dRt.forEach(t),Kkr=r(Nje," (BERT model)"),Nje.forEach(t),Zkr=i(ge),ZC=n(ge,"LI",{});var qje=s(ZC);KEe=n(qje,"STRONG",{});var cRt=s(KEe);eSr=r(cRt,"camembert"),cRt.forEach(t),oSr=r(qje," \u2014 "),FK=n(qje,"A",{href:!0});var fRt=s(FK);rSr=r(fRt,"TFCamembertForQuestionAnswering"),fRt.forEach(t),tSr=r(qje," (CamemBERT model)"),qje.forEach(t),aSr=i(ge),e5=n(ge,"LI",{});var jje=s(e5);ZEe=n(jje,"STRONG",{});var mRt=s(ZEe);nSr=r(mRt,"convbert"),mRt.forEach(t),sSr=r(jje," \u2014 "),TK=n(jje,"A",{href:!0});var gRt=s(TK);lSr=r(gRt,"TFConvBertForQuestionAnswering"),gRt.forEach(t),iSr=r(jje," (ConvBERT model)"),jje.forEach(t),dSr=i(ge),o5=n(ge,"LI",{});var Dje=s(o5);e4e=n(Dje,"STRONG",{});var hRt=s(e4e);cSr=r(hRt,"deberta"),hRt.forEach(t),fSr=r(Dje," \u2014 "),MK=n(Dje,"A",{href:!0});var pRt=s(MK);mSr=r(pRt,"TFDebertaForQuestionAnswering"),pRt.forEach(t),gSr=r(Dje," (DeBERTa model)"),Dje.forEach(t),hSr=i(ge),r5=n(ge,"LI",{});var Gje=s(r5);o4e=n(Gje,"STRONG",{});var _Rt=s(o4e);pSr=r(_Rt,"deberta-v2"),_Rt.forEach(t),_Sr=r(Gje," \u2014 "),EK=n(Gje,"A",{href:!0});var uRt=s(EK);uSr=r(uRt,"TFDebertaV2ForQuestionAnswering"),uRt.forEach(t),bSr=r(Gje," (DeBERTa-v2 model)"),Gje.forEach(t),vSr=i(ge),t5=n(ge,"LI",{});var Oje=s(t5);r4e=n(Oje,"STRONG",{});var bRt=s(r4e);FSr=r(bRt,"distilbert"),bRt.forEach(t),TSr=r(Oje," \u2014 "),CK=n(Oje,"A",{href:!0});var vRt=s(CK);MSr=r(vRt,"TFDistilBertForQuestionAnswering"),vRt.forEach(t),ESr=r(Oje," (DistilBERT model)"),Oje.forEach(t),CSr=i(ge),a5=n(ge,"LI",{});var Vje=s(a5);t4e=n(Vje,"STRONG",{});var FRt=s(t4e);wSr=r(FRt,"electra"),FRt.forEach(t),ASr=r(Vje," \u2014 "),wK=n(Vje,"A",{href:!0});var TRt=s(wK);LSr=r(TRt,"TFElectraForQuestionAnswering"),TRt.forEach(t),ySr=r(Vje," (ELECTRA model)"),Vje.forEach(t),xSr=i(ge),n5=n(ge,"LI",{});var Xje=s(n5);a4e=n(Xje,"STRONG",{});var MRt=s(a4e);$Sr=r(MRt,"flaubert"),MRt.forEach(t),kSr=r(Xje," \u2014 "),AK=n(Xje,"A",{href:!0});var ERt=s(AK);SSr=r(ERt,"TFFlaubertForQuestionAnsweringSimple"),ERt.forEach(t),RSr=r(Xje," (FlauBERT model)"),Xje.forEach(t),PSr=i(ge),s5=n(ge,"LI",{});var zje=s(s5);n4e=n(zje,"STRONG",{});var CRt=s(n4e);BSr=r(CRt,"funnel"),CRt.forEach(t),ISr=r(zje," \u2014 "),LK=n(zje,"A",{href:!0});var wRt=s(LK);NSr=r(wRt,"TFFunnelForQuestionAnswering"),wRt.forEach(t),qSr=r(zje," (Funnel Transformer model)"),zje.forEach(t),jSr=i(ge),l5=n(ge,"LI",{});var Qje=s(l5);s4e=n(Qje,"STRONG",{});var ARt=s(s4e);DSr=r(ARt,"gptj"),ARt.forEach(t),GSr=r(Qje," \u2014 "),yK=n(Qje,"A",{href:!0});var LRt=s(yK);OSr=r(LRt,"TFGPTJForQuestionAnswering"),LRt.forEach(t),VSr=r(Qje," (GPT-J model)"),Qje.forEach(t),XSr=i(ge),i5=n(ge,"LI",{});var Wje=s(i5);l4e=n(Wje,"STRONG",{});var yRt=s(l4e);zSr=r(yRt,"longformer"),yRt.forEach(t),QSr=r(Wje," \u2014 "),xK=n(Wje,"A",{href:!0});var xRt=s(xK);WSr=r(xRt,"TFLongformerForQuestionAnswering"),xRt.forEach(t),HSr=r(Wje," (Longformer model)"),Wje.forEach(t),USr=i(ge),d5=n(ge,"LI",{});var Hje=s(d5);i4e=n(Hje,"STRONG",{});var $Rt=s(i4e);JSr=r($Rt,"mobilebert"),$Rt.forEach(t),YSr=r(Hje," \u2014 "),$K=n(Hje,"A",{href:!0});var kRt=s($K);KSr=r(kRt,"TFMobileBertForQuestionAnswering"),kRt.forEach(t),ZSr=r(Hje," (MobileBERT model)"),Hje.forEach(t),eRr=i(ge),c5=n(ge,"LI",{});var Uje=s(c5);d4e=n(Uje,"STRONG",{});var SRt=s(d4e);oRr=r(SRt,"mpnet"),SRt.forEach(t),rRr=r(Uje," \u2014 "),kK=n(Uje,"A",{href:!0});var RRt=s(kK);tRr=r(RRt,"TFMPNetForQuestionAnswering"),RRt.forEach(t),aRr=r(Uje," (MPNet model)"),Uje.forEach(t),nRr=i(ge),f5=n(ge,"LI",{});var Jje=s(f5);c4e=n(Jje,"STRONG",{});var PRt=s(c4e);sRr=r(PRt,"rembert"),PRt.forEach(t),lRr=r(Jje," \u2014 "),SK=n(Jje,"A",{href:!0});var BRt=s(SK);iRr=r(BRt,"TFRemBertForQuestionAnswering"),BRt.forEach(t),dRr=r(Jje," (RemBERT model)"),Jje.forEach(t),cRr=i(ge),m5=n(ge,"LI",{});var Yje=s(m5);f4e=n(Yje,"STRONG",{});var IRt=s(f4e);fRr=r(IRt,"roberta"),IRt.forEach(t),mRr=r(Yje," \u2014 "),RK=n(Yje,"A",{href:!0});var NRt=s(RK);gRr=r(NRt,"TFRobertaForQuestionAnswering"),NRt.forEach(t),hRr=r(Yje," (RoBERTa model)"),Yje.forEach(t),pRr=i(ge),g5=n(ge,"LI",{});var Kje=s(g5);m4e=n(Kje,"STRONG",{});var qRt=s(m4e);_Rr=r(qRt,"roformer"),qRt.forEach(t),uRr=r(Kje," \u2014 "),PK=n(Kje,"A",{href:!0});var jRt=s(PK);bRr=r(jRt,"TFRoFormerForQuestionAnswering"),jRt.forEach(t),vRr=r(Kje," (RoFormer model)"),Kje.forEach(t),FRr=i(ge),h5=n(ge,"LI",{});var Zje=s(h5);g4e=n(Zje,"STRONG",{});var DRt=s(g4e);TRr=r(DRt,"xlm"),DRt.forEach(t),MRr=r(Zje," \u2014 "),BK=n(Zje,"A",{href:!0});var GRt=s(BK);ERr=r(GRt,"TFXLMForQuestionAnsweringSimple"),GRt.forEach(t),CRr=r(Zje," (XLM model)"),Zje.forEach(t),wRr=i(ge),p5=n(ge,"LI",{});var eDe=s(p5);h4e=n(eDe,"STRONG",{});var ORt=s(h4e);ARr=r(ORt,"xlm-roberta"),ORt.forEach(t),LRr=r(eDe," \u2014 "),IK=n(eDe,"A",{href:!0});var VRt=s(IK);yRr=r(VRt,"TFXLMRobertaForQuestionAnswering"),VRt.forEach(t),xRr=r(eDe," (XLM-RoBERTa model)"),eDe.forEach(t),$Rr=i(ge),_5=n(ge,"LI",{});var oDe=s(_5);p4e=n(oDe,"STRONG",{});var XRt=s(p4e);kRr=r(XRt,"xlnet"),XRt.forEach(t),SRr=r(oDe," \u2014 "),NK=n(oDe,"A",{href:!0});var zRt=s(NK);RRr=r(zRt,"TFXLNetForQuestionAnsweringSimple"),zRt.forEach(t),PRr=r(oDe," (XLNet model)"),oDe.forEach(t),ge.forEach(t),BRr=i(Wl),T(u5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),NVe=i(f),Nc=n(f,"H2",{class:!0});var Qze=s(Nc);b5=n(Qze,"A",{id:!0,class:!0,href:!0});var QRt=s(b5);_4e=n(QRt,"SPAN",{});var WRt=s(_4e);T(Lx.$$.fragment,WRt),WRt.forEach(t),QRt.forEach(t),IRr=i(Qze),u4e=n(Qze,"SPAN",{});var HRt=s(u4e);NRr=r(HRt,"TFAutoModelForVision2Seq"),HRt.forEach(t),Qze.forEach(t),qVe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(yx.$$.fragment,Hl),qRr=i(Hl),qc=n(Hl,"P",{});var Jre=s(qc);jRr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qK=n(Jre,"A",{href:!0});var URt=s(qK);DRr=r(URt,"from_pretrained()"),URt.forEach(t),GRr=r(Jre," class method or the "),jK=n(Jre,"A",{href:!0});var JRt=s(jK);ORr=r(JRt,"from_config()"),JRt.forEach(t),VRr=r(Jre,` class
method.`),Jre.forEach(t),XRr=i(Hl),xx=n(Hl,"P",{});var Wze=s(xx);zRr=r(Wze,"This class cannot be instantiated directly using "),b4e=n(Wze,"CODE",{});var YRt=s(b4e);QRr=r(YRt,"__init__()"),YRt.forEach(t),WRr=r(Wze," (throws an error)."),Wze.forEach(t),HRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var rL=s(Ot);T($x.$$.fragment,rL),URr=i(rL),v4e=n(rL,"P",{});var KRt=s(v4e);JRr=r(KRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KRt.forEach(t),YRr=i(rL),jc=n(rL,"P",{});var Yre=s(jc);KRr=r(Yre,`Note:
Loading a model from its configuration file does `),F4e=n(Yre,"STRONG",{});var ZRt=s(F4e);ZRr=r(ZRt,"not"),ZRt.forEach(t),ePr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Yre,"A",{href:!0});var ePt=s(DK);oPr=r(ePt,"from_pretrained()"),ePt.forEach(t),rPr=r(Yre," to load the model weights."),Yre.forEach(t),tPr=i(rL),T(v5.$$.fragment,rL),rL.forEach(t),aPr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(kx.$$.fragment,Ul),nPr=i(Ul),T4e=n(Ul,"P",{});var oPt=s(T4e);sPr=r(oPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oPt.forEach(t),lPr=i(Ul),bn=n(Ul,"P",{});var tL=s(bn);iPr=r(tL,"The model class to instantiate is selected based on the "),M4e=n(tL,"CODE",{});var rPt=s(M4e);dPr=r(rPt,"model_type"),rPt.forEach(t),cPr=r(tL,` property of the config object (either
passed as an argument or loaded from `),E4e=n(tL,"CODE",{});var tPt=s(E4e);fPr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),mPr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(tL,"CODE",{});var aPt=s(C4e);gPr=r(aPt,"pretrained_model_name_or_path"),aPt.forEach(t),hPr=r(tL,":"),tL.forEach(t),pPr=i(Ul),w4e=n(Ul,"UL",{});var nPt=s(w4e);F5=n(nPt,"LI",{});var rDe=s(F5);A4e=n(rDe,"STRONG",{});var sPt=s(A4e);_Pr=r(sPt,"vision-encoder-decoder"),sPt.forEach(t),uPr=r(rDe," \u2014 "),GK=n(rDe,"A",{href:!0});var lPt=s(GK);bPr=r(lPt,"TFVisionEncoderDecoderModel"),lPt.forEach(t),vPr=r(rDe," (Vision Encoder decoder model)"),rDe.forEach(t),nPt.forEach(t),FPr=i(Ul),T(T5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),jVe=i(f),Dc=n(f,"H2",{class:!0});var Hze=s(Dc);M5=n(Hze,"A",{id:!0,class:!0,href:!0});var iPt=s(M5);L4e=n(iPt,"SPAN",{});var dPt=s(L4e);T(Sx.$$.fragment,dPt),dPt.forEach(t),iPt.forEach(t),TPr=i(Hze),y4e=n(Hze,"SPAN",{});var cPt=s(y4e);MPr=r(cPt,"TFAutoModelForSpeechSeq2Seq"),cPt.forEach(t),Hze.forEach(t),DVe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Rx.$$.fragment,Jl),EPr=i(Jl),Gc=n(Jl,"P",{});var Kre=s(Gc);CPr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OK=n(Kre,"A",{href:!0});var fPt=s(OK);wPr=r(fPt,"from_pretrained()"),fPt.forEach(t),APr=r(Kre," class method or the "),VK=n(Kre,"A",{href:!0});var mPt=s(VK);LPr=r(mPt,"from_config()"),mPt.forEach(t),yPr=r(Kre,` class
method.`),Kre.forEach(t),xPr=i(Jl),Px=n(Jl,"P",{});var Uze=s(Px);$Pr=r(Uze,"This class cannot be instantiated directly using "),x4e=n(Uze,"CODE",{});var gPt=s(x4e);kPr=r(gPt,"__init__()"),gPt.forEach(t),SPr=r(Uze," (throws an error)."),Uze.forEach(t),RPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var aL=s(Vt);T(Bx.$$.fragment,aL),PPr=i(aL),$4e=n(aL,"P",{});var hPt=s($4e);BPr=r(hPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hPt.forEach(t),IPr=i(aL),Oc=n(aL,"P",{});var Zre=s(Oc);NPr=r(Zre,`Note:
Loading a model from its configuration file does `),k4e=n(Zre,"STRONG",{});var pPt=s(k4e);qPr=r(pPt,"not"),pPt.forEach(t),jPr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Zre,"A",{href:!0});var _Pt=s(XK);DPr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),GPr=r(Zre," to load the model weights."),Zre.forEach(t),OPr=i(aL),T(E5.$$.fragment,aL),aL.forEach(t),VPr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Ix.$$.fragment,Yl),XPr=i(Yl),S4e=n(Yl,"P",{});var uPt=s(S4e);zPr=r(uPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),uPt.forEach(t),QPr=i(Yl),vn=n(Yl,"P",{});var nL=s(vn);WPr=r(nL,"The model class to instantiate is selected based on the "),R4e=n(nL,"CODE",{});var bPt=s(R4e);HPr=r(bPt,"model_type"),bPt.forEach(t),UPr=r(nL,` property of the config object (either
passed as an argument or loaded from `),P4e=n(nL,"CODE",{});var vPt=s(P4e);JPr=r(vPt,"pretrained_model_name_or_path"),vPt.forEach(t),YPr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(nL,"CODE",{});var FPt=s(B4e);KPr=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),ZPr=r(nL,":"),nL.forEach(t),eBr=i(Yl),I4e=n(Yl,"UL",{});var TPt=s(I4e);C5=n(TPt,"LI",{});var tDe=s(C5);N4e=n(tDe,"STRONG",{});var MPt=s(N4e);oBr=r(MPt,"speech_to_text"),MPt.forEach(t),rBr=r(tDe," \u2014 "),zK=n(tDe,"A",{href:!0});var EPt=s(zK);tBr=r(EPt,"TFSpeech2TextForConditionalGeneration"),EPt.forEach(t),aBr=r(tDe," (Speech2Text model)"),tDe.forEach(t),TPt.forEach(t),nBr=i(Yl),T(w5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),GVe=i(f),Vc=n(f,"H2",{class:!0});var Jze=s(Vc);A5=n(Jze,"A",{id:!0,class:!0,href:!0});var CPt=s(A5);q4e=n(CPt,"SPAN",{});var wPt=s(q4e);T(Nx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),sBr=i(Jze),j4e=n(Jze,"SPAN",{});var APt=s(j4e);lBr=r(APt,"FlaxAutoModel"),APt.forEach(t),Jze.forEach(t),OVe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(qx.$$.fragment,Kl),iBr=i(Kl),Xc=n(Kl,"P",{});var ete=s(Xc);dBr=r(ete,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QK=n(ete,"A",{href:!0});var LPt=s(QK);cBr=r(LPt,"from_pretrained()"),LPt.forEach(t),fBr=r(ete," class method or the "),WK=n(ete,"A",{href:!0});var yPt=s(WK);mBr=r(yPt,"from_config()"),yPt.forEach(t),gBr=r(ete,` class
method.`),ete.forEach(t),hBr=i(Kl),jx=n(Kl,"P",{});var Yze=s(jx);pBr=r(Yze,"This class cannot be instantiated directly using "),D4e=n(Yze,"CODE",{});var xPt=s(D4e);_Br=r(xPt,"__init__()"),xPt.forEach(t),uBr=r(Yze," (throws an error)."),Yze.forEach(t),bBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var sL=s(Xt);T(Dx.$$.fragment,sL),vBr=i(sL),G4e=n(sL,"P",{});var $Pt=s(G4e);FBr=r($Pt,"Instantiates one of the base model classes of the library from a configuration."),$Pt.forEach(t),TBr=i(sL),zc=n(sL,"P",{});var ote=s(zc);MBr=r(ote,`Note:
Loading a model from its configuration file does `),O4e=n(ote,"STRONG",{});var kPt=s(O4e);EBr=r(kPt,"not"),kPt.forEach(t),CBr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(ote,"A",{href:!0});var SPt=s(HK);wBr=r(SPt,"from_pretrained()"),SPt.forEach(t),ABr=r(ote," to load the model weights."),ote.forEach(t),LBr=i(sL),T(L5.$$.fragment,sL),sL.forEach(t),yBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Gx.$$.fragment,Zl),xBr=i(Zl),V4e=n(Zl,"P",{});var RPt=s(V4e);$Br=r(RPt,"Instantiate one of the base model classes of the library from a pretrained model."),RPt.forEach(t),kBr=i(Zl),Fn=n(Zl,"P",{});var lL=s(Fn);SBr=r(lL,"The model class to instantiate is selected based on the "),X4e=n(lL,"CODE",{});var PPt=s(X4e);RBr=r(PPt,"model_type"),PPt.forEach(t),PBr=r(lL,` property of the config object (either
passed as an argument or loaded from `),z4e=n(lL,"CODE",{});var BPt=s(z4e);BBr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),IBr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(lL,"CODE",{});var IPt=s(Q4e);NBr=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),qBr=r(lL,":"),lL.forEach(t),jBr=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);y5=n(ae,"LI",{});var aDe=s(y5);W4e=n(aDe,"STRONG",{});var NPt=s(W4e);DBr=r(NPt,"albert"),NPt.forEach(t),GBr=r(aDe," \u2014 "),UK=n(aDe,"A",{href:!0});var qPt=s(UK);OBr=r(qPt,"FlaxAlbertModel"),qPt.forEach(t),VBr=r(aDe," (ALBERT model)"),aDe.forEach(t),XBr=i(ae),x5=n(ae,"LI",{});var nDe=s(x5);H4e=n(nDe,"STRONG",{});var jPt=s(H4e);zBr=r(jPt,"bart"),jPt.forEach(t),QBr=r(nDe," \u2014 "),JK=n(nDe,"A",{href:!0});var DPt=s(JK);WBr=r(DPt,"FlaxBartModel"),DPt.forEach(t),HBr=r(nDe," (BART model)"),nDe.forEach(t),UBr=i(ae),$5=n(ae,"LI",{});var sDe=s($5);U4e=n(sDe,"STRONG",{});var GPt=s(U4e);JBr=r(GPt,"beit"),GPt.forEach(t),YBr=r(sDe," \u2014 "),YK=n(sDe,"A",{href:!0});var OPt=s(YK);KBr=r(OPt,"FlaxBeitModel"),OPt.forEach(t),ZBr=r(sDe," (BEiT model)"),sDe.forEach(t),eIr=i(ae),k5=n(ae,"LI",{});var lDe=s(k5);J4e=n(lDe,"STRONG",{});var VPt=s(J4e);oIr=r(VPt,"bert"),VPt.forEach(t),rIr=r(lDe," \u2014 "),KK=n(lDe,"A",{href:!0});var XPt=s(KK);tIr=r(XPt,"FlaxBertModel"),XPt.forEach(t),aIr=r(lDe," (BERT model)"),lDe.forEach(t),nIr=i(ae),S5=n(ae,"LI",{});var iDe=s(S5);Y4e=n(iDe,"STRONG",{});var zPt=s(Y4e);sIr=r(zPt,"big_bird"),zPt.forEach(t),lIr=r(iDe," \u2014 "),ZK=n(iDe,"A",{href:!0});var QPt=s(ZK);iIr=r(QPt,"FlaxBigBirdModel"),QPt.forEach(t),dIr=r(iDe," (BigBird model)"),iDe.forEach(t),cIr=i(ae),R5=n(ae,"LI",{});var dDe=s(R5);K4e=n(dDe,"STRONG",{});var WPt=s(K4e);fIr=r(WPt,"blenderbot"),WPt.forEach(t),mIr=r(dDe," \u2014 "),eZ=n(dDe,"A",{href:!0});var HPt=s(eZ);gIr=r(HPt,"FlaxBlenderbotModel"),HPt.forEach(t),hIr=r(dDe," (Blenderbot model)"),dDe.forEach(t),pIr=i(ae),P5=n(ae,"LI",{});var cDe=s(P5);Z4e=n(cDe,"STRONG",{});var UPt=s(Z4e);_Ir=r(UPt,"blenderbot-small"),UPt.forEach(t),uIr=r(cDe," \u2014 "),oZ=n(cDe,"A",{href:!0});var JPt=s(oZ);bIr=r(JPt,"FlaxBlenderbotSmallModel"),JPt.forEach(t),vIr=r(cDe," (BlenderbotSmall model)"),cDe.forEach(t),FIr=i(ae),B5=n(ae,"LI",{});var fDe=s(B5);eCe=n(fDe,"STRONG",{});var YPt=s(eCe);TIr=r(YPt,"clip"),YPt.forEach(t),MIr=r(fDe," \u2014 "),rZ=n(fDe,"A",{href:!0});var KPt=s(rZ);EIr=r(KPt,"FlaxCLIPModel"),KPt.forEach(t),CIr=r(fDe," (CLIP model)"),fDe.forEach(t),wIr=i(ae),I5=n(ae,"LI",{});var mDe=s(I5);oCe=n(mDe,"STRONG",{});var ZPt=s(oCe);AIr=r(ZPt,"distilbert"),ZPt.forEach(t),LIr=r(mDe," \u2014 "),tZ=n(mDe,"A",{href:!0});var eBt=s(tZ);yIr=r(eBt,"FlaxDistilBertModel"),eBt.forEach(t),xIr=r(mDe," (DistilBERT model)"),mDe.forEach(t),$Ir=i(ae),N5=n(ae,"LI",{});var gDe=s(N5);rCe=n(gDe,"STRONG",{});var oBt=s(rCe);kIr=r(oBt,"electra"),oBt.forEach(t),SIr=r(gDe," \u2014 "),aZ=n(gDe,"A",{href:!0});var rBt=s(aZ);RIr=r(rBt,"FlaxElectraModel"),rBt.forEach(t),PIr=r(gDe," (ELECTRA model)"),gDe.forEach(t),BIr=i(ae),q5=n(ae,"LI",{});var hDe=s(q5);tCe=n(hDe,"STRONG",{});var tBt=s(tCe);IIr=r(tBt,"gpt2"),tBt.forEach(t),NIr=r(hDe," \u2014 "),nZ=n(hDe,"A",{href:!0});var aBt=s(nZ);qIr=r(aBt,"FlaxGPT2Model"),aBt.forEach(t),jIr=r(hDe," (OpenAI GPT-2 model)"),hDe.forEach(t),DIr=i(ae),j5=n(ae,"LI",{});var pDe=s(j5);aCe=n(pDe,"STRONG",{});var nBt=s(aCe);GIr=r(nBt,"gpt_neo"),nBt.forEach(t),OIr=r(pDe," \u2014 "),sZ=n(pDe,"A",{href:!0});var sBt=s(sZ);VIr=r(sBt,"FlaxGPTNeoModel"),sBt.forEach(t),XIr=r(pDe," (GPT Neo model)"),pDe.forEach(t),zIr=i(ae),D5=n(ae,"LI",{});var _De=s(D5);nCe=n(_De,"STRONG",{});var lBt=s(nCe);QIr=r(lBt,"gptj"),lBt.forEach(t),WIr=r(_De," \u2014 "),lZ=n(_De,"A",{href:!0});var iBt=s(lZ);HIr=r(iBt,"FlaxGPTJModel"),iBt.forEach(t),UIr=r(_De," (GPT-J model)"),_De.forEach(t),JIr=i(ae),G5=n(ae,"LI",{});var uDe=s(G5);sCe=n(uDe,"STRONG",{});var dBt=s(sCe);YIr=r(dBt,"longt5"),dBt.forEach(t),KIr=r(uDe," \u2014 "),iZ=n(uDe,"A",{href:!0});var cBt=s(iZ);ZIr=r(cBt,"FlaxLongT5Model"),cBt.forEach(t),eNr=r(uDe," (LongT5 model)"),uDe.forEach(t),oNr=i(ae),O5=n(ae,"LI",{});var bDe=s(O5);lCe=n(bDe,"STRONG",{});var fBt=s(lCe);rNr=r(fBt,"marian"),fBt.forEach(t),tNr=r(bDe," \u2014 "),dZ=n(bDe,"A",{href:!0});var mBt=s(dZ);aNr=r(mBt,"FlaxMarianModel"),mBt.forEach(t),nNr=r(bDe," (Marian model)"),bDe.forEach(t),sNr=i(ae),V5=n(ae,"LI",{});var vDe=s(V5);iCe=n(vDe,"STRONG",{});var gBt=s(iCe);lNr=r(gBt,"mbart"),gBt.forEach(t),iNr=r(vDe," \u2014 "),cZ=n(vDe,"A",{href:!0});var hBt=s(cZ);dNr=r(hBt,"FlaxMBartModel"),hBt.forEach(t),cNr=r(vDe," (mBART model)"),vDe.forEach(t),fNr=i(ae),X5=n(ae,"LI",{});var FDe=s(X5);dCe=n(FDe,"STRONG",{});var pBt=s(dCe);mNr=r(pBt,"mt5"),pBt.forEach(t),gNr=r(FDe," \u2014 "),fZ=n(FDe,"A",{href:!0});var _Bt=s(fZ);hNr=r(_Bt,"FlaxMT5Model"),_Bt.forEach(t),pNr=r(FDe," (MT5 model)"),FDe.forEach(t),_Nr=i(ae),z5=n(ae,"LI",{});var TDe=s(z5);cCe=n(TDe,"STRONG",{});var uBt=s(cCe);uNr=r(uBt,"opt"),uBt.forEach(t),bNr=r(TDe," \u2014 "),mZ=n(TDe,"A",{href:!0});var bBt=s(mZ);vNr=r(bBt,"FlaxOPTModel"),bBt.forEach(t),FNr=r(TDe," (OPT model)"),TDe.forEach(t),TNr=i(ae),Q5=n(ae,"LI",{});var MDe=s(Q5);fCe=n(MDe,"STRONG",{});var vBt=s(fCe);MNr=r(vBt,"pegasus"),vBt.forEach(t),ENr=r(MDe," \u2014 "),gZ=n(MDe,"A",{href:!0});var FBt=s(gZ);CNr=r(FBt,"FlaxPegasusModel"),FBt.forEach(t),wNr=r(MDe," (Pegasus model)"),MDe.forEach(t),ANr=i(ae),W5=n(ae,"LI",{});var EDe=s(W5);mCe=n(EDe,"STRONG",{});var TBt=s(mCe);LNr=r(TBt,"roberta"),TBt.forEach(t),yNr=r(EDe," \u2014 "),hZ=n(EDe,"A",{href:!0});var MBt=s(hZ);xNr=r(MBt,"FlaxRobertaModel"),MBt.forEach(t),$Nr=r(EDe," (RoBERTa model)"),EDe.forEach(t),kNr=i(ae),H5=n(ae,"LI",{});var CDe=s(H5);gCe=n(CDe,"STRONG",{});var EBt=s(gCe);SNr=r(EBt,"roformer"),EBt.forEach(t),RNr=r(CDe," \u2014 "),pZ=n(CDe,"A",{href:!0});var CBt=s(pZ);PNr=r(CBt,"FlaxRoFormerModel"),CBt.forEach(t),BNr=r(CDe," (RoFormer model)"),CDe.forEach(t),INr=i(ae),U5=n(ae,"LI",{});var wDe=s(U5);hCe=n(wDe,"STRONG",{});var wBt=s(hCe);NNr=r(wBt,"t5"),wBt.forEach(t),qNr=r(wDe," \u2014 "),_Z=n(wDe,"A",{href:!0});var ABt=s(_Z);jNr=r(ABt,"FlaxT5Model"),ABt.forEach(t),DNr=r(wDe," (T5 model)"),wDe.forEach(t),GNr=i(ae),J5=n(ae,"LI",{});var ADe=s(J5);pCe=n(ADe,"STRONG",{});var LBt=s(pCe);ONr=r(LBt,"vision-text-dual-encoder"),LBt.forEach(t),VNr=r(ADe," \u2014 "),uZ=n(ADe,"A",{href:!0});var yBt=s(uZ);XNr=r(yBt,"FlaxVisionTextDualEncoderModel"),yBt.forEach(t),zNr=r(ADe," (VisionTextDualEncoder model)"),ADe.forEach(t),QNr=i(ae),Y5=n(ae,"LI",{});var LDe=s(Y5);_Ce=n(LDe,"STRONG",{});var xBt=s(_Ce);WNr=r(xBt,"vit"),xBt.forEach(t),HNr=r(LDe," \u2014 "),bZ=n(LDe,"A",{href:!0});var $Bt=s(bZ);UNr=r($Bt,"FlaxViTModel"),$Bt.forEach(t),JNr=r(LDe," (ViT model)"),LDe.forEach(t),YNr=i(ae),K5=n(ae,"LI",{});var yDe=s(K5);uCe=n(yDe,"STRONG",{});var kBt=s(uCe);KNr=r(kBt,"wav2vec2"),kBt.forEach(t),ZNr=r(yDe," \u2014 "),vZ=n(yDe,"A",{href:!0});var SBt=s(vZ);eqr=r(SBt,"FlaxWav2Vec2Model"),SBt.forEach(t),oqr=r(yDe," (Wav2Vec2 model)"),yDe.forEach(t),rqr=i(ae),Z5=n(ae,"LI",{});var xDe=s(Z5);bCe=n(xDe,"STRONG",{});var RBt=s(bCe);tqr=r(RBt,"xglm"),RBt.forEach(t),aqr=r(xDe," \u2014 "),FZ=n(xDe,"A",{href:!0});var PBt=s(FZ);nqr=r(PBt,"FlaxXGLMModel"),PBt.forEach(t),sqr=r(xDe," (XGLM model)"),xDe.forEach(t),lqr=i(ae),e0=n(ae,"LI",{});var $De=s(e0);vCe=n($De,"STRONG",{});var BBt=s(vCe);iqr=r(BBt,"xlm-roberta"),BBt.forEach(t),dqr=r($De," \u2014 "),TZ=n($De,"A",{href:!0});var IBt=s(TZ);cqr=r(IBt,"FlaxXLMRobertaModel"),IBt.forEach(t),fqr=r($De," (XLM-RoBERTa model)"),$De.forEach(t),ae.forEach(t),mqr=i(Zl),T(o0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),VVe=i(f),Qc=n(f,"H2",{class:!0});var Kze=s(Qc);r0=n(Kze,"A",{id:!0,class:!0,href:!0});var NBt=s(r0);FCe=n(NBt,"SPAN",{});var qBt=s(FCe);T(Ox.$$.fragment,qBt),qBt.forEach(t),NBt.forEach(t),gqr=i(Kze),TCe=n(Kze,"SPAN",{});var jBt=s(TCe);hqr=r(jBt,"FlaxAutoModelForCausalLM"),jBt.forEach(t),Kze.forEach(t),XVe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Vx.$$.fragment,ei),pqr=i(ei),Wc=n(ei,"P",{});var rte=s(Wc);_qr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MZ=n(rte,"A",{href:!0});var DBt=s(MZ);uqr=r(DBt,"from_pretrained()"),DBt.forEach(t),bqr=r(rte," class method or the "),EZ=n(rte,"A",{href:!0});var GBt=s(EZ);vqr=r(GBt,"from_config()"),GBt.forEach(t),Fqr=r(rte,` class
method.`),rte.forEach(t),Tqr=i(ei),Xx=n(ei,"P",{});var Zze=s(Xx);Mqr=r(Zze,"This class cannot be instantiated directly using "),MCe=n(Zze,"CODE",{});var OBt=s(MCe);Eqr=r(OBt,"__init__()"),OBt.forEach(t),Cqr=r(Zze," (throws an error)."),Zze.forEach(t),wqr=i(ei),zt=n(ei,"DIV",{class:!0});var iL=s(zt);T(zx.$$.fragment,iL),Aqr=i(iL),ECe=n(iL,"P",{});var VBt=s(ECe);Lqr=r(VBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VBt.forEach(t),yqr=i(iL),Hc=n(iL,"P",{});var tte=s(Hc);xqr=r(tte,`Note:
Loading a model from its configuration file does `),CCe=n(tte,"STRONG",{});var XBt=s(CCe);$qr=r(XBt,"not"),XBt.forEach(t),kqr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(tte,"A",{href:!0});var zBt=s(CZ);Sqr=r(zBt,"from_pretrained()"),zBt.forEach(t),Rqr=r(tte," to load the model weights."),tte.forEach(t),Pqr=i(iL),T(t0.$$.fragment,iL),iL.forEach(t),Bqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Qx.$$.fragment,oi),Iqr=i(oi),wCe=n(oi,"P",{});var QBt=s(wCe);Nqr=r(QBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QBt.forEach(t),qqr=i(oi),Tn=n(oi,"P",{});var dL=s(Tn);jqr=r(dL,"The model class to instantiate is selected based on the "),ACe=n(dL,"CODE",{});var WBt=s(ACe);Dqr=r(WBt,"model_type"),WBt.forEach(t),Gqr=r(dL,` property of the config object (either
passed as an argument or loaded from `),LCe=n(dL,"CODE",{});var HBt=s(LCe);Oqr=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),Vqr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(dL,"CODE",{});var UBt=s(yCe);Xqr=r(UBt,"pretrained_model_name_or_path"),UBt.forEach(t),zqr=r(dL,":"),dL.forEach(t),Qqr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);a0=n(Ne,"LI",{});var kDe=s(a0);xCe=n(kDe,"STRONG",{});var JBt=s(xCe);Wqr=r(JBt,"bart"),JBt.forEach(t),Hqr=r(kDe," \u2014 "),wZ=n(kDe,"A",{href:!0});var YBt=s(wZ);Uqr=r(YBt,"FlaxBartForCausalLM"),YBt.forEach(t),Jqr=r(kDe," (BART model)"),kDe.forEach(t),Yqr=i(Ne),n0=n(Ne,"LI",{});var SDe=s(n0);$Ce=n(SDe,"STRONG",{});var KBt=s($Ce);Kqr=r(KBt,"bert"),KBt.forEach(t),Zqr=r(SDe," \u2014 "),AZ=n(SDe,"A",{href:!0});var ZBt=s(AZ);ejr=r(ZBt,"FlaxBertForCausalLM"),ZBt.forEach(t),ojr=r(SDe," (BERT model)"),SDe.forEach(t),rjr=i(Ne),s0=n(Ne,"LI",{});var RDe=s(s0);kCe=n(RDe,"STRONG",{});var eIt=s(kCe);tjr=r(eIt,"big_bird"),eIt.forEach(t),ajr=r(RDe," \u2014 "),LZ=n(RDe,"A",{href:!0});var oIt=s(LZ);njr=r(oIt,"FlaxBigBirdForCausalLM"),oIt.forEach(t),sjr=r(RDe," (BigBird model)"),RDe.forEach(t),ljr=i(Ne),l0=n(Ne,"LI",{});var PDe=s(l0);SCe=n(PDe,"STRONG",{});var rIt=s(SCe);ijr=r(rIt,"electra"),rIt.forEach(t),djr=r(PDe," \u2014 "),yZ=n(PDe,"A",{href:!0});var tIt=s(yZ);cjr=r(tIt,"FlaxElectraForCausalLM"),tIt.forEach(t),fjr=r(PDe," (ELECTRA model)"),PDe.forEach(t),mjr=i(Ne),i0=n(Ne,"LI",{});var BDe=s(i0);RCe=n(BDe,"STRONG",{});var aIt=s(RCe);gjr=r(aIt,"gpt2"),aIt.forEach(t),hjr=r(BDe," \u2014 "),xZ=n(BDe,"A",{href:!0});var nIt=s(xZ);pjr=r(nIt,"FlaxGPT2LMHeadModel"),nIt.forEach(t),_jr=r(BDe," (OpenAI GPT-2 model)"),BDe.forEach(t),ujr=i(Ne),d0=n(Ne,"LI",{});var IDe=s(d0);PCe=n(IDe,"STRONG",{});var sIt=s(PCe);bjr=r(sIt,"gpt_neo"),sIt.forEach(t),vjr=r(IDe," \u2014 "),$Z=n(IDe,"A",{href:!0});var lIt=s($Z);Fjr=r(lIt,"FlaxGPTNeoForCausalLM"),lIt.forEach(t),Tjr=r(IDe," (GPT Neo model)"),IDe.forEach(t),Mjr=i(Ne),c0=n(Ne,"LI",{});var NDe=s(c0);BCe=n(NDe,"STRONG",{});var iIt=s(BCe);Ejr=r(iIt,"gptj"),iIt.forEach(t),Cjr=r(NDe," \u2014 "),kZ=n(NDe,"A",{href:!0});var dIt=s(kZ);wjr=r(dIt,"FlaxGPTJForCausalLM"),dIt.forEach(t),Ajr=r(NDe," (GPT-J model)"),NDe.forEach(t),Ljr=i(Ne),f0=n(Ne,"LI",{});var qDe=s(f0);ICe=n(qDe,"STRONG",{});var cIt=s(ICe);yjr=r(cIt,"opt"),cIt.forEach(t),xjr=r(qDe," \u2014 "),SZ=n(qDe,"A",{href:!0});var fIt=s(SZ);$jr=r(fIt,"FlaxOPTForCausalLM"),fIt.forEach(t),kjr=r(qDe," (OPT model)"),qDe.forEach(t),Sjr=i(Ne),m0=n(Ne,"LI",{});var jDe=s(m0);NCe=n(jDe,"STRONG",{});var mIt=s(NCe);Rjr=r(mIt,"roberta"),mIt.forEach(t),Pjr=r(jDe," \u2014 "),RZ=n(jDe,"A",{href:!0});var gIt=s(RZ);Bjr=r(gIt,"FlaxRobertaForCausalLM"),gIt.forEach(t),Ijr=r(jDe," (RoBERTa model)"),jDe.forEach(t),Njr=i(Ne),g0=n(Ne,"LI",{});var DDe=s(g0);qCe=n(DDe,"STRONG",{});var hIt=s(qCe);qjr=r(hIt,"xglm"),hIt.forEach(t),jjr=r(DDe," \u2014 "),PZ=n(DDe,"A",{href:!0});var pIt=s(PZ);Djr=r(pIt,"FlaxXGLMForCausalLM"),pIt.forEach(t),Gjr=r(DDe," (XGLM model)"),DDe.forEach(t),Ne.forEach(t),Ojr=i(oi),T(h0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),zVe=i(f),Uc=n(f,"H2",{class:!0});var eQe=s(Uc);p0=n(eQe,"A",{id:!0,class:!0,href:!0});var _It=s(p0);jCe=n(_It,"SPAN",{});var uIt=s(jCe);T(Wx.$$.fragment,uIt),uIt.forEach(t),_It.forEach(t),Vjr=i(eQe),DCe=n(eQe,"SPAN",{});var bIt=s(DCe);Xjr=r(bIt,"FlaxAutoModelForPreTraining"),bIt.forEach(t),eQe.forEach(t),QVe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Hx.$$.fragment,ri),zjr=i(ri),Jc=n(ri,"P",{});var ate=s(Jc);Qjr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BZ=n(ate,"A",{href:!0});var vIt=s(BZ);Wjr=r(vIt,"from_pretrained()"),vIt.forEach(t),Hjr=r(ate," class method or the "),IZ=n(ate,"A",{href:!0});var FIt=s(IZ);Ujr=r(FIt,"from_config()"),FIt.forEach(t),Jjr=r(ate,` class
method.`),ate.forEach(t),Yjr=i(ri),Ux=n(ri,"P",{});var oQe=s(Ux);Kjr=r(oQe,"This class cannot be instantiated directly using "),GCe=n(oQe,"CODE",{});var TIt=s(GCe);Zjr=r(TIt,"__init__()"),TIt.forEach(t),eDr=r(oQe," (throws an error)."),oQe.forEach(t),oDr=i(ri),Qt=n(ri,"DIV",{class:!0});var cL=s(Qt);T(Jx.$$.fragment,cL),rDr=i(cL),OCe=n(cL,"P",{});var MIt=s(OCe);tDr=r(MIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MIt.forEach(t),aDr=i(cL),Yc=n(cL,"P",{});var nte=s(Yc);nDr=r(nte,`Note:
Loading a model from its configuration file does `),VCe=n(nte,"STRONG",{});var EIt=s(VCe);sDr=r(EIt,"not"),EIt.forEach(t),lDr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(nte,"A",{href:!0});var CIt=s(NZ);iDr=r(CIt,"from_pretrained()"),CIt.forEach(t),dDr=r(nte," to load the model weights."),nte.forEach(t),cDr=i(cL),T(_0.$$.fragment,cL),cL.forEach(t),fDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Yx.$$.fragment,ti),mDr=i(ti),XCe=n(ti,"P",{});var wIt=s(XCe);gDr=r(wIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wIt.forEach(t),hDr=i(ti),Mn=n(ti,"P",{});var fL=s(Mn);pDr=r(fL,"The model class to instantiate is selected based on the "),zCe=n(fL,"CODE",{});var AIt=s(zCe);_Dr=r(AIt,"model_type"),AIt.forEach(t),uDr=r(fL,` property of the config object (either
passed as an argument or loaded from `),QCe=n(fL,"CODE",{});var LIt=s(QCe);bDr=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),vDr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(fL,"CODE",{});var yIt=s(WCe);FDr=r(yIt,"pretrained_model_name_or_path"),yIt.forEach(t),TDr=r(fL,":"),fL.forEach(t),MDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);u0=n(we,"LI",{});var GDe=s(u0);HCe=n(GDe,"STRONG",{});var xIt=s(HCe);EDr=r(xIt,"albert"),xIt.forEach(t),CDr=r(GDe," \u2014 "),qZ=n(GDe,"A",{href:!0});var $It=s(qZ);wDr=r($It,"FlaxAlbertForPreTraining"),$It.forEach(t),ADr=r(GDe," (ALBERT model)"),GDe.forEach(t),LDr=i(we),b0=n(we,"LI",{});var ODe=s(b0);UCe=n(ODe,"STRONG",{});var kIt=s(UCe);yDr=r(kIt,"bart"),kIt.forEach(t),xDr=r(ODe," \u2014 "),jZ=n(ODe,"A",{href:!0});var SIt=s(jZ);$Dr=r(SIt,"FlaxBartForConditionalGeneration"),SIt.forEach(t),kDr=r(ODe," (BART model)"),ODe.forEach(t),SDr=i(we),v0=n(we,"LI",{});var VDe=s(v0);JCe=n(VDe,"STRONG",{});var RIt=s(JCe);RDr=r(RIt,"bert"),RIt.forEach(t),PDr=r(VDe," \u2014 "),DZ=n(VDe,"A",{href:!0});var PIt=s(DZ);BDr=r(PIt,"FlaxBertForPreTraining"),PIt.forEach(t),IDr=r(VDe," (BERT model)"),VDe.forEach(t),NDr=i(we),F0=n(we,"LI",{});var XDe=s(F0);YCe=n(XDe,"STRONG",{});var BIt=s(YCe);qDr=r(BIt,"big_bird"),BIt.forEach(t),jDr=r(XDe," \u2014 "),GZ=n(XDe,"A",{href:!0});var IIt=s(GZ);DDr=r(IIt,"FlaxBigBirdForPreTraining"),IIt.forEach(t),GDr=r(XDe," (BigBird model)"),XDe.forEach(t),ODr=i(we),T0=n(we,"LI",{});var zDe=s(T0);KCe=n(zDe,"STRONG",{});var NIt=s(KCe);VDr=r(NIt,"electra"),NIt.forEach(t),XDr=r(zDe," \u2014 "),OZ=n(zDe,"A",{href:!0});var qIt=s(OZ);zDr=r(qIt,"FlaxElectraForPreTraining"),qIt.forEach(t),QDr=r(zDe," (ELECTRA model)"),zDe.forEach(t),WDr=i(we),M0=n(we,"LI",{});var QDe=s(M0);ZCe=n(QDe,"STRONG",{});var jIt=s(ZCe);HDr=r(jIt,"longt5"),jIt.forEach(t),UDr=r(QDe," \u2014 "),VZ=n(QDe,"A",{href:!0});var DIt=s(VZ);JDr=r(DIt,"FlaxLongT5ForConditionalGeneration"),DIt.forEach(t),YDr=r(QDe," (LongT5 model)"),QDe.forEach(t),KDr=i(we),E0=n(we,"LI",{});var WDe=s(E0);e5e=n(WDe,"STRONG",{});var GIt=s(e5e);ZDr=r(GIt,"mbart"),GIt.forEach(t),eGr=r(WDe," \u2014 "),XZ=n(WDe,"A",{href:!0});var OIt=s(XZ);oGr=r(OIt,"FlaxMBartForConditionalGeneration"),OIt.forEach(t),rGr=r(WDe," (mBART model)"),WDe.forEach(t),tGr=i(we),C0=n(we,"LI",{});var HDe=s(C0);o5e=n(HDe,"STRONG",{});var VIt=s(o5e);aGr=r(VIt,"mt5"),VIt.forEach(t),nGr=r(HDe," \u2014 "),zZ=n(HDe,"A",{href:!0});var XIt=s(zZ);sGr=r(XIt,"FlaxMT5ForConditionalGeneration"),XIt.forEach(t),lGr=r(HDe," (MT5 model)"),HDe.forEach(t),iGr=i(we),w0=n(we,"LI",{});var UDe=s(w0);r5e=n(UDe,"STRONG",{});var zIt=s(r5e);dGr=r(zIt,"roberta"),zIt.forEach(t),cGr=r(UDe," \u2014 "),QZ=n(UDe,"A",{href:!0});var QIt=s(QZ);fGr=r(QIt,"FlaxRobertaForMaskedLM"),QIt.forEach(t),mGr=r(UDe," (RoBERTa model)"),UDe.forEach(t),gGr=i(we),A0=n(we,"LI",{});var JDe=s(A0);t5e=n(JDe,"STRONG",{});var WIt=s(t5e);hGr=r(WIt,"roformer"),WIt.forEach(t),pGr=r(JDe," \u2014 "),WZ=n(JDe,"A",{href:!0});var HIt=s(WZ);_Gr=r(HIt,"FlaxRoFormerForMaskedLM"),HIt.forEach(t),uGr=r(JDe," (RoFormer model)"),JDe.forEach(t),bGr=i(we),L0=n(we,"LI",{});var YDe=s(L0);a5e=n(YDe,"STRONG",{});var UIt=s(a5e);vGr=r(UIt,"t5"),UIt.forEach(t),FGr=r(YDe," \u2014 "),HZ=n(YDe,"A",{href:!0});var JIt=s(HZ);TGr=r(JIt,"FlaxT5ForConditionalGeneration"),JIt.forEach(t),MGr=r(YDe," (T5 model)"),YDe.forEach(t),EGr=i(we),y0=n(we,"LI",{});var KDe=s(y0);n5e=n(KDe,"STRONG",{});var YIt=s(n5e);CGr=r(YIt,"wav2vec2"),YIt.forEach(t),wGr=r(KDe," \u2014 "),UZ=n(KDe,"A",{href:!0});var KIt=s(UZ);AGr=r(KIt,"FlaxWav2Vec2ForPreTraining"),KIt.forEach(t),LGr=r(KDe," (Wav2Vec2 model)"),KDe.forEach(t),yGr=i(we),x0=n(we,"LI",{});var ZDe=s(x0);s5e=n(ZDe,"STRONG",{});var ZIt=s(s5e);xGr=r(ZIt,"xlm-roberta"),ZIt.forEach(t),$Gr=r(ZDe," \u2014 "),JZ=n(ZDe,"A",{href:!0});var eNt=s(JZ);kGr=r(eNt,"FlaxXLMRobertaForMaskedLM"),eNt.forEach(t),SGr=r(ZDe," (XLM-RoBERTa model)"),ZDe.forEach(t),we.forEach(t),RGr=i(ti),T($0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),WVe=i(f),Kc=n(f,"H2",{class:!0});var rQe=s(Kc);k0=n(rQe,"A",{id:!0,class:!0,href:!0});var oNt=s(k0);l5e=n(oNt,"SPAN",{});var rNt=s(l5e);T(Kx.$$.fragment,rNt),rNt.forEach(t),oNt.forEach(t),PGr=i(rQe),i5e=n(rQe,"SPAN",{});var tNt=s(i5e);BGr=r(tNt,"FlaxAutoModelForMaskedLM"),tNt.forEach(t),rQe.forEach(t),HVe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(Zx.$$.fragment,ai),IGr=i(ai),Zc=n(ai,"P",{});var ste=s(Zc);NGr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YZ=n(ste,"A",{href:!0});var aNt=s(YZ);qGr=r(aNt,"from_pretrained()"),aNt.forEach(t),jGr=r(ste," class method or the "),KZ=n(ste,"A",{href:!0});var nNt=s(KZ);DGr=r(nNt,"from_config()"),nNt.forEach(t),GGr=r(ste,` class
method.`),ste.forEach(t),OGr=i(ai),e$=n(ai,"P",{});var tQe=s(e$);VGr=r(tQe,"This class cannot be instantiated directly using "),d5e=n(tQe,"CODE",{});var sNt=s(d5e);XGr=r(sNt,"__init__()"),sNt.forEach(t),zGr=r(tQe," (throws an error)."),tQe.forEach(t),QGr=i(ai),Wt=n(ai,"DIV",{class:!0});var mL=s(Wt);T(o$.$$.fragment,mL),WGr=i(mL),c5e=n(mL,"P",{});var lNt=s(c5e);HGr=r(lNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lNt.forEach(t),UGr=i(mL),ef=n(mL,"P",{});var lte=s(ef);JGr=r(lte,`Note:
Loading a model from its configuration file does `),f5e=n(lte,"STRONG",{});var iNt=s(f5e);YGr=r(iNt,"not"),iNt.forEach(t),KGr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(lte,"A",{href:!0});var dNt=s(ZZ);ZGr=r(dNt,"from_pretrained()"),dNt.forEach(t),eOr=r(lte," to load the model weights."),lte.forEach(t),oOr=i(mL),T(S0.$$.fragment,mL),mL.forEach(t),rOr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(r$.$$.fragment,ni),tOr=i(ni),m5e=n(ni,"P",{});var cNt=s(m5e);aOr=r(cNt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cNt.forEach(t),nOr=i(ni),En=n(ni,"P",{});var gL=s(En);sOr=r(gL,"The model class to instantiate is selected based on the "),g5e=n(gL,"CODE",{});var fNt=s(g5e);lOr=r(fNt,"model_type"),fNt.forEach(t),iOr=r(gL,` property of the config object (either
passed as an argument or loaded from `),h5e=n(gL,"CODE",{});var mNt=s(h5e);dOr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),cOr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(gL,"CODE",{});var gNt=s(p5e);fOr=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),mOr=r(gL,":"),gL.forEach(t),gOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);R0=n(qe,"LI",{});var eGe=s(R0);_5e=n(eGe,"STRONG",{});var hNt=s(_5e);hOr=r(hNt,"albert"),hNt.forEach(t),pOr=r(eGe," \u2014 "),eee=n(eGe,"A",{href:!0});var pNt=s(eee);_Or=r(pNt,"FlaxAlbertForMaskedLM"),pNt.forEach(t),uOr=r(eGe," (ALBERT model)"),eGe.forEach(t),bOr=i(qe),P0=n(qe,"LI",{});var oGe=s(P0);u5e=n(oGe,"STRONG",{});var _Nt=s(u5e);vOr=r(_Nt,"bart"),_Nt.forEach(t),FOr=r(oGe," \u2014 "),oee=n(oGe,"A",{href:!0});var uNt=s(oee);TOr=r(uNt,"FlaxBartForConditionalGeneration"),uNt.forEach(t),MOr=r(oGe," (BART model)"),oGe.forEach(t),EOr=i(qe),B0=n(qe,"LI",{});var rGe=s(B0);b5e=n(rGe,"STRONG",{});var bNt=s(b5e);COr=r(bNt,"bert"),bNt.forEach(t),wOr=r(rGe," \u2014 "),ree=n(rGe,"A",{href:!0});var vNt=s(ree);AOr=r(vNt,"FlaxBertForMaskedLM"),vNt.forEach(t),LOr=r(rGe," (BERT model)"),rGe.forEach(t),yOr=i(qe),I0=n(qe,"LI",{});var tGe=s(I0);v5e=n(tGe,"STRONG",{});var FNt=s(v5e);xOr=r(FNt,"big_bird"),FNt.forEach(t),$Or=r(tGe," \u2014 "),tee=n(tGe,"A",{href:!0});var TNt=s(tee);kOr=r(TNt,"FlaxBigBirdForMaskedLM"),TNt.forEach(t),SOr=r(tGe," (BigBird model)"),tGe.forEach(t),ROr=i(qe),N0=n(qe,"LI",{});var aGe=s(N0);F5e=n(aGe,"STRONG",{});var MNt=s(F5e);POr=r(MNt,"distilbert"),MNt.forEach(t),BOr=r(aGe," \u2014 "),aee=n(aGe,"A",{href:!0});var ENt=s(aee);IOr=r(ENt,"FlaxDistilBertForMaskedLM"),ENt.forEach(t),NOr=r(aGe," (DistilBERT model)"),aGe.forEach(t),qOr=i(qe),q0=n(qe,"LI",{});var nGe=s(q0);T5e=n(nGe,"STRONG",{});var CNt=s(T5e);jOr=r(CNt,"electra"),CNt.forEach(t),DOr=r(nGe," \u2014 "),nee=n(nGe,"A",{href:!0});var wNt=s(nee);GOr=r(wNt,"FlaxElectraForMaskedLM"),wNt.forEach(t),OOr=r(nGe," (ELECTRA model)"),nGe.forEach(t),VOr=i(qe),j0=n(qe,"LI",{});var sGe=s(j0);M5e=n(sGe,"STRONG",{});var ANt=s(M5e);XOr=r(ANt,"mbart"),ANt.forEach(t),zOr=r(sGe," \u2014 "),see=n(sGe,"A",{href:!0});var LNt=s(see);QOr=r(LNt,"FlaxMBartForConditionalGeneration"),LNt.forEach(t),WOr=r(sGe," (mBART model)"),sGe.forEach(t),HOr=i(qe),D0=n(qe,"LI",{});var lGe=s(D0);E5e=n(lGe,"STRONG",{});var yNt=s(E5e);UOr=r(yNt,"roberta"),yNt.forEach(t),JOr=r(lGe," \u2014 "),lee=n(lGe,"A",{href:!0});var xNt=s(lee);YOr=r(xNt,"FlaxRobertaForMaskedLM"),xNt.forEach(t),KOr=r(lGe," (RoBERTa model)"),lGe.forEach(t),ZOr=i(qe),G0=n(qe,"LI",{});var iGe=s(G0);C5e=n(iGe,"STRONG",{});var $Nt=s(C5e);eVr=r($Nt,"roformer"),$Nt.forEach(t),oVr=r(iGe," \u2014 "),iee=n(iGe,"A",{href:!0});var kNt=s(iee);rVr=r(kNt,"FlaxRoFormerForMaskedLM"),kNt.forEach(t),tVr=r(iGe," (RoFormer model)"),iGe.forEach(t),aVr=i(qe),O0=n(qe,"LI",{});var dGe=s(O0);w5e=n(dGe,"STRONG",{});var SNt=s(w5e);nVr=r(SNt,"xlm-roberta"),SNt.forEach(t),sVr=r(dGe," \u2014 "),dee=n(dGe,"A",{href:!0});var RNt=s(dee);lVr=r(RNt,"FlaxXLMRobertaForMaskedLM"),RNt.forEach(t),iVr=r(dGe," (XLM-RoBERTa model)"),dGe.forEach(t),qe.forEach(t),dVr=i(ni),T(V0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),UVe=i(f),of=n(f,"H2",{class:!0});var aQe=s(of);X0=n(aQe,"A",{id:!0,class:!0,href:!0});var PNt=s(X0);A5e=n(PNt,"SPAN",{});var BNt=s(A5e);T(t$.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),cVr=i(aQe),L5e=n(aQe,"SPAN",{});var INt=s(L5e);fVr=r(INt,"FlaxAutoModelForSeq2SeqLM"),INt.forEach(t),aQe.forEach(t),JVe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(a$.$$.fragment,si),mVr=i(si),rf=n(si,"P",{});var ite=s(rf);gVr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cee=n(ite,"A",{href:!0});var NNt=s(cee);hVr=r(NNt,"from_pretrained()"),NNt.forEach(t),pVr=r(ite," class method or the "),fee=n(ite,"A",{href:!0});var qNt=s(fee);_Vr=r(qNt,"from_config()"),qNt.forEach(t),uVr=r(ite,` class
method.`),ite.forEach(t),bVr=i(si),n$=n(si,"P",{});var nQe=s(n$);vVr=r(nQe,"This class cannot be instantiated directly using "),y5e=n(nQe,"CODE",{});var jNt=s(y5e);FVr=r(jNt,"__init__()"),jNt.forEach(t),TVr=r(nQe," (throws an error)."),nQe.forEach(t),MVr=i(si),Ht=n(si,"DIV",{class:!0});var hL=s(Ht);T(s$.$$.fragment,hL),EVr=i(hL),x5e=n(hL,"P",{});var DNt=s(x5e);CVr=r(DNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DNt.forEach(t),wVr=i(hL),tf=n(hL,"P",{});var dte=s(tf);AVr=r(dte,`Note:
Loading a model from its configuration file does `),$5e=n(dte,"STRONG",{});var GNt=s($5e);LVr=r(GNt,"not"),GNt.forEach(t),yVr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(dte,"A",{href:!0});var ONt=s(mee);xVr=r(ONt,"from_pretrained()"),ONt.forEach(t),$Vr=r(dte," to load the model weights."),dte.forEach(t),kVr=i(hL),T(z0.$$.fragment,hL),hL.forEach(t),SVr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(l$.$$.fragment,li),RVr=i(li),k5e=n(li,"P",{});var VNt=s(k5e);PVr=r(VNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VNt.forEach(t),BVr=i(li),Cn=n(li,"P",{});var pL=s(Cn);IVr=r(pL,"The model class to instantiate is selected based on the "),S5e=n(pL,"CODE",{});var XNt=s(S5e);NVr=r(XNt,"model_type"),XNt.forEach(t),qVr=r(pL,` property of the config object (either
passed as an argument or loaded from `),R5e=n(pL,"CODE",{});var zNt=s(R5e);jVr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),DVr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=n(pL,"CODE",{});var QNt=s(P5e);GVr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),OVr=r(pL,":"),pL.forEach(t),VVr=i(li),ke=n(li,"UL",{});var je=s(ke);Q0=n(je,"LI",{});var cGe=s(Q0);B5e=n(cGe,"STRONG",{});var WNt=s(B5e);XVr=r(WNt,"bart"),WNt.forEach(t),zVr=r(cGe," \u2014 "),gee=n(cGe,"A",{href:!0});var HNt=s(gee);QVr=r(HNt,"FlaxBartForConditionalGeneration"),HNt.forEach(t),WVr=r(cGe," (BART model)"),cGe.forEach(t),HVr=i(je),W0=n(je,"LI",{});var fGe=s(W0);I5e=n(fGe,"STRONG",{});var UNt=s(I5e);UVr=r(UNt,"blenderbot"),UNt.forEach(t),JVr=r(fGe," \u2014 "),hee=n(fGe,"A",{href:!0});var JNt=s(hee);YVr=r(JNt,"FlaxBlenderbotForConditionalGeneration"),JNt.forEach(t),KVr=r(fGe," (Blenderbot model)"),fGe.forEach(t),ZVr=i(je),H0=n(je,"LI",{});var mGe=s(H0);N5e=n(mGe,"STRONG",{});var YNt=s(N5e);eXr=r(YNt,"blenderbot-small"),YNt.forEach(t),oXr=r(mGe," \u2014 "),pee=n(mGe,"A",{href:!0});var KNt=s(pee);rXr=r(KNt,"FlaxBlenderbotSmallForConditionalGeneration"),KNt.forEach(t),tXr=r(mGe," (BlenderbotSmall model)"),mGe.forEach(t),aXr=i(je),U0=n(je,"LI",{});var gGe=s(U0);q5e=n(gGe,"STRONG",{});var ZNt=s(q5e);nXr=r(ZNt,"encoder-decoder"),ZNt.forEach(t),sXr=r(gGe," \u2014 "),_ee=n(gGe,"A",{href:!0});var eqt=s(_ee);lXr=r(eqt,"FlaxEncoderDecoderModel"),eqt.forEach(t),iXr=r(gGe," (Encoder decoder model)"),gGe.forEach(t),dXr=i(je),J0=n(je,"LI",{});var hGe=s(J0);j5e=n(hGe,"STRONG",{});var oqt=s(j5e);cXr=r(oqt,"longt5"),oqt.forEach(t),fXr=r(hGe," \u2014 "),uee=n(hGe,"A",{href:!0});var rqt=s(uee);mXr=r(rqt,"FlaxLongT5ForConditionalGeneration"),rqt.forEach(t),gXr=r(hGe," (LongT5 model)"),hGe.forEach(t),hXr=i(je),Y0=n(je,"LI",{});var pGe=s(Y0);D5e=n(pGe,"STRONG",{});var tqt=s(D5e);pXr=r(tqt,"marian"),tqt.forEach(t),_Xr=r(pGe," \u2014 "),bee=n(pGe,"A",{href:!0});var aqt=s(bee);uXr=r(aqt,"FlaxMarianMTModel"),aqt.forEach(t),bXr=r(pGe," (Marian model)"),pGe.forEach(t),vXr=i(je),K0=n(je,"LI",{});var _Ge=s(K0);G5e=n(_Ge,"STRONG",{});var nqt=s(G5e);FXr=r(nqt,"mbart"),nqt.forEach(t),TXr=r(_Ge," \u2014 "),vee=n(_Ge,"A",{href:!0});var sqt=s(vee);MXr=r(sqt,"FlaxMBartForConditionalGeneration"),sqt.forEach(t),EXr=r(_Ge," (mBART model)"),_Ge.forEach(t),CXr=i(je),Z0=n(je,"LI",{});var uGe=s(Z0);O5e=n(uGe,"STRONG",{});var lqt=s(O5e);wXr=r(lqt,"mt5"),lqt.forEach(t),AXr=r(uGe," \u2014 "),Fee=n(uGe,"A",{href:!0});var iqt=s(Fee);LXr=r(iqt,"FlaxMT5ForConditionalGeneration"),iqt.forEach(t),yXr=r(uGe," (MT5 model)"),uGe.forEach(t),xXr=i(je),ew=n(je,"LI",{});var bGe=s(ew);V5e=n(bGe,"STRONG",{});var dqt=s(V5e);$Xr=r(dqt,"pegasus"),dqt.forEach(t),kXr=r(bGe," \u2014 "),Tee=n(bGe,"A",{href:!0});var cqt=s(Tee);SXr=r(cqt,"FlaxPegasusForConditionalGeneration"),cqt.forEach(t),RXr=r(bGe," (Pegasus model)"),bGe.forEach(t),PXr=i(je),ow=n(je,"LI",{});var vGe=s(ow);X5e=n(vGe,"STRONG",{});var fqt=s(X5e);BXr=r(fqt,"t5"),fqt.forEach(t),IXr=r(vGe," \u2014 "),Mee=n(vGe,"A",{href:!0});var mqt=s(Mee);NXr=r(mqt,"FlaxT5ForConditionalGeneration"),mqt.forEach(t),qXr=r(vGe," (T5 model)"),vGe.forEach(t),je.forEach(t),jXr=i(li),T(rw.$$.fragment,li),li.forEach(t),si.forEach(t),YVe=i(f),af=n(f,"H2",{class:!0});var sQe=s(af);tw=n(sQe,"A",{id:!0,class:!0,href:!0});var gqt=s(tw);z5e=n(gqt,"SPAN",{});var hqt=s(z5e);T(i$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),DXr=i(sQe),Q5e=n(sQe,"SPAN",{});var pqt=s(Q5e);GXr=r(pqt,"FlaxAutoModelForSequenceClassification"),pqt.forEach(t),sQe.forEach(t),KVe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(d$.$$.fragment,ii),OXr=i(ii),nf=n(ii,"P",{});var cte=s(nf);VXr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eee=n(cte,"A",{href:!0});var _qt=s(Eee);XXr=r(_qt,"from_pretrained()"),_qt.forEach(t),zXr=r(cte," class method or the "),Cee=n(cte,"A",{href:!0});var uqt=s(Cee);QXr=r(uqt,"from_config()"),uqt.forEach(t),WXr=r(cte,` class
method.`),cte.forEach(t),HXr=i(ii),c$=n(ii,"P",{});var lQe=s(c$);UXr=r(lQe,"This class cannot be instantiated directly using "),W5e=n(lQe,"CODE",{});var bqt=s(W5e);JXr=r(bqt,"__init__()"),bqt.forEach(t),YXr=r(lQe," (throws an error)."),lQe.forEach(t),KXr=i(ii),Ut=n(ii,"DIV",{class:!0});var _L=s(Ut);T(f$.$$.fragment,_L),ZXr=i(_L),H5e=n(_L,"P",{});var vqt=s(H5e);ezr=r(vqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vqt.forEach(t),ozr=i(_L),sf=n(_L,"P",{});var fte=s(sf);rzr=r(fte,`Note:
Loading a model from its configuration file does `),U5e=n(fte,"STRONG",{});var Fqt=s(U5e);tzr=r(Fqt,"not"),Fqt.forEach(t),azr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(fte,"A",{href:!0});var Tqt=s(wee);nzr=r(Tqt,"from_pretrained()"),Tqt.forEach(t),szr=r(fte," to load the model weights."),fte.forEach(t),lzr=i(_L),T(aw.$$.fragment,_L),_L.forEach(t),izr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(m$.$$.fragment,di),dzr=i(di),J5e=n(di,"P",{});var Mqt=s(J5e);czr=r(Mqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mqt.forEach(t),fzr=i(di),wn=n(di,"P",{});var uL=s(wn);mzr=r(uL,"The model class to instantiate is selected based on the "),Y5e=n(uL,"CODE",{});var Eqt=s(Y5e);gzr=r(Eqt,"model_type"),Eqt.forEach(t),hzr=r(uL,` property of the config object (either
passed as an argument or loaded from `),K5e=n(uL,"CODE",{});var Cqt=s(K5e);pzr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),_zr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(uL,"CODE",{});var wqt=s(Z5e);uzr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),bzr=r(uL,":"),uL.forEach(t),vzr=i(di),Se=n(di,"UL",{});var De=s(Se);nw=n(De,"LI",{});var FGe=s(nw);e0e=n(FGe,"STRONG",{});var Aqt=s(e0e);Fzr=r(Aqt,"albert"),Aqt.forEach(t),Tzr=r(FGe," \u2014 "),Aee=n(FGe,"A",{href:!0});var Lqt=s(Aee);Mzr=r(Lqt,"FlaxAlbertForSequenceClassification"),Lqt.forEach(t),Ezr=r(FGe," (ALBERT model)"),FGe.forEach(t),Czr=i(De),sw=n(De,"LI",{});var TGe=s(sw);o0e=n(TGe,"STRONG",{});var yqt=s(o0e);wzr=r(yqt,"bart"),yqt.forEach(t),Azr=r(TGe," \u2014 "),Lee=n(TGe,"A",{href:!0});var xqt=s(Lee);Lzr=r(xqt,"FlaxBartForSequenceClassification"),xqt.forEach(t),yzr=r(TGe," (BART model)"),TGe.forEach(t),xzr=i(De),lw=n(De,"LI",{});var MGe=s(lw);r0e=n(MGe,"STRONG",{});var $qt=s(r0e);$zr=r($qt,"bert"),$qt.forEach(t),kzr=r(MGe," \u2014 "),yee=n(MGe,"A",{href:!0});var kqt=s(yee);Szr=r(kqt,"FlaxBertForSequenceClassification"),kqt.forEach(t),Rzr=r(MGe," (BERT model)"),MGe.forEach(t),Pzr=i(De),iw=n(De,"LI",{});var EGe=s(iw);t0e=n(EGe,"STRONG",{});var Sqt=s(t0e);Bzr=r(Sqt,"big_bird"),Sqt.forEach(t),Izr=r(EGe," \u2014 "),xee=n(EGe,"A",{href:!0});var Rqt=s(xee);Nzr=r(Rqt,"FlaxBigBirdForSequenceClassification"),Rqt.forEach(t),qzr=r(EGe," (BigBird model)"),EGe.forEach(t),jzr=i(De),dw=n(De,"LI",{});var CGe=s(dw);a0e=n(CGe,"STRONG",{});var Pqt=s(a0e);Dzr=r(Pqt,"distilbert"),Pqt.forEach(t),Gzr=r(CGe," \u2014 "),$ee=n(CGe,"A",{href:!0});var Bqt=s($ee);Ozr=r(Bqt,"FlaxDistilBertForSequenceClassification"),Bqt.forEach(t),Vzr=r(CGe," (DistilBERT model)"),CGe.forEach(t),Xzr=i(De),cw=n(De,"LI",{});var wGe=s(cw);n0e=n(wGe,"STRONG",{});var Iqt=s(n0e);zzr=r(Iqt,"electra"),Iqt.forEach(t),Qzr=r(wGe," \u2014 "),kee=n(wGe,"A",{href:!0});var Nqt=s(kee);Wzr=r(Nqt,"FlaxElectraForSequenceClassification"),Nqt.forEach(t),Hzr=r(wGe," (ELECTRA model)"),wGe.forEach(t),Uzr=i(De),fw=n(De,"LI",{});var AGe=s(fw);s0e=n(AGe,"STRONG",{});var qqt=s(s0e);Jzr=r(qqt,"mbart"),qqt.forEach(t),Yzr=r(AGe," \u2014 "),See=n(AGe,"A",{href:!0});var jqt=s(See);Kzr=r(jqt,"FlaxMBartForSequenceClassification"),jqt.forEach(t),Zzr=r(AGe," (mBART model)"),AGe.forEach(t),eQr=i(De),mw=n(De,"LI",{});var LGe=s(mw);l0e=n(LGe,"STRONG",{});var Dqt=s(l0e);oQr=r(Dqt,"roberta"),Dqt.forEach(t),rQr=r(LGe," \u2014 "),Ree=n(LGe,"A",{href:!0});var Gqt=s(Ree);tQr=r(Gqt,"FlaxRobertaForSequenceClassification"),Gqt.forEach(t),aQr=r(LGe," (RoBERTa model)"),LGe.forEach(t),nQr=i(De),gw=n(De,"LI",{});var yGe=s(gw);i0e=n(yGe,"STRONG",{});var Oqt=s(i0e);sQr=r(Oqt,"roformer"),Oqt.forEach(t),lQr=r(yGe," \u2014 "),Pee=n(yGe,"A",{href:!0});var Vqt=s(Pee);iQr=r(Vqt,"FlaxRoFormerForSequenceClassification"),Vqt.forEach(t),dQr=r(yGe," (RoFormer model)"),yGe.forEach(t),cQr=i(De),hw=n(De,"LI",{});var xGe=s(hw);d0e=n(xGe,"STRONG",{});var Xqt=s(d0e);fQr=r(Xqt,"xlm-roberta"),Xqt.forEach(t),mQr=r(xGe," \u2014 "),Bee=n(xGe,"A",{href:!0});var zqt=s(Bee);gQr=r(zqt,"FlaxXLMRobertaForSequenceClassification"),zqt.forEach(t),hQr=r(xGe," (XLM-RoBERTa model)"),xGe.forEach(t),De.forEach(t),pQr=i(di),T(pw.$$.fragment,di),di.forEach(t),ii.forEach(t),ZVe=i(f),lf=n(f,"H2",{class:!0});var iQe=s(lf);_w=n(iQe,"A",{id:!0,class:!0,href:!0});var Qqt=s(_w);c0e=n(Qqt,"SPAN",{});var Wqt=s(c0e);T(g$.$$.fragment,Wqt),Wqt.forEach(t),Qqt.forEach(t),_Qr=i(iQe),f0e=n(iQe,"SPAN",{});var Hqt=s(f0e);uQr=r(Hqt,"FlaxAutoModelForQuestionAnswering"),Hqt.forEach(t),iQe.forEach(t),eXe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(h$.$$.fragment,ci),bQr=i(ci),df=n(ci,"P",{});var mte=s(df);vQr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iee=n(mte,"A",{href:!0});var Uqt=s(Iee);FQr=r(Uqt,"from_pretrained()"),Uqt.forEach(t),TQr=r(mte," class method or the "),Nee=n(mte,"A",{href:!0});var Jqt=s(Nee);MQr=r(Jqt,"from_config()"),Jqt.forEach(t),EQr=r(mte,` class
method.`),mte.forEach(t),CQr=i(ci),p$=n(ci,"P",{});var dQe=s(p$);wQr=r(dQe,"This class cannot be instantiated directly using "),m0e=n(dQe,"CODE",{});var Yqt=s(m0e);AQr=r(Yqt,"__init__()"),Yqt.forEach(t),LQr=r(dQe," (throws an error)."),dQe.forEach(t),yQr=i(ci),Jt=n(ci,"DIV",{class:!0});var bL=s(Jt);T(_$.$$.fragment,bL),xQr=i(bL),g0e=n(bL,"P",{});var Kqt=s(g0e);$Qr=r(Kqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kqt.forEach(t),kQr=i(bL),cf=n(bL,"P",{});var gte=s(cf);SQr=r(gte,`Note:
Loading a model from its configuration file does `),h0e=n(gte,"STRONG",{});var Zqt=s(h0e);RQr=r(Zqt,"not"),Zqt.forEach(t),PQr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(gte,"A",{href:!0});var ejt=s(qee);BQr=r(ejt,"from_pretrained()"),ejt.forEach(t),IQr=r(gte," to load the model weights."),gte.forEach(t),NQr=i(bL),T(uw.$$.fragment,bL),bL.forEach(t),qQr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(u$.$$.fragment,fi),jQr=i(fi),p0e=n(fi,"P",{});var ojt=s(p0e);DQr=r(ojt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ojt.forEach(t),GQr=i(fi),An=n(fi,"P",{});var vL=s(An);OQr=r(vL,"The model class to instantiate is selected based on the "),_0e=n(vL,"CODE",{});var rjt=s(_0e);VQr=r(rjt,"model_type"),rjt.forEach(t),XQr=r(vL,` property of the config object (either
passed as an argument or loaded from `),u0e=n(vL,"CODE",{});var tjt=s(u0e);zQr=r(tjt,"pretrained_model_name_or_path"),tjt.forEach(t),QQr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=n(vL,"CODE",{});var ajt=s(b0e);WQr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),HQr=r(vL,":"),vL.forEach(t),UQr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);bw=n(Ge,"LI",{});var $Ge=s(bw);v0e=n($Ge,"STRONG",{});var njt=s(v0e);JQr=r(njt,"albert"),njt.forEach(t),YQr=r($Ge," \u2014 "),jee=n($Ge,"A",{href:!0});var sjt=s(jee);KQr=r(sjt,"FlaxAlbertForQuestionAnswering"),sjt.forEach(t),ZQr=r($Ge," (ALBERT model)"),$Ge.forEach(t),eWr=i(Ge),vw=n(Ge,"LI",{});var kGe=s(vw);F0e=n(kGe,"STRONG",{});var ljt=s(F0e);oWr=r(ljt,"bart"),ljt.forEach(t),rWr=r(kGe," \u2014 "),Dee=n(kGe,"A",{href:!0});var ijt=s(Dee);tWr=r(ijt,"FlaxBartForQuestionAnswering"),ijt.forEach(t),aWr=r(kGe," (BART model)"),kGe.forEach(t),nWr=i(Ge),Fw=n(Ge,"LI",{});var SGe=s(Fw);T0e=n(SGe,"STRONG",{});var djt=s(T0e);sWr=r(djt,"bert"),djt.forEach(t),lWr=r(SGe," \u2014 "),Gee=n(SGe,"A",{href:!0});var cjt=s(Gee);iWr=r(cjt,"FlaxBertForQuestionAnswering"),cjt.forEach(t),dWr=r(SGe," (BERT model)"),SGe.forEach(t),cWr=i(Ge),Tw=n(Ge,"LI",{});var RGe=s(Tw);M0e=n(RGe,"STRONG",{});var fjt=s(M0e);fWr=r(fjt,"big_bird"),fjt.forEach(t),mWr=r(RGe," \u2014 "),Oee=n(RGe,"A",{href:!0});var mjt=s(Oee);gWr=r(mjt,"FlaxBigBirdForQuestionAnswering"),mjt.forEach(t),hWr=r(RGe," (BigBird model)"),RGe.forEach(t),pWr=i(Ge),Mw=n(Ge,"LI",{});var PGe=s(Mw);E0e=n(PGe,"STRONG",{});var gjt=s(E0e);_Wr=r(gjt,"distilbert"),gjt.forEach(t),uWr=r(PGe," \u2014 "),Vee=n(PGe,"A",{href:!0});var hjt=s(Vee);bWr=r(hjt,"FlaxDistilBertForQuestionAnswering"),hjt.forEach(t),vWr=r(PGe," (DistilBERT model)"),PGe.forEach(t),FWr=i(Ge),Ew=n(Ge,"LI",{});var BGe=s(Ew);C0e=n(BGe,"STRONG",{});var pjt=s(C0e);TWr=r(pjt,"electra"),pjt.forEach(t),MWr=r(BGe," \u2014 "),Xee=n(BGe,"A",{href:!0});var _jt=s(Xee);EWr=r(_jt,"FlaxElectraForQuestionAnswering"),_jt.forEach(t),CWr=r(BGe," (ELECTRA model)"),BGe.forEach(t),wWr=i(Ge),Cw=n(Ge,"LI",{});var IGe=s(Cw);w0e=n(IGe,"STRONG",{});var ujt=s(w0e);AWr=r(ujt,"mbart"),ujt.forEach(t),LWr=r(IGe," \u2014 "),zee=n(IGe,"A",{href:!0});var bjt=s(zee);yWr=r(bjt,"FlaxMBartForQuestionAnswering"),bjt.forEach(t),xWr=r(IGe," (mBART model)"),IGe.forEach(t),$Wr=i(Ge),ww=n(Ge,"LI",{});var NGe=s(ww);A0e=n(NGe,"STRONG",{});var vjt=s(A0e);kWr=r(vjt,"roberta"),vjt.forEach(t),SWr=r(NGe," \u2014 "),Qee=n(NGe,"A",{href:!0});var Fjt=s(Qee);RWr=r(Fjt,"FlaxRobertaForQuestionAnswering"),Fjt.forEach(t),PWr=r(NGe," (RoBERTa model)"),NGe.forEach(t),BWr=i(Ge),Aw=n(Ge,"LI",{});var qGe=s(Aw);L0e=n(qGe,"STRONG",{});var Tjt=s(L0e);IWr=r(Tjt,"roformer"),Tjt.forEach(t),NWr=r(qGe," \u2014 "),Wee=n(qGe,"A",{href:!0});var Mjt=s(Wee);qWr=r(Mjt,"FlaxRoFormerForQuestionAnswering"),Mjt.forEach(t),jWr=r(qGe," (RoFormer model)"),qGe.forEach(t),DWr=i(Ge),Lw=n(Ge,"LI",{});var jGe=s(Lw);y0e=n(jGe,"STRONG",{});var Ejt=s(y0e);GWr=r(Ejt,"xlm-roberta"),Ejt.forEach(t),OWr=r(jGe," \u2014 "),Hee=n(jGe,"A",{href:!0});var Cjt=s(Hee);VWr=r(Cjt,"FlaxXLMRobertaForQuestionAnswering"),Cjt.forEach(t),XWr=r(jGe," (XLM-RoBERTa model)"),jGe.forEach(t),Ge.forEach(t),zWr=i(fi),T(yw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),oXe=i(f),ff=n(f,"H2",{class:!0});var cQe=s(ff);xw=n(cQe,"A",{id:!0,class:!0,href:!0});var wjt=s(xw);x0e=n(wjt,"SPAN",{});var Ajt=s(x0e);T(b$.$$.fragment,Ajt),Ajt.forEach(t),wjt.forEach(t),QWr=i(cQe),$0e=n(cQe,"SPAN",{});var Ljt=s($0e);WWr=r(Ljt,"FlaxAutoModelForTokenClassification"),Ljt.forEach(t),cQe.forEach(t),rXe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(v$.$$.fragment,mi),HWr=i(mi),mf=n(mi,"P",{});var hte=s(mf);UWr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uee=n(hte,"A",{href:!0});var yjt=s(Uee);JWr=r(yjt,"from_pretrained()"),yjt.forEach(t),YWr=r(hte," class method or the "),Jee=n(hte,"A",{href:!0});var xjt=s(Jee);KWr=r(xjt,"from_config()"),xjt.forEach(t),ZWr=r(hte,` class
method.`),hte.forEach(t),eHr=i(mi),F$=n(mi,"P",{});var fQe=s(F$);oHr=r(fQe,"This class cannot be instantiated directly using "),k0e=n(fQe,"CODE",{});var $jt=s(k0e);rHr=r($jt,"__init__()"),$jt.forEach(t),tHr=r(fQe," (throws an error)."),fQe.forEach(t),aHr=i(mi),Yt=n(mi,"DIV",{class:!0});var FL=s(Yt);T(T$.$$.fragment,FL),nHr=i(FL),S0e=n(FL,"P",{});var kjt=s(S0e);sHr=r(kjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kjt.forEach(t),lHr=i(FL),gf=n(FL,"P",{});var pte=s(gf);iHr=r(pte,`Note:
Loading a model from its configuration file does `),R0e=n(pte,"STRONG",{});var Sjt=s(R0e);dHr=r(Sjt,"not"),Sjt.forEach(t),cHr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(pte,"A",{href:!0});var Rjt=s(Yee);fHr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),mHr=r(pte," to load the model weights."),pte.forEach(t),gHr=i(FL),T($w.$$.fragment,FL),FL.forEach(t),hHr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(M$.$$.fragment,gi),pHr=i(gi),P0e=n(gi,"P",{});var Pjt=s(P0e);_Hr=r(Pjt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pjt.forEach(t),uHr=i(gi),Ln=n(gi,"P",{});var TL=s(Ln);bHr=r(TL,"The model class to instantiate is selected based on the "),B0e=n(TL,"CODE",{});var Bjt=s(B0e);vHr=r(Bjt,"model_type"),Bjt.forEach(t),FHr=r(TL,` property of the config object (either
passed as an argument or loaded from `),I0e=n(TL,"CODE",{});var Ijt=s(I0e);THr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),MHr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(TL,"CODE",{});var Njt=s(N0e);EHr=r(Njt,"pretrained_model_name_or_path"),Njt.forEach(t),CHr=r(TL,":"),TL.forEach(t),wHr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);kw=n(To,"LI",{});var DGe=s(kw);q0e=n(DGe,"STRONG",{});var qjt=s(q0e);AHr=r(qjt,"albert"),qjt.forEach(t),LHr=r(DGe," \u2014 "),Kee=n(DGe,"A",{href:!0});var jjt=s(Kee);yHr=r(jjt,"FlaxAlbertForTokenClassification"),jjt.forEach(t),xHr=r(DGe," (ALBERT model)"),DGe.forEach(t),$Hr=i(To),Sw=n(To,"LI",{});var GGe=s(Sw);j0e=n(GGe,"STRONG",{});var Djt=s(j0e);kHr=r(Djt,"bert"),Djt.forEach(t),SHr=r(GGe," \u2014 "),Zee=n(GGe,"A",{href:!0});var Gjt=s(Zee);RHr=r(Gjt,"FlaxBertForTokenClassification"),Gjt.forEach(t),PHr=r(GGe," (BERT model)"),GGe.forEach(t),BHr=i(To),Rw=n(To,"LI",{});var OGe=s(Rw);D0e=n(OGe,"STRONG",{});var Ojt=s(D0e);IHr=r(Ojt,"big_bird"),Ojt.forEach(t),NHr=r(OGe," \u2014 "),eoe=n(OGe,"A",{href:!0});var Vjt=s(eoe);qHr=r(Vjt,"FlaxBigBirdForTokenClassification"),Vjt.forEach(t),jHr=r(OGe," (BigBird model)"),OGe.forEach(t),DHr=i(To),Pw=n(To,"LI",{});var VGe=s(Pw);G0e=n(VGe,"STRONG",{});var Xjt=s(G0e);GHr=r(Xjt,"distilbert"),Xjt.forEach(t),OHr=r(VGe," \u2014 "),ooe=n(VGe,"A",{href:!0});var zjt=s(ooe);VHr=r(zjt,"FlaxDistilBertForTokenClassification"),zjt.forEach(t),XHr=r(VGe," (DistilBERT model)"),VGe.forEach(t),zHr=i(To),Bw=n(To,"LI",{});var XGe=s(Bw);O0e=n(XGe,"STRONG",{});var Qjt=s(O0e);QHr=r(Qjt,"electra"),Qjt.forEach(t),WHr=r(XGe," \u2014 "),roe=n(XGe,"A",{href:!0});var Wjt=s(roe);HHr=r(Wjt,"FlaxElectraForTokenClassification"),Wjt.forEach(t),UHr=r(XGe," (ELECTRA model)"),XGe.forEach(t),JHr=i(To),Iw=n(To,"LI",{});var zGe=s(Iw);V0e=n(zGe,"STRONG",{});var Hjt=s(V0e);YHr=r(Hjt,"roberta"),Hjt.forEach(t),KHr=r(zGe," \u2014 "),toe=n(zGe,"A",{href:!0});var Ujt=s(toe);ZHr=r(Ujt,"FlaxRobertaForTokenClassification"),Ujt.forEach(t),eUr=r(zGe," (RoBERTa model)"),zGe.forEach(t),oUr=i(To),Nw=n(To,"LI",{});var QGe=s(Nw);X0e=n(QGe,"STRONG",{});var Jjt=s(X0e);rUr=r(Jjt,"roformer"),Jjt.forEach(t),tUr=r(QGe," \u2014 "),aoe=n(QGe,"A",{href:!0});var Yjt=s(aoe);aUr=r(Yjt,"FlaxRoFormerForTokenClassification"),Yjt.forEach(t),nUr=r(QGe," (RoFormer model)"),QGe.forEach(t),sUr=i(To),qw=n(To,"LI",{});var WGe=s(qw);z0e=n(WGe,"STRONG",{});var Kjt=s(z0e);lUr=r(Kjt,"xlm-roberta"),Kjt.forEach(t),iUr=r(WGe," \u2014 "),noe=n(WGe,"A",{href:!0});var Zjt=s(noe);dUr=r(Zjt,"FlaxXLMRobertaForTokenClassification"),Zjt.forEach(t),cUr=r(WGe," (XLM-RoBERTa model)"),WGe.forEach(t),To.forEach(t),fUr=i(gi),T(jw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),tXe=i(f),hf=n(f,"H2",{class:!0});var mQe=s(hf);Dw=n(mQe,"A",{id:!0,class:!0,href:!0});var eDt=s(Dw);Q0e=n(eDt,"SPAN",{});var oDt=s(Q0e);T(E$.$$.fragment,oDt),oDt.forEach(t),eDt.forEach(t),mUr=i(mQe),W0e=n(mQe,"SPAN",{});var rDt=s(W0e);gUr=r(rDt,"FlaxAutoModelForMultipleChoice"),rDt.forEach(t),mQe.forEach(t),aXe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(C$.$$.fragment,hi),hUr=i(hi),pf=n(hi,"P",{});var _te=s(pf);pUr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),soe=n(_te,"A",{href:!0});var tDt=s(soe);_Ur=r(tDt,"from_pretrained()"),tDt.forEach(t),uUr=r(_te," class method or the "),loe=n(_te,"A",{href:!0});var aDt=s(loe);bUr=r(aDt,"from_config()"),aDt.forEach(t),vUr=r(_te,` class
method.`),_te.forEach(t),FUr=i(hi),w$=n(hi,"P",{});var gQe=s(w$);TUr=r(gQe,"This class cannot be instantiated directly using "),H0e=n(gQe,"CODE",{});var nDt=s(H0e);MUr=r(nDt,"__init__()"),nDt.forEach(t),EUr=r(gQe," (throws an error)."),gQe.forEach(t),CUr=i(hi),Kt=n(hi,"DIV",{class:!0});var ML=s(Kt);T(A$.$$.fragment,ML),wUr=i(ML),U0e=n(ML,"P",{});var sDt=s(U0e);AUr=r(sDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sDt.forEach(t),LUr=i(ML),_f=n(ML,"P",{});var ute=s(_f);yUr=r(ute,`Note:
Loading a model from its configuration file does `),J0e=n(ute,"STRONG",{});var lDt=s(J0e);xUr=r(lDt,"not"),lDt.forEach(t),$Ur=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(ute,"A",{href:!0});var iDt=s(ioe);kUr=r(iDt,"from_pretrained()"),iDt.forEach(t),SUr=r(ute," to load the model weights."),ute.forEach(t),RUr=i(ML),T(Gw.$$.fragment,ML),ML.forEach(t),PUr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(L$.$$.fragment,pi),BUr=i(pi),Y0e=n(pi,"P",{});var dDt=s(Y0e);IUr=r(dDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dDt.forEach(t),NUr=i(pi),yn=n(pi,"P",{});var EL=s(yn);qUr=r(EL,"The model class to instantiate is selected based on the "),K0e=n(EL,"CODE",{});var cDt=s(K0e);jUr=r(cDt,"model_type"),cDt.forEach(t),DUr=r(EL,` property of the config object (either
passed as an argument or loaded from `),Z0e=n(EL,"CODE",{});var fDt=s(Z0e);GUr=r(fDt,"pretrained_model_name_or_path"),fDt.forEach(t),OUr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=n(EL,"CODE",{});var mDt=s(ewe);VUr=r(mDt,"pretrained_model_name_or_path"),mDt.forEach(t),XUr=r(EL,":"),EL.forEach(t),zUr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);Ow=n(Mo,"LI",{});var HGe=s(Ow);owe=n(HGe,"STRONG",{});var gDt=s(owe);QUr=r(gDt,"albert"),gDt.forEach(t),WUr=r(HGe," \u2014 "),doe=n(HGe,"A",{href:!0});var hDt=s(doe);HUr=r(hDt,"FlaxAlbertForMultipleChoice"),hDt.forEach(t),UUr=r(HGe," (ALBERT model)"),HGe.forEach(t),JUr=i(Mo),Vw=n(Mo,"LI",{});var UGe=s(Vw);rwe=n(UGe,"STRONG",{});var pDt=s(rwe);YUr=r(pDt,"bert"),pDt.forEach(t),KUr=r(UGe," \u2014 "),coe=n(UGe,"A",{href:!0});var _Dt=s(coe);ZUr=r(_Dt,"FlaxBertForMultipleChoice"),_Dt.forEach(t),eJr=r(UGe," (BERT model)"),UGe.forEach(t),oJr=i(Mo),Xw=n(Mo,"LI",{});var JGe=s(Xw);twe=n(JGe,"STRONG",{});var uDt=s(twe);rJr=r(uDt,"big_bird"),uDt.forEach(t),tJr=r(JGe," \u2014 "),foe=n(JGe,"A",{href:!0});var bDt=s(foe);aJr=r(bDt,"FlaxBigBirdForMultipleChoice"),bDt.forEach(t),nJr=r(JGe," (BigBird model)"),JGe.forEach(t),sJr=i(Mo),zw=n(Mo,"LI",{});var YGe=s(zw);awe=n(YGe,"STRONG",{});var vDt=s(awe);lJr=r(vDt,"distilbert"),vDt.forEach(t),iJr=r(YGe," \u2014 "),moe=n(YGe,"A",{href:!0});var FDt=s(moe);dJr=r(FDt,"FlaxDistilBertForMultipleChoice"),FDt.forEach(t),cJr=r(YGe," (DistilBERT model)"),YGe.forEach(t),fJr=i(Mo),Qw=n(Mo,"LI",{});var KGe=s(Qw);nwe=n(KGe,"STRONG",{});var TDt=s(nwe);mJr=r(TDt,"electra"),TDt.forEach(t),gJr=r(KGe," \u2014 "),goe=n(KGe,"A",{href:!0});var MDt=s(goe);hJr=r(MDt,"FlaxElectraForMultipleChoice"),MDt.forEach(t),pJr=r(KGe," (ELECTRA model)"),KGe.forEach(t),_Jr=i(Mo),Ww=n(Mo,"LI",{});var ZGe=s(Ww);swe=n(ZGe,"STRONG",{});var EDt=s(swe);uJr=r(EDt,"roberta"),EDt.forEach(t),bJr=r(ZGe," \u2014 "),hoe=n(ZGe,"A",{href:!0});var CDt=s(hoe);vJr=r(CDt,"FlaxRobertaForMultipleChoice"),CDt.forEach(t),FJr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),TJr=i(Mo),Hw=n(Mo,"LI",{});var eOe=s(Hw);lwe=n(eOe,"STRONG",{});var wDt=s(lwe);MJr=r(wDt,"roformer"),wDt.forEach(t),EJr=r(eOe," \u2014 "),poe=n(eOe,"A",{href:!0});var ADt=s(poe);CJr=r(ADt,"FlaxRoFormerForMultipleChoice"),ADt.forEach(t),wJr=r(eOe," (RoFormer model)"),eOe.forEach(t),AJr=i(Mo),Uw=n(Mo,"LI",{});var oOe=s(Uw);iwe=n(oOe,"STRONG",{});var LDt=s(iwe);LJr=r(LDt,"xlm-roberta"),LDt.forEach(t),yJr=r(oOe," \u2014 "),_oe=n(oOe,"A",{href:!0});var yDt=s(_oe);xJr=r(yDt,"FlaxXLMRobertaForMultipleChoice"),yDt.forEach(t),$Jr=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),Mo.forEach(t),kJr=i(pi),T(Jw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),nXe=i(f),uf=n(f,"H2",{class:!0});var hQe=s(uf);Yw=n(hQe,"A",{id:!0,class:!0,href:!0});var xDt=s(Yw);dwe=n(xDt,"SPAN",{});var $Dt=s(dwe);T(y$.$$.fragment,$Dt),$Dt.forEach(t),xDt.forEach(t),SJr=i(hQe),cwe=n(hQe,"SPAN",{});var kDt=s(cwe);RJr=r(kDt,"FlaxAutoModelForNextSentencePrediction"),kDt.forEach(t),hQe.forEach(t),sXe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(x$.$$.fragment,_i),PJr=i(_i),bf=n(_i,"P",{});var bte=s(bf);BJr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uoe=n(bte,"A",{href:!0});var SDt=s(uoe);IJr=r(SDt,"from_pretrained()"),SDt.forEach(t),NJr=r(bte," class method or the "),boe=n(bte,"A",{href:!0});var RDt=s(boe);qJr=r(RDt,"from_config()"),RDt.forEach(t),jJr=r(bte,` class
method.`),bte.forEach(t),DJr=i(_i),$$=n(_i,"P",{});var pQe=s($$);GJr=r(pQe,"This class cannot be instantiated directly using "),fwe=n(pQe,"CODE",{});var PDt=s(fwe);OJr=r(PDt,"__init__()"),PDt.forEach(t),VJr=r(pQe," (throws an error)."),pQe.forEach(t),XJr=i(_i),Zt=n(_i,"DIV",{class:!0});var CL=s(Zt);T(k$.$$.fragment,CL),zJr=i(CL),mwe=n(CL,"P",{});var BDt=s(mwe);QJr=r(BDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BDt.forEach(t),WJr=i(CL),vf=n(CL,"P",{});var vte=s(vf);HJr=r(vte,`Note:
Loading a model from its configuration file does `),gwe=n(vte,"STRONG",{});var IDt=s(gwe);UJr=r(IDt,"not"),IDt.forEach(t),JJr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(vte,"A",{href:!0});var NDt=s(voe);YJr=r(NDt,"from_pretrained()"),NDt.forEach(t),KJr=r(vte," to load the model weights."),vte.forEach(t),ZJr=i(CL),T(Kw.$$.fragment,CL),CL.forEach(t),eYr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(S$.$$.fragment,ui),oYr=i(ui),hwe=n(ui,"P",{});var qDt=s(hwe);rYr=r(qDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qDt.forEach(t),tYr=i(ui),xn=n(ui,"P",{});var wL=s(xn);aYr=r(wL,"The model class to instantiate is selected based on the "),pwe=n(wL,"CODE",{});var jDt=s(pwe);nYr=r(jDt,"model_type"),jDt.forEach(t),sYr=r(wL,` property of the config object (either
passed as an argument or loaded from `),_we=n(wL,"CODE",{});var DDt=s(_we);lYr=r(DDt,"pretrained_model_name_or_path"),DDt.forEach(t),iYr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uwe=n(wL,"CODE",{});var GDt=s(uwe);dYr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),cYr=r(wL,":"),wL.forEach(t),fYr=i(ui),bwe=n(ui,"UL",{});var ODt=s(bwe);Zw=n(ODt,"LI",{});var rOe=s(Zw);vwe=n(rOe,"STRONG",{});var VDt=s(vwe);mYr=r(VDt,"bert"),VDt.forEach(t),gYr=r(rOe," \u2014 "),Foe=n(rOe,"A",{href:!0});var XDt=s(Foe);hYr=r(XDt,"FlaxBertForNextSentencePrediction"),XDt.forEach(t),pYr=r(rOe," (BERT model)"),rOe.forEach(t),ODt.forEach(t),_Yr=i(ui),T(eA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),lXe=i(f),Ff=n(f,"H2",{class:!0});var _Qe=s(Ff);oA=n(_Qe,"A",{id:!0,class:!0,href:!0});var zDt=s(oA);Fwe=n(zDt,"SPAN",{});var QDt=s(Fwe);T(R$.$$.fragment,QDt),QDt.forEach(t),zDt.forEach(t),uYr=i(_Qe),Twe=n(_Qe,"SPAN",{});var WDt=s(Twe);bYr=r(WDt,"FlaxAutoModelForImageClassification"),WDt.forEach(t),_Qe.forEach(t),iXe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(P$.$$.fragment,bi),vYr=i(bi),Tf=n(bi,"P",{});var Fte=s(Tf);FYr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Toe=n(Fte,"A",{href:!0});var HDt=s(Toe);TYr=r(HDt,"from_pretrained()"),HDt.forEach(t),MYr=r(Fte," class method or the "),Moe=n(Fte,"A",{href:!0});var UDt=s(Moe);EYr=r(UDt,"from_config()"),UDt.forEach(t),CYr=r(Fte,` class
method.`),Fte.forEach(t),wYr=i(bi),B$=n(bi,"P",{});var uQe=s(B$);AYr=r(uQe,"This class cannot be instantiated directly using "),Mwe=n(uQe,"CODE",{});var JDt=s(Mwe);LYr=r(JDt,"__init__()"),JDt.forEach(t),yYr=r(uQe," (throws an error)."),uQe.forEach(t),xYr=i(bi),ea=n(bi,"DIV",{class:!0});var AL=s(ea);T(I$.$$.fragment,AL),$Yr=i(AL),Ewe=n(AL,"P",{});var YDt=s(Ewe);kYr=r(YDt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YDt.forEach(t),SYr=i(AL),Mf=n(AL,"P",{});var Tte=s(Mf);RYr=r(Tte,`Note:
Loading a model from its configuration file does `),Cwe=n(Tte,"STRONG",{});var KDt=s(Cwe);PYr=r(KDt,"not"),KDt.forEach(t),BYr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(Tte,"A",{href:!0});var ZDt=s(Eoe);IYr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),NYr=r(Tte," to load the model weights."),Tte.forEach(t),qYr=i(AL),T(rA.$$.fragment,AL),AL.forEach(t),jYr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(N$.$$.fragment,vi),DYr=i(vi),wwe=n(vi,"P",{});var eGt=s(wwe);GYr=r(eGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eGt.forEach(t),OYr=i(vi),$n=n(vi,"P",{});var LL=s($n);VYr=r(LL,"The model class to instantiate is selected based on the "),Awe=n(LL,"CODE",{});var oGt=s(Awe);XYr=r(oGt,"model_type"),oGt.forEach(t),zYr=r(LL,` property of the config object (either
passed as an argument or loaded from `),Lwe=n(LL,"CODE",{});var rGt=s(Lwe);QYr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),WYr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ywe=n(LL,"CODE",{});var tGt=s(ywe);HYr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),UYr=r(LL,":"),LL.forEach(t),JYr=i(vi),q$=n(vi,"UL",{});var bQe=s(q$);tA=n(bQe,"LI",{});var tOe=s(tA);xwe=n(tOe,"STRONG",{});var aGt=s(xwe);YYr=r(aGt,"beit"),aGt.forEach(t),KYr=r(tOe," \u2014 "),Coe=n(tOe,"A",{href:!0});var nGt=s(Coe);ZYr=r(nGt,"FlaxBeitForImageClassification"),nGt.forEach(t),eKr=r(tOe," (BEiT model)"),tOe.forEach(t),oKr=i(bQe),aA=n(bQe,"LI",{});var aOe=s(aA);$we=n(aOe,"STRONG",{});var sGt=s($we);rKr=r(sGt,"vit"),sGt.forEach(t),tKr=r(aOe," \u2014 "),woe=n(aOe,"A",{href:!0});var lGt=s(woe);aKr=r(lGt,"FlaxViTForImageClassification"),lGt.forEach(t),nKr=r(aOe," (ViT model)"),aOe.forEach(t),bQe.forEach(t),sKr=i(vi),T(nA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),dXe=i(f),Ef=n(f,"H2",{class:!0});var vQe=s(Ef);sA=n(vQe,"A",{id:!0,class:!0,href:!0});var iGt=s(sA);kwe=n(iGt,"SPAN",{});var dGt=s(kwe);T(j$.$$.fragment,dGt),dGt.forEach(t),iGt.forEach(t),lKr=i(vQe),Swe=n(vQe,"SPAN",{});var cGt=s(Swe);iKr=r(cGt,"FlaxAutoModelForVision2Seq"),cGt.forEach(t),vQe.forEach(t),cXe=i(f),wr=n(f,"DIV",{class:!0});var Fi=s(wr);T(D$.$$.fragment,Fi),dKr=i(Fi),Cf=n(Fi,"P",{});var Mte=s(Cf);cKr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aoe=n(Mte,"A",{href:!0});var fGt=s(Aoe);fKr=r(fGt,"from_pretrained()"),fGt.forEach(t),mKr=r(Mte," class method or the "),Loe=n(Mte,"A",{href:!0});var mGt=s(Loe);gKr=r(mGt,"from_config()"),mGt.forEach(t),hKr=r(Mte,` class
method.`),Mte.forEach(t),pKr=i(Fi),G$=n(Fi,"P",{});var FQe=s(G$);_Kr=r(FQe,"This class cannot be instantiated directly using "),Rwe=n(FQe,"CODE",{});var gGt=s(Rwe);uKr=r(gGt,"__init__()"),gGt.forEach(t),bKr=r(FQe," (throws an error)."),FQe.forEach(t),vKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var yL=s(oa);T(O$.$$.fragment,yL),FKr=i(yL),Pwe=n(yL,"P",{});var hGt=s(Pwe);TKr=r(hGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hGt.forEach(t),MKr=i(yL),wf=n(yL,"P",{});var Ete=s(wf);EKr=r(Ete,`Note:
Loading a model from its configuration file does `),Bwe=n(Ete,"STRONG",{});var pGt=s(Bwe);CKr=r(pGt,"not"),pGt.forEach(t),wKr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=n(Ete,"A",{href:!0});var _Gt=s(yoe);AKr=r(_Gt,"from_pretrained()"),_Gt.forEach(t),LKr=r(Ete," to load the model weights."),Ete.forEach(t),yKr=i(yL),T(lA.$$.fragment,yL),yL.forEach(t),xKr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(V$.$$.fragment,Ti),$Kr=i(Ti),Iwe=n(Ti,"P",{});var uGt=s(Iwe);kKr=r(uGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uGt.forEach(t),SKr=i(Ti),kn=n(Ti,"P",{});var xL=s(kn);RKr=r(xL,"The model class to instantiate is selected based on the "),Nwe=n(xL,"CODE",{});var bGt=s(Nwe);PKr=r(bGt,"model_type"),bGt.forEach(t),BKr=r(xL,` property of the config object (either
passed as an argument or loaded from `),qwe=n(xL,"CODE",{});var vGt=s(qwe);IKr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),NKr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=n(xL,"CODE",{});var FGt=s(jwe);qKr=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),jKr=r(xL,":"),xL.forEach(t),DKr=i(Ti),Dwe=n(Ti,"UL",{});var TGt=s(Dwe);iA=n(TGt,"LI",{});var nOe=s(iA);Gwe=n(nOe,"STRONG",{});var MGt=s(Gwe);GKr=r(MGt,"vision-encoder-decoder"),MGt.forEach(t),OKr=r(nOe," \u2014 "),xoe=n(nOe,"A",{href:!0});var EGt=s(xoe);VKr=r(EGt,"FlaxVisionEncoderDecoderModel"),EGt.forEach(t),XKr=r(nOe," (Vision Encoder decoder model)"),nOe.forEach(t),TGt.forEach(t),zKr=i(Ti),T(dA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(xVt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(hS,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(pS,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig"),c(_S,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig"),c(uS,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig"),c(bS,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig"),c(vS,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(FS,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig"),c(TS,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(MS,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ES,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(CS,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomConfig"),c(wS,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig"),c(AS,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig"),c(LS,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig"),c(yS,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig"),c(xS,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig"),c($S,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig"),c(kS,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig"),c(SS,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(RS,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(PS,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(BS,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig"),c(IS,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(NS,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(qS,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig"),c(jS,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig"),c(DS,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig"),c(GS,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig"),c(OS,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig"),c(VS,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig"),c(XS,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zS,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig"),c(QS,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig"),c(WS,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig"),c(HS,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig"),c(US,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig"),c(JS,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig"),c(YS,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config"),c(KS,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZS,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eR,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig"),c(oR,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig"),c(rR,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig"),c(tR,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig"),c(aR,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nR,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sR,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lR,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(iR,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig"),c(dR,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig"),c(cR,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig"),c(fR,"href","/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Config"),c(mR,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig"),c(gR,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig"),c(hR,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config"),c(pR,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig"),c(_R,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uR,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig"),c(bR,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTConfig"),c(vR,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FR,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TR,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig"),c(MR,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config"),c(ER,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaConfig"),c(CR,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(wR,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(AR,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig"),c(LR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig"),c(yR,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig"),c(xR,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig"),c($R,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(kR,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(SR,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(RR,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagConfig"),c(PR,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmConfig"),c(BR,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig"),c(IR,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig"),c(NR,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig"),c(qR,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig"),c(jR,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig"),c(DR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig"),c(GR,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig"),c(OR,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig"),c(VR,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig"),c(XR,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig"),c(zR,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(QR,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(WR,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(HR,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig"),c(UR,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(JR,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig"),c(YR,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config"),c(KR,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig"),c(ZR,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(eP,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(oP,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig"),c(rP,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(tP,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(aP,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig"),c(nP,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig"),c(sP,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(lP,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(iP,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(dP,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig"),c(cP,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(fP,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mP,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(gP,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig"),c(hP,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig"),c(pP,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig"),c(_P,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(uP,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(bP,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(vP,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig"),c(FP,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig"),c(TP,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"id","transformers.AutoTokenizer"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(MP,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(EP,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(CP,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizer"),c(AP,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizerFast"),c(LP,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizer"),c(yP,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(xP,"href","/docs/transformers/pr_17313/en/model_doc/bartpho#transformers.BartphoTokenizer"),c($P,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(kP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(RP,"href","/docs/transformers/pr_17313/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(PP,"href","/docs/transformers/pr_17313/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(BP,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(IP,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(NP,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qP,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(jP,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(DP,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(GP,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(OP,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(VP,"href","/docs/transformers/pr_17313/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(XP,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizer"),c(zP,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineTokenizer"),c(WP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(HP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(UP,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(JP,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizer"),c(KP,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(eB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizer"),c(tB,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(nB,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(lB,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(dB,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(cB,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizer"),c(fB,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(mB,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(gB,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizer"),c(hB,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(pB,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(_B,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizer"),c(uB,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(bB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MB,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(EB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wB,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(AB,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(LB,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizer"),c(yB,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($B,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(RB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(BB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(NB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(qB,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jB,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(DB,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizer"),c(GB,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizerFast"),c(OB,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizer"),c(VB,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(XB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(zB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(QB,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeTokenizer"),c(WB,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(HB,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(UB,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(JB,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianTokenizer"),c(YB,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizer"),c(KB,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(eI,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(oI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(rI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(tI,"href","/docs/transformers/pr_17313/en/model_doc/mluke#transformers.MLukeTokenizer"),c(aI,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(nI,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(lI,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(iI,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(dI,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(cI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(fI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(gI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(pI,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(_I,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uI,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bI,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vI,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(FI,"href","/docs/transformers/pr_17313/en/model_doc/phobert#transformers.PhobertTokenizer"),c(TI,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartTokenizer"),c(MI,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(CI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(wI,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagTokenizer"),c(AI,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizer"),c(LI,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizerFast"),c(yI,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizer"),c(xI,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c($I,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizer"),c(kI,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(SI,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RI,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BI,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(II,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(NI,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(qI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(jI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DI,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizer"),c(GI,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(OI,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(VI,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(zI,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(QI,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasTokenizer"),c(WI,"href","/docs/transformers/pr_17313/en/model_doc/tapex#transformers.TapexTokenizer"),c(HI,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(UI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(JI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(YI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(KI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(rN,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizer"),c(tN,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(aN,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMTokenizer"),c(nN,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(sN,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(lN,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dN,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cN,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(fN,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mN,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(gN,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoFeatureExtractor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(hN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(pN,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FN,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yN,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(kN,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WN,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"id","transformers.AutoProcessor"),c(cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(HN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(UN,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(JN,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(YN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(KN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(ZN,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(eq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rq,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(tq,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(aq,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRProcessor"),c(nq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lq,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltProcessor"),c(iq,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(dq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sp,"id","transformers.AutoModel"),c(Sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sp,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(mq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pq,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel"),c(_q,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel"),c(uq,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel"),c(bq,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(vq,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Fq,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel"),c(Tq,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Mq,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Eq,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Cq,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomModel"),c(wq,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel"),c(Aq,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel"),c(Lq,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel"),c(yq,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel"),c(xq,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel"),c($q,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel"),c(kq,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel"),c(Sq,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Rq,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Pq,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Bq,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel"),c(Iq,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Nq,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qq,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel"),c(jq,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel"),c(Dq,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel"),c(Gq,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Oq,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel"),c(Vq,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel"),c(Xq,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel"),c(zq,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel"),c(Qq,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel"),c(Wq,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel"),c(Hq,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel"),c(Uq,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Jq,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel"),c(Yq,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model"),c(Kq,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Zq,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(ej,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel"),c(oj,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel"),c(rj,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel"),c(tj,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel"),c(aj,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(nj,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(sj,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(lj,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(ij,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel"),c(dj,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitModel"),c(cj,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel"),c(fj,"href","/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5Model"),c(mj,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel"),c(gj,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel"),c(hj,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model"),c(pj,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel"),c(_j,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel"),c(uj,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel"),c(bj,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTModel"),c(vj,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Fj,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Tj,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel"),c(Mj,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model"),c(Ej,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaModel"),c(Cj,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel"),c(wj,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Aj,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel"),c(Lj,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel"),c(yj,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel"),c(xj,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel"),c($j,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel"),c(kj,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Sj,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Rj,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel"),c(Pj,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel"),c(Bj,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel"),c(Ij,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel"),c(Nj,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(qj,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel"),c(jj,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel"),c(Dj,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel"),c(Gj,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel"),c(Oj,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel"),c(Vj,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Xj,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel"),c(zj,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Qj,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel"),c(Wj,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model"),c(Hj,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel"),c(Uj,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Jj,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Yj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Kj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Zj,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel"),c(eD,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel"),c(oD,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(rD,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel"),c(tD,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel"),c(aD,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(nD,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(sD,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(lD,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel"),c(iD,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel"),c(dD,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel"),c(cD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(fD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gD,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel"),c(hD,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel"),c(pD,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"id","transformers.AutoModelForPreTraining"),c(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bu,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(_D,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining"),c(FD,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining"),c(MD,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ED,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForCausalLM"),c(CD,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(AD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LD,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xD,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining"),c(kD,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining"),c(RD,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining"),c(PD,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ID,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ND,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jD,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(DD,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(GD,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(OD,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(VD,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(XD,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(zD,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(QD,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(WD,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(UD,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KD,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZD,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(eG,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(oG,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rG,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tG,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aG,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nG,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iG,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x1,"id","transformers.AutoModelForCausalLM"),c(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x1,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(dG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM"),c(gG,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel"),c(hG,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(pG,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(_G,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(uG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vG,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FG,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(TG,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MG,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(EG,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM"),c(CG,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wG,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(AG,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(LG,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(yG,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM"),c(xG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM"),c($G,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kG,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SG,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM"),c(RG,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(PG,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(BG,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(IG,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(NG,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(qG,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jG,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(DG,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(GG,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(OG,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VG,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(XG,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zG,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(WG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(UG,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.AutoModelForMaskedLM"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(JG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tO,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nO,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sO,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lO,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iO,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(mO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_O,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uO,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(FO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TO,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(MO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(EO,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(CO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(AO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(LO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(xO,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($O,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kO,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PO,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForSeq2SeqLM"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(BO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(VO,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17313/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel"),c(HO,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForSequenceClassification"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(oV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification"),c($V,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cb,"id","transformers.AutoModelForMultipleChoice"),c(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cb,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($X,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(av,"id","transformers.AutoModelForNextSentencePrediction"),c(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(av,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(SX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(IX,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(NX,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(qX,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jX,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(DX,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForTokenClassification"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(GX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification"),c(QX,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WX,"href","/docs/transformers/pr_17313/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(HX,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UX,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JX,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KX,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ez,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oz,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rz,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tz,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(az,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nz,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sz,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lz,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iz,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dz,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cz,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fz,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mz,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gz,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hz,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(pz,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_z,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uz,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bz,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vz,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wz,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForQuestionAnswering"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Vz,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17313/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pQ,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForTableQuestionAnswering"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForImageClassification"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification"),c(CQ,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wQ,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AQ,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(LQ,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification"),c(yQ,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xQ,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($Q,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassification"),c(kQ,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(SQ,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RQ,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PQ,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BQ,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IQ,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NQ,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qQ,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jQ,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification"),c(DQ,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification"),c(GQ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForVision2Seq"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForAudioClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForAudioFrameClassification"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(iW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(pW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForCTC"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(_W,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(FW,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC"),c(TW,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTForCTC"),c(MW,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC"),c(EW,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(LW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(yW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(xW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(RW,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.AutoModelForAudioXVector"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(PW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(jW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(DW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(GW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.AutoModelForMaskedImageModeling"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(OW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QW,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WW,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A7,"id","transformers.AutoModelForObjectDetection"),c(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A7,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KW,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.AutoModelForImageSegmentation"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.AutoModelForSemanticSegmentation"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(tH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lH,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iH,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dH,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.AutoModelForInstanceSegmentation"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(cH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.TFAutoModel"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(hH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel"),c(bH,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel"),c(vH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel"),c(FH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(TH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(MH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel"),c(EH,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel"),c(CH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel"),c(wH,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel"),c(AH,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LH,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(yH,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel"),c(xH,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c($H,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(kH,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(SH,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel"),c(RH,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(PH,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel"),c(BH,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(IH,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model"),c(NH,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel"),c(qH,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel"),c(jH,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(DH,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel"),c(GH,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel"),c(OH,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel"),c(VH,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel"),c(XH,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel"),c(zH,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QH,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel"),c(WH,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model"),c(HH,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(UH,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTModel"),c(JH,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel"),c(KH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eU,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oU,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel"),c(rU,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model"),c(tU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel"),c(aU,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nU,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel"),c(sU,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lU,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel"),c(dU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForPreTraining"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(fU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pU,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bU,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(TU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(EU,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CU,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wU,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(AU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(LU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(yU,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($U,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SU,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(RU,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(PU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(IU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForCausalLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(NU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(GU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(OU,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VU,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XU,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zU,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QU,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(WU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(HU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(UU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(JU,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.TFAutoModelForImageClassification"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(tJ,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(aJ,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(nJ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForMaskedLM"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_J,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(IJ,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel"),c(qJ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForSequenceClassification"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForMultipleChoice"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(uY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(TY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(MY,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(EY,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(NY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(GY,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(OY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForTokenClassification"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(QY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(YY,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(eK,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(oK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(rK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(tK,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(nK,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(sK,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(lK,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(dK,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(fK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(mK,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(gK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(hK,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForQuestionAnswering"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LK,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(IK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.TFAutoModelForVision2Seq"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(qK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModel"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel"),c(JK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel"),c(YK,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel"),c(KK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel"),c(ZK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(eZ,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(oZ,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(rZ,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel"),c(tZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(aZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel"),c(nZ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(sZ,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(lZ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(iZ,"href","/docs/transformers/pr_17313/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(dZ,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel"),c(cZ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fZ,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mZ,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTModel"),c(gZ,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(hZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(pZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_Z,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model"),c(uZ,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(bZ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel"),c(vZ,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(FZ,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(TZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForCausalLM"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(AZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(xZ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c($Z,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(kZ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(SZ,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(RZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PZ,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.FlaxAutoModelForPreTraining"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(BZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jZ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VZ,"href","/docs/transformers/pr_17313/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HZ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(JZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForMaskedLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(YZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(oee,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(tee,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(aee,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(nee,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(see,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lee,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iee,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dee,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(cee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hee,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pee,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uee,"href","/docs/transformers/pr_17313/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vee,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(Eee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aee,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(yee,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xee,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($ee,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(See,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(Iee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Dee,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Gee,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Oee,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Vee,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Xee,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zee,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.FlaxAutoModelForTokenClassification"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Zee,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eoe,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ooe,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(roe,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(toe,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aoe,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(noe,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(soe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(loe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ioe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(doe,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(coe,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(foe,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(moe,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(goe,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(poe,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(uoe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oA,"id","transformers.FlaxAutoModelForImageClassification"),c(oA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(Toe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(woe,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sA,"id","transformers.FlaxAutoModelForVision2Seq"),c(sA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(Aoe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Loe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yoe,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xoe,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,u),b(f,at,u),e(at,Ei),e(at,Ci),e(Ci,$L),e(at,$f),b(f,Oe,u),b(f,Qe,u),e(Qe,wi),e(Qe,Rn),e(Rn,kL),e(Qe,Pn),e(Qe,Bn),e(Bn,SL),e(Qe,Ai),e(Qe,In),e(In,RL),e(Qe,Li),b(f,kf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,iS),e(Ae,yi),e(yi,dS),e(Ae,cS),b(f,Co,u),b(f,$a,u),e($a,fS),e($a,Sf),e(Sf,mS),e($a,TQe),b(f,sOe,u),b(f,xi,u),e(xi,Rf),e(Rf,Cte),M(PL,Cte,null),e(xi,MQe),e(xi,wte),e(wte,EQe),b(f,lOe,u),b(f,Nn,u),e(Nn,CQe),e(Nn,Ate),e(Ate,wQe),e(Nn,AQe),e(Nn,Lte),e(Lte,LQe),e(Nn,yQe),b(f,iOe,u),M(BL,f,u),b(f,dOe,u),b(f,gS,u),e(gS,xQe),b(f,cOe,u),M(Pf,f,u),b(f,fOe,u),b(f,$i,u),e($i,Bf),e(Bf,yte),M(IL,yte,null),e($i,$Qe),e($i,xte),e(xte,kQe),b(f,mOe,u),b(f,wo,u),M(NL,wo,null),e(wo,SQe),e(wo,qL),e(qL,RQe),e(qL,hS),e(hS,PQe),e(qL,BQe),e(wo,IQe),e(wo,jL),e(jL,NQe),e(jL,$te),e($te,qQe),e(jL,jQe),e(wo,DQe),e(wo,Ar),M(DL,Ar,null),e(Ar,GQe),e(Ar,kte),e(kte,OQe),e(Ar,VQe),e(Ar,ki),e(ki,XQe),e(ki,Ste),e(Ste,zQe),e(ki,QQe),e(ki,Rte),e(Rte,WQe),e(ki,HQe),e(Ar,UQe),e(Ar,A),e(A,If),e(If,Pte),e(Pte,JQe),e(If,YQe),e(If,pS),e(pS,KQe),e(If,ZQe),e(A,eWe),e(A,Nf),e(Nf,Bte),e(Bte,oWe),e(Nf,rWe),e(Nf,_S),e(_S,tWe),e(Nf,aWe),e(A,nWe),e(A,qf),e(qf,Ite),e(Ite,sWe),e(qf,lWe),e(qf,uS),e(uS,iWe),e(qf,dWe),e(A,cWe),e(A,jf),e(jf,Nte),e(Nte,fWe),e(jf,mWe),e(jf,bS),e(bS,gWe),e(jf,hWe),e(A,pWe),e(A,Df),e(Df,qte),e(qte,_We),e(Df,uWe),e(Df,vS),e(vS,bWe),e(Df,vWe),e(A,FWe),e(A,Gf),e(Gf,jte),e(jte,TWe),e(Gf,MWe),e(Gf,FS),e(FS,EWe),e(Gf,CWe),e(A,wWe),e(A,Of),e(Of,Dte),e(Dte,AWe),e(Of,LWe),e(Of,TS),e(TS,yWe),e(Of,xWe),e(A,$We),e(A,Vf),e(Vf,Gte),e(Gte,kWe),e(Vf,SWe),e(Vf,MS),e(MS,RWe),e(Vf,PWe),e(A,BWe),e(A,Xf),e(Xf,Ote),e(Ote,IWe),e(Xf,NWe),e(Xf,ES),e(ES,qWe),e(Xf,jWe),e(A,DWe),e(A,zf),e(zf,Vte),e(Vte,GWe),e(zf,OWe),e(zf,CS),e(CS,VWe),e(zf,XWe),e(A,zWe),e(A,Qf),e(Qf,Xte),e(Xte,QWe),e(Qf,WWe),e(Qf,wS),e(wS,HWe),e(Qf,UWe),e(A,JWe),e(A,Wf),e(Wf,zte),e(zte,YWe),e(Wf,KWe),e(Wf,AS),e(AS,ZWe),e(Wf,eHe),e(A,oHe),e(A,Hf),e(Hf,Qte),e(Qte,rHe),e(Hf,tHe),e(Hf,LS),e(LS,aHe),e(Hf,nHe),e(A,sHe),e(A,Uf),e(Uf,Wte),e(Wte,lHe),e(Uf,iHe),e(Uf,yS),e(yS,dHe),e(Uf,cHe),e(A,fHe),e(A,Jf),e(Jf,Hte),e(Hte,mHe),e(Jf,gHe),e(Jf,xS),e(xS,hHe),e(Jf,pHe),e(A,_He),e(A,Yf),e(Yf,Ute),e(Ute,uHe),e(Yf,bHe),e(Yf,$S),e($S,vHe),e(Yf,FHe),e(A,THe),e(A,Kf),e(Kf,Jte),e(Jte,MHe),e(Kf,EHe),e(Kf,kS),e(kS,CHe),e(Kf,wHe),e(A,AHe),e(A,Zf),e(Zf,Yte),e(Yte,LHe),e(Zf,yHe),e(Zf,SS),e(SS,xHe),e(Zf,$He),e(A,kHe),e(A,em),e(em,Kte),e(Kte,SHe),e(em,RHe),e(em,RS),e(RS,PHe),e(em,BHe),e(A,IHe),e(A,om),e(om,Zte),e(Zte,NHe),e(om,qHe),e(om,PS),e(PS,jHe),e(om,DHe),e(A,GHe),e(A,rm),e(rm,eae),e(eae,OHe),e(rm,VHe),e(rm,BS),e(BS,XHe),e(rm,zHe),e(A,QHe),e(A,tm),e(tm,oae),e(oae,WHe),e(tm,HHe),e(tm,IS),e(IS,UHe),e(tm,JHe),e(A,YHe),e(A,am),e(am,rae),e(rae,KHe),e(am,ZHe),e(am,NS),e(NS,eUe),e(am,oUe),e(A,rUe),e(A,nm),e(nm,tae),e(tae,tUe),e(nm,aUe),e(nm,qS),e(qS,nUe),e(nm,sUe),e(A,lUe),e(A,sm),e(sm,aae),e(aae,iUe),e(sm,dUe),e(sm,jS),e(jS,cUe),e(sm,fUe),e(A,mUe),e(A,lm),e(lm,nae),e(nae,gUe),e(lm,hUe),e(lm,DS),e(DS,pUe),e(lm,_Ue),e(A,uUe),e(A,im),e(im,sae),e(sae,bUe),e(im,vUe),e(im,GS),e(GS,FUe),e(im,TUe),e(A,MUe),e(A,dm),e(dm,lae),e(lae,EUe),e(dm,CUe),e(dm,OS),e(OS,wUe),e(dm,AUe),e(A,LUe),e(A,cm),e(cm,iae),e(iae,yUe),e(cm,xUe),e(cm,VS),e(VS,$Ue),e(cm,kUe),e(A,SUe),e(A,fm),e(fm,dae),e(dae,RUe),e(fm,PUe),e(fm,XS),e(XS,BUe),e(fm,IUe),e(A,NUe),e(A,mm),e(mm,cae),e(cae,qUe),e(mm,jUe),e(mm,zS),e(zS,DUe),e(mm,GUe),e(A,OUe),e(A,gm),e(gm,fae),e(fae,VUe),e(gm,XUe),e(gm,QS),e(QS,zUe),e(gm,QUe),e(A,WUe),e(A,hm),e(hm,mae),e(mae,HUe),e(hm,UUe),e(hm,WS),e(WS,JUe),e(hm,YUe),e(A,KUe),e(A,pm),e(pm,gae),e(gae,ZUe),e(pm,eJe),e(pm,HS),e(HS,oJe),e(pm,rJe),e(A,tJe),e(A,_m),e(_m,hae),e(hae,aJe),e(_m,nJe),e(_m,US),e(US,sJe),e(_m,lJe),e(A,iJe),e(A,um),e(um,pae),e(pae,dJe),e(um,cJe),e(um,JS),e(JS,fJe),e(um,mJe),e(A,gJe),e(A,bm),e(bm,_ae),e(_ae,hJe),e(bm,pJe),e(bm,YS),e(YS,_Je),e(bm,uJe),e(A,bJe),e(A,vm),e(vm,uae),e(uae,vJe),e(vm,FJe),e(vm,KS),e(KS,TJe),e(vm,MJe),e(A,EJe),e(A,Fm),e(Fm,bae),e(bae,CJe),e(Fm,wJe),e(Fm,ZS),e(ZS,AJe),e(Fm,LJe),e(A,yJe),e(A,Tm),e(Tm,vae),e(vae,xJe),e(Tm,$Je),e(Tm,eR),e(eR,kJe),e(Tm,SJe),e(A,RJe),e(A,Mm),e(Mm,Fae),e(Fae,PJe),e(Mm,BJe),e(Mm,oR),e(oR,IJe),e(Mm,NJe),e(A,qJe),e(A,Em),e(Em,Tae),e(Tae,jJe),e(Em,DJe),e(Em,rR),e(rR,GJe),e(Em,OJe),e(A,VJe),e(A,Cm),e(Cm,Mae),e(Mae,XJe),e(Cm,zJe),e(Cm,tR),e(tR,QJe),e(Cm,WJe),e(A,HJe),e(A,wm),e(wm,Eae),e(Eae,UJe),e(wm,JJe),e(wm,aR),e(aR,YJe),e(wm,KJe),e(A,ZJe),e(A,Am),e(Am,Cae),e(Cae,eYe),e(Am,oYe),e(Am,nR),e(nR,rYe),e(Am,tYe),e(A,aYe),e(A,Lm),e(Lm,wae),e(wae,nYe),e(Lm,sYe),e(Lm,sR),e(sR,lYe),e(Lm,iYe),e(A,dYe),e(A,ym),e(ym,Aae),e(Aae,cYe),e(ym,fYe),e(ym,lR),e(lR,mYe),e(ym,gYe),e(A,hYe),e(A,xm),e(xm,Lae),e(Lae,pYe),e(xm,_Ye),e(xm,iR),e(iR,uYe),e(xm,bYe),e(A,vYe),e(A,$m),e($m,yae),e(yae,FYe),e($m,TYe),e($m,dR),e(dR,MYe),e($m,EYe),e(A,CYe),e(A,km),e(km,xae),e(xae,wYe),e(km,AYe),e(km,cR),e(cR,LYe),e(km,yYe),e(A,xYe),e(A,Sm),e(Sm,$ae),e($ae,$Ye),e(Sm,kYe),e(Sm,fR),e(fR,SYe),e(Sm,RYe),e(A,PYe),e(A,Rm),e(Rm,kae),e(kae,BYe),e(Rm,IYe),e(Rm,mR),e(mR,NYe),e(Rm,qYe),e(A,jYe),e(A,Pm),e(Pm,Sae),e(Sae,DYe),e(Pm,GYe),e(Pm,gR),e(gR,OYe),e(Pm,VYe),e(A,XYe),e(A,Bm),e(Bm,Rae),e(Rae,zYe),e(Bm,QYe),e(Bm,hR),e(hR,WYe),e(Bm,HYe),e(A,UYe),e(A,Im),e(Im,Pae),e(Pae,JYe),e(Im,YYe),e(Im,pR),e(pR,KYe),e(Im,ZYe),e(A,eKe),e(A,Nm),e(Nm,Bae),e(Bae,oKe),e(Nm,rKe),e(Nm,_R),e(_R,tKe),e(Nm,aKe),e(A,nKe),e(A,qm),e(qm,Iae),e(Iae,sKe),e(qm,lKe),e(qm,uR),e(uR,iKe),e(qm,dKe),e(A,cKe),e(A,jm),e(jm,Nae),e(Nae,fKe),e(jm,mKe),e(jm,bR),e(bR,gKe),e(jm,hKe),e(A,pKe),e(A,Dm),e(Dm,qae),e(qae,_Ke),e(Dm,uKe),e(Dm,vR),e(vR,bKe),e(Dm,vKe),e(A,FKe),e(A,Gm),e(Gm,jae),e(jae,TKe),e(Gm,MKe),e(Gm,FR),e(FR,EKe),e(Gm,CKe),e(A,wKe),e(A,Om),e(Om,Dae),e(Dae,AKe),e(Om,LKe),e(Om,TR),e(TR,yKe),e(Om,xKe),e(A,$Ke),e(A,Vm),e(Vm,Gae),e(Gae,kKe),e(Vm,SKe),e(Vm,MR),e(MR,RKe),e(Vm,PKe),e(A,BKe),e(A,Xm),e(Xm,Oae),e(Oae,IKe),e(Xm,NKe),e(Xm,ER),e(ER,qKe),e(Xm,jKe),e(A,DKe),e(A,zm),e(zm,Vae),e(Vae,GKe),e(zm,OKe),e(zm,CR),e(CR,VKe),e(zm,XKe),e(A,zKe),e(A,Qm),e(Qm,Xae),e(Xae,QKe),e(Qm,WKe),e(Qm,wR),e(wR,HKe),e(Qm,UKe),e(A,JKe),e(A,Wm),e(Wm,zae),e(zae,YKe),e(Wm,KKe),e(Wm,AR),e(AR,ZKe),e(Wm,eZe),e(A,oZe),e(A,Hm),e(Hm,Qae),e(Qae,rZe),e(Hm,tZe),e(Hm,LR),e(LR,aZe),e(Hm,nZe),e(A,sZe),e(A,Um),e(Um,Wae),e(Wae,lZe),e(Um,iZe),e(Um,yR),e(yR,dZe),e(Um,cZe),e(A,fZe),e(A,Jm),e(Jm,Hae),e(Hae,mZe),e(Jm,gZe),e(Jm,xR),e(xR,hZe),e(Jm,pZe),e(A,_Ze),e(A,Ym),e(Ym,Uae),e(Uae,uZe),e(Ym,bZe),e(Ym,$R),e($R,vZe),e(Ym,FZe),e(A,TZe),e(A,Km),e(Km,Jae),e(Jae,MZe),e(Km,EZe),e(Km,kR),e(kR,CZe),e(Km,wZe),e(A,AZe),e(A,Zm),e(Zm,Yae),e(Yae,LZe),e(Zm,yZe),e(Zm,SR),e(SR,xZe),e(Zm,$Ze),e(A,kZe),e(A,eg),e(eg,Kae),e(Kae,SZe),e(eg,RZe),e(eg,RR),e(RR,PZe),e(eg,BZe),e(A,IZe),e(A,og),e(og,Zae),e(Zae,NZe),e(og,qZe),e(og,PR),e(PR,jZe),e(og,DZe),e(A,GZe),e(A,rg),e(rg,ene),e(ene,OZe),e(rg,VZe),e(rg,BR),e(BR,XZe),e(rg,zZe),e(A,QZe),e(A,tg),e(tg,one),e(one,WZe),e(tg,HZe),e(tg,IR),e(IR,UZe),e(tg,JZe),e(A,YZe),e(A,ag),e(ag,rne),e(rne,KZe),e(ag,ZZe),e(ag,NR),e(NR,eeo),e(ag,oeo),e(A,reo),e(A,ng),e(ng,tne),e(tne,teo),e(ng,aeo),e(ng,qR),e(qR,neo),e(ng,seo),e(A,leo),e(A,sg),e(sg,ane),e(ane,ieo),e(sg,deo),e(sg,jR),e(jR,ceo),e(sg,feo),e(A,meo),e(A,lg),e(lg,nne),e(nne,geo),e(lg,heo),e(lg,DR),e(DR,peo),e(lg,_eo),e(A,ueo),e(A,ig),e(ig,sne),e(sne,beo),e(ig,veo),e(ig,GR),e(GR,Feo),e(ig,Teo),e(A,Meo),e(A,dg),e(dg,lne),e(lne,Eeo),e(dg,Ceo),e(dg,OR),e(OR,weo),e(dg,Aeo),e(A,Leo),e(A,cg),e(cg,ine),e(ine,yeo),e(cg,xeo),e(cg,VR),e(VR,$eo),e(cg,keo),e(A,Seo),e(A,fg),e(fg,dne),e(dne,Reo),e(fg,Peo),e(fg,XR),e(XR,Beo),e(fg,Ieo),e(A,Neo),e(A,mg),e(mg,cne),e(cne,qeo),e(mg,jeo),e(mg,zR),e(zR,Deo),e(mg,Geo),e(A,Oeo),e(A,gg),e(gg,fne),e(fne,Veo),e(gg,Xeo),e(gg,QR),e(QR,zeo),e(gg,Qeo),e(A,Weo),e(A,hg),e(hg,mne),e(mne,Heo),e(hg,Ueo),e(hg,WR),e(WR,Jeo),e(hg,Yeo),e(A,Keo),e(A,pg),e(pg,gne),e(gne,Zeo),e(pg,eoo),e(pg,HR),e(HR,ooo),e(pg,roo),e(A,too),e(A,_g),e(_g,hne),e(hne,aoo),e(_g,noo),e(_g,UR),e(UR,soo),e(_g,loo),e(A,ioo),e(A,ug),e(ug,pne),e(pne,doo),e(ug,coo),e(ug,JR),e(JR,foo),e(ug,moo),e(A,goo),e(A,bg),e(bg,_ne),e(_ne,hoo),e(bg,poo),e(bg,YR),e(YR,_oo),e(bg,uoo),e(A,boo),e(A,vg),e(vg,une),e(une,voo),e(vg,Foo),e(vg,KR),e(KR,Too),e(vg,Moo),e(A,Eoo),e(A,Fg),e(Fg,bne),e(bne,Coo),e(Fg,woo),e(Fg,ZR),e(ZR,Aoo),e(Fg,Loo),e(A,yoo),e(A,Tg),e(Tg,vne),e(vne,xoo),e(Tg,$oo),e(Tg,eP),e(eP,koo),e(Tg,Soo),e(A,Roo),e(A,Mg),e(Mg,Fne),e(Fne,Poo),e(Mg,Boo),e(Mg,oP),e(oP,Ioo),e(Mg,Noo),e(A,qoo),e(A,Eg),e(Eg,Tne),e(Tne,joo),e(Eg,Doo),e(Eg,rP),e(rP,Goo),e(Eg,Ooo),e(A,Voo),e(A,Cg),e(Cg,Mne),e(Mne,Xoo),e(Cg,zoo),e(Cg,tP),e(tP,Qoo),e(Cg,Woo),e(A,Hoo),e(A,wg),e(wg,Ene),e(Ene,Uoo),e(wg,Joo),e(wg,aP),e(aP,Yoo),e(wg,Koo),e(A,Zoo),e(A,Ag),e(Ag,Cne),e(Cne,ero),e(Ag,oro),e(Ag,nP),e(nP,rro),e(Ag,tro),e(A,aro),e(A,Lg),e(Lg,wne),e(wne,nro),e(Lg,sro),e(Lg,sP),e(sP,lro),e(Lg,iro),e(A,dro),e(A,yg),e(yg,Ane),e(Ane,cro),e(yg,fro),e(yg,lP),e(lP,mro),e(yg,gro),e(A,hro),e(A,xg),e(xg,Lne),e(Lne,pro),e(xg,_ro),e(xg,iP),e(iP,uro),e(xg,bro),e(A,vro),e(A,$g),e($g,yne),e(yne,Fro),e($g,Tro),e($g,dP),e(dP,Mro),e($g,Ero),e(A,Cro),e(A,kg),e(kg,xne),e(xne,wro),e(kg,Aro),e(kg,cP),e(cP,Lro),e(kg,yro),e(A,xro),e(A,Sg),e(Sg,$ne),e($ne,$ro),e(Sg,kro),e(Sg,fP),e(fP,Sro),e(Sg,Rro),e(A,Pro),e(A,Rg),e(Rg,kne),e(kne,Bro),e(Rg,Iro),e(Rg,mP),e(mP,Nro),e(Rg,qro),e(A,jro),e(A,Pg),e(Pg,Sne),e(Sne,Dro),e(Pg,Gro),e(Pg,gP),e(gP,Oro),e(Pg,Vro),e(A,Xro),e(A,Bg),e(Bg,Rne),e(Rne,zro),e(Bg,Qro),e(Bg,hP),e(hP,Wro),e(Bg,Hro),e(A,Uro),e(A,Ig),e(Ig,Pne),e(Pne,Jro),e(Ig,Yro),e(Ig,pP),e(pP,Kro),e(Ig,Zro),e(A,eto),e(A,Ng),e(Ng,Bne),e(Bne,oto),e(Ng,rto),e(Ng,_P),e(_P,tto),e(Ng,ato),e(A,nto),e(A,qg),e(qg,Ine),e(Ine,sto),e(qg,lto),e(qg,uP),e(uP,ito),e(qg,dto),e(A,cto),e(A,jg),e(jg,Nne),e(Nne,fto),e(jg,mto),e(jg,bP),e(bP,gto),e(jg,hto),e(A,pto),e(A,Dg),e(Dg,qne),e(qne,_to),e(Dg,uto),e(Dg,vP),e(vP,bto),e(Dg,vto),e(A,Fto),e(A,Gg),e(Gg,jne),e(jne,Tto),e(Gg,Mto),e(Gg,FP),e(FP,Eto),e(Gg,Cto),e(A,wto),e(A,Og),e(Og,Dne),e(Dne,Ato),e(Og,Lto),e(Og,TP),e(TP,yto),e(Og,xto),e(Ar,$to),M(Vg,Ar,null),e(wo,kto),e(wo,Xg),M(GL,Xg,null),e(Xg,Sto),e(Xg,Gne),e(Gne,Rto),b(f,gOe,u),b(f,Si,u),e(Si,zg),e(zg,One),M(OL,One,null),e(Si,Pto),e(Si,Vne),e(Vne,Bto),b(f,hOe,u),b(f,Ao,u),M(VL,Ao,null),e(Ao,Ito),e(Ao,XL),e(XL,Nto),e(XL,MP),e(MP,qto),e(XL,jto),e(Ao,Dto),e(Ao,zL),e(zL,Gto),e(zL,Xne),e(Xne,Oto),e(zL,Vto),e(Ao,Xto),e(Ao,Lr),M(QL,Lr,null),e(Lr,zto),e(Lr,zne),e(zne,Qto),e(Lr,Wto),e(Lr,ka),e(ka,Hto),e(ka,Qne),e(Qne,Uto),e(ka,Jto),e(ka,Wne),e(Wne,Yto),e(ka,Kto),e(ka,Hne),e(Hne,Zto),e(ka,eao),e(Lr,oao),e(Lr,k),e(k,qn),e(qn,Une),e(Une,rao),e(qn,tao),e(qn,EP),e(EP,aao),e(qn,nao),e(qn,CP),e(CP,sao),e(qn,lao),e(k,iao),e(k,jn),e(jn,Jne),e(Jne,dao),e(jn,cao),e(jn,wP),e(wP,fao),e(jn,mao),e(jn,AP),e(AP,gao),e(jn,hao),e(k,pao),e(k,Dn),e(Dn,Yne),e(Yne,_ao),e(Dn,uao),e(Dn,LP),e(LP,bao),e(Dn,vao),e(Dn,yP),e(yP,Fao),e(Dn,Tao),e(k,Mao),e(k,Qg),e(Qg,Kne),e(Kne,Eao),e(Qg,Cao),e(Qg,xP),e(xP,wao),e(Qg,Aao),e(k,Lao),e(k,Gn),e(Gn,Zne),e(Zne,yao),e(Gn,xao),e(Gn,$P),e($P,$ao),e(Gn,kao),e(Gn,kP),e(kP,Sao),e(Gn,Rao),e(k,Pao),e(k,Wg),e(Wg,ese),e(ese,Bao),e(Wg,Iao),e(Wg,SP),e(SP,Nao),e(Wg,qao),e(k,jao),e(k,Hg),e(Hg,ose),e(ose,Dao),e(Hg,Gao),e(Hg,RP),e(RP,Oao),e(Hg,Vao),e(k,Xao),e(k,Ug),e(Ug,rse),e(rse,zao),e(Ug,Qao),e(Ug,PP),e(PP,Wao),e(Ug,Hao),e(k,Uao),e(k,On),e(On,tse),e(tse,Jao),e(On,Yao),e(On,BP),e(BP,Kao),e(On,Zao),e(On,IP),e(IP,eno),e(On,ono),e(k,rno),e(k,Vn),e(Vn,ase),e(ase,tno),e(Vn,ano),e(Vn,NP),e(NP,nno),e(Vn,sno),e(Vn,qP),e(qP,lno),e(Vn,ino),e(k,dno),e(k,Xn),e(Xn,nse),e(nse,cno),e(Xn,fno),e(Xn,jP),e(jP,mno),e(Xn,gno),e(Xn,DP),e(DP,hno),e(Xn,pno),e(k,_no),e(k,Jg),e(Jg,sse),e(sse,uno),e(Jg,bno),e(Jg,GP),e(GP,vno),e(Jg,Fno),e(k,Tno),e(k,Yg),e(Yg,lse),e(lse,Mno),e(Yg,Eno),e(Yg,OP),e(OP,Cno),e(Yg,wno),e(k,Ano),e(k,Kg),e(Kg,ise),e(ise,Lno),e(Kg,yno),e(Kg,VP),e(VP,xno),e(Kg,$no),e(k,kno),e(k,zn),e(zn,dse),e(dse,Sno),e(zn,Rno),e(zn,XP),e(XP,Pno),e(zn,Bno),e(zn,zP),e(zP,Ino),e(zn,Nno),e(k,qno),e(k,Zg),e(Zg,cse),e(cse,jno),e(Zg,Dno),e(Zg,QP),e(QP,Gno),e(Zg,Ono),e(k,Vno),e(k,Qn),e(Qn,fse),e(fse,Xno),e(Qn,zno),e(Qn,WP),e(WP,Qno),e(Qn,Wno),e(Qn,HP),e(HP,Hno),e(Qn,Uno),e(k,Jno),e(k,Wn),e(Wn,mse),e(mse,Yno),e(Wn,Kno),e(Wn,UP),e(UP,Zno),e(Wn,eso),e(Wn,JP),e(JP,oso),e(Wn,rso),e(k,tso),e(k,Hn),e(Hn,gse),e(gse,aso),e(Hn,nso),e(Hn,YP),e(YP,sso),e(Hn,lso),e(Hn,KP),e(KP,iso),e(Hn,dso),e(k,cso),e(k,eh),e(eh,hse),e(hse,fso),e(eh,mso),e(eh,ZP),e(ZP,gso),e(eh,hso),e(k,pso),e(k,Un),e(Un,pse),e(pse,_so),e(Un,uso),e(Un,eB),e(eB,bso),e(Un,vso),e(Un,oB),e(oB,Fso),e(Un,Tso),e(k,Mso),e(k,Jn),e(Jn,_se),e(_se,Eso),e(Jn,Cso),e(Jn,rB),e(rB,wso),e(Jn,Aso),e(Jn,tB),e(tB,Lso),e(Jn,yso),e(k,xso),e(k,Yn),e(Yn,use),e(use,$so),e(Yn,kso),e(Yn,aB),e(aB,Sso),e(Yn,Rso),e(Yn,nB),e(nB,Pso),e(Yn,Bso),e(k,Iso),e(k,Kn),e(Kn,bse),e(bse,Nso),e(Kn,qso),e(Kn,sB),e(sB,jso),e(Kn,Dso),e(Kn,lB),e(lB,Gso),e(Kn,Oso),e(k,Vso),e(k,Zn),e(Zn,vse),e(vse,Xso),e(Zn,zso),e(Zn,iB),e(iB,Qso),e(Zn,Wso),e(Zn,dB),e(dB,Hso),e(Zn,Uso),e(k,Jso),e(k,es),e(es,Fse),e(Fse,Yso),e(es,Kso),e(es,cB),e(cB,Zso),e(es,elo),e(es,fB),e(fB,olo),e(es,rlo),e(k,tlo),e(k,oh),e(oh,Tse),e(Tse,alo),e(oh,nlo),e(oh,mB),e(mB,slo),e(oh,llo),e(k,ilo),e(k,os),e(os,Mse),e(Mse,dlo),e(os,clo),e(os,gB),e(gB,flo),e(os,mlo),e(os,hB),e(hB,glo),e(os,hlo),e(k,plo),e(k,rh),e(rh,Ese),e(Ese,_lo),e(rh,ulo),e(rh,pB),e(pB,blo),e(rh,vlo),e(k,Flo),e(k,rs),e(rs,Cse),e(Cse,Tlo),e(rs,Mlo),e(rs,_B),e(_B,Elo),e(rs,Clo),e(rs,uB),e(uB,wlo),e(rs,Alo),e(k,Llo),e(k,ts),e(ts,wse),e(wse,ylo),e(ts,xlo),e(ts,bB),e(bB,$lo),e(ts,klo),e(ts,vB),e(vB,Slo),e(ts,Rlo),e(k,Plo),e(k,as),e(as,Ase),e(Ase,Blo),e(as,Ilo),e(as,FB),e(FB,Nlo),e(as,qlo),e(as,TB),e(TB,jlo),e(as,Dlo),e(k,Glo),e(k,th),e(th,Lse),e(Lse,Olo),e(th,Vlo),e(th,MB),e(MB,Xlo),e(th,zlo),e(k,Qlo),e(k,ns),e(ns,yse),e(yse,Wlo),e(ns,Hlo),e(ns,EB),e(EB,Ulo),e(ns,Jlo),e(ns,CB),e(CB,Ylo),e(ns,Klo),e(k,Zlo),e(k,ss),e(ss,xse),e(xse,eio),e(ss,oio),e(ss,wB),e(wB,rio),e(ss,tio),e(ss,AB),e(AB,aio),e(ss,nio),e(k,sio),e(k,ls),e(ls,$se),e($se,lio),e(ls,iio),e(ls,LB),e(LB,dio),e(ls,cio),e(ls,yB),e(yB,fio),e(ls,mio),e(k,gio),e(k,ah),e(ah,kse),e(kse,hio),e(ah,pio),e(ah,xB),e(xB,_io),e(ah,uio),e(k,bio),e(k,is),e(is,Sse),e(Sse,vio),e(is,Fio),e(is,$B),e($B,Tio),e(is,Mio),e(is,kB),e(kB,Eio),e(is,Cio),e(k,wio),e(k,ds),e(ds,Rse),e(Rse,Aio),e(ds,Lio),e(ds,SB),e(SB,yio),e(ds,xio),e(ds,RB),e(RB,$io),e(ds,kio),e(k,Sio),e(k,cs),e(cs,Pse),e(Pse,Rio),e(cs,Pio),e(cs,PB),e(PB,Bio),e(cs,Iio),e(cs,BB),e(BB,Nio),e(cs,qio),e(k,jio),e(k,fs),e(fs,Bse),e(Bse,Dio),e(fs,Gio),e(fs,IB),e(IB,Oio),e(fs,Vio),e(fs,NB),e(NB,Xio),e(fs,zio),e(k,Qio),e(k,ms),e(ms,Ise),e(Ise,Wio),e(ms,Hio),e(ms,qB),e(qB,Uio),e(ms,Jio),e(ms,jB),e(jB,Yio),e(ms,Kio),e(k,Zio),e(k,gs),e(gs,Nse),e(Nse,edo),e(gs,odo),e(gs,DB),e(DB,rdo),e(gs,tdo),e(gs,GB),e(GB,ado),e(gs,ndo),e(k,sdo),e(k,hs),e(hs,qse),e(qse,ldo),e(hs,ido),e(hs,OB),e(OB,ddo),e(hs,cdo),e(hs,VB),e(VB,fdo),e(hs,mdo),e(k,gdo),e(k,ps),e(ps,jse),e(jse,hdo),e(ps,pdo),e(ps,XB),e(XB,_do),e(ps,udo),e(ps,zB),e(zB,bdo),e(ps,vdo),e(k,Fdo),e(k,nh),e(nh,Dse),e(Dse,Tdo),e(nh,Mdo),e(nh,QB),e(QB,Edo),e(nh,Cdo),e(k,wdo),e(k,_s),e(_s,Gse),e(Gse,Ado),e(_s,Ldo),e(_s,WB),e(WB,ydo),e(_s,xdo),e(_s,HB),e(HB,$do),e(_s,kdo),e(k,Sdo),e(k,sh),e(sh,Ose),e(Ose,Rdo),e(sh,Pdo),e(sh,UB),e(UB,Bdo),e(sh,Ido),e(k,Ndo),e(k,lh),e(lh,Vse),e(Vse,qdo),e(lh,jdo),e(lh,JB),e(JB,Ddo),e(lh,Gdo),e(k,Odo),e(k,us),e(us,Xse),e(Xse,Vdo),e(us,Xdo),e(us,YB),e(YB,zdo),e(us,Qdo),e(us,KB),e(KB,Wdo),e(us,Hdo),e(k,Udo),e(k,bs),e(bs,zse),e(zse,Jdo),e(bs,Ydo),e(bs,ZB),e(ZB,Kdo),e(bs,Zdo),e(bs,eI),e(eI,eco),e(bs,oco),e(k,rco),e(k,vs),e(vs,Qse),e(Qse,tco),e(vs,aco),e(vs,oI),e(oI,nco),e(vs,sco),e(vs,rI),e(rI,lco),e(vs,ico),e(k,dco),e(k,ih),e(ih,Wse),e(Wse,cco),e(ih,fco),e(ih,tI),e(tI,mco),e(ih,gco),e(k,hco),e(k,Fs),e(Fs,Hse),e(Hse,pco),e(Fs,_co),e(Fs,aI),e(aI,uco),e(Fs,bco),e(Fs,nI),e(nI,vco),e(Fs,Fco),e(k,Tco),e(k,Ts),e(Ts,Use),e(Use,Mco),e(Ts,Eco),e(Ts,sI),e(sI,Cco),e(Ts,wco),e(Ts,lI),e(lI,Aco),e(Ts,Lco),e(k,yco),e(k,Ms),e(Ms,Jse),e(Jse,xco),e(Ms,$co),e(Ms,iI),e(iI,kco),e(Ms,Sco),e(Ms,dI),e(dI,Rco),e(Ms,Pco),e(k,Bco),e(k,Es),e(Es,Yse),e(Yse,Ico),e(Es,Nco),e(Es,cI),e(cI,qco),e(Es,jco),e(Es,fI),e(fI,Dco),e(Es,Gco),e(k,Oco),e(k,Cs),e(Cs,Kse),e(Kse,Vco),e(Cs,Xco),e(Cs,mI),e(mI,zco),e(Cs,Qco),e(Cs,gI),e(gI,Wco),e(Cs,Hco),e(k,Uco),e(k,ws),e(ws,Zse),e(Zse,Jco),e(ws,Yco),e(ws,hI),e(hI,Kco),e(ws,Zco),e(ws,pI),e(pI,efo),e(ws,ofo),e(k,rfo),e(k,dh),e(dh,ele),e(ele,tfo),e(dh,afo),e(dh,_I),e(_I,nfo),e(dh,sfo),e(k,lfo),e(k,As),e(As,ole),e(ole,ifo),e(As,dfo),e(As,uI),e(uI,cfo),e(As,ffo),e(As,bI),e(bI,mfo),e(As,gfo),e(k,hfo),e(k,ch),e(ch,rle),e(rle,pfo),e(ch,_fo),e(ch,vI),e(vI,ufo),e(ch,bfo),e(k,vfo),e(k,fh),e(fh,tle),e(tle,Ffo),e(fh,Tfo),e(fh,FI),e(FI,Mfo),e(fh,Efo),e(k,Cfo),e(k,mh),e(mh,ale),e(ale,wfo),e(mh,Afo),e(mh,TI),e(TI,Lfo),e(mh,yfo),e(k,xfo),e(k,gh),e(gh,nle),e(nle,$fo),e(gh,kfo),e(gh,MI),e(MI,Sfo),e(gh,Rfo),e(k,Pfo),e(k,Ls),e(Ls,sle),e(sle,Bfo),e(Ls,Ifo),e(Ls,EI),e(EI,Nfo),e(Ls,qfo),e(Ls,CI),e(CI,jfo),e(Ls,Dfo),e(k,Gfo),e(k,hh),e(hh,lle),e(lle,Ofo),e(hh,Vfo),e(hh,wI),e(wI,Xfo),e(hh,zfo),e(k,Qfo),e(k,ys),e(ys,ile),e(ile,Wfo),e(ys,Hfo),e(ys,AI),e(AI,Ufo),e(ys,Jfo),e(ys,LI),e(LI,Yfo),e(ys,Kfo),e(k,Zfo),e(k,xs),e(xs,dle),e(dle,emo),e(xs,omo),e(xs,yI),e(yI,rmo),e(xs,tmo),e(xs,xI),e(xI,amo),e(xs,nmo),e(k,smo),e(k,$s),e($s,cle),e(cle,lmo),e($s,imo),e($s,$I),e($I,dmo),e($s,cmo),e($s,kI),e(kI,fmo),e($s,mmo),e(k,gmo),e(k,ks),e(ks,fle),e(fle,hmo),e(ks,pmo),e(ks,SI),e(SI,_mo),e(ks,umo),e(ks,RI),e(RI,bmo),e(ks,vmo),e(k,Fmo),e(k,Ss),e(Ss,mle),e(mle,Tmo),e(Ss,Mmo),e(Ss,PI),e(PI,Emo),e(Ss,Cmo),e(Ss,BI),e(BI,wmo),e(Ss,Amo),e(k,Lmo),e(k,Rs),e(Rs,gle),e(gle,ymo),e(Rs,xmo),e(Rs,II),e(II,$mo),e(Rs,kmo),e(Rs,NI),e(NI,Smo),e(Rs,Rmo),e(k,Pmo),e(k,ph),e(ph,hle),e(hle,Bmo),e(ph,Imo),e(ph,qI),e(qI,Nmo),e(ph,qmo),e(k,jmo),e(k,_h),e(_h,ple),e(ple,Dmo),e(_h,Gmo),e(_h,jI),e(jI,Omo),e(_h,Vmo),e(k,Xmo),e(k,Ps),e(Ps,_le),e(_le,zmo),e(Ps,Qmo),e(Ps,DI),e(DI,Wmo),e(Ps,Hmo),e(Ps,GI),e(GI,Umo),e(Ps,Jmo),e(k,Ymo),e(k,Bs),e(Bs,ule),e(ule,Kmo),e(Bs,Zmo),e(Bs,OI),e(OI,ego),e(Bs,ogo),e(Bs,VI),e(VI,rgo),e(Bs,tgo),e(k,ago),e(k,Is),e(Is,ble),e(ble,ngo),e(Is,sgo),e(Is,XI),e(XI,lgo),e(Is,igo),e(Is,zI),e(zI,dgo),e(Is,cgo),e(k,fgo),e(k,uh),e(uh,vle),e(vle,mgo),e(uh,ggo),e(uh,QI),e(QI,hgo),e(uh,pgo),e(k,_go),e(k,bh),e(bh,Fle),e(Fle,ugo),e(bh,bgo),e(bh,WI),e(WI,vgo),e(bh,Fgo),e(k,Tgo),e(k,vh),e(vh,Tle),e(Tle,Mgo),e(vh,Ego),e(vh,HI),e(HI,Cgo),e(vh,wgo),e(k,Ago),e(k,Ns),e(Ns,Mle),e(Mle,Lgo),e(Ns,ygo),e(Ns,UI),e(UI,xgo),e(Ns,$go),e(Ns,JI),e(JI,kgo),e(Ns,Sgo),e(k,Rgo),e(k,qs),e(qs,Ele),e(Ele,Pgo),e(qs,Bgo),e(qs,YI),e(YI,Igo),e(qs,Ngo),e(qs,KI),e(KI,qgo),e(qs,jgo),e(k,Dgo),e(k,Fh),e(Fh,Cle),e(Cle,Ggo),e(Fh,Ogo),e(Fh,ZI),e(ZI,Vgo),e(Fh,Xgo),e(k,zgo),e(k,Th),e(Th,wle),e(wle,Qgo),e(Th,Wgo),e(Th,eN),e(eN,Hgo),e(Th,Ugo),e(k,Jgo),e(k,Mh),e(Mh,Ale),e(Ale,Ygo),e(Mh,Kgo),e(Mh,oN),e(oN,Zgo),e(Mh,eho),e(k,oho),e(k,js),e(js,Lle),e(Lle,rho),e(js,tho),e(js,rN),e(rN,aho),e(js,nho),e(js,tN),e(tN,sho),e(js,lho),e(k,iho),e(k,Eh),e(Eh,yle),e(yle,dho),e(Eh,cho),e(Eh,aN),e(aN,fho),e(Eh,mho),e(k,gho),e(k,Ch),e(Ch,xle),e(xle,hho),e(Ch,pho),e(Ch,nN),e(nN,_ho),e(Ch,uho),e(k,bho),e(k,Ds),e(Ds,$le),e($le,vho),e(Ds,Fho),e(Ds,sN),e(sN,Tho),e(Ds,Mho),e(Ds,lN),e(lN,Eho),e(Ds,Cho),e(k,who),e(k,Gs),e(Gs,kle),e(kle,Aho),e(Gs,Lho),e(Gs,iN),e(iN,yho),e(Gs,xho),e(Gs,dN),e(dN,$ho),e(Gs,kho),e(k,Sho),e(k,Os),e(Os,Sle),e(Sle,Rho),e(Os,Pho),e(Os,cN),e(cN,Bho),e(Os,Iho),e(Os,fN),e(fN,Nho),e(Os,qho),e(k,jho),e(k,Vs),e(Vs,Rle),e(Rle,Dho),e(Vs,Gho),e(Vs,mN),e(mN,Oho),e(Vs,Vho),e(Vs,gN),e(gN,Xho),e(Vs,zho),e(Lr,Qho),M(wh,Lr,null),e(Ao,Who),e(Ao,Ah),M(WL,Ah,null),e(Ah,Hho),e(Ah,Ple),e(Ple,Uho),b(f,pOe,u),b(f,Ri,u),e(Ri,Lh),e(Lh,Ble),M(HL,Ble,null),e(Ri,Jho),e(Ri,Ile),e(Ile,Yho),b(f,_Oe,u),b(f,Lo,u),M(UL,Lo,null),e(Lo,Kho),e(Lo,JL),e(JL,Zho),e(JL,hN),e(hN,epo),e(JL,opo),e(Lo,rpo),e(Lo,YL),e(YL,tpo),e(YL,Nle),e(Nle,apo),e(YL,npo),e(Lo,spo),e(Lo,He),M(KL,He,null),e(He,lpo),e(He,qle),e(qle,ipo),e(He,dpo),e(He,Sa),e(Sa,cpo),e(Sa,jle),e(jle,fpo),e(Sa,mpo),e(Sa,Dle),e(Dle,gpo),e(Sa,hpo),e(Sa,Gle),e(Gle,ppo),e(Sa,_po),e(He,upo),e(He,Y),e(Y,yh),e(yh,Ole),e(Ole,bpo),e(yh,vpo),e(yh,pN),e(pN,Fpo),e(yh,Tpo),e(Y,Mpo),e(Y,xh),e(xh,Vle),e(Vle,Epo),e(xh,Cpo),e(xh,_N),e(_N,wpo),e(xh,Apo),e(Y,Lpo),e(Y,$h),e($h,Xle),e(Xle,ypo),e($h,xpo),e($h,uN),e(uN,$po),e($h,kpo),e(Y,Spo),e(Y,kh),e(kh,zle),e(zle,Rpo),e(kh,Ppo),e(kh,bN),e(bN,Bpo),e(kh,Ipo),e(Y,Npo),e(Y,Sh),e(Sh,Qle),e(Qle,qpo),e(Sh,jpo),e(Sh,vN),e(vN,Dpo),e(Sh,Gpo),e(Y,Opo),e(Y,Rh),e(Rh,Wle),e(Wle,Vpo),e(Rh,Xpo),e(Rh,FN),e(FN,zpo),e(Rh,Qpo),e(Y,Wpo),e(Y,Ph),e(Ph,Hle),e(Hle,Hpo),e(Ph,Upo),e(Ph,TN),e(TN,Jpo),e(Ph,Ypo),e(Y,Kpo),e(Y,Bh),e(Bh,Ule),e(Ule,Zpo),e(Bh,e_o),e(Bh,MN),e(MN,o_o),e(Bh,r_o),e(Y,t_o),e(Y,Ih),e(Ih,Jle),e(Jle,a_o),e(Ih,n_o),e(Ih,EN),e(EN,s_o),e(Ih,l_o),e(Y,i_o),e(Y,Nh),e(Nh,Yle),e(Yle,d_o),e(Nh,c_o),e(Nh,CN),e(CN,f_o),e(Nh,m_o),e(Y,g_o),e(Y,qh),e(qh,Kle),e(Kle,h_o),e(qh,p_o),e(qh,wN),e(wN,__o),e(qh,u_o),e(Y,b_o),e(Y,jh),e(jh,Zle),e(Zle,v_o),e(jh,F_o),e(jh,AN),e(AN,T_o),e(jh,M_o),e(Y,E_o),e(Y,Dh),e(Dh,eie),e(eie,C_o),e(Dh,w_o),e(Dh,LN),e(LN,A_o),e(Dh,L_o),e(Y,y_o),e(Y,Gh),e(Gh,oie),e(oie,x_o),e(Gh,$_o),e(Gh,yN),e(yN,k_o),e(Gh,S_o),e(Y,R_o),e(Y,Oh),e(Oh,rie),e(rie,P_o),e(Oh,B_o),e(Oh,xN),e(xN,I_o),e(Oh,N_o),e(Y,q_o),e(Y,Vh),e(Vh,tie),e(tie,j_o),e(Vh,D_o),e(Vh,$N),e($N,G_o),e(Vh,O_o),e(Y,V_o),e(Y,Xh),e(Xh,aie),e(aie,X_o),e(Xh,z_o),e(Xh,kN),e(kN,Q_o),e(Xh,W_o),e(Y,H_o),e(Y,zh),e(zh,nie),e(nie,U_o),e(zh,J_o),e(zh,SN),e(SN,Y_o),e(zh,K_o),e(Y,Z_o),e(Y,Qh),e(Qh,sie),e(sie,euo),e(Qh,ouo),e(Qh,RN),e(RN,ruo),e(Qh,tuo),e(Y,auo),e(Y,Wh),e(Wh,lie),e(lie,nuo),e(Wh,suo),e(Wh,PN),e(PN,luo),e(Wh,iuo),e(Y,duo),e(Y,Hh),e(Hh,iie),e(iie,cuo),e(Hh,fuo),e(Hh,BN),e(BN,muo),e(Hh,guo),e(Y,huo),e(Y,Uh),e(Uh,die),e(die,puo),e(Uh,_uo),e(Uh,IN),e(IN,uuo),e(Uh,buo),e(Y,vuo),e(Y,Jh),e(Jh,cie),e(cie,Fuo),e(Jh,Tuo),e(Jh,NN),e(NN,Muo),e(Jh,Euo),e(Y,Cuo),e(Y,Yh),e(Yh,fie),e(fie,wuo),e(Yh,Auo),e(Yh,qN),e(qN,Luo),e(Yh,yuo),e(Y,xuo),e(Y,Kh),e(Kh,mie),e(mie,$uo),e(Kh,kuo),e(Kh,jN),e(jN,Suo),e(Kh,Ruo),e(Y,Puo),e(Y,Zh),e(Zh,gie),e(gie,Buo),e(Zh,Iuo),e(Zh,DN),e(DN,Nuo),e(Zh,quo),e(Y,juo),e(Y,ep),e(ep,hie),e(hie,Duo),e(ep,Guo),e(ep,GN),e(GN,Ouo),e(ep,Vuo),e(Y,Xuo),e(Y,op),e(op,pie),e(pie,zuo),e(op,Quo),e(op,ON),e(ON,Wuo),e(op,Huo),e(Y,Uuo),e(Y,rp),e(rp,_ie),e(_ie,Juo),e(rp,Yuo),e(rp,VN),e(VN,Kuo),e(rp,Zuo),e(Y,e1o),e(Y,tp),e(tp,uie),e(uie,o1o),e(tp,r1o),e(tp,XN),e(XN,t1o),e(tp,a1o),e(Y,n1o),e(Y,ap),e(ap,bie),e(bie,s1o),e(ap,l1o),e(ap,zN),e(zN,i1o),e(ap,d1o),e(Y,c1o),e(Y,np),e(np,vie),e(vie,f1o),e(np,m1o),e(np,QN),e(QN,g1o),e(np,h1o),e(Y,p1o),e(Y,sp),e(sp,Fie),e(Fie,_1o),e(sp,u1o),e(sp,WN),e(WN,b1o),e(sp,v1o),e(He,F1o),M(lp,He,null),e(He,T1o),M(ip,He,null),e(Lo,M1o),e(Lo,dp),M(ZL,dp,null),e(dp,E1o),e(dp,Tie),e(Tie,C1o),b(f,uOe,u),b(f,Pi,u),e(Pi,cp),e(cp,Mie),M(ey,Mie,null),e(Pi,w1o),e(Pi,Eie),e(Eie,A1o),b(f,bOe,u),b(f,yo,u),M(oy,yo,null),e(yo,L1o),e(yo,ry),e(ry,y1o),e(ry,HN),e(HN,x1o),e(ry,$1o),e(yo,k1o),e(yo,ty),e(ty,S1o),e(ty,Cie),e(Cie,R1o),e(ty,P1o),e(yo,B1o),e(yo,Ue),M(ay,Ue,null),e(Ue,I1o),e(Ue,wie),e(wie,N1o),e(Ue,q1o),e(Ue,Bi),e(Bi,j1o),e(Bi,Aie),e(Aie,D1o),e(Bi,G1o),e(Bi,Lie),e(Lie,O1o),e(Bi,V1o),e(Ue,X1o),e(Ue,he),e(he,fp),e(fp,yie),e(yie,z1o),e(fp,Q1o),e(fp,UN),e(UN,W1o),e(fp,H1o),e(he,U1o),e(he,mp),e(mp,xie),e(xie,J1o),e(mp,Y1o),e(mp,$ie),e($ie,K1o),e(mp,Z1o),e(he,e3o),e(he,gp),e(gp,kie),e(kie,o3o),e(gp,r3o),e(gp,JN),e(JN,t3o),e(gp,a3o),e(he,n3o),e(he,hp),e(hp,Sie),e(Sie,s3o),e(hp,l3o),e(hp,YN),e(YN,i3o),e(hp,d3o),e(he,c3o),e(he,pp),e(pp,Rie),e(Rie,f3o),e(pp,m3o),e(pp,KN),e(KN,g3o),e(pp,h3o),e(he,p3o),e(he,_p),e(_p,Pie),e(Pie,_3o),e(_p,u3o),e(_p,ZN),e(ZN,b3o),e(_p,v3o),e(he,F3o),e(he,up),e(up,Bie),e(Bie,T3o),e(up,M3o),e(up,eq),e(eq,E3o),e(up,C3o),e(he,w3o),e(he,bp),e(bp,Iie),e(Iie,A3o),e(bp,L3o),e(bp,oq),e(oq,y3o),e(bp,x3o),e(he,$3o),e(he,vp),e(vp,Nie),e(Nie,k3o),e(vp,S3o),e(vp,rq),e(rq,R3o),e(vp,P3o),e(he,B3o),e(he,Fp),e(Fp,qie),e(qie,I3o),e(Fp,N3o),e(Fp,tq),e(tq,q3o),e(Fp,j3o),e(he,D3o),e(he,Tp),e(Tp,jie),e(jie,G3o),e(Tp,O3o),e(Tp,aq),e(aq,V3o),e(Tp,X3o),e(he,z3o),e(he,Mp),e(Mp,Die),e(Die,Q3o),e(Mp,W3o),e(Mp,nq),e(nq,H3o),e(Mp,U3o),e(he,J3o),e(he,Ep),e(Ep,Gie),e(Gie,Y3o),e(Ep,K3o),e(Ep,sq),e(sq,Z3o),e(Ep,e2o),e(he,o2o),e(he,Cp),e(Cp,Oie),e(Oie,r2o),e(Cp,t2o),e(Cp,lq),e(lq,a2o),e(Cp,n2o),e(he,s2o),e(he,wp),e(wp,Vie),e(Vie,l2o),e(wp,i2o),e(wp,iq),e(iq,d2o),e(wp,c2o),e(he,f2o),e(he,Ap),e(Ap,Xie),e(Xie,m2o),e(Ap,g2o),e(Ap,dq),e(dq,h2o),e(Ap,p2o),e(he,_2o),e(he,Lp),e(Lp,zie),e(zie,u2o),e(Lp,b2o),e(Lp,cq),e(cq,v2o),e(Lp,F2o),e(he,T2o),e(he,yp),e(yp,Qie),e(Qie,M2o),e(yp,E2o),e(yp,fq),e(fq,C2o),e(yp,w2o),e(Ue,A2o),M(xp,Ue,null),e(Ue,L2o),M($p,Ue,null),e(yo,y2o),e(yo,kp),M(ny,kp,null),e(kp,x2o),e(kp,Wie),e(Wie,$2o),b(f,vOe,u),b(f,Ii,u),e(Ii,Sp),e(Sp,Hie),M(sy,Hie,null),e(Ii,k2o),e(Ii,Uie),e(Uie,S2o),b(f,FOe,u),b(f,xo,u),M(ly,xo,null),e(xo,R2o),e(xo,Ni),e(Ni,P2o),e(Ni,mq),e(mq,B2o),e(Ni,I2o),e(Ni,gq),e(gq,N2o),e(Ni,q2o),e(xo,j2o),e(xo,iy),e(iy,D2o),e(iy,Jie),e(Jie,G2o),e(iy,O2o),e(xo,V2o),e(xo,nt),M(dy,nt,null),e(nt,X2o),e(nt,Yie),e(Yie,z2o),e(nt,Q2o),e(nt,qi),e(qi,W2o),e(qi,Kie),e(Kie,H2o),e(qi,U2o),e(qi,hq),e(hq,J2o),e(qi,Y2o),e(nt,K2o),M(Rp,nt,null),e(xo,Z2o),e(xo,Je),M(cy,Je,null),e(Je,ebo),e(Je,Zie),e(Zie,obo),e(Je,rbo),e(Je,Ra),e(Ra,tbo),e(Ra,ede),e(ede,abo),e(Ra,nbo),e(Ra,ode),e(ode,sbo),e(Ra,lbo),e(Ra,rde),e(rde,ibo),e(Ra,dbo),e(Je,cbo),e(Je,y),e(y,Pp),e(Pp,tde),e(tde,fbo),e(Pp,mbo),e(Pp,pq),e(pq,gbo),e(Pp,hbo),e(y,pbo),e(y,Bp),e(Bp,ade),e(ade,_bo),e(Bp,ubo),e(Bp,_q),e(_q,bbo),e(Bp,vbo),e(y,Fbo),e(y,Ip),e(Ip,nde),e(nde,Tbo),e(Ip,Mbo),e(Ip,uq),e(uq,Ebo),e(Ip,Cbo),e(y,wbo),e(y,Np),e(Np,sde),e(sde,Abo),e(Np,Lbo),e(Np,bq),e(bq,ybo),e(Np,xbo),e(y,$bo),e(y,qp),e(qp,lde),e(lde,kbo),e(qp,Sbo),e(qp,vq),e(vq,Rbo),e(qp,Pbo),e(y,Bbo),e(y,jp),e(jp,ide),e(ide,Ibo),e(jp,Nbo),e(jp,Fq),e(Fq,qbo),e(jp,jbo),e(y,Dbo),e(y,Dp),e(Dp,dde),e(dde,Gbo),e(Dp,Obo),e(Dp,Tq),e(Tq,Vbo),e(Dp,Xbo),e(y,zbo),e(y,Gp),e(Gp,cde),e(cde,Qbo),e(Gp,Wbo),e(Gp,Mq),e(Mq,Hbo),e(Gp,Ubo),e(y,Jbo),e(y,Op),e(Op,fde),e(fde,Ybo),e(Op,Kbo),e(Op,Eq),e(Eq,Zbo),e(Op,evo),e(y,ovo),e(y,Vp),e(Vp,mde),e(mde,rvo),e(Vp,tvo),e(Vp,Cq),e(Cq,avo),e(Vp,nvo),e(y,svo),e(y,Xp),e(Xp,gde),e(gde,lvo),e(Xp,ivo),e(Xp,wq),e(wq,dvo),e(Xp,cvo),e(y,fvo),e(y,zp),e(zp,hde),e(hde,mvo),e(zp,gvo),e(zp,Aq),e(Aq,hvo),e(zp,pvo),e(y,_vo),e(y,Qp),e(Qp,pde),e(pde,uvo),e(Qp,bvo),e(Qp,Lq),e(Lq,vvo),e(Qp,Fvo),e(y,Tvo),e(y,Wp),e(Wp,_de),e(_de,Mvo),e(Wp,Evo),e(Wp,yq),e(yq,Cvo),e(Wp,wvo),e(y,Avo),e(y,Hp),e(Hp,ude),e(ude,Lvo),e(Hp,yvo),e(Hp,xq),e(xq,xvo),e(Hp,$vo),e(y,kvo),e(y,Up),e(Up,bde),e(bde,Svo),e(Up,Rvo),e(Up,$q),e($q,Pvo),e(Up,Bvo),e(y,Ivo),e(y,Jp),e(Jp,vde),e(vde,Nvo),e(Jp,qvo),e(Jp,kq),e(kq,jvo),e(Jp,Dvo),e(y,Gvo),e(y,Yp),e(Yp,Fde),e(Fde,Ovo),e(Yp,Vvo),e(Yp,Sq),e(Sq,Xvo),e(Yp,zvo),e(y,Qvo),e(y,Kp),e(Kp,Tde),e(Tde,Wvo),e(Kp,Hvo),e(Kp,Rq),e(Rq,Uvo),e(Kp,Jvo),e(y,Yvo),e(y,Zp),e(Zp,Mde),e(Mde,Kvo),e(Zp,Zvo),e(Zp,Pq),e(Pq,eFo),e(Zp,oFo),e(y,rFo),e(y,e_),e(e_,Ede),e(Ede,tFo),e(e_,aFo),e(e_,Bq),e(Bq,nFo),e(e_,sFo),e(y,lFo),e(y,o_),e(o_,Cde),e(Cde,iFo),e(o_,dFo),e(o_,Iq),e(Iq,cFo),e(o_,fFo),e(y,mFo),e(y,r_),e(r_,wde),e(wde,gFo),e(r_,hFo),e(r_,Nq),e(Nq,pFo),e(r_,_Fo),e(y,uFo),e(y,t_),e(t_,Ade),e(Ade,bFo),e(t_,vFo),e(t_,qq),e(qq,FFo),e(t_,TFo),e(y,MFo),e(y,a_),e(a_,Lde),e(Lde,EFo),e(a_,CFo),e(a_,jq),e(jq,wFo),e(a_,AFo),e(y,LFo),e(y,n_),e(n_,yde),e(yde,yFo),e(n_,xFo),e(n_,Dq),e(Dq,$Fo),e(n_,kFo),e(y,SFo),e(y,s_),e(s_,xde),e(xde,RFo),e(s_,PFo),e(s_,Gq),e(Gq,BFo),e(s_,IFo),e(y,NFo),e(y,l_),e(l_,$de),e($de,qFo),e(l_,jFo),e(l_,Oq),e(Oq,DFo),e(l_,GFo),e(y,OFo),e(y,i_),e(i_,kde),e(kde,VFo),e(i_,XFo),e(i_,Vq),e(Vq,zFo),e(i_,QFo),e(y,WFo),e(y,d_),e(d_,Sde),e(Sde,HFo),e(d_,UFo),e(d_,Xq),e(Xq,JFo),e(d_,YFo),e(y,KFo),e(y,c_),e(c_,Rde),e(Rde,ZFo),e(c_,eTo),e(c_,zq),e(zq,oTo),e(c_,rTo),e(y,tTo),e(y,f_),e(f_,Pde),e(Pde,aTo),e(f_,nTo),e(f_,Qq),e(Qq,sTo),e(f_,lTo),e(y,iTo),e(y,m_),e(m_,Bde),e(Bde,dTo),e(m_,cTo),e(m_,Wq),e(Wq,fTo),e(m_,mTo),e(y,gTo),e(y,Xs),e(Xs,Ide),e(Ide,hTo),e(Xs,pTo),e(Xs,Hq),e(Hq,_To),e(Xs,uTo),e(Xs,Uq),e(Uq,bTo),e(Xs,vTo),e(y,FTo),e(y,g_),e(g_,Nde),e(Nde,TTo),e(g_,MTo),e(g_,Jq),e(Jq,ETo),e(g_,CTo),e(y,wTo),e(y,h_),e(h_,qde),e(qde,ATo),e(h_,LTo),e(h_,Yq),e(Yq,yTo),e(h_,xTo),e(y,$To),e(y,p_),e(p_,jde),e(jde,kTo),e(p_,STo),e(p_,Kq),e(Kq,RTo),e(p_,PTo),e(y,BTo),e(y,__),e(__,Dde),e(Dde,ITo),e(__,NTo),e(__,Zq),e(Zq,qTo),e(__,jTo),e(y,DTo),e(y,u_),e(u_,Gde),e(Gde,GTo),e(u_,OTo),e(u_,ej),e(ej,VTo),e(u_,XTo),e(y,zTo),e(y,b_),e(b_,Ode),e(Ode,QTo),e(b_,WTo),e(b_,oj),e(oj,HTo),e(b_,UTo),e(y,JTo),e(y,v_),e(v_,Vde),e(Vde,YTo),e(v_,KTo),e(v_,rj),e(rj,ZTo),e(v_,e7o),e(y,o7o),e(y,F_),e(F_,Xde),e(Xde,r7o),e(F_,t7o),e(F_,tj),e(tj,a7o),e(F_,n7o),e(y,s7o),e(y,T_),e(T_,zde),e(zde,l7o),e(T_,i7o),e(T_,aj),e(aj,d7o),e(T_,c7o),e(y,f7o),e(y,M_),e(M_,Qde),e(Qde,m7o),e(M_,g7o),e(M_,nj),e(nj,h7o),e(M_,p7o),e(y,_7o),e(y,E_),e(E_,Wde),e(Wde,u7o),e(E_,b7o),e(E_,sj),e(sj,v7o),e(E_,F7o),e(y,T7o),e(y,C_),e(C_,Hde),e(Hde,M7o),e(C_,E7o),e(C_,lj),e(lj,C7o),e(C_,w7o),e(y,A7o),e(y,w_),e(w_,Ude),e(Ude,L7o),e(w_,y7o),e(w_,ij),e(ij,x7o),e(w_,$7o),e(y,k7o),e(y,A_),e(A_,Jde),e(Jde,S7o),e(A_,R7o),e(A_,dj),e(dj,P7o),e(A_,B7o),e(y,I7o),e(y,L_),e(L_,Yde),e(Yde,N7o),e(L_,q7o),e(L_,cj),e(cj,j7o),e(L_,D7o),e(y,G7o),e(y,y_),e(y_,Kde),e(Kde,O7o),e(y_,V7o),e(y_,fj),e(fj,X7o),e(y_,z7o),e(y,Q7o),e(y,x_),e(x_,Zde),e(Zde,W7o),e(x_,H7o),e(x_,mj),e(mj,U7o),e(x_,J7o),e(y,Y7o),e(y,$_),e($_,ece),e(ece,K7o),e($_,Z7o),e($_,gj),e(gj,eMo),e($_,oMo),e(y,rMo),e(y,k_),e(k_,oce),e(oce,tMo),e(k_,aMo),e(k_,hj),e(hj,nMo),e(k_,sMo),e(y,lMo),e(y,S_),e(S_,rce),e(rce,iMo),e(S_,dMo),e(S_,pj),e(pj,cMo),e(S_,fMo),e(y,mMo),e(y,R_),e(R_,tce),e(tce,gMo),e(R_,hMo),e(R_,_j),e(_j,pMo),e(R_,_Mo),e(y,uMo),e(y,P_),e(P_,ace),e(ace,bMo),e(P_,vMo),e(P_,uj),e(uj,FMo),e(P_,TMo),e(y,MMo),e(y,B_),e(B_,nce),e(nce,EMo),e(B_,CMo),e(B_,bj),e(bj,wMo),e(B_,AMo),e(y,LMo),e(y,I_),e(I_,sce),e(sce,yMo),e(I_,xMo),e(I_,vj),e(vj,$Mo),e(I_,kMo),e(y,SMo),e(y,N_),e(N_,lce),e(lce,RMo),e(N_,PMo),e(N_,Fj),e(Fj,BMo),e(N_,IMo),e(y,NMo),e(y,q_),e(q_,ice),e(ice,qMo),e(q_,jMo),e(q_,Tj),e(Tj,DMo),e(q_,GMo),e(y,OMo),e(y,j_),e(j_,dce),e(dce,VMo),e(j_,XMo),e(j_,Mj),e(Mj,zMo),e(j_,QMo),e(y,WMo),e(y,D_),e(D_,cce),e(cce,HMo),e(D_,UMo),e(D_,Ej),e(Ej,JMo),e(D_,YMo),e(y,KMo),e(y,G_),e(G_,fce),e(fce,ZMo),e(G_,eEo),e(G_,Cj),e(Cj,oEo),e(G_,rEo),e(y,tEo),e(y,O_),e(O_,mce),e(mce,aEo),e(O_,nEo),e(O_,wj),e(wj,sEo),e(O_,lEo),e(y,iEo),e(y,V_),e(V_,gce),e(gce,dEo),e(V_,cEo),e(V_,Aj),e(Aj,fEo),e(V_,mEo),e(y,gEo),e(y,X_),e(X_,hce),e(hce,hEo),e(X_,pEo),e(X_,Lj),e(Lj,_Eo),e(X_,uEo),e(y,bEo),e(y,z_),e(z_,pce),e(pce,vEo),e(z_,FEo),e(z_,yj),e(yj,TEo),e(z_,MEo),e(y,EEo),e(y,Q_),e(Q_,_ce),e(_ce,CEo),e(Q_,wEo),e(Q_,xj),e(xj,AEo),e(Q_,LEo),e(y,yEo),e(y,W_),e(W_,uce),e(uce,xEo),e(W_,$Eo),e(W_,$j),e($j,kEo),e(W_,SEo),e(y,REo),e(y,H_),e(H_,bce),e(bce,PEo),e(H_,BEo),e(H_,kj),e(kj,IEo),e(H_,NEo),e(y,qEo),e(y,U_),e(U_,vce),e(vce,jEo),e(U_,DEo),e(U_,Sj),e(Sj,GEo),e(U_,OEo),e(y,VEo),e(y,J_),e(J_,Fce),e(Fce,XEo),e(J_,zEo),e(J_,Rj),e(Rj,QEo),e(J_,WEo),e(y,HEo),e(y,Y_),e(Y_,Tce),e(Tce,UEo),e(Y_,JEo),e(Y_,Pj),e(Pj,YEo),e(Y_,KEo),e(y,ZEo),e(y,K_),e(K_,Mce),e(Mce,e4o),e(K_,o4o),e(K_,Bj),e(Bj,r4o),e(K_,t4o),e(y,a4o),e(y,Z_),e(Z_,Ece),e(Ece,n4o),e(Z_,s4o),e(Z_,Ij),e(Ij,l4o),e(Z_,i4o),e(y,d4o),e(y,eu),e(eu,Cce),e(Cce,c4o),e(eu,f4o),e(eu,Nj),e(Nj,m4o),e(eu,g4o),e(y,h4o),e(y,ou),e(ou,wce),e(wce,p4o),e(ou,_4o),e(ou,qj),e(qj,u4o),e(ou,b4o),e(y,v4o),e(y,ru),e(ru,Ace),e(Ace,F4o),e(ru,T4o),e(ru,jj),e(jj,M4o),e(ru,E4o),e(y,C4o),e(y,tu),e(tu,Lce),e(Lce,w4o),e(tu,A4o),e(tu,Dj),e(Dj,L4o),e(tu,y4o),e(y,x4o),e(y,au),e(au,yce),e(yce,$4o),e(au,k4o),e(au,Gj),e(Gj,S4o),e(au,R4o),e(y,P4o),e(y,nu),e(nu,xce),e(xce,B4o),e(nu,I4o),e(nu,Oj),e(Oj,N4o),e(nu,q4o),e(y,j4o),e(y,su),e(su,$ce),e($ce,D4o),e(su,G4o),e(su,Vj),e(Vj,O4o),e(su,V4o),e(y,X4o),e(y,lu),e(lu,kce),e(kce,z4o),e(lu,Q4o),e(lu,Xj),e(Xj,W4o),e(lu,H4o),e(y,U4o),e(y,iu),e(iu,Sce),e(Sce,J4o),e(iu,Y4o),e(iu,zj),e(zj,K4o),e(iu,Z4o),e(y,eCo),e(y,du),e(du,Rce),e(Rce,oCo),e(du,rCo),e(du,Qj),e(Qj,tCo),e(du,aCo),e(y,nCo),e(y,cu),e(cu,Pce),e(Pce,sCo),e(cu,lCo),e(cu,Wj),e(Wj,iCo),e(cu,dCo),e(y,cCo),e(y,fu),e(fu,Bce),e(Bce,fCo),e(fu,mCo),e(fu,Hj),e(Hj,gCo),e(fu,hCo),e(y,pCo),e(y,mu),e(mu,Ice),e(Ice,_Co),e(mu,uCo),e(mu,Uj),e(Uj,bCo),e(mu,vCo),e(y,FCo),e(y,gu),e(gu,Nce),e(Nce,TCo),e(gu,MCo),e(gu,Jj),e(Jj,ECo),e(gu,CCo),e(y,wCo),e(y,hu),e(hu,qce),e(qce,ACo),e(hu,LCo),e(hu,Yj),e(Yj,yCo),e(hu,xCo),e(y,$Co),e(y,pu),e(pu,jce),e(jce,kCo),e(pu,SCo),e(pu,Kj),e(Kj,RCo),e(pu,PCo),e(y,BCo),e(y,_u),e(_u,Dce),e(Dce,ICo),e(_u,NCo),e(_u,Zj),e(Zj,qCo),e(_u,jCo),e(y,DCo),e(y,uu),e(uu,Gce),e(Gce,GCo),e(uu,OCo),e(uu,eD),e(eD,VCo),e(uu,XCo),e(y,zCo),e(y,bu),e(bu,Oce),e(Oce,QCo),e(bu,WCo),e(bu,oD),e(oD,HCo),e(bu,UCo),e(y,JCo),e(y,vu),e(vu,Vce),e(Vce,YCo),e(vu,KCo),e(vu,rD),e(rD,ZCo),e(vu,e5o),e(y,o5o),e(y,Fu),e(Fu,Xce),e(Xce,r5o),e(Fu,t5o),e(Fu,tD),e(tD,a5o),e(Fu,n5o),e(y,s5o),e(y,Tu),e(Tu,zce),e(zce,l5o),e(Tu,i5o),e(Tu,aD),e(aD,d5o),e(Tu,c5o),e(y,f5o),e(y,Mu),e(Mu,Qce),e(Qce,m5o),e(Mu,g5o),e(Mu,nD),e(nD,h5o),e(Mu,p5o),e(y,_5o),e(y,Eu),e(Eu,Wce),e(Wce,u5o),e(Eu,b5o),e(Eu,sD),e(sD,v5o),e(Eu,F5o),e(y,T5o),e(y,Cu),e(Cu,Hce),e(Hce,M5o),e(Cu,E5o),e(Cu,lD),e(lD,C5o),e(Cu,w5o),e(y,A5o),e(y,wu),e(wu,Uce),e(Uce,L5o),e(wu,y5o),e(wu,iD),e(iD,x5o),e(wu,$5o),e(y,k5o),e(y,Au),e(Au,Jce),e(Jce,S5o),e(Au,R5o),e(Au,dD),e(dD,P5o),e(Au,B5o),e(y,I5o),e(y,Lu),e(Lu,Yce),e(Yce,N5o),e(Lu,q5o),e(Lu,cD),e(cD,j5o),e(Lu,D5o),e(y,G5o),e(y,yu),e(yu,Kce),e(Kce,O5o),e(yu,V5o),e(yu,fD),e(fD,X5o),e(yu,z5o),e(y,Q5o),e(y,xu),e(xu,Zce),e(Zce,W5o),e(xu,H5o),e(xu,mD),e(mD,U5o),e(xu,J5o),e(y,Y5o),e(y,$u),e($u,efe),e(efe,K5o),e($u,Z5o),e($u,gD),e(gD,e0o),e($u,o0o),e(y,r0o),e(y,ku),e(ku,ofe),e(ofe,t0o),e(ku,a0o),e(ku,hD),e(hD,n0o),e(ku,s0o),e(y,l0o),e(y,Su),e(Su,rfe),e(rfe,i0o),e(Su,d0o),e(Su,pD),e(pD,c0o),e(Su,f0o),e(Je,m0o),e(Je,Ru),e(Ru,g0o),e(Ru,tfe),e(tfe,h0o),e(Ru,p0o),e(Ru,afe),e(afe,_0o),e(Je,u0o),M(Pu,Je,null),b(f,TOe,u),b(f,ji,u),e(ji,Bu),e(Bu,nfe),M(fy,nfe,null),e(ji,b0o),e(ji,sfe),e(sfe,v0o),b(f,MOe,u),b(f,$o,u),M(my,$o,null),e($o,F0o),e($o,Di),e(Di,T0o),e(Di,_D),e(_D,M0o),e(Di,E0o),e(Di,uD),e(uD,C0o),e(Di,w0o),e($o,A0o),e($o,gy),e(gy,L0o),e(gy,lfe),e(lfe,y0o),e(gy,x0o),e($o,$0o),e($o,st),M(hy,st,null),e(st,k0o),e(st,ife),e(ife,S0o),e(st,R0o),e(st,Gi),e(Gi,P0o),e(Gi,dfe),e(dfe,B0o),e(Gi,I0o),e(Gi,bD),e(bD,N0o),e(Gi,q0o),e(st,j0o),M(Iu,st,null),e($o,D0o),e($o,Ye),M(py,Ye,null),e(Ye,G0o),e(Ye,cfe),e(cfe,O0o),e(Ye,V0o),e(Ye,Pa),e(Pa,X0o),e(Pa,ffe),e(ffe,z0o),e(Pa,Q0o),e(Pa,mfe),e(mfe,W0o),e(Pa,H0o),e(Pa,gfe),e(gfe,U0o),e(Pa,J0o),e(Ye,Y0o),e(Ye,G),e(G,Nu),e(Nu,hfe),e(hfe,K0o),e(Nu,Z0o),e(Nu,vD),e(vD,ewo),e(Nu,owo),e(G,rwo),e(G,qu),e(qu,pfe),e(pfe,two),e(qu,awo),e(qu,FD),e(FD,nwo),e(qu,swo),e(G,lwo),e(G,ju),e(ju,_fe),e(_fe,iwo),e(ju,dwo),e(ju,TD),e(TD,cwo),e(ju,fwo),e(G,mwo),e(G,Du),e(Du,ufe),e(ufe,gwo),e(Du,hwo),e(Du,MD),e(MD,pwo),e(Du,_wo),e(G,uwo),e(G,Gu),e(Gu,bfe),e(bfe,bwo),e(Gu,vwo),e(Gu,ED),e(ED,Fwo),e(Gu,Two),e(G,Mwo),e(G,Ou),e(Ou,vfe),e(vfe,Ewo),e(Ou,Cwo),e(Ou,CD),e(CD,wwo),e(Ou,Awo),e(G,Lwo),e(G,Vu),e(Vu,Ffe),e(Ffe,ywo),e(Vu,xwo),e(Vu,wD),e(wD,$wo),e(Vu,kwo),e(G,Swo),e(G,Xu),e(Xu,Tfe),e(Tfe,Rwo),e(Xu,Pwo),e(Xu,AD),e(AD,Bwo),e(Xu,Iwo),e(G,Nwo),e(G,zu),e(zu,Mfe),e(Mfe,qwo),e(zu,jwo),e(zu,LD),e(LD,Dwo),e(zu,Gwo),e(G,Owo),e(G,Qu),e(Qu,Efe),e(Efe,Vwo),e(Qu,Xwo),e(Qu,yD),e(yD,zwo),e(Qu,Qwo),e(G,Wwo),e(G,Wu),e(Wu,Cfe),e(Cfe,Hwo),e(Wu,Uwo),e(Wu,xD),e(xD,Jwo),e(Wu,Ywo),e(G,Kwo),e(G,Hu),e(Hu,wfe),e(wfe,Zwo),e(Hu,eAo),e(Hu,$D),e($D,oAo),e(Hu,rAo),e(G,tAo),e(G,Uu),e(Uu,Afe),e(Afe,aAo),e(Uu,nAo),e(Uu,kD),e(kD,sAo),e(Uu,lAo),e(G,iAo),e(G,Ju),e(Ju,Lfe),e(Lfe,dAo),e(Ju,cAo),e(Ju,SD),e(SD,fAo),e(Ju,mAo),e(G,gAo),e(G,Yu),e(Yu,yfe),e(yfe,hAo),e(Yu,pAo),e(Yu,RD),e(RD,_Ao),e(Yu,uAo),e(G,bAo),e(G,Ku),e(Ku,xfe),e(xfe,vAo),e(Ku,FAo),e(Ku,PD),e(PD,TAo),e(Ku,MAo),e(G,EAo),e(G,Zu),e(Zu,$fe),e($fe,CAo),e(Zu,wAo),e(Zu,BD),e(BD,AAo),e(Zu,LAo),e(G,yAo),e(G,e1),e(e1,kfe),e(kfe,xAo),e(e1,$Ao),e(e1,ID),e(ID,kAo),e(e1,SAo),e(G,RAo),e(G,o1),e(o1,Sfe),e(Sfe,PAo),e(o1,BAo),e(o1,ND),e(ND,IAo),e(o1,NAo),e(G,qAo),e(G,r1),e(r1,Rfe),e(Rfe,jAo),e(r1,DAo),e(r1,qD),e(qD,GAo),e(r1,OAo),e(G,VAo),e(G,t1),e(t1,Pfe),e(Pfe,XAo),e(t1,zAo),e(t1,jD),e(jD,QAo),e(t1,WAo),e(G,HAo),e(G,a1),e(a1,Bfe),e(Bfe,UAo),e(a1,JAo),e(a1,DD),e(DD,YAo),e(a1,KAo),e(G,ZAo),e(G,n1),e(n1,Ife),e(Ife,e6o),e(n1,o6o),e(n1,GD),e(GD,r6o),e(n1,t6o),e(G,a6o),e(G,s1),e(s1,Nfe),e(Nfe,n6o),e(s1,s6o),e(s1,OD),e(OD,l6o),e(s1,i6o),e(G,d6o),e(G,l1),e(l1,qfe),e(qfe,c6o),e(l1,f6o),e(l1,VD),e(VD,m6o),e(l1,g6o),e(G,h6o),e(G,i1),e(i1,jfe),e(jfe,p6o),e(i1,_6o),e(i1,XD),e(XD,u6o),e(i1,b6o),e(G,v6o),e(G,d1),e(d1,Dfe),e(Dfe,F6o),e(d1,T6o),e(d1,zD),e(zD,M6o),e(d1,E6o),e(G,C6o),e(G,c1),e(c1,Gfe),e(Gfe,w6o),e(c1,A6o),e(c1,QD),e(QD,L6o),e(c1,y6o),e(G,x6o),e(G,f1),e(f1,Ofe),e(Ofe,$6o),e(f1,k6o),e(f1,WD),e(WD,S6o),e(f1,R6o),e(G,P6o),e(G,m1),e(m1,Vfe),e(Vfe,B6o),e(m1,I6o),e(m1,HD),e(HD,N6o),e(m1,q6o),e(G,j6o),e(G,g1),e(g1,Xfe),e(Xfe,D6o),e(g1,G6o),e(g1,UD),e(UD,O6o),e(g1,V6o),e(G,X6o),e(G,h1),e(h1,zfe),e(zfe,z6o),e(h1,Q6o),e(h1,JD),e(JD,W6o),e(h1,H6o),e(G,U6o),e(G,p1),e(p1,Qfe),e(Qfe,J6o),e(p1,Y6o),e(p1,YD),e(YD,K6o),e(p1,Z6o),e(G,eLo),e(G,_1),e(_1,Wfe),e(Wfe,oLo),e(_1,rLo),e(_1,KD),e(KD,tLo),e(_1,aLo),e(G,nLo),e(G,u1),e(u1,Hfe),e(Hfe,sLo),e(u1,lLo),e(u1,ZD),e(ZD,iLo),e(u1,dLo),e(G,cLo),e(G,b1),e(b1,Ufe),e(Ufe,fLo),e(b1,mLo),e(b1,eG),e(eG,gLo),e(b1,hLo),e(G,pLo),e(G,v1),e(v1,Jfe),e(Jfe,_Lo),e(v1,uLo),e(v1,oG),e(oG,bLo),e(v1,vLo),e(G,FLo),e(G,F1),e(F1,Yfe),e(Yfe,TLo),e(F1,MLo),e(F1,rG),e(rG,ELo),e(F1,CLo),e(G,wLo),e(G,T1),e(T1,Kfe),e(Kfe,ALo),e(T1,LLo),e(T1,tG),e(tG,yLo),e(T1,xLo),e(G,$Lo),e(G,M1),e(M1,Zfe),e(Zfe,kLo),e(M1,SLo),e(M1,aG),e(aG,RLo),e(M1,PLo),e(G,BLo),e(G,E1),e(E1,eme),e(eme,ILo),e(E1,NLo),e(E1,nG),e(nG,qLo),e(E1,jLo),e(G,DLo),e(G,C1),e(C1,ome),e(ome,GLo),e(C1,OLo),e(C1,sG),e(sG,VLo),e(C1,XLo),e(G,zLo),e(G,w1),e(w1,rme),e(rme,QLo),e(w1,WLo),e(w1,lG),e(lG,HLo),e(w1,ULo),e(G,JLo),e(G,A1),e(A1,tme),e(tme,YLo),e(A1,KLo),e(A1,iG),e(iG,ZLo),e(A1,eyo),e(Ye,oyo),e(Ye,L1),e(L1,ryo),e(L1,ame),e(ame,tyo),e(L1,ayo),e(L1,nme),e(nme,nyo),e(Ye,syo),M(y1,Ye,null),b(f,EOe,u),b(f,Oi,u),e(Oi,x1),e(x1,sme),M(_y,sme,null),e(Oi,lyo),e(Oi,lme),e(lme,iyo),b(f,COe,u),b(f,ko,u),M(uy,ko,null),e(ko,dyo),e(ko,Vi),e(Vi,cyo),e(Vi,dG),e(dG,fyo),e(Vi,myo),e(Vi,cG),e(cG,gyo),e(Vi,hyo),e(ko,pyo),e(ko,by),e(by,_yo),e(by,ime),e(ime,uyo),e(by,byo),e(ko,vyo),e(ko,lt),M(vy,lt,null),e(lt,Fyo),e(lt,dme),e(dme,Tyo),e(lt,Myo),e(lt,Xi),e(Xi,Eyo),e(Xi,cme),e(cme,Cyo),e(Xi,wyo),e(Xi,fG),e(fG,Ayo),e(Xi,Lyo),e(lt,yyo),M($1,lt,null),e(ko,xyo),e(ko,Ke),M(Fy,Ke,null),e(Ke,$yo),e(Ke,fme),e(fme,kyo),e(Ke,Syo),e(Ke,Ba),e(Ba,Ryo),e(Ba,mme),e(mme,Pyo),e(Ba,Byo),e(Ba,gme),e(gme,Iyo),e(Ba,Nyo),e(Ba,hme),e(hme,qyo),e(Ba,jyo),e(Ke,Dyo),e(Ke,z),e(z,k1),e(k1,pme),e(pme,Gyo),e(k1,Oyo),e(k1,mG),e(mG,Vyo),e(k1,Xyo),e(z,zyo),e(z,S1),e(S1,_me),e(_me,Qyo),e(S1,Wyo),e(S1,gG),e(gG,Hyo),e(S1,Uyo),e(z,Jyo),e(z,R1),e(R1,ume),e(ume,Yyo),e(R1,Kyo),e(R1,hG),e(hG,Zyo),e(R1,e8o),e(z,o8o),e(z,P1),e(P1,bme),e(bme,r8o),e(P1,t8o),e(P1,pG),e(pG,a8o),e(P1,n8o),e(z,s8o),e(z,B1),e(B1,vme),e(vme,l8o),e(B1,i8o),e(B1,_G),e(_G,d8o),e(B1,c8o),e(z,f8o),e(z,I1),e(I1,Fme),e(Fme,m8o),e(I1,g8o),e(I1,uG),e(uG,h8o),e(I1,p8o),e(z,_8o),e(z,N1),e(N1,Tme),e(Tme,u8o),e(N1,b8o),e(N1,bG),e(bG,v8o),e(N1,F8o),e(z,T8o),e(z,q1),e(q1,Mme),e(Mme,M8o),e(q1,E8o),e(q1,vG),e(vG,C8o),e(q1,w8o),e(z,A8o),e(z,j1),e(j1,Eme),e(Eme,L8o),e(j1,y8o),e(j1,FG),e(FG,x8o),e(j1,$8o),e(z,k8o),e(z,D1),e(D1,Cme),e(Cme,S8o),e(D1,R8o),e(D1,TG),e(TG,P8o),e(D1,B8o),e(z,I8o),e(z,G1),e(G1,wme),e(wme,N8o),e(G1,q8o),e(G1,MG),e(MG,j8o),e(G1,D8o),e(z,G8o),e(z,O1),e(O1,Ame),e(Ame,O8o),e(O1,V8o),e(O1,EG),e(EG,X8o),e(O1,z8o),e(z,Q8o),e(z,V1),e(V1,Lme),e(Lme,W8o),e(V1,H8o),e(V1,CG),e(CG,U8o),e(V1,J8o),e(z,Y8o),e(z,X1),e(X1,yme),e(yme,K8o),e(X1,Z8o),e(X1,wG),e(wG,e9o),e(X1,o9o),e(z,r9o),e(z,z1),e(z1,xme),e(xme,t9o),e(z1,a9o),e(z1,AG),e(AG,n9o),e(z1,s9o),e(z,l9o),e(z,Q1),e(Q1,$me),e($me,i9o),e(Q1,d9o),e(Q1,LG),e(LG,c9o),e(Q1,f9o),e(z,m9o),e(z,W1),e(W1,kme),e(kme,g9o),e(W1,h9o),e(W1,yG),e(yG,p9o),e(W1,_9o),e(z,u9o),e(z,H1),e(H1,Sme),e(Sme,b9o),e(H1,v9o),e(H1,xG),e(xG,F9o),e(H1,T9o),e(z,M9o),e(z,U1),e(U1,Rme),e(Rme,E9o),e(U1,C9o),e(U1,$G),e($G,w9o),e(U1,A9o),e(z,L9o),e(z,J1),e(J1,Pme),e(Pme,y9o),e(J1,x9o),e(J1,kG),e(kG,$9o),e(J1,k9o),e(z,S9o),e(z,Y1),e(Y1,Bme),e(Bme,R9o),e(Y1,P9o),e(Y1,SG),e(SG,B9o),e(Y1,I9o),e(z,N9o),e(z,K1),e(K1,Ime),e(Ime,q9o),e(K1,j9o),e(K1,RG),e(RG,D9o),e(K1,G9o),e(z,O9o),e(z,Z1),e(Z1,Nme),e(Nme,V9o),e(Z1,X9o),e(Z1,PG),e(PG,z9o),e(Z1,Q9o),e(z,W9o),e(z,e3),e(e3,qme),e(qme,H9o),e(e3,U9o),e(e3,BG),e(BG,J9o),e(e3,Y9o),e(z,K9o),e(z,o3),e(o3,jme),e(jme,Z9o),e(o3,exo),e(o3,IG),e(IG,oxo),e(o3,rxo),e(z,txo),e(z,r3),e(r3,Dme),e(Dme,axo),e(r3,nxo),e(r3,NG),e(NG,sxo),e(r3,lxo),e(z,ixo),e(z,t3),e(t3,Gme),e(Gme,dxo),e(t3,cxo),e(t3,qG),e(qG,fxo),e(t3,mxo),e(z,gxo),e(z,a3),e(a3,Ome),e(Ome,hxo),e(a3,pxo),e(a3,jG),e(jG,_xo),e(a3,uxo),e(z,bxo),e(z,n3),e(n3,Vme),e(Vme,vxo),e(n3,Fxo),e(n3,DG),e(DG,Txo),e(n3,Mxo),e(z,Exo),e(z,s3),e(s3,Xme),e(Xme,Cxo),e(s3,wxo),e(s3,GG),e(GG,Axo),e(s3,Lxo),e(z,yxo),e(z,l3),e(l3,zme),e(zme,xxo),e(l3,$xo),e(l3,OG),e(OG,kxo),e(l3,Sxo),e(z,Rxo),e(z,i3),e(i3,Qme),e(Qme,Pxo),e(i3,Bxo),e(i3,VG),e(VG,Ixo),e(i3,Nxo),e(z,qxo),e(z,d3),e(d3,Wme),e(Wme,jxo),e(d3,Dxo),e(d3,XG),e(XG,Gxo),e(d3,Oxo),e(z,Vxo),e(z,c3),e(c3,Hme),e(Hme,Xxo),e(c3,zxo),e(c3,zG),e(zG,Qxo),e(c3,Wxo),e(z,Hxo),e(z,f3),e(f3,Ume),e(Ume,Uxo),e(f3,Jxo),e(f3,QG),e(QG,Yxo),e(f3,Kxo),e(z,Zxo),e(z,m3),e(m3,Jme),e(Jme,e$o),e(m3,o$o),e(m3,WG),e(WG,r$o),e(m3,t$o),e(z,a$o),e(z,g3),e(g3,Yme),e(Yme,n$o),e(g3,s$o),e(g3,HG),e(HG,l$o),e(g3,i$o),e(z,d$o),e(z,h3),e(h3,Kme),e(Kme,c$o),e(h3,f$o),e(h3,UG),e(UG,m$o),e(h3,g$o),e(Ke,h$o),e(Ke,p3),e(p3,p$o),e(p3,Zme),e(Zme,_$o),e(p3,u$o),e(p3,ege),e(ege,b$o),e(Ke,v$o),M(_3,Ke,null),b(f,wOe,u),b(f,zi,u),e(zi,u3),e(u3,oge),M(Ty,oge,null),e(zi,F$o),e(zi,rge),e(rge,T$o),b(f,AOe,u),b(f,So,u),M(My,So,null),e(So,M$o),e(So,Qi),e(Qi,E$o),e(Qi,JG),e(JG,C$o),e(Qi,w$o),e(Qi,YG),e(YG,A$o),e(Qi,L$o),e(So,y$o),e(So,Ey),e(Ey,x$o),e(Ey,tge),e(tge,$$o),e(Ey,k$o),e(So,S$o),e(So,it),M(Cy,it,null),e(it,R$o),e(it,age),e(age,P$o),e(it,B$o),e(it,Wi),e(Wi,I$o),e(Wi,nge),e(nge,N$o),e(Wi,q$o),e(Wi,KG),e(KG,j$o),e(Wi,D$o),e(it,G$o),M(b3,it,null),e(So,O$o),e(So,Ze),M(wy,Ze,null),e(Ze,V$o),e(Ze,sge),e(sge,X$o),e(Ze,z$o),e(Ze,Ia),e(Ia,Q$o),e(Ia,lge),e(lge,W$o),e(Ia,H$o),e(Ia,ige),e(ige,U$o),e(Ia,J$o),e(Ia,dge),e(dge,Y$o),e(Ia,K$o),e(Ze,Z$o),e(Ze,Q),e(Q,v3),e(v3,cge),e(cge,eko),e(v3,oko),e(v3,ZG),e(ZG,rko),e(v3,tko),e(Q,ako),e(Q,F3),e(F3,fge),e(fge,nko),e(F3,sko),e(F3,eO),e(eO,lko),e(F3,iko),e(Q,dko),e(Q,T3),e(T3,mge),e(mge,cko),e(T3,fko),e(T3,oO),e(oO,mko),e(T3,gko),e(Q,hko),e(Q,M3),e(M3,gge),e(gge,pko),e(M3,_ko),e(M3,rO),e(rO,uko),e(M3,bko),e(Q,vko),e(Q,E3),e(E3,hge),e(hge,Fko),e(E3,Tko),e(E3,tO),e(tO,Mko),e(E3,Eko),e(Q,Cko),e(Q,C3),e(C3,pge),e(pge,wko),e(C3,Ako),e(C3,aO),e(aO,Lko),e(C3,yko),e(Q,xko),e(Q,w3),e(w3,_ge),e(_ge,$ko),e(w3,kko),e(w3,nO),e(nO,Sko),e(w3,Rko),e(Q,Pko),e(Q,A3),e(A3,uge),e(uge,Bko),e(A3,Iko),e(A3,sO),e(sO,Nko),e(A3,qko),e(Q,jko),e(Q,L3),e(L3,bge),e(bge,Dko),e(L3,Gko),e(L3,lO),e(lO,Oko),e(L3,Vko),e(Q,Xko),e(Q,y3),e(y3,vge),e(vge,zko),e(y3,Qko),e(y3,iO),e(iO,Wko),e(y3,Hko),e(Q,Uko),e(Q,x3),e(x3,Fge),e(Fge,Jko),e(x3,Yko),e(x3,dO),e(dO,Kko),e(x3,Zko),e(Q,eSo),e(Q,$3),e($3,Tge),e(Tge,oSo),e($3,rSo),e($3,cO),e(cO,tSo),e($3,aSo),e(Q,nSo),e(Q,k3),e(k3,Mge),e(Mge,sSo),e(k3,lSo),e(k3,fO),e(fO,iSo),e(k3,dSo),e(Q,cSo),e(Q,S3),e(S3,Ege),e(Ege,fSo),e(S3,mSo),e(S3,mO),e(mO,gSo),e(S3,hSo),e(Q,pSo),e(Q,R3),e(R3,Cge),e(Cge,_So),e(R3,uSo),e(R3,gO),e(gO,bSo),e(R3,vSo),e(Q,FSo),e(Q,P3),e(P3,wge),e(wge,TSo),e(P3,MSo),e(P3,hO),e(hO,ESo),e(P3,CSo),e(Q,wSo),e(Q,B3),e(B3,Age),e(Age,ASo),e(B3,LSo),e(B3,pO),e(pO,ySo),e(B3,xSo),e(Q,$So),e(Q,I3),e(I3,Lge),e(Lge,kSo),e(I3,SSo),e(I3,_O),e(_O,RSo),e(I3,PSo),e(Q,BSo),e(Q,N3),e(N3,yge),e(yge,ISo),e(N3,NSo),e(N3,uO),e(uO,qSo),e(N3,jSo),e(Q,DSo),e(Q,q3),e(q3,xge),e(xge,GSo),e(q3,OSo),e(q3,bO),e(bO,VSo),e(q3,XSo),e(Q,zSo),e(Q,j3),e(j3,$ge),e($ge,QSo),e(j3,WSo),e(j3,vO),e(vO,HSo),e(j3,USo),e(Q,JSo),e(Q,D3),e(D3,kge),e(kge,YSo),e(D3,KSo),e(D3,FO),e(FO,ZSo),e(D3,eRo),e(Q,oRo),e(Q,G3),e(G3,Sge),e(Sge,rRo),e(G3,tRo),e(G3,TO),e(TO,aRo),e(G3,nRo),e(Q,sRo),e(Q,O3),e(O3,Rge),e(Rge,lRo),e(O3,iRo),e(O3,MO),e(MO,dRo),e(O3,cRo),e(Q,fRo),e(Q,V3),e(V3,Pge),e(Pge,mRo),e(V3,gRo),e(V3,EO),e(EO,hRo),e(V3,pRo),e(Q,_Ro),e(Q,X3),e(X3,Bge),e(Bge,uRo),e(X3,bRo),e(X3,CO),e(CO,vRo),e(X3,FRo),e(Q,TRo),e(Q,z3),e(z3,Ige),e(Ige,MRo),e(z3,ERo),e(z3,wO),e(wO,CRo),e(z3,wRo),e(Q,ARo),e(Q,Q3),e(Q3,Nge),e(Nge,LRo),e(Q3,yRo),e(Q3,AO),e(AO,xRo),e(Q3,$Ro),e(Q,kRo),e(Q,W3),e(W3,qge),e(qge,SRo),e(W3,RRo),e(W3,LO),e(LO,PRo),e(W3,BRo),e(Q,IRo),e(Q,H3),e(H3,jge),e(jge,NRo),e(H3,qRo),e(H3,yO),e(yO,jRo),e(H3,DRo),e(Q,GRo),e(Q,U3),e(U3,Dge),e(Dge,ORo),e(U3,VRo),e(U3,xO),e(xO,XRo),e(U3,zRo),e(Q,QRo),e(Q,J3),e(J3,Gge),e(Gge,WRo),e(J3,HRo),e(J3,$O),e($O,URo),e(J3,JRo),e(Q,YRo),e(Q,Y3),e(Y3,Oge),e(Oge,KRo),e(Y3,ZRo),e(Y3,Vge),e(Vge,ePo),e(Y3,oPo),e(Q,rPo),e(Q,K3),e(K3,Xge),e(Xge,tPo),e(K3,aPo),e(K3,kO),e(kO,nPo),e(K3,sPo),e(Q,lPo),e(Q,Z3),e(Z3,zge),e(zge,iPo),e(Z3,dPo),e(Z3,SO),e(SO,cPo),e(Z3,fPo),e(Q,mPo),e(Q,e2),e(e2,Qge),e(Qge,gPo),e(e2,hPo),e(e2,RO),e(RO,pPo),e(e2,_Po),e(Q,uPo),e(Q,o2),e(o2,Wge),e(Wge,bPo),e(o2,vPo),e(o2,PO),e(PO,FPo),e(o2,TPo),e(Ze,MPo),e(Ze,r2),e(r2,EPo),e(r2,Hge),e(Hge,CPo),e(r2,wPo),e(r2,Uge),e(Uge,APo),e(Ze,LPo),M(t2,Ze,null),b(f,LOe,u),b(f,Hi,u),e(Hi,a2),e(a2,Jge),M(Ay,Jge,null),e(Hi,yPo),e(Hi,Yge),e(Yge,xPo),b(f,yOe,u),b(f,Ro,u),M(Ly,Ro,null),e(Ro,$Po),e(Ro,Ui),e(Ui,kPo),e(Ui,BO),e(BO,SPo),e(Ui,RPo),e(Ui,IO),e(IO,PPo),e(Ui,BPo),e(Ro,IPo),e(Ro,yy),e(yy,NPo),e(yy,Kge),e(Kge,qPo),e(yy,jPo),e(Ro,DPo),e(Ro,dt),M(xy,dt,null),e(dt,GPo),e(dt,Zge),e(Zge,OPo),e(dt,VPo),e(dt,Ji),e(Ji,XPo),e(Ji,ehe),e(ehe,zPo),e(Ji,QPo),e(Ji,NO),e(NO,WPo),e(Ji,HPo),e(dt,UPo),M(n2,dt,null),e(Ro,JPo),e(Ro,eo),M($y,eo,null),e(eo,YPo),e(eo,ohe),e(ohe,KPo),e(eo,ZPo),e(eo,Na),e(Na,eBo),e(Na,rhe),e(rhe,oBo),e(Na,rBo),e(Na,the),e(the,tBo),e(Na,aBo),e(Na,ahe),e(ahe,nBo),e(Na,sBo),e(eo,lBo),e(eo,pe),e(pe,s2),e(s2,nhe),e(nhe,iBo),e(s2,dBo),e(s2,qO),e(qO,cBo),e(s2,fBo),e(pe,mBo),e(pe,l2),e(l2,she),e(she,gBo),e(l2,hBo),e(l2,jO),e(jO,pBo),e(l2,_Bo),e(pe,uBo),e(pe,i2),e(i2,lhe),e(lhe,bBo),e(i2,vBo),e(i2,DO),e(DO,FBo),e(i2,TBo),e(pe,MBo),e(pe,d2),e(d2,ihe),e(ihe,EBo),e(d2,CBo),e(d2,GO),e(GO,wBo),e(d2,ABo),e(pe,LBo),e(pe,c2),e(c2,dhe),e(dhe,yBo),e(c2,xBo),e(c2,OO),e(OO,$Bo),e(c2,kBo),e(pe,SBo),e(pe,f2),e(f2,che),e(che,RBo),e(f2,PBo),e(f2,VO),e(VO,BBo),e(f2,IBo),e(pe,NBo),e(pe,m2),e(m2,fhe),e(fhe,qBo),e(m2,jBo),e(m2,XO),e(XO,DBo),e(m2,GBo),e(pe,OBo),e(pe,g2),e(g2,mhe),e(mhe,VBo),e(g2,XBo),e(g2,zO),e(zO,zBo),e(g2,QBo),e(pe,WBo),e(pe,h2),e(h2,ghe),e(ghe,HBo),e(h2,UBo),e(h2,QO),e(QO,JBo),e(h2,YBo),e(pe,KBo),e(pe,p2),e(p2,hhe),e(hhe,ZBo),e(p2,eIo),e(p2,WO),e(WO,oIo),e(p2,rIo),e(pe,tIo),e(pe,_2),e(_2,phe),e(phe,aIo),e(_2,nIo),e(_2,HO),e(HO,sIo),e(_2,lIo),e(pe,iIo),e(pe,u2),e(u2,_he),e(_he,dIo),e(u2,cIo),e(u2,UO),e(UO,fIo),e(u2,mIo),e(pe,gIo),e(pe,b2),e(b2,uhe),e(uhe,hIo),e(b2,pIo),e(b2,JO),e(JO,_Io),e(b2,uIo),e(pe,bIo),e(pe,v2),e(v2,bhe),e(bhe,vIo),e(v2,FIo),e(v2,YO),e(YO,TIo),e(v2,MIo),e(pe,EIo),e(pe,F2),e(F2,vhe),e(vhe,CIo),e(F2,wIo),e(F2,KO),e(KO,AIo),e(F2,LIo),e(pe,yIo),e(pe,T2),e(T2,Fhe),e(Fhe,xIo),e(T2,$Io),e(T2,ZO),e(ZO,kIo),e(T2,SIo),e(pe,RIo),e(pe,M2),e(M2,The),e(The,PIo),e(M2,BIo),e(M2,eV),e(eV,IIo),e(M2,NIo),e(eo,qIo),e(eo,E2),e(E2,jIo),e(E2,Mhe),e(Mhe,DIo),e(E2,GIo),e(E2,Ehe),e(Ehe,OIo),e(eo,VIo),M(C2,eo,null),b(f,xOe,u),b(f,Yi,u),e(Yi,w2),e(w2,Che),M(ky,Che,null),e(Yi,XIo),e(Yi,whe),e(whe,zIo),b(f,$Oe,u),b(f,Po,u),M(Sy,Po,null),e(Po,QIo),e(Po,Ki),e(Ki,WIo),e(Ki,oV),e(oV,HIo),e(Ki,UIo),e(Ki,rV),e(rV,JIo),e(Ki,YIo),e(Po,KIo),e(Po,Ry),e(Ry,ZIo),e(Ry,Ahe),e(Ahe,eNo),e(Ry,oNo),e(Po,rNo),e(Po,ct),M(Py,ct,null),e(ct,tNo),e(ct,Lhe),e(Lhe,aNo),e(ct,nNo),e(ct,Zi),e(Zi,sNo),e(Zi,yhe),e(yhe,lNo),e(Zi,iNo),e(Zi,tV),e(tV,dNo),e(Zi,cNo),e(ct,fNo),M(A2,ct,null),e(Po,mNo),e(Po,oo),M(By,oo,null),e(oo,gNo),e(oo,xhe),e(xhe,hNo),e(oo,pNo),e(oo,qa),e(qa,_No),e(qa,$he),e($he,uNo),e(qa,bNo),e(qa,khe),e(khe,vNo),e(qa,FNo),e(qa,She),e(She,TNo),e(qa,MNo),e(oo,ENo),e(oo,N),e(N,L2),e(L2,Rhe),e(Rhe,CNo),e(L2,wNo),e(L2,aV),e(aV,ANo),e(L2,LNo),e(N,yNo),e(N,y2),e(y2,Phe),e(Phe,xNo),e(y2,$No),e(y2,nV),e(nV,kNo),e(y2,SNo),e(N,RNo),e(N,x2),e(x2,Bhe),e(Bhe,PNo),e(x2,BNo),e(x2,sV),e(sV,INo),e(x2,NNo),e(N,qNo),e(N,$2),e($2,Ihe),e(Ihe,jNo),e($2,DNo),e($2,lV),e(lV,GNo),e($2,ONo),e(N,VNo),e(N,k2),e(k2,Nhe),e(Nhe,XNo),e(k2,zNo),e(k2,iV),e(iV,QNo),e(k2,WNo),e(N,HNo),e(N,S2),e(S2,qhe),e(qhe,UNo),e(S2,JNo),e(S2,dV),e(dV,YNo),e(S2,KNo),e(N,ZNo),e(N,R2),e(R2,jhe),e(jhe,eqo),e(R2,oqo),e(R2,cV),e(cV,rqo),e(R2,tqo),e(N,aqo),e(N,P2),e(P2,Dhe),e(Dhe,nqo),e(P2,sqo),e(P2,fV),e(fV,lqo),e(P2,iqo),e(N,dqo),e(N,B2),e(B2,Ghe),e(Ghe,cqo),e(B2,fqo),e(B2,mV),e(mV,mqo),e(B2,gqo),e(N,hqo),e(N,I2),e(I2,Ohe),e(Ohe,pqo),e(I2,_qo),e(I2,gV),e(gV,uqo),e(I2,bqo),e(N,vqo),e(N,N2),e(N2,Vhe),e(Vhe,Fqo),e(N2,Tqo),e(N2,hV),e(hV,Mqo),e(N2,Eqo),e(N,Cqo),e(N,q2),e(q2,Xhe),e(Xhe,wqo),e(q2,Aqo),e(q2,pV),e(pV,Lqo),e(q2,yqo),e(N,xqo),e(N,j2),e(j2,zhe),e(zhe,$qo),e(j2,kqo),e(j2,_V),e(_V,Sqo),e(j2,Rqo),e(N,Pqo),e(N,D2),e(D2,Qhe),e(Qhe,Bqo),e(D2,Iqo),e(D2,uV),e(uV,Nqo),e(D2,qqo),e(N,jqo),e(N,G2),e(G2,Whe),e(Whe,Dqo),e(G2,Gqo),e(G2,bV),e(bV,Oqo),e(G2,Vqo),e(N,Xqo),e(N,O2),e(O2,Hhe),e(Hhe,zqo),e(O2,Qqo),e(O2,vV),e(vV,Wqo),e(O2,Hqo),e(N,Uqo),e(N,V2),e(V2,Uhe),e(Uhe,Jqo),e(V2,Yqo),e(V2,FV),e(FV,Kqo),e(V2,Zqo),e(N,ejo),e(N,X2),e(X2,Jhe),e(Jhe,ojo),e(X2,rjo),e(X2,TV),e(TV,tjo),e(X2,ajo),e(N,njo),e(N,z2),e(z2,Yhe),e(Yhe,sjo),e(z2,ljo),e(z2,MV),e(MV,ijo),e(z2,djo),e(N,cjo),e(N,Q2),e(Q2,Khe),e(Khe,fjo),e(Q2,mjo),e(Q2,EV),e(EV,gjo),e(Q2,hjo),e(N,pjo),e(N,W2),e(W2,Zhe),e(Zhe,_jo),e(W2,ujo),e(W2,CV),e(CV,bjo),e(W2,vjo),e(N,Fjo),e(N,H2),e(H2,epe),e(epe,Tjo),e(H2,Mjo),e(H2,wV),e(wV,Ejo),e(H2,Cjo),e(N,wjo),e(N,U2),e(U2,ope),e(ope,Ajo),e(U2,Ljo),e(U2,AV),e(AV,yjo),e(U2,xjo),e(N,$jo),e(N,J2),e(J2,rpe),e(rpe,kjo),e(J2,Sjo),e(J2,LV),e(LV,Rjo),e(J2,Pjo),e(N,Bjo),e(N,Y2),e(Y2,tpe),e(tpe,Ijo),e(Y2,Njo),e(Y2,yV),e(yV,qjo),e(Y2,jjo),e(N,Djo),e(N,K2),e(K2,ape),e(ape,Gjo),e(K2,Ojo),e(K2,xV),e(xV,Vjo),e(K2,Xjo),e(N,zjo),e(N,Z2),e(Z2,npe),e(npe,Qjo),e(Z2,Wjo),e(Z2,$V),e($V,Hjo),e(Z2,Ujo),e(N,Jjo),e(N,eb),e(eb,spe),e(spe,Yjo),e(eb,Kjo),e(eb,kV),e(kV,Zjo),e(eb,eDo),e(N,oDo),e(N,ob),e(ob,lpe),e(lpe,rDo),e(ob,tDo),e(ob,SV),e(SV,aDo),e(ob,nDo),e(N,sDo),e(N,rb),e(rb,ipe),e(ipe,lDo),e(rb,iDo),e(rb,RV),e(RV,dDo),e(rb,cDo),e(N,fDo),e(N,tb),e(tb,dpe),e(dpe,mDo),e(tb,gDo),e(tb,PV),e(PV,hDo),e(tb,pDo),e(N,_Do),e(N,ab),e(ab,cpe),e(cpe,uDo),e(ab,bDo),e(ab,BV),e(BV,vDo),e(ab,FDo),e(N,TDo),e(N,nb),e(nb,fpe),e(fpe,MDo),e(nb,EDo),e(nb,IV),e(IV,CDo),e(nb,wDo),e(N,ADo),e(N,sb),e(sb,mpe),e(mpe,LDo),e(sb,yDo),e(sb,NV),e(NV,xDo),e(sb,$Do),e(N,kDo),e(N,lb),e(lb,gpe),e(gpe,SDo),e(lb,RDo),e(lb,qV),e(qV,PDo),e(lb,BDo),e(N,IDo),e(N,ib),e(ib,hpe),e(hpe,NDo),e(ib,qDo),e(ib,jV),e(jV,jDo),e(ib,DDo),e(N,GDo),e(N,db),e(db,ppe),e(ppe,ODo),e(db,VDo),e(db,DV),e(DV,XDo),e(db,zDo),e(N,QDo),e(N,cb),e(cb,_pe),e(_pe,WDo),e(cb,HDo),e(cb,GV),e(GV,UDo),e(cb,JDo),e(N,YDo),e(N,fb),e(fb,upe),e(upe,KDo),e(fb,ZDo),e(fb,OV),e(OV,eGo),e(fb,oGo),e(N,rGo),e(N,mb),e(mb,bpe),e(bpe,tGo),e(mb,aGo),e(mb,VV),e(VV,nGo),e(mb,sGo),e(N,lGo),e(N,gb),e(gb,vpe),e(vpe,iGo),e(gb,dGo),e(gb,XV),e(XV,cGo),e(gb,fGo),e(N,mGo),e(N,hb),e(hb,Fpe),e(Fpe,gGo),e(hb,hGo),e(hb,zV),e(zV,pGo),e(hb,_Go),e(N,uGo),e(N,pb),e(pb,Tpe),e(Tpe,bGo),e(pb,vGo),e(pb,QV),e(QV,FGo),e(pb,TGo),e(N,MGo),e(N,_b),e(_b,Mpe),e(Mpe,EGo),e(_b,CGo),e(_b,WV),e(WV,wGo),e(_b,AGo),e(N,LGo),e(N,ub),e(ub,Epe),e(Epe,yGo),e(ub,xGo),e(ub,HV),e(HV,$Go),e(ub,kGo),e(N,SGo),e(N,bb),e(bb,Cpe),e(Cpe,RGo),e(bb,PGo),e(bb,UV),e(UV,BGo),e(bb,IGo),e(N,NGo),e(N,vb),e(vb,wpe),e(wpe,qGo),e(vb,jGo),e(vb,JV),e(JV,DGo),e(vb,GGo),e(N,OGo),e(N,Fb),e(Fb,Ape),e(Ape,VGo),e(Fb,XGo),e(Fb,YV),e(YV,zGo),e(Fb,QGo),e(N,WGo),e(N,Tb),e(Tb,Lpe),e(Lpe,HGo),e(Tb,UGo),e(Tb,KV),e(KV,JGo),e(Tb,YGo),e(oo,KGo),e(oo,Mb),e(Mb,ZGo),e(Mb,ype),e(ype,eOo),e(Mb,oOo),e(Mb,xpe),e(xpe,rOo),e(oo,tOo),M(Eb,oo,null),b(f,kOe,u),b(f,ed,u),e(ed,Cb),e(Cb,$pe),M(Iy,$pe,null),e(ed,aOo),e(ed,kpe),e(kpe,nOo),b(f,SOe,u),b(f,Bo,u),M(Ny,Bo,null),e(Bo,sOo),e(Bo,od),e(od,lOo),e(od,ZV),e(ZV,iOo),e(od,dOo),e(od,eX),e(eX,cOo),e(od,fOo),e(Bo,mOo),e(Bo,qy),e(qy,gOo),e(qy,Spe),e(Spe,hOo),e(qy,pOo),e(Bo,_Oo),e(Bo,ft),M(jy,ft,null),e(ft,uOo),e(ft,Rpe),e(Rpe,bOo),e(ft,vOo),e(ft,rd),e(rd,FOo),e(rd,Ppe),e(Ppe,TOo),e(rd,MOo),e(rd,oX),e(oX,EOo),e(rd,COo),e(ft,wOo),M(wb,ft,null),e(Bo,AOo),e(Bo,ro),M(Dy,ro,null),e(ro,LOo),e(ro,Bpe),e(Bpe,yOo),e(ro,xOo),e(ro,ja),e(ja,$Oo),e(ja,Ipe),e(Ipe,kOo),e(ja,SOo),e(ja,Npe),e(Npe,ROo),e(ja,POo),e(ja,qpe),e(qpe,BOo),e(ja,IOo),e(ro,NOo),e(ro,Z),e(Z,Ab),e(Ab,jpe),e(jpe,qOo),e(Ab,jOo),e(Ab,rX),e(rX,DOo),e(Ab,GOo),e(Z,OOo),e(Z,Lb),e(Lb,Dpe),e(Dpe,VOo),e(Lb,XOo),e(Lb,tX),e(tX,zOo),e(Lb,QOo),e(Z,WOo),e(Z,yb),e(yb,Gpe),e(Gpe,HOo),e(yb,UOo),e(yb,aX),e(aX,JOo),e(yb,YOo),e(Z,KOo),e(Z,xb),e(xb,Ope),e(Ope,ZOo),e(xb,eVo),e(xb,nX),e(nX,oVo),e(xb,rVo),e(Z,tVo),e(Z,$b),e($b,Vpe),e(Vpe,aVo),e($b,nVo),e($b,sX),e(sX,sVo),e($b,lVo),e(Z,iVo),e(Z,kb),e(kb,Xpe),e(Xpe,dVo),e(kb,cVo),e(kb,lX),e(lX,fVo),e(kb,mVo),e(Z,gVo),e(Z,Sb),e(Sb,zpe),e(zpe,hVo),e(Sb,pVo),e(Sb,iX),e(iX,_Vo),e(Sb,uVo),e(Z,bVo),e(Z,Rb),e(Rb,Qpe),e(Qpe,vVo),e(Rb,FVo),e(Rb,dX),e(dX,TVo),e(Rb,MVo),e(Z,EVo),e(Z,Pb),e(Pb,Wpe),e(Wpe,CVo),e(Pb,wVo),e(Pb,cX),e(cX,AVo),e(Pb,LVo),e(Z,yVo),e(Z,Bb),e(Bb,Hpe),e(Hpe,xVo),e(Bb,$Vo),e(Bb,fX),e(fX,kVo),e(Bb,SVo),e(Z,RVo),e(Z,Ib),e(Ib,Upe),e(Upe,PVo),e(Ib,BVo),e(Ib,mX),e(mX,IVo),e(Ib,NVo),e(Z,qVo),e(Z,Nb),e(Nb,Jpe),e(Jpe,jVo),e(Nb,DVo),e(Nb,gX),e(gX,GVo),e(Nb,OVo),e(Z,VVo),e(Z,qb),e(qb,Ype),e(Ype,XVo),e(qb,zVo),e(qb,hX),e(hX,QVo),e(qb,WVo),e(Z,HVo),e(Z,jb),e(jb,Kpe),e(Kpe,UVo),e(jb,JVo),e(jb,pX),e(pX,YVo),e(jb,KVo),e(Z,ZVo),e(Z,Db),e(Db,Zpe),e(Zpe,eXo),e(Db,oXo),e(Db,_X),e(_X,rXo),e(Db,tXo),e(Z,aXo),e(Z,Gb),e(Gb,e_e),e(e_e,nXo),e(Gb,sXo),e(Gb,uX),e(uX,lXo),e(Gb,iXo),e(Z,dXo),e(Z,Ob),e(Ob,o_e),e(o_e,cXo),e(Ob,fXo),e(Ob,bX),e(bX,mXo),e(Ob,gXo),e(Z,hXo),e(Z,Vb),e(Vb,r_e),e(r_e,pXo),e(Vb,_Xo),e(Vb,vX),e(vX,uXo),e(Vb,bXo),e(Z,vXo),e(Z,Xb),e(Xb,t_e),e(t_e,FXo),e(Xb,TXo),e(Xb,FX),e(FX,MXo),e(Xb,EXo),e(Z,CXo),e(Z,zb),e(zb,a_e),e(a_e,wXo),e(zb,AXo),e(zb,TX),e(TX,LXo),e(zb,yXo),e(Z,xXo),e(Z,Qb),e(Qb,n_e),e(n_e,$Xo),e(Qb,kXo),e(Qb,MX),e(MX,SXo),e(Qb,RXo),e(Z,PXo),e(Z,Wb),e(Wb,s_e),e(s_e,BXo),e(Wb,IXo),e(Wb,EX),e(EX,NXo),e(Wb,qXo),e(Z,jXo),e(Z,Hb),e(Hb,l_e),e(l_e,DXo),e(Hb,GXo),e(Hb,CX),e(CX,OXo),e(Hb,VXo),e(Z,XXo),e(Z,Ub),e(Ub,i_e),e(i_e,zXo),e(Ub,QXo),e(Ub,wX),e(wX,WXo),e(Ub,HXo),e(Z,UXo),e(Z,Jb),e(Jb,d_e),e(d_e,JXo),e(Jb,YXo),e(Jb,AX),e(AX,KXo),e(Jb,ZXo),e(Z,ezo),e(Z,Yb),e(Yb,c_e),e(c_e,ozo),e(Yb,rzo),e(Yb,LX),e(LX,tzo),e(Yb,azo),e(Z,nzo),e(Z,Kb),e(Kb,f_e),e(f_e,szo),e(Kb,lzo),e(Kb,yX),e(yX,izo),e(Kb,dzo),e(Z,czo),e(Z,Zb),e(Zb,m_e),e(m_e,fzo),e(Zb,mzo),e(Zb,xX),e(xX,gzo),e(Zb,hzo),e(Z,pzo),e(Z,ev),e(ev,g_e),e(g_e,_zo),e(ev,uzo),e(ev,$X),e($X,bzo),e(ev,vzo),e(Z,Fzo),e(Z,ov),e(ov,h_e),e(h_e,Tzo),e(ov,Mzo),e(ov,kX),e(kX,Ezo),e(ov,Czo),e(ro,wzo),e(ro,rv),e(rv,Azo),e(rv,p_e),e(p_e,Lzo),e(rv,yzo),e(rv,__e),e(__e,xzo),e(ro,$zo),M(tv,ro,null),b(f,ROe,u),b(f,td,u),e(td,av),e(av,u_e),M(Gy,u_e,null),e(td,kzo),e(td,b_e),e(b_e,Szo),b(f,POe,u),b(f,Io,u),M(Oy,Io,null),e(Io,Rzo),e(Io,ad),e(ad,Pzo),e(ad,SX),e(SX,Bzo),e(ad,Izo),e(ad,RX),e(RX,Nzo),e(ad,qzo),e(Io,jzo),e(Io,Vy),e(Vy,Dzo),e(Vy,v_e),e(v_e,Gzo),e(Vy,Ozo),e(Io,Vzo),e(Io,mt),M(Xy,mt,null),e(mt,Xzo),e(mt,F_e),e(F_e,zzo),e(mt,Qzo),e(mt,nd),e(nd,Wzo),e(nd,T_e),e(T_e,Hzo),e(nd,Uzo),e(nd,PX),e(PX,Jzo),e(nd,Yzo),e(mt,Kzo),M(nv,mt,null),e(Io,Zzo),e(Io,to),M(zy,to,null),e(to,eQo),e(to,M_e),e(M_e,oQo),e(to,rQo),e(to,Da),e(Da,tQo),e(Da,E_e),e(E_e,aQo),e(Da,nQo),e(Da,C_e),e(C_e,sQo),e(Da,lQo),e(Da,w_e),e(w_e,iQo),e(Da,dQo),e(to,cQo),e(to,No),e(No,sv),e(sv,A_e),e(A_e,fQo),e(sv,mQo),e(sv,BX),e(BX,gQo),e(sv,hQo),e(No,pQo),e(No,lv),e(lv,L_e),e(L_e,_Qo),e(lv,uQo),e(lv,IX),e(IX,bQo),e(lv,vQo),e(No,FQo),e(No,iv),e(iv,y_e),e(y_e,TQo),e(iv,MQo),e(iv,NX),e(NX,EQo),e(iv,CQo),e(No,wQo),e(No,dv),e(dv,x_e),e(x_e,AQo),e(dv,LQo),e(dv,qX),e(qX,yQo),e(dv,xQo),e(No,$Qo),e(No,cv),e(cv,$_e),e($_e,kQo),e(cv,SQo),e(cv,jX),e(jX,RQo),e(cv,PQo),e(No,BQo),e(No,fv),e(fv,k_e),e(k_e,IQo),e(fv,NQo),e(fv,DX),e(DX,qQo),e(fv,jQo),e(to,DQo),e(to,mv),e(mv,GQo),e(mv,S_e),e(S_e,OQo),e(mv,VQo),e(mv,R_e),e(R_e,XQo),e(to,zQo),M(gv,to,null),b(f,BOe,u),b(f,sd,u),e(sd,hv),e(hv,P_e),M(Qy,P_e,null),e(sd,QQo),e(sd,B_e),e(B_e,WQo),b(f,IOe,u),b(f,qo,u),M(Wy,qo,null),e(qo,HQo),e(qo,ld),e(ld,UQo),e(ld,GX),e(GX,JQo),e(ld,YQo),e(ld,OX),e(OX,KQo),e(ld,ZQo),e(qo,eWo),e(qo,Hy),e(Hy,oWo),e(Hy,I_e),e(I_e,rWo),e(Hy,tWo),e(qo,aWo),e(qo,gt),M(Uy,gt,null),e(gt,nWo),e(gt,N_e),e(N_e,sWo),e(gt,lWo),e(gt,id),e(id,iWo),e(id,q_e),e(q_e,dWo),e(id,cWo),e(id,VX),e(VX,fWo),e(id,mWo),e(gt,gWo),M(pv,gt,null),e(qo,hWo),e(qo,ao),M(Jy,ao,null),e(ao,pWo),e(ao,j_e),e(j_e,_Wo),e(ao,uWo),e(ao,Ga),e(Ga,bWo),e(Ga,D_e),e(D_e,vWo),e(Ga,FWo),e(Ga,G_e),e(G_e,TWo),e(Ga,MWo),e(Ga,O_e),e(O_e,EWo),e(Ga,CWo),e(ao,wWo),e(ao,H),e(H,_v),e(_v,V_e),e(V_e,AWo),e(_v,LWo),e(_v,XX),e(XX,yWo),e(_v,xWo),e(H,$Wo),e(H,uv),e(uv,X_e),e(X_e,kWo),e(uv,SWo),e(uv,zX),e(zX,RWo),e(uv,PWo),e(H,BWo),e(H,bv),e(bv,z_e),e(z_e,IWo),e(bv,NWo),e(bv,QX),e(QX,qWo),e(bv,jWo),e(H,DWo),e(H,vv),e(vv,Q_e),e(Q_e,GWo),e(vv,OWo),e(vv,WX),e(WX,VWo),e(vv,XWo),e(H,zWo),e(H,Fv),e(Fv,W_e),e(W_e,QWo),e(Fv,WWo),e(Fv,HX),e(HX,HWo),e(Fv,UWo),e(H,JWo),e(H,Tv),e(Tv,H_e),e(H_e,YWo),e(Tv,KWo),e(Tv,UX),e(UX,ZWo),e(Tv,eHo),e(H,oHo),e(H,Mv),e(Mv,U_e),e(U_e,rHo),e(Mv,tHo),e(Mv,JX),e(JX,aHo),e(Mv,nHo),e(H,sHo),e(H,Ev),e(Ev,J_e),e(J_e,lHo),e(Ev,iHo),e(Ev,YX),e(YX,dHo),e(Ev,cHo),e(H,fHo),e(H,Cv),e(Cv,Y_e),e(Y_e,mHo),e(Cv,gHo),e(Cv,KX),e(KX,hHo),e(Cv,pHo),e(H,_Ho),e(H,wv),e(wv,K_e),e(K_e,uHo),e(wv,bHo),e(wv,ZX),e(ZX,vHo),e(wv,FHo),e(H,THo),e(H,Av),e(Av,Z_e),e(Z_e,MHo),e(Av,EHo),e(Av,ez),e(ez,CHo),e(Av,wHo),e(H,AHo),e(H,Lv),e(Lv,eue),e(eue,LHo),e(Lv,yHo),e(Lv,oz),e(oz,xHo),e(Lv,$Ho),e(H,kHo),e(H,yv),e(yv,oue),e(oue,SHo),e(yv,RHo),e(yv,rz),e(rz,PHo),e(yv,BHo),e(H,IHo),e(H,xv),e(xv,rue),e(rue,NHo),e(xv,qHo),e(xv,tz),e(tz,jHo),e(xv,DHo),e(H,GHo),e(H,$v),e($v,tue),e(tue,OHo),e($v,VHo),e($v,az),e(az,XHo),e($v,zHo),e(H,QHo),e(H,kv),e(kv,aue),e(aue,WHo),e(kv,HHo),e(kv,nz),e(nz,UHo),e(kv,JHo),e(H,YHo),e(H,Sv),e(Sv,nue),e(nue,KHo),e(Sv,ZHo),e(Sv,sz),e(sz,eUo),e(Sv,oUo),e(H,rUo),e(H,Rv),e(Rv,sue),e(sue,tUo),e(Rv,aUo),e(Rv,lz),e(lz,nUo),e(Rv,sUo),e(H,lUo),e(H,Pv),e(Pv,lue),e(lue,iUo),e(Pv,dUo),e(Pv,iz),e(iz,cUo),e(Pv,fUo),e(H,mUo),e(H,Bv),e(Bv,iue),e(iue,gUo),e(Bv,hUo),e(Bv,dz),e(dz,pUo),e(Bv,_Uo),e(H,uUo),e(H,Iv),e(Iv,due),e(due,bUo),e(Iv,vUo),e(Iv,cz),e(cz,FUo),e(Iv,TUo),e(H,MUo),e(H,Nv),e(Nv,cue),e(cue,EUo),e(Nv,CUo),e(Nv,fz),e(fz,wUo),e(Nv,AUo),e(H,LUo),e(H,qv),e(qv,fue),e(fue,yUo),e(qv,xUo),e(qv,mz),e(mz,$Uo),e(qv,kUo),e(H,SUo),e(H,jv),e(jv,mue),e(mue,RUo),e(jv,PUo),e(jv,gz),e(gz,BUo),e(jv,IUo),e(H,NUo),e(H,Dv),e(Dv,gue),e(gue,qUo),e(Dv,jUo),e(Dv,hz),e(hz,DUo),e(Dv,GUo),e(H,OUo),e(H,Gv),e(Gv,hue),e(hue,VUo),e(Gv,XUo),e(Gv,pz),e(pz,zUo),e(Gv,QUo),e(H,WUo),e(H,Ov),e(Ov,pue),e(pue,HUo),e(Ov,UUo),e(Ov,_z),e(_z,JUo),e(Ov,YUo),e(H,KUo),e(H,Vv),e(Vv,_ue),e(_ue,ZUo),e(Vv,eJo),e(Vv,uz),e(uz,oJo),e(Vv,rJo),e(H,tJo),e(H,Xv),e(Xv,uue),e(uue,aJo),e(Xv,nJo),e(Xv,bz),e(bz,sJo),e(Xv,lJo),e(H,iJo),e(H,zv),e(zv,bue),e(bue,dJo),e(zv,cJo),e(zv,vz),e(vz,fJo),e(zv,mJo),e(H,gJo),e(H,Qv),e(Qv,vue),e(vue,hJo),e(Qv,pJo),e(Qv,Fz),e(Fz,_Jo),e(Qv,uJo),e(H,bJo),e(H,Wv),e(Wv,Fue),e(Fue,vJo),e(Wv,FJo),e(Wv,Tz),e(Tz,TJo),e(Wv,MJo),e(H,EJo),e(H,Hv),e(Hv,Tue),e(Tue,CJo),e(Hv,wJo),e(Hv,Mz),e(Mz,AJo),e(Hv,LJo),e(H,yJo),e(H,Uv),e(Uv,Mue),e(Mue,xJo),e(Uv,$Jo),e(Uv,Ez),e(Ez,kJo),e(Uv,SJo),e(H,RJo),e(H,Jv),e(Jv,Eue),e(Eue,PJo),e(Jv,BJo),e(Jv,Cz),e(Cz,IJo),e(Jv,NJo),e(H,qJo),e(H,Yv),e(Yv,Cue),e(Cue,jJo),e(Yv,DJo),e(Yv,wz),e(wz,GJo),e(Yv,OJo),e(ao,VJo),e(ao,Kv),e(Kv,XJo),e(Kv,wue),e(wue,zJo),e(Kv,QJo),e(Kv,Aue),e(Aue,WJo),e(ao,HJo),M(Zv,ao,null),b(f,NOe,u),b(f,dd,u),e(dd,eF),e(eF,Lue),M(Yy,Lue,null),e(dd,UJo),e(dd,yue),e(yue,JJo),b(f,qOe,u),b(f,jo,u),M(Ky,jo,null),e(jo,YJo),e(jo,cd),e(cd,KJo),e(cd,Az),e(Az,ZJo),e(cd,eYo),e(cd,Lz),e(Lz,oYo),e(cd,rYo),e(jo,tYo),e(jo,Zy),e(Zy,aYo),e(Zy,xue),e(xue,nYo),e(Zy,sYo),e(jo,lYo),e(jo,ht),M(e8,ht,null),e(ht,iYo),e(ht,$ue),e($ue,dYo),e(ht,cYo),e(ht,fd),e(fd,fYo),e(fd,kue),e(kue,mYo),e(fd,gYo),e(fd,yz),e(yz,hYo),e(fd,pYo),e(ht,_Yo),M(oF,ht,null),e(jo,uYo),e(jo,no),M(o8,no,null),e(no,bYo),e(no,Sue),e(Sue,vYo),e(no,FYo),e(no,Oa),e(Oa,TYo),e(Oa,Rue),e(Rue,MYo),e(Oa,EYo),e(Oa,Pue),e(Pue,CYo),e(Oa,wYo),e(Oa,Bue),e(Bue,AYo),e(Oa,LYo),e(no,yYo),e(no,V),e(V,rF),e(rF,Iue),e(Iue,xYo),e(rF,$Yo),e(rF,xz),e(xz,kYo),e(rF,SYo),e(V,RYo),e(V,tF),e(tF,Nue),e(Nue,PYo),e(tF,BYo),e(tF,$z),e($z,IYo),e(tF,NYo),e(V,qYo),e(V,aF),e(aF,que),e(que,jYo),e(aF,DYo),e(aF,kz),e(kz,GYo),e(aF,OYo),e(V,VYo),e(V,nF),e(nF,jue),e(jue,XYo),e(nF,zYo),e(nF,Sz),e(Sz,QYo),e(nF,WYo),e(V,HYo),e(V,sF),e(sF,Due),e(Due,UYo),e(sF,JYo),e(sF,Rz),e(Rz,YYo),e(sF,KYo),e(V,ZYo),e(V,lF),e(lF,Gue),e(Gue,eKo),e(lF,oKo),e(lF,Pz),e(Pz,rKo),e(lF,tKo),e(V,aKo),e(V,iF),e(iF,Oue),e(Oue,nKo),e(iF,sKo),e(iF,Bz),e(Bz,lKo),e(iF,iKo),e(V,dKo),e(V,dF),e(dF,Vue),e(Vue,cKo),e(dF,fKo),e(dF,Iz),e(Iz,mKo),e(dF,gKo),e(V,hKo),e(V,cF),e(cF,Xue),e(Xue,pKo),e(cF,_Ko),e(cF,Nz),e(Nz,uKo),e(cF,bKo),e(V,vKo),e(V,fF),e(fF,zue),e(zue,FKo),e(fF,TKo),e(fF,qz),e(qz,MKo),e(fF,EKo),e(V,CKo),e(V,mF),e(mF,Que),e(Que,wKo),e(mF,AKo),e(mF,jz),e(jz,LKo),e(mF,yKo),e(V,xKo),e(V,gF),e(gF,Wue),e(Wue,$Ko),e(gF,kKo),e(gF,Dz),e(Dz,SKo),e(gF,RKo),e(V,PKo),e(V,hF),e(hF,Hue),e(Hue,BKo),e(hF,IKo),e(hF,Gz),e(Gz,NKo),e(hF,qKo),e(V,jKo),e(V,pF),e(pF,Uue),e(Uue,DKo),e(pF,GKo),e(pF,Oz),e(Oz,OKo),e(pF,VKo),e(V,XKo),e(V,_F),e(_F,Jue),e(Jue,zKo),e(_F,QKo),e(_F,Vz),e(Vz,WKo),e(_F,HKo),e(V,UKo),e(V,uF),e(uF,Yue),e(Yue,JKo),e(uF,YKo),e(uF,Xz),e(Xz,KKo),e(uF,ZKo),e(V,eZo),e(V,bF),e(bF,Kue),e(Kue,oZo),e(bF,rZo),e(bF,zz),e(zz,tZo),e(bF,aZo),e(V,nZo),e(V,vF),e(vF,Zue),e(Zue,sZo),e(vF,lZo),e(vF,Qz),e(Qz,iZo),e(vF,dZo),e(V,cZo),e(V,FF),e(FF,e1e),e(e1e,fZo),e(FF,mZo),e(FF,Wz),e(Wz,gZo),e(FF,hZo),e(V,pZo),e(V,TF),e(TF,o1e),e(o1e,_Zo),e(TF,uZo),e(TF,Hz),e(Hz,bZo),e(TF,vZo),e(V,FZo),e(V,MF),e(MF,r1e),e(r1e,TZo),e(MF,MZo),e(MF,Uz),e(Uz,EZo),e(MF,CZo),e(V,wZo),e(V,EF),e(EF,t1e),e(t1e,AZo),e(EF,LZo),e(EF,Jz),e(Jz,yZo),e(EF,xZo),e(V,$Zo),e(V,CF),e(CF,a1e),e(a1e,kZo),e(CF,SZo),e(CF,Yz),e(Yz,RZo),e(CF,PZo),e(V,BZo),e(V,wF),e(wF,n1e),e(n1e,IZo),e(wF,NZo),e(wF,Kz),e(Kz,qZo),e(wF,jZo),e(V,DZo),e(V,AF),e(AF,s1e),e(s1e,GZo),e(AF,OZo),e(AF,Zz),e(Zz,VZo),e(AF,XZo),e(V,zZo),e(V,LF),e(LF,l1e),e(l1e,QZo),e(LF,WZo),e(LF,eQ),e(eQ,HZo),e(LF,UZo),e(V,JZo),e(V,yF),e(yF,i1e),e(i1e,YZo),e(yF,KZo),e(yF,oQ),e(oQ,ZZo),e(yF,eer),e(V,oer),e(V,xF),e(xF,d1e),e(d1e,rer),e(xF,ter),e(xF,rQ),e(rQ,aer),e(xF,ner),e(V,ser),e(V,$F),e($F,c1e),e(c1e,ler),e($F,ier),e($F,tQ),e(tQ,der),e($F,cer),e(V,fer),e(V,kF),e(kF,f1e),e(f1e,mer),e(kF,ger),e(kF,aQ),e(aQ,her),e(kF,per),e(V,_er),e(V,SF),e(SF,m1e),e(m1e,uer),e(SF,ber),e(SF,nQ),e(nQ,ver),e(SF,Fer),e(V,Ter),e(V,RF),e(RF,g1e),e(g1e,Mer),e(RF,Eer),e(RF,sQ),e(sQ,Cer),e(RF,wer),e(V,Aer),e(V,PF),e(PF,h1e),e(h1e,Ler),e(PF,yer),e(PF,lQ),e(lQ,xer),e(PF,$er),e(V,ker),e(V,BF),e(BF,p1e),e(p1e,Ser),e(BF,Rer),e(BF,iQ),e(iQ,Per),e(BF,Ber),e(V,Ier),e(V,IF),e(IF,_1e),e(_1e,Ner),e(IF,qer),e(IF,dQ),e(dQ,jer),e(IF,Der),e(V,Ger),e(V,NF),e(NF,u1e),e(u1e,Oer),e(NF,Ver),e(NF,cQ),e(cQ,Xer),e(NF,zer),e(V,Qer),e(V,qF),e(qF,b1e),e(b1e,Wer),e(qF,Her),e(qF,fQ),e(fQ,Uer),e(qF,Jer),e(V,Yer),e(V,jF),e(jF,v1e),e(v1e,Ker),e(jF,Zer),e(jF,mQ),e(mQ,eor),e(jF,oor),e(V,ror),e(V,DF),e(DF,F1e),e(F1e,tor),e(DF,aor),e(DF,gQ),e(gQ,nor),e(DF,sor),e(V,lor),e(V,GF),e(GF,T1e),e(T1e,ior),e(GF,dor),e(GF,hQ),e(hQ,cor),e(GF,mor),e(V,gor),e(V,OF),e(OF,M1e),e(M1e,hor),e(OF,por),e(OF,pQ),e(pQ,_or),e(OF,uor),e(no,bor),e(no,VF),e(VF,vor),e(VF,E1e),e(E1e,For),e(VF,Tor),e(VF,C1e),e(C1e,Mor),e(no,Eor),M(XF,no,null),b(f,jOe,u),b(f,md,u),e(md,zF),e(zF,w1e),M(r8,w1e,null),e(md,Cor),e(md,A1e),e(A1e,wor),b(f,DOe,u),b(f,Do,u),M(t8,Do,null),e(Do,Aor),e(Do,gd),e(gd,Lor),e(gd,_Q),e(_Q,yor),e(gd,xor),e(gd,uQ),e(uQ,$or),e(gd,kor),e(Do,Sor),e(Do,a8),e(a8,Ror),e(a8,L1e),e(L1e,Por),e(a8,Bor),e(Do,Ior),e(Do,pt),M(n8,pt,null),e(pt,Nor),e(pt,y1e),e(y1e,qor),e(pt,jor),e(pt,hd),e(hd,Dor),e(hd,x1e),e(x1e,Gor),e(hd,Oor),e(hd,bQ),e(bQ,Vor),e(hd,Xor),e(pt,zor),M(QF,pt,null),e(Do,Qor),e(Do,so),M(s8,so,null),e(so,Wor),e(so,$1e),e($1e,Hor),e(so,Uor),e(so,Va),e(Va,Jor),e(Va,k1e),e(k1e,Yor),e(Va,Kor),e(Va,S1e),e(S1e,Zor),e(Va,err),e(Va,R1e),e(R1e,orr),e(Va,rrr),e(so,trr),e(so,P1e),e(P1e,WF),e(WF,B1e),e(B1e,arr),e(WF,nrr),e(WF,vQ),e(vQ,srr),e(WF,lrr),e(so,irr),e(so,HF),e(HF,drr),e(HF,I1e),e(I1e,crr),e(HF,frr),e(HF,N1e),e(N1e,mrr),e(so,grr),M(UF,so,null),b(f,GOe,u),b(f,pd,u),e(pd,JF),e(JF,q1e),M(l8,q1e,null),e(pd,hrr),e(pd,j1e),e(j1e,prr),b(f,OOe,u),b(f,Go,u),M(i8,Go,null),e(Go,_rr),e(Go,_d),e(_d,urr),e(_d,FQ),e(FQ,brr),e(_d,vrr),e(_d,TQ),e(TQ,Frr),e(_d,Trr),e(Go,Mrr),e(Go,d8),e(d8,Err),e(d8,D1e),e(D1e,Crr),e(d8,wrr),e(Go,Arr),e(Go,_t),M(c8,_t,null),e(_t,Lrr),e(_t,G1e),e(G1e,yrr),e(_t,xrr),e(_t,ud),e(ud,$rr),e(ud,O1e),e(O1e,krr),e(ud,Srr),e(ud,MQ),e(MQ,Rrr),e(ud,Prr),e(_t,Brr),M(YF,_t,null),e(Go,Irr),e(Go,lo),M(f8,lo,null),e(lo,Nrr),e(lo,V1e),e(V1e,qrr),e(lo,jrr),e(lo,Xa),e(Xa,Drr),e(Xa,X1e),e(X1e,Grr),e(Xa,Orr),e(Xa,z1e),e(z1e,Vrr),e(Xa,Xrr),e(Xa,Q1e),e(Q1e,zrr),e(Xa,Qrr),e(lo,Wrr),e(lo,Fe),e(Fe,KF),e(KF,W1e),e(W1e,Hrr),e(KF,Urr),e(KF,EQ),e(EQ,Jrr),e(KF,Yrr),e(Fe,Krr),e(Fe,ZF),e(ZF,H1e),e(H1e,Zrr),e(ZF,etr),e(ZF,CQ),e(CQ,otr),e(ZF,rtr),e(Fe,ttr),e(Fe,eT),e(eT,U1e),e(U1e,atr),e(eT,ntr),e(eT,wQ),e(wQ,str),e(eT,ltr),e(Fe,itr),e(Fe,oT),e(oT,J1e),e(J1e,dtr),e(oT,ctr),e(oT,AQ),e(AQ,ftr),e(oT,mtr),e(Fe,gtr),e(Fe,zs),e(zs,Y1e),e(Y1e,htr),e(zs,ptr),e(zs,LQ),e(LQ,_tr),e(zs,utr),e(zs,yQ),e(yQ,btr),e(zs,vtr),e(Fe,Ftr),e(Fe,rT),e(rT,K1e),e(K1e,Ttr),e(rT,Mtr),e(rT,xQ),e(xQ,Etr),e(rT,Ctr),e(Fe,wtr),e(Fe,Qs),e(Qs,Z1e),e(Z1e,Atr),e(Qs,Ltr),e(Qs,$Q),e($Q,ytr),e(Qs,xtr),e(Qs,kQ),e(kQ,$tr),e(Qs,ktr),e(Fe,Str),e(Fe,ut),e(ut,e3e),e(e3e,Rtr),e(ut,Ptr),e(ut,SQ),e(SQ,Btr),e(ut,Itr),e(ut,RQ),e(RQ,Ntr),e(ut,qtr),e(ut,PQ),e(PQ,jtr),e(ut,Dtr),e(Fe,Gtr),e(Fe,tT),e(tT,o3e),e(o3e,Otr),e(tT,Vtr),e(tT,BQ),e(BQ,Xtr),e(tT,ztr),e(Fe,Qtr),e(Fe,aT),e(aT,r3e),e(r3e,Wtr),e(aT,Htr),e(aT,IQ),e(IQ,Utr),e(aT,Jtr),e(Fe,Ytr),e(Fe,nT),e(nT,t3e),e(t3e,Ktr),e(nT,Ztr),e(nT,NQ),e(NQ,ear),e(nT,oar),e(Fe,rar),e(Fe,sT),e(sT,a3e),e(a3e,tar),e(sT,aar),e(sT,qQ),e(qQ,nar),e(sT,sar),e(Fe,lar),e(Fe,lT),e(lT,n3e),e(n3e,iar),e(lT,dar),e(lT,jQ),e(jQ,car),e(lT,far),e(Fe,mar),e(Fe,iT),e(iT,s3e),e(s3e,gar),e(iT,har),e(iT,DQ),e(DQ,par),e(iT,_ar),e(Fe,uar),e(Fe,dT),e(dT,l3e),e(l3e,bar),e(dT,Far),e(dT,GQ),e(GQ,Tar),e(dT,Mar),e(lo,Ear),e(lo,cT),e(cT,Car),e(cT,i3e),e(i3e,war),e(cT,Aar),e(cT,d3e),e(d3e,Lar),e(lo,yar),M(fT,lo,null),b(f,VOe,u),b(f,bd,u),e(bd,mT),e(mT,c3e),M(m8,c3e,null),e(bd,xar),e(bd,f3e),e(f3e,$ar),b(f,XOe,u),b(f,Oo,u),M(g8,Oo,null),e(Oo,kar),e(Oo,vd),e(vd,Sar),e(vd,OQ),e(OQ,Rar),e(vd,Par),e(vd,VQ),e(VQ,Bar),e(vd,Iar),e(Oo,Nar),e(Oo,h8),e(h8,qar),e(h8,m3e),e(m3e,jar),e(h8,Dar),e(Oo,Gar),e(Oo,bt),M(p8,bt,null),e(bt,Oar),e(bt,g3e),e(g3e,Var),e(bt,Xar),e(bt,Fd),e(Fd,zar),e(Fd,h3e),e(h3e,Qar),e(Fd,War),e(Fd,XQ),e(XQ,Har),e(Fd,Uar),e(bt,Jar),M(gT,bt,null),e(Oo,Yar),e(Oo,io),M(_8,io,null),e(io,Kar),e(io,p3e),e(p3e,Zar),e(io,enr),e(io,za),e(za,onr),e(za,_3e),e(_3e,rnr),e(za,tnr),e(za,u3e),e(u3e,anr),e(za,nnr),e(za,b3e),e(b3e,snr),e(za,lnr),e(io,inr),e(io,v3e),e(v3e,hT),e(hT,F3e),e(F3e,dnr),e(hT,cnr),e(hT,zQ),e(zQ,fnr),e(hT,mnr),e(io,gnr),e(io,pT),e(pT,hnr),e(pT,T3e),e(T3e,pnr),e(pT,_nr),e(pT,M3e),e(M3e,unr),e(io,bnr),M(_T,io,null),b(f,zOe,u),b(f,Td,u),e(Td,uT),e(uT,E3e),M(u8,E3e,null),e(Td,vnr),e(Td,C3e),e(C3e,Fnr),b(f,QOe,u),b(f,Vo,u),M(b8,Vo,null),e(Vo,Tnr),e(Vo,Md),e(Md,Mnr),e(Md,QQ),e(QQ,Enr),e(Md,Cnr),e(Md,WQ),e(WQ,wnr),e(Md,Anr),e(Vo,Lnr),e(Vo,v8),e(v8,ynr),e(v8,w3e),e(w3e,xnr),e(v8,$nr),e(Vo,knr),e(Vo,vt),M(F8,vt,null),e(vt,Snr),e(vt,A3e),e(A3e,Rnr),e(vt,Pnr),e(vt,Ed),e(Ed,Bnr),e(Ed,L3e),e(L3e,Inr),e(Ed,Nnr),e(Ed,HQ),e(HQ,qnr),e(Ed,jnr),e(vt,Dnr),M(bT,vt,null),e(Vo,Gnr),e(Vo,co),M(T8,co,null),e(co,Onr),e(co,y3e),e(y3e,Vnr),e(co,Xnr),e(co,Qa),e(Qa,znr),e(Qa,x3e),e(x3e,Qnr),e(Qa,Wnr),e(Qa,$3e),e($3e,Hnr),e(Qa,Unr),e(Qa,k3e),e(k3e,Jnr),e(Qa,Ynr),e(co,Knr),e(co,S3e),e(S3e,vT),e(vT,R3e),e(R3e,Znr),e(vT,esr),e(vT,UQ),e(UQ,osr),e(vT,rsr),e(co,tsr),e(co,FT),e(FT,asr),e(FT,P3e),e(P3e,nsr),e(FT,ssr),e(FT,B3e),e(B3e,lsr),e(co,isr),M(TT,co,null),b(f,WOe,u),b(f,Cd,u),e(Cd,MT),e(MT,I3e),M(M8,I3e,null),e(Cd,dsr),e(Cd,N3e),e(N3e,csr),b(f,HOe,u),b(f,Xo,u),M(E8,Xo,null),e(Xo,fsr),e(Xo,wd),e(wd,msr),e(wd,JQ),e(JQ,gsr),e(wd,hsr),e(wd,YQ),e(YQ,psr),e(wd,_sr),e(Xo,usr),e(Xo,C8),e(C8,bsr),e(C8,q3e),e(q3e,vsr),e(C8,Fsr),e(Xo,Tsr),e(Xo,Ft),M(w8,Ft,null),e(Ft,Msr),e(Ft,j3e),e(j3e,Esr),e(Ft,Csr),e(Ft,Ad),e(Ad,wsr),e(Ad,D3e),e(D3e,Asr),e(Ad,Lsr),e(Ad,KQ),e(KQ,ysr),e(Ad,xsr),e(Ft,$sr),M(ET,Ft,null),e(Xo,ksr),e(Xo,fo),M(A8,fo,null),e(fo,Ssr),e(fo,G3e),e(G3e,Rsr),e(fo,Psr),e(fo,Wa),e(Wa,Bsr),e(Wa,O3e),e(O3e,Isr),e(Wa,Nsr),e(Wa,V3e),e(V3e,qsr),e(Wa,jsr),e(Wa,X3e),e(X3e,Dsr),e(Wa,Gsr),e(fo,Osr),e(fo,Pe),e(Pe,CT),e(CT,z3e),e(z3e,Vsr),e(CT,Xsr),e(CT,ZQ),e(ZQ,zsr),e(CT,Qsr),e(Pe,Wsr),e(Pe,wT),e(wT,Q3e),e(Q3e,Hsr),e(wT,Usr),e(wT,eW),e(eW,Jsr),e(wT,Ysr),e(Pe,Ksr),e(Pe,AT),e(AT,W3e),e(W3e,Zsr),e(AT,elr),e(AT,oW),e(oW,olr),e(AT,rlr),e(Pe,tlr),e(Pe,LT),e(LT,H3e),e(H3e,alr),e(LT,nlr),e(LT,rW),e(rW,slr),e(LT,llr),e(Pe,ilr),e(Pe,yT),e(yT,U3e),e(U3e,dlr),e(yT,clr),e(yT,tW),e(tW,flr),e(yT,mlr),e(Pe,glr),e(Pe,xT),e(xT,J3e),e(J3e,hlr),e(xT,plr),e(xT,aW),e(aW,_lr),e(xT,ulr),e(Pe,blr),e(Pe,$T),e($T,Y3e),e(Y3e,vlr),e($T,Flr),e($T,nW),e(nW,Tlr),e($T,Mlr),e(Pe,Elr),e(Pe,kT),e(kT,K3e),e(K3e,Clr),e(kT,wlr),e(kT,sW),e(sW,Alr),e(kT,Llr),e(Pe,ylr),e(Pe,ST),e(ST,Z3e),e(Z3e,xlr),e(ST,$lr),e(ST,lW),e(lW,klr),e(ST,Slr),e(fo,Rlr),e(fo,RT),e(RT,Plr),e(RT,e2e),e(e2e,Blr),e(RT,Ilr),e(RT,o2e),e(o2e,Nlr),e(fo,qlr),M(PT,fo,null),b(f,UOe,u),b(f,Ld,u),e(Ld,BT),e(BT,r2e),M(L8,r2e,null),e(Ld,jlr),e(Ld,t2e),e(t2e,Dlr),b(f,JOe,u),b(f,zo,u),M(y8,zo,null),e(zo,Glr),e(zo,yd),e(yd,Olr),e(yd,iW),e(iW,Vlr),e(yd,Xlr),e(yd,dW),e(dW,zlr),e(yd,Qlr),e(zo,Wlr),e(zo,x8),e(x8,Hlr),e(x8,a2e),e(a2e,Ulr),e(x8,Jlr),e(zo,Ylr),e(zo,Tt),M($8,Tt,null),e(Tt,Klr),e(Tt,n2e),e(n2e,Zlr),e(Tt,eir),e(Tt,xd),e(xd,oir),e(xd,s2e),e(s2e,rir),e(xd,tir),e(xd,cW),e(cW,air),e(xd,nir),e(Tt,sir),M(IT,Tt,null),e(zo,lir),e(zo,mo),M(k8,mo,null),e(mo,iir),e(mo,l2e),e(l2e,dir),e(mo,cir),e(mo,Ha),e(Ha,fir),e(Ha,i2e),e(i2e,mir),e(Ha,gir),e(Ha,d2e),e(d2e,hir),e(Ha,pir),e(Ha,c2e),e(c2e,_ir),e(Ha,uir),e(mo,bir),e(mo,et),e(et,NT),e(NT,f2e),e(f2e,vir),e(NT,Fir),e(NT,fW),e(fW,Tir),e(NT,Mir),e(et,Eir),e(et,qT),e(qT,m2e),e(m2e,Cir),e(qT,wir),e(qT,mW),e(mW,Air),e(qT,Lir),e(et,yir),e(et,jT),e(jT,g2e),e(g2e,xir),e(jT,$ir),e(jT,gW),e(gW,kir),e(jT,Sir),e(et,Rir),e(et,DT),e(DT,h2e),e(h2e,Pir),e(DT,Bir),e(DT,hW),e(hW,Iir),e(DT,Nir),e(et,qir),e(et,GT),e(GT,p2e),e(p2e,jir),e(GT,Dir),e(GT,pW),e(pW,Gir),e(GT,Oir),e(mo,Vir),e(mo,OT),e(OT,Xir),e(OT,_2e),e(_2e,zir),e(OT,Qir),e(OT,u2e),e(u2e,Wir),e(mo,Hir),M(VT,mo,null),b(f,YOe,u),b(f,$d,u),e($d,XT),e(XT,b2e),M(S8,b2e,null),e($d,Uir),e($d,v2e),e(v2e,Jir),b(f,KOe,u),b(f,Qo,u),M(R8,Qo,null),e(Qo,Yir),e(Qo,kd),e(kd,Kir),e(kd,_W),e(_W,Zir),e(kd,edr),e(kd,uW),e(uW,odr),e(kd,rdr),e(Qo,tdr),e(Qo,P8),e(P8,adr),e(P8,F2e),e(F2e,ndr),e(P8,sdr),e(Qo,ldr),e(Qo,Mt),M(B8,Mt,null),e(Mt,idr),e(Mt,T2e),e(T2e,ddr),e(Mt,cdr),e(Mt,Sd),e(Sd,fdr),e(Sd,M2e),e(M2e,mdr),e(Sd,gdr),e(Sd,bW),e(bW,hdr),e(Sd,pdr),e(Mt,_dr),M(zT,Mt,null),e(Qo,udr),e(Qo,go),M(I8,go,null),e(go,bdr),e(go,E2e),e(E2e,vdr),e(go,Fdr),e(go,Ua),e(Ua,Tdr),e(Ua,C2e),e(C2e,Mdr),e(Ua,Edr),e(Ua,w2e),e(w2e,Cdr),e(Ua,wdr),e(Ua,A2e),e(A2e,Adr),e(Ua,Ldr),e(go,ydr),e(go,Le),e(Le,QT),e(QT,L2e),e(L2e,xdr),e(QT,$dr),e(QT,vW),e(vW,kdr),e(QT,Sdr),e(Le,Rdr),e(Le,WT),e(WT,y2e),e(y2e,Pdr),e(WT,Bdr),e(WT,FW),e(FW,Idr),e(WT,Ndr),e(Le,qdr),e(Le,HT),e(HT,x2e),e(x2e,jdr),e(HT,Ddr),e(HT,TW),e(TW,Gdr),e(HT,Odr),e(Le,Vdr),e(Le,UT),e(UT,$2e),e($2e,Xdr),e(UT,zdr),e(UT,MW),e(MW,Qdr),e(UT,Wdr),e(Le,Hdr),e(Le,JT),e(JT,k2e),e(k2e,Udr),e(JT,Jdr),e(JT,EW),e(EW,Ydr),e(JT,Kdr),e(Le,Zdr),e(Le,YT),e(YT,S2e),e(S2e,ecr),e(YT,ocr),e(YT,CW),e(CW,rcr),e(YT,tcr),e(Le,acr),e(Le,KT),e(KT,R2e),e(R2e,ncr),e(KT,scr),e(KT,wW),e(wW,lcr),e(KT,icr),e(Le,dcr),e(Le,ZT),e(ZT,P2e),e(P2e,ccr),e(ZT,fcr),e(ZT,AW),e(AW,mcr),e(ZT,gcr),e(Le,hcr),e(Le,e7),e(e7,B2e),e(B2e,pcr),e(e7,_cr),e(e7,LW),e(LW,ucr),e(e7,bcr),e(Le,vcr),e(Le,o7),e(o7,I2e),e(I2e,Fcr),e(o7,Tcr),e(o7,yW),e(yW,Mcr),e(o7,Ecr),e(go,Ccr),e(go,r7),e(r7,wcr),e(r7,N2e),e(N2e,Acr),e(r7,Lcr),e(r7,q2e),e(q2e,ycr),e(go,xcr),M(t7,go,null),b(f,ZOe,u),b(f,Rd,u),e(Rd,a7),e(a7,j2e),M(N8,j2e,null),e(Rd,$cr),e(Rd,D2e),e(D2e,kcr),b(f,eVe,u),b(f,Wo,u),M(q8,Wo,null),e(Wo,Scr),e(Wo,Pd),e(Pd,Rcr),e(Pd,xW),e(xW,Pcr),e(Pd,Bcr),e(Pd,$W),e($W,Icr),e(Pd,Ncr),e(Wo,qcr),e(Wo,j8),e(j8,jcr),e(j8,G2e),e(G2e,Dcr),e(j8,Gcr),e(Wo,Ocr),e(Wo,Et),M(D8,Et,null),e(Et,Vcr),e(Et,O2e),e(O2e,Xcr),e(Et,zcr),e(Et,Bd),e(Bd,Qcr),e(Bd,V2e),e(V2e,Wcr),e(Bd,Hcr),e(Bd,kW),e(kW,Ucr),e(Bd,Jcr),e(Et,Ycr),M(n7,Et,null),e(Wo,Kcr),e(Wo,ho),M(G8,ho,null),e(ho,Zcr),e(ho,X2e),e(X2e,efr),e(ho,ofr),e(ho,Ja),e(Ja,rfr),e(Ja,z2e),e(z2e,tfr),e(Ja,afr),e(Ja,Q2e),e(Q2e,nfr),e(Ja,sfr),e(Ja,W2e),e(W2e,lfr),e(Ja,ifr),e(ho,dfr),e(ho,O8),e(O8,s7),e(s7,H2e),e(H2e,cfr),e(s7,ffr),e(s7,SW),e(SW,mfr),e(s7,gfr),e(O8,hfr),e(O8,l7),e(l7,U2e),e(U2e,pfr),e(l7,_fr),e(l7,RW),e(RW,ufr),e(l7,bfr),e(ho,vfr),e(ho,i7),e(i7,Ffr),e(i7,J2e),e(J2e,Tfr),e(i7,Mfr),e(i7,Y2e),e(Y2e,Efr),e(ho,Cfr),M(d7,ho,null),b(f,oVe,u),b(f,Id,u),e(Id,c7),e(c7,K2e),M(V8,K2e,null),e(Id,wfr),e(Id,Z2e),e(Z2e,Afr),b(f,rVe,u),b(f,Ho,u),M(X8,Ho,null),e(Ho,Lfr),e(Ho,Nd),e(Nd,yfr),e(Nd,PW),e(PW,xfr),e(Nd,$fr),e(Nd,BW),e(BW,kfr),e(Nd,Sfr),e(Ho,Rfr),e(Ho,z8),e(z8,Pfr),e(z8,ebe),e(ebe,Bfr),e(z8,Ifr),e(Ho,Nfr),e(Ho,Ct),M(Q8,Ct,null),e(Ct,qfr),e(Ct,obe),e(obe,jfr),e(Ct,Dfr),e(Ct,qd),e(qd,Gfr),e(qd,rbe),e(rbe,Ofr),e(qd,Vfr),e(qd,IW),e(IW,Xfr),e(qd,zfr),e(Ct,Qfr),M(f7,Ct,null),e(Ho,Wfr),e(Ho,po),M(W8,po,null),e(po,Hfr),e(po,tbe),e(tbe,Ufr),e(po,Jfr),e(po,Ya),e(Ya,Yfr),e(Ya,abe),e(abe,Kfr),e(Ya,Zfr),e(Ya,nbe),e(nbe,emr),e(Ya,omr),e(Ya,sbe),e(sbe,rmr),e(Ya,tmr),e(po,amr),e(po,ot),e(ot,m7),e(m7,lbe),e(lbe,nmr),e(m7,smr),e(m7,NW),e(NW,lmr),e(m7,imr),e(ot,dmr),e(ot,g7),e(g7,ibe),e(ibe,cmr),e(g7,fmr),e(g7,qW),e(qW,mmr),e(g7,gmr),e(ot,hmr),e(ot,h7),e(h7,dbe),e(dbe,pmr),e(h7,_mr),e(h7,jW),e(jW,umr),e(h7,bmr),e(ot,vmr),e(ot,p7),e(p7,cbe),e(cbe,Fmr),e(p7,Tmr),e(p7,DW),e(DW,Mmr),e(p7,Emr),e(ot,Cmr),e(ot,_7),e(_7,fbe),e(fbe,wmr),e(_7,Amr),e(_7,GW),e(GW,Lmr),e(_7,ymr),e(po,xmr),e(po,u7),e(u7,$mr),e(u7,mbe),e(mbe,kmr),e(u7,Smr),e(u7,gbe),e(gbe,Rmr),e(po,Pmr),M(b7,po,null),b(f,tVe,u),b(f,jd,u),e(jd,v7),e(v7,hbe),M(H8,hbe,null),e(jd,Bmr),e(jd,pbe),e(pbe,Imr),b(f,aVe,u),b(f,Uo,u),M(U8,Uo,null),e(Uo,Nmr),e(Uo,Dd),e(Dd,qmr),e(Dd,OW),e(OW,jmr),e(Dd,Dmr),e(Dd,VW),e(VW,Gmr),e(Dd,Omr),e(Uo,Vmr),e(Uo,J8),e(J8,Xmr),e(J8,_be),e(_be,zmr),e(J8,Qmr),e(Uo,Wmr),e(Uo,wt),M(Y8,wt,null),e(wt,Hmr),e(wt,ube),e(ube,Umr),e(wt,Jmr),e(wt,Gd),e(Gd,Ymr),e(Gd,bbe),e(bbe,Kmr),e(Gd,Zmr),e(Gd,XW),e(XW,egr),e(Gd,ogr),e(wt,rgr),M(F7,wt,null),e(Uo,tgr),e(Uo,_o),M(K8,_o,null),e(_o,agr),e(_o,vbe),e(vbe,ngr),e(_o,sgr),e(_o,Ka),e(Ka,lgr),e(Ka,Fbe),e(Fbe,igr),e(Ka,dgr),e(Ka,Tbe),e(Tbe,cgr),e(Ka,fgr),e(Ka,Mbe),e(Mbe,mgr),e(Ka,ggr),e(_o,hgr),e(_o,Od),e(Od,T7),e(T7,Ebe),e(Ebe,pgr),e(T7,_gr),e(T7,zW),e(zW,ugr),e(T7,bgr),e(Od,vgr),e(Od,M7),e(M7,Cbe),e(Cbe,Fgr),e(M7,Tgr),e(M7,QW),e(QW,Mgr),e(M7,Egr),e(Od,Cgr),e(Od,E7),e(E7,wbe),e(wbe,wgr),e(E7,Agr),e(E7,WW),e(WW,Lgr),e(E7,ygr),e(_o,xgr),e(_o,C7),e(C7,$gr),e(C7,Abe),e(Abe,kgr),e(C7,Sgr),e(C7,Lbe),e(Lbe,Rgr),e(_o,Pgr),M(w7,_o,null),b(f,nVe,u),b(f,Vd,u),e(Vd,A7),e(A7,ybe),M(Z8,ybe,null),e(Vd,Bgr),e(Vd,xbe),e(xbe,Igr),b(f,sVe,u),b(f,Jo,u),M(e9,Jo,null),e(Jo,Ngr),e(Jo,Xd),e(Xd,qgr),e(Xd,HW),e(HW,jgr),e(Xd,Dgr),e(Xd,UW),e(UW,Ggr),e(Xd,Ogr),e(Jo,Vgr),e(Jo,o9),e(o9,Xgr),e(o9,$be),e($be,zgr),e(o9,Qgr),e(Jo,Wgr),e(Jo,At),M(r9,At,null),e(At,Hgr),e(At,kbe),e(kbe,Ugr),e(At,Jgr),e(At,zd),e(zd,Ygr),e(zd,Sbe),e(Sbe,Kgr),e(zd,Zgr),e(zd,JW),e(JW,ehr),e(zd,ohr),e(At,rhr),M(L7,At,null),e(Jo,thr),e(Jo,uo),M(t9,uo,null),e(uo,ahr),e(uo,Rbe),e(Rbe,nhr),e(uo,shr),e(uo,Za),e(Za,lhr),e(Za,Pbe),e(Pbe,ihr),e(Za,dhr),e(Za,Bbe),e(Bbe,chr),e(Za,fhr),e(Za,Ibe),e(Ibe,mhr),e(Za,ghr),e(uo,hhr),e(uo,a9),e(a9,y7),e(y7,Nbe),e(Nbe,phr),e(y7,_hr),e(y7,YW),e(YW,uhr),e(y7,bhr),e(a9,vhr),e(a9,x7),e(x7,qbe),e(qbe,Fhr),e(x7,Thr),e(x7,KW),e(KW,Mhr),e(x7,Ehr),e(uo,Chr),e(uo,$7),e($7,whr),e($7,jbe),e(jbe,Ahr),e($7,Lhr),e($7,Dbe),e(Dbe,yhr),e(uo,xhr),M(k7,uo,null),b(f,lVe,u),b(f,Qd,u),e(Qd,S7),e(S7,Gbe),M(n9,Gbe,null),e(Qd,$hr),e(Qd,Obe),e(Obe,khr),b(f,iVe,u),b(f,Yo,u),M(s9,Yo,null),e(Yo,Shr),e(Yo,Wd),e(Wd,Rhr),e(Wd,ZW),e(ZW,Phr),e(Wd,Bhr),e(Wd,eH),e(eH,Ihr),e(Wd,Nhr),e(Yo,qhr),e(Yo,l9),e(l9,jhr),e(l9,Vbe),e(Vbe,Dhr),e(l9,Ghr),e(Yo,Ohr),e(Yo,Lt),M(i9,Lt,null),e(Lt,Vhr),e(Lt,Xbe),e(Xbe,Xhr),e(Lt,zhr),e(Lt,Hd),e(Hd,Qhr),e(Hd,zbe),e(zbe,Whr),e(Hd,Hhr),e(Hd,oH),e(oH,Uhr),e(Hd,Jhr),e(Lt,Yhr),M(R7,Lt,null),e(Yo,Khr),e(Yo,bo),M(d9,bo,null),e(bo,Zhr),e(bo,Qbe),e(Qbe,epr),e(bo,opr),e(bo,en),e(en,rpr),e(en,Wbe),e(Wbe,tpr),e(en,apr),e(en,Hbe),e(Hbe,npr),e(en,spr),e(en,Ube),e(Ube,lpr),e(en,ipr),e(bo,dpr),e(bo,Jbe),e(Jbe,P7),e(P7,Ybe),e(Ybe,cpr),e(P7,fpr),e(P7,rH),e(rH,mpr),e(P7,gpr),e(bo,hpr),e(bo,B7),e(B7,ppr),e(B7,Kbe),e(Kbe,_pr),e(B7,upr),e(B7,Zbe),e(Zbe,bpr),e(bo,vpr),M(I7,bo,null),b(f,dVe,u),b(f,Ud,u),e(Ud,N7),e(N7,eve),M(c9,eve,null),e(Ud,Fpr),e(Ud,ove),e(ove,Tpr),b(f,cVe,u),b(f,Ko,u),M(f9,Ko,null),e(Ko,Mpr),e(Ko,Jd),e(Jd,Epr),e(Jd,tH),e(tH,Cpr),e(Jd,wpr),e(Jd,aH),e(aH,Apr),e(Jd,Lpr),e(Ko,ypr),e(Ko,m9),e(m9,xpr),e(m9,rve),e(rve,$pr),e(m9,kpr),e(Ko,Spr),e(Ko,yt),M(g9,yt,null),e(yt,Rpr),e(yt,tve),e(tve,Ppr),e(yt,Bpr),e(yt,Yd),e(Yd,Ipr),e(Yd,ave),e(ave,Npr),e(Yd,qpr),e(Yd,nH),e(nH,jpr),e(Yd,Dpr),e(yt,Gpr),M(q7,yt,null),e(Ko,Opr),e(Ko,vo),M(h9,vo,null),e(vo,Vpr),e(vo,nve),e(nve,Xpr),e(vo,zpr),e(vo,on),e(on,Qpr),e(on,sve),e(sve,Wpr),e(on,Hpr),e(on,lve),e(lve,Upr),e(on,Jpr),e(on,ive),e(ive,Ypr),e(on,Kpr),e(vo,Zpr),e(vo,rn),e(rn,j7),e(j7,dve),e(dve,e_r),e(j7,o_r),e(j7,sH),e(sH,r_r),e(j7,t_r),e(rn,a_r),e(rn,D7),e(D7,cve),e(cve,n_r),e(D7,s_r),e(D7,lH),e(lH,l_r),e(D7,i_r),e(rn,d_r),e(rn,G7),e(G7,fve),e(fve,c_r),e(G7,f_r),e(G7,iH),e(iH,m_r),e(G7,g_r),e(rn,h_r),e(rn,O7),e(O7,mve),e(mve,p_r),e(O7,__r),e(O7,dH),e(dH,u_r),e(O7,b_r),e(vo,v_r),e(vo,V7),e(V7,F_r),e(V7,gve),e(gve,T_r),e(V7,M_r),e(V7,hve),e(hve,E_r),e(vo,C_r),M(X7,vo,null),b(f,fVe,u),b(f,Kd,u),e(Kd,z7),e(z7,pve),M(p9,pve,null),e(Kd,w_r),e(Kd,_ve),e(_ve,A_r),b(f,mVe,u),b(f,Zo,u),M(_9,Zo,null),e(Zo,L_r),e(Zo,Zd),e(Zd,y_r),e(Zd,cH),e(cH,x_r),e(Zd,$_r),e(Zd,fH),e(fH,k_r),e(Zd,S_r),e(Zo,R_r),e(Zo,u9),e(u9,P_r),e(u9,uve),e(uve,B_r),e(u9,I_r),e(Zo,N_r),e(Zo,xt),M(b9,xt,null),e(xt,q_r),e(xt,bve),e(bve,j_r),e(xt,D_r),e(xt,ec),e(ec,G_r),e(ec,vve),e(vve,O_r),e(ec,V_r),e(ec,mH),e(mH,X_r),e(ec,z_r),e(xt,Q_r),M(Q7,xt,null),e(Zo,W_r),e(Zo,Fo),M(v9,Fo,null),e(Fo,H_r),e(Fo,Fve),e(Fve,U_r),e(Fo,J_r),e(Fo,tn),e(tn,Y_r),e(tn,Tve),e(Tve,K_r),e(tn,Z_r),e(tn,Mve),e(Mve,eur),e(tn,our),e(tn,Eve),e(Eve,rur),e(tn,tur),e(Fo,aur),e(Fo,Cve),e(Cve,W7),e(W7,wve),e(wve,nur),e(W7,sur),e(W7,gH),e(gH,lur),e(W7,iur),e(Fo,dur),e(Fo,H7),e(H7,cur),e(H7,Ave),e(Ave,fur),e(H7,mur),e(H7,Lve),e(Lve,gur),e(Fo,hur),M(U7,Fo,null),b(f,gVe,u),b(f,oc,u),e(oc,J7),e(J7,yve),M(F9,yve,null),e(oc,pur),e(oc,xve),e(xve,_ur),b(f,hVe,u),b(f,er,u),M(T9,er,null),e(er,uur),e(er,rc),e(rc,bur),e(rc,hH),e(hH,vur),e(rc,Fur),e(rc,pH),e(pH,Tur),e(rc,Mur),e(er,Eur),e(er,M9),e(M9,Cur),e(M9,$ve),e($ve,wur),e(M9,Aur),e(er,Lur),e(er,$t),M(E9,$t,null),e($t,yur),e($t,kve),e(kve,xur),e($t,$ur),e($t,tc),e(tc,kur),e(tc,Sve),e(Sve,Sur),e(tc,Rur),e(tc,_H),e(_H,Pur),e(tc,Bur),e($t,Iur),M(Y7,$t,null),e(er,Nur),e(er,yr),M(C9,yr,null),e(yr,qur),e(yr,Rve),e(Rve,jur),e(yr,Dur),e(yr,an),e(an,Gur),e(an,Pve),e(Pve,Our),e(an,Vur),e(an,Bve),e(Bve,Xur),e(an,zur),e(an,Ive),e(Ive,Qur),e(an,Wur),e(yr,Hur),e(yr,j),e(j,K7),e(K7,Nve),e(Nve,Uur),e(K7,Jur),e(K7,uH),e(uH,Yur),e(K7,Kur),e(j,Zur),e(j,Z7),e(Z7,qve),e(qve,e1r),e(Z7,o1r),e(Z7,bH),e(bH,r1r),e(Z7,t1r),e(j,a1r),e(j,eM),e(eM,jve),e(jve,n1r),e(eM,s1r),e(eM,vH),e(vH,l1r),e(eM,i1r),e(j,d1r),e(j,oM),e(oM,Dve),e(Dve,c1r),e(oM,f1r),e(oM,FH),e(FH,m1r),e(oM,g1r),e(j,h1r),e(j,rM),e(rM,Gve),e(Gve,p1r),e(rM,_1r),e(rM,TH),e(TH,u1r),e(rM,b1r),e(j,v1r),e(j,tM),e(tM,Ove),e(Ove,F1r),e(tM,T1r),e(tM,MH),e(MH,M1r),e(tM,E1r),e(j,C1r),e(j,aM),e(aM,Vve),e(Vve,w1r),e(aM,A1r),e(aM,EH),e(EH,L1r),e(aM,y1r),e(j,x1r),e(j,nM),e(nM,Xve),e(Xve,$1r),e(nM,k1r),e(nM,CH),e(CH,S1r),e(nM,R1r),e(j,P1r),e(j,sM),e(sM,zve),e(zve,B1r),e(sM,I1r),e(sM,wH),e(wH,N1r),e(sM,q1r),e(j,j1r),e(j,lM),e(lM,Qve),e(Qve,D1r),e(lM,G1r),e(lM,AH),e(AH,O1r),e(lM,V1r),e(j,X1r),e(j,iM),e(iM,Wve),e(Wve,z1r),e(iM,Q1r),e(iM,LH),e(LH,W1r),e(iM,H1r),e(j,U1r),e(j,dM),e(dM,Hve),e(Hve,J1r),e(dM,Y1r),e(dM,yH),e(yH,K1r),e(dM,Z1r),e(j,e3r),e(j,cM),e(cM,Uve),e(Uve,o3r),e(cM,r3r),e(cM,xH),e(xH,t3r),e(cM,a3r),e(j,n3r),e(j,fM),e(fM,Jve),e(Jve,s3r),e(fM,l3r),e(fM,$H),e($H,i3r),e(fM,d3r),e(j,c3r),e(j,mM),e(mM,Yve),e(Yve,f3r),e(mM,m3r),e(mM,kH),e(kH,g3r),e(mM,h3r),e(j,p3r),e(j,gM),e(gM,Kve),e(Kve,_3r),e(gM,u3r),e(gM,SH),e(SH,b3r),e(gM,v3r),e(j,F3r),e(j,hM),e(hM,Zve),e(Zve,T3r),e(hM,M3r),e(hM,RH),e(RH,E3r),e(hM,C3r),e(j,w3r),e(j,Ws),e(Ws,eFe),e(eFe,A3r),e(Ws,L3r),e(Ws,PH),e(PH,y3r),e(Ws,x3r),e(Ws,BH),e(BH,$3r),e(Ws,k3r),e(j,S3r),e(j,pM),e(pM,oFe),e(oFe,R3r),e(pM,P3r),e(pM,IH),e(IH,B3r),e(pM,I3r),e(j,N3r),e(j,_M),e(_M,rFe),e(rFe,q3r),e(_M,j3r),e(_M,NH),e(NH,D3r),e(_M,G3r),e(j,O3r),e(j,uM),e(uM,tFe),e(tFe,V3r),e(uM,X3r),e(uM,qH),e(qH,z3r),e(uM,Q3r),e(j,W3r),e(j,bM),e(bM,aFe),e(aFe,H3r),e(bM,U3r),e(bM,jH),e(jH,J3r),e(bM,Y3r),e(j,K3r),e(j,vM),e(vM,nFe),e(nFe,Z3r),e(vM,e2r),e(vM,DH),e(DH,o2r),e(vM,r2r),e(j,t2r),e(j,FM),e(FM,sFe),e(sFe,a2r),e(FM,n2r),e(FM,GH),e(GH,s2r),e(FM,l2r),e(j,i2r),e(j,TM),e(TM,lFe),e(lFe,d2r),e(TM,c2r),e(TM,OH),e(OH,f2r),e(TM,m2r),e(j,g2r),e(j,MM),e(MM,iFe),e(iFe,h2r),e(MM,p2r),e(MM,VH),e(VH,_2r),e(MM,u2r),e(j,b2r),e(j,EM),e(EM,dFe),e(dFe,v2r),e(EM,F2r),e(EM,XH),e(XH,T2r),e(EM,M2r),e(j,E2r),e(j,CM),e(CM,cFe),e(cFe,C2r),e(CM,w2r),e(CM,zH),e(zH,A2r),e(CM,L2r),e(j,y2r),e(j,wM),e(wM,fFe),e(fFe,x2r),e(wM,$2r),e(wM,QH),e(QH,k2r),e(wM,S2r),e(j,R2r),e(j,AM),e(AM,mFe),e(mFe,P2r),e(AM,B2r),e(AM,WH),e(WH,I2r),e(AM,N2r),e(j,q2r),e(j,LM),e(LM,gFe),e(gFe,j2r),e(LM,D2r),e(LM,HH),e(HH,G2r),e(LM,O2r),e(j,V2r),e(j,yM),e(yM,hFe),e(hFe,X2r),e(yM,z2r),e(yM,UH),e(UH,Q2r),e(yM,W2r),e(j,H2r),e(j,xM),e(xM,pFe),e(pFe,U2r),e(xM,J2r),e(xM,JH),e(JH,Y2r),e(xM,K2r),e(j,Z2r),e(j,$M),e($M,_Fe),e(_Fe,ebr),e($M,obr),e($M,YH),e(YH,rbr),e($M,tbr),e(j,abr),e(j,kM),e(kM,uFe),e(uFe,nbr),e(kM,sbr),e(kM,KH),e(KH,lbr),e(kM,ibr),e(j,dbr),e(j,SM),e(SM,bFe),e(bFe,cbr),e(SM,fbr),e(SM,ZH),e(ZH,mbr),e(SM,gbr),e(j,hbr),e(j,RM),e(RM,vFe),e(vFe,pbr),e(RM,_br),e(RM,eU),e(eU,ubr),e(RM,bbr),e(j,vbr),e(j,PM),e(PM,FFe),e(FFe,Fbr),e(PM,Tbr),e(PM,oU),e(oU,Mbr),e(PM,Ebr),e(j,Cbr),e(j,BM),e(BM,TFe),e(TFe,wbr),e(BM,Abr),e(BM,rU),e(rU,Lbr),e(BM,ybr),e(j,xbr),e(j,IM),e(IM,MFe),e(MFe,$br),e(IM,kbr),e(IM,tU),e(tU,Sbr),e(IM,Rbr),e(j,Pbr),e(j,NM),e(NM,EFe),e(EFe,Bbr),e(NM,Ibr),e(NM,aU),e(aU,Nbr),e(NM,qbr),e(j,jbr),e(j,qM),e(qM,CFe),e(CFe,Dbr),e(qM,Gbr),e(qM,nU),e(nU,Obr),e(qM,Vbr),e(j,Xbr),e(j,jM),e(jM,wFe),e(wFe,zbr),e(jM,Qbr),e(jM,sU),e(sU,Wbr),e(jM,Hbr),e(j,Ubr),e(j,DM),e(DM,AFe),e(AFe,Jbr),e(DM,Ybr),e(DM,lU),e(lU,Kbr),e(DM,Zbr),e(j,evr),e(j,GM),e(GM,LFe),e(LFe,ovr),e(GM,rvr),e(GM,iU),e(iU,tvr),e(GM,avr),e(j,nvr),e(j,OM),e(OM,yFe),e(yFe,svr),e(OM,lvr),e(OM,dU),e(dU,ivr),e(OM,dvr),e(j,cvr),e(j,VM),e(VM,xFe),e(xFe,fvr),e(VM,mvr),e(VM,cU),e(cU,gvr),e(VM,hvr),e(yr,pvr),M(XM,yr,null),b(f,pVe,u),b(f,ac,u),e(ac,zM),e(zM,$Fe),M(w9,$Fe,null),e(ac,_vr),e(ac,kFe),e(kFe,uvr),b(f,_Ve,u),b(f,or,u),M(A9,or,null),e(or,bvr),e(or,nc),e(nc,vvr),e(nc,fU),e(fU,Fvr),e(nc,Tvr),e(nc,mU),e(mU,Mvr),e(nc,Evr),e(or,Cvr),e(or,L9),e(L9,wvr),e(L9,SFe),e(SFe,Avr),e(L9,Lvr),e(or,yvr),e(or,kt),M(y9,kt,null),e(kt,xvr),e(kt,RFe),e(RFe,$vr),e(kt,kvr),e(kt,sc),e(sc,Svr),e(sc,PFe),e(PFe,Rvr),e(sc,Pvr),e(sc,gU),e(gU,Bvr),e(sc,Ivr),e(kt,Nvr),M(QM,kt,null),e(or,qvr),e(or,xr),M(x9,xr,null),e(xr,jvr),e(xr,BFe),e(BFe,Dvr),e(xr,Gvr),e(xr,nn),e(nn,Ovr),e(nn,IFe),e(IFe,Vvr),e(nn,Xvr),e(nn,NFe),e(NFe,zvr),e(nn,Qvr),e(nn,qFe),e(qFe,Wvr),e(nn,Hvr),e(xr,Uvr),e(xr,se),e(se,WM),e(WM,jFe),e(jFe,Jvr),e(WM,Yvr),e(WM,hU),e(hU,Kvr),e(WM,Zvr),e(se,eFr),e(se,HM),e(HM,DFe),e(DFe,oFr),e(HM,rFr),e(HM,pU),e(pU,tFr),e(HM,aFr),e(se,nFr),e(se,UM),e(UM,GFe),e(GFe,sFr),e(UM,lFr),e(UM,_U),e(_U,iFr),e(UM,dFr),e(se,cFr),e(se,JM),e(JM,OFe),e(OFe,fFr),e(JM,mFr),e(JM,uU),e(uU,gFr),e(JM,hFr),e(se,pFr),e(se,YM),e(YM,VFe),e(VFe,_Fr),e(YM,uFr),e(YM,bU),e(bU,bFr),e(YM,vFr),e(se,FFr),e(se,KM),e(KM,XFe),e(XFe,TFr),e(KM,MFr),e(KM,vU),e(vU,EFr),e(KM,CFr),e(se,wFr),e(se,ZM),e(ZM,zFe),e(zFe,AFr),e(ZM,LFr),e(ZM,FU),e(FU,yFr),e(ZM,xFr),e(se,$Fr),e(se,eE),e(eE,QFe),e(QFe,kFr),e(eE,SFr),e(eE,TU),e(TU,RFr),e(eE,PFr),e(se,BFr),e(se,oE),e(oE,WFe),e(WFe,IFr),e(oE,NFr),e(oE,MU),e(MU,qFr),e(oE,jFr),e(se,DFr),e(se,rE),e(rE,HFe),e(HFe,GFr),e(rE,OFr),e(rE,EU),e(EU,VFr),e(rE,XFr),e(se,zFr),e(se,tE),e(tE,UFe),e(UFe,QFr),e(tE,WFr),e(tE,CU),e(CU,HFr),e(tE,UFr),e(se,JFr),e(se,aE),e(aE,JFe),e(JFe,YFr),e(aE,KFr),e(aE,wU),e(wU,ZFr),e(aE,eTr),e(se,oTr),e(se,nE),e(nE,YFe),e(YFe,rTr),e(nE,tTr),e(nE,AU),e(AU,aTr),e(nE,nTr),e(se,sTr),e(se,sE),e(sE,KFe),e(KFe,lTr),e(sE,iTr),e(sE,LU),e(LU,dTr),e(sE,cTr),e(se,fTr),e(se,lE),e(lE,ZFe),e(ZFe,mTr),e(lE,gTr),e(lE,yU),e(yU,hTr),e(lE,pTr),e(se,_Tr),e(se,iE),e(iE,eTe),e(eTe,uTr),e(iE,bTr),e(iE,xU),e(xU,vTr),e(iE,FTr),e(se,TTr),e(se,dE),e(dE,oTe),e(oTe,MTr),e(dE,ETr),e(dE,$U),e($U,CTr),e(dE,wTr),e(se,ATr),e(se,cE),e(cE,rTe),e(rTe,LTr),e(cE,yTr),e(cE,kU),e(kU,xTr),e(cE,$Tr),e(se,kTr),e(se,fE),e(fE,tTe),e(tTe,STr),e(fE,RTr),e(fE,SU),e(SU,PTr),e(fE,BTr),e(se,ITr),e(se,mE),e(mE,aTe),e(aTe,NTr),e(mE,qTr),e(mE,RU),e(RU,jTr),e(mE,DTr),e(se,GTr),e(se,gE),e(gE,nTe),e(nTe,OTr),e(gE,VTr),e(gE,PU),e(PU,XTr),e(gE,zTr),e(se,QTr),e(se,hE),e(hE,sTe),e(sTe,WTr),e(hE,HTr),e(hE,BU),e(BU,UTr),e(hE,JTr),e(se,YTr),e(se,pE),e(pE,lTe),e(lTe,KTr),e(pE,ZTr),e(pE,IU),e(IU,e7r),e(pE,o7r),e(xr,r7r),M(_E,xr,null),b(f,uVe,u),b(f,lc,u),e(lc,uE),e(uE,iTe),M($9,iTe,null),e(lc,t7r),e(lc,dTe),e(dTe,a7r),b(f,bVe,u),b(f,rr,u),M(k9,rr,null),e(rr,n7r),e(rr,ic),e(ic,s7r),e(ic,NU),e(NU,l7r),e(ic,i7r),e(ic,qU),e(qU,d7r),e(ic,c7r),e(rr,f7r),e(rr,S9),e(S9,m7r),e(S9,cTe),e(cTe,g7r),e(S9,h7r),e(rr,p7r),e(rr,St),M(R9,St,null),e(St,_7r),e(St,fTe),e(fTe,u7r),e(St,b7r),e(St,dc),e(dc,v7r),e(dc,mTe),e(mTe,F7r),e(dc,T7r),e(dc,jU),e(jU,M7r),e(dc,E7r),e(St,C7r),M(bE,St,null),e(rr,w7r),e(rr,$r),M(P9,$r,null),e($r,A7r),e($r,gTe),e(gTe,L7r),e($r,y7r),e($r,sn),e(sn,x7r),e(sn,hTe),e(hTe,$7r),e(sn,k7r),e(sn,pTe),e(pTe,S7r),e(sn,R7r),e(sn,_Te),e(_Te,P7r),e(sn,B7r),e($r,I7r),e($r,Me),e(Me,vE),e(vE,uTe),e(uTe,N7r),e(vE,q7r),e(vE,DU),e(DU,j7r),e(vE,D7r),e(Me,G7r),e(Me,FE),e(FE,bTe),e(bTe,O7r),e(FE,V7r),e(FE,GU),e(GU,X7r),e(FE,z7r),e(Me,Q7r),e(Me,TE),e(TE,vTe),e(vTe,W7r),e(TE,H7r),e(TE,OU),e(OU,U7r),e(TE,J7r),e(Me,Y7r),e(Me,ME),e(ME,FTe),e(FTe,K7r),e(ME,Z7r),e(ME,VU),e(VU,eMr),e(ME,oMr),e(Me,rMr),e(Me,EE),e(EE,TTe),e(TTe,tMr),e(EE,aMr),e(EE,XU),e(XU,nMr),e(EE,sMr),e(Me,lMr),e(Me,CE),e(CE,MTe),e(MTe,iMr),e(CE,dMr),e(CE,zU),e(zU,cMr),e(CE,fMr),e(Me,mMr),e(Me,wE),e(wE,ETe),e(ETe,gMr),e(wE,hMr),e(wE,QU),e(QU,pMr),e(wE,_Mr),e(Me,uMr),e(Me,AE),e(AE,CTe),e(CTe,bMr),e(AE,vMr),e(AE,WU),e(WU,FMr),e(AE,TMr),e(Me,MMr),e(Me,LE),e(LE,wTe),e(wTe,EMr),e(LE,CMr),e(LE,HU),e(HU,wMr),e(LE,AMr),e(Me,LMr),e(Me,yE),e(yE,ATe),e(ATe,yMr),e(yE,xMr),e(yE,UU),e(UU,$Mr),e(yE,kMr),e(Me,SMr),e(Me,xE),e(xE,LTe),e(LTe,RMr),e(xE,PMr),e(xE,JU),e(JU,BMr),e(xE,IMr),e(Me,NMr),e(Me,$E),e($E,yTe),e(yTe,qMr),e($E,jMr),e($E,YU),e(YU,DMr),e($E,GMr),e(Me,OMr),e(Me,kE),e(kE,xTe),e(xTe,VMr),e(kE,XMr),e(kE,KU),e(KU,zMr),e(kE,QMr),e($r,WMr),M(SE,$r,null),b(f,vVe,u),b(f,cc,u),e(cc,RE),e(RE,$Te),M(B9,$Te,null),e(cc,HMr),e(cc,kTe),e(kTe,UMr),b(f,FVe,u),b(f,tr,u),M(I9,tr,null),e(tr,JMr),e(tr,fc),e(fc,YMr),e(fc,ZU),e(ZU,KMr),e(fc,ZMr),e(fc,eJ),e(eJ,eEr),e(fc,oEr),e(tr,rEr),e(tr,N9),e(N9,tEr),e(N9,STe),e(STe,aEr),e(N9,nEr),e(tr,sEr),e(tr,Rt),M(q9,Rt,null),e(Rt,lEr),e(Rt,RTe),e(RTe,iEr),e(Rt,dEr),e(Rt,mc),e(mc,cEr),e(mc,PTe),e(PTe,fEr),e(mc,mEr),e(mc,oJ),e(oJ,gEr),e(mc,hEr),e(Rt,pEr),M(PE,Rt,null),e(tr,_Er),e(tr,kr),M(j9,kr,null),e(kr,uEr),e(kr,BTe),e(BTe,bEr),e(kr,vEr),e(kr,ln),e(ln,FEr),e(ln,ITe),e(ITe,TEr),e(ln,MEr),e(ln,NTe),e(NTe,EEr),e(ln,CEr),e(ln,qTe),e(qTe,wEr),e(ln,AEr),e(kr,LEr),e(kr,dn),e(dn,BE),e(BE,jTe),e(jTe,yEr),e(BE,xEr),e(BE,rJ),e(rJ,$Er),e(BE,kEr),e(dn,SEr),e(dn,IE),e(IE,DTe),e(DTe,REr),e(IE,PEr),e(IE,tJ),e(tJ,BEr),e(IE,IEr),e(dn,NEr),e(dn,NE),e(NE,GTe),e(GTe,qEr),e(NE,jEr),e(NE,aJ),e(aJ,DEr),e(NE,GEr),e(dn,OEr),e(dn,qE),e(qE,OTe),e(OTe,VEr),e(qE,XEr),e(qE,nJ),e(nJ,zEr),e(qE,QEr),e(kr,WEr),M(jE,kr,null),b(f,TVe,u),b(f,gc,u),e(gc,DE),e(DE,VTe),M(D9,VTe,null),e(gc,HEr),e(gc,XTe),e(XTe,UEr),b(f,MVe,u),b(f,ar,u),M(G9,ar,null),e(ar,JEr),e(ar,hc),e(hc,YEr),e(hc,sJ),e(sJ,KEr),e(hc,ZEr),e(hc,lJ),e(lJ,e4r),e(hc,o4r),e(ar,r4r),e(ar,O9),e(O9,t4r),e(O9,zTe),e(zTe,a4r),e(O9,n4r),e(ar,s4r),e(ar,Pt),M(V9,Pt,null),e(Pt,l4r),e(Pt,QTe),e(QTe,i4r),e(Pt,d4r),e(Pt,pc),e(pc,c4r),e(pc,WTe),e(WTe,f4r),e(pc,m4r),e(pc,iJ),e(iJ,g4r),e(pc,h4r),e(Pt,p4r),M(GE,Pt,null),e(ar,_4r),e(ar,Sr),M(X9,Sr,null),e(Sr,u4r),e(Sr,HTe),e(HTe,b4r),e(Sr,v4r),e(Sr,cn),e(cn,F4r),e(cn,UTe),e(UTe,T4r),e(cn,M4r),e(cn,JTe),e(JTe,E4r),e(cn,C4r),e(cn,YTe),e(YTe,w4r),e(cn,A4r),e(Sr,L4r),e(Sr,ie),e(ie,OE),e(OE,KTe),e(KTe,y4r),e(OE,x4r),e(OE,dJ),e(dJ,$4r),e(OE,k4r),e(ie,S4r),e(ie,VE),e(VE,ZTe),e(ZTe,R4r),e(VE,P4r),e(VE,cJ),e(cJ,B4r),e(VE,I4r),e(ie,N4r),e(ie,XE),e(XE,e7e),e(e7e,q4r),e(XE,j4r),e(XE,fJ),e(fJ,D4r),e(XE,G4r),e(ie,O4r),e(ie,zE),e(zE,o7e),e(o7e,V4r),e(zE,X4r),e(zE,mJ),e(mJ,z4r),e(zE,Q4r),e(ie,W4r),e(ie,QE),e(QE,r7e),e(r7e,H4r),e(QE,U4r),e(QE,gJ),e(gJ,J4r),e(QE,Y4r),e(ie,K4r),e(ie,WE),e(WE,t7e),e(t7e,Z4r),e(WE,eCr),e(WE,hJ),e(hJ,oCr),e(WE,rCr),e(ie,tCr),e(ie,HE),e(HE,a7e),e(a7e,aCr),e(HE,nCr),e(HE,pJ),e(pJ,sCr),e(HE,lCr),e(ie,iCr),e(ie,UE),e(UE,n7e),e(n7e,dCr),e(UE,cCr),e(UE,_J),e(_J,fCr),e(UE,mCr),e(ie,gCr),e(ie,JE),e(JE,s7e),e(s7e,hCr),e(JE,pCr),e(JE,uJ),e(uJ,_Cr),e(JE,uCr),e(ie,bCr),e(ie,YE),e(YE,l7e),e(l7e,vCr),e(YE,FCr),e(YE,bJ),e(bJ,TCr),e(YE,MCr),e(ie,ECr),e(ie,KE),e(KE,i7e),e(i7e,CCr),e(KE,wCr),e(KE,vJ),e(vJ,ACr),e(KE,LCr),e(ie,yCr),e(ie,ZE),e(ZE,d7e),e(d7e,xCr),e(ZE,$Cr),e(ZE,FJ),e(FJ,kCr),e(ZE,SCr),e(ie,RCr),e(ie,e4),e(e4,c7e),e(c7e,PCr),e(e4,BCr),e(e4,TJ),e(TJ,ICr),e(e4,NCr),e(ie,qCr),e(ie,o4),e(o4,f7e),e(f7e,jCr),e(o4,DCr),e(o4,MJ),e(MJ,GCr),e(o4,OCr),e(ie,VCr),e(ie,r4),e(r4,m7e),e(m7e,XCr),e(r4,zCr),e(r4,EJ),e(EJ,QCr),e(r4,WCr),e(ie,HCr),e(ie,t4),e(t4,g7e),e(g7e,UCr),e(t4,JCr),e(t4,CJ),e(CJ,YCr),e(t4,KCr),e(ie,ZCr),e(ie,a4),e(a4,h7e),e(h7e,e5r),e(a4,o5r),e(a4,wJ),e(wJ,r5r),e(a4,t5r),e(ie,a5r),e(ie,n4),e(n4,p7e),e(p7e,n5r),e(n4,s5r),e(n4,AJ),e(AJ,l5r),e(n4,i5r),e(ie,d5r),e(ie,s4),e(s4,_7e),e(_7e,c5r),e(s4,f5r),e(s4,LJ),e(LJ,m5r),e(s4,g5r),e(ie,h5r),e(ie,l4),e(l4,u7e),e(u7e,p5r),e(l4,_5r),e(l4,yJ),e(yJ,u5r),e(l4,b5r),e(Sr,v5r),M(i4,Sr,null),b(f,EVe,u),b(f,_c,u),e(_c,d4),e(d4,b7e),M(z9,b7e,null),e(_c,F5r),e(_c,v7e),e(v7e,T5r),b(f,CVe,u),b(f,nr,u),M(Q9,nr,null),e(nr,M5r),e(nr,uc),e(uc,E5r),e(uc,xJ),e(xJ,C5r),e(uc,w5r),e(uc,$J),e($J,A5r),e(uc,L5r),e(nr,y5r),e(nr,W9),e(W9,x5r),e(W9,F7e),e(F7e,$5r),e(W9,k5r),e(nr,S5r),e(nr,Bt),M(H9,Bt,null),e(Bt,R5r),e(Bt,T7e),e(T7e,P5r),e(Bt,B5r),e(Bt,bc),e(bc,I5r),e(bc,M7e),e(M7e,N5r),e(bc,q5r),e(bc,kJ),e(kJ,j5r),e(bc,D5r),e(Bt,G5r),M(c4,Bt,null),e(nr,O5r),e(nr,Rr),M(U9,Rr,null),e(Rr,V5r),e(Rr,E7e),e(E7e,X5r),e(Rr,z5r),e(Rr,fn),e(fn,Q5r),e(fn,C7e),e(C7e,W5r),e(fn,H5r),e(fn,w7e),e(w7e,U5r),e(fn,J5r),e(fn,A7e),e(A7e,Y5r),e(fn,K5r),e(Rr,Z5r),e(Rr,ye),e(ye,f4),e(f4,L7e),e(L7e,e0r),e(f4,o0r),e(f4,SJ),e(SJ,r0r),e(f4,t0r),e(ye,a0r),e(ye,m4),e(m4,y7e),e(y7e,n0r),e(m4,s0r),e(m4,RJ),e(RJ,l0r),e(m4,i0r),e(ye,d0r),e(ye,g4),e(g4,x7e),e(x7e,c0r),e(g4,f0r),e(g4,PJ),e(PJ,m0r),e(g4,g0r),e(ye,h0r),e(ye,h4),e(h4,$7e),e($7e,p0r),e(h4,_0r),e(h4,BJ),e(BJ,u0r),e(h4,b0r),e(ye,v0r),e(ye,p4),e(p4,k7e),e(k7e,F0r),e(p4,T0r),e(p4,IJ),e(IJ,M0r),e(p4,E0r),e(ye,C0r),e(ye,_4),e(_4,S7e),e(S7e,w0r),e(_4,A0r),e(_4,NJ),e(NJ,L0r),e(_4,y0r),e(ye,x0r),e(ye,u4),e(u4,R7e),e(R7e,$0r),e(u4,k0r),e(u4,qJ),e(qJ,S0r),e(u4,R0r),e(ye,P0r),e(ye,b4),e(b4,P7e),e(P7e,B0r),e(b4,I0r),e(b4,jJ),e(jJ,N0r),e(b4,q0r),e(ye,j0r),e(ye,v4),e(v4,B7e),e(B7e,D0r),e(v4,G0r),e(v4,DJ),e(DJ,O0r),e(v4,V0r),e(ye,X0r),e(ye,F4),e(F4,I7e),e(I7e,z0r),e(F4,Q0r),e(F4,GJ),e(GJ,W0r),e(F4,H0r),e(Rr,U0r),M(T4,Rr,null),b(f,wVe,u),b(f,vc,u),e(vc,M4),e(M4,N7e),M(J9,N7e,null),e(vc,J0r),e(vc,q7e),e(q7e,Y0r),b(f,AVe,u),b(f,sr,u),M(Y9,sr,null),e(sr,K0r),e(sr,Fc),e(Fc,Z0r),e(Fc,OJ),e(OJ,ewr),e(Fc,owr),e(Fc,VJ),e(VJ,rwr),e(Fc,twr),e(sr,awr),e(sr,K9),e(K9,nwr),e(K9,j7e),e(j7e,swr),e(K9,lwr),e(sr,iwr),e(sr,It),M(Z9,It,null),e(It,dwr),e(It,D7e),e(D7e,cwr),e(It,fwr),e(It,Tc),e(Tc,mwr),e(Tc,G7e),e(G7e,gwr),e(Tc,hwr),e(Tc,XJ),e(XJ,pwr),e(Tc,_wr),e(It,uwr),M(E4,It,null),e(sr,bwr),e(sr,Pr),M(ex,Pr,null),e(Pr,vwr),e(Pr,O7e),e(O7e,Fwr),e(Pr,Twr),e(Pr,mn),e(mn,Mwr),e(mn,V7e),e(V7e,Ewr),e(mn,Cwr),e(mn,X7e),e(X7e,wwr),e(mn,Awr),e(mn,z7e),e(z7e,Lwr),e(mn,ywr),e(Pr,xwr),e(Pr,te),e(te,C4),e(C4,Q7e),e(Q7e,$wr),e(C4,kwr),e(C4,zJ),e(zJ,Swr),e(C4,Rwr),e(te,Pwr),e(te,w4),e(w4,W7e),e(W7e,Bwr),e(w4,Iwr),e(w4,QJ),e(QJ,Nwr),e(w4,qwr),e(te,jwr),e(te,A4),e(A4,H7e),e(H7e,Dwr),e(A4,Gwr),e(A4,WJ),e(WJ,Owr),e(A4,Vwr),e(te,Xwr),e(te,L4),e(L4,U7e),e(U7e,zwr),e(L4,Qwr),e(L4,HJ),e(HJ,Wwr),e(L4,Hwr),e(te,Uwr),e(te,y4),e(y4,J7e),e(J7e,Jwr),e(y4,Ywr),e(y4,UJ),e(UJ,Kwr),e(y4,Zwr),e(te,eAr),e(te,x4),e(x4,Y7e),e(Y7e,oAr),e(x4,rAr),e(x4,JJ),e(JJ,tAr),e(x4,aAr),e(te,nAr),e(te,$4),e($4,K7e),e(K7e,sAr),e($4,lAr),e($4,YJ),e(YJ,iAr),e($4,dAr),e(te,cAr),e(te,k4),e(k4,Z7e),e(Z7e,fAr),e(k4,mAr),e(k4,KJ),e(KJ,gAr),e(k4,hAr),e(te,pAr),e(te,S4),e(S4,eMe),e(eMe,_Ar),e(S4,uAr),e(S4,ZJ),e(ZJ,bAr),e(S4,vAr),e(te,FAr),e(te,R4),e(R4,oMe),e(oMe,TAr),e(R4,MAr),e(R4,eY),e(eY,EAr),e(R4,CAr),e(te,wAr),e(te,P4),e(P4,rMe),e(rMe,AAr),e(P4,LAr),e(P4,oY),e(oY,yAr),e(P4,xAr),e(te,$Ar),e(te,B4),e(B4,tMe),e(tMe,kAr),e(B4,SAr),e(B4,rY),e(rY,RAr),e(B4,PAr),e(te,BAr),e(te,I4),e(I4,aMe),e(aMe,IAr),e(I4,NAr),e(I4,tY),e(tY,qAr),e(I4,jAr),e(te,DAr),e(te,N4),e(N4,nMe),e(nMe,GAr),e(N4,OAr),e(N4,aY),e(aY,VAr),e(N4,XAr),e(te,zAr),e(te,q4),e(q4,sMe),e(sMe,QAr),e(q4,WAr),e(q4,nY),e(nY,HAr),e(q4,UAr),e(te,JAr),e(te,j4),e(j4,lMe),e(lMe,YAr),e(j4,KAr),e(j4,sY),e(sY,ZAr),e(j4,e6r),e(te,o6r),e(te,D4),e(D4,iMe),e(iMe,r6r),e(D4,t6r),e(D4,lY),e(lY,a6r),e(D4,n6r),e(te,s6r),e(te,G4),e(G4,dMe),e(dMe,l6r),e(G4,i6r),e(G4,iY),e(iY,d6r),e(G4,c6r),e(te,f6r),e(te,O4),e(O4,cMe),e(cMe,m6r),e(O4,g6r),e(O4,dY),e(dY,h6r),e(O4,p6r),e(te,_6r),e(te,V4),e(V4,fMe),e(fMe,u6r),e(V4,b6r),e(V4,cY),e(cY,v6r),e(V4,F6r),e(te,T6r),e(te,X4),e(X4,mMe),e(mMe,M6r),e(X4,E6r),e(X4,fY),e(fY,C6r),e(X4,w6r),e(te,A6r),e(te,z4),e(z4,gMe),e(gMe,L6r),e(z4,y6r),e(z4,mY),e(mY,x6r),e(z4,$6r),e(te,k6r),e(te,Q4),e(Q4,hMe),e(hMe,S6r),e(Q4,R6r),e(Q4,gY),e(gY,P6r),e(Q4,B6r),e(te,I6r),e(te,W4),e(W4,pMe),e(pMe,N6r),e(W4,q6r),e(W4,hY),e(hY,j6r),e(W4,D6r),e(te,G6r),e(te,H4),e(H4,_Me),e(_Me,O6r),e(H4,V6r),e(H4,pY),e(pY,X6r),e(H4,z6r),e(te,Q6r),e(te,U4),e(U4,uMe),e(uMe,W6r),e(U4,H6r),e(U4,_Y),e(_Y,U6r),e(U4,J6r),e(Pr,Y6r),M(J4,Pr,null),b(f,LVe,u),b(f,Mc,u),e(Mc,Y4),e(Y4,bMe),M(ox,bMe,null),e(Mc,K6r),e(Mc,vMe),e(vMe,Z6r),b(f,yVe,u),b(f,lr,u),M(rx,lr,null),e(lr,eLr),e(lr,Ec),e(Ec,oLr),e(Ec,uY),e(uY,rLr),e(Ec,tLr),e(Ec,bY),e(bY,aLr),e(Ec,nLr),e(lr,sLr),e(lr,tx),e(tx,lLr),e(tx,FMe),e(FMe,iLr),e(tx,dLr),e(lr,cLr),e(lr,Nt),M(ax,Nt,null),e(Nt,fLr),e(Nt,TMe),e(TMe,mLr),e(Nt,gLr),e(Nt,Cc),e(Cc,hLr),e(Cc,MMe),e(MMe,pLr),e(Cc,_Lr),e(Cc,vY),e(vY,uLr),e(Cc,bLr),e(Nt,vLr),M(K4,Nt,null),e(lr,FLr),e(lr,Br),M(nx,Br,null),e(Br,TLr),e(Br,EMe),e(EMe,MLr),e(Br,ELr),e(Br,gn),e(gn,CLr),e(gn,CMe),e(CMe,wLr),e(gn,ALr),e(gn,wMe),e(wMe,LLr),e(gn,yLr),e(gn,AMe),e(AMe,xLr),e(gn,$Lr),e(Br,kLr),e(Br,_e),e(_e,Z4),e(Z4,LMe),e(LMe,SLr),e(Z4,RLr),e(Z4,FY),e(FY,PLr),e(Z4,BLr),e(_e,ILr),e(_e,eC),e(eC,yMe),e(yMe,NLr),e(eC,qLr),e(eC,TY),e(TY,jLr),e(eC,DLr),e(_e,GLr),e(_e,oC),e(oC,xMe),e(xMe,OLr),e(oC,VLr),e(oC,MY),e(MY,XLr),e(oC,zLr),e(_e,QLr),e(_e,rC),e(rC,$Me),e($Me,WLr),e(rC,HLr),e(rC,EY),e(EY,ULr),e(rC,JLr),e(_e,YLr),e(_e,tC),e(tC,kMe),e(kMe,KLr),e(tC,ZLr),e(tC,CY),e(CY,eyr),e(tC,oyr),e(_e,ryr),e(_e,aC),e(aC,SMe),e(SMe,tyr),e(aC,ayr),e(aC,wY),e(wY,nyr),e(aC,syr),e(_e,lyr),e(_e,nC),e(nC,RMe),e(RMe,iyr),e(nC,dyr),e(nC,AY),e(AY,cyr),e(nC,fyr),e(_e,myr),e(_e,sC),e(sC,PMe),e(PMe,gyr),e(sC,hyr),e(sC,LY),e(LY,pyr),e(sC,_yr),e(_e,uyr),e(_e,lC),e(lC,BMe),e(BMe,byr),e(lC,vyr),e(lC,yY),e(yY,Fyr),e(lC,Tyr),e(_e,Myr),e(_e,iC),e(iC,IMe),e(IMe,Eyr),e(iC,Cyr),e(iC,xY),e(xY,wyr),e(iC,Ayr),e(_e,Lyr),e(_e,dC),e(dC,NMe),e(NMe,yyr),e(dC,xyr),e(dC,$Y),e($Y,$yr),e(dC,kyr),e(_e,Syr),e(_e,cC),e(cC,qMe),e(qMe,Ryr),e(cC,Pyr),e(cC,kY),e(kY,Byr),e(cC,Iyr),e(_e,Nyr),e(_e,fC),e(fC,jMe),e(jMe,qyr),e(fC,jyr),e(fC,SY),e(SY,Dyr),e(fC,Gyr),e(_e,Oyr),e(_e,mC),e(mC,DMe),e(DMe,Vyr),e(mC,Xyr),e(mC,RY),e(RY,zyr),e(mC,Qyr),e(_e,Wyr),e(_e,gC),e(gC,GMe),e(GMe,Hyr),e(gC,Uyr),e(gC,PY),e(PY,Jyr),e(gC,Yyr),e(_e,Kyr),e(_e,hC),e(hC,OMe),e(OMe,Zyr),e(hC,e8r),e(hC,BY),e(BY,o8r),e(hC,r8r),e(_e,t8r),e(_e,pC),e(pC,VMe),e(VMe,a8r),e(pC,n8r),e(pC,IY),e(IY,s8r),e(pC,l8r),e(Br,i8r),M(_C,Br,null),b(f,xVe,u),b(f,wc,u),e(wc,uC),e(uC,XMe),M(sx,XMe,null),e(wc,d8r),e(wc,zMe),e(zMe,c8r),b(f,$Ve,u),b(f,ir,u),M(lx,ir,null),e(ir,f8r),e(ir,Ac),e(Ac,m8r),e(Ac,NY),e(NY,g8r),e(Ac,h8r),e(Ac,qY),e(qY,p8r),e(Ac,_8r),e(ir,u8r),e(ir,ix),e(ix,b8r),e(ix,QMe),e(QMe,v8r),e(ix,F8r),e(ir,T8r),e(ir,qt),M(dx,qt,null),e(qt,M8r),e(qt,WMe),e(WMe,E8r),e(qt,C8r),e(qt,Lc),e(Lc,w8r),e(Lc,HMe),e(HMe,A8r),e(Lc,L8r),e(Lc,jY),e(jY,y8r),e(Lc,x8r),e(qt,$8r),M(bC,qt,null),e(ir,k8r),e(ir,Ir),M(cx,Ir,null),e(Ir,S8r),e(Ir,UMe),e(UMe,R8r),e(Ir,P8r),e(Ir,hn),e(hn,B8r),e(hn,JMe),e(JMe,I8r),e(hn,N8r),e(hn,YMe),e(YMe,q8r),e(hn,j8r),e(hn,KMe),e(KMe,D8r),e(hn,G8r),e(Ir,O8r),e(Ir,fx),e(fx,vC),e(vC,ZMe),e(ZMe,V8r),e(vC,X8r),e(vC,DY),e(DY,z8r),e(vC,Q8r),e(fx,W8r),e(fx,FC),e(FC,eEe),e(eEe,H8r),e(FC,U8r),e(FC,GY),e(GY,J8r),e(FC,Y8r),e(Ir,K8r),M(TC,Ir,null),b(f,kVe,u),b(f,yc,u),e(yc,MC),e(MC,oEe),M(mx,oEe,null),e(yc,Z8r),e(yc,rEe),e(rEe,e9r),b(f,SVe,u),b(f,dr,u),M(gx,dr,null),e(dr,o9r),e(dr,xc),e(xc,r9r),e(xc,OY),e(OY,t9r),e(xc,a9r),e(xc,VY),e(VY,n9r),e(xc,s9r),e(dr,l9r),e(dr,hx),e(hx,i9r),e(hx,tEe),e(tEe,d9r),e(hx,c9r),e(dr,f9r),e(dr,jt),M(px,jt,null),e(jt,m9r),e(jt,aEe),e(aEe,g9r),e(jt,h9r),e(jt,$c),e($c,p9r),e($c,nEe),e(nEe,_9r),e($c,u9r),e($c,XY),e(XY,b9r),e($c,v9r),e(jt,F9r),M(EC,jt,null),e(dr,T9r),e(dr,Nr),M(_x,Nr,null),e(Nr,M9r),e(Nr,sEe),e(sEe,E9r),e(Nr,C9r),e(Nr,pn),e(pn,w9r),e(pn,lEe),e(lEe,A9r),e(pn,L9r),e(pn,iEe),e(iEe,y9r),e(pn,x9r),e(pn,dEe),e(dEe,$9r),e(pn,k9r),e(Nr,S9r),e(Nr,cEe),e(cEe,CC),e(CC,fEe),e(fEe,R9r),e(CC,P9r),e(CC,zY),e(zY,B9r),e(CC,I9r),e(Nr,N9r),M(wC,Nr,null),b(f,RVe,u),b(f,kc,u),e(kc,AC),e(AC,mEe),M(ux,mEe,null),e(kc,q9r),e(kc,gEe),e(gEe,j9r),b(f,PVe,u),b(f,cr,u),M(bx,cr,null),e(cr,D9r),e(cr,Sc),e(Sc,G9r),e(Sc,QY),e(QY,O9r),e(Sc,V9r),e(Sc,WY),e(WY,X9r),e(Sc,z9r),e(cr,Q9r),e(cr,vx),e(vx,W9r),e(vx,hEe),e(hEe,H9r),e(vx,U9r),e(cr,J9r),e(cr,Dt),M(Fx,Dt,null),e(Dt,Y9r),e(Dt,pEe),e(pEe,K9r),e(Dt,Z9r),e(Dt,Rc),e(Rc,exr),e(Rc,_Ee),e(_Ee,oxr),e(Rc,rxr),e(Rc,HY),e(HY,txr),e(Rc,axr),e(Dt,nxr),M(LC,Dt,null),e(cr,sxr),e(cr,qr),M(Tx,qr,null),e(qr,lxr),e(qr,uEe),e(uEe,ixr),e(qr,dxr),e(qr,_n),e(_n,cxr),e(_n,bEe),e(bEe,fxr),e(_n,mxr),e(_n,vEe),e(vEe,gxr),e(_n,hxr),e(_n,FEe),e(FEe,pxr),e(_n,_xr),e(qr,uxr),e(qr,de),e(de,yC),e(yC,TEe),e(TEe,bxr),e(yC,vxr),e(yC,UY),e(UY,Fxr),e(yC,Txr),e(de,Mxr),e(de,xC),e(xC,MEe),e(MEe,Exr),e(xC,Cxr),e(xC,JY),e(JY,wxr),e(xC,Axr),e(de,Lxr),e(de,$C),e($C,EEe),e(EEe,yxr),e($C,xxr),e($C,YY),e(YY,$xr),e($C,kxr),e(de,Sxr),e(de,kC),e(kC,CEe),e(CEe,Rxr),e(kC,Pxr),e(kC,KY),e(KY,Bxr),e(kC,Ixr),e(de,Nxr),e(de,SC),e(SC,wEe),e(wEe,qxr),e(SC,jxr),e(SC,ZY),e(ZY,Dxr),e(SC,Gxr),e(de,Oxr),e(de,RC),e(RC,AEe),e(AEe,Vxr),e(RC,Xxr),e(RC,eK),e(eK,zxr),e(RC,Qxr),e(de,Wxr),e(de,PC),e(PC,LEe),e(LEe,Hxr),e(PC,Uxr),e(PC,oK),e(oK,Jxr),e(PC,Yxr),e(de,Kxr),e(de,BC),e(BC,yEe),e(yEe,Zxr),e(BC,e$r),e(BC,rK),e(rK,o$r),e(BC,r$r),e(de,t$r),e(de,IC),e(IC,xEe),e(xEe,a$r),e(IC,n$r),e(IC,tK),e(tK,s$r),e(IC,l$r),e(de,i$r),e(de,NC),e(NC,$Ee),e($Ee,d$r),e(NC,c$r),e(NC,aK),e(aK,f$r),e(NC,m$r),e(de,g$r),e(de,qC),e(qC,kEe),e(kEe,h$r),e(qC,p$r),e(qC,nK),e(nK,_$r),e(qC,u$r),e(de,b$r),e(de,jC),e(jC,SEe),e(SEe,v$r),e(jC,F$r),e(jC,sK),e(sK,T$r),e(jC,M$r),e(de,E$r),e(de,DC),e(DC,REe),e(REe,C$r),e(DC,w$r),e(DC,lK),e(lK,A$r),e(DC,L$r),e(de,y$r),e(de,GC),e(GC,PEe),e(PEe,x$r),e(GC,$$r),e(GC,iK),e(iK,k$r),e(GC,S$r),e(de,R$r),e(de,OC),e(OC,BEe),e(BEe,P$r),e(OC,B$r),e(OC,dK),e(dK,I$r),e(OC,N$r),e(de,q$r),e(de,VC),e(VC,IEe),e(IEe,j$r),e(VC,D$r),e(VC,cK),e(cK,G$r),e(VC,O$r),e(de,V$r),e(de,XC),e(XC,NEe),e(NEe,X$r),e(XC,z$r),e(XC,fK),e(fK,Q$r),e(XC,W$r),e(de,H$r),e(de,zC),e(zC,qEe),e(qEe,U$r),e(zC,J$r),e(zC,mK),e(mK,Y$r),e(zC,K$r),e(de,Z$r),e(de,QC),e(QC,jEe),e(jEe,ekr),e(QC,okr),e(QC,gK),e(gK,rkr),e(QC,tkr),e(de,akr),e(de,WC),e(WC,DEe),e(DEe,nkr),e(WC,skr),e(WC,hK),e(hK,lkr),e(WC,ikr),e(qr,dkr),M(HC,qr,null),b(f,BVe,u),b(f,Pc,u),e(Pc,UC),e(UC,GEe),M(Mx,GEe,null),e(Pc,ckr),e(Pc,OEe),e(OEe,fkr),b(f,IVe,u),b(f,fr,u),M(Ex,fr,null),e(fr,mkr),e(fr,Bc),e(Bc,gkr),e(Bc,pK),e(pK,hkr),e(Bc,pkr),e(Bc,_K),e(_K,_kr),e(Bc,ukr),e(fr,bkr),e(fr,Cx),e(Cx,vkr),e(Cx,VEe),e(VEe,Fkr),e(Cx,Tkr),e(fr,Mkr),e(fr,Gt),M(wx,Gt,null),e(Gt,Ekr),e(Gt,XEe),e(XEe,Ckr),e(Gt,wkr),e(Gt,Ic),e(Ic,Akr),e(Ic,zEe),e(zEe,Lkr),e(Ic,ykr),e(Ic,uK),e(uK,xkr),e(Ic,$kr),e(Gt,kkr),M(JC,Gt,null),e(fr,Skr),e(fr,jr),M(Ax,jr,null),e(jr,Rkr),e(jr,QEe),e(QEe,Pkr),e(jr,Bkr),e(jr,un),e(un,Ikr),e(un,WEe),e(WEe,Nkr),e(un,qkr),e(un,HEe),e(HEe,jkr),e(un,Dkr),e(un,UEe),e(UEe,Gkr),e(un,Okr),e(jr,Vkr),e(jr,ce),e(ce,YC),e(YC,JEe),e(JEe,Xkr),e(YC,zkr),e(YC,bK),e(bK,Qkr),e(YC,Wkr),e(ce,Hkr),e(ce,KC),e(KC,YEe),e(YEe,Ukr),e(KC,Jkr),e(KC,vK),e(vK,Ykr),e(KC,Kkr),e(ce,Zkr),e(ce,ZC),e(ZC,KEe),e(KEe,eSr),e(ZC,oSr),e(ZC,FK),e(FK,rSr),e(ZC,tSr),e(ce,aSr),e(ce,e5),e(e5,ZEe),e(ZEe,nSr),e(e5,sSr),e(e5,TK),e(TK,lSr),e(e5,iSr),e(ce,dSr),e(ce,o5),e(o5,e4e),e(e4e,cSr),e(o5,fSr),e(o5,MK),e(MK,mSr),e(o5,gSr),e(ce,hSr),e(ce,r5),e(r5,o4e),e(o4e,pSr),e(r5,_Sr),e(r5,EK),e(EK,uSr),e(r5,bSr),e(ce,vSr),e(ce,t5),e(t5,r4e),e(r4e,FSr),e(t5,TSr),e(t5,CK),e(CK,MSr),e(t5,ESr),e(ce,CSr),e(ce,a5),e(a5,t4e),e(t4e,wSr),e(a5,ASr),e(a5,wK),e(wK,LSr),e(a5,ySr),e(ce,xSr),e(ce,n5),e(n5,a4e),e(a4e,$Sr),e(n5,kSr),e(n5,AK),e(AK,SSr),e(n5,RSr),e(ce,PSr),e(ce,s5),e(s5,n4e),e(n4e,BSr),e(s5,ISr),e(s5,LK),e(LK,NSr),e(s5,qSr),e(ce,jSr),e(ce,l5),e(l5,s4e),e(s4e,DSr),e(l5,GSr),e(l5,yK),e(yK,OSr),e(l5,VSr),e(ce,XSr),e(ce,i5),e(i5,l4e),e(l4e,zSr),e(i5,QSr),e(i5,xK),e(xK,WSr),e(i5,HSr),e(ce,USr),e(ce,d5),e(d5,i4e),e(i4e,JSr),e(d5,YSr),e(d5,$K),e($K,KSr),e(d5,ZSr),e(ce,eRr),e(ce,c5),e(c5,d4e),e(d4e,oRr),e(c5,rRr),e(c5,kK),e(kK,tRr),e(c5,aRr),e(ce,nRr),e(ce,f5),e(f5,c4e),e(c4e,sRr),e(f5,lRr),e(f5,SK),e(SK,iRr),e(f5,dRr),e(ce,cRr),e(ce,m5),e(m5,f4e),e(f4e,fRr),e(m5,mRr),e(m5,RK),e(RK,gRr),e(m5,hRr),e(ce,pRr),e(ce,g5),e(g5,m4e),e(m4e,_Rr),e(g5,uRr),e(g5,PK),e(PK,bRr),e(g5,vRr),e(ce,FRr),e(ce,h5),e(h5,g4e),e(g4e,TRr),e(h5,MRr),e(h5,BK),e(BK,ERr),e(h5,CRr),e(ce,wRr),e(ce,p5),e(p5,h4e),e(h4e,ARr),e(p5,LRr),e(p5,IK),e(IK,yRr),e(p5,xRr),e(ce,$Rr),e(ce,_5),e(_5,p4e),e(p4e,kRr),e(_5,SRr),e(_5,NK),e(NK,RRr),e(_5,PRr),e(jr,BRr),M(u5,jr,null),b(f,NVe,u),b(f,Nc,u),e(Nc,b5),e(b5,_4e),M(Lx,_4e,null),e(Nc,IRr),e(Nc,u4e),e(u4e,NRr),b(f,qVe,u),b(f,mr,u),M(yx,mr,null),e(mr,qRr),e(mr,qc),e(qc,jRr),e(qc,qK),e(qK,DRr),e(qc,GRr),e(qc,jK),e(jK,ORr),e(qc,VRr),e(mr,XRr),e(mr,xx),e(xx,zRr),e(xx,b4e),e(b4e,QRr),e(xx,WRr),e(mr,HRr),e(mr,Ot),M($x,Ot,null),e(Ot,URr),e(Ot,v4e),e(v4e,JRr),e(Ot,YRr),e(Ot,jc),e(jc,KRr),e(jc,F4e),e(F4e,ZRr),e(jc,ePr),e(jc,DK),e(DK,oPr),e(jc,rPr),e(Ot,tPr),M(v5,Ot,null),e(mr,aPr),e(mr,Dr),M(kx,Dr,null),e(Dr,nPr),e(Dr,T4e),e(T4e,sPr),e(Dr,lPr),e(Dr,bn),e(bn,iPr),e(bn,M4e),e(M4e,dPr),e(bn,cPr),e(bn,E4e),e(E4e,fPr),e(bn,mPr),e(bn,C4e),e(C4e,gPr),e(bn,hPr),e(Dr,pPr),e(Dr,w4e),e(w4e,F5),e(F5,A4e),e(A4e,_Pr),e(F5,uPr),e(F5,GK),e(GK,bPr),e(F5,vPr),e(Dr,FPr),M(T5,Dr,null),b(f,jVe,u),b(f,Dc,u),e(Dc,M5),e(M5,L4e),M(Sx,L4e,null),e(Dc,TPr),e(Dc,y4e),e(y4e,MPr),b(f,DVe,u),b(f,gr,u),M(Rx,gr,null),e(gr,EPr),e(gr,Gc),e(Gc,CPr),e(Gc,OK),e(OK,wPr),e(Gc,APr),e(Gc,VK),e(VK,LPr),e(Gc,yPr),e(gr,xPr),e(gr,Px),e(Px,$Pr),e(Px,x4e),e(x4e,kPr),e(Px,SPr),e(gr,RPr),e(gr,Vt),M(Bx,Vt,null),e(Vt,PPr),e(Vt,$4e),e($4e,BPr),e(Vt,IPr),e(Vt,Oc),e(Oc,NPr),e(Oc,k4e),e(k4e,qPr),e(Oc,jPr),e(Oc,XK),e(XK,DPr),e(Oc,GPr),e(Vt,OPr),M(E5,Vt,null),e(gr,VPr),e(gr,Gr),M(Ix,Gr,null),e(Gr,XPr),e(Gr,S4e),e(S4e,zPr),e(Gr,QPr),e(Gr,vn),e(vn,WPr),e(vn,R4e),e(R4e,HPr),e(vn,UPr),e(vn,P4e),e(P4e,JPr),e(vn,YPr),e(vn,B4e),e(B4e,KPr),e(vn,ZPr),e(Gr,eBr),e(Gr,I4e),e(I4e,C5),e(C5,N4e),e(N4e,oBr),e(C5,rBr),e(C5,zK),e(zK,tBr),e(C5,aBr),e(Gr,nBr),M(w5,Gr,null),b(f,GVe,u),b(f,Vc,u),e(Vc,A5),e(A5,q4e),M(Nx,q4e,null),e(Vc,sBr),e(Vc,j4e),e(j4e,lBr),b(f,OVe,u),b(f,hr,u),M(qx,hr,null),e(hr,iBr),e(hr,Xc),e(Xc,dBr),e(Xc,QK),e(QK,cBr),e(Xc,fBr),e(Xc,WK),e(WK,mBr),e(Xc,gBr),e(hr,hBr),e(hr,jx),e(jx,pBr),e(jx,D4e),e(D4e,_Br),e(jx,uBr),e(hr,bBr),e(hr,Xt),M(Dx,Xt,null),e(Xt,vBr),e(Xt,G4e),e(G4e,FBr),e(Xt,TBr),e(Xt,zc),e(zc,MBr),e(zc,O4e),e(O4e,EBr),e(zc,CBr),e(zc,HK),e(HK,wBr),e(zc,ABr),e(Xt,LBr),M(L5,Xt,null),e(hr,yBr),e(hr,Or),M(Gx,Or,null),e(Or,xBr),e(Or,V4e),e(V4e,$Br),e(Or,kBr),e(Or,Fn),e(Fn,SBr),e(Fn,X4e),e(X4e,RBr),e(Fn,PBr),e(Fn,z4e),e(z4e,BBr),e(Fn,IBr),e(Fn,Q4e),e(Q4e,NBr),e(Fn,qBr),e(Or,jBr),e(Or,oe),e(oe,y5),e(y5,W4e),e(W4e,DBr),e(y5,GBr),e(y5,UK),e(UK,OBr),e(y5,VBr),e(oe,XBr),e(oe,x5),e(x5,H4e),e(H4e,zBr),e(x5,QBr),e(x5,JK),e(JK,WBr),e(x5,HBr),e(oe,UBr),e(oe,$5),e($5,U4e),e(U4e,JBr),e($5,YBr),e($5,YK),e(YK,KBr),e($5,ZBr),e(oe,eIr),e(oe,k5),e(k5,J4e),e(J4e,oIr),e(k5,rIr),e(k5,KK),e(KK,tIr),e(k5,aIr),e(oe,nIr),e(oe,S5),e(S5,Y4e),e(Y4e,sIr),e(S5,lIr),e(S5,ZK),e(ZK,iIr),e(S5,dIr),e(oe,cIr),e(oe,R5),e(R5,K4e),e(K4e,fIr),e(R5,mIr),e(R5,eZ),e(eZ,gIr),e(R5,hIr),e(oe,pIr),e(oe,P5),e(P5,Z4e),e(Z4e,_Ir),e(P5,uIr),e(P5,oZ),e(oZ,bIr),e(P5,vIr),e(oe,FIr),e(oe,B5),e(B5,eCe),e(eCe,TIr),e(B5,MIr),e(B5,rZ),e(rZ,EIr),e(B5,CIr),e(oe,wIr),e(oe,I5),e(I5,oCe),e(oCe,AIr),e(I5,LIr),e(I5,tZ),e(tZ,yIr),e(I5,xIr),e(oe,$Ir),e(oe,N5),e(N5,rCe),e(rCe,kIr),e(N5,SIr),e(N5,aZ),e(aZ,RIr),e(N5,PIr),e(oe,BIr),e(oe,q5),e(q5,tCe),e(tCe,IIr),e(q5,NIr),e(q5,nZ),e(nZ,qIr),e(q5,jIr),e(oe,DIr),e(oe,j5),e(j5,aCe),e(aCe,GIr),e(j5,OIr),e(j5,sZ),e(sZ,VIr),e(j5,XIr),e(oe,zIr),e(oe,D5),e(D5,nCe),e(nCe,QIr),e(D5,WIr),e(D5,lZ),e(lZ,HIr),e(D5,UIr),e(oe,JIr),e(oe,G5),e(G5,sCe),e(sCe,YIr),e(G5,KIr),e(G5,iZ),e(iZ,ZIr),e(G5,eNr),e(oe,oNr),e(oe,O5),e(O5,lCe),e(lCe,rNr),e(O5,tNr),e(O5,dZ),e(dZ,aNr),e(O5,nNr),e(oe,sNr),e(oe,V5),e(V5,iCe),e(iCe,lNr),e(V5,iNr),e(V5,cZ),e(cZ,dNr),e(V5,cNr),e(oe,fNr),e(oe,X5),e(X5,dCe),e(dCe,mNr),e(X5,gNr),e(X5,fZ),e(fZ,hNr),e(X5,pNr),e(oe,_Nr),e(oe,z5),e(z5,cCe),e(cCe,uNr),e(z5,bNr),e(z5,mZ),e(mZ,vNr),e(z5,FNr),e(oe,TNr),e(oe,Q5),e(Q5,fCe),e(fCe,MNr),e(Q5,ENr),e(Q5,gZ),e(gZ,CNr),e(Q5,wNr),e(oe,ANr),e(oe,W5),e(W5,mCe),e(mCe,LNr),e(W5,yNr),e(W5,hZ),e(hZ,xNr),e(W5,$Nr),e(oe,kNr),e(oe,H5),e(H5,gCe),e(gCe,SNr),e(H5,RNr),e(H5,pZ),e(pZ,PNr),e(H5,BNr),e(oe,INr),e(oe,U5),e(U5,hCe),e(hCe,NNr),e(U5,qNr),e(U5,_Z),e(_Z,jNr),e(U5,DNr),e(oe,GNr),e(oe,J5),e(J5,pCe),e(pCe,ONr),e(J5,VNr),e(J5,uZ),e(uZ,XNr),e(J5,zNr),e(oe,QNr),e(oe,Y5),e(Y5,_Ce),e(_Ce,WNr),e(Y5,HNr),e(Y5,bZ),e(bZ,UNr),e(Y5,JNr),e(oe,YNr),e(oe,K5),e(K5,uCe),e(uCe,KNr),e(K5,ZNr),e(K5,vZ),e(vZ,eqr),e(K5,oqr),e(oe,rqr),e(oe,Z5),e(Z5,bCe),e(bCe,tqr),e(Z5,aqr),e(Z5,FZ),e(FZ,nqr),e(Z5,sqr),e(oe,lqr),e(oe,e0),e(e0,vCe),e(vCe,iqr),e(e0,dqr),e(e0,TZ),e(TZ,cqr),e(e0,fqr),e(Or,mqr),M(o0,Or,null),b(f,VVe,u),b(f,Qc,u),e(Qc,r0),e(r0,FCe),M(Ox,FCe,null),e(Qc,gqr),e(Qc,TCe),e(TCe,hqr),b(f,XVe,u),b(f,pr,u),M(Vx,pr,null),e(pr,pqr),e(pr,Wc),e(Wc,_qr),e(Wc,MZ),e(MZ,uqr),e(Wc,bqr),e(Wc,EZ),e(EZ,vqr),e(Wc,Fqr),e(pr,Tqr),e(pr,Xx),e(Xx,Mqr),e(Xx,MCe),e(MCe,Eqr),e(Xx,Cqr),e(pr,wqr),e(pr,zt),M(zx,zt,null),e(zt,Aqr),e(zt,ECe),e(ECe,Lqr),e(zt,yqr),e(zt,Hc),e(Hc,xqr),e(Hc,CCe),e(CCe,$qr),e(Hc,kqr),e(Hc,CZ),e(CZ,Sqr),e(Hc,Rqr),e(zt,Pqr),M(t0,zt,null),e(pr,Bqr),e(pr,Vr),M(Qx,Vr,null),e(Vr,Iqr),e(Vr,wCe),e(wCe,Nqr),e(Vr,qqr),e(Vr,Tn),e(Tn,jqr),e(Tn,ACe),e(ACe,Dqr),e(Tn,Gqr),e(Tn,LCe),e(LCe,Oqr),e(Tn,Vqr),e(Tn,yCe),e(yCe,Xqr),e(Tn,zqr),e(Vr,Qqr),e(Vr,xe),e(xe,a0),e(a0,xCe),e(xCe,Wqr),e(a0,Hqr),e(a0,wZ),e(wZ,Uqr),e(a0,Jqr),e(xe,Yqr),e(xe,n0),e(n0,$Ce),e($Ce,Kqr),e(n0,Zqr),e(n0,AZ),e(AZ,ejr),e(n0,ojr),e(xe,rjr),e(xe,s0),e(s0,kCe),e(kCe,tjr),e(s0,ajr),e(s0,LZ),e(LZ,njr),e(s0,sjr),e(xe,ljr),e(xe,l0),e(l0,SCe),e(SCe,ijr),e(l0,djr),e(l0,yZ),e(yZ,cjr),e(l0,fjr),e(xe,mjr),e(xe,i0),e(i0,RCe),e(RCe,gjr),e(i0,hjr),e(i0,xZ),e(xZ,pjr),e(i0,_jr),e(xe,ujr),e(xe,d0),e(d0,PCe),e(PCe,bjr),e(d0,vjr),e(d0,$Z),e($Z,Fjr),e(d0,Tjr),e(xe,Mjr),e(xe,c0),e(c0,BCe),e(BCe,Ejr),e(c0,Cjr),e(c0,kZ),e(kZ,wjr),e(c0,Ajr),e(xe,Ljr),e(xe,f0),e(f0,ICe),e(ICe,yjr),e(f0,xjr),e(f0,SZ),e(SZ,$jr),e(f0,kjr),e(xe,Sjr),e(xe,m0),e(m0,NCe),e(NCe,Rjr),e(m0,Pjr),e(m0,RZ),e(RZ,Bjr),e(m0,Ijr),e(xe,Njr),e(xe,g0),e(g0,qCe),e(qCe,qjr),e(g0,jjr),e(g0,PZ),e(PZ,Djr),e(g0,Gjr),e(Vr,Ojr),M(h0,Vr,null),b(f,zVe,u),b(f,Uc,u),e(Uc,p0),e(p0,jCe),M(Wx,jCe,null),e(Uc,Vjr),e(Uc,DCe),e(DCe,Xjr),b(f,QVe,u),b(f,_r,u),M(Hx,_r,null),e(_r,zjr),e(_r,Jc),e(Jc,Qjr),e(Jc,BZ),e(BZ,Wjr),e(Jc,Hjr),e(Jc,IZ),e(IZ,Ujr),e(Jc,Jjr),e(_r,Yjr),e(_r,Ux),e(Ux,Kjr),e(Ux,GCe),e(GCe,Zjr),e(Ux,eDr),e(_r,oDr),e(_r,Qt),M(Jx,Qt,null),e(Qt,rDr),e(Qt,OCe),e(OCe,tDr),e(Qt,aDr),e(Qt,Yc),e(Yc,nDr),e(Yc,VCe),e(VCe,sDr),e(Yc,lDr),e(Yc,NZ),e(NZ,iDr),e(Yc,dDr),e(Qt,cDr),M(_0,Qt,null),e(_r,fDr),e(_r,Xr),M(Yx,Xr,null),e(Xr,mDr),e(Xr,XCe),e(XCe,gDr),e(Xr,hDr),e(Xr,Mn),e(Mn,pDr),e(Mn,zCe),e(zCe,_Dr),e(Mn,uDr),e(Mn,QCe),e(QCe,bDr),e(Mn,vDr),e(Mn,WCe),e(WCe,FDr),e(Mn,TDr),e(Xr,MDr),e(Xr,Ee),e(Ee,u0),e(u0,HCe),e(HCe,EDr),e(u0,CDr),e(u0,qZ),e(qZ,wDr),e(u0,ADr),e(Ee,LDr),e(Ee,b0),e(b0,UCe),e(UCe,yDr),e(b0,xDr),e(b0,jZ),e(jZ,$Dr),e(b0,kDr),e(Ee,SDr),e(Ee,v0),e(v0,JCe),e(JCe,RDr),e(v0,PDr),e(v0,DZ),e(DZ,BDr),e(v0,IDr),e(Ee,NDr),e(Ee,F0),e(F0,YCe),e(YCe,qDr),e(F0,jDr),e(F0,GZ),e(GZ,DDr),e(F0,GDr),e(Ee,ODr),e(Ee,T0),e(T0,KCe),e(KCe,VDr),e(T0,XDr),e(T0,OZ),e(OZ,zDr),e(T0,QDr),e(Ee,WDr),e(Ee,M0),e(M0,ZCe),e(ZCe,HDr),e(M0,UDr),e(M0,VZ),e(VZ,JDr),e(M0,YDr),e(Ee,KDr),e(Ee,E0),e(E0,e5e),e(e5e,ZDr),e(E0,eGr),e(E0,XZ),e(XZ,oGr),e(E0,rGr),e(Ee,tGr),e(Ee,C0),e(C0,o5e),e(o5e,aGr),e(C0,nGr),e(C0,zZ),e(zZ,sGr),e(C0,lGr),e(Ee,iGr),e(Ee,w0),e(w0,r5e),e(r5e,dGr),e(w0,cGr),e(w0,QZ),e(QZ,fGr),e(w0,mGr),e(Ee,gGr),e(Ee,A0),e(A0,t5e),e(t5e,hGr),e(A0,pGr),e(A0,WZ),e(WZ,_Gr),e(A0,uGr),e(Ee,bGr),e(Ee,L0),e(L0,a5e),e(a5e,vGr),e(L0,FGr),e(L0,HZ),e(HZ,TGr),e(L0,MGr),e(Ee,EGr),e(Ee,y0),e(y0,n5e),e(n5e,CGr),e(y0,wGr),e(y0,UZ),e(UZ,AGr),e(y0,LGr),e(Ee,yGr),e(Ee,x0),e(x0,s5e),e(s5e,xGr),e(x0,$Gr),e(x0,JZ),e(JZ,kGr),e(x0,SGr),e(Xr,RGr),M($0,Xr,null),b(f,WVe,u),b(f,Kc,u),e(Kc,k0),e(k0,l5e),M(Kx,l5e,null),e(Kc,PGr),e(Kc,i5e),e(i5e,BGr),b(f,HVe,u),b(f,ur,u),M(Zx,ur,null),e(ur,IGr),e(ur,Zc),e(Zc,NGr),e(Zc,YZ),e(YZ,qGr),e(Zc,jGr),e(Zc,KZ),e(KZ,DGr),e(Zc,GGr),e(ur,OGr),e(ur,e$),e(e$,VGr),e(e$,d5e),e(d5e,XGr),e(e$,zGr),e(ur,QGr),e(ur,Wt),M(o$,Wt,null),e(Wt,WGr),e(Wt,c5e),e(c5e,HGr),e(Wt,UGr),e(Wt,ef),e(ef,JGr),e(ef,f5e),e(f5e,YGr),e(ef,KGr),e(ef,ZZ),e(ZZ,ZGr),e(ef,eOr),e(Wt,oOr),M(S0,Wt,null),e(ur,rOr),e(ur,zr),M(r$,zr,null),e(zr,tOr),e(zr,m5e),e(m5e,aOr),e(zr,nOr),e(zr,En),e(En,sOr),e(En,g5e),e(g5e,lOr),e(En,iOr),e(En,h5e),e(h5e,dOr),e(En,cOr),e(En,p5e),e(p5e,fOr),e(En,mOr),e(zr,gOr),e(zr,$e),e($e,R0),e(R0,_5e),e(_5e,hOr),e(R0,pOr),e(R0,eee),e(eee,_Or),e(R0,uOr),e($e,bOr),e($e,P0),e(P0,u5e),e(u5e,vOr),e(P0,FOr),e(P0,oee),e(oee,TOr),e(P0,MOr),e($e,EOr),e($e,B0),e(B0,b5e),e(b5e,COr),e(B0,wOr),e(B0,ree),e(ree,AOr),e(B0,LOr),e($e,yOr),e($e,I0),e(I0,v5e),e(v5e,xOr),e(I0,$Or),e(I0,tee),e(tee,kOr),e(I0,SOr),e($e,ROr),e($e,N0),e(N0,F5e),e(F5e,POr),e(N0,BOr),e(N0,aee),e(aee,IOr),e(N0,NOr),e($e,qOr),e($e,q0),e(q0,T5e),e(T5e,jOr),e(q0,DOr),e(q0,nee),e(nee,GOr),e(q0,OOr),e($e,VOr),e($e,j0),e(j0,M5e),e(M5e,XOr),e(j0,zOr),e(j0,see),e(see,QOr),e(j0,WOr),e($e,HOr),e($e,D0),e(D0,E5e),e(E5e,UOr),e(D0,JOr),e(D0,lee),e(lee,YOr),e(D0,KOr),e($e,ZOr),e($e,G0),e(G0,C5e),e(C5e,eVr),e(G0,oVr),e(G0,iee),e(iee,rVr),e(G0,tVr),e($e,aVr),e($e,O0),e(O0,w5e),e(w5e,nVr),e(O0,sVr),e(O0,dee),e(dee,lVr),e(O0,iVr),e(zr,dVr),M(V0,zr,null),b(f,UVe,u),b(f,of,u),e(of,X0),e(X0,A5e),M(t$,A5e,null),e(of,cVr),e(of,L5e),e(L5e,fVr),b(f,JVe,u),b(f,br,u),M(a$,br,null),e(br,mVr),e(br,rf),e(rf,gVr),e(rf,cee),e(cee,hVr),e(rf,pVr),e(rf,fee),e(fee,_Vr),e(rf,uVr),e(br,bVr),e(br,n$),e(n$,vVr),e(n$,y5e),e(y5e,FVr),e(n$,TVr),e(br,MVr),e(br,Ht),M(s$,Ht,null),e(Ht,EVr),e(Ht,x5e),e(x5e,CVr),e(Ht,wVr),e(Ht,tf),e(tf,AVr),e(tf,$5e),e($5e,LVr),e(tf,yVr),e(tf,mee),e(mee,xVr),e(tf,$Vr),e(Ht,kVr),M(z0,Ht,null),e(br,SVr),e(br,Qr),M(l$,Qr,null),e(Qr,RVr),e(Qr,k5e),e(k5e,PVr),e(Qr,BVr),e(Qr,Cn),e(Cn,IVr),e(Cn,S5e),e(S5e,NVr),e(Cn,qVr),e(Cn,R5e),e(R5e,jVr),e(Cn,DVr),e(Cn,P5e),e(P5e,GVr),e(Cn,OVr),e(Qr,VVr),e(Qr,ke),e(ke,Q0),e(Q0,B5e),e(B5e,XVr),e(Q0,zVr),e(Q0,gee),e(gee,QVr),e(Q0,WVr),e(ke,HVr),e(ke,W0),e(W0,I5e),e(I5e,UVr),e(W0,JVr),e(W0,hee),e(hee,YVr),e(W0,KVr),e(ke,ZVr),e(ke,H0),e(H0,N5e),e(N5e,eXr),e(H0,oXr),e(H0,pee),e(pee,rXr),e(H0,tXr),e(ke,aXr),e(ke,U0),e(U0,q5e),e(q5e,nXr),e(U0,sXr),e(U0,_ee),e(_ee,lXr),e(U0,iXr),e(ke,dXr),e(ke,J0),e(J0,j5e),e(j5e,cXr),e(J0,fXr),e(J0,uee),e(uee,mXr),e(J0,gXr),e(ke,hXr),e(ke,Y0),e(Y0,D5e),e(D5e,pXr),e(Y0,_Xr),e(Y0,bee),e(bee,uXr),e(Y0,bXr),e(ke,vXr),e(ke,K0),e(K0,G5e),e(G5e,FXr),e(K0,TXr),e(K0,vee),e(vee,MXr),e(K0,EXr),e(ke,CXr),e(ke,Z0),e(Z0,O5e),e(O5e,wXr),e(Z0,AXr),e(Z0,Fee),e(Fee,LXr),e(Z0,yXr),e(ke,xXr),e(ke,ew),e(ew,V5e),e(V5e,$Xr),e(ew,kXr),e(ew,Tee),e(Tee,SXr),e(ew,RXr),e(ke,PXr),e(ke,ow),e(ow,X5e),e(X5e,BXr),e(ow,IXr),e(ow,Mee),e(Mee,NXr),e(ow,qXr),e(Qr,jXr),M(rw,Qr,null),b(f,YVe,u),b(f,af,u),e(af,tw),e(tw,z5e),M(i$,z5e,null),e(af,DXr),e(af,Q5e),e(Q5e,GXr),b(f,KVe,u),b(f,vr,u),M(d$,vr,null),e(vr,OXr),e(vr,nf),e(nf,VXr),e(nf,Eee),e(Eee,XXr),e(nf,zXr),e(nf,Cee),e(Cee,QXr),e(nf,WXr),e(vr,HXr),e(vr,c$),e(c$,UXr),e(c$,W5e),e(W5e,JXr),e(c$,YXr),e(vr,KXr),e(vr,Ut),M(f$,Ut,null),e(Ut,ZXr),e(Ut,H5e),e(H5e,ezr),e(Ut,ozr),e(Ut,sf),e(sf,rzr),e(sf,U5e),e(U5e,tzr),e(sf,azr),e(sf,wee),e(wee,nzr),e(sf,szr),e(Ut,lzr),M(aw,Ut,null),e(vr,izr),e(vr,Wr),M(m$,Wr,null),e(Wr,dzr),e(Wr,J5e),e(J5e,czr),e(Wr,fzr),e(Wr,wn),e(wn,mzr),e(wn,Y5e),e(Y5e,gzr),e(wn,hzr),e(wn,K5e),e(K5e,pzr),e(wn,_zr),e(wn,Z5e),e(Z5e,uzr),e(wn,bzr),e(Wr,vzr),e(Wr,Se),e(Se,nw),e(nw,e0e),e(e0e,Fzr),e(nw,Tzr),e(nw,Aee),e(Aee,Mzr),e(nw,Ezr),e(Se,Czr),e(Se,sw),e(sw,o0e),e(o0e,wzr),e(sw,Azr),e(sw,Lee),e(Lee,Lzr),e(sw,yzr),e(Se,xzr),e(Se,lw),e(lw,r0e),e(r0e,$zr),e(lw,kzr),e(lw,yee),e(yee,Szr),e(lw,Rzr),e(Se,Pzr),e(Se,iw),e(iw,t0e),e(t0e,Bzr),e(iw,Izr),e(iw,xee),e(xee,Nzr),e(iw,qzr),e(Se,jzr),e(Se,dw),e(dw,a0e),e(a0e,Dzr),e(dw,Gzr),e(dw,$ee),e($ee,Ozr),e(dw,Vzr),e(Se,Xzr),e(Se,cw),e(cw,n0e),e(n0e,zzr),e(cw,Qzr),e(cw,kee),e(kee,Wzr),e(cw,Hzr),e(Se,Uzr),e(Se,fw),e(fw,s0e),e(s0e,Jzr),e(fw,Yzr),e(fw,See),e(See,Kzr),e(fw,Zzr),e(Se,eQr),e(Se,mw),e(mw,l0e),e(l0e,oQr),e(mw,rQr),e(mw,Ree),e(Ree,tQr),e(mw,aQr),e(Se,nQr),e(Se,gw),e(gw,i0e),e(i0e,sQr),e(gw,lQr),e(gw,Pee),e(Pee,iQr),e(gw,dQr),e(Se,cQr),e(Se,hw),e(hw,d0e),e(d0e,fQr),e(hw,mQr),e(hw,Bee),e(Bee,gQr),e(hw,hQr),e(Wr,pQr),M(pw,Wr,null),b(f,ZVe,u),b(f,lf,u),e(lf,_w),e(_w,c0e),M(g$,c0e,null),e(lf,_Qr),e(lf,f0e),e(f0e,uQr),b(f,eXe,u),b(f,Fr,u),M(h$,Fr,null),e(Fr,bQr),e(Fr,df),e(df,vQr),e(df,Iee),e(Iee,FQr),e(df,TQr),e(df,Nee),e(Nee,MQr),e(df,EQr),e(Fr,CQr),e(Fr,p$),e(p$,wQr),e(p$,m0e),e(m0e,AQr),e(p$,LQr),e(Fr,yQr),e(Fr,Jt),M(_$,Jt,null),e(Jt,xQr),e(Jt,g0e),e(g0e,$Qr),e(Jt,kQr),e(Jt,cf),e(cf,SQr),e(cf,h0e),e(h0e,RQr),e(cf,PQr),e(cf,qee),e(qee,BQr),e(cf,IQr),e(Jt,NQr),M(uw,Jt,null),e(Fr,qQr),e(Fr,Hr),M(u$,Hr,null),e(Hr,jQr),e(Hr,p0e),e(p0e,DQr),e(Hr,GQr),e(Hr,An),e(An,OQr),e(An,_0e),e(_0e,VQr),e(An,XQr),e(An,u0e),e(u0e,zQr),e(An,QQr),e(An,b0e),e(b0e,WQr),e(An,HQr),e(Hr,UQr),e(Hr,Re),e(Re,bw),e(bw,v0e),e(v0e,JQr),e(bw,YQr),e(bw,jee),e(jee,KQr),e(bw,ZQr),e(Re,eWr),e(Re,vw),e(vw,F0e),e(F0e,oWr),e(vw,rWr),e(vw,Dee),e(Dee,tWr),e(vw,aWr),e(Re,nWr),e(Re,Fw),e(Fw,T0e),e(T0e,sWr),e(Fw,lWr),e(Fw,Gee),e(Gee,iWr),e(Fw,dWr),e(Re,cWr),e(Re,Tw),e(Tw,M0e),e(M0e,fWr),e(Tw,mWr),e(Tw,Oee),e(Oee,gWr),e(Tw,hWr),e(Re,pWr),e(Re,Mw),e(Mw,E0e),e(E0e,_Wr),e(Mw,uWr),e(Mw,Vee),e(Vee,bWr),e(Mw,vWr),e(Re,FWr),e(Re,Ew),e(Ew,C0e),e(C0e,TWr),e(Ew,MWr),e(Ew,Xee),e(Xee,EWr),e(Ew,CWr),e(Re,wWr),e(Re,Cw),e(Cw,w0e),e(w0e,AWr),e(Cw,LWr),e(Cw,zee),e(zee,yWr),e(Cw,xWr),e(Re,$Wr),e(Re,ww),e(ww,A0e),e(A0e,kWr),e(ww,SWr),e(ww,Qee),e(Qee,RWr),e(ww,PWr),e(Re,BWr),e(Re,Aw),e(Aw,L0e),e(L0e,IWr),e(Aw,NWr),e(Aw,Wee),e(Wee,qWr),e(Aw,jWr),e(Re,DWr),e(Re,Lw),e(Lw,y0e),e(y0e,GWr),e(Lw,OWr),e(Lw,Hee),e(Hee,VWr),e(Lw,XWr),e(Hr,zWr),M(yw,Hr,null),b(f,oXe,u),b(f,ff,u),e(ff,xw),e(xw,x0e),M(b$,x0e,null),e(ff,QWr),e(ff,$0e),e($0e,WWr),b(f,rXe,u),b(f,Tr,u),M(v$,Tr,null),e(Tr,HWr),e(Tr,mf),e(mf,UWr),e(mf,Uee),e(Uee,JWr),e(mf,YWr),e(mf,Jee),e(Jee,KWr),e(mf,ZWr),e(Tr,eHr),e(Tr,F$),e(F$,oHr),e(F$,k0e),e(k0e,rHr),e(F$,tHr),e(Tr,aHr),e(Tr,Yt),M(T$,Yt,null),e(Yt,nHr),e(Yt,S0e),e(S0e,sHr),e(Yt,lHr),e(Yt,gf),e(gf,iHr),e(gf,R0e),e(R0e,dHr),e(gf,cHr),e(gf,Yee),e(Yee,fHr),e(gf,mHr),e(Yt,gHr),M($w,Yt,null),e(Tr,hHr),e(Tr,Ur),M(M$,Ur,null),e(Ur,pHr),e(Ur,P0e),e(P0e,_Hr),e(Ur,uHr),e(Ur,Ln),e(Ln,bHr),e(Ln,B0e),e(B0e,vHr),e(Ln,FHr),e(Ln,I0e),e(I0e,THr),e(Ln,MHr),e(Ln,N0e),e(N0e,EHr),e(Ln,CHr),e(Ur,wHr),e(Ur,Ve),e(Ve,kw),e(kw,q0e),e(q0e,AHr),e(kw,LHr),e(kw,Kee),e(Kee,yHr),e(kw,xHr),e(Ve,$Hr),e(Ve,Sw),e(Sw,j0e),e(j0e,kHr),e(Sw,SHr),e(Sw,Zee),e(Zee,RHr),e(Sw,PHr),e(Ve,BHr),e(Ve,Rw),e(Rw,D0e),e(D0e,IHr),e(Rw,NHr),e(Rw,eoe),e(eoe,qHr),e(Rw,jHr),e(Ve,DHr),e(Ve,Pw),e(Pw,G0e),e(G0e,GHr),e(Pw,OHr),e(Pw,ooe),e(ooe,VHr),e(Pw,XHr),e(Ve,zHr),e(Ve,Bw),e(Bw,O0e),e(O0e,QHr),e(Bw,WHr),e(Bw,roe),e(roe,HHr),e(Bw,UHr),e(Ve,JHr),e(Ve,Iw),e(Iw,V0e),e(V0e,YHr),e(Iw,KHr),e(Iw,toe),e(toe,ZHr),e(Iw,eUr),e(Ve,oUr),e(Ve,Nw),e(Nw,X0e),e(X0e,rUr),e(Nw,tUr),e(Nw,aoe),e(aoe,aUr),e(Nw,nUr),e(Ve,sUr),e(Ve,qw),e(qw,z0e),e(z0e,lUr),e(qw,iUr),e(qw,noe),e(noe,dUr),e(qw,cUr),e(Ur,fUr),M(jw,Ur,null),b(f,tXe,u),b(f,hf,u),e(hf,Dw),e(Dw,Q0e),M(E$,Q0e,null),e(hf,mUr),e(hf,W0e),e(W0e,gUr),b(f,aXe,u),b(f,Mr,u),M(C$,Mr,null),e(Mr,hUr),e(Mr,pf),e(pf,pUr),e(pf,soe),e(soe,_Ur),e(pf,uUr),e(pf,loe),e(loe,bUr),e(pf,vUr),e(Mr,FUr),e(Mr,w$),e(w$,TUr),e(w$,H0e),e(H0e,MUr),e(w$,EUr),e(Mr,CUr),e(Mr,Kt),M(A$,Kt,null),e(Kt,wUr),e(Kt,U0e),e(U0e,AUr),e(Kt,LUr),e(Kt,_f),e(_f,yUr),e(_f,J0e),e(J0e,xUr),e(_f,$Ur),e(_f,ioe),e(ioe,kUr),e(_f,SUr),e(Kt,RUr),M(Gw,Kt,null),e(Mr,PUr),e(Mr,Jr),M(L$,Jr,null),e(Jr,BUr),e(Jr,Y0e),e(Y0e,IUr),e(Jr,NUr),e(Jr,yn),e(yn,qUr),e(yn,K0e),e(K0e,jUr),e(yn,DUr),e(yn,Z0e),e(Z0e,GUr),e(yn,OUr),e(yn,ewe),e(ewe,VUr),e(yn,XUr),e(Jr,zUr),e(Jr,Xe),e(Xe,Ow),e(Ow,owe),e(owe,QUr),e(Ow,WUr),e(Ow,doe),e(doe,HUr),e(Ow,UUr),e(Xe,JUr),e(Xe,Vw),e(Vw,rwe),e(rwe,YUr),e(Vw,KUr),e(Vw,coe),e(coe,ZUr),e(Vw,eJr),e(Xe,oJr),e(Xe,Xw),e(Xw,twe),e(twe,rJr),e(Xw,tJr),e(Xw,foe),e(foe,aJr),e(Xw,nJr),e(Xe,sJr),e(Xe,zw),e(zw,awe),e(awe,lJr),e(zw,iJr),e(zw,moe),e(moe,dJr),e(zw,cJr),e(Xe,fJr),e(Xe,Qw),e(Qw,nwe),e(nwe,mJr),e(Qw,gJr),e(Qw,goe),e(goe,hJr),e(Qw,pJr),e(Xe,_Jr),e(Xe,Ww),e(Ww,swe),e(swe,uJr),e(Ww,bJr),e(Ww,hoe),e(hoe,vJr),e(Ww,FJr),e(Xe,TJr),e(Xe,Hw),e(Hw,lwe),e(lwe,MJr),e(Hw,EJr),e(Hw,poe),e(poe,CJr),e(Hw,wJr),e(Xe,AJr),e(Xe,Uw),e(Uw,iwe),e(iwe,LJr),e(Uw,yJr),e(Uw,_oe),e(_oe,xJr),e(Uw,$Jr),e(Jr,kJr),M(Jw,Jr,null),b(f,nXe,u),b(f,uf,u),e(uf,Yw),e(Yw,dwe),M(y$,dwe,null),e(uf,SJr),e(uf,cwe),e(cwe,RJr),b(f,sXe,u),b(f,Er,u),M(x$,Er,null),e(Er,PJr),e(Er,bf),e(bf,BJr),e(bf,uoe),e(uoe,IJr),e(bf,NJr),e(bf,boe),e(boe,qJr),e(bf,jJr),e(Er,DJr),e(Er,$$),e($$,GJr),e($$,fwe),e(fwe,OJr),e($$,VJr),e(Er,XJr),e(Er,Zt),M(k$,Zt,null),e(Zt,zJr),e(Zt,mwe),e(mwe,QJr),e(Zt,WJr),e(Zt,vf),e(vf,HJr),e(vf,gwe),e(gwe,UJr),e(vf,JJr),e(vf,voe),e(voe,YJr),e(vf,KJr),e(Zt,ZJr),M(Kw,Zt,null),e(Er,eYr),e(Er,Yr),M(S$,Yr,null),e(Yr,oYr),e(Yr,hwe),e(hwe,rYr),e(Yr,tYr),e(Yr,xn),e(xn,aYr),e(xn,pwe),e(pwe,nYr),e(xn,sYr),e(xn,_we),e(_we,lYr),e(xn,iYr),e(xn,uwe),e(uwe,dYr),e(xn,cYr),e(Yr,fYr),e(Yr,bwe),e(bwe,Zw),e(Zw,vwe),e(vwe,mYr),e(Zw,gYr),e(Zw,Foe),e(Foe,hYr),e(Zw,pYr),e(Yr,_Yr),M(eA,Yr,null),b(f,lXe,u),b(f,Ff,u),e(Ff,oA),e(oA,Fwe),M(R$,Fwe,null),e(Ff,uYr),e(Ff,Twe),e(Twe,bYr),b(f,iXe,u),b(f,Cr,u),M(P$,Cr,null),e(Cr,vYr),e(Cr,Tf),e(Tf,FYr),e(Tf,Toe),e(Toe,TYr),e(Tf,MYr),e(Tf,Moe),e(Moe,EYr),e(Tf,CYr),e(Cr,wYr),e(Cr,B$),e(B$,AYr),e(B$,Mwe),e(Mwe,LYr),e(B$,yYr),e(Cr,xYr),e(Cr,ea),M(I$,ea,null),e(ea,$Yr),e(ea,Ewe),e(Ewe,kYr),e(ea,SYr),e(ea,Mf),e(Mf,RYr),e(Mf,Cwe),e(Cwe,PYr),e(Mf,BYr),e(Mf,Eoe),e(Eoe,IYr),e(Mf,NYr),e(ea,qYr),M(rA,ea,null),e(Cr,jYr),e(Cr,Kr),M(N$,Kr,null),e(Kr,DYr),e(Kr,wwe),e(wwe,GYr),e(Kr,OYr),e(Kr,$n),e($n,VYr),e($n,Awe),e(Awe,XYr),e($n,zYr),e($n,Lwe),e(Lwe,QYr),e($n,WYr),e($n,ywe),e(ywe,HYr),e($n,UYr),e(Kr,JYr),e(Kr,q$),e(q$,tA),e(tA,xwe),e(xwe,YYr),e(tA,KYr),e(tA,Coe),e(Coe,ZYr),e(tA,eKr),e(q$,oKr),e(q$,aA),e(aA,$we),e($we,rKr),e(aA,tKr),e(aA,woe),e(woe,aKr),e(aA,nKr),e(Kr,sKr),M(nA,Kr,null),b(f,dXe,u),b(f,Ef,u),e(Ef,sA),e(sA,kwe),M(j$,kwe,null),e(Ef,lKr),e(Ef,Swe),e(Swe,iKr),b(f,cXe,u),b(f,wr,u),M(D$,wr,null),e(wr,dKr),e(wr,Cf),e(Cf,cKr),e(Cf,Aoe),e(Aoe,fKr),e(Cf,mKr),e(Cf,Loe),e(Loe,gKr),e(Cf,hKr),e(wr,pKr),e(wr,G$),e(G$,_Kr),e(G$,Rwe),e(Rwe,uKr),e(G$,bKr),e(wr,vKr),e(wr,oa),M(O$,oa,null),e(oa,FKr),e(oa,Pwe),e(Pwe,TKr),e(oa,MKr),e(oa,wf),e(wf,EKr),e(wf,Bwe),e(Bwe,CKr),e(wf,wKr),e(wf,yoe),e(yoe,AKr),e(wf,LKr),e(oa,yKr),M(lA,oa,null),e(wr,xKr),e(wr,Zr),M(V$,Zr,null),e(Zr,$Kr),e(Zr,Iwe),e(Iwe,kKr),e(Zr,SKr),e(Zr,kn),e(kn,RKr),e(kn,Nwe),e(Nwe,PKr),e(kn,BKr),e(kn,qwe),e(qwe,IKr),e(kn,NKr),e(kn,jwe),e(jwe,qKr),e(kn,jKr),e(Zr,DKr),e(Zr,Dwe),e(Dwe,iA),e(iA,Gwe),e(Gwe,GKr),e(iA,OKr),e(iA,xoe),e(xoe,VKr),e(iA,XKr),e(Zr,zKr),M(dA,Zr,null),fXe=!0},p(f,[u]){const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),Pf.$set(X$);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Vg.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),wh.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),lp.$set(Xwe);const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),ip.$set(z$);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),xp.$set(zwe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),$p.$set(Sn);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),Rp.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),Pu.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),Iu.$set(Hwe);const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),y1.$set(Q$);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),$1.$set(Uwe);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),_3.$set(W$);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),b3.$set(Jwe);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),t2.$set(H$);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),n2.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),C2.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),A2.$set(Zwe);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),Eb.$set(Af);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),wb.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),tv.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),nv.$set(rAe);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),gv.$set(U$);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),pv.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),Zv.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),oF.$set(nAe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),XF.$set(rt);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),QF.$set(J$);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),UF.$set(sAe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),YF.$set(Y$);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),fT.$set(lAe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),gT.$set(tt);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),_T.$set(iAe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),bT.$set(Lf);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),TT.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),ET.$set(cAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),PT.$set(L);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),IT.$set(cA);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),VT.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),zT.$set(mAe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),t7.$set(fA);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),n7.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),d7.$set(hAe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),f7.$set(mA);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),b7.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),F7.$set(_Ae);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),w7.$set(gA);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),L7.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),k7.$set(bAe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),R7.$set(hA);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),I7.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),q7.$set(FAe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),X7.$set(pA);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),Q7.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),U7.$set(MAe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),Y7.$set(_A);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),XM.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),QM.$set(CAe);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),_E.$set(uA);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),bE.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),SE.$set(AAe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),PE.$set(bA);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),jE.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),GE.$set(yAe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),i4.$set(vA);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),c4.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),T4.$set($Ae);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),E4.$set(FA);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),J4.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),K4.$set(SAe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),_C.$set(TA);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),bC.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),TC.$set(PAe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),EC.$set(MA);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),wC.$set(BAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),LC.$set(IAe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),HC.$set(EA);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),JC.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),u5.$set(qAe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),v5.$set(CA);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),T5.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),E5.$set(DAe);const wA={};u&2&&(wA.$$scope={dirty:u,ctx:f}),w5.$set(wA);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),L5.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),o0.$set(OAe);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),t0.$set(AA);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),h0.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),_0.$set(XAe);const LA={};u&2&&(LA.$$scope={dirty:u,ctx:f}),$0.$set(LA);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),S0.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),V0.$set(QAe);const yA={};u&2&&(yA.$$scope={dirty:u,ctx:f}),z0.$set(yA);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),rw.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),aw.$set(HAe);const xA={};u&2&&(xA.$$scope={dirty:u,ctx:f}),pw.$set(xA);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),uw.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),yw.$set(JAe);const $A={};u&2&&($A.$$scope={dirty:u,ctx:f}),$w.$set($A);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),jw.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),Gw.$set(KAe);const kA={};u&2&&(kA.$$scope={dirty:u,ctx:f}),Jw.$set(kA);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),Kw.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),eA.$set(e6e);const SA={};u&2&&(SA.$$scope={dirty:u,ctx:f}),rA.$set(SA);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),nA.$set(o6e);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),lA.$set(r6e);const RA={};u&2&&(RA.$$scope={dirty:u,ctx:f}),dA.$set(RA)},i(f){fXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(Pf.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(Vg.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(QL.$$.fragment,f),E(wh.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(KL.$$.fragment,f),E(lp.$$.fragment,f),E(ip.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ay.$$.fragment,f),E(xp.$$.fragment,f),E($p.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Rp.$$.fragment,f),E(cy.$$.fragment,f),E(Pu.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(Iu.$$.fragment,f),E(py.$$.fragment,f),E(y1.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E($1.$$.fragment,f),E(Fy.$$.fragment,f),E(_3.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(b3.$$.fragment,f),E(wy.$$.fragment,f),E(t2.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(n2.$$.fragment,f),E($y.$$.fragment,f),E(C2.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(A2.$$.fragment,f),E(By.$$.fragment,f),E(Eb.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(wb.$$.fragment,f),E(Dy.$$.fragment,f),E(tv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(nv.$$.fragment,f),E(zy.$$.fragment,f),E(gv.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(pv.$$.fragment,f),E(Jy.$$.fragment,f),E(Zv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(oF.$$.fragment,f),E(o8.$$.fragment,f),E(XF.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(QF.$$.fragment,f),E(s8.$$.fragment,f),E(UF.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(YF.$$.fragment,f),E(f8.$$.fragment,f),E(fT.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(gT.$$.fragment,f),E(_8.$$.fragment,f),E(_T.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(bT.$$.fragment,f),E(T8.$$.fragment,f),E(TT.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(ET.$$.fragment,f),E(A8.$$.fragment,f),E(PT.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(IT.$$.fragment,f),E(k8.$$.fragment,f),E(VT.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(zT.$$.fragment,f),E(I8.$$.fragment,f),E(t7.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(n7.$$.fragment,f),E(G8.$$.fragment,f),E(d7.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(f7.$$.fragment,f),E(W8.$$.fragment,f),E(b7.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(F7.$$.fragment,f),E(K8.$$.fragment,f),E(w7.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(L7.$$.fragment,f),E(t9.$$.fragment,f),E(k7.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(R7.$$.fragment,f),E(d9.$$.fragment,f),E(I7.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(q7.$$.fragment,f),E(h9.$$.fragment,f),E(X7.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(Q7.$$.fragment,f),E(v9.$$.fragment,f),E(U7.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(Y7.$$.fragment,f),E(C9.$$.fragment,f),E(XM.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(QM.$$.fragment,f),E(x9.$$.fragment,f),E(_E.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(bE.$$.fragment,f),E(P9.$$.fragment,f),E(SE.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(PE.$$.fragment,f),E(j9.$$.fragment,f),E(jE.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(GE.$$.fragment,f),E(X9.$$.fragment,f),E(i4.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(c4.$$.fragment,f),E(U9.$$.fragment,f),E(T4.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(E4.$$.fragment,f),E(ex.$$.fragment,f),E(J4.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(K4.$$.fragment,f),E(nx.$$.fragment,f),E(_C.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(bC.$$.fragment,f),E(cx.$$.fragment,f),E(TC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(EC.$$.fragment,f),E(_x.$$.fragment,f),E(wC.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(LC.$$.fragment,f),E(Tx.$$.fragment,f),E(HC.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(JC.$$.fragment,f),E(Ax.$$.fragment,f),E(u5.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(v5.$$.fragment,f),E(kx.$$.fragment,f),E(T5.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(E5.$$.fragment,f),E(Ix.$$.fragment,f),E(w5.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(L5.$$.fragment,f),E(Gx.$$.fragment,f),E(o0.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(t0.$$.fragment,f),E(Qx.$$.fragment,f),E(h0.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(_0.$$.fragment,f),E(Yx.$$.fragment,f),E($0.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(S0.$$.fragment,f),E(r$.$$.fragment,f),E(V0.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(z0.$$.fragment,f),E(l$.$$.fragment,f),E(rw.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(aw.$$.fragment,f),E(m$.$$.fragment,f),E(pw.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(uw.$$.fragment,f),E(u$.$$.fragment,f),E(yw.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E($w.$$.fragment,f),E(M$.$$.fragment,f),E(jw.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(Gw.$$.fragment,f),E(L$.$$.fragment,f),E(Jw.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(Kw.$$.fragment,f),E(S$.$$.fragment,f),E(eA.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(rA.$$.fragment,f),E(N$.$$.fragment,f),E(nA.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(lA.$$.fragment,f),E(V$.$$.fragment,f),E(dA.$$.fragment,f),fXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(Pf.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(Vg.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(QL.$$.fragment,f),C(wh.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(KL.$$.fragment,f),C(lp.$$.fragment,f),C(ip.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ay.$$.fragment,f),C(xp.$$.fragment,f),C($p.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Rp.$$.fragment,f),C(cy.$$.fragment,f),C(Pu.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(Iu.$$.fragment,f),C(py.$$.fragment,f),C(y1.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C($1.$$.fragment,f),C(Fy.$$.fragment,f),C(_3.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(b3.$$.fragment,f),C(wy.$$.fragment,f),C(t2.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(n2.$$.fragment,f),C($y.$$.fragment,f),C(C2.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(A2.$$.fragment,f),C(By.$$.fragment,f),C(Eb.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(wb.$$.fragment,f),C(Dy.$$.fragment,f),C(tv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(nv.$$.fragment,f),C(zy.$$.fragment,f),C(gv.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(pv.$$.fragment,f),C(Jy.$$.fragment,f),C(Zv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(oF.$$.fragment,f),C(o8.$$.fragment,f),C(XF.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(QF.$$.fragment,f),C(s8.$$.fragment,f),C(UF.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(YF.$$.fragment,f),C(f8.$$.fragment,f),C(fT.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(gT.$$.fragment,f),C(_8.$$.fragment,f),C(_T.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(bT.$$.fragment,f),C(T8.$$.fragment,f),C(TT.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(ET.$$.fragment,f),C(A8.$$.fragment,f),C(PT.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(IT.$$.fragment,f),C(k8.$$.fragment,f),C(VT.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(zT.$$.fragment,f),C(I8.$$.fragment,f),C(t7.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(n7.$$.fragment,f),C(G8.$$.fragment,f),C(d7.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(f7.$$.fragment,f),C(W8.$$.fragment,f),C(b7.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(F7.$$.fragment,f),C(K8.$$.fragment,f),C(w7.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(L7.$$.fragment,f),C(t9.$$.fragment,f),C(k7.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(R7.$$.fragment,f),C(d9.$$.fragment,f),C(I7.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(q7.$$.fragment,f),C(h9.$$.fragment,f),C(X7.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(Q7.$$.fragment,f),C(v9.$$.fragment,f),C(U7.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(Y7.$$.fragment,f),C(C9.$$.fragment,f),C(XM.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(QM.$$.fragment,f),C(x9.$$.fragment,f),C(_E.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(bE.$$.fragment,f),C(P9.$$.fragment,f),C(SE.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(PE.$$.fragment,f),C(j9.$$.fragment,f),C(jE.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(GE.$$.fragment,f),C(X9.$$.fragment,f),C(i4.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(c4.$$.fragment,f),C(U9.$$.fragment,f),C(T4.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(E4.$$.fragment,f),C(ex.$$.fragment,f),C(J4.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(K4.$$.fragment,f),C(nx.$$.fragment,f),C(_C.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(bC.$$.fragment,f),C(cx.$$.fragment,f),C(TC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(EC.$$.fragment,f),C(_x.$$.fragment,f),C(wC.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(LC.$$.fragment,f),C(Tx.$$.fragment,f),C(HC.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(JC.$$.fragment,f),C(Ax.$$.fragment,f),C(u5.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(v5.$$.fragment,f),C(kx.$$.fragment,f),C(T5.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(E5.$$.fragment,f),C(Ix.$$.fragment,f),C(w5.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(L5.$$.fragment,f),C(Gx.$$.fragment,f),C(o0.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(t0.$$.fragment,f),C(Qx.$$.fragment,f),C(h0.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(_0.$$.fragment,f),C(Yx.$$.fragment,f),C($0.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(S0.$$.fragment,f),C(r$.$$.fragment,f),C(V0.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(z0.$$.fragment,f),C(l$.$$.fragment,f),C(rw.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(aw.$$.fragment,f),C(m$.$$.fragment,f),C(pw.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(uw.$$.fragment,f),C(u$.$$.fragment,f),C(yw.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C($w.$$.fragment,f),C(M$.$$.fragment,f),C(jw.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(Gw.$$.fragment,f),C(L$.$$.fragment,f),C(Jw.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(Kw.$$.fragment,f),C(S$.$$.fragment,f),C(eA.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(rA.$$.fragment,f),C(N$.$$.fragment,f),C(nA.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(lA.$$.fragment,f),C(V$.$$.fragment,f),C(dA.$$.fragment,f),fXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(kf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(sOe),f&&t(xi),w(PL),f&&t(lOe),f&&t(Nn),f&&t(iOe),w(BL,f),f&&t(dOe),f&&t(gS),f&&t(cOe),w(Pf,f),f&&t(fOe),f&&t($i),w(IL),f&&t(mOe),f&&t(wo),w(NL),w(DL),w(Vg),w(GL),f&&t(gOe),f&&t(Si),w(OL),f&&t(hOe),f&&t(Ao),w(VL),w(QL),w(wh),w(WL),f&&t(pOe),f&&t(Ri),w(HL),f&&t(_Oe),f&&t(Lo),w(UL),w(KL),w(lp),w(ip),w(ZL),f&&t(uOe),f&&t(Pi),w(ey),f&&t(bOe),f&&t(yo),w(oy),w(ay),w(xp),w($p),w(ny),f&&t(vOe),f&&t(Ii),w(sy),f&&t(FOe),f&&t(xo),w(ly),w(dy),w(Rp),w(cy),w(Pu),f&&t(TOe),f&&t(ji),w(fy),f&&t(MOe),f&&t($o),w(my),w(hy),w(Iu),w(py),w(y1),f&&t(EOe),f&&t(Oi),w(_y),f&&t(COe),f&&t(ko),w(uy),w(vy),w($1),w(Fy),w(_3),f&&t(wOe),f&&t(zi),w(Ty),f&&t(AOe),f&&t(So),w(My),w(Cy),w(b3),w(wy),w(t2),f&&t(LOe),f&&t(Hi),w(Ay),f&&t(yOe),f&&t(Ro),w(Ly),w(xy),w(n2),w($y),w(C2),f&&t(xOe),f&&t(Yi),w(ky),f&&t($Oe),f&&t(Po),w(Sy),w(Py),w(A2),w(By),w(Eb),f&&t(kOe),f&&t(ed),w(Iy),f&&t(SOe),f&&t(Bo),w(Ny),w(jy),w(wb),w(Dy),w(tv),f&&t(ROe),f&&t(td),w(Gy),f&&t(POe),f&&t(Io),w(Oy),w(Xy),w(nv),w(zy),w(gv),f&&t(BOe),f&&t(sd),w(Qy),f&&t(IOe),f&&t(qo),w(Wy),w(Uy),w(pv),w(Jy),w(Zv),f&&t(NOe),f&&t(dd),w(Yy),f&&t(qOe),f&&t(jo),w(Ky),w(e8),w(oF),w(o8),w(XF),f&&t(jOe),f&&t(md),w(r8),f&&t(DOe),f&&t(Do),w(t8),w(n8),w(QF),w(s8),w(UF),f&&t(GOe),f&&t(pd),w(l8),f&&t(OOe),f&&t(Go),w(i8),w(c8),w(YF),w(f8),w(fT),f&&t(VOe),f&&t(bd),w(m8),f&&t(XOe),f&&t(Oo),w(g8),w(p8),w(gT),w(_8),w(_T),f&&t(zOe),f&&t(Td),w(u8),f&&t(QOe),f&&t(Vo),w(b8),w(F8),w(bT),w(T8),w(TT),f&&t(WOe),f&&t(Cd),w(M8),f&&t(HOe),f&&t(Xo),w(E8),w(w8),w(ET),w(A8),w(PT),f&&t(UOe),f&&t(Ld),w(L8),f&&t(JOe),f&&t(zo),w(y8),w($8),w(IT),w(k8),w(VT),f&&t(YOe),f&&t($d),w(S8),f&&t(KOe),f&&t(Qo),w(R8),w(B8),w(zT),w(I8),w(t7),f&&t(ZOe),f&&t(Rd),w(N8),f&&t(eVe),f&&t(Wo),w(q8),w(D8),w(n7),w(G8),w(d7),f&&t(oVe),f&&t(Id),w(V8),f&&t(rVe),f&&t(Ho),w(X8),w(Q8),w(f7),w(W8),w(b7),f&&t(tVe),f&&t(jd),w(H8),f&&t(aVe),f&&t(Uo),w(U8),w(Y8),w(F7),w(K8),w(w7),f&&t(nVe),f&&t(Vd),w(Z8),f&&t(sVe),f&&t(Jo),w(e9),w(r9),w(L7),w(t9),w(k7),f&&t(lVe),f&&t(Qd),w(n9),f&&t(iVe),f&&t(Yo),w(s9),w(i9),w(R7),w(d9),w(I7),f&&t(dVe),f&&t(Ud),w(c9),f&&t(cVe),f&&t(Ko),w(f9),w(g9),w(q7),w(h9),w(X7),f&&t(fVe),f&&t(Kd),w(p9),f&&t(mVe),f&&t(Zo),w(_9),w(b9),w(Q7),w(v9),w(U7),f&&t(gVe),f&&t(oc),w(F9),f&&t(hVe),f&&t(er),w(T9),w(E9),w(Y7),w(C9),w(XM),f&&t(pVe),f&&t(ac),w(w9),f&&t(_Ve),f&&t(or),w(A9),w(y9),w(QM),w(x9),w(_E),f&&t(uVe),f&&t(lc),w($9),f&&t(bVe),f&&t(rr),w(k9),w(R9),w(bE),w(P9),w(SE),f&&t(vVe),f&&t(cc),w(B9),f&&t(FVe),f&&t(tr),w(I9),w(q9),w(PE),w(j9),w(jE),f&&t(TVe),f&&t(gc),w(D9),f&&t(MVe),f&&t(ar),w(G9),w(V9),w(GE),w(X9),w(i4),f&&t(EVe),f&&t(_c),w(z9),f&&t(CVe),f&&t(nr),w(Q9),w(H9),w(c4),w(U9),w(T4),f&&t(wVe),f&&t(vc),w(J9),f&&t(AVe),f&&t(sr),w(Y9),w(Z9),w(E4),w(ex),w(J4),f&&t(LVe),f&&t(Mc),w(ox),f&&t(yVe),f&&t(lr),w(rx),w(ax),w(K4),w(nx),w(_C),f&&t(xVe),f&&t(wc),w(sx),f&&t($Ve),f&&t(ir),w(lx),w(dx),w(bC),w(cx),w(TC),f&&t(kVe),f&&t(yc),w(mx),f&&t(SVe),f&&t(dr),w(gx),w(px),w(EC),w(_x),w(wC),f&&t(RVe),f&&t(kc),w(ux),f&&t(PVe),f&&t(cr),w(bx),w(Fx),w(LC),w(Tx),w(HC),f&&t(BVe),f&&t(Pc),w(Mx),f&&t(IVe),f&&t(fr),w(Ex),w(wx),w(JC),w(Ax),w(u5),f&&t(NVe),f&&t(Nc),w(Lx),f&&t(qVe),f&&t(mr),w(yx),w($x),w(v5),w(kx),w(T5),f&&t(jVe),f&&t(Dc),w(Sx),f&&t(DVe),f&&t(gr),w(Rx),w(Bx),w(E5),w(Ix),w(w5),f&&t(GVe),f&&t(Vc),w(Nx),f&&t(OVe),f&&t(hr),w(qx),w(Dx),w(L5),w(Gx),w(o0),f&&t(VVe),f&&t(Qc),w(Ox),f&&t(XVe),f&&t(pr),w(Vx),w(zx),w(t0),w(Qx),w(h0),f&&t(zVe),f&&t(Uc),w(Wx),f&&t(QVe),f&&t(_r),w(Hx),w(Jx),w(_0),w(Yx),w($0),f&&t(WVe),f&&t(Kc),w(Kx),f&&t(HVe),f&&t(ur),w(Zx),w(o$),w(S0),w(r$),w(V0),f&&t(UVe),f&&t(of),w(t$),f&&t(JVe),f&&t(br),w(a$),w(s$),w(z0),w(l$),w(rw),f&&t(YVe),f&&t(af),w(i$),f&&t(KVe),f&&t(vr),w(d$),w(f$),w(aw),w(m$),w(pw),f&&t(ZVe),f&&t(lf),w(g$),f&&t(eXe),f&&t(Fr),w(h$),w(_$),w(uw),w(u$),w(yw),f&&t(oXe),f&&t(ff),w(b$),f&&t(rXe),f&&t(Tr),w(v$),w(T$),w($w),w(M$),w(jw),f&&t(tXe),f&&t(hf),w(E$),f&&t(aXe),f&&t(Mr),w(C$),w(A$),w(Gw),w(L$),w(Jw),f&&t(nXe),f&&t(uf),w(y$),f&&t(sXe),f&&t(Er),w(x$),w(k$),w(Kw),w(S$),w(eA),f&&t(lXe),f&&t(Ff),w(R$),f&&t(iXe),f&&t(Cr),w(P$),w(I$),w(rA),w(N$),w(nA),f&&t(dXe),f&&t(Ef),w(j$),f&&t(cXe),f&&t(wr),w(D$),w(O$),w(lA),w(V$),w(dA)}}}const xVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $Vt(x){return yGt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class NVt extends CGt{constructor(g){super();wGt(this,g,$Vt,yVt,AGt,{})}}export{NVt as default,xVt as metadata};
