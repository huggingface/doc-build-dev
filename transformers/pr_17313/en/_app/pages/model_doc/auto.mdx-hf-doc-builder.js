import{S as JRt,i as YRt,s as KRt,e as a,k as l,w as F,t as o,M as ZRt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ePt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as IWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function oPt(x){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,G6,bf,Ge,We,_i,Ln,O6,yn,xn,V6,ui,$n,X6,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),G6=o(")."),bf=l(),Ge=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),O6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),V6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),X6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var fk=s(p);m=r(fk,"NewModelConfig"),fk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var mk=s(gi);uf=r(mk,"model_type"),mk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var gk=s(hi);pi=r(gk,'"new-model"'),gk.forEach(t),G6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);Ln=r(wa,"NewModel"),wa.forEach(t),O6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var hk=s(yn);xn=r(hk,"PreTrainedModel"),hk.forEach(t),V6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),X6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var pk=s(bi);vf=r(pk,"NewModelConfig"),pk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,G6),b(Qe,bf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,_i),e(_i,Ln),e(Ge,O6),e(Ge,yn),e(yn,xn),e(Ge,V6),e(Ge,ui),e(ui,$n),e(Ge,X6),e(Ge,bi),e(bi,vf),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(Ge)}}}function rPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function nPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function lPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(x){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,G6,bf,Ge,We,_i,Ln,O6,yn,xn,V6,ui,$n,X6,bi,vf,Ca,Qe,Ae,fk,vi,mk,gk,Eo,wa,hk,Ff,pk,xVe,bje,Fi,Tf,Woe,z6,$Ve,Qoe,kVe,vje,kn,SVe,Hoe,RVe,PVe,Uoe,BVe,IVe,Fje,W6,Tje,_k,NVe,Mje,Mf,Eje,Ti,Ef,Joe,Q6,qVe,Yoe,jVe,Cje,Co,H6,DVe,U6,GVe,uk,OVe,VVe,XVe,J6,zVe,Koe,WVe,QVe,HVe,Er,Y6,UVe,Zoe,JVe,YVe,Mi,KVe,ere,ZVe,eXe,ore,oXe,rXe,tXe,A,Cf,rre,aXe,nXe,bk,sXe,lXe,iXe,wf,tre,dXe,cXe,vk,fXe,mXe,gXe,Af,are,hXe,pXe,Fk,_Xe,uXe,bXe,Lf,nre,vXe,FXe,Tk,TXe,MXe,EXe,yf,sre,CXe,wXe,Mk,AXe,LXe,yXe,xf,lre,xXe,$Xe,Ek,kXe,SXe,RXe,$f,ire,PXe,BXe,Ck,IXe,NXe,qXe,kf,dre,jXe,DXe,wk,GXe,OXe,VXe,Sf,cre,XXe,zXe,Ak,WXe,QXe,HXe,Rf,fre,UXe,JXe,Lk,YXe,KXe,ZXe,Pf,mre,eze,oze,yk,rze,tze,aze,Bf,gre,nze,sze,xk,lze,ize,dze,If,hre,cze,fze,$k,mze,gze,hze,Nf,pre,pze,_ze,kk,uze,bze,vze,qf,_re,Fze,Tze,Sk,Mze,Eze,Cze,jf,ure,wze,Aze,Rk,Lze,yze,xze,Df,bre,$ze,kze,Pk,Sze,Rze,Pze,Gf,vre,Bze,Ize,Bk,Nze,qze,jze,Of,Fre,Dze,Gze,Ik,Oze,Vze,Xze,Vf,Tre,zze,Wze,Nk,Qze,Hze,Uze,Xf,Mre,Jze,Yze,qk,Kze,Zze,eWe,zf,Ere,oWe,rWe,jk,tWe,aWe,nWe,Wf,Cre,sWe,lWe,Dk,iWe,dWe,cWe,Qf,wre,fWe,mWe,Gk,gWe,hWe,pWe,Hf,Are,_We,uWe,Ok,bWe,vWe,FWe,Uf,Lre,TWe,MWe,Vk,EWe,CWe,wWe,Jf,yre,AWe,LWe,Xk,yWe,xWe,$We,Yf,xre,kWe,SWe,zk,RWe,PWe,BWe,Kf,$re,IWe,NWe,Wk,qWe,jWe,DWe,Zf,kre,GWe,OWe,Qk,VWe,XWe,zWe,em,Sre,WWe,QWe,Hk,HWe,UWe,JWe,om,Rre,YWe,KWe,Uk,ZWe,eQe,oQe,rm,Pre,rQe,tQe,Jk,aQe,nQe,sQe,tm,Bre,lQe,iQe,Yk,dQe,cQe,fQe,am,Ire,mQe,gQe,Kk,hQe,pQe,_Qe,nm,Nre,uQe,bQe,Zk,vQe,FQe,TQe,sm,qre,MQe,EQe,eS,CQe,wQe,AQe,lm,jre,LQe,yQe,oS,xQe,$Qe,kQe,im,Dre,SQe,RQe,rS,PQe,BQe,IQe,dm,Gre,NQe,qQe,tS,jQe,DQe,GQe,cm,Ore,OQe,VQe,aS,XQe,zQe,WQe,fm,Vre,QQe,HQe,nS,UQe,JQe,YQe,mm,Xre,KQe,ZQe,sS,eHe,oHe,rHe,gm,zre,tHe,aHe,lS,nHe,sHe,lHe,hm,Wre,iHe,dHe,iS,cHe,fHe,mHe,pm,Qre,gHe,hHe,dS,pHe,_He,uHe,_m,Hre,bHe,vHe,cS,FHe,THe,MHe,um,Ure,EHe,CHe,fS,wHe,AHe,LHe,bm,Jre,yHe,xHe,mS,$He,kHe,SHe,vm,Yre,RHe,PHe,gS,BHe,IHe,NHe,Fm,Kre,qHe,jHe,hS,DHe,GHe,OHe,Tm,Zre,VHe,XHe,pS,zHe,WHe,QHe,Mm,ete,HHe,UHe,_S,JHe,YHe,KHe,Em,ote,ZHe,eUe,uS,oUe,rUe,tUe,Cm,rte,aUe,nUe,bS,sUe,lUe,iUe,wm,tte,dUe,cUe,vS,fUe,mUe,gUe,Am,ate,hUe,pUe,FS,_Ue,uUe,bUe,Lm,nte,vUe,FUe,TS,TUe,MUe,EUe,ym,ste,CUe,wUe,MS,AUe,LUe,yUe,xm,lte,xUe,$Ue,ES,kUe,SUe,RUe,$m,ite,PUe,BUe,CS,IUe,NUe,qUe,km,dte,jUe,DUe,wS,GUe,OUe,VUe,Sm,cte,XUe,zUe,AS,WUe,QUe,HUe,Rm,fte,UUe,JUe,LS,YUe,KUe,ZUe,Pm,mte,eJe,oJe,yS,rJe,tJe,aJe,Bm,gte,nJe,sJe,xS,lJe,iJe,dJe,Im,hte,cJe,fJe,$S,mJe,gJe,hJe,Nm,pte,pJe,_Je,kS,uJe,bJe,vJe,qm,_te,FJe,TJe,SS,MJe,EJe,CJe,jm,ute,wJe,AJe,RS,LJe,yJe,xJe,Dm,bte,$Je,kJe,PS,SJe,RJe,PJe,Gm,vte,BJe,IJe,BS,NJe,qJe,jJe,Om,Fte,DJe,GJe,IS,OJe,VJe,XJe,Vm,Tte,zJe,WJe,NS,QJe,HJe,UJe,Xm,Mte,JJe,YJe,qS,KJe,ZJe,eYe,zm,Ete,oYe,rYe,jS,tYe,aYe,nYe,Wm,Cte,sYe,lYe,DS,iYe,dYe,cYe,Qm,wte,fYe,mYe,GS,gYe,hYe,pYe,Hm,Ate,_Ye,uYe,OS,bYe,vYe,FYe,Um,Lte,TYe,MYe,VS,EYe,CYe,wYe,Jm,yte,AYe,LYe,XS,yYe,xYe,$Ye,Ym,xte,kYe,SYe,zS,RYe,PYe,BYe,Km,$te,IYe,NYe,WS,qYe,jYe,DYe,Zm,kte,GYe,OYe,QS,VYe,XYe,zYe,eg,Ste,WYe,QYe,HS,HYe,UYe,JYe,og,Rte,YYe,KYe,US,ZYe,eKe,oKe,rg,Pte,rKe,tKe,JS,aKe,nKe,sKe,tg,Bte,lKe,iKe,YS,dKe,cKe,fKe,ag,Ite,mKe,gKe,KS,hKe,pKe,_Ke,ng,Nte,uKe,bKe,ZS,vKe,FKe,TKe,sg,qte,MKe,EKe,eR,CKe,wKe,AKe,lg,jte,LKe,yKe,oR,xKe,$Ke,kKe,ig,Dte,SKe,RKe,rR,PKe,BKe,IKe,dg,Gte,NKe,qKe,tR,jKe,DKe,GKe,cg,Ote,OKe,VKe,aR,XKe,zKe,WKe,fg,Vte,QKe,HKe,nR,UKe,JKe,YKe,mg,Xte,KKe,ZKe,sR,eZe,oZe,rZe,gg,zte,tZe,aZe,lR,nZe,sZe,lZe,hg,Wte,iZe,dZe,iR,cZe,fZe,mZe,pg,Qte,gZe,hZe,dR,pZe,_Ze,uZe,_g,Hte,bZe,vZe,cR,FZe,TZe,MZe,ug,Ute,EZe,CZe,fR,wZe,AZe,LZe,bg,Jte,yZe,xZe,mR,$Ze,kZe,SZe,vg,Yte,RZe,PZe,gR,BZe,IZe,NZe,Fg,Kte,qZe,jZe,hR,DZe,GZe,OZe,Tg,Zte,VZe,XZe,pR,zZe,WZe,QZe,Mg,eae,HZe,UZe,_R,JZe,YZe,KZe,Eg,oae,ZZe,eeo,uR,oeo,reo,teo,Cg,rae,aeo,neo,bR,seo,leo,ieo,wg,tae,deo,ceo,vR,feo,meo,geo,Ag,aae,heo,peo,FR,_eo,ueo,beo,Lg,nae,veo,Feo,TR,Teo,Meo,Eeo,yg,Ceo,xg,K6,weo,sae,Aeo,wje,Ei,$g,lae,Z6,Leo,iae,yeo,Aje,wo,eL,xeo,oL,$eo,MR,keo,Seo,Reo,rL,Peo,dae,Beo,Ieo,Neo,Cr,tL,qeo,cae,jeo,Deo,Aa,Geo,fae,Oeo,Veo,mae,Xeo,zeo,gae,Weo,Qeo,Heo,k,Sn,hae,Ueo,Jeo,ER,Yeo,Keo,CR,Zeo,eoo,ooo,Rn,pae,roo,too,wR,aoo,noo,AR,soo,loo,ioo,Pn,_ae,doo,coo,LR,foo,moo,yR,goo,hoo,poo,kg,uae,_oo,uoo,xR,boo,voo,Foo,Bn,bae,Too,Moo,$R,Eoo,Coo,kR,woo,Aoo,Loo,Sg,vae,yoo,xoo,SR,$oo,koo,Soo,Rg,Fae,Roo,Poo,RR,Boo,Ioo,Noo,Pg,Tae,qoo,joo,PR,Doo,Goo,Ooo,In,Mae,Voo,Xoo,BR,zoo,Woo,IR,Qoo,Hoo,Uoo,Nn,Eae,Joo,Yoo,NR,Koo,Zoo,qR,ero,oro,rro,qn,Cae,tro,aro,jR,nro,sro,DR,lro,iro,dro,Bg,wae,cro,fro,GR,mro,gro,hro,Ig,Aae,pro,_ro,OR,uro,bro,vro,jn,Lae,Fro,Tro,VR,Mro,Ero,XR,Cro,wro,Aro,Ng,yae,Lro,yro,zR,xro,$ro,kro,Dn,xae,Sro,Rro,WR,Pro,Bro,QR,Iro,Nro,qro,Gn,$ae,jro,Dro,HR,Gro,Oro,UR,Vro,Xro,zro,On,kae,Wro,Qro,JR,Hro,Uro,YR,Jro,Yro,Kro,qg,Sae,Zro,eto,KR,oto,rto,tto,Vn,Rae,ato,nto,ZR,sto,lto,eP,ito,dto,cto,Xn,Pae,fto,mto,oP,gto,hto,rP,pto,_to,uto,zn,Bae,bto,vto,tP,Fto,Tto,aP,Mto,Eto,Cto,Wn,Iae,wto,Ato,nP,Lto,yto,sP,xto,$to,kto,Qn,Nae,Sto,Rto,lP,Pto,Bto,iP,Ito,Nto,qto,Hn,qae,jto,Dto,dP,Gto,Oto,cP,Vto,Xto,zto,jg,jae,Wto,Qto,fP,Hto,Uto,Jto,Un,Dae,Yto,Kto,mP,Zto,eao,gP,oao,rao,tao,Dg,Gae,aao,nao,hP,sao,lao,iao,Jn,Oae,dao,cao,pP,fao,mao,_P,gao,hao,pao,Yn,Vae,_ao,uao,uP,bao,vao,bP,Fao,Tao,Mao,Kn,Xae,Eao,Cao,vP,wao,Aao,FP,Lao,yao,xao,Gg,zae,$ao,kao,TP,Sao,Rao,Pao,Zn,Wae,Bao,Iao,MP,Nao,qao,EP,jao,Dao,Gao,es,Qae,Oao,Vao,CP,Xao,zao,wP,Wao,Qao,Hao,os,Hae,Uao,Jao,AP,Yao,Kao,LP,Zao,eno,ono,Og,Uae,rno,tno,yP,ano,nno,sno,rs,Jae,lno,ino,xP,dno,cno,$P,fno,mno,gno,ts,Yae,hno,pno,kP,_no,uno,SP,bno,vno,Fno,as,Kae,Tno,Mno,RP,Eno,Cno,PP,wno,Ano,Lno,ns,Zae,yno,xno,BP,$no,kno,IP,Sno,Rno,Pno,ss,ene,Bno,Ino,NP,Nno,qno,qP,jno,Dno,Gno,ls,one,Ono,Vno,jP,Xno,zno,DP,Wno,Qno,Hno,is,rne,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,Vg,tne,rso,tso,VP,aso,nso,sso,ds,ane,lso,iso,XP,dso,cso,zP,fso,mso,gso,Xg,nne,hso,pso,WP,_so,uso,bso,zg,sne,vso,Fso,QP,Tso,Mso,Eso,cs,lne,Cso,wso,HP,Aso,Lso,UP,yso,xso,$so,fs,ine,kso,Sso,JP,Rso,Pso,YP,Bso,Iso,Nso,ms,dne,qso,jso,KP,Dso,Gso,ZP,Oso,Vso,Xso,Wg,cne,zso,Wso,eB,Qso,Hso,Uso,gs,fne,Jso,Yso,oB,Kso,Zso,rB,elo,olo,rlo,hs,mne,tlo,alo,tB,nlo,slo,aB,llo,ilo,dlo,ps,gne,clo,flo,nB,mlo,glo,sB,hlo,plo,_lo,_s,hne,ulo,blo,lB,vlo,Flo,iB,Tlo,Mlo,Elo,us,pne,Clo,wlo,dB,Alo,Llo,cB,ylo,xlo,$lo,Qg,_ne,klo,Slo,fB,Rlo,Plo,Blo,bs,une,Ilo,Nlo,mB,qlo,jlo,gB,Dlo,Glo,Olo,Hg,bne,Vlo,Xlo,hB,zlo,Wlo,Qlo,Ug,vne,Hlo,Ulo,pB,Jlo,Ylo,Klo,Jg,Fne,Zlo,eio,_B,oio,rio,tio,Yg,Tne,aio,nio,uB,sio,lio,iio,vs,Mne,dio,cio,bB,fio,mio,vB,gio,hio,pio,Kg,Ene,_io,uio,FB,bio,vio,Fio,Fs,Cne,Tio,Mio,TB,Eio,Cio,MB,wio,Aio,Lio,Ts,wne,yio,xio,EB,$io,kio,CB,Sio,Rio,Pio,Ms,Ane,Bio,Iio,wB,Nio,qio,AB,jio,Dio,Gio,Es,Lne,Oio,Vio,LB,Xio,zio,yB,Wio,Qio,Hio,Cs,yne,Uio,Jio,xB,Yio,Kio,$B,Zio,edo,odo,ws,xne,rdo,tdo,kB,ado,ndo,SB,sdo,ldo,ido,Zg,$ne,ddo,cdo,RB,fdo,mdo,gdo,eh,kne,hdo,pdo,PB,_do,udo,bdo,As,Sne,vdo,Fdo,BB,Tdo,Mdo,IB,Edo,Cdo,wdo,Ls,Rne,Ado,Ldo,NB,ydo,xdo,qB,$do,kdo,Sdo,ys,Pne,Rdo,Pdo,jB,Bdo,Ido,DB,Ndo,qdo,jdo,oh,Bne,Ddo,Gdo,GB,Odo,Vdo,Xdo,rh,Ine,zdo,Wdo,OB,Qdo,Hdo,Udo,th,Nne,Jdo,Ydo,VB,Kdo,Zdo,eco,xs,qne,oco,rco,XB,tco,aco,zB,nco,sco,lco,ah,jne,ico,dco,WB,cco,fco,mco,nh,Dne,gco,hco,QB,pco,_co,uco,sh,Gne,bco,vco,HB,Fco,Tco,Mco,$s,One,Eco,Cco,UB,wco,Aco,JB,Lco,yco,xco,lh,Vne,$co,kco,YB,Sco,Rco,Pco,ih,Xne,Bco,Ico,KB,Nco,qco,jco,ks,zne,Dco,Gco,ZB,Oco,Vco,eI,Xco,zco,Wco,Ss,Wne,Qco,Hco,oI,Uco,Jco,rI,Yco,Kco,Zco,Rs,Qne,efo,ofo,tI,rfo,tfo,aI,afo,nfo,sfo,Ps,Hne,lfo,ifo,nI,dfo,cfo,sI,ffo,mfo,gfo,dh,hfo,ch,aL,pfo,Une,_fo,Lje,Ci,fh,Jne,nL,ufo,Yne,bfo,yje,Ao,sL,vfo,lL,Ffo,lI,Tfo,Mfo,Efo,iL,Cfo,Kne,wfo,Afo,Lfo,He,dL,yfo,Zne,xfo,$fo,La,kfo,ese,Sfo,Rfo,ose,Pfo,Bfo,rse,Ifo,Nfo,qfo,Y,mh,tse,jfo,Dfo,iI,Gfo,Ofo,Vfo,gh,ase,Xfo,zfo,dI,Wfo,Qfo,Hfo,hh,nse,Ufo,Jfo,cI,Yfo,Kfo,Zfo,ph,sse,emo,omo,fI,rmo,tmo,amo,_h,lse,nmo,smo,mI,lmo,imo,dmo,uh,ise,cmo,fmo,gI,mmo,gmo,hmo,bh,dse,pmo,_mo,hI,umo,bmo,vmo,vh,cse,Fmo,Tmo,pI,Mmo,Emo,Cmo,Fh,fse,wmo,Amo,_I,Lmo,ymo,xmo,Th,mse,$mo,kmo,uI,Smo,Rmo,Pmo,Mh,gse,Bmo,Imo,bI,Nmo,qmo,jmo,Eh,hse,Dmo,Gmo,vI,Omo,Vmo,Xmo,Ch,pse,zmo,Wmo,FI,Qmo,Hmo,Umo,wh,_se,Jmo,Ymo,TI,Kmo,Zmo,ego,Ah,use,ogo,rgo,MI,tgo,ago,ngo,Lh,bse,sgo,lgo,EI,igo,dgo,cgo,yh,vse,fgo,mgo,CI,ggo,hgo,pgo,xh,Fse,_go,ugo,wI,bgo,vgo,Fgo,$h,Tse,Tgo,Mgo,AI,Ego,Cgo,wgo,kh,Mse,Ago,Lgo,LI,ygo,xgo,$go,Sh,Ese,kgo,Sgo,yI,Rgo,Pgo,Bgo,Rh,Cse,Igo,Ngo,xI,qgo,jgo,Dgo,Ph,wse,Ggo,Ogo,$I,Vgo,Xgo,zgo,Bh,Ase,Wgo,Qgo,kI,Hgo,Ugo,Jgo,Ih,Lse,Ygo,Kgo,SI,Zgo,eho,oho,Nh,yse,rho,tho,RI,aho,nho,sho,qh,xse,lho,iho,PI,dho,cho,fho,jh,$se,mho,gho,BI,hho,pho,_ho,Dh,kse,uho,bho,II,vho,Fho,Tho,Gh,Sse,Mho,Eho,NI,Cho,who,Aho,Oh,Rse,Lho,yho,qI,xho,$ho,kho,Vh,Pse,Sho,Rho,jI,Pho,Bho,Iho,Xh,Nho,zh,qho,Wh,cL,jho,Bse,Dho,xje,wi,Qh,Ise,fL,Gho,Nse,Oho,$je,Lo,mL,Vho,gL,Xho,DI,zho,Who,Qho,hL,Hho,qse,Uho,Jho,Yho,Ue,pL,Kho,jse,Zho,epo,Ai,opo,Dse,rpo,tpo,Gse,apo,npo,spo,he,Hh,Ose,lpo,ipo,GI,dpo,cpo,fpo,Uh,Vse,mpo,gpo,Xse,hpo,ppo,_po,Jh,zse,upo,bpo,OI,vpo,Fpo,Tpo,Yh,Wse,Mpo,Epo,VI,Cpo,wpo,Apo,Kh,Qse,Lpo,ypo,XI,xpo,$po,kpo,Zh,Hse,Spo,Rpo,zI,Ppo,Bpo,Ipo,ep,Use,Npo,qpo,WI,jpo,Dpo,Gpo,op,Jse,Opo,Vpo,QI,Xpo,zpo,Wpo,rp,Yse,Qpo,Hpo,HI,Upo,Jpo,Ypo,tp,Kse,Kpo,Zpo,UI,e_o,o_o,r_o,ap,Zse,t_o,a_o,JI,n_o,s_o,l_o,np,ele,i_o,d_o,YI,c_o,f_o,m_o,sp,ole,g_o,h_o,KI,p_o,__o,u_o,lp,rle,b_o,v_o,ZI,F_o,T_o,M_o,ip,tle,E_o,C_o,eN,w_o,A_o,L_o,dp,ale,y_o,x_o,oN,$_o,k_o,S_o,cp,nle,R_o,P_o,rN,B_o,I_o,N_o,fp,sle,q_o,j_o,tN,D_o,G_o,O_o,mp,V_o,gp,X_o,hp,_L,z_o,lle,W_o,kje,Li,pp,ile,uL,Q_o,dle,H_o,Sje,yo,bL,U_o,yi,J_o,aN,Y_o,K_o,nN,Z_o,euo,ouo,vL,ruo,cle,tuo,auo,nuo,tt,FL,suo,fle,luo,iuo,xi,duo,mle,cuo,fuo,sN,muo,guo,huo,_p,puo,Je,TL,_uo,gle,uuo,buo,ya,vuo,hle,Fuo,Tuo,ple,Muo,Euo,_le,Cuo,wuo,Auo,y,up,ule,Luo,yuo,lN,xuo,$uo,kuo,bp,ble,Suo,Ruo,iN,Puo,Buo,Iuo,vp,vle,Nuo,quo,dN,juo,Duo,Guo,Fp,Fle,Ouo,Vuo,cN,Xuo,zuo,Wuo,Tp,Tle,Quo,Huo,fN,Uuo,Juo,Yuo,Mp,Mle,Kuo,Zuo,mN,e1o,o1o,r1o,Ep,Ele,t1o,a1o,gN,n1o,s1o,l1o,Cp,Cle,i1o,d1o,hN,c1o,f1o,m1o,wp,wle,g1o,h1o,pN,p1o,_1o,u1o,Ap,Ale,b1o,v1o,_N,F1o,T1o,M1o,Lp,Lle,E1o,C1o,uN,w1o,A1o,L1o,yp,yle,y1o,x1o,bN,$1o,k1o,S1o,xp,xle,R1o,P1o,vN,B1o,I1o,N1o,$p,$le,q1o,j1o,FN,D1o,G1o,O1o,kp,kle,V1o,X1o,TN,z1o,W1o,Q1o,Sp,Sle,H1o,U1o,MN,J1o,Y1o,K1o,Rp,Rle,Z1o,e3o,EN,o3o,r3o,t3o,Pp,Ple,a3o,n3o,CN,s3o,l3o,i3o,Bp,Ble,d3o,c3o,wN,f3o,m3o,g3o,Ip,Ile,h3o,p3o,AN,_3o,u3o,b3o,Np,Nle,v3o,F3o,LN,T3o,M3o,E3o,qp,qle,C3o,w3o,yN,A3o,L3o,y3o,jp,jle,x3o,$3o,xN,k3o,S3o,R3o,Dp,Dle,P3o,B3o,$N,I3o,N3o,q3o,Gp,Gle,j3o,D3o,kN,G3o,O3o,V3o,Op,Ole,X3o,z3o,SN,W3o,Q3o,H3o,Vp,Vle,U3o,J3o,RN,Y3o,K3o,Z3o,Xp,Xle,ebo,obo,PN,rbo,tbo,abo,zp,zle,nbo,sbo,BN,lbo,ibo,dbo,Wp,Wle,cbo,fbo,IN,mbo,gbo,hbo,Qp,Qle,pbo,_bo,NN,ubo,bbo,vbo,Hp,Hle,Fbo,Tbo,qN,Mbo,Ebo,Cbo,Bs,Ule,wbo,Abo,jN,Lbo,ybo,DN,xbo,$bo,kbo,Up,Jle,Sbo,Rbo,GN,Pbo,Bbo,Ibo,Jp,Yle,Nbo,qbo,ON,jbo,Dbo,Gbo,Yp,Kle,Obo,Vbo,VN,Xbo,zbo,Wbo,Kp,Zle,Qbo,Hbo,XN,Ubo,Jbo,Ybo,Zp,eie,Kbo,Zbo,zN,e2o,o2o,r2o,e_,oie,t2o,a2o,WN,n2o,s2o,l2o,o_,rie,i2o,d2o,QN,c2o,f2o,m2o,r_,tie,g2o,h2o,HN,p2o,_2o,u2o,t_,aie,b2o,v2o,UN,F2o,T2o,M2o,a_,nie,E2o,C2o,JN,w2o,A2o,L2o,n_,sie,y2o,x2o,YN,$2o,k2o,S2o,s_,lie,R2o,P2o,KN,B2o,I2o,N2o,l_,iie,q2o,j2o,ZN,D2o,G2o,O2o,i_,die,V2o,X2o,eq,z2o,W2o,Q2o,d_,cie,H2o,U2o,oq,J2o,Y2o,K2o,c_,fie,Z2o,evo,rq,ovo,rvo,tvo,f_,mie,avo,nvo,tq,svo,lvo,ivo,m_,gie,dvo,cvo,aq,fvo,mvo,gvo,g_,hie,hvo,pvo,nq,_vo,uvo,bvo,h_,pie,vvo,Fvo,sq,Tvo,Mvo,Evo,p_,_ie,Cvo,wvo,lq,Avo,Lvo,yvo,__,uie,xvo,$vo,iq,kvo,Svo,Rvo,u_,bie,Pvo,Bvo,dq,Ivo,Nvo,qvo,b_,vie,jvo,Dvo,cq,Gvo,Ovo,Vvo,v_,Fie,Xvo,zvo,fq,Wvo,Qvo,Hvo,F_,Tie,Uvo,Jvo,mq,Yvo,Kvo,Zvo,T_,Mie,eFo,oFo,gq,rFo,tFo,aFo,M_,Eie,nFo,sFo,hq,lFo,iFo,dFo,E_,Cie,cFo,fFo,pq,mFo,gFo,hFo,C_,wie,pFo,_Fo,_q,uFo,bFo,vFo,w_,Aie,FFo,TFo,uq,MFo,EFo,CFo,A_,Lie,wFo,AFo,bq,LFo,yFo,xFo,L_,yie,$Fo,kFo,vq,SFo,RFo,PFo,y_,xie,BFo,IFo,Fq,NFo,qFo,jFo,x_,$ie,DFo,GFo,Tq,OFo,VFo,XFo,$_,kie,zFo,WFo,Mq,QFo,HFo,UFo,k_,Sie,JFo,YFo,Eq,KFo,ZFo,eTo,S_,Rie,oTo,rTo,Cq,tTo,aTo,nTo,R_,Pie,sTo,lTo,wq,iTo,dTo,cTo,P_,Bie,fTo,mTo,Aq,gTo,hTo,pTo,B_,Iie,_To,uTo,Lq,bTo,vTo,FTo,I_,Nie,TTo,MTo,yq,ETo,CTo,wTo,N_,qie,ATo,LTo,xq,yTo,xTo,$To,q_,jie,kTo,STo,$q,RTo,PTo,BTo,j_,Die,ITo,NTo,kq,qTo,jTo,DTo,D_,Gie,GTo,OTo,Sq,VTo,XTo,zTo,G_,Oie,WTo,QTo,Rq,HTo,UTo,JTo,O_,Vie,YTo,KTo,Pq,ZTo,e7o,o7o,V_,Xie,r7o,t7o,Bq,a7o,n7o,s7o,X_,zie,l7o,i7o,Iq,d7o,c7o,f7o,z_,Wie,m7o,g7o,Nq,h7o,p7o,_7o,W_,Qie,u7o,b7o,qq,v7o,F7o,T7o,Q_,Hie,M7o,E7o,jq,C7o,w7o,A7o,H_,Uie,L7o,y7o,Dq,x7o,$7o,k7o,U_,Jie,S7o,R7o,Gq,P7o,B7o,I7o,J_,Yie,N7o,q7o,Oq,j7o,D7o,G7o,Y_,Kie,O7o,V7o,Vq,X7o,z7o,W7o,K_,Zie,Q7o,H7o,Xq,U7o,J7o,Y7o,Z_,ede,K7o,Z7o,zq,eMo,oMo,rMo,eu,ode,tMo,aMo,Wq,nMo,sMo,lMo,ou,rde,iMo,dMo,Qq,cMo,fMo,mMo,ru,tde,gMo,hMo,Hq,pMo,_Mo,uMo,tu,ade,bMo,vMo,Uq,FMo,TMo,MMo,au,nde,EMo,CMo,Jq,wMo,AMo,LMo,nu,sde,yMo,xMo,Yq,$Mo,kMo,SMo,su,lde,RMo,PMo,Kq,BMo,IMo,NMo,lu,ide,qMo,jMo,Zq,DMo,GMo,OMo,iu,dde,VMo,XMo,ej,zMo,WMo,QMo,du,cde,HMo,UMo,oj,JMo,YMo,KMo,cu,fde,ZMo,e4o,rj,o4o,r4o,t4o,fu,mde,a4o,n4o,tj,s4o,l4o,i4o,mu,gde,d4o,c4o,aj,f4o,m4o,g4o,gu,h4o,hde,p4o,_4o,pde,u4o,b4o,hu,Rje,$i,pu,_de,ML,v4o,ude,F4o,Pje,xo,EL,T4o,ki,M4o,nj,E4o,C4o,sj,w4o,A4o,L4o,CL,y4o,bde,x4o,$4o,k4o,at,wL,S4o,vde,R4o,P4o,Si,B4o,Fde,I4o,N4o,lj,q4o,j4o,D4o,_u,G4o,Ye,AL,O4o,Tde,V4o,X4o,xa,z4o,Mde,W4o,Q4o,Ede,H4o,U4o,Cde,J4o,Y4o,K4o,G,uu,wde,Z4o,eEo,ij,oEo,rEo,tEo,bu,Ade,aEo,nEo,dj,sEo,lEo,iEo,vu,Lde,dEo,cEo,cj,fEo,mEo,gEo,Fu,yde,hEo,pEo,fj,_Eo,uEo,bEo,Tu,xde,vEo,FEo,mj,TEo,MEo,EEo,Mu,$de,CEo,wEo,gj,AEo,LEo,yEo,Eu,kde,xEo,$Eo,hj,kEo,SEo,REo,Cu,Sde,PEo,BEo,pj,IEo,NEo,qEo,wu,Rde,jEo,DEo,_j,GEo,OEo,VEo,Au,Pde,XEo,zEo,uj,WEo,QEo,HEo,Lu,Bde,UEo,JEo,bj,YEo,KEo,ZEo,yu,Ide,eCo,oCo,vj,rCo,tCo,aCo,xu,Nde,nCo,sCo,Fj,lCo,iCo,dCo,$u,qde,cCo,fCo,Tj,mCo,gCo,hCo,ku,jde,pCo,_Co,Mj,uCo,bCo,vCo,Su,Dde,FCo,TCo,Ej,MCo,ECo,CCo,Ru,Gde,wCo,ACo,Cj,LCo,yCo,xCo,Pu,Ode,$Co,kCo,wj,SCo,RCo,PCo,Bu,Vde,BCo,ICo,Aj,NCo,qCo,jCo,Iu,Xde,DCo,GCo,Lj,OCo,VCo,XCo,Nu,zde,zCo,WCo,yj,QCo,HCo,UCo,qu,Wde,JCo,YCo,xj,KCo,ZCo,e5o,ju,Qde,o5o,r5o,$j,t5o,a5o,n5o,Du,Hde,s5o,l5o,kj,i5o,d5o,c5o,Gu,Ude,f5o,m5o,Sj,g5o,h5o,p5o,Ou,Jde,_5o,u5o,Rj,b5o,v5o,F5o,Vu,Yde,T5o,M5o,Pj,E5o,C5o,w5o,Xu,Kde,A5o,L5o,Bj,y5o,x5o,$5o,zu,Zde,k5o,S5o,Ij,R5o,P5o,B5o,Wu,ece,I5o,N5o,Nj,q5o,j5o,D5o,Qu,oce,G5o,O5o,qj,V5o,X5o,z5o,Hu,rce,W5o,Q5o,jj,H5o,U5o,J5o,Uu,tce,Y5o,K5o,Dj,Z5o,e0o,o0o,Ju,ace,r0o,t0o,Gj,a0o,n0o,s0o,Yu,nce,l0o,i0o,Oj,d0o,c0o,f0o,Ku,sce,m0o,g0o,Vj,h0o,p0o,_0o,Zu,lce,u0o,b0o,Xj,v0o,F0o,T0o,e1,ice,M0o,E0o,zj,C0o,w0o,A0o,o1,dce,L0o,y0o,Wj,x0o,$0o,k0o,r1,cce,S0o,R0o,Qj,P0o,B0o,I0o,t1,fce,N0o,q0o,Hj,j0o,D0o,G0o,a1,mce,O0o,V0o,Uj,X0o,z0o,W0o,n1,Q0o,gce,H0o,U0o,hce,J0o,Y0o,s1,Bje,Ri,l1,pce,LL,K0o,_ce,Z0o,Ije,$o,yL,ewo,Pi,owo,Jj,rwo,two,Yj,awo,nwo,swo,xL,lwo,uce,iwo,dwo,cwo,nt,$L,fwo,bce,mwo,gwo,Bi,hwo,vce,pwo,_wo,Kj,uwo,bwo,vwo,i1,Fwo,Ke,kL,Two,Fce,Mwo,Ewo,$a,Cwo,Tce,wwo,Awo,Mce,Lwo,ywo,Ece,xwo,$wo,kwo,z,d1,Cce,Swo,Rwo,Zj,Pwo,Bwo,Iwo,c1,wce,Nwo,qwo,eD,jwo,Dwo,Gwo,f1,Ace,Owo,Vwo,oD,Xwo,zwo,Wwo,m1,Lce,Qwo,Hwo,rD,Uwo,Jwo,Ywo,g1,yce,Kwo,Zwo,tD,eAo,oAo,rAo,h1,xce,tAo,aAo,aD,nAo,sAo,lAo,p1,$ce,iAo,dAo,nD,cAo,fAo,mAo,_1,kce,gAo,hAo,sD,pAo,_Ao,uAo,u1,Sce,bAo,vAo,lD,FAo,TAo,MAo,b1,Rce,EAo,CAo,iD,wAo,AAo,LAo,v1,Pce,yAo,xAo,dD,$Ao,kAo,SAo,F1,Bce,RAo,PAo,cD,BAo,IAo,NAo,T1,Ice,qAo,jAo,fD,DAo,GAo,OAo,M1,Nce,VAo,XAo,mD,zAo,WAo,QAo,E1,qce,HAo,UAo,gD,JAo,YAo,KAo,C1,jce,ZAo,e6o,hD,o6o,r6o,t6o,w1,Dce,a6o,n6o,pD,s6o,l6o,i6o,A1,Gce,d6o,c6o,_D,f6o,m6o,g6o,L1,Oce,h6o,p6o,uD,_6o,u6o,b6o,y1,Vce,v6o,F6o,bD,T6o,M6o,E6o,x1,Xce,C6o,w6o,vD,A6o,L6o,y6o,$1,zce,x6o,$6o,FD,k6o,S6o,R6o,k1,Wce,P6o,B6o,TD,I6o,N6o,q6o,S1,Qce,j6o,D6o,MD,G6o,O6o,V6o,R1,Hce,X6o,z6o,ED,W6o,Q6o,H6o,P1,Uce,U6o,J6o,CD,Y6o,K6o,Z6o,B1,Jce,eLo,oLo,wD,rLo,tLo,aLo,I1,Yce,nLo,sLo,AD,lLo,iLo,dLo,N1,Kce,cLo,fLo,LD,mLo,gLo,hLo,q1,Zce,pLo,_Lo,yD,uLo,bLo,vLo,j1,efe,FLo,TLo,xD,MLo,ELo,CLo,D1,ofe,wLo,ALo,$D,LLo,yLo,xLo,G1,rfe,$Lo,kLo,kD,SLo,RLo,PLo,O1,tfe,BLo,ILo,SD,NLo,qLo,jLo,V1,afe,DLo,GLo,RD,OLo,VLo,XLo,X1,nfe,zLo,WLo,PD,QLo,HLo,ULo,z1,sfe,JLo,YLo,BD,KLo,ZLo,eyo,W1,oyo,lfe,ryo,tyo,ife,ayo,nyo,Q1,Nje,Ii,H1,dfe,SL,syo,cfe,lyo,qje,ko,RL,iyo,Ni,dyo,ID,cyo,fyo,ND,myo,gyo,hyo,PL,pyo,ffe,_yo,uyo,byo,st,BL,vyo,mfe,Fyo,Tyo,qi,Myo,gfe,Eyo,Cyo,qD,wyo,Ayo,Lyo,U1,yyo,Ze,IL,xyo,hfe,$yo,kyo,ka,Syo,pfe,Ryo,Pyo,_fe,Byo,Iyo,ufe,Nyo,qyo,jyo,W,J1,bfe,Dyo,Gyo,jD,Oyo,Vyo,Xyo,Y1,vfe,zyo,Wyo,DD,Qyo,Hyo,Uyo,K1,Ffe,Jyo,Yyo,GD,Kyo,Zyo,e8o,Z1,Tfe,o8o,r8o,OD,t8o,a8o,n8o,e3,Mfe,s8o,l8o,VD,i8o,d8o,c8o,o3,Efe,f8o,m8o,XD,g8o,h8o,p8o,r3,Cfe,_8o,u8o,zD,b8o,v8o,F8o,t3,wfe,T8o,M8o,WD,E8o,C8o,w8o,a3,Afe,A8o,L8o,QD,y8o,x8o,$8o,n3,Lfe,k8o,S8o,HD,R8o,P8o,B8o,s3,yfe,I8o,N8o,UD,q8o,j8o,D8o,l3,xfe,G8o,O8o,JD,V8o,X8o,z8o,i3,$fe,W8o,Q8o,YD,H8o,U8o,J8o,d3,kfe,Y8o,K8o,KD,Z8o,e9o,o9o,c3,Sfe,r9o,t9o,ZD,a9o,n9o,s9o,f3,Rfe,l9o,i9o,eG,d9o,c9o,f9o,m3,Pfe,m9o,g9o,oG,h9o,p9o,_9o,g3,Bfe,u9o,b9o,rG,v9o,F9o,T9o,h3,Ife,M9o,E9o,tG,C9o,w9o,A9o,p3,Nfe,L9o,y9o,aG,x9o,$9o,k9o,_3,qfe,S9o,R9o,nG,P9o,B9o,I9o,u3,jfe,N9o,q9o,sG,j9o,D9o,G9o,b3,Dfe,O9o,V9o,lG,X9o,z9o,W9o,v3,Gfe,Q9o,H9o,iG,U9o,J9o,Y9o,F3,Ofe,K9o,Z9o,dG,exo,oxo,rxo,T3,Vfe,txo,axo,cG,nxo,sxo,lxo,M3,Xfe,ixo,dxo,fG,cxo,fxo,mxo,E3,zfe,gxo,hxo,mG,pxo,_xo,uxo,C3,Wfe,bxo,vxo,gG,Fxo,Txo,Mxo,w3,Qfe,Exo,Cxo,hG,wxo,Axo,Lxo,A3,Hfe,yxo,xxo,pG,$xo,kxo,Sxo,L3,Ufe,Rxo,Pxo,Jfe,Bxo,Ixo,Nxo,y3,Yfe,qxo,jxo,_G,Dxo,Gxo,Oxo,x3,Kfe,Vxo,Xxo,uG,zxo,Wxo,Qxo,$3,Zfe,Hxo,Uxo,bG,Jxo,Yxo,Kxo,k3,eme,Zxo,e$o,vG,o$o,r$o,t$o,S3,a$o,ome,n$o,s$o,rme,l$o,i$o,R3,jje,ji,P3,tme,NL,d$o,ame,c$o,Dje,So,qL,f$o,Di,m$o,FG,g$o,h$o,TG,p$o,_$o,u$o,jL,b$o,nme,v$o,F$o,T$o,lt,DL,M$o,sme,E$o,C$o,Gi,w$o,lme,A$o,L$o,MG,y$o,x$o,$$o,B3,k$o,eo,GL,S$o,ime,R$o,P$o,Sa,B$o,dme,I$o,N$o,cme,q$o,j$o,fme,D$o,G$o,O$o,ue,I3,mme,V$o,X$o,EG,z$o,W$o,Q$o,N3,gme,H$o,U$o,CG,J$o,Y$o,K$o,q3,hme,Z$o,eko,wG,oko,rko,tko,j3,pme,ako,nko,AG,sko,lko,iko,D3,_me,dko,cko,LG,fko,mko,gko,G3,ume,hko,pko,yG,_ko,uko,bko,O3,bme,vko,Fko,xG,Tko,Mko,Eko,V3,vme,Cko,wko,$G,Ako,Lko,yko,X3,Fme,xko,$ko,kG,kko,Sko,Rko,z3,Tme,Pko,Bko,SG,Iko,Nko,qko,W3,Mme,jko,Dko,RG,Gko,Oko,Vko,Q3,Eme,Xko,zko,PG,Wko,Qko,Hko,H3,Cme,Uko,Jko,BG,Yko,Kko,Zko,U3,wme,eSo,oSo,IG,rSo,tSo,aSo,J3,Ame,nSo,sSo,NG,lSo,iSo,dSo,Y3,Lme,cSo,fSo,qG,mSo,gSo,hSo,K3,pSo,yme,_So,uSo,xme,bSo,vSo,Z3,Gje,Oi,eb,$me,OL,FSo,kme,TSo,Oje,Ro,VL,MSo,Vi,ESo,jG,CSo,wSo,DG,ASo,LSo,ySo,XL,xSo,Sme,$So,kSo,SSo,it,zL,RSo,Rme,PSo,BSo,Xi,ISo,Pme,NSo,qSo,GG,jSo,DSo,GSo,ob,OSo,oo,WL,VSo,Bme,XSo,zSo,Ra,WSo,Ime,QSo,HSo,Nme,USo,JSo,qme,YSo,KSo,ZSo,N,rb,jme,eRo,oRo,OG,rRo,tRo,aRo,tb,Dme,nRo,sRo,VG,lRo,iRo,dRo,ab,Gme,cRo,fRo,XG,mRo,gRo,hRo,nb,Ome,pRo,_Ro,zG,uRo,bRo,vRo,sb,Vme,FRo,TRo,WG,MRo,ERo,CRo,lb,Xme,wRo,ARo,QG,LRo,yRo,xRo,ib,zme,$Ro,kRo,HG,SRo,RRo,PRo,db,Wme,BRo,IRo,UG,NRo,qRo,jRo,cb,Qme,DRo,GRo,JG,ORo,VRo,XRo,fb,Hme,zRo,WRo,YG,QRo,HRo,URo,mb,Ume,JRo,YRo,KG,KRo,ZRo,ePo,gb,Jme,oPo,rPo,ZG,tPo,aPo,nPo,hb,Yme,sPo,lPo,eO,iPo,dPo,cPo,pb,Kme,fPo,mPo,oO,gPo,hPo,pPo,_b,Zme,_Po,uPo,rO,bPo,vPo,FPo,ub,ege,TPo,MPo,tO,EPo,CPo,wPo,bb,oge,APo,LPo,aO,yPo,xPo,$Po,vb,rge,kPo,SPo,nO,RPo,PPo,BPo,Fb,tge,IPo,NPo,sO,qPo,jPo,DPo,Tb,age,GPo,OPo,lO,VPo,XPo,zPo,Mb,nge,WPo,QPo,iO,HPo,UPo,JPo,Eb,sge,YPo,KPo,dO,ZPo,eBo,oBo,Cb,lge,rBo,tBo,cO,aBo,nBo,sBo,wb,ige,lBo,iBo,fO,dBo,cBo,fBo,Ab,dge,mBo,gBo,mO,hBo,pBo,_Bo,Lb,cge,uBo,bBo,gO,vBo,FBo,TBo,yb,fge,MBo,EBo,hO,CBo,wBo,ABo,xb,mge,LBo,yBo,pO,xBo,$Bo,kBo,$b,gge,SBo,RBo,_O,PBo,BBo,IBo,kb,hge,NBo,qBo,uO,jBo,DBo,GBo,Sb,pge,OBo,VBo,bO,XBo,zBo,WBo,Rb,_ge,QBo,HBo,vO,UBo,JBo,YBo,Pb,uge,KBo,ZBo,FO,eIo,oIo,rIo,Bb,bge,tIo,aIo,TO,nIo,sIo,lIo,Ib,vge,iIo,dIo,MO,cIo,fIo,mIo,Nb,Fge,gIo,hIo,EO,pIo,_Io,uIo,qb,Tge,bIo,vIo,CO,FIo,TIo,MIo,jb,Mge,EIo,CIo,wO,wIo,AIo,LIo,Db,Ege,yIo,xIo,AO,$Io,kIo,SIo,Gb,Cge,RIo,PIo,LO,BIo,IIo,NIo,Ob,wge,qIo,jIo,yO,DIo,GIo,OIo,Vb,Age,VIo,XIo,xO,zIo,WIo,QIo,Xb,Lge,HIo,UIo,$O,JIo,YIo,KIo,zb,yge,ZIo,eNo,kO,oNo,rNo,tNo,Wb,xge,aNo,nNo,SO,sNo,lNo,iNo,Qb,$ge,dNo,cNo,RO,fNo,mNo,gNo,Hb,kge,hNo,pNo,PO,_No,uNo,bNo,Ub,vNo,Sge,FNo,TNo,Rge,MNo,ENo,Jb,Vje,zi,Yb,Pge,QL,CNo,Bge,wNo,Xje,Po,HL,ANo,Wi,LNo,BO,yNo,xNo,IO,$No,kNo,SNo,UL,RNo,Ige,PNo,BNo,INo,dt,JL,NNo,Nge,qNo,jNo,Qi,DNo,qge,GNo,ONo,NO,VNo,XNo,zNo,Kb,WNo,ro,YL,QNo,jge,HNo,UNo,Pa,JNo,Dge,YNo,KNo,Gge,ZNo,eqo,Oge,oqo,rqo,tqo,Z,Zb,Vge,aqo,nqo,qO,sqo,lqo,iqo,e2,Xge,dqo,cqo,jO,fqo,mqo,gqo,o2,zge,hqo,pqo,DO,_qo,uqo,bqo,r2,Wge,vqo,Fqo,GO,Tqo,Mqo,Eqo,t2,Qge,Cqo,wqo,OO,Aqo,Lqo,yqo,a2,Hge,xqo,$qo,VO,kqo,Sqo,Rqo,n2,Uge,Pqo,Bqo,XO,Iqo,Nqo,qqo,s2,Jge,jqo,Dqo,zO,Gqo,Oqo,Vqo,l2,Yge,Xqo,zqo,WO,Wqo,Qqo,Hqo,i2,Kge,Uqo,Jqo,QO,Yqo,Kqo,Zqo,d2,Zge,ejo,ojo,HO,rjo,tjo,ajo,c2,ehe,njo,sjo,UO,ljo,ijo,djo,f2,ohe,cjo,fjo,JO,mjo,gjo,hjo,m2,rhe,pjo,_jo,YO,ujo,bjo,vjo,g2,the,Fjo,Tjo,KO,Mjo,Ejo,Cjo,h2,ahe,wjo,Ajo,ZO,Ljo,yjo,xjo,p2,nhe,$jo,kjo,eV,Sjo,Rjo,Pjo,_2,she,Bjo,Ijo,oV,Njo,qjo,jjo,u2,lhe,Djo,Gjo,rV,Ojo,Vjo,Xjo,b2,ihe,zjo,Wjo,tV,Qjo,Hjo,Ujo,v2,dhe,Jjo,Yjo,aV,Kjo,Zjo,eDo,F2,che,oDo,rDo,nV,tDo,aDo,nDo,T2,fhe,sDo,lDo,sV,iDo,dDo,cDo,M2,mhe,fDo,mDo,lV,gDo,hDo,pDo,E2,ghe,_Do,uDo,iV,bDo,vDo,FDo,C2,hhe,TDo,MDo,dV,EDo,CDo,wDo,w2,phe,ADo,LDo,cV,yDo,xDo,$Do,A2,_he,kDo,SDo,fV,RDo,PDo,BDo,L2,uhe,IDo,NDo,mV,qDo,jDo,DDo,y2,GDo,bhe,ODo,VDo,vhe,XDo,zDo,x2,zje,Hi,$2,Fhe,KL,WDo,The,QDo,Wje,Bo,ZL,HDo,Ui,UDo,gV,JDo,YDo,hV,KDo,ZDo,eGo,ey,oGo,Mhe,rGo,tGo,aGo,ct,oy,nGo,Ehe,sGo,lGo,Ji,iGo,Che,dGo,cGo,pV,fGo,mGo,gGo,k2,hGo,to,ry,pGo,whe,_Go,uGo,Ba,bGo,Ahe,vGo,FGo,Lhe,TGo,MGo,yhe,EGo,CGo,wGo,Yr,S2,xhe,AGo,LGo,_V,yGo,xGo,$Go,R2,$he,kGo,SGo,uV,RGo,PGo,BGo,P2,khe,IGo,NGo,bV,qGo,jGo,DGo,B2,She,GGo,OGo,vV,VGo,XGo,zGo,I2,Rhe,WGo,QGo,FV,HGo,UGo,JGo,N2,YGo,Phe,KGo,ZGo,Bhe,eOo,oOo,q2,Qje,Yi,j2,Ihe,ty,rOo,Nhe,tOo,Hje,Io,ay,aOo,Ki,nOo,TV,sOo,lOo,MV,iOo,dOo,cOo,ny,fOo,qhe,mOo,gOo,hOo,ft,sy,pOo,jhe,_Oo,uOo,Zi,bOo,Dhe,vOo,FOo,EV,TOo,MOo,EOo,D2,COo,ao,ly,wOo,Ghe,AOo,LOo,Ia,yOo,Ohe,xOo,$Oo,Vhe,kOo,SOo,Xhe,ROo,POo,BOo,U,G2,zhe,IOo,NOo,CV,qOo,jOo,DOo,O2,Whe,GOo,OOo,wV,VOo,XOo,zOo,V2,Qhe,WOo,QOo,AV,HOo,UOo,JOo,X2,Hhe,YOo,KOo,LV,ZOo,eVo,oVo,z2,Uhe,rVo,tVo,yV,aVo,nVo,sVo,W2,Jhe,lVo,iVo,xV,dVo,cVo,fVo,Q2,Yhe,mVo,gVo,$V,hVo,pVo,_Vo,H2,Khe,uVo,bVo,kV,vVo,FVo,TVo,U2,Zhe,MVo,EVo,SV,CVo,wVo,AVo,J2,epe,LVo,yVo,RV,xVo,$Vo,kVo,Y2,ope,SVo,RVo,PV,PVo,BVo,IVo,K2,rpe,NVo,qVo,BV,jVo,DVo,GVo,Z2,tpe,OVo,VVo,IV,XVo,zVo,WVo,ev,ape,QVo,HVo,NV,UVo,JVo,YVo,ov,npe,KVo,ZVo,qV,eXo,oXo,rXo,rv,spe,tXo,aXo,jV,nXo,sXo,lXo,tv,lpe,iXo,dXo,DV,cXo,fXo,mXo,av,ipe,gXo,hXo,GV,pXo,_Xo,uXo,nv,dpe,bXo,vXo,OV,FXo,TXo,MXo,sv,cpe,EXo,CXo,VV,wXo,AXo,LXo,lv,fpe,yXo,xXo,XV,$Xo,kXo,SXo,iv,mpe,RXo,PXo,zV,BXo,IXo,NXo,dv,gpe,qXo,jXo,WV,DXo,GXo,OXo,cv,hpe,VXo,XXo,QV,zXo,WXo,QXo,fv,ppe,HXo,UXo,HV,JXo,YXo,KXo,mv,_pe,ZXo,ezo,UV,ozo,rzo,tzo,gv,upe,azo,nzo,JV,szo,lzo,izo,hv,bpe,dzo,czo,YV,fzo,mzo,gzo,pv,vpe,hzo,pzo,KV,_zo,uzo,bzo,_v,Fpe,vzo,Fzo,ZV,Tzo,Mzo,Ezo,uv,Tpe,Czo,wzo,eX,Azo,Lzo,yzo,bv,Mpe,xzo,$zo,oX,kzo,Szo,Rzo,vv,Epe,Pzo,Bzo,rX,Izo,Nzo,qzo,Fv,Cpe,jzo,Dzo,tX,Gzo,Ozo,Vzo,Tv,Xzo,wpe,zzo,Wzo,Ape,Qzo,Hzo,Mv,Uje,ed,Ev,Lpe,iy,Uzo,ype,Jzo,Jje,No,dy,Yzo,od,Kzo,aX,Zzo,eWo,nX,oWo,rWo,tWo,cy,aWo,xpe,nWo,sWo,lWo,mt,fy,iWo,$pe,dWo,cWo,rd,fWo,kpe,mWo,gWo,sX,hWo,pWo,_Wo,Cv,uWo,no,my,bWo,Spe,vWo,FWo,Na,TWo,Rpe,MWo,EWo,Ppe,CWo,wWo,Bpe,AWo,LWo,yWo,V,wv,Ipe,xWo,$Wo,lX,kWo,SWo,RWo,Av,Npe,PWo,BWo,iX,IWo,NWo,qWo,Lv,qpe,jWo,DWo,dX,GWo,OWo,VWo,yv,jpe,XWo,zWo,cX,WWo,QWo,HWo,xv,Dpe,UWo,JWo,fX,YWo,KWo,ZWo,$v,Gpe,eQo,oQo,mX,rQo,tQo,aQo,kv,Ope,nQo,sQo,gX,lQo,iQo,dQo,Sv,Vpe,cQo,fQo,hX,mQo,gQo,hQo,Rv,Xpe,pQo,_Qo,pX,uQo,bQo,vQo,Pv,zpe,FQo,TQo,_X,MQo,EQo,CQo,Bv,Wpe,wQo,AQo,uX,LQo,yQo,xQo,Iv,Qpe,$Qo,kQo,bX,SQo,RQo,PQo,Nv,Hpe,BQo,IQo,vX,NQo,qQo,jQo,qv,Upe,DQo,GQo,FX,OQo,VQo,XQo,jv,Jpe,zQo,WQo,TX,QQo,HQo,UQo,Dv,Ype,JQo,YQo,MX,KQo,ZQo,eHo,Gv,Kpe,oHo,rHo,EX,tHo,aHo,nHo,Ov,Zpe,sHo,lHo,CX,iHo,dHo,cHo,Vv,e_e,fHo,mHo,wX,gHo,hHo,pHo,Xv,o_e,_Ho,uHo,AX,bHo,vHo,FHo,zv,r_e,THo,MHo,LX,EHo,CHo,wHo,Wv,t_e,AHo,LHo,yX,yHo,xHo,$Ho,Qv,a_e,kHo,SHo,xX,RHo,PHo,BHo,Hv,n_e,IHo,NHo,$X,qHo,jHo,DHo,Uv,s_e,GHo,OHo,kX,VHo,XHo,zHo,Jv,l_e,WHo,QHo,SX,HHo,UHo,JHo,Yv,i_e,YHo,KHo,RX,ZHo,eUo,oUo,Kv,d_e,rUo,tUo,PX,aUo,nUo,sUo,Zv,c_e,lUo,iUo,BX,dUo,cUo,fUo,eF,f_e,mUo,gUo,IX,hUo,pUo,_Uo,oF,m_e,uUo,bUo,NX,vUo,FUo,TUo,rF,g_e,MUo,EUo,qX,CUo,wUo,AUo,tF,h_e,LUo,yUo,jX,xUo,$Uo,kUo,aF,p_e,SUo,RUo,DX,PUo,BUo,IUo,nF,__e,NUo,qUo,GX,jUo,DUo,GUo,sF,u_e,OUo,VUo,OX,XUo,zUo,WUo,lF,b_e,QUo,HUo,VX,UUo,JUo,YUo,iF,v_e,KUo,ZUo,XX,eJo,oJo,rJo,dF,F_e,tJo,aJo,zX,nJo,sJo,lJo,cF,T_e,iJo,dJo,WX,cJo,fJo,mJo,fF,gJo,M_e,hJo,pJo,E_e,_Jo,uJo,mF,Yje,td,gF,C_e,gy,bJo,w_e,vJo,Kje,qo,hy,FJo,ad,TJo,QX,MJo,EJo,HX,CJo,wJo,AJo,py,LJo,A_e,yJo,xJo,$Jo,gt,_y,kJo,L_e,SJo,RJo,nd,PJo,y_e,BJo,IJo,UX,NJo,qJo,jJo,hF,DJo,so,uy,GJo,x_e,OJo,VJo,qa,XJo,$_e,zJo,WJo,k_e,QJo,HJo,S_e,UJo,JJo,YJo,R_e,pF,P_e,KJo,ZJo,JX,eYo,oYo,rYo,_F,tYo,B_e,aYo,nYo,I_e,sYo,lYo,uF,Zje,sd,bF,N_e,by,iYo,q_e,dYo,eDe,jo,vy,cYo,ld,fYo,YX,mYo,gYo,KX,hYo,pYo,_Yo,Fy,uYo,j_e,bYo,vYo,FYo,ht,Ty,TYo,D_e,MYo,EYo,id,CYo,G_e,wYo,AYo,ZX,LYo,yYo,xYo,vF,$Yo,lo,My,kYo,O_e,SYo,RYo,ja,PYo,V_e,BYo,IYo,X_e,NYo,qYo,z_e,jYo,DYo,GYo,ve,FF,W_e,OYo,VYo,ez,XYo,zYo,WYo,TF,Q_e,QYo,HYo,oz,UYo,JYo,YYo,MF,H_e,KYo,ZYo,rz,eKo,oKo,rKo,EF,U_e,tKo,aKo,tz,nKo,sKo,lKo,Is,J_e,iKo,dKo,az,cKo,fKo,nz,mKo,gKo,hKo,CF,Y_e,pKo,_Ko,sz,uKo,bKo,vKo,Ns,K_e,FKo,TKo,lz,MKo,EKo,iz,CKo,wKo,AKo,pt,Z_e,LKo,yKo,dz,xKo,$Ko,cz,kKo,SKo,fz,RKo,PKo,BKo,wF,eue,IKo,NKo,mz,qKo,jKo,DKo,AF,oue,GKo,OKo,gz,VKo,XKo,zKo,LF,rue,WKo,QKo,hz,HKo,UKo,JKo,yF,tue,YKo,KKo,pz,ZKo,eZo,oZo,xF,aue,rZo,tZo,_z,aZo,nZo,sZo,$F,nue,lZo,iZo,uz,dZo,cZo,fZo,kF,sue,mZo,gZo,bz,hZo,pZo,_Zo,SF,uZo,lue,bZo,vZo,iue,FZo,TZo,RF,oDe,dd,PF,due,Ey,MZo,cue,EZo,rDe,Do,Cy,CZo,cd,wZo,vz,AZo,LZo,Fz,yZo,xZo,$Zo,wy,kZo,fue,SZo,RZo,PZo,_t,Ay,BZo,mue,IZo,NZo,fd,qZo,gue,jZo,DZo,Tz,GZo,OZo,VZo,BF,XZo,io,Ly,zZo,hue,WZo,QZo,Da,HZo,pue,UZo,JZo,_ue,YZo,KZo,uue,ZZo,eer,oer,bue,IF,vue,rer,ter,Mz,aer,ner,ser,NF,ler,Fue,ier,der,Tue,cer,fer,qF,tDe,md,jF,Mue,yy,mer,Eue,ger,aDe,Go,xy,her,gd,per,Ez,_er,uer,Cz,ber,ver,Fer,$y,Ter,Cue,Mer,Eer,Cer,ut,ky,wer,wue,Aer,Ler,hd,yer,Aue,xer,$er,wz,ker,Ser,Rer,DF,Per,co,Sy,Ber,Lue,Ier,Ner,Ga,qer,yue,jer,Der,xue,Ger,Oer,$ue,Ver,Xer,zer,Re,GF,kue,Wer,Qer,Az,Her,Uer,Jer,OF,Sue,Yer,Ker,Lz,Zer,eor,oor,VF,Rue,ror,tor,yz,aor,nor,sor,XF,Pue,lor,ior,xz,dor,cor,mor,zF,Bue,gor,hor,$z,por,_or,uor,WF,Iue,bor,vor,kz,For,Tor,Mor,QF,Nue,Eor,Cor,Sz,wor,Aor,Lor,HF,que,yor,xor,Rz,$or,kor,Sor,UF,jue,Ror,Por,Pz,Bor,Ior,Nor,JF,qor,Due,jor,Dor,Gue,Gor,Oor,YF,nDe,pd,KF,Oue,Ry,Vor,Vue,Xor,sDe,Oo,Py,zor,_d,Wor,Bz,Qor,Hor,Iz,Uor,Jor,Yor,By,Kor,Xue,Zor,err,orr,bt,Iy,rrr,zue,trr,arr,ud,nrr,Wue,srr,lrr,Nz,irr,drr,crr,ZF,frr,fo,Ny,mrr,Que,grr,hrr,Oa,prr,Hue,_rr,urr,Uue,brr,vrr,Jue,Frr,Trr,Mrr,Kr,eT,Yue,Err,Crr,qz,wrr,Arr,Lrr,oT,Kue,yrr,xrr,jz,$rr,krr,Srr,rT,Zue,Rrr,Prr,Dz,Brr,Irr,Nrr,tT,e1e,qrr,jrr,Gz,Drr,Grr,Orr,aT,o1e,Vrr,Xrr,Oz,zrr,Wrr,Qrr,nT,Hrr,r1e,Urr,Jrr,t1e,Yrr,Krr,sT,lDe,bd,lT,a1e,qy,Zrr,n1e,etr,iDe,Vo,jy,otr,vd,rtr,Vz,ttr,atr,Xz,ntr,str,ltr,Dy,itr,s1e,dtr,ctr,ftr,vt,Gy,mtr,l1e,gtr,htr,Fd,ptr,i1e,_tr,utr,zz,btr,vtr,Ftr,iT,Ttr,mo,Oy,Mtr,d1e,Etr,Ctr,Va,wtr,c1e,Atr,Ltr,f1e,ytr,xtr,m1e,$tr,ktr,Str,Le,dT,g1e,Rtr,Ptr,Wz,Btr,Itr,Ntr,cT,h1e,qtr,jtr,Qz,Dtr,Gtr,Otr,fT,p1e,Vtr,Xtr,Hz,ztr,Wtr,Qtr,mT,_1e,Htr,Utr,Uz,Jtr,Ytr,Ktr,gT,u1e,Ztr,ear,Jz,oar,rar,tar,hT,b1e,aar,nar,Yz,sar,lar,iar,pT,v1e,dar,car,Kz,far,mar,gar,_T,F1e,har,par,Zz,_ar,uar,bar,uT,T1e,Far,Tar,eW,Mar,Ear,Car,bT,M1e,war,Aar,oW,Lar,yar,xar,vT,$ar,E1e,kar,Sar,C1e,Rar,Par,FT,dDe,Td,TT,w1e,Vy,Bar,A1e,Iar,cDe,Xo,Xy,Nar,Md,qar,rW,jar,Dar,tW,Gar,Oar,Var,zy,Xar,L1e,zar,War,Qar,Ft,Wy,Har,y1e,Uar,Jar,Ed,Yar,x1e,Kar,Zar,aW,enr,onr,rnr,MT,tnr,go,Qy,anr,$1e,nnr,snr,Xa,lnr,k1e,inr,dnr,S1e,cnr,fnr,R1e,mnr,gnr,hnr,Hy,ET,P1e,pnr,_nr,nW,unr,bnr,vnr,CT,B1e,Fnr,Tnr,sW,Mnr,Enr,Cnr,wT,wnr,I1e,Anr,Lnr,N1e,ynr,xnr,AT,fDe,Cd,LT,q1e,Uy,$nr,j1e,knr,mDe,zo,Jy,Snr,wd,Rnr,lW,Pnr,Bnr,iW,Inr,Nnr,qnr,Yy,jnr,D1e,Dnr,Gnr,Onr,Tt,Ky,Vnr,G1e,Xnr,znr,Ad,Wnr,O1e,Qnr,Hnr,dW,Unr,Jnr,Ynr,yT,Knr,ho,Zy,Znr,V1e,esr,osr,za,rsr,X1e,tsr,asr,z1e,nsr,ssr,W1e,lsr,isr,dsr,Zr,xT,Q1e,csr,fsr,cW,msr,gsr,hsr,$T,H1e,psr,_sr,fW,usr,bsr,vsr,kT,U1e,Fsr,Tsr,mW,Msr,Esr,Csr,ST,J1e,wsr,Asr,gW,Lsr,ysr,xsr,RT,Y1e,$sr,ksr,hW,Ssr,Rsr,Psr,PT,Bsr,K1e,Isr,Nsr,Z1e,qsr,jsr,BT,gDe,Ld,IT,e3e,e8,Dsr,o3e,Gsr,hDe,Wo,o8,Osr,yd,Vsr,pW,Xsr,zsr,_W,Wsr,Qsr,Hsr,r8,Usr,r3e,Jsr,Ysr,Ksr,Mt,t8,Zsr,t3e,elr,olr,xd,rlr,a3e,tlr,alr,uW,nlr,slr,llr,NT,ilr,po,a8,dlr,n3e,clr,flr,Wa,mlr,s3e,glr,hlr,l3e,plr,_lr,i3e,ulr,blr,vlr,$d,qT,d3e,Flr,Tlr,bW,Mlr,Elr,Clr,jT,c3e,wlr,Alr,vW,Llr,ylr,xlr,DT,f3e,$lr,klr,FW,Slr,Rlr,Plr,GT,Blr,m3e,Ilr,Nlr,g3e,qlr,jlr,OT,pDe,kd,VT,h3e,n8,Dlr,p3e,Glr,_De,Qo,s8,Olr,Sd,Vlr,TW,Xlr,zlr,MW,Wlr,Qlr,Hlr,l8,Ulr,_3e,Jlr,Ylr,Klr,Et,i8,Zlr,u3e,eir,oir,Rd,rir,b3e,tir,air,EW,nir,sir,lir,XT,iir,_o,d8,dir,v3e,cir,fir,Qa,mir,F3e,gir,hir,T3e,pir,_ir,M3e,uir,bir,vir,c8,zT,E3e,Fir,Tir,CW,Mir,Eir,Cir,WT,C3e,wir,Air,wW,Lir,yir,xir,QT,$ir,w3e,kir,Sir,A3e,Rir,Pir,HT,uDe,Pd,UT,L3e,f8,Bir,y3e,Iir,bDe,Ho,m8,Nir,Bd,qir,AW,jir,Dir,LW,Gir,Oir,Vir,g8,Xir,x3e,zir,Wir,Qir,Ct,h8,Hir,$3e,Uir,Jir,Id,Yir,k3e,Kir,Zir,yW,edr,odr,rdr,JT,tdr,uo,p8,adr,S3e,ndr,sdr,Ha,ldr,R3e,idr,ddr,P3e,cdr,fdr,B3e,mdr,gdr,hdr,I3e,YT,N3e,pdr,_dr,xW,udr,bdr,vdr,KT,Fdr,q3e,Tdr,Mdr,j3e,Edr,Cdr,ZT,vDe,Nd,e7,D3e,_8,wdr,G3e,Adr,FDe,Uo,u8,Ldr,qd,ydr,$W,xdr,$dr,kW,kdr,Sdr,Rdr,b8,Pdr,O3e,Bdr,Idr,Ndr,wt,v8,qdr,V3e,jdr,Ddr,jd,Gdr,X3e,Odr,Vdr,SW,Xdr,zdr,Wdr,o7,Qdr,bo,F8,Hdr,z3e,Udr,Jdr,Ua,Ydr,W3e,Kdr,Zdr,Q3e,ecr,ocr,H3e,rcr,tcr,acr,Ja,r7,U3e,ncr,scr,RW,lcr,icr,dcr,t7,J3e,ccr,fcr,PW,mcr,gcr,hcr,a7,Y3e,pcr,_cr,BW,ucr,bcr,vcr,n7,K3e,Fcr,Tcr,IW,Mcr,Ecr,Ccr,s7,wcr,Z3e,Acr,Lcr,ebe,ycr,xcr,l7,TDe,Dd,i7,obe,T8,$cr,rbe,kcr,MDe,Jo,M8,Scr,Gd,Rcr,NW,Pcr,Bcr,qW,Icr,Ncr,qcr,E8,jcr,tbe,Dcr,Gcr,Ocr,At,C8,Vcr,abe,Xcr,zcr,Od,Wcr,nbe,Qcr,Hcr,jW,Ucr,Jcr,Ycr,d7,Kcr,vo,w8,Zcr,sbe,efr,ofr,Ya,rfr,lbe,tfr,afr,ibe,nfr,sfr,dbe,lfr,ifr,dfr,cbe,c7,fbe,cfr,ffr,DW,mfr,gfr,hfr,f7,pfr,mbe,_fr,ufr,gbe,bfr,vfr,m7,EDe,Vd,g7,hbe,A8,Ffr,pbe,Tfr,CDe,Yo,L8,Mfr,Xd,Efr,GW,Cfr,wfr,OW,Afr,Lfr,yfr,y8,xfr,_be,$fr,kfr,Sfr,Lt,x8,Rfr,ube,Pfr,Bfr,zd,Ifr,bbe,Nfr,qfr,VW,jfr,Dfr,Gfr,h7,Ofr,wr,$8,Vfr,vbe,Xfr,zfr,Ka,Wfr,Fbe,Qfr,Hfr,Tbe,Ufr,Jfr,Mbe,Yfr,Kfr,Zfr,q,p7,Ebe,emr,omr,XW,rmr,tmr,amr,_7,Cbe,nmr,smr,zW,lmr,imr,dmr,u7,wbe,cmr,fmr,WW,mmr,gmr,hmr,b7,Abe,pmr,_mr,QW,umr,bmr,vmr,v7,Lbe,Fmr,Tmr,HW,Mmr,Emr,Cmr,F7,ybe,wmr,Amr,UW,Lmr,ymr,xmr,T7,xbe,$mr,kmr,JW,Smr,Rmr,Pmr,M7,$be,Bmr,Imr,YW,Nmr,qmr,jmr,E7,kbe,Dmr,Gmr,KW,Omr,Vmr,Xmr,C7,Sbe,zmr,Wmr,ZW,Qmr,Hmr,Umr,w7,Rbe,Jmr,Ymr,eQ,Kmr,Zmr,egr,A7,Pbe,ogr,rgr,oQ,tgr,agr,ngr,L7,Bbe,sgr,lgr,rQ,igr,dgr,cgr,y7,Ibe,fgr,mgr,tQ,ggr,hgr,pgr,x7,Nbe,_gr,ugr,aQ,bgr,vgr,Fgr,$7,qbe,Tgr,Mgr,nQ,Egr,Cgr,wgr,k7,jbe,Agr,Lgr,sQ,ygr,xgr,$gr,qs,Dbe,kgr,Sgr,lQ,Rgr,Pgr,iQ,Bgr,Igr,Ngr,S7,Gbe,qgr,jgr,dQ,Dgr,Ggr,Ogr,R7,Obe,Vgr,Xgr,cQ,zgr,Wgr,Qgr,P7,Vbe,Hgr,Ugr,fQ,Jgr,Ygr,Kgr,B7,Xbe,Zgr,ehr,mQ,ohr,rhr,thr,I7,zbe,ahr,nhr,gQ,shr,lhr,ihr,N7,Wbe,dhr,chr,hQ,fhr,mhr,ghr,q7,Qbe,hhr,phr,pQ,_hr,uhr,bhr,j7,Hbe,vhr,Fhr,_Q,Thr,Mhr,Ehr,D7,Ube,Chr,whr,uQ,Ahr,Lhr,yhr,G7,Jbe,xhr,$hr,bQ,khr,Shr,Rhr,O7,Ybe,Phr,Bhr,vQ,Ihr,Nhr,qhr,V7,Kbe,jhr,Dhr,FQ,Ghr,Ohr,Vhr,X7,Zbe,Xhr,zhr,TQ,Whr,Qhr,Hhr,z7,e2e,Uhr,Jhr,MQ,Yhr,Khr,Zhr,W7,o2e,epr,opr,EQ,rpr,tpr,apr,Q7,r2e,npr,spr,CQ,lpr,ipr,dpr,H7,t2e,cpr,fpr,wQ,mpr,gpr,hpr,U7,a2e,ppr,_pr,AQ,upr,bpr,vpr,J7,n2e,Fpr,Tpr,LQ,Mpr,Epr,Cpr,Y7,s2e,wpr,Apr,yQ,Lpr,ypr,xpr,K7,l2e,$pr,kpr,xQ,Spr,Rpr,Ppr,Z7,i2e,Bpr,Ipr,$Q,Npr,qpr,jpr,eM,d2e,Dpr,Gpr,kQ,Opr,Vpr,Xpr,oM,c2e,zpr,Wpr,SQ,Qpr,Hpr,Upr,rM,f2e,Jpr,Ypr,RQ,Kpr,Zpr,e_r,tM,m2e,o_r,r_r,PQ,t_r,a_r,n_r,aM,g2e,s_r,l_r,BQ,i_r,d_r,c_r,nM,h2e,f_r,m_r,IQ,g_r,h_r,p_r,sM,p2e,__r,u_r,NQ,b_r,v_r,F_r,lM,wDe,Wd,iM,_2e,k8,T_r,u2e,M_r,ADe,Ko,S8,E_r,Qd,C_r,qQ,w_r,A_r,jQ,L_r,y_r,x_r,R8,$_r,b2e,k_r,S_r,R_r,yt,P8,P_r,v2e,B_r,I_r,Hd,N_r,F2e,q_r,j_r,DQ,D_r,G_r,O_r,dM,V_r,Ar,B8,X_r,T2e,z_r,W_r,Za,Q_r,M2e,H_r,U_r,E2e,J_r,Y_r,C2e,K_r,Z_r,eur,se,cM,w2e,our,rur,GQ,tur,aur,nur,fM,A2e,sur,lur,OQ,iur,dur,cur,mM,L2e,fur,mur,VQ,gur,hur,pur,gM,y2e,_ur,uur,XQ,bur,vur,Fur,hM,x2e,Tur,Mur,zQ,Eur,Cur,wur,pM,$2e,Aur,Lur,WQ,yur,xur,$ur,_M,k2e,kur,Sur,QQ,Rur,Pur,Bur,uM,S2e,Iur,Nur,HQ,qur,jur,Dur,bM,R2e,Gur,Our,UQ,Vur,Xur,zur,vM,P2e,Wur,Qur,JQ,Hur,Uur,Jur,FM,B2e,Yur,Kur,YQ,Zur,e1r,o1r,TM,I2e,r1r,t1r,KQ,a1r,n1r,s1r,MM,N2e,l1r,i1r,ZQ,d1r,c1r,f1r,EM,q2e,m1r,g1r,eH,h1r,p1r,_1r,CM,j2e,u1r,b1r,oH,v1r,F1r,T1r,wM,D2e,M1r,E1r,rH,C1r,w1r,A1r,AM,G2e,L1r,y1r,tH,x1r,$1r,k1r,LM,O2e,S1r,R1r,aH,P1r,B1r,I1r,yM,V2e,N1r,q1r,nH,j1r,D1r,G1r,xM,X2e,O1r,V1r,sH,X1r,z1r,W1r,$M,z2e,Q1r,H1r,lH,U1r,J1r,Y1r,kM,W2e,K1r,Z1r,iH,e3r,o3r,r3r,SM,Q2e,t3r,a3r,dH,n3r,s3r,l3r,RM,LDe,Ud,PM,H2e,I8,i3r,U2e,d3r,yDe,Zo,N8,c3r,Jd,f3r,cH,m3r,g3r,fH,h3r,p3r,_3r,q8,u3r,J2e,b3r,v3r,F3r,xt,j8,T3r,Y2e,M3r,E3r,Yd,C3r,K2e,w3r,A3r,mH,L3r,y3r,x3r,BM,$3r,Lr,D8,k3r,Z2e,S3r,R3r,en,P3r,eve,B3r,I3r,ove,N3r,q3r,rve,j3r,D3r,G3r,Me,IM,tve,O3r,V3r,gH,X3r,z3r,W3r,NM,ave,Q3r,H3r,hH,U3r,J3r,Y3r,qM,nve,K3r,Z3r,pH,ebr,obr,rbr,jM,sve,tbr,abr,_H,nbr,sbr,lbr,DM,lve,ibr,dbr,uH,cbr,fbr,mbr,GM,ive,gbr,hbr,bH,pbr,_br,ubr,OM,dve,bbr,vbr,vH,Fbr,Tbr,Mbr,VM,cve,Ebr,Cbr,FH,wbr,Abr,Lbr,XM,fve,ybr,xbr,TH,$br,kbr,Sbr,zM,mve,Rbr,Pbr,MH,Bbr,Ibr,Nbr,WM,gve,qbr,jbr,EH,Dbr,Gbr,Obr,QM,hve,Vbr,Xbr,CH,zbr,Wbr,Qbr,HM,pve,Hbr,Ubr,wH,Jbr,Ybr,Kbr,UM,xDe,Kd,JM,_ve,G8,Zbr,uve,e2r,$De,er,O8,o2r,Zd,r2r,AH,t2r,a2r,LH,n2r,s2r,l2r,V8,i2r,bve,d2r,c2r,f2r,$t,X8,m2r,vve,g2r,h2r,ec,p2r,Fve,_2r,u2r,yH,b2r,v2r,F2r,YM,T2r,yr,z8,M2r,Tve,E2r,C2r,on,w2r,Mve,A2r,L2r,Eve,y2r,x2r,Cve,$2r,k2r,S2r,rn,KM,wve,R2r,P2r,xH,B2r,I2r,N2r,ZM,Ave,q2r,j2r,$H,D2r,G2r,O2r,e4,Lve,V2r,X2r,kH,z2r,W2r,Q2r,o4,yve,H2r,U2r,SH,J2r,Y2r,K2r,r4,kDe,oc,t4,xve,W8,Z2r,$ve,evr,SDe,or,Q8,ovr,rc,rvr,RH,tvr,avr,PH,nvr,svr,lvr,H8,ivr,kve,dvr,cvr,fvr,kt,U8,mvr,Sve,gvr,hvr,tc,pvr,Rve,_vr,uvr,BH,bvr,vvr,Fvr,a4,Tvr,xr,J8,Mvr,Pve,Evr,Cvr,tn,wvr,Bve,Avr,Lvr,Ive,yvr,xvr,Nve,$vr,kvr,Svr,ie,n4,qve,Rvr,Pvr,IH,Bvr,Ivr,Nvr,s4,jve,qvr,jvr,NH,Dvr,Gvr,Ovr,l4,Dve,Vvr,Xvr,qH,zvr,Wvr,Qvr,i4,Gve,Hvr,Uvr,jH,Jvr,Yvr,Kvr,d4,Ove,Zvr,eFr,DH,oFr,rFr,tFr,c4,Vve,aFr,nFr,GH,sFr,lFr,iFr,f4,Xve,dFr,cFr,OH,fFr,mFr,gFr,m4,zve,hFr,pFr,VH,_Fr,uFr,bFr,g4,Wve,vFr,FFr,XH,TFr,MFr,EFr,h4,Qve,CFr,wFr,zH,AFr,LFr,yFr,p4,Hve,xFr,$Fr,WH,kFr,SFr,RFr,_4,Uve,PFr,BFr,QH,IFr,NFr,qFr,u4,Jve,jFr,DFr,HH,GFr,OFr,VFr,b4,Yve,XFr,zFr,UH,WFr,QFr,HFr,v4,Kve,UFr,JFr,JH,YFr,KFr,ZFr,F4,Zve,eTr,oTr,YH,rTr,tTr,aTr,T4,eFe,nTr,sTr,KH,lTr,iTr,dTr,M4,oFe,cTr,fTr,ZH,mTr,gTr,hTr,E4,rFe,pTr,_Tr,eU,uTr,bTr,vTr,C4,tFe,FTr,TTr,oU,MTr,ETr,CTr,w4,RDe,ac,A4,aFe,Y8,wTr,nFe,ATr,PDe,rr,K8,LTr,nc,yTr,rU,xTr,$Tr,tU,kTr,STr,RTr,Z8,PTr,sFe,BTr,ITr,NTr,St,e9,qTr,lFe,jTr,DTr,sc,GTr,iFe,OTr,VTr,aU,XTr,zTr,WTr,L4,QTr,$r,o9,HTr,dFe,UTr,JTr,an,YTr,cFe,KTr,ZTr,fFe,e7r,o7r,mFe,r7r,t7r,a7r,ye,y4,gFe,n7r,s7r,nU,l7r,i7r,d7r,x4,hFe,c7r,f7r,sU,m7r,g7r,h7r,$4,pFe,p7r,_7r,lU,u7r,b7r,v7r,k4,_Fe,F7r,T7r,iU,M7r,E7r,C7r,S4,uFe,w7r,A7r,dU,L7r,y7r,x7r,R4,bFe,$7r,k7r,cU,S7r,R7r,P7r,P4,vFe,B7r,I7r,fU,N7r,q7r,j7r,B4,FFe,D7r,G7r,mU,O7r,V7r,X7r,I4,TFe,z7r,W7r,gU,Q7r,H7r,U7r,N4,MFe,J7r,Y7r,hU,K7r,Z7r,eMr,q4,BDe,lc,j4,EFe,r9,oMr,CFe,rMr,IDe,tr,t9,tMr,ic,aMr,pU,nMr,sMr,_U,lMr,iMr,dMr,a9,cMr,wFe,fMr,mMr,gMr,Rt,n9,hMr,AFe,pMr,_Mr,dc,uMr,LFe,bMr,vMr,uU,FMr,TMr,MMr,D4,EMr,kr,s9,CMr,yFe,wMr,AMr,nn,LMr,xFe,yMr,xMr,$Fe,$Mr,kMr,kFe,SMr,RMr,PMr,oe,G4,SFe,BMr,IMr,bU,NMr,qMr,jMr,O4,RFe,DMr,GMr,vU,OMr,VMr,XMr,V4,PFe,zMr,WMr,FU,QMr,HMr,UMr,X4,BFe,JMr,YMr,TU,KMr,ZMr,e4r,z4,IFe,o4r,r4r,MU,t4r,a4r,n4r,W4,NFe,s4r,l4r,EU,i4r,d4r,c4r,Q4,qFe,f4r,m4r,CU,g4r,h4r,p4r,H4,jFe,_4r,u4r,wU,b4r,v4r,F4r,U4,DFe,T4r,M4r,AU,E4r,C4r,w4r,J4,GFe,A4r,L4r,LU,y4r,x4r,$4r,Y4,OFe,k4r,S4r,yU,R4r,P4r,B4r,K4,VFe,I4r,N4r,xU,q4r,j4r,D4r,Z4,XFe,G4r,O4r,$U,V4r,X4r,z4r,eE,zFe,W4r,Q4r,kU,H4r,U4r,J4r,oE,WFe,Y4r,K4r,SU,Z4r,eEr,oEr,rE,QFe,rEr,tEr,RU,aEr,nEr,sEr,tE,HFe,lEr,iEr,PU,dEr,cEr,fEr,aE,UFe,mEr,gEr,BU,hEr,pEr,_Er,nE,JFe,uEr,bEr,IU,vEr,FEr,TEr,sE,YFe,MEr,EEr,NU,CEr,wEr,AEr,lE,KFe,LEr,yEr,qU,xEr,$Er,kEr,iE,ZFe,SEr,REr,jU,PEr,BEr,IEr,dE,eTe,NEr,qEr,DU,jEr,DEr,GEr,cE,oTe,OEr,VEr,GU,XEr,zEr,WEr,fE,rTe,QEr,HEr,OU,UEr,JEr,YEr,mE,tTe,KEr,ZEr,VU,eCr,oCr,rCr,gE,NDe,cc,hE,aTe,l9,tCr,nTe,aCr,qDe,ar,i9,nCr,fc,sCr,XU,lCr,iCr,zU,dCr,cCr,fCr,d9,mCr,sTe,gCr,hCr,pCr,Pt,c9,_Cr,lTe,uCr,bCr,mc,vCr,iTe,FCr,TCr,WU,MCr,ECr,CCr,pE,wCr,Sr,f9,ACr,dTe,LCr,yCr,sn,xCr,cTe,$Cr,kCr,fTe,SCr,RCr,mTe,PCr,BCr,ICr,pe,_E,gTe,NCr,qCr,QU,jCr,DCr,GCr,uE,hTe,OCr,VCr,HU,XCr,zCr,WCr,bE,pTe,QCr,HCr,UU,UCr,JCr,YCr,vE,_Te,KCr,ZCr,JU,e5r,o5r,r5r,FE,uTe,t5r,a5r,YU,n5r,s5r,l5r,TE,bTe,i5r,d5r,KU,c5r,f5r,m5r,ME,vTe,g5r,h5r,ZU,p5r,_5r,u5r,EE,FTe,b5r,v5r,eJ,F5r,T5r,M5r,CE,TTe,E5r,C5r,oJ,w5r,A5r,L5r,wE,MTe,y5r,x5r,rJ,$5r,k5r,S5r,AE,ETe,R5r,P5r,tJ,B5r,I5r,N5r,LE,CTe,q5r,j5r,aJ,D5r,G5r,O5r,yE,wTe,V5r,X5r,nJ,z5r,W5r,Q5r,xE,ATe,H5r,U5r,sJ,J5r,Y5r,K5r,$E,LTe,Z5r,e0r,lJ,o0r,r0r,t0r,kE,yTe,a0r,n0r,iJ,s0r,l0r,i0r,SE,xTe,d0r,c0r,dJ,f0r,m0r,g0r,RE,jDe,gc,PE,$Te,m9,h0r,kTe,p0r,DDe,nr,g9,_0r,hc,u0r,cJ,b0r,v0r,fJ,F0r,T0r,M0r,h9,E0r,STe,C0r,w0r,A0r,Bt,p9,L0r,RTe,y0r,x0r,pc,$0r,PTe,k0r,S0r,mJ,R0r,P0r,B0r,BE,I0r,Rr,_9,N0r,BTe,q0r,j0r,ln,D0r,ITe,G0r,O0r,NTe,V0r,X0r,qTe,z0r,W0r,Q0r,u9,IE,jTe,H0r,U0r,gJ,J0r,Y0r,K0r,NE,DTe,Z0r,ewr,hJ,owr,rwr,twr,qE,GDe,_c,jE,GTe,b9,awr,OTe,nwr,ODe,sr,v9,swr,uc,lwr,pJ,iwr,dwr,_J,cwr,fwr,mwr,F9,gwr,VTe,hwr,pwr,_wr,It,T9,uwr,XTe,bwr,vwr,bc,Fwr,zTe,Twr,Mwr,uJ,Ewr,Cwr,wwr,DE,Awr,Pr,M9,Lwr,WTe,ywr,xwr,dn,$wr,QTe,kwr,Swr,HTe,Rwr,Pwr,UTe,Bwr,Iwr,Nwr,JTe,GE,YTe,qwr,jwr,bJ,Dwr,Gwr,Owr,OE,VDe,vc,VE,KTe,E9,Vwr,ZTe,Xwr,XDe,lr,C9,zwr,Fc,Wwr,vJ,Qwr,Hwr,FJ,Uwr,Jwr,Ywr,w9,Kwr,e7e,Zwr,eAr,oAr,Nt,A9,rAr,o7e,tAr,aAr,Tc,nAr,r7e,sAr,lAr,TJ,iAr,dAr,cAr,XE,fAr,Br,L9,mAr,t7e,gAr,hAr,cn,pAr,a7e,_Ar,uAr,n7e,bAr,vAr,s7e,FAr,TAr,MAr,de,zE,l7e,EAr,CAr,MJ,wAr,AAr,LAr,WE,i7e,yAr,xAr,EJ,$Ar,kAr,SAr,QE,d7e,RAr,PAr,CJ,BAr,IAr,NAr,HE,c7e,qAr,jAr,wJ,DAr,GAr,OAr,UE,f7e,VAr,XAr,AJ,zAr,WAr,QAr,JE,m7e,HAr,UAr,LJ,JAr,YAr,KAr,YE,g7e,ZAr,e6r,yJ,o6r,r6r,t6r,KE,h7e,a6r,n6r,xJ,s6r,l6r,i6r,ZE,p7e,d6r,c6r,$J,f6r,m6r,g6r,eC,_7e,h6r,p6r,kJ,_6r,u6r,b6r,oC,u7e,v6r,F6r,SJ,T6r,M6r,E6r,rC,b7e,C6r,w6r,RJ,A6r,L6r,y6r,tC,v7e,x6r,$6r,PJ,k6r,S6r,R6r,aC,F7e,P6r,B6r,BJ,I6r,N6r,q6r,nC,T7e,j6r,D6r,IJ,G6r,O6r,V6r,sC,M7e,X6r,z6r,NJ,W6r,Q6r,H6r,lC,E7e,U6r,J6r,qJ,Y6r,K6r,Z6r,iC,C7e,eLr,oLr,jJ,rLr,tLr,aLr,dC,w7e,nLr,sLr,DJ,lLr,iLr,dLr,cC,A7e,cLr,fLr,GJ,mLr,gLr,hLr,fC,zDe,Mc,mC,L7e,y9,pLr,y7e,_Lr,WDe,ir,x9,uLr,Ec,bLr,OJ,vLr,FLr,VJ,TLr,MLr,ELr,$9,CLr,x7e,wLr,ALr,LLr,qt,k9,yLr,$7e,xLr,$Lr,Cc,kLr,k7e,SLr,RLr,XJ,PLr,BLr,ILr,gC,NLr,Ir,S9,qLr,S7e,jLr,DLr,fn,GLr,R7e,OLr,VLr,P7e,XLr,zLr,B7e,WLr,QLr,HLr,ce,hC,I7e,ULr,JLr,zJ,YLr,KLr,ZLr,pC,N7e,eyr,oyr,WJ,ryr,tyr,ayr,_C,q7e,nyr,syr,QJ,lyr,iyr,dyr,uC,j7e,cyr,fyr,HJ,myr,gyr,hyr,bC,D7e,pyr,_yr,UJ,uyr,byr,vyr,vC,G7e,Fyr,Tyr,JJ,Myr,Eyr,Cyr,FC,O7e,wyr,Ayr,YJ,Lyr,yyr,xyr,TC,V7e,$yr,kyr,KJ,Syr,Ryr,Pyr,MC,X7e,Byr,Iyr,ZJ,Nyr,qyr,jyr,EC,z7e,Dyr,Gyr,eY,Oyr,Vyr,Xyr,CC,W7e,zyr,Wyr,oY,Qyr,Hyr,Uyr,wC,Q7e,Jyr,Yyr,rY,Kyr,Zyr,e8r,AC,H7e,o8r,r8r,tY,t8r,a8r,n8r,LC,U7e,s8r,l8r,aY,i8r,d8r,c8r,yC,J7e,f8r,m8r,nY,g8r,h8r,p8r,xC,Y7e,_8r,u8r,sY,b8r,v8r,F8r,$C,K7e,T8r,M8r,lY,E8r,C8r,w8r,kC,Z7e,A8r,L8r,iY,y8r,x8r,$8r,SC,eMe,k8r,S8r,dY,R8r,P8r,B8r,RC,oMe,I8r,N8r,cY,q8r,j8r,D8r,PC,QDe,wc,BC,rMe,R9,G8r,tMe,O8r,HDe,dr,P9,V8r,Ac,X8r,fY,z8r,W8r,mY,Q8r,H8r,U8r,B9,J8r,aMe,Y8r,K8r,Z8r,jt,I9,e9r,nMe,o9r,r9r,Lc,t9r,sMe,a9r,n9r,gY,s9r,l9r,i9r,IC,d9r,Nr,N9,c9r,lMe,f9r,m9r,mn,g9r,iMe,h9r,p9r,dMe,_9r,u9r,cMe,b9r,v9r,F9r,fMe,NC,mMe,T9r,M9r,hY,E9r,C9r,w9r,qC,UDe,yc,jC,gMe,q9,A9r,hMe,L9r,JDe,cr,j9,y9r,xc,x9r,pY,$9r,k9r,_Y,S9r,R9r,P9r,D9,B9r,pMe,I9r,N9r,q9r,Dt,G9,j9r,_Me,D9r,G9r,$c,O9r,uMe,V9r,X9r,uY,z9r,W9r,Q9r,DC,H9r,qr,O9,U9r,bMe,J9r,Y9r,gn,K9r,vMe,Z9r,exr,FMe,oxr,rxr,TMe,txr,axr,nxr,MMe,GC,EMe,sxr,lxr,bY,ixr,dxr,cxr,OC,YDe,kc,VC,CMe,V9,fxr,wMe,mxr,KDe,fr,X9,gxr,Sc,hxr,vY,pxr,_xr,FY,uxr,bxr,vxr,z9,Fxr,AMe,Txr,Mxr,Exr,Gt,W9,Cxr,LMe,wxr,Axr,Rc,Lxr,yMe,yxr,xxr,TY,$xr,kxr,Sxr,XC,Rxr,jr,Q9,Pxr,xMe,Bxr,Ixr,hn,Nxr,$Me,qxr,jxr,kMe,Dxr,Gxr,SMe,Oxr,Vxr,Xxr,re,zC,RMe,zxr,Wxr,MY,Qxr,Hxr,Uxr,WC,PMe,Jxr,Yxr,EY,Kxr,Zxr,e$r,QC,BMe,o$r,r$r,CY,t$r,a$r,n$r,HC,IMe,s$r,l$r,wY,i$r,d$r,c$r,UC,NMe,f$r,m$r,AY,g$r,h$r,p$r,JC,qMe,_$r,u$r,LY,b$r,v$r,F$r,YC,jMe,T$r,M$r,yY,E$r,C$r,w$r,KC,DMe,A$r,L$r,xY,y$r,x$r,$$r,ZC,GMe,k$r,S$r,$Y,R$r,P$r,B$r,e5,OMe,I$r,N$r,kY,q$r,j$r,D$r,o5,VMe,G$r,O$r,SY,V$r,X$r,z$r,r5,XMe,W$r,Q$r,RY,H$r,U$r,J$r,t5,zMe,Y$r,K$r,PY,Z$r,ekr,okr,a5,WMe,rkr,tkr,BY,akr,nkr,skr,n5,QMe,lkr,ikr,IY,dkr,ckr,fkr,s5,HMe,mkr,gkr,NY,hkr,pkr,_kr,l5,UMe,ukr,bkr,qY,vkr,Fkr,Tkr,i5,JMe,Mkr,Ekr,jY,Ckr,wkr,Akr,d5,YMe,Lkr,ykr,DY,xkr,$kr,kkr,c5,KMe,Skr,Rkr,GY,Pkr,Bkr,Ikr,f5,ZMe,Nkr,qkr,OY,jkr,Dkr,Gkr,m5,e4e,Okr,Vkr,VY,Xkr,zkr,Wkr,g5,o4e,Qkr,Hkr,XY,Ukr,Jkr,Ykr,h5,r4e,Kkr,Zkr,zY,eSr,oSr,rSr,p5,t4e,tSr,aSr,WY,nSr,sSr,lSr,_5,a4e,iSr,dSr,QY,cSr,fSr,mSr,u5,ZDe,Pc,b5,n4e,H9,gSr,s4e,hSr,eGe,mr,U9,pSr,Bc,_Sr,HY,uSr,bSr,UY,vSr,FSr,TSr,J9,MSr,l4e,ESr,CSr,wSr,Ot,Y9,ASr,i4e,LSr,ySr,Ic,xSr,d4e,$Sr,kSr,JY,SSr,RSr,PSr,v5,BSr,Dr,K9,ISr,c4e,NSr,qSr,pn,jSr,f4e,DSr,GSr,m4e,OSr,VSr,g4e,XSr,zSr,WSr,xe,F5,h4e,QSr,HSr,YY,USr,JSr,YSr,T5,p4e,KSr,ZSr,KY,eRr,oRr,rRr,M5,_4e,tRr,aRr,ZY,nRr,sRr,lRr,E5,u4e,iRr,dRr,eK,cRr,fRr,mRr,C5,b4e,gRr,hRr,oK,pRr,_Rr,uRr,w5,v4e,bRr,vRr,rK,FRr,TRr,MRr,A5,F4e,ERr,CRr,tK,wRr,ARr,LRr,L5,T4e,yRr,xRr,aK,$Rr,kRr,SRr,y5,M4e,RRr,PRr,nK,BRr,IRr,NRr,x5,E4e,qRr,jRr,sK,DRr,GRr,ORr,$5,oGe,Nc,k5,C4e,Z9,VRr,w4e,XRr,rGe,gr,ex,zRr,qc,WRr,lK,QRr,HRr,iK,URr,JRr,YRr,ox,KRr,A4e,ZRr,ePr,oPr,Vt,rx,rPr,L4e,tPr,aPr,jc,nPr,y4e,sPr,lPr,dK,iPr,dPr,cPr,S5,fPr,Gr,tx,mPr,x4e,gPr,hPr,_n,pPr,$4e,_Pr,uPr,k4e,bPr,vPr,S4e,FPr,TPr,MPr,Ee,R5,R4e,EPr,CPr,cK,wPr,APr,LPr,P5,P4e,yPr,xPr,fK,$Pr,kPr,SPr,B5,B4e,RPr,PPr,mK,BPr,IPr,NPr,I5,I4e,qPr,jPr,gK,DPr,GPr,OPr,N5,N4e,VPr,XPr,hK,zPr,WPr,QPr,q5,q4e,HPr,UPr,pK,JPr,YPr,KPr,j5,j4e,ZPr,eBr,_K,oBr,rBr,tBr,D5,D4e,aBr,nBr,uK,sBr,lBr,iBr,G5,G4e,dBr,cBr,bK,fBr,mBr,gBr,O5,O4e,hBr,pBr,vK,_Br,uBr,bBr,V5,V4e,vBr,FBr,FK,TBr,MBr,EBr,X5,X4e,CBr,wBr,TK,ABr,LBr,yBr,z5,tGe,Dc,W5,z4e,ax,xBr,W4e,$Br,aGe,hr,nx,kBr,Gc,SBr,MK,RBr,PBr,EK,BBr,IBr,NBr,sx,qBr,Q4e,jBr,DBr,GBr,Xt,lx,OBr,H4e,VBr,XBr,Oc,zBr,U4e,WBr,QBr,CK,HBr,UBr,JBr,Q5,YBr,Or,ix,KBr,J4e,ZBr,eIr,un,oIr,Y4e,rIr,tIr,K4e,aIr,nIr,Z4e,sIr,lIr,iIr,$e,H5,eEe,dIr,cIr,wK,fIr,mIr,gIr,U5,oEe,hIr,pIr,AK,_Ir,uIr,bIr,J5,rEe,vIr,FIr,LK,TIr,MIr,EIr,Y5,tEe,CIr,wIr,yK,AIr,LIr,yIr,K5,aEe,xIr,$Ir,xK,kIr,SIr,RIr,Z5,nEe,PIr,BIr,$K,IIr,NIr,qIr,e0,sEe,jIr,DIr,kK,GIr,OIr,VIr,o0,lEe,XIr,zIr,SK,WIr,QIr,HIr,r0,iEe,UIr,JIr,RK,YIr,KIr,ZIr,t0,dEe,eNr,oNr,PK,rNr,tNr,aNr,a0,nGe,Vc,n0,cEe,dx,nNr,fEe,sNr,sGe,pr,cx,lNr,Xc,iNr,BK,dNr,cNr,IK,fNr,mNr,gNr,fx,hNr,mEe,pNr,_Nr,uNr,zt,mx,bNr,gEe,vNr,FNr,zc,TNr,hEe,MNr,ENr,NK,CNr,wNr,ANr,s0,LNr,Vr,gx,yNr,pEe,xNr,$Nr,bn,kNr,_Ee,SNr,RNr,uEe,PNr,BNr,bEe,INr,NNr,qNr,Pe,l0,vEe,jNr,DNr,qK,GNr,ONr,VNr,i0,FEe,XNr,zNr,jK,WNr,QNr,HNr,d0,TEe,UNr,JNr,DK,YNr,KNr,ZNr,c0,MEe,eqr,oqr,GK,rqr,tqr,aqr,f0,EEe,nqr,sqr,OK,lqr,iqr,dqr,m0,CEe,cqr,fqr,VK,mqr,gqr,hqr,g0,wEe,pqr,_qr,XK,uqr,bqr,vqr,h0,AEe,Fqr,Tqr,zK,Mqr,Eqr,Cqr,p0,LEe,wqr,Aqr,WK,Lqr,yqr,xqr,_0,lGe,Wc,u0,yEe,hx,$qr,xEe,kqr,iGe,_r,px,Sqr,Qc,Rqr,QK,Pqr,Bqr,HK,Iqr,Nqr,qqr,_x,jqr,$Ee,Dqr,Gqr,Oqr,Wt,ux,Vqr,kEe,Xqr,zqr,Hc,Wqr,SEe,Qqr,Hqr,UK,Uqr,Jqr,Yqr,b0,Kqr,Xr,bx,Zqr,REe,ejr,ojr,vn,rjr,PEe,tjr,ajr,BEe,njr,sjr,IEe,ljr,ijr,djr,ke,v0,NEe,cjr,fjr,JK,mjr,gjr,hjr,F0,qEe,pjr,_jr,YK,ujr,bjr,vjr,T0,jEe,Fjr,Tjr,KK,Mjr,Ejr,Cjr,M0,DEe,wjr,Ajr,ZK,Ljr,yjr,xjr,E0,GEe,$jr,kjr,eZ,Sjr,Rjr,Pjr,C0,OEe,Bjr,Ijr,oZ,Njr,qjr,jjr,w0,VEe,Djr,Gjr,rZ,Ojr,Vjr,Xjr,A0,XEe,zjr,Wjr,tZ,Qjr,Hjr,Ujr,L0,zEe,Jjr,Yjr,aZ,Kjr,Zjr,eDr,y0,WEe,oDr,rDr,nZ,tDr,aDr,nDr,x0,dGe,Uc,$0,QEe,vx,sDr,HEe,lDr,cGe,ur,Fx,iDr,Jc,dDr,sZ,cDr,fDr,lZ,mDr,gDr,hDr,Tx,pDr,UEe,_Dr,uDr,bDr,Qt,Mx,vDr,JEe,FDr,TDr,Yc,MDr,YEe,EDr,CDr,iZ,wDr,ADr,LDr,k0,yDr,zr,Ex,xDr,KEe,$Dr,kDr,Fn,SDr,ZEe,RDr,PDr,eCe,BDr,IDr,oCe,NDr,qDr,jDr,Se,S0,rCe,DDr,GDr,dZ,ODr,VDr,XDr,R0,tCe,zDr,WDr,cZ,QDr,HDr,UDr,P0,aCe,JDr,YDr,fZ,KDr,ZDr,eGr,B0,nCe,oGr,rGr,mZ,tGr,aGr,nGr,I0,sCe,sGr,lGr,gZ,iGr,dGr,cGr,N0,lCe,fGr,mGr,hZ,gGr,hGr,pGr,q0,iCe,_Gr,uGr,pZ,bGr,vGr,FGr,j0,dCe,TGr,MGr,_Z,EGr,CGr,wGr,D0,cCe,AGr,LGr,uZ,yGr,xGr,$Gr,G0,fCe,kGr,SGr,bZ,RGr,PGr,BGr,O0,fGe,Kc,V0,mCe,Cx,IGr,gCe,NGr,mGe,br,wx,qGr,Zc,jGr,vZ,DGr,GGr,FZ,OGr,VGr,XGr,Ax,zGr,hCe,WGr,QGr,HGr,Ht,Lx,UGr,pCe,JGr,YGr,ef,KGr,_Ce,ZGr,eOr,TZ,oOr,rOr,tOr,X0,aOr,Wr,yx,nOr,uCe,sOr,lOr,Tn,iOr,bCe,dOr,cOr,vCe,fOr,mOr,FCe,gOr,hOr,pOr,Oe,z0,TCe,_Or,uOr,MZ,bOr,vOr,FOr,W0,MCe,TOr,MOr,EZ,EOr,COr,wOr,Q0,ECe,AOr,LOr,CZ,yOr,xOr,$Or,H0,CCe,kOr,SOr,wZ,ROr,POr,BOr,U0,wCe,IOr,NOr,AZ,qOr,jOr,DOr,J0,ACe,GOr,OOr,LZ,VOr,XOr,zOr,Y0,LCe,WOr,QOr,yZ,HOr,UOr,JOr,K0,yCe,YOr,KOr,xZ,ZOr,eVr,oVr,Z0,gGe,of,ew,xCe,xx,rVr,$Ce,tVr,hGe,vr,$x,aVr,rf,nVr,$Z,sVr,lVr,kZ,iVr,dVr,cVr,kx,fVr,kCe,mVr,gVr,hVr,Ut,Sx,pVr,SCe,_Vr,uVr,tf,bVr,RCe,vVr,FVr,SZ,TVr,MVr,EVr,ow,CVr,Qr,Rx,wVr,PCe,AVr,LVr,Mn,yVr,BCe,xVr,$Vr,ICe,kVr,SVr,NCe,RVr,PVr,BVr,Ve,rw,qCe,IVr,NVr,RZ,qVr,jVr,DVr,tw,jCe,GVr,OVr,PZ,VVr,XVr,zVr,aw,DCe,WVr,QVr,BZ,HVr,UVr,JVr,nw,GCe,YVr,KVr,IZ,ZVr,eXr,oXr,sw,OCe,rXr,tXr,NZ,aXr,nXr,sXr,lw,VCe,lXr,iXr,qZ,dXr,cXr,fXr,iw,XCe,mXr,gXr,jZ,hXr,pXr,_Xr,dw,zCe,uXr,bXr,DZ,vXr,FXr,TXr,cw,pGe,af,fw,WCe,Px,MXr,QCe,EXr,_Ge,Fr,Bx,CXr,nf,wXr,GZ,AXr,LXr,OZ,yXr,xXr,$Xr,Ix,kXr,HCe,SXr,RXr,PXr,Jt,Nx,BXr,UCe,IXr,NXr,sf,qXr,JCe,jXr,DXr,VZ,GXr,OXr,VXr,mw,XXr,Hr,qx,zXr,YCe,WXr,QXr,En,HXr,KCe,UXr,JXr,ZCe,YXr,KXr,e5e,ZXr,ezr,ozr,o5e,gw,r5e,rzr,tzr,XZ,azr,nzr,szr,hw,uGe,lf,pw,t5e,jx,lzr,a5e,izr,bGe,Tr,Dx,dzr,df,czr,zZ,fzr,mzr,WZ,gzr,hzr,pzr,Gx,_zr,n5e,uzr,bzr,vzr,Yt,Ox,Fzr,s5e,Tzr,Mzr,cf,Ezr,l5e,Czr,wzr,QZ,Azr,Lzr,yzr,_w,xzr,Ur,Vx,$zr,i5e,kzr,Szr,Cn,Rzr,d5e,Pzr,Bzr,c5e,Izr,Nzr,f5e,qzr,jzr,Dzr,Xx,uw,m5e,Gzr,Ozr,HZ,Vzr,Xzr,zzr,bw,g5e,Wzr,Qzr,UZ,Hzr,Uzr,Jzr,vw,vGe,ff,Fw,h5e,zx,Yzr,p5e,Kzr,FGe,Mr,Wx,Zzr,mf,eWr,JZ,oWr,rWr,YZ,tWr,aWr,nWr,Qx,sWr,_5e,lWr,iWr,dWr,Kt,Hx,cWr,u5e,fWr,mWr,gf,gWr,b5e,hWr,pWr,KZ,_Wr,uWr,bWr,Tw,vWr,Jr,Ux,FWr,v5e,TWr,MWr,wn,EWr,F5e,CWr,wWr,T5e,AWr,LWr,M5e,yWr,xWr,$Wr,E5e,Mw,C5e,kWr,SWr,ZZ,RWr,PWr,BWr,Ew,TGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),z6=new te({}),W6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new IWr({props:{warning:!0,$$slots:{default:[oPt]},$$scope:{ctx:x}}}),Q6=new te({}),H6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L593"}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L616"}}),yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rPt]},$$scope:{ctx:x}}}),K6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L739"}}),Z6=new te({}),eL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L391"}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17313/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L405"}}),dh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L604"}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),Xh=new IWr({props:{$$slots:{default:[aPt]},$$scope:{ctx:x}}}),zh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:x}}}),cL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L89"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L103"}}),mp=new IWr({props:{$$slots:{default:[sPt]},$$scope:{ctx:x}}}),gp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:x}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L256"}}),uL=new te({}),bL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L742"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_p=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:x}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:x}}}),ML=new te({}),EL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L749"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_u=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:x}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),s1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fPt]},$$scope:{ctx:x}}}),LL=new te({}),yL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L764"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),i1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[mPt]},$$scope:{ctx:x}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:x}}}),SL=new te({}),RL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L771"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),U1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:x}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pPt]},$$scope:{ctx:x}}}),NL=new te({}),qL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L778"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_Pt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:x}}}),OL=new te({}),VL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L787"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:x}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L821"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:x}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:x}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L828"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:x}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:x}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L814"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:x}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Mv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:x}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L796"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Cv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:x}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:x}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L803"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:x}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:x}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L837"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:x}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L876"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:x}}}),yy=new te({}),xy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L883"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:x}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:x}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L906"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:x}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:x}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L890"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:x}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:x}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L897"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:x}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L915"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:x}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:x}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L922"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:x}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:x}}}),n8=new te({}),s8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L869"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:x}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:x}}}),f8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L844"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:x}}}),_8=new te({}),u8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L851"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:x}}}),T8=new te({}),M8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L860"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:x}}}),A8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:x}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:x}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:x}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:x}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:x}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iBt]},$$scope:{ctx:x}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dBt]},$$scope:{ctx:x}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cBt]},$$scope:{ctx:x}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fBt]},$$scope:{ctx:x}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[mBt]},$$scope:{ctx:x}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gBt]},$$scope:{ctx:x}}}),l9=new te({}),i9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),m9=new te({}),g9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bBt]},$$scope:{ctx:x}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),y9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),R9=new te({}),P9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),q9=new te({}),j9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),jx=new te({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[HBt]},$$scope:{ctx:x}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UBt]},$$scope:{ctx:x}}}),zx=new te({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[JBt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YBt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),G6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),O6=o("AutoConfig"),yn=o(", "),xn=a("a"),V6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),X6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),fk=o("will create a model that is an instance of "),vi=a("a"),mk=o("BertModel"),gk=o("."),Eo=l(),wa=a("p"),hk=o("There is one class of "),Ff=a("code"),pk=o("AutoModel"),xVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bje=l(),Fi=a("h2"),Tf=a("a"),Woe=a("span"),F(z6.$$.fragment),$Ve=l(),Qoe=a("span"),kVe=o("Extending the Auto Classes"),vje=l(),kn=a("p"),SVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Hoe=a("code"),RVe=o("NewModel"),PVe=o(", make sure you have a "),Uoe=a("code"),BVe=o("NewModelConfig"),IVe=o(` then you can add those to the auto
classes like this:`),Fje=l(),F(W6.$$.fragment),Tje=l(),_k=a("p"),NVe=o("You will then be able to use the auto classes like you would usually do!"),Mje=l(),F(Mf.$$.fragment),Eje=l(),Ti=a("h2"),Ef=a("a"),Joe=a("span"),F(Q6.$$.fragment),qVe=l(),Yoe=a("span"),jVe=o("AutoConfig"),Cje=l(),Co=a("div"),F(H6.$$.fragment),DVe=l(),U6=a("p"),GVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),uk=a("a"),OVe=o("from_pretrained()"),VVe=o(" class method."),XVe=l(),J6=a("p"),zVe=o("This class cannot be instantiated directly using "),Koe=a("code"),WVe=o("__init__()"),QVe=o(" (throws an error)."),HVe=l(),Er=a("div"),F(Y6.$$.fragment),UVe=l(),Zoe=a("p"),JVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YVe=l(),Mi=a("p"),KVe=o("The configuration class to instantiate is selected based on the "),ere=a("code"),ZVe=o("model_type"),eXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ore=a("code"),oXe=o("pretrained_model_name_or_path"),rXe=o(":"),tXe=l(),A=a("ul"),Cf=a("li"),rre=a("strong"),aXe=o("albert"),nXe=o(" \u2014 "),bk=a("a"),sXe=o("AlbertConfig"),lXe=o(" (ALBERT model)"),iXe=l(),wf=a("li"),tre=a("strong"),dXe=o("bart"),cXe=o(" \u2014 "),vk=a("a"),fXe=o("BartConfig"),mXe=o(" (BART model)"),gXe=l(),Af=a("li"),are=a("strong"),hXe=o("beit"),pXe=o(" \u2014 "),Fk=a("a"),_Xe=o("BeitConfig"),uXe=o(" (BEiT model)"),bXe=l(),Lf=a("li"),nre=a("strong"),vXe=o("bert"),FXe=o(" \u2014 "),Tk=a("a"),TXe=o("BertConfig"),MXe=o(" (BERT model)"),EXe=l(),yf=a("li"),sre=a("strong"),CXe=o("bert-generation"),wXe=o(" \u2014 "),Mk=a("a"),AXe=o("BertGenerationConfig"),LXe=o(" (Bert Generation model)"),yXe=l(),xf=a("li"),lre=a("strong"),xXe=o("big_bird"),$Xe=o(" \u2014 "),Ek=a("a"),kXe=o("BigBirdConfig"),SXe=o(" (BigBird model)"),RXe=l(),$f=a("li"),ire=a("strong"),PXe=o("bigbird_pegasus"),BXe=o(" \u2014 "),Ck=a("a"),IXe=o("BigBirdPegasusConfig"),NXe=o(" (BigBird-Pegasus model)"),qXe=l(),kf=a("li"),dre=a("strong"),jXe=o("blenderbot"),DXe=o(" \u2014 "),wk=a("a"),GXe=o("BlenderbotConfig"),OXe=o(" (Blenderbot model)"),VXe=l(),Sf=a("li"),cre=a("strong"),XXe=o("blenderbot-small"),zXe=o(" \u2014 "),Ak=a("a"),WXe=o("BlenderbotSmallConfig"),QXe=o(" (BlenderbotSmall model)"),HXe=l(),Rf=a("li"),fre=a("strong"),UXe=o("camembert"),JXe=o(" \u2014 "),Lk=a("a"),YXe=o("CamembertConfig"),KXe=o(" (CamemBERT model)"),ZXe=l(),Pf=a("li"),mre=a("strong"),eze=o("canine"),oze=o(" \u2014 "),yk=a("a"),rze=o("CanineConfig"),tze=o(" (CANINE model)"),aze=l(),Bf=a("li"),gre=a("strong"),nze=o("clip"),sze=o(" \u2014 "),xk=a("a"),lze=o("CLIPConfig"),ize=o(" (CLIP model)"),dze=l(),If=a("li"),hre=a("strong"),cze=o("convbert"),fze=o(" \u2014 "),$k=a("a"),mze=o("ConvBertConfig"),gze=o(" (ConvBERT model)"),hze=l(),Nf=a("li"),pre=a("strong"),pze=o("convnext"),_ze=o(" \u2014 "),kk=a("a"),uze=o("ConvNextConfig"),bze=o(" (ConvNeXT model)"),vze=l(),qf=a("li"),_re=a("strong"),Fze=o("ctrl"),Tze=o(" \u2014 "),Sk=a("a"),Mze=o("CTRLConfig"),Eze=o(" (CTRL model)"),Cze=l(),jf=a("li"),ure=a("strong"),wze=o("cvt"),Aze=o(" \u2014 "),Rk=a("a"),Lze=o("CvtConfig"),yze=o(" (CvT model)"),xze=l(),Df=a("li"),bre=a("strong"),$ze=o("data2vec-audio"),kze=o(" \u2014 "),Pk=a("a"),Sze=o("Data2VecAudioConfig"),Rze=o(" (Data2VecAudio model)"),Pze=l(),Gf=a("li"),vre=a("strong"),Bze=o("data2vec-text"),Ize=o(" \u2014 "),Bk=a("a"),Nze=o("Data2VecTextConfig"),qze=o(" (Data2VecText model)"),jze=l(),Of=a("li"),Fre=a("strong"),Dze=o("data2vec-vision"),Gze=o(" \u2014 "),Ik=a("a"),Oze=o("Data2VecVisionConfig"),Vze=o(" (Data2VecVision model)"),Xze=l(),Vf=a("li"),Tre=a("strong"),zze=o("deberta"),Wze=o(" \u2014 "),Nk=a("a"),Qze=o("DebertaConfig"),Hze=o(" (DeBERTa model)"),Uze=l(),Xf=a("li"),Mre=a("strong"),Jze=o("deberta-v2"),Yze=o(" \u2014 "),qk=a("a"),Kze=o("DebertaV2Config"),Zze=o(" (DeBERTa-v2 model)"),eWe=l(),zf=a("li"),Ere=a("strong"),oWe=o("decision_transformer"),rWe=o(" \u2014 "),jk=a("a"),tWe=o("DecisionTransformerConfig"),aWe=o(" (Decision Transformer model)"),nWe=l(),Wf=a("li"),Cre=a("strong"),sWe=o("deit"),lWe=o(" \u2014 "),Dk=a("a"),iWe=o("DeiTConfig"),dWe=o(" (DeiT model)"),cWe=l(),Qf=a("li"),wre=a("strong"),fWe=o("detr"),mWe=o(" \u2014 "),Gk=a("a"),gWe=o("DetrConfig"),hWe=o(" (DETR model)"),pWe=l(),Hf=a("li"),Are=a("strong"),_We=o("distilbert"),uWe=o(" \u2014 "),Ok=a("a"),bWe=o("DistilBertConfig"),vWe=o(" (DistilBERT model)"),FWe=l(),Uf=a("li"),Lre=a("strong"),TWe=o("dpr"),MWe=o(" \u2014 "),Vk=a("a"),EWe=o("DPRConfig"),CWe=o(" (DPR model)"),wWe=l(),Jf=a("li"),yre=a("strong"),AWe=o("dpt"),LWe=o(" \u2014 "),Xk=a("a"),yWe=o("DPTConfig"),xWe=o(" (DPT model)"),$We=l(),Yf=a("li"),xre=a("strong"),kWe=o("electra"),SWe=o(" \u2014 "),zk=a("a"),RWe=o("ElectraConfig"),PWe=o(" (ELECTRA model)"),BWe=l(),Kf=a("li"),$re=a("strong"),IWe=o("encoder-decoder"),NWe=o(" \u2014 "),Wk=a("a"),qWe=o("EncoderDecoderConfig"),jWe=o(" (Encoder decoder model)"),DWe=l(),Zf=a("li"),kre=a("strong"),GWe=o("flaubert"),OWe=o(" \u2014 "),Qk=a("a"),VWe=o("FlaubertConfig"),XWe=o(" (FlauBERT model)"),zWe=l(),em=a("li"),Sre=a("strong"),WWe=o("flava"),QWe=o(" \u2014 "),Hk=a("a"),HWe=o("FlavaConfig"),UWe=o(" (FLAVA model)"),JWe=l(),om=a("li"),Rre=a("strong"),YWe=o("fnet"),KWe=o(" \u2014 "),Uk=a("a"),ZWe=o("FNetConfig"),eQe=o(" (FNet model)"),oQe=l(),rm=a("li"),Pre=a("strong"),rQe=o("fsmt"),tQe=o(" \u2014 "),Jk=a("a"),aQe=o("FSMTConfig"),nQe=o(" (FairSeq Machine-Translation model)"),sQe=l(),tm=a("li"),Bre=a("strong"),lQe=o("funnel"),iQe=o(" \u2014 "),Yk=a("a"),dQe=o("FunnelConfig"),cQe=o(" (Funnel Transformer model)"),fQe=l(),am=a("li"),Ire=a("strong"),mQe=o("glpn"),gQe=o(" \u2014 "),Kk=a("a"),hQe=o("GLPNConfig"),pQe=o(" (GLPN model)"),_Qe=l(),nm=a("li"),Nre=a("strong"),uQe=o("gpt2"),bQe=o(" \u2014 "),Zk=a("a"),vQe=o("GPT2Config"),FQe=o(" (OpenAI GPT-2 model)"),TQe=l(),sm=a("li"),qre=a("strong"),MQe=o("gpt_neo"),EQe=o(" \u2014 "),eS=a("a"),CQe=o("GPTNeoConfig"),wQe=o(" (GPT Neo model)"),AQe=l(),lm=a("li"),jre=a("strong"),LQe=o("gpt_neox"),yQe=o(" \u2014 "),oS=a("a"),xQe=o("GPTNeoXConfig"),$Qe=o(" (GPT NeoX model)"),kQe=l(),im=a("li"),Dre=a("strong"),SQe=o("gptj"),RQe=o(" \u2014 "),rS=a("a"),PQe=o("GPTJConfig"),BQe=o(" (GPT-J model)"),IQe=l(),dm=a("li"),Gre=a("strong"),NQe=o("groupvit"),qQe=o(" \u2014 "),tS=a("a"),jQe=o("GroupViTConfig"),DQe=o(" (GroupViT model)"),GQe=l(),cm=a("li"),Ore=a("strong"),OQe=o("hubert"),VQe=o(" \u2014 "),aS=a("a"),XQe=o("HubertConfig"),zQe=o(" (Hubert model)"),WQe=l(),fm=a("li"),Vre=a("strong"),QQe=o("ibert"),HQe=o(" \u2014 "),nS=a("a"),UQe=o("IBertConfig"),JQe=o(" (I-BERT model)"),YQe=l(),mm=a("li"),Xre=a("strong"),KQe=o("imagegpt"),ZQe=o(" \u2014 "),sS=a("a"),eHe=o("ImageGPTConfig"),oHe=o(" (ImageGPT model)"),rHe=l(),gm=a("li"),zre=a("strong"),tHe=o("layoutlm"),aHe=o(" \u2014 "),lS=a("a"),nHe=o("LayoutLMConfig"),sHe=o(" (LayoutLM model)"),lHe=l(),hm=a("li"),Wre=a("strong"),iHe=o("layoutlmv2"),dHe=o(" \u2014 "),iS=a("a"),cHe=o("LayoutLMv2Config"),fHe=o(" (LayoutLMv2 model)"),mHe=l(),pm=a("li"),Qre=a("strong"),gHe=o("layoutlmv3"),hHe=o(" \u2014 "),dS=a("a"),pHe=o("LayoutLMv3Config"),_He=o(" (LayoutLMv3 model)"),uHe=l(),_m=a("li"),Hre=a("strong"),bHe=o("led"),vHe=o(" \u2014 "),cS=a("a"),FHe=o("LEDConfig"),THe=o(" (LED model)"),MHe=l(),um=a("li"),Ure=a("strong"),EHe=o("levit"),CHe=o(" \u2014 "),fS=a("a"),wHe=o("LevitConfig"),AHe=o(" (LeViT model)"),LHe=l(),bm=a("li"),Jre=a("strong"),yHe=o("longformer"),xHe=o(" \u2014 "),mS=a("a"),$He=o("LongformerConfig"),kHe=o(" (Longformer model)"),SHe=l(),vm=a("li"),Yre=a("strong"),RHe=o("luke"),PHe=o(" \u2014 "),gS=a("a"),BHe=o("LukeConfig"),IHe=o(" (LUKE model)"),NHe=l(),Fm=a("li"),Kre=a("strong"),qHe=o("lxmert"),jHe=o(" \u2014 "),hS=a("a"),DHe=o("LxmertConfig"),GHe=o(" (LXMERT model)"),OHe=l(),Tm=a("li"),Zre=a("strong"),VHe=o("m2m_100"),XHe=o(" \u2014 "),pS=a("a"),zHe=o("M2M100Config"),WHe=o(" (M2M100 model)"),QHe=l(),Mm=a("li"),ete=a("strong"),HHe=o("marian"),UHe=o(" \u2014 "),_S=a("a"),JHe=o("MarianConfig"),YHe=o(" (Marian model)"),KHe=l(),Em=a("li"),ote=a("strong"),ZHe=o("maskformer"),eUe=o(" \u2014 "),uS=a("a"),oUe=o("MaskFormerConfig"),rUe=o(" (MaskFormer model)"),tUe=l(),Cm=a("li"),rte=a("strong"),aUe=o("mbart"),nUe=o(" \u2014 "),bS=a("a"),sUe=o("MBartConfig"),lUe=o(" (mBART model)"),iUe=l(),wm=a("li"),tte=a("strong"),dUe=o("mctct"),cUe=o(" \u2014 "),vS=a("a"),fUe=o("MCTCTConfig"),mUe=o(" (M-CTC-T model)"),gUe=l(),Am=a("li"),ate=a("strong"),hUe=o("megatron-bert"),pUe=o(" \u2014 "),FS=a("a"),_Ue=o("MegatronBertConfig"),uUe=o(" (Megatron-BERT model)"),bUe=l(),Lm=a("li"),nte=a("strong"),vUe=o("mobilebert"),FUe=o(" \u2014 "),TS=a("a"),TUe=o("MobileBertConfig"),MUe=o(" (MobileBERT model)"),EUe=l(),ym=a("li"),ste=a("strong"),CUe=o("mpnet"),wUe=o(" \u2014 "),MS=a("a"),AUe=o("MPNetConfig"),LUe=o(" (MPNet model)"),yUe=l(),xm=a("li"),lte=a("strong"),xUe=o("mt5"),$Ue=o(" \u2014 "),ES=a("a"),kUe=o("MT5Config"),SUe=o(" (MT5 model)"),RUe=l(),$m=a("li"),ite=a("strong"),PUe=o("nystromformer"),BUe=o(" \u2014 "),CS=a("a"),IUe=o("NystromformerConfig"),NUe=o(" (Nystr\xF6mformer model)"),qUe=l(),km=a("li"),dte=a("strong"),jUe=o("openai-gpt"),DUe=o(" \u2014 "),wS=a("a"),GUe=o("OpenAIGPTConfig"),OUe=o(" (OpenAI GPT model)"),VUe=l(),Sm=a("li"),cte=a("strong"),XUe=o("opt"),zUe=o(" \u2014 "),AS=a("a"),WUe=o("OPTConfig"),QUe=o(" (OPT model)"),HUe=l(),Rm=a("li"),fte=a("strong"),UUe=o("pegasus"),JUe=o(" \u2014 "),LS=a("a"),YUe=o("PegasusConfig"),KUe=o(" (Pegasus model)"),ZUe=l(),Pm=a("li"),mte=a("strong"),eJe=o("perceiver"),oJe=o(" \u2014 "),yS=a("a"),rJe=o("PerceiverConfig"),tJe=o(" (Perceiver model)"),aJe=l(),Bm=a("li"),gte=a("strong"),nJe=o("plbart"),sJe=o(" \u2014 "),xS=a("a"),lJe=o("PLBartConfig"),iJe=o(" (PLBart model)"),dJe=l(),Im=a("li"),hte=a("strong"),cJe=o("poolformer"),fJe=o(" \u2014 "),$S=a("a"),mJe=o("PoolFormerConfig"),gJe=o(" (PoolFormer model)"),hJe=l(),Nm=a("li"),pte=a("strong"),pJe=o("prophetnet"),_Je=o(" \u2014 "),kS=a("a"),uJe=o("ProphetNetConfig"),bJe=o(" (ProphetNet model)"),vJe=l(),qm=a("li"),_te=a("strong"),FJe=o("qdqbert"),TJe=o(" \u2014 "),SS=a("a"),MJe=o("QDQBertConfig"),EJe=o(" (QDQBert model)"),CJe=l(),jm=a("li"),ute=a("strong"),wJe=o("rag"),AJe=o(" \u2014 "),RS=a("a"),LJe=o("RagConfig"),yJe=o(" (RAG model)"),xJe=l(),Dm=a("li"),bte=a("strong"),$Je=o("realm"),kJe=o(" \u2014 "),PS=a("a"),SJe=o("RealmConfig"),RJe=o(" (REALM model)"),PJe=l(),Gm=a("li"),vte=a("strong"),BJe=o("reformer"),IJe=o(" \u2014 "),BS=a("a"),NJe=o("ReformerConfig"),qJe=o(" (Reformer model)"),jJe=l(),Om=a("li"),Fte=a("strong"),DJe=o("regnet"),GJe=o(" \u2014 "),IS=a("a"),OJe=o("RegNetConfig"),VJe=o(" (RegNet model)"),XJe=l(),Vm=a("li"),Tte=a("strong"),zJe=o("rembert"),WJe=o(" \u2014 "),NS=a("a"),QJe=o("RemBertConfig"),HJe=o(" (RemBERT model)"),UJe=l(),Xm=a("li"),Mte=a("strong"),JJe=o("resnet"),YJe=o(" \u2014 "),qS=a("a"),KJe=o("ResNetConfig"),ZJe=o(" (ResNet model)"),eYe=l(),zm=a("li"),Ete=a("strong"),oYe=o("retribert"),rYe=o(" \u2014 "),jS=a("a"),tYe=o("RetriBertConfig"),aYe=o(" (RetriBERT model)"),nYe=l(),Wm=a("li"),Cte=a("strong"),sYe=o("roberta"),lYe=o(" \u2014 "),DS=a("a"),iYe=o("RobertaConfig"),dYe=o(" (RoBERTa model)"),cYe=l(),Qm=a("li"),wte=a("strong"),fYe=o("roformer"),mYe=o(" \u2014 "),GS=a("a"),gYe=o("RoFormerConfig"),hYe=o(" (RoFormer model)"),pYe=l(),Hm=a("li"),Ate=a("strong"),_Ye=o("segformer"),uYe=o(" \u2014 "),OS=a("a"),bYe=o("SegformerConfig"),vYe=o(" (SegFormer model)"),FYe=l(),Um=a("li"),Lte=a("strong"),TYe=o("sew"),MYe=o(" \u2014 "),VS=a("a"),EYe=o("SEWConfig"),CYe=o(" (SEW model)"),wYe=l(),Jm=a("li"),yte=a("strong"),AYe=o("sew-d"),LYe=o(" \u2014 "),XS=a("a"),yYe=o("SEWDConfig"),xYe=o(" (SEW-D model)"),$Ye=l(),Ym=a("li"),xte=a("strong"),kYe=o("speech-encoder-decoder"),SYe=o(" \u2014 "),zS=a("a"),RYe=o("SpeechEncoderDecoderConfig"),PYe=o(" (Speech Encoder decoder model)"),BYe=l(),Km=a("li"),$te=a("strong"),IYe=o("speech_to_text"),NYe=o(" \u2014 "),WS=a("a"),qYe=o("Speech2TextConfig"),jYe=o(" (Speech2Text model)"),DYe=l(),Zm=a("li"),kte=a("strong"),GYe=o("speech_to_text_2"),OYe=o(" \u2014 "),QS=a("a"),VYe=o("Speech2Text2Config"),XYe=o(" (Speech2Text2 model)"),zYe=l(),eg=a("li"),Ste=a("strong"),WYe=o("splinter"),QYe=o(" \u2014 "),HS=a("a"),HYe=o("SplinterConfig"),UYe=o(" (Splinter model)"),JYe=l(),og=a("li"),Rte=a("strong"),YYe=o("squeezebert"),KYe=o(" \u2014 "),US=a("a"),ZYe=o("SqueezeBertConfig"),eKe=o(" (SqueezeBERT model)"),oKe=l(),rg=a("li"),Pte=a("strong"),rKe=o("swin"),tKe=o(" \u2014 "),JS=a("a"),aKe=o("SwinConfig"),nKe=o(" (Swin Transformer model)"),sKe=l(),tg=a("li"),Bte=a("strong"),lKe=o("t5"),iKe=o(" \u2014 "),YS=a("a"),dKe=o("T5Config"),cKe=o(" (T5 model)"),fKe=l(),ag=a("li"),Ite=a("strong"),mKe=o("tapas"),gKe=o(" \u2014 "),KS=a("a"),hKe=o("TapasConfig"),pKe=o(" (TAPAS model)"),_Ke=l(),ng=a("li"),Nte=a("strong"),uKe=o("trajectory_transformer"),bKe=o(" \u2014 "),ZS=a("a"),vKe=o("TrajectoryTransformerConfig"),FKe=o(" (Trajectory Transformer model)"),TKe=l(),sg=a("li"),qte=a("strong"),MKe=o("transfo-xl"),EKe=o(" \u2014 "),eR=a("a"),CKe=o("TransfoXLConfig"),wKe=o(" (Transformer-XL model)"),AKe=l(),lg=a("li"),jte=a("strong"),LKe=o("trocr"),yKe=o(" \u2014 "),oR=a("a"),xKe=o("TrOCRConfig"),$Ke=o(" (TrOCR model)"),kKe=l(),ig=a("li"),Dte=a("strong"),SKe=o("unispeech"),RKe=o(" \u2014 "),rR=a("a"),PKe=o("UniSpeechConfig"),BKe=o(" (UniSpeech model)"),IKe=l(),dg=a("li"),Gte=a("strong"),NKe=o("unispeech-sat"),qKe=o(" \u2014 "),tR=a("a"),jKe=o("UniSpeechSatConfig"),DKe=o(" (UniSpeechSat model)"),GKe=l(),cg=a("li"),Ote=a("strong"),OKe=o("van"),VKe=o(" \u2014 "),aR=a("a"),XKe=o("VanConfig"),zKe=o(" (VAN model)"),WKe=l(),fg=a("li"),Vte=a("strong"),QKe=o("vilt"),HKe=o(" \u2014 "),nR=a("a"),UKe=o("ViltConfig"),JKe=o(" (ViLT model)"),YKe=l(),mg=a("li"),Xte=a("strong"),KKe=o("vision-encoder-decoder"),ZKe=o(" \u2014 "),sR=a("a"),eZe=o("VisionEncoderDecoderConfig"),oZe=o(" (Vision Encoder decoder model)"),rZe=l(),gg=a("li"),zte=a("strong"),tZe=o("vision-text-dual-encoder"),aZe=o(" \u2014 "),lR=a("a"),nZe=o("VisionTextDualEncoderConfig"),sZe=o(" (VisionTextDualEncoder model)"),lZe=l(),hg=a("li"),Wte=a("strong"),iZe=o("visual_bert"),dZe=o(" \u2014 "),iR=a("a"),cZe=o("VisualBertConfig"),fZe=o(" (VisualBERT model)"),mZe=l(),pg=a("li"),Qte=a("strong"),gZe=o("vit"),hZe=o(" \u2014 "),dR=a("a"),pZe=o("ViTConfig"),_Ze=o(" (ViT model)"),uZe=l(),_g=a("li"),Hte=a("strong"),bZe=o("vit_mae"),vZe=o(" \u2014 "),cR=a("a"),FZe=o("ViTMAEConfig"),TZe=o(" (ViTMAE model)"),MZe=l(),ug=a("li"),Ute=a("strong"),EZe=o("wav2vec2"),CZe=o(" \u2014 "),fR=a("a"),wZe=o("Wav2Vec2Config"),AZe=o(" (Wav2Vec2 model)"),LZe=l(),bg=a("li"),Jte=a("strong"),yZe=o("wav2vec2-conformer"),xZe=o(" \u2014 "),mR=a("a"),$Ze=o("Wav2Vec2ConformerConfig"),kZe=o(" (Wav2Vec2-Conformer model)"),SZe=l(),vg=a("li"),Yte=a("strong"),RZe=o("wavlm"),PZe=o(" \u2014 "),gR=a("a"),BZe=o("WavLMConfig"),IZe=o(" (WavLM model)"),NZe=l(),Fg=a("li"),Kte=a("strong"),qZe=o("xglm"),jZe=o(" \u2014 "),hR=a("a"),DZe=o("XGLMConfig"),GZe=o(" (XGLM model)"),OZe=l(),Tg=a("li"),Zte=a("strong"),VZe=o("xlm"),XZe=o(" \u2014 "),pR=a("a"),zZe=o("XLMConfig"),WZe=o(" (XLM model)"),QZe=l(),Mg=a("li"),eae=a("strong"),HZe=o("xlm-prophetnet"),UZe=o(" \u2014 "),_R=a("a"),JZe=o("XLMProphetNetConfig"),YZe=o(" (XLM-ProphetNet model)"),KZe=l(),Eg=a("li"),oae=a("strong"),ZZe=o("xlm-roberta"),eeo=o(" \u2014 "),uR=a("a"),oeo=o("XLMRobertaConfig"),reo=o(" (XLM-RoBERTa model)"),teo=l(),Cg=a("li"),rae=a("strong"),aeo=o("xlm-roberta-xl"),neo=o(" \u2014 "),bR=a("a"),seo=o("XLMRobertaXLConfig"),leo=o(" (XLM-RoBERTa-XL model)"),ieo=l(),wg=a("li"),tae=a("strong"),deo=o("xlnet"),ceo=o(" \u2014 "),vR=a("a"),feo=o("XLNetConfig"),meo=o(" (XLNet model)"),geo=l(),Ag=a("li"),aae=a("strong"),heo=o("yolos"),peo=o(" \u2014 "),FR=a("a"),_eo=o("YolosConfig"),ueo=o(" (YOLOS model)"),beo=l(),Lg=a("li"),nae=a("strong"),veo=o("yoso"),Feo=o(" \u2014 "),TR=a("a"),Teo=o("YosoConfig"),Meo=o(" (YOSO model)"),Eeo=l(),F(yg.$$.fragment),Ceo=l(),xg=a("div"),F(K6.$$.fragment),weo=l(),sae=a("p"),Aeo=o("Register a new configuration for this class."),wje=l(),Ei=a("h2"),$g=a("a"),lae=a("span"),F(Z6.$$.fragment),Leo=l(),iae=a("span"),yeo=o("AutoTokenizer"),Aje=l(),wo=a("div"),F(eL.$$.fragment),xeo=l(),oL=a("p"),$eo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MR=a("a"),keo=o("AutoTokenizer.from_pretrained()"),Seo=o(" class method."),Reo=l(),rL=a("p"),Peo=o("This class cannot be instantiated directly using "),dae=a("code"),Beo=o("__init__()"),Ieo=o(" (throws an error)."),Neo=l(),Cr=a("div"),F(tL.$$.fragment),qeo=l(),cae=a("p"),jeo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Deo=l(),Aa=a("p"),Geo=o("The tokenizer class to instantiate is selected based on the "),fae=a("code"),Oeo=o("model_type"),Veo=o(` property of the config object (either
passed as an argument or loaded from `),mae=a("code"),Xeo=o("pretrained_model_name_or_path"),zeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=a("code"),Weo=o("pretrained_model_name_or_path"),Qeo=o(":"),Heo=l(),k=a("ul"),Sn=a("li"),hae=a("strong"),Ueo=o("albert"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("AlbertTokenizer"),Keo=o(" or "),CR=a("a"),Zeo=o("AlbertTokenizerFast"),eoo=o(" (ALBERT model)"),ooo=l(),Rn=a("li"),pae=a("strong"),roo=o("bart"),too=o(" \u2014 "),wR=a("a"),aoo=o("BartTokenizer"),noo=o(" or "),AR=a("a"),soo=o("BartTokenizerFast"),loo=o(" (BART model)"),ioo=l(),Pn=a("li"),_ae=a("strong"),doo=o("barthez"),coo=o(" \u2014 "),LR=a("a"),foo=o("BarthezTokenizer"),moo=o(" or "),yR=a("a"),goo=o("BarthezTokenizerFast"),hoo=o(" (BARThez model)"),poo=l(),kg=a("li"),uae=a("strong"),_oo=o("bartpho"),uoo=o(" \u2014 "),xR=a("a"),boo=o("BartphoTokenizer"),voo=o(" (BARTpho model)"),Foo=l(),Bn=a("li"),bae=a("strong"),Too=o("bert"),Moo=o(" \u2014 "),$R=a("a"),Eoo=o("BertTokenizer"),Coo=o(" or "),kR=a("a"),woo=o("BertTokenizerFast"),Aoo=o(" (BERT model)"),Loo=l(),Sg=a("li"),vae=a("strong"),yoo=o("bert-generation"),xoo=o(" \u2014 "),SR=a("a"),$oo=o("BertGenerationTokenizer"),koo=o(" (Bert Generation model)"),Soo=l(),Rg=a("li"),Fae=a("strong"),Roo=o("bert-japanese"),Poo=o(" \u2014 "),RR=a("a"),Boo=o("BertJapaneseTokenizer"),Ioo=o(" (BertJapanese model)"),Noo=l(),Pg=a("li"),Tae=a("strong"),qoo=o("bertweet"),joo=o(" \u2014 "),PR=a("a"),Doo=o("BertweetTokenizer"),Goo=o(" (BERTweet model)"),Ooo=l(),In=a("li"),Mae=a("strong"),Voo=o("big_bird"),Xoo=o(" \u2014 "),BR=a("a"),zoo=o("BigBirdTokenizer"),Woo=o(" or "),IR=a("a"),Qoo=o("BigBirdTokenizerFast"),Hoo=o(" (BigBird model)"),Uoo=l(),Nn=a("li"),Eae=a("strong"),Joo=o("bigbird_pegasus"),Yoo=o(" \u2014 "),NR=a("a"),Koo=o("PegasusTokenizer"),Zoo=o(" or "),qR=a("a"),ero=o("PegasusTokenizerFast"),oro=o(" (BigBird-Pegasus model)"),rro=l(),qn=a("li"),Cae=a("strong"),tro=o("blenderbot"),aro=o(" \u2014 "),jR=a("a"),nro=o("BlenderbotTokenizer"),sro=o(" or "),DR=a("a"),lro=o("BlenderbotTokenizerFast"),iro=o(" (Blenderbot model)"),dro=l(),Bg=a("li"),wae=a("strong"),cro=o("blenderbot-small"),fro=o(" \u2014 "),GR=a("a"),mro=o("BlenderbotSmallTokenizer"),gro=o(" (BlenderbotSmall model)"),hro=l(),Ig=a("li"),Aae=a("strong"),pro=o("byt5"),_ro=o(" \u2014 "),OR=a("a"),uro=o("ByT5Tokenizer"),bro=o(" (ByT5 model)"),vro=l(),jn=a("li"),Lae=a("strong"),Fro=o("camembert"),Tro=o(" \u2014 "),VR=a("a"),Mro=o("CamembertTokenizer"),Ero=o(" or "),XR=a("a"),Cro=o("CamembertTokenizerFast"),wro=o(" (CamemBERT model)"),Aro=l(),Ng=a("li"),yae=a("strong"),Lro=o("canine"),yro=o(" \u2014 "),zR=a("a"),xro=o("CanineTokenizer"),$ro=o(" (CANINE model)"),kro=l(),Dn=a("li"),xae=a("strong"),Sro=o("clip"),Rro=o(" \u2014 "),WR=a("a"),Pro=o("CLIPTokenizer"),Bro=o(" or "),QR=a("a"),Iro=o("CLIPTokenizerFast"),Nro=o(" (CLIP model)"),qro=l(),Gn=a("li"),$ae=a("strong"),jro=o("convbert"),Dro=o(" \u2014 "),HR=a("a"),Gro=o("ConvBertTokenizer"),Oro=o(" or "),UR=a("a"),Vro=o("ConvBertTokenizerFast"),Xro=o(" (ConvBERT model)"),zro=l(),On=a("li"),kae=a("strong"),Wro=o("cpm"),Qro=o(" \u2014 "),JR=a("a"),Hro=o("CpmTokenizer"),Uro=o(" or "),YR=a("a"),Jro=o("CpmTokenizerFast"),Yro=o(" (CPM model)"),Kro=l(),qg=a("li"),Sae=a("strong"),Zro=o("ctrl"),eto=o(" \u2014 "),KR=a("a"),oto=o("CTRLTokenizer"),rto=o(" (CTRL model)"),tto=l(),Vn=a("li"),Rae=a("strong"),ato=o("data2vec-text"),nto=o(" \u2014 "),ZR=a("a"),sto=o("RobertaTokenizer"),lto=o(" or "),eP=a("a"),ito=o("RobertaTokenizerFast"),dto=o(" (Data2VecText model)"),cto=l(),Xn=a("li"),Pae=a("strong"),fto=o("deberta"),mto=o(" \u2014 "),oP=a("a"),gto=o("DebertaTokenizer"),hto=o(" or "),rP=a("a"),pto=o("DebertaTokenizerFast"),_to=o(" (DeBERTa model)"),uto=l(),zn=a("li"),Bae=a("strong"),bto=o("deberta-v2"),vto=o(" \u2014 "),tP=a("a"),Fto=o("DebertaV2Tokenizer"),Tto=o(" or "),aP=a("a"),Mto=o("DebertaV2TokenizerFast"),Eto=o(" (DeBERTa-v2 model)"),Cto=l(),Wn=a("li"),Iae=a("strong"),wto=o("distilbert"),Ato=o(" \u2014 "),nP=a("a"),Lto=o("DistilBertTokenizer"),yto=o(" or "),sP=a("a"),xto=o("DistilBertTokenizerFast"),$to=o(" (DistilBERT model)"),kto=l(),Qn=a("li"),Nae=a("strong"),Sto=o("dpr"),Rto=o(" \u2014 "),lP=a("a"),Pto=o("DPRQuestionEncoderTokenizer"),Bto=o(" or "),iP=a("a"),Ito=o("DPRQuestionEncoderTokenizerFast"),Nto=o(" (DPR model)"),qto=l(),Hn=a("li"),qae=a("strong"),jto=o("electra"),Dto=o(" \u2014 "),dP=a("a"),Gto=o("ElectraTokenizer"),Oto=o(" or "),cP=a("a"),Vto=o("ElectraTokenizerFast"),Xto=o(" (ELECTRA model)"),zto=l(),jg=a("li"),jae=a("strong"),Wto=o("flaubert"),Qto=o(" \u2014 "),fP=a("a"),Hto=o("FlaubertTokenizer"),Uto=o(" (FlauBERT model)"),Jto=l(),Un=a("li"),Dae=a("strong"),Yto=o("fnet"),Kto=o(" \u2014 "),mP=a("a"),Zto=o("FNetTokenizer"),eao=o(" or "),gP=a("a"),oao=o("FNetTokenizerFast"),rao=o(" (FNet model)"),tao=l(),Dg=a("li"),Gae=a("strong"),aao=o("fsmt"),nao=o(" \u2014 "),hP=a("a"),sao=o("FSMTTokenizer"),lao=o(" (FairSeq Machine-Translation model)"),iao=l(),Jn=a("li"),Oae=a("strong"),dao=o("funnel"),cao=o(" \u2014 "),pP=a("a"),fao=o("FunnelTokenizer"),mao=o(" or "),_P=a("a"),gao=o("FunnelTokenizerFast"),hao=o(" (Funnel Transformer model)"),pao=l(),Yn=a("li"),Vae=a("strong"),_ao=o("gpt2"),uao=o(" \u2014 "),uP=a("a"),bao=o("GPT2Tokenizer"),vao=o(" or "),bP=a("a"),Fao=o("GPT2TokenizerFast"),Tao=o(" (OpenAI GPT-2 model)"),Mao=l(),Kn=a("li"),Xae=a("strong"),Eao=o("gpt_neo"),Cao=o(" \u2014 "),vP=a("a"),wao=o("GPT2Tokenizer"),Aao=o(" or "),FP=a("a"),Lao=o("GPT2TokenizerFast"),yao=o(" (GPT Neo model)"),xao=l(),Gg=a("li"),zae=a("strong"),$ao=o("gpt_neox"),kao=o(" \u2014 "),TP=a("a"),Sao=o("GPTNeoXTokenizerFast"),Rao=o(" (GPT NeoX model)"),Pao=l(),Zn=a("li"),Wae=a("strong"),Bao=o("gptj"),Iao=o(" \u2014 "),MP=a("a"),Nao=o("GPT2Tokenizer"),qao=o(" or "),EP=a("a"),jao=o("GPT2TokenizerFast"),Dao=o(" (GPT-J model)"),Gao=l(),es=a("li"),Qae=a("strong"),Oao=o("groupvit"),Vao=o(" \u2014 "),CP=a("a"),Xao=o("CLIPTokenizer"),zao=o(" or "),wP=a("a"),Wao=o("CLIPTokenizerFast"),Qao=o(" (GroupViT model)"),Hao=l(),os=a("li"),Hae=a("strong"),Uao=o("herbert"),Jao=o(" \u2014 "),AP=a("a"),Yao=o("HerbertTokenizer"),Kao=o(" or "),LP=a("a"),Zao=o("HerbertTokenizerFast"),eno=o(" (HerBERT model)"),ono=l(),Og=a("li"),Uae=a("strong"),rno=o("hubert"),tno=o(" \u2014 "),yP=a("a"),ano=o("Wav2Vec2CTCTokenizer"),nno=o(" (Hubert model)"),sno=l(),rs=a("li"),Jae=a("strong"),lno=o("ibert"),ino=o(" \u2014 "),xP=a("a"),dno=o("RobertaTokenizer"),cno=o(" or "),$P=a("a"),fno=o("RobertaTokenizerFast"),mno=o(" (I-BERT model)"),gno=l(),ts=a("li"),Yae=a("strong"),hno=o("layoutlm"),pno=o(" \u2014 "),kP=a("a"),_no=o("LayoutLMTokenizer"),uno=o(" or "),SP=a("a"),bno=o("LayoutLMTokenizerFast"),vno=o(" (LayoutLM model)"),Fno=l(),as=a("li"),Kae=a("strong"),Tno=o("layoutlmv2"),Mno=o(" \u2014 "),RP=a("a"),Eno=o("LayoutLMv2Tokenizer"),Cno=o(" or "),PP=a("a"),wno=o("LayoutLMv2TokenizerFast"),Ano=o(" (LayoutLMv2 model)"),Lno=l(),ns=a("li"),Zae=a("strong"),yno=o("layoutlmv3"),xno=o(" \u2014 "),BP=a("a"),$no=o("LayoutLMv3Tokenizer"),kno=o(" or "),IP=a("a"),Sno=o("LayoutLMv3TokenizerFast"),Rno=o(" (LayoutLMv3 model)"),Pno=l(),ss=a("li"),ene=a("strong"),Bno=o("layoutxlm"),Ino=o(" \u2014 "),NP=a("a"),Nno=o("LayoutXLMTokenizer"),qno=o(" or "),qP=a("a"),jno=o("LayoutXLMTokenizerFast"),Dno=o(" (LayoutXLM model)"),Gno=l(),ls=a("li"),one=a("strong"),Ono=o("led"),Vno=o(" \u2014 "),jP=a("a"),Xno=o("LEDTokenizer"),zno=o(" or "),DP=a("a"),Wno=o("LEDTokenizerFast"),Qno=o(" (LED model)"),Hno=l(),is=a("li"),rne=a("strong"),Uno=o("longformer"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("LongformerTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("LongformerTokenizerFast"),eso=o(" (Longformer model)"),oso=l(),Vg=a("li"),tne=a("strong"),rso=o("luke"),tso=o(" \u2014 "),VP=a("a"),aso=o("LukeTokenizer"),nso=o(" (LUKE model)"),sso=l(),ds=a("li"),ane=a("strong"),lso=o("lxmert"),iso=o(" \u2014 "),XP=a("a"),dso=o("LxmertTokenizer"),cso=o(" or "),zP=a("a"),fso=o("LxmertTokenizerFast"),mso=o(" (LXMERT model)"),gso=l(),Xg=a("li"),nne=a("strong"),hso=o("m2m_100"),pso=o(" \u2014 "),WP=a("a"),_so=o("M2M100Tokenizer"),uso=o(" (M2M100 model)"),bso=l(),zg=a("li"),sne=a("strong"),vso=o("marian"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("MarianTokenizer"),Mso=o(" (Marian model)"),Eso=l(),cs=a("li"),lne=a("strong"),Cso=o("mbart"),wso=o(" \u2014 "),HP=a("a"),Aso=o("MBartTokenizer"),Lso=o(" or "),UP=a("a"),yso=o("MBartTokenizerFast"),xso=o(" (mBART model)"),$so=l(),fs=a("li"),ine=a("strong"),kso=o("mbart50"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("MBart50Tokenizer"),Pso=o(" or "),YP=a("a"),Bso=o("MBart50TokenizerFast"),Iso=o(" (mBART-50 model)"),Nso=l(),ms=a("li"),dne=a("strong"),qso=o("megatron-bert"),jso=o(" \u2014 "),KP=a("a"),Dso=o("BertTokenizer"),Gso=o(" or "),ZP=a("a"),Oso=o("BertTokenizerFast"),Vso=o(" (Megatron-BERT model)"),Xso=l(),Wg=a("li"),cne=a("strong"),zso=o("mluke"),Wso=o(" \u2014 "),eB=a("a"),Qso=o("MLukeTokenizer"),Hso=o(" (mLUKE model)"),Uso=l(),gs=a("li"),fne=a("strong"),Jso=o("mobilebert"),Yso=o(" \u2014 "),oB=a("a"),Kso=o("MobileBertTokenizer"),Zso=o(" or "),rB=a("a"),elo=o("MobileBertTokenizerFast"),olo=o(" (MobileBERT model)"),rlo=l(),hs=a("li"),mne=a("strong"),tlo=o("mpnet"),alo=o(" \u2014 "),tB=a("a"),nlo=o("MPNetTokenizer"),slo=o(" or "),aB=a("a"),llo=o("MPNetTokenizerFast"),ilo=o(" (MPNet model)"),dlo=l(),ps=a("li"),gne=a("strong"),clo=o("mt5"),flo=o(" \u2014 "),nB=a("a"),mlo=o("MT5Tokenizer"),glo=o(" or "),sB=a("a"),hlo=o("MT5TokenizerFast"),plo=o(" (MT5 model)"),_lo=l(),_s=a("li"),hne=a("strong"),ulo=o("nystromformer"),blo=o(" \u2014 "),lB=a("a"),vlo=o("AlbertTokenizer"),Flo=o(" or "),iB=a("a"),Tlo=o("AlbertTokenizerFast"),Mlo=o(" (Nystr\xF6mformer model)"),Elo=l(),us=a("li"),pne=a("strong"),Clo=o("openai-gpt"),wlo=o(" \u2014 "),dB=a("a"),Alo=o("OpenAIGPTTokenizer"),Llo=o(" or "),cB=a("a"),ylo=o("OpenAIGPTTokenizerFast"),xlo=o(" (OpenAI GPT model)"),$lo=l(),Qg=a("li"),_ne=a("strong"),klo=o("opt"),Slo=o(" \u2014 "),fB=a("a"),Rlo=o("GPT2Tokenizer"),Plo=o(" (OPT model)"),Blo=l(),bs=a("li"),une=a("strong"),Ilo=o("pegasus"),Nlo=o(" \u2014 "),mB=a("a"),qlo=o("PegasusTokenizer"),jlo=o(" or "),gB=a("a"),Dlo=o("PegasusTokenizerFast"),Glo=o(" (Pegasus model)"),Olo=l(),Hg=a("li"),bne=a("strong"),Vlo=o("perceiver"),Xlo=o(" \u2014 "),hB=a("a"),zlo=o("PerceiverTokenizer"),Wlo=o(" (Perceiver model)"),Qlo=l(),Ug=a("li"),vne=a("strong"),Hlo=o("phobert"),Ulo=o(" \u2014 "),pB=a("a"),Jlo=o("PhobertTokenizer"),Ylo=o(" (PhoBERT model)"),Klo=l(),Jg=a("li"),Fne=a("strong"),Zlo=o("plbart"),eio=o(" \u2014 "),_B=a("a"),oio=o("PLBartTokenizer"),rio=o(" (PLBart model)"),tio=l(),Yg=a("li"),Tne=a("strong"),aio=o("prophetnet"),nio=o(" \u2014 "),uB=a("a"),sio=o("ProphetNetTokenizer"),lio=o(" (ProphetNet model)"),iio=l(),vs=a("li"),Mne=a("strong"),dio=o("qdqbert"),cio=o(" \u2014 "),bB=a("a"),fio=o("BertTokenizer"),mio=o(" or "),vB=a("a"),gio=o("BertTokenizerFast"),hio=o(" (QDQBert model)"),pio=l(),Kg=a("li"),Ene=a("strong"),_io=o("rag"),uio=o(" \u2014 "),FB=a("a"),bio=o("RagTokenizer"),vio=o(" (RAG model)"),Fio=l(),Fs=a("li"),Cne=a("strong"),Tio=o("realm"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("RealmTokenizer"),Cio=o(" or "),MB=a("a"),wio=o("RealmTokenizerFast"),Aio=o(" (REALM model)"),Lio=l(),Ts=a("li"),wne=a("strong"),yio=o("reformer"),xio=o(" \u2014 "),EB=a("a"),$io=o("ReformerTokenizer"),kio=o(" or "),CB=a("a"),Sio=o("ReformerTokenizerFast"),Rio=o(" (Reformer model)"),Pio=l(),Ms=a("li"),Ane=a("strong"),Bio=o("rembert"),Iio=o(" \u2014 "),wB=a("a"),Nio=o("RemBertTokenizer"),qio=o(" or "),AB=a("a"),jio=o("RemBertTokenizerFast"),Dio=o(" (RemBERT model)"),Gio=l(),Es=a("li"),Lne=a("strong"),Oio=o("retribert"),Vio=o(" \u2014 "),LB=a("a"),Xio=o("RetriBertTokenizer"),zio=o(" or "),yB=a("a"),Wio=o("RetriBertTokenizerFast"),Qio=o(" (RetriBERT model)"),Hio=l(),Cs=a("li"),yne=a("strong"),Uio=o("roberta"),Jio=o(" \u2014 "),xB=a("a"),Yio=o("RobertaTokenizer"),Kio=o(" or "),$B=a("a"),Zio=o("RobertaTokenizerFast"),edo=o(" (RoBERTa model)"),odo=l(),ws=a("li"),xne=a("strong"),rdo=o("roformer"),tdo=o(" \u2014 "),kB=a("a"),ado=o("RoFormerTokenizer"),ndo=o(" or "),SB=a("a"),sdo=o("RoFormerTokenizerFast"),ldo=o(" (RoFormer model)"),ido=l(),Zg=a("li"),$ne=a("strong"),ddo=o("speech_to_text"),cdo=o(" \u2014 "),RB=a("a"),fdo=o("Speech2TextTokenizer"),mdo=o(" (Speech2Text model)"),gdo=l(),eh=a("li"),kne=a("strong"),hdo=o("speech_to_text_2"),pdo=o(" \u2014 "),PB=a("a"),_do=o("Speech2Text2Tokenizer"),udo=o(" (Speech2Text2 model)"),bdo=l(),As=a("li"),Sne=a("strong"),vdo=o("splinter"),Fdo=o(" \u2014 "),BB=a("a"),Tdo=o("SplinterTokenizer"),Mdo=o(" or "),IB=a("a"),Edo=o("SplinterTokenizerFast"),Cdo=o(" (Splinter model)"),wdo=l(),Ls=a("li"),Rne=a("strong"),Ado=o("squeezebert"),Ldo=o(" \u2014 "),NB=a("a"),ydo=o("SqueezeBertTokenizer"),xdo=o(" or "),qB=a("a"),$do=o("SqueezeBertTokenizerFast"),kdo=o(" (SqueezeBERT model)"),Sdo=l(),ys=a("li"),Pne=a("strong"),Rdo=o("t5"),Pdo=o(" \u2014 "),jB=a("a"),Bdo=o("T5Tokenizer"),Ido=o(" or "),DB=a("a"),Ndo=o("T5TokenizerFast"),qdo=o(" (T5 model)"),jdo=l(),oh=a("li"),Bne=a("strong"),Ddo=o("tapas"),Gdo=o(" \u2014 "),GB=a("a"),Odo=o("TapasTokenizer"),Vdo=o(" (TAPAS model)"),Xdo=l(),rh=a("li"),Ine=a("strong"),zdo=o("tapex"),Wdo=o(" \u2014 "),OB=a("a"),Qdo=o("TapexTokenizer"),Hdo=o(" (TAPEX model)"),Udo=l(),th=a("li"),Nne=a("strong"),Jdo=o("transfo-xl"),Ydo=o(" \u2014 "),VB=a("a"),Kdo=o("TransfoXLTokenizer"),Zdo=o(" (Transformer-XL model)"),eco=l(),xs=a("li"),qne=a("strong"),oco=o("visual_bert"),rco=o(" \u2014 "),XB=a("a"),tco=o("BertTokenizer"),aco=o(" or "),zB=a("a"),nco=o("BertTokenizerFast"),sco=o(" (VisualBERT model)"),lco=l(),ah=a("li"),jne=a("strong"),ico=o("wav2vec2"),dco=o(" \u2014 "),WB=a("a"),cco=o("Wav2Vec2CTCTokenizer"),fco=o(" (Wav2Vec2 model)"),mco=l(),nh=a("li"),Dne=a("strong"),gco=o("wav2vec2-conformer"),hco=o(" \u2014 "),QB=a("a"),pco=o("Wav2Vec2CTCTokenizer"),_co=o(" (Wav2Vec2-Conformer model)"),uco=l(),sh=a("li"),Gne=a("strong"),bco=o("wav2vec2_phoneme"),vco=o(" \u2014 "),HB=a("a"),Fco=o("Wav2Vec2PhonemeCTCTokenizer"),Tco=o(" (Wav2Vec2Phoneme model)"),Mco=l(),$s=a("li"),One=a("strong"),Eco=o("xglm"),Cco=o(" \u2014 "),UB=a("a"),wco=o("XGLMTokenizer"),Aco=o(" or "),JB=a("a"),Lco=o("XGLMTokenizerFast"),yco=o(" (XGLM model)"),xco=l(),lh=a("li"),Vne=a("strong"),$co=o("xlm"),kco=o(" \u2014 "),YB=a("a"),Sco=o("XLMTokenizer"),Rco=o(" (XLM model)"),Pco=l(),ih=a("li"),Xne=a("strong"),Bco=o("xlm-prophetnet"),Ico=o(" \u2014 "),KB=a("a"),Nco=o("XLMProphetNetTokenizer"),qco=o(" (XLM-ProphetNet model)"),jco=l(),ks=a("li"),zne=a("strong"),Dco=o("xlm-roberta"),Gco=o(" \u2014 "),ZB=a("a"),Oco=o("XLMRobertaTokenizer"),Vco=o(" or "),eI=a("a"),Xco=o("XLMRobertaTokenizerFast"),zco=o(" (XLM-RoBERTa model)"),Wco=l(),Ss=a("li"),Wne=a("strong"),Qco=o("xlm-roberta-xl"),Hco=o(" \u2014 "),oI=a("a"),Uco=o("RobertaTokenizer"),Jco=o(" or "),rI=a("a"),Yco=o("RobertaTokenizerFast"),Kco=o(" (XLM-RoBERTa-XL model)"),Zco=l(),Rs=a("li"),Qne=a("strong"),efo=o("xlnet"),ofo=o(" \u2014 "),tI=a("a"),rfo=o("XLNetTokenizer"),tfo=o(" or "),aI=a("a"),afo=o("XLNetTokenizerFast"),nfo=o(" (XLNet model)"),sfo=l(),Ps=a("li"),Hne=a("strong"),lfo=o("yoso"),ifo=o(" \u2014 "),nI=a("a"),dfo=o("AlbertTokenizer"),cfo=o(" or "),sI=a("a"),ffo=o("AlbertTokenizerFast"),mfo=o(" (YOSO model)"),gfo=l(),F(dh.$$.fragment),hfo=l(),ch=a("div"),F(aL.$$.fragment),pfo=l(),Une=a("p"),_fo=o("Register a new tokenizer in this mapping."),Lje=l(),Ci=a("h2"),fh=a("a"),Jne=a("span"),F(nL.$$.fragment),ufo=l(),Yne=a("span"),bfo=o("AutoFeatureExtractor"),yje=l(),Ao=a("div"),F(sL.$$.fragment),vfo=l(),lL=a("p"),Ffo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lI=a("a"),Tfo=o("AutoFeatureExtractor.from_pretrained()"),Mfo=o(" class method."),Efo=l(),iL=a("p"),Cfo=o("This class cannot be instantiated directly using "),Kne=a("code"),wfo=o("__init__()"),Afo=o(" (throws an error)."),Lfo=l(),He=a("div"),F(dL.$$.fragment),yfo=l(),Zne=a("p"),xfo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$fo=l(),La=a("p"),kfo=o("The feature extractor class to instantiate is selected based on the "),ese=a("code"),Sfo=o("model_type"),Rfo=o(` property of the config object
(either passed as an argument or loaded from `),ose=a("code"),Pfo=o("pretrained_model_name_or_path"),Bfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rse=a("code"),Ifo=o("pretrained_model_name_or_path"),Nfo=o(":"),qfo=l(),Y=a("ul"),mh=a("li"),tse=a("strong"),jfo=o("beit"),Dfo=o(" \u2014 "),iI=a("a"),Gfo=o("BeitFeatureExtractor"),Ofo=o(" (BEiT model)"),Vfo=l(),gh=a("li"),ase=a("strong"),Xfo=o("clip"),zfo=o(" \u2014 "),dI=a("a"),Wfo=o("CLIPFeatureExtractor"),Qfo=o(" (CLIP model)"),Hfo=l(),hh=a("li"),nse=a("strong"),Ufo=o("convnext"),Jfo=o(" \u2014 "),cI=a("a"),Yfo=o("ConvNextFeatureExtractor"),Kfo=o(" (ConvNeXT model)"),Zfo=l(),ph=a("li"),sse=a("strong"),emo=o("cvt"),omo=o(" \u2014 "),fI=a("a"),rmo=o("ConvNextFeatureExtractor"),tmo=o(" (CvT model)"),amo=l(),_h=a("li"),lse=a("strong"),nmo=o("data2vec-audio"),smo=o(" \u2014 "),mI=a("a"),lmo=o("Wav2Vec2FeatureExtractor"),imo=o(" (Data2VecAudio model)"),dmo=l(),uh=a("li"),ise=a("strong"),cmo=o("data2vec-vision"),fmo=o(" \u2014 "),gI=a("a"),mmo=o("BeitFeatureExtractor"),gmo=o(" (Data2VecVision model)"),hmo=l(),bh=a("li"),dse=a("strong"),pmo=o("deit"),_mo=o(" \u2014 "),hI=a("a"),umo=o("DeiTFeatureExtractor"),bmo=o(" (DeiT model)"),vmo=l(),vh=a("li"),cse=a("strong"),Fmo=o("detr"),Tmo=o(" \u2014 "),pI=a("a"),Mmo=o("DetrFeatureExtractor"),Emo=o(" (DETR model)"),Cmo=l(),Fh=a("li"),fse=a("strong"),wmo=o("dpt"),Amo=o(" \u2014 "),_I=a("a"),Lmo=o("DPTFeatureExtractor"),ymo=o(" (DPT model)"),xmo=l(),Th=a("li"),mse=a("strong"),$mo=o("flava"),kmo=o(" \u2014 "),uI=a("a"),Smo=o("FlavaFeatureExtractor"),Rmo=o(" (FLAVA model)"),Pmo=l(),Mh=a("li"),gse=a("strong"),Bmo=o("glpn"),Imo=o(" \u2014 "),bI=a("a"),Nmo=o("GLPNFeatureExtractor"),qmo=o(" (GLPN model)"),jmo=l(),Eh=a("li"),hse=a("strong"),Dmo=o("groupvit"),Gmo=o(" \u2014 "),vI=a("a"),Omo=o("CLIPFeatureExtractor"),Vmo=o(" (GroupViT model)"),Xmo=l(),Ch=a("li"),pse=a("strong"),zmo=o("hubert"),Wmo=o(" \u2014 "),FI=a("a"),Qmo=o("Wav2Vec2FeatureExtractor"),Hmo=o(" (Hubert model)"),Umo=l(),wh=a("li"),_se=a("strong"),Jmo=o("imagegpt"),Ymo=o(" \u2014 "),TI=a("a"),Kmo=o("ImageGPTFeatureExtractor"),Zmo=o(" (ImageGPT model)"),ego=l(),Ah=a("li"),use=a("strong"),ogo=o("layoutlmv2"),rgo=o(" \u2014 "),MI=a("a"),tgo=o("LayoutLMv2FeatureExtractor"),ago=o(" (LayoutLMv2 model)"),ngo=l(),Lh=a("li"),bse=a("strong"),sgo=o("layoutlmv3"),lgo=o(" \u2014 "),EI=a("a"),igo=o("LayoutLMv3FeatureExtractor"),dgo=o(" (LayoutLMv3 model)"),cgo=l(),yh=a("li"),vse=a("strong"),fgo=o("levit"),mgo=o(" \u2014 "),CI=a("a"),ggo=o("LevitFeatureExtractor"),hgo=o(" (LeViT model)"),pgo=l(),xh=a("li"),Fse=a("strong"),_go=o("maskformer"),ugo=o(" \u2014 "),wI=a("a"),bgo=o("MaskFormerFeatureExtractor"),vgo=o(" (MaskFormer model)"),Fgo=l(),$h=a("li"),Tse=a("strong"),Tgo=o("mctct"),Mgo=o(" \u2014 "),AI=a("a"),Ego=o("MCTCTFeatureExtractor"),Cgo=o(" (M-CTC-T model)"),wgo=l(),kh=a("li"),Mse=a("strong"),Ago=o("perceiver"),Lgo=o(" \u2014 "),LI=a("a"),ygo=o("PerceiverFeatureExtractor"),xgo=o(" (Perceiver model)"),$go=l(),Sh=a("li"),Ese=a("strong"),kgo=o("poolformer"),Sgo=o(" \u2014 "),yI=a("a"),Rgo=o("PoolFormerFeatureExtractor"),Pgo=o(" (PoolFormer model)"),Bgo=l(),Rh=a("li"),Cse=a("strong"),Igo=o("regnet"),Ngo=o(" \u2014 "),xI=a("a"),qgo=o("ConvNextFeatureExtractor"),jgo=o(" (RegNet model)"),Dgo=l(),Ph=a("li"),wse=a("strong"),Ggo=o("resnet"),Ogo=o(" \u2014 "),$I=a("a"),Vgo=o("ConvNextFeatureExtractor"),Xgo=o(" (ResNet model)"),zgo=l(),Bh=a("li"),Ase=a("strong"),Wgo=o("segformer"),Qgo=o(" \u2014 "),kI=a("a"),Hgo=o("SegformerFeatureExtractor"),Ugo=o(" (SegFormer model)"),Jgo=l(),Ih=a("li"),Lse=a("strong"),Ygo=o("speech_to_text"),Kgo=o(" \u2014 "),SI=a("a"),Zgo=o("Speech2TextFeatureExtractor"),eho=o(" (Speech2Text model)"),oho=l(),Nh=a("li"),yse=a("strong"),rho=o("swin"),tho=o(" \u2014 "),RI=a("a"),aho=o("ViTFeatureExtractor"),nho=o(" (Swin Transformer model)"),sho=l(),qh=a("li"),xse=a("strong"),lho=o("van"),iho=o(" \u2014 "),PI=a("a"),dho=o("ConvNextFeatureExtractor"),cho=o(" (VAN model)"),fho=l(),jh=a("li"),$se=a("strong"),mho=o("vit"),gho=o(" \u2014 "),BI=a("a"),hho=o("ViTFeatureExtractor"),pho=o(" (ViT model)"),_ho=l(),Dh=a("li"),kse=a("strong"),uho=o("vit_mae"),bho=o(" \u2014 "),II=a("a"),vho=o("ViTFeatureExtractor"),Fho=o(" (ViTMAE model)"),Tho=l(),Gh=a("li"),Sse=a("strong"),Mho=o("wav2vec2"),Eho=o(" \u2014 "),NI=a("a"),Cho=o("Wav2Vec2FeatureExtractor"),who=o(" (Wav2Vec2 model)"),Aho=l(),Oh=a("li"),Rse=a("strong"),Lho=o("wav2vec2-conformer"),yho=o(" \u2014 "),qI=a("a"),xho=o("Wav2Vec2FeatureExtractor"),$ho=o(" (Wav2Vec2-Conformer model)"),kho=l(),Vh=a("li"),Pse=a("strong"),Sho=o("yolos"),Rho=o(" \u2014 "),jI=a("a"),Pho=o("YolosFeatureExtractor"),Bho=o(" (YOLOS model)"),Iho=l(),F(Xh.$$.fragment),Nho=l(),F(zh.$$.fragment),qho=l(),Wh=a("div"),F(cL.$$.fragment),jho=l(),Bse=a("p"),Dho=o("Register a new feature extractor for this class."),xje=l(),wi=a("h2"),Qh=a("a"),Ise=a("span"),F(fL.$$.fragment),Gho=l(),Nse=a("span"),Oho=o("AutoProcessor"),$je=l(),Lo=a("div"),F(mL.$$.fragment),Vho=l(),gL=a("p"),Xho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DI=a("a"),zho=o("AutoProcessor.from_pretrained()"),Who=o(" class method."),Qho=l(),hL=a("p"),Hho=o("This class cannot be instantiated directly using "),qse=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),Ue=a("div"),F(pL.$$.fragment),Kho=l(),jse=a("p"),Zho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),epo=l(),Ai=a("p"),opo=o("The processor class to instantiate is selected based on the "),Dse=a("code"),rpo=o("model_type"),tpo=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),apo=o("pretrained_model_name_or_path"),npo=o(" if possible):"),spo=l(),he=a("ul"),Hh=a("li"),Ose=a("strong"),lpo=o("clip"),ipo=o(" \u2014 "),GI=a("a"),dpo=o("CLIPProcessor"),cpo=o(" (CLIP model)"),fpo=l(),Uh=a("li"),Vse=a("strong"),mpo=o("flava"),gpo=o(" \u2014 "),Xse=a("code"),hpo=o("FLAVAProcessor"),ppo=o(" (FLAVA model)"),_po=l(),Jh=a("li"),zse=a("strong"),upo=o("groupvit"),bpo=o(" \u2014 "),OI=a("a"),vpo=o("CLIPProcessor"),Fpo=o(" (GroupViT model)"),Tpo=l(),Yh=a("li"),Wse=a("strong"),Mpo=o("layoutlmv2"),Epo=o(" \u2014 "),VI=a("a"),Cpo=o("LayoutLMv2Processor"),wpo=o(" (LayoutLMv2 model)"),Apo=l(),Kh=a("li"),Qse=a("strong"),Lpo=o("layoutlmv3"),ypo=o(" \u2014 "),XI=a("a"),xpo=o("LayoutLMv3Processor"),$po=o(" (LayoutLMv3 model)"),kpo=l(),Zh=a("li"),Hse=a("strong"),Spo=o("layoutxlm"),Rpo=o(" \u2014 "),zI=a("a"),Ppo=o("LayoutXLMProcessor"),Bpo=o(" (LayoutXLM model)"),Ipo=l(),ep=a("li"),Use=a("strong"),Npo=o("sew"),qpo=o(" \u2014 "),WI=a("a"),jpo=o("Wav2Vec2Processor"),Dpo=o(" (SEW model)"),Gpo=l(),op=a("li"),Jse=a("strong"),Opo=o("sew-d"),Vpo=o(" \u2014 "),QI=a("a"),Xpo=o("Wav2Vec2Processor"),zpo=o(" (SEW-D model)"),Wpo=l(),rp=a("li"),Yse=a("strong"),Qpo=o("speech_to_text"),Hpo=o(" \u2014 "),HI=a("a"),Upo=o("Speech2TextProcessor"),Jpo=o(" (Speech2Text model)"),Ypo=l(),tp=a("li"),Kse=a("strong"),Kpo=o("speech_to_text_2"),Zpo=o(" \u2014 "),UI=a("a"),e_o=o("Speech2Text2Processor"),o_o=o(" (Speech2Text2 model)"),r_o=l(),ap=a("li"),Zse=a("strong"),t_o=o("trocr"),a_o=o(" \u2014 "),JI=a("a"),n_o=o("TrOCRProcessor"),s_o=o(" (TrOCR model)"),l_o=l(),np=a("li"),ele=a("strong"),i_o=o("unispeech"),d_o=o(" \u2014 "),YI=a("a"),c_o=o("Wav2Vec2Processor"),f_o=o(" (UniSpeech model)"),m_o=l(),sp=a("li"),ole=a("strong"),g_o=o("unispeech-sat"),h_o=o(" \u2014 "),KI=a("a"),p_o=o("Wav2Vec2Processor"),__o=o(" (UniSpeechSat model)"),u_o=l(),lp=a("li"),rle=a("strong"),b_o=o("vilt"),v_o=o(" \u2014 "),ZI=a("a"),F_o=o("ViltProcessor"),T_o=o(" (ViLT model)"),M_o=l(),ip=a("li"),tle=a("strong"),E_o=o("vision-text-dual-encoder"),C_o=o(" \u2014 "),eN=a("a"),w_o=o("VisionTextDualEncoderProcessor"),A_o=o(" (VisionTextDualEncoder model)"),L_o=l(),dp=a("li"),ale=a("strong"),y_o=o("wav2vec2"),x_o=o(" \u2014 "),oN=a("a"),$_o=o("Wav2Vec2Processor"),k_o=o(" (Wav2Vec2 model)"),S_o=l(),cp=a("li"),nle=a("strong"),R_o=o("wav2vec2-conformer"),P_o=o(" \u2014 "),rN=a("a"),B_o=o("Wav2Vec2Processor"),I_o=o(" (Wav2Vec2-Conformer model)"),N_o=l(),fp=a("li"),sle=a("strong"),q_o=o("wavlm"),j_o=o(" \u2014 "),tN=a("a"),D_o=o("Wav2Vec2Processor"),G_o=o(" (WavLM model)"),O_o=l(),F(mp.$$.fragment),V_o=l(),F(gp.$$.fragment),X_o=l(),hp=a("div"),F(_L.$$.fragment),z_o=l(),lle=a("p"),W_o=o("Register a new processor for this class."),kje=l(),Li=a("h2"),pp=a("a"),ile=a("span"),F(uL.$$.fragment),Q_o=l(),dle=a("span"),H_o=o("AutoModel"),Sje=l(),yo=a("div"),F(bL.$$.fragment),U_o=l(),yi=a("p"),J_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aN=a("a"),Y_o=o("from_pretrained()"),K_o=o(" class method or the "),nN=a("a"),Z_o=o("from_config()"),euo=o(` class
method.`),ouo=l(),vL=a("p"),ruo=o("This class cannot be instantiated directly using "),cle=a("code"),tuo=o("__init__()"),auo=o(" (throws an error)."),nuo=l(),tt=a("div"),F(FL.$$.fragment),suo=l(),fle=a("p"),luo=o("Instantiates one of the base model classes of the library from a configuration."),iuo=l(),xi=a("p"),duo=o(`Note:
Loading a model from its configuration file does `),mle=a("strong"),cuo=o("not"),fuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),muo=o("from_pretrained()"),guo=o(" to load the model weights."),huo=l(),F(_p.$$.fragment),puo=l(),Je=a("div"),F(TL.$$.fragment),_uo=l(),gle=a("p"),uuo=o("Instantiate one of the base model classes of the library from a pretrained model."),buo=l(),ya=a("p"),vuo=o("The model class to instantiate is selected based on the "),hle=a("code"),Fuo=o("model_type"),Tuo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),Muo=o("pretrained_model_name_or_path"),Euo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),Cuo=o("pretrained_model_name_or_path"),wuo=o(":"),Auo=l(),y=a("ul"),up=a("li"),ule=a("strong"),Luo=o("albert"),yuo=o(" \u2014 "),lN=a("a"),xuo=o("AlbertModel"),$uo=o(" (ALBERT model)"),kuo=l(),bp=a("li"),ble=a("strong"),Suo=o("bart"),Ruo=o(" \u2014 "),iN=a("a"),Puo=o("BartModel"),Buo=o(" (BART model)"),Iuo=l(),vp=a("li"),vle=a("strong"),Nuo=o("beit"),quo=o(" \u2014 "),dN=a("a"),juo=o("BeitModel"),Duo=o(" (BEiT model)"),Guo=l(),Fp=a("li"),Fle=a("strong"),Ouo=o("bert"),Vuo=o(" \u2014 "),cN=a("a"),Xuo=o("BertModel"),zuo=o(" (BERT model)"),Wuo=l(),Tp=a("li"),Tle=a("strong"),Quo=o("bert-generation"),Huo=o(" \u2014 "),fN=a("a"),Uuo=o("BertGenerationEncoder"),Juo=o(" (Bert Generation model)"),Yuo=l(),Mp=a("li"),Mle=a("strong"),Kuo=o("big_bird"),Zuo=o(" \u2014 "),mN=a("a"),e1o=o("BigBirdModel"),o1o=o(" (BigBird model)"),r1o=l(),Ep=a("li"),Ele=a("strong"),t1o=o("bigbird_pegasus"),a1o=o(" \u2014 "),gN=a("a"),n1o=o("BigBirdPegasusModel"),s1o=o(" (BigBird-Pegasus model)"),l1o=l(),Cp=a("li"),Cle=a("strong"),i1o=o("blenderbot"),d1o=o(" \u2014 "),hN=a("a"),c1o=o("BlenderbotModel"),f1o=o(" (Blenderbot model)"),m1o=l(),wp=a("li"),wle=a("strong"),g1o=o("blenderbot-small"),h1o=o(" \u2014 "),pN=a("a"),p1o=o("BlenderbotSmallModel"),_1o=o(" (BlenderbotSmall model)"),u1o=l(),Ap=a("li"),Ale=a("strong"),b1o=o("camembert"),v1o=o(" \u2014 "),_N=a("a"),F1o=o("CamembertModel"),T1o=o(" (CamemBERT model)"),M1o=l(),Lp=a("li"),Lle=a("strong"),E1o=o("canine"),C1o=o(" \u2014 "),uN=a("a"),w1o=o("CanineModel"),A1o=o(" (CANINE model)"),L1o=l(),yp=a("li"),yle=a("strong"),y1o=o("clip"),x1o=o(" \u2014 "),bN=a("a"),$1o=o("CLIPModel"),k1o=o(" (CLIP model)"),S1o=l(),xp=a("li"),xle=a("strong"),R1o=o("convbert"),P1o=o(" \u2014 "),vN=a("a"),B1o=o("ConvBertModel"),I1o=o(" (ConvBERT model)"),N1o=l(),$p=a("li"),$le=a("strong"),q1o=o("convnext"),j1o=o(" \u2014 "),FN=a("a"),D1o=o("ConvNextModel"),G1o=o(" (ConvNeXT model)"),O1o=l(),kp=a("li"),kle=a("strong"),V1o=o("ctrl"),X1o=o(" \u2014 "),TN=a("a"),z1o=o("CTRLModel"),W1o=o(" (CTRL model)"),Q1o=l(),Sp=a("li"),Sle=a("strong"),H1o=o("cvt"),U1o=o(" \u2014 "),MN=a("a"),J1o=o("CvtModel"),Y1o=o(" (CvT model)"),K1o=l(),Rp=a("li"),Rle=a("strong"),Z1o=o("data2vec-audio"),e3o=o(" \u2014 "),EN=a("a"),o3o=o("Data2VecAudioModel"),r3o=o(" (Data2VecAudio model)"),t3o=l(),Pp=a("li"),Ple=a("strong"),a3o=o("data2vec-text"),n3o=o(" \u2014 "),CN=a("a"),s3o=o("Data2VecTextModel"),l3o=o(" (Data2VecText model)"),i3o=l(),Bp=a("li"),Ble=a("strong"),d3o=o("data2vec-vision"),c3o=o(" \u2014 "),wN=a("a"),f3o=o("Data2VecVisionModel"),m3o=o(" (Data2VecVision model)"),g3o=l(),Ip=a("li"),Ile=a("strong"),h3o=o("deberta"),p3o=o(" \u2014 "),AN=a("a"),_3o=o("DebertaModel"),u3o=o(" (DeBERTa model)"),b3o=l(),Np=a("li"),Nle=a("strong"),v3o=o("deberta-v2"),F3o=o(" \u2014 "),LN=a("a"),T3o=o("DebertaV2Model"),M3o=o(" (DeBERTa-v2 model)"),E3o=l(),qp=a("li"),qle=a("strong"),C3o=o("decision_transformer"),w3o=o(" \u2014 "),yN=a("a"),A3o=o("DecisionTransformerModel"),L3o=o(" (Decision Transformer model)"),y3o=l(),jp=a("li"),jle=a("strong"),x3o=o("deit"),$3o=o(" \u2014 "),xN=a("a"),k3o=o("DeiTModel"),S3o=o(" (DeiT model)"),R3o=l(),Dp=a("li"),Dle=a("strong"),P3o=o("detr"),B3o=o(" \u2014 "),$N=a("a"),I3o=o("DetrModel"),N3o=o(" (DETR model)"),q3o=l(),Gp=a("li"),Gle=a("strong"),j3o=o("distilbert"),D3o=o(" \u2014 "),kN=a("a"),G3o=o("DistilBertModel"),O3o=o(" (DistilBERT model)"),V3o=l(),Op=a("li"),Ole=a("strong"),X3o=o("dpr"),z3o=o(" \u2014 "),SN=a("a"),W3o=o("DPRQuestionEncoder"),Q3o=o(" (DPR model)"),H3o=l(),Vp=a("li"),Vle=a("strong"),U3o=o("dpt"),J3o=o(" \u2014 "),RN=a("a"),Y3o=o("DPTModel"),K3o=o(" (DPT model)"),Z3o=l(),Xp=a("li"),Xle=a("strong"),ebo=o("electra"),obo=o(" \u2014 "),PN=a("a"),rbo=o("ElectraModel"),tbo=o(" (ELECTRA model)"),abo=l(),zp=a("li"),zle=a("strong"),nbo=o("flaubert"),sbo=o(" \u2014 "),BN=a("a"),lbo=o("FlaubertModel"),ibo=o(" (FlauBERT model)"),dbo=l(),Wp=a("li"),Wle=a("strong"),cbo=o("flava"),fbo=o(" \u2014 "),IN=a("a"),mbo=o("FlavaModel"),gbo=o(" (FLAVA model)"),hbo=l(),Qp=a("li"),Qle=a("strong"),pbo=o("fnet"),_bo=o(" \u2014 "),NN=a("a"),ubo=o("FNetModel"),bbo=o(" (FNet model)"),vbo=l(),Hp=a("li"),Hle=a("strong"),Fbo=o("fsmt"),Tbo=o(" \u2014 "),qN=a("a"),Mbo=o("FSMTModel"),Ebo=o(" (FairSeq Machine-Translation model)"),Cbo=l(),Bs=a("li"),Ule=a("strong"),wbo=o("funnel"),Abo=o(" \u2014 "),jN=a("a"),Lbo=o("FunnelModel"),ybo=o(" or "),DN=a("a"),xbo=o("FunnelBaseModel"),$bo=o(" (Funnel Transformer model)"),kbo=l(),Up=a("li"),Jle=a("strong"),Sbo=o("glpn"),Rbo=o(" \u2014 "),GN=a("a"),Pbo=o("GLPNModel"),Bbo=o(" (GLPN model)"),Ibo=l(),Jp=a("li"),Yle=a("strong"),Nbo=o("gpt2"),qbo=o(" \u2014 "),ON=a("a"),jbo=o("GPT2Model"),Dbo=o(" (OpenAI GPT-2 model)"),Gbo=l(),Yp=a("li"),Kle=a("strong"),Obo=o("gpt_neo"),Vbo=o(" \u2014 "),VN=a("a"),Xbo=o("GPTNeoModel"),zbo=o(" (GPT Neo model)"),Wbo=l(),Kp=a("li"),Zle=a("strong"),Qbo=o("gpt_neox"),Hbo=o(" \u2014 "),XN=a("a"),Ubo=o("GPTNeoXModel"),Jbo=o(" (GPT NeoX model)"),Ybo=l(),Zp=a("li"),eie=a("strong"),Kbo=o("gptj"),Zbo=o(" \u2014 "),zN=a("a"),e2o=o("GPTJModel"),o2o=o(" (GPT-J model)"),r2o=l(),e_=a("li"),oie=a("strong"),t2o=o("groupvit"),a2o=o(" \u2014 "),WN=a("a"),n2o=o("GroupViTModel"),s2o=o(" (GroupViT model)"),l2o=l(),o_=a("li"),rie=a("strong"),i2o=o("hubert"),d2o=o(" \u2014 "),QN=a("a"),c2o=o("HubertModel"),f2o=o(" (Hubert model)"),m2o=l(),r_=a("li"),tie=a("strong"),g2o=o("ibert"),h2o=o(" \u2014 "),HN=a("a"),p2o=o("IBertModel"),_2o=o(" (I-BERT model)"),u2o=l(),t_=a("li"),aie=a("strong"),b2o=o("imagegpt"),v2o=o(" \u2014 "),UN=a("a"),F2o=o("ImageGPTModel"),T2o=o(" (ImageGPT model)"),M2o=l(),a_=a("li"),nie=a("strong"),E2o=o("layoutlm"),C2o=o(" \u2014 "),JN=a("a"),w2o=o("LayoutLMModel"),A2o=o(" (LayoutLM model)"),L2o=l(),n_=a("li"),sie=a("strong"),y2o=o("layoutlmv2"),x2o=o(" \u2014 "),YN=a("a"),$2o=o("LayoutLMv2Model"),k2o=o(" (LayoutLMv2 model)"),S2o=l(),s_=a("li"),lie=a("strong"),R2o=o("layoutlmv3"),P2o=o(" \u2014 "),KN=a("a"),B2o=o("LayoutLMv3Model"),I2o=o(" (LayoutLMv3 model)"),N2o=l(),l_=a("li"),iie=a("strong"),q2o=o("led"),j2o=o(" \u2014 "),ZN=a("a"),D2o=o("LEDModel"),G2o=o(" (LED model)"),O2o=l(),i_=a("li"),die=a("strong"),V2o=o("levit"),X2o=o(" \u2014 "),eq=a("a"),z2o=o("LevitModel"),W2o=o(" (LeViT model)"),Q2o=l(),d_=a("li"),cie=a("strong"),H2o=o("longformer"),U2o=o(" \u2014 "),oq=a("a"),J2o=o("LongformerModel"),Y2o=o(" (Longformer model)"),K2o=l(),c_=a("li"),fie=a("strong"),Z2o=o("luke"),evo=o(" \u2014 "),rq=a("a"),ovo=o("LukeModel"),rvo=o(" (LUKE model)"),tvo=l(),f_=a("li"),mie=a("strong"),avo=o("lxmert"),nvo=o(" \u2014 "),tq=a("a"),svo=o("LxmertModel"),lvo=o(" (LXMERT model)"),ivo=l(),m_=a("li"),gie=a("strong"),dvo=o("m2m_100"),cvo=o(" \u2014 "),aq=a("a"),fvo=o("M2M100Model"),mvo=o(" (M2M100 model)"),gvo=l(),g_=a("li"),hie=a("strong"),hvo=o("marian"),pvo=o(" \u2014 "),nq=a("a"),_vo=o("MarianModel"),uvo=o(" (Marian model)"),bvo=l(),h_=a("li"),pie=a("strong"),vvo=o("maskformer"),Fvo=o(" \u2014 "),sq=a("a"),Tvo=o("MaskFormerModel"),Mvo=o(" (MaskFormer model)"),Evo=l(),p_=a("li"),_ie=a("strong"),Cvo=o("mbart"),wvo=o(" \u2014 "),lq=a("a"),Avo=o("MBartModel"),Lvo=o(" (mBART model)"),yvo=l(),__=a("li"),uie=a("strong"),xvo=o("mctct"),$vo=o(" \u2014 "),iq=a("a"),kvo=o("MCTCTModel"),Svo=o(" (M-CTC-T model)"),Rvo=l(),u_=a("li"),bie=a("strong"),Pvo=o("megatron-bert"),Bvo=o(" \u2014 "),dq=a("a"),Ivo=o("MegatronBertModel"),Nvo=o(" (Megatron-BERT model)"),qvo=l(),b_=a("li"),vie=a("strong"),jvo=o("mobilebert"),Dvo=o(" \u2014 "),cq=a("a"),Gvo=o("MobileBertModel"),Ovo=o(" (MobileBERT model)"),Vvo=l(),v_=a("li"),Fie=a("strong"),Xvo=o("mpnet"),zvo=o(" \u2014 "),fq=a("a"),Wvo=o("MPNetModel"),Qvo=o(" (MPNet model)"),Hvo=l(),F_=a("li"),Tie=a("strong"),Uvo=o("mt5"),Jvo=o(" \u2014 "),mq=a("a"),Yvo=o("MT5Model"),Kvo=o(" (MT5 model)"),Zvo=l(),T_=a("li"),Mie=a("strong"),eFo=o("nystromformer"),oFo=o(" \u2014 "),gq=a("a"),rFo=o("NystromformerModel"),tFo=o(" (Nystr\xF6mformer model)"),aFo=l(),M_=a("li"),Eie=a("strong"),nFo=o("openai-gpt"),sFo=o(" \u2014 "),hq=a("a"),lFo=o("OpenAIGPTModel"),iFo=o(" (OpenAI GPT model)"),dFo=l(),E_=a("li"),Cie=a("strong"),cFo=o("opt"),fFo=o(" \u2014 "),pq=a("a"),mFo=o("OPTModel"),gFo=o(" (OPT model)"),hFo=l(),C_=a("li"),wie=a("strong"),pFo=o("pegasus"),_Fo=o(" \u2014 "),_q=a("a"),uFo=o("PegasusModel"),bFo=o(" (Pegasus model)"),vFo=l(),w_=a("li"),Aie=a("strong"),FFo=o("perceiver"),TFo=o(" \u2014 "),uq=a("a"),MFo=o("PerceiverModel"),EFo=o(" (Perceiver model)"),CFo=l(),A_=a("li"),Lie=a("strong"),wFo=o("plbart"),AFo=o(" \u2014 "),bq=a("a"),LFo=o("PLBartModel"),yFo=o(" (PLBart model)"),xFo=l(),L_=a("li"),yie=a("strong"),$Fo=o("poolformer"),kFo=o(" \u2014 "),vq=a("a"),SFo=o("PoolFormerModel"),RFo=o(" (PoolFormer model)"),PFo=l(),y_=a("li"),xie=a("strong"),BFo=o("prophetnet"),IFo=o(" \u2014 "),Fq=a("a"),NFo=o("ProphetNetModel"),qFo=o(" (ProphetNet model)"),jFo=l(),x_=a("li"),$ie=a("strong"),DFo=o("qdqbert"),GFo=o(" \u2014 "),Tq=a("a"),OFo=o("QDQBertModel"),VFo=o(" (QDQBert model)"),XFo=l(),$_=a("li"),kie=a("strong"),zFo=o("reformer"),WFo=o(" \u2014 "),Mq=a("a"),QFo=o("ReformerModel"),HFo=o(" (Reformer model)"),UFo=l(),k_=a("li"),Sie=a("strong"),JFo=o("regnet"),YFo=o(" \u2014 "),Eq=a("a"),KFo=o("RegNetModel"),ZFo=o(" (RegNet model)"),eTo=l(),S_=a("li"),Rie=a("strong"),oTo=o("rembert"),rTo=o(" \u2014 "),Cq=a("a"),tTo=o("RemBertModel"),aTo=o(" (RemBERT model)"),nTo=l(),R_=a("li"),Pie=a("strong"),sTo=o("resnet"),lTo=o(" \u2014 "),wq=a("a"),iTo=o("ResNetModel"),dTo=o(" (ResNet model)"),cTo=l(),P_=a("li"),Bie=a("strong"),fTo=o("retribert"),mTo=o(" \u2014 "),Aq=a("a"),gTo=o("RetriBertModel"),hTo=o(" (RetriBERT model)"),pTo=l(),B_=a("li"),Iie=a("strong"),_To=o("roberta"),uTo=o(" \u2014 "),Lq=a("a"),bTo=o("RobertaModel"),vTo=o(" (RoBERTa model)"),FTo=l(),I_=a("li"),Nie=a("strong"),TTo=o("roformer"),MTo=o(" \u2014 "),yq=a("a"),ETo=o("RoFormerModel"),CTo=o(" (RoFormer model)"),wTo=l(),N_=a("li"),qie=a("strong"),ATo=o("segformer"),LTo=o(" \u2014 "),xq=a("a"),yTo=o("SegformerModel"),xTo=o(" (SegFormer model)"),$To=l(),q_=a("li"),jie=a("strong"),kTo=o("sew"),STo=o(" \u2014 "),$q=a("a"),RTo=o("SEWModel"),PTo=o(" (SEW model)"),BTo=l(),j_=a("li"),Die=a("strong"),ITo=o("sew-d"),NTo=o(" \u2014 "),kq=a("a"),qTo=o("SEWDModel"),jTo=o(" (SEW-D model)"),DTo=l(),D_=a("li"),Gie=a("strong"),GTo=o("speech_to_text"),OTo=o(" \u2014 "),Sq=a("a"),VTo=o("Speech2TextModel"),XTo=o(" (Speech2Text model)"),zTo=l(),G_=a("li"),Oie=a("strong"),WTo=o("splinter"),QTo=o(" \u2014 "),Rq=a("a"),HTo=o("SplinterModel"),UTo=o(" (Splinter model)"),JTo=l(),O_=a("li"),Vie=a("strong"),YTo=o("squeezebert"),KTo=o(" \u2014 "),Pq=a("a"),ZTo=o("SqueezeBertModel"),e7o=o(" (SqueezeBERT model)"),o7o=l(),V_=a("li"),Xie=a("strong"),r7o=o("swin"),t7o=o(" \u2014 "),Bq=a("a"),a7o=o("SwinModel"),n7o=o(" (Swin Transformer model)"),s7o=l(),X_=a("li"),zie=a("strong"),l7o=o("t5"),i7o=o(" \u2014 "),Iq=a("a"),d7o=o("T5Model"),c7o=o(" (T5 model)"),f7o=l(),z_=a("li"),Wie=a("strong"),m7o=o("tapas"),g7o=o(" \u2014 "),Nq=a("a"),h7o=o("TapasModel"),p7o=o(" (TAPAS model)"),_7o=l(),W_=a("li"),Qie=a("strong"),u7o=o("trajectory_transformer"),b7o=o(" \u2014 "),qq=a("a"),v7o=o("TrajectoryTransformerModel"),F7o=o(" (Trajectory Transformer model)"),T7o=l(),Q_=a("li"),Hie=a("strong"),M7o=o("transfo-xl"),E7o=o(" \u2014 "),jq=a("a"),C7o=o("TransfoXLModel"),w7o=o(" (Transformer-XL model)"),A7o=l(),H_=a("li"),Uie=a("strong"),L7o=o("unispeech"),y7o=o(" \u2014 "),Dq=a("a"),x7o=o("UniSpeechModel"),$7o=o(" (UniSpeech model)"),k7o=l(),U_=a("li"),Jie=a("strong"),S7o=o("unispeech-sat"),R7o=o(" \u2014 "),Gq=a("a"),P7o=o("UniSpeechSatModel"),B7o=o(" (UniSpeechSat model)"),I7o=l(),J_=a("li"),Yie=a("strong"),N7o=o("van"),q7o=o(" \u2014 "),Oq=a("a"),j7o=o("VanModel"),D7o=o(" (VAN model)"),G7o=l(),Y_=a("li"),Kie=a("strong"),O7o=o("vilt"),V7o=o(" \u2014 "),Vq=a("a"),X7o=o("ViltModel"),z7o=o(" (ViLT model)"),W7o=l(),K_=a("li"),Zie=a("strong"),Q7o=o("vision-text-dual-encoder"),H7o=o(" \u2014 "),Xq=a("a"),U7o=o("VisionTextDualEncoderModel"),J7o=o(" (VisionTextDualEncoder model)"),Y7o=l(),Z_=a("li"),ede=a("strong"),K7o=o("visual_bert"),Z7o=o(" \u2014 "),zq=a("a"),eMo=o("VisualBertModel"),oMo=o(" (VisualBERT model)"),rMo=l(),eu=a("li"),ode=a("strong"),tMo=o("vit"),aMo=o(" \u2014 "),Wq=a("a"),nMo=o("ViTModel"),sMo=o(" (ViT model)"),lMo=l(),ou=a("li"),rde=a("strong"),iMo=o("vit_mae"),dMo=o(" \u2014 "),Qq=a("a"),cMo=o("ViTMAEModel"),fMo=o(" (ViTMAE model)"),mMo=l(),ru=a("li"),tde=a("strong"),gMo=o("wav2vec2"),hMo=o(" \u2014 "),Hq=a("a"),pMo=o("Wav2Vec2Model"),_Mo=o(" (Wav2Vec2 model)"),uMo=l(),tu=a("li"),ade=a("strong"),bMo=o("wav2vec2-conformer"),vMo=o(" \u2014 "),Uq=a("a"),FMo=o("Wav2Vec2ConformerModel"),TMo=o(" (Wav2Vec2-Conformer model)"),MMo=l(),au=a("li"),nde=a("strong"),EMo=o("wavlm"),CMo=o(" \u2014 "),Jq=a("a"),wMo=o("WavLMModel"),AMo=o(" (WavLM model)"),LMo=l(),nu=a("li"),sde=a("strong"),yMo=o("xglm"),xMo=o(" \u2014 "),Yq=a("a"),$Mo=o("XGLMModel"),kMo=o(" (XGLM model)"),SMo=l(),su=a("li"),lde=a("strong"),RMo=o("xlm"),PMo=o(" \u2014 "),Kq=a("a"),BMo=o("XLMModel"),IMo=o(" (XLM model)"),NMo=l(),lu=a("li"),ide=a("strong"),qMo=o("xlm-prophetnet"),jMo=o(" \u2014 "),Zq=a("a"),DMo=o("XLMProphetNetModel"),GMo=o(" (XLM-ProphetNet model)"),OMo=l(),iu=a("li"),dde=a("strong"),VMo=o("xlm-roberta"),XMo=o(" \u2014 "),ej=a("a"),zMo=o("XLMRobertaModel"),WMo=o(" (XLM-RoBERTa model)"),QMo=l(),du=a("li"),cde=a("strong"),HMo=o("xlm-roberta-xl"),UMo=o(" \u2014 "),oj=a("a"),JMo=o("XLMRobertaXLModel"),YMo=o(" (XLM-RoBERTa-XL model)"),KMo=l(),cu=a("li"),fde=a("strong"),ZMo=o("xlnet"),e4o=o(" \u2014 "),rj=a("a"),o4o=o("XLNetModel"),r4o=o(" (XLNet model)"),t4o=l(),fu=a("li"),mde=a("strong"),a4o=o("yolos"),n4o=o(" \u2014 "),tj=a("a"),s4o=o("YolosModel"),l4o=o(" (YOLOS model)"),i4o=l(),mu=a("li"),gde=a("strong"),d4o=o("yoso"),c4o=o(" \u2014 "),aj=a("a"),f4o=o("YosoModel"),m4o=o(" (YOSO model)"),g4o=l(),gu=a("p"),h4o=o("The model is set in evaluation mode by default using "),hde=a("code"),p4o=o("model.eval()"),_4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=a("code"),u4o=o("model.train()"),b4o=l(),F(hu.$$.fragment),Rje=l(),$i=a("h2"),pu=a("a"),_de=a("span"),F(ML.$$.fragment),v4o=l(),ude=a("span"),F4o=o("AutoModelForPreTraining"),Pje=l(),xo=a("div"),F(EL.$$.fragment),T4o=l(),ki=a("p"),M4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nj=a("a"),E4o=o("from_pretrained()"),C4o=o(" class method or the "),sj=a("a"),w4o=o("from_config()"),A4o=o(` class
method.`),L4o=l(),CL=a("p"),y4o=o("This class cannot be instantiated directly using "),bde=a("code"),x4o=o("__init__()"),$4o=o(" (throws an error)."),k4o=l(),at=a("div"),F(wL.$$.fragment),S4o=l(),vde=a("p"),R4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P4o=l(),Si=a("p"),B4o=o(`Note:
Loading a model from its configuration file does `),Fde=a("strong"),I4o=o("not"),N4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),q4o=o("from_pretrained()"),j4o=o(" to load the model weights."),D4o=l(),F(_u.$$.fragment),G4o=l(),Ye=a("div"),F(AL.$$.fragment),O4o=l(),Tde=a("p"),V4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X4o=l(),xa=a("p"),z4o=o("The model class to instantiate is selected based on the "),Mde=a("code"),W4o=o("model_type"),Q4o=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),H4o=o("pretrained_model_name_or_path"),U4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),J4o=o("pretrained_model_name_or_path"),Y4o=o(":"),K4o=l(),G=a("ul"),uu=a("li"),wde=a("strong"),Z4o=o("albert"),eEo=o(" \u2014 "),ij=a("a"),oEo=o("AlbertForPreTraining"),rEo=o(" (ALBERT model)"),tEo=l(),bu=a("li"),Ade=a("strong"),aEo=o("bart"),nEo=o(" \u2014 "),dj=a("a"),sEo=o("BartForConditionalGeneration"),lEo=o(" (BART model)"),iEo=l(),vu=a("li"),Lde=a("strong"),dEo=o("bert"),cEo=o(" \u2014 "),cj=a("a"),fEo=o("BertForPreTraining"),mEo=o(" (BERT model)"),gEo=l(),Fu=a("li"),yde=a("strong"),hEo=o("big_bird"),pEo=o(" \u2014 "),fj=a("a"),_Eo=o("BigBirdForPreTraining"),uEo=o(" (BigBird model)"),bEo=l(),Tu=a("li"),xde=a("strong"),vEo=o("camembert"),FEo=o(" \u2014 "),mj=a("a"),TEo=o("CamembertForMaskedLM"),MEo=o(" (CamemBERT model)"),EEo=l(),Mu=a("li"),$de=a("strong"),CEo=o("ctrl"),wEo=o(" \u2014 "),gj=a("a"),AEo=o("CTRLLMHeadModel"),LEo=o(" (CTRL model)"),yEo=l(),Eu=a("li"),kde=a("strong"),xEo=o("data2vec-text"),$Eo=o(" \u2014 "),hj=a("a"),kEo=o("Data2VecTextForMaskedLM"),SEo=o(" (Data2VecText model)"),REo=l(),Cu=a("li"),Sde=a("strong"),PEo=o("deberta"),BEo=o(" \u2014 "),pj=a("a"),IEo=o("DebertaForMaskedLM"),NEo=o(" (DeBERTa model)"),qEo=l(),wu=a("li"),Rde=a("strong"),jEo=o("deberta-v2"),DEo=o(" \u2014 "),_j=a("a"),GEo=o("DebertaV2ForMaskedLM"),OEo=o(" (DeBERTa-v2 model)"),VEo=l(),Au=a("li"),Pde=a("strong"),XEo=o("distilbert"),zEo=o(" \u2014 "),uj=a("a"),WEo=o("DistilBertForMaskedLM"),QEo=o(" (DistilBERT model)"),HEo=l(),Lu=a("li"),Bde=a("strong"),UEo=o("electra"),JEo=o(" \u2014 "),bj=a("a"),YEo=o("ElectraForPreTraining"),KEo=o(" (ELECTRA model)"),ZEo=l(),yu=a("li"),Ide=a("strong"),eCo=o("flaubert"),oCo=o(" \u2014 "),vj=a("a"),rCo=o("FlaubertWithLMHeadModel"),tCo=o(" (FlauBERT model)"),aCo=l(),xu=a("li"),Nde=a("strong"),nCo=o("flava"),sCo=o(" \u2014 "),Fj=a("a"),lCo=o("FlavaForPreTraining"),iCo=o(" (FLAVA model)"),dCo=l(),$u=a("li"),qde=a("strong"),cCo=o("fnet"),fCo=o(" \u2014 "),Tj=a("a"),mCo=o("FNetForPreTraining"),gCo=o(" (FNet model)"),hCo=l(),ku=a("li"),jde=a("strong"),pCo=o("fsmt"),_Co=o(" \u2014 "),Mj=a("a"),uCo=o("FSMTForConditionalGeneration"),bCo=o(" (FairSeq Machine-Translation model)"),vCo=l(),Su=a("li"),Dde=a("strong"),FCo=o("funnel"),TCo=o(" \u2014 "),Ej=a("a"),MCo=o("FunnelForPreTraining"),ECo=o(" (Funnel Transformer model)"),CCo=l(),Ru=a("li"),Gde=a("strong"),wCo=o("gpt2"),ACo=o(" \u2014 "),Cj=a("a"),LCo=o("GPT2LMHeadModel"),yCo=o(" (OpenAI GPT-2 model)"),xCo=l(),Pu=a("li"),Ode=a("strong"),$Co=o("ibert"),kCo=o(" \u2014 "),wj=a("a"),SCo=o("IBertForMaskedLM"),RCo=o(" (I-BERT model)"),PCo=l(),Bu=a("li"),Vde=a("strong"),BCo=o("layoutlm"),ICo=o(" \u2014 "),Aj=a("a"),NCo=o("LayoutLMForMaskedLM"),qCo=o(" (LayoutLM model)"),jCo=l(),Iu=a("li"),Xde=a("strong"),DCo=o("longformer"),GCo=o(" \u2014 "),Lj=a("a"),OCo=o("LongformerForMaskedLM"),VCo=o(" (Longformer model)"),XCo=l(),Nu=a("li"),zde=a("strong"),zCo=o("lxmert"),WCo=o(" \u2014 "),yj=a("a"),QCo=o("LxmertForPreTraining"),HCo=o(" (LXMERT model)"),UCo=l(),qu=a("li"),Wde=a("strong"),JCo=o("megatron-bert"),YCo=o(" \u2014 "),xj=a("a"),KCo=o("MegatronBertForPreTraining"),ZCo=o(" (Megatron-BERT model)"),e5o=l(),ju=a("li"),Qde=a("strong"),o5o=o("mobilebert"),r5o=o(" \u2014 "),$j=a("a"),t5o=o("MobileBertForPreTraining"),a5o=o(" (MobileBERT model)"),n5o=l(),Du=a("li"),Hde=a("strong"),s5o=o("mpnet"),l5o=o(" \u2014 "),kj=a("a"),i5o=o("MPNetForMaskedLM"),d5o=o(" (MPNet model)"),c5o=l(),Gu=a("li"),Ude=a("strong"),f5o=o("openai-gpt"),m5o=o(" \u2014 "),Sj=a("a"),g5o=o("OpenAIGPTLMHeadModel"),h5o=o(" (OpenAI GPT model)"),p5o=l(),Ou=a("li"),Jde=a("strong"),_5o=o("retribert"),u5o=o(" \u2014 "),Rj=a("a"),b5o=o("RetriBertModel"),v5o=o(" (RetriBERT model)"),F5o=l(),Vu=a("li"),Yde=a("strong"),T5o=o("roberta"),M5o=o(" \u2014 "),Pj=a("a"),E5o=o("RobertaForMaskedLM"),C5o=o(" (RoBERTa model)"),w5o=l(),Xu=a("li"),Kde=a("strong"),A5o=o("splinter"),L5o=o(" \u2014 "),Bj=a("a"),y5o=o("SplinterForPreTraining"),x5o=o(" (Splinter model)"),$5o=l(),zu=a("li"),Zde=a("strong"),k5o=o("squeezebert"),S5o=o(" \u2014 "),Ij=a("a"),R5o=o("SqueezeBertForMaskedLM"),P5o=o(" (SqueezeBERT model)"),B5o=l(),Wu=a("li"),ece=a("strong"),I5o=o("t5"),N5o=o(" \u2014 "),Nj=a("a"),q5o=o("T5ForConditionalGeneration"),j5o=o(" (T5 model)"),D5o=l(),Qu=a("li"),oce=a("strong"),G5o=o("tapas"),O5o=o(" \u2014 "),qj=a("a"),V5o=o("TapasForMaskedLM"),X5o=o(" (TAPAS model)"),z5o=l(),Hu=a("li"),rce=a("strong"),W5o=o("transfo-xl"),Q5o=o(" \u2014 "),jj=a("a"),H5o=o("TransfoXLLMHeadModel"),U5o=o(" (Transformer-XL model)"),J5o=l(),Uu=a("li"),tce=a("strong"),Y5o=o("unispeech"),K5o=o(" \u2014 "),Dj=a("a"),Z5o=o("UniSpeechForPreTraining"),e0o=o(" (UniSpeech model)"),o0o=l(),Ju=a("li"),ace=a("strong"),r0o=o("unispeech-sat"),t0o=o(" \u2014 "),Gj=a("a"),a0o=o("UniSpeechSatForPreTraining"),n0o=o(" (UniSpeechSat model)"),s0o=l(),Yu=a("li"),nce=a("strong"),l0o=o("visual_bert"),i0o=o(" \u2014 "),Oj=a("a"),d0o=o("VisualBertForPreTraining"),c0o=o(" (VisualBERT model)"),f0o=l(),Ku=a("li"),sce=a("strong"),m0o=o("vit_mae"),g0o=o(" \u2014 "),Vj=a("a"),h0o=o("ViTMAEForPreTraining"),p0o=o(" (ViTMAE model)"),_0o=l(),Zu=a("li"),lce=a("strong"),u0o=o("wav2vec2"),b0o=o(" \u2014 "),Xj=a("a"),v0o=o("Wav2Vec2ForPreTraining"),F0o=o(" (Wav2Vec2 model)"),T0o=l(),e1=a("li"),ice=a("strong"),M0o=o("wav2vec2-conformer"),E0o=o(" \u2014 "),zj=a("a"),C0o=o("Wav2Vec2ConformerForPreTraining"),w0o=o(" (Wav2Vec2-Conformer model)"),A0o=l(),o1=a("li"),dce=a("strong"),L0o=o("xlm"),y0o=o(" \u2014 "),Wj=a("a"),x0o=o("XLMWithLMHeadModel"),$0o=o(" (XLM model)"),k0o=l(),r1=a("li"),cce=a("strong"),S0o=o("xlm-roberta"),R0o=o(" \u2014 "),Qj=a("a"),P0o=o("XLMRobertaForMaskedLM"),B0o=o(" (XLM-RoBERTa model)"),I0o=l(),t1=a("li"),fce=a("strong"),N0o=o("xlm-roberta-xl"),q0o=o(" \u2014 "),Hj=a("a"),j0o=o("XLMRobertaXLForMaskedLM"),D0o=o(" (XLM-RoBERTa-XL model)"),G0o=l(),a1=a("li"),mce=a("strong"),O0o=o("xlnet"),V0o=o(" \u2014 "),Uj=a("a"),X0o=o("XLNetLMHeadModel"),z0o=o(" (XLNet model)"),W0o=l(),n1=a("p"),Q0o=o("The model is set in evaluation mode by default using "),gce=a("code"),H0o=o("model.eval()"),U0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=a("code"),J0o=o("model.train()"),Y0o=l(),F(s1.$$.fragment),Bje=l(),Ri=a("h2"),l1=a("a"),pce=a("span"),F(LL.$$.fragment),K0o=l(),_ce=a("span"),Z0o=o("AutoModelForCausalLM"),Ije=l(),$o=a("div"),F(yL.$$.fragment),ewo=l(),Pi=a("p"),owo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Jj=a("a"),rwo=o("from_pretrained()"),two=o(" class method or the "),Yj=a("a"),awo=o("from_config()"),nwo=o(` class
method.`),swo=l(),xL=a("p"),lwo=o("This class cannot be instantiated directly using "),uce=a("code"),iwo=o("__init__()"),dwo=o(" (throws an error)."),cwo=l(),nt=a("div"),F($L.$$.fragment),fwo=l(),bce=a("p"),mwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gwo=l(),Bi=a("p"),hwo=o(`Note:
Loading a model from its configuration file does `),vce=a("strong"),pwo=o("not"),_wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=a("a"),uwo=o("from_pretrained()"),bwo=o(" to load the model weights."),vwo=l(),F(i1.$$.fragment),Fwo=l(),Ke=a("div"),F(kL.$$.fragment),Two=l(),Fce=a("p"),Mwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ewo=l(),$a=a("p"),Cwo=o("The model class to instantiate is selected based on the "),Tce=a("code"),wwo=o("model_type"),Awo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),Lwo=o("pretrained_model_name_or_path"),ywo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),xwo=o("pretrained_model_name_or_path"),$wo=o(":"),kwo=l(),z=a("ul"),d1=a("li"),Cce=a("strong"),Swo=o("bart"),Rwo=o(" \u2014 "),Zj=a("a"),Pwo=o("BartForCausalLM"),Bwo=o(" (BART model)"),Iwo=l(),c1=a("li"),wce=a("strong"),Nwo=o("bert"),qwo=o(" \u2014 "),eD=a("a"),jwo=o("BertLMHeadModel"),Dwo=o(" (BERT model)"),Gwo=l(),f1=a("li"),Ace=a("strong"),Owo=o("bert-generation"),Vwo=o(" \u2014 "),oD=a("a"),Xwo=o("BertGenerationDecoder"),zwo=o(" (Bert Generation model)"),Wwo=l(),m1=a("li"),Lce=a("strong"),Qwo=o("big_bird"),Hwo=o(" \u2014 "),rD=a("a"),Uwo=o("BigBirdForCausalLM"),Jwo=o(" (BigBird model)"),Ywo=l(),g1=a("li"),yce=a("strong"),Kwo=o("bigbird_pegasus"),Zwo=o(" \u2014 "),tD=a("a"),eAo=o("BigBirdPegasusForCausalLM"),oAo=o(" (BigBird-Pegasus model)"),rAo=l(),h1=a("li"),xce=a("strong"),tAo=o("blenderbot"),aAo=o(" \u2014 "),aD=a("a"),nAo=o("BlenderbotForCausalLM"),sAo=o(" (Blenderbot model)"),lAo=l(),p1=a("li"),$ce=a("strong"),iAo=o("blenderbot-small"),dAo=o(" \u2014 "),nD=a("a"),cAo=o("BlenderbotSmallForCausalLM"),fAo=o(" (BlenderbotSmall model)"),mAo=l(),_1=a("li"),kce=a("strong"),gAo=o("camembert"),hAo=o(" \u2014 "),sD=a("a"),pAo=o("CamembertForCausalLM"),_Ao=o(" (CamemBERT model)"),uAo=l(),u1=a("li"),Sce=a("strong"),bAo=o("ctrl"),vAo=o(" \u2014 "),lD=a("a"),FAo=o("CTRLLMHeadModel"),TAo=o(" (CTRL model)"),MAo=l(),b1=a("li"),Rce=a("strong"),EAo=o("data2vec-text"),CAo=o(" \u2014 "),iD=a("a"),wAo=o("Data2VecTextForCausalLM"),AAo=o(" (Data2VecText model)"),LAo=l(),v1=a("li"),Pce=a("strong"),yAo=o("electra"),xAo=o(" \u2014 "),dD=a("a"),$Ao=o("ElectraForCausalLM"),kAo=o(" (ELECTRA model)"),SAo=l(),F1=a("li"),Bce=a("strong"),RAo=o("gpt2"),PAo=o(" \u2014 "),cD=a("a"),BAo=o("GPT2LMHeadModel"),IAo=o(" (OpenAI GPT-2 model)"),NAo=l(),T1=a("li"),Ice=a("strong"),qAo=o("gpt_neo"),jAo=o(" \u2014 "),fD=a("a"),DAo=o("GPTNeoForCausalLM"),GAo=o(" (GPT Neo model)"),OAo=l(),M1=a("li"),Nce=a("strong"),VAo=o("gpt_neox"),XAo=o(" \u2014 "),mD=a("a"),zAo=o("GPTNeoXForCausalLM"),WAo=o(" (GPT NeoX model)"),QAo=l(),E1=a("li"),qce=a("strong"),HAo=o("gptj"),UAo=o(" \u2014 "),gD=a("a"),JAo=o("GPTJForCausalLM"),YAo=o(" (GPT-J model)"),KAo=l(),C1=a("li"),jce=a("strong"),ZAo=o("marian"),e6o=o(" \u2014 "),hD=a("a"),o6o=o("MarianForCausalLM"),r6o=o(" (Marian model)"),t6o=l(),w1=a("li"),Dce=a("strong"),a6o=o("mbart"),n6o=o(" \u2014 "),pD=a("a"),s6o=o("MBartForCausalLM"),l6o=o(" (mBART model)"),i6o=l(),A1=a("li"),Gce=a("strong"),d6o=o("megatron-bert"),c6o=o(" \u2014 "),_D=a("a"),f6o=o("MegatronBertForCausalLM"),m6o=o(" (Megatron-BERT model)"),g6o=l(),L1=a("li"),Oce=a("strong"),h6o=o("openai-gpt"),p6o=o(" \u2014 "),uD=a("a"),_6o=o("OpenAIGPTLMHeadModel"),u6o=o(" (OpenAI GPT model)"),b6o=l(),y1=a("li"),Vce=a("strong"),v6o=o("opt"),F6o=o(" \u2014 "),bD=a("a"),T6o=o("OPTForCausalLM"),M6o=o(" (OPT model)"),E6o=l(),x1=a("li"),Xce=a("strong"),C6o=o("pegasus"),w6o=o(" \u2014 "),vD=a("a"),A6o=o("PegasusForCausalLM"),L6o=o(" (Pegasus model)"),y6o=l(),$1=a("li"),zce=a("strong"),x6o=o("plbart"),$6o=o(" \u2014 "),FD=a("a"),k6o=o("PLBartForCausalLM"),S6o=o(" (PLBart model)"),R6o=l(),k1=a("li"),Wce=a("strong"),P6o=o("prophetnet"),B6o=o(" \u2014 "),TD=a("a"),I6o=o("ProphetNetForCausalLM"),N6o=o(" (ProphetNet model)"),q6o=l(),S1=a("li"),Qce=a("strong"),j6o=o("qdqbert"),D6o=o(" \u2014 "),MD=a("a"),G6o=o("QDQBertLMHeadModel"),O6o=o(" (QDQBert model)"),V6o=l(),R1=a("li"),Hce=a("strong"),X6o=o("reformer"),z6o=o(" \u2014 "),ED=a("a"),W6o=o("ReformerModelWithLMHead"),Q6o=o(" (Reformer model)"),H6o=l(),P1=a("li"),Uce=a("strong"),U6o=o("rembert"),J6o=o(" \u2014 "),CD=a("a"),Y6o=o("RemBertForCausalLM"),K6o=o(" (RemBERT model)"),Z6o=l(),B1=a("li"),Jce=a("strong"),eLo=o("roberta"),oLo=o(" \u2014 "),wD=a("a"),rLo=o("RobertaForCausalLM"),tLo=o(" (RoBERTa model)"),aLo=l(),I1=a("li"),Yce=a("strong"),nLo=o("roformer"),sLo=o(" \u2014 "),AD=a("a"),lLo=o("RoFormerForCausalLM"),iLo=o(" (RoFormer model)"),dLo=l(),N1=a("li"),Kce=a("strong"),cLo=o("speech_to_text_2"),fLo=o(" \u2014 "),LD=a("a"),mLo=o("Speech2Text2ForCausalLM"),gLo=o(" (Speech2Text2 model)"),hLo=l(),q1=a("li"),Zce=a("strong"),pLo=o("transfo-xl"),_Lo=o(" \u2014 "),yD=a("a"),uLo=o("TransfoXLLMHeadModel"),bLo=o(" (Transformer-XL model)"),vLo=l(),j1=a("li"),efe=a("strong"),FLo=o("trocr"),TLo=o(" \u2014 "),xD=a("a"),MLo=o("TrOCRForCausalLM"),ELo=o(" (TrOCR model)"),CLo=l(),D1=a("li"),ofe=a("strong"),wLo=o("xglm"),ALo=o(" \u2014 "),$D=a("a"),LLo=o("XGLMForCausalLM"),yLo=o(" (XGLM model)"),xLo=l(),G1=a("li"),rfe=a("strong"),$Lo=o("xlm"),kLo=o(" \u2014 "),kD=a("a"),SLo=o("XLMWithLMHeadModel"),RLo=o(" (XLM model)"),PLo=l(),O1=a("li"),tfe=a("strong"),BLo=o("xlm-prophetnet"),ILo=o(" \u2014 "),SD=a("a"),NLo=o("XLMProphetNetForCausalLM"),qLo=o(" (XLM-ProphetNet model)"),jLo=l(),V1=a("li"),afe=a("strong"),DLo=o("xlm-roberta"),GLo=o(" \u2014 "),RD=a("a"),OLo=o("XLMRobertaForCausalLM"),VLo=o(" (XLM-RoBERTa model)"),XLo=l(),X1=a("li"),nfe=a("strong"),zLo=o("xlm-roberta-xl"),WLo=o(" \u2014 "),PD=a("a"),QLo=o("XLMRobertaXLForCausalLM"),HLo=o(" (XLM-RoBERTa-XL model)"),ULo=l(),z1=a("li"),sfe=a("strong"),JLo=o("xlnet"),YLo=o(" \u2014 "),BD=a("a"),KLo=o("XLNetLMHeadModel"),ZLo=o(" (XLNet model)"),eyo=l(),W1=a("p"),oyo=o("The model is set in evaluation mode by default using "),lfe=a("code"),ryo=o("model.eval()"),tyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),ayo=o("model.train()"),nyo=l(),F(Q1.$$.fragment),Nje=l(),Ii=a("h2"),H1=a("a"),dfe=a("span"),F(SL.$$.fragment),syo=l(),cfe=a("span"),lyo=o("AutoModelForMaskedLM"),qje=l(),ko=a("div"),F(RL.$$.fragment),iyo=l(),Ni=a("p"),dyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ID=a("a"),cyo=o("from_pretrained()"),fyo=o(" class method or the "),ND=a("a"),myo=o("from_config()"),gyo=o(` class
method.`),hyo=l(),PL=a("p"),pyo=o("This class cannot be instantiated directly using "),ffe=a("code"),_yo=o("__init__()"),uyo=o(" (throws an error)."),byo=l(),st=a("div"),F(BL.$$.fragment),vyo=l(),mfe=a("p"),Fyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tyo=l(),qi=a("p"),Myo=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),Eyo=o("not"),Cyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),wyo=o("from_pretrained()"),Ayo=o(" to load the model weights."),Lyo=l(),F(U1.$$.fragment),yyo=l(),Ze=a("div"),F(IL.$$.fragment),xyo=l(),hfe=a("p"),$yo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kyo=l(),ka=a("p"),Syo=o("The model class to instantiate is selected based on the "),pfe=a("code"),Ryo=o("model_type"),Pyo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),Byo=o("pretrained_model_name_or_path"),Iyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),Nyo=o("pretrained_model_name_or_path"),qyo=o(":"),jyo=l(),W=a("ul"),J1=a("li"),bfe=a("strong"),Dyo=o("albert"),Gyo=o(" \u2014 "),jD=a("a"),Oyo=o("AlbertForMaskedLM"),Vyo=o(" (ALBERT model)"),Xyo=l(),Y1=a("li"),vfe=a("strong"),zyo=o("bart"),Wyo=o(" \u2014 "),DD=a("a"),Qyo=o("BartForConditionalGeneration"),Hyo=o(" (BART model)"),Uyo=l(),K1=a("li"),Ffe=a("strong"),Jyo=o("bert"),Yyo=o(" \u2014 "),GD=a("a"),Kyo=o("BertForMaskedLM"),Zyo=o(" (BERT model)"),e8o=l(),Z1=a("li"),Tfe=a("strong"),o8o=o("big_bird"),r8o=o(" \u2014 "),OD=a("a"),t8o=o("BigBirdForMaskedLM"),a8o=o(" (BigBird model)"),n8o=l(),e3=a("li"),Mfe=a("strong"),s8o=o("camembert"),l8o=o(" \u2014 "),VD=a("a"),i8o=o("CamembertForMaskedLM"),d8o=o(" (CamemBERT model)"),c8o=l(),o3=a("li"),Efe=a("strong"),f8o=o("convbert"),m8o=o(" \u2014 "),XD=a("a"),g8o=o("ConvBertForMaskedLM"),h8o=o(" (ConvBERT model)"),p8o=l(),r3=a("li"),Cfe=a("strong"),_8o=o("data2vec-text"),u8o=o(" \u2014 "),zD=a("a"),b8o=o("Data2VecTextForMaskedLM"),v8o=o(" (Data2VecText model)"),F8o=l(),t3=a("li"),wfe=a("strong"),T8o=o("deberta"),M8o=o(" \u2014 "),WD=a("a"),E8o=o("DebertaForMaskedLM"),C8o=o(" (DeBERTa model)"),w8o=l(),a3=a("li"),Afe=a("strong"),A8o=o("deberta-v2"),L8o=o(" \u2014 "),QD=a("a"),y8o=o("DebertaV2ForMaskedLM"),x8o=o(" (DeBERTa-v2 model)"),$8o=l(),n3=a("li"),Lfe=a("strong"),k8o=o("distilbert"),S8o=o(" \u2014 "),HD=a("a"),R8o=o("DistilBertForMaskedLM"),P8o=o(" (DistilBERT model)"),B8o=l(),s3=a("li"),yfe=a("strong"),I8o=o("electra"),N8o=o(" \u2014 "),UD=a("a"),q8o=o("ElectraForMaskedLM"),j8o=o(" (ELECTRA model)"),D8o=l(),l3=a("li"),xfe=a("strong"),G8o=o("flaubert"),O8o=o(" \u2014 "),JD=a("a"),V8o=o("FlaubertWithLMHeadModel"),X8o=o(" (FlauBERT model)"),z8o=l(),i3=a("li"),$fe=a("strong"),W8o=o("fnet"),Q8o=o(" \u2014 "),YD=a("a"),H8o=o("FNetForMaskedLM"),U8o=o(" (FNet model)"),J8o=l(),d3=a("li"),kfe=a("strong"),Y8o=o("funnel"),K8o=o(" \u2014 "),KD=a("a"),Z8o=o("FunnelForMaskedLM"),e9o=o(" (Funnel Transformer model)"),o9o=l(),c3=a("li"),Sfe=a("strong"),r9o=o("ibert"),t9o=o(" \u2014 "),ZD=a("a"),a9o=o("IBertForMaskedLM"),n9o=o(" (I-BERT model)"),s9o=l(),f3=a("li"),Rfe=a("strong"),l9o=o("layoutlm"),i9o=o(" \u2014 "),eG=a("a"),d9o=o("LayoutLMForMaskedLM"),c9o=o(" (LayoutLM model)"),f9o=l(),m3=a("li"),Pfe=a("strong"),m9o=o("longformer"),g9o=o(" \u2014 "),oG=a("a"),h9o=o("LongformerForMaskedLM"),p9o=o(" (Longformer model)"),_9o=l(),g3=a("li"),Bfe=a("strong"),u9o=o("luke"),b9o=o(" \u2014 "),rG=a("a"),v9o=o("LukeForMaskedLM"),F9o=o(" (LUKE model)"),T9o=l(),h3=a("li"),Ife=a("strong"),M9o=o("mbart"),E9o=o(" \u2014 "),tG=a("a"),C9o=o("MBartForConditionalGeneration"),w9o=o(" (mBART model)"),A9o=l(),p3=a("li"),Nfe=a("strong"),L9o=o("megatron-bert"),y9o=o(" \u2014 "),aG=a("a"),x9o=o("MegatronBertForMaskedLM"),$9o=o(" (Megatron-BERT model)"),k9o=l(),_3=a("li"),qfe=a("strong"),S9o=o("mobilebert"),R9o=o(" \u2014 "),nG=a("a"),P9o=o("MobileBertForMaskedLM"),B9o=o(" (MobileBERT model)"),I9o=l(),u3=a("li"),jfe=a("strong"),N9o=o("mpnet"),q9o=o(" \u2014 "),sG=a("a"),j9o=o("MPNetForMaskedLM"),D9o=o(" (MPNet model)"),G9o=l(),b3=a("li"),Dfe=a("strong"),O9o=o("nystromformer"),V9o=o(" \u2014 "),lG=a("a"),X9o=o("NystromformerForMaskedLM"),z9o=o(" (Nystr\xF6mformer model)"),W9o=l(),v3=a("li"),Gfe=a("strong"),Q9o=o("perceiver"),H9o=o(" \u2014 "),iG=a("a"),U9o=o("PerceiverForMaskedLM"),J9o=o(" (Perceiver model)"),Y9o=l(),F3=a("li"),Ofe=a("strong"),K9o=o("qdqbert"),Z9o=o(" \u2014 "),dG=a("a"),exo=o("QDQBertForMaskedLM"),oxo=o(" (QDQBert model)"),rxo=l(),T3=a("li"),Vfe=a("strong"),txo=o("reformer"),axo=o(" \u2014 "),cG=a("a"),nxo=o("ReformerForMaskedLM"),sxo=o(" (Reformer model)"),lxo=l(),M3=a("li"),Xfe=a("strong"),ixo=o("rembert"),dxo=o(" \u2014 "),fG=a("a"),cxo=o("RemBertForMaskedLM"),fxo=o(" (RemBERT model)"),mxo=l(),E3=a("li"),zfe=a("strong"),gxo=o("roberta"),hxo=o(" \u2014 "),mG=a("a"),pxo=o("RobertaForMaskedLM"),_xo=o(" (RoBERTa model)"),uxo=l(),C3=a("li"),Wfe=a("strong"),bxo=o("roformer"),vxo=o(" \u2014 "),gG=a("a"),Fxo=o("RoFormerForMaskedLM"),Txo=o(" (RoFormer model)"),Mxo=l(),w3=a("li"),Qfe=a("strong"),Exo=o("squeezebert"),Cxo=o(" \u2014 "),hG=a("a"),wxo=o("SqueezeBertForMaskedLM"),Axo=o(" (SqueezeBERT model)"),Lxo=l(),A3=a("li"),Hfe=a("strong"),yxo=o("tapas"),xxo=o(" \u2014 "),pG=a("a"),$xo=o("TapasForMaskedLM"),kxo=o(" (TAPAS model)"),Sxo=l(),L3=a("li"),Ufe=a("strong"),Rxo=o("wav2vec2"),Pxo=o(" \u2014 "),Jfe=a("code"),Bxo=o("Wav2Vec2ForMaskedLM"),Ixo=o(" (Wav2Vec2 model)"),Nxo=l(),y3=a("li"),Yfe=a("strong"),qxo=o("xlm"),jxo=o(" \u2014 "),_G=a("a"),Dxo=o("XLMWithLMHeadModel"),Gxo=o(" (XLM model)"),Oxo=l(),x3=a("li"),Kfe=a("strong"),Vxo=o("xlm-roberta"),Xxo=o(" \u2014 "),uG=a("a"),zxo=o("XLMRobertaForMaskedLM"),Wxo=o(" (XLM-RoBERTa model)"),Qxo=l(),$3=a("li"),Zfe=a("strong"),Hxo=o("xlm-roberta-xl"),Uxo=o(" \u2014 "),bG=a("a"),Jxo=o("XLMRobertaXLForMaskedLM"),Yxo=o(" (XLM-RoBERTa-XL model)"),Kxo=l(),k3=a("li"),eme=a("strong"),Zxo=o("yoso"),e$o=o(" \u2014 "),vG=a("a"),o$o=o("YosoForMaskedLM"),r$o=o(" (YOSO model)"),t$o=l(),S3=a("p"),a$o=o("The model is set in evaluation mode by default using "),ome=a("code"),n$o=o("model.eval()"),s$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=a("code"),l$o=o("model.train()"),i$o=l(),F(R3.$$.fragment),jje=l(),ji=a("h2"),P3=a("a"),tme=a("span"),F(NL.$$.fragment),d$o=l(),ame=a("span"),c$o=o("AutoModelForSeq2SeqLM"),Dje=l(),So=a("div"),F(qL.$$.fragment),f$o=l(),Di=a("p"),m$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FG=a("a"),g$o=o("from_pretrained()"),h$o=o(" class method or the "),TG=a("a"),p$o=o("from_config()"),_$o=o(` class
method.`),u$o=l(),jL=a("p"),b$o=o("This class cannot be instantiated directly using "),nme=a("code"),v$o=o("__init__()"),F$o=o(" (throws an error)."),T$o=l(),lt=a("div"),F(DL.$$.fragment),M$o=l(),sme=a("p"),E$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C$o=l(),Gi=a("p"),w$o=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),A$o=o("not"),L$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),y$o=o("from_pretrained()"),x$o=o(" to load the model weights."),$$o=l(),F(B3.$$.fragment),k$o=l(),eo=a("div"),F(GL.$$.fragment),S$o=l(),ime=a("p"),R$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P$o=l(),Sa=a("p"),B$o=o("The model class to instantiate is selected based on the "),dme=a("code"),I$o=o("model_type"),N$o=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),q$o=o("pretrained_model_name_or_path"),j$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),D$o=o("pretrained_model_name_or_path"),G$o=o(":"),O$o=l(),ue=a("ul"),I3=a("li"),mme=a("strong"),V$o=o("bart"),X$o=o(" \u2014 "),EG=a("a"),z$o=o("BartForConditionalGeneration"),W$o=o(" (BART model)"),Q$o=l(),N3=a("li"),gme=a("strong"),H$o=o("bigbird_pegasus"),U$o=o(" \u2014 "),CG=a("a"),J$o=o("BigBirdPegasusForConditionalGeneration"),Y$o=o(" (BigBird-Pegasus model)"),K$o=l(),q3=a("li"),hme=a("strong"),Z$o=o("blenderbot"),eko=o(" \u2014 "),wG=a("a"),oko=o("BlenderbotForConditionalGeneration"),rko=o(" (Blenderbot model)"),tko=l(),j3=a("li"),pme=a("strong"),ako=o("blenderbot-small"),nko=o(" \u2014 "),AG=a("a"),sko=o("BlenderbotSmallForConditionalGeneration"),lko=o(" (BlenderbotSmall model)"),iko=l(),D3=a("li"),_me=a("strong"),dko=o("encoder-decoder"),cko=o(" \u2014 "),LG=a("a"),fko=o("EncoderDecoderModel"),mko=o(" (Encoder decoder model)"),gko=l(),G3=a("li"),ume=a("strong"),hko=o("fsmt"),pko=o(" \u2014 "),yG=a("a"),_ko=o("FSMTForConditionalGeneration"),uko=o(" (FairSeq Machine-Translation model)"),bko=l(),O3=a("li"),bme=a("strong"),vko=o("led"),Fko=o(" \u2014 "),xG=a("a"),Tko=o("LEDForConditionalGeneration"),Mko=o(" (LED model)"),Eko=l(),V3=a("li"),vme=a("strong"),Cko=o("m2m_100"),wko=o(" \u2014 "),$G=a("a"),Ako=o("M2M100ForConditionalGeneration"),Lko=o(" (M2M100 model)"),yko=l(),X3=a("li"),Fme=a("strong"),xko=o("marian"),$ko=o(" \u2014 "),kG=a("a"),kko=o("MarianMTModel"),Sko=o(" (Marian model)"),Rko=l(),z3=a("li"),Tme=a("strong"),Pko=o("mbart"),Bko=o(" \u2014 "),SG=a("a"),Iko=o("MBartForConditionalGeneration"),Nko=o(" (mBART model)"),qko=l(),W3=a("li"),Mme=a("strong"),jko=o("mt5"),Dko=o(" \u2014 "),RG=a("a"),Gko=o("MT5ForConditionalGeneration"),Oko=o(" (MT5 model)"),Vko=l(),Q3=a("li"),Eme=a("strong"),Xko=o("pegasus"),zko=o(" \u2014 "),PG=a("a"),Wko=o("PegasusForConditionalGeneration"),Qko=o(" (Pegasus model)"),Hko=l(),H3=a("li"),Cme=a("strong"),Uko=o("plbart"),Jko=o(" \u2014 "),BG=a("a"),Yko=o("PLBartForConditionalGeneration"),Kko=o(" (PLBart model)"),Zko=l(),U3=a("li"),wme=a("strong"),eSo=o("prophetnet"),oSo=o(" \u2014 "),IG=a("a"),rSo=o("ProphetNetForConditionalGeneration"),tSo=o(" (ProphetNet model)"),aSo=l(),J3=a("li"),Ame=a("strong"),nSo=o("t5"),sSo=o(" \u2014 "),NG=a("a"),lSo=o("T5ForConditionalGeneration"),iSo=o(" (T5 model)"),dSo=l(),Y3=a("li"),Lme=a("strong"),cSo=o("xlm-prophetnet"),fSo=o(" \u2014 "),qG=a("a"),mSo=o("XLMProphetNetForConditionalGeneration"),gSo=o(" (XLM-ProphetNet model)"),hSo=l(),K3=a("p"),pSo=o("The model is set in evaluation mode by default using "),yme=a("code"),_So=o("model.eval()"),uSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),bSo=o("model.train()"),vSo=l(),F(Z3.$$.fragment),Gje=l(),Oi=a("h2"),eb=a("a"),$me=a("span"),F(OL.$$.fragment),FSo=l(),kme=a("span"),TSo=o("AutoModelForSequenceClassification"),Oje=l(),Ro=a("div"),F(VL.$$.fragment),MSo=l(),Vi=a("p"),ESo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jG=a("a"),CSo=o("from_pretrained()"),wSo=o(" class method or the "),DG=a("a"),ASo=o("from_config()"),LSo=o(` class
method.`),ySo=l(),XL=a("p"),xSo=o("This class cannot be instantiated directly using "),Sme=a("code"),$So=o("__init__()"),kSo=o(" (throws an error)."),SSo=l(),it=a("div"),F(zL.$$.fragment),RSo=l(),Rme=a("p"),PSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BSo=l(),Xi=a("p"),ISo=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),NSo=o("not"),qSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),jSo=o("from_pretrained()"),DSo=o(" to load the model weights."),GSo=l(),F(ob.$$.fragment),OSo=l(),oo=a("div"),F(WL.$$.fragment),VSo=l(),Bme=a("p"),XSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zSo=l(),Ra=a("p"),WSo=o("The model class to instantiate is selected based on the "),Ime=a("code"),QSo=o("model_type"),HSo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),USo=o("pretrained_model_name_or_path"),JSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),YSo=o("pretrained_model_name_or_path"),KSo=o(":"),ZSo=l(),N=a("ul"),rb=a("li"),jme=a("strong"),eRo=o("albert"),oRo=o(" \u2014 "),OG=a("a"),rRo=o("AlbertForSequenceClassification"),tRo=o(" (ALBERT model)"),aRo=l(),tb=a("li"),Dme=a("strong"),nRo=o("bart"),sRo=o(" \u2014 "),VG=a("a"),lRo=o("BartForSequenceClassification"),iRo=o(" (BART model)"),dRo=l(),ab=a("li"),Gme=a("strong"),cRo=o("bert"),fRo=o(" \u2014 "),XG=a("a"),mRo=o("BertForSequenceClassification"),gRo=o(" (BERT model)"),hRo=l(),nb=a("li"),Ome=a("strong"),pRo=o("big_bird"),_Ro=o(" \u2014 "),zG=a("a"),uRo=o("BigBirdForSequenceClassification"),bRo=o(" (BigBird model)"),vRo=l(),sb=a("li"),Vme=a("strong"),FRo=o("bigbird_pegasus"),TRo=o(" \u2014 "),WG=a("a"),MRo=o("BigBirdPegasusForSequenceClassification"),ERo=o(" (BigBird-Pegasus model)"),CRo=l(),lb=a("li"),Xme=a("strong"),wRo=o("camembert"),ARo=o(" \u2014 "),QG=a("a"),LRo=o("CamembertForSequenceClassification"),yRo=o(" (CamemBERT model)"),xRo=l(),ib=a("li"),zme=a("strong"),$Ro=o("canine"),kRo=o(" \u2014 "),HG=a("a"),SRo=o("CanineForSequenceClassification"),RRo=o(" (CANINE model)"),PRo=l(),db=a("li"),Wme=a("strong"),BRo=o("convbert"),IRo=o(" \u2014 "),UG=a("a"),NRo=o("ConvBertForSequenceClassification"),qRo=o(" (ConvBERT model)"),jRo=l(),cb=a("li"),Qme=a("strong"),DRo=o("ctrl"),GRo=o(" \u2014 "),JG=a("a"),ORo=o("CTRLForSequenceClassification"),VRo=o(" (CTRL model)"),XRo=l(),fb=a("li"),Hme=a("strong"),zRo=o("data2vec-text"),WRo=o(" \u2014 "),YG=a("a"),QRo=o("Data2VecTextForSequenceClassification"),HRo=o(" (Data2VecText model)"),URo=l(),mb=a("li"),Ume=a("strong"),JRo=o("deberta"),YRo=o(" \u2014 "),KG=a("a"),KRo=o("DebertaForSequenceClassification"),ZRo=o(" (DeBERTa model)"),ePo=l(),gb=a("li"),Jme=a("strong"),oPo=o("deberta-v2"),rPo=o(" \u2014 "),ZG=a("a"),tPo=o("DebertaV2ForSequenceClassification"),aPo=o(" (DeBERTa-v2 model)"),nPo=l(),hb=a("li"),Yme=a("strong"),sPo=o("distilbert"),lPo=o(" \u2014 "),eO=a("a"),iPo=o("DistilBertForSequenceClassification"),dPo=o(" (DistilBERT model)"),cPo=l(),pb=a("li"),Kme=a("strong"),fPo=o("electra"),mPo=o(" \u2014 "),oO=a("a"),gPo=o("ElectraForSequenceClassification"),hPo=o(" (ELECTRA model)"),pPo=l(),_b=a("li"),Zme=a("strong"),_Po=o("flaubert"),uPo=o(" \u2014 "),rO=a("a"),bPo=o("FlaubertForSequenceClassification"),vPo=o(" (FlauBERT model)"),FPo=l(),ub=a("li"),ege=a("strong"),TPo=o("fnet"),MPo=o(" \u2014 "),tO=a("a"),EPo=o("FNetForSequenceClassification"),CPo=o(" (FNet model)"),wPo=l(),bb=a("li"),oge=a("strong"),APo=o("funnel"),LPo=o(" \u2014 "),aO=a("a"),yPo=o("FunnelForSequenceClassification"),xPo=o(" (Funnel Transformer model)"),$Po=l(),vb=a("li"),rge=a("strong"),kPo=o("gpt2"),SPo=o(" \u2014 "),nO=a("a"),RPo=o("GPT2ForSequenceClassification"),PPo=o(" (OpenAI GPT-2 model)"),BPo=l(),Fb=a("li"),tge=a("strong"),IPo=o("gpt_neo"),NPo=o(" \u2014 "),sO=a("a"),qPo=o("GPTNeoForSequenceClassification"),jPo=o(" (GPT Neo model)"),DPo=l(),Tb=a("li"),age=a("strong"),GPo=o("gptj"),OPo=o(" \u2014 "),lO=a("a"),VPo=o("GPTJForSequenceClassification"),XPo=o(" (GPT-J model)"),zPo=l(),Mb=a("li"),nge=a("strong"),WPo=o("ibert"),QPo=o(" \u2014 "),iO=a("a"),HPo=o("IBertForSequenceClassification"),UPo=o(" (I-BERT model)"),JPo=l(),Eb=a("li"),sge=a("strong"),YPo=o("layoutlm"),KPo=o(" \u2014 "),dO=a("a"),ZPo=o("LayoutLMForSequenceClassification"),eBo=o(" (LayoutLM model)"),oBo=l(),Cb=a("li"),lge=a("strong"),rBo=o("layoutlmv2"),tBo=o(" \u2014 "),cO=a("a"),aBo=o("LayoutLMv2ForSequenceClassification"),nBo=o(" (LayoutLMv2 model)"),sBo=l(),wb=a("li"),ige=a("strong"),lBo=o("layoutlmv3"),iBo=o(" \u2014 "),fO=a("a"),dBo=o("LayoutLMv3ForSequenceClassification"),cBo=o(" (LayoutLMv3 model)"),fBo=l(),Ab=a("li"),dge=a("strong"),mBo=o("led"),gBo=o(" \u2014 "),mO=a("a"),hBo=o("LEDForSequenceClassification"),pBo=o(" (LED model)"),_Bo=l(),Lb=a("li"),cge=a("strong"),uBo=o("longformer"),bBo=o(" \u2014 "),gO=a("a"),vBo=o("LongformerForSequenceClassification"),FBo=o(" (Longformer model)"),TBo=l(),yb=a("li"),fge=a("strong"),MBo=o("mbart"),EBo=o(" \u2014 "),hO=a("a"),CBo=o("MBartForSequenceClassification"),wBo=o(" (mBART model)"),ABo=l(),xb=a("li"),mge=a("strong"),LBo=o("megatron-bert"),yBo=o(" \u2014 "),pO=a("a"),xBo=o("MegatronBertForSequenceClassification"),$Bo=o(" (Megatron-BERT model)"),kBo=l(),$b=a("li"),gge=a("strong"),SBo=o("mobilebert"),RBo=o(" \u2014 "),_O=a("a"),PBo=o("MobileBertForSequenceClassification"),BBo=o(" (MobileBERT model)"),IBo=l(),kb=a("li"),hge=a("strong"),NBo=o("mpnet"),qBo=o(" \u2014 "),uO=a("a"),jBo=o("MPNetForSequenceClassification"),DBo=o(" (MPNet model)"),GBo=l(),Sb=a("li"),pge=a("strong"),OBo=o("nystromformer"),VBo=o(" \u2014 "),bO=a("a"),XBo=o("NystromformerForSequenceClassification"),zBo=o(" (Nystr\xF6mformer model)"),WBo=l(),Rb=a("li"),_ge=a("strong"),QBo=o("openai-gpt"),HBo=o(" \u2014 "),vO=a("a"),UBo=o("OpenAIGPTForSequenceClassification"),JBo=o(" (OpenAI GPT model)"),YBo=l(),Pb=a("li"),uge=a("strong"),KBo=o("perceiver"),ZBo=o(" \u2014 "),FO=a("a"),eIo=o("PerceiverForSequenceClassification"),oIo=o(" (Perceiver model)"),rIo=l(),Bb=a("li"),bge=a("strong"),tIo=o("plbart"),aIo=o(" \u2014 "),TO=a("a"),nIo=o("PLBartForSequenceClassification"),sIo=o(" (PLBart model)"),lIo=l(),Ib=a("li"),vge=a("strong"),iIo=o("qdqbert"),dIo=o(" \u2014 "),MO=a("a"),cIo=o("QDQBertForSequenceClassification"),fIo=o(" (QDQBert model)"),mIo=l(),Nb=a("li"),Fge=a("strong"),gIo=o("reformer"),hIo=o(" \u2014 "),EO=a("a"),pIo=o("ReformerForSequenceClassification"),_Io=o(" (Reformer model)"),uIo=l(),qb=a("li"),Tge=a("strong"),bIo=o("rembert"),vIo=o(" \u2014 "),CO=a("a"),FIo=o("RemBertForSequenceClassification"),TIo=o(" (RemBERT model)"),MIo=l(),jb=a("li"),Mge=a("strong"),EIo=o("roberta"),CIo=o(" \u2014 "),wO=a("a"),wIo=o("RobertaForSequenceClassification"),AIo=o(" (RoBERTa model)"),LIo=l(),Db=a("li"),Ege=a("strong"),yIo=o("roformer"),xIo=o(" \u2014 "),AO=a("a"),$Io=o("RoFormerForSequenceClassification"),kIo=o(" (RoFormer model)"),SIo=l(),Gb=a("li"),Cge=a("strong"),RIo=o("squeezebert"),PIo=o(" \u2014 "),LO=a("a"),BIo=o("SqueezeBertForSequenceClassification"),IIo=o(" (SqueezeBERT model)"),NIo=l(),Ob=a("li"),wge=a("strong"),qIo=o("tapas"),jIo=o(" \u2014 "),yO=a("a"),DIo=o("TapasForSequenceClassification"),GIo=o(" (TAPAS model)"),OIo=l(),Vb=a("li"),Age=a("strong"),VIo=o("transfo-xl"),XIo=o(" \u2014 "),xO=a("a"),zIo=o("TransfoXLForSequenceClassification"),WIo=o(" (Transformer-XL model)"),QIo=l(),Xb=a("li"),Lge=a("strong"),HIo=o("xlm"),UIo=o(" \u2014 "),$O=a("a"),JIo=o("XLMForSequenceClassification"),YIo=o(" (XLM model)"),KIo=l(),zb=a("li"),yge=a("strong"),ZIo=o("xlm-roberta"),eNo=o(" \u2014 "),kO=a("a"),oNo=o("XLMRobertaForSequenceClassification"),rNo=o(" (XLM-RoBERTa model)"),tNo=l(),Wb=a("li"),xge=a("strong"),aNo=o("xlm-roberta-xl"),nNo=o(" \u2014 "),SO=a("a"),sNo=o("XLMRobertaXLForSequenceClassification"),lNo=o(" (XLM-RoBERTa-XL model)"),iNo=l(),Qb=a("li"),$ge=a("strong"),dNo=o("xlnet"),cNo=o(" \u2014 "),RO=a("a"),fNo=o("XLNetForSequenceClassification"),mNo=o(" (XLNet model)"),gNo=l(),Hb=a("li"),kge=a("strong"),hNo=o("yoso"),pNo=o(" \u2014 "),PO=a("a"),_No=o("YosoForSequenceClassification"),uNo=o(" (YOSO model)"),bNo=l(),Ub=a("p"),vNo=o("The model is set in evaluation mode by default using "),Sge=a("code"),FNo=o("model.eval()"),TNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),MNo=o("model.train()"),ENo=l(),F(Jb.$$.fragment),Vje=l(),zi=a("h2"),Yb=a("a"),Pge=a("span"),F(QL.$$.fragment),CNo=l(),Bge=a("span"),wNo=o("AutoModelForMultipleChoice"),Xje=l(),Po=a("div"),F(HL.$$.fragment),ANo=l(),Wi=a("p"),LNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BO=a("a"),yNo=o("from_pretrained()"),xNo=o(" class method or the "),IO=a("a"),$No=o("from_config()"),kNo=o(` class
method.`),SNo=l(),UL=a("p"),RNo=o("This class cannot be instantiated directly using "),Ige=a("code"),PNo=o("__init__()"),BNo=o(" (throws an error)."),INo=l(),dt=a("div"),F(JL.$$.fragment),NNo=l(),Nge=a("p"),qNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jNo=l(),Qi=a("p"),DNo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),GNo=o("not"),ONo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),VNo=o("from_pretrained()"),XNo=o(" to load the model weights."),zNo=l(),F(Kb.$$.fragment),WNo=l(),ro=a("div"),F(YL.$$.fragment),QNo=l(),jge=a("p"),HNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UNo=l(),Pa=a("p"),JNo=o("The model class to instantiate is selected based on the "),Dge=a("code"),YNo=o("model_type"),KNo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),ZNo=o("pretrained_model_name_or_path"),eqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),oqo=o("pretrained_model_name_or_path"),rqo=o(":"),tqo=l(),Z=a("ul"),Zb=a("li"),Vge=a("strong"),aqo=o("albert"),nqo=o(" \u2014 "),qO=a("a"),sqo=o("AlbertForMultipleChoice"),lqo=o(" (ALBERT model)"),iqo=l(),e2=a("li"),Xge=a("strong"),dqo=o("bert"),cqo=o(" \u2014 "),jO=a("a"),fqo=o("BertForMultipleChoice"),mqo=o(" (BERT model)"),gqo=l(),o2=a("li"),zge=a("strong"),hqo=o("big_bird"),pqo=o(" \u2014 "),DO=a("a"),_qo=o("BigBirdForMultipleChoice"),uqo=o(" (BigBird model)"),bqo=l(),r2=a("li"),Wge=a("strong"),vqo=o("camembert"),Fqo=o(" \u2014 "),GO=a("a"),Tqo=o("CamembertForMultipleChoice"),Mqo=o(" (CamemBERT model)"),Eqo=l(),t2=a("li"),Qge=a("strong"),Cqo=o("canine"),wqo=o(" \u2014 "),OO=a("a"),Aqo=o("CanineForMultipleChoice"),Lqo=o(" (CANINE model)"),yqo=l(),a2=a("li"),Hge=a("strong"),xqo=o("convbert"),$qo=o(" \u2014 "),VO=a("a"),kqo=o("ConvBertForMultipleChoice"),Sqo=o(" (ConvBERT model)"),Rqo=l(),n2=a("li"),Uge=a("strong"),Pqo=o("data2vec-text"),Bqo=o(" \u2014 "),XO=a("a"),Iqo=o("Data2VecTextForMultipleChoice"),Nqo=o(" (Data2VecText model)"),qqo=l(),s2=a("li"),Jge=a("strong"),jqo=o("deberta-v2"),Dqo=o(" \u2014 "),zO=a("a"),Gqo=o("DebertaV2ForMultipleChoice"),Oqo=o(" (DeBERTa-v2 model)"),Vqo=l(),l2=a("li"),Yge=a("strong"),Xqo=o("distilbert"),zqo=o(" \u2014 "),WO=a("a"),Wqo=o("DistilBertForMultipleChoice"),Qqo=o(" (DistilBERT model)"),Hqo=l(),i2=a("li"),Kge=a("strong"),Uqo=o("electra"),Jqo=o(" \u2014 "),QO=a("a"),Yqo=o("ElectraForMultipleChoice"),Kqo=o(" (ELECTRA model)"),Zqo=l(),d2=a("li"),Zge=a("strong"),ejo=o("flaubert"),ojo=o(" \u2014 "),HO=a("a"),rjo=o("FlaubertForMultipleChoice"),tjo=o(" (FlauBERT model)"),ajo=l(),c2=a("li"),ehe=a("strong"),njo=o("fnet"),sjo=o(" \u2014 "),UO=a("a"),ljo=o("FNetForMultipleChoice"),ijo=o(" (FNet model)"),djo=l(),f2=a("li"),ohe=a("strong"),cjo=o("funnel"),fjo=o(" \u2014 "),JO=a("a"),mjo=o("FunnelForMultipleChoice"),gjo=o(" (Funnel Transformer model)"),hjo=l(),m2=a("li"),rhe=a("strong"),pjo=o("ibert"),_jo=o(" \u2014 "),YO=a("a"),ujo=o("IBertForMultipleChoice"),bjo=o(" (I-BERT model)"),vjo=l(),g2=a("li"),the=a("strong"),Fjo=o("longformer"),Tjo=o(" \u2014 "),KO=a("a"),Mjo=o("LongformerForMultipleChoice"),Ejo=o(" (Longformer model)"),Cjo=l(),h2=a("li"),ahe=a("strong"),wjo=o("megatron-bert"),Ajo=o(" \u2014 "),ZO=a("a"),Ljo=o("MegatronBertForMultipleChoice"),yjo=o(" (Megatron-BERT model)"),xjo=l(),p2=a("li"),nhe=a("strong"),$jo=o("mobilebert"),kjo=o(" \u2014 "),eV=a("a"),Sjo=o("MobileBertForMultipleChoice"),Rjo=o(" (MobileBERT model)"),Pjo=l(),_2=a("li"),she=a("strong"),Bjo=o("mpnet"),Ijo=o(" \u2014 "),oV=a("a"),Njo=o("MPNetForMultipleChoice"),qjo=o(" (MPNet model)"),jjo=l(),u2=a("li"),lhe=a("strong"),Djo=o("nystromformer"),Gjo=o(" \u2014 "),rV=a("a"),Ojo=o("NystromformerForMultipleChoice"),Vjo=o(" (Nystr\xF6mformer model)"),Xjo=l(),b2=a("li"),ihe=a("strong"),zjo=o("qdqbert"),Wjo=o(" \u2014 "),tV=a("a"),Qjo=o("QDQBertForMultipleChoice"),Hjo=o(" (QDQBert model)"),Ujo=l(),v2=a("li"),dhe=a("strong"),Jjo=o("rembert"),Yjo=o(" \u2014 "),aV=a("a"),Kjo=o("RemBertForMultipleChoice"),Zjo=o(" (RemBERT model)"),eDo=l(),F2=a("li"),che=a("strong"),oDo=o("roberta"),rDo=o(" \u2014 "),nV=a("a"),tDo=o("RobertaForMultipleChoice"),aDo=o(" (RoBERTa model)"),nDo=l(),T2=a("li"),fhe=a("strong"),sDo=o("roformer"),lDo=o(" \u2014 "),sV=a("a"),iDo=o("RoFormerForMultipleChoice"),dDo=o(" (RoFormer model)"),cDo=l(),M2=a("li"),mhe=a("strong"),fDo=o("squeezebert"),mDo=o(" \u2014 "),lV=a("a"),gDo=o("SqueezeBertForMultipleChoice"),hDo=o(" (SqueezeBERT model)"),pDo=l(),E2=a("li"),ghe=a("strong"),_Do=o("xlm"),uDo=o(" \u2014 "),iV=a("a"),bDo=o("XLMForMultipleChoice"),vDo=o(" (XLM model)"),FDo=l(),C2=a("li"),hhe=a("strong"),TDo=o("xlm-roberta"),MDo=o(" \u2014 "),dV=a("a"),EDo=o("XLMRobertaForMultipleChoice"),CDo=o(" (XLM-RoBERTa model)"),wDo=l(),w2=a("li"),phe=a("strong"),ADo=o("xlm-roberta-xl"),LDo=o(" \u2014 "),cV=a("a"),yDo=o("XLMRobertaXLForMultipleChoice"),xDo=o(" (XLM-RoBERTa-XL model)"),$Do=l(),A2=a("li"),_he=a("strong"),kDo=o("xlnet"),SDo=o(" \u2014 "),fV=a("a"),RDo=o("XLNetForMultipleChoice"),PDo=o(" (XLNet model)"),BDo=l(),L2=a("li"),uhe=a("strong"),IDo=o("yoso"),NDo=o(" \u2014 "),mV=a("a"),qDo=o("YosoForMultipleChoice"),jDo=o(" (YOSO model)"),DDo=l(),y2=a("p"),GDo=o("The model is set in evaluation mode by default using "),bhe=a("code"),ODo=o("model.eval()"),VDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),XDo=o("model.train()"),zDo=l(),F(x2.$$.fragment),zje=l(),Hi=a("h2"),$2=a("a"),Fhe=a("span"),F(KL.$$.fragment),WDo=l(),The=a("span"),QDo=o("AutoModelForNextSentencePrediction"),Wje=l(),Bo=a("div"),F(ZL.$$.fragment),HDo=l(),Ui=a("p"),UDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gV=a("a"),JDo=o("from_pretrained()"),YDo=o(" class method or the "),hV=a("a"),KDo=o("from_config()"),ZDo=o(` class
method.`),eGo=l(),ey=a("p"),oGo=o("This class cannot be instantiated directly using "),Mhe=a("code"),rGo=o("__init__()"),tGo=o(" (throws an error)."),aGo=l(),ct=a("div"),F(oy.$$.fragment),nGo=l(),Ehe=a("p"),sGo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lGo=l(),Ji=a("p"),iGo=o(`Note:
Loading a model from its configuration file does `),Che=a("strong"),dGo=o("not"),cGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),fGo=o("from_pretrained()"),mGo=o(" to load the model weights."),gGo=l(),F(k2.$$.fragment),hGo=l(),to=a("div"),F(ry.$$.fragment),pGo=l(),whe=a("p"),_Go=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uGo=l(),Ba=a("p"),bGo=o("The model class to instantiate is selected based on the "),Ahe=a("code"),vGo=o("model_type"),FGo=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),TGo=o("pretrained_model_name_or_path"),MGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),EGo=o("pretrained_model_name_or_path"),CGo=o(":"),wGo=l(),Yr=a("ul"),S2=a("li"),xhe=a("strong"),AGo=o("bert"),LGo=o(" \u2014 "),_V=a("a"),yGo=o("BertForNextSentencePrediction"),xGo=o(" (BERT model)"),$Go=l(),R2=a("li"),$he=a("strong"),kGo=o("fnet"),SGo=o(" \u2014 "),uV=a("a"),RGo=o("FNetForNextSentencePrediction"),PGo=o(" (FNet model)"),BGo=l(),P2=a("li"),khe=a("strong"),IGo=o("megatron-bert"),NGo=o(" \u2014 "),bV=a("a"),qGo=o("MegatronBertForNextSentencePrediction"),jGo=o(" (Megatron-BERT model)"),DGo=l(),B2=a("li"),She=a("strong"),GGo=o("mobilebert"),OGo=o(" \u2014 "),vV=a("a"),VGo=o("MobileBertForNextSentencePrediction"),XGo=o(" (MobileBERT model)"),zGo=l(),I2=a("li"),Rhe=a("strong"),WGo=o("qdqbert"),QGo=o(" \u2014 "),FV=a("a"),HGo=o("QDQBertForNextSentencePrediction"),UGo=o(" (QDQBert model)"),JGo=l(),N2=a("p"),YGo=o("The model is set in evaluation mode by default using "),Phe=a("code"),KGo=o("model.eval()"),ZGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=a("code"),eOo=o("model.train()"),oOo=l(),F(q2.$$.fragment),Qje=l(),Yi=a("h2"),j2=a("a"),Ihe=a("span"),F(ty.$$.fragment),rOo=l(),Nhe=a("span"),tOo=o("AutoModelForTokenClassification"),Hje=l(),Io=a("div"),F(ay.$$.fragment),aOo=l(),Ki=a("p"),nOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TV=a("a"),sOo=o("from_pretrained()"),lOo=o(" class method or the "),MV=a("a"),iOo=o("from_config()"),dOo=o(` class
method.`),cOo=l(),ny=a("p"),fOo=o("This class cannot be instantiated directly using "),qhe=a("code"),mOo=o("__init__()"),gOo=o(" (throws an error)."),hOo=l(),ft=a("div"),F(sy.$$.fragment),pOo=l(),jhe=a("p"),_Oo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uOo=l(),Zi=a("p"),bOo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),vOo=o("not"),FOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),TOo=o("from_pretrained()"),MOo=o(" to load the model weights."),EOo=l(),F(D2.$$.fragment),COo=l(),ao=a("div"),F(ly.$$.fragment),wOo=l(),Ghe=a("p"),AOo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LOo=l(),Ia=a("p"),yOo=o("The model class to instantiate is selected based on the "),Ohe=a("code"),xOo=o("model_type"),$Oo=o(` property of the config object (either
passed as an argument or loaded from `),Vhe=a("code"),kOo=o("pretrained_model_name_or_path"),SOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),ROo=o("pretrained_model_name_or_path"),POo=o(":"),BOo=l(),U=a("ul"),G2=a("li"),zhe=a("strong"),IOo=o("albert"),NOo=o(" \u2014 "),CV=a("a"),qOo=o("AlbertForTokenClassification"),jOo=o(" (ALBERT model)"),DOo=l(),O2=a("li"),Whe=a("strong"),GOo=o("bert"),OOo=o(" \u2014 "),wV=a("a"),VOo=o("BertForTokenClassification"),XOo=o(" (BERT model)"),zOo=l(),V2=a("li"),Qhe=a("strong"),WOo=o("big_bird"),QOo=o(" \u2014 "),AV=a("a"),HOo=o("BigBirdForTokenClassification"),UOo=o(" (BigBird model)"),JOo=l(),X2=a("li"),Hhe=a("strong"),YOo=o("camembert"),KOo=o(" \u2014 "),LV=a("a"),ZOo=o("CamembertForTokenClassification"),eVo=o(" (CamemBERT model)"),oVo=l(),z2=a("li"),Uhe=a("strong"),rVo=o("canine"),tVo=o(" \u2014 "),yV=a("a"),aVo=o("CanineForTokenClassification"),nVo=o(" (CANINE model)"),sVo=l(),W2=a("li"),Jhe=a("strong"),lVo=o("convbert"),iVo=o(" \u2014 "),xV=a("a"),dVo=o("ConvBertForTokenClassification"),cVo=o(" (ConvBERT model)"),fVo=l(),Q2=a("li"),Yhe=a("strong"),mVo=o("data2vec-text"),gVo=o(" \u2014 "),$V=a("a"),hVo=o("Data2VecTextForTokenClassification"),pVo=o(" (Data2VecText model)"),_Vo=l(),H2=a("li"),Khe=a("strong"),uVo=o("deberta"),bVo=o(" \u2014 "),kV=a("a"),vVo=o("DebertaForTokenClassification"),FVo=o(" (DeBERTa model)"),TVo=l(),U2=a("li"),Zhe=a("strong"),MVo=o("deberta-v2"),EVo=o(" \u2014 "),SV=a("a"),CVo=o("DebertaV2ForTokenClassification"),wVo=o(" (DeBERTa-v2 model)"),AVo=l(),J2=a("li"),epe=a("strong"),LVo=o("distilbert"),yVo=o(" \u2014 "),RV=a("a"),xVo=o("DistilBertForTokenClassification"),$Vo=o(" (DistilBERT model)"),kVo=l(),Y2=a("li"),ope=a("strong"),SVo=o("electra"),RVo=o(" \u2014 "),PV=a("a"),PVo=o("ElectraForTokenClassification"),BVo=o(" (ELECTRA model)"),IVo=l(),K2=a("li"),rpe=a("strong"),NVo=o("flaubert"),qVo=o(" \u2014 "),BV=a("a"),jVo=o("FlaubertForTokenClassification"),DVo=o(" (FlauBERT model)"),GVo=l(),Z2=a("li"),tpe=a("strong"),OVo=o("fnet"),VVo=o(" \u2014 "),IV=a("a"),XVo=o("FNetForTokenClassification"),zVo=o(" (FNet model)"),WVo=l(),ev=a("li"),ape=a("strong"),QVo=o("funnel"),HVo=o(" \u2014 "),NV=a("a"),UVo=o("FunnelForTokenClassification"),JVo=o(" (Funnel Transformer model)"),YVo=l(),ov=a("li"),npe=a("strong"),KVo=o("gpt2"),ZVo=o(" \u2014 "),qV=a("a"),eXo=o("GPT2ForTokenClassification"),oXo=o(" (OpenAI GPT-2 model)"),rXo=l(),rv=a("li"),spe=a("strong"),tXo=o("ibert"),aXo=o(" \u2014 "),jV=a("a"),nXo=o("IBertForTokenClassification"),sXo=o(" (I-BERT model)"),lXo=l(),tv=a("li"),lpe=a("strong"),iXo=o("layoutlm"),dXo=o(" \u2014 "),DV=a("a"),cXo=o("LayoutLMForTokenClassification"),fXo=o(" (LayoutLM model)"),mXo=l(),av=a("li"),ipe=a("strong"),gXo=o("layoutlmv2"),hXo=o(" \u2014 "),GV=a("a"),pXo=o("LayoutLMv2ForTokenClassification"),_Xo=o(" (LayoutLMv2 model)"),uXo=l(),nv=a("li"),dpe=a("strong"),bXo=o("layoutlmv3"),vXo=o(" \u2014 "),OV=a("a"),FXo=o("LayoutLMv3ForTokenClassification"),TXo=o(" (LayoutLMv3 model)"),MXo=l(),sv=a("li"),cpe=a("strong"),EXo=o("longformer"),CXo=o(" \u2014 "),VV=a("a"),wXo=o("LongformerForTokenClassification"),AXo=o(" (Longformer model)"),LXo=l(),lv=a("li"),fpe=a("strong"),yXo=o("megatron-bert"),xXo=o(" \u2014 "),XV=a("a"),$Xo=o("MegatronBertForTokenClassification"),kXo=o(" (Megatron-BERT model)"),SXo=l(),iv=a("li"),mpe=a("strong"),RXo=o("mobilebert"),PXo=o(" \u2014 "),zV=a("a"),BXo=o("MobileBertForTokenClassification"),IXo=o(" (MobileBERT model)"),NXo=l(),dv=a("li"),gpe=a("strong"),qXo=o("mpnet"),jXo=o(" \u2014 "),WV=a("a"),DXo=o("MPNetForTokenClassification"),GXo=o(" (MPNet model)"),OXo=l(),cv=a("li"),hpe=a("strong"),VXo=o("nystromformer"),XXo=o(" \u2014 "),QV=a("a"),zXo=o("NystromformerForTokenClassification"),WXo=o(" (Nystr\xF6mformer model)"),QXo=l(),fv=a("li"),ppe=a("strong"),HXo=o("qdqbert"),UXo=o(" \u2014 "),HV=a("a"),JXo=o("QDQBertForTokenClassification"),YXo=o(" (QDQBert model)"),KXo=l(),mv=a("li"),_pe=a("strong"),ZXo=o("rembert"),ezo=o(" \u2014 "),UV=a("a"),ozo=o("RemBertForTokenClassification"),rzo=o(" (RemBERT model)"),tzo=l(),gv=a("li"),upe=a("strong"),azo=o("roberta"),nzo=o(" \u2014 "),JV=a("a"),szo=o("RobertaForTokenClassification"),lzo=o(" (RoBERTa model)"),izo=l(),hv=a("li"),bpe=a("strong"),dzo=o("roformer"),czo=o(" \u2014 "),YV=a("a"),fzo=o("RoFormerForTokenClassification"),mzo=o(" (RoFormer model)"),gzo=l(),pv=a("li"),vpe=a("strong"),hzo=o("squeezebert"),pzo=o(" \u2014 "),KV=a("a"),_zo=o("SqueezeBertForTokenClassification"),uzo=o(" (SqueezeBERT model)"),bzo=l(),_v=a("li"),Fpe=a("strong"),vzo=o("xlm"),Fzo=o(" \u2014 "),ZV=a("a"),Tzo=o("XLMForTokenClassification"),Mzo=o(" (XLM model)"),Ezo=l(),uv=a("li"),Tpe=a("strong"),Czo=o("xlm-roberta"),wzo=o(" \u2014 "),eX=a("a"),Azo=o("XLMRobertaForTokenClassification"),Lzo=o(" (XLM-RoBERTa model)"),yzo=l(),bv=a("li"),Mpe=a("strong"),xzo=o("xlm-roberta-xl"),$zo=o(" \u2014 "),oX=a("a"),kzo=o("XLMRobertaXLForTokenClassification"),Szo=o(" (XLM-RoBERTa-XL model)"),Rzo=l(),vv=a("li"),Epe=a("strong"),Pzo=o("xlnet"),Bzo=o(" \u2014 "),rX=a("a"),Izo=o("XLNetForTokenClassification"),Nzo=o(" (XLNet model)"),qzo=l(),Fv=a("li"),Cpe=a("strong"),jzo=o("yoso"),Dzo=o(" \u2014 "),tX=a("a"),Gzo=o("YosoForTokenClassification"),Ozo=o(" (YOSO model)"),Vzo=l(),Tv=a("p"),Xzo=o("The model is set in evaluation mode by default using "),wpe=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),Qzo=o("model.train()"),Hzo=l(),F(Mv.$$.fragment),Uje=l(),ed=a("h2"),Ev=a("a"),Lpe=a("span"),F(iy.$$.fragment),Uzo=l(),ype=a("span"),Jzo=o("AutoModelForQuestionAnswering"),Jje=l(),No=a("div"),F(dy.$$.fragment),Yzo=l(),od=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aX=a("a"),Zzo=o("from_pretrained()"),eWo=o(" class method or the "),nX=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),cy=a("p"),aWo=o("This class cannot be instantiated directly using "),xpe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),mt=a("div"),F(fy.$$.fragment),iWo=l(),$pe=a("p"),dWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cWo=l(),rd=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),_Wo=l(),F(Cv.$$.fragment),uWo=l(),no=a("div"),F(my.$$.fragment),bWo=l(),Spe=a("p"),vWo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FWo=l(),Na=a("p"),TWo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),AWo=o("pretrained_model_name_or_path"),LWo=o(":"),yWo=l(),V=a("ul"),wv=a("li"),Ipe=a("strong"),xWo=o("albert"),$Wo=o(" \u2014 "),lX=a("a"),kWo=o("AlbertForQuestionAnswering"),SWo=o(" (ALBERT model)"),RWo=l(),Av=a("li"),Npe=a("strong"),PWo=o("bart"),BWo=o(" \u2014 "),iX=a("a"),IWo=o("BartForQuestionAnswering"),NWo=o(" (BART model)"),qWo=l(),Lv=a("li"),qpe=a("strong"),jWo=o("bert"),DWo=o(" \u2014 "),dX=a("a"),GWo=o("BertForQuestionAnswering"),OWo=o(" (BERT model)"),VWo=l(),yv=a("li"),jpe=a("strong"),XWo=o("big_bird"),zWo=o(" \u2014 "),cX=a("a"),WWo=o("BigBirdForQuestionAnswering"),QWo=o(" (BigBird model)"),HWo=l(),xv=a("li"),Dpe=a("strong"),UWo=o("bigbird_pegasus"),JWo=o(" \u2014 "),fX=a("a"),YWo=o("BigBirdPegasusForQuestionAnswering"),KWo=o(" (BigBird-Pegasus model)"),ZWo=l(),$v=a("li"),Gpe=a("strong"),eQo=o("camembert"),oQo=o(" \u2014 "),mX=a("a"),rQo=o("CamembertForQuestionAnswering"),tQo=o(" (CamemBERT model)"),aQo=l(),kv=a("li"),Ope=a("strong"),nQo=o("canine"),sQo=o(" \u2014 "),gX=a("a"),lQo=o("CanineForQuestionAnswering"),iQo=o(" (CANINE model)"),dQo=l(),Sv=a("li"),Vpe=a("strong"),cQo=o("convbert"),fQo=o(" \u2014 "),hX=a("a"),mQo=o("ConvBertForQuestionAnswering"),gQo=o(" (ConvBERT model)"),hQo=l(),Rv=a("li"),Xpe=a("strong"),pQo=o("data2vec-text"),_Qo=o(" \u2014 "),pX=a("a"),uQo=o("Data2VecTextForQuestionAnswering"),bQo=o(" (Data2VecText model)"),vQo=l(),Pv=a("li"),zpe=a("strong"),FQo=o("deberta"),TQo=o(" \u2014 "),_X=a("a"),MQo=o("DebertaForQuestionAnswering"),EQo=o(" (DeBERTa model)"),CQo=l(),Bv=a("li"),Wpe=a("strong"),wQo=o("deberta-v2"),AQo=o(" \u2014 "),uX=a("a"),LQo=o("DebertaV2ForQuestionAnswering"),yQo=o(" (DeBERTa-v2 model)"),xQo=l(),Iv=a("li"),Qpe=a("strong"),$Qo=o("distilbert"),kQo=o(" \u2014 "),bX=a("a"),SQo=o("DistilBertForQuestionAnswering"),RQo=o(" (DistilBERT model)"),PQo=l(),Nv=a("li"),Hpe=a("strong"),BQo=o("electra"),IQo=o(" \u2014 "),vX=a("a"),NQo=o("ElectraForQuestionAnswering"),qQo=o(" (ELECTRA model)"),jQo=l(),qv=a("li"),Upe=a("strong"),DQo=o("flaubert"),GQo=o(" \u2014 "),FX=a("a"),OQo=o("FlaubertForQuestionAnsweringSimple"),VQo=o(" (FlauBERT model)"),XQo=l(),jv=a("li"),Jpe=a("strong"),zQo=o("fnet"),WQo=o(" \u2014 "),TX=a("a"),QQo=o("FNetForQuestionAnswering"),HQo=o(" (FNet model)"),UQo=l(),Dv=a("li"),Ype=a("strong"),JQo=o("funnel"),YQo=o(" \u2014 "),MX=a("a"),KQo=o("FunnelForQuestionAnswering"),ZQo=o(" (Funnel Transformer model)"),eHo=l(),Gv=a("li"),Kpe=a("strong"),oHo=o("gptj"),rHo=o(" \u2014 "),EX=a("a"),tHo=o("GPTJForQuestionAnswering"),aHo=o(" (GPT-J model)"),nHo=l(),Ov=a("li"),Zpe=a("strong"),sHo=o("ibert"),lHo=o(" \u2014 "),CX=a("a"),iHo=o("IBertForQuestionAnswering"),dHo=o(" (I-BERT model)"),cHo=l(),Vv=a("li"),e_e=a("strong"),fHo=o("layoutlmv2"),mHo=o(" \u2014 "),wX=a("a"),gHo=o("LayoutLMv2ForQuestionAnswering"),hHo=o(" (LayoutLMv2 model)"),pHo=l(),Xv=a("li"),o_e=a("strong"),_Ho=o("layoutlmv3"),uHo=o(" \u2014 "),AX=a("a"),bHo=o("LayoutLMv3ForQuestionAnswering"),vHo=o(" (LayoutLMv3 model)"),FHo=l(),zv=a("li"),r_e=a("strong"),THo=o("led"),MHo=o(" \u2014 "),LX=a("a"),EHo=o("LEDForQuestionAnswering"),CHo=o(" (LED model)"),wHo=l(),Wv=a("li"),t_e=a("strong"),AHo=o("longformer"),LHo=o(" \u2014 "),yX=a("a"),yHo=o("LongformerForQuestionAnswering"),xHo=o(" (Longformer model)"),$Ho=l(),Qv=a("li"),a_e=a("strong"),kHo=o("lxmert"),SHo=o(" \u2014 "),xX=a("a"),RHo=o("LxmertForQuestionAnswering"),PHo=o(" (LXMERT model)"),BHo=l(),Hv=a("li"),n_e=a("strong"),IHo=o("mbart"),NHo=o(" \u2014 "),$X=a("a"),qHo=o("MBartForQuestionAnswering"),jHo=o(" (mBART model)"),DHo=l(),Uv=a("li"),s_e=a("strong"),GHo=o("megatron-bert"),OHo=o(" \u2014 "),kX=a("a"),VHo=o("MegatronBertForQuestionAnswering"),XHo=o(" (Megatron-BERT model)"),zHo=l(),Jv=a("li"),l_e=a("strong"),WHo=o("mobilebert"),QHo=o(" \u2014 "),SX=a("a"),HHo=o("MobileBertForQuestionAnswering"),UHo=o(" (MobileBERT model)"),JHo=l(),Yv=a("li"),i_e=a("strong"),YHo=o("mpnet"),KHo=o(" \u2014 "),RX=a("a"),ZHo=o("MPNetForQuestionAnswering"),eUo=o(" (MPNet model)"),oUo=l(),Kv=a("li"),d_e=a("strong"),rUo=o("nystromformer"),tUo=o(" \u2014 "),PX=a("a"),aUo=o("NystromformerForQuestionAnswering"),nUo=o(" (Nystr\xF6mformer model)"),sUo=l(),Zv=a("li"),c_e=a("strong"),lUo=o("qdqbert"),iUo=o(" \u2014 "),BX=a("a"),dUo=o("QDQBertForQuestionAnswering"),cUo=o(" (QDQBert model)"),fUo=l(),eF=a("li"),f_e=a("strong"),mUo=o("reformer"),gUo=o(" \u2014 "),IX=a("a"),hUo=o("ReformerForQuestionAnswering"),pUo=o(" (Reformer model)"),_Uo=l(),oF=a("li"),m_e=a("strong"),uUo=o("rembert"),bUo=o(" \u2014 "),NX=a("a"),vUo=o("RemBertForQuestionAnswering"),FUo=o(" (RemBERT model)"),TUo=l(),rF=a("li"),g_e=a("strong"),MUo=o("roberta"),EUo=o(" \u2014 "),qX=a("a"),CUo=o("RobertaForQuestionAnswering"),wUo=o(" (RoBERTa model)"),AUo=l(),tF=a("li"),h_e=a("strong"),LUo=o("roformer"),yUo=o(" \u2014 "),jX=a("a"),xUo=o("RoFormerForQuestionAnswering"),$Uo=o(" (RoFormer model)"),kUo=l(),aF=a("li"),p_e=a("strong"),SUo=o("splinter"),RUo=o(" \u2014 "),DX=a("a"),PUo=o("SplinterForQuestionAnswering"),BUo=o(" (Splinter model)"),IUo=l(),nF=a("li"),__e=a("strong"),NUo=o("squeezebert"),qUo=o(" \u2014 "),GX=a("a"),jUo=o("SqueezeBertForQuestionAnswering"),DUo=o(" (SqueezeBERT model)"),GUo=l(),sF=a("li"),u_e=a("strong"),OUo=o("xlm"),VUo=o(" \u2014 "),OX=a("a"),XUo=o("XLMForQuestionAnsweringSimple"),zUo=o(" (XLM model)"),WUo=l(),lF=a("li"),b_e=a("strong"),QUo=o("xlm-roberta"),HUo=o(" \u2014 "),VX=a("a"),UUo=o("XLMRobertaForQuestionAnswering"),JUo=o(" (XLM-RoBERTa model)"),YUo=l(),iF=a("li"),v_e=a("strong"),KUo=o("xlm-roberta-xl"),ZUo=o(" \u2014 "),XX=a("a"),eJo=o("XLMRobertaXLForQuestionAnswering"),oJo=o(" (XLM-RoBERTa-XL model)"),rJo=l(),dF=a("li"),F_e=a("strong"),tJo=o("xlnet"),aJo=o(" \u2014 "),zX=a("a"),nJo=o("XLNetForQuestionAnsweringSimple"),sJo=o(" (XLNet model)"),lJo=l(),cF=a("li"),T_e=a("strong"),iJo=o("yoso"),dJo=o(" \u2014 "),WX=a("a"),cJo=o("YosoForQuestionAnswering"),fJo=o(" (YOSO model)"),mJo=l(),fF=a("p"),gJo=o("The model is set in evaluation mode by default using "),M_e=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),_Jo=o("model.train()"),uJo=l(),F(mF.$$.fragment),Yje=l(),td=a("h2"),gF=a("a"),C_e=a("span"),F(gy.$$.fragment),bJo=l(),w_e=a("span"),vJo=o("AutoModelForTableQuestionAnswering"),Kje=l(),qo=a("div"),F(hy.$$.fragment),FJo=l(),ad=a("p"),TJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QX=a("a"),MJo=o("from_pretrained()"),EJo=o(" class method or the "),HX=a("a"),CJo=o("from_config()"),wJo=o(` class
method.`),AJo=l(),py=a("p"),LJo=o("This class cannot be instantiated directly using "),A_e=a("code"),yJo=o("__init__()"),xJo=o(" (throws an error)."),$Jo=l(),gt=a("div"),F(_y.$$.fragment),kJo=l(),L_e=a("p"),SJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RJo=l(),nd=a("p"),PJo=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),BJo=o("not"),IJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),NJo=o("from_pretrained()"),qJo=o(" to load the model weights."),jJo=l(),F(hF.$$.fragment),DJo=l(),so=a("div"),F(uy.$$.fragment),GJo=l(),x_e=a("p"),OJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VJo=l(),qa=a("p"),XJo=o("The model class to instantiate is selected based on the "),$_e=a("code"),zJo=o("model_type"),WJo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),QJo=o("pretrained_model_name_or_path"),HJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),UJo=o("pretrained_model_name_or_path"),JJo=o(":"),YJo=l(),R_e=a("ul"),pF=a("li"),P_e=a("strong"),KJo=o("tapas"),ZJo=o(" \u2014 "),JX=a("a"),eYo=o("TapasForQuestionAnswering"),oYo=o(" (TAPAS model)"),rYo=l(),_F=a("p"),tYo=o("The model is set in evaluation mode by default using "),B_e=a("code"),aYo=o("model.eval()"),nYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),sYo=o("model.train()"),lYo=l(),F(uF.$$.fragment),Zje=l(),sd=a("h2"),bF=a("a"),N_e=a("span"),F(by.$$.fragment),iYo=l(),q_e=a("span"),dYo=o("AutoModelForImageClassification"),eDe=l(),jo=a("div"),F(vy.$$.fragment),cYo=l(),ld=a("p"),fYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YX=a("a"),mYo=o("from_pretrained()"),gYo=o(" class method or the "),KX=a("a"),hYo=o("from_config()"),pYo=o(` class
method.`),_Yo=l(),Fy=a("p"),uYo=o("This class cannot be instantiated directly using "),j_e=a("code"),bYo=o("__init__()"),vYo=o(" (throws an error)."),FYo=l(),ht=a("div"),F(Ty.$$.fragment),TYo=l(),D_e=a("p"),MYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EYo=l(),id=a("p"),CYo=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),wYo=o("not"),AYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),LYo=o("from_pretrained()"),yYo=o(" to load the model weights."),xYo=l(),F(vF.$$.fragment),$Yo=l(),lo=a("div"),F(My.$$.fragment),kYo=l(),O_e=a("p"),SYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RYo=l(),ja=a("p"),PYo=o("The model class to instantiate is selected based on the "),V_e=a("code"),BYo=o("model_type"),IYo=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),NYo=o("pretrained_model_name_or_path"),qYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),jYo=o("pretrained_model_name_or_path"),DYo=o(":"),GYo=l(),ve=a("ul"),FF=a("li"),W_e=a("strong"),OYo=o("beit"),VYo=o(" \u2014 "),ez=a("a"),XYo=o("BeitForImageClassification"),zYo=o(" (BEiT model)"),WYo=l(),TF=a("li"),Q_e=a("strong"),QYo=o("convnext"),HYo=o(" \u2014 "),oz=a("a"),UYo=o("ConvNextForImageClassification"),JYo=o(" (ConvNeXT model)"),YYo=l(),MF=a("li"),H_e=a("strong"),KYo=o("cvt"),ZYo=o(" \u2014 "),rz=a("a"),eKo=o("CvtForImageClassification"),oKo=o(" (CvT model)"),rKo=l(),EF=a("li"),U_e=a("strong"),tKo=o("data2vec-vision"),aKo=o(" \u2014 "),tz=a("a"),nKo=o("Data2VecVisionForImageClassification"),sKo=o(" (Data2VecVision model)"),lKo=l(),Is=a("li"),J_e=a("strong"),iKo=o("deit"),dKo=o(" \u2014 "),az=a("a"),cKo=o("DeiTForImageClassification"),fKo=o(" or "),nz=a("a"),mKo=o("DeiTForImageClassificationWithTeacher"),gKo=o(" (DeiT model)"),hKo=l(),CF=a("li"),Y_e=a("strong"),pKo=o("imagegpt"),_Ko=o(" \u2014 "),sz=a("a"),uKo=o("ImageGPTForImageClassification"),bKo=o(" (ImageGPT model)"),vKo=l(),Ns=a("li"),K_e=a("strong"),FKo=o("levit"),TKo=o(" \u2014 "),lz=a("a"),MKo=o("LevitForImageClassification"),EKo=o(" or "),iz=a("a"),CKo=o("LevitForImageClassificationWithTeacher"),wKo=o(" (LeViT model)"),AKo=l(),pt=a("li"),Z_e=a("strong"),LKo=o("perceiver"),yKo=o(" \u2014 "),dz=a("a"),xKo=o("PerceiverForImageClassificationLearned"),$Ko=o(" or "),cz=a("a"),kKo=o("PerceiverForImageClassificationFourier"),SKo=o(" or "),fz=a("a"),RKo=o("PerceiverForImageClassificationConvProcessing"),PKo=o(" (Perceiver model)"),BKo=l(),wF=a("li"),eue=a("strong"),IKo=o("poolformer"),NKo=o(" \u2014 "),mz=a("a"),qKo=o("PoolFormerForImageClassification"),jKo=o(" (PoolFormer model)"),DKo=l(),AF=a("li"),oue=a("strong"),GKo=o("regnet"),OKo=o(" \u2014 "),gz=a("a"),VKo=o("RegNetForImageClassification"),XKo=o(" (RegNet model)"),zKo=l(),LF=a("li"),rue=a("strong"),WKo=o("resnet"),QKo=o(" \u2014 "),hz=a("a"),HKo=o("ResNetForImageClassification"),UKo=o(" (ResNet model)"),JKo=l(),yF=a("li"),tue=a("strong"),YKo=o("segformer"),KKo=o(" \u2014 "),pz=a("a"),ZKo=o("SegformerForImageClassification"),eZo=o(" (SegFormer model)"),oZo=l(),xF=a("li"),aue=a("strong"),rZo=o("swin"),tZo=o(" \u2014 "),_z=a("a"),aZo=o("SwinForImageClassification"),nZo=o(" (Swin Transformer model)"),sZo=l(),$F=a("li"),nue=a("strong"),lZo=o("van"),iZo=o(" \u2014 "),uz=a("a"),dZo=o("VanForImageClassification"),cZo=o(" (VAN model)"),fZo=l(),kF=a("li"),sue=a("strong"),mZo=o("vit"),gZo=o(" \u2014 "),bz=a("a"),hZo=o("ViTForImageClassification"),pZo=o(" (ViT model)"),_Zo=l(),SF=a("p"),uZo=o("The model is set in evaluation mode by default using "),lue=a("code"),bZo=o("model.eval()"),vZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),FZo=o("model.train()"),TZo=l(),F(RF.$$.fragment),oDe=l(),dd=a("h2"),PF=a("a"),due=a("span"),F(Ey.$$.fragment),MZo=l(),cue=a("span"),EZo=o("AutoModelForVision2Seq"),rDe=l(),Do=a("div"),F(Cy.$$.fragment),CZo=l(),cd=a("p"),wZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vz=a("a"),AZo=o("from_pretrained()"),LZo=o(" class method or the "),Fz=a("a"),yZo=o("from_config()"),xZo=o(` class
method.`),$Zo=l(),wy=a("p"),kZo=o("This class cannot be instantiated directly using "),fue=a("code"),SZo=o("__init__()"),RZo=o(" (throws an error)."),PZo=l(),_t=a("div"),F(Ay.$$.fragment),BZo=l(),mue=a("p"),IZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NZo=l(),fd=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),jZo=o("not"),DZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),GZo=o("from_pretrained()"),OZo=o(" to load the model weights."),VZo=l(),F(BF.$$.fragment),XZo=l(),io=a("div"),F(Ly.$$.fragment),zZo=l(),hue=a("p"),WZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QZo=l(),Da=a("p"),HZo=o("The model class to instantiate is selected based on the "),pue=a("code"),UZo=o("model_type"),JZo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),YZo=o("pretrained_model_name_or_path"),KZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),ZZo=o("pretrained_model_name_or_path"),eer=o(":"),oer=l(),bue=a("ul"),IF=a("li"),vue=a("strong"),rer=o("vision-encoder-decoder"),ter=o(" \u2014 "),Mz=a("a"),aer=o("VisionEncoderDecoderModel"),ner=o(" (Vision Encoder decoder model)"),ser=l(),NF=a("p"),ler=o("The model is set in evaluation mode by default using "),Fue=a("code"),ier=o("model.eval()"),der=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),cer=o("model.train()"),fer=l(),F(qF.$$.fragment),tDe=l(),md=a("h2"),jF=a("a"),Mue=a("span"),F(yy.$$.fragment),mer=l(),Eue=a("span"),ger=o("AutoModelForAudioClassification"),aDe=l(),Go=a("div"),F(xy.$$.fragment),her=l(),gd=a("p"),per=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ez=a("a"),_er=o("from_pretrained()"),uer=o(" class method or the "),Cz=a("a"),ber=o("from_config()"),ver=o(` class
method.`),Fer=l(),$y=a("p"),Ter=o("This class cannot be instantiated directly using "),Cue=a("code"),Mer=o("__init__()"),Eer=o(" (throws an error)."),Cer=l(),ut=a("div"),F(ky.$$.fragment),wer=l(),wue=a("p"),Aer=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ler=l(),hd=a("p"),yer=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),xer=o("not"),$er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),ker=o("from_pretrained()"),Ser=o(" to load the model weights."),Rer=l(),F(DF.$$.fragment),Per=l(),co=a("div"),F(Sy.$$.fragment),Ber=l(),Lue=a("p"),Ier=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ner=l(),Ga=a("p"),qer=o("The model class to instantiate is selected based on the "),yue=a("code"),jer=o("model_type"),Der=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),Ger=o("pretrained_model_name_or_path"),Oer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(":"),zer=l(),Re=a("ul"),GF=a("li"),kue=a("strong"),Wer=o("data2vec-audio"),Qer=o(" \u2014 "),Az=a("a"),Her=o("Data2VecAudioForSequenceClassification"),Uer=o(" (Data2VecAudio model)"),Jer=l(),OF=a("li"),Sue=a("strong"),Yer=o("hubert"),Ker=o(" \u2014 "),Lz=a("a"),Zer=o("HubertForSequenceClassification"),eor=o(" (Hubert model)"),oor=l(),VF=a("li"),Rue=a("strong"),ror=o("sew"),tor=o(" \u2014 "),yz=a("a"),aor=o("SEWForSequenceClassification"),nor=o(" (SEW model)"),sor=l(),XF=a("li"),Pue=a("strong"),lor=o("sew-d"),ior=o(" \u2014 "),xz=a("a"),dor=o("SEWDForSequenceClassification"),cor=o(" (SEW-D model)"),mor=l(),zF=a("li"),Bue=a("strong"),gor=o("unispeech"),hor=o(" \u2014 "),$z=a("a"),por=o("UniSpeechForSequenceClassification"),_or=o(" (UniSpeech model)"),uor=l(),WF=a("li"),Iue=a("strong"),bor=o("unispeech-sat"),vor=o(" \u2014 "),kz=a("a"),For=o("UniSpeechSatForSequenceClassification"),Tor=o(" (UniSpeechSat model)"),Mor=l(),QF=a("li"),Nue=a("strong"),Eor=o("wav2vec2"),Cor=o(" \u2014 "),Sz=a("a"),wor=o("Wav2Vec2ForSequenceClassification"),Aor=o(" (Wav2Vec2 model)"),Lor=l(),HF=a("li"),que=a("strong"),yor=o("wav2vec2-conformer"),xor=o(" \u2014 "),Rz=a("a"),$or=o("Wav2Vec2ConformerForSequenceClassification"),kor=o(" (Wav2Vec2-Conformer model)"),Sor=l(),UF=a("li"),jue=a("strong"),Ror=o("wavlm"),Por=o(" \u2014 "),Pz=a("a"),Bor=o("WavLMForSequenceClassification"),Ior=o(" (WavLM model)"),Nor=l(),JF=a("p"),qor=o("The model is set in evaluation mode by default using "),Due=a("code"),jor=o("model.eval()"),Dor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),Gor=o("model.train()"),Oor=l(),F(YF.$$.fragment),nDe=l(),pd=a("h2"),KF=a("a"),Oue=a("span"),F(Ry.$$.fragment),Vor=l(),Vue=a("span"),Xor=o("AutoModelForAudioFrameClassification"),sDe=l(),Oo=a("div"),F(Py.$$.fragment),zor=l(),_d=a("p"),Wor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Bz=a("a"),Qor=o("from_pretrained()"),Hor=o(" class method or the "),Iz=a("a"),Uor=o("from_config()"),Jor=o(` class
method.`),Yor=l(),By=a("p"),Kor=o("This class cannot be instantiated directly using "),Xue=a("code"),Zor=o("__init__()"),err=o(" (throws an error)."),orr=l(),bt=a("div"),F(Iy.$$.fragment),rrr=l(),zue=a("p"),trr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),arr=l(),ud=a("p"),nrr=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),srr=o("not"),lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),irr=o("from_pretrained()"),drr=o(" to load the model weights."),crr=l(),F(ZF.$$.fragment),frr=l(),fo=a("div"),F(Ny.$$.fragment),mrr=l(),Que=a("p"),grr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hrr=l(),Oa=a("p"),prr=o("The model class to instantiate is selected based on the "),Hue=a("code"),_rr=o("model_type"),urr=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),Frr=o("pretrained_model_name_or_path"),Trr=o(":"),Mrr=l(),Kr=a("ul"),eT=a("li"),Yue=a("strong"),Err=o("data2vec-audio"),Crr=o(" \u2014 "),qz=a("a"),wrr=o("Data2VecAudioForAudioFrameClassification"),Arr=o(" (Data2VecAudio model)"),Lrr=l(),oT=a("li"),Kue=a("strong"),yrr=o("unispeech-sat"),xrr=o(" \u2014 "),jz=a("a"),$rr=o("UniSpeechSatForAudioFrameClassification"),krr=o(" (UniSpeechSat model)"),Srr=l(),rT=a("li"),Zue=a("strong"),Rrr=o("wav2vec2"),Prr=o(" \u2014 "),Dz=a("a"),Brr=o("Wav2Vec2ForAudioFrameClassification"),Irr=o(" (Wav2Vec2 model)"),Nrr=l(),tT=a("li"),e1e=a("strong"),qrr=o("wav2vec2-conformer"),jrr=o(" \u2014 "),Gz=a("a"),Drr=o("Wav2Vec2ConformerForAudioFrameClassification"),Grr=o(" (Wav2Vec2-Conformer model)"),Orr=l(),aT=a("li"),o1e=a("strong"),Vrr=o("wavlm"),Xrr=o(" \u2014 "),Oz=a("a"),zrr=o("WavLMForAudioFrameClassification"),Wrr=o(" (WavLM model)"),Qrr=l(),nT=a("p"),Hrr=o("The model is set in evaluation mode by default using "),r1e=a("code"),Urr=o("model.eval()"),Jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=a("code"),Yrr=o("model.train()"),Krr=l(),F(sT.$$.fragment),lDe=l(),bd=a("h2"),lT=a("a"),a1e=a("span"),F(qy.$$.fragment),Zrr=l(),n1e=a("span"),etr=o("AutoModelForCTC"),iDe=l(),Vo=a("div"),F(jy.$$.fragment),otr=l(),vd=a("p"),rtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vz=a("a"),ttr=o("from_pretrained()"),atr=o(" class method or the "),Xz=a("a"),ntr=o("from_config()"),str=o(` class
method.`),ltr=l(),Dy=a("p"),itr=o("This class cannot be instantiated directly using "),s1e=a("code"),dtr=o("__init__()"),ctr=o(" (throws an error)."),ftr=l(),vt=a("div"),F(Gy.$$.fragment),mtr=l(),l1e=a("p"),gtr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),htr=l(),Fd=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),_tr=o("not"),utr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),btr=o("from_pretrained()"),vtr=o(" to load the model weights."),Ftr=l(),F(iT.$$.fragment),Ttr=l(),mo=a("div"),F(Oy.$$.fragment),Mtr=l(),d1e=a("p"),Etr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ctr=l(),Va=a("p"),wtr=o("The model class to instantiate is selected based on the "),c1e=a("code"),Atr=o("model_type"),Ltr=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),ytr=o("pretrained_model_name_or_path"),xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(":"),Str=l(),Le=a("ul"),dT=a("li"),g1e=a("strong"),Rtr=o("data2vec-audio"),Ptr=o(" \u2014 "),Wz=a("a"),Btr=o("Data2VecAudioForCTC"),Itr=o(" (Data2VecAudio model)"),Ntr=l(),cT=a("li"),h1e=a("strong"),qtr=o("hubert"),jtr=o(" \u2014 "),Qz=a("a"),Dtr=o("HubertForCTC"),Gtr=o(" (Hubert model)"),Otr=l(),fT=a("li"),p1e=a("strong"),Vtr=o("mctct"),Xtr=o(" \u2014 "),Hz=a("a"),ztr=o("MCTCTForCTC"),Wtr=o(" (M-CTC-T model)"),Qtr=l(),mT=a("li"),_1e=a("strong"),Htr=o("sew"),Utr=o(" \u2014 "),Uz=a("a"),Jtr=o("SEWForCTC"),Ytr=o(" (SEW model)"),Ktr=l(),gT=a("li"),u1e=a("strong"),Ztr=o("sew-d"),ear=o(" \u2014 "),Jz=a("a"),oar=o("SEWDForCTC"),rar=o(" (SEW-D model)"),tar=l(),hT=a("li"),b1e=a("strong"),aar=o("unispeech"),nar=o(" \u2014 "),Yz=a("a"),sar=o("UniSpeechForCTC"),lar=o(" (UniSpeech model)"),iar=l(),pT=a("li"),v1e=a("strong"),dar=o("unispeech-sat"),car=o(" \u2014 "),Kz=a("a"),far=o("UniSpeechSatForCTC"),mar=o(" (UniSpeechSat model)"),gar=l(),_T=a("li"),F1e=a("strong"),har=o("wav2vec2"),par=o(" \u2014 "),Zz=a("a"),_ar=o("Wav2Vec2ForCTC"),uar=o(" (Wav2Vec2 model)"),bar=l(),uT=a("li"),T1e=a("strong"),Far=o("wav2vec2-conformer"),Tar=o(" \u2014 "),eW=a("a"),Mar=o("Wav2Vec2ConformerForCTC"),Ear=o(" (Wav2Vec2-Conformer model)"),Car=l(),bT=a("li"),M1e=a("strong"),war=o("wavlm"),Aar=o(" \u2014 "),oW=a("a"),Lar=o("WavLMForCTC"),yar=o(" (WavLM model)"),xar=l(),vT=a("p"),$ar=o("The model is set in evaluation mode by default using "),E1e=a("code"),kar=o("model.eval()"),Sar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),Rar=o("model.train()"),Par=l(),F(FT.$$.fragment),dDe=l(),Td=a("h2"),TT=a("a"),w1e=a("span"),F(Vy.$$.fragment),Bar=l(),A1e=a("span"),Iar=o("AutoModelForSpeechSeq2Seq"),cDe=l(),Xo=a("div"),F(Xy.$$.fragment),Nar=l(),Md=a("p"),qar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rW=a("a"),jar=o("from_pretrained()"),Dar=o(" class method or the "),tW=a("a"),Gar=o("from_config()"),Oar=o(` class
method.`),Var=l(),zy=a("p"),Xar=o("This class cannot be instantiated directly using "),L1e=a("code"),zar=o("__init__()"),War=o(" (throws an error)."),Qar=l(),Ft=a("div"),F(Wy.$$.fragment),Har=l(),y1e=a("p"),Uar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jar=l(),Ed=a("p"),Yar=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Kar=o("not"),Zar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),enr=o("from_pretrained()"),onr=o(" to load the model weights."),rnr=l(),F(MT.$$.fragment),tnr=l(),go=a("div"),F(Qy.$$.fragment),anr=l(),$1e=a("p"),nnr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),snr=l(),Xa=a("p"),lnr=o("The model class to instantiate is selected based on the "),k1e=a("code"),inr=o("model_type"),dnr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),cnr=o("pretrained_model_name_or_path"),fnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),mnr=o("pretrained_model_name_or_path"),gnr=o(":"),hnr=l(),Hy=a("ul"),ET=a("li"),P1e=a("strong"),pnr=o("speech-encoder-decoder"),_nr=o(" \u2014 "),nW=a("a"),unr=o("SpeechEncoderDecoderModel"),bnr=o(" (Speech Encoder decoder model)"),vnr=l(),CT=a("li"),B1e=a("strong"),Fnr=o("speech_to_text"),Tnr=o(" \u2014 "),sW=a("a"),Mnr=o("Speech2TextForConditionalGeneration"),Enr=o(" (Speech2Text model)"),Cnr=l(),wT=a("p"),wnr=o("The model is set in evaluation mode by default using "),I1e=a("code"),Anr=o("model.eval()"),Lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=a("code"),ynr=o("model.train()"),xnr=l(),F(AT.$$.fragment),fDe=l(),Cd=a("h2"),LT=a("a"),q1e=a("span"),F(Uy.$$.fragment),$nr=l(),j1e=a("span"),knr=o("AutoModelForAudioXVector"),mDe=l(),zo=a("div"),F(Jy.$$.fragment),Snr=l(),wd=a("p"),Rnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lW=a("a"),Pnr=o("from_pretrained()"),Bnr=o(" class method or the "),iW=a("a"),Inr=o("from_config()"),Nnr=o(` class
method.`),qnr=l(),Yy=a("p"),jnr=o("This class cannot be instantiated directly using "),D1e=a("code"),Dnr=o("__init__()"),Gnr=o(" (throws an error)."),Onr=l(),Tt=a("div"),F(Ky.$$.fragment),Vnr=l(),G1e=a("p"),Xnr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),znr=l(),Ad=a("p"),Wnr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),Qnr=o("not"),Hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Unr=o("from_pretrained()"),Jnr=o(" to load the model weights."),Ynr=l(),F(yT.$$.fragment),Knr=l(),ho=a("div"),F(Zy.$$.fragment),Znr=l(),V1e=a("p"),esr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),osr=l(),za=a("p"),rsr=o("The model class to instantiate is selected based on the "),X1e=a("code"),tsr=o("model_type"),asr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),nsr=o("pretrained_model_name_or_path"),ssr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),lsr=o("pretrained_model_name_or_path"),isr=o(":"),dsr=l(),Zr=a("ul"),xT=a("li"),Q1e=a("strong"),csr=o("data2vec-audio"),fsr=o(" \u2014 "),cW=a("a"),msr=o("Data2VecAudioForXVector"),gsr=o(" (Data2VecAudio model)"),hsr=l(),$T=a("li"),H1e=a("strong"),psr=o("unispeech-sat"),_sr=o(" \u2014 "),fW=a("a"),usr=o("UniSpeechSatForXVector"),bsr=o(" (UniSpeechSat model)"),vsr=l(),kT=a("li"),U1e=a("strong"),Fsr=o("wav2vec2"),Tsr=o(" \u2014 "),mW=a("a"),Msr=o("Wav2Vec2ForXVector"),Esr=o(" (Wav2Vec2 model)"),Csr=l(),ST=a("li"),J1e=a("strong"),wsr=o("wav2vec2-conformer"),Asr=o(" \u2014 "),gW=a("a"),Lsr=o("Wav2Vec2ConformerForXVector"),ysr=o(" (Wav2Vec2-Conformer model)"),xsr=l(),RT=a("li"),Y1e=a("strong"),$sr=o("wavlm"),ksr=o(" \u2014 "),hW=a("a"),Ssr=o("WavLMForXVector"),Rsr=o(" (WavLM model)"),Psr=l(),PT=a("p"),Bsr=o("The model is set in evaluation mode by default using "),K1e=a("code"),Isr=o("model.eval()"),Nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=a("code"),qsr=o("model.train()"),jsr=l(),F(BT.$$.fragment),gDe=l(),Ld=a("h2"),IT=a("a"),e3e=a("span"),F(e8.$$.fragment),Dsr=l(),o3e=a("span"),Gsr=o("AutoModelForMaskedImageModeling"),hDe=l(),Wo=a("div"),F(o8.$$.fragment),Osr=l(),yd=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),_W=a("a"),Wsr=o("from_config()"),Qsr=o(` class
method.`),Hsr=l(),r8=a("p"),Usr=o("This class cannot be instantiated directly using "),r3e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),Mt=a("div"),F(t8.$$.fragment),Zsr=l(),t3e=a("p"),elr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),olr=l(),xd=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),F(NT.$$.fragment),ilr=l(),po=a("div"),F(a8.$$.fragment),dlr=l(),n3e=a("p"),clr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),flr=l(),Wa=a("p"),mlr=o("The model class to instantiate is selected based on the "),s3e=a("code"),glr=o("model_type"),hlr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),ulr=o("pretrained_model_name_or_path"),blr=o(":"),vlr=l(),$d=a("ul"),qT=a("li"),d3e=a("strong"),Flr=o("deit"),Tlr=o(" \u2014 "),bW=a("a"),Mlr=o("DeiTForMaskedImageModeling"),Elr=o(" (DeiT model)"),Clr=l(),jT=a("li"),c3e=a("strong"),wlr=o("swin"),Alr=o(" \u2014 "),vW=a("a"),Llr=o("SwinForMaskedImageModeling"),ylr=o(" (Swin Transformer model)"),xlr=l(),DT=a("li"),f3e=a("strong"),$lr=o("vit"),klr=o(" \u2014 "),FW=a("a"),Slr=o("ViTForMaskedImageModeling"),Rlr=o(" (ViT model)"),Plr=l(),GT=a("p"),Blr=o("The model is set in evaluation mode by default using "),m3e=a("code"),Ilr=o("model.eval()"),Nlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=a("code"),qlr=o("model.train()"),jlr=l(),F(OT.$$.fragment),pDe=l(),kd=a("h2"),VT=a("a"),h3e=a("span"),F(n8.$$.fragment),Dlr=l(),p3e=a("span"),Glr=o("AutoModelForObjectDetection"),_De=l(),Qo=a("div"),F(s8.$$.fragment),Olr=l(),Sd=a("p"),Vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),TW=a("a"),Xlr=o("from_pretrained()"),zlr=o(" class method or the "),MW=a("a"),Wlr=o("from_config()"),Qlr=o(` class
method.`),Hlr=l(),l8=a("p"),Ulr=o("This class cannot be instantiated directly using "),_3e=a("code"),Jlr=o("__init__()"),Ylr=o(" (throws an error)."),Klr=l(),Et=a("div"),F(i8.$$.fragment),Zlr=l(),u3e=a("p"),eir=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),oir=l(),Rd=a("p"),rir=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),tir=o("not"),air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),nir=o("from_pretrained()"),sir=o(" to load the model weights."),lir=l(),F(XT.$$.fragment),iir=l(),_o=a("div"),F(d8.$$.fragment),dir=l(),v3e=a("p"),cir=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fir=l(),Qa=a("p"),mir=o("The model class to instantiate is selected based on the "),F3e=a("code"),gir=o("model_type"),hir=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(":"),vir=l(),c8=a("ul"),zT=a("li"),E3e=a("strong"),Fir=o("detr"),Tir=o(" \u2014 "),CW=a("a"),Mir=o("DetrForObjectDetection"),Eir=o(" (DETR model)"),Cir=l(),WT=a("li"),C3e=a("strong"),wir=o("yolos"),Air=o(" \u2014 "),wW=a("a"),Lir=o("YolosForObjectDetection"),yir=o(" (YOLOS model)"),xir=l(),QT=a("p"),$ir=o("The model is set in evaluation mode by default using "),w3e=a("code"),kir=o("model.eval()"),Sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=a("code"),Rir=o("model.train()"),Pir=l(),F(HT.$$.fragment),uDe=l(),Pd=a("h2"),UT=a("a"),L3e=a("span"),F(f8.$$.fragment),Bir=l(),y3e=a("span"),Iir=o("AutoModelForImageSegmentation"),bDe=l(),Ho=a("div"),F(m8.$$.fragment),Nir=l(),Bd=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),AW=a("a"),jir=o("from_pretrained()"),Dir=o(" class method or the "),LW=a("a"),Gir=o("from_config()"),Oir=o(` class
method.`),Vir=l(),g8=a("p"),Xir=o("This class cannot be instantiated directly using "),x3e=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),Ct=a("div"),F(h8.$$.fragment),Hir=l(),$3e=a("p"),Uir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Jir=l(),Id=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),edr=o("from_pretrained()"),odr=o(" to load the model weights."),rdr=l(),F(JT.$$.fragment),tdr=l(),uo=a("div"),F(p8.$$.fragment),adr=l(),S3e=a("p"),ndr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),sdr=l(),Ha=a("p"),ldr=o("The model class to instantiate is selected based on the "),R3e=a("code"),idr=o("model_type"),ddr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(":"),hdr=l(),I3e=a("ul"),YT=a("li"),N3e=a("strong"),pdr=o("detr"),_dr=o(" \u2014 "),xW=a("a"),udr=o("DetrForSegmentation"),bdr=o(" (DETR model)"),vdr=l(),KT=a("p"),Fdr=o("The model is set in evaluation mode by default using "),q3e=a("code"),Tdr=o("model.eval()"),Mdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j3e=a("code"),Edr=o("model.train()"),Cdr=l(),F(ZT.$$.fragment),vDe=l(),Nd=a("h2"),e7=a("a"),D3e=a("span"),F(_8.$$.fragment),wdr=l(),G3e=a("span"),Adr=o("AutoModelForSemanticSegmentation"),FDe=l(),Uo=a("div"),F(u8.$$.fragment),Ldr=l(),qd=a("p"),ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$W=a("a"),xdr=o("from_pretrained()"),$dr=o(" class method or the "),kW=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),b8=a("p"),Pdr=o("This class cannot be instantiated directly using "),O3e=a("code"),Bdr=o("__init__()"),Idr=o(" (throws an error)."),Ndr=l(),wt=a("div"),F(v8.$$.fragment),qdr=l(),V3e=a("p"),jdr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ddr=l(),jd=a("p"),Gdr=o(`Note:
Loading a model from its configuration file does `),X3e=a("strong"),Odr=o("not"),Vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),Xdr=o("from_pretrained()"),zdr=o(" to load the model weights."),Wdr=l(),F(o7.$$.fragment),Qdr=l(),bo=a("div"),F(F8.$$.fragment),Hdr=l(),z3e=a("p"),Udr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jdr=l(),Ua=a("p"),Ydr=o("The model class to instantiate is selected based on the "),W3e=a("code"),Kdr=o("model_type"),Zdr=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),rcr=o("pretrained_model_name_or_path"),tcr=o(":"),acr=l(),Ja=a("ul"),r7=a("li"),U3e=a("strong"),ncr=o("beit"),scr=o(" \u2014 "),RW=a("a"),lcr=o("BeitForSemanticSegmentation"),icr=o(" (BEiT model)"),dcr=l(),t7=a("li"),J3e=a("strong"),ccr=o("data2vec-vision"),fcr=o(" \u2014 "),PW=a("a"),mcr=o("Data2VecVisionForSemanticSegmentation"),gcr=o(" (Data2VecVision model)"),hcr=l(),a7=a("li"),Y3e=a("strong"),pcr=o("dpt"),_cr=o(" \u2014 "),BW=a("a"),ucr=o("DPTForSemanticSegmentation"),bcr=o(" (DPT model)"),vcr=l(),n7=a("li"),K3e=a("strong"),Fcr=o("segformer"),Tcr=o(" \u2014 "),IW=a("a"),Mcr=o("SegformerForSemanticSegmentation"),Ecr=o(" (SegFormer model)"),Ccr=l(),s7=a("p"),wcr=o("The model is set in evaluation mode by default using "),Z3e=a("code"),Acr=o("model.eval()"),Lcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=a("code"),ycr=o("model.train()"),xcr=l(),F(l7.$$.fragment),TDe=l(),Dd=a("h2"),i7=a("a"),obe=a("span"),F(T8.$$.fragment),$cr=l(),rbe=a("span"),kcr=o("AutoModelForInstanceSegmentation"),MDe=l(),Jo=a("div"),F(M8.$$.fragment),Scr=l(),Gd=a("p"),Rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),NW=a("a"),Pcr=o("from_pretrained()"),Bcr=o(" class method or the "),qW=a("a"),Icr=o("from_config()"),Ncr=o(` class
method.`),qcr=l(),E8=a("p"),jcr=o("This class cannot be instantiated directly using "),tbe=a("code"),Dcr=o("__init__()"),Gcr=o(" (throws an error)."),Ocr=l(),At=a("div"),F(C8.$$.fragment),Vcr=l(),abe=a("p"),Xcr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zcr=l(),Od=a("p"),Wcr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Qcr=o("not"),Hcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" to load the model weights."),Ycr=l(),F(d7.$$.fragment),Kcr=l(),vo=a("div"),F(w8.$$.fragment),Zcr=l(),sbe=a("p"),efr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ofr=l(),Ya=a("p"),rfr=o("The model class to instantiate is selected based on the "),lbe=a("code"),tfr=o("model_type"),afr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(":"),dfr=l(),cbe=a("ul"),c7=a("li"),fbe=a("strong"),cfr=o("maskformer"),ffr=o(" \u2014 "),DW=a("a"),mfr=o("MaskFormerForInstanceSegmentation"),gfr=o(" (MaskFormer model)"),hfr=l(),f7=a("p"),pfr=o("The model is set in evaluation mode by default using "),mbe=a("code"),_fr=o("model.eval()"),ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),bfr=o("model.train()"),vfr=l(),F(m7.$$.fragment),EDe=l(),Vd=a("h2"),g7=a("a"),hbe=a("span"),F(A8.$$.fragment),Ffr=l(),pbe=a("span"),Tfr=o("TFAutoModel"),CDe=l(),Yo=a("div"),F(L8.$$.fragment),Mfr=l(),Xd=a("p"),Efr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GW=a("a"),Cfr=o("from_pretrained()"),wfr=o(" class method or the "),OW=a("a"),Afr=o("from_config()"),Lfr=o(` class
method.`),yfr=l(),y8=a("p"),xfr=o("This class cannot be instantiated directly using "),_be=a("code"),$fr=o("__init__()"),kfr=o(" (throws an error)."),Sfr=l(),Lt=a("div"),F(x8.$$.fragment),Rfr=l(),ube=a("p"),Pfr=o("Instantiates one of the base model classes of the library from a configuration."),Bfr=l(),zd=a("p"),Ifr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),Nfr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),jfr=o("from_pretrained()"),Dfr=o(" to load the model weights."),Gfr=l(),F(h7.$$.fragment),Ofr=l(),wr=a("div"),F($8.$$.fragment),Vfr=l(),vbe=a("p"),Xfr=o("Instantiate one of the base model classes of the library from a pretrained model."),zfr=l(),Ka=a("p"),Wfr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),Qfr=o("model_type"),Hfr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),q=a("ul"),p7=a("li"),Ebe=a("strong"),emr=o("albert"),omr=o(" \u2014 "),XW=a("a"),rmr=o("TFAlbertModel"),tmr=o(" (ALBERT model)"),amr=l(),_7=a("li"),Cbe=a("strong"),nmr=o("bart"),smr=o(" \u2014 "),zW=a("a"),lmr=o("TFBartModel"),imr=o(" (BART model)"),dmr=l(),u7=a("li"),wbe=a("strong"),cmr=o("bert"),fmr=o(" \u2014 "),WW=a("a"),mmr=o("TFBertModel"),gmr=o(" (BERT model)"),hmr=l(),b7=a("li"),Abe=a("strong"),pmr=o("blenderbot"),_mr=o(" \u2014 "),QW=a("a"),umr=o("TFBlenderbotModel"),bmr=o(" (Blenderbot model)"),vmr=l(),v7=a("li"),Lbe=a("strong"),Fmr=o("blenderbot-small"),Tmr=o(" \u2014 "),HW=a("a"),Mmr=o("TFBlenderbotSmallModel"),Emr=o(" (BlenderbotSmall model)"),Cmr=l(),F7=a("li"),ybe=a("strong"),wmr=o("camembert"),Amr=o(" \u2014 "),UW=a("a"),Lmr=o("TFCamembertModel"),ymr=o(" (CamemBERT model)"),xmr=l(),T7=a("li"),xbe=a("strong"),$mr=o("clip"),kmr=o(" \u2014 "),JW=a("a"),Smr=o("TFCLIPModel"),Rmr=o(" (CLIP model)"),Pmr=l(),M7=a("li"),$be=a("strong"),Bmr=o("convbert"),Imr=o(" \u2014 "),YW=a("a"),Nmr=o("TFConvBertModel"),qmr=o(" (ConvBERT model)"),jmr=l(),E7=a("li"),kbe=a("strong"),Dmr=o("convnext"),Gmr=o(" \u2014 "),KW=a("a"),Omr=o("TFConvNextModel"),Vmr=o(" (ConvNeXT model)"),Xmr=l(),C7=a("li"),Sbe=a("strong"),zmr=o("ctrl"),Wmr=o(" \u2014 "),ZW=a("a"),Qmr=o("TFCTRLModel"),Hmr=o(" (CTRL model)"),Umr=l(),w7=a("li"),Rbe=a("strong"),Jmr=o("data2vec-vision"),Ymr=o(" \u2014 "),eQ=a("a"),Kmr=o("TFData2VecVisionModel"),Zmr=o(" (Data2VecVision model)"),egr=l(),A7=a("li"),Pbe=a("strong"),ogr=o("deberta"),rgr=o(" \u2014 "),oQ=a("a"),tgr=o("TFDebertaModel"),agr=o(" (DeBERTa model)"),ngr=l(),L7=a("li"),Bbe=a("strong"),sgr=o("deberta-v2"),lgr=o(" \u2014 "),rQ=a("a"),igr=o("TFDebertaV2Model"),dgr=o(" (DeBERTa-v2 model)"),cgr=l(),y7=a("li"),Ibe=a("strong"),fgr=o("distilbert"),mgr=o(" \u2014 "),tQ=a("a"),ggr=o("TFDistilBertModel"),hgr=o(" (DistilBERT model)"),pgr=l(),x7=a("li"),Nbe=a("strong"),_gr=o("dpr"),ugr=o(" \u2014 "),aQ=a("a"),bgr=o("TFDPRQuestionEncoder"),vgr=o(" (DPR model)"),Fgr=l(),$7=a("li"),qbe=a("strong"),Tgr=o("electra"),Mgr=o(" \u2014 "),nQ=a("a"),Egr=o("TFElectraModel"),Cgr=o(" (ELECTRA model)"),wgr=l(),k7=a("li"),jbe=a("strong"),Agr=o("flaubert"),Lgr=o(" \u2014 "),sQ=a("a"),ygr=o("TFFlaubertModel"),xgr=o(" (FlauBERT model)"),$gr=l(),qs=a("li"),Dbe=a("strong"),kgr=o("funnel"),Sgr=o(" \u2014 "),lQ=a("a"),Rgr=o("TFFunnelModel"),Pgr=o(" or "),iQ=a("a"),Bgr=o("TFFunnelBaseModel"),Igr=o(" (Funnel Transformer model)"),Ngr=l(),S7=a("li"),Gbe=a("strong"),qgr=o("gpt2"),jgr=o(" \u2014 "),dQ=a("a"),Dgr=o("TFGPT2Model"),Ggr=o(" (OpenAI GPT-2 model)"),Ogr=l(),R7=a("li"),Obe=a("strong"),Vgr=o("gptj"),Xgr=o(" \u2014 "),cQ=a("a"),zgr=o("TFGPTJModel"),Wgr=o(" (GPT-J model)"),Qgr=l(),P7=a("li"),Vbe=a("strong"),Hgr=o("hubert"),Ugr=o(" \u2014 "),fQ=a("a"),Jgr=o("TFHubertModel"),Ygr=o(" (Hubert model)"),Kgr=l(),B7=a("li"),Xbe=a("strong"),Zgr=o("layoutlm"),ehr=o(" \u2014 "),mQ=a("a"),ohr=o("TFLayoutLMModel"),rhr=o(" (LayoutLM model)"),thr=l(),I7=a("li"),zbe=a("strong"),ahr=o("led"),nhr=o(" \u2014 "),gQ=a("a"),shr=o("TFLEDModel"),lhr=o(" (LED model)"),ihr=l(),N7=a("li"),Wbe=a("strong"),dhr=o("longformer"),chr=o(" \u2014 "),hQ=a("a"),fhr=o("TFLongformerModel"),mhr=o(" (Longformer model)"),ghr=l(),q7=a("li"),Qbe=a("strong"),hhr=o("lxmert"),phr=o(" \u2014 "),pQ=a("a"),_hr=o("TFLxmertModel"),uhr=o(" (LXMERT model)"),bhr=l(),j7=a("li"),Hbe=a("strong"),vhr=o("marian"),Fhr=o(" \u2014 "),_Q=a("a"),Thr=o("TFMarianModel"),Mhr=o(" (Marian model)"),Ehr=l(),D7=a("li"),Ube=a("strong"),Chr=o("mbart"),whr=o(" \u2014 "),uQ=a("a"),Ahr=o("TFMBartModel"),Lhr=o(" (mBART model)"),yhr=l(),G7=a("li"),Jbe=a("strong"),xhr=o("mobilebert"),$hr=o(" \u2014 "),bQ=a("a"),khr=o("TFMobileBertModel"),Shr=o(" (MobileBERT model)"),Rhr=l(),O7=a("li"),Ybe=a("strong"),Phr=o("mpnet"),Bhr=o(" \u2014 "),vQ=a("a"),Ihr=o("TFMPNetModel"),Nhr=o(" (MPNet model)"),qhr=l(),V7=a("li"),Kbe=a("strong"),jhr=o("mt5"),Dhr=o(" \u2014 "),FQ=a("a"),Ghr=o("TFMT5Model"),Ohr=o(" (MT5 model)"),Vhr=l(),X7=a("li"),Zbe=a("strong"),Xhr=o("openai-gpt"),zhr=o(" \u2014 "),TQ=a("a"),Whr=o("TFOpenAIGPTModel"),Qhr=o(" (OpenAI GPT model)"),Hhr=l(),z7=a("li"),e2e=a("strong"),Uhr=o("opt"),Jhr=o(" \u2014 "),MQ=a("a"),Yhr=o("TFOPTModel"),Khr=o(" (OPT model)"),Zhr=l(),W7=a("li"),o2e=a("strong"),epr=o("pegasus"),opr=o(" \u2014 "),EQ=a("a"),rpr=o("TFPegasusModel"),tpr=o(" (Pegasus model)"),apr=l(),Q7=a("li"),r2e=a("strong"),npr=o("rembert"),spr=o(" \u2014 "),CQ=a("a"),lpr=o("TFRemBertModel"),ipr=o(" (RemBERT model)"),dpr=l(),H7=a("li"),t2e=a("strong"),cpr=o("roberta"),fpr=o(" \u2014 "),wQ=a("a"),mpr=o("TFRobertaModel"),gpr=o(" (RoBERTa model)"),hpr=l(),U7=a("li"),a2e=a("strong"),ppr=o("roformer"),_pr=o(" \u2014 "),AQ=a("a"),upr=o("TFRoFormerModel"),bpr=o(" (RoFormer model)"),vpr=l(),J7=a("li"),n2e=a("strong"),Fpr=o("speech_to_text"),Tpr=o(" \u2014 "),LQ=a("a"),Mpr=o("TFSpeech2TextModel"),Epr=o(" (Speech2Text model)"),Cpr=l(),Y7=a("li"),s2e=a("strong"),wpr=o("swin"),Apr=o(" \u2014 "),yQ=a("a"),Lpr=o("TFSwinModel"),ypr=o(" (Swin Transformer model)"),xpr=l(),K7=a("li"),l2e=a("strong"),$pr=o("t5"),kpr=o(" \u2014 "),xQ=a("a"),Spr=o("TFT5Model"),Rpr=o(" (T5 model)"),Ppr=l(),Z7=a("li"),i2e=a("strong"),Bpr=o("tapas"),Ipr=o(" \u2014 "),$Q=a("a"),Npr=o("TFTapasModel"),qpr=o(" (TAPAS model)"),jpr=l(),eM=a("li"),d2e=a("strong"),Dpr=o("transfo-xl"),Gpr=o(" \u2014 "),kQ=a("a"),Opr=o("TFTransfoXLModel"),Vpr=o(" (Transformer-XL model)"),Xpr=l(),oM=a("li"),c2e=a("strong"),zpr=o("vit"),Wpr=o(" \u2014 "),SQ=a("a"),Qpr=o("TFViTModel"),Hpr=o(" (ViT model)"),Upr=l(),rM=a("li"),f2e=a("strong"),Jpr=o("vit_mae"),Ypr=o(" \u2014 "),RQ=a("a"),Kpr=o("TFViTMAEModel"),Zpr=o(" (ViTMAE model)"),e_r=l(),tM=a("li"),m2e=a("strong"),o_r=o("wav2vec2"),r_r=o(" \u2014 "),PQ=a("a"),t_r=o("TFWav2Vec2Model"),a_r=o(" (Wav2Vec2 model)"),n_r=l(),aM=a("li"),g2e=a("strong"),s_r=o("xlm"),l_r=o(" \u2014 "),BQ=a("a"),i_r=o("TFXLMModel"),d_r=o(" (XLM model)"),c_r=l(),nM=a("li"),h2e=a("strong"),f_r=o("xlm-roberta"),m_r=o(" \u2014 "),IQ=a("a"),g_r=o("TFXLMRobertaModel"),h_r=o(" (XLM-RoBERTa model)"),p_r=l(),sM=a("li"),p2e=a("strong"),__r=o("xlnet"),u_r=o(" \u2014 "),NQ=a("a"),b_r=o("TFXLNetModel"),v_r=o(" (XLNet model)"),F_r=l(),F(lM.$$.fragment),wDe=l(),Wd=a("h2"),iM=a("a"),_2e=a("span"),F(k8.$$.fragment),T_r=l(),u2e=a("span"),M_r=o("TFAutoModelForPreTraining"),ADe=l(),Ko=a("div"),F(S8.$$.fragment),E_r=l(),Qd=a("p"),C_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qQ=a("a"),w_r=o("from_pretrained()"),A_r=o(" class method or the "),jQ=a("a"),L_r=o("from_config()"),y_r=o(` class
method.`),x_r=l(),R8=a("p"),$_r=o("This class cannot be instantiated directly using "),b2e=a("code"),k_r=o("__init__()"),S_r=o(" (throws an error)."),R_r=l(),yt=a("div"),F(P8.$$.fragment),P_r=l(),v2e=a("p"),B_r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),I_r=l(),Hd=a("p"),N_r=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),q_r=o("not"),j_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" to load the model weights."),O_r=l(),F(dM.$$.fragment),V_r=l(),Ar=a("div"),F(B8.$$.fragment),X_r=l(),T2e=a("p"),z_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W_r=l(),Za=a("p"),Q_r=o("The model class to instantiate is selected based on the "),M2e=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),eur=l(),se=a("ul"),cM=a("li"),w2e=a("strong"),our=o("albert"),rur=o(" \u2014 "),GQ=a("a"),tur=o("TFAlbertForPreTraining"),aur=o(" (ALBERT model)"),nur=l(),fM=a("li"),A2e=a("strong"),sur=o("bart"),lur=o(" \u2014 "),OQ=a("a"),iur=o("TFBartForConditionalGeneration"),dur=o(" (BART model)"),cur=l(),mM=a("li"),L2e=a("strong"),fur=o("bert"),mur=o(" \u2014 "),VQ=a("a"),gur=o("TFBertForPreTraining"),hur=o(" (BERT model)"),pur=l(),gM=a("li"),y2e=a("strong"),_ur=o("camembert"),uur=o(" \u2014 "),XQ=a("a"),bur=o("TFCamembertForMaskedLM"),vur=o(" (CamemBERT model)"),Fur=l(),hM=a("li"),x2e=a("strong"),Tur=o("ctrl"),Mur=o(" \u2014 "),zQ=a("a"),Eur=o("TFCTRLLMHeadModel"),Cur=o(" (CTRL model)"),wur=l(),pM=a("li"),$2e=a("strong"),Aur=o("distilbert"),Lur=o(" \u2014 "),WQ=a("a"),yur=o("TFDistilBertForMaskedLM"),xur=o(" (DistilBERT model)"),$ur=l(),_M=a("li"),k2e=a("strong"),kur=o("electra"),Sur=o(" \u2014 "),QQ=a("a"),Rur=o("TFElectraForPreTraining"),Pur=o(" (ELECTRA model)"),Bur=l(),uM=a("li"),S2e=a("strong"),Iur=o("flaubert"),Nur=o(" \u2014 "),HQ=a("a"),qur=o("TFFlaubertWithLMHeadModel"),jur=o(" (FlauBERT model)"),Dur=l(),bM=a("li"),R2e=a("strong"),Gur=o("funnel"),Our=o(" \u2014 "),UQ=a("a"),Vur=o("TFFunnelForPreTraining"),Xur=o(" (Funnel Transformer model)"),zur=l(),vM=a("li"),P2e=a("strong"),Wur=o("gpt2"),Qur=o(" \u2014 "),JQ=a("a"),Hur=o("TFGPT2LMHeadModel"),Uur=o(" (OpenAI GPT-2 model)"),Jur=l(),FM=a("li"),B2e=a("strong"),Yur=o("layoutlm"),Kur=o(" \u2014 "),YQ=a("a"),Zur=o("TFLayoutLMForMaskedLM"),e1r=o(" (LayoutLM model)"),o1r=l(),TM=a("li"),I2e=a("strong"),r1r=o("lxmert"),t1r=o(" \u2014 "),KQ=a("a"),a1r=o("TFLxmertForPreTraining"),n1r=o(" (LXMERT model)"),s1r=l(),MM=a("li"),N2e=a("strong"),l1r=o("mobilebert"),i1r=o(" \u2014 "),ZQ=a("a"),d1r=o("TFMobileBertForPreTraining"),c1r=o(" (MobileBERT model)"),f1r=l(),EM=a("li"),q2e=a("strong"),m1r=o("mpnet"),g1r=o(" \u2014 "),eH=a("a"),h1r=o("TFMPNetForMaskedLM"),p1r=o(" (MPNet model)"),_1r=l(),CM=a("li"),j2e=a("strong"),u1r=o("openai-gpt"),b1r=o(" \u2014 "),oH=a("a"),v1r=o("TFOpenAIGPTLMHeadModel"),F1r=o(" (OpenAI GPT model)"),T1r=l(),wM=a("li"),D2e=a("strong"),M1r=o("roberta"),E1r=o(" \u2014 "),rH=a("a"),C1r=o("TFRobertaForMaskedLM"),w1r=o(" (RoBERTa model)"),A1r=l(),AM=a("li"),G2e=a("strong"),L1r=o("t5"),y1r=o(" \u2014 "),tH=a("a"),x1r=o("TFT5ForConditionalGeneration"),$1r=o(" (T5 model)"),k1r=l(),LM=a("li"),O2e=a("strong"),S1r=o("tapas"),R1r=o(" \u2014 "),aH=a("a"),P1r=o("TFTapasForMaskedLM"),B1r=o(" (TAPAS model)"),I1r=l(),yM=a("li"),V2e=a("strong"),N1r=o("transfo-xl"),q1r=o(" \u2014 "),nH=a("a"),j1r=o("TFTransfoXLLMHeadModel"),D1r=o(" (Transformer-XL model)"),G1r=l(),xM=a("li"),X2e=a("strong"),O1r=o("vit_mae"),V1r=o(" \u2014 "),sH=a("a"),X1r=o("TFViTMAEForPreTraining"),z1r=o(" (ViTMAE model)"),W1r=l(),$M=a("li"),z2e=a("strong"),Q1r=o("xlm"),H1r=o(" \u2014 "),lH=a("a"),U1r=o("TFXLMWithLMHeadModel"),J1r=o(" (XLM model)"),Y1r=l(),kM=a("li"),W2e=a("strong"),K1r=o("xlm-roberta"),Z1r=o(" \u2014 "),iH=a("a"),e3r=o("TFXLMRobertaForMaskedLM"),o3r=o(" (XLM-RoBERTa model)"),r3r=l(),SM=a("li"),Q2e=a("strong"),t3r=o("xlnet"),a3r=o(" \u2014 "),dH=a("a"),n3r=o("TFXLNetLMHeadModel"),s3r=o(" (XLNet model)"),l3r=l(),F(RM.$$.fragment),LDe=l(),Ud=a("h2"),PM=a("a"),H2e=a("span"),F(I8.$$.fragment),i3r=l(),U2e=a("span"),d3r=o("TFAutoModelForCausalLM"),yDe=l(),Zo=a("div"),F(N8.$$.fragment),c3r=l(),Jd=a("p"),f3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cH=a("a"),m3r=o("from_pretrained()"),g3r=o(" class method or the "),fH=a("a"),h3r=o("from_config()"),p3r=o(` class
method.`),_3r=l(),q8=a("p"),u3r=o("This class cannot be instantiated directly using "),J2e=a("code"),b3r=o("__init__()"),v3r=o(" (throws an error)."),F3r=l(),xt=a("div"),F(j8.$$.fragment),T3r=l(),Y2e=a("p"),M3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E3r=l(),Yd=a("p"),C3r=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),w3r=o("not"),A3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),L3r=o("from_pretrained()"),y3r=o(" to load the model weights."),x3r=l(),F(BM.$$.fragment),$3r=l(),Lr=a("div"),F(D8.$$.fragment),k3r=l(),Z2e=a("p"),S3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R3r=l(),en=a("p"),P3r=o("The model class to instantiate is selected based on the "),eve=a("code"),B3r=o("model_type"),I3r=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),N3r=o("pretrained_model_name_or_path"),q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),j3r=o("pretrained_model_name_or_path"),D3r=o(":"),G3r=l(),Me=a("ul"),IM=a("li"),tve=a("strong"),O3r=o("bert"),V3r=o(" \u2014 "),gH=a("a"),X3r=o("TFBertLMHeadModel"),z3r=o(" (BERT model)"),W3r=l(),NM=a("li"),ave=a("strong"),Q3r=o("camembert"),H3r=o(" \u2014 "),hH=a("a"),U3r=o("TFCamembertForCausalLM"),J3r=o(" (CamemBERT model)"),Y3r=l(),qM=a("li"),nve=a("strong"),K3r=o("ctrl"),Z3r=o(" \u2014 "),pH=a("a"),ebr=o("TFCTRLLMHeadModel"),obr=o(" (CTRL model)"),rbr=l(),jM=a("li"),sve=a("strong"),tbr=o("gpt2"),abr=o(" \u2014 "),_H=a("a"),nbr=o("TFGPT2LMHeadModel"),sbr=o(" (OpenAI GPT-2 model)"),lbr=l(),DM=a("li"),lve=a("strong"),ibr=o("gptj"),dbr=o(" \u2014 "),uH=a("a"),cbr=o("TFGPTJForCausalLM"),fbr=o(" (GPT-J model)"),mbr=l(),GM=a("li"),ive=a("strong"),gbr=o("openai-gpt"),hbr=o(" \u2014 "),bH=a("a"),pbr=o("TFOpenAIGPTLMHeadModel"),_br=o(" (OpenAI GPT model)"),ubr=l(),OM=a("li"),dve=a("strong"),bbr=o("opt"),vbr=o(" \u2014 "),vH=a("a"),Fbr=o("TFOPTForCausalLM"),Tbr=o(" (OPT model)"),Mbr=l(),VM=a("li"),cve=a("strong"),Ebr=o("rembert"),Cbr=o(" \u2014 "),FH=a("a"),wbr=o("TFRemBertForCausalLM"),Abr=o(" (RemBERT model)"),Lbr=l(),XM=a("li"),fve=a("strong"),ybr=o("roberta"),xbr=o(" \u2014 "),TH=a("a"),$br=o("TFRobertaForCausalLM"),kbr=o(" (RoBERTa model)"),Sbr=l(),zM=a("li"),mve=a("strong"),Rbr=o("roformer"),Pbr=o(" \u2014 "),MH=a("a"),Bbr=o("TFRoFormerForCausalLM"),Ibr=o(" (RoFormer model)"),Nbr=l(),WM=a("li"),gve=a("strong"),qbr=o("transfo-xl"),jbr=o(" \u2014 "),EH=a("a"),Dbr=o("TFTransfoXLLMHeadModel"),Gbr=o(" (Transformer-XL model)"),Obr=l(),QM=a("li"),hve=a("strong"),Vbr=o("xlm"),Xbr=o(" \u2014 "),CH=a("a"),zbr=o("TFXLMWithLMHeadModel"),Wbr=o(" (XLM model)"),Qbr=l(),HM=a("li"),pve=a("strong"),Hbr=o("xlnet"),Ubr=o(" \u2014 "),wH=a("a"),Jbr=o("TFXLNetLMHeadModel"),Ybr=o(" (XLNet model)"),Kbr=l(),F(UM.$$.fragment),xDe=l(),Kd=a("h2"),JM=a("a"),_ve=a("span"),F(G8.$$.fragment),Zbr=l(),uve=a("span"),e2r=o("TFAutoModelForImageClassification"),$De=l(),er=a("div"),F(O8.$$.fragment),o2r=l(),Zd=a("p"),r2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AH=a("a"),t2r=o("from_pretrained()"),a2r=o(" class method or the "),LH=a("a"),n2r=o("from_config()"),s2r=o(` class
method.`),l2r=l(),V8=a("p"),i2r=o("This class cannot be instantiated directly using "),bve=a("code"),d2r=o("__init__()"),c2r=o(" (throws an error)."),f2r=l(),$t=a("div"),F(X8.$$.fragment),m2r=l(),vve=a("p"),g2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h2r=l(),ec=a("p"),p2r=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),_2r=o("not"),u2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),b2r=o("from_pretrained()"),v2r=o(" to load the model weights."),F2r=l(),F(YM.$$.fragment),T2r=l(),yr=a("div"),F(z8.$$.fragment),M2r=l(),Tve=a("p"),E2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),C2r=l(),on=a("p"),w2r=o("The model class to instantiate is selected based on the "),Mve=a("code"),A2r=o("model_type"),L2r=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),y2r=o("pretrained_model_name_or_path"),x2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),$2r=o("pretrained_model_name_or_path"),k2r=o(":"),S2r=l(),rn=a("ul"),KM=a("li"),wve=a("strong"),R2r=o("convnext"),P2r=o(" \u2014 "),xH=a("a"),B2r=o("TFConvNextForImageClassification"),I2r=o(" (ConvNeXT model)"),N2r=l(),ZM=a("li"),Ave=a("strong"),q2r=o("data2vec-vision"),j2r=o(" \u2014 "),$H=a("a"),D2r=o("TFData2VecVisionForImageClassification"),G2r=o(" (Data2VecVision model)"),O2r=l(),e4=a("li"),Lve=a("strong"),V2r=o("swin"),X2r=o(" \u2014 "),kH=a("a"),z2r=o("TFSwinForImageClassification"),W2r=o(" (Swin Transformer model)"),Q2r=l(),o4=a("li"),yve=a("strong"),H2r=o("vit"),U2r=o(" \u2014 "),SH=a("a"),J2r=o("TFViTForImageClassification"),Y2r=o(" (ViT model)"),K2r=l(),F(r4.$$.fragment),kDe=l(),oc=a("h2"),t4=a("a"),xve=a("span"),F(W8.$$.fragment),Z2r=l(),$ve=a("span"),evr=o("TFAutoModelForMaskedLM"),SDe=l(),or=a("div"),F(Q8.$$.fragment),ovr=l(),rc=a("p"),rvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RH=a("a"),tvr=o("from_pretrained()"),avr=o(" class method or the "),PH=a("a"),nvr=o("from_config()"),svr=o(` class
method.`),lvr=l(),H8=a("p"),ivr=o("This class cannot be instantiated directly using "),kve=a("code"),dvr=o("__init__()"),cvr=o(" (throws an error)."),fvr=l(),kt=a("div"),F(U8.$$.fragment),mvr=l(),Sve=a("p"),gvr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hvr=l(),tc=a("p"),pvr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),_vr=o("not"),uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),bvr=o("from_pretrained()"),vvr=o(" to load the model weights."),Fvr=l(),F(a4.$$.fragment),Tvr=l(),xr=a("div"),F(J8.$$.fragment),Mvr=l(),Pve=a("p"),Evr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cvr=l(),tn=a("p"),wvr=o("The model class to instantiate is selected based on the "),Bve=a("code"),Avr=o("model_type"),Lvr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),yvr=o("pretrained_model_name_or_path"),xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),$vr=o("pretrained_model_name_or_path"),kvr=o(":"),Svr=l(),ie=a("ul"),n4=a("li"),qve=a("strong"),Rvr=o("albert"),Pvr=o(" \u2014 "),IH=a("a"),Bvr=o("TFAlbertForMaskedLM"),Ivr=o(" (ALBERT model)"),Nvr=l(),s4=a("li"),jve=a("strong"),qvr=o("bert"),jvr=o(" \u2014 "),NH=a("a"),Dvr=o("TFBertForMaskedLM"),Gvr=o(" (BERT model)"),Ovr=l(),l4=a("li"),Dve=a("strong"),Vvr=o("camembert"),Xvr=o(" \u2014 "),qH=a("a"),zvr=o("TFCamembertForMaskedLM"),Wvr=o(" (CamemBERT model)"),Qvr=l(),i4=a("li"),Gve=a("strong"),Hvr=o("convbert"),Uvr=o(" \u2014 "),jH=a("a"),Jvr=o("TFConvBertForMaskedLM"),Yvr=o(" (ConvBERT model)"),Kvr=l(),d4=a("li"),Ove=a("strong"),Zvr=o("deberta"),eFr=o(" \u2014 "),DH=a("a"),oFr=o("TFDebertaForMaskedLM"),rFr=o(" (DeBERTa model)"),tFr=l(),c4=a("li"),Vve=a("strong"),aFr=o("deberta-v2"),nFr=o(" \u2014 "),GH=a("a"),sFr=o("TFDebertaV2ForMaskedLM"),lFr=o(" (DeBERTa-v2 model)"),iFr=l(),f4=a("li"),Xve=a("strong"),dFr=o("distilbert"),cFr=o(" \u2014 "),OH=a("a"),fFr=o("TFDistilBertForMaskedLM"),mFr=o(" (DistilBERT model)"),gFr=l(),m4=a("li"),zve=a("strong"),hFr=o("electra"),pFr=o(" \u2014 "),VH=a("a"),_Fr=o("TFElectraForMaskedLM"),uFr=o(" (ELECTRA model)"),bFr=l(),g4=a("li"),Wve=a("strong"),vFr=o("flaubert"),FFr=o(" \u2014 "),XH=a("a"),TFr=o("TFFlaubertWithLMHeadModel"),MFr=o(" (FlauBERT model)"),EFr=l(),h4=a("li"),Qve=a("strong"),CFr=o("funnel"),wFr=o(" \u2014 "),zH=a("a"),AFr=o("TFFunnelForMaskedLM"),LFr=o(" (Funnel Transformer model)"),yFr=l(),p4=a("li"),Hve=a("strong"),xFr=o("layoutlm"),$Fr=o(" \u2014 "),WH=a("a"),kFr=o("TFLayoutLMForMaskedLM"),SFr=o(" (LayoutLM model)"),RFr=l(),_4=a("li"),Uve=a("strong"),PFr=o("longformer"),BFr=o(" \u2014 "),QH=a("a"),IFr=o("TFLongformerForMaskedLM"),NFr=o(" (Longformer model)"),qFr=l(),u4=a("li"),Jve=a("strong"),jFr=o("mobilebert"),DFr=o(" \u2014 "),HH=a("a"),GFr=o("TFMobileBertForMaskedLM"),OFr=o(" (MobileBERT model)"),VFr=l(),b4=a("li"),Yve=a("strong"),XFr=o("mpnet"),zFr=o(" \u2014 "),UH=a("a"),WFr=o("TFMPNetForMaskedLM"),QFr=o(" (MPNet model)"),HFr=l(),v4=a("li"),Kve=a("strong"),UFr=o("rembert"),JFr=o(" \u2014 "),JH=a("a"),YFr=o("TFRemBertForMaskedLM"),KFr=o(" (RemBERT model)"),ZFr=l(),F4=a("li"),Zve=a("strong"),eTr=o("roberta"),oTr=o(" \u2014 "),YH=a("a"),rTr=o("TFRobertaForMaskedLM"),tTr=o(" (RoBERTa model)"),aTr=l(),T4=a("li"),eFe=a("strong"),nTr=o("roformer"),sTr=o(" \u2014 "),KH=a("a"),lTr=o("TFRoFormerForMaskedLM"),iTr=o(" (RoFormer model)"),dTr=l(),M4=a("li"),oFe=a("strong"),cTr=o("tapas"),fTr=o(" \u2014 "),ZH=a("a"),mTr=o("TFTapasForMaskedLM"),gTr=o(" (TAPAS model)"),hTr=l(),E4=a("li"),rFe=a("strong"),pTr=o("xlm"),_Tr=o(" \u2014 "),eU=a("a"),uTr=o("TFXLMWithLMHeadModel"),bTr=o(" (XLM model)"),vTr=l(),C4=a("li"),tFe=a("strong"),FTr=o("xlm-roberta"),TTr=o(" \u2014 "),oU=a("a"),MTr=o("TFXLMRobertaForMaskedLM"),ETr=o(" (XLM-RoBERTa model)"),CTr=l(),F(w4.$$.fragment),RDe=l(),ac=a("h2"),A4=a("a"),aFe=a("span"),F(Y8.$$.fragment),wTr=l(),nFe=a("span"),ATr=o("TFAutoModelForSeq2SeqLM"),PDe=l(),rr=a("div"),F(K8.$$.fragment),LTr=l(),nc=a("p"),yTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rU=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),tU=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),Z8=a("p"),PTr=o("This class cannot be instantiated directly using "),sFe=a("code"),BTr=o("__init__()"),ITr=o(" (throws an error)."),NTr=l(),St=a("div"),F(e9.$$.fragment),qTr=l(),lFe=a("p"),jTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DTr=l(),sc=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),WTr=l(),F(L4.$$.fragment),QTr=l(),$r=a("div"),F(o9.$$.fragment),HTr=l(),dFe=a("p"),UTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JTr=l(),an=a("p"),YTr=o("The model class to instantiate is selected based on the "),cFe=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(":"),a7r=l(),ye=a("ul"),y4=a("li"),gFe=a("strong"),n7r=o("bart"),s7r=o(" \u2014 "),nU=a("a"),l7r=o("TFBartForConditionalGeneration"),i7r=o(" (BART model)"),d7r=l(),x4=a("li"),hFe=a("strong"),c7r=o("blenderbot"),f7r=o(" \u2014 "),sU=a("a"),m7r=o("TFBlenderbotForConditionalGeneration"),g7r=o(" (Blenderbot model)"),h7r=l(),$4=a("li"),pFe=a("strong"),p7r=o("blenderbot-small"),_7r=o(" \u2014 "),lU=a("a"),u7r=o("TFBlenderbotSmallForConditionalGeneration"),b7r=o(" (BlenderbotSmall model)"),v7r=l(),k4=a("li"),_Fe=a("strong"),F7r=o("encoder-decoder"),T7r=o(" \u2014 "),iU=a("a"),M7r=o("TFEncoderDecoderModel"),E7r=o(" (Encoder decoder model)"),C7r=l(),S4=a("li"),uFe=a("strong"),w7r=o("led"),A7r=o(" \u2014 "),dU=a("a"),L7r=o("TFLEDForConditionalGeneration"),y7r=o(" (LED model)"),x7r=l(),R4=a("li"),bFe=a("strong"),$7r=o("marian"),k7r=o(" \u2014 "),cU=a("a"),S7r=o("TFMarianMTModel"),R7r=o(" (Marian model)"),P7r=l(),P4=a("li"),vFe=a("strong"),B7r=o("mbart"),I7r=o(" \u2014 "),fU=a("a"),N7r=o("TFMBartForConditionalGeneration"),q7r=o(" (mBART model)"),j7r=l(),B4=a("li"),FFe=a("strong"),D7r=o("mt5"),G7r=o(" \u2014 "),mU=a("a"),O7r=o("TFMT5ForConditionalGeneration"),V7r=o(" (MT5 model)"),X7r=l(),I4=a("li"),TFe=a("strong"),z7r=o("pegasus"),W7r=o(" \u2014 "),gU=a("a"),Q7r=o("TFPegasusForConditionalGeneration"),H7r=o(" (Pegasus model)"),U7r=l(),N4=a("li"),MFe=a("strong"),J7r=o("t5"),Y7r=o(" \u2014 "),hU=a("a"),K7r=o("TFT5ForConditionalGeneration"),Z7r=o(" (T5 model)"),eMr=l(),F(q4.$$.fragment),BDe=l(),lc=a("h2"),j4=a("a"),EFe=a("span"),F(r9.$$.fragment),oMr=l(),CFe=a("span"),rMr=o("TFAutoModelForSequenceClassification"),IDe=l(),tr=a("div"),F(t9.$$.fragment),tMr=l(),ic=a("p"),aMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pU=a("a"),nMr=o("from_pretrained()"),sMr=o(" class method or the "),_U=a("a"),lMr=o("from_config()"),iMr=o(` class
method.`),dMr=l(),a9=a("p"),cMr=o("This class cannot be instantiated directly using "),wFe=a("code"),fMr=o("__init__()"),mMr=o(" (throws an error)."),gMr=l(),Rt=a("div"),F(n9.$$.fragment),hMr=l(),AFe=a("p"),pMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Mr=l(),dc=a("p"),uMr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),bMr=o("not"),vMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),FMr=o("from_pretrained()"),TMr=o(" to load the model weights."),MMr=l(),F(D4.$$.fragment),EMr=l(),kr=a("div"),F(s9.$$.fragment),CMr=l(),yFe=a("p"),wMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),AMr=l(),nn=a("p"),LMr=o("The model class to instantiate is selected based on the "),xFe=a("code"),yMr=o("model_type"),xMr=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),$Mr=o("pretrained_model_name_or_path"),kMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),SMr=o("pretrained_model_name_or_path"),RMr=o(":"),PMr=l(),oe=a("ul"),G4=a("li"),SFe=a("strong"),BMr=o("albert"),IMr=o(" \u2014 "),bU=a("a"),NMr=o("TFAlbertForSequenceClassification"),qMr=o(" (ALBERT model)"),jMr=l(),O4=a("li"),RFe=a("strong"),DMr=o("bert"),GMr=o(" \u2014 "),vU=a("a"),OMr=o("TFBertForSequenceClassification"),VMr=o(" (BERT model)"),XMr=l(),V4=a("li"),PFe=a("strong"),zMr=o("camembert"),WMr=o(" \u2014 "),FU=a("a"),QMr=o("TFCamembertForSequenceClassification"),HMr=o(" (CamemBERT model)"),UMr=l(),X4=a("li"),BFe=a("strong"),JMr=o("convbert"),YMr=o(" \u2014 "),TU=a("a"),KMr=o("TFConvBertForSequenceClassification"),ZMr=o(" (ConvBERT model)"),e4r=l(),z4=a("li"),IFe=a("strong"),o4r=o("ctrl"),r4r=o(" \u2014 "),MU=a("a"),t4r=o("TFCTRLForSequenceClassification"),a4r=o(" (CTRL model)"),n4r=l(),W4=a("li"),NFe=a("strong"),s4r=o("deberta"),l4r=o(" \u2014 "),EU=a("a"),i4r=o("TFDebertaForSequenceClassification"),d4r=o(" (DeBERTa model)"),c4r=l(),Q4=a("li"),qFe=a("strong"),f4r=o("deberta-v2"),m4r=o(" \u2014 "),CU=a("a"),g4r=o("TFDebertaV2ForSequenceClassification"),h4r=o(" (DeBERTa-v2 model)"),p4r=l(),H4=a("li"),jFe=a("strong"),_4r=o("distilbert"),u4r=o(" \u2014 "),wU=a("a"),b4r=o("TFDistilBertForSequenceClassification"),v4r=o(" (DistilBERT model)"),F4r=l(),U4=a("li"),DFe=a("strong"),T4r=o("electra"),M4r=o(" \u2014 "),AU=a("a"),E4r=o("TFElectraForSequenceClassification"),C4r=o(" (ELECTRA model)"),w4r=l(),J4=a("li"),GFe=a("strong"),A4r=o("flaubert"),L4r=o(" \u2014 "),LU=a("a"),y4r=o("TFFlaubertForSequenceClassification"),x4r=o(" (FlauBERT model)"),$4r=l(),Y4=a("li"),OFe=a("strong"),k4r=o("funnel"),S4r=o(" \u2014 "),yU=a("a"),R4r=o("TFFunnelForSequenceClassification"),P4r=o(" (Funnel Transformer model)"),B4r=l(),K4=a("li"),VFe=a("strong"),I4r=o("gpt2"),N4r=o(" \u2014 "),xU=a("a"),q4r=o("TFGPT2ForSequenceClassification"),j4r=o(" (OpenAI GPT-2 model)"),D4r=l(),Z4=a("li"),XFe=a("strong"),G4r=o("gptj"),O4r=o(" \u2014 "),$U=a("a"),V4r=o("TFGPTJForSequenceClassification"),X4r=o(" (GPT-J model)"),z4r=l(),eE=a("li"),zFe=a("strong"),W4r=o("layoutlm"),Q4r=o(" \u2014 "),kU=a("a"),H4r=o("TFLayoutLMForSequenceClassification"),U4r=o(" (LayoutLM model)"),J4r=l(),oE=a("li"),WFe=a("strong"),Y4r=o("longformer"),K4r=o(" \u2014 "),SU=a("a"),Z4r=o("TFLongformerForSequenceClassification"),eEr=o(" (Longformer model)"),oEr=l(),rE=a("li"),QFe=a("strong"),rEr=o("mobilebert"),tEr=o(" \u2014 "),RU=a("a"),aEr=o("TFMobileBertForSequenceClassification"),nEr=o(" (MobileBERT model)"),sEr=l(),tE=a("li"),HFe=a("strong"),lEr=o("mpnet"),iEr=o(" \u2014 "),PU=a("a"),dEr=o("TFMPNetForSequenceClassification"),cEr=o(" (MPNet model)"),fEr=l(),aE=a("li"),UFe=a("strong"),mEr=o("openai-gpt"),gEr=o(" \u2014 "),BU=a("a"),hEr=o("TFOpenAIGPTForSequenceClassification"),pEr=o(" (OpenAI GPT model)"),_Er=l(),nE=a("li"),JFe=a("strong"),uEr=o("rembert"),bEr=o(" \u2014 "),IU=a("a"),vEr=o("TFRemBertForSequenceClassification"),FEr=o(" (RemBERT model)"),TEr=l(),sE=a("li"),YFe=a("strong"),MEr=o("roberta"),EEr=o(" \u2014 "),NU=a("a"),CEr=o("TFRobertaForSequenceClassification"),wEr=o(" (RoBERTa model)"),AEr=l(),lE=a("li"),KFe=a("strong"),LEr=o("roformer"),yEr=o(" \u2014 "),qU=a("a"),xEr=o("TFRoFormerForSequenceClassification"),$Er=o(" (RoFormer model)"),kEr=l(),iE=a("li"),ZFe=a("strong"),SEr=o("tapas"),REr=o(" \u2014 "),jU=a("a"),PEr=o("TFTapasForSequenceClassification"),BEr=o(" (TAPAS model)"),IEr=l(),dE=a("li"),eTe=a("strong"),NEr=o("transfo-xl"),qEr=o(" \u2014 "),DU=a("a"),jEr=o("TFTransfoXLForSequenceClassification"),DEr=o(" (Transformer-XL model)"),GEr=l(),cE=a("li"),oTe=a("strong"),OEr=o("xlm"),VEr=o(" \u2014 "),GU=a("a"),XEr=o("TFXLMForSequenceClassification"),zEr=o(" (XLM model)"),WEr=l(),fE=a("li"),rTe=a("strong"),QEr=o("xlm-roberta"),HEr=o(" \u2014 "),OU=a("a"),UEr=o("TFXLMRobertaForSequenceClassification"),JEr=o(" (XLM-RoBERTa model)"),YEr=l(),mE=a("li"),tTe=a("strong"),KEr=o("xlnet"),ZEr=o(" \u2014 "),VU=a("a"),eCr=o("TFXLNetForSequenceClassification"),oCr=o(" (XLNet model)"),rCr=l(),F(gE.$$.fragment),NDe=l(),cc=a("h2"),hE=a("a"),aTe=a("span"),F(l9.$$.fragment),tCr=l(),nTe=a("span"),aCr=o("TFAutoModelForMultipleChoice"),qDe=l(),ar=a("div"),F(i9.$$.fragment),nCr=l(),fc=a("p"),sCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XU=a("a"),lCr=o("from_pretrained()"),iCr=o(" class method or the "),zU=a("a"),dCr=o("from_config()"),cCr=o(` class
method.`),fCr=l(),d9=a("p"),mCr=o("This class cannot be instantiated directly using "),sTe=a("code"),gCr=o("__init__()"),hCr=o(" (throws an error)."),pCr=l(),Pt=a("div"),F(c9.$$.fragment),_Cr=l(),lTe=a("p"),uCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bCr=l(),mc=a("p"),vCr=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),FCr=o("not"),TCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),MCr=o("from_pretrained()"),ECr=o(" to load the model weights."),CCr=l(),F(pE.$$.fragment),wCr=l(),Sr=a("div"),F(f9.$$.fragment),ACr=l(),dTe=a("p"),LCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yCr=l(),sn=a("p"),xCr=o("The model class to instantiate is selected based on the "),cTe=a("code"),$Cr=o("model_type"),kCr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),SCr=o("pretrained_model_name_or_path"),RCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),PCr=o("pretrained_model_name_or_path"),BCr=o(":"),ICr=l(),pe=a("ul"),_E=a("li"),gTe=a("strong"),NCr=o("albert"),qCr=o(" \u2014 "),QU=a("a"),jCr=o("TFAlbertForMultipleChoice"),DCr=o(" (ALBERT model)"),GCr=l(),uE=a("li"),hTe=a("strong"),OCr=o("bert"),VCr=o(" \u2014 "),HU=a("a"),XCr=o("TFBertForMultipleChoice"),zCr=o(" (BERT model)"),WCr=l(),bE=a("li"),pTe=a("strong"),QCr=o("camembert"),HCr=o(" \u2014 "),UU=a("a"),UCr=o("TFCamembertForMultipleChoice"),JCr=o(" (CamemBERT model)"),YCr=l(),vE=a("li"),_Te=a("strong"),KCr=o("convbert"),ZCr=o(" \u2014 "),JU=a("a"),e5r=o("TFConvBertForMultipleChoice"),o5r=o(" (ConvBERT model)"),r5r=l(),FE=a("li"),uTe=a("strong"),t5r=o("distilbert"),a5r=o(" \u2014 "),YU=a("a"),n5r=o("TFDistilBertForMultipleChoice"),s5r=o(" (DistilBERT model)"),l5r=l(),TE=a("li"),bTe=a("strong"),i5r=o("electra"),d5r=o(" \u2014 "),KU=a("a"),c5r=o("TFElectraForMultipleChoice"),f5r=o(" (ELECTRA model)"),m5r=l(),ME=a("li"),vTe=a("strong"),g5r=o("flaubert"),h5r=o(" \u2014 "),ZU=a("a"),p5r=o("TFFlaubertForMultipleChoice"),_5r=o(" (FlauBERT model)"),u5r=l(),EE=a("li"),FTe=a("strong"),b5r=o("funnel"),v5r=o(" \u2014 "),eJ=a("a"),F5r=o("TFFunnelForMultipleChoice"),T5r=o(" (Funnel Transformer model)"),M5r=l(),CE=a("li"),TTe=a("strong"),E5r=o("longformer"),C5r=o(" \u2014 "),oJ=a("a"),w5r=o("TFLongformerForMultipleChoice"),A5r=o(" (Longformer model)"),L5r=l(),wE=a("li"),MTe=a("strong"),y5r=o("mobilebert"),x5r=o(" \u2014 "),rJ=a("a"),$5r=o("TFMobileBertForMultipleChoice"),k5r=o(" (MobileBERT model)"),S5r=l(),AE=a("li"),ETe=a("strong"),R5r=o("mpnet"),P5r=o(" \u2014 "),tJ=a("a"),B5r=o("TFMPNetForMultipleChoice"),I5r=o(" (MPNet model)"),N5r=l(),LE=a("li"),CTe=a("strong"),q5r=o("rembert"),j5r=o(" \u2014 "),aJ=a("a"),D5r=o("TFRemBertForMultipleChoice"),G5r=o(" (RemBERT model)"),O5r=l(),yE=a("li"),wTe=a("strong"),V5r=o("roberta"),X5r=o(" \u2014 "),nJ=a("a"),z5r=o("TFRobertaForMultipleChoice"),W5r=o(" (RoBERTa model)"),Q5r=l(),xE=a("li"),ATe=a("strong"),H5r=o("roformer"),U5r=o(" \u2014 "),sJ=a("a"),J5r=o("TFRoFormerForMultipleChoice"),Y5r=o(" (RoFormer model)"),K5r=l(),$E=a("li"),LTe=a("strong"),Z5r=o("xlm"),e0r=o(" \u2014 "),lJ=a("a"),o0r=o("TFXLMForMultipleChoice"),r0r=o(" (XLM model)"),t0r=l(),kE=a("li"),yTe=a("strong"),a0r=o("xlm-roberta"),n0r=o(" \u2014 "),iJ=a("a"),s0r=o("TFXLMRobertaForMultipleChoice"),l0r=o(" (XLM-RoBERTa model)"),i0r=l(),SE=a("li"),xTe=a("strong"),d0r=o("xlnet"),c0r=o(" \u2014 "),dJ=a("a"),f0r=o("TFXLNetForMultipleChoice"),m0r=o(" (XLNet model)"),g0r=l(),F(RE.$$.fragment),jDe=l(),gc=a("h2"),PE=a("a"),$Te=a("span"),F(m9.$$.fragment),h0r=l(),kTe=a("span"),p0r=o("TFAutoModelForNextSentencePrediction"),DDe=l(),nr=a("div"),F(g9.$$.fragment),_0r=l(),hc=a("p"),u0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cJ=a("a"),b0r=o("from_pretrained()"),v0r=o(" class method or the "),fJ=a("a"),F0r=o("from_config()"),T0r=o(` class
method.`),M0r=l(),h9=a("p"),E0r=o("This class cannot be instantiated directly using "),STe=a("code"),C0r=o("__init__()"),w0r=o(" (throws an error)."),A0r=l(),Bt=a("div"),F(p9.$$.fragment),L0r=l(),RTe=a("p"),y0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),x0r=l(),pc=a("p"),$0r=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),k0r=o("not"),S0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),R0r=o("from_pretrained()"),P0r=o(" to load the model weights."),B0r=l(),F(BE.$$.fragment),I0r=l(),Rr=a("div"),F(_9.$$.fragment),N0r=l(),BTe=a("p"),q0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),j0r=l(),ln=a("p"),D0r=o("The model class to instantiate is selected based on the "),ITe=a("code"),G0r=o("model_type"),O0r=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),z0r=o("pretrained_model_name_or_path"),W0r=o(":"),Q0r=l(),u9=a("ul"),IE=a("li"),jTe=a("strong"),H0r=o("bert"),U0r=o(" \u2014 "),gJ=a("a"),J0r=o("TFBertForNextSentencePrediction"),Y0r=o(" (BERT model)"),K0r=l(),NE=a("li"),DTe=a("strong"),Z0r=o("mobilebert"),ewr=o(" \u2014 "),hJ=a("a"),owr=o("TFMobileBertForNextSentencePrediction"),rwr=o(" (MobileBERT model)"),twr=l(),F(qE.$$.fragment),GDe=l(),_c=a("h2"),jE=a("a"),GTe=a("span"),F(b9.$$.fragment),awr=l(),OTe=a("span"),nwr=o("TFAutoModelForTableQuestionAnswering"),ODe=l(),sr=a("div"),F(v9.$$.fragment),swr=l(),uc=a("p"),lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pJ=a("a"),iwr=o("from_pretrained()"),dwr=o(" class method or the "),_J=a("a"),cwr=o("from_config()"),fwr=o(` class
method.`),mwr=l(),F9=a("p"),gwr=o("This class cannot be instantiated directly using "),VTe=a("code"),hwr=o("__init__()"),pwr=o(" (throws an error)."),_wr=l(),It=a("div"),F(T9.$$.fragment),uwr=l(),XTe=a("p"),bwr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vwr=l(),bc=a("p"),Fwr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),Twr=o("not"),Mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" to load the model weights."),wwr=l(),F(DE.$$.fragment),Awr=l(),Pr=a("div"),F(M9.$$.fragment),Lwr=l(),WTe=a("p"),ywr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xwr=l(),dn=a("p"),$wr=o("The model class to instantiate is selected based on the "),QTe=a("code"),kwr=o("model_type"),Swr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),Rwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),Bwr=o("pretrained_model_name_or_path"),Iwr=o(":"),Nwr=l(),JTe=a("ul"),GE=a("li"),YTe=a("strong"),qwr=o("tapas"),jwr=o(" \u2014 "),bJ=a("a"),Dwr=o("TFTapasForQuestionAnswering"),Gwr=o(" (TAPAS model)"),Owr=l(),F(OE.$$.fragment),VDe=l(),vc=a("h2"),VE=a("a"),KTe=a("span"),F(E9.$$.fragment),Vwr=l(),ZTe=a("span"),Xwr=o("TFAutoModelForTokenClassification"),XDe=l(),lr=a("div"),F(C9.$$.fragment),zwr=l(),Fc=a("p"),Wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=a("a"),Qwr=o("from_pretrained()"),Hwr=o(" class method or the "),FJ=a("a"),Uwr=o("from_config()"),Jwr=o(` class
method.`),Ywr=l(),w9=a("p"),Kwr=o("This class cannot be instantiated directly using "),e7e=a("code"),Zwr=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),Nt=a("div"),F(A9.$$.fragment),rAr=l(),o7e=a("p"),tAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aAr=l(),Tc=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),iAr=o("from_pretrained()"),dAr=o(" to load the model weights."),cAr=l(),F(XE.$$.fragment),fAr=l(),Br=a("div"),F(L9.$$.fragment),mAr=l(),t7e=a("p"),gAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hAr=l(),cn=a("p"),pAr=o("The model class to instantiate is selected based on the "),a7e=a("code"),_Ar=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),de=a("ul"),zE=a("li"),l7e=a("strong"),EAr=o("albert"),CAr=o(" \u2014 "),MJ=a("a"),wAr=o("TFAlbertForTokenClassification"),AAr=o(" (ALBERT model)"),LAr=l(),WE=a("li"),i7e=a("strong"),yAr=o("bert"),xAr=o(" \u2014 "),EJ=a("a"),$Ar=o("TFBertForTokenClassification"),kAr=o(" (BERT model)"),SAr=l(),QE=a("li"),d7e=a("strong"),RAr=o("camembert"),PAr=o(" \u2014 "),CJ=a("a"),BAr=o("TFCamembertForTokenClassification"),IAr=o(" (CamemBERT model)"),NAr=l(),HE=a("li"),c7e=a("strong"),qAr=o("convbert"),jAr=o(" \u2014 "),wJ=a("a"),DAr=o("TFConvBertForTokenClassification"),GAr=o(" (ConvBERT model)"),OAr=l(),UE=a("li"),f7e=a("strong"),VAr=o("deberta"),XAr=o(" \u2014 "),AJ=a("a"),zAr=o("TFDebertaForTokenClassification"),WAr=o(" (DeBERTa model)"),QAr=l(),JE=a("li"),m7e=a("strong"),HAr=o("deberta-v2"),UAr=o(" \u2014 "),LJ=a("a"),JAr=o("TFDebertaV2ForTokenClassification"),YAr=o(" (DeBERTa-v2 model)"),KAr=l(),YE=a("li"),g7e=a("strong"),ZAr=o("distilbert"),e6r=o(" \u2014 "),yJ=a("a"),o6r=o("TFDistilBertForTokenClassification"),r6r=o(" (DistilBERT model)"),t6r=l(),KE=a("li"),h7e=a("strong"),a6r=o("electra"),n6r=o(" \u2014 "),xJ=a("a"),s6r=o("TFElectraForTokenClassification"),l6r=o(" (ELECTRA model)"),i6r=l(),ZE=a("li"),p7e=a("strong"),d6r=o("flaubert"),c6r=o(" \u2014 "),$J=a("a"),f6r=o("TFFlaubertForTokenClassification"),m6r=o(" (FlauBERT model)"),g6r=l(),eC=a("li"),_7e=a("strong"),h6r=o("funnel"),p6r=o(" \u2014 "),kJ=a("a"),_6r=o("TFFunnelForTokenClassification"),u6r=o(" (Funnel Transformer model)"),b6r=l(),oC=a("li"),u7e=a("strong"),v6r=o("layoutlm"),F6r=o(" \u2014 "),SJ=a("a"),T6r=o("TFLayoutLMForTokenClassification"),M6r=o(" (LayoutLM model)"),E6r=l(),rC=a("li"),b7e=a("strong"),C6r=o("longformer"),w6r=o(" \u2014 "),RJ=a("a"),A6r=o("TFLongformerForTokenClassification"),L6r=o(" (Longformer model)"),y6r=l(),tC=a("li"),v7e=a("strong"),x6r=o("mobilebert"),$6r=o(" \u2014 "),PJ=a("a"),k6r=o("TFMobileBertForTokenClassification"),S6r=o(" (MobileBERT model)"),R6r=l(),aC=a("li"),F7e=a("strong"),P6r=o("mpnet"),B6r=o(" \u2014 "),BJ=a("a"),I6r=o("TFMPNetForTokenClassification"),N6r=o(" (MPNet model)"),q6r=l(),nC=a("li"),T7e=a("strong"),j6r=o("rembert"),D6r=o(" \u2014 "),IJ=a("a"),G6r=o("TFRemBertForTokenClassification"),O6r=o(" (RemBERT model)"),V6r=l(),sC=a("li"),M7e=a("strong"),X6r=o("roberta"),z6r=o(" \u2014 "),NJ=a("a"),W6r=o("TFRobertaForTokenClassification"),Q6r=o(" (RoBERTa model)"),H6r=l(),lC=a("li"),E7e=a("strong"),U6r=o("roformer"),J6r=o(" \u2014 "),qJ=a("a"),Y6r=o("TFRoFormerForTokenClassification"),K6r=o(" (RoFormer model)"),Z6r=l(),iC=a("li"),C7e=a("strong"),eLr=o("xlm"),oLr=o(" \u2014 "),jJ=a("a"),rLr=o("TFXLMForTokenClassification"),tLr=o(" (XLM model)"),aLr=l(),dC=a("li"),w7e=a("strong"),nLr=o("xlm-roberta"),sLr=o(" \u2014 "),DJ=a("a"),lLr=o("TFXLMRobertaForTokenClassification"),iLr=o(" (XLM-RoBERTa model)"),dLr=l(),cC=a("li"),A7e=a("strong"),cLr=o("xlnet"),fLr=o(" \u2014 "),GJ=a("a"),mLr=o("TFXLNetForTokenClassification"),gLr=o(" (XLNet model)"),hLr=l(),F(fC.$$.fragment),zDe=l(),Mc=a("h2"),mC=a("a"),L7e=a("span"),F(y9.$$.fragment),pLr=l(),y7e=a("span"),_Lr=o("TFAutoModelForQuestionAnswering"),WDe=l(),ir=a("div"),F(x9.$$.fragment),uLr=l(),Ec=a("p"),bLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OJ=a("a"),vLr=o("from_pretrained()"),FLr=o(" class method or the "),VJ=a("a"),TLr=o("from_config()"),MLr=o(` class
method.`),ELr=l(),$9=a("p"),CLr=o("This class cannot be instantiated directly using "),x7e=a("code"),wLr=o("__init__()"),ALr=o(" (throws an error)."),LLr=l(),qt=a("div"),F(k9.$$.fragment),yLr=l(),$7e=a("p"),xLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Lr=l(),Cc=a("p"),kLr=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),SLr=o("not"),RLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),PLr=o("from_pretrained()"),BLr=o(" to load the model weights."),ILr=l(),F(gC.$$.fragment),NLr=l(),Ir=a("div"),F(S9.$$.fragment),qLr=l(),S7e=a("p"),jLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DLr=l(),fn=a("p"),GLr=o("The model class to instantiate is selected based on the "),R7e=a("code"),OLr=o("model_type"),VLr=o(` property of the config object (either
passed as an argument or loaded from `),P7e=a("code"),XLr=o("pretrained_model_name_or_path"),zLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(":"),HLr=l(),ce=a("ul"),hC=a("li"),I7e=a("strong"),ULr=o("albert"),JLr=o(" \u2014 "),zJ=a("a"),YLr=o("TFAlbertForQuestionAnswering"),KLr=o(" (ALBERT model)"),ZLr=l(),pC=a("li"),N7e=a("strong"),eyr=o("bert"),oyr=o(" \u2014 "),WJ=a("a"),ryr=o("TFBertForQuestionAnswering"),tyr=o(" (BERT model)"),ayr=l(),_C=a("li"),q7e=a("strong"),nyr=o("camembert"),syr=o(" \u2014 "),QJ=a("a"),lyr=o("TFCamembertForQuestionAnswering"),iyr=o(" (CamemBERT model)"),dyr=l(),uC=a("li"),j7e=a("strong"),cyr=o("convbert"),fyr=o(" \u2014 "),HJ=a("a"),myr=o("TFConvBertForQuestionAnswering"),gyr=o(" (ConvBERT model)"),hyr=l(),bC=a("li"),D7e=a("strong"),pyr=o("deberta"),_yr=o(" \u2014 "),UJ=a("a"),uyr=o("TFDebertaForQuestionAnswering"),byr=o(" (DeBERTa model)"),vyr=l(),vC=a("li"),G7e=a("strong"),Fyr=o("deberta-v2"),Tyr=o(" \u2014 "),JJ=a("a"),Myr=o("TFDebertaV2ForQuestionAnswering"),Eyr=o(" (DeBERTa-v2 model)"),Cyr=l(),FC=a("li"),O7e=a("strong"),wyr=o("distilbert"),Ayr=o(" \u2014 "),YJ=a("a"),Lyr=o("TFDistilBertForQuestionAnswering"),yyr=o(" (DistilBERT model)"),xyr=l(),TC=a("li"),V7e=a("strong"),$yr=o("electra"),kyr=o(" \u2014 "),KJ=a("a"),Syr=o("TFElectraForQuestionAnswering"),Ryr=o(" (ELECTRA model)"),Pyr=l(),MC=a("li"),X7e=a("strong"),Byr=o("flaubert"),Iyr=o(" \u2014 "),ZJ=a("a"),Nyr=o("TFFlaubertForQuestionAnsweringSimple"),qyr=o(" (FlauBERT model)"),jyr=l(),EC=a("li"),z7e=a("strong"),Dyr=o("funnel"),Gyr=o(" \u2014 "),eY=a("a"),Oyr=o("TFFunnelForQuestionAnswering"),Vyr=o(" (Funnel Transformer model)"),Xyr=l(),CC=a("li"),W7e=a("strong"),zyr=o("gptj"),Wyr=o(" \u2014 "),oY=a("a"),Qyr=o("TFGPTJForQuestionAnswering"),Hyr=o(" (GPT-J model)"),Uyr=l(),wC=a("li"),Q7e=a("strong"),Jyr=o("longformer"),Yyr=o(" \u2014 "),rY=a("a"),Kyr=o("TFLongformerForQuestionAnswering"),Zyr=o(" (Longformer model)"),e8r=l(),AC=a("li"),H7e=a("strong"),o8r=o("mobilebert"),r8r=o(" \u2014 "),tY=a("a"),t8r=o("TFMobileBertForQuestionAnswering"),a8r=o(" (MobileBERT model)"),n8r=l(),LC=a("li"),U7e=a("strong"),s8r=o("mpnet"),l8r=o(" \u2014 "),aY=a("a"),i8r=o("TFMPNetForQuestionAnswering"),d8r=o(" (MPNet model)"),c8r=l(),yC=a("li"),J7e=a("strong"),f8r=o("rembert"),m8r=o(" \u2014 "),nY=a("a"),g8r=o("TFRemBertForQuestionAnswering"),h8r=o(" (RemBERT model)"),p8r=l(),xC=a("li"),Y7e=a("strong"),_8r=o("roberta"),u8r=o(" \u2014 "),sY=a("a"),b8r=o("TFRobertaForQuestionAnswering"),v8r=o(" (RoBERTa model)"),F8r=l(),$C=a("li"),K7e=a("strong"),T8r=o("roformer"),M8r=o(" \u2014 "),lY=a("a"),E8r=o("TFRoFormerForQuestionAnswering"),C8r=o(" (RoFormer model)"),w8r=l(),kC=a("li"),Z7e=a("strong"),A8r=o("xlm"),L8r=o(" \u2014 "),iY=a("a"),y8r=o("TFXLMForQuestionAnsweringSimple"),x8r=o(" (XLM model)"),$8r=l(),SC=a("li"),eMe=a("strong"),k8r=o("xlm-roberta"),S8r=o(" \u2014 "),dY=a("a"),R8r=o("TFXLMRobertaForQuestionAnswering"),P8r=o(" (XLM-RoBERTa model)"),B8r=l(),RC=a("li"),oMe=a("strong"),I8r=o("xlnet"),N8r=o(" \u2014 "),cY=a("a"),q8r=o("TFXLNetForQuestionAnsweringSimple"),j8r=o(" (XLNet model)"),D8r=l(),F(PC.$$.fragment),QDe=l(),wc=a("h2"),BC=a("a"),rMe=a("span"),F(R9.$$.fragment),G8r=l(),tMe=a("span"),O8r=o("TFAutoModelForVision2Seq"),HDe=l(),dr=a("div"),F(P9.$$.fragment),V8r=l(),Ac=a("p"),X8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fY=a("a"),z8r=o("from_pretrained()"),W8r=o(" class method or the "),mY=a("a"),Q8r=o("from_config()"),H8r=o(` class
method.`),U8r=l(),B9=a("p"),J8r=o("This class cannot be instantiated directly using "),aMe=a("code"),Y8r=o("__init__()"),K8r=o(" (throws an error)."),Z8r=l(),jt=a("div"),F(I9.$$.fragment),e9r=l(),nMe=a("p"),o9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r9r=l(),Lc=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),F(IC.$$.fragment),d9r=l(),Nr=a("div"),F(N9.$$.fragment),c9r=l(),lMe=a("p"),f9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m9r=l(),mn=a("p"),g9r=o("The model class to instantiate is selected based on the "),iMe=a("code"),h9r=o("model_type"),p9r=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),_9r=o("pretrained_model_name_or_path"),u9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(":"),F9r=l(),fMe=a("ul"),NC=a("li"),mMe=a("strong"),T9r=o("vision-encoder-decoder"),M9r=o(" \u2014 "),hY=a("a"),E9r=o("TFVisionEncoderDecoderModel"),C9r=o(" (Vision Encoder decoder model)"),w9r=l(),F(qC.$$.fragment),UDe=l(),yc=a("h2"),jC=a("a"),gMe=a("span"),F(q9.$$.fragment),A9r=l(),hMe=a("span"),L9r=o("TFAutoModelForSpeechSeq2Seq"),JDe=l(),cr=a("div"),F(j9.$$.fragment),y9r=l(),xc=a("p"),x9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pY=a("a"),$9r=o("from_pretrained()"),k9r=o(" class method or the "),_Y=a("a"),S9r=o("from_config()"),R9r=o(` class
method.`),P9r=l(),D9=a("p"),B9r=o("This class cannot be instantiated directly using "),pMe=a("code"),I9r=o("__init__()"),N9r=o(" (throws an error)."),q9r=l(),Dt=a("div"),F(G9.$$.fragment),j9r=l(),_Me=a("p"),D9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),G9r=l(),$c=a("p"),O9r=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),V9r=o("not"),X9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),z9r=o("from_pretrained()"),W9r=o(" to load the model weights."),Q9r=l(),F(DC.$$.fragment),H9r=l(),qr=a("div"),F(O9.$$.fragment),U9r=l(),bMe=a("p"),J9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Y9r=l(),gn=a("p"),K9r=o("The model class to instantiate is selected based on the "),vMe=a("code"),Z9r=o("model_type"),exr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),oxr=o("pretrained_model_name_or_path"),rxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(":"),nxr=l(),MMe=a("ul"),GC=a("li"),EMe=a("strong"),sxr=o("speech_to_text"),lxr=o(" \u2014 "),bY=a("a"),ixr=o("TFSpeech2TextForConditionalGeneration"),dxr=o(" (Speech2Text model)"),cxr=l(),F(OC.$$.fragment),YDe=l(),kc=a("h2"),VC=a("a"),CMe=a("span"),F(V9.$$.fragment),fxr=l(),wMe=a("span"),mxr=o("FlaxAutoModel"),KDe=l(),fr=a("div"),F(X9.$$.fragment),gxr=l(),Sc=a("p"),hxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vY=a("a"),pxr=o("from_pretrained()"),_xr=o(" class method or the "),FY=a("a"),uxr=o("from_config()"),bxr=o(` class
method.`),vxr=l(),z9=a("p"),Fxr=o("This class cannot be instantiated directly using "),AMe=a("code"),Txr=o("__init__()"),Mxr=o(" (throws an error)."),Exr=l(),Gt=a("div"),F(W9.$$.fragment),Cxr=l(),LMe=a("p"),wxr=o("Instantiates one of the base model classes of the library from a configuration."),Axr=l(),Rc=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),yxr=o("not"),xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),$xr=o("from_pretrained()"),kxr=o(" to load the model weights."),Sxr=l(),F(XC.$$.fragment),Rxr=l(),jr=a("div"),F(Q9.$$.fragment),Pxr=l(),xMe=a("p"),Bxr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ixr=l(),hn=a("p"),Nxr=o("The model class to instantiate is selected based on the "),$Me=a("code"),qxr=o("model_type"),jxr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),Dxr=o("pretrained_model_name_or_path"),Gxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(":"),Xxr=l(),re=a("ul"),zC=a("li"),RMe=a("strong"),zxr=o("albert"),Wxr=o(" \u2014 "),MY=a("a"),Qxr=o("FlaxAlbertModel"),Hxr=o(" (ALBERT model)"),Uxr=l(),WC=a("li"),PMe=a("strong"),Jxr=o("bart"),Yxr=o(" \u2014 "),EY=a("a"),Kxr=o("FlaxBartModel"),Zxr=o(" (BART model)"),e$r=l(),QC=a("li"),BMe=a("strong"),o$r=o("beit"),r$r=o(" \u2014 "),CY=a("a"),t$r=o("FlaxBeitModel"),a$r=o(" (BEiT model)"),n$r=l(),HC=a("li"),IMe=a("strong"),s$r=o("bert"),l$r=o(" \u2014 "),wY=a("a"),i$r=o("FlaxBertModel"),d$r=o(" (BERT model)"),c$r=l(),UC=a("li"),NMe=a("strong"),f$r=o("big_bird"),m$r=o(" \u2014 "),AY=a("a"),g$r=o("FlaxBigBirdModel"),h$r=o(" (BigBird model)"),p$r=l(),JC=a("li"),qMe=a("strong"),_$r=o("blenderbot"),u$r=o(" \u2014 "),LY=a("a"),b$r=o("FlaxBlenderbotModel"),v$r=o(" (Blenderbot model)"),F$r=l(),YC=a("li"),jMe=a("strong"),T$r=o("blenderbot-small"),M$r=o(" \u2014 "),yY=a("a"),E$r=o("FlaxBlenderbotSmallModel"),C$r=o(" (BlenderbotSmall model)"),w$r=l(),KC=a("li"),DMe=a("strong"),A$r=o("clip"),L$r=o(" \u2014 "),xY=a("a"),y$r=o("FlaxCLIPModel"),x$r=o(" (CLIP model)"),$$r=l(),ZC=a("li"),GMe=a("strong"),k$r=o("distilbert"),S$r=o(" \u2014 "),$Y=a("a"),R$r=o("FlaxDistilBertModel"),P$r=o(" (DistilBERT model)"),B$r=l(),e5=a("li"),OMe=a("strong"),I$r=o("electra"),N$r=o(" \u2014 "),kY=a("a"),q$r=o("FlaxElectraModel"),j$r=o(" (ELECTRA model)"),D$r=l(),o5=a("li"),VMe=a("strong"),G$r=o("gpt2"),O$r=o(" \u2014 "),SY=a("a"),V$r=o("FlaxGPT2Model"),X$r=o(" (OpenAI GPT-2 model)"),z$r=l(),r5=a("li"),XMe=a("strong"),W$r=o("gpt_neo"),Q$r=o(" \u2014 "),RY=a("a"),H$r=o("FlaxGPTNeoModel"),U$r=o(" (GPT Neo model)"),J$r=l(),t5=a("li"),zMe=a("strong"),Y$r=o("gptj"),K$r=o(" \u2014 "),PY=a("a"),Z$r=o("FlaxGPTJModel"),ekr=o(" (GPT-J model)"),okr=l(),a5=a("li"),WMe=a("strong"),rkr=o("marian"),tkr=o(" \u2014 "),BY=a("a"),akr=o("FlaxMarianModel"),nkr=o(" (Marian model)"),skr=l(),n5=a("li"),QMe=a("strong"),lkr=o("mbart"),ikr=o(" \u2014 "),IY=a("a"),dkr=o("FlaxMBartModel"),ckr=o(" (mBART model)"),fkr=l(),s5=a("li"),HMe=a("strong"),mkr=o("mt5"),gkr=o(" \u2014 "),NY=a("a"),hkr=o("FlaxMT5Model"),pkr=o(" (MT5 model)"),_kr=l(),l5=a("li"),UMe=a("strong"),ukr=o("opt"),bkr=o(" \u2014 "),qY=a("a"),vkr=o("FlaxOPTModel"),Fkr=o(" (OPT model)"),Tkr=l(),i5=a("li"),JMe=a("strong"),Mkr=o("pegasus"),Ekr=o(" \u2014 "),jY=a("a"),Ckr=o("FlaxPegasusModel"),wkr=o(" (Pegasus model)"),Akr=l(),d5=a("li"),YMe=a("strong"),Lkr=o("roberta"),ykr=o(" \u2014 "),DY=a("a"),xkr=o("FlaxRobertaModel"),$kr=o(" (RoBERTa model)"),kkr=l(),c5=a("li"),KMe=a("strong"),Skr=o("roformer"),Rkr=o(" \u2014 "),GY=a("a"),Pkr=o("FlaxRoFormerModel"),Bkr=o(" (RoFormer model)"),Ikr=l(),f5=a("li"),ZMe=a("strong"),Nkr=o("t5"),qkr=o(" \u2014 "),OY=a("a"),jkr=o("FlaxT5Model"),Dkr=o(" (T5 model)"),Gkr=l(),m5=a("li"),e4e=a("strong"),Okr=o("vision-text-dual-encoder"),Vkr=o(" \u2014 "),VY=a("a"),Xkr=o("FlaxVisionTextDualEncoderModel"),zkr=o(" (VisionTextDualEncoder model)"),Wkr=l(),g5=a("li"),o4e=a("strong"),Qkr=o("vit"),Hkr=o(" \u2014 "),XY=a("a"),Ukr=o("FlaxViTModel"),Jkr=o(" (ViT model)"),Ykr=l(),h5=a("li"),r4e=a("strong"),Kkr=o("wav2vec2"),Zkr=o(" \u2014 "),zY=a("a"),eSr=o("FlaxWav2Vec2Model"),oSr=o(" (Wav2Vec2 model)"),rSr=l(),p5=a("li"),t4e=a("strong"),tSr=o("xglm"),aSr=o(" \u2014 "),WY=a("a"),nSr=o("FlaxXGLMModel"),sSr=o(" (XGLM model)"),lSr=l(),_5=a("li"),a4e=a("strong"),iSr=o("xlm-roberta"),dSr=o(" \u2014 "),QY=a("a"),cSr=o("FlaxXLMRobertaModel"),fSr=o(" (XLM-RoBERTa model)"),mSr=l(),F(u5.$$.fragment),ZDe=l(),Pc=a("h2"),b5=a("a"),n4e=a("span"),F(H9.$$.fragment),gSr=l(),s4e=a("span"),hSr=o("FlaxAutoModelForCausalLM"),eGe=l(),mr=a("div"),F(U9.$$.fragment),pSr=l(),Bc=a("p"),_Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HY=a("a"),uSr=o("from_pretrained()"),bSr=o(" class method or the "),UY=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),J9=a("p"),MSr=o("This class cannot be instantiated directly using "),l4e=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),Ot=a("div"),F(Y9.$$.fragment),ASr=l(),i4e=a("p"),LSr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ySr=l(),Ic=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),PSr=l(),F(v5.$$.fragment),BSr=l(),Dr=a("div"),F(K9.$$.fragment),ISr=l(),c4e=a("p"),NSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qSr=l(),pn=a("p"),jSr=o("The model class to instantiate is selected based on the "),f4e=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),WSr=l(),xe=a("ul"),F5=a("li"),h4e=a("strong"),QSr=o("bart"),HSr=o(" \u2014 "),YY=a("a"),USr=o("FlaxBartForCausalLM"),JSr=o(" (BART model)"),YSr=l(),T5=a("li"),p4e=a("strong"),KSr=o("bert"),ZSr=o(" \u2014 "),KY=a("a"),eRr=o("FlaxBertForCausalLM"),oRr=o(" (BERT model)"),rRr=l(),M5=a("li"),_4e=a("strong"),tRr=o("big_bird"),aRr=o(" \u2014 "),ZY=a("a"),nRr=o("FlaxBigBirdForCausalLM"),sRr=o(" (BigBird model)"),lRr=l(),E5=a("li"),u4e=a("strong"),iRr=o("electra"),dRr=o(" \u2014 "),eK=a("a"),cRr=o("FlaxElectraForCausalLM"),fRr=o(" (ELECTRA model)"),mRr=l(),C5=a("li"),b4e=a("strong"),gRr=o("gpt2"),hRr=o(" \u2014 "),oK=a("a"),pRr=o("FlaxGPT2LMHeadModel"),_Rr=o(" (OpenAI GPT-2 model)"),uRr=l(),w5=a("li"),v4e=a("strong"),bRr=o("gpt_neo"),vRr=o(" \u2014 "),rK=a("a"),FRr=o("FlaxGPTNeoForCausalLM"),TRr=o(" (GPT Neo model)"),MRr=l(),A5=a("li"),F4e=a("strong"),ERr=o("gptj"),CRr=o(" \u2014 "),tK=a("a"),wRr=o("FlaxGPTJForCausalLM"),ARr=o(" (GPT-J model)"),LRr=l(),L5=a("li"),T4e=a("strong"),yRr=o("opt"),xRr=o(" \u2014 "),aK=a("a"),$Rr=o("FlaxOPTForCausalLM"),kRr=o(" (OPT model)"),SRr=l(),y5=a("li"),M4e=a("strong"),RRr=o("roberta"),PRr=o(" \u2014 "),nK=a("a"),BRr=o("FlaxRobertaForCausalLM"),IRr=o(" (RoBERTa model)"),NRr=l(),x5=a("li"),E4e=a("strong"),qRr=o("xglm"),jRr=o(" \u2014 "),sK=a("a"),DRr=o("FlaxXGLMForCausalLM"),GRr=o(" (XGLM model)"),ORr=l(),F($5.$$.fragment),oGe=l(),Nc=a("h2"),k5=a("a"),C4e=a("span"),F(Z9.$$.fragment),VRr=l(),w4e=a("span"),XRr=o("FlaxAutoModelForPreTraining"),rGe=l(),gr=a("div"),F(ex.$$.fragment),zRr=l(),qc=a("p"),WRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lK=a("a"),QRr=o("from_pretrained()"),HRr=o(" class method or the "),iK=a("a"),URr=o("from_config()"),JRr=o(` class
method.`),YRr=l(),ox=a("p"),KRr=o("This class cannot be instantiated directly using "),A4e=a("code"),ZRr=o("__init__()"),ePr=o(" (throws an error)."),oPr=l(),Vt=a("div"),F(rx.$$.fragment),rPr=l(),L4e=a("p"),tPr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aPr=l(),jc=a("p"),nPr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),sPr=o("not"),lPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),iPr=o("from_pretrained()"),dPr=o(" to load the model weights."),cPr=l(),F(S5.$$.fragment),fPr=l(),Gr=a("div"),F(tx.$$.fragment),mPr=l(),x4e=a("p"),gPr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hPr=l(),_n=a("p"),pPr=o("The model class to instantiate is selected based on the "),$4e=a("code"),_Pr=o("model_type"),uPr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),bPr=o("pretrained_model_name_or_path"),vPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),FPr=o("pretrained_model_name_or_path"),TPr=o(":"),MPr=l(),Ee=a("ul"),R5=a("li"),R4e=a("strong"),EPr=o("albert"),CPr=o(" \u2014 "),cK=a("a"),wPr=o("FlaxAlbertForPreTraining"),APr=o(" (ALBERT model)"),LPr=l(),P5=a("li"),P4e=a("strong"),yPr=o("bart"),xPr=o(" \u2014 "),fK=a("a"),$Pr=o("FlaxBartForConditionalGeneration"),kPr=o(" (BART model)"),SPr=l(),B5=a("li"),B4e=a("strong"),RPr=o("bert"),PPr=o(" \u2014 "),mK=a("a"),BPr=o("FlaxBertForPreTraining"),IPr=o(" (BERT model)"),NPr=l(),I5=a("li"),I4e=a("strong"),qPr=o("big_bird"),jPr=o(" \u2014 "),gK=a("a"),DPr=o("FlaxBigBirdForPreTraining"),GPr=o(" (BigBird model)"),OPr=l(),N5=a("li"),N4e=a("strong"),VPr=o("electra"),XPr=o(" \u2014 "),hK=a("a"),zPr=o("FlaxElectraForPreTraining"),WPr=o(" (ELECTRA model)"),QPr=l(),q5=a("li"),q4e=a("strong"),HPr=o("mbart"),UPr=o(" \u2014 "),pK=a("a"),JPr=o("FlaxMBartForConditionalGeneration"),YPr=o(" (mBART model)"),KPr=l(),j5=a("li"),j4e=a("strong"),ZPr=o("mt5"),eBr=o(" \u2014 "),_K=a("a"),oBr=o("FlaxMT5ForConditionalGeneration"),rBr=o(" (MT5 model)"),tBr=l(),D5=a("li"),D4e=a("strong"),aBr=o("roberta"),nBr=o(" \u2014 "),uK=a("a"),sBr=o("FlaxRobertaForMaskedLM"),lBr=o(" (RoBERTa model)"),iBr=l(),G5=a("li"),G4e=a("strong"),dBr=o("roformer"),cBr=o(" \u2014 "),bK=a("a"),fBr=o("FlaxRoFormerForMaskedLM"),mBr=o(" (RoFormer model)"),gBr=l(),O5=a("li"),O4e=a("strong"),hBr=o("t5"),pBr=o(" \u2014 "),vK=a("a"),_Br=o("FlaxT5ForConditionalGeneration"),uBr=o(" (T5 model)"),bBr=l(),V5=a("li"),V4e=a("strong"),vBr=o("wav2vec2"),FBr=o(" \u2014 "),FK=a("a"),TBr=o("FlaxWav2Vec2ForPreTraining"),MBr=o(" (Wav2Vec2 model)"),EBr=l(),X5=a("li"),X4e=a("strong"),CBr=o("xlm-roberta"),wBr=o(" \u2014 "),TK=a("a"),ABr=o("FlaxXLMRobertaForMaskedLM"),LBr=o(" (XLM-RoBERTa model)"),yBr=l(),F(z5.$$.fragment),tGe=l(),Dc=a("h2"),W5=a("a"),z4e=a("span"),F(ax.$$.fragment),xBr=l(),W4e=a("span"),$Br=o("FlaxAutoModelForMaskedLM"),aGe=l(),hr=a("div"),F(nx.$$.fragment),kBr=l(),Gc=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MK=a("a"),RBr=o("from_pretrained()"),PBr=o(" class method or the "),EK=a("a"),BBr=o("from_config()"),IBr=o(` class
method.`),NBr=l(),sx=a("p"),qBr=o("This class cannot be instantiated directly using "),Q4e=a("code"),jBr=o("__init__()"),DBr=o(" (throws an error)."),GBr=l(),Xt=a("div"),F(lx.$$.fragment),OBr=l(),H4e=a("p"),VBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XBr=l(),Oc=a("p"),zBr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),WBr=o("not"),QBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),HBr=o("from_pretrained()"),UBr=o(" to load the model weights."),JBr=l(),F(Q5.$$.fragment),YBr=l(),Or=a("div"),F(ix.$$.fragment),KBr=l(),J4e=a("p"),ZBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eIr=l(),un=a("p"),oIr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),rIr=o("model_type"),tIr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(":"),iIr=l(),$e=a("ul"),H5=a("li"),eEe=a("strong"),dIr=o("albert"),cIr=o(" \u2014 "),wK=a("a"),fIr=o("FlaxAlbertForMaskedLM"),mIr=o(" (ALBERT model)"),gIr=l(),U5=a("li"),oEe=a("strong"),hIr=o("bart"),pIr=o(" \u2014 "),AK=a("a"),_Ir=o("FlaxBartForConditionalGeneration"),uIr=o(" (BART model)"),bIr=l(),J5=a("li"),rEe=a("strong"),vIr=o("bert"),FIr=o(" \u2014 "),LK=a("a"),TIr=o("FlaxBertForMaskedLM"),MIr=o(" (BERT model)"),EIr=l(),Y5=a("li"),tEe=a("strong"),CIr=o("big_bird"),wIr=o(" \u2014 "),yK=a("a"),AIr=o("FlaxBigBirdForMaskedLM"),LIr=o(" (BigBird model)"),yIr=l(),K5=a("li"),aEe=a("strong"),xIr=o("distilbert"),$Ir=o(" \u2014 "),xK=a("a"),kIr=o("FlaxDistilBertForMaskedLM"),SIr=o(" (DistilBERT model)"),RIr=l(),Z5=a("li"),nEe=a("strong"),PIr=o("electra"),BIr=o(" \u2014 "),$K=a("a"),IIr=o("FlaxElectraForMaskedLM"),NIr=o(" (ELECTRA model)"),qIr=l(),e0=a("li"),sEe=a("strong"),jIr=o("mbart"),DIr=o(" \u2014 "),kK=a("a"),GIr=o("FlaxMBartForConditionalGeneration"),OIr=o(" (mBART model)"),VIr=l(),o0=a("li"),lEe=a("strong"),XIr=o("roberta"),zIr=o(" \u2014 "),SK=a("a"),WIr=o("FlaxRobertaForMaskedLM"),QIr=o(" (RoBERTa model)"),HIr=l(),r0=a("li"),iEe=a("strong"),UIr=o("roformer"),JIr=o(" \u2014 "),RK=a("a"),YIr=o("FlaxRoFormerForMaskedLM"),KIr=o(" (RoFormer model)"),ZIr=l(),t0=a("li"),dEe=a("strong"),eNr=o("xlm-roberta"),oNr=o(" \u2014 "),PK=a("a"),rNr=o("FlaxXLMRobertaForMaskedLM"),tNr=o(" (XLM-RoBERTa model)"),aNr=l(),F(a0.$$.fragment),nGe=l(),Vc=a("h2"),n0=a("a"),cEe=a("span"),F(dx.$$.fragment),nNr=l(),fEe=a("span"),sNr=o("FlaxAutoModelForSeq2SeqLM"),sGe=l(),pr=a("div"),F(cx.$$.fragment),lNr=l(),Xc=a("p"),iNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BK=a("a"),dNr=o("from_pretrained()"),cNr=o(" class method or the "),IK=a("a"),fNr=o("from_config()"),mNr=o(` class
method.`),gNr=l(),fx=a("p"),hNr=o("This class cannot be instantiated directly using "),mEe=a("code"),pNr=o("__init__()"),_Nr=o(" (throws an error)."),uNr=l(),zt=a("div"),F(mx.$$.fragment),bNr=l(),gEe=a("p"),vNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FNr=l(),zc=a("p"),TNr=o(`Note:
Loading a model from its configuration file does `),hEe=a("strong"),MNr=o("not"),ENr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),CNr=o("from_pretrained()"),wNr=o(" to load the model weights."),ANr=l(),F(s0.$$.fragment),LNr=l(),Vr=a("div"),F(gx.$$.fragment),yNr=l(),pEe=a("p"),xNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Nr=l(),bn=a("p"),kNr=o("The model class to instantiate is selected based on the "),_Ee=a("code"),SNr=o("model_type"),RNr=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),PNr=o("pretrained_model_name_or_path"),BNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=a("code"),INr=o("pretrained_model_name_or_path"),NNr=o(":"),qNr=l(),Pe=a("ul"),l0=a("li"),vEe=a("strong"),jNr=o("bart"),DNr=o(" \u2014 "),qK=a("a"),GNr=o("FlaxBartForConditionalGeneration"),ONr=o(" (BART model)"),VNr=l(),i0=a("li"),FEe=a("strong"),XNr=o("blenderbot"),zNr=o(" \u2014 "),jK=a("a"),WNr=o("FlaxBlenderbotForConditionalGeneration"),QNr=o(" (Blenderbot model)"),HNr=l(),d0=a("li"),TEe=a("strong"),UNr=o("blenderbot-small"),JNr=o(" \u2014 "),DK=a("a"),YNr=o("FlaxBlenderbotSmallForConditionalGeneration"),KNr=o(" (BlenderbotSmall model)"),ZNr=l(),c0=a("li"),MEe=a("strong"),eqr=o("encoder-decoder"),oqr=o(" \u2014 "),GK=a("a"),rqr=o("FlaxEncoderDecoderModel"),tqr=o(" (Encoder decoder model)"),aqr=l(),f0=a("li"),EEe=a("strong"),nqr=o("marian"),sqr=o(" \u2014 "),OK=a("a"),lqr=o("FlaxMarianMTModel"),iqr=o(" (Marian model)"),dqr=l(),m0=a("li"),CEe=a("strong"),cqr=o("mbart"),fqr=o(" \u2014 "),VK=a("a"),mqr=o("FlaxMBartForConditionalGeneration"),gqr=o(" (mBART model)"),hqr=l(),g0=a("li"),wEe=a("strong"),pqr=o("mt5"),_qr=o(" \u2014 "),XK=a("a"),uqr=o("FlaxMT5ForConditionalGeneration"),bqr=o(" (MT5 model)"),vqr=l(),h0=a("li"),AEe=a("strong"),Fqr=o("pegasus"),Tqr=o(" \u2014 "),zK=a("a"),Mqr=o("FlaxPegasusForConditionalGeneration"),Eqr=o(" (Pegasus model)"),Cqr=l(),p0=a("li"),LEe=a("strong"),wqr=o("t5"),Aqr=o(" \u2014 "),WK=a("a"),Lqr=o("FlaxT5ForConditionalGeneration"),yqr=o(" (T5 model)"),xqr=l(),F(_0.$$.fragment),lGe=l(),Wc=a("h2"),u0=a("a"),yEe=a("span"),F(hx.$$.fragment),$qr=l(),xEe=a("span"),kqr=o("FlaxAutoModelForSequenceClassification"),iGe=l(),_r=a("div"),F(px.$$.fragment),Sqr=l(),Qc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QK=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),HK=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),_x=a("p"),jqr=o("This class cannot be instantiated directly using "),$Ee=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Wt=a("div"),F(ux.$$.fragment),Vqr=l(),kEe=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zqr=l(),Hc=a("p"),Wqr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),Qqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(b0.$$.fragment),Kqr=l(),Xr=a("div"),F(bx.$$.fragment),Zqr=l(),REe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ojr=l(),vn=a("p"),rjr=o("The model class to instantiate is selected based on the "),PEe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),ke=a("ul"),v0=a("li"),NEe=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),JK=a("a"),mjr=o("FlaxAlbertForSequenceClassification"),gjr=o(" (ALBERT model)"),hjr=l(),F0=a("li"),qEe=a("strong"),pjr=o("bart"),_jr=o(" \u2014 "),YK=a("a"),ujr=o("FlaxBartForSequenceClassification"),bjr=o(" (BART model)"),vjr=l(),T0=a("li"),jEe=a("strong"),Fjr=o("bert"),Tjr=o(" \u2014 "),KK=a("a"),Mjr=o("FlaxBertForSequenceClassification"),Ejr=o(" (BERT model)"),Cjr=l(),M0=a("li"),DEe=a("strong"),wjr=o("big_bird"),Ajr=o(" \u2014 "),ZK=a("a"),Ljr=o("FlaxBigBirdForSequenceClassification"),yjr=o(" (BigBird model)"),xjr=l(),E0=a("li"),GEe=a("strong"),$jr=o("distilbert"),kjr=o(" \u2014 "),eZ=a("a"),Sjr=o("FlaxDistilBertForSequenceClassification"),Rjr=o(" (DistilBERT model)"),Pjr=l(),C0=a("li"),OEe=a("strong"),Bjr=o("electra"),Ijr=o(" \u2014 "),oZ=a("a"),Njr=o("FlaxElectraForSequenceClassification"),qjr=o(" (ELECTRA model)"),jjr=l(),w0=a("li"),VEe=a("strong"),Djr=o("mbart"),Gjr=o(" \u2014 "),rZ=a("a"),Ojr=o("FlaxMBartForSequenceClassification"),Vjr=o(" (mBART model)"),Xjr=l(),A0=a("li"),XEe=a("strong"),zjr=o("roberta"),Wjr=o(" \u2014 "),tZ=a("a"),Qjr=o("FlaxRobertaForSequenceClassification"),Hjr=o(" (RoBERTa model)"),Ujr=l(),L0=a("li"),zEe=a("strong"),Jjr=o("roformer"),Yjr=o(" \u2014 "),aZ=a("a"),Kjr=o("FlaxRoFormerForSequenceClassification"),Zjr=o(" (RoFormer model)"),eDr=l(),y0=a("li"),WEe=a("strong"),oDr=o("xlm-roberta"),rDr=o(" \u2014 "),nZ=a("a"),tDr=o("FlaxXLMRobertaForSequenceClassification"),aDr=o(" (XLM-RoBERTa model)"),nDr=l(),F(x0.$$.fragment),dGe=l(),Uc=a("h2"),$0=a("a"),QEe=a("span"),F(vx.$$.fragment),sDr=l(),HEe=a("span"),lDr=o("FlaxAutoModelForQuestionAnswering"),cGe=l(),ur=a("div"),F(Fx.$$.fragment),iDr=l(),Jc=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sZ=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),lZ=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),Tx=a("p"),pDr=o("This class cannot be instantiated directly using "),UEe=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),Qt=a("div"),F(Mx.$$.fragment),vDr=l(),JEe=a("p"),FDr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TDr=l(),Yc=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),LDr=l(),F(k0.$$.fragment),yDr=l(),zr=a("div"),F(Ex.$$.fragment),xDr=l(),KEe=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kDr=l(),Fn=a("p"),SDr=o("The model class to instantiate is selected based on the "),ZEe=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),NDr=o("pretrained_model_name_or_path"),qDr=o(":"),jDr=l(),Se=a("ul"),S0=a("li"),rCe=a("strong"),DDr=o("albert"),GDr=o(" \u2014 "),dZ=a("a"),ODr=o("FlaxAlbertForQuestionAnswering"),VDr=o(" (ALBERT model)"),XDr=l(),R0=a("li"),tCe=a("strong"),zDr=o("bart"),WDr=o(" \u2014 "),cZ=a("a"),QDr=o("FlaxBartForQuestionAnswering"),HDr=o(" (BART model)"),UDr=l(),P0=a("li"),aCe=a("strong"),JDr=o("bert"),YDr=o(" \u2014 "),fZ=a("a"),KDr=o("FlaxBertForQuestionAnswering"),ZDr=o(" (BERT model)"),eGr=l(),B0=a("li"),nCe=a("strong"),oGr=o("big_bird"),rGr=o(" \u2014 "),mZ=a("a"),tGr=o("FlaxBigBirdForQuestionAnswering"),aGr=o(" (BigBird model)"),nGr=l(),I0=a("li"),sCe=a("strong"),sGr=o("distilbert"),lGr=o(" \u2014 "),gZ=a("a"),iGr=o("FlaxDistilBertForQuestionAnswering"),dGr=o(" (DistilBERT model)"),cGr=l(),N0=a("li"),lCe=a("strong"),fGr=o("electra"),mGr=o(" \u2014 "),hZ=a("a"),gGr=o("FlaxElectraForQuestionAnswering"),hGr=o(" (ELECTRA model)"),pGr=l(),q0=a("li"),iCe=a("strong"),_Gr=o("mbart"),uGr=o(" \u2014 "),pZ=a("a"),bGr=o("FlaxMBartForQuestionAnswering"),vGr=o(" (mBART model)"),FGr=l(),j0=a("li"),dCe=a("strong"),TGr=o("roberta"),MGr=o(" \u2014 "),_Z=a("a"),EGr=o("FlaxRobertaForQuestionAnswering"),CGr=o(" (RoBERTa model)"),wGr=l(),D0=a("li"),cCe=a("strong"),AGr=o("roformer"),LGr=o(" \u2014 "),uZ=a("a"),yGr=o("FlaxRoFormerForQuestionAnswering"),xGr=o(" (RoFormer model)"),$Gr=l(),G0=a("li"),fCe=a("strong"),kGr=o("xlm-roberta"),SGr=o(" \u2014 "),bZ=a("a"),RGr=o("FlaxXLMRobertaForQuestionAnswering"),PGr=o(" (XLM-RoBERTa model)"),BGr=l(),F(O0.$$.fragment),fGe=l(),Kc=a("h2"),V0=a("a"),mCe=a("span"),F(Cx.$$.fragment),IGr=l(),gCe=a("span"),NGr=o("FlaxAutoModelForTokenClassification"),mGe=l(),br=a("div"),F(wx.$$.fragment),qGr=l(),Zc=a("p"),jGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vZ=a("a"),DGr=o("from_pretrained()"),GGr=o(" class method or the "),FZ=a("a"),OGr=o("from_config()"),VGr=o(` class
method.`),XGr=l(),Ax=a("p"),zGr=o("This class cannot be instantiated directly using "),hCe=a("code"),WGr=o("__init__()"),QGr=o(" (throws an error)."),HGr=l(),Ht=a("div"),F(Lx.$$.fragment),UGr=l(),pCe=a("p"),JGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YGr=l(),ef=a("p"),KGr=o(`Note:
Loading a model from its configuration file does `),_Ce=a("strong"),ZGr=o("not"),eOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),oOr=o("from_pretrained()"),rOr=o(" to load the model weights."),tOr=l(),F(X0.$$.fragment),aOr=l(),Wr=a("div"),F(yx.$$.fragment),nOr=l(),uCe=a("p"),sOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lOr=l(),Tn=a("p"),iOr=o("The model class to instantiate is selected based on the "),bCe=a("code"),dOr=o("model_type"),cOr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),fOr=o("pretrained_model_name_or_path"),mOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),gOr=o("pretrained_model_name_or_path"),hOr=o(":"),pOr=l(),Oe=a("ul"),z0=a("li"),TCe=a("strong"),_Or=o("albert"),uOr=o(" \u2014 "),MZ=a("a"),bOr=o("FlaxAlbertForTokenClassification"),vOr=o(" (ALBERT model)"),FOr=l(),W0=a("li"),MCe=a("strong"),TOr=o("bert"),MOr=o(" \u2014 "),EZ=a("a"),EOr=o("FlaxBertForTokenClassification"),COr=o(" (BERT model)"),wOr=l(),Q0=a("li"),ECe=a("strong"),AOr=o("big_bird"),LOr=o(" \u2014 "),CZ=a("a"),yOr=o("FlaxBigBirdForTokenClassification"),xOr=o(" (BigBird model)"),$Or=l(),H0=a("li"),CCe=a("strong"),kOr=o("distilbert"),SOr=o(" \u2014 "),wZ=a("a"),ROr=o("FlaxDistilBertForTokenClassification"),POr=o(" (DistilBERT model)"),BOr=l(),U0=a("li"),wCe=a("strong"),IOr=o("electra"),NOr=o(" \u2014 "),AZ=a("a"),qOr=o("FlaxElectraForTokenClassification"),jOr=o(" (ELECTRA model)"),DOr=l(),J0=a("li"),ACe=a("strong"),GOr=o("roberta"),OOr=o(" \u2014 "),LZ=a("a"),VOr=o("FlaxRobertaForTokenClassification"),XOr=o(" (RoBERTa model)"),zOr=l(),Y0=a("li"),LCe=a("strong"),WOr=o("roformer"),QOr=o(" \u2014 "),yZ=a("a"),HOr=o("FlaxRoFormerForTokenClassification"),UOr=o(" (RoFormer model)"),JOr=l(),K0=a("li"),yCe=a("strong"),YOr=o("xlm-roberta"),KOr=o(" \u2014 "),xZ=a("a"),ZOr=o("FlaxXLMRobertaForTokenClassification"),eVr=o(" (XLM-RoBERTa model)"),oVr=l(),F(Z0.$$.fragment),gGe=l(),of=a("h2"),ew=a("a"),xCe=a("span"),F(xx.$$.fragment),rVr=l(),$Ce=a("span"),tVr=o("FlaxAutoModelForMultipleChoice"),hGe=l(),vr=a("div"),F($x.$$.fragment),aVr=l(),rf=a("p"),nVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$Z=a("a"),sVr=o("from_pretrained()"),lVr=o(" class method or the "),kZ=a("a"),iVr=o("from_config()"),dVr=o(` class
method.`),cVr=l(),kx=a("p"),fVr=o("This class cannot be instantiated directly using "),kCe=a("code"),mVr=o("__init__()"),gVr=o(" (throws an error)."),hVr=l(),Ut=a("div"),F(Sx.$$.fragment),pVr=l(),SCe=a("p"),_Vr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uVr=l(),tf=a("p"),bVr=o(`Note:
Loading a model from its configuration file does `),RCe=a("strong"),vVr=o("not"),FVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),TVr=o("from_pretrained()"),MVr=o(" to load the model weights."),EVr=l(),F(ow.$$.fragment),CVr=l(),Qr=a("div"),F(Rx.$$.fragment),wVr=l(),PCe=a("p"),AVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LVr=l(),Mn=a("p"),yVr=o("The model class to instantiate is selected based on the "),BCe=a("code"),xVr=o("model_type"),$Vr=o(` property of the config object (either
passed as an argument or loaded from `),ICe=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(":"),BVr=l(),Ve=a("ul"),rw=a("li"),qCe=a("strong"),IVr=o("albert"),NVr=o(" \u2014 "),RZ=a("a"),qVr=o("FlaxAlbertForMultipleChoice"),jVr=o(" (ALBERT model)"),DVr=l(),tw=a("li"),jCe=a("strong"),GVr=o("bert"),OVr=o(" \u2014 "),PZ=a("a"),VVr=o("FlaxBertForMultipleChoice"),XVr=o(" (BERT model)"),zVr=l(),aw=a("li"),DCe=a("strong"),WVr=o("big_bird"),QVr=o(" \u2014 "),BZ=a("a"),HVr=o("FlaxBigBirdForMultipleChoice"),UVr=o(" (BigBird model)"),JVr=l(),nw=a("li"),GCe=a("strong"),YVr=o("distilbert"),KVr=o(" \u2014 "),IZ=a("a"),ZVr=o("FlaxDistilBertForMultipleChoice"),eXr=o(" (DistilBERT model)"),oXr=l(),sw=a("li"),OCe=a("strong"),rXr=o("electra"),tXr=o(" \u2014 "),NZ=a("a"),aXr=o("FlaxElectraForMultipleChoice"),nXr=o(" (ELECTRA model)"),sXr=l(),lw=a("li"),VCe=a("strong"),lXr=o("roberta"),iXr=o(" \u2014 "),qZ=a("a"),dXr=o("FlaxRobertaForMultipleChoice"),cXr=o(" (RoBERTa model)"),fXr=l(),iw=a("li"),XCe=a("strong"),mXr=o("roformer"),gXr=o(" \u2014 "),jZ=a("a"),hXr=o("FlaxRoFormerForMultipleChoice"),pXr=o(" (RoFormer model)"),_Xr=l(),dw=a("li"),zCe=a("strong"),uXr=o("xlm-roberta"),bXr=o(" \u2014 "),DZ=a("a"),vXr=o("FlaxXLMRobertaForMultipleChoice"),FXr=o(" (XLM-RoBERTa model)"),TXr=l(),F(cw.$$.fragment),pGe=l(),af=a("h2"),fw=a("a"),WCe=a("span"),F(Px.$$.fragment),MXr=l(),QCe=a("span"),EXr=o("FlaxAutoModelForNextSentencePrediction"),_Ge=l(),Fr=a("div"),F(Bx.$$.fragment),CXr=l(),nf=a("p"),wXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GZ=a("a"),AXr=o("from_pretrained()"),LXr=o(" class method or the "),OZ=a("a"),yXr=o("from_config()"),xXr=o(` class
method.`),$Xr=l(),Ix=a("p"),kXr=o("This class cannot be instantiated directly using "),HCe=a("code"),SXr=o("__init__()"),RXr=o(" (throws an error)."),PXr=l(),Jt=a("div"),F(Nx.$$.fragment),BXr=l(),UCe=a("p"),IXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NXr=l(),sf=a("p"),qXr=o(`Note:
Loading a model from its configuration file does `),JCe=a("strong"),jXr=o("not"),DXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("a"),GXr=o("from_pretrained()"),OXr=o(" to load the model weights."),VXr=l(),F(mw.$$.fragment),XXr=l(),Hr=a("div"),F(qx.$$.fragment),zXr=l(),YCe=a("p"),WXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QXr=l(),En=a("p"),HXr=o("The model class to instantiate is selected based on the "),KCe=a("code"),UXr=o("model_type"),JXr=o(` property of the config object (either
passed as an argument or loaded from `),ZCe=a("code"),YXr=o("pretrained_model_name_or_path"),KXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),ZXr=o("pretrained_model_name_or_path"),ezr=o(":"),ozr=l(),o5e=a("ul"),gw=a("li"),r5e=a("strong"),rzr=o("bert"),tzr=o(" \u2014 "),XZ=a("a"),azr=o("FlaxBertForNextSentencePrediction"),nzr=o(" (BERT model)"),szr=l(),F(hw.$$.fragment),uGe=l(),lf=a("h2"),pw=a("a"),t5e=a("span"),F(jx.$$.fragment),lzr=l(),a5e=a("span"),izr=o("FlaxAutoModelForImageClassification"),bGe=l(),Tr=a("div"),F(Dx.$$.fragment),dzr=l(),df=a("p"),czr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zZ=a("a"),fzr=o("from_pretrained()"),mzr=o(" class method or the "),WZ=a("a"),gzr=o("from_config()"),hzr=o(` class
method.`),pzr=l(),Gx=a("p"),_zr=o("This class cannot be instantiated directly using "),n5e=a("code"),uzr=o("__init__()"),bzr=o(" (throws an error)."),vzr=l(),Yt=a("div"),F(Ox.$$.fragment),Fzr=l(),s5e=a("p"),Tzr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mzr=l(),cf=a("p"),Ezr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),Czr=o("not"),wzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),Azr=o("from_pretrained()"),Lzr=o(" to load the model weights."),yzr=l(),F(_w.$$.fragment),xzr=l(),Ur=a("div"),F(Vx.$$.fragment),$zr=l(),i5e=a("p"),kzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Szr=l(),Cn=a("p"),Rzr=o("The model class to instantiate is selected based on the "),d5e=a("code"),Pzr=o("model_type"),Bzr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),Izr=o("pretrained_model_name_or_path"),Nzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),qzr=o("pretrained_model_name_or_path"),jzr=o(":"),Dzr=l(),Xx=a("ul"),uw=a("li"),m5e=a("strong"),Gzr=o("beit"),Ozr=o(" \u2014 "),HZ=a("a"),Vzr=o("FlaxBeitForImageClassification"),Xzr=o(" (BEiT model)"),zzr=l(),bw=a("li"),g5e=a("strong"),Wzr=o("vit"),Qzr=o(" \u2014 "),UZ=a("a"),Hzr=o("FlaxViTForImageClassification"),Uzr=o(" (ViT model)"),Jzr=l(),F(vw.$$.fragment),vGe=l(),ff=a("h2"),Fw=a("a"),h5e=a("span"),F(zx.$$.fragment),Yzr=l(),p5e=a("span"),Kzr=o("FlaxAutoModelForVision2Seq"),FGe=l(),Mr=a("div"),F(Wx.$$.fragment),Zzr=l(),mf=a("p"),eWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JZ=a("a"),oWr=o("from_pretrained()"),rWr=o(" class method or the "),YZ=a("a"),tWr=o("from_config()"),aWr=o(` class
method.`),nWr=l(),Qx=a("p"),sWr=o("This class cannot be instantiated directly using "),_5e=a("code"),lWr=o("__init__()"),iWr=o(" (throws an error)."),dWr=l(),Kt=a("div"),F(Hx.$$.fragment),cWr=l(),u5e=a("p"),fWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mWr=l(),gf=a("p"),gWr=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),hWr=o("not"),pWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),_Wr=o("from_pretrained()"),uWr=o(" to load the model weights."),bWr=l(),F(Tw.$$.fragment),vWr=l(),Jr=a("div"),F(Ux.$$.fragment),FWr=l(),v5e=a("p"),TWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MWr=l(),wn=a("p"),EWr=o("The model class to instantiate is selected based on the "),F5e=a("code"),CWr=o("model_type"),wWr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),AWr=o("pretrained_model_name_or_path"),LWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),yWr=o("pretrained_model_name_or_path"),xWr=o(":"),$Wr=l(),E5e=a("ul"),Mw=a("li"),C5e=a("strong"),kWr=o("vision-encoder-decoder"),SWr=o(" \u2014 "),ZZ=a("a"),RWr=o("FlaxVisionEncoderDecoderModel"),PWr=o(" (Vision Encoder decoder model)"),BWr=l(),F(Ew.$$.fragment),this.h()},l(f){const u=ZRt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Jx=s(p);m=n(Jx,"A",{id:!0,class:!0,href:!0});var w5e=s(m);_=n(w5e,"SPAN",{});var A5e=s(_);T(d.$$.fragment,A5e),A5e.forEach(t),w5e.forEach(t),h=i(Jx),Mo=n(Jx,"SPAN",{});var L5e=s(Mo);gi=r(L5e,"Auto Classes"),L5e.forEach(t),Jx.forEach(t),uf=i(f),rt=n(f,"P",{});var Yx=s(rt);hi=r(Yx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Yx,"CODE",{});var y5e=s(pi);G6=r(y5e,"from_pretrained()"),y5e.forEach(t),bf=r(Yx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Yx.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var x5e=s(Ln);O6=r(x5e,"AutoConfig"),x5e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var $5e=s(xn);V6=r($5e,"AutoModel"),$5e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var k5e=s($n);X6=r(k5e,"AutoTokenizer"),k5e.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Kx=s(Ae);fk=r(Kx,"will create a model that is an instance of "),vi=n(Kx,"A",{href:!0});var S5e=s(vi);mk=r(S5e,"BertModel"),S5e.forEach(t),gk=r(Kx,"."),Kx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Zx=s(wa);hk=r(Zx,"There is one class of "),Ff=n(Zx,"CODE",{});var R5e=s(Ff);pk=r(R5e,"AutoModel"),R5e.forEach(t),xVe=r(Zx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Zx.forEach(t),bje=i(f),Fi=n(f,"H2",{class:!0});var e$=s(Fi);Tf=n(e$,"A",{id:!0,class:!0,href:!0});var P5e=s(Tf);Woe=n(P5e,"SPAN",{});var B5e=s(Woe);T(z6.$$.fragment,B5e),B5e.forEach(t),P5e.forEach(t),$Ve=i(e$),Qoe=n(e$,"SPAN",{});var I5e=s(Qoe);kVe=r(I5e,"Extending the Auto Classes"),I5e.forEach(t),e$.forEach(t),vje=i(f),kn=n(f,"P",{});var hf=s(kn);SVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Hoe=n(hf,"CODE",{});var N5e=s(Hoe);RVe=r(N5e,"NewModel"),N5e.forEach(t),PVe=r(hf,", make sure you have a "),Uoe=n(hf,"CODE",{});var q5e=s(Uoe);BVe=r(q5e,"NewModelConfig"),q5e.forEach(t),IVe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),Fje=i(f),T(W6.$$.fragment,f),Tje=i(f),_k=n(f,"P",{});var j5e=s(_k);NVe=r(j5e,"You will then be able to use the auto classes like you would usually do!"),j5e.forEach(t),Mje=i(f),T(Mf.$$.fragment,f),Eje=i(f),Ti=n(f,"H2",{class:!0});var o$=s(Ti);Ef=n(o$,"A",{id:!0,class:!0,href:!0});var D5e=s(Ef);Joe=n(D5e,"SPAN",{});var G5e=s(Joe);T(Q6.$$.fragment,G5e),G5e.forEach(t),D5e.forEach(t),qVe=i(o$),Yoe=n(o$,"SPAN",{});var O5e=s(Yoe);jVe=r(O5e,"AutoConfig"),O5e.forEach(t),o$.forEach(t),Cje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(H6.$$.fragment,et),DVe=i(et),U6=n(et,"P",{});var r$=s(U6);GVe=r(r$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),uk=n(r$,"A",{href:!0});var V5e=s(uk);OVe=r(V5e,"from_pretrained()"),V5e.forEach(t),VVe=r(r$," class method."),r$.forEach(t),XVe=i(et),J6=n(et,"P",{});var t$=s(J6);zVe=r(t$,"This class cannot be instantiated directly using "),Koe=n(t$,"CODE",{});var X5e=s(Koe);WVe=r(X5e,"__init__()"),X5e.forEach(t),QVe=r(t$," (throws an error)."),t$.forEach(t),HVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Y6.$$.fragment,ot),UVe=i(ot),Zoe=n(ot,"P",{});var z5e=s(Zoe);JVe=r(z5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),z5e.forEach(t),YVe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);KVe=r(pf,"The configuration class to instantiate is selected based on the "),ere=n(pf,"CODE",{});var W5e=s(ere);ZVe=r(W5e,"model_type"),W5e.forEach(t),eXe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ore=n(pf,"CODE",{});var Q5e=s(ore);oXe=r(Q5e,"pretrained_model_name_or_path"),Q5e.forEach(t),rXe=r(pf,":"),pf.forEach(t),tXe=i(ot),A=n(ot,"UL",{});var L=s(A);Cf=n(L,"LI",{});var Cw=s(Cf);rre=n(Cw,"STRONG",{});var H5e=s(rre);aXe=r(H5e,"albert"),H5e.forEach(t),nXe=r(Cw," \u2014 "),bk=n(Cw,"A",{href:!0});var U5e=s(bk);sXe=r(U5e,"AlbertConfig"),U5e.forEach(t),lXe=r(Cw," (ALBERT model)"),Cw.forEach(t),iXe=i(L),wf=n(L,"LI",{});var ww=s(wf);tre=n(ww,"STRONG",{});var J5e=s(tre);dXe=r(J5e,"bart"),J5e.forEach(t),cXe=r(ww," \u2014 "),vk=n(ww,"A",{href:!0});var Y5e=s(vk);fXe=r(Y5e,"BartConfig"),Y5e.forEach(t),mXe=r(ww," (BART model)"),ww.forEach(t),gXe=i(L),Af=n(L,"LI",{});var Aw=s(Af);are=n(Aw,"STRONG",{});var K5e=s(are);hXe=r(K5e,"beit"),K5e.forEach(t),pXe=r(Aw," \u2014 "),Fk=n(Aw,"A",{href:!0});var Z5e=s(Fk);_Xe=r(Z5e,"BeitConfig"),Z5e.forEach(t),uXe=r(Aw," (BEiT model)"),Aw.forEach(t),bXe=i(L),Lf=n(L,"LI",{});var Lw=s(Lf);nre=n(Lw,"STRONG",{});var e0e=s(nre);vXe=r(e0e,"bert"),e0e.forEach(t),FXe=r(Lw," \u2014 "),Tk=n(Lw,"A",{href:!0});var o0e=s(Tk);TXe=r(o0e,"BertConfig"),o0e.forEach(t),MXe=r(Lw," (BERT model)"),Lw.forEach(t),EXe=i(L),yf=n(L,"LI",{});var yw=s(yf);sre=n(yw,"STRONG",{});var r0e=s(sre);CXe=r(r0e,"bert-generation"),r0e.forEach(t),wXe=r(yw," \u2014 "),Mk=n(yw,"A",{href:!0});var t0e=s(Mk);AXe=r(t0e,"BertGenerationConfig"),t0e.forEach(t),LXe=r(yw," (Bert Generation model)"),yw.forEach(t),yXe=i(L),xf=n(L,"LI",{});var xw=s(xf);lre=n(xw,"STRONG",{});var a0e=s(lre);xXe=r(a0e,"big_bird"),a0e.forEach(t),$Xe=r(xw," \u2014 "),Ek=n(xw,"A",{href:!0});var n0e=s(Ek);kXe=r(n0e,"BigBirdConfig"),n0e.forEach(t),SXe=r(xw," (BigBird model)"),xw.forEach(t),RXe=i(L),$f=n(L,"LI",{});var $w=s($f);ire=n($w,"STRONG",{});var s0e=s(ire);PXe=r(s0e,"bigbird_pegasus"),s0e.forEach(t),BXe=r($w," \u2014 "),Ck=n($w,"A",{href:!0});var l0e=s(Ck);IXe=r(l0e,"BigBirdPegasusConfig"),l0e.forEach(t),NXe=r($w," (BigBird-Pegasus model)"),$w.forEach(t),qXe=i(L),kf=n(L,"LI",{});var kw=s(kf);dre=n(kw,"STRONG",{});var i0e=s(dre);jXe=r(i0e,"blenderbot"),i0e.forEach(t),DXe=r(kw," \u2014 "),wk=n(kw,"A",{href:!0});var d0e=s(wk);GXe=r(d0e,"BlenderbotConfig"),d0e.forEach(t),OXe=r(kw," (Blenderbot model)"),kw.forEach(t),VXe=i(L),Sf=n(L,"LI",{});var Sw=s(Sf);cre=n(Sw,"STRONG",{});var c0e=s(cre);XXe=r(c0e,"blenderbot-small"),c0e.forEach(t),zXe=r(Sw," \u2014 "),Ak=n(Sw,"A",{href:!0});var f0e=s(Ak);WXe=r(f0e,"BlenderbotSmallConfig"),f0e.forEach(t),QXe=r(Sw," (BlenderbotSmall model)"),Sw.forEach(t),HXe=i(L),Rf=n(L,"LI",{});var Rw=s(Rf);fre=n(Rw,"STRONG",{});var m0e=s(fre);UXe=r(m0e,"camembert"),m0e.forEach(t),JXe=r(Rw," \u2014 "),Lk=n(Rw,"A",{href:!0});var g0e=s(Lk);YXe=r(g0e,"CamembertConfig"),g0e.forEach(t),KXe=r(Rw," (CamemBERT model)"),Rw.forEach(t),ZXe=i(L),Pf=n(L,"LI",{});var Pw=s(Pf);mre=n(Pw,"STRONG",{});var h0e=s(mre);eze=r(h0e,"canine"),h0e.forEach(t),oze=r(Pw," \u2014 "),yk=n(Pw,"A",{href:!0});var p0e=s(yk);rze=r(p0e,"CanineConfig"),p0e.forEach(t),tze=r(Pw," (CANINE model)"),Pw.forEach(t),aze=i(L),Bf=n(L,"LI",{});var Bw=s(Bf);gre=n(Bw,"STRONG",{});var _0e=s(gre);nze=r(_0e,"clip"),_0e.forEach(t),sze=r(Bw," \u2014 "),xk=n(Bw,"A",{href:!0});var u0e=s(xk);lze=r(u0e,"CLIPConfig"),u0e.forEach(t),ize=r(Bw," (CLIP model)"),Bw.forEach(t),dze=i(L),If=n(L,"LI",{});var Iw=s(If);hre=n(Iw,"STRONG",{});var b0e=s(hre);cze=r(b0e,"convbert"),b0e.forEach(t),fze=r(Iw," \u2014 "),$k=n(Iw,"A",{href:!0});var v0e=s($k);mze=r(v0e,"ConvBertConfig"),v0e.forEach(t),gze=r(Iw," (ConvBERT model)"),Iw.forEach(t),hze=i(L),Nf=n(L,"LI",{});var Nw=s(Nf);pre=n(Nw,"STRONG",{});var F0e=s(pre);pze=r(F0e,"convnext"),F0e.forEach(t),_ze=r(Nw," \u2014 "),kk=n(Nw,"A",{href:!0});var T0e=s(kk);uze=r(T0e,"ConvNextConfig"),T0e.forEach(t),bze=r(Nw," (ConvNeXT model)"),Nw.forEach(t),vze=i(L),qf=n(L,"LI",{});var qw=s(qf);_re=n(qw,"STRONG",{});var M0e=s(_re);Fze=r(M0e,"ctrl"),M0e.forEach(t),Tze=r(qw," \u2014 "),Sk=n(qw,"A",{href:!0});var E0e=s(Sk);Mze=r(E0e,"CTRLConfig"),E0e.forEach(t),Eze=r(qw," (CTRL model)"),qw.forEach(t),Cze=i(L),jf=n(L,"LI",{});var jw=s(jf);ure=n(jw,"STRONG",{});var C0e=s(ure);wze=r(C0e,"cvt"),C0e.forEach(t),Aze=r(jw," \u2014 "),Rk=n(jw,"A",{href:!0});var w0e=s(Rk);Lze=r(w0e,"CvtConfig"),w0e.forEach(t),yze=r(jw," (CvT model)"),jw.forEach(t),xze=i(L),Df=n(L,"LI",{});var Dw=s(Df);bre=n(Dw,"STRONG",{});var A0e=s(bre);$ze=r(A0e,"data2vec-audio"),A0e.forEach(t),kze=r(Dw," \u2014 "),Pk=n(Dw,"A",{href:!0});var L0e=s(Pk);Sze=r(L0e,"Data2VecAudioConfig"),L0e.forEach(t),Rze=r(Dw," (Data2VecAudio model)"),Dw.forEach(t),Pze=i(L),Gf=n(L,"LI",{});var Gw=s(Gf);vre=n(Gw,"STRONG",{});var y0e=s(vre);Bze=r(y0e,"data2vec-text"),y0e.forEach(t),Ize=r(Gw," \u2014 "),Bk=n(Gw,"A",{href:!0});var x0e=s(Bk);Nze=r(x0e,"Data2VecTextConfig"),x0e.forEach(t),qze=r(Gw," (Data2VecText model)"),Gw.forEach(t),jze=i(L),Of=n(L,"LI",{});var Ow=s(Of);Fre=n(Ow,"STRONG",{});var $0e=s(Fre);Dze=r($0e,"data2vec-vision"),$0e.forEach(t),Gze=r(Ow," \u2014 "),Ik=n(Ow,"A",{href:!0});var k0e=s(Ik);Oze=r(k0e,"Data2VecVisionConfig"),k0e.forEach(t),Vze=r(Ow," (Data2VecVision model)"),Ow.forEach(t),Xze=i(L),Vf=n(L,"LI",{});var Vw=s(Vf);Tre=n(Vw,"STRONG",{});var S0e=s(Tre);zze=r(S0e,"deberta"),S0e.forEach(t),Wze=r(Vw," \u2014 "),Nk=n(Vw,"A",{href:!0});var R0e=s(Nk);Qze=r(R0e,"DebertaConfig"),R0e.forEach(t),Hze=r(Vw," (DeBERTa model)"),Vw.forEach(t),Uze=i(L),Xf=n(L,"LI",{});var Xw=s(Xf);Mre=n(Xw,"STRONG",{});var P0e=s(Mre);Jze=r(P0e,"deberta-v2"),P0e.forEach(t),Yze=r(Xw," \u2014 "),qk=n(Xw,"A",{href:!0});var B0e=s(qk);Kze=r(B0e,"DebertaV2Config"),B0e.forEach(t),Zze=r(Xw," (DeBERTa-v2 model)"),Xw.forEach(t),eWe=i(L),zf=n(L,"LI",{});var zw=s(zf);Ere=n(zw,"STRONG",{});var I0e=s(Ere);oWe=r(I0e,"decision_transformer"),I0e.forEach(t),rWe=r(zw," \u2014 "),jk=n(zw,"A",{href:!0});var N0e=s(jk);tWe=r(N0e,"DecisionTransformerConfig"),N0e.forEach(t),aWe=r(zw," (Decision Transformer model)"),zw.forEach(t),nWe=i(L),Wf=n(L,"LI",{});var Ww=s(Wf);Cre=n(Ww,"STRONG",{});var q0e=s(Cre);sWe=r(q0e,"deit"),q0e.forEach(t),lWe=r(Ww," \u2014 "),Dk=n(Ww,"A",{href:!0});var NWr=s(Dk);iWe=r(NWr,"DeiTConfig"),NWr.forEach(t),dWe=r(Ww," (DeiT model)"),Ww.forEach(t),cWe=i(L),Qf=n(L,"LI",{});var j0e=s(Qf);wre=n(j0e,"STRONG",{});var qWr=s(wre);fWe=r(qWr,"detr"),qWr.forEach(t),mWe=r(j0e," \u2014 "),Gk=n(j0e,"A",{href:!0});var jWr=s(Gk);gWe=r(jWr,"DetrConfig"),jWr.forEach(t),hWe=r(j0e," (DETR model)"),j0e.forEach(t),pWe=i(L),Hf=n(L,"LI",{});var D0e=s(Hf);Are=n(D0e,"STRONG",{});var DWr=s(Are);_We=r(DWr,"distilbert"),DWr.forEach(t),uWe=r(D0e," \u2014 "),Ok=n(D0e,"A",{href:!0});var GWr=s(Ok);bWe=r(GWr,"DistilBertConfig"),GWr.forEach(t),vWe=r(D0e," (DistilBERT model)"),D0e.forEach(t),FWe=i(L),Uf=n(L,"LI",{});var G0e=s(Uf);Lre=n(G0e,"STRONG",{});var OWr=s(Lre);TWe=r(OWr,"dpr"),OWr.forEach(t),MWe=r(G0e," \u2014 "),Vk=n(G0e,"A",{href:!0});var VWr=s(Vk);EWe=r(VWr,"DPRConfig"),VWr.forEach(t),CWe=r(G0e," (DPR model)"),G0e.forEach(t),wWe=i(L),Jf=n(L,"LI",{});var O0e=s(Jf);yre=n(O0e,"STRONG",{});var XWr=s(yre);AWe=r(XWr,"dpt"),XWr.forEach(t),LWe=r(O0e," \u2014 "),Xk=n(O0e,"A",{href:!0});var zWr=s(Xk);yWe=r(zWr,"DPTConfig"),zWr.forEach(t),xWe=r(O0e," (DPT model)"),O0e.forEach(t),$We=i(L),Yf=n(L,"LI",{});var V0e=s(Yf);xre=n(V0e,"STRONG",{});var WWr=s(xre);kWe=r(WWr,"electra"),WWr.forEach(t),SWe=r(V0e," \u2014 "),zk=n(V0e,"A",{href:!0});var QWr=s(zk);RWe=r(QWr,"ElectraConfig"),QWr.forEach(t),PWe=r(V0e," (ELECTRA model)"),V0e.forEach(t),BWe=i(L),Kf=n(L,"LI",{});var X0e=s(Kf);$re=n(X0e,"STRONG",{});var HWr=s($re);IWe=r(HWr,"encoder-decoder"),HWr.forEach(t),NWe=r(X0e," \u2014 "),Wk=n(X0e,"A",{href:!0});var UWr=s(Wk);qWe=r(UWr,"EncoderDecoderConfig"),UWr.forEach(t),jWe=r(X0e," (Encoder decoder model)"),X0e.forEach(t),DWe=i(L),Zf=n(L,"LI",{});var z0e=s(Zf);kre=n(z0e,"STRONG",{});var JWr=s(kre);GWe=r(JWr,"flaubert"),JWr.forEach(t),OWe=r(z0e," \u2014 "),Qk=n(z0e,"A",{href:!0});var YWr=s(Qk);VWe=r(YWr,"FlaubertConfig"),YWr.forEach(t),XWe=r(z0e," (FlauBERT model)"),z0e.forEach(t),zWe=i(L),em=n(L,"LI",{});var W0e=s(em);Sre=n(W0e,"STRONG",{});var KWr=s(Sre);WWe=r(KWr,"flava"),KWr.forEach(t),QWe=r(W0e," \u2014 "),Hk=n(W0e,"A",{href:!0});var ZWr=s(Hk);HWe=r(ZWr,"FlavaConfig"),ZWr.forEach(t),UWe=r(W0e," (FLAVA model)"),W0e.forEach(t),JWe=i(L),om=n(L,"LI",{});var Q0e=s(om);Rre=n(Q0e,"STRONG",{});var eQr=s(Rre);YWe=r(eQr,"fnet"),eQr.forEach(t),KWe=r(Q0e," \u2014 "),Uk=n(Q0e,"A",{href:!0});var oQr=s(Uk);ZWe=r(oQr,"FNetConfig"),oQr.forEach(t),eQe=r(Q0e," (FNet model)"),Q0e.forEach(t),oQe=i(L),rm=n(L,"LI",{});var H0e=s(rm);Pre=n(H0e,"STRONG",{});var rQr=s(Pre);rQe=r(rQr,"fsmt"),rQr.forEach(t),tQe=r(H0e," \u2014 "),Jk=n(H0e,"A",{href:!0});var tQr=s(Jk);aQe=r(tQr,"FSMTConfig"),tQr.forEach(t),nQe=r(H0e," (FairSeq Machine-Translation model)"),H0e.forEach(t),sQe=i(L),tm=n(L,"LI",{});var U0e=s(tm);Bre=n(U0e,"STRONG",{});var aQr=s(Bre);lQe=r(aQr,"funnel"),aQr.forEach(t),iQe=r(U0e," \u2014 "),Yk=n(U0e,"A",{href:!0});var nQr=s(Yk);dQe=r(nQr,"FunnelConfig"),nQr.forEach(t),cQe=r(U0e," (Funnel Transformer model)"),U0e.forEach(t),fQe=i(L),am=n(L,"LI",{});var J0e=s(am);Ire=n(J0e,"STRONG",{});var sQr=s(Ire);mQe=r(sQr,"glpn"),sQr.forEach(t),gQe=r(J0e," \u2014 "),Kk=n(J0e,"A",{href:!0});var lQr=s(Kk);hQe=r(lQr,"GLPNConfig"),lQr.forEach(t),pQe=r(J0e," (GLPN model)"),J0e.forEach(t),_Qe=i(L),nm=n(L,"LI",{});var Y0e=s(nm);Nre=n(Y0e,"STRONG",{});var iQr=s(Nre);uQe=r(iQr,"gpt2"),iQr.forEach(t),bQe=r(Y0e," \u2014 "),Zk=n(Y0e,"A",{href:!0});var dQr=s(Zk);vQe=r(dQr,"GPT2Config"),dQr.forEach(t),FQe=r(Y0e," (OpenAI GPT-2 model)"),Y0e.forEach(t),TQe=i(L),sm=n(L,"LI",{});var K0e=s(sm);qre=n(K0e,"STRONG",{});var cQr=s(qre);MQe=r(cQr,"gpt_neo"),cQr.forEach(t),EQe=r(K0e," \u2014 "),eS=n(K0e,"A",{href:!0});var fQr=s(eS);CQe=r(fQr,"GPTNeoConfig"),fQr.forEach(t),wQe=r(K0e," (GPT Neo model)"),K0e.forEach(t),AQe=i(L),lm=n(L,"LI",{});var Z0e=s(lm);jre=n(Z0e,"STRONG",{});var mQr=s(jre);LQe=r(mQr,"gpt_neox"),mQr.forEach(t),yQe=r(Z0e," \u2014 "),oS=n(Z0e,"A",{href:!0});var gQr=s(oS);xQe=r(gQr,"GPTNeoXConfig"),gQr.forEach(t),$Qe=r(Z0e," (GPT NeoX model)"),Z0e.forEach(t),kQe=i(L),im=n(L,"LI",{});var ewe=s(im);Dre=n(ewe,"STRONG",{});var hQr=s(Dre);SQe=r(hQr,"gptj"),hQr.forEach(t),RQe=r(ewe," \u2014 "),rS=n(ewe,"A",{href:!0});var pQr=s(rS);PQe=r(pQr,"GPTJConfig"),pQr.forEach(t),BQe=r(ewe," (GPT-J model)"),ewe.forEach(t),IQe=i(L),dm=n(L,"LI",{});var owe=s(dm);Gre=n(owe,"STRONG",{});var _Qr=s(Gre);NQe=r(_Qr,"groupvit"),_Qr.forEach(t),qQe=r(owe," \u2014 "),tS=n(owe,"A",{href:!0});var uQr=s(tS);jQe=r(uQr,"GroupViTConfig"),uQr.forEach(t),DQe=r(owe," (GroupViT model)"),owe.forEach(t),GQe=i(L),cm=n(L,"LI",{});var rwe=s(cm);Ore=n(rwe,"STRONG",{});var bQr=s(Ore);OQe=r(bQr,"hubert"),bQr.forEach(t),VQe=r(rwe," \u2014 "),aS=n(rwe,"A",{href:!0});var vQr=s(aS);XQe=r(vQr,"HubertConfig"),vQr.forEach(t),zQe=r(rwe," (Hubert model)"),rwe.forEach(t),WQe=i(L),fm=n(L,"LI",{});var twe=s(fm);Vre=n(twe,"STRONG",{});var FQr=s(Vre);QQe=r(FQr,"ibert"),FQr.forEach(t),HQe=r(twe," \u2014 "),nS=n(twe,"A",{href:!0});var TQr=s(nS);UQe=r(TQr,"IBertConfig"),TQr.forEach(t),JQe=r(twe," (I-BERT model)"),twe.forEach(t),YQe=i(L),mm=n(L,"LI",{});var awe=s(mm);Xre=n(awe,"STRONG",{});var MQr=s(Xre);KQe=r(MQr,"imagegpt"),MQr.forEach(t),ZQe=r(awe," \u2014 "),sS=n(awe,"A",{href:!0});var EQr=s(sS);eHe=r(EQr,"ImageGPTConfig"),EQr.forEach(t),oHe=r(awe," (ImageGPT model)"),awe.forEach(t),rHe=i(L),gm=n(L,"LI",{});var nwe=s(gm);zre=n(nwe,"STRONG",{});var CQr=s(zre);tHe=r(CQr,"layoutlm"),CQr.forEach(t),aHe=r(nwe," \u2014 "),lS=n(nwe,"A",{href:!0});var wQr=s(lS);nHe=r(wQr,"LayoutLMConfig"),wQr.forEach(t),sHe=r(nwe," (LayoutLM model)"),nwe.forEach(t),lHe=i(L),hm=n(L,"LI",{});var swe=s(hm);Wre=n(swe,"STRONG",{});var AQr=s(Wre);iHe=r(AQr,"layoutlmv2"),AQr.forEach(t),dHe=r(swe," \u2014 "),iS=n(swe,"A",{href:!0});var LQr=s(iS);cHe=r(LQr,"LayoutLMv2Config"),LQr.forEach(t),fHe=r(swe," (LayoutLMv2 model)"),swe.forEach(t),mHe=i(L),pm=n(L,"LI",{});var lwe=s(pm);Qre=n(lwe,"STRONG",{});var yQr=s(Qre);gHe=r(yQr,"layoutlmv3"),yQr.forEach(t),hHe=r(lwe," \u2014 "),dS=n(lwe,"A",{href:!0});var xQr=s(dS);pHe=r(xQr,"LayoutLMv3Config"),xQr.forEach(t),_He=r(lwe," (LayoutLMv3 model)"),lwe.forEach(t),uHe=i(L),_m=n(L,"LI",{});var iwe=s(_m);Hre=n(iwe,"STRONG",{});var $Qr=s(Hre);bHe=r($Qr,"led"),$Qr.forEach(t),vHe=r(iwe," \u2014 "),cS=n(iwe,"A",{href:!0});var kQr=s(cS);FHe=r(kQr,"LEDConfig"),kQr.forEach(t),THe=r(iwe," (LED model)"),iwe.forEach(t),MHe=i(L),um=n(L,"LI",{});var dwe=s(um);Ure=n(dwe,"STRONG",{});var SQr=s(Ure);EHe=r(SQr,"levit"),SQr.forEach(t),CHe=r(dwe," \u2014 "),fS=n(dwe,"A",{href:!0});var RQr=s(fS);wHe=r(RQr,"LevitConfig"),RQr.forEach(t),AHe=r(dwe," (LeViT model)"),dwe.forEach(t),LHe=i(L),bm=n(L,"LI",{});var cwe=s(bm);Jre=n(cwe,"STRONG",{});var PQr=s(Jre);yHe=r(PQr,"longformer"),PQr.forEach(t),xHe=r(cwe," \u2014 "),mS=n(cwe,"A",{href:!0});var BQr=s(mS);$He=r(BQr,"LongformerConfig"),BQr.forEach(t),kHe=r(cwe," (Longformer model)"),cwe.forEach(t),SHe=i(L),vm=n(L,"LI",{});var fwe=s(vm);Yre=n(fwe,"STRONG",{});var IQr=s(Yre);RHe=r(IQr,"luke"),IQr.forEach(t),PHe=r(fwe," \u2014 "),gS=n(fwe,"A",{href:!0});var NQr=s(gS);BHe=r(NQr,"LukeConfig"),NQr.forEach(t),IHe=r(fwe," (LUKE model)"),fwe.forEach(t),NHe=i(L),Fm=n(L,"LI",{});var mwe=s(Fm);Kre=n(mwe,"STRONG",{});var qQr=s(Kre);qHe=r(qQr,"lxmert"),qQr.forEach(t),jHe=r(mwe," \u2014 "),hS=n(mwe,"A",{href:!0});var jQr=s(hS);DHe=r(jQr,"LxmertConfig"),jQr.forEach(t),GHe=r(mwe," (LXMERT model)"),mwe.forEach(t),OHe=i(L),Tm=n(L,"LI",{});var gwe=s(Tm);Zre=n(gwe,"STRONG",{});var DQr=s(Zre);VHe=r(DQr,"m2m_100"),DQr.forEach(t),XHe=r(gwe," \u2014 "),pS=n(gwe,"A",{href:!0});var GQr=s(pS);zHe=r(GQr,"M2M100Config"),GQr.forEach(t),WHe=r(gwe," (M2M100 model)"),gwe.forEach(t),QHe=i(L),Mm=n(L,"LI",{});var hwe=s(Mm);ete=n(hwe,"STRONG",{});var OQr=s(ete);HHe=r(OQr,"marian"),OQr.forEach(t),UHe=r(hwe," \u2014 "),_S=n(hwe,"A",{href:!0});var VQr=s(_S);JHe=r(VQr,"MarianConfig"),VQr.forEach(t),YHe=r(hwe," (Marian model)"),hwe.forEach(t),KHe=i(L),Em=n(L,"LI",{});var pwe=s(Em);ote=n(pwe,"STRONG",{});var XQr=s(ote);ZHe=r(XQr,"maskformer"),XQr.forEach(t),eUe=r(pwe," \u2014 "),uS=n(pwe,"A",{href:!0});var zQr=s(uS);oUe=r(zQr,"MaskFormerConfig"),zQr.forEach(t),rUe=r(pwe," (MaskFormer model)"),pwe.forEach(t),tUe=i(L),Cm=n(L,"LI",{});var _we=s(Cm);rte=n(_we,"STRONG",{});var WQr=s(rte);aUe=r(WQr,"mbart"),WQr.forEach(t),nUe=r(_we," \u2014 "),bS=n(_we,"A",{href:!0});var QQr=s(bS);sUe=r(QQr,"MBartConfig"),QQr.forEach(t),lUe=r(_we," (mBART model)"),_we.forEach(t),iUe=i(L),wm=n(L,"LI",{});var uwe=s(wm);tte=n(uwe,"STRONG",{});var HQr=s(tte);dUe=r(HQr,"mctct"),HQr.forEach(t),cUe=r(uwe," \u2014 "),vS=n(uwe,"A",{href:!0});var UQr=s(vS);fUe=r(UQr,"MCTCTConfig"),UQr.forEach(t),mUe=r(uwe," (M-CTC-T model)"),uwe.forEach(t),gUe=i(L),Am=n(L,"LI",{});var bwe=s(Am);ate=n(bwe,"STRONG",{});var JQr=s(ate);hUe=r(JQr,"megatron-bert"),JQr.forEach(t),pUe=r(bwe," \u2014 "),FS=n(bwe,"A",{href:!0});var YQr=s(FS);_Ue=r(YQr,"MegatronBertConfig"),YQr.forEach(t),uUe=r(bwe," (Megatron-BERT model)"),bwe.forEach(t),bUe=i(L),Lm=n(L,"LI",{});var vwe=s(Lm);nte=n(vwe,"STRONG",{});var KQr=s(nte);vUe=r(KQr,"mobilebert"),KQr.forEach(t),FUe=r(vwe," \u2014 "),TS=n(vwe,"A",{href:!0});var ZQr=s(TS);TUe=r(ZQr,"MobileBertConfig"),ZQr.forEach(t),MUe=r(vwe," (MobileBERT model)"),vwe.forEach(t),EUe=i(L),ym=n(L,"LI",{});var Fwe=s(ym);ste=n(Fwe,"STRONG",{});var eHr=s(ste);CUe=r(eHr,"mpnet"),eHr.forEach(t),wUe=r(Fwe," \u2014 "),MS=n(Fwe,"A",{href:!0});var oHr=s(MS);AUe=r(oHr,"MPNetConfig"),oHr.forEach(t),LUe=r(Fwe," (MPNet model)"),Fwe.forEach(t),yUe=i(L),xm=n(L,"LI",{});var Twe=s(xm);lte=n(Twe,"STRONG",{});var rHr=s(lte);xUe=r(rHr,"mt5"),rHr.forEach(t),$Ue=r(Twe," \u2014 "),ES=n(Twe,"A",{href:!0});var tHr=s(ES);kUe=r(tHr,"MT5Config"),tHr.forEach(t),SUe=r(Twe," (MT5 model)"),Twe.forEach(t),RUe=i(L),$m=n(L,"LI",{});var Mwe=s($m);ite=n(Mwe,"STRONG",{});var aHr=s(ite);PUe=r(aHr,"nystromformer"),aHr.forEach(t),BUe=r(Mwe," \u2014 "),CS=n(Mwe,"A",{href:!0});var nHr=s(CS);IUe=r(nHr,"NystromformerConfig"),nHr.forEach(t),NUe=r(Mwe," (Nystr\xF6mformer model)"),Mwe.forEach(t),qUe=i(L),km=n(L,"LI",{});var Ewe=s(km);dte=n(Ewe,"STRONG",{});var sHr=s(dte);jUe=r(sHr,"openai-gpt"),sHr.forEach(t),DUe=r(Ewe," \u2014 "),wS=n(Ewe,"A",{href:!0});var lHr=s(wS);GUe=r(lHr,"OpenAIGPTConfig"),lHr.forEach(t),OUe=r(Ewe," (OpenAI GPT model)"),Ewe.forEach(t),VUe=i(L),Sm=n(L,"LI",{});var Cwe=s(Sm);cte=n(Cwe,"STRONG",{});var iHr=s(cte);XUe=r(iHr,"opt"),iHr.forEach(t),zUe=r(Cwe," \u2014 "),AS=n(Cwe,"A",{href:!0});var dHr=s(AS);WUe=r(dHr,"OPTConfig"),dHr.forEach(t),QUe=r(Cwe," (OPT model)"),Cwe.forEach(t),HUe=i(L),Rm=n(L,"LI",{});var wwe=s(Rm);fte=n(wwe,"STRONG",{});var cHr=s(fte);UUe=r(cHr,"pegasus"),cHr.forEach(t),JUe=r(wwe," \u2014 "),LS=n(wwe,"A",{href:!0});var fHr=s(LS);YUe=r(fHr,"PegasusConfig"),fHr.forEach(t),KUe=r(wwe," (Pegasus model)"),wwe.forEach(t),ZUe=i(L),Pm=n(L,"LI",{});var Awe=s(Pm);mte=n(Awe,"STRONG",{});var mHr=s(mte);eJe=r(mHr,"perceiver"),mHr.forEach(t),oJe=r(Awe," \u2014 "),yS=n(Awe,"A",{href:!0});var gHr=s(yS);rJe=r(gHr,"PerceiverConfig"),gHr.forEach(t),tJe=r(Awe," (Perceiver model)"),Awe.forEach(t),aJe=i(L),Bm=n(L,"LI",{});var Lwe=s(Bm);gte=n(Lwe,"STRONG",{});var hHr=s(gte);nJe=r(hHr,"plbart"),hHr.forEach(t),sJe=r(Lwe," \u2014 "),xS=n(Lwe,"A",{href:!0});var pHr=s(xS);lJe=r(pHr,"PLBartConfig"),pHr.forEach(t),iJe=r(Lwe," (PLBart model)"),Lwe.forEach(t),dJe=i(L),Im=n(L,"LI",{});var ywe=s(Im);hte=n(ywe,"STRONG",{});var _Hr=s(hte);cJe=r(_Hr,"poolformer"),_Hr.forEach(t),fJe=r(ywe," \u2014 "),$S=n(ywe,"A",{href:!0});var uHr=s($S);mJe=r(uHr,"PoolFormerConfig"),uHr.forEach(t),gJe=r(ywe," (PoolFormer model)"),ywe.forEach(t),hJe=i(L),Nm=n(L,"LI",{});var xwe=s(Nm);pte=n(xwe,"STRONG",{});var bHr=s(pte);pJe=r(bHr,"prophetnet"),bHr.forEach(t),_Je=r(xwe," \u2014 "),kS=n(xwe,"A",{href:!0});var vHr=s(kS);uJe=r(vHr,"ProphetNetConfig"),vHr.forEach(t),bJe=r(xwe," (ProphetNet model)"),xwe.forEach(t),vJe=i(L),qm=n(L,"LI",{});var $we=s(qm);_te=n($we,"STRONG",{});var FHr=s(_te);FJe=r(FHr,"qdqbert"),FHr.forEach(t),TJe=r($we," \u2014 "),SS=n($we,"A",{href:!0});var THr=s(SS);MJe=r(THr,"QDQBertConfig"),THr.forEach(t),EJe=r($we," (QDQBert model)"),$we.forEach(t),CJe=i(L),jm=n(L,"LI",{});var kwe=s(jm);ute=n(kwe,"STRONG",{});var MHr=s(ute);wJe=r(MHr,"rag"),MHr.forEach(t),AJe=r(kwe," \u2014 "),RS=n(kwe,"A",{href:!0});var EHr=s(RS);LJe=r(EHr,"RagConfig"),EHr.forEach(t),yJe=r(kwe," (RAG model)"),kwe.forEach(t),xJe=i(L),Dm=n(L,"LI",{});var Swe=s(Dm);bte=n(Swe,"STRONG",{});var CHr=s(bte);$Je=r(CHr,"realm"),CHr.forEach(t),kJe=r(Swe," \u2014 "),PS=n(Swe,"A",{href:!0});var wHr=s(PS);SJe=r(wHr,"RealmConfig"),wHr.forEach(t),RJe=r(Swe," (REALM model)"),Swe.forEach(t),PJe=i(L),Gm=n(L,"LI",{});var Rwe=s(Gm);vte=n(Rwe,"STRONG",{});var AHr=s(vte);BJe=r(AHr,"reformer"),AHr.forEach(t),IJe=r(Rwe," \u2014 "),BS=n(Rwe,"A",{href:!0});var LHr=s(BS);NJe=r(LHr,"ReformerConfig"),LHr.forEach(t),qJe=r(Rwe," (Reformer model)"),Rwe.forEach(t),jJe=i(L),Om=n(L,"LI",{});var Pwe=s(Om);Fte=n(Pwe,"STRONG",{});var yHr=s(Fte);DJe=r(yHr,"regnet"),yHr.forEach(t),GJe=r(Pwe," \u2014 "),IS=n(Pwe,"A",{href:!0});var xHr=s(IS);OJe=r(xHr,"RegNetConfig"),xHr.forEach(t),VJe=r(Pwe," (RegNet model)"),Pwe.forEach(t),XJe=i(L),Vm=n(L,"LI",{});var Bwe=s(Vm);Tte=n(Bwe,"STRONG",{});var $Hr=s(Tte);zJe=r($Hr,"rembert"),$Hr.forEach(t),WJe=r(Bwe," \u2014 "),NS=n(Bwe,"A",{href:!0});var kHr=s(NS);QJe=r(kHr,"RemBertConfig"),kHr.forEach(t),HJe=r(Bwe," (RemBERT model)"),Bwe.forEach(t),UJe=i(L),Xm=n(L,"LI",{});var Iwe=s(Xm);Mte=n(Iwe,"STRONG",{});var SHr=s(Mte);JJe=r(SHr,"resnet"),SHr.forEach(t),YJe=r(Iwe," \u2014 "),qS=n(Iwe,"A",{href:!0});var RHr=s(qS);KJe=r(RHr,"ResNetConfig"),RHr.forEach(t),ZJe=r(Iwe," (ResNet model)"),Iwe.forEach(t),eYe=i(L),zm=n(L,"LI",{});var Nwe=s(zm);Ete=n(Nwe,"STRONG",{});var PHr=s(Ete);oYe=r(PHr,"retribert"),PHr.forEach(t),rYe=r(Nwe," \u2014 "),jS=n(Nwe,"A",{href:!0});var BHr=s(jS);tYe=r(BHr,"RetriBertConfig"),BHr.forEach(t),aYe=r(Nwe," (RetriBERT model)"),Nwe.forEach(t),nYe=i(L),Wm=n(L,"LI",{});var qwe=s(Wm);Cte=n(qwe,"STRONG",{});var IHr=s(Cte);sYe=r(IHr,"roberta"),IHr.forEach(t),lYe=r(qwe," \u2014 "),DS=n(qwe,"A",{href:!0});var NHr=s(DS);iYe=r(NHr,"RobertaConfig"),NHr.forEach(t),dYe=r(qwe," (RoBERTa model)"),qwe.forEach(t),cYe=i(L),Qm=n(L,"LI",{});var jwe=s(Qm);wte=n(jwe,"STRONG",{});var qHr=s(wte);fYe=r(qHr,"roformer"),qHr.forEach(t),mYe=r(jwe," \u2014 "),GS=n(jwe,"A",{href:!0});var jHr=s(GS);gYe=r(jHr,"RoFormerConfig"),jHr.forEach(t),hYe=r(jwe," (RoFormer model)"),jwe.forEach(t),pYe=i(L),Hm=n(L,"LI",{});var Dwe=s(Hm);Ate=n(Dwe,"STRONG",{});var DHr=s(Ate);_Ye=r(DHr,"segformer"),DHr.forEach(t),uYe=r(Dwe," \u2014 "),OS=n(Dwe,"A",{href:!0});var GHr=s(OS);bYe=r(GHr,"SegformerConfig"),GHr.forEach(t),vYe=r(Dwe," (SegFormer model)"),Dwe.forEach(t),FYe=i(L),Um=n(L,"LI",{});var Gwe=s(Um);Lte=n(Gwe,"STRONG",{});var OHr=s(Lte);TYe=r(OHr,"sew"),OHr.forEach(t),MYe=r(Gwe," \u2014 "),VS=n(Gwe,"A",{href:!0});var VHr=s(VS);EYe=r(VHr,"SEWConfig"),VHr.forEach(t),CYe=r(Gwe," (SEW model)"),Gwe.forEach(t),wYe=i(L),Jm=n(L,"LI",{});var Owe=s(Jm);yte=n(Owe,"STRONG",{});var XHr=s(yte);AYe=r(XHr,"sew-d"),XHr.forEach(t),LYe=r(Owe," \u2014 "),XS=n(Owe,"A",{href:!0});var zHr=s(XS);yYe=r(zHr,"SEWDConfig"),zHr.forEach(t),xYe=r(Owe," (SEW-D model)"),Owe.forEach(t),$Ye=i(L),Ym=n(L,"LI",{});var Vwe=s(Ym);xte=n(Vwe,"STRONG",{});var WHr=s(xte);kYe=r(WHr,"speech-encoder-decoder"),WHr.forEach(t),SYe=r(Vwe," \u2014 "),zS=n(Vwe,"A",{href:!0});var QHr=s(zS);RYe=r(QHr,"SpeechEncoderDecoderConfig"),QHr.forEach(t),PYe=r(Vwe," (Speech Encoder decoder model)"),Vwe.forEach(t),BYe=i(L),Km=n(L,"LI",{});var Xwe=s(Km);$te=n(Xwe,"STRONG",{});var HHr=s($te);IYe=r(HHr,"speech_to_text"),HHr.forEach(t),NYe=r(Xwe," \u2014 "),WS=n(Xwe,"A",{href:!0});var UHr=s(WS);qYe=r(UHr,"Speech2TextConfig"),UHr.forEach(t),jYe=r(Xwe," (Speech2Text model)"),Xwe.forEach(t),DYe=i(L),Zm=n(L,"LI",{});var zwe=s(Zm);kte=n(zwe,"STRONG",{});var JHr=s(kte);GYe=r(JHr,"speech_to_text_2"),JHr.forEach(t),OYe=r(zwe," \u2014 "),QS=n(zwe,"A",{href:!0});var YHr=s(QS);VYe=r(YHr,"Speech2Text2Config"),YHr.forEach(t),XYe=r(zwe," (Speech2Text2 model)"),zwe.forEach(t),zYe=i(L),eg=n(L,"LI",{});var Wwe=s(eg);Ste=n(Wwe,"STRONG",{});var KHr=s(Ste);WYe=r(KHr,"splinter"),KHr.forEach(t),QYe=r(Wwe," \u2014 "),HS=n(Wwe,"A",{href:!0});var ZHr=s(HS);HYe=r(ZHr,"SplinterConfig"),ZHr.forEach(t),UYe=r(Wwe," (Splinter model)"),Wwe.forEach(t),JYe=i(L),og=n(L,"LI",{});var Qwe=s(og);Rte=n(Qwe,"STRONG",{});var eUr=s(Rte);YYe=r(eUr,"squeezebert"),eUr.forEach(t),KYe=r(Qwe," \u2014 "),US=n(Qwe,"A",{href:!0});var oUr=s(US);ZYe=r(oUr,"SqueezeBertConfig"),oUr.forEach(t),eKe=r(Qwe," (SqueezeBERT model)"),Qwe.forEach(t),oKe=i(L),rg=n(L,"LI",{});var Hwe=s(rg);Pte=n(Hwe,"STRONG",{});var rUr=s(Pte);rKe=r(rUr,"swin"),rUr.forEach(t),tKe=r(Hwe," \u2014 "),JS=n(Hwe,"A",{href:!0});var tUr=s(JS);aKe=r(tUr,"SwinConfig"),tUr.forEach(t),nKe=r(Hwe," (Swin Transformer model)"),Hwe.forEach(t),sKe=i(L),tg=n(L,"LI",{});var Uwe=s(tg);Bte=n(Uwe,"STRONG",{});var aUr=s(Bte);lKe=r(aUr,"t5"),aUr.forEach(t),iKe=r(Uwe," \u2014 "),YS=n(Uwe,"A",{href:!0});var nUr=s(YS);dKe=r(nUr,"T5Config"),nUr.forEach(t),cKe=r(Uwe," (T5 model)"),Uwe.forEach(t),fKe=i(L),ag=n(L,"LI",{});var Jwe=s(ag);Ite=n(Jwe,"STRONG",{});var sUr=s(Ite);mKe=r(sUr,"tapas"),sUr.forEach(t),gKe=r(Jwe," \u2014 "),KS=n(Jwe,"A",{href:!0});var lUr=s(KS);hKe=r(lUr,"TapasConfig"),lUr.forEach(t),pKe=r(Jwe," (TAPAS model)"),Jwe.forEach(t),_Ke=i(L),ng=n(L,"LI",{});var Ywe=s(ng);Nte=n(Ywe,"STRONG",{});var iUr=s(Nte);uKe=r(iUr,"trajectory_transformer"),iUr.forEach(t),bKe=r(Ywe," \u2014 "),ZS=n(Ywe,"A",{href:!0});var dUr=s(ZS);vKe=r(dUr,"TrajectoryTransformerConfig"),dUr.forEach(t),FKe=r(Ywe," (Trajectory Transformer model)"),Ywe.forEach(t),TKe=i(L),sg=n(L,"LI",{});var Kwe=s(sg);qte=n(Kwe,"STRONG",{});var cUr=s(qte);MKe=r(cUr,"transfo-xl"),cUr.forEach(t),EKe=r(Kwe," \u2014 "),eR=n(Kwe,"A",{href:!0});var fUr=s(eR);CKe=r(fUr,"TransfoXLConfig"),fUr.forEach(t),wKe=r(Kwe," (Transformer-XL model)"),Kwe.forEach(t),AKe=i(L),lg=n(L,"LI",{});var Zwe=s(lg);jte=n(Zwe,"STRONG",{});var mUr=s(jte);LKe=r(mUr,"trocr"),mUr.forEach(t),yKe=r(Zwe," \u2014 "),oR=n(Zwe,"A",{href:!0});var gUr=s(oR);xKe=r(gUr,"TrOCRConfig"),gUr.forEach(t),$Ke=r(Zwe," (TrOCR model)"),Zwe.forEach(t),kKe=i(L),ig=n(L,"LI",{});var eAe=s(ig);Dte=n(eAe,"STRONG",{});var hUr=s(Dte);SKe=r(hUr,"unispeech"),hUr.forEach(t),RKe=r(eAe," \u2014 "),rR=n(eAe,"A",{href:!0});var pUr=s(rR);PKe=r(pUr,"UniSpeechConfig"),pUr.forEach(t),BKe=r(eAe," (UniSpeech model)"),eAe.forEach(t),IKe=i(L),dg=n(L,"LI",{});var oAe=s(dg);Gte=n(oAe,"STRONG",{});var _Ur=s(Gte);NKe=r(_Ur,"unispeech-sat"),_Ur.forEach(t),qKe=r(oAe," \u2014 "),tR=n(oAe,"A",{href:!0});var uUr=s(tR);jKe=r(uUr,"UniSpeechSatConfig"),uUr.forEach(t),DKe=r(oAe," (UniSpeechSat model)"),oAe.forEach(t),GKe=i(L),cg=n(L,"LI",{});var rAe=s(cg);Ote=n(rAe,"STRONG",{});var bUr=s(Ote);OKe=r(bUr,"van"),bUr.forEach(t),VKe=r(rAe," \u2014 "),aR=n(rAe,"A",{href:!0});var vUr=s(aR);XKe=r(vUr,"VanConfig"),vUr.forEach(t),zKe=r(rAe," (VAN model)"),rAe.forEach(t),WKe=i(L),fg=n(L,"LI",{});var tAe=s(fg);Vte=n(tAe,"STRONG",{});var FUr=s(Vte);QKe=r(FUr,"vilt"),FUr.forEach(t),HKe=r(tAe," \u2014 "),nR=n(tAe,"A",{href:!0});var TUr=s(nR);UKe=r(TUr,"ViltConfig"),TUr.forEach(t),JKe=r(tAe," (ViLT model)"),tAe.forEach(t),YKe=i(L),mg=n(L,"LI",{});var aAe=s(mg);Xte=n(aAe,"STRONG",{});var MUr=s(Xte);KKe=r(MUr,"vision-encoder-decoder"),MUr.forEach(t),ZKe=r(aAe," \u2014 "),sR=n(aAe,"A",{href:!0});var EUr=s(sR);eZe=r(EUr,"VisionEncoderDecoderConfig"),EUr.forEach(t),oZe=r(aAe," (Vision Encoder decoder model)"),aAe.forEach(t),rZe=i(L),gg=n(L,"LI",{});var nAe=s(gg);zte=n(nAe,"STRONG",{});var CUr=s(zte);tZe=r(CUr,"vision-text-dual-encoder"),CUr.forEach(t),aZe=r(nAe," \u2014 "),lR=n(nAe,"A",{href:!0});var wUr=s(lR);nZe=r(wUr,"VisionTextDualEncoderConfig"),wUr.forEach(t),sZe=r(nAe," (VisionTextDualEncoder model)"),nAe.forEach(t),lZe=i(L),hg=n(L,"LI",{});var sAe=s(hg);Wte=n(sAe,"STRONG",{});var AUr=s(Wte);iZe=r(AUr,"visual_bert"),AUr.forEach(t),dZe=r(sAe," \u2014 "),iR=n(sAe,"A",{href:!0});var LUr=s(iR);cZe=r(LUr,"VisualBertConfig"),LUr.forEach(t),fZe=r(sAe," (VisualBERT model)"),sAe.forEach(t),mZe=i(L),pg=n(L,"LI",{});var lAe=s(pg);Qte=n(lAe,"STRONG",{});var yUr=s(Qte);gZe=r(yUr,"vit"),yUr.forEach(t),hZe=r(lAe," \u2014 "),dR=n(lAe,"A",{href:!0});var xUr=s(dR);pZe=r(xUr,"ViTConfig"),xUr.forEach(t),_Ze=r(lAe," (ViT model)"),lAe.forEach(t),uZe=i(L),_g=n(L,"LI",{});var iAe=s(_g);Hte=n(iAe,"STRONG",{});var $Ur=s(Hte);bZe=r($Ur,"vit_mae"),$Ur.forEach(t),vZe=r(iAe," \u2014 "),cR=n(iAe,"A",{href:!0});var kUr=s(cR);FZe=r(kUr,"ViTMAEConfig"),kUr.forEach(t),TZe=r(iAe," (ViTMAE model)"),iAe.forEach(t),MZe=i(L),ug=n(L,"LI",{});var dAe=s(ug);Ute=n(dAe,"STRONG",{});var SUr=s(Ute);EZe=r(SUr,"wav2vec2"),SUr.forEach(t),CZe=r(dAe," \u2014 "),fR=n(dAe,"A",{href:!0});var RUr=s(fR);wZe=r(RUr,"Wav2Vec2Config"),RUr.forEach(t),AZe=r(dAe," (Wav2Vec2 model)"),dAe.forEach(t),LZe=i(L),bg=n(L,"LI",{});var cAe=s(bg);Jte=n(cAe,"STRONG",{});var PUr=s(Jte);yZe=r(PUr,"wav2vec2-conformer"),PUr.forEach(t),xZe=r(cAe," \u2014 "),mR=n(cAe,"A",{href:!0});var BUr=s(mR);$Ze=r(BUr,"Wav2Vec2ConformerConfig"),BUr.forEach(t),kZe=r(cAe," (Wav2Vec2-Conformer model)"),cAe.forEach(t),SZe=i(L),vg=n(L,"LI",{});var fAe=s(vg);Yte=n(fAe,"STRONG",{});var IUr=s(Yte);RZe=r(IUr,"wavlm"),IUr.forEach(t),PZe=r(fAe," \u2014 "),gR=n(fAe,"A",{href:!0});var NUr=s(gR);BZe=r(NUr,"WavLMConfig"),NUr.forEach(t),IZe=r(fAe," (WavLM model)"),fAe.forEach(t),NZe=i(L),Fg=n(L,"LI",{});var mAe=s(Fg);Kte=n(mAe,"STRONG",{});var qUr=s(Kte);qZe=r(qUr,"xglm"),qUr.forEach(t),jZe=r(mAe," \u2014 "),hR=n(mAe,"A",{href:!0});var jUr=s(hR);DZe=r(jUr,"XGLMConfig"),jUr.forEach(t),GZe=r(mAe," (XGLM model)"),mAe.forEach(t),OZe=i(L),Tg=n(L,"LI",{});var gAe=s(Tg);Zte=n(gAe,"STRONG",{});var DUr=s(Zte);VZe=r(DUr,"xlm"),DUr.forEach(t),XZe=r(gAe," \u2014 "),pR=n(gAe,"A",{href:!0});var GUr=s(pR);zZe=r(GUr,"XLMConfig"),GUr.forEach(t),WZe=r(gAe," (XLM model)"),gAe.forEach(t),QZe=i(L),Mg=n(L,"LI",{});var hAe=s(Mg);eae=n(hAe,"STRONG",{});var OUr=s(eae);HZe=r(OUr,"xlm-prophetnet"),OUr.forEach(t),UZe=r(hAe," \u2014 "),_R=n(hAe,"A",{href:!0});var VUr=s(_R);JZe=r(VUr,"XLMProphetNetConfig"),VUr.forEach(t),YZe=r(hAe," (XLM-ProphetNet model)"),hAe.forEach(t),KZe=i(L),Eg=n(L,"LI",{});var pAe=s(Eg);oae=n(pAe,"STRONG",{});var XUr=s(oae);ZZe=r(XUr,"xlm-roberta"),XUr.forEach(t),eeo=r(pAe," \u2014 "),uR=n(pAe,"A",{href:!0});var zUr=s(uR);oeo=r(zUr,"XLMRobertaConfig"),zUr.forEach(t),reo=r(pAe," (XLM-RoBERTa model)"),pAe.forEach(t),teo=i(L),Cg=n(L,"LI",{});var _Ae=s(Cg);rae=n(_Ae,"STRONG",{});var WUr=s(rae);aeo=r(WUr,"xlm-roberta-xl"),WUr.forEach(t),neo=r(_Ae," \u2014 "),bR=n(_Ae,"A",{href:!0});var QUr=s(bR);seo=r(QUr,"XLMRobertaXLConfig"),QUr.forEach(t),leo=r(_Ae," (XLM-RoBERTa-XL model)"),_Ae.forEach(t),ieo=i(L),wg=n(L,"LI",{});var uAe=s(wg);tae=n(uAe,"STRONG",{});var HUr=s(tae);deo=r(HUr,"xlnet"),HUr.forEach(t),ceo=r(uAe," \u2014 "),vR=n(uAe,"A",{href:!0});var UUr=s(vR);feo=r(UUr,"XLNetConfig"),UUr.forEach(t),meo=r(uAe," (XLNet model)"),uAe.forEach(t),geo=i(L),Ag=n(L,"LI",{});var bAe=s(Ag);aae=n(bAe,"STRONG",{});var JUr=s(aae);heo=r(JUr,"yolos"),JUr.forEach(t),peo=r(bAe," \u2014 "),FR=n(bAe,"A",{href:!0});var YUr=s(FR);_eo=r(YUr,"YolosConfig"),YUr.forEach(t),ueo=r(bAe," (YOLOS model)"),bAe.forEach(t),beo=i(L),Lg=n(L,"LI",{});var vAe=s(Lg);nae=n(vAe,"STRONG",{});var KUr=s(nae);veo=r(KUr,"yoso"),KUr.forEach(t),Feo=r(vAe," \u2014 "),TR=n(vAe,"A",{href:!0});var ZUr=s(TR);Teo=r(ZUr,"YosoConfig"),ZUr.forEach(t),Meo=r(vAe," (YOSO model)"),vAe.forEach(t),L.forEach(t),Eeo=i(ot),T(yg.$$.fragment,ot),ot.forEach(t),Ceo=i(et),xg=n(et,"DIV",{class:!0});var MGe=s(xg);T(K6.$$.fragment,MGe),weo=i(MGe),sae=n(MGe,"P",{});var eJr=s(sae);Aeo=r(eJr,"Register a new configuration for this class."),eJr.forEach(t),MGe.forEach(t),et.forEach(t),wje=i(f),Ei=n(f,"H2",{class:!0});var EGe=s(Ei);$g=n(EGe,"A",{id:!0,class:!0,href:!0});var oJr=s($g);lae=n(oJr,"SPAN",{});var rJr=s(lae);T(Z6.$$.fragment,rJr),rJr.forEach(t),oJr.forEach(t),Leo=i(EGe),iae=n(EGe,"SPAN",{});var tJr=s(iae);yeo=r(tJr,"AutoTokenizer"),tJr.forEach(t),EGe.forEach(t),Aje=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(eL.$$.fragment,js),xeo=i(js),oL=n(js,"P",{});var CGe=s(oL);$eo=r(CGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MR=n(CGe,"A",{href:!0});var aJr=s(MR);keo=r(aJr,"AutoTokenizer.from_pretrained()"),aJr.forEach(t),Seo=r(CGe," class method."),CGe.forEach(t),Reo=i(js),rL=n(js,"P",{});var wGe=s(rL);Peo=r(wGe,"This class cannot be instantiated directly using "),dae=n(wGe,"CODE",{});var nJr=s(dae);Beo=r(nJr,"__init__()"),nJr.forEach(t),Ieo=r(wGe," (throws an error)."),wGe.forEach(t),Neo=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(tL.$$.fragment,Ds),qeo=i(Ds),cae=n(Ds,"P",{});var sJr=s(cae);jeo=r(sJr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sJr.forEach(t),Deo=i(Ds),Aa=n(Ds,"P",{});var Qw=s(Aa);Geo=r(Qw,"The tokenizer class to instantiate is selected based on the "),fae=n(Qw,"CODE",{});var lJr=s(fae);Oeo=r(lJr,"model_type"),lJr.forEach(t),Veo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),mae=n(Qw,"CODE",{});var iJr=s(mae);Xeo=r(iJr,"pretrained_model_name_or_path"),iJr.forEach(t),zeo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=n(Qw,"CODE",{});var dJr=s(gae);Weo=r(dJr,"pretrained_model_name_or_path"),dJr.forEach(t),Qeo=r(Qw,":"),Qw.forEach(t),Heo=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var a$=s(Sn);hae=n(a$,"STRONG",{});var cJr=s(hae);Ueo=r(cJr,"albert"),cJr.forEach(t),Jeo=r(a$," \u2014 "),ER=n(a$,"A",{href:!0});var fJr=s(ER);Yeo=r(fJr,"AlbertTokenizer"),fJr.forEach(t),Keo=r(a$," or "),CR=n(a$,"A",{href:!0});var mJr=s(CR);Zeo=r(mJr,"AlbertTokenizerFast"),mJr.forEach(t),eoo=r(a$," (ALBERT model)"),a$.forEach(t),ooo=i(S),Rn=n(S,"LI",{});var n$=s(Rn);pae=n(n$,"STRONG",{});var gJr=s(pae);roo=r(gJr,"bart"),gJr.forEach(t),too=r(n$," \u2014 "),wR=n(n$,"A",{href:!0});var hJr=s(wR);aoo=r(hJr,"BartTokenizer"),hJr.forEach(t),noo=r(n$," or "),AR=n(n$,"A",{href:!0});var pJr=s(AR);soo=r(pJr,"BartTokenizerFast"),pJr.forEach(t),loo=r(n$," (BART model)"),n$.forEach(t),ioo=i(S),Pn=n(S,"LI",{});var s$=s(Pn);_ae=n(s$,"STRONG",{});var _Jr=s(_ae);doo=r(_Jr,"barthez"),_Jr.forEach(t),coo=r(s$," \u2014 "),LR=n(s$,"A",{href:!0});var uJr=s(LR);foo=r(uJr,"BarthezTokenizer"),uJr.forEach(t),moo=r(s$," or "),yR=n(s$,"A",{href:!0});var bJr=s(yR);goo=r(bJr,"BarthezTokenizerFast"),bJr.forEach(t),hoo=r(s$," (BARThez model)"),s$.forEach(t),poo=i(S),kg=n(S,"LI",{});var FAe=s(kg);uae=n(FAe,"STRONG",{});var vJr=s(uae);_oo=r(vJr,"bartpho"),vJr.forEach(t),uoo=r(FAe," \u2014 "),xR=n(FAe,"A",{href:!0});var FJr=s(xR);boo=r(FJr,"BartphoTokenizer"),FJr.forEach(t),voo=r(FAe," (BARTpho model)"),FAe.forEach(t),Foo=i(S),Bn=n(S,"LI",{});var l$=s(Bn);bae=n(l$,"STRONG",{});var TJr=s(bae);Too=r(TJr,"bert"),TJr.forEach(t),Moo=r(l$," \u2014 "),$R=n(l$,"A",{href:!0});var MJr=s($R);Eoo=r(MJr,"BertTokenizer"),MJr.forEach(t),Coo=r(l$," or "),kR=n(l$,"A",{href:!0});var EJr=s(kR);woo=r(EJr,"BertTokenizerFast"),EJr.forEach(t),Aoo=r(l$," (BERT model)"),l$.forEach(t),Loo=i(S),Sg=n(S,"LI",{});var TAe=s(Sg);vae=n(TAe,"STRONG",{});var CJr=s(vae);yoo=r(CJr,"bert-generation"),CJr.forEach(t),xoo=r(TAe," \u2014 "),SR=n(TAe,"A",{href:!0});var wJr=s(SR);$oo=r(wJr,"BertGenerationTokenizer"),wJr.forEach(t),koo=r(TAe," (Bert Generation model)"),TAe.forEach(t),Soo=i(S),Rg=n(S,"LI",{});var MAe=s(Rg);Fae=n(MAe,"STRONG",{});var AJr=s(Fae);Roo=r(AJr,"bert-japanese"),AJr.forEach(t),Poo=r(MAe," \u2014 "),RR=n(MAe,"A",{href:!0});var LJr=s(RR);Boo=r(LJr,"BertJapaneseTokenizer"),LJr.forEach(t),Ioo=r(MAe," (BertJapanese model)"),MAe.forEach(t),Noo=i(S),Pg=n(S,"LI",{});var EAe=s(Pg);Tae=n(EAe,"STRONG",{});var yJr=s(Tae);qoo=r(yJr,"bertweet"),yJr.forEach(t),joo=r(EAe," \u2014 "),PR=n(EAe,"A",{href:!0});var xJr=s(PR);Doo=r(xJr,"BertweetTokenizer"),xJr.forEach(t),Goo=r(EAe," (BERTweet model)"),EAe.forEach(t),Ooo=i(S),In=n(S,"LI",{});var i$=s(In);Mae=n(i$,"STRONG",{});var $Jr=s(Mae);Voo=r($Jr,"big_bird"),$Jr.forEach(t),Xoo=r(i$," \u2014 "),BR=n(i$,"A",{href:!0});var kJr=s(BR);zoo=r(kJr,"BigBirdTokenizer"),kJr.forEach(t),Woo=r(i$," or "),IR=n(i$,"A",{href:!0});var SJr=s(IR);Qoo=r(SJr,"BigBirdTokenizerFast"),SJr.forEach(t),Hoo=r(i$," (BigBird model)"),i$.forEach(t),Uoo=i(S),Nn=n(S,"LI",{});var d$=s(Nn);Eae=n(d$,"STRONG",{});var RJr=s(Eae);Joo=r(RJr,"bigbird_pegasus"),RJr.forEach(t),Yoo=r(d$," \u2014 "),NR=n(d$,"A",{href:!0});var PJr=s(NR);Koo=r(PJr,"PegasusTokenizer"),PJr.forEach(t),Zoo=r(d$," or "),qR=n(d$,"A",{href:!0});var BJr=s(qR);ero=r(BJr,"PegasusTokenizerFast"),BJr.forEach(t),oro=r(d$," (BigBird-Pegasus model)"),d$.forEach(t),rro=i(S),qn=n(S,"LI",{});var c$=s(qn);Cae=n(c$,"STRONG",{});var IJr=s(Cae);tro=r(IJr,"blenderbot"),IJr.forEach(t),aro=r(c$," \u2014 "),jR=n(c$,"A",{href:!0});var NJr=s(jR);nro=r(NJr,"BlenderbotTokenizer"),NJr.forEach(t),sro=r(c$," or "),DR=n(c$,"A",{href:!0});var qJr=s(DR);lro=r(qJr,"BlenderbotTokenizerFast"),qJr.forEach(t),iro=r(c$," (Blenderbot model)"),c$.forEach(t),dro=i(S),Bg=n(S,"LI",{});var CAe=s(Bg);wae=n(CAe,"STRONG",{});var jJr=s(wae);cro=r(jJr,"blenderbot-small"),jJr.forEach(t),fro=r(CAe," \u2014 "),GR=n(CAe,"A",{href:!0});var DJr=s(GR);mro=r(DJr,"BlenderbotSmallTokenizer"),DJr.forEach(t),gro=r(CAe," (BlenderbotSmall model)"),CAe.forEach(t),hro=i(S),Ig=n(S,"LI",{});var wAe=s(Ig);Aae=n(wAe,"STRONG",{});var GJr=s(Aae);pro=r(GJr,"byt5"),GJr.forEach(t),_ro=r(wAe," \u2014 "),OR=n(wAe,"A",{href:!0});var OJr=s(OR);uro=r(OJr,"ByT5Tokenizer"),OJr.forEach(t),bro=r(wAe," (ByT5 model)"),wAe.forEach(t),vro=i(S),jn=n(S,"LI",{});var f$=s(jn);Lae=n(f$,"STRONG",{});var VJr=s(Lae);Fro=r(VJr,"camembert"),VJr.forEach(t),Tro=r(f$," \u2014 "),VR=n(f$,"A",{href:!0});var XJr=s(VR);Mro=r(XJr,"CamembertTokenizer"),XJr.forEach(t),Ero=r(f$," or "),XR=n(f$,"A",{href:!0});var zJr=s(XR);Cro=r(zJr,"CamembertTokenizerFast"),zJr.forEach(t),wro=r(f$," (CamemBERT model)"),f$.forEach(t),Aro=i(S),Ng=n(S,"LI",{});var AAe=s(Ng);yae=n(AAe,"STRONG",{});var WJr=s(yae);Lro=r(WJr,"canine"),WJr.forEach(t),yro=r(AAe," \u2014 "),zR=n(AAe,"A",{href:!0});var QJr=s(zR);xro=r(QJr,"CanineTokenizer"),QJr.forEach(t),$ro=r(AAe," (CANINE model)"),AAe.forEach(t),kro=i(S),Dn=n(S,"LI",{});var m$=s(Dn);xae=n(m$,"STRONG",{});var HJr=s(xae);Sro=r(HJr,"clip"),HJr.forEach(t),Rro=r(m$," \u2014 "),WR=n(m$,"A",{href:!0});var UJr=s(WR);Pro=r(UJr,"CLIPTokenizer"),UJr.forEach(t),Bro=r(m$," or "),QR=n(m$,"A",{href:!0});var JJr=s(QR);Iro=r(JJr,"CLIPTokenizerFast"),JJr.forEach(t),Nro=r(m$," (CLIP model)"),m$.forEach(t),qro=i(S),Gn=n(S,"LI",{});var g$=s(Gn);$ae=n(g$,"STRONG",{});var YJr=s($ae);jro=r(YJr,"convbert"),YJr.forEach(t),Dro=r(g$," \u2014 "),HR=n(g$,"A",{href:!0});var KJr=s(HR);Gro=r(KJr,"ConvBertTokenizer"),KJr.forEach(t),Oro=r(g$," or "),UR=n(g$,"A",{href:!0});var ZJr=s(UR);Vro=r(ZJr,"ConvBertTokenizerFast"),ZJr.forEach(t),Xro=r(g$," (ConvBERT model)"),g$.forEach(t),zro=i(S),On=n(S,"LI",{});var h$=s(On);kae=n(h$,"STRONG",{});var eYr=s(kae);Wro=r(eYr,"cpm"),eYr.forEach(t),Qro=r(h$," \u2014 "),JR=n(h$,"A",{href:!0});var oYr=s(JR);Hro=r(oYr,"CpmTokenizer"),oYr.forEach(t),Uro=r(h$," or "),YR=n(h$,"A",{href:!0});var rYr=s(YR);Jro=r(rYr,"CpmTokenizerFast"),rYr.forEach(t),Yro=r(h$," (CPM model)"),h$.forEach(t),Kro=i(S),qg=n(S,"LI",{});var LAe=s(qg);Sae=n(LAe,"STRONG",{});var tYr=s(Sae);Zro=r(tYr,"ctrl"),tYr.forEach(t),eto=r(LAe," \u2014 "),KR=n(LAe,"A",{href:!0});var aYr=s(KR);oto=r(aYr,"CTRLTokenizer"),aYr.forEach(t),rto=r(LAe," (CTRL model)"),LAe.forEach(t),tto=i(S),Vn=n(S,"LI",{});var p$=s(Vn);Rae=n(p$,"STRONG",{});var nYr=s(Rae);ato=r(nYr,"data2vec-text"),nYr.forEach(t),nto=r(p$," \u2014 "),ZR=n(p$,"A",{href:!0});var sYr=s(ZR);sto=r(sYr,"RobertaTokenizer"),sYr.forEach(t),lto=r(p$," or "),eP=n(p$,"A",{href:!0});var lYr=s(eP);ito=r(lYr,"RobertaTokenizerFast"),lYr.forEach(t),dto=r(p$," (Data2VecText model)"),p$.forEach(t),cto=i(S),Xn=n(S,"LI",{});var _$=s(Xn);Pae=n(_$,"STRONG",{});var iYr=s(Pae);fto=r(iYr,"deberta"),iYr.forEach(t),mto=r(_$," \u2014 "),oP=n(_$,"A",{href:!0});var dYr=s(oP);gto=r(dYr,"DebertaTokenizer"),dYr.forEach(t),hto=r(_$," or "),rP=n(_$,"A",{href:!0});var cYr=s(rP);pto=r(cYr,"DebertaTokenizerFast"),cYr.forEach(t),_to=r(_$," (DeBERTa model)"),_$.forEach(t),uto=i(S),zn=n(S,"LI",{});var u$=s(zn);Bae=n(u$,"STRONG",{});var fYr=s(Bae);bto=r(fYr,"deberta-v2"),fYr.forEach(t),vto=r(u$," \u2014 "),tP=n(u$,"A",{href:!0});var mYr=s(tP);Fto=r(mYr,"DebertaV2Tokenizer"),mYr.forEach(t),Tto=r(u$," or "),aP=n(u$,"A",{href:!0});var gYr=s(aP);Mto=r(gYr,"DebertaV2TokenizerFast"),gYr.forEach(t),Eto=r(u$," (DeBERTa-v2 model)"),u$.forEach(t),Cto=i(S),Wn=n(S,"LI",{});var b$=s(Wn);Iae=n(b$,"STRONG",{});var hYr=s(Iae);wto=r(hYr,"distilbert"),hYr.forEach(t),Ato=r(b$," \u2014 "),nP=n(b$,"A",{href:!0});var pYr=s(nP);Lto=r(pYr,"DistilBertTokenizer"),pYr.forEach(t),yto=r(b$," or "),sP=n(b$,"A",{href:!0});var _Yr=s(sP);xto=r(_Yr,"DistilBertTokenizerFast"),_Yr.forEach(t),$to=r(b$," (DistilBERT model)"),b$.forEach(t),kto=i(S),Qn=n(S,"LI",{});var v$=s(Qn);Nae=n(v$,"STRONG",{});var uYr=s(Nae);Sto=r(uYr,"dpr"),uYr.forEach(t),Rto=r(v$," \u2014 "),lP=n(v$,"A",{href:!0});var bYr=s(lP);Pto=r(bYr,"DPRQuestionEncoderTokenizer"),bYr.forEach(t),Bto=r(v$," or "),iP=n(v$,"A",{href:!0});var vYr=s(iP);Ito=r(vYr,"DPRQuestionEncoderTokenizerFast"),vYr.forEach(t),Nto=r(v$," (DPR model)"),v$.forEach(t),qto=i(S),Hn=n(S,"LI",{});var F$=s(Hn);qae=n(F$,"STRONG",{});var FYr=s(qae);jto=r(FYr,"electra"),FYr.forEach(t),Dto=r(F$," \u2014 "),dP=n(F$,"A",{href:!0});var TYr=s(dP);Gto=r(TYr,"ElectraTokenizer"),TYr.forEach(t),Oto=r(F$," or "),cP=n(F$,"A",{href:!0});var MYr=s(cP);Vto=r(MYr,"ElectraTokenizerFast"),MYr.forEach(t),Xto=r(F$," (ELECTRA model)"),F$.forEach(t),zto=i(S),jg=n(S,"LI",{});var yAe=s(jg);jae=n(yAe,"STRONG",{});var EYr=s(jae);Wto=r(EYr,"flaubert"),EYr.forEach(t),Qto=r(yAe," \u2014 "),fP=n(yAe,"A",{href:!0});var CYr=s(fP);Hto=r(CYr,"FlaubertTokenizer"),CYr.forEach(t),Uto=r(yAe," (FlauBERT model)"),yAe.forEach(t),Jto=i(S),Un=n(S,"LI",{});var T$=s(Un);Dae=n(T$,"STRONG",{});var wYr=s(Dae);Yto=r(wYr,"fnet"),wYr.forEach(t),Kto=r(T$," \u2014 "),mP=n(T$,"A",{href:!0});var AYr=s(mP);Zto=r(AYr,"FNetTokenizer"),AYr.forEach(t),eao=r(T$," or "),gP=n(T$,"A",{href:!0});var LYr=s(gP);oao=r(LYr,"FNetTokenizerFast"),LYr.forEach(t),rao=r(T$," (FNet model)"),T$.forEach(t),tao=i(S),Dg=n(S,"LI",{});var xAe=s(Dg);Gae=n(xAe,"STRONG",{});var yYr=s(Gae);aao=r(yYr,"fsmt"),yYr.forEach(t),nao=r(xAe," \u2014 "),hP=n(xAe,"A",{href:!0});var xYr=s(hP);sao=r(xYr,"FSMTTokenizer"),xYr.forEach(t),lao=r(xAe," (FairSeq Machine-Translation model)"),xAe.forEach(t),iao=i(S),Jn=n(S,"LI",{});var M$=s(Jn);Oae=n(M$,"STRONG",{});var $Yr=s(Oae);dao=r($Yr,"funnel"),$Yr.forEach(t),cao=r(M$," \u2014 "),pP=n(M$,"A",{href:!0});var kYr=s(pP);fao=r(kYr,"FunnelTokenizer"),kYr.forEach(t),mao=r(M$," or "),_P=n(M$,"A",{href:!0});var SYr=s(_P);gao=r(SYr,"FunnelTokenizerFast"),SYr.forEach(t),hao=r(M$," (Funnel Transformer model)"),M$.forEach(t),pao=i(S),Yn=n(S,"LI",{});var E$=s(Yn);Vae=n(E$,"STRONG",{});var RYr=s(Vae);_ao=r(RYr,"gpt2"),RYr.forEach(t),uao=r(E$," \u2014 "),uP=n(E$,"A",{href:!0});var PYr=s(uP);bao=r(PYr,"GPT2Tokenizer"),PYr.forEach(t),vao=r(E$," or "),bP=n(E$,"A",{href:!0});var BYr=s(bP);Fao=r(BYr,"GPT2TokenizerFast"),BYr.forEach(t),Tao=r(E$," (OpenAI GPT-2 model)"),E$.forEach(t),Mao=i(S),Kn=n(S,"LI",{});var C$=s(Kn);Xae=n(C$,"STRONG",{});var IYr=s(Xae);Eao=r(IYr,"gpt_neo"),IYr.forEach(t),Cao=r(C$," \u2014 "),vP=n(C$,"A",{href:!0});var NYr=s(vP);wao=r(NYr,"GPT2Tokenizer"),NYr.forEach(t),Aao=r(C$," or "),FP=n(C$,"A",{href:!0});var qYr=s(FP);Lao=r(qYr,"GPT2TokenizerFast"),qYr.forEach(t),yao=r(C$," (GPT Neo model)"),C$.forEach(t),xao=i(S),Gg=n(S,"LI",{});var $Ae=s(Gg);zae=n($Ae,"STRONG",{});var jYr=s(zae);$ao=r(jYr,"gpt_neox"),jYr.forEach(t),kao=r($Ae," \u2014 "),TP=n($Ae,"A",{href:!0});var DYr=s(TP);Sao=r(DYr,"GPTNeoXTokenizerFast"),DYr.forEach(t),Rao=r($Ae," (GPT NeoX model)"),$Ae.forEach(t),Pao=i(S),Zn=n(S,"LI",{});var w$=s(Zn);Wae=n(w$,"STRONG",{});var GYr=s(Wae);Bao=r(GYr,"gptj"),GYr.forEach(t),Iao=r(w$," \u2014 "),MP=n(w$,"A",{href:!0});var OYr=s(MP);Nao=r(OYr,"GPT2Tokenizer"),OYr.forEach(t),qao=r(w$," or "),EP=n(w$,"A",{href:!0});var VYr=s(EP);jao=r(VYr,"GPT2TokenizerFast"),VYr.forEach(t),Dao=r(w$," (GPT-J model)"),w$.forEach(t),Gao=i(S),es=n(S,"LI",{});var A$=s(es);Qae=n(A$,"STRONG",{});var XYr=s(Qae);Oao=r(XYr,"groupvit"),XYr.forEach(t),Vao=r(A$," \u2014 "),CP=n(A$,"A",{href:!0});var zYr=s(CP);Xao=r(zYr,"CLIPTokenizer"),zYr.forEach(t),zao=r(A$," or "),wP=n(A$,"A",{href:!0});var WYr=s(wP);Wao=r(WYr,"CLIPTokenizerFast"),WYr.forEach(t),Qao=r(A$," (GroupViT model)"),A$.forEach(t),Hao=i(S),os=n(S,"LI",{});var L$=s(os);Hae=n(L$,"STRONG",{});var QYr=s(Hae);Uao=r(QYr,"herbert"),QYr.forEach(t),Jao=r(L$," \u2014 "),AP=n(L$,"A",{href:!0});var HYr=s(AP);Yao=r(HYr,"HerbertTokenizer"),HYr.forEach(t),Kao=r(L$," or "),LP=n(L$,"A",{href:!0});var UYr=s(LP);Zao=r(UYr,"HerbertTokenizerFast"),UYr.forEach(t),eno=r(L$," (HerBERT model)"),L$.forEach(t),ono=i(S),Og=n(S,"LI",{});var kAe=s(Og);Uae=n(kAe,"STRONG",{});var JYr=s(Uae);rno=r(JYr,"hubert"),JYr.forEach(t),tno=r(kAe," \u2014 "),yP=n(kAe,"A",{href:!0});var YYr=s(yP);ano=r(YYr,"Wav2Vec2CTCTokenizer"),YYr.forEach(t),nno=r(kAe," (Hubert model)"),kAe.forEach(t),sno=i(S),rs=n(S,"LI",{});var y$=s(rs);Jae=n(y$,"STRONG",{});var KYr=s(Jae);lno=r(KYr,"ibert"),KYr.forEach(t),ino=r(y$," \u2014 "),xP=n(y$,"A",{href:!0});var ZYr=s(xP);dno=r(ZYr,"RobertaTokenizer"),ZYr.forEach(t),cno=r(y$," or "),$P=n(y$,"A",{href:!0});var eKr=s($P);fno=r(eKr,"RobertaTokenizerFast"),eKr.forEach(t),mno=r(y$," (I-BERT model)"),y$.forEach(t),gno=i(S),ts=n(S,"LI",{});var x$=s(ts);Yae=n(x$,"STRONG",{});var oKr=s(Yae);hno=r(oKr,"layoutlm"),oKr.forEach(t),pno=r(x$," \u2014 "),kP=n(x$,"A",{href:!0});var rKr=s(kP);_no=r(rKr,"LayoutLMTokenizer"),rKr.forEach(t),uno=r(x$," or "),SP=n(x$,"A",{href:!0});var tKr=s(SP);bno=r(tKr,"LayoutLMTokenizerFast"),tKr.forEach(t),vno=r(x$," (LayoutLM model)"),x$.forEach(t),Fno=i(S),as=n(S,"LI",{});var $$=s(as);Kae=n($$,"STRONG",{});var aKr=s(Kae);Tno=r(aKr,"layoutlmv2"),aKr.forEach(t),Mno=r($$," \u2014 "),RP=n($$,"A",{href:!0});var nKr=s(RP);Eno=r(nKr,"LayoutLMv2Tokenizer"),nKr.forEach(t),Cno=r($$," or "),PP=n($$,"A",{href:!0});var sKr=s(PP);wno=r(sKr,"LayoutLMv2TokenizerFast"),sKr.forEach(t),Ano=r($$," (LayoutLMv2 model)"),$$.forEach(t),Lno=i(S),ns=n(S,"LI",{});var k$=s(ns);Zae=n(k$,"STRONG",{});var lKr=s(Zae);yno=r(lKr,"layoutlmv3"),lKr.forEach(t),xno=r(k$," \u2014 "),BP=n(k$,"A",{href:!0});var iKr=s(BP);$no=r(iKr,"LayoutLMv3Tokenizer"),iKr.forEach(t),kno=r(k$," or "),IP=n(k$,"A",{href:!0});var dKr=s(IP);Sno=r(dKr,"LayoutLMv3TokenizerFast"),dKr.forEach(t),Rno=r(k$," (LayoutLMv3 model)"),k$.forEach(t),Pno=i(S),ss=n(S,"LI",{});var S$=s(ss);ene=n(S$,"STRONG",{});var cKr=s(ene);Bno=r(cKr,"layoutxlm"),cKr.forEach(t),Ino=r(S$," \u2014 "),NP=n(S$,"A",{href:!0});var fKr=s(NP);Nno=r(fKr,"LayoutXLMTokenizer"),fKr.forEach(t),qno=r(S$," or "),qP=n(S$,"A",{href:!0});var mKr=s(qP);jno=r(mKr,"LayoutXLMTokenizerFast"),mKr.forEach(t),Dno=r(S$," (LayoutXLM model)"),S$.forEach(t),Gno=i(S),ls=n(S,"LI",{});var R$=s(ls);one=n(R$,"STRONG",{});var gKr=s(one);Ono=r(gKr,"led"),gKr.forEach(t),Vno=r(R$," \u2014 "),jP=n(R$,"A",{href:!0});var hKr=s(jP);Xno=r(hKr,"LEDTokenizer"),hKr.forEach(t),zno=r(R$," or "),DP=n(R$,"A",{href:!0});var pKr=s(DP);Wno=r(pKr,"LEDTokenizerFast"),pKr.forEach(t),Qno=r(R$," (LED model)"),R$.forEach(t),Hno=i(S),is=n(S,"LI",{});var P$=s(is);rne=n(P$,"STRONG",{});var _Kr=s(rne);Uno=r(_Kr,"longformer"),_Kr.forEach(t),Jno=r(P$," \u2014 "),GP=n(P$,"A",{href:!0});var uKr=s(GP);Yno=r(uKr,"LongformerTokenizer"),uKr.forEach(t),Kno=r(P$," or "),OP=n(P$,"A",{href:!0});var bKr=s(OP);Zno=r(bKr,"LongformerTokenizerFast"),bKr.forEach(t),eso=r(P$," (Longformer model)"),P$.forEach(t),oso=i(S),Vg=n(S,"LI",{});var SAe=s(Vg);tne=n(SAe,"STRONG",{});var vKr=s(tne);rso=r(vKr,"luke"),vKr.forEach(t),tso=r(SAe," \u2014 "),VP=n(SAe,"A",{href:!0});var FKr=s(VP);aso=r(FKr,"LukeTokenizer"),FKr.forEach(t),nso=r(SAe," (LUKE model)"),SAe.forEach(t),sso=i(S),ds=n(S,"LI",{});var B$=s(ds);ane=n(B$,"STRONG",{});var TKr=s(ane);lso=r(TKr,"lxmert"),TKr.forEach(t),iso=r(B$," \u2014 "),XP=n(B$,"A",{href:!0});var MKr=s(XP);dso=r(MKr,"LxmertTokenizer"),MKr.forEach(t),cso=r(B$," or "),zP=n(B$,"A",{href:!0});var EKr=s(zP);fso=r(EKr,"LxmertTokenizerFast"),EKr.forEach(t),mso=r(B$," (LXMERT model)"),B$.forEach(t),gso=i(S),Xg=n(S,"LI",{});var RAe=s(Xg);nne=n(RAe,"STRONG",{});var CKr=s(nne);hso=r(CKr,"m2m_100"),CKr.forEach(t),pso=r(RAe," \u2014 "),WP=n(RAe,"A",{href:!0});var wKr=s(WP);_so=r(wKr,"M2M100Tokenizer"),wKr.forEach(t),uso=r(RAe," (M2M100 model)"),RAe.forEach(t),bso=i(S),zg=n(S,"LI",{});var PAe=s(zg);sne=n(PAe,"STRONG",{});var AKr=s(sne);vso=r(AKr,"marian"),AKr.forEach(t),Fso=r(PAe," \u2014 "),QP=n(PAe,"A",{href:!0});var LKr=s(QP);Tso=r(LKr,"MarianTokenizer"),LKr.forEach(t),Mso=r(PAe," (Marian model)"),PAe.forEach(t),Eso=i(S),cs=n(S,"LI",{});var I$=s(cs);lne=n(I$,"STRONG",{});var yKr=s(lne);Cso=r(yKr,"mbart"),yKr.forEach(t),wso=r(I$," \u2014 "),HP=n(I$,"A",{href:!0});var xKr=s(HP);Aso=r(xKr,"MBartTokenizer"),xKr.forEach(t),Lso=r(I$," or "),UP=n(I$,"A",{href:!0});var $Kr=s(UP);yso=r($Kr,"MBartTokenizerFast"),$Kr.forEach(t),xso=r(I$," (mBART model)"),I$.forEach(t),$so=i(S),fs=n(S,"LI",{});var N$=s(fs);ine=n(N$,"STRONG",{});var kKr=s(ine);kso=r(kKr,"mbart50"),kKr.forEach(t),Sso=r(N$," \u2014 "),JP=n(N$,"A",{href:!0});var SKr=s(JP);Rso=r(SKr,"MBart50Tokenizer"),SKr.forEach(t),Pso=r(N$," or "),YP=n(N$,"A",{href:!0});var RKr=s(YP);Bso=r(RKr,"MBart50TokenizerFast"),RKr.forEach(t),Iso=r(N$," (mBART-50 model)"),N$.forEach(t),Nso=i(S),ms=n(S,"LI",{});var q$=s(ms);dne=n(q$,"STRONG",{});var PKr=s(dne);qso=r(PKr,"megatron-bert"),PKr.forEach(t),jso=r(q$," \u2014 "),KP=n(q$,"A",{href:!0});var BKr=s(KP);Dso=r(BKr,"BertTokenizer"),BKr.forEach(t),Gso=r(q$," or "),ZP=n(q$,"A",{href:!0});var IKr=s(ZP);Oso=r(IKr,"BertTokenizerFast"),IKr.forEach(t),Vso=r(q$," (Megatron-BERT model)"),q$.forEach(t),Xso=i(S),Wg=n(S,"LI",{});var BAe=s(Wg);cne=n(BAe,"STRONG",{});var NKr=s(cne);zso=r(NKr,"mluke"),NKr.forEach(t),Wso=r(BAe," \u2014 "),eB=n(BAe,"A",{href:!0});var qKr=s(eB);Qso=r(qKr,"MLukeTokenizer"),qKr.forEach(t),Hso=r(BAe," (mLUKE model)"),BAe.forEach(t),Uso=i(S),gs=n(S,"LI",{});var j$=s(gs);fne=n(j$,"STRONG",{});var jKr=s(fne);Jso=r(jKr,"mobilebert"),jKr.forEach(t),Yso=r(j$," \u2014 "),oB=n(j$,"A",{href:!0});var DKr=s(oB);Kso=r(DKr,"MobileBertTokenizer"),DKr.forEach(t),Zso=r(j$," or "),rB=n(j$,"A",{href:!0});var GKr=s(rB);elo=r(GKr,"MobileBertTokenizerFast"),GKr.forEach(t),olo=r(j$," (MobileBERT model)"),j$.forEach(t),rlo=i(S),hs=n(S,"LI",{});var D$=s(hs);mne=n(D$,"STRONG",{});var OKr=s(mne);tlo=r(OKr,"mpnet"),OKr.forEach(t),alo=r(D$," \u2014 "),tB=n(D$,"A",{href:!0});var VKr=s(tB);nlo=r(VKr,"MPNetTokenizer"),VKr.forEach(t),slo=r(D$," or "),aB=n(D$,"A",{href:!0});var XKr=s(aB);llo=r(XKr,"MPNetTokenizerFast"),XKr.forEach(t),ilo=r(D$," (MPNet model)"),D$.forEach(t),dlo=i(S),ps=n(S,"LI",{});var G$=s(ps);gne=n(G$,"STRONG",{});var zKr=s(gne);clo=r(zKr,"mt5"),zKr.forEach(t),flo=r(G$," \u2014 "),nB=n(G$,"A",{href:!0});var WKr=s(nB);mlo=r(WKr,"MT5Tokenizer"),WKr.forEach(t),glo=r(G$," or "),sB=n(G$,"A",{href:!0});var QKr=s(sB);hlo=r(QKr,"MT5TokenizerFast"),QKr.forEach(t),plo=r(G$," (MT5 model)"),G$.forEach(t),_lo=i(S),_s=n(S,"LI",{});var O$=s(_s);hne=n(O$,"STRONG",{});var HKr=s(hne);ulo=r(HKr,"nystromformer"),HKr.forEach(t),blo=r(O$," \u2014 "),lB=n(O$,"A",{href:!0});var UKr=s(lB);vlo=r(UKr,"AlbertTokenizer"),UKr.forEach(t),Flo=r(O$," or "),iB=n(O$,"A",{href:!0});var JKr=s(iB);Tlo=r(JKr,"AlbertTokenizerFast"),JKr.forEach(t),Mlo=r(O$," (Nystr\xF6mformer model)"),O$.forEach(t),Elo=i(S),us=n(S,"LI",{});var V$=s(us);pne=n(V$,"STRONG",{});var YKr=s(pne);Clo=r(YKr,"openai-gpt"),YKr.forEach(t),wlo=r(V$," \u2014 "),dB=n(V$,"A",{href:!0});var KKr=s(dB);Alo=r(KKr,"OpenAIGPTTokenizer"),KKr.forEach(t),Llo=r(V$," or "),cB=n(V$,"A",{href:!0});var ZKr=s(cB);ylo=r(ZKr,"OpenAIGPTTokenizerFast"),ZKr.forEach(t),xlo=r(V$," (OpenAI GPT model)"),V$.forEach(t),$lo=i(S),Qg=n(S,"LI",{});var IAe=s(Qg);_ne=n(IAe,"STRONG",{});var eZr=s(_ne);klo=r(eZr,"opt"),eZr.forEach(t),Slo=r(IAe," \u2014 "),fB=n(IAe,"A",{href:!0});var oZr=s(fB);Rlo=r(oZr,"GPT2Tokenizer"),oZr.forEach(t),Plo=r(IAe," (OPT model)"),IAe.forEach(t),Blo=i(S),bs=n(S,"LI",{});var X$=s(bs);une=n(X$,"STRONG",{});var rZr=s(une);Ilo=r(rZr,"pegasus"),rZr.forEach(t),Nlo=r(X$," \u2014 "),mB=n(X$,"A",{href:!0});var tZr=s(mB);qlo=r(tZr,"PegasusTokenizer"),tZr.forEach(t),jlo=r(X$," or "),gB=n(X$,"A",{href:!0});var aZr=s(gB);Dlo=r(aZr,"PegasusTokenizerFast"),aZr.forEach(t),Glo=r(X$," (Pegasus model)"),X$.forEach(t),Olo=i(S),Hg=n(S,"LI",{});var NAe=s(Hg);bne=n(NAe,"STRONG",{});var nZr=s(bne);Vlo=r(nZr,"perceiver"),nZr.forEach(t),Xlo=r(NAe," \u2014 "),hB=n(NAe,"A",{href:!0});var sZr=s(hB);zlo=r(sZr,"PerceiverTokenizer"),sZr.forEach(t),Wlo=r(NAe," (Perceiver model)"),NAe.forEach(t),Qlo=i(S),Ug=n(S,"LI",{});var qAe=s(Ug);vne=n(qAe,"STRONG",{});var lZr=s(vne);Hlo=r(lZr,"phobert"),lZr.forEach(t),Ulo=r(qAe," \u2014 "),pB=n(qAe,"A",{href:!0});var iZr=s(pB);Jlo=r(iZr,"PhobertTokenizer"),iZr.forEach(t),Ylo=r(qAe," (PhoBERT model)"),qAe.forEach(t),Klo=i(S),Jg=n(S,"LI",{});var jAe=s(Jg);Fne=n(jAe,"STRONG",{});var dZr=s(Fne);Zlo=r(dZr,"plbart"),dZr.forEach(t),eio=r(jAe," \u2014 "),_B=n(jAe,"A",{href:!0});var cZr=s(_B);oio=r(cZr,"PLBartTokenizer"),cZr.forEach(t),rio=r(jAe," (PLBart model)"),jAe.forEach(t),tio=i(S),Yg=n(S,"LI",{});var DAe=s(Yg);Tne=n(DAe,"STRONG",{});var fZr=s(Tne);aio=r(fZr,"prophetnet"),fZr.forEach(t),nio=r(DAe," \u2014 "),uB=n(DAe,"A",{href:!0});var mZr=s(uB);sio=r(mZr,"ProphetNetTokenizer"),mZr.forEach(t),lio=r(DAe," (ProphetNet model)"),DAe.forEach(t),iio=i(S),vs=n(S,"LI",{});var z$=s(vs);Mne=n(z$,"STRONG",{});var gZr=s(Mne);dio=r(gZr,"qdqbert"),gZr.forEach(t),cio=r(z$," \u2014 "),bB=n(z$,"A",{href:!0});var hZr=s(bB);fio=r(hZr,"BertTokenizer"),hZr.forEach(t),mio=r(z$," or "),vB=n(z$,"A",{href:!0});var pZr=s(vB);gio=r(pZr,"BertTokenizerFast"),pZr.forEach(t),hio=r(z$," (QDQBert model)"),z$.forEach(t),pio=i(S),Kg=n(S,"LI",{});var GAe=s(Kg);Ene=n(GAe,"STRONG",{});var _Zr=s(Ene);_io=r(_Zr,"rag"),_Zr.forEach(t),uio=r(GAe," \u2014 "),FB=n(GAe,"A",{href:!0});var uZr=s(FB);bio=r(uZr,"RagTokenizer"),uZr.forEach(t),vio=r(GAe," (RAG model)"),GAe.forEach(t),Fio=i(S),Fs=n(S,"LI",{});var W$=s(Fs);Cne=n(W$,"STRONG",{});var bZr=s(Cne);Tio=r(bZr,"realm"),bZr.forEach(t),Mio=r(W$," \u2014 "),TB=n(W$,"A",{href:!0});var vZr=s(TB);Eio=r(vZr,"RealmTokenizer"),vZr.forEach(t),Cio=r(W$," or "),MB=n(W$,"A",{href:!0});var FZr=s(MB);wio=r(FZr,"RealmTokenizerFast"),FZr.forEach(t),Aio=r(W$," (REALM model)"),W$.forEach(t),Lio=i(S),Ts=n(S,"LI",{});var Q$=s(Ts);wne=n(Q$,"STRONG",{});var TZr=s(wne);yio=r(TZr,"reformer"),TZr.forEach(t),xio=r(Q$," \u2014 "),EB=n(Q$,"A",{href:!0});var MZr=s(EB);$io=r(MZr,"ReformerTokenizer"),MZr.forEach(t),kio=r(Q$," or "),CB=n(Q$,"A",{href:!0});var EZr=s(CB);Sio=r(EZr,"ReformerTokenizerFast"),EZr.forEach(t),Rio=r(Q$," (Reformer model)"),Q$.forEach(t),Pio=i(S),Ms=n(S,"LI",{});var H$=s(Ms);Ane=n(H$,"STRONG",{});var CZr=s(Ane);Bio=r(CZr,"rembert"),CZr.forEach(t),Iio=r(H$," \u2014 "),wB=n(H$,"A",{href:!0});var wZr=s(wB);Nio=r(wZr,"RemBertTokenizer"),wZr.forEach(t),qio=r(H$," or "),AB=n(H$,"A",{href:!0});var AZr=s(AB);jio=r(AZr,"RemBertTokenizerFast"),AZr.forEach(t),Dio=r(H$," (RemBERT model)"),H$.forEach(t),Gio=i(S),Es=n(S,"LI",{});var U$=s(Es);Lne=n(U$,"STRONG",{});var LZr=s(Lne);Oio=r(LZr,"retribert"),LZr.forEach(t),Vio=r(U$," \u2014 "),LB=n(U$,"A",{href:!0});var yZr=s(LB);Xio=r(yZr,"RetriBertTokenizer"),yZr.forEach(t),zio=r(U$," or "),yB=n(U$,"A",{href:!0});var xZr=s(yB);Wio=r(xZr,"RetriBertTokenizerFast"),xZr.forEach(t),Qio=r(U$," (RetriBERT model)"),U$.forEach(t),Hio=i(S),Cs=n(S,"LI",{});var J$=s(Cs);yne=n(J$,"STRONG",{});var $Zr=s(yne);Uio=r($Zr,"roberta"),$Zr.forEach(t),Jio=r(J$," \u2014 "),xB=n(J$,"A",{href:!0});var kZr=s(xB);Yio=r(kZr,"RobertaTokenizer"),kZr.forEach(t),Kio=r(J$," or "),$B=n(J$,"A",{href:!0});var SZr=s($B);Zio=r(SZr,"RobertaTokenizerFast"),SZr.forEach(t),edo=r(J$," (RoBERTa model)"),J$.forEach(t),odo=i(S),ws=n(S,"LI",{});var Y$=s(ws);xne=n(Y$,"STRONG",{});var RZr=s(xne);rdo=r(RZr,"roformer"),RZr.forEach(t),tdo=r(Y$," \u2014 "),kB=n(Y$,"A",{href:!0});var PZr=s(kB);ado=r(PZr,"RoFormerTokenizer"),PZr.forEach(t),ndo=r(Y$," or "),SB=n(Y$,"A",{href:!0});var BZr=s(SB);sdo=r(BZr,"RoFormerTokenizerFast"),BZr.forEach(t),ldo=r(Y$," (RoFormer model)"),Y$.forEach(t),ido=i(S),Zg=n(S,"LI",{});var OAe=s(Zg);$ne=n(OAe,"STRONG",{});var IZr=s($ne);ddo=r(IZr,"speech_to_text"),IZr.forEach(t),cdo=r(OAe," \u2014 "),RB=n(OAe,"A",{href:!0});var NZr=s(RB);fdo=r(NZr,"Speech2TextTokenizer"),NZr.forEach(t),mdo=r(OAe," (Speech2Text model)"),OAe.forEach(t),gdo=i(S),eh=n(S,"LI",{});var VAe=s(eh);kne=n(VAe,"STRONG",{});var qZr=s(kne);hdo=r(qZr,"speech_to_text_2"),qZr.forEach(t),pdo=r(VAe," \u2014 "),PB=n(VAe,"A",{href:!0});var jZr=s(PB);_do=r(jZr,"Speech2Text2Tokenizer"),jZr.forEach(t),udo=r(VAe," (Speech2Text2 model)"),VAe.forEach(t),bdo=i(S),As=n(S,"LI",{});var K$=s(As);Sne=n(K$,"STRONG",{});var DZr=s(Sne);vdo=r(DZr,"splinter"),DZr.forEach(t),Fdo=r(K$," \u2014 "),BB=n(K$,"A",{href:!0});var GZr=s(BB);Tdo=r(GZr,"SplinterTokenizer"),GZr.forEach(t),Mdo=r(K$," or "),IB=n(K$,"A",{href:!0});var OZr=s(IB);Edo=r(OZr,"SplinterTokenizerFast"),OZr.forEach(t),Cdo=r(K$," (Splinter model)"),K$.forEach(t),wdo=i(S),Ls=n(S,"LI",{});var Z$=s(Ls);Rne=n(Z$,"STRONG",{});var VZr=s(Rne);Ado=r(VZr,"squeezebert"),VZr.forEach(t),Ldo=r(Z$," \u2014 "),NB=n(Z$,"A",{href:!0});var XZr=s(NB);ydo=r(XZr,"SqueezeBertTokenizer"),XZr.forEach(t),xdo=r(Z$," or "),qB=n(Z$,"A",{href:!0});var zZr=s(qB);$do=r(zZr,"SqueezeBertTokenizerFast"),zZr.forEach(t),kdo=r(Z$," (SqueezeBERT model)"),Z$.forEach(t),Sdo=i(S),ys=n(S,"LI",{});var ek=s(ys);Pne=n(ek,"STRONG",{});var WZr=s(Pne);Rdo=r(WZr,"t5"),WZr.forEach(t),Pdo=r(ek," \u2014 "),jB=n(ek,"A",{href:!0});var QZr=s(jB);Bdo=r(QZr,"T5Tokenizer"),QZr.forEach(t),Ido=r(ek," or "),DB=n(ek,"A",{href:!0});var HZr=s(DB);Ndo=r(HZr,"T5TokenizerFast"),HZr.forEach(t),qdo=r(ek," (T5 model)"),ek.forEach(t),jdo=i(S),oh=n(S,"LI",{});var XAe=s(oh);Bne=n(XAe,"STRONG",{});var UZr=s(Bne);Ddo=r(UZr,"tapas"),UZr.forEach(t),Gdo=r(XAe," \u2014 "),GB=n(XAe,"A",{href:!0});var JZr=s(GB);Odo=r(JZr,"TapasTokenizer"),JZr.forEach(t),Vdo=r(XAe," (TAPAS model)"),XAe.forEach(t),Xdo=i(S),rh=n(S,"LI",{});var zAe=s(rh);Ine=n(zAe,"STRONG",{});var YZr=s(Ine);zdo=r(YZr,"tapex"),YZr.forEach(t),Wdo=r(zAe," \u2014 "),OB=n(zAe,"A",{href:!0});var KZr=s(OB);Qdo=r(KZr,"TapexTokenizer"),KZr.forEach(t),Hdo=r(zAe," (TAPEX model)"),zAe.forEach(t),Udo=i(S),th=n(S,"LI",{});var WAe=s(th);Nne=n(WAe,"STRONG",{});var ZZr=s(Nne);Jdo=r(ZZr,"transfo-xl"),ZZr.forEach(t),Ydo=r(WAe," \u2014 "),VB=n(WAe,"A",{href:!0});var eet=s(VB);Kdo=r(eet,"TransfoXLTokenizer"),eet.forEach(t),Zdo=r(WAe," (Transformer-XL model)"),WAe.forEach(t),eco=i(S),xs=n(S,"LI",{});var ok=s(xs);qne=n(ok,"STRONG",{});var oet=s(qne);oco=r(oet,"visual_bert"),oet.forEach(t),rco=r(ok," \u2014 "),XB=n(ok,"A",{href:!0});var ret=s(XB);tco=r(ret,"BertTokenizer"),ret.forEach(t),aco=r(ok," or "),zB=n(ok,"A",{href:!0});var tet=s(zB);nco=r(tet,"BertTokenizerFast"),tet.forEach(t),sco=r(ok," (VisualBERT model)"),ok.forEach(t),lco=i(S),ah=n(S,"LI",{});var QAe=s(ah);jne=n(QAe,"STRONG",{});var aet=s(jne);ico=r(aet,"wav2vec2"),aet.forEach(t),dco=r(QAe," \u2014 "),WB=n(QAe,"A",{href:!0});var net=s(WB);cco=r(net,"Wav2Vec2CTCTokenizer"),net.forEach(t),fco=r(QAe," (Wav2Vec2 model)"),QAe.forEach(t),mco=i(S),nh=n(S,"LI",{});var HAe=s(nh);Dne=n(HAe,"STRONG",{});var set=s(Dne);gco=r(set,"wav2vec2-conformer"),set.forEach(t),hco=r(HAe," \u2014 "),QB=n(HAe,"A",{href:!0});var iet=s(QB);pco=r(iet,"Wav2Vec2CTCTokenizer"),iet.forEach(t),_co=r(HAe," (Wav2Vec2-Conformer model)"),HAe.forEach(t),uco=i(S),sh=n(S,"LI",{});var UAe=s(sh);Gne=n(UAe,"STRONG",{});var det=s(Gne);bco=r(det,"wav2vec2_phoneme"),det.forEach(t),vco=r(UAe," \u2014 "),HB=n(UAe,"A",{href:!0});var cet=s(HB);Fco=r(cet,"Wav2Vec2PhonemeCTCTokenizer"),cet.forEach(t),Tco=r(UAe," (Wav2Vec2Phoneme model)"),UAe.forEach(t),Mco=i(S),$s=n(S,"LI",{});var rk=s($s);One=n(rk,"STRONG",{});var fet=s(One);Eco=r(fet,"xglm"),fet.forEach(t),Cco=r(rk," \u2014 "),UB=n(rk,"A",{href:!0});var met=s(UB);wco=r(met,"XGLMTokenizer"),met.forEach(t),Aco=r(rk," or "),JB=n(rk,"A",{href:!0});var get=s(JB);Lco=r(get,"XGLMTokenizerFast"),get.forEach(t),yco=r(rk," (XGLM model)"),rk.forEach(t),xco=i(S),lh=n(S,"LI",{});var JAe=s(lh);Vne=n(JAe,"STRONG",{});var het=s(Vne);$co=r(het,"xlm"),het.forEach(t),kco=r(JAe," \u2014 "),YB=n(JAe,"A",{href:!0});var pet=s(YB);Sco=r(pet,"XLMTokenizer"),pet.forEach(t),Rco=r(JAe," (XLM model)"),JAe.forEach(t),Pco=i(S),ih=n(S,"LI",{});var YAe=s(ih);Xne=n(YAe,"STRONG",{});var _et=s(Xne);Bco=r(_et,"xlm-prophetnet"),_et.forEach(t),Ico=r(YAe," \u2014 "),KB=n(YAe,"A",{href:!0});var uet=s(KB);Nco=r(uet,"XLMProphetNetTokenizer"),uet.forEach(t),qco=r(YAe," (XLM-ProphetNet model)"),YAe.forEach(t),jco=i(S),ks=n(S,"LI",{});var tk=s(ks);zne=n(tk,"STRONG",{});var bet=s(zne);Dco=r(bet,"xlm-roberta"),bet.forEach(t),Gco=r(tk," \u2014 "),ZB=n(tk,"A",{href:!0});var vet=s(ZB);Oco=r(vet,"XLMRobertaTokenizer"),vet.forEach(t),Vco=r(tk," or "),eI=n(tk,"A",{href:!0});var Fet=s(eI);Xco=r(Fet,"XLMRobertaTokenizerFast"),Fet.forEach(t),zco=r(tk," (XLM-RoBERTa model)"),tk.forEach(t),Wco=i(S),Ss=n(S,"LI",{});var ak=s(Ss);Wne=n(ak,"STRONG",{});var Tet=s(Wne);Qco=r(Tet,"xlm-roberta-xl"),Tet.forEach(t),Hco=r(ak," \u2014 "),oI=n(ak,"A",{href:!0});var Met=s(oI);Uco=r(Met,"RobertaTokenizer"),Met.forEach(t),Jco=r(ak," or "),rI=n(ak,"A",{href:!0});var Eet=s(rI);Yco=r(Eet,"RobertaTokenizerFast"),Eet.forEach(t),Kco=r(ak," (XLM-RoBERTa-XL model)"),ak.forEach(t),Zco=i(S),Rs=n(S,"LI",{});var nk=s(Rs);Qne=n(nk,"STRONG",{});var Cet=s(Qne);efo=r(Cet,"xlnet"),Cet.forEach(t),ofo=r(nk," \u2014 "),tI=n(nk,"A",{href:!0});var wet=s(tI);rfo=r(wet,"XLNetTokenizer"),wet.forEach(t),tfo=r(nk," or "),aI=n(nk,"A",{href:!0});var Aet=s(aI);afo=r(Aet,"XLNetTokenizerFast"),Aet.forEach(t),nfo=r(nk," (XLNet model)"),nk.forEach(t),sfo=i(S),Ps=n(S,"LI",{});var sk=s(Ps);Hne=n(sk,"STRONG",{});var Let=s(Hne);lfo=r(Let,"yoso"),Let.forEach(t),ifo=r(sk," \u2014 "),nI=n(sk,"A",{href:!0});var yet=s(nI);dfo=r(yet,"AlbertTokenizer"),yet.forEach(t),cfo=r(sk," or "),sI=n(sk,"A",{href:!0});var xet=s(sI);ffo=r(xet,"AlbertTokenizerFast"),xet.forEach(t),mfo=r(sk," (YOSO model)"),sk.forEach(t),S.forEach(t),gfo=i(Ds),T(dh.$$.fragment,Ds),Ds.forEach(t),hfo=i(js),ch=n(js,"DIV",{class:!0});var AGe=s(ch);T(aL.$$.fragment,AGe),pfo=i(AGe),Une=n(AGe,"P",{});var $et=s(Une);_fo=r($et,"Register a new tokenizer in this mapping."),$et.forEach(t),AGe.forEach(t),js.forEach(t),Lje=i(f),Ci=n(f,"H2",{class:!0});var LGe=s(Ci);fh=n(LGe,"A",{id:!0,class:!0,href:!0});var ket=s(fh);Jne=n(ket,"SPAN",{});var Set=s(Jne);T(nL.$$.fragment,Set),Set.forEach(t),ket.forEach(t),ufo=i(LGe),Yne=n(LGe,"SPAN",{});var Ret=s(Yne);bfo=r(Ret,"AutoFeatureExtractor"),Ret.forEach(t),LGe.forEach(t),yje=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(sL.$$.fragment,Gs),vfo=i(Gs),lL=n(Gs,"P",{});var yGe=s(lL);Ffo=r(yGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lI=n(yGe,"A",{href:!0});var Pet=s(lI);Tfo=r(Pet,"AutoFeatureExtractor.from_pretrained()"),Pet.forEach(t),Mfo=r(yGe," class method."),yGe.forEach(t),Efo=i(Gs),iL=n(Gs,"P",{});var xGe=s(iL);Cfo=r(xGe,"This class cannot be instantiated directly using "),Kne=n(xGe,"CODE",{});var Bet=s(Kne);wfo=r(Bet,"__init__()"),Bet.forEach(t),Afo=r(xGe," (throws an error)."),xGe.forEach(t),Lfo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(dL.$$.fragment,Zt),yfo=i(Zt),Zne=n(Zt,"P",{});var Iet=s(Zne);xfo=r(Iet,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Iet.forEach(t),$fo=i(Zt),La=n(Zt,"P",{});var Hw=s(La);kfo=r(Hw,"The feature extractor class to instantiate is selected based on the "),ese=n(Hw,"CODE",{});var Net=s(ese);Sfo=r(Net,"model_type"),Net.forEach(t),Rfo=r(Hw,` property of the config object
(either passed as an argument or loaded from `),ose=n(Hw,"CODE",{});var qet=s(ose);Pfo=r(qet,"pretrained_model_name_or_path"),qet.forEach(t),Bfo=r(Hw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rse=n(Hw,"CODE",{});var jet=s(rse);Ifo=r(jet,"pretrained_model_name_or_path"),jet.forEach(t),Nfo=r(Hw,":"),Hw.forEach(t),qfo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);mh=n(K,"LI",{});var KAe=s(mh);tse=n(KAe,"STRONG",{});var Det=s(tse);jfo=r(Det,"beit"),Det.forEach(t),Dfo=r(KAe," \u2014 "),iI=n(KAe,"A",{href:!0});var Get=s(iI);Gfo=r(Get,"BeitFeatureExtractor"),Get.forEach(t),Ofo=r(KAe," (BEiT model)"),KAe.forEach(t),Vfo=i(K),gh=n(K,"LI",{});var ZAe=s(gh);ase=n(ZAe,"STRONG",{});var Oet=s(ase);Xfo=r(Oet,"clip"),Oet.forEach(t),zfo=r(ZAe," \u2014 "),dI=n(ZAe,"A",{href:!0});var Vet=s(dI);Wfo=r(Vet,"CLIPFeatureExtractor"),Vet.forEach(t),Qfo=r(ZAe," (CLIP model)"),ZAe.forEach(t),Hfo=i(K),hh=n(K,"LI",{});var e6e=s(hh);nse=n(e6e,"STRONG",{});var Xet=s(nse);Ufo=r(Xet,"convnext"),Xet.forEach(t),Jfo=r(e6e," \u2014 "),cI=n(e6e,"A",{href:!0});var zet=s(cI);Yfo=r(zet,"ConvNextFeatureExtractor"),zet.forEach(t),Kfo=r(e6e," (ConvNeXT model)"),e6e.forEach(t),Zfo=i(K),ph=n(K,"LI",{});var o6e=s(ph);sse=n(o6e,"STRONG",{});var Wet=s(sse);emo=r(Wet,"cvt"),Wet.forEach(t),omo=r(o6e," \u2014 "),fI=n(o6e,"A",{href:!0});var Qet=s(fI);rmo=r(Qet,"ConvNextFeatureExtractor"),Qet.forEach(t),tmo=r(o6e," (CvT model)"),o6e.forEach(t),amo=i(K),_h=n(K,"LI",{});var r6e=s(_h);lse=n(r6e,"STRONG",{});var Het=s(lse);nmo=r(Het,"data2vec-audio"),Het.forEach(t),smo=r(r6e," \u2014 "),mI=n(r6e,"A",{href:!0});var Uet=s(mI);lmo=r(Uet,"Wav2Vec2FeatureExtractor"),Uet.forEach(t),imo=r(r6e," (Data2VecAudio model)"),r6e.forEach(t),dmo=i(K),uh=n(K,"LI",{});var t6e=s(uh);ise=n(t6e,"STRONG",{});var Jet=s(ise);cmo=r(Jet,"data2vec-vision"),Jet.forEach(t),fmo=r(t6e," \u2014 "),gI=n(t6e,"A",{href:!0});var Yet=s(gI);mmo=r(Yet,"BeitFeatureExtractor"),Yet.forEach(t),gmo=r(t6e," (Data2VecVision model)"),t6e.forEach(t),hmo=i(K),bh=n(K,"LI",{});var a6e=s(bh);dse=n(a6e,"STRONG",{});var Ket=s(dse);pmo=r(Ket,"deit"),Ket.forEach(t),_mo=r(a6e," \u2014 "),hI=n(a6e,"A",{href:!0});var Zet=s(hI);umo=r(Zet,"DeiTFeatureExtractor"),Zet.forEach(t),bmo=r(a6e," (DeiT model)"),a6e.forEach(t),vmo=i(K),vh=n(K,"LI",{});var n6e=s(vh);cse=n(n6e,"STRONG",{});var eot=s(cse);Fmo=r(eot,"detr"),eot.forEach(t),Tmo=r(n6e," \u2014 "),pI=n(n6e,"A",{href:!0});var oot=s(pI);Mmo=r(oot,"DetrFeatureExtractor"),oot.forEach(t),Emo=r(n6e," (DETR model)"),n6e.forEach(t),Cmo=i(K),Fh=n(K,"LI",{});var s6e=s(Fh);fse=n(s6e,"STRONG",{});var rot=s(fse);wmo=r(rot,"dpt"),rot.forEach(t),Amo=r(s6e," \u2014 "),_I=n(s6e,"A",{href:!0});var tot=s(_I);Lmo=r(tot,"DPTFeatureExtractor"),tot.forEach(t),ymo=r(s6e," (DPT model)"),s6e.forEach(t),xmo=i(K),Th=n(K,"LI",{});var l6e=s(Th);mse=n(l6e,"STRONG",{});var aot=s(mse);$mo=r(aot,"flava"),aot.forEach(t),kmo=r(l6e," \u2014 "),uI=n(l6e,"A",{href:!0});var not=s(uI);Smo=r(not,"FlavaFeatureExtractor"),not.forEach(t),Rmo=r(l6e," (FLAVA model)"),l6e.forEach(t),Pmo=i(K),Mh=n(K,"LI",{});var i6e=s(Mh);gse=n(i6e,"STRONG",{});var sot=s(gse);Bmo=r(sot,"glpn"),sot.forEach(t),Imo=r(i6e," \u2014 "),bI=n(i6e,"A",{href:!0});var lot=s(bI);Nmo=r(lot,"GLPNFeatureExtractor"),lot.forEach(t),qmo=r(i6e," (GLPN model)"),i6e.forEach(t),jmo=i(K),Eh=n(K,"LI",{});var d6e=s(Eh);hse=n(d6e,"STRONG",{});var iot=s(hse);Dmo=r(iot,"groupvit"),iot.forEach(t),Gmo=r(d6e," \u2014 "),vI=n(d6e,"A",{href:!0});var dot=s(vI);Omo=r(dot,"CLIPFeatureExtractor"),dot.forEach(t),Vmo=r(d6e," (GroupViT model)"),d6e.forEach(t),Xmo=i(K),Ch=n(K,"LI",{});var c6e=s(Ch);pse=n(c6e,"STRONG",{});var cot=s(pse);zmo=r(cot,"hubert"),cot.forEach(t),Wmo=r(c6e," \u2014 "),FI=n(c6e,"A",{href:!0});var fot=s(FI);Qmo=r(fot,"Wav2Vec2FeatureExtractor"),fot.forEach(t),Hmo=r(c6e," (Hubert model)"),c6e.forEach(t),Umo=i(K),wh=n(K,"LI",{});var f6e=s(wh);_se=n(f6e,"STRONG",{});var mot=s(_se);Jmo=r(mot,"imagegpt"),mot.forEach(t),Ymo=r(f6e," \u2014 "),TI=n(f6e,"A",{href:!0});var got=s(TI);Kmo=r(got,"ImageGPTFeatureExtractor"),got.forEach(t),Zmo=r(f6e," (ImageGPT model)"),f6e.forEach(t),ego=i(K),Ah=n(K,"LI",{});var m6e=s(Ah);use=n(m6e,"STRONG",{});var hot=s(use);ogo=r(hot,"layoutlmv2"),hot.forEach(t),rgo=r(m6e," \u2014 "),MI=n(m6e,"A",{href:!0});var pot=s(MI);tgo=r(pot,"LayoutLMv2FeatureExtractor"),pot.forEach(t),ago=r(m6e," (LayoutLMv2 model)"),m6e.forEach(t),ngo=i(K),Lh=n(K,"LI",{});var g6e=s(Lh);bse=n(g6e,"STRONG",{});var _ot=s(bse);sgo=r(_ot,"layoutlmv3"),_ot.forEach(t),lgo=r(g6e," \u2014 "),EI=n(g6e,"A",{href:!0});var uot=s(EI);igo=r(uot,"LayoutLMv3FeatureExtractor"),uot.forEach(t),dgo=r(g6e," (LayoutLMv3 model)"),g6e.forEach(t),cgo=i(K),yh=n(K,"LI",{});var h6e=s(yh);vse=n(h6e,"STRONG",{});var bot=s(vse);fgo=r(bot,"levit"),bot.forEach(t),mgo=r(h6e," \u2014 "),CI=n(h6e,"A",{href:!0});var vot=s(CI);ggo=r(vot,"LevitFeatureExtractor"),vot.forEach(t),hgo=r(h6e," (LeViT model)"),h6e.forEach(t),pgo=i(K),xh=n(K,"LI",{});var p6e=s(xh);Fse=n(p6e,"STRONG",{});var Fot=s(Fse);_go=r(Fot,"maskformer"),Fot.forEach(t),ugo=r(p6e," \u2014 "),wI=n(p6e,"A",{href:!0});var Tot=s(wI);bgo=r(Tot,"MaskFormerFeatureExtractor"),Tot.forEach(t),vgo=r(p6e," (MaskFormer model)"),p6e.forEach(t),Fgo=i(K),$h=n(K,"LI",{});var _6e=s($h);Tse=n(_6e,"STRONG",{});var Mot=s(Tse);Tgo=r(Mot,"mctct"),Mot.forEach(t),Mgo=r(_6e," \u2014 "),AI=n(_6e,"A",{href:!0});var Eot=s(AI);Ego=r(Eot,"MCTCTFeatureExtractor"),Eot.forEach(t),Cgo=r(_6e," (M-CTC-T model)"),_6e.forEach(t),wgo=i(K),kh=n(K,"LI",{});var u6e=s(kh);Mse=n(u6e,"STRONG",{});var Cot=s(Mse);Ago=r(Cot,"perceiver"),Cot.forEach(t),Lgo=r(u6e," \u2014 "),LI=n(u6e,"A",{href:!0});var wot=s(LI);ygo=r(wot,"PerceiverFeatureExtractor"),wot.forEach(t),xgo=r(u6e," (Perceiver model)"),u6e.forEach(t),$go=i(K),Sh=n(K,"LI",{});var b6e=s(Sh);Ese=n(b6e,"STRONG",{});var Aot=s(Ese);kgo=r(Aot,"poolformer"),Aot.forEach(t),Sgo=r(b6e," \u2014 "),yI=n(b6e,"A",{href:!0});var Lot=s(yI);Rgo=r(Lot,"PoolFormerFeatureExtractor"),Lot.forEach(t),Pgo=r(b6e," (PoolFormer model)"),b6e.forEach(t),Bgo=i(K),Rh=n(K,"LI",{});var v6e=s(Rh);Cse=n(v6e,"STRONG",{});var yot=s(Cse);Igo=r(yot,"regnet"),yot.forEach(t),Ngo=r(v6e," \u2014 "),xI=n(v6e,"A",{href:!0});var xot=s(xI);qgo=r(xot,"ConvNextFeatureExtractor"),xot.forEach(t),jgo=r(v6e," (RegNet model)"),v6e.forEach(t),Dgo=i(K),Ph=n(K,"LI",{});var F6e=s(Ph);wse=n(F6e,"STRONG",{});var $ot=s(wse);Ggo=r($ot,"resnet"),$ot.forEach(t),Ogo=r(F6e," \u2014 "),$I=n(F6e,"A",{href:!0});var kot=s($I);Vgo=r(kot,"ConvNextFeatureExtractor"),kot.forEach(t),Xgo=r(F6e," (ResNet model)"),F6e.forEach(t),zgo=i(K),Bh=n(K,"LI",{});var T6e=s(Bh);Ase=n(T6e,"STRONG",{});var Sot=s(Ase);Wgo=r(Sot,"segformer"),Sot.forEach(t),Qgo=r(T6e," \u2014 "),kI=n(T6e,"A",{href:!0});var Rot=s(kI);Hgo=r(Rot,"SegformerFeatureExtractor"),Rot.forEach(t),Ugo=r(T6e," (SegFormer model)"),T6e.forEach(t),Jgo=i(K),Ih=n(K,"LI",{});var M6e=s(Ih);Lse=n(M6e,"STRONG",{});var Pot=s(Lse);Ygo=r(Pot,"speech_to_text"),Pot.forEach(t),Kgo=r(M6e," \u2014 "),SI=n(M6e,"A",{href:!0});var Bot=s(SI);Zgo=r(Bot,"Speech2TextFeatureExtractor"),Bot.forEach(t),eho=r(M6e," (Speech2Text model)"),M6e.forEach(t),oho=i(K),Nh=n(K,"LI",{});var E6e=s(Nh);yse=n(E6e,"STRONG",{});var Iot=s(yse);rho=r(Iot,"swin"),Iot.forEach(t),tho=r(E6e," \u2014 "),RI=n(E6e,"A",{href:!0});var Not=s(RI);aho=r(Not,"ViTFeatureExtractor"),Not.forEach(t),nho=r(E6e," (Swin Transformer model)"),E6e.forEach(t),sho=i(K),qh=n(K,"LI",{});var C6e=s(qh);xse=n(C6e,"STRONG",{});var qot=s(xse);lho=r(qot,"van"),qot.forEach(t),iho=r(C6e," \u2014 "),PI=n(C6e,"A",{href:!0});var jot=s(PI);dho=r(jot,"ConvNextFeatureExtractor"),jot.forEach(t),cho=r(C6e," (VAN model)"),C6e.forEach(t),fho=i(K),jh=n(K,"LI",{});var w6e=s(jh);$se=n(w6e,"STRONG",{});var Dot=s($se);mho=r(Dot,"vit"),Dot.forEach(t),gho=r(w6e," \u2014 "),BI=n(w6e,"A",{href:!0});var Got=s(BI);hho=r(Got,"ViTFeatureExtractor"),Got.forEach(t),pho=r(w6e," (ViT model)"),w6e.forEach(t),_ho=i(K),Dh=n(K,"LI",{});var A6e=s(Dh);kse=n(A6e,"STRONG",{});var Oot=s(kse);uho=r(Oot,"vit_mae"),Oot.forEach(t),bho=r(A6e," \u2014 "),II=n(A6e,"A",{href:!0});var Vot=s(II);vho=r(Vot,"ViTFeatureExtractor"),Vot.forEach(t),Fho=r(A6e," (ViTMAE model)"),A6e.forEach(t),Tho=i(K),Gh=n(K,"LI",{});var L6e=s(Gh);Sse=n(L6e,"STRONG",{});var Xot=s(Sse);Mho=r(Xot,"wav2vec2"),Xot.forEach(t),Eho=r(L6e," \u2014 "),NI=n(L6e,"A",{href:!0});var zot=s(NI);Cho=r(zot,"Wav2Vec2FeatureExtractor"),zot.forEach(t),who=r(L6e," (Wav2Vec2 model)"),L6e.forEach(t),Aho=i(K),Oh=n(K,"LI",{});var y6e=s(Oh);Rse=n(y6e,"STRONG",{});var Wot=s(Rse);Lho=r(Wot,"wav2vec2-conformer"),Wot.forEach(t),yho=r(y6e," \u2014 "),qI=n(y6e,"A",{href:!0});var Qot=s(qI);xho=r(Qot,"Wav2Vec2FeatureExtractor"),Qot.forEach(t),$ho=r(y6e," (Wav2Vec2-Conformer model)"),y6e.forEach(t),kho=i(K),Vh=n(K,"LI",{});var x6e=s(Vh);Pse=n(x6e,"STRONG",{});var Hot=s(Pse);Sho=r(Hot,"yolos"),Hot.forEach(t),Rho=r(x6e," \u2014 "),jI=n(x6e,"A",{href:!0});var Uot=s(jI);Pho=r(Uot,"YolosFeatureExtractor"),Uot.forEach(t),Bho=r(x6e," (YOLOS model)"),x6e.forEach(t),K.forEach(t),Iho=i(Zt),T(Xh.$$.fragment,Zt),Nho=i(Zt),T(zh.$$.fragment,Zt),Zt.forEach(t),qho=i(Gs),Wh=n(Gs,"DIV",{class:!0});var $Ge=s(Wh);T(cL.$$.fragment,$Ge),jho=i($Ge),Bse=n($Ge,"P",{});var Jot=s(Bse);Dho=r(Jot,"Register a new feature extractor for this class."),Jot.forEach(t),$Ge.forEach(t),Gs.forEach(t),xje=i(f),wi=n(f,"H2",{class:!0});var kGe=s(wi);Qh=n(kGe,"A",{id:!0,class:!0,href:!0});var Yot=s(Qh);Ise=n(Yot,"SPAN",{});var Kot=s(Ise);T(fL.$$.fragment,Kot),Kot.forEach(t),Yot.forEach(t),Gho=i(kGe),Nse=n(kGe,"SPAN",{});var Zot=s(Nse);Oho=r(Zot,"AutoProcessor"),Zot.forEach(t),kGe.forEach(t),$je=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(mL.$$.fragment,Os),Vho=i(Os),gL=n(Os,"P",{});var SGe=s(gL);Xho=r(SGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DI=n(SGe,"A",{href:!0});var ert=s(DI);zho=r(ert,"AutoProcessor.from_pretrained()"),ert.forEach(t),Who=r(SGe," class method."),SGe.forEach(t),Qho=i(Os),hL=n(Os,"P",{});var RGe=s(hL);Hho=r(RGe,"This class cannot be instantiated directly using "),qse=n(RGe,"CODE",{});var ort=s(qse);Uho=r(ort,"__init__()"),ort.forEach(t),Jho=r(RGe," (throws an error)."),RGe.forEach(t),Yho=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(pL.$$.fragment,ea),Kho=i(ea),jse=n(ea,"P",{});var rrt=s(jse);Zho=r(rrt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rrt.forEach(t),epo=i(ea),Ai=n(ea,"P",{});var eee=s(Ai);opo=r(eee,"The processor class to instantiate is selected based on the "),Dse=n(eee,"CODE",{});var trt=s(Dse);rpo=r(trt,"model_type"),trt.forEach(t),tpo=r(eee,` property of the config object (either
passed as an argument or loaded from `),Gse=n(eee,"CODE",{});var art=s(Gse);apo=r(art,"pretrained_model_name_or_path"),art.forEach(t),npo=r(eee," if possible):"),eee.forEach(t),spo=i(ea),he=n(ea,"UL",{});var _e=s(he);Hh=n(_e,"LI",{});var $6e=s(Hh);Ose=n($6e,"STRONG",{});var nrt=s(Ose);lpo=r(nrt,"clip"),nrt.forEach(t),ipo=r($6e," \u2014 "),GI=n($6e,"A",{href:!0});var srt=s(GI);dpo=r(srt,"CLIPProcessor"),srt.forEach(t),cpo=r($6e," (CLIP model)"),$6e.forEach(t),fpo=i(_e),Uh=n(_e,"LI",{});var k6e=s(Uh);Vse=n(k6e,"STRONG",{});var lrt=s(Vse);mpo=r(lrt,"flava"),lrt.forEach(t),gpo=r(k6e," \u2014 "),Xse=n(k6e,"CODE",{});var irt=s(Xse);hpo=r(irt,"FLAVAProcessor"),irt.forEach(t),ppo=r(k6e," (FLAVA model)"),k6e.forEach(t),_po=i(_e),Jh=n(_e,"LI",{});var S6e=s(Jh);zse=n(S6e,"STRONG",{});var drt=s(zse);upo=r(drt,"groupvit"),drt.forEach(t),bpo=r(S6e," \u2014 "),OI=n(S6e,"A",{href:!0});var crt=s(OI);vpo=r(crt,"CLIPProcessor"),crt.forEach(t),Fpo=r(S6e," (GroupViT model)"),S6e.forEach(t),Tpo=i(_e),Yh=n(_e,"LI",{});var R6e=s(Yh);Wse=n(R6e,"STRONG",{});var frt=s(Wse);Mpo=r(frt,"layoutlmv2"),frt.forEach(t),Epo=r(R6e," \u2014 "),VI=n(R6e,"A",{href:!0});var mrt=s(VI);Cpo=r(mrt,"LayoutLMv2Processor"),mrt.forEach(t),wpo=r(R6e," (LayoutLMv2 model)"),R6e.forEach(t),Apo=i(_e),Kh=n(_e,"LI",{});var P6e=s(Kh);Qse=n(P6e,"STRONG",{});var grt=s(Qse);Lpo=r(grt,"layoutlmv3"),grt.forEach(t),ypo=r(P6e," \u2014 "),XI=n(P6e,"A",{href:!0});var hrt=s(XI);xpo=r(hrt,"LayoutLMv3Processor"),hrt.forEach(t),$po=r(P6e," (LayoutLMv3 model)"),P6e.forEach(t),kpo=i(_e),Zh=n(_e,"LI",{});var B6e=s(Zh);Hse=n(B6e,"STRONG",{});var prt=s(Hse);Spo=r(prt,"layoutxlm"),prt.forEach(t),Rpo=r(B6e," \u2014 "),zI=n(B6e,"A",{href:!0});var _rt=s(zI);Ppo=r(_rt,"LayoutXLMProcessor"),_rt.forEach(t),Bpo=r(B6e," (LayoutXLM model)"),B6e.forEach(t),Ipo=i(_e),ep=n(_e,"LI",{});var I6e=s(ep);Use=n(I6e,"STRONG",{});var urt=s(Use);Npo=r(urt,"sew"),urt.forEach(t),qpo=r(I6e," \u2014 "),WI=n(I6e,"A",{href:!0});var brt=s(WI);jpo=r(brt,"Wav2Vec2Processor"),brt.forEach(t),Dpo=r(I6e," (SEW model)"),I6e.forEach(t),Gpo=i(_e),op=n(_e,"LI",{});var N6e=s(op);Jse=n(N6e,"STRONG",{});var vrt=s(Jse);Opo=r(vrt,"sew-d"),vrt.forEach(t),Vpo=r(N6e," \u2014 "),QI=n(N6e,"A",{href:!0});var Frt=s(QI);Xpo=r(Frt,"Wav2Vec2Processor"),Frt.forEach(t),zpo=r(N6e," (SEW-D model)"),N6e.forEach(t),Wpo=i(_e),rp=n(_e,"LI",{});var q6e=s(rp);Yse=n(q6e,"STRONG",{});var Trt=s(Yse);Qpo=r(Trt,"speech_to_text"),Trt.forEach(t),Hpo=r(q6e," \u2014 "),HI=n(q6e,"A",{href:!0});var Mrt=s(HI);Upo=r(Mrt,"Speech2TextProcessor"),Mrt.forEach(t),Jpo=r(q6e," (Speech2Text model)"),q6e.forEach(t),Ypo=i(_e),tp=n(_e,"LI",{});var j6e=s(tp);Kse=n(j6e,"STRONG",{});var Ert=s(Kse);Kpo=r(Ert,"speech_to_text_2"),Ert.forEach(t),Zpo=r(j6e," \u2014 "),UI=n(j6e,"A",{href:!0});var Crt=s(UI);e_o=r(Crt,"Speech2Text2Processor"),Crt.forEach(t),o_o=r(j6e," (Speech2Text2 model)"),j6e.forEach(t),r_o=i(_e),ap=n(_e,"LI",{});var D6e=s(ap);Zse=n(D6e,"STRONG",{});var wrt=s(Zse);t_o=r(wrt,"trocr"),wrt.forEach(t),a_o=r(D6e," \u2014 "),JI=n(D6e,"A",{href:!0});var Art=s(JI);n_o=r(Art,"TrOCRProcessor"),Art.forEach(t),s_o=r(D6e," (TrOCR model)"),D6e.forEach(t),l_o=i(_e),np=n(_e,"LI",{});var G6e=s(np);ele=n(G6e,"STRONG",{});var Lrt=s(ele);i_o=r(Lrt,"unispeech"),Lrt.forEach(t),d_o=r(G6e," \u2014 "),YI=n(G6e,"A",{href:!0});var yrt=s(YI);c_o=r(yrt,"Wav2Vec2Processor"),yrt.forEach(t),f_o=r(G6e," (UniSpeech model)"),G6e.forEach(t),m_o=i(_e),sp=n(_e,"LI",{});var O6e=s(sp);ole=n(O6e,"STRONG",{});var xrt=s(ole);g_o=r(xrt,"unispeech-sat"),xrt.forEach(t),h_o=r(O6e," \u2014 "),KI=n(O6e,"A",{href:!0});var $rt=s(KI);p_o=r($rt,"Wav2Vec2Processor"),$rt.forEach(t),__o=r(O6e," (UniSpeechSat model)"),O6e.forEach(t),u_o=i(_e),lp=n(_e,"LI",{});var V6e=s(lp);rle=n(V6e,"STRONG",{});var krt=s(rle);b_o=r(krt,"vilt"),krt.forEach(t),v_o=r(V6e," \u2014 "),ZI=n(V6e,"A",{href:!0});var Srt=s(ZI);F_o=r(Srt,"ViltProcessor"),Srt.forEach(t),T_o=r(V6e," (ViLT model)"),V6e.forEach(t),M_o=i(_e),ip=n(_e,"LI",{});var X6e=s(ip);tle=n(X6e,"STRONG",{});var Rrt=s(tle);E_o=r(Rrt,"vision-text-dual-encoder"),Rrt.forEach(t),C_o=r(X6e," \u2014 "),eN=n(X6e,"A",{href:!0});var Prt=s(eN);w_o=r(Prt,"VisionTextDualEncoderProcessor"),Prt.forEach(t),A_o=r(X6e," (VisionTextDualEncoder model)"),X6e.forEach(t),L_o=i(_e),dp=n(_e,"LI",{});var z6e=s(dp);ale=n(z6e,"STRONG",{});var Brt=s(ale);y_o=r(Brt,"wav2vec2"),Brt.forEach(t),x_o=r(z6e," \u2014 "),oN=n(z6e,"A",{href:!0});var Irt=s(oN);$_o=r(Irt,"Wav2Vec2Processor"),Irt.forEach(t),k_o=r(z6e," (Wav2Vec2 model)"),z6e.forEach(t),S_o=i(_e),cp=n(_e,"LI",{});var W6e=s(cp);nle=n(W6e,"STRONG",{});var Nrt=s(nle);R_o=r(Nrt,"wav2vec2-conformer"),Nrt.forEach(t),P_o=r(W6e," \u2014 "),rN=n(W6e,"A",{href:!0});var qrt=s(rN);B_o=r(qrt,"Wav2Vec2Processor"),qrt.forEach(t),I_o=r(W6e," (Wav2Vec2-Conformer model)"),W6e.forEach(t),N_o=i(_e),fp=n(_e,"LI",{});var Q6e=s(fp);sle=n(Q6e,"STRONG",{});var jrt=s(sle);q_o=r(jrt,"wavlm"),jrt.forEach(t),j_o=r(Q6e," \u2014 "),tN=n(Q6e,"A",{href:!0});var Drt=s(tN);D_o=r(Drt,"Wav2Vec2Processor"),Drt.forEach(t),G_o=r(Q6e," (WavLM model)"),Q6e.forEach(t),_e.forEach(t),O_o=i(ea),T(mp.$$.fragment,ea),V_o=i(ea),T(gp.$$.fragment,ea),ea.forEach(t),X_o=i(Os),hp=n(Os,"DIV",{class:!0});var PGe=s(hp);T(_L.$$.fragment,PGe),z_o=i(PGe),lle=n(PGe,"P",{});var Grt=s(lle);W_o=r(Grt,"Register a new processor for this class."),Grt.forEach(t),PGe.forEach(t),Os.forEach(t),kje=i(f),Li=n(f,"H2",{class:!0});var BGe=s(Li);pp=n(BGe,"A",{id:!0,class:!0,href:!0});var Ort=s(pp);ile=n(Ort,"SPAN",{});var Vrt=s(ile);T(uL.$$.fragment,Vrt),Vrt.forEach(t),Ort.forEach(t),Q_o=i(BGe),dle=n(BGe,"SPAN",{});var Xrt=s(dle);H_o=r(Xrt,"AutoModel"),Xrt.forEach(t),BGe.forEach(t),Sje=i(f),yo=n(f,"DIV",{class:!0});var Vs=s(yo);T(bL.$$.fragment,Vs),U_o=i(Vs),yi=n(Vs,"P",{});var oee=s(yi);J_o=r(oee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aN=n(oee,"A",{href:!0});var zrt=s(aN);Y_o=r(zrt,"from_pretrained()"),zrt.forEach(t),K_o=r(oee," class method or the "),nN=n(oee,"A",{href:!0});var Wrt=s(nN);Z_o=r(Wrt,"from_config()"),Wrt.forEach(t),euo=r(oee,` class
method.`),oee.forEach(t),ouo=i(Vs),vL=n(Vs,"P",{});var IGe=s(vL);ruo=r(IGe,"This class cannot be instantiated directly using "),cle=n(IGe,"CODE",{});var Qrt=s(cle);tuo=r(Qrt,"__init__()"),Qrt.forEach(t),auo=r(IGe," (throws an error)."),IGe.forEach(t),nuo=i(Vs),tt=n(Vs,"DIV",{class:!0});var Uw=s(tt);T(FL.$$.fragment,Uw),suo=i(Uw),fle=n(Uw,"P",{});var Hrt=s(fle);luo=r(Hrt,"Instantiates one of the base model classes of the library from a configuration."),Hrt.forEach(t),iuo=i(Uw),xi=n(Uw,"P",{});var ree=s(xi);duo=r(ree,`Note:
Loading a model from its configuration file does `),mle=n(ree,"STRONG",{});var Urt=s(mle);cuo=r(Urt,"not"),Urt.forEach(t),fuo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(ree,"A",{href:!0});var Jrt=s(sN);muo=r(Jrt,"from_pretrained()"),Jrt.forEach(t),guo=r(ree," to load the model weights."),ree.forEach(t),huo=i(Uw),T(_p.$$.fragment,Uw),Uw.forEach(t),puo=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(TL.$$.fragment,oa),_uo=i(oa),gle=n(oa,"P",{});var Yrt=s(gle);uuo=r(Yrt,"Instantiate one of the base model classes of the library from a pretrained model."),Yrt.forEach(t),buo=i(oa),ya=n(oa,"P",{});var Jw=s(ya);vuo=r(Jw,"The model class to instantiate is selected based on the "),hle=n(Jw,"CODE",{});var Krt=s(hle);Fuo=r(Krt,"model_type"),Krt.forEach(t),Tuo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),ple=n(Jw,"CODE",{});var Zrt=s(ple);Muo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),Euo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(Jw,"CODE",{});var ett=s(_le);Cuo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),wuo=r(Jw,":"),Jw.forEach(t),Auo=i(oa),y=n(oa,"UL",{});var $=s(y);up=n($,"LI",{});var H6e=s(up);ule=n(H6e,"STRONG",{});var ott=s(ule);Luo=r(ott,"albert"),ott.forEach(t),yuo=r(H6e," \u2014 "),lN=n(H6e,"A",{href:!0});var rtt=s(lN);xuo=r(rtt,"AlbertModel"),rtt.forEach(t),$uo=r(H6e," (ALBERT model)"),H6e.forEach(t),kuo=i($),bp=n($,"LI",{});var U6e=s(bp);ble=n(U6e,"STRONG",{});var ttt=s(ble);Suo=r(ttt,"bart"),ttt.forEach(t),Ruo=r(U6e," \u2014 "),iN=n(U6e,"A",{href:!0});var att=s(iN);Puo=r(att,"BartModel"),att.forEach(t),Buo=r(U6e," (BART model)"),U6e.forEach(t),Iuo=i($),vp=n($,"LI",{});var J6e=s(vp);vle=n(J6e,"STRONG",{});var ntt=s(vle);Nuo=r(ntt,"beit"),ntt.forEach(t),quo=r(J6e," \u2014 "),dN=n(J6e,"A",{href:!0});var stt=s(dN);juo=r(stt,"BeitModel"),stt.forEach(t),Duo=r(J6e," (BEiT model)"),J6e.forEach(t),Guo=i($),Fp=n($,"LI",{});var Y6e=s(Fp);Fle=n(Y6e,"STRONG",{});var ltt=s(Fle);Ouo=r(ltt,"bert"),ltt.forEach(t),Vuo=r(Y6e," \u2014 "),cN=n(Y6e,"A",{href:!0});var itt=s(cN);Xuo=r(itt,"BertModel"),itt.forEach(t),zuo=r(Y6e," (BERT model)"),Y6e.forEach(t),Wuo=i($),Tp=n($,"LI",{});var K6e=s(Tp);Tle=n(K6e,"STRONG",{});var dtt=s(Tle);Quo=r(dtt,"bert-generation"),dtt.forEach(t),Huo=r(K6e," \u2014 "),fN=n(K6e,"A",{href:!0});var ctt=s(fN);Uuo=r(ctt,"BertGenerationEncoder"),ctt.forEach(t),Juo=r(K6e," (Bert Generation model)"),K6e.forEach(t),Yuo=i($),Mp=n($,"LI",{});var Z6e=s(Mp);Mle=n(Z6e,"STRONG",{});var ftt=s(Mle);Kuo=r(ftt,"big_bird"),ftt.forEach(t),Zuo=r(Z6e," \u2014 "),mN=n(Z6e,"A",{href:!0});var mtt=s(mN);e1o=r(mtt,"BigBirdModel"),mtt.forEach(t),o1o=r(Z6e," (BigBird model)"),Z6e.forEach(t),r1o=i($),Ep=n($,"LI",{});var eLe=s(Ep);Ele=n(eLe,"STRONG",{});var gtt=s(Ele);t1o=r(gtt,"bigbird_pegasus"),gtt.forEach(t),a1o=r(eLe," \u2014 "),gN=n(eLe,"A",{href:!0});var htt=s(gN);n1o=r(htt,"BigBirdPegasusModel"),htt.forEach(t),s1o=r(eLe," (BigBird-Pegasus model)"),eLe.forEach(t),l1o=i($),Cp=n($,"LI",{});var oLe=s(Cp);Cle=n(oLe,"STRONG",{});var ptt=s(Cle);i1o=r(ptt,"blenderbot"),ptt.forEach(t),d1o=r(oLe," \u2014 "),hN=n(oLe,"A",{href:!0});var _tt=s(hN);c1o=r(_tt,"BlenderbotModel"),_tt.forEach(t),f1o=r(oLe," (Blenderbot model)"),oLe.forEach(t),m1o=i($),wp=n($,"LI",{});var rLe=s(wp);wle=n(rLe,"STRONG",{});var utt=s(wle);g1o=r(utt,"blenderbot-small"),utt.forEach(t),h1o=r(rLe," \u2014 "),pN=n(rLe,"A",{href:!0});var btt=s(pN);p1o=r(btt,"BlenderbotSmallModel"),btt.forEach(t),_1o=r(rLe," (BlenderbotSmall model)"),rLe.forEach(t),u1o=i($),Ap=n($,"LI",{});var tLe=s(Ap);Ale=n(tLe,"STRONG",{});var vtt=s(Ale);b1o=r(vtt,"camembert"),vtt.forEach(t),v1o=r(tLe," \u2014 "),_N=n(tLe,"A",{href:!0});var Ftt=s(_N);F1o=r(Ftt,"CamembertModel"),Ftt.forEach(t),T1o=r(tLe," (CamemBERT model)"),tLe.forEach(t),M1o=i($),Lp=n($,"LI",{});var aLe=s(Lp);Lle=n(aLe,"STRONG",{});var Ttt=s(Lle);E1o=r(Ttt,"canine"),Ttt.forEach(t),C1o=r(aLe," \u2014 "),uN=n(aLe,"A",{href:!0});var Mtt=s(uN);w1o=r(Mtt,"CanineModel"),Mtt.forEach(t),A1o=r(aLe," (CANINE model)"),aLe.forEach(t),L1o=i($),yp=n($,"LI",{});var nLe=s(yp);yle=n(nLe,"STRONG",{});var Ett=s(yle);y1o=r(Ett,"clip"),Ett.forEach(t),x1o=r(nLe," \u2014 "),bN=n(nLe,"A",{href:!0});var Ctt=s(bN);$1o=r(Ctt,"CLIPModel"),Ctt.forEach(t),k1o=r(nLe," (CLIP model)"),nLe.forEach(t),S1o=i($),xp=n($,"LI",{});var sLe=s(xp);xle=n(sLe,"STRONG",{});var wtt=s(xle);R1o=r(wtt,"convbert"),wtt.forEach(t),P1o=r(sLe," \u2014 "),vN=n(sLe,"A",{href:!0});var Att=s(vN);B1o=r(Att,"ConvBertModel"),Att.forEach(t),I1o=r(sLe," (ConvBERT model)"),sLe.forEach(t),N1o=i($),$p=n($,"LI",{});var lLe=s($p);$le=n(lLe,"STRONG",{});var Ltt=s($le);q1o=r(Ltt,"convnext"),Ltt.forEach(t),j1o=r(lLe," \u2014 "),FN=n(lLe,"A",{href:!0});var ytt=s(FN);D1o=r(ytt,"ConvNextModel"),ytt.forEach(t),G1o=r(lLe," (ConvNeXT model)"),lLe.forEach(t),O1o=i($),kp=n($,"LI",{});var iLe=s(kp);kle=n(iLe,"STRONG",{});var xtt=s(kle);V1o=r(xtt,"ctrl"),xtt.forEach(t),X1o=r(iLe," \u2014 "),TN=n(iLe,"A",{href:!0});var $tt=s(TN);z1o=r($tt,"CTRLModel"),$tt.forEach(t),W1o=r(iLe," (CTRL model)"),iLe.forEach(t),Q1o=i($),Sp=n($,"LI",{});var dLe=s(Sp);Sle=n(dLe,"STRONG",{});var ktt=s(Sle);H1o=r(ktt,"cvt"),ktt.forEach(t),U1o=r(dLe," \u2014 "),MN=n(dLe,"A",{href:!0});var Stt=s(MN);J1o=r(Stt,"CvtModel"),Stt.forEach(t),Y1o=r(dLe," (CvT model)"),dLe.forEach(t),K1o=i($),Rp=n($,"LI",{});var cLe=s(Rp);Rle=n(cLe,"STRONG",{});var Rtt=s(Rle);Z1o=r(Rtt,"data2vec-audio"),Rtt.forEach(t),e3o=r(cLe," \u2014 "),EN=n(cLe,"A",{href:!0});var Ptt=s(EN);o3o=r(Ptt,"Data2VecAudioModel"),Ptt.forEach(t),r3o=r(cLe," (Data2VecAudio model)"),cLe.forEach(t),t3o=i($),Pp=n($,"LI",{});var fLe=s(Pp);Ple=n(fLe,"STRONG",{});var Btt=s(Ple);a3o=r(Btt,"data2vec-text"),Btt.forEach(t),n3o=r(fLe," \u2014 "),CN=n(fLe,"A",{href:!0});var Itt=s(CN);s3o=r(Itt,"Data2VecTextModel"),Itt.forEach(t),l3o=r(fLe," (Data2VecText model)"),fLe.forEach(t),i3o=i($),Bp=n($,"LI",{});var mLe=s(Bp);Ble=n(mLe,"STRONG",{});var Ntt=s(Ble);d3o=r(Ntt,"data2vec-vision"),Ntt.forEach(t),c3o=r(mLe," \u2014 "),wN=n(mLe,"A",{href:!0});var qtt=s(wN);f3o=r(qtt,"Data2VecVisionModel"),qtt.forEach(t),m3o=r(mLe," (Data2VecVision model)"),mLe.forEach(t),g3o=i($),Ip=n($,"LI",{});var gLe=s(Ip);Ile=n(gLe,"STRONG",{});var jtt=s(Ile);h3o=r(jtt,"deberta"),jtt.forEach(t),p3o=r(gLe," \u2014 "),AN=n(gLe,"A",{href:!0});var Dtt=s(AN);_3o=r(Dtt,"DebertaModel"),Dtt.forEach(t),u3o=r(gLe," (DeBERTa model)"),gLe.forEach(t),b3o=i($),Np=n($,"LI",{});var hLe=s(Np);Nle=n(hLe,"STRONG",{});var Gtt=s(Nle);v3o=r(Gtt,"deberta-v2"),Gtt.forEach(t),F3o=r(hLe," \u2014 "),LN=n(hLe,"A",{href:!0});var Ott=s(LN);T3o=r(Ott,"DebertaV2Model"),Ott.forEach(t),M3o=r(hLe," (DeBERTa-v2 model)"),hLe.forEach(t),E3o=i($),qp=n($,"LI",{});var pLe=s(qp);qle=n(pLe,"STRONG",{});var Vtt=s(qle);C3o=r(Vtt,"decision_transformer"),Vtt.forEach(t),w3o=r(pLe," \u2014 "),yN=n(pLe,"A",{href:!0});var Xtt=s(yN);A3o=r(Xtt,"DecisionTransformerModel"),Xtt.forEach(t),L3o=r(pLe," (Decision Transformer model)"),pLe.forEach(t),y3o=i($),jp=n($,"LI",{});var _Le=s(jp);jle=n(_Le,"STRONG",{});var ztt=s(jle);x3o=r(ztt,"deit"),ztt.forEach(t),$3o=r(_Le," \u2014 "),xN=n(_Le,"A",{href:!0});var Wtt=s(xN);k3o=r(Wtt,"DeiTModel"),Wtt.forEach(t),S3o=r(_Le," (DeiT model)"),_Le.forEach(t),R3o=i($),Dp=n($,"LI",{});var uLe=s(Dp);Dle=n(uLe,"STRONG",{});var Qtt=s(Dle);P3o=r(Qtt,"detr"),Qtt.forEach(t),B3o=r(uLe," \u2014 "),$N=n(uLe,"A",{href:!0});var Htt=s($N);I3o=r(Htt,"DetrModel"),Htt.forEach(t),N3o=r(uLe," (DETR model)"),uLe.forEach(t),q3o=i($),Gp=n($,"LI",{});var bLe=s(Gp);Gle=n(bLe,"STRONG",{});var Utt=s(Gle);j3o=r(Utt,"distilbert"),Utt.forEach(t),D3o=r(bLe," \u2014 "),kN=n(bLe,"A",{href:!0});var Jtt=s(kN);G3o=r(Jtt,"DistilBertModel"),Jtt.forEach(t),O3o=r(bLe," (DistilBERT model)"),bLe.forEach(t),V3o=i($),Op=n($,"LI",{});var vLe=s(Op);Ole=n(vLe,"STRONG",{});var Ytt=s(Ole);X3o=r(Ytt,"dpr"),Ytt.forEach(t),z3o=r(vLe," \u2014 "),SN=n(vLe,"A",{href:!0});var Ktt=s(SN);W3o=r(Ktt,"DPRQuestionEncoder"),Ktt.forEach(t),Q3o=r(vLe," (DPR model)"),vLe.forEach(t),H3o=i($),Vp=n($,"LI",{});var FLe=s(Vp);Vle=n(FLe,"STRONG",{});var Ztt=s(Vle);U3o=r(Ztt,"dpt"),Ztt.forEach(t),J3o=r(FLe," \u2014 "),RN=n(FLe,"A",{href:!0});var eat=s(RN);Y3o=r(eat,"DPTModel"),eat.forEach(t),K3o=r(FLe," (DPT model)"),FLe.forEach(t),Z3o=i($),Xp=n($,"LI",{});var TLe=s(Xp);Xle=n(TLe,"STRONG",{});var oat=s(Xle);ebo=r(oat,"electra"),oat.forEach(t),obo=r(TLe," \u2014 "),PN=n(TLe,"A",{href:!0});var rat=s(PN);rbo=r(rat,"ElectraModel"),rat.forEach(t),tbo=r(TLe," (ELECTRA model)"),TLe.forEach(t),abo=i($),zp=n($,"LI",{});var MLe=s(zp);zle=n(MLe,"STRONG",{});var tat=s(zle);nbo=r(tat,"flaubert"),tat.forEach(t),sbo=r(MLe," \u2014 "),BN=n(MLe,"A",{href:!0});var aat=s(BN);lbo=r(aat,"FlaubertModel"),aat.forEach(t),ibo=r(MLe," (FlauBERT model)"),MLe.forEach(t),dbo=i($),Wp=n($,"LI",{});var ELe=s(Wp);Wle=n(ELe,"STRONG",{});var nat=s(Wle);cbo=r(nat,"flava"),nat.forEach(t),fbo=r(ELe," \u2014 "),IN=n(ELe,"A",{href:!0});var sat=s(IN);mbo=r(sat,"FlavaModel"),sat.forEach(t),gbo=r(ELe," (FLAVA model)"),ELe.forEach(t),hbo=i($),Qp=n($,"LI",{});var CLe=s(Qp);Qle=n(CLe,"STRONG",{});var lat=s(Qle);pbo=r(lat,"fnet"),lat.forEach(t),_bo=r(CLe," \u2014 "),NN=n(CLe,"A",{href:!0});var iat=s(NN);ubo=r(iat,"FNetModel"),iat.forEach(t),bbo=r(CLe," (FNet model)"),CLe.forEach(t),vbo=i($),Hp=n($,"LI",{});var wLe=s(Hp);Hle=n(wLe,"STRONG",{});var dat=s(Hle);Fbo=r(dat,"fsmt"),dat.forEach(t),Tbo=r(wLe," \u2014 "),qN=n(wLe,"A",{href:!0});var cat=s(qN);Mbo=r(cat,"FSMTModel"),cat.forEach(t),Ebo=r(wLe," (FairSeq Machine-Translation model)"),wLe.forEach(t),Cbo=i($),Bs=n($,"LI",{});var lk=s(Bs);Ule=n(lk,"STRONG",{});var fat=s(Ule);wbo=r(fat,"funnel"),fat.forEach(t),Abo=r(lk," \u2014 "),jN=n(lk,"A",{href:!0});var mat=s(jN);Lbo=r(mat,"FunnelModel"),mat.forEach(t),ybo=r(lk," or "),DN=n(lk,"A",{href:!0});var gat=s(DN);xbo=r(gat,"FunnelBaseModel"),gat.forEach(t),$bo=r(lk," (Funnel Transformer model)"),lk.forEach(t),kbo=i($),Up=n($,"LI",{});var ALe=s(Up);Jle=n(ALe,"STRONG",{});var hat=s(Jle);Sbo=r(hat,"glpn"),hat.forEach(t),Rbo=r(ALe," \u2014 "),GN=n(ALe,"A",{href:!0});var pat=s(GN);Pbo=r(pat,"GLPNModel"),pat.forEach(t),Bbo=r(ALe," (GLPN model)"),ALe.forEach(t),Ibo=i($),Jp=n($,"LI",{});var LLe=s(Jp);Yle=n(LLe,"STRONG",{});var _at=s(Yle);Nbo=r(_at,"gpt2"),_at.forEach(t),qbo=r(LLe," \u2014 "),ON=n(LLe,"A",{href:!0});var uat=s(ON);jbo=r(uat,"GPT2Model"),uat.forEach(t),Dbo=r(LLe," (OpenAI GPT-2 model)"),LLe.forEach(t),Gbo=i($),Yp=n($,"LI",{});var yLe=s(Yp);Kle=n(yLe,"STRONG",{});var bat=s(Kle);Obo=r(bat,"gpt_neo"),bat.forEach(t),Vbo=r(yLe," \u2014 "),VN=n(yLe,"A",{href:!0});var vat=s(VN);Xbo=r(vat,"GPTNeoModel"),vat.forEach(t),zbo=r(yLe," (GPT Neo model)"),yLe.forEach(t),Wbo=i($),Kp=n($,"LI",{});var xLe=s(Kp);Zle=n(xLe,"STRONG",{});var Fat=s(Zle);Qbo=r(Fat,"gpt_neox"),Fat.forEach(t),Hbo=r(xLe," \u2014 "),XN=n(xLe,"A",{href:!0});var Tat=s(XN);Ubo=r(Tat,"GPTNeoXModel"),Tat.forEach(t),Jbo=r(xLe," (GPT NeoX model)"),xLe.forEach(t),Ybo=i($),Zp=n($,"LI",{});var $Le=s(Zp);eie=n($Le,"STRONG",{});var Mat=s(eie);Kbo=r(Mat,"gptj"),Mat.forEach(t),Zbo=r($Le," \u2014 "),zN=n($Le,"A",{href:!0});var Eat=s(zN);e2o=r(Eat,"GPTJModel"),Eat.forEach(t),o2o=r($Le," (GPT-J model)"),$Le.forEach(t),r2o=i($),e_=n($,"LI",{});var kLe=s(e_);oie=n(kLe,"STRONG",{});var Cat=s(oie);t2o=r(Cat,"groupvit"),Cat.forEach(t),a2o=r(kLe," \u2014 "),WN=n(kLe,"A",{href:!0});var wat=s(WN);n2o=r(wat,"GroupViTModel"),wat.forEach(t),s2o=r(kLe," (GroupViT model)"),kLe.forEach(t),l2o=i($),o_=n($,"LI",{});var SLe=s(o_);rie=n(SLe,"STRONG",{});var Aat=s(rie);i2o=r(Aat,"hubert"),Aat.forEach(t),d2o=r(SLe," \u2014 "),QN=n(SLe,"A",{href:!0});var Lat=s(QN);c2o=r(Lat,"HubertModel"),Lat.forEach(t),f2o=r(SLe," (Hubert model)"),SLe.forEach(t),m2o=i($),r_=n($,"LI",{});var RLe=s(r_);tie=n(RLe,"STRONG",{});var yat=s(tie);g2o=r(yat,"ibert"),yat.forEach(t),h2o=r(RLe," \u2014 "),HN=n(RLe,"A",{href:!0});var xat=s(HN);p2o=r(xat,"IBertModel"),xat.forEach(t),_2o=r(RLe," (I-BERT model)"),RLe.forEach(t),u2o=i($),t_=n($,"LI",{});var PLe=s(t_);aie=n(PLe,"STRONG",{});var $at=s(aie);b2o=r($at,"imagegpt"),$at.forEach(t),v2o=r(PLe," \u2014 "),UN=n(PLe,"A",{href:!0});var kat=s(UN);F2o=r(kat,"ImageGPTModel"),kat.forEach(t),T2o=r(PLe," (ImageGPT model)"),PLe.forEach(t),M2o=i($),a_=n($,"LI",{});var BLe=s(a_);nie=n(BLe,"STRONG",{});var Sat=s(nie);E2o=r(Sat,"layoutlm"),Sat.forEach(t),C2o=r(BLe," \u2014 "),JN=n(BLe,"A",{href:!0});var Rat=s(JN);w2o=r(Rat,"LayoutLMModel"),Rat.forEach(t),A2o=r(BLe," (LayoutLM model)"),BLe.forEach(t),L2o=i($),n_=n($,"LI",{});var ILe=s(n_);sie=n(ILe,"STRONG",{});var Pat=s(sie);y2o=r(Pat,"layoutlmv2"),Pat.forEach(t),x2o=r(ILe," \u2014 "),YN=n(ILe,"A",{href:!0});var Bat=s(YN);$2o=r(Bat,"LayoutLMv2Model"),Bat.forEach(t),k2o=r(ILe," (LayoutLMv2 model)"),ILe.forEach(t),S2o=i($),s_=n($,"LI",{});var NLe=s(s_);lie=n(NLe,"STRONG",{});var Iat=s(lie);R2o=r(Iat,"layoutlmv3"),Iat.forEach(t),P2o=r(NLe," \u2014 "),KN=n(NLe,"A",{href:!0});var Nat=s(KN);B2o=r(Nat,"LayoutLMv3Model"),Nat.forEach(t),I2o=r(NLe," (LayoutLMv3 model)"),NLe.forEach(t),N2o=i($),l_=n($,"LI",{});var qLe=s(l_);iie=n(qLe,"STRONG",{});var qat=s(iie);q2o=r(qat,"led"),qat.forEach(t),j2o=r(qLe," \u2014 "),ZN=n(qLe,"A",{href:!0});var jat=s(ZN);D2o=r(jat,"LEDModel"),jat.forEach(t),G2o=r(qLe," (LED model)"),qLe.forEach(t),O2o=i($),i_=n($,"LI",{});var jLe=s(i_);die=n(jLe,"STRONG",{});var Dat=s(die);V2o=r(Dat,"levit"),Dat.forEach(t),X2o=r(jLe," \u2014 "),eq=n(jLe,"A",{href:!0});var Gat=s(eq);z2o=r(Gat,"LevitModel"),Gat.forEach(t),W2o=r(jLe," (LeViT model)"),jLe.forEach(t),Q2o=i($),d_=n($,"LI",{});var DLe=s(d_);cie=n(DLe,"STRONG",{});var Oat=s(cie);H2o=r(Oat,"longformer"),Oat.forEach(t),U2o=r(DLe," \u2014 "),oq=n(DLe,"A",{href:!0});var Vat=s(oq);J2o=r(Vat,"LongformerModel"),Vat.forEach(t),Y2o=r(DLe," (Longformer model)"),DLe.forEach(t),K2o=i($),c_=n($,"LI",{});var GLe=s(c_);fie=n(GLe,"STRONG",{});var Xat=s(fie);Z2o=r(Xat,"luke"),Xat.forEach(t),evo=r(GLe," \u2014 "),rq=n(GLe,"A",{href:!0});var zat=s(rq);ovo=r(zat,"LukeModel"),zat.forEach(t),rvo=r(GLe," (LUKE model)"),GLe.forEach(t),tvo=i($),f_=n($,"LI",{});var OLe=s(f_);mie=n(OLe,"STRONG",{});var Wat=s(mie);avo=r(Wat,"lxmert"),Wat.forEach(t),nvo=r(OLe," \u2014 "),tq=n(OLe,"A",{href:!0});var Qat=s(tq);svo=r(Qat,"LxmertModel"),Qat.forEach(t),lvo=r(OLe," (LXMERT model)"),OLe.forEach(t),ivo=i($),m_=n($,"LI",{});var VLe=s(m_);gie=n(VLe,"STRONG",{});var Hat=s(gie);dvo=r(Hat,"m2m_100"),Hat.forEach(t),cvo=r(VLe," \u2014 "),aq=n(VLe,"A",{href:!0});var Uat=s(aq);fvo=r(Uat,"M2M100Model"),Uat.forEach(t),mvo=r(VLe," (M2M100 model)"),VLe.forEach(t),gvo=i($),g_=n($,"LI",{});var XLe=s(g_);hie=n(XLe,"STRONG",{});var Jat=s(hie);hvo=r(Jat,"marian"),Jat.forEach(t),pvo=r(XLe," \u2014 "),nq=n(XLe,"A",{href:!0});var Yat=s(nq);_vo=r(Yat,"MarianModel"),Yat.forEach(t),uvo=r(XLe," (Marian model)"),XLe.forEach(t),bvo=i($),h_=n($,"LI",{});var zLe=s(h_);pie=n(zLe,"STRONG",{});var Kat=s(pie);vvo=r(Kat,"maskformer"),Kat.forEach(t),Fvo=r(zLe," \u2014 "),sq=n(zLe,"A",{href:!0});var Zat=s(sq);Tvo=r(Zat,"MaskFormerModel"),Zat.forEach(t),Mvo=r(zLe," (MaskFormer model)"),zLe.forEach(t),Evo=i($),p_=n($,"LI",{});var WLe=s(p_);_ie=n(WLe,"STRONG",{});var ent=s(_ie);Cvo=r(ent,"mbart"),ent.forEach(t),wvo=r(WLe," \u2014 "),lq=n(WLe,"A",{href:!0});var ont=s(lq);Avo=r(ont,"MBartModel"),ont.forEach(t),Lvo=r(WLe," (mBART model)"),WLe.forEach(t),yvo=i($),__=n($,"LI",{});var QLe=s(__);uie=n(QLe,"STRONG",{});var rnt=s(uie);xvo=r(rnt,"mctct"),rnt.forEach(t),$vo=r(QLe," \u2014 "),iq=n(QLe,"A",{href:!0});var tnt=s(iq);kvo=r(tnt,"MCTCTModel"),tnt.forEach(t),Svo=r(QLe," (M-CTC-T model)"),QLe.forEach(t),Rvo=i($),u_=n($,"LI",{});var HLe=s(u_);bie=n(HLe,"STRONG",{});var ant=s(bie);Pvo=r(ant,"megatron-bert"),ant.forEach(t),Bvo=r(HLe," \u2014 "),dq=n(HLe,"A",{href:!0});var nnt=s(dq);Ivo=r(nnt,"MegatronBertModel"),nnt.forEach(t),Nvo=r(HLe," (Megatron-BERT model)"),HLe.forEach(t),qvo=i($),b_=n($,"LI",{});var ULe=s(b_);vie=n(ULe,"STRONG",{});var snt=s(vie);jvo=r(snt,"mobilebert"),snt.forEach(t),Dvo=r(ULe," \u2014 "),cq=n(ULe,"A",{href:!0});var lnt=s(cq);Gvo=r(lnt,"MobileBertModel"),lnt.forEach(t),Ovo=r(ULe," (MobileBERT model)"),ULe.forEach(t),Vvo=i($),v_=n($,"LI",{});var JLe=s(v_);Fie=n(JLe,"STRONG",{});var int=s(Fie);Xvo=r(int,"mpnet"),int.forEach(t),zvo=r(JLe," \u2014 "),fq=n(JLe,"A",{href:!0});var dnt=s(fq);Wvo=r(dnt,"MPNetModel"),dnt.forEach(t),Qvo=r(JLe," (MPNet model)"),JLe.forEach(t),Hvo=i($),F_=n($,"LI",{});var YLe=s(F_);Tie=n(YLe,"STRONG",{});var cnt=s(Tie);Uvo=r(cnt,"mt5"),cnt.forEach(t),Jvo=r(YLe," \u2014 "),mq=n(YLe,"A",{href:!0});var fnt=s(mq);Yvo=r(fnt,"MT5Model"),fnt.forEach(t),Kvo=r(YLe," (MT5 model)"),YLe.forEach(t),Zvo=i($),T_=n($,"LI",{});var KLe=s(T_);Mie=n(KLe,"STRONG",{});var mnt=s(Mie);eFo=r(mnt,"nystromformer"),mnt.forEach(t),oFo=r(KLe," \u2014 "),gq=n(KLe,"A",{href:!0});var gnt=s(gq);rFo=r(gnt,"NystromformerModel"),gnt.forEach(t),tFo=r(KLe," (Nystr\xF6mformer model)"),KLe.forEach(t),aFo=i($),M_=n($,"LI",{});var ZLe=s(M_);Eie=n(ZLe,"STRONG",{});var hnt=s(Eie);nFo=r(hnt,"openai-gpt"),hnt.forEach(t),sFo=r(ZLe," \u2014 "),hq=n(ZLe,"A",{href:!0});var pnt=s(hq);lFo=r(pnt,"OpenAIGPTModel"),pnt.forEach(t),iFo=r(ZLe," (OpenAI GPT model)"),ZLe.forEach(t),dFo=i($),E_=n($,"LI",{});var eye=s(E_);Cie=n(eye,"STRONG",{});var _nt=s(Cie);cFo=r(_nt,"opt"),_nt.forEach(t),fFo=r(eye," \u2014 "),pq=n(eye,"A",{href:!0});var unt=s(pq);mFo=r(unt,"OPTModel"),unt.forEach(t),gFo=r(eye," (OPT model)"),eye.forEach(t),hFo=i($),C_=n($,"LI",{});var oye=s(C_);wie=n(oye,"STRONG",{});var bnt=s(wie);pFo=r(bnt,"pegasus"),bnt.forEach(t),_Fo=r(oye," \u2014 "),_q=n(oye,"A",{href:!0});var vnt=s(_q);uFo=r(vnt,"PegasusModel"),vnt.forEach(t),bFo=r(oye," (Pegasus model)"),oye.forEach(t),vFo=i($),w_=n($,"LI",{});var rye=s(w_);Aie=n(rye,"STRONG",{});var Fnt=s(Aie);FFo=r(Fnt,"perceiver"),Fnt.forEach(t),TFo=r(rye," \u2014 "),uq=n(rye,"A",{href:!0});var Tnt=s(uq);MFo=r(Tnt,"PerceiverModel"),Tnt.forEach(t),EFo=r(rye," (Perceiver model)"),rye.forEach(t),CFo=i($),A_=n($,"LI",{});var tye=s(A_);Lie=n(tye,"STRONG",{});var Mnt=s(Lie);wFo=r(Mnt,"plbart"),Mnt.forEach(t),AFo=r(tye," \u2014 "),bq=n(tye,"A",{href:!0});var Ent=s(bq);LFo=r(Ent,"PLBartModel"),Ent.forEach(t),yFo=r(tye," (PLBart model)"),tye.forEach(t),xFo=i($),L_=n($,"LI",{});var aye=s(L_);yie=n(aye,"STRONG",{});var Cnt=s(yie);$Fo=r(Cnt,"poolformer"),Cnt.forEach(t),kFo=r(aye," \u2014 "),vq=n(aye,"A",{href:!0});var wnt=s(vq);SFo=r(wnt,"PoolFormerModel"),wnt.forEach(t),RFo=r(aye," (PoolFormer model)"),aye.forEach(t),PFo=i($),y_=n($,"LI",{});var nye=s(y_);xie=n(nye,"STRONG",{});var Ant=s(xie);BFo=r(Ant,"prophetnet"),Ant.forEach(t),IFo=r(nye," \u2014 "),Fq=n(nye,"A",{href:!0});var Lnt=s(Fq);NFo=r(Lnt,"ProphetNetModel"),Lnt.forEach(t),qFo=r(nye," (ProphetNet model)"),nye.forEach(t),jFo=i($),x_=n($,"LI",{});var sye=s(x_);$ie=n(sye,"STRONG",{});var ynt=s($ie);DFo=r(ynt,"qdqbert"),ynt.forEach(t),GFo=r(sye," \u2014 "),Tq=n(sye,"A",{href:!0});var xnt=s(Tq);OFo=r(xnt,"QDQBertModel"),xnt.forEach(t),VFo=r(sye," (QDQBert model)"),sye.forEach(t),XFo=i($),$_=n($,"LI",{});var lye=s($_);kie=n(lye,"STRONG",{});var $nt=s(kie);zFo=r($nt,"reformer"),$nt.forEach(t),WFo=r(lye," \u2014 "),Mq=n(lye,"A",{href:!0});var knt=s(Mq);QFo=r(knt,"ReformerModel"),knt.forEach(t),HFo=r(lye," (Reformer model)"),lye.forEach(t),UFo=i($),k_=n($,"LI",{});var iye=s(k_);Sie=n(iye,"STRONG",{});var Snt=s(Sie);JFo=r(Snt,"regnet"),Snt.forEach(t),YFo=r(iye," \u2014 "),Eq=n(iye,"A",{href:!0});var Rnt=s(Eq);KFo=r(Rnt,"RegNetModel"),Rnt.forEach(t),ZFo=r(iye," (RegNet model)"),iye.forEach(t),eTo=i($),S_=n($,"LI",{});var dye=s(S_);Rie=n(dye,"STRONG",{});var Pnt=s(Rie);oTo=r(Pnt,"rembert"),Pnt.forEach(t),rTo=r(dye," \u2014 "),Cq=n(dye,"A",{href:!0});var Bnt=s(Cq);tTo=r(Bnt,"RemBertModel"),Bnt.forEach(t),aTo=r(dye," (RemBERT model)"),dye.forEach(t),nTo=i($),R_=n($,"LI",{});var cye=s(R_);Pie=n(cye,"STRONG",{});var Int=s(Pie);sTo=r(Int,"resnet"),Int.forEach(t),lTo=r(cye," \u2014 "),wq=n(cye,"A",{href:!0});var Nnt=s(wq);iTo=r(Nnt,"ResNetModel"),Nnt.forEach(t),dTo=r(cye," (ResNet model)"),cye.forEach(t),cTo=i($),P_=n($,"LI",{});var fye=s(P_);Bie=n(fye,"STRONG",{});var qnt=s(Bie);fTo=r(qnt,"retribert"),qnt.forEach(t),mTo=r(fye," \u2014 "),Aq=n(fye,"A",{href:!0});var jnt=s(Aq);gTo=r(jnt,"RetriBertModel"),jnt.forEach(t),hTo=r(fye," (RetriBERT model)"),fye.forEach(t),pTo=i($),B_=n($,"LI",{});var mye=s(B_);Iie=n(mye,"STRONG",{});var Dnt=s(Iie);_To=r(Dnt,"roberta"),Dnt.forEach(t),uTo=r(mye," \u2014 "),Lq=n(mye,"A",{href:!0});var Gnt=s(Lq);bTo=r(Gnt,"RobertaModel"),Gnt.forEach(t),vTo=r(mye," (RoBERTa model)"),mye.forEach(t),FTo=i($),I_=n($,"LI",{});var gye=s(I_);Nie=n(gye,"STRONG",{});var Ont=s(Nie);TTo=r(Ont,"roformer"),Ont.forEach(t),MTo=r(gye," \u2014 "),yq=n(gye,"A",{href:!0});var Vnt=s(yq);ETo=r(Vnt,"RoFormerModel"),Vnt.forEach(t),CTo=r(gye," (RoFormer model)"),gye.forEach(t),wTo=i($),N_=n($,"LI",{});var hye=s(N_);qie=n(hye,"STRONG",{});var Xnt=s(qie);ATo=r(Xnt,"segformer"),Xnt.forEach(t),LTo=r(hye," \u2014 "),xq=n(hye,"A",{href:!0});var znt=s(xq);yTo=r(znt,"SegformerModel"),znt.forEach(t),xTo=r(hye," (SegFormer model)"),hye.forEach(t),$To=i($),q_=n($,"LI",{});var pye=s(q_);jie=n(pye,"STRONG",{});var Wnt=s(jie);kTo=r(Wnt,"sew"),Wnt.forEach(t),STo=r(pye," \u2014 "),$q=n(pye,"A",{href:!0});var Qnt=s($q);RTo=r(Qnt,"SEWModel"),Qnt.forEach(t),PTo=r(pye," (SEW model)"),pye.forEach(t),BTo=i($),j_=n($,"LI",{});var _ye=s(j_);Die=n(_ye,"STRONG",{});var Hnt=s(Die);ITo=r(Hnt,"sew-d"),Hnt.forEach(t),NTo=r(_ye," \u2014 "),kq=n(_ye,"A",{href:!0});var Unt=s(kq);qTo=r(Unt,"SEWDModel"),Unt.forEach(t),jTo=r(_ye," (SEW-D model)"),_ye.forEach(t),DTo=i($),D_=n($,"LI",{});var uye=s(D_);Gie=n(uye,"STRONG",{});var Jnt=s(Gie);GTo=r(Jnt,"speech_to_text"),Jnt.forEach(t),OTo=r(uye," \u2014 "),Sq=n(uye,"A",{href:!0});var Ynt=s(Sq);VTo=r(Ynt,"Speech2TextModel"),Ynt.forEach(t),XTo=r(uye," (Speech2Text model)"),uye.forEach(t),zTo=i($),G_=n($,"LI",{});var bye=s(G_);Oie=n(bye,"STRONG",{});var Knt=s(Oie);WTo=r(Knt,"splinter"),Knt.forEach(t),QTo=r(bye," \u2014 "),Rq=n(bye,"A",{href:!0});var Znt=s(Rq);HTo=r(Znt,"SplinterModel"),Znt.forEach(t),UTo=r(bye," (Splinter model)"),bye.forEach(t),JTo=i($),O_=n($,"LI",{});var vye=s(O_);Vie=n(vye,"STRONG",{});var est=s(Vie);YTo=r(est,"squeezebert"),est.forEach(t),KTo=r(vye," \u2014 "),Pq=n(vye,"A",{href:!0});var ost=s(Pq);ZTo=r(ost,"SqueezeBertModel"),ost.forEach(t),e7o=r(vye," (SqueezeBERT model)"),vye.forEach(t),o7o=i($),V_=n($,"LI",{});var Fye=s(V_);Xie=n(Fye,"STRONG",{});var rst=s(Xie);r7o=r(rst,"swin"),rst.forEach(t),t7o=r(Fye," \u2014 "),Bq=n(Fye,"A",{href:!0});var tst=s(Bq);a7o=r(tst,"SwinModel"),tst.forEach(t),n7o=r(Fye," (Swin Transformer model)"),Fye.forEach(t),s7o=i($),X_=n($,"LI",{});var Tye=s(X_);zie=n(Tye,"STRONG",{});var ast=s(zie);l7o=r(ast,"t5"),ast.forEach(t),i7o=r(Tye," \u2014 "),Iq=n(Tye,"A",{href:!0});var nst=s(Iq);d7o=r(nst,"T5Model"),nst.forEach(t),c7o=r(Tye," (T5 model)"),Tye.forEach(t),f7o=i($),z_=n($,"LI",{});var Mye=s(z_);Wie=n(Mye,"STRONG",{});var sst=s(Wie);m7o=r(sst,"tapas"),sst.forEach(t),g7o=r(Mye," \u2014 "),Nq=n(Mye,"A",{href:!0});var lst=s(Nq);h7o=r(lst,"TapasModel"),lst.forEach(t),p7o=r(Mye," (TAPAS model)"),Mye.forEach(t),_7o=i($),W_=n($,"LI",{});var Eye=s(W_);Qie=n(Eye,"STRONG",{});var ist=s(Qie);u7o=r(ist,"trajectory_transformer"),ist.forEach(t),b7o=r(Eye," \u2014 "),qq=n(Eye,"A",{href:!0});var dst=s(qq);v7o=r(dst,"TrajectoryTransformerModel"),dst.forEach(t),F7o=r(Eye," (Trajectory Transformer model)"),Eye.forEach(t),T7o=i($),Q_=n($,"LI",{});var Cye=s(Q_);Hie=n(Cye,"STRONG",{});var cst=s(Hie);M7o=r(cst,"transfo-xl"),cst.forEach(t),E7o=r(Cye," \u2014 "),jq=n(Cye,"A",{href:!0});var fst=s(jq);C7o=r(fst,"TransfoXLModel"),fst.forEach(t),w7o=r(Cye," (Transformer-XL model)"),Cye.forEach(t),A7o=i($),H_=n($,"LI",{});var wye=s(H_);Uie=n(wye,"STRONG",{});var mst=s(Uie);L7o=r(mst,"unispeech"),mst.forEach(t),y7o=r(wye," \u2014 "),Dq=n(wye,"A",{href:!0});var gst=s(Dq);x7o=r(gst,"UniSpeechModel"),gst.forEach(t),$7o=r(wye," (UniSpeech model)"),wye.forEach(t),k7o=i($),U_=n($,"LI",{});var Aye=s(U_);Jie=n(Aye,"STRONG",{});var hst=s(Jie);S7o=r(hst,"unispeech-sat"),hst.forEach(t),R7o=r(Aye," \u2014 "),Gq=n(Aye,"A",{href:!0});var pst=s(Gq);P7o=r(pst,"UniSpeechSatModel"),pst.forEach(t),B7o=r(Aye," (UniSpeechSat model)"),Aye.forEach(t),I7o=i($),J_=n($,"LI",{});var Lye=s(J_);Yie=n(Lye,"STRONG",{});var _st=s(Yie);N7o=r(_st,"van"),_st.forEach(t),q7o=r(Lye," \u2014 "),Oq=n(Lye,"A",{href:!0});var ust=s(Oq);j7o=r(ust,"VanModel"),ust.forEach(t),D7o=r(Lye," (VAN model)"),Lye.forEach(t),G7o=i($),Y_=n($,"LI",{});var yye=s(Y_);Kie=n(yye,"STRONG",{});var bst=s(Kie);O7o=r(bst,"vilt"),bst.forEach(t),V7o=r(yye," \u2014 "),Vq=n(yye,"A",{href:!0});var vst=s(Vq);X7o=r(vst,"ViltModel"),vst.forEach(t),z7o=r(yye," (ViLT model)"),yye.forEach(t),W7o=i($),K_=n($,"LI",{});var xye=s(K_);Zie=n(xye,"STRONG",{});var Fst=s(Zie);Q7o=r(Fst,"vision-text-dual-encoder"),Fst.forEach(t),H7o=r(xye," \u2014 "),Xq=n(xye,"A",{href:!0});var Tst=s(Xq);U7o=r(Tst,"VisionTextDualEncoderModel"),Tst.forEach(t),J7o=r(xye," (VisionTextDualEncoder model)"),xye.forEach(t),Y7o=i($),Z_=n($,"LI",{});var $ye=s(Z_);ede=n($ye,"STRONG",{});var Mst=s(ede);K7o=r(Mst,"visual_bert"),Mst.forEach(t),Z7o=r($ye," \u2014 "),zq=n($ye,"A",{href:!0});var Est=s(zq);eMo=r(Est,"VisualBertModel"),Est.forEach(t),oMo=r($ye," (VisualBERT model)"),$ye.forEach(t),rMo=i($),eu=n($,"LI",{});var kye=s(eu);ode=n(kye,"STRONG",{});var Cst=s(ode);tMo=r(Cst,"vit"),Cst.forEach(t),aMo=r(kye," \u2014 "),Wq=n(kye,"A",{href:!0});var wst=s(Wq);nMo=r(wst,"ViTModel"),wst.forEach(t),sMo=r(kye," (ViT model)"),kye.forEach(t),lMo=i($),ou=n($,"LI",{});var Sye=s(ou);rde=n(Sye,"STRONG",{});var Ast=s(rde);iMo=r(Ast,"vit_mae"),Ast.forEach(t),dMo=r(Sye," \u2014 "),Qq=n(Sye,"A",{href:!0});var Lst=s(Qq);cMo=r(Lst,"ViTMAEModel"),Lst.forEach(t),fMo=r(Sye," (ViTMAE model)"),Sye.forEach(t),mMo=i($),ru=n($,"LI",{});var Rye=s(ru);tde=n(Rye,"STRONG",{});var yst=s(tde);gMo=r(yst,"wav2vec2"),yst.forEach(t),hMo=r(Rye," \u2014 "),Hq=n(Rye,"A",{href:!0});var xst=s(Hq);pMo=r(xst,"Wav2Vec2Model"),xst.forEach(t),_Mo=r(Rye," (Wav2Vec2 model)"),Rye.forEach(t),uMo=i($),tu=n($,"LI",{});var Pye=s(tu);ade=n(Pye,"STRONG",{});var $st=s(ade);bMo=r($st,"wav2vec2-conformer"),$st.forEach(t),vMo=r(Pye," \u2014 "),Uq=n(Pye,"A",{href:!0});var kst=s(Uq);FMo=r(kst,"Wav2Vec2ConformerModel"),kst.forEach(t),TMo=r(Pye," (Wav2Vec2-Conformer model)"),Pye.forEach(t),MMo=i($),au=n($,"LI",{});var Bye=s(au);nde=n(Bye,"STRONG",{});var Sst=s(nde);EMo=r(Sst,"wavlm"),Sst.forEach(t),CMo=r(Bye," \u2014 "),Jq=n(Bye,"A",{href:!0});var Rst=s(Jq);wMo=r(Rst,"WavLMModel"),Rst.forEach(t),AMo=r(Bye," (WavLM model)"),Bye.forEach(t),LMo=i($),nu=n($,"LI",{});var Iye=s(nu);sde=n(Iye,"STRONG",{});var Pst=s(sde);yMo=r(Pst,"xglm"),Pst.forEach(t),xMo=r(Iye," \u2014 "),Yq=n(Iye,"A",{href:!0});var Bst=s(Yq);$Mo=r(Bst,"XGLMModel"),Bst.forEach(t),kMo=r(Iye," (XGLM model)"),Iye.forEach(t),SMo=i($),su=n($,"LI",{});var Nye=s(su);lde=n(Nye,"STRONG",{});var Ist=s(lde);RMo=r(Ist,"xlm"),Ist.forEach(t),PMo=r(Nye," \u2014 "),Kq=n(Nye,"A",{href:!0});var Nst=s(Kq);BMo=r(Nst,"XLMModel"),Nst.forEach(t),IMo=r(Nye," (XLM model)"),Nye.forEach(t),NMo=i($),lu=n($,"LI",{});var qye=s(lu);ide=n(qye,"STRONG",{});var qst=s(ide);qMo=r(qst,"xlm-prophetnet"),qst.forEach(t),jMo=r(qye," \u2014 "),Zq=n(qye,"A",{href:!0});var jst=s(Zq);DMo=r(jst,"XLMProphetNetModel"),jst.forEach(t),GMo=r(qye," (XLM-ProphetNet model)"),qye.forEach(t),OMo=i($),iu=n($,"LI",{});var jye=s(iu);dde=n(jye,"STRONG",{});var Dst=s(dde);VMo=r(Dst,"xlm-roberta"),Dst.forEach(t),XMo=r(jye," \u2014 "),ej=n(jye,"A",{href:!0});var Gst=s(ej);zMo=r(Gst,"XLMRobertaModel"),Gst.forEach(t),WMo=r(jye," (XLM-RoBERTa model)"),jye.forEach(t),QMo=i($),du=n($,"LI",{});var Dye=s(du);cde=n(Dye,"STRONG",{});var Ost=s(cde);HMo=r(Ost,"xlm-roberta-xl"),Ost.forEach(t),UMo=r(Dye," \u2014 "),oj=n(Dye,"A",{href:!0});var Vst=s(oj);JMo=r(Vst,"XLMRobertaXLModel"),Vst.forEach(t),YMo=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),KMo=i($),cu=n($,"LI",{});var Gye=s(cu);fde=n(Gye,"STRONG",{});var Xst=s(fde);ZMo=r(Xst,"xlnet"),Xst.forEach(t),e4o=r(Gye," \u2014 "),rj=n(Gye,"A",{href:!0});var zst=s(rj);o4o=r(zst,"XLNetModel"),zst.forEach(t),r4o=r(Gye," (XLNet model)"),Gye.forEach(t),t4o=i($),fu=n($,"LI",{});var Oye=s(fu);mde=n(Oye,"STRONG",{});var Wst=s(mde);a4o=r(Wst,"yolos"),Wst.forEach(t),n4o=r(Oye," \u2014 "),tj=n(Oye,"A",{href:!0});var Qst=s(tj);s4o=r(Qst,"YolosModel"),Qst.forEach(t),l4o=r(Oye," (YOLOS model)"),Oye.forEach(t),i4o=i($),mu=n($,"LI",{});var Vye=s(mu);gde=n(Vye,"STRONG",{});var Hst=s(gde);d4o=r(Hst,"yoso"),Hst.forEach(t),c4o=r(Vye," \u2014 "),aj=n(Vye,"A",{href:!0});var Ust=s(aj);f4o=r(Ust,"YosoModel"),Ust.forEach(t),m4o=r(Vye," (YOSO model)"),Vye.forEach(t),$.forEach(t),g4o=i(oa),gu=n(oa,"P",{});var Xye=s(gu);h4o=r(Xye,"The model is set in evaluation mode by default using "),hde=n(Xye,"CODE",{});var Jst=s(hde);p4o=r(Jst,"model.eval()"),Jst.forEach(t),_4o=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=n(Xye,"CODE",{});var Yst=s(pde);u4o=r(Yst,"model.train()"),Yst.forEach(t),Xye.forEach(t),b4o=i(oa),T(hu.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),Rje=i(f),$i=n(f,"H2",{class:!0});var NGe=s($i);pu=n(NGe,"A",{id:!0,class:!0,href:!0});var Kst=s(pu);_de=n(Kst,"SPAN",{});var Zst=s(_de);T(ML.$$.fragment,Zst),Zst.forEach(t),Kst.forEach(t),v4o=i(NGe),ude=n(NGe,"SPAN",{});var elt=s(ude);F4o=r(elt,"AutoModelForPreTraining"),elt.forEach(t),NGe.forEach(t),Pje=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T(EL.$$.fragment,Xs),T4o=i(Xs),ki=n(Xs,"P",{});var tee=s(ki);M4o=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nj=n(tee,"A",{href:!0});var olt=s(nj);E4o=r(olt,"from_pretrained()"),olt.forEach(t),C4o=r(tee," class method or the "),sj=n(tee,"A",{href:!0});var rlt=s(sj);w4o=r(rlt,"from_config()"),rlt.forEach(t),A4o=r(tee,` class
method.`),tee.forEach(t),L4o=i(Xs),CL=n(Xs,"P",{});var qGe=s(CL);y4o=r(qGe,"This class cannot be instantiated directly using "),bde=n(qGe,"CODE",{});var tlt=s(bde);x4o=r(tlt,"__init__()"),tlt.forEach(t),$4o=r(qGe," (throws an error)."),qGe.forEach(t),k4o=i(Xs),at=n(Xs,"DIV",{class:!0});var Yw=s(at);T(wL.$$.fragment,Yw),S4o=i(Yw),vde=n(Yw,"P",{});var alt=s(vde);R4o=r(alt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),alt.forEach(t),P4o=i(Yw),Si=n(Yw,"P",{});var aee=s(Si);B4o=r(aee,`Note:
Loading a model from its configuration file does `),Fde=n(aee,"STRONG",{});var nlt=s(Fde);I4o=r(nlt,"not"),nlt.forEach(t),N4o=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(aee,"A",{href:!0});var slt=s(lj);q4o=r(slt,"from_pretrained()"),slt.forEach(t),j4o=r(aee," to load the model weights."),aee.forEach(t),D4o=i(Yw),T(_u.$$.fragment,Yw),Yw.forEach(t),G4o=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(AL.$$.fragment,ra),O4o=i(ra),Tde=n(ra,"P",{});var llt=s(Tde);V4o=r(llt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),llt.forEach(t),X4o=i(ra),xa=n(ra,"P",{});var Kw=s(xa);z4o=r(Kw,"The model class to instantiate is selected based on the "),Mde=n(Kw,"CODE",{});var ilt=s(Mde);W4o=r(ilt,"model_type"),ilt.forEach(t),Q4o=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Ede=n(Kw,"CODE",{});var dlt=s(Ede);H4o=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),U4o=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(Kw,"CODE",{});var clt=s(Cde);J4o=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),Y4o=r(Kw,":"),Kw.forEach(t),K4o=i(ra),G=n(ra,"UL",{});var O=s(G);uu=n(O,"LI",{});var zye=s(uu);wde=n(zye,"STRONG",{});var flt=s(wde);Z4o=r(flt,"albert"),flt.forEach(t),eEo=r(zye," \u2014 "),ij=n(zye,"A",{href:!0});var mlt=s(ij);oEo=r(mlt,"AlbertForPreTraining"),mlt.forEach(t),rEo=r(zye," (ALBERT model)"),zye.forEach(t),tEo=i(O),bu=n(O,"LI",{});var Wye=s(bu);Ade=n(Wye,"STRONG",{});var glt=s(Ade);aEo=r(glt,"bart"),glt.forEach(t),nEo=r(Wye," \u2014 "),dj=n(Wye,"A",{href:!0});var hlt=s(dj);sEo=r(hlt,"BartForConditionalGeneration"),hlt.forEach(t),lEo=r(Wye," (BART model)"),Wye.forEach(t),iEo=i(O),vu=n(O,"LI",{});var Qye=s(vu);Lde=n(Qye,"STRONG",{});var plt=s(Lde);dEo=r(plt,"bert"),plt.forEach(t),cEo=r(Qye," \u2014 "),cj=n(Qye,"A",{href:!0});var _lt=s(cj);fEo=r(_lt,"BertForPreTraining"),_lt.forEach(t),mEo=r(Qye," (BERT model)"),Qye.forEach(t),gEo=i(O),Fu=n(O,"LI",{});var Hye=s(Fu);yde=n(Hye,"STRONG",{});var ult=s(yde);hEo=r(ult,"big_bird"),ult.forEach(t),pEo=r(Hye," \u2014 "),fj=n(Hye,"A",{href:!0});var blt=s(fj);_Eo=r(blt,"BigBirdForPreTraining"),blt.forEach(t),uEo=r(Hye," (BigBird model)"),Hye.forEach(t),bEo=i(O),Tu=n(O,"LI",{});var Uye=s(Tu);xde=n(Uye,"STRONG",{});var vlt=s(xde);vEo=r(vlt,"camembert"),vlt.forEach(t),FEo=r(Uye," \u2014 "),mj=n(Uye,"A",{href:!0});var Flt=s(mj);TEo=r(Flt,"CamembertForMaskedLM"),Flt.forEach(t),MEo=r(Uye," (CamemBERT model)"),Uye.forEach(t),EEo=i(O),Mu=n(O,"LI",{});var Jye=s(Mu);$de=n(Jye,"STRONG",{});var Tlt=s($de);CEo=r(Tlt,"ctrl"),Tlt.forEach(t),wEo=r(Jye," \u2014 "),gj=n(Jye,"A",{href:!0});var Mlt=s(gj);AEo=r(Mlt,"CTRLLMHeadModel"),Mlt.forEach(t),LEo=r(Jye," (CTRL model)"),Jye.forEach(t),yEo=i(O),Eu=n(O,"LI",{});var Yye=s(Eu);kde=n(Yye,"STRONG",{});var Elt=s(kde);xEo=r(Elt,"data2vec-text"),Elt.forEach(t),$Eo=r(Yye," \u2014 "),hj=n(Yye,"A",{href:!0});var Clt=s(hj);kEo=r(Clt,"Data2VecTextForMaskedLM"),Clt.forEach(t),SEo=r(Yye," (Data2VecText model)"),Yye.forEach(t),REo=i(O),Cu=n(O,"LI",{});var Kye=s(Cu);Sde=n(Kye,"STRONG",{});var wlt=s(Sde);PEo=r(wlt,"deberta"),wlt.forEach(t),BEo=r(Kye," \u2014 "),pj=n(Kye,"A",{href:!0});var Alt=s(pj);IEo=r(Alt,"DebertaForMaskedLM"),Alt.forEach(t),NEo=r(Kye," (DeBERTa model)"),Kye.forEach(t),qEo=i(O),wu=n(O,"LI",{});var Zye=s(wu);Rde=n(Zye,"STRONG",{});var Llt=s(Rde);jEo=r(Llt,"deberta-v2"),Llt.forEach(t),DEo=r(Zye," \u2014 "),_j=n(Zye,"A",{href:!0});var ylt=s(_j);GEo=r(ylt,"DebertaV2ForMaskedLM"),ylt.forEach(t),OEo=r(Zye," (DeBERTa-v2 model)"),Zye.forEach(t),VEo=i(O),Au=n(O,"LI",{});var e8e=s(Au);Pde=n(e8e,"STRONG",{});var xlt=s(Pde);XEo=r(xlt,"distilbert"),xlt.forEach(t),zEo=r(e8e," \u2014 "),uj=n(e8e,"A",{href:!0});var $lt=s(uj);WEo=r($lt,"DistilBertForMaskedLM"),$lt.forEach(t),QEo=r(e8e," (DistilBERT model)"),e8e.forEach(t),HEo=i(O),Lu=n(O,"LI",{});var o8e=s(Lu);Bde=n(o8e,"STRONG",{});var klt=s(Bde);UEo=r(klt,"electra"),klt.forEach(t),JEo=r(o8e," \u2014 "),bj=n(o8e,"A",{href:!0});var Slt=s(bj);YEo=r(Slt,"ElectraForPreTraining"),Slt.forEach(t),KEo=r(o8e," (ELECTRA model)"),o8e.forEach(t),ZEo=i(O),yu=n(O,"LI",{});var r8e=s(yu);Ide=n(r8e,"STRONG",{});var Rlt=s(Ide);eCo=r(Rlt,"flaubert"),Rlt.forEach(t),oCo=r(r8e," \u2014 "),vj=n(r8e,"A",{href:!0});var Plt=s(vj);rCo=r(Plt,"FlaubertWithLMHeadModel"),Plt.forEach(t),tCo=r(r8e," (FlauBERT model)"),r8e.forEach(t),aCo=i(O),xu=n(O,"LI",{});var t8e=s(xu);Nde=n(t8e,"STRONG",{});var Blt=s(Nde);nCo=r(Blt,"flava"),Blt.forEach(t),sCo=r(t8e," \u2014 "),Fj=n(t8e,"A",{href:!0});var Ilt=s(Fj);lCo=r(Ilt,"FlavaForPreTraining"),Ilt.forEach(t),iCo=r(t8e," (FLAVA model)"),t8e.forEach(t),dCo=i(O),$u=n(O,"LI",{});var a8e=s($u);qde=n(a8e,"STRONG",{});var Nlt=s(qde);cCo=r(Nlt,"fnet"),Nlt.forEach(t),fCo=r(a8e," \u2014 "),Tj=n(a8e,"A",{href:!0});var qlt=s(Tj);mCo=r(qlt,"FNetForPreTraining"),qlt.forEach(t),gCo=r(a8e," (FNet model)"),a8e.forEach(t),hCo=i(O),ku=n(O,"LI",{});var n8e=s(ku);jde=n(n8e,"STRONG",{});var jlt=s(jde);pCo=r(jlt,"fsmt"),jlt.forEach(t),_Co=r(n8e," \u2014 "),Mj=n(n8e,"A",{href:!0});var Dlt=s(Mj);uCo=r(Dlt,"FSMTForConditionalGeneration"),Dlt.forEach(t),bCo=r(n8e," (FairSeq Machine-Translation model)"),n8e.forEach(t),vCo=i(O),Su=n(O,"LI",{});var s8e=s(Su);Dde=n(s8e,"STRONG",{});var Glt=s(Dde);FCo=r(Glt,"funnel"),Glt.forEach(t),TCo=r(s8e," \u2014 "),Ej=n(s8e,"A",{href:!0});var Olt=s(Ej);MCo=r(Olt,"FunnelForPreTraining"),Olt.forEach(t),ECo=r(s8e," (Funnel Transformer model)"),s8e.forEach(t),CCo=i(O),Ru=n(O,"LI",{});var l8e=s(Ru);Gde=n(l8e,"STRONG",{});var Vlt=s(Gde);wCo=r(Vlt,"gpt2"),Vlt.forEach(t),ACo=r(l8e," \u2014 "),Cj=n(l8e,"A",{href:!0});var Xlt=s(Cj);LCo=r(Xlt,"GPT2LMHeadModel"),Xlt.forEach(t),yCo=r(l8e," (OpenAI GPT-2 model)"),l8e.forEach(t),xCo=i(O),Pu=n(O,"LI",{});var i8e=s(Pu);Ode=n(i8e,"STRONG",{});var zlt=s(Ode);$Co=r(zlt,"ibert"),zlt.forEach(t),kCo=r(i8e," \u2014 "),wj=n(i8e,"A",{href:!0});var Wlt=s(wj);SCo=r(Wlt,"IBertForMaskedLM"),Wlt.forEach(t),RCo=r(i8e," (I-BERT model)"),i8e.forEach(t),PCo=i(O),Bu=n(O,"LI",{});var d8e=s(Bu);Vde=n(d8e,"STRONG",{});var Qlt=s(Vde);BCo=r(Qlt,"layoutlm"),Qlt.forEach(t),ICo=r(d8e," \u2014 "),Aj=n(d8e,"A",{href:!0});var Hlt=s(Aj);NCo=r(Hlt,"LayoutLMForMaskedLM"),Hlt.forEach(t),qCo=r(d8e," (LayoutLM model)"),d8e.forEach(t),jCo=i(O),Iu=n(O,"LI",{});var c8e=s(Iu);Xde=n(c8e,"STRONG",{});var Ult=s(Xde);DCo=r(Ult,"longformer"),Ult.forEach(t),GCo=r(c8e," \u2014 "),Lj=n(c8e,"A",{href:!0});var Jlt=s(Lj);OCo=r(Jlt,"LongformerForMaskedLM"),Jlt.forEach(t),VCo=r(c8e," (Longformer model)"),c8e.forEach(t),XCo=i(O),Nu=n(O,"LI",{});var f8e=s(Nu);zde=n(f8e,"STRONG",{});var Ylt=s(zde);zCo=r(Ylt,"lxmert"),Ylt.forEach(t),WCo=r(f8e," \u2014 "),yj=n(f8e,"A",{href:!0});var Klt=s(yj);QCo=r(Klt,"LxmertForPreTraining"),Klt.forEach(t),HCo=r(f8e," (LXMERT model)"),f8e.forEach(t),UCo=i(O),qu=n(O,"LI",{});var m8e=s(qu);Wde=n(m8e,"STRONG",{});var Zlt=s(Wde);JCo=r(Zlt,"megatron-bert"),Zlt.forEach(t),YCo=r(m8e," \u2014 "),xj=n(m8e,"A",{href:!0});var eit=s(xj);KCo=r(eit,"MegatronBertForPreTraining"),eit.forEach(t),ZCo=r(m8e," (Megatron-BERT model)"),m8e.forEach(t),e5o=i(O),ju=n(O,"LI",{});var g8e=s(ju);Qde=n(g8e,"STRONG",{});var oit=s(Qde);o5o=r(oit,"mobilebert"),oit.forEach(t),r5o=r(g8e," \u2014 "),$j=n(g8e,"A",{href:!0});var rit=s($j);t5o=r(rit,"MobileBertForPreTraining"),rit.forEach(t),a5o=r(g8e," (MobileBERT model)"),g8e.forEach(t),n5o=i(O),Du=n(O,"LI",{});var h8e=s(Du);Hde=n(h8e,"STRONG",{});var tit=s(Hde);s5o=r(tit,"mpnet"),tit.forEach(t),l5o=r(h8e," \u2014 "),kj=n(h8e,"A",{href:!0});var ait=s(kj);i5o=r(ait,"MPNetForMaskedLM"),ait.forEach(t),d5o=r(h8e," (MPNet model)"),h8e.forEach(t),c5o=i(O),Gu=n(O,"LI",{});var p8e=s(Gu);Ude=n(p8e,"STRONG",{});var nit=s(Ude);f5o=r(nit,"openai-gpt"),nit.forEach(t),m5o=r(p8e," \u2014 "),Sj=n(p8e,"A",{href:!0});var sit=s(Sj);g5o=r(sit,"OpenAIGPTLMHeadModel"),sit.forEach(t),h5o=r(p8e," (OpenAI GPT model)"),p8e.forEach(t),p5o=i(O),Ou=n(O,"LI",{});var _8e=s(Ou);Jde=n(_8e,"STRONG",{});var lit=s(Jde);_5o=r(lit,"retribert"),lit.forEach(t),u5o=r(_8e," \u2014 "),Rj=n(_8e,"A",{href:!0});var iit=s(Rj);b5o=r(iit,"RetriBertModel"),iit.forEach(t),v5o=r(_8e," (RetriBERT model)"),_8e.forEach(t),F5o=i(O),Vu=n(O,"LI",{});var u8e=s(Vu);Yde=n(u8e,"STRONG",{});var dit=s(Yde);T5o=r(dit,"roberta"),dit.forEach(t),M5o=r(u8e," \u2014 "),Pj=n(u8e,"A",{href:!0});var cit=s(Pj);E5o=r(cit,"RobertaForMaskedLM"),cit.forEach(t),C5o=r(u8e," (RoBERTa model)"),u8e.forEach(t),w5o=i(O),Xu=n(O,"LI",{});var b8e=s(Xu);Kde=n(b8e,"STRONG",{});var fit=s(Kde);A5o=r(fit,"splinter"),fit.forEach(t),L5o=r(b8e," \u2014 "),Bj=n(b8e,"A",{href:!0});var mit=s(Bj);y5o=r(mit,"SplinterForPreTraining"),mit.forEach(t),x5o=r(b8e," (Splinter model)"),b8e.forEach(t),$5o=i(O),zu=n(O,"LI",{});var v8e=s(zu);Zde=n(v8e,"STRONG",{});var git=s(Zde);k5o=r(git,"squeezebert"),git.forEach(t),S5o=r(v8e," \u2014 "),Ij=n(v8e,"A",{href:!0});var hit=s(Ij);R5o=r(hit,"SqueezeBertForMaskedLM"),hit.forEach(t),P5o=r(v8e," (SqueezeBERT model)"),v8e.forEach(t),B5o=i(O),Wu=n(O,"LI",{});var F8e=s(Wu);ece=n(F8e,"STRONG",{});var pit=s(ece);I5o=r(pit,"t5"),pit.forEach(t),N5o=r(F8e," \u2014 "),Nj=n(F8e,"A",{href:!0});var _it=s(Nj);q5o=r(_it,"T5ForConditionalGeneration"),_it.forEach(t),j5o=r(F8e," (T5 model)"),F8e.forEach(t),D5o=i(O),Qu=n(O,"LI",{});var T8e=s(Qu);oce=n(T8e,"STRONG",{});var uit=s(oce);G5o=r(uit,"tapas"),uit.forEach(t),O5o=r(T8e," \u2014 "),qj=n(T8e,"A",{href:!0});var bit=s(qj);V5o=r(bit,"TapasForMaskedLM"),bit.forEach(t),X5o=r(T8e," (TAPAS model)"),T8e.forEach(t),z5o=i(O),Hu=n(O,"LI",{});var M8e=s(Hu);rce=n(M8e,"STRONG",{});var vit=s(rce);W5o=r(vit,"transfo-xl"),vit.forEach(t),Q5o=r(M8e," \u2014 "),jj=n(M8e,"A",{href:!0});var Fit=s(jj);H5o=r(Fit,"TransfoXLLMHeadModel"),Fit.forEach(t),U5o=r(M8e," (Transformer-XL model)"),M8e.forEach(t),J5o=i(O),Uu=n(O,"LI",{});var E8e=s(Uu);tce=n(E8e,"STRONG",{});var Tit=s(tce);Y5o=r(Tit,"unispeech"),Tit.forEach(t),K5o=r(E8e," \u2014 "),Dj=n(E8e,"A",{href:!0});var Mit=s(Dj);Z5o=r(Mit,"UniSpeechForPreTraining"),Mit.forEach(t),e0o=r(E8e," (UniSpeech model)"),E8e.forEach(t),o0o=i(O),Ju=n(O,"LI",{});var C8e=s(Ju);ace=n(C8e,"STRONG",{});var Eit=s(ace);r0o=r(Eit,"unispeech-sat"),Eit.forEach(t),t0o=r(C8e," \u2014 "),Gj=n(C8e,"A",{href:!0});var Cit=s(Gj);a0o=r(Cit,"UniSpeechSatForPreTraining"),Cit.forEach(t),n0o=r(C8e," (UniSpeechSat model)"),C8e.forEach(t),s0o=i(O),Yu=n(O,"LI",{});var w8e=s(Yu);nce=n(w8e,"STRONG",{});var wit=s(nce);l0o=r(wit,"visual_bert"),wit.forEach(t),i0o=r(w8e," \u2014 "),Oj=n(w8e,"A",{href:!0});var Ait=s(Oj);d0o=r(Ait,"VisualBertForPreTraining"),Ait.forEach(t),c0o=r(w8e," (VisualBERT model)"),w8e.forEach(t),f0o=i(O),Ku=n(O,"LI",{});var A8e=s(Ku);sce=n(A8e,"STRONG",{});var Lit=s(sce);m0o=r(Lit,"vit_mae"),Lit.forEach(t),g0o=r(A8e," \u2014 "),Vj=n(A8e,"A",{href:!0});var yit=s(Vj);h0o=r(yit,"ViTMAEForPreTraining"),yit.forEach(t),p0o=r(A8e," (ViTMAE model)"),A8e.forEach(t),_0o=i(O),Zu=n(O,"LI",{});var L8e=s(Zu);lce=n(L8e,"STRONG",{});var xit=s(lce);u0o=r(xit,"wav2vec2"),xit.forEach(t),b0o=r(L8e," \u2014 "),Xj=n(L8e,"A",{href:!0});var $it=s(Xj);v0o=r($it,"Wav2Vec2ForPreTraining"),$it.forEach(t),F0o=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),T0o=i(O),e1=n(O,"LI",{});var y8e=s(e1);ice=n(y8e,"STRONG",{});var kit=s(ice);M0o=r(kit,"wav2vec2-conformer"),kit.forEach(t),E0o=r(y8e," \u2014 "),zj=n(y8e,"A",{href:!0});var Sit=s(zj);C0o=r(Sit,"Wav2Vec2ConformerForPreTraining"),Sit.forEach(t),w0o=r(y8e," (Wav2Vec2-Conformer model)"),y8e.forEach(t),A0o=i(O),o1=n(O,"LI",{});var x8e=s(o1);dce=n(x8e,"STRONG",{});var Rit=s(dce);L0o=r(Rit,"xlm"),Rit.forEach(t),y0o=r(x8e," \u2014 "),Wj=n(x8e,"A",{href:!0});var Pit=s(Wj);x0o=r(Pit,"XLMWithLMHeadModel"),Pit.forEach(t),$0o=r(x8e," (XLM model)"),x8e.forEach(t),k0o=i(O),r1=n(O,"LI",{});var $8e=s(r1);cce=n($8e,"STRONG",{});var Bit=s(cce);S0o=r(Bit,"xlm-roberta"),Bit.forEach(t),R0o=r($8e," \u2014 "),Qj=n($8e,"A",{href:!0});var Iit=s(Qj);P0o=r(Iit,"XLMRobertaForMaskedLM"),Iit.forEach(t),B0o=r($8e," (XLM-RoBERTa model)"),$8e.forEach(t),I0o=i(O),t1=n(O,"LI",{});var k8e=s(t1);fce=n(k8e,"STRONG",{});var Nit=s(fce);N0o=r(Nit,"xlm-roberta-xl"),Nit.forEach(t),q0o=r(k8e," \u2014 "),Hj=n(k8e,"A",{href:!0});var qit=s(Hj);j0o=r(qit,"XLMRobertaXLForMaskedLM"),qit.forEach(t),D0o=r(k8e," (XLM-RoBERTa-XL model)"),k8e.forEach(t),G0o=i(O),a1=n(O,"LI",{});var S8e=s(a1);mce=n(S8e,"STRONG",{});var jit=s(mce);O0o=r(jit,"xlnet"),jit.forEach(t),V0o=r(S8e," \u2014 "),Uj=n(S8e,"A",{href:!0});var Dit=s(Uj);X0o=r(Dit,"XLNetLMHeadModel"),Dit.forEach(t),z0o=r(S8e," (XLNet model)"),S8e.forEach(t),O.forEach(t),W0o=i(ra),n1=n(ra,"P",{});var R8e=s(n1);Q0o=r(R8e,"The model is set in evaluation mode by default using "),gce=n(R8e,"CODE",{});var Git=s(gce);H0o=r(Git,"model.eval()"),Git.forEach(t),U0o=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=n(R8e,"CODE",{});var Oit=s(hce);J0o=r(Oit,"model.train()"),Oit.forEach(t),R8e.forEach(t),Y0o=i(ra),T(s1.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),Bje=i(f),Ri=n(f,"H2",{class:!0});var jGe=s(Ri);l1=n(jGe,"A",{id:!0,class:!0,href:!0});var Vit=s(l1);pce=n(Vit,"SPAN",{});var Xit=s(pce);T(LL.$$.fragment,Xit),Xit.forEach(t),Vit.forEach(t),K0o=i(jGe),_ce=n(jGe,"SPAN",{});var zit=s(_ce);Z0o=r(zit,"AutoModelForCausalLM"),zit.forEach(t),jGe.forEach(t),Ije=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(yL.$$.fragment,zs),ewo=i(zs),Pi=n(zs,"P",{});var nee=s(Pi);owo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Jj=n(nee,"A",{href:!0});var Wit=s(Jj);rwo=r(Wit,"from_pretrained()"),Wit.forEach(t),two=r(nee," class method or the "),Yj=n(nee,"A",{href:!0});var Qit=s(Yj);awo=r(Qit,"from_config()"),Qit.forEach(t),nwo=r(nee,` class
method.`),nee.forEach(t),swo=i(zs),xL=n(zs,"P",{});var DGe=s(xL);lwo=r(DGe,"This class cannot be instantiated directly using "),uce=n(DGe,"CODE",{});var Hit=s(uce);iwo=r(Hit,"__init__()"),Hit.forEach(t),dwo=r(DGe," (throws an error)."),DGe.forEach(t),cwo=i(zs),nt=n(zs,"DIV",{class:!0});var Zw=s(nt);T($L.$$.fragment,Zw),fwo=i(Zw),bce=n(Zw,"P",{});var Uit=s(bce);mwo=r(Uit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Uit.forEach(t),gwo=i(Zw),Bi=n(Zw,"P",{});var see=s(Bi);hwo=r(see,`Note:
Loading a model from its configuration file does `),vce=n(see,"STRONG",{});var Jit=s(vce);pwo=r(Jit,"not"),Jit.forEach(t),_wo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=n(see,"A",{href:!0});var Yit=s(Kj);uwo=r(Yit,"from_pretrained()"),Yit.forEach(t),bwo=r(see," to load the model weights."),see.forEach(t),vwo=i(Zw),T(i1.$$.fragment,Zw),Zw.forEach(t),Fwo=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(kL.$$.fragment,ta),Two=i(ta),Fce=n(ta,"P",{});var Kit=s(Fce);Mwo=r(Kit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kit.forEach(t),Ewo=i(ta),$a=n(ta,"P",{});var eA=s($a);Cwo=r(eA,"The model class to instantiate is selected based on the "),Tce=n(eA,"CODE",{});var Zit=s(Tce);wwo=r(Zit,"model_type"),Zit.forEach(t),Awo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Mce=n(eA,"CODE",{});var edt=s(Mce);Lwo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),ywo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(eA,"CODE",{});var odt=s(Ece);xwo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),$wo=r(eA,":"),eA.forEach(t),kwo=i(ta),z=n(ta,"UL",{});var Q=s(z);d1=n(Q,"LI",{});var P8e=s(d1);Cce=n(P8e,"STRONG",{});var rdt=s(Cce);Swo=r(rdt,"bart"),rdt.forEach(t),Rwo=r(P8e," \u2014 "),Zj=n(P8e,"A",{href:!0});var tdt=s(Zj);Pwo=r(tdt,"BartForCausalLM"),tdt.forEach(t),Bwo=r(P8e," (BART model)"),P8e.forEach(t),Iwo=i(Q),c1=n(Q,"LI",{});var B8e=s(c1);wce=n(B8e,"STRONG",{});var adt=s(wce);Nwo=r(adt,"bert"),adt.forEach(t),qwo=r(B8e," \u2014 "),eD=n(B8e,"A",{href:!0});var ndt=s(eD);jwo=r(ndt,"BertLMHeadModel"),ndt.forEach(t),Dwo=r(B8e," (BERT model)"),B8e.forEach(t),Gwo=i(Q),f1=n(Q,"LI",{});var I8e=s(f1);Ace=n(I8e,"STRONG",{});var sdt=s(Ace);Owo=r(sdt,"bert-generation"),sdt.forEach(t),Vwo=r(I8e," \u2014 "),oD=n(I8e,"A",{href:!0});var ldt=s(oD);Xwo=r(ldt,"BertGenerationDecoder"),ldt.forEach(t),zwo=r(I8e," (Bert Generation model)"),I8e.forEach(t),Wwo=i(Q),m1=n(Q,"LI",{});var N8e=s(m1);Lce=n(N8e,"STRONG",{});var idt=s(Lce);Qwo=r(idt,"big_bird"),idt.forEach(t),Hwo=r(N8e," \u2014 "),rD=n(N8e,"A",{href:!0});var ddt=s(rD);Uwo=r(ddt,"BigBirdForCausalLM"),ddt.forEach(t),Jwo=r(N8e," (BigBird model)"),N8e.forEach(t),Ywo=i(Q),g1=n(Q,"LI",{});var q8e=s(g1);yce=n(q8e,"STRONG",{});var cdt=s(yce);Kwo=r(cdt,"bigbird_pegasus"),cdt.forEach(t),Zwo=r(q8e," \u2014 "),tD=n(q8e,"A",{href:!0});var fdt=s(tD);eAo=r(fdt,"BigBirdPegasusForCausalLM"),fdt.forEach(t),oAo=r(q8e," (BigBird-Pegasus model)"),q8e.forEach(t),rAo=i(Q),h1=n(Q,"LI",{});var j8e=s(h1);xce=n(j8e,"STRONG",{});var mdt=s(xce);tAo=r(mdt,"blenderbot"),mdt.forEach(t),aAo=r(j8e," \u2014 "),aD=n(j8e,"A",{href:!0});var gdt=s(aD);nAo=r(gdt,"BlenderbotForCausalLM"),gdt.forEach(t),sAo=r(j8e," (Blenderbot model)"),j8e.forEach(t),lAo=i(Q),p1=n(Q,"LI",{});var D8e=s(p1);$ce=n(D8e,"STRONG",{});var hdt=s($ce);iAo=r(hdt,"blenderbot-small"),hdt.forEach(t),dAo=r(D8e," \u2014 "),nD=n(D8e,"A",{href:!0});var pdt=s(nD);cAo=r(pdt,"BlenderbotSmallForCausalLM"),pdt.forEach(t),fAo=r(D8e," (BlenderbotSmall model)"),D8e.forEach(t),mAo=i(Q),_1=n(Q,"LI",{});var G8e=s(_1);kce=n(G8e,"STRONG",{});var _dt=s(kce);gAo=r(_dt,"camembert"),_dt.forEach(t),hAo=r(G8e," \u2014 "),sD=n(G8e,"A",{href:!0});var udt=s(sD);pAo=r(udt,"CamembertForCausalLM"),udt.forEach(t),_Ao=r(G8e," (CamemBERT model)"),G8e.forEach(t),uAo=i(Q),u1=n(Q,"LI",{});var O8e=s(u1);Sce=n(O8e,"STRONG",{});var bdt=s(Sce);bAo=r(bdt,"ctrl"),bdt.forEach(t),vAo=r(O8e," \u2014 "),lD=n(O8e,"A",{href:!0});var vdt=s(lD);FAo=r(vdt,"CTRLLMHeadModel"),vdt.forEach(t),TAo=r(O8e," (CTRL model)"),O8e.forEach(t),MAo=i(Q),b1=n(Q,"LI",{});var V8e=s(b1);Rce=n(V8e,"STRONG",{});var Fdt=s(Rce);EAo=r(Fdt,"data2vec-text"),Fdt.forEach(t),CAo=r(V8e," \u2014 "),iD=n(V8e,"A",{href:!0});var Tdt=s(iD);wAo=r(Tdt,"Data2VecTextForCausalLM"),Tdt.forEach(t),AAo=r(V8e," (Data2VecText model)"),V8e.forEach(t),LAo=i(Q),v1=n(Q,"LI",{});var X8e=s(v1);Pce=n(X8e,"STRONG",{});var Mdt=s(Pce);yAo=r(Mdt,"electra"),Mdt.forEach(t),xAo=r(X8e," \u2014 "),dD=n(X8e,"A",{href:!0});var Edt=s(dD);$Ao=r(Edt,"ElectraForCausalLM"),Edt.forEach(t),kAo=r(X8e," (ELECTRA model)"),X8e.forEach(t),SAo=i(Q),F1=n(Q,"LI",{});var z8e=s(F1);Bce=n(z8e,"STRONG",{});var Cdt=s(Bce);RAo=r(Cdt,"gpt2"),Cdt.forEach(t),PAo=r(z8e," \u2014 "),cD=n(z8e,"A",{href:!0});var wdt=s(cD);BAo=r(wdt,"GPT2LMHeadModel"),wdt.forEach(t),IAo=r(z8e," (OpenAI GPT-2 model)"),z8e.forEach(t),NAo=i(Q),T1=n(Q,"LI",{});var W8e=s(T1);Ice=n(W8e,"STRONG",{});var Adt=s(Ice);qAo=r(Adt,"gpt_neo"),Adt.forEach(t),jAo=r(W8e," \u2014 "),fD=n(W8e,"A",{href:!0});var Ldt=s(fD);DAo=r(Ldt,"GPTNeoForCausalLM"),Ldt.forEach(t),GAo=r(W8e," (GPT Neo model)"),W8e.forEach(t),OAo=i(Q),M1=n(Q,"LI",{});var Q8e=s(M1);Nce=n(Q8e,"STRONG",{});var ydt=s(Nce);VAo=r(ydt,"gpt_neox"),ydt.forEach(t),XAo=r(Q8e," \u2014 "),mD=n(Q8e,"A",{href:!0});var xdt=s(mD);zAo=r(xdt,"GPTNeoXForCausalLM"),xdt.forEach(t),WAo=r(Q8e," (GPT NeoX model)"),Q8e.forEach(t),QAo=i(Q),E1=n(Q,"LI",{});var H8e=s(E1);qce=n(H8e,"STRONG",{});var $dt=s(qce);HAo=r($dt,"gptj"),$dt.forEach(t),UAo=r(H8e," \u2014 "),gD=n(H8e,"A",{href:!0});var kdt=s(gD);JAo=r(kdt,"GPTJForCausalLM"),kdt.forEach(t),YAo=r(H8e," (GPT-J model)"),H8e.forEach(t),KAo=i(Q),C1=n(Q,"LI",{});var U8e=s(C1);jce=n(U8e,"STRONG",{});var Sdt=s(jce);ZAo=r(Sdt,"marian"),Sdt.forEach(t),e6o=r(U8e," \u2014 "),hD=n(U8e,"A",{href:!0});var Rdt=s(hD);o6o=r(Rdt,"MarianForCausalLM"),Rdt.forEach(t),r6o=r(U8e," (Marian model)"),U8e.forEach(t),t6o=i(Q),w1=n(Q,"LI",{});var J8e=s(w1);Dce=n(J8e,"STRONG",{});var Pdt=s(Dce);a6o=r(Pdt,"mbart"),Pdt.forEach(t),n6o=r(J8e," \u2014 "),pD=n(J8e,"A",{href:!0});var Bdt=s(pD);s6o=r(Bdt,"MBartForCausalLM"),Bdt.forEach(t),l6o=r(J8e," (mBART model)"),J8e.forEach(t),i6o=i(Q),A1=n(Q,"LI",{});var Y8e=s(A1);Gce=n(Y8e,"STRONG",{});var Idt=s(Gce);d6o=r(Idt,"megatron-bert"),Idt.forEach(t),c6o=r(Y8e," \u2014 "),_D=n(Y8e,"A",{href:!0});var Ndt=s(_D);f6o=r(Ndt,"MegatronBertForCausalLM"),Ndt.forEach(t),m6o=r(Y8e," (Megatron-BERT model)"),Y8e.forEach(t),g6o=i(Q),L1=n(Q,"LI",{});var K8e=s(L1);Oce=n(K8e,"STRONG",{});var qdt=s(Oce);h6o=r(qdt,"openai-gpt"),qdt.forEach(t),p6o=r(K8e," \u2014 "),uD=n(K8e,"A",{href:!0});var jdt=s(uD);_6o=r(jdt,"OpenAIGPTLMHeadModel"),jdt.forEach(t),u6o=r(K8e," (OpenAI GPT model)"),K8e.forEach(t),b6o=i(Q),y1=n(Q,"LI",{});var Z8e=s(y1);Vce=n(Z8e,"STRONG",{});var Ddt=s(Vce);v6o=r(Ddt,"opt"),Ddt.forEach(t),F6o=r(Z8e," \u2014 "),bD=n(Z8e,"A",{href:!0});var Gdt=s(bD);T6o=r(Gdt,"OPTForCausalLM"),Gdt.forEach(t),M6o=r(Z8e," (OPT model)"),Z8e.forEach(t),E6o=i(Q),x1=n(Q,"LI",{});var e9e=s(x1);Xce=n(e9e,"STRONG",{});var Odt=s(Xce);C6o=r(Odt,"pegasus"),Odt.forEach(t),w6o=r(e9e," \u2014 "),vD=n(e9e,"A",{href:!0});var Vdt=s(vD);A6o=r(Vdt,"PegasusForCausalLM"),Vdt.forEach(t),L6o=r(e9e," (Pegasus model)"),e9e.forEach(t),y6o=i(Q),$1=n(Q,"LI",{});var o9e=s($1);zce=n(o9e,"STRONG",{});var Xdt=s(zce);x6o=r(Xdt,"plbart"),Xdt.forEach(t),$6o=r(o9e," \u2014 "),FD=n(o9e,"A",{href:!0});var zdt=s(FD);k6o=r(zdt,"PLBartForCausalLM"),zdt.forEach(t),S6o=r(o9e," (PLBart model)"),o9e.forEach(t),R6o=i(Q),k1=n(Q,"LI",{});var r9e=s(k1);Wce=n(r9e,"STRONG",{});var Wdt=s(Wce);P6o=r(Wdt,"prophetnet"),Wdt.forEach(t),B6o=r(r9e," \u2014 "),TD=n(r9e,"A",{href:!0});var Qdt=s(TD);I6o=r(Qdt,"ProphetNetForCausalLM"),Qdt.forEach(t),N6o=r(r9e," (ProphetNet model)"),r9e.forEach(t),q6o=i(Q),S1=n(Q,"LI",{});var t9e=s(S1);Qce=n(t9e,"STRONG",{});var Hdt=s(Qce);j6o=r(Hdt,"qdqbert"),Hdt.forEach(t),D6o=r(t9e," \u2014 "),MD=n(t9e,"A",{href:!0});var Udt=s(MD);G6o=r(Udt,"QDQBertLMHeadModel"),Udt.forEach(t),O6o=r(t9e," (QDQBert model)"),t9e.forEach(t),V6o=i(Q),R1=n(Q,"LI",{});var a9e=s(R1);Hce=n(a9e,"STRONG",{});var Jdt=s(Hce);X6o=r(Jdt,"reformer"),Jdt.forEach(t),z6o=r(a9e," \u2014 "),ED=n(a9e,"A",{href:!0});var Ydt=s(ED);W6o=r(Ydt,"ReformerModelWithLMHead"),Ydt.forEach(t),Q6o=r(a9e," (Reformer model)"),a9e.forEach(t),H6o=i(Q),P1=n(Q,"LI",{});var n9e=s(P1);Uce=n(n9e,"STRONG",{});var Kdt=s(Uce);U6o=r(Kdt,"rembert"),Kdt.forEach(t),J6o=r(n9e," \u2014 "),CD=n(n9e,"A",{href:!0});var Zdt=s(CD);Y6o=r(Zdt,"RemBertForCausalLM"),Zdt.forEach(t),K6o=r(n9e," (RemBERT model)"),n9e.forEach(t),Z6o=i(Q),B1=n(Q,"LI",{});var s9e=s(B1);Jce=n(s9e,"STRONG",{});var ect=s(Jce);eLo=r(ect,"roberta"),ect.forEach(t),oLo=r(s9e," \u2014 "),wD=n(s9e,"A",{href:!0});var oct=s(wD);rLo=r(oct,"RobertaForCausalLM"),oct.forEach(t),tLo=r(s9e," (RoBERTa model)"),s9e.forEach(t),aLo=i(Q),I1=n(Q,"LI",{});var l9e=s(I1);Yce=n(l9e,"STRONG",{});var rct=s(Yce);nLo=r(rct,"roformer"),rct.forEach(t),sLo=r(l9e," \u2014 "),AD=n(l9e,"A",{href:!0});var tct=s(AD);lLo=r(tct,"RoFormerForCausalLM"),tct.forEach(t),iLo=r(l9e," (RoFormer model)"),l9e.forEach(t),dLo=i(Q),N1=n(Q,"LI",{});var i9e=s(N1);Kce=n(i9e,"STRONG",{});var act=s(Kce);cLo=r(act,"speech_to_text_2"),act.forEach(t),fLo=r(i9e," \u2014 "),LD=n(i9e,"A",{href:!0});var nct=s(LD);mLo=r(nct,"Speech2Text2ForCausalLM"),nct.forEach(t),gLo=r(i9e," (Speech2Text2 model)"),i9e.forEach(t),hLo=i(Q),q1=n(Q,"LI",{});var d9e=s(q1);Zce=n(d9e,"STRONG",{});var sct=s(Zce);pLo=r(sct,"transfo-xl"),sct.forEach(t),_Lo=r(d9e," \u2014 "),yD=n(d9e,"A",{href:!0});var lct=s(yD);uLo=r(lct,"TransfoXLLMHeadModel"),lct.forEach(t),bLo=r(d9e," (Transformer-XL model)"),d9e.forEach(t),vLo=i(Q),j1=n(Q,"LI",{});var c9e=s(j1);efe=n(c9e,"STRONG",{});var ict=s(efe);FLo=r(ict,"trocr"),ict.forEach(t),TLo=r(c9e," \u2014 "),xD=n(c9e,"A",{href:!0});var dct=s(xD);MLo=r(dct,"TrOCRForCausalLM"),dct.forEach(t),ELo=r(c9e," (TrOCR model)"),c9e.forEach(t),CLo=i(Q),D1=n(Q,"LI",{});var f9e=s(D1);ofe=n(f9e,"STRONG",{});var cct=s(ofe);wLo=r(cct,"xglm"),cct.forEach(t),ALo=r(f9e," \u2014 "),$D=n(f9e,"A",{href:!0});var fct=s($D);LLo=r(fct,"XGLMForCausalLM"),fct.forEach(t),yLo=r(f9e," (XGLM model)"),f9e.forEach(t),xLo=i(Q),G1=n(Q,"LI",{});var m9e=s(G1);rfe=n(m9e,"STRONG",{});var mct=s(rfe);$Lo=r(mct,"xlm"),mct.forEach(t),kLo=r(m9e," \u2014 "),kD=n(m9e,"A",{href:!0});var gct=s(kD);SLo=r(gct,"XLMWithLMHeadModel"),gct.forEach(t),RLo=r(m9e," (XLM model)"),m9e.forEach(t),PLo=i(Q),O1=n(Q,"LI",{});var g9e=s(O1);tfe=n(g9e,"STRONG",{});var hct=s(tfe);BLo=r(hct,"xlm-prophetnet"),hct.forEach(t),ILo=r(g9e," \u2014 "),SD=n(g9e,"A",{href:!0});var pct=s(SD);NLo=r(pct,"XLMProphetNetForCausalLM"),pct.forEach(t),qLo=r(g9e," (XLM-ProphetNet model)"),g9e.forEach(t),jLo=i(Q),V1=n(Q,"LI",{});var h9e=s(V1);afe=n(h9e,"STRONG",{});var _ct=s(afe);DLo=r(_ct,"xlm-roberta"),_ct.forEach(t),GLo=r(h9e," \u2014 "),RD=n(h9e,"A",{href:!0});var uct=s(RD);OLo=r(uct,"XLMRobertaForCausalLM"),uct.forEach(t),VLo=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),XLo=i(Q),X1=n(Q,"LI",{});var p9e=s(X1);nfe=n(p9e,"STRONG",{});var bct=s(nfe);zLo=r(bct,"xlm-roberta-xl"),bct.forEach(t),WLo=r(p9e," \u2014 "),PD=n(p9e,"A",{href:!0});var vct=s(PD);QLo=r(vct,"XLMRobertaXLForCausalLM"),vct.forEach(t),HLo=r(p9e," (XLM-RoBERTa-XL model)"),p9e.forEach(t),ULo=i(Q),z1=n(Q,"LI",{});var _9e=s(z1);sfe=n(_9e,"STRONG",{});var Fct=s(sfe);JLo=r(Fct,"xlnet"),Fct.forEach(t),YLo=r(_9e," \u2014 "),BD=n(_9e,"A",{href:!0});var Tct=s(BD);KLo=r(Tct,"XLNetLMHeadModel"),Tct.forEach(t),ZLo=r(_9e," (XLNet model)"),_9e.forEach(t),Q.forEach(t),eyo=i(ta),W1=n(ta,"P",{});var u9e=s(W1);oyo=r(u9e,"The model is set in evaluation mode by default using "),lfe=n(u9e,"CODE",{});var Mct=s(lfe);ryo=r(Mct,"model.eval()"),Mct.forEach(t),tyo=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(u9e,"CODE",{});var Ect=s(ife);ayo=r(Ect,"model.train()"),Ect.forEach(t),u9e.forEach(t),nyo=i(ta),T(Q1.$$.fragment,ta),ta.forEach(t),zs.forEach(t),Nje=i(f),Ii=n(f,"H2",{class:!0});var GGe=s(Ii);H1=n(GGe,"A",{id:!0,class:!0,href:!0});var Cct=s(H1);dfe=n(Cct,"SPAN",{});var wct=s(dfe);T(SL.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),syo=i(GGe),cfe=n(GGe,"SPAN",{});var Act=s(cfe);lyo=r(Act,"AutoModelForMaskedLM"),Act.forEach(t),GGe.forEach(t),qje=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(RL.$$.fragment,Ws),iyo=i(Ws),Ni=n(Ws,"P",{});var lee=s(Ni);dyo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ID=n(lee,"A",{href:!0});var Lct=s(ID);cyo=r(Lct,"from_pretrained()"),Lct.forEach(t),fyo=r(lee," class method or the "),ND=n(lee,"A",{href:!0});var yct=s(ND);myo=r(yct,"from_config()"),yct.forEach(t),gyo=r(lee,` class
method.`),lee.forEach(t),hyo=i(Ws),PL=n(Ws,"P",{});var OGe=s(PL);pyo=r(OGe,"This class cannot be instantiated directly using "),ffe=n(OGe,"CODE",{});var xct=s(ffe);_yo=r(xct,"__init__()"),xct.forEach(t),uyo=r(OGe," (throws an error)."),OGe.forEach(t),byo=i(Ws),st=n(Ws,"DIV",{class:!0});var oA=s(st);T(BL.$$.fragment,oA),vyo=i(oA),mfe=n(oA,"P",{});var $ct=s(mfe);Fyo=r($ct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$ct.forEach(t),Tyo=i(oA),qi=n(oA,"P",{});var iee=s(qi);Myo=r(iee,`Note:
Loading a model from its configuration file does `),gfe=n(iee,"STRONG",{});var kct=s(gfe);Eyo=r(kct,"not"),kct.forEach(t),Cyo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(iee,"A",{href:!0});var Sct=s(qD);wyo=r(Sct,"from_pretrained()"),Sct.forEach(t),Ayo=r(iee," to load the model weights."),iee.forEach(t),Lyo=i(oA),T(U1.$$.fragment,oA),oA.forEach(t),yyo=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(IL.$$.fragment,aa),xyo=i(aa),hfe=n(aa,"P",{});var Rct=s(hfe);$yo=r(Rct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rct.forEach(t),kyo=i(aa),ka=n(aa,"P",{});var rA=s(ka);Syo=r(rA,"The model class to instantiate is selected based on the "),pfe=n(rA,"CODE",{});var Pct=s(pfe);Ryo=r(Pct,"model_type"),Pct.forEach(t),Pyo=r(rA,` property of the config object (either
passed as an argument or loaded from `),_fe=n(rA,"CODE",{});var Bct=s(_fe);Byo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),Iyo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(rA,"CODE",{});var Ict=s(ufe);Nyo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),qyo=r(rA,":"),rA.forEach(t),jyo=i(aa),W=n(aa,"UL",{});var H=s(W);J1=n(H,"LI",{});var b9e=s(J1);bfe=n(b9e,"STRONG",{});var Nct=s(bfe);Dyo=r(Nct,"albert"),Nct.forEach(t),Gyo=r(b9e," \u2014 "),jD=n(b9e,"A",{href:!0});var qct=s(jD);Oyo=r(qct,"AlbertForMaskedLM"),qct.forEach(t),Vyo=r(b9e," (ALBERT model)"),b9e.forEach(t),Xyo=i(H),Y1=n(H,"LI",{});var v9e=s(Y1);vfe=n(v9e,"STRONG",{});var jct=s(vfe);zyo=r(jct,"bart"),jct.forEach(t),Wyo=r(v9e," \u2014 "),DD=n(v9e,"A",{href:!0});var Dct=s(DD);Qyo=r(Dct,"BartForConditionalGeneration"),Dct.forEach(t),Hyo=r(v9e," (BART model)"),v9e.forEach(t),Uyo=i(H),K1=n(H,"LI",{});var F9e=s(K1);Ffe=n(F9e,"STRONG",{});var Gct=s(Ffe);Jyo=r(Gct,"bert"),Gct.forEach(t),Yyo=r(F9e," \u2014 "),GD=n(F9e,"A",{href:!0});var Oct=s(GD);Kyo=r(Oct,"BertForMaskedLM"),Oct.forEach(t),Zyo=r(F9e," (BERT model)"),F9e.forEach(t),e8o=i(H),Z1=n(H,"LI",{});var T9e=s(Z1);Tfe=n(T9e,"STRONG",{});var Vct=s(Tfe);o8o=r(Vct,"big_bird"),Vct.forEach(t),r8o=r(T9e," \u2014 "),OD=n(T9e,"A",{href:!0});var Xct=s(OD);t8o=r(Xct,"BigBirdForMaskedLM"),Xct.forEach(t),a8o=r(T9e," (BigBird model)"),T9e.forEach(t),n8o=i(H),e3=n(H,"LI",{});var M9e=s(e3);Mfe=n(M9e,"STRONG",{});var zct=s(Mfe);s8o=r(zct,"camembert"),zct.forEach(t),l8o=r(M9e," \u2014 "),VD=n(M9e,"A",{href:!0});var Wct=s(VD);i8o=r(Wct,"CamembertForMaskedLM"),Wct.forEach(t),d8o=r(M9e," (CamemBERT model)"),M9e.forEach(t),c8o=i(H),o3=n(H,"LI",{});var E9e=s(o3);Efe=n(E9e,"STRONG",{});var Qct=s(Efe);f8o=r(Qct,"convbert"),Qct.forEach(t),m8o=r(E9e," \u2014 "),XD=n(E9e,"A",{href:!0});var Hct=s(XD);g8o=r(Hct,"ConvBertForMaskedLM"),Hct.forEach(t),h8o=r(E9e," (ConvBERT model)"),E9e.forEach(t),p8o=i(H),r3=n(H,"LI",{});var C9e=s(r3);Cfe=n(C9e,"STRONG",{});var Uct=s(Cfe);_8o=r(Uct,"data2vec-text"),Uct.forEach(t),u8o=r(C9e," \u2014 "),zD=n(C9e,"A",{href:!0});var Jct=s(zD);b8o=r(Jct,"Data2VecTextForMaskedLM"),Jct.forEach(t),v8o=r(C9e," (Data2VecText model)"),C9e.forEach(t),F8o=i(H),t3=n(H,"LI",{});var w9e=s(t3);wfe=n(w9e,"STRONG",{});var Yct=s(wfe);T8o=r(Yct,"deberta"),Yct.forEach(t),M8o=r(w9e," \u2014 "),WD=n(w9e,"A",{href:!0});var Kct=s(WD);E8o=r(Kct,"DebertaForMaskedLM"),Kct.forEach(t),C8o=r(w9e," (DeBERTa model)"),w9e.forEach(t),w8o=i(H),a3=n(H,"LI",{});var A9e=s(a3);Afe=n(A9e,"STRONG",{});var Zct=s(Afe);A8o=r(Zct,"deberta-v2"),Zct.forEach(t),L8o=r(A9e," \u2014 "),QD=n(A9e,"A",{href:!0});var eft=s(QD);y8o=r(eft,"DebertaV2ForMaskedLM"),eft.forEach(t),x8o=r(A9e," (DeBERTa-v2 model)"),A9e.forEach(t),$8o=i(H),n3=n(H,"LI",{});var L9e=s(n3);Lfe=n(L9e,"STRONG",{});var oft=s(Lfe);k8o=r(oft,"distilbert"),oft.forEach(t),S8o=r(L9e," \u2014 "),HD=n(L9e,"A",{href:!0});var rft=s(HD);R8o=r(rft,"DistilBertForMaskedLM"),rft.forEach(t),P8o=r(L9e," (DistilBERT model)"),L9e.forEach(t),B8o=i(H),s3=n(H,"LI",{});var y9e=s(s3);yfe=n(y9e,"STRONG",{});var tft=s(yfe);I8o=r(tft,"electra"),tft.forEach(t),N8o=r(y9e," \u2014 "),UD=n(y9e,"A",{href:!0});var aft=s(UD);q8o=r(aft,"ElectraForMaskedLM"),aft.forEach(t),j8o=r(y9e," (ELECTRA model)"),y9e.forEach(t),D8o=i(H),l3=n(H,"LI",{});var x9e=s(l3);xfe=n(x9e,"STRONG",{});var nft=s(xfe);G8o=r(nft,"flaubert"),nft.forEach(t),O8o=r(x9e," \u2014 "),JD=n(x9e,"A",{href:!0});var sft=s(JD);V8o=r(sft,"FlaubertWithLMHeadModel"),sft.forEach(t),X8o=r(x9e," (FlauBERT model)"),x9e.forEach(t),z8o=i(H),i3=n(H,"LI",{});var $9e=s(i3);$fe=n($9e,"STRONG",{});var lft=s($fe);W8o=r(lft,"fnet"),lft.forEach(t),Q8o=r($9e," \u2014 "),YD=n($9e,"A",{href:!0});var ift=s(YD);H8o=r(ift,"FNetForMaskedLM"),ift.forEach(t),U8o=r($9e," (FNet model)"),$9e.forEach(t),J8o=i(H),d3=n(H,"LI",{});var k9e=s(d3);kfe=n(k9e,"STRONG",{});var dft=s(kfe);Y8o=r(dft,"funnel"),dft.forEach(t),K8o=r(k9e," \u2014 "),KD=n(k9e,"A",{href:!0});var cft=s(KD);Z8o=r(cft,"FunnelForMaskedLM"),cft.forEach(t),e9o=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),o9o=i(H),c3=n(H,"LI",{});var S9e=s(c3);Sfe=n(S9e,"STRONG",{});var fft=s(Sfe);r9o=r(fft,"ibert"),fft.forEach(t),t9o=r(S9e," \u2014 "),ZD=n(S9e,"A",{href:!0});var mft=s(ZD);a9o=r(mft,"IBertForMaskedLM"),mft.forEach(t),n9o=r(S9e," (I-BERT model)"),S9e.forEach(t),s9o=i(H),f3=n(H,"LI",{});var R9e=s(f3);Rfe=n(R9e,"STRONG",{});var gft=s(Rfe);l9o=r(gft,"layoutlm"),gft.forEach(t),i9o=r(R9e," \u2014 "),eG=n(R9e,"A",{href:!0});var hft=s(eG);d9o=r(hft,"LayoutLMForMaskedLM"),hft.forEach(t),c9o=r(R9e," (LayoutLM model)"),R9e.forEach(t),f9o=i(H),m3=n(H,"LI",{});var P9e=s(m3);Pfe=n(P9e,"STRONG",{});var pft=s(Pfe);m9o=r(pft,"longformer"),pft.forEach(t),g9o=r(P9e," \u2014 "),oG=n(P9e,"A",{href:!0});var _ft=s(oG);h9o=r(_ft,"LongformerForMaskedLM"),_ft.forEach(t),p9o=r(P9e," (Longformer model)"),P9e.forEach(t),_9o=i(H),g3=n(H,"LI",{});var B9e=s(g3);Bfe=n(B9e,"STRONG",{});var uft=s(Bfe);u9o=r(uft,"luke"),uft.forEach(t),b9o=r(B9e," \u2014 "),rG=n(B9e,"A",{href:!0});var bft=s(rG);v9o=r(bft,"LukeForMaskedLM"),bft.forEach(t),F9o=r(B9e," (LUKE model)"),B9e.forEach(t),T9o=i(H),h3=n(H,"LI",{});var I9e=s(h3);Ife=n(I9e,"STRONG",{});var vft=s(Ife);M9o=r(vft,"mbart"),vft.forEach(t),E9o=r(I9e," \u2014 "),tG=n(I9e,"A",{href:!0});var Fft=s(tG);C9o=r(Fft,"MBartForConditionalGeneration"),Fft.forEach(t),w9o=r(I9e," (mBART model)"),I9e.forEach(t),A9o=i(H),p3=n(H,"LI",{});var N9e=s(p3);Nfe=n(N9e,"STRONG",{});var Tft=s(Nfe);L9o=r(Tft,"megatron-bert"),Tft.forEach(t),y9o=r(N9e," \u2014 "),aG=n(N9e,"A",{href:!0});var Mft=s(aG);x9o=r(Mft,"MegatronBertForMaskedLM"),Mft.forEach(t),$9o=r(N9e," (Megatron-BERT model)"),N9e.forEach(t),k9o=i(H),_3=n(H,"LI",{});var q9e=s(_3);qfe=n(q9e,"STRONG",{});var Eft=s(qfe);S9o=r(Eft,"mobilebert"),Eft.forEach(t),R9o=r(q9e," \u2014 "),nG=n(q9e,"A",{href:!0});var Cft=s(nG);P9o=r(Cft,"MobileBertForMaskedLM"),Cft.forEach(t),B9o=r(q9e," (MobileBERT model)"),q9e.forEach(t),I9o=i(H),u3=n(H,"LI",{});var j9e=s(u3);jfe=n(j9e,"STRONG",{});var wft=s(jfe);N9o=r(wft,"mpnet"),wft.forEach(t),q9o=r(j9e," \u2014 "),sG=n(j9e,"A",{href:!0});var Aft=s(sG);j9o=r(Aft,"MPNetForMaskedLM"),Aft.forEach(t),D9o=r(j9e," (MPNet model)"),j9e.forEach(t),G9o=i(H),b3=n(H,"LI",{});var D9e=s(b3);Dfe=n(D9e,"STRONG",{});var Lft=s(Dfe);O9o=r(Lft,"nystromformer"),Lft.forEach(t),V9o=r(D9e," \u2014 "),lG=n(D9e,"A",{href:!0});var yft=s(lG);X9o=r(yft,"NystromformerForMaskedLM"),yft.forEach(t),z9o=r(D9e," (Nystr\xF6mformer model)"),D9e.forEach(t),W9o=i(H),v3=n(H,"LI",{});var G9e=s(v3);Gfe=n(G9e,"STRONG",{});var xft=s(Gfe);Q9o=r(xft,"perceiver"),xft.forEach(t),H9o=r(G9e," \u2014 "),iG=n(G9e,"A",{href:!0});var $ft=s(iG);U9o=r($ft,"PerceiverForMaskedLM"),$ft.forEach(t),J9o=r(G9e," (Perceiver model)"),G9e.forEach(t),Y9o=i(H),F3=n(H,"LI",{});var O9e=s(F3);Ofe=n(O9e,"STRONG",{});var kft=s(Ofe);K9o=r(kft,"qdqbert"),kft.forEach(t),Z9o=r(O9e," \u2014 "),dG=n(O9e,"A",{href:!0});var Sft=s(dG);exo=r(Sft,"QDQBertForMaskedLM"),Sft.forEach(t),oxo=r(O9e," (QDQBert model)"),O9e.forEach(t),rxo=i(H),T3=n(H,"LI",{});var V9e=s(T3);Vfe=n(V9e,"STRONG",{});var Rft=s(Vfe);txo=r(Rft,"reformer"),Rft.forEach(t),axo=r(V9e," \u2014 "),cG=n(V9e,"A",{href:!0});var Pft=s(cG);nxo=r(Pft,"ReformerForMaskedLM"),Pft.forEach(t),sxo=r(V9e," (Reformer model)"),V9e.forEach(t),lxo=i(H),M3=n(H,"LI",{});var X9e=s(M3);Xfe=n(X9e,"STRONG",{});var Bft=s(Xfe);ixo=r(Bft,"rembert"),Bft.forEach(t),dxo=r(X9e," \u2014 "),fG=n(X9e,"A",{href:!0});var Ift=s(fG);cxo=r(Ift,"RemBertForMaskedLM"),Ift.forEach(t),fxo=r(X9e," (RemBERT model)"),X9e.forEach(t),mxo=i(H),E3=n(H,"LI",{});var z9e=s(E3);zfe=n(z9e,"STRONG",{});var Nft=s(zfe);gxo=r(Nft,"roberta"),Nft.forEach(t),hxo=r(z9e," \u2014 "),mG=n(z9e,"A",{href:!0});var qft=s(mG);pxo=r(qft,"RobertaForMaskedLM"),qft.forEach(t),_xo=r(z9e," (RoBERTa model)"),z9e.forEach(t),uxo=i(H),C3=n(H,"LI",{});var W9e=s(C3);Wfe=n(W9e,"STRONG",{});var jft=s(Wfe);bxo=r(jft,"roformer"),jft.forEach(t),vxo=r(W9e," \u2014 "),gG=n(W9e,"A",{href:!0});var Dft=s(gG);Fxo=r(Dft,"RoFormerForMaskedLM"),Dft.forEach(t),Txo=r(W9e," (RoFormer model)"),W9e.forEach(t),Mxo=i(H),w3=n(H,"LI",{});var Q9e=s(w3);Qfe=n(Q9e,"STRONG",{});var Gft=s(Qfe);Exo=r(Gft,"squeezebert"),Gft.forEach(t),Cxo=r(Q9e," \u2014 "),hG=n(Q9e,"A",{href:!0});var Oft=s(hG);wxo=r(Oft,"SqueezeBertForMaskedLM"),Oft.forEach(t),Axo=r(Q9e," (SqueezeBERT model)"),Q9e.forEach(t),Lxo=i(H),A3=n(H,"LI",{});var H9e=s(A3);Hfe=n(H9e,"STRONG",{});var Vft=s(Hfe);yxo=r(Vft,"tapas"),Vft.forEach(t),xxo=r(H9e," \u2014 "),pG=n(H9e,"A",{href:!0});var Xft=s(pG);$xo=r(Xft,"TapasForMaskedLM"),Xft.forEach(t),kxo=r(H9e," (TAPAS model)"),H9e.forEach(t),Sxo=i(H),L3=n(H,"LI",{});var U9e=s(L3);Ufe=n(U9e,"STRONG",{});var zft=s(Ufe);Rxo=r(zft,"wav2vec2"),zft.forEach(t),Pxo=r(U9e," \u2014 "),Jfe=n(U9e,"CODE",{});var Wft=s(Jfe);Bxo=r(Wft,"Wav2Vec2ForMaskedLM"),Wft.forEach(t),Ixo=r(U9e," (Wav2Vec2 model)"),U9e.forEach(t),Nxo=i(H),y3=n(H,"LI",{});var J9e=s(y3);Yfe=n(J9e,"STRONG",{});var Qft=s(Yfe);qxo=r(Qft,"xlm"),Qft.forEach(t),jxo=r(J9e," \u2014 "),_G=n(J9e,"A",{href:!0});var Hft=s(_G);Dxo=r(Hft,"XLMWithLMHeadModel"),Hft.forEach(t),Gxo=r(J9e," (XLM model)"),J9e.forEach(t),Oxo=i(H),x3=n(H,"LI",{});var Y9e=s(x3);Kfe=n(Y9e,"STRONG",{});var Uft=s(Kfe);Vxo=r(Uft,"xlm-roberta"),Uft.forEach(t),Xxo=r(Y9e," \u2014 "),uG=n(Y9e,"A",{href:!0});var Jft=s(uG);zxo=r(Jft,"XLMRobertaForMaskedLM"),Jft.forEach(t),Wxo=r(Y9e," (XLM-RoBERTa model)"),Y9e.forEach(t),Qxo=i(H),$3=n(H,"LI",{});var K9e=s($3);Zfe=n(K9e,"STRONG",{});var Yft=s(Zfe);Hxo=r(Yft,"xlm-roberta-xl"),Yft.forEach(t),Uxo=r(K9e," \u2014 "),bG=n(K9e,"A",{href:!0});var Kft=s(bG);Jxo=r(Kft,"XLMRobertaXLForMaskedLM"),Kft.forEach(t),Yxo=r(K9e," (XLM-RoBERTa-XL model)"),K9e.forEach(t),Kxo=i(H),k3=n(H,"LI",{});var Z9e=s(k3);eme=n(Z9e,"STRONG",{});var Zft=s(eme);Zxo=r(Zft,"yoso"),Zft.forEach(t),e$o=r(Z9e," \u2014 "),vG=n(Z9e,"A",{href:!0});var emt=s(vG);o$o=r(emt,"YosoForMaskedLM"),emt.forEach(t),r$o=r(Z9e," (YOSO model)"),Z9e.forEach(t),H.forEach(t),t$o=i(aa),S3=n(aa,"P",{});var exe=s(S3);a$o=r(exe,"The model is set in evaluation mode by default using "),ome=n(exe,"CODE",{});var omt=s(ome);n$o=r(omt,"model.eval()"),omt.forEach(t),s$o=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=n(exe,"CODE",{});var rmt=s(rme);l$o=r(rmt,"model.train()"),rmt.forEach(t),exe.forEach(t),i$o=i(aa),T(R3.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),jje=i(f),ji=n(f,"H2",{class:!0});var VGe=s(ji);P3=n(VGe,"A",{id:!0,class:!0,href:!0});var tmt=s(P3);tme=n(tmt,"SPAN",{});var amt=s(tme);T(NL.$$.fragment,amt),amt.forEach(t),tmt.forEach(t),d$o=i(VGe),ame=n(VGe,"SPAN",{});var nmt=s(ame);c$o=r(nmt,"AutoModelForSeq2SeqLM"),nmt.forEach(t),VGe.forEach(t),Dje=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(qL.$$.fragment,Qs),f$o=i(Qs),Di=n(Qs,"P",{});var dee=s(Di);m$o=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FG=n(dee,"A",{href:!0});var smt=s(FG);g$o=r(smt,"from_pretrained()"),smt.forEach(t),h$o=r(dee," class method or the "),TG=n(dee,"A",{href:!0});var lmt=s(TG);p$o=r(lmt,"from_config()"),lmt.forEach(t),_$o=r(dee,` class
method.`),dee.forEach(t),u$o=i(Qs),jL=n(Qs,"P",{});var XGe=s(jL);b$o=r(XGe,"This class cannot be instantiated directly using "),nme=n(XGe,"CODE",{});var imt=s(nme);v$o=r(imt,"__init__()"),imt.forEach(t),F$o=r(XGe," (throws an error)."),XGe.forEach(t),T$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var tA=s(lt);T(DL.$$.fragment,tA),M$o=i(tA),sme=n(tA,"P",{});var dmt=s(sme);E$o=r(dmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dmt.forEach(t),C$o=i(tA),Gi=n(tA,"P",{});var cee=s(Gi);w$o=r(cee,`Note:
Loading a model from its configuration file does `),lme=n(cee,"STRONG",{});var cmt=s(lme);A$o=r(cmt,"not"),cmt.forEach(t),L$o=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(cee,"A",{href:!0});var fmt=s(MG);y$o=r(fmt,"from_pretrained()"),fmt.forEach(t),x$o=r(cee," to load the model weights."),cee.forEach(t),$$o=i(tA),T(B3.$$.fragment,tA),tA.forEach(t),k$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(GL.$$.fragment,na),S$o=i(na),ime=n(na,"P",{});var mmt=s(ime);R$o=r(mmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mmt.forEach(t),P$o=i(na),Sa=n(na,"P",{});var aA=s(Sa);B$o=r(aA,"The model class to instantiate is selected based on the "),dme=n(aA,"CODE",{});var gmt=s(dme);I$o=r(gmt,"model_type"),gmt.forEach(t),N$o=r(aA,` property of the config object (either
passed as an argument or loaded from `),cme=n(aA,"CODE",{});var hmt=s(cme);q$o=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),j$o=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(aA,"CODE",{});var pmt=s(fme);D$o=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),G$o=r(aA,":"),aA.forEach(t),O$o=i(na),ue=n(na,"UL",{});var Fe=s(ue);I3=n(Fe,"LI",{});var oxe=s(I3);mme=n(oxe,"STRONG",{});var _mt=s(mme);V$o=r(_mt,"bart"),_mt.forEach(t),X$o=r(oxe," \u2014 "),EG=n(oxe,"A",{href:!0});var umt=s(EG);z$o=r(umt,"BartForConditionalGeneration"),umt.forEach(t),W$o=r(oxe," (BART model)"),oxe.forEach(t),Q$o=i(Fe),N3=n(Fe,"LI",{});var rxe=s(N3);gme=n(rxe,"STRONG",{});var bmt=s(gme);H$o=r(bmt,"bigbird_pegasus"),bmt.forEach(t),U$o=r(rxe," \u2014 "),CG=n(rxe,"A",{href:!0});var vmt=s(CG);J$o=r(vmt,"BigBirdPegasusForConditionalGeneration"),vmt.forEach(t),Y$o=r(rxe," (BigBird-Pegasus model)"),rxe.forEach(t),K$o=i(Fe),q3=n(Fe,"LI",{});var txe=s(q3);hme=n(txe,"STRONG",{});var Fmt=s(hme);Z$o=r(Fmt,"blenderbot"),Fmt.forEach(t),eko=r(txe," \u2014 "),wG=n(txe,"A",{href:!0});var Tmt=s(wG);oko=r(Tmt,"BlenderbotForConditionalGeneration"),Tmt.forEach(t),rko=r(txe," (Blenderbot model)"),txe.forEach(t),tko=i(Fe),j3=n(Fe,"LI",{});var axe=s(j3);pme=n(axe,"STRONG",{});var Mmt=s(pme);ako=r(Mmt,"blenderbot-small"),Mmt.forEach(t),nko=r(axe," \u2014 "),AG=n(axe,"A",{href:!0});var Emt=s(AG);sko=r(Emt,"BlenderbotSmallForConditionalGeneration"),Emt.forEach(t),lko=r(axe," (BlenderbotSmall model)"),axe.forEach(t),iko=i(Fe),D3=n(Fe,"LI",{});var nxe=s(D3);_me=n(nxe,"STRONG",{});var Cmt=s(_me);dko=r(Cmt,"encoder-decoder"),Cmt.forEach(t),cko=r(nxe," \u2014 "),LG=n(nxe,"A",{href:!0});var wmt=s(LG);fko=r(wmt,"EncoderDecoderModel"),wmt.forEach(t),mko=r(nxe," (Encoder decoder model)"),nxe.forEach(t),gko=i(Fe),G3=n(Fe,"LI",{});var sxe=s(G3);ume=n(sxe,"STRONG",{});var Amt=s(ume);hko=r(Amt,"fsmt"),Amt.forEach(t),pko=r(sxe," \u2014 "),yG=n(sxe,"A",{href:!0});var Lmt=s(yG);_ko=r(Lmt,"FSMTForConditionalGeneration"),Lmt.forEach(t),uko=r(sxe," (FairSeq Machine-Translation model)"),sxe.forEach(t),bko=i(Fe),O3=n(Fe,"LI",{});var lxe=s(O3);bme=n(lxe,"STRONG",{});var ymt=s(bme);vko=r(ymt,"led"),ymt.forEach(t),Fko=r(lxe," \u2014 "),xG=n(lxe,"A",{href:!0});var xmt=s(xG);Tko=r(xmt,"LEDForConditionalGeneration"),xmt.forEach(t),Mko=r(lxe," (LED model)"),lxe.forEach(t),Eko=i(Fe),V3=n(Fe,"LI",{});var ixe=s(V3);vme=n(ixe,"STRONG",{});var $mt=s(vme);Cko=r($mt,"m2m_100"),$mt.forEach(t),wko=r(ixe," \u2014 "),$G=n(ixe,"A",{href:!0});var kmt=s($G);Ako=r(kmt,"M2M100ForConditionalGeneration"),kmt.forEach(t),Lko=r(ixe," (M2M100 model)"),ixe.forEach(t),yko=i(Fe),X3=n(Fe,"LI",{});var dxe=s(X3);Fme=n(dxe,"STRONG",{});var Smt=s(Fme);xko=r(Smt,"marian"),Smt.forEach(t),$ko=r(dxe," \u2014 "),kG=n(dxe,"A",{href:!0});var Rmt=s(kG);kko=r(Rmt,"MarianMTModel"),Rmt.forEach(t),Sko=r(dxe," (Marian model)"),dxe.forEach(t),Rko=i(Fe),z3=n(Fe,"LI",{});var cxe=s(z3);Tme=n(cxe,"STRONG",{});var Pmt=s(Tme);Pko=r(Pmt,"mbart"),Pmt.forEach(t),Bko=r(cxe," \u2014 "),SG=n(cxe,"A",{href:!0});var Bmt=s(SG);Iko=r(Bmt,"MBartForConditionalGeneration"),Bmt.forEach(t),Nko=r(cxe," (mBART model)"),cxe.forEach(t),qko=i(Fe),W3=n(Fe,"LI",{});var fxe=s(W3);Mme=n(fxe,"STRONG",{});var Imt=s(Mme);jko=r(Imt,"mt5"),Imt.forEach(t),Dko=r(fxe," \u2014 "),RG=n(fxe,"A",{href:!0});var Nmt=s(RG);Gko=r(Nmt,"MT5ForConditionalGeneration"),Nmt.forEach(t),Oko=r(fxe," (MT5 model)"),fxe.forEach(t),Vko=i(Fe),Q3=n(Fe,"LI",{});var mxe=s(Q3);Eme=n(mxe,"STRONG",{});var qmt=s(Eme);Xko=r(qmt,"pegasus"),qmt.forEach(t),zko=r(mxe," \u2014 "),PG=n(mxe,"A",{href:!0});var jmt=s(PG);Wko=r(jmt,"PegasusForConditionalGeneration"),jmt.forEach(t),Qko=r(mxe," (Pegasus model)"),mxe.forEach(t),Hko=i(Fe),H3=n(Fe,"LI",{});var gxe=s(H3);Cme=n(gxe,"STRONG",{});var Dmt=s(Cme);Uko=r(Dmt,"plbart"),Dmt.forEach(t),Jko=r(gxe," \u2014 "),BG=n(gxe,"A",{href:!0});var Gmt=s(BG);Yko=r(Gmt,"PLBartForConditionalGeneration"),Gmt.forEach(t),Kko=r(gxe," (PLBart model)"),gxe.forEach(t),Zko=i(Fe),U3=n(Fe,"LI",{});var hxe=s(U3);wme=n(hxe,"STRONG",{});var Omt=s(wme);eSo=r(Omt,"prophetnet"),Omt.forEach(t),oSo=r(hxe," \u2014 "),IG=n(hxe,"A",{href:!0});var Vmt=s(IG);rSo=r(Vmt,"ProphetNetForConditionalGeneration"),Vmt.forEach(t),tSo=r(hxe," (ProphetNet model)"),hxe.forEach(t),aSo=i(Fe),J3=n(Fe,"LI",{});var pxe=s(J3);Ame=n(pxe,"STRONG",{});var Xmt=s(Ame);nSo=r(Xmt,"t5"),Xmt.forEach(t),sSo=r(pxe," \u2014 "),NG=n(pxe,"A",{href:!0});var zmt=s(NG);lSo=r(zmt,"T5ForConditionalGeneration"),zmt.forEach(t),iSo=r(pxe," (T5 model)"),pxe.forEach(t),dSo=i(Fe),Y3=n(Fe,"LI",{});var _xe=s(Y3);Lme=n(_xe,"STRONG",{});var Wmt=s(Lme);cSo=r(Wmt,"xlm-prophetnet"),Wmt.forEach(t),fSo=r(_xe," \u2014 "),qG=n(_xe,"A",{href:!0});var Qmt=s(qG);mSo=r(Qmt,"XLMProphetNetForConditionalGeneration"),Qmt.forEach(t),gSo=r(_xe," (XLM-ProphetNet model)"),_xe.forEach(t),Fe.forEach(t),hSo=i(na),K3=n(na,"P",{});var uxe=s(K3);pSo=r(uxe,"The model is set in evaluation mode by default using "),yme=n(uxe,"CODE",{});var Hmt=s(yme);_So=r(Hmt,"model.eval()"),Hmt.forEach(t),uSo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(uxe,"CODE",{});var Umt=s(xme);bSo=r(Umt,"model.train()"),Umt.forEach(t),uxe.forEach(t),vSo=i(na),T(Z3.$$.fragment,na),na.forEach(t),Qs.forEach(t),Gje=i(f),Oi=n(f,"H2",{class:!0});var zGe=s(Oi);eb=n(zGe,"A",{id:!0,class:!0,href:!0});var Jmt=s(eb);$me=n(Jmt,"SPAN",{});var Ymt=s($me);T(OL.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),FSo=i(zGe),kme=n(zGe,"SPAN",{});var Kmt=s(kme);TSo=r(Kmt,"AutoModelForSequenceClassification"),Kmt.forEach(t),zGe.forEach(t),Oje=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(VL.$$.fragment,Hs),MSo=i(Hs),Vi=n(Hs,"P",{});var fee=s(Vi);ESo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jG=n(fee,"A",{href:!0});var Zmt=s(jG);CSo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),wSo=r(fee," class method or the "),DG=n(fee,"A",{href:!0});var egt=s(DG);ASo=r(egt,"from_config()"),egt.forEach(t),LSo=r(fee,` class
method.`),fee.forEach(t),ySo=i(Hs),XL=n(Hs,"P",{});var WGe=s(XL);xSo=r(WGe,"This class cannot be instantiated directly using "),Sme=n(WGe,"CODE",{});var ogt=s(Sme);$So=r(ogt,"__init__()"),ogt.forEach(t),kSo=r(WGe," (throws an error)."),WGe.forEach(t),SSo=i(Hs),it=n(Hs,"DIV",{class:!0});var nA=s(it);T(zL.$$.fragment,nA),RSo=i(nA),Rme=n(nA,"P",{});var rgt=s(Rme);PSo=r(rgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rgt.forEach(t),BSo=i(nA),Xi=n(nA,"P",{});var mee=s(Xi);ISo=r(mee,`Note:
Loading a model from its configuration file does `),Pme=n(mee,"STRONG",{});var tgt=s(Pme);NSo=r(tgt,"not"),tgt.forEach(t),qSo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(mee,"A",{href:!0});var agt=s(GG);jSo=r(agt,"from_pretrained()"),agt.forEach(t),DSo=r(mee," to load the model weights."),mee.forEach(t),GSo=i(nA),T(ob.$$.fragment,nA),nA.forEach(t),OSo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(WL.$$.fragment,sa),VSo=i(sa),Bme=n(sa,"P",{});var ngt=s(Bme);XSo=r(ngt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ngt.forEach(t),zSo=i(sa),Ra=n(sa,"P",{});var sA=s(Ra);WSo=r(sA,"The model class to instantiate is selected based on the "),Ime=n(sA,"CODE",{});var sgt=s(Ime);QSo=r(sgt,"model_type"),sgt.forEach(t),HSo=r(sA,` property of the config object (either
passed as an argument or loaded from `),Nme=n(sA,"CODE",{});var lgt=s(Nme);USo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),JSo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(sA,"CODE",{});var igt=s(qme);YSo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),KSo=r(sA,":"),sA.forEach(t),ZSo=i(sa),N=n(sa,"UL",{});var j=s(N);rb=n(j,"LI",{});var bxe=s(rb);jme=n(bxe,"STRONG",{});var dgt=s(jme);eRo=r(dgt,"albert"),dgt.forEach(t),oRo=r(bxe," \u2014 "),OG=n(bxe,"A",{href:!0});var cgt=s(OG);rRo=r(cgt,"AlbertForSequenceClassification"),cgt.forEach(t),tRo=r(bxe," (ALBERT model)"),bxe.forEach(t),aRo=i(j),tb=n(j,"LI",{});var vxe=s(tb);Dme=n(vxe,"STRONG",{});var fgt=s(Dme);nRo=r(fgt,"bart"),fgt.forEach(t),sRo=r(vxe," \u2014 "),VG=n(vxe,"A",{href:!0});var mgt=s(VG);lRo=r(mgt,"BartForSequenceClassification"),mgt.forEach(t),iRo=r(vxe," (BART model)"),vxe.forEach(t),dRo=i(j),ab=n(j,"LI",{});var Fxe=s(ab);Gme=n(Fxe,"STRONG",{});var ggt=s(Gme);cRo=r(ggt,"bert"),ggt.forEach(t),fRo=r(Fxe," \u2014 "),XG=n(Fxe,"A",{href:!0});var hgt=s(XG);mRo=r(hgt,"BertForSequenceClassification"),hgt.forEach(t),gRo=r(Fxe," (BERT model)"),Fxe.forEach(t),hRo=i(j),nb=n(j,"LI",{});var Txe=s(nb);Ome=n(Txe,"STRONG",{});var pgt=s(Ome);pRo=r(pgt,"big_bird"),pgt.forEach(t),_Ro=r(Txe," \u2014 "),zG=n(Txe,"A",{href:!0});var _gt=s(zG);uRo=r(_gt,"BigBirdForSequenceClassification"),_gt.forEach(t),bRo=r(Txe," (BigBird model)"),Txe.forEach(t),vRo=i(j),sb=n(j,"LI",{});var Mxe=s(sb);Vme=n(Mxe,"STRONG",{});var ugt=s(Vme);FRo=r(ugt,"bigbird_pegasus"),ugt.forEach(t),TRo=r(Mxe," \u2014 "),WG=n(Mxe,"A",{href:!0});var bgt=s(WG);MRo=r(bgt,"BigBirdPegasusForSequenceClassification"),bgt.forEach(t),ERo=r(Mxe," (BigBird-Pegasus model)"),Mxe.forEach(t),CRo=i(j),lb=n(j,"LI",{});var Exe=s(lb);Xme=n(Exe,"STRONG",{});var vgt=s(Xme);wRo=r(vgt,"camembert"),vgt.forEach(t),ARo=r(Exe," \u2014 "),QG=n(Exe,"A",{href:!0});var Fgt=s(QG);LRo=r(Fgt,"CamembertForSequenceClassification"),Fgt.forEach(t),yRo=r(Exe," (CamemBERT model)"),Exe.forEach(t),xRo=i(j),ib=n(j,"LI",{});var Cxe=s(ib);zme=n(Cxe,"STRONG",{});var Tgt=s(zme);$Ro=r(Tgt,"canine"),Tgt.forEach(t),kRo=r(Cxe," \u2014 "),HG=n(Cxe,"A",{href:!0});var Mgt=s(HG);SRo=r(Mgt,"CanineForSequenceClassification"),Mgt.forEach(t),RRo=r(Cxe," (CANINE model)"),Cxe.forEach(t),PRo=i(j),db=n(j,"LI",{});var wxe=s(db);Wme=n(wxe,"STRONG",{});var Egt=s(Wme);BRo=r(Egt,"convbert"),Egt.forEach(t),IRo=r(wxe," \u2014 "),UG=n(wxe,"A",{href:!0});var Cgt=s(UG);NRo=r(Cgt,"ConvBertForSequenceClassification"),Cgt.forEach(t),qRo=r(wxe," (ConvBERT model)"),wxe.forEach(t),jRo=i(j),cb=n(j,"LI",{});var Axe=s(cb);Qme=n(Axe,"STRONG",{});var wgt=s(Qme);DRo=r(wgt,"ctrl"),wgt.forEach(t),GRo=r(Axe," \u2014 "),JG=n(Axe,"A",{href:!0});var Agt=s(JG);ORo=r(Agt,"CTRLForSequenceClassification"),Agt.forEach(t),VRo=r(Axe," (CTRL model)"),Axe.forEach(t),XRo=i(j),fb=n(j,"LI",{});var Lxe=s(fb);Hme=n(Lxe,"STRONG",{});var Lgt=s(Hme);zRo=r(Lgt,"data2vec-text"),Lgt.forEach(t),WRo=r(Lxe," \u2014 "),YG=n(Lxe,"A",{href:!0});var ygt=s(YG);QRo=r(ygt,"Data2VecTextForSequenceClassification"),ygt.forEach(t),HRo=r(Lxe," (Data2VecText model)"),Lxe.forEach(t),URo=i(j),mb=n(j,"LI",{});var yxe=s(mb);Ume=n(yxe,"STRONG",{});var xgt=s(Ume);JRo=r(xgt,"deberta"),xgt.forEach(t),YRo=r(yxe," \u2014 "),KG=n(yxe,"A",{href:!0});var $gt=s(KG);KRo=r($gt,"DebertaForSequenceClassification"),$gt.forEach(t),ZRo=r(yxe," (DeBERTa model)"),yxe.forEach(t),ePo=i(j),gb=n(j,"LI",{});var xxe=s(gb);Jme=n(xxe,"STRONG",{});var kgt=s(Jme);oPo=r(kgt,"deberta-v2"),kgt.forEach(t),rPo=r(xxe," \u2014 "),ZG=n(xxe,"A",{href:!0});var Sgt=s(ZG);tPo=r(Sgt,"DebertaV2ForSequenceClassification"),Sgt.forEach(t),aPo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),nPo=i(j),hb=n(j,"LI",{});var $xe=s(hb);Yme=n($xe,"STRONG",{});var Rgt=s(Yme);sPo=r(Rgt,"distilbert"),Rgt.forEach(t),lPo=r($xe," \u2014 "),eO=n($xe,"A",{href:!0});var Pgt=s(eO);iPo=r(Pgt,"DistilBertForSequenceClassification"),Pgt.forEach(t),dPo=r($xe," (DistilBERT model)"),$xe.forEach(t),cPo=i(j),pb=n(j,"LI",{});var kxe=s(pb);Kme=n(kxe,"STRONG",{});var Bgt=s(Kme);fPo=r(Bgt,"electra"),Bgt.forEach(t),mPo=r(kxe," \u2014 "),oO=n(kxe,"A",{href:!0});var Igt=s(oO);gPo=r(Igt,"ElectraForSequenceClassification"),Igt.forEach(t),hPo=r(kxe," (ELECTRA model)"),kxe.forEach(t),pPo=i(j),_b=n(j,"LI",{});var Sxe=s(_b);Zme=n(Sxe,"STRONG",{});var Ngt=s(Zme);_Po=r(Ngt,"flaubert"),Ngt.forEach(t),uPo=r(Sxe," \u2014 "),rO=n(Sxe,"A",{href:!0});var qgt=s(rO);bPo=r(qgt,"FlaubertForSequenceClassification"),qgt.forEach(t),vPo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),FPo=i(j),ub=n(j,"LI",{});var Rxe=s(ub);ege=n(Rxe,"STRONG",{});var jgt=s(ege);TPo=r(jgt,"fnet"),jgt.forEach(t),MPo=r(Rxe," \u2014 "),tO=n(Rxe,"A",{href:!0});var Dgt=s(tO);EPo=r(Dgt,"FNetForSequenceClassification"),Dgt.forEach(t),CPo=r(Rxe," (FNet model)"),Rxe.forEach(t),wPo=i(j),bb=n(j,"LI",{});var Pxe=s(bb);oge=n(Pxe,"STRONG",{});var Ggt=s(oge);APo=r(Ggt,"funnel"),Ggt.forEach(t),LPo=r(Pxe," \u2014 "),aO=n(Pxe,"A",{href:!0});var Ogt=s(aO);yPo=r(Ogt,"FunnelForSequenceClassification"),Ogt.forEach(t),xPo=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),$Po=i(j),vb=n(j,"LI",{});var Bxe=s(vb);rge=n(Bxe,"STRONG",{});var Vgt=s(rge);kPo=r(Vgt,"gpt2"),Vgt.forEach(t),SPo=r(Bxe," \u2014 "),nO=n(Bxe,"A",{href:!0});var Xgt=s(nO);RPo=r(Xgt,"GPT2ForSequenceClassification"),Xgt.forEach(t),PPo=r(Bxe," (OpenAI GPT-2 model)"),Bxe.forEach(t),BPo=i(j),Fb=n(j,"LI",{});var Ixe=s(Fb);tge=n(Ixe,"STRONG",{});var zgt=s(tge);IPo=r(zgt,"gpt_neo"),zgt.forEach(t),NPo=r(Ixe," \u2014 "),sO=n(Ixe,"A",{href:!0});var Wgt=s(sO);qPo=r(Wgt,"GPTNeoForSequenceClassification"),Wgt.forEach(t),jPo=r(Ixe," (GPT Neo model)"),Ixe.forEach(t),DPo=i(j),Tb=n(j,"LI",{});var Nxe=s(Tb);age=n(Nxe,"STRONG",{});var Qgt=s(age);GPo=r(Qgt,"gptj"),Qgt.forEach(t),OPo=r(Nxe," \u2014 "),lO=n(Nxe,"A",{href:!0});var Hgt=s(lO);VPo=r(Hgt,"GPTJForSequenceClassification"),Hgt.forEach(t),XPo=r(Nxe," (GPT-J model)"),Nxe.forEach(t),zPo=i(j),Mb=n(j,"LI",{});var qxe=s(Mb);nge=n(qxe,"STRONG",{});var Ugt=s(nge);WPo=r(Ugt,"ibert"),Ugt.forEach(t),QPo=r(qxe," \u2014 "),iO=n(qxe,"A",{href:!0});var Jgt=s(iO);HPo=r(Jgt,"IBertForSequenceClassification"),Jgt.forEach(t),UPo=r(qxe," (I-BERT model)"),qxe.forEach(t),JPo=i(j),Eb=n(j,"LI",{});var jxe=s(Eb);sge=n(jxe,"STRONG",{});var Ygt=s(sge);YPo=r(Ygt,"layoutlm"),Ygt.forEach(t),KPo=r(jxe," \u2014 "),dO=n(jxe,"A",{href:!0});var Kgt=s(dO);ZPo=r(Kgt,"LayoutLMForSequenceClassification"),Kgt.forEach(t),eBo=r(jxe," (LayoutLM model)"),jxe.forEach(t),oBo=i(j),Cb=n(j,"LI",{});var Dxe=s(Cb);lge=n(Dxe,"STRONG",{});var Zgt=s(lge);rBo=r(Zgt,"layoutlmv2"),Zgt.forEach(t),tBo=r(Dxe," \u2014 "),cO=n(Dxe,"A",{href:!0});var eht=s(cO);aBo=r(eht,"LayoutLMv2ForSequenceClassification"),eht.forEach(t),nBo=r(Dxe," (LayoutLMv2 model)"),Dxe.forEach(t),sBo=i(j),wb=n(j,"LI",{});var Gxe=s(wb);ige=n(Gxe,"STRONG",{});var oht=s(ige);lBo=r(oht,"layoutlmv3"),oht.forEach(t),iBo=r(Gxe," \u2014 "),fO=n(Gxe,"A",{href:!0});var rht=s(fO);dBo=r(rht,"LayoutLMv3ForSequenceClassification"),rht.forEach(t),cBo=r(Gxe," (LayoutLMv3 model)"),Gxe.forEach(t),fBo=i(j),Ab=n(j,"LI",{});var Oxe=s(Ab);dge=n(Oxe,"STRONG",{});var tht=s(dge);mBo=r(tht,"led"),tht.forEach(t),gBo=r(Oxe," \u2014 "),mO=n(Oxe,"A",{href:!0});var aht=s(mO);hBo=r(aht,"LEDForSequenceClassification"),aht.forEach(t),pBo=r(Oxe," (LED model)"),Oxe.forEach(t),_Bo=i(j),Lb=n(j,"LI",{});var Vxe=s(Lb);cge=n(Vxe,"STRONG",{});var nht=s(cge);uBo=r(nht,"longformer"),nht.forEach(t),bBo=r(Vxe," \u2014 "),gO=n(Vxe,"A",{href:!0});var sht=s(gO);vBo=r(sht,"LongformerForSequenceClassification"),sht.forEach(t),FBo=r(Vxe," (Longformer model)"),Vxe.forEach(t),TBo=i(j),yb=n(j,"LI",{});var Xxe=s(yb);fge=n(Xxe,"STRONG",{});var lht=s(fge);MBo=r(lht,"mbart"),lht.forEach(t),EBo=r(Xxe," \u2014 "),hO=n(Xxe,"A",{href:!0});var iht=s(hO);CBo=r(iht,"MBartForSequenceClassification"),iht.forEach(t),wBo=r(Xxe," (mBART model)"),Xxe.forEach(t),ABo=i(j),xb=n(j,"LI",{});var zxe=s(xb);mge=n(zxe,"STRONG",{});var dht=s(mge);LBo=r(dht,"megatron-bert"),dht.forEach(t),yBo=r(zxe," \u2014 "),pO=n(zxe,"A",{href:!0});var cht=s(pO);xBo=r(cht,"MegatronBertForSequenceClassification"),cht.forEach(t),$Bo=r(zxe," (Megatron-BERT model)"),zxe.forEach(t),kBo=i(j),$b=n(j,"LI",{});var Wxe=s($b);gge=n(Wxe,"STRONG",{});var fht=s(gge);SBo=r(fht,"mobilebert"),fht.forEach(t),RBo=r(Wxe," \u2014 "),_O=n(Wxe,"A",{href:!0});var mht=s(_O);PBo=r(mht,"MobileBertForSequenceClassification"),mht.forEach(t),BBo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),IBo=i(j),kb=n(j,"LI",{});var Qxe=s(kb);hge=n(Qxe,"STRONG",{});var ght=s(hge);NBo=r(ght,"mpnet"),ght.forEach(t),qBo=r(Qxe," \u2014 "),uO=n(Qxe,"A",{href:!0});var hht=s(uO);jBo=r(hht,"MPNetForSequenceClassification"),hht.forEach(t),DBo=r(Qxe," (MPNet model)"),Qxe.forEach(t),GBo=i(j),Sb=n(j,"LI",{});var Hxe=s(Sb);pge=n(Hxe,"STRONG",{});var pht=s(pge);OBo=r(pht,"nystromformer"),pht.forEach(t),VBo=r(Hxe," \u2014 "),bO=n(Hxe,"A",{href:!0});var _ht=s(bO);XBo=r(_ht,"NystromformerForSequenceClassification"),_ht.forEach(t),zBo=r(Hxe," (Nystr\xF6mformer model)"),Hxe.forEach(t),WBo=i(j),Rb=n(j,"LI",{});var Uxe=s(Rb);_ge=n(Uxe,"STRONG",{});var uht=s(_ge);QBo=r(uht,"openai-gpt"),uht.forEach(t),HBo=r(Uxe," \u2014 "),vO=n(Uxe,"A",{href:!0});var bht=s(vO);UBo=r(bht,"OpenAIGPTForSequenceClassification"),bht.forEach(t),JBo=r(Uxe," (OpenAI GPT model)"),Uxe.forEach(t),YBo=i(j),Pb=n(j,"LI",{});var Jxe=s(Pb);uge=n(Jxe,"STRONG",{});var vht=s(uge);KBo=r(vht,"perceiver"),vht.forEach(t),ZBo=r(Jxe," \u2014 "),FO=n(Jxe,"A",{href:!0});var Fht=s(FO);eIo=r(Fht,"PerceiverForSequenceClassification"),Fht.forEach(t),oIo=r(Jxe," (Perceiver model)"),Jxe.forEach(t),rIo=i(j),Bb=n(j,"LI",{});var Yxe=s(Bb);bge=n(Yxe,"STRONG",{});var Tht=s(bge);tIo=r(Tht,"plbart"),Tht.forEach(t),aIo=r(Yxe," \u2014 "),TO=n(Yxe,"A",{href:!0});var Mht=s(TO);nIo=r(Mht,"PLBartForSequenceClassification"),Mht.forEach(t),sIo=r(Yxe," (PLBart model)"),Yxe.forEach(t),lIo=i(j),Ib=n(j,"LI",{});var Kxe=s(Ib);vge=n(Kxe,"STRONG",{});var Eht=s(vge);iIo=r(Eht,"qdqbert"),Eht.forEach(t),dIo=r(Kxe," \u2014 "),MO=n(Kxe,"A",{href:!0});var Cht=s(MO);cIo=r(Cht,"QDQBertForSequenceClassification"),Cht.forEach(t),fIo=r(Kxe," (QDQBert model)"),Kxe.forEach(t),mIo=i(j),Nb=n(j,"LI",{});var Zxe=s(Nb);Fge=n(Zxe,"STRONG",{});var wht=s(Fge);gIo=r(wht,"reformer"),wht.forEach(t),hIo=r(Zxe," \u2014 "),EO=n(Zxe,"A",{href:!0});var Aht=s(EO);pIo=r(Aht,"ReformerForSequenceClassification"),Aht.forEach(t),_Io=r(Zxe," (Reformer model)"),Zxe.forEach(t),uIo=i(j),qb=n(j,"LI",{});var e$e=s(qb);Tge=n(e$e,"STRONG",{});var Lht=s(Tge);bIo=r(Lht,"rembert"),Lht.forEach(t),vIo=r(e$e," \u2014 "),CO=n(e$e,"A",{href:!0});var yht=s(CO);FIo=r(yht,"RemBertForSequenceClassification"),yht.forEach(t),TIo=r(e$e," (RemBERT model)"),e$e.forEach(t),MIo=i(j),jb=n(j,"LI",{});var o$e=s(jb);Mge=n(o$e,"STRONG",{});var xht=s(Mge);EIo=r(xht,"roberta"),xht.forEach(t),CIo=r(o$e," \u2014 "),wO=n(o$e,"A",{href:!0});var $ht=s(wO);wIo=r($ht,"RobertaForSequenceClassification"),$ht.forEach(t),AIo=r(o$e," (RoBERTa model)"),o$e.forEach(t),LIo=i(j),Db=n(j,"LI",{});var r$e=s(Db);Ege=n(r$e,"STRONG",{});var kht=s(Ege);yIo=r(kht,"roformer"),kht.forEach(t),xIo=r(r$e," \u2014 "),AO=n(r$e,"A",{href:!0});var Sht=s(AO);$Io=r(Sht,"RoFormerForSequenceClassification"),Sht.forEach(t),kIo=r(r$e," (RoFormer model)"),r$e.forEach(t),SIo=i(j),Gb=n(j,"LI",{});var t$e=s(Gb);Cge=n(t$e,"STRONG",{});var Rht=s(Cge);RIo=r(Rht,"squeezebert"),Rht.forEach(t),PIo=r(t$e," \u2014 "),LO=n(t$e,"A",{href:!0});var Pht=s(LO);BIo=r(Pht,"SqueezeBertForSequenceClassification"),Pht.forEach(t),IIo=r(t$e," (SqueezeBERT model)"),t$e.forEach(t),NIo=i(j),Ob=n(j,"LI",{});var a$e=s(Ob);wge=n(a$e,"STRONG",{});var Bht=s(wge);qIo=r(Bht,"tapas"),Bht.forEach(t),jIo=r(a$e," \u2014 "),yO=n(a$e,"A",{href:!0});var Iht=s(yO);DIo=r(Iht,"TapasForSequenceClassification"),Iht.forEach(t),GIo=r(a$e," (TAPAS model)"),a$e.forEach(t),OIo=i(j),Vb=n(j,"LI",{});var n$e=s(Vb);Age=n(n$e,"STRONG",{});var Nht=s(Age);VIo=r(Nht,"transfo-xl"),Nht.forEach(t),XIo=r(n$e," \u2014 "),xO=n(n$e,"A",{href:!0});var qht=s(xO);zIo=r(qht,"TransfoXLForSequenceClassification"),qht.forEach(t),WIo=r(n$e," (Transformer-XL model)"),n$e.forEach(t),QIo=i(j),Xb=n(j,"LI",{});var s$e=s(Xb);Lge=n(s$e,"STRONG",{});var jht=s(Lge);HIo=r(jht,"xlm"),jht.forEach(t),UIo=r(s$e," \u2014 "),$O=n(s$e,"A",{href:!0});var Dht=s($O);JIo=r(Dht,"XLMForSequenceClassification"),Dht.forEach(t),YIo=r(s$e," (XLM model)"),s$e.forEach(t),KIo=i(j),zb=n(j,"LI",{});var l$e=s(zb);yge=n(l$e,"STRONG",{});var Ght=s(yge);ZIo=r(Ght,"xlm-roberta"),Ght.forEach(t),eNo=r(l$e," \u2014 "),kO=n(l$e,"A",{href:!0});var Oht=s(kO);oNo=r(Oht,"XLMRobertaForSequenceClassification"),Oht.forEach(t),rNo=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),tNo=i(j),Wb=n(j,"LI",{});var i$e=s(Wb);xge=n(i$e,"STRONG",{});var Vht=s(xge);aNo=r(Vht,"xlm-roberta-xl"),Vht.forEach(t),nNo=r(i$e," \u2014 "),SO=n(i$e,"A",{href:!0});var Xht=s(SO);sNo=r(Xht,"XLMRobertaXLForSequenceClassification"),Xht.forEach(t),lNo=r(i$e," (XLM-RoBERTa-XL model)"),i$e.forEach(t),iNo=i(j),Qb=n(j,"LI",{});var d$e=s(Qb);$ge=n(d$e,"STRONG",{});var zht=s($ge);dNo=r(zht,"xlnet"),zht.forEach(t),cNo=r(d$e," \u2014 "),RO=n(d$e,"A",{href:!0});var Wht=s(RO);fNo=r(Wht,"XLNetForSequenceClassification"),Wht.forEach(t),mNo=r(d$e," (XLNet model)"),d$e.forEach(t),gNo=i(j),Hb=n(j,"LI",{});var c$e=s(Hb);kge=n(c$e,"STRONG",{});var Qht=s(kge);hNo=r(Qht,"yoso"),Qht.forEach(t),pNo=r(c$e," \u2014 "),PO=n(c$e,"A",{href:!0});var Hht=s(PO);_No=r(Hht,"YosoForSequenceClassification"),Hht.forEach(t),uNo=r(c$e," (YOSO model)"),c$e.forEach(t),j.forEach(t),bNo=i(sa),Ub=n(sa,"P",{});var f$e=s(Ub);vNo=r(f$e,"The model is set in evaluation mode by default using "),Sge=n(f$e,"CODE",{});var Uht=s(Sge);FNo=r(Uht,"model.eval()"),Uht.forEach(t),TNo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(f$e,"CODE",{});var Jht=s(Rge);MNo=r(Jht,"model.train()"),Jht.forEach(t),f$e.forEach(t),ENo=i(sa),T(Jb.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),Vje=i(f),zi=n(f,"H2",{class:!0});var QGe=s(zi);Yb=n(QGe,"A",{id:!0,class:!0,href:!0});var Yht=s(Yb);Pge=n(Yht,"SPAN",{});var Kht=s(Pge);T(QL.$$.fragment,Kht),Kht.forEach(t),Yht.forEach(t),CNo=i(QGe),Bge=n(QGe,"SPAN",{});var Zht=s(Bge);wNo=r(Zht,"AutoModelForMultipleChoice"),Zht.forEach(t),QGe.forEach(t),Xje=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(HL.$$.fragment,Us),ANo=i(Us),Wi=n(Us,"P",{});var gee=s(Wi);LNo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BO=n(gee,"A",{href:!0});var ept=s(BO);yNo=r(ept,"from_pretrained()"),ept.forEach(t),xNo=r(gee," class method or the "),IO=n(gee,"A",{href:!0});var opt=s(IO);$No=r(opt,"from_config()"),opt.forEach(t),kNo=r(gee,` class
method.`),gee.forEach(t),SNo=i(Us),UL=n(Us,"P",{});var HGe=s(UL);RNo=r(HGe,"This class cannot be instantiated directly using "),Ige=n(HGe,"CODE",{});var rpt=s(Ige);PNo=r(rpt,"__init__()"),rpt.forEach(t),BNo=r(HGe," (throws an error)."),HGe.forEach(t),INo=i(Us),dt=n(Us,"DIV",{class:!0});var lA=s(dt);T(JL.$$.fragment,lA),NNo=i(lA),Nge=n(lA,"P",{});var tpt=s(Nge);qNo=r(tpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tpt.forEach(t),jNo=i(lA),Qi=n(lA,"P",{});var hee=s(Qi);DNo=r(hee,`Note:
Loading a model from its configuration file does `),qge=n(hee,"STRONG",{});var apt=s(qge);GNo=r(apt,"not"),apt.forEach(t),ONo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(hee,"A",{href:!0});var npt=s(NO);VNo=r(npt,"from_pretrained()"),npt.forEach(t),XNo=r(hee," to load the model weights."),hee.forEach(t),zNo=i(lA),T(Kb.$$.fragment,lA),lA.forEach(t),WNo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(YL.$$.fragment,la),QNo=i(la),jge=n(la,"P",{});var spt=s(jge);HNo=r(spt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),spt.forEach(t),UNo=i(la),Pa=n(la,"P",{});var iA=s(Pa);JNo=r(iA,"The model class to instantiate is selected based on the "),Dge=n(iA,"CODE",{});var lpt=s(Dge);YNo=r(lpt,"model_type"),lpt.forEach(t),KNo=r(iA,` property of the config object (either
passed as an argument or loaded from `),Gge=n(iA,"CODE",{});var ipt=s(Gge);ZNo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),eqo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(iA,"CODE",{});var dpt=s(Oge);oqo=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),rqo=r(iA,":"),iA.forEach(t),tqo=i(la),Z=n(la,"UL",{});var ee=s(Z);Zb=n(ee,"LI",{});var m$e=s(Zb);Vge=n(m$e,"STRONG",{});var cpt=s(Vge);aqo=r(cpt,"albert"),cpt.forEach(t),nqo=r(m$e," \u2014 "),qO=n(m$e,"A",{href:!0});var fpt=s(qO);sqo=r(fpt,"AlbertForMultipleChoice"),fpt.forEach(t),lqo=r(m$e," (ALBERT model)"),m$e.forEach(t),iqo=i(ee),e2=n(ee,"LI",{});var g$e=s(e2);Xge=n(g$e,"STRONG",{});var mpt=s(Xge);dqo=r(mpt,"bert"),mpt.forEach(t),cqo=r(g$e," \u2014 "),jO=n(g$e,"A",{href:!0});var gpt=s(jO);fqo=r(gpt,"BertForMultipleChoice"),gpt.forEach(t),mqo=r(g$e," (BERT model)"),g$e.forEach(t),gqo=i(ee),o2=n(ee,"LI",{});var h$e=s(o2);zge=n(h$e,"STRONG",{});var hpt=s(zge);hqo=r(hpt,"big_bird"),hpt.forEach(t),pqo=r(h$e," \u2014 "),DO=n(h$e,"A",{href:!0});var ppt=s(DO);_qo=r(ppt,"BigBirdForMultipleChoice"),ppt.forEach(t),uqo=r(h$e," (BigBird model)"),h$e.forEach(t),bqo=i(ee),r2=n(ee,"LI",{});var p$e=s(r2);Wge=n(p$e,"STRONG",{});var _pt=s(Wge);vqo=r(_pt,"camembert"),_pt.forEach(t),Fqo=r(p$e," \u2014 "),GO=n(p$e,"A",{href:!0});var upt=s(GO);Tqo=r(upt,"CamembertForMultipleChoice"),upt.forEach(t),Mqo=r(p$e," (CamemBERT model)"),p$e.forEach(t),Eqo=i(ee),t2=n(ee,"LI",{});var _$e=s(t2);Qge=n(_$e,"STRONG",{});var bpt=s(Qge);Cqo=r(bpt,"canine"),bpt.forEach(t),wqo=r(_$e," \u2014 "),OO=n(_$e,"A",{href:!0});var vpt=s(OO);Aqo=r(vpt,"CanineForMultipleChoice"),vpt.forEach(t),Lqo=r(_$e," (CANINE model)"),_$e.forEach(t),yqo=i(ee),a2=n(ee,"LI",{});var u$e=s(a2);Hge=n(u$e,"STRONG",{});var Fpt=s(Hge);xqo=r(Fpt,"convbert"),Fpt.forEach(t),$qo=r(u$e," \u2014 "),VO=n(u$e,"A",{href:!0});var Tpt=s(VO);kqo=r(Tpt,"ConvBertForMultipleChoice"),Tpt.forEach(t),Sqo=r(u$e," (ConvBERT model)"),u$e.forEach(t),Rqo=i(ee),n2=n(ee,"LI",{});var b$e=s(n2);Uge=n(b$e,"STRONG",{});var Mpt=s(Uge);Pqo=r(Mpt,"data2vec-text"),Mpt.forEach(t),Bqo=r(b$e," \u2014 "),XO=n(b$e,"A",{href:!0});var Ept=s(XO);Iqo=r(Ept,"Data2VecTextForMultipleChoice"),Ept.forEach(t),Nqo=r(b$e," (Data2VecText model)"),b$e.forEach(t),qqo=i(ee),s2=n(ee,"LI",{});var v$e=s(s2);Jge=n(v$e,"STRONG",{});var Cpt=s(Jge);jqo=r(Cpt,"deberta-v2"),Cpt.forEach(t),Dqo=r(v$e," \u2014 "),zO=n(v$e,"A",{href:!0});var wpt=s(zO);Gqo=r(wpt,"DebertaV2ForMultipleChoice"),wpt.forEach(t),Oqo=r(v$e," (DeBERTa-v2 model)"),v$e.forEach(t),Vqo=i(ee),l2=n(ee,"LI",{});var F$e=s(l2);Yge=n(F$e,"STRONG",{});var Apt=s(Yge);Xqo=r(Apt,"distilbert"),Apt.forEach(t),zqo=r(F$e," \u2014 "),WO=n(F$e,"A",{href:!0});var Lpt=s(WO);Wqo=r(Lpt,"DistilBertForMultipleChoice"),Lpt.forEach(t),Qqo=r(F$e," (DistilBERT model)"),F$e.forEach(t),Hqo=i(ee),i2=n(ee,"LI",{});var T$e=s(i2);Kge=n(T$e,"STRONG",{});var ypt=s(Kge);Uqo=r(ypt,"electra"),ypt.forEach(t),Jqo=r(T$e," \u2014 "),QO=n(T$e,"A",{href:!0});var xpt=s(QO);Yqo=r(xpt,"ElectraForMultipleChoice"),xpt.forEach(t),Kqo=r(T$e," (ELECTRA model)"),T$e.forEach(t),Zqo=i(ee),d2=n(ee,"LI",{});var M$e=s(d2);Zge=n(M$e,"STRONG",{});var $pt=s(Zge);ejo=r($pt,"flaubert"),$pt.forEach(t),ojo=r(M$e," \u2014 "),HO=n(M$e,"A",{href:!0});var kpt=s(HO);rjo=r(kpt,"FlaubertForMultipleChoice"),kpt.forEach(t),tjo=r(M$e," (FlauBERT model)"),M$e.forEach(t),ajo=i(ee),c2=n(ee,"LI",{});var E$e=s(c2);ehe=n(E$e,"STRONG",{});var Spt=s(ehe);njo=r(Spt,"fnet"),Spt.forEach(t),sjo=r(E$e," \u2014 "),UO=n(E$e,"A",{href:!0});var Rpt=s(UO);ljo=r(Rpt,"FNetForMultipleChoice"),Rpt.forEach(t),ijo=r(E$e," (FNet model)"),E$e.forEach(t),djo=i(ee),f2=n(ee,"LI",{});var C$e=s(f2);ohe=n(C$e,"STRONG",{});var Ppt=s(ohe);cjo=r(Ppt,"funnel"),Ppt.forEach(t),fjo=r(C$e," \u2014 "),JO=n(C$e,"A",{href:!0});var Bpt=s(JO);mjo=r(Bpt,"FunnelForMultipleChoice"),Bpt.forEach(t),gjo=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),hjo=i(ee),m2=n(ee,"LI",{});var w$e=s(m2);rhe=n(w$e,"STRONG",{});var Ipt=s(rhe);pjo=r(Ipt,"ibert"),Ipt.forEach(t),_jo=r(w$e," \u2014 "),YO=n(w$e,"A",{href:!0});var Npt=s(YO);ujo=r(Npt,"IBertForMultipleChoice"),Npt.forEach(t),bjo=r(w$e," (I-BERT model)"),w$e.forEach(t),vjo=i(ee),g2=n(ee,"LI",{});var A$e=s(g2);the=n(A$e,"STRONG",{});var qpt=s(the);Fjo=r(qpt,"longformer"),qpt.forEach(t),Tjo=r(A$e," \u2014 "),KO=n(A$e,"A",{href:!0});var jpt=s(KO);Mjo=r(jpt,"LongformerForMultipleChoice"),jpt.forEach(t),Ejo=r(A$e," (Longformer model)"),A$e.forEach(t),Cjo=i(ee),h2=n(ee,"LI",{});var L$e=s(h2);ahe=n(L$e,"STRONG",{});var Dpt=s(ahe);wjo=r(Dpt,"megatron-bert"),Dpt.forEach(t),Ajo=r(L$e," \u2014 "),ZO=n(L$e,"A",{href:!0});var Gpt=s(ZO);Ljo=r(Gpt,"MegatronBertForMultipleChoice"),Gpt.forEach(t),yjo=r(L$e," (Megatron-BERT model)"),L$e.forEach(t),xjo=i(ee),p2=n(ee,"LI",{});var y$e=s(p2);nhe=n(y$e,"STRONG",{});var Opt=s(nhe);$jo=r(Opt,"mobilebert"),Opt.forEach(t),kjo=r(y$e," \u2014 "),eV=n(y$e,"A",{href:!0});var Vpt=s(eV);Sjo=r(Vpt,"MobileBertForMultipleChoice"),Vpt.forEach(t),Rjo=r(y$e," (MobileBERT model)"),y$e.forEach(t),Pjo=i(ee),_2=n(ee,"LI",{});var x$e=s(_2);she=n(x$e,"STRONG",{});var Xpt=s(she);Bjo=r(Xpt,"mpnet"),Xpt.forEach(t),Ijo=r(x$e," \u2014 "),oV=n(x$e,"A",{href:!0});var zpt=s(oV);Njo=r(zpt,"MPNetForMultipleChoice"),zpt.forEach(t),qjo=r(x$e," (MPNet model)"),x$e.forEach(t),jjo=i(ee),u2=n(ee,"LI",{});var $$e=s(u2);lhe=n($$e,"STRONG",{});var Wpt=s(lhe);Djo=r(Wpt,"nystromformer"),Wpt.forEach(t),Gjo=r($$e," \u2014 "),rV=n($$e,"A",{href:!0});var Qpt=s(rV);Ojo=r(Qpt,"NystromformerForMultipleChoice"),Qpt.forEach(t),Vjo=r($$e," (Nystr\xF6mformer model)"),$$e.forEach(t),Xjo=i(ee),b2=n(ee,"LI",{});var k$e=s(b2);ihe=n(k$e,"STRONG",{});var Hpt=s(ihe);zjo=r(Hpt,"qdqbert"),Hpt.forEach(t),Wjo=r(k$e," \u2014 "),tV=n(k$e,"A",{href:!0});var Upt=s(tV);Qjo=r(Upt,"QDQBertForMultipleChoice"),Upt.forEach(t),Hjo=r(k$e," (QDQBert model)"),k$e.forEach(t),Ujo=i(ee),v2=n(ee,"LI",{});var S$e=s(v2);dhe=n(S$e,"STRONG",{});var Jpt=s(dhe);Jjo=r(Jpt,"rembert"),Jpt.forEach(t),Yjo=r(S$e," \u2014 "),aV=n(S$e,"A",{href:!0});var Ypt=s(aV);Kjo=r(Ypt,"RemBertForMultipleChoice"),Ypt.forEach(t),Zjo=r(S$e," (RemBERT model)"),S$e.forEach(t),eDo=i(ee),F2=n(ee,"LI",{});var R$e=s(F2);che=n(R$e,"STRONG",{});var Kpt=s(che);oDo=r(Kpt,"roberta"),Kpt.forEach(t),rDo=r(R$e," \u2014 "),nV=n(R$e,"A",{href:!0});var Zpt=s(nV);tDo=r(Zpt,"RobertaForMultipleChoice"),Zpt.forEach(t),aDo=r(R$e," (RoBERTa model)"),R$e.forEach(t),nDo=i(ee),T2=n(ee,"LI",{});var P$e=s(T2);fhe=n(P$e,"STRONG",{});var e_t=s(fhe);sDo=r(e_t,"roformer"),e_t.forEach(t),lDo=r(P$e," \u2014 "),sV=n(P$e,"A",{href:!0});var o_t=s(sV);iDo=r(o_t,"RoFormerForMultipleChoice"),o_t.forEach(t),dDo=r(P$e," (RoFormer model)"),P$e.forEach(t),cDo=i(ee),M2=n(ee,"LI",{});var B$e=s(M2);mhe=n(B$e,"STRONG",{});var r_t=s(mhe);fDo=r(r_t,"squeezebert"),r_t.forEach(t),mDo=r(B$e," \u2014 "),lV=n(B$e,"A",{href:!0});var t_t=s(lV);gDo=r(t_t,"SqueezeBertForMultipleChoice"),t_t.forEach(t),hDo=r(B$e," (SqueezeBERT model)"),B$e.forEach(t),pDo=i(ee),E2=n(ee,"LI",{});var I$e=s(E2);ghe=n(I$e,"STRONG",{});var a_t=s(ghe);_Do=r(a_t,"xlm"),a_t.forEach(t),uDo=r(I$e," \u2014 "),iV=n(I$e,"A",{href:!0});var n_t=s(iV);bDo=r(n_t,"XLMForMultipleChoice"),n_t.forEach(t),vDo=r(I$e," (XLM model)"),I$e.forEach(t),FDo=i(ee),C2=n(ee,"LI",{});var N$e=s(C2);hhe=n(N$e,"STRONG",{});var s_t=s(hhe);TDo=r(s_t,"xlm-roberta"),s_t.forEach(t),MDo=r(N$e," \u2014 "),dV=n(N$e,"A",{href:!0});var l_t=s(dV);EDo=r(l_t,"XLMRobertaForMultipleChoice"),l_t.forEach(t),CDo=r(N$e," (XLM-RoBERTa model)"),N$e.forEach(t),wDo=i(ee),w2=n(ee,"LI",{});var q$e=s(w2);phe=n(q$e,"STRONG",{});var i_t=s(phe);ADo=r(i_t,"xlm-roberta-xl"),i_t.forEach(t),LDo=r(q$e," \u2014 "),cV=n(q$e,"A",{href:!0});var d_t=s(cV);yDo=r(d_t,"XLMRobertaXLForMultipleChoice"),d_t.forEach(t),xDo=r(q$e," (XLM-RoBERTa-XL model)"),q$e.forEach(t),$Do=i(ee),A2=n(ee,"LI",{});var j$e=s(A2);_he=n(j$e,"STRONG",{});var c_t=s(_he);kDo=r(c_t,"xlnet"),c_t.forEach(t),SDo=r(j$e," \u2014 "),fV=n(j$e,"A",{href:!0});var f_t=s(fV);RDo=r(f_t,"XLNetForMultipleChoice"),f_t.forEach(t),PDo=r(j$e," (XLNet model)"),j$e.forEach(t),BDo=i(ee),L2=n(ee,"LI",{});var D$e=s(L2);uhe=n(D$e,"STRONG",{});var m_t=s(uhe);IDo=r(m_t,"yoso"),m_t.forEach(t),NDo=r(D$e," \u2014 "),mV=n(D$e,"A",{href:!0});var g_t=s(mV);qDo=r(g_t,"YosoForMultipleChoice"),g_t.forEach(t),jDo=r(D$e," (YOSO model)"),D$e.forEach(t),ee.forEach(t),DDo=i(la),y2=n(la,"P",{});var G$e=s(y2);GDo=r(G$e,"The model is set in evaluation mode by default using "),bhe=n(G$e,"CODE",{});var h_t=s(bhe);ODo=r(h_t,"model.eval()"),h_t.forEach(t),VDo=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(G$e,"CODE",{});var p_t=s(vhe);XDo=r(p_t,"model.train()"),p_t.forEach(t),G$e.forEach(t),zDo=i(la),T(x2.$$.fragment,la),la.forEach(t),Us.forEach(t),zje=i(f),Hi=n(f,"H2",{class:!0});var UGe=s(Hi);$2=n(UGe,"A",{id:!0,class:!0,href:!0});var __t=s($2);Fhe=n(__t,"SPAN",{});var u_t=s(Fhe);T(KL.$$.fragment,u_t),u_t.forEach(t),__t.forEach(t),WDo=i(UGe),The=n(UGe,"SPAN",{});var b_t=s(The);QDo=r(b_t,"AutoModelForNextSentencePrediction"),b_t.forEach(t),UGe.forEach(t),Wje=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(ZL.$$.fragment,Js),HDo=i(Js),Ui=n(Js,"P",{});var pee=s(Ui);UDo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gV=n(pee,"A",{href:!0});var v_t=s(gV);JDo=r(v_t,"from_pretrained()"),v_t.forEach(t),YDo=r(pee," class method or the "),hV=n(pee,"A",{href:!0});var F_t=s(hV);KDo=r(F_t,"from_config()"),F_t.forEach(t),ZDo=r(pee,` class
method.`),pee.forEach(t),eGo=i(Js),ey=n(Js,"P",{});var JGe=s(ey);oGo=r(JGe,"This class cannot be instantiated directly using "),Mhe=n(JGe,"CODE",{});var T_t=s(Mhe);rGo=r(T_t,"__init__()"),T_t.forEach(t),tGo=r(JGe," (throws an error)."),JGe.forEach(t),aGo=i(Js),ct=n(Js,"DIV",{class:!0});var dA=s(ct);T(oy.$$.fragment,dA),nGo=i(dA),Ehe=n(dA,"P",{});var M_t=s(Ehe);sGo=r(M_t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M_t.forEach(t),lGo=i(dA),Ji=n(dA,"P",{});var _ee=s(Ji);iGo=r(_ee,`Note:
Loading a model from its configuration file does `),Che=n(_ee,"STRONG",{});var E_t=s(Che);dGo=r(E_t,"not"),E_t.forEach(t),cGo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(_ee,"A",{href:!0});var C_t=s(pV);fGo=r(C_t,"from_pretrained()"),C_t.forEach(t),mGo=r(_ee," to load the model weights."),_ee.forEach(t),gGo=i(dA),T(k2.$$.fragment,dA),dA.forEach(t),hGo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(ry.$$.fragment,ia),pGo=i(ia),whe=n(ia,"P",{});var w_t=s(whe);_Go=r(w_t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w_t.forEach(t),uGo=i(ia),Ba=n(ia,"P",{});var cA=s(Ba);bGo=r(cA,"The model class to instantiate is selected based on the "),Ahe=n(cA,"CODE",{});var A_t=s(Ahe);vGo=r(A_t,"model_type"),A_t.forEach(t),FGo=r(cA,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(cA,"CODE",{});var L_t=s(Lhe);TGo=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),MGo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(cA,"CODE",{});var y_t=s(yhe);EGo=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),CGo=r(cA,":"),cA.forEach(t),wGo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);S2=n(Ys,"LI",{});var O$e=s(S2);xhe=n(O$e,"STRONG",{});var x_t=s(xhe);AGo=r(x_t,"bert"),x_t.forEach(t),LGo=r(O$e," \u2014 "),_V=n(O$e,"A",{href:!0});var $_t=s(_V);yGo=r($_t,"BertForNextSentencePrediction"),$_t.forEach(t),xGo=r(O$e," (BERT model)"),O$e.forEach(t),$Go=i(Ys),R2=n(Ys,"LI",{});var V$e=s(R2);$he=n(V$e,"STRONG",{});var k_t=s($he);kGo=r(k_t,"fnet"),k_t.forEach(t),SGo=r(V$e," \u2014 "),uV=n(V$e,"A",{href:!0});var S_t=s(uV);RGo=r(S_t,"FNetForNextSentencePrediction"),S_t.forEach(t),PGo=r(V$e," (FNet model)"),V$e.forEach(t),BGo=i(Ys),P2=n(Ys,"LI",{});var X$e=s(P2);khe=n(X$e,"STRONG",{});var R_t=s(khe);IGo=r(R_t,"megatron-bert"),R_t.forEach(t),NGo=r(X$e," \u2014 "),bV=n(X$e,"A",{href:!0});var P_t=s(bV);qGo=r(P_t,"MegatronBertForNextSentencePrediction"),P_t.forEach(t),jGo=r(X$e," (Megatron-BERT model)"),X$e.forEach(t),DGo=i(Ys),B2=n(Ys,"LI",{});var z$e=s(B2);She=n(z$e,"STRONG",{});var B_t=s(She);GGo=r(B_t,"mobilebert"),B_t.forEach(t),OGo=r(z$e," \u2014 "),vV=n(z$e,"A",{href:!0});var I_t=s(vV);VGo=r(I_t,"MobileBertForNextSentencePrediction"),I_t.forEach(t),XGo=r(z$e," (MobileBERT model)"),z$e.forEach(t),zGo=i(Ys),I2=n(Ys,"LI",{});var W$e=s(I2);Rhe=n(W$e,"STRONG",{});var N_t=s(Rhe);WGo=r(N_t,"qdqbert"),N_t.forEach(t),QGo=r(W$e," \u2014 "),FV=n(W$e,"A",{href:!0});var q_t=s(FV);HGo=r(q_t,"QDQBertForNextSentencePrediction"),q_t.forEach(t),UGo=r(W$e," (QDQBert model)"),W$e.forEach(t),Ys.forEach(t),JGo=i(ia),N2=n(ia,"P",{});var Q$e=s(N2);YGo=r(Q$e,"The model is set in evaluation mode by default using "),Phe=n(Q$e,"CODE",{});var j_t=s(Phe);KGo=r(j_t,"model.eval()"),j_t.forEach(t),ZGo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=n(Q$e,"CODE",{});var D_t=s(Bhe);eOo=r(D_t,"model.train()"),D_t.forEach(t),Q$e.forEach(t),oOo=i(ia),T(q2.$$.fragment,ia),ia.forEach(t),Js.forEach(t),Qje=i(f),Yi=n(f,"H2",{class:!0});var YGe=s(Yi);j2=n(YGe,"A",{id:!0,class:!0,href:!0});var G_t=s(j2);Ihe=n(G_t,"SPAN",{});var O_t=s(Ihe);T(ty.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),rOo=i(YGe),Nhe=n(YGe,"SPAN",{});var V_t=s(Nhe);tOo=r(V_t,"AutoModelForTokenClassification"),V_t.forEach(t),YGe.forEach(t),Hje=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(ay.$$.fragment,Ks),aOo=i(Ks),Ki=n(Ks,"P",{});var uee=s(Ki);nOo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TV=n(uee,"A",{href:!0});var X_t=s(TV);sOo=r(X_t,"from_pretrained()"),X_t.forEach(t),lOo=r(uee," class method or the "),MV=n(uee,"A",{href:!0});var z_t=s(MV);iOo=r(z_t,"from_config()"),z_t.forEach(t),dOo=r(uee,` class
method.`),uee.forEach(t),cOo=i(Ks),ny=n(Ks,"P",{});var KGe=s(ny);fOo=r(KGe,"This class cannot be instantiated directly using "),qhe=n(KGe,"CODE",{});var W_t=s(qhe);mOo=r(W_t,"__init__()"),W_t.forEach(t),gOo=r(KGe," (throws an error)."),KGe.forEach(t),hOo=i(Ks),ft=n(Ks,"DIV",{class:!0});var fA=s(ft);T(sy.$$.fragment,fA),pOo=i(fA),jhe=n(fA,"P",{});var Q_t=s(jhe);_Oo=r(Q_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q_t.forEach(t),uOo=i(fA),Zi=n(fA,"P",{});var bee=s(Zi);bOo=r(bee,`Note:
Loading a model from its configuration file does `),Dhe=n(bee,"STRONG",{});var H_t=s(Dhe);vOo=r(H_t,"not"),H_t.forEach(t),FOo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(bee,"A",{href:!0});var U_t=s(EV);TOo=r(U_t,"from_pretrained()"),U_t.forEach(t),MOo=r(bee," to load the model weights."),bee.forEach(t),EOo=i(fA),T(D2.$$.fragment,fA),fA.forEach(t),COo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(ly.$$.fragment,da),wOo=i(da),Ghe=n(da,"P",{});var J_t=s(Ghe);AOo=r(J_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J_t.forEach(t),LOo=i(da),Ia=n(da,"P",{});var mA=s(Ia);yOo=r(mA,"The model class to instantiate is selected based on the "),Ohe=n(mA,"CODE",{});var Y_t=s(Ohe);xOo=r(Y_t,"model_type"),Y_t.forEach(t),$Oo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Vhe=n(mA,"CODE",{});var K_t=s(Vhe);kOo=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),SOo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=n(mA,"CODE",{});var Z_t=s(Xhe);ROo=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),POo=r(mA,":"),mA.forEach(t),BOo=i(da),U=n(da,"UL",{});var J=s(U);G2=n(J,"LI",{});var H$e=s(G2);zhe=n(H$e,"STRONG",{});var eut=s(zhe);IOo=r(eut,"albert"),eut.forEach(t),NOo=r(H$e," \u2014 "),CV=n(H$e,"A",{href:!0});var out=s(CV);qOo=r(out,"AlbertForTokenClassification"),out.forEach(t),jOo=r(H$e," (ALBERT model)"),H$e.forEach(t),DOo=i(J),O2=n(J,"LI",{});var U$e=s(O2);Whe=n(U$e,"STRONG",{});var rut=s(Whe);GOo=r(rut,"bert"),rut.forEach(t),OOo=r(U$e," \u2014 "),wV=n(U$e,"A",{href:!0});var tut=s(wV);VOo=r(tut,"BertForTokenClassification"),tut.forEach(t),XOo=r(U$e," (BERT model)"),U$e.forEach(t),zOo=i(J),V2=n(J,"LI",{});var J$e=s(V2);Qhe=n(J$e,"STRONG",{});var aut=s(Qhe);WOo=r(aut,"big_bird"),aut.forEach(t),QOo=r(J$e," \u2014 "),AV=n(J$e,"A",{href:!0});var nut=s(AV);HOo=r(nut,"BigBirdForTokenClassification"),nut.forEach(t),UOo=r(J$e," (BigBird model)"),J$e.forEach(t),JOo=i(J),X2=n(J,"LI",{});var Y$e=s(X2);Hhe=n(Y$e,"STRONG",{});var sut=s(Hhe);YOo=r(sut,"camembert"),sut.forEach(t),KOo=r(Y$e," \u2014 "),LV=n(Y$e,"A",{href:!0});var lut=s(LV);ZOo=r(lut,"CamembertForTokenClassification"),lut.forEach(t),eVo=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),oVo=i(J),z2=n(J,"LI",{});var K$e=s(z2);Uhe=n(K$e,"STRONG",{});var iut=s(Uhe);rVo=r(iut,"canine"),iut.forEach(t),tVo=r(K$e," \u2014 "),yV=n(K$e,"A",{href:!0});var dut=s(yV);aVo=r(dut,"CanineForTokenClassification"),dut.forEach(t),nVo=r(K$e," (CANINE model)"),K$e.forEach(t),sVo=i(J),W2=n(J,"LI",{});var Z$e=s(W2);Jhe=n(Z$e,"STRONG",{});var cut=s(Jhe);lVo=r(cut,"convbert"),cut.forEach(t),iVo=r(Z$e," \u2014 "),xV=n(Z$e,"A",{href:!0});var fut=s(xV);dVo=r(fut,"ConvBertForTokenClassification"),fut.forEach(t),cVo=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),fVo=i(J),Q2=n(J,"LI",{});var eke=s(Q2);Yhe=n(eke,"STRONG",{});var mut=s(Yhe);mVo=r(mut,"data2vec-text"),mut.forEach(t),gVo=r(eke," \u2014 "),$V=n(eke,"A",{href:!0});var gut=s($V);hVo=r(gut,"Data2VecTextForTokenClassification"),gut.forEach(t),pVo=r(eke," (Data2VecText model)"),eke.forEach(t),_Vo=i(J),H2=n(J,"LI",{});var oke=s(H2);Khe=n(oke,"STRONG",{});var hut=s(Khe);uVo=r(hut,"deberta"),hut.forEach(t),bVo=r(oke," \u2014 "),kV=n(oke,"A",{href:!0});var put=s(kV);vVo=r(put,"DebertaForTokenClassification"),put.forEach(t),FVo=r(oke," (DeBERTa model)"),oke.forEach(t),TVo=i(J),U2=n(J,"LI",{});var rke=s(U2);Zhe=n(rke,"STRONG",{});var _ut=s(Zhe);MVo=r(_ut,"deberta-v2"),_ut.forEach(t),EVo=r(rke," \u2014 "),SV=n(rke,"A",{href:!0});var uut=s(SV);CVo=r(uut,"DebertaV2ForTokenClassification"),uut.forEach(t),wVo=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),AVo=i(J),J2=n(J,"LI",{});var tke=s(J2);epe=n(tke,"STRONG",{});var but=s(epe);LVo=r(but,"distilbert"),but.forEach(t),yVo=r(tke," \u2014 "),RV=n(tke,"A",{href:!0});var vut=s(RV);xVo=r(vut,"DistilBertForTokenClassification"),vut.forEach(t),$Vo=r(tke," (DistilBERT model)"),tke.forEach(t),kVo=i(J),Y2=n(J,"LI",{});var ake=s(Y2);ope=n(ake,"STRONG",{});var Fut=s(ope);SVo=r(Fut,"electra"),Fut.forEach(t),RVo=r(ake," \u2014 "),PV=n(ake,"A",{href:!0});var Tut=s(PV);PVo=r(Tut,"ElectraForTokenClassification"),Tut.forEach(t),BVo=r(ake," (ELECTRA model)"),ake.forEach(t),IVo=i(J),K2=n(J,"LI",{});var nke=s(K2);rpe=n(nke,"STRONG",{});var Mut=s(rpe);NVo=r(Mut,"flaubert"),Mut.forEach(t),qVo=r(nke," \u2014 "),BV=n(nke,"A",{href:!0});var Eut=s(BV);jVo=r(Eut,"FlaubertForTokenClassification"),Eut.forEach(t),DVo=r(nke," (FlauBERT model)"),nke.forEach(t),GVo=i(J),Z2=n(J,"LI",{});var ske=s(Z2);tpe=n(ske,"STRONG",{});var Cut=s(tpe);OVo=r(Cut,"fnet"),Cut.forEach(t),VVo=r(ske," \u2014 "),IV=n(ske,"A",{href:!0});var wut=s(IV);XVo=r(wut,"FNetForTokenClassification"),wut.forEach(t),zVo=r(ske," (FNet model)"),ske.forEach(t),WVo=i(J),ev=n(J,"LI",{});var lke=s(ev);ape=n(lke,"STRONG",{});var Aut=s(ape);QVo=r(Aut,"funnel"),Aut.forEach(t),HVo=r(lke," \u2014 "),NV=n(lke,"A",{href:!0});var Lut=s(NV);UVo=r(Lut,"FunnelForTokenClassification"),Lut.forEach(t),JVo=r(lke," (Funnel Transformer model)"),lke.forEach(t),YVo=i(J),ov=n(J,"LI",{});var ike=s(ov);npe=n(ike,"STRONG",{});var yut=s(npe);KVo=r(yut,"gpt2"),yut.forEach(t),ZVo=r(ike," \u2014 "),qV=n(ike,"A",{href:!0});var xut=s(qV);eXo=r(xut,"GPT2ForTokenClassification"),xut.forEach(t),oXo=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),rXo=i(J),rv=n(J,"LI",{});var dke=s(rv);spe=n(dke,"STRONG",{});var $ut=s(spe);tXo=r($ut,"ibert"),$ut.forEach(t),aXo=r(dke," \u2014 "),jV=n(dke,"A",{href:!0});var kut=s(jV);nXo=r(kut,"IBertForTokenClassification"),kut.forEach(t),sXo=r(dke," (I-BERT model)"),dke.forEach(t),lXo=i(J),tv=n(J,"LI",{});var cke=s(tv);lpe=n(cke,"STRONG",{});var Sut=s(lpe);iXo=r(Sut,"layoutlm"),Sut.forEach(t),dXo=r(cke," \u2014 "),DV=n(cke,"A",{href:!0});var Rut=s(DV);cXo=r(Rut,"LayoutLMForTokenClassification"),Rut.forEach(t),fXo=r(cke," (LayoutLM model)"),cke.forEach(t),mXo=i(J),av=n(J,"LI",{});var fke=s(av);ipe=n(fke,"STRONG",{});var Put=s(ipe);gXo=r(Put,"layoutlmv2"),Put.forEach(t),hXo=r(fke," \u2014 "),GV=n(fke,"A",{href:!0});var But=s(GV);pXo=r(But,"LayoutLMv2ForTokenClassification"),But.forEach(t),_Xo=r(fke," (LayoutLMv2 model)"),fke.forEach(t),uXo=i(J),nv=n(J,"LI",{});var mke=s(nv);dpe=n(mke,"STRONG",{});var Iut=s(dpe);bXo=r(Iut,"layoutlmv3"),Iut.forEach(t),vXo=r(mke," \u2014 "),OV=n(mke,"A",{href:!0});var Nut=s(OV);FXo=r(Nut,"LayoutLMv3ForTokenClassification"),Nut.forEach(t),TXo=r(mke," (LayoutLMv3 model)"),mke.forEach(t),MXo=i(J),sv=n(J,"LI",{});var gke=s(sv);cpe=n(gke,"STRONG",{});var qut=s(cpe);EXo=r(qut,"longformer"),qut.forEach(t),CXo=r(gke," \u2014 "),VV=n(gke,"A",{href:!0});var jut=s(VV);wXo=r(jut,"LongformerForTokenClassification"),jut.forEach(t),AXo=r(gke," (Longformer model)"),gke.forEach(t),LXo=i(J),lv=n(J,"LI",{});var hke=s(lv);fpe=n(hke,"STRONG",{});var Dut=s(fpe);yXo=r(Dut,"megatron-bert"),Dut.forEach(t),xXo=r(hke," \u2014 "),XV=n(hke,"A",{href:!0});var Gut=s(XV);$Xo=r(Gut,"MegatronBertForTokenClassification"),Gut.forEach(t),kXo=r(hke," (Megatron-BERT model)"),hke.forEach(t),SXo=i(J),iv=n(J,"LI",{});var pke=s(iv);mpe=n(pke,"STRONG",{});var Out=s(mpe);RXo=r(Out,"mobilebert"),Out.forEach(t),PXo=r(pke," \u2014 "),zV=n(pke,"A",{href:!0});var Vut=s(zV);BXo=r(Vut,"MobileBertForTokenClassification"),Vut.forEach(t),IXo=r(pke," (MobileBERT model)"),pke.forEach(t),NXo=i(J),dv=n(J,"LI",{});var _ke=s(dv);gpe=n(_ke,"STRONG",{});var Xut=s(gpe);qXo=r(Xut,"mpnet"),Xut.forEach(t),jXo=r(_ke," \u2014 "),WV=n(_ke,"A",{href:!0});var zut=s(WV);DXo=r(zut,"MPNetForTokenClassification"),zut.forEach(t),GXo=r(_ke," (MPNet model)"),_ke.forEach(t),OXo=i(J),cv=n(J,"LI",{});var uke=s(cv);hpe=n(uke,"STRONG",{});var Wut=s(hpe);VXo=r(Wut,"nystromformer"),Wut.forEach(t),XXo=r(uke," \u2014 "),QV=n(uke,"A",{href:!0});var Qut=s(QV);zXo=r(Qut,"NystromformerForTokenClassification"),Qut.forEach(t),WXo=r(uke," (Nystr\xF6mformer model)"),uke.forEach(t),QXo=i(J),fv=n(J,"LI",{});var bke=s(fv);ppe=n(bke,"STRONG",{});var Hut=s(ppe);HXo=r(Hut,"qdqbert"),Hut.forEach(t),UXo=r(bke," \u2014 "),HV=n(bke,"A",{href:!0});var Uut=s(HV);JXo=r(Uut,"QDQBertForTokenClassification"),Uut.forEach(t),YXo=r(bke," (QDQBert model)"),bke.forEach(t),KXo=i(J),mv=n(J,"LI",{});var vke=s(mv);_pe=n(vke,"STRONG",{});var Jut=s(_pe);ZXo=r(Jut,"rembert"),Jut.forEach(t),ezo=r(vke," \u2014 "),UV=n(vke,"A",{href:!0});var Yut=s(UV);ozo=r(Yut,"RemBertForTokenClassification"),Yut.forEach(t),rzo=r(vke," (RemBERT model)"),vke.forEach(t),tzo=i(J),gv=n(J,"LI",{});var Fke=s(gv);upe=n(Fke,"STRONG",{});var Kut=s(upe);azo=r(Kut,"roberta"),Kut.forEach(t),nzo=r(Fke," \u2014 "),JV=n(Fke,"A",{href:!0});var Zut=s(JV);szo=r(Zut,"RobertaForTokenClassification"),Zut.forEach(t),lzo=r(Fke," (RoBERTa model)"),Fke.forEach(t),izo=i(J),hv=n(J,"LI",{});var Tke=s(hv);bpe=n(Tke,"STRONG",{});var e1t=s(bpe);dzo=r(e1t,"roformer"),e1t.forEach(t),czo=r(Tke," \u2014 "),YV=n(Tke,"A",{href:!0});var o1t=s(YV);fzo=r(o1t,"RoFormerForTokenClassification"),o1t.forEach(t),mzo=r(Tke," (RoFormer model)"),Tke.forEach(t),gzo=i(J),pv=n(J,"LI",{});var Mke=s(pv);vpe=n(Mke,"STRONG",{});var r1t=s(vpe);hzo=r(r1t,"squeezebert"),r1t.forEach(t),pzo=r(Mke," \u2014 "),KV=n(Mke,"A",{href:!0});var t1t=s(KV);_zo=r(t1t,"SqueezeBertForTokenClassification"),t1t.forEach(t),uzo=r(Mke," (SqueezeBERT model)"),Mke.forEach(t),bzo=i(J),_v=n(J,"LI",{});var Eke=s(_v);Fpe=n(Eke,"STRONG",{});var a1t=s(Fpe);vzo=r(a1t,"xlm"),a1t.forEach(t),Fzo=r(Eke," \u2014 "),ZV=n(Eke,"A",{href:!0});var n1t=s(ZV);Tzo=r(n1t,"XLMForTokenClassification"),n1t.forEach(t),Mzo=r(Eke," (XLM model)"),Eke.forEach(t),Ezo=i(J),uv=n(J,"LI",{});var Cke=s(uv);Tpe=n(Cke,"STRONG",{});var s1t=s(Tpe);Czo=r(s1t,"xlm-roberta"),s1t.forEach(t),wzo=r(Cke," \u2014 "),eX=n(Cke,"A",{href:!0});var l1t=s(eX);Azo=r(l1t,"XLMRobertaForTokenClassification"),l1t.forEach(t),Lzo=r(Cke," (XLM-RoBERTa model)"),Cke.forEach(t),yzo=i(J),bv=n(J,"LI",{});var wke=s(bv);Mpe=n(wke,"STRONG",{});var i1t=s(Mpe);xzo=r(i1t,"xlm-roberta-xl"),i1t.forEach(t),$zo=r(wke," \u2014 "),oX=n(wke,"A",{href:!0});var d1t=s(oX);kzo=r(d1t,"XLMRobertaXLForTokenClassification"),d1t.forEach(t),Szo=r(wke," (XLM-RoBERTa-XL model)"),wke.forEach(t),Rzo=i(J),vv=n(J,"LI",{});var Ake=s(vv);Epe=n(Ake,"STRONG",{});var c1t=s(Epe);Pzo=r(c1t,"xlnet"),c1t.forEach(t),Bzo=r(Ake," \u2014 "),rX=n(Ake,"A",{href:!0});var f1t=s(rX);Izo=r(f1t,"XLNetForTokenClassification"),f1t.forEach(t),Nzo=r(Ake," (XLNet model)"),Ake.forEach(t),qzo=i(J),Fv=n(J,"LI",{});var Lke=s(Fv);Cpe=n(Lke,"STRONG",{});var m1t=s(Cpe);jzo=r(m1t,"yoso"),m1t.forEach(t),Dzo=r(Lke," \u2014 "),tX=n(Lke,"A",{href:!0});var g1t=s(tX);Gzo=r(g1t,"YosoForTokenClassification"),g1t.forEach(t),Ozo=r(Lke," (YOSO model)"),Lke.forEach(t),J.forEach(t),Vzo=i(da),Tv=n(da,"P",{});var yke=s(Tv);Xzo=r(yke,"The model is set in evaluation mode by default using "),wpe=n(yke,"CODE",{});var h1t=s(wpe);zzo=r(h1t,"model.eval()"),h1t.forEach(t),Wzo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(yke,"CODE",{});var p1t=s(Ape);Qzo=r(p1t,"model.train()"),p1t.forEach(t),yke.forEach(t),Hzo=i(da),T(Mv.$$.fragment,da),da.forEach(t),Ks.forEach(t),Uje=i(f),ed=n(f,"H2",{class:!0});var ZGe=s(ed);Ev=n(ZGe,"A",{id:!0,class:!0,href:!0});var _1t=s(Ev);Lpe=n(_1t,"SPAN",{});var u1t=s(Lpe);T(iy.$$.fragment,u1t),u1t.forEach(t),_1t.forEach(t),Uzo=i(ZGe),ype=n(ZGe,"SPAN",{});var b1t=s(ype);Jzo=r(b1t,"AutoModelForQuestionAnswering"),b1t.forEach(t),ZGe.forEach(t),Jje=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(dy.$$.fragment,Zs),Yzo=i(Zs),od=n(Zs,"P",{});var vee=s(od);Kzo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aX=n(vee,"A",{href:!0});var v1t=s(aX);Zzo=r(v1t,"from_pretrained()"),v1t.forEach(t),eWo=r(vee," class method or the "),nX=n(vee,"A",{href:!0});var F1t=s(nX);oWo=r(F1t,"from_config()"),F1t.forEach(t),rWo=r(vee,` class
method.`),vee.forEach(t),tWo=i(Zs),cy=n(Zs,"P",{});var eOe=s(cy);aWo=r(eOe,"This class cannot be instantiated directly using "),xpe=n(eOe,"CODE",{});var T1t=s(xpe);nWo=r(T1t,"__init__()"),T1t.forEach(t),sWo=r(eOe," (throws an error)."),eOe.forEach(t),lWo=i(Zs),mt=n(Zs,"DIV",{class:!0});var gA=s(mt);T(fy.$$.fragment,gA),iWo=i(gA),$pe=n(gA,"P",{});var M1t=s($pe);dWo=r(M1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M1t.forEach(t),cWo=i(gA),rd=n(gA,"P",{});var Fee=s(rd);fWo=r(Fee,`Note:
Loading a model from its configuration file does `),kpe=n(Fee,"STRONG",{});var E1t=s(kpe);mWo=r(E1t,"not"),E1t.forEach(t),gWo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(Fee,"A",{href:!0});var C1t=s(sX);hWo=r(C1t,"from_pretrained()"),C1t.forEach(t),pWo=r(Fee," to load the model weights."),Fee.forEach(t),_Wo=i(gA),T(Cv.$$.fragment,gA),gA.forEach(t),uWo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(my.$$.fragment,ca),bWo=i(ca),Spe=n(ca,"P",{});var w1t=s(Spe);vWo=r(w1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w1t.forEach(t),FWo=i(ca),Na=n(ca,"P",{});var hA=s(Na);TWo=r(hA,"The model class to instantiate is selected based on the "),Rpe=n(hA,"CODE",{});var A1t=s(Rpe);MWo=r(A1t,"model_type"),A1t.forEach(t),EWo=r(hA,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(hA,"CODE",{});var L1t=s(Ppe);CWo=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),wWo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(hA,"CODE",{});var y1t=s(Bpe);AWo=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),LWo=r(hA,":"),hA.forEach(t),yWo=i(ca),V=n(ca,"UL",{});var X=s(V);wv=n(X,"LI",{});var xke=s(wv);Ipe=n(xke,"STRONG",{});var x1t=s(Ipe);xWo=r(x1t,"albert"),x1t.forEach(t),$Wo=r(xke," \u2014 "),lX=n(xke,"A",{href:!0});var $1t=s(lX);kWo=r($1t,"AlbertForQuestionAnswering"),$1t.forEach(t),SWo=r(xke," (ALBERT model)"),xke.forEach(t),RWo=i(X),Av=n(X,"LI",{});var $ke=s(Av);Npe=n($ke,"STRONG",{});var k1t=s(Npe);PWo=r(k1t,"bart"),k1t.forEach(t),BWo=r($ke," \u2014 "),iX=n($ke,"A",{href:!0});var S1t=s(iX);IWo=r(S1t,"BartForQuestionAnswering"),S1t.forEach(t),NWo=r($ke," (BART model)"),$ke.forEach(t),qWo=i(X),Lv=n(X,"LI",{});var kke=s(Lv);qpe=n(kke,"STRONG",{});var R1t=s(qpe);jWo=r(R1t,"bert"),R1t.forEach(t),DWo=r(kke," \u2014 "),dX=n(kke,"A",{href:!0});var P1t=s(dX);GWo=r(P1t,"BertForQuestionAnswering"),P1t.forEach(t),OWo=r(kke," (BERT model)"),kke.forEach(t),VWo=i(X),yv=n(X,"LI",{});var Ske=s(yv);jpe=n(Ske,"STRONG",{});var B1t=s(jpe);XWo=r(B1t,"big_bird"),B1t.forEach(t),zWo=r(Ske," \u2014 "),cX=n(Ske,"A",{href:!0});var I1t=s(cX);WWo=r(I1t,"BigBirdForQuestionAnswering"),I1t.forEach(t),QWo=r(Ske," (BigBird model)"),Ske.forEach(t),HWo=i(X),xv=n(X,"LI",{});var Rke=s(xv);Dpe=n(Rke,"STRONG",{});var N1t=s(Dpe);UWo=r(N1t,"bigbird_pegasus"),N1t.forEach(t),JWo=r(Rke," \u2014 "),fX=n(Rke,"A",{href:!0});var q1t=s(fX);YWo=r(q1t,"BigBirdPegasusForQuestionAnswering"),q1t.forEach(t),KWo=r(Rke," (BigBird-Pegasus model)"),Rke.forEach(t),ZWo=i(X),$v=n(X,"LI",{});var Pke=s($v);Gpe=n(Pke,"STRONG",{});var j1t=s(Gpe);eQo=r(j1t,"camembert"),j1t.forEach(t),oQo=r(Pke," \u2014 "),mX=n(Pke,"A",{href:!0});var D1t=s(mX);rQo=r(D1t,"CamembertForQuestionAnswering"),D1t.forEach(t),tQo=r(Pke," (CamemBERT model)"),Pke.forEach(t),aQo=i(X),kv=n(X,"LI",{});var Bke=s(kv);Ope=n(Bke,"STRONG",{});var G1t=s(Ope);nQo=r(G1t,"canine"),G1t.forEach(t),sQo=r(Bke," \u2014 "),gX=n(Bke,"A",{href:!0});var O1t=s(gX);lQo=r(O1t,"CanineForQuestionAnswering"),O1t.forEach(t),iQo=r(Bke," (CANINE model)"),Bke.forEach(t),dQo=i(X),Sv=n(X,"LI",{});var Ike=s(Sv);Vpe=n(Ike,"STRONG",{});var V1t=s(Vpe);cQo=r(V1t,"convbert"),V1t.forEach(t),fQo=r(Ike," \u2014 "),hX=n(Ike,"A",{href:!0});var X1t=s(hX);mQo=r(X1t,"ConvBertForQuestionAnswering"),X1t.forEach(t),gQo=r(Ike," (ConvBERT model)"),Ike.forEach(t),hQo=i(X),Rv=n(X,"LI",{});var Nke=s(Rv);Xpe=n(Nke,"STRONG",{});var z1t=s(Xpe);pQo=r(z1t,"data2vec-text"),z1t.forEach(t),_Qo=r(Nke," \u2014 "),pX=n(Nke,"A",{href:!0});var W1t=s(pX);uQo=r(W1t,"Data2VecTextForQuestionAnswering"),W1t.forEach(t),bQo=r(Nke," (Data2VecText model)"),Nke.forEach(t),vQo=i(X),Pv=n(X,"LI",{});var qke=s(Pv);zpe=n(qke,"STRONG",{});var Q1t=s(zpe);FQo=r(Q1t,"deberta"),Q1t.forEach(t),TQo=r(qke," \u2014 "),_X=n(qke,"A",{href:!0});var H1t=s(_X);MQo=r(H1t,"DebertaForQuestionAnswering"),H1t.forEach(t),EQo=r(qke," (DeBERTa model)"),qke.forEach(t),CQo=i(X),Bv=n(X,"LI",{});var jke=s(Bv);Wpe=n(jke,"STRONG",{});var U1t=s(Wpe);wQo=r(U1t,"deberta-v2"),U1t.forEach(t),AQo=r(jke," \u2014 "),uX=n(jke,"A",{href:!0});var J1t=s(uX);LQo=r(J1t,"DebertaV2ForQuestionAnswering"),J1t.forEach(t),yQo=r(jke," (DeBERTa-v2 model)"),jke.forEach(t),xQo=i(X),Iv=n(X,"LI",{});var Dke=s(Iv);Qpe=n(Dke,"STRONG",{});var Y1t=s(Qpe);$Qo=r(Y1t,"distilbert"),Y1t.forEach(t),kQo=r(Dke," \u2014 "),bX=n(Dke,"A",{href:!0});var K1t=s(bX);SQo=r(K1t,"DistilBertForQuestionAnswering"),K1t.forEach(t),RQo=r(Dke," (DistilBERT model)"),Dke.forEach(t),PQo=i(X),Nv=n(X,"LI",{});var Gke=s(Nv);Hpe=n(Gke,"STRONG",{});var Z1t=s(Hpe);BQo=r(Z1t,"electra"),Z1t.forEach(t),IQo=r(Gke," \u2014 "),vX=n(Gke,"A",{href:!0});var e3t=s(vX);NQo=r(e3t,"ElectraForQuestionAnswering"),e3t.forEach(t),qQo=r(Gke," (ELECTRA model)"),Gke.forEach(t),jQo=i(X),qv=n(X,"LI",{});var Oke=s(qv);Upe=n(Oke,"STRONG",{});var o3t=s(Upe);DQo=r(o3t,"flaubert"),o3t.forEach(t),GQo=r(Oke," \u2014 "),FX=n(Oke,"A",{href:!0});var r3t=s(FX);OQo=r(r3t,"FlaubertForQuestionAnsweringSimple"),r3t.forEach(t),VQo=r(Oke," (FlauBERT model)"),Oke.forEach(t),XQo=i(X),jv=n(X,"LI",{});var Vke=s(jv);Jpe=n(Vke,"STRONG",{});var t3t=s(Jpe);zQo=r(t3t,"fnet"),t3t.forEach(t),WQo=r(Vke," \u2014 "),TX=n(Vke,"A",{href:!0});var a3t=s(TX);QQo=r(a3t,"FNetForQuestionAnswering"),a3t.forEach(t),HQo=r(Vke," (FNet model)"),Vke.forEach(t),UQo=i(X),Dv=n(X,"LI",{});var Xke=s(Dv);Ype=n(Xke,"STRONG",{});var n3t=s(Ype);JQo=r(n3t,"funnel"),n3t.forEach(t),YQo=r(Xke," \u2014 "),MX=n(Xke,"A",{href:!0});var s3t=s(MX);KQo=r(s3t,"FunnelForQuestionAnswering"),s3t.forEach(t),ZQo=r(Xke," (Funnel Transformer model)"),Xke.forEach(t),eHo=i(X),Gv=n(X,"LI",{});var zke=s(Gv);Kpe=n(zke,"STRONG",{});var l3t=s(Kpe);oHo=r(l3t,"gptj"),l3t.forEach(t),rHo=r(zke," \u2014 "),EX=n(zke,"A",{href:!0});var i3t=s(EX);tHo=r(i3t,"GPTJForQuestionAnswering"),i3t.forEach(t),aHo=r(zke," (GPT-J model)"),zke.forEach(t),nHo=i(X),Ov=n(X,"LI",{});var Wke=s(Ov);Zpe=n(Wke,"STRONG",{});var d3t=s(Zpe);sHo=r(d3t,"ibert"),d3t.forEach(t),lHo=r(Wke," \u2014 "),CX=n(Wke,"A",{href:!0});var c3t=s(CX);iHo=r(c3t,"IBertForQuestionAnswering"),c3t.forEach(t),dHo=r(Wke," (I-BERT model)"),Wke.forEach(t),cHo=i(X),Vv=n(X,"LI",{});var Qke=s(Vv);e_e=n(Qke,"STRONG",{});var f3t=s(e_e);fHo=r(f3t,"layoutlmv2"),f3t.forEach(t),mHo=r(Qke," \u2014 "),wX=n(Qke,"A",{href:!0});var m3t=s(wX);gHo=r(m3t,"LayoutLMv2ForQuestionAnswering"),m3t.forEach(t),hHo=r(Qke," (LayoutLMv2 model)"),Qke.forEach(t),pHo=i(X),Xv=n(X,"LI",{});var Hke=s(Xv);o_e=n(Hke,"STRONG",{});var g3t=s(o_e);_Ho=r(g3t,"layoutlmv3"),g3t.forEach(t),uHo=r(Hke," \u2014 "),AX=n(Hke,"A",{href:!0});var h3t=s(AX);bHo=r(h3t,"LayoutLMv3ForQuestionAnswering"),h3t.forEach(t),vHo=r(Hke," (LayoutLMv3 model)"),Hke.forEach(t),FHo=i(X),zv=n(X,"LI",{});var Uke=s(zv);r_e=n(Uke,"STRONG",{});var p3t=s(r_e);THo=r(p3t,"led"),p3t.forEach(t),MHo=r(Uke," \u2014 "),LX=n(Uke,"A",{href:!0});var _3t=s(LX);EHo=r(_3t,"LEDForQuestionAnswering"),_3t.forEach(t),CHo=r(Uke," (LED model)"),Uke.forEach(t),wHo=i(X),Wv=n(X,"LI",{});var Jke=s(Wv);t_e=n(Jke,"STRONG",{});var u3t=s(t_e);AHo=r(u3t,"longformer"),u3t.forEach(t),LHo=r(Jke," \u2014 "),yX=n(Jke,"A",{href:!0});var b3t=s(yX);yHo=r(b3t,"LongformerForQuestionAnswering"),b3t.forEach(t),xHo=r(Jke," (Longformer model)"),Jke.forEach(t),$Ho=i(X),Qv=n(X,"LI",{});var Yke=s(Qv);a_e=n(Yke,"STRONG",{});var v3t=s(a_e);kHo=r(v3t,"lxmert"),v3t.forEach(t),SHo=r(Yke," \u2014 "),xX=n(Yke,"A",{href:!0});var F3t=s(xX);RHo=r(F3t,"LxmertForQuestionAnswering"),F3t.forEach(t),PHo=r(Yke," (LXMERT model)"),Yke.forEach(t),BHo=i(X),Hv=n(X,"LI",{});var Kke=s(Hv);n_e=n(Kke,"STRONG",{});var T3t=s(n_e);IHo=r(T3t,"mbart"),T3t.forEach(t),NHo=r(Kke," \u2014 "),$X=n(Kke,"A",{href:!0});var M3t=s($X);qHo=r(M3t,"MBartForQuestionAnswering"),M3t.forEach(t),jHo=r(Kke," (mBART model)"),Kke.forEach(t),DHo=i(X),Uv=n(X,"LI",{});var Zke=s(Uv);s_e=n(Zke,"STRONG",{});var E3t=s(s_e);GHo=r(E3t,"megatron-bert"),E3t.forEach(t),OHo=r(Zke," \u2014 "),kX=n(Zke,"A",{href:!0});var C3t=s(kX);VHo=r(C3t,"MegatronBertForQuestionAnswering"),C3t.forEach(t),XHo=r(Zke," (Megatron-BERT model)"),Zke.forEach(t),zHo=i(X),Jv=n(X,"LI",{});var eSe=s(Jv);l_e=n(eSe,"STRONG",{});var w3t=s(l_e);WHo=r(w3t,"mobilebert"),w3t.forEach(t),QHo=r(eSe," \u2014 "),SX=n(eSe,"A",{href:!0});var A3t=s(SX);HHo=r(A3t,"MobileBertForQuestionAnswering"),A3t.forEach(t),UHo=r(eSe," (MobileBERT model)"),eSe.forEach(t),JHo=i(X),Yv=n(X,"LI",{});var oSe=s(Yv);i_e=n(oSe,"STRONG",{});var L3t=s(i_e);YHo=r(L3t,"mpnet"),L3t.forEach(t),KHo=r(oSe," \u2014 "),RX=n(oSe,"A",{href:!0});var y3t=s(RX);ZHo=r(y3t,"MPNetForQuestionAnswering"),y3t.forEach(t),eUo=r(oSe," (MPNet model)"),oSe.forEach(t),oUo=i(X),Kv=n(X,"LI",{});var rSe=s(Kv);d_e=n(rSe,"STRONG",{});var x3t=s(d_e);rUo=r(x3t,"nystromformer"),x3t.forEach(t),tUo=r(rSe," \u2014 "),PX=n(rSe,"A",{href:!0});var $3t=s(PX);aUo=r($3t,"NystromformerForQuestionAnswering"),$3t.forEach(t),nUo=r(rSe," (Nystr\xF6mformer model)"),rSe.forEach(t),sUo=i(X),Zv=n(X,"LI",{});var tSe=s(Zv);c_e=n(tSe,"STRONG",{});var k3t=s(c_e);lUo=r(k3t,"qdqbert"),k3t.forEach(t),iUo=r(tSe," \u2014 "),BX=n(tSe,"A",{href:!0});var S3t=s(BX);dUo=r(S3t,"QDQBertForQuestionAnswering"),S3t.forEach(t),cUo=r(tSe," (QDQBert model)"),tSe.forEach(t),fUo=i(X),eF=n(X,"LI",{});var aSe=s(eF);f_e=n(aSe,"STRONG",{});var R3t=s(f_e);mUo=r(R3t,"reformer"),R3t.forEach(t),gUo=r(aSe," \u2014 "),IX=n(aSe,"A",{href:!0});var P3t=s(IX);hUo=r(P3t,"ReformerForQuestionAnswering"),P3t.forEach(t),pUo=r(aSe," (Reformer model)"),aSe.forEach(t),_Uo=i(X),oF=n(X,"LI",{});var nSe=s(oF);m_e=n(nSe,"STRONG",{});var B3t=s(m_e);uUo=r(B3t,"rembert"),B3t.forEach(t),bUo=r(nSe," \u2014 "),NX=n(nSe,"A",{href:!0});var I3t=s(NX);vUo=r(I3t,"RemBertForQuestionAnswering"),I3t.forEach(t),FUo=r(nSe," (RemBERT model)"),nSe.forEach(t),TUo=i(X),rF=n(X,"LI",{});var sSe=s(rF);g_e=n(sSe,"STRONG",{});var N3t=s(g_e);MUo=r(N3t,"roberta"),N3t.forEach(t),EUo=r(sSe," \u2014 "),qX=n(sSe,"A",{href:!0});var q3t=s(qX);CUo=r(q3t,"RobertaForQuestionAnswering"),q3t.forEach(t),wUo=r(sSe," (RoBERTa model)"),sSe.forEach(t),AUo=i(X),tF=n(X,"LI",{});var lSe=s(tF);h_e=n(lSe,"STRONG",{});var j3t=s(h_e);LUo=r(j3t,"roformer"),j3t.forEach(t),yUo=r(lSe," \u2014 "),jX=n(lSe,"A",{href:!0});var D3t=s(jX);xUo=r(D3t,"RoFormerForQuestionAnswering"),D3t.forEach(t),$Uo=r(lSe," (RoFormer model)"),lSe.forEach(t),kUo=i(X),aF=n(X,"LI",{});var iSe=s(aF);p_e=n(iSe,"STRONG",{});var G3t=s(p_e);SUo=r(G3t,"splinter"),G3t.forEach(t),RUo=r(iSe," \u2014 "),DX=n(iSe,"A",{href:!0});var O3t=s(DX);PUo=r(O3t,"SplinterForQuestionAnswering"),O3t.forEach(t),BUo=r(iSe," (Splinter model)"),iSe.forEach(t),IUo=i(X),nF=n(X,"LI",{});var dSe=s(nF);__e=n(dSe,"STRONG",{});var V3t=s(__e);NUo=r(V3t,"squeezebert"),V3t.forEach(t),qUo=r(dSe," \u2014 "),GX=n(dSe,"A",{href:!0});var X3t=s(GX);jUo=r(X3t,"SqueezeBertForQuestionAnswering"),X3t.forEach(t),DUo=r(dSe," (SqueezeBERT model)"),dSe.forEach(t),GUo=i(X),sF=n(X,"LI",{});var cSe=s(sF);u_e=n(cSe,"STRONG",{});var z3t=s(u_e);OUo=r(z3t,"xlm"),z3t.forEach(t),VUo=r(cSe," \u2014 "),OX=n(cSe,"A",{href:!0});var W3t=s(OX);XUo=r(W3t,"XLMForQuestionAnsweringSimple"),W3t.forEach(t),zUo=r(cSe," (XLM model)"),cSe.forEach(t),WUo=i(X),lF=n(X,"LI",{});var fSe=s(lF);b_e=n(fSe,"STRONG",{});var Q3t=s(b_e);QUo=r(Q3t,"xlm-roberta"),Q3t.forEach(t),HUo=r(fSe," \u2014 "),VX=n(fSe,"A",{href:!0});var H3t=s(VX);UUo=r(H3t,"XLMRobertaForQuestionAnswering"),H3t.forEach(t),JUo=r(fSe," (XLM-RoBERTa model)"),fSe.forEach(t),YUo=i(X),iF=n(X,"LI",{});var mSe=s(iF);v_e=n(mSe,"STRONG",{});var U3t=s(v_e);KUo=r(U3t,"xlm-roberta-xl"),U3t.forEach(t),ZUo=r(mSe," \u2014 "),XX=n(mSe,"A",{href:!0});var J3t=s(XX);eJo=r(J3t,"XLMRobertaXLForQuestionAnswering"),J3t.forEach(t),oJo=r(mSe," (XLM-RoBERTa-XL model)"),mSe.forEach(t),rJo=i(X),dF=n(X,"LI",{});var gSe=s(dF);F_e=n(gSe,"STRONG",{});var Y3t=s(F_e);tJo=r(Y3t,"xlnet"),Y3t.forEach(t),aJo=r(gSe," \u2014 "),zX=n(gSe,"A",{href:!0});var K3t=s(zX);nJo=r(K3t,"XLNetForQuestionAnsweringSimple"),K3t.forEach(t),sJo=r(gSe," (XLNet model)"),gSe.forEach(t),lJo=i(X),cF=n(X,"LI",{});var hSe=s(cF);T_e=n(hSe,"STRONG",{});var Z3t=s(T_e);iJo=r(Z3t,"yoso"),Z3t.forEach(t),dJo=r(hSe," \u2014 "),WX=n(hSe,"A",{href:!0});var ebt=s(WX);cJo=r(ebt,"YosoForQuestionAnswering"),ebt.forEach(t),fJo=r(hSe," (YOSO model)"),hSe.forEach(t),X.forEach(t),mJo=i(ca),fF=n(ca,"P",{});var pSe=s(fF);gJo=r(pSe,"The model is set in evaluation mode by default using "),M_e=n(pSe,"CODE",{});var obt=s(M_e);hJo=r(obt,"model.eval()"),obt.forEach(t),pJo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(pSe,"CODE",{});var rbt=s(E_e);_Jo=r(rbt,"model.train()"),rbt.forEach(t),pSe.forEach(t),uJo=i(ca),T(mF.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),Yje=i(f),td=n(f,"H2",{class:!0});var oOe=s(td);gF=n(oOe,"A",{id:!0,class:!0,href:!0});var tbt=s(gF);C_e=n(tbt,"SPAN",{});var abt=s(C_e);T(gy.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),bJo=i(oOe),w_e=n(oOe,"SPAN",{});var nbt=s(w_e);vJo=r(nbt,"AutoModelForTableQuestionAnswering"),nbt.forEach(t),oOe.forEach(t),Kje=i(f),qo=n(f,"DIV",{class:!0});var el=s(qo);T(hy.$$.fragment,el),FJo=i(el),ad=n(el,"P",{});var Tee=s(ad);TJo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QX=n(Tee,"A",{href:!0});var sbt=s(QX);MJo=r(sbt,"from_pretrained()"),sbt.forEach(t),EJo=r(Tee," class method or the "),HX=n(Tee,"A",{href:!0});var lbt=s(HX);CJo=r(lbt,"from_config()"),lbt.forEach(t),wJo=r(Tee,` class
method.`),Tee.forEach(t),AJo=i(el),py=n(el,"P",{});var rOe=s(py);LJo=r(rOe,"This class cannot be instantiated directly using "),A_e=n(rOe,"CODE",{});var ibt=s(A_e);yJo=r(ibt,"__init__()"),ibt.forEach(t),xJo=r(rOe," (throws an error)."),rOe.forEach(t),$Jo=i(el),gt=n(el,"DIV",{class:!0});var pA=s(gt);T(_y.$$.fragment,pA),kJo=i(pA),L_e=n(pA,"P",{});var dbt=s(L_e);SJo=r(dbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dbt.forEach(t),RJo=i(pA),nd=n(pA,"P",{});var Mee=s(nd);PJo=r(Mee,`Note:
Loading a model from its configuration file does `),y_e=n(Mee,"STRONG",{});var cbt=s(y_e);BJo=r(cbt,"not"),cbt.forEach(t),IJo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(Mee,"A",{href:!0});var fbt=s(UX);NJo=r(fbt,"from_pretrained()"),fbt.forEach(t),qJo=r(Mee," to load the model weights."),Mee.forEach(t),jJo=i(pA),T(hF.$$.fragment,pA),pA.forEach(t),DJo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(uy.$$.fragment,fa),GJo=i(fa),x_e=n(fa,"P",{});var mbt=s(x_e);OJo=r(mbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mbt.forEach(t),VJo=i(fa),qa=n(fa,"P",{});var _A=s(qa);XJo=r(_A,"The model class to instantiate is selected based on the "),$_e=n(_A,"CODE",{});var gbt=s($_e);zJo=r(gbt,"model_type"),gbt.forEach(t),WJo=r(_A,` property of the config object (either
passed as an argument or loaded from `),k_e=n(_A,"CODE",{});var hbt=s(k_e);QJo=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),HJo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(_A,"CODE",{});var pbt=s(S_e);UJo=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),JJo=r(_A,":"),_A.forEach(t),YJo=i(fa),R_e=n(fa,"UL",{});var _bt=s(R_e);pF=n(_bt,"LI",{});var _Se=s(pF);P_e=n(_Se,"STRONG",{});var ubt=s(P_e);KJo=r(ubt,"tapas"),ubt.forEach(t),ZJo=r(_Se," \u2014 "),JX=n(_Se,"A",{href:!0});var bbt=s(JX);eYo=r(bbt,"TapasForQuestionAnswering"),bbt.forEach(t),oYo=r(_Se," (TAPAS model)"),_Se.forEach(t),_bt.forEach(t),rYo=i(fa),_F=n(fa,"P",{});var uSe=s(_F);tYo=r(uSe,"The model is set in evaluation mode by default using "),B_e=n(uSe,"CODE",{});var vbt=s(B_e);aYo=r(vbt,"model.eval()"),vbt.forEach(t),nYo=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(uSe,"CODE",{});var Fbt=s(I_e);sYo=r(Fbt,"model.train()"),Fbt.forEach(t),uSe.forEach(t),lYo=i(fa),T(uF.$$.fragment,fa),fa.forEach(t),el.forEach(t),Zje=i(f),sd=n(f,"H2",{class:!0});var tOe=s(sd);bF=n(tOe,"A",{id:!0,class:!0,href:!0});var Tbt=s(bF);N_e=n(Tbt,"SPAN",{});var Mbt=s(N_e);T(by.$$.fragment,Mbt),Mbt.forEach(t),Tbt.forEach(t),iYo=i(tOe),q_e=n(tOe,"SPAN",{});var Ebt=s(q_e);dYo=r(Ebt,"AutoModelForImageClassification"),Ebt.forEach(t),tOe.forEach(t),eDe=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(vy.$$.fragment,ol),cYo=i(ol),ld=n(ol,"P",{});var Eee=s(ld);fYo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YX=n(Eee,"A",{href:!0});var Cbt=s(YX);mYo=r(Cbt,"from_pretrained()"),Cbt.forEach(t),gYo=r(Eee," class method or the "),KX=n(Eee,"A",{href:!0});var wbt=s(KX);hYo=r(wbt,"from_config()"),wbt.forEach(t),pYo=r(Eee,` class
method.`),Eee.forEach(t),_Yo=i(ol),Fy=n(ol,"P",{});var aOe=s(Fy);uYo=r(aOe,"This class cannot be instantiated directly using "),j_e=n(aOe,"CODE",{});var Abt=s(j_e);bYo=r(Abt,"__init__()"),Abt.forEach(t),vYo=r(aOe," (throws an error)."),aOe.forEach(t),FYo=i(ol),ht=n(ol,"DIV",{class:!0});var uA=s(ht);T(Ty.$$.fragment,uA),TYo=i(uA),D_e=n(uA,"P",{});var Lbt=s(D_e);MYo=r(Lbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lbt.forEach(t),EYo=i(uA),id=n(uA,"P",{});var Cee=s(id);CYo=r(Cee,`Note:
Loading a model from its configuration file does `),G_e=n(Cee,"STRONG",{});var ybt=s(G_e);wYo=r(ybt,"not"),ybt.forEach(t),AYo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Cee,"A",{href:!0});var xbt=s(ZX);LYo=r(xbt,"from_pretrained()"),xbt.forEach(t),yYo=r(Cee," to load the model weights."),Cee.forEach(t),xYo=i(uA),T(vF.$$.fragment,uA),uA.forEach(t),$Yo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(My.$$.fragment,ma),kYo=i(ma),O_e=n(ma,"P",{});var $bt=s(O_e);SYo=r($bt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$bt.forEach(t),RYo=i(ma),ja=n(ma,"P",{});var bA=s(ja);PYo=r(bA,"The model class to instantiate is selected based on the "),V_e=n(bA,"CODE",{});var kbt=s(V_e);BYo=r(kbt,"model_type"),kbt.forEach(t),IYo=r(bA,` property of the config object (either
passed as an argument or loaded from `),X_e=n(bA,"CODE",{});var Sbt=s(X_e);NYo=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),qYo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(bA,"CODE",{});var Rbt=s(z_e);jYo=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),DYo=r(bA,":"),bA.forEach(t),GYo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);FF=n(Te,"LI",{});var bSe=s(FF);W_e=n(bSe,"STRONG",{});var Pbt=s(W_e);OYo=r(Pbt,"beit"),Pbt.forEach(t),VYo=r(bSe," \u2014 "),ez=n(bSe,"A",{href:!0});var Bbt=s(ez);XYo=r(Bbt,"BeitForImageClassification"),Bbt.forEach(t),zYo=r(bSe," (BEiT model)"),bSe.forEach(t),WYo=i(Te),TF=n(Te,"LI",{});var vSe=s(TF);Q_e=n(vSe,"STRONG",{});var Ibt=s(Q_e);QYo=r(Ibt,"convnext"),Ibt.forEach(t),HYo=r(vSe," \u2014 "),oz=n(vSe,"A",{href:!0});var Nbt=s(oz);UYo=r(Nbt,"ConvNextForImageClassification"),Nbt.forEach(t),JYo=r(vSe," (ConvNeXT model)"),vSe.forEach(t),YYo=i(Te),MF=n(Te,"LI",{});var FSe=s(MF);H_e=n(FSe,"STRONG",{});var qbt=s(H_e);KYo=r(qbt,"cvt"),qbt.forEach(t),ZYo=r(FSe," \u2014 "),rz=n(FSe,"A",{href:!0});var jbt=s(rz);eKo=r(jbt,"CvtForImageClassification"),jbt.forEach(t),oKo=r(FSe," (CvT model)"),FSe.forEach(t),rKo=i(Te),EF=n(Te,"LI",{});var TSe=s(EF);U_e=n(TSe,"STRONG",{});var Dbt=s(U_e);tKo=r(Dbt,"data2vec-vision"),Dbt.forEach(t),aKo=r(TSe," \u2014 "),tz=n(TSe,"A",{href:!0});var Gbt=s(tz);nKo=r(Gbt,"Data2VecVisionForImageClassification"),Gbt.forEach(t),sKo=r(TSe," (Data2VecVision model)"),TSe.forEach(t),lKo=i(Te),Is=n(Te,"LI",{});var ik=s(Is);J_e=n(ik,"STRONG",{});var Obt=s(J_e);iKo=r(Obt,"deit"),Obt.forEach(t),dKo=r(ik," \u2014 "),az=n(ik,"A",{href:!0});var Vbt=s(az);cKo=r(Vbt,"DeiTForImageClassification"),Vbt.forEach(t),fKo=r(ik," or "),nz=n(ik,"A",{href:!0});var Xbt=s(nz);mKo=r(Xbt,"DeiTForImageClassificationWithTeacher"),Xbt.forEach(t),gKo=r(ik," (DeiT model)"),ik.forEach(t),hKo=i(Te),CF=n(Te,"LI",{});var MSe=s(CF);Y_e=n(MSe,"STRONG",{});var zbt=s(Y_e);pKo=r(zbt,"imagegpt"),zbt.forEach(t),_Ko=r(MSe," \u2014 "),sz=n(MSe,"A",{href:!0});var Wbt=s(sz);uKo=r(Wbt,"ImageGPTForImageClassification"),Wbt.forEach(t),bKo=r(MSe," (ImageGPT model)"),MSe.forEach(t),vKo=i(Te),Ns=n(Te,"LI",{});var dk=s(Ns);K_e=n(dk,"STRONG",{});var Qbt=s(K_e);FKo=r(Qbt,"levit"),Qbt.forEach(t),TKo=r(dk," \u2014 "),lz=n(dk,"A",{href:!0});var Hbt=s(lz);MKo=r(Hbt,"LevitForImageClassification"),Hbt.forEach(t),EKo=r(dk," or "),iz=n(dk,"A",{href:!0});var Ubt=s(iz);CKo=r(Ubt,"LevitForImageClassificationWithTeacher"),Ubt.forEach(t),wKo=r(dk," (LeViT model)"),dk.forEach(t),AKo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);Z_e=n(_f,"STRONG",{});var Jbt=s(Z_e);LKo=r(Jbt,"perceiver"),Jbt.forEach(t),yKo=r(_f," \u2014 "),dz=n(_f,"A",{href:!0});var Ybt=s(dz);xKo=r(Ybt,"PerceiverForImageClassificationLearned"),Ybt.forEach(t),$Ko=r(_f," or "),cz=n(_f,"A",{href:!0});var Kbt=s(cz);kKo=r(Kbt,"PerceiverForImageClassificationFourier"),Kbt.forEach(t),SKo=r(_f," or "),fz=n(_f,"A",{href:!0});var Zbt=s(fz);RKo=r(Zbt,"PerceiverForImageClassificationConvProcessing"),Zbt.forEach(t),PKo=r(_f," (Perceiver model)"),_f.forEach(t),BKo=i(Te),wF=n(Te,"LI",{});var ESe=s(wF);eue=n(ESe,"STRONG",{});var e2t=s(eue);IKo=r(e2t,"poolformer"),e2t.forEach(t),NKo=r(ESe," \u2014 "),mz=n(ESe,"A",{href:!0});var o2t=s(mz);qKo=r(o2t,"PoolFormerForImageClassification"),o2t.forEach(t),jKo=r(ESe," (PoolFormer model)"),ESe.forEach(t),DKo=i(Te),AF=n(Te,"LI",{});var CSe=s(AF);oue=n(CSe,"STRONG",{});var r2t=s(oue);GKo=r(r2t,"regnet"),r2t.forEach(t),OKo=r(CSe," \u2014 "),gz=n(CSe,"A",{href:!0});var t2t=s(gz);VKo=r(t2t,"RegNetForImageClassification"),t2t.forEach(t),XKo=r(CSe," (RegNet model)"),CSe.forEach(t),zKo=i(Te),LF=n(Te,"LI",{});var wSe=s(LF);rue=n(wSe,"STRONG",{});var a2t=s(rue);WKo=r(a2t,"resnet"),a2t.forEach(t),QKo=r(wSe," \u2014 "),hz=n(wSe,"A",{href:!0});var n2t=s(hz);HKo=r(n2t,"ResNetForImageClassification"),n2t.forEach(t),UKo=r(wSe," (ResNet model)"),wSe.forEach(t),JKo=i(Te),yF=n(Te,"LI",{});var ASe=s(yF);tue=n(ASe,"STRONG",{});var s2t=s(tue);YKo=r(s2t,"segformer"),s2t.forEach(t),KKo=r(ASe," \u2014 "),pz=n(ASe,"A",{href:!0});var l2t=s(pz);ZKo=r(l2t,"SegformerForImageClassification"),l2t.forEach(t),eZo=r(ASe," (SegFormer model)"),ASe.forEach(t),oZo=i(Te),xF=n(Te,"LI",{});var LSe=s(xF);aue=n(LSe,"STRONG",{});var i2t=s(aue);rZo=r(i2t,"swin"),i2t.forEach(t),tZo=r(LSe," \u2014 "),_z=n(LSe,"A",{href:!0});var d2t=s(_z);aZo=r(d2t,"SwinForImageClassification"),d2t.forEach(t),nZo=r(LSe," (Swin Transformer model)"),LSe.forEach(t),sZo=i(Te),$F=n(Te,"LI",{});var ySe=s($F);nue=n(ySe,"STRONG",{});var c2t=s(nue);lZo=r(c2t,"van"),c2t.forEach(t),iZo=r(ySe," \u2014 "),uz=n(ySe,"A",{href:!0});var f2t=s(uz);dZo=r(f2t,"VanForImageClassification"),f2t.forEach(t),cZo=r(ySe," (VAN model)"),ySe.forEach(t),fZo=i(Te),kF=n(Te,"LI",{});var xSe=s(kF);sue=n(xSe,"STRONG",{});var m2t=s(sue);mZo=r(m2t,"vit"),m2t.forEach(t),gZo=r(xSe," \u2014 "),bz=n(xSe,"A",{href:!0});var g2t=s(bz);hZo=r(g2t,"ViTForImageClassification"),g2t.forEach(t),pZo=r(xSe," (ViT model)"),xSe.forEach(t),Te.forEach(t),_Zo=i(ma),SF=n(ma,"P",{});var $Se=s(SF);uZo=r($Se,"The model is set in evaluation mode by default using "),lue=n($Se,"CODE",{});var h2t=s(lue);bZo=r(h2t,"model.eval()"),h2t.forEach(t),vZo=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n($Se,"CODE",{});var p2t=s(iue);FZo=r(p2t,"model.train()"),p2t.forEach(t),$Se.forEach(t),TZo=i(ma),T(RF.$$.fragment,ma),ma.forEach(t),ol.forEach(t),oDe=i(f),dd=n(f,"H2",{class:!0});var nOe=s(dd);PF=n(nOe,"A",{id:!0,class:!0,href:!0});var _2t=s(PF);due=n(_2t,"SPAN",{});var u2t=s(due);T(Ey.$$.fragment,u2t),u2t.forEach(t),_2t.forEach(t),MZo=i(nOe),cue=n(nOe,"SPAN",{});var b2t=s(cue);EZo=r(b2t,"AutoModelForVision2Seq"),b2t.forEach(t),nOe.forEach(t),rDe=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T(Cy.$$.fragment,rl),CZo=i(rl),cd=n(rl,"P",{});var wee=s(cd);wZo=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vz=n(wee,"A",{href:!0});var v2t=s(vz);AZo=r(v2t,"from_pretrained()"),v2t.forEach(t),LZo=r(wee," class method or the "),Fz=n(wee,"A",{href:!0});var F2t=s(Fz);yZo=r(F2t,"from_config()"),F2t.forEach(t),xZo=r(wee,` class
method.`),wee.forEach(t),$Zo=i(rl),wy=n(rl,"P",{});var sOe=s(wy);kZo=r(sOe,"This class cannot be instantiated directly using "),fue=n(sOe,"CODE",{});var T2t=s(fue);SZo=r(T2t,"__init__()"),T2t.forEach(t),RZo=r(sOe," (throws an error)."),sOe.forEach(t),PZo=i(rl),_t=n(rl,"DIV",{class:!0});var vA=s(_t);T(Ay.$$.fragment,vA),BZo=i(vA),mue=n(vA,"P",{});var M2t=s(mue);IZo=r(M2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M2t.forEach(t),NZo=i(vA),fd=n(vA,"P",{});var Aee=s(fd);qZo=r(Aee,`Note:
Loading a model from its configuration file does `),gue=n(Aee,"STRONG",{});var E2t=s(gue);jZo=r(E2t,"not"),E2t.forEach(t),DZo=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(Aee,"A",{href:!0});var C2t=s(Tz);GZo=r(C2t,"from_pretrained()"),C2t.forEach(t),OZo=r(Aee," to load the model weights."),Aee.forEach(t),VZo=i(vA),T(BF.$$.fragment,vA),vA.forEach(t),XZo=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(Ly.$$.fragment,ga),zZo=i(ga),hue=n(ga,"P",{});var w2t=s(hue);WZo=r(w2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),w2t.forEach(t),QZo=i(ga),Da=n(ga,"P",{});var FA=s(Da);HZo=r(FA,"The model class to instantiate is selected based on the "),pue=n(FA,"CODE",{});var A2t=s(pue);UZo=r(A2t,"model_type"),A2t.forEach(t),JZo=r(FA,` property of the config object (either
passed as an argument or loaded from `),_ue=n(FA,"CODE",{});var L2t=s(_ue);YZo=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),KZo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(FA,"CODE",{});var y2t=s(uue);ZZo=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),eer=r(FA,":"),FA.forEach(t),oer=i(ga),bue=n(ga,"UL",{});var x2t=s(bue);IF=n(x2t,"LI",{});var kSe=s(IF);vue=n(kSe,"STRONG",{});var $2t=s(vue);rer=r($2t,"vision-encoder-decoder"),$2t.forEach(t),ter=r(kSe," \u2014 "),Mz=n(kSe,"A",{href:!0});var k2t=s(Mz);aer=r(k2t,"VisionEncoderDecoderModel"),k2t.forEach(t),ner=r(kSe," (Vision Encoder decoder model)"),kSe.forEach(t),x2t.forEach(t),ser=i(ga),NF=n(ga,"P",{});var SSe=s(NF);ler=r(SSe,"The model is set in evaluation mode by default using "),Fue=n(SSe,"CODE",{});var S2t=s(Fue);ier=r(S2t,"model.eval()"),S2t.forEach(t),der=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n(SSe,"CODE",{});var R2t=s(Tue);cer=r(R2t,"model.train()"),R2t.forEach(t),SSe.forEach(t),fer=i(ga),T(qF.$$.fragment,ga),ga.forEach(t),rl.forEach(t),tDe=i(f),md=n(f,"H2",{class:!0});var lOe=s(md);jF=n(lOe,"A",{id:!0,class:!0,href:!0});var P2t=s(jF);Mue=n(P2t,"SPAN",{});var B2t=s(Mue);T(yy.$$.fragment,B2t),B2t.forEach(t),P2t.forEach(t),mer=i(lOe),Eue=n(lOe,"SPAN",{});var I2t=s(Eue);ger=r(I2t,"AutoModelForAudioClassification"),I2t.forEach(t),lOe.forEach(t),aDe=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(xy.$$.fragment,tl),her=i(tl),gd=n(tl,"P",{});var Lee=s(gd);per=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ez=n(Lee,"A",{href:!0});var N2t=s(Ez);_er=r(N2t,"from_pretrained()"),N2t.forEach(t),uer=r(Lee," class method or the "),Cz=n(Lee,"A",{href:!0});var q2t=s(Cz);ber=r(q2t,"from_config()"),q2t.forEach(t),ver=r(Lee,` class
method.`),Lee.forEach(t),Fer=i(tl),$y=n(tl,"P",{});var iOe=s($y);Ter=r(iOe,"This class cannot be instantiated directly using "),Cue=n(iOe,"CODE",{});var j2t=s(Cue);Mer=r(j2t,"__init__()"),j2t.forEach(t),Eer=r(iOe," (throws an error)."),iOe.forEach(t),Cer=i(tl),ut=n(tl,"DIV",{class:!0});var TA=s(ut);T(ky.$$.fragment,TA),wer=i(TA),wue=n(TA,"P",{});var D2t=s(wue);Aer=r(D2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),D2t.forEach(t),Ler=i(TA),hd=n(TA,"P",{});var yee=s(hd);yer=r(yee,`Note:
Loading a model from its configuration file does `),Aue=n(yee,"STRONG",{});var G2t=s(Aue);xer=r(G2t,"not"),G2t.forEach(t),$er=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(yee,"A",{href:!0});var O2t=s(wz);ker=r(O2t,"from_pretrained()"),O2t.forEach(t),Ser=r(yee," to load the model weights."),yee.forEach(t),Rer=i(TA),T(DF.$$.fragment,TA),TA.forEach(t),Per=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(Sy.$$.fragment,ha),Ber=i(ha),Lue=n(ha,"P",{});var V2t=s(Lue);Ier=r(V2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),V2t.forEach(t),Ner=i(ha),Ga=n(ha,"P",{});var MA=s(Ga);qer=r(MA,"The model class to instantiate is selected based on the "),yue=n(MA,"CODE",{});var X2t=s(yue);jer=r(X2t,"model_type"),X2t.forEach(t),Der=r(MA,` property of the config object (either
passed as an argument or loaded from `),xue=n(MA,"CODE",{});var z2t=s(xue);Ger=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),Oer=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(MA,"CODE",{});var W2t=s($ue);Ver=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),Xer=r(MA,":"),MA.forEach(t),zer=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);GF=n(Xe,"LI",{});var RSe=s(GF);kue=n(RSe,"STRONG",{});var Q2t=s(kue);Wer=r(Q2t,"data2vec-audio"),Q2t.forEach(t),Qer=r(RSe," \u2014 "),Az=n(RSe,"A",{href:!0});var H2t=s(Az);Her=r(H2t,"Data2VecAudioForSequenceClassification"),H2t.forEach(t),Uer=r(RSe," (Data2VecAudio model)"),RSe.forEach(t),Jer=i(Xe),OF=n(Xe,"LI",{});var PSe=s(OF);Sue=n(PSe,"STRONG",{});var U2t=s(Sue);Yer=r(U2t,"hubert"),U2t.forEach(t),Ker=r(PSe," \u2014 "),Lz=n(PSe,"A",{href:!0});var J2t=s(Lz);Zer=r(J2t,"HubertForSequenceClassification"),J2t.forEach(t),eor=r(PSe," (Hubert model)"),PSe.forEach(t),oor=i(Xe),VF=n(Xe,"LI",{});var BSe=s(VF);Rue=n(BSe,"STRONG",{});var Y2t=s(Rue);ror=r(Y2t,"sew"),Y2t.forEach(t),tor=r(BSe," \u2014 "),yz=n(BSe,"A",{href:!0});var K2t=s(yz);aor=r(K2t,"SEWForSequenceClassification"),K2t.forEach(t),nor=r(BSe," (SEW model)"),BSe.forEach(t),sor=i(Xe),XF=n(Xe,"LI",{});var ISe=s(XF);Pue=n(ISe,"STRONG",{});var Z2t=s(Pue);lor=r(Z2t,"sew-d"),Z2t.forEach(t),ior=r(ISe," \u2014 "),xz=n(ISe,"A",{href:!0});var evt=s(xz);dor=r(evt,"SEWDForSequenceClassification"),evt.forEach(t),cor=r(ISe," (SEW-D model)"),ISe.forEach(t),mor=i(Xe),zF=n(Xe,"LI",{});var NSe=s(zF);Bue=n(NSe,"STRONG",{});var ovt=s(Bue);gor=r(ovt,"unispeech"),ovt.forEach(t),hor=r(NSe," \u2014 "),$z=n(NSe,"A",{href:!0});var rvt=s($z);por=r(rvt,"UniSpeechForSequenceClassification"),rvt.forEach(t),_or=r(NSe," (UniSpeech model)"),NSe.forEach(t),uor=i(Xe),WF=n(Xe,"LI",{});var qSe=s(WF);Iue=n(qSe,"STRONG",{});var tvt=s(Iue);bor=r(tvt,"unispeech-sat"),tvt.forEach(t),vor=r(qSe," \u2014 "),kz=n(qSe,"A",{href:!0});var avt=s(kz);For=r(avt,"UniSpeechSatForSequenceClassification"),avt.forEach(t),Tor=r(qSe," (UniSpeechSat model)"),qSe.forEach(t),Mor=i(Xe),QF=n(Xe,"LI",{});var jSe=s(QF);Nue=n(jSe,"STRONG",{});var nvt=s(Nue);Eor=r(nvt,"wav2vec2"),nvt.forEach(t),Cor=r(jSe," \u2014 "),Sz=n(jSe,"A",{href:!0});var svt=s(Sz);wor=r(svt,"Wav2Vec2ForSequenceClassification"),svt.forEach(t),Aor=r(jSe," (Wav2Vec2 model)"),jSe.forEach(t),Lor=i(Xe),HF=n(Xe,"LI",{});var DSe=s(HF);que=n(DSe,"STRONG",{});var lvt=s(que);yor=r(lvt,"wav2vec2-conformer"),lvt.forEach(t),xor=r(DSe," \u2014 "),Rz=n(DSe,"A",{href:!0});var ivt=s(Rz);$or=r(ivt,"Wav2Vec2ConformerForSequenceClassification"),ivt.forEach(t),kor=r(DSe," (Wav2Vec2-Conformer model)"),DSe.forEach(t),Sor=i(Xe),UF=n(Xe,"LI",{});var GSe=s(UF);jue=n(GSe,"STRONG",{});var dvt=s(jue);Ror=r(dvt,"wavlm"),dvt.forEach(t),Por=r(GSe," \u2014 "),Pz=n(GSe,"A",{href:!0});var cvt=s(Pz);Bor=r(cvt,"WavLMForSequenceClassification"),cvt.forEach(t),Ior=r(GSe," (WavLM model)"),GSe.forEach(t),Xe.forEach(t),Nor=i(ha),JF=n(ha,"P",{});var OSe=s(JF);qor=r(OSe,"The model is set in evaluation mode by default using "),Due=n(OSe,"CODE",{});var fvt=s(Due);jor=r(fvt,"model.eval()"),fvt.forEach(t),Dor=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(OSe,"CODE",{});var mvt=s(Gue);Gor=r(mvt,"model.train()"),mvt.forEach(t),OSe.forEach(t),Oor=i(ha),T(YF.$$.fragment,ha),ha.forEach(t),tl.forEach(t),nDe=i(f),pd=n(f,"H2",{class:!0});var dOe=s(pd);KF=n(dOe,"A",{id:!0,class:!0,href:!0});var gvt=s(KF);Oue=n(gvt,"SPAN",{});var hvt=s(Oue);T(Ry.$$.fragment,hvt),hvt.forEach(t),gvt.forEach(t),Vor=i(dOe),Vue=n(dOe,"SPAN",{});var pvt=s(Vue);Xor=r(pvt,"AutoModelForAudioFrameClassification"),pvt.forEach(t),dOe.forEach(t),sDe=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T(Py.$$.fragment,al),zor=i(al),_d=n(al,"P",{});var xee=s(_d);Wor=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Bz=n(xee,"A",{href:!0});var _vt=s(Bz);Qor=r(_vt,"from_pretrained()"),_vt.forEach(t),Hor=r(xee," class method or the "),Iz=n(xee,"A",{href:!0});var uvt=s(Iz);Uor=r(uvt,"from_config()"),uvt.forEach(t),Jor=r(xee,` class
method.`),xee.forEach(t),Yor=i(al),By=n(al,"P",{});var cOe=s(By);Kor=r(cOe,"This class cannot be instantiated directly using "),Xue=n(cOe,"CODE",{});var bvt=s(Xue);Zor=r(bvt,"__init__()"),bvt.forEach(t),err=r(cOe," (throws an error)."),cOe.forEach(t),orr=i(al),bt=n(al,"DIV",{class:!0});var EA=s(bt);T(Iy.$$.fragment,EA),rrr=i(EA),zue=n(EA,"P",{});var vvt=s(zue);trr=r(vvt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vvt.forEach(t),arr=i(EA),ud=n(EA,"P",{});var $ee=s(ud);nrr=r($ee,`Note:
Loading a model from its configuration file does `),Wue=n($ee,"STRONG",{});var Fvt=s(Wue);srr=r(Fvt,"not"),Fvt.forEach(t),lrr=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n($ee,"A",{href:!0});var Tvt=s(Nz);irr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),drr=r($ee," to load the model weights."),$ee.forEach(t),crr=i(EA),T(ZF.$$.fragment,EA),EA.forEach(t),frr=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(Ny.$$.fragment,pa),mrr=i(pa),Que=n(pa,"P",{});var Mvt=s(Que);grr=r(Mvt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Mvt.forEach(t),hrr=i(pa),Oa=n(pa,"P",{});var CA=s(Oa);prr=r(CA,"The model class to instantiate is selected based on the "),Hue=n(CA,"CODE",{});var Evt=s(Hue);_rr=r(Evt,"model_type"),Evt.forEach(t),urr=r(CA,` property of the config object (either
passed as an argument or loaded from `),Uue=n(CA,"CODE",{});var Cvt=s(Uue);brr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),vrr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(CA,"CODE",{});var wvt=s(Jue);Frr=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),Trr=r(CA,":"),CA.forEach(t),Mrr=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);eT=n(nl,"LI",{});var VSe=s(eT);Yue=n(VSe,"STRONG",{});var Avt=s(Yue);Err=r(Avt,"data2vec-audio"),Avt.forEach(t),Crr=r(VSe," \u2014 "),qz=n(VSe,"A",{href:!0});var Lvt=s(qz);wrr=r(Lvt,"Data2VecAudioForAudioFrameClassification"),Lvt.forEach(t),Arr=r(VSe," (Data2VecAudio model)"),VSe.forEach(t),Lrr=i(nl),oT=n(nl,"LI",{});var XSe=s(oT);Kue=n(XSe,"STRONG",{});var yvt=s(Kue);yrr=r(yvt,"unispeech-sat"),yvt.forEach(t),xrr=r(XSe," \u2014 "),jz=n(XSe,"A",{href:!0});var xvt=s(jz);$rr=r(xvt,"UniSpeechSatForAudioFrameClassification"),xvt.forEach(t),krr=r(XSe," (UniSpeechSat model)"),XSe.forEach(t),Srr=i(nl),rT=n(nl,"LI",{});var zSe=s(rT);Zue=n(zSe,"STRONG",{});var $vt=s(Zue);Rrr=r($vt,"wav2vec2"),$vt.forEach(t),Prr=r(zSe," \u2014 "),Dz=n(zSe,"A",{href:!0});var kvt=s(Dz);Brr=r(kvt,"Wav2Vec2ForAudioFrameClassification"),kvt.forEach(t),Irr=r(zSe," (Wav2Vec2 model)"),zSe.forEach(t),Nrr=i(nl),tT=n(nl,"LI",{});var WSe=s(tT);e1e=n(WSe,"STRONG",{});var Svt=s(e1e);qrr=r(Svt,"wav2vec2-conformer"),Svt.forEach(t),jrr=r(WSe," \u2014 "),Gz=n(WSe,"A",{href:!0});var Rvt=s(Gz);Drr=r(Rvt,"Wav2Vec2ConformerForAudioFrameClassification"),Rvt.forEach(t),Grr=r(WSe," (Wav2Vec2-Conformer model)"),WSe.forEach(t),Orr=i(nl),aT=n(nl,"LI",{});var QSe=s(aT);o1e=n(QSe,"STRONG",{});var Pvt=s(o1e);Vrr=r(Pvt,"wavlm"),Pvt.forEach(t),Xrr=r(QSe," \u2014 "),Oz=n(QSe,"A",{href:!0});var Bvt=s(Oz);zrr=r(Bvt,"WavLMForAudioFrameClassification"),Bvt.forEach(t),Wrr=r(QSe," (WavLM model)"),QSe.forEach(t),nl.forEach(t),Qrr=i(pa),nT=n(pa,"P",{});var HSe=s(nT);Hrr=r(HSe,"The model is set in evaluation mode by default using "),r1e=n(HSe,"CODE",{});var Ivt=s(r1e);Urr=r(Ivt,"model.eval()"),Ivt.forEach(t),Jrr=r(HSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=n(HSe,"CODE",{});var Nvt=s(t1e);Yrr=r(Nvt,"model.train()"),Nvt.forEach(t),HSe.forEach(t),Krr=i(pa),T(sT.$$.fragment,pa),pa.forEach(t),al.forEach(t),lDe=i(f),bd=n(f,"H2",{class:!0});var fOe=s(bd);lT=n(fOe,"A",{id:!0,class:!0,href:!0});var qvt=s(lT);a1e=n(qvt,"SPAN",{});var jvt=s(a1e);T(qy.$$.fragment,jvt),jvt.forEach(t),qvt.forEach(t),Zrr=i(fOe),n1e=n(fOe,"SPAN",{});var Dvt=s(n1e);etr=r(Dvt,"AutoModelForCTC"),Dvt.forEach(t),fOe.forEach(t),iDe=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(jy.$$.fragment,sl),otr=i(sl),vd=n(sl,"P",{});var kee=s(vd);rtr=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vz=n(kee,"A",{href:!0});var Gvt=s(Vz);ttr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),atr=r(kee," class method or the "),Xz=n(kee,"A",{href:!0});var Ovt=s(Xz);ntr=r(Ovt,"from_config()"),Ovt.forEach(t),str=r(kee,` class
method.`),kee.forEach(t),ltr=i(sl),Dy=n(sl,"P",{});var mOe=s(Dy);itr=r(mOe,"This class cannot be instantiated directly using "),s1e=n(mOe,"CODE",{});var Vvt=s(s1e);dtr=r(Vvt,"__init__()"),Vvt.forEach(t),ctr=r(mOe," (throws an error)."),mOe.forEach(t),ftr=i(sl),vt=n(sl,"DIV",{class:!0});var wA=s(vt);T(Gy.$$.fragment,wA),mtr=i(wA),l1e=n(wA,"P",{});var Xvt=s(l1e);gtr=r(Xvt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Xvt.forEach(t),htr=i(wA),Fd=n(wA,"P",{});var See=s(Fd);ptr=r(See,`Note:
Loading a model from its configuration file does `),i1e=n(See,"STRONG",{});var zvt=s(i1e);_tr=r(zvt,"not"),zvt.forEach(t),utr=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(See,"A",{href:!0});var Wvt=s(zz);btr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),vtr=r(See," to load the model weights."),See.forEach(t),Ftr=i(wA),T(iT.$$.fragment,wA),wA.forEach(t),Ttr=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(Oy.$$.fragment,_a),Mtr=i(_a),d1e=n(_a,"P",{});var Qvt=s(d1e);Etr=r(Qvt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Qvt.forEach(t),Ctr=i(_a),Va=n(_a,"P",{});var AA=s(Va);wtr=r(AA,"The model class to instantiate is selected based on the "),c1e=n(AA,"CODE",{});var Hvt=s(c1e);Atr=r(Hvt,"model_type"),Hvt.forEach(t),Ltr=r(AA,` property of the config object (either
passed as an argument or loaded from `),f1e=n(AA,"CODE",{});var Uvt=s(f1e);ytr=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),xtr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(AA,"CODE",{});var Jvt=s(m1e);$tr=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),ktr=r(AA,":"),AA.forEach(t),Str=i(_a),Le=n(_a,"UL",{});var Be=s(Le);dT=n(Be,"LI",{});var USe=s(dT);g1e=n(USe,"STRONG",{});var Yvt=s(g1e);Rtr=r(Yvt,"data2vec-audio"),Yvt.forEach(t),Ptr=r(USe," \u2014 "),Wz=n(USe,"A",{href:!0});var Kvt=s(Wz);Btr=r(Kvt,"Data2VecAudioForCTC"),Kvt.forEach(t),Itr=r(USe," (Data2VecAudio model)"),USe.forEach(t),Ntr=i(Be),cT=n(Be,"LI",{});var JSe=s(cT);h1e=n(JSe,"STRONG",{});var Zvt=s(h1e);qtr=r(Zvt,"hubert"),Zvt.forEach(t),jtr=r(JSe," \u2014 "),Qz=n(JSe,"A",{href:!0});var eFt=s(Qz);Dtr=r(eFt,"HubertForCTC"),eFt.forEach(t),Gtr=r(JSe," (Hubert model)"),JSe.forEach(t),Otr=i(Be),fT=n(Be,"LI",{});var YSe=s(fT);p1e=n(YSe,"STRONG",{});var oFt=s(p1e);Vtr=r(oFt,"mctct"),oFt.forEach(t),Xtr=r(YSe," \u2014 "),Hz=n(YSe,"A",{href:!0});var rFt=s(Hz);ztr=r(rFt,"MCTCTForCTC"),rFt.forEach(t),Wtr=r(YSe," (M-CTC-T model)"),YSe.forEach(t),Qtr=i(Be),mT=n(Be,"LI",{});var KSe=s(mT);_1e=n(KSe,"STRONG",{});var tFt=s(_1e);Htr=r(tFt,"sew"),tFt.forEach(t),Utr=r(KSe," \u2014 "),Uz=n(KSe,"A",{href:!0});var aFt=s(Uz);Jtr=r(aFt,"SEWForCTC"),aFt.forEach(t),Ytr=r(KSe," (SEW model)"),KSe.forEach(t),Ktr=i(Be),gT=n(Be,"LI",{});var ZSe=s(gT);u1e=n(ZSe,"STRONG",{});var nFt=s(u1e);Ztr=r(nFt,"sew-d"),nFt.forEach(t),ear=r(ZSe," \u2014 "),Jz=n(ZSe,"A",{href:!0});var sFt=s(Jz);oar=r(sFt,"SEWDForCTC"),sFt.forEach(t),rar=r(ZSe," (SEW-D model)"),ZSe.forEach(t),tar=i(Be),hT=n(Be,"LI",{});var eRe=s(hT);b1e=n(eRe,"STRONG",{});var lFt=s(b1e);aar=r(lFt,"unispeech"),lFt.forEach(t),nar=r(eRe," \u2014 "),Yz=n(eRe,"A",{href:!0});var iFt=s(Yz);sar=r(iFt,"UniSpeechForCTC"),iFt.forEach(t),lar=r(eRe," (UniSpeech model)"),eRe.forEach(t),iar=i(Be),pT=n(Be,"LI",{});var oRe=s(pT);v1e=n(oRe,"STRONG",{});var dFt=s(v1e);dar=r(dFt,"unispeech-sat"),dFt.forEach(t),car=r(oRe," \u2014 "),Kz=n(oRe,"A",{href:!0});var cFt=s(Kz);far=r(cFt,"UniSpeechSatForCTC"),cFt.forEach(t),mar=r(oRe," (UniSpeechSat model)"),oRe.forEach(t),gar=i(Be),_T=n(Be,"LI",{});var rRe=s(_T);F1e=n(rRe,"STRONG",{});var fFt=s(F1e);har=r(fFt,"wav2vec2"),fFt.forEach(t),par=r(rRe," \u2014 "),Zz=n(rRe,"A",{href:!0});var mFt=s(Zz);_ar=r(mFt,"Wav2Vec2ForCTC"),mFt.forEach(t),uar=r(rRe," (Wav2Vec2 model)"),rRe.forEach(t),bar=i(Be),uT=n(Be,"LI",{});var tRe=s(uT);T1e=n(tRe,"STRONG",{});var gFt=s(T1e);Far=r(gFt,"wav2vec2-conformer"),gFt.forEach(t),Tar=r(tRe," \u2014 "),eW=n(tRe,"A",{href:!0});var hFt=s(eW);Mar=r(hFt,"Wav2Vec2ConformerForCTC"),hFt.forEach(t),Ear=r(tRe," (Wav2Vec2-Conformer model)"),tRe.forEach(t),Car=i(Be),bT=n(Be,"LI",{});var aRe=s(bT);M1e=n(aRe,"STRONG",{});var pFt=s(M1e);war=r(pFt,"wavlm"),pFt.forEach(t),Aar=r(aRe," \u2014 "),oW=n(aRe,"A",{href:!0});var _Ft=s(oW);Lar=r(_Ft,"WavLMForCTC"),_Ft.forEach(t),yar=r(aRe," (WavLM model)"),aRe.forEach(t),Be.forEach(t),xar=i(_a),vT=n(_a,"P",{});var nRe=s(vT);$ar=r(nRe,"The model is set in evaluation mode by default using "),E1e=n(nRe,"CODE",{});var uFt=s(E1e);kar=r(uFt,"model.eval()"),uFt.forEach(t),Sar=r(nRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(nRe,"CODE",{});var bFt=s(C1e);Rar=r(bFt,"model.train()"),bFt.forEach(t),nRe.forEach(t),Par=i(_a),T(FT.$$.fragment,_a),_a.forEach(t),sl.forEach(t),dDe=i(f),Td=n(f,"H2",{class:!0});var gOe=s(Td);TT=n(gOe,"A",{id:!0,class:!0,href:!0});var vFt=s(TT);w1e=n(vFt,"SPAN",{});var FFt=s(w1e);T(Vy.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),Bar=i(gOe),A1e=n(gOe,"SPAN",{});var TFt=s(A1e);Iar=r(TFt,"AutoModelForSpeechSeq2Seq"),TFt.forEach(t),gOe.forEach(t),cDe=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(Xy.$$.fragment,ll),Nar=i(ll),Md=n(ll,"P",{});var Ree=s(Md);qar=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rW=n(Ree,"A",{href:!0});var MFt=s(rW);jar=r(MFt,"from_pretrained()"),MFt.forEach(t),Dar=r(Ree," class method or the "),tW=n(Ree,"A",{href:!0});var EFt=s(tW);Gar=r(EFt,"from_config()"),EFt.forEach(t),Oar=r(Ree,` class
method.`),Ree.forEach(t),Var=i(ll),zy=n(ll,"P",{});var hOe=s(zy);Xar=r(hOe,"This class cannot be instantiated directly using "),L1e=n(hOe,"CODE",{});var CFt=s(L1e);zar=r(CFt,"__init__()"),CFt.forEach(t),War=r(hOe," (throws an error)."),hOe.forEach(t),Qar=i(ll),Ft=n(ll,"DIV",{class:!0});var LA=s(Ft);T(Wy.$$.fragment,LA),Har=i(LA),y1e=n(LA,"P",{});var wFt=s(y1e);Uar=r(wFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wFt.forEach(t),Jar=i(LA),Ed=n(LA,"P",{});var Pee=s(Ed);Yar=r(Pee,`Note:
Loading a model from its configuration file does `),x1e=n(Pee,"STRONG",{});var AFt=s(x1e);Kar=r(AFt,"not"),AFt.forEach(t),Zar=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(Pee,"A",{href:!0});var LFt=s(aW);enr=r(LFt,"from_pretrained()"),LFt.forEach(t),onr=r(Pee," to load the model weights."),Pee.forEach(t),rnr=i(LA),T(MT.$$.fragment,LA),LA.forEach(t),tnr=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(Qy.$$.fragment,ua),anr=i(ua),$1e=n(ua,"P",{});var yFt=s($1e);nnr=r(yFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yFt.forEach(t),snr=i(ua),Xa=n(ua,"P",{});var yA=s(Xa);lnr=r(yA,"The model class to instantiate is selected based on the "),k1e=n(yA,"CODE",{});var xFt=s(k1e);inr=r(xFt,"model_type"),xFt.forEach(t),dnr=r(yA,` property of the config object (either
passed as an argument or loaded from `),S1e=n(yA,"CODE",{});var $Ft=s(S1e);cnr=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),fnr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(yA,"CODE",{});var kFt=s(R1e);mnr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),gnr=r(yA,":"),yA.forEach(t),hnr=i(ua),Hy=n(ua,"UL",{});var pOe=s(Hy);ET=n(pOe,"LI",{});var sRe=s(ET);P1e=n(sRe,"STRONG",{});var SFt=s(P1e);pnr=r(SFt,"speech-encoder-decoder"),SFt.forEach(t),_nr=r(sRe," \u2014 "),nW=n(sRe,"A",{href:!0});var RFt=s(nW);unr=r(RFt,"SpeechEncoderDecoderModel"),RFt.forEach(t),bnr=r(sRe," (Speech Encoder decoder model)"),sRe.forEach(t),vnr=i(pOe),CT=n(pOe,"LI",{});var lRe=s(CT);B1e=n(lRe,"STRONG",{});var PFt=s(B1e);Fnr=r(PFt,"speech_to_text"),PFt.forEach(t),Tnr=r(lRe," \u2014 "),sW=n(lRe,"A",{href:!0});var BFt=s(sW);Mnr=r(BFt,"Speech2TextForConditionalGeneration"),BFt.forEach(t),Enr=r(lRe," (Speech2Text model)"),lRe.forEach(t),pOe.forEach(t),Cnr=i(ua),wT=n(ua,"P",{});var iRe=s(wT);wnr=r(iRe,"The model is set in evaluation mode by default using "),I1e=n(iRe,"CODE",{});var IFt=s(I1e);Anr=r(IFt,"model.eval()"),IFt.forEach(t),Lnr=r(iRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=n(iRe,"CODE",{});var NFt=s(N1e);ynr=r(NFt,"model.train()"),NFt.forEach(t),iRe.forEach(t),xnr=i(ua),T(AT.$$.fragment,ua),ua.forEach(t),ll.forEach(t),fDe=i(f),Cd=n(f,"H2",{class:!0});var _Oe=s(Cd);LT=n(_Oe,"A",{id:!0,class:!0,href:!0});var qFt=s(LT);q1e=n(qFt,"SPAN",{});var jFt=s(q1e);T(Uy.$$.fragment,jFt),jFt.forEach(t),qFt.forEach(t),$nr=i(_Oe),j1e=n(_Oe,"SPAN",{});var DFt=s(j1e);knr=r(DFt,"AutoModelForAudioXVector"),DFt.forEach(t),_Oe.forEach(t),mDe=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(Jy.$$.fragment,il),Snr=i(il),wd=n(il,"P",{});var Bee=s(wd);Rnr=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lW=n(Bee,"A",{href:!0});var GFt=s(lW);Pnr=r(GFt,"from_pretrained()"),GFt.forEach(t),Bnr=r(Bee," class method or the "),iW=n(Bee,"A",{href:!0});var OFt=s(iW);Inr=r(OFt,"from_config()"),OFt.forEach(t),Nnr=r(Bee,` class
method.`),Bee.forEach(t),qnr=i(il),Yy=n(il,"P",{});var uOe=s(Yy);jnr=r(uOe,"This class cannot be instantiated directly using "),D1e=n(uOe,"CODE",{});var VFt=s(D1e);Dnr=r(VFt,"__init__()"),VFt.forEach(t),Gnr=r(uOe," (throws an error)."),uOe.forEach(t),Onr=i(il),Tt=n(il,"DIV",{class:!0});var xA=s(Tt);T(Ky.$$.fragment,xA),Vnr=i(xA),G1e=n(xA,"P",{});var XFt=s(G1e);Xnr=r(XFt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),XFt.forEach(t),znr=i(xA),Ad=n(xA,"P",{});var Iee=s(Ad);Wnr=r(Iee,`Note:
Loading a model from its configuration file does `),O1e=n(Iee,"STRONG",{});var zFt=s(O1e);Qnr=r(zFt,"not"),zFt.forEach(t),Hnr=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(Iee,"A",{href:!0});var WFt=s(dW);Unr=r(WFt,"from_pretrained()"),WFt.forEach(t),Jnr=r(Iee," to load the model weights."),Iee.forEach(t),Ynr=i(xA),T(yT.$$.fragment,xA),xA.forEach(t),Knr=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(Zy.$$.fragment,ba),Znr=i(ba),V1e=n(ba,"P",{});var QFt=s(V1e);esr=r(QFt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),QFt.forEach(t),osr=i(ba),za=n(ba,"P",{});var $A=s(za);rsr=r($A,"The model class to instantiate is selected based on the "),X1e=n($A,"CODE",{});var HFt=s(X1e);tsr=r(HFt,"model_type"),HFt.forEach(t),asr=r($A,` property of the config object (either
passed as an argument or loaded from `),z1e=n($A,"CODE",{});var UFt=s(z1e);nsr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),ssr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n($A,"CODE",{});var JFt=s(W1e);lsr=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),isr=r($A,":"),$A.forEach(t),dsr=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);xT=n(dl,"LI",{});var dRe=s(xT);Q1e=n(dRe,"STRONG",{});var YFt=s(Q1e);csr=r(YFt,"data2vec-audio"),YFt.forEach(t),fsr=r(dRe," \u2014 "),cW=n(dRe,"A",{href:!0});var KFt=s(cW);msr=r(KFt,"Data2VecAudioForXVector"),KFt.forEach(t),gsr=r(dRe," (Data2VecAudio model)"),dRe.forEach(t),hsr=i(dl),$T=n(dl,"LI",{});var cRe=s($T);H1e=n(cRe,"STRONG",{});var ZFt=s(H1e);psr=r(ZFt,"unispeech-sat"),ZFt.forEach(t),_sr=r(cRe," \u2014 "),fW=n(cRe,"A",{href:!0});var eTt=s(fW);usr=r(eTt,"UniSpeechSatForXVector"),eTt.forEach(t),bsr=r(cRe," (UniSpeechSat model)"),cRe.forEach(t),vsr=i(dl),kT=n(dl,"LI",{});var fRe=s(kT);U1e=n(fRe,"STRONG",{});var oTt=s(U1e);Fsr=r(oTt,"wav2vec2"),oTt.forEach(t),Tsr=r(fRe," \u2014 "),mW=n(fRe,"A",{href:!0});var rTt=s(mW);Msr=r(rTt,"Wav2Vec2ForXVector"),rTt.forEach(t),Esr=r(fRe," (Wav2Vec2 model)"),fRe.forEach(t),Csr=i(dl),ST=n(dl,"LI",{});var mRe=s(ST);J1e=n(mRe,"STRONG",{});var tTt=s(J1e);wsr=r(tTt,"wav2vec2-conformer"),tTt.forEach(t),Asr=r(mRe," \u2014 "),gW=n(mRe,"A",{href:!0});var aTt=s(gW);Lsr=r(aTt,"Wav2Vec2ConformerForXVector"),aTt.forEach(t),ysr=r(mRe," (Wav2Vec2-Conformer model)"),mRe.forEach(t),xsr=i(dl),RT=n(dl,"LI",{});var gRe=s(RT);Y1e=n(gRe,"STRONG",{});var nTt=s(Y1e);$sr=r(nTt,"wavlm"),nTt.forEach(t),ksr=r(gRe," \u2014 "),hW=n(gRe,"A",{href:!0});var sTt=s(hW);Ssr=r(sTt,"WavLMForXVector"),sTt.forEach(t),Rsr=r(gRe," (WavLM model)"),gRe.forEach(t),dl.forEach(t),Psr=i(ba),PT=n(ba,"P",{});var hRe=s(PT);Bsr=r(hRe,"The model is set in evaluation mode by default using "),K1e=n(hRe,"CODE",{});var lTt=s(K1e);Isr=r(lTt,"model.eval()"),lTt.forEach(t),Nsr=r(hRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=n(hRe,"CODE",{});var iTt=s(Z1e);qsr=r(iTt,"model.train()"),iTt.forEach(t),hRe.forEach(t),jsr=i(ba),T(BT.$$.fragment,ba),ba.forEach(t),il.forEach(t),gDe=i(f),Ld=n(f,"H2",{class:!0});var bOe=s(Ld);IT=n(bOe,"A",{id:!0,class:!0,href:!0});var dTt=s(IT);e3e=n(dTt,"SPAN",{});var cTt=s(e3e);T(e8.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),Dsr=i(bOe),o3e=n(bOe,"SPAN",{});var fTt=s(o3e);Gsr=r(fTt,"AutoModelForMaskedImageModeling"),fTt.forEach(t),bOe.forEach(t),hDe=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(o8.$$.fragment,cl),Osr=i(cl),yd=n(cl,"P",{});var Nee=s(yd);Vsr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pW=n(Nee,"A",{href:!0});var mTt=s(pW);Xsr=r(mTt,"from_pretrained()"),mTt.forEach(t),zsr=r(Nee," class method or the "),_W=n(Nee,"A",{href:!0});var gTt=s(_W);Wsr=r(gTt,"from_config()"),gTt.forEach(t),Qsr=r(Nee,` class
method.`),Nee.forEach(t),Hsr=i(cl),r8=n(cl,"P",{});var vOe=s(r8);Usr=r(vOe,"This class cannot be instantiated directly using "),r3e=n(vOe,"CODE",{});var hTt=s(r3e);Jsr=r(hTt,"__init__()"),hTt.forEach(t),Ysr=r(vOe," (throws an error)."),vOe.forEach(t),Ksr=i(cl),Mt=n(cl,"DIV",{class:!0});var kA=s(Mt);T(t8.$$.fragment,kA),Zsr=i(kA),t3e=n(kA,"P",{});var pTt=s(t3e);elr=r(pTt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),pTt.forEach(t),olr=i(kA),xd=n(kA,"P",{});var qee=s(xd);rlr=r(qee,`Note:
Loading a model from its configuration file does `),a3e=n(qee,"STRONG",{});var _Tt=s(a3e);tlr=r(_Tt,"not"),_Tt.forEach(t),alr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(qee,"A",{href:!0});var uTt=s(uW);nlr=r(uTt,"from_pretrained()"),uTt.forEach(t),slr=r(qee," to load the model weights."),qee.forEach(t),llr=i(kA),T(NT.$$.fragment,kA),kA.forEach(t),ilr=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(a8.$$.fragment,va),dlr=i(va),n3e=n(va,"P",{});var bTt=s(n3e);clr=r(bTt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),bTt.forEach(t),flr=i(va),Wa=n(va,"P",{});var SA=s(Wa);mlr=r(SA,"The model class to instantiate is selected based on the "),s3e=n(SA,"CODE",{});var vTt=s(s3e);glr=r(vTt,"model_type"),vTt.forEach(t),hlr=r(SA,` property of the config object (either
passed as an argument or loaded from `),l3e=n(SA,"CODE",{});var FTt=s(l3e);plr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),_lr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(SA,"CODE",{});var TTt=s(i3e);ulr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),blr=r(SA,":"),SA.forEach(t),vlr=i(va),$d=n(va,"UL",{});var jee=s($d);qT=n(jee,"LI",{});var pRe=s(qT);d3e=n(pRe,"STRONG",{});var MTt=s(d3e);Flr=r(MTt,"deit"),MTt.forEach(t),Tlr=r(pRe," \u2014 "),bW=n(pRe,"A",{href:!0});var ETt=s(bW);Mlr=r(ETt,"DeiTForMaskedImageModeling"),ETt.forEach(t),Elr=r(pRe," (DeiT model)"),pRe.forEach(t),Clr=i(jee),jT=n(jee,"LI",{});var _Re=s(jT);c3e=n(_Re,"STRONG",{});var CTt=s(c3e);wlr=r(CTt,"swin"),CTt.forEach(t),Alr=r(_Re," \u2014 "),vW=n(_Re,"A",{href:!0});var wTt=s(vW);Llr=r(wTt,"SwinForMaskedImageModeling"),wTt.forEach(t),ylr=r(_Re," (Swin Transformer model)"),_Re.forEach(t),xlr=i(jee),DT=n(jee,"LI",{});var uRe=s(DT);f3e=n(uRe,"STRONG",{});var ATt=s(f3e);$lr=r(ATt,"vit"),ATt.forEach(t),klr=r(uRe," \u2014 "),FW=n(uRe,"A",{href:!0});var LTt=s(FW);Slr=r(LTt,"ViTForMaskedImageModeling"),LTt.forEach(t),Rlr=r(uRe," (ViT model)"),uRe.forEach(t),jee.forEach(t),Plr=i(va),GT=n(va,"P",{});var bRe=s(GT);Blr=r(bRe,"The model is set in evaluation mode by default using "),m3e=n(bRe,"CODE",{});var yTt=s(m3e);Ilr=r(yTt,"model.eval()"),yTt.forEach(t),Nlr=r(bRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=n(bRe,"CODE",{});var xTt=s(g3e);qlr=r(xTt,"model.train()"),xTt.forEach(t),bRe.forEach(t),jlr=i(va),T(OT.$$.fragment,va),va.forEach(t),cl.forEach(t),pDe=i(f),kd=n(f,"H2",{class:!0});var FOe=s(kd);VT=n(FOe,"A",{id:!0,class:!0,href:!0});var $Tt=s(VT);h3e=n($Tt,"SPAN",{});var kTt=s(h3e);T(n8.$$.fragment,kTt),kTt.forEach(t),$Tt.forEach(t),Dlr=i(FOe),p3e=n(FOe,"SPAN",{});var STt=s(p3e);Glr=r(STt,"AutoModelForObjectDetection"),STt.forEach(t),FOe.forEach(t),_De=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(s8.$$.fragment,fl),Olr=i(fl),Sd=n(fl,"P",{});var Dee=s(Sd);Vlr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),TW=n(Dee,"A",{href:!0});var RTt=s(TW);Xlr=r(RTt,"from_pretrained()"),RTt.forEach(t),zlr=r(Dee," class method or the "),MW=n(Dee,"A",{href:!0});var PTt=s(MW);Wlr=r(PTt,"from_config()"),PTt.forEach(t),Qlr=r(Dee,` class
method.`),Dee.forEach(t),Hlr=i(fl),l8=n(fl,"P",{});var TOe=s(l8);Ulr=r(TOe,"This class cannot be instantiated directly using "),_3e=n(TOe,"CODE",{});var BTt=s(_3e);Jlr=r(BTt,"__init__()"),BTt.forEach(t),Ylr=r(TOe," (throws an error)."),TOe.forEach(t),Klr=i(fl),Et=n(fl,"DIV",{class:!0});var RA=s(Et);T(i8.$$.fragment,RA),Zlr=i(RA),u3e=n(RA,"P",{});var ITt=s(u3e);eir=r(ITt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ITt.forEach(t),oir=i(RA),Rd=n(RA,"P",{});var Gee=s(Rd);rir=r(Gee,`Note:
Loading a model from its configuration file does `),b3e=n(Gee,"STRONG",{});var NTt=s(b3e);tir=r(NTt,"not"),NTt.forEach(t),air=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(Gee,"A",{href:!0});var qTt=s(EW);nir=r(qTt,"from_pretrained()"),qTt.forEach(t),sir=r(Gee," to load the model weights."),Gee.forEach(t),lir=i(RA),T(XT.$$.fragment,RA),RA.forEach(t),iir=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(d8.$$.fragment,Fa),dir=i(Fa),v3e=n(Fa,"P",{});var jTt=s(v3e);cir=r(jTt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jTt.forEach(t),fir=i(Fa),Qa=n(Fa,"P",{});var PA=s(Qa);mir=r(PA,"The model class to instantiate is selected based on the "),F3e=n(PA,"CODE",{});var DTt=s(F3e);gir=r(DTt,"model_type"),DTt.forEach(t),hir=r(PA,` property of the config object (either
passed as an argument or loaded from `),T3e=n(PA,"CODE",{});var GTt=s(T3e);pir=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),_ir=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(PA,"CODE",{});var OTt=s(M3e);uir=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),bir=r(PA,":"),PA.forEach(t),vir=i(Fa),c8=n(Fa,"UL",{});var MOe=s(c8);zT=n(MOe,"LI",{});var vRe=s(zT);E3e=n(vRe,"STRONG",{});var VTt=s(E3e);Fir=r(VTt,"detr"),VTt.forEach(t),Tir=r(vRe," \u2014 "),CW=n(vRe,"A",{href:!0});var XTt=s(CW);Mir=r(XTt,"DetrForObjectDetection"),XTt.forEach(t),Eir=r(vRe," (DETR model)"),vRe.forEach(t),Cir=i(MOe),WT=n(MOe,"LI",{});var FRe=s(WT);C3e=n(FRe,"STRONG",{});var zTt=s(C3e);wir=r(zTt,"yolos"),zTt.forEach(t),Air=r(FRe," \u2014 "),wW=n(FRe,"A",{href:!0});var WTt=s(wW);Lir=r(WTt,"YolosForObjectDetection"),WTt.forEach(t),yir=r(FRe," (YOLOS model)"),FRe.forEach(t),MOe.forEach(t),xir=i(Fa),QT=n(Fa,"P",{});var TRe=s(QT);$ir=r(TRe,"The model is set in evaluation mode by default using "),w3e=n(TRe,"CODE",{});var QTt=s(w3e);kir=r(QTt,"model.eval()"),QTt.forEach(t),Sir=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=n(TRe,"CODE",{});var HTt=s(A3e);Rir=r(HTt,"model.train()"),HTt.forEach(t),TRe.forEach(t),Pir=i(Fa),T(HT.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),uDe=i(f),Pd=n(f,"H2",{class:!0});var EOe=s(Pd);UT=n(EOe,"A",{id:!0,class:!0,href:!0});var UTt=s(UT);L3e=n(UTt,"SPAN",{});var JTt=s(L3e);T(f8.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),Bir=i(EOe),y3e=n(EOe,"SPAN",{});var YTt=s(y3e);Iir=r(YTt,"AutoModelForImageSegmentation"),YTt.forEach(t),EOe.forEach(t),bDe=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(m8.$$.fragment,ml),Nir=i(ml),Bd=n(ml,"P",{});var Oee=s(Bd);qir=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),AW=n(Oee,"A",{href:!0});var KTt=s(AW);jir=r(KTt,"from_pretrained()"),KTt.forEach(t),Dir=r(Oee," class method or the "),LW=n(Oee,"A",{href:!0});var ZTt=s(LW);Gir=r(ZTt,"from_config()"),ZTt.forEach(t),Oir=r(Oee,` class
method.`),Oee.forEach(t),Vir=i(ml),g8=n(ml,"P",{});var COe=s(g8);Xir=r(COe,"This class cannot be instantiated directly using "),x3e=n(COe,"CODE",{});var e7t=s(x3e);zir=r(e7t,"__init__()"),e7t.forEach(t),Wir=r(COe," (throws an error)."),COe.forEach(t),Qir=i(ml),Ct=n(ml,"DIV",{class:!0});var BA=s(Ct);T(h8.$$.fragment,BA),Hir=i(BA),$3e=n(BA,"P",{});var o7t=s($3e);Uir=r(o7t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),o7t.forEach(t),Jir=i(BA),Id=n(BA,"P",{});var Vee=s(Id);Yir=r(Vee,`Note:
Loading a model from its configuration file does `),k3e=n(Vee,"STRONG",{});var r7t=s(k3e);Kir=r(r7t,"not"),r7t.forEach(t),Zir=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Vee,"A",{href:!0});var t7t=s(yW);edr=r(t7t,"from_pretrained()"),t7t.forEach(t),odr=r(Vee," to load the model weights."),Vee.forEach(t),rdr=i(BA),T(JT.$$.fragment,BA),BA.forEach(t),tdr=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(p8.$$.fragment,Ta),adr=i(Ta),S3e=n(Ta,"P",{});var a7t=s(S3e);ndr=r(a7t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),a7t.forEach(t),sdr=i(Ta),Ha=n(Ta,"P",{});var IA=s(Ha);ldr=r(IA,"The model class to instantiate is selected based on the "),R3e=n(IA,"CODE",{});var n7t=s(R3e);idr=r(n7t,"model_type"),n7t.forEach(t),ddr=r(IA,` property of the config object (either
passed as an argument or loaded from `),P3e=n(IA,"CODE",{});var s7t=s(P3e);cdr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),fdr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(IA,"CODE",{});var l7t=s(B3e);mdr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),gdr=r(IA,":"),IA.forEach(t),hdr=i(Ta),I3e=n(Ta,"UL",{});var i7t=s(I3e);YT=n(i7t,"LI",{});var MRe=s(YT);N3e=n(MRe,"STRONG",{});var d7t=s(N3e);pdr=r(d7t,"detr"),d7t.forEach(t),_dr=r(MRe," \u2014 "),xW=n(MRe,"A",{href:!0});var c7t=s(xW);udr=r(c7t,"DetrForSegmentation"),c7t.forEach(t),bdr=r(MRe," (DETR model)"),MRe.forEach(t),i7t.forEach(t),vdr=i(Ta),KT=n(Ta,"P",{});var ERe=s(KT);Fdr=r(ERe,"The model is set in evaluation mode by default using "),q3e=n(ERe,"CODE",{});var f7t=s(q3e);Tdr=r(f7t,"model.eval()"),f7t.forEach(t),Mdr=r(ERe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j3e=n(ERe,"CODE",{});var m7t=s(j3e);Edr=r(m7t,"model.train()"),m7t.forEach(t),ERe.forEach(t),Cdr=i(Ta),T(ZT.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),vDe=i(f),Nd=n(f,"H2",{class:!0});var wOe=s(Nd);e7=n(wOe,"A",{id:!0,class:!0,href:!0});var g7t=s(e7);D3e=n(g7t,"SPAN",{});var h7t=s(D3e);T(_8.$$.fragment,h7t),h7t.forEach(t),g7t.forEach(t),wdr=i(wOe),G3e=n(wOe,"SPAN",{});var p7t=s(G3e);Adr=r(p7t,"AutoModelForSemanticSegmentation"),p7t.forEach(t),wOe.forEach(t),FDe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(u8.$$.fragment,gl),Ldr=i(gl),qd=n(gl,"P",{});var Xee=s(qd);ydr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$W=n(Xee,"A",{href:!0});var _7t=s($W);xdr=r(_7t,"from_pretrained()"),_7t.forEach(t),$dr=r(Xee," class method or the "),kW=n(Xee,"A",{href:!0});var u7t=s(kW);kdr=r(u7t,"from_config()"),u7t.forEach(t),Sdr=r(Xee,` class
method.`),Xee.forEach(t),Rdr=i(gl),b8=n(gl,"P",{});var AOe=s(b8);Pdr=r(AOe,"This class cannot be instantiated directly using "),O3e=n(AOe,"CODE",{});var b7t=s(O3e);Bdr=r(b7t,"__init__()"),b7t.forEach(t),Idr=r(AOe," (throws an error)."),AOe.forEach(t),Ndr=i(gl),wt=n(gl,"DIV",{class:!0});var NA=s(wt);T(v8.$$.fragment,NA),qdr=i(NA),V3e=n(NA,"P",{});var v7t=s(V3e);jdr=r(v7t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v7t.forEach(t),Ddr=i(NA),jd=n(NA,"P",{});var zee=s(jd);Gdr=r(zee,`Note:
Loading a model from its configuration file does `),X3e=n(zee,"STRONG",{});var F7t=s(X3e);Odr=r(F7t,"not"),F7t.forEach(t),Vdr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(zee,"A",{href:!0});var T7t=s(SW);Xdr=r(T7t,"from_pretrained()"),T7t.forEach(t),zdr=r(zee," to load the model weights."),zee.forEach(t),Wdr=i(NA),T(o7.$$.fragment,NA),NA.forEach(t),Qdr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(F8.$$.fragment,Ma),Hdr=i(Ma),z3e=n(Ma,"P",{});var M7t=s(z3e);Udr=r(M7t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),M7t.forEach(t),Jdr=i(Ma),Ua=n(Ma,"P",{});var qA=s(Ua);Ydr=r(qA,"The model class to instantiate is selected based on the "),W3e=n(qA,"CODE",{});var E7t=s(W3e);Kdr=r(E7t,"model_type"),E7t.forEach(t),Zdr=r(qA,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(qA,"CODE",{});var C7t=s(Q3e);ecr=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),ocr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(qA,"CODE",{});var w7t=s(H3e);rcr=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),tcr=r(qA,":"),qA.forEach(t),acr=i(Ma),Ja=n(Ma,"UL",{});var jA=s(Ja);r7=n(jA,"LI",{});var CRe=s(r7);U3e=n(CRe,"STRONG",{});var A7t=s(U3e);ncr=r(A7t,"beit"),A7t.forEach(t),scr=r(CRe," \u2014 "),RW=n(CRe,"A",{href:!0});var L7t=s(RW);lcr=r(L7t,"BeitForSemanticSegmentation"),L7t.forEach(t),icr=r(CRe," (BEiT model)"),CRe.forEach(t),dcr=i(jA),t7=n(jA,"LI",{});var wRe=s(t7);J3e=n(wRe,"STRONG",{});var y7t=s(J3e);ccr=r(y7t,"data2vec-vision"),y7t.forEach(t),fcr=r(wRe," \u2014 "),PW=n(wRe,"A",{href:!0});var x7t=s(PW);mcr=r(x7t,"Data2VecVisionForSemanticSegmentation"),x7t.forEach(t),gcr=r(wRe," (Data2VecVision model)"),wRe.forEach(t),hcr=i(jA),a7=n(jA,"LI",{});var ARe=s(a7);Y3e=n(ARe,"STRONG",{});var $7t=s(Y3e);pcr=r($7t,"dpt"),$7t.forEach(t),_cr=r(ARe," \u2014 "),BW=n(ARe,"A",{href:!0});var k7t=s(BW);ucr=r(k7t,"DPTForSemanticSegmentation"),k7t.forEach(t),bcr=r(ARe," (DPT model)"),ARe.forEach(t),vcr=i(jA),n7=n(jA,"LI",{});var LRe=s(n7);K3e=n(LRe,"STRONG",{});var S7t=s(K3e);Fcr=r(S7t,"segformer"),S7t.forEach(t),Tcr=r(LRe," \u2014 "),IW=n(LRe,"A",{href:!0});var R7t=s(IW);Mcr=r(R7t,"SegformerForSemanticSegmentation"),R7t.forEach(t),Ecr=r(LRe," (SegFormer model)"),LRe.forEach(t),jA.forEach(t),Ccr=i(Ma),s7=n(Ma,"P",{});var yRe=s(s7);wcr=r(yRe,"The model is set in evaluation mode by default using "),Z3e=n(yRe,"CODE",{});var P7t=s(Z3e);Acr=r(P7t,"model.eval()"),P7t.forEach(t),Lcr=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=n(yRe,"CODE",{});var B7t=s(ebe);ycr=r(B7t,"model.train()"),B7t.forEach(t),yRe.forEach(t),xcr=i(Ma),T(l7.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),TDe=i(f),Dd=n(f,"H2",{class:!0});var LOe=s(Dd);i7=n(LOe,"A",{id:!0,class:!0,href:!0});var I7t=s(i7);obe=n(I7t,"SPAN",{});var N7t=s(obe);T(T8.$$.fragment,N7t),N7t.forEach(t),I7t.forEach(t),$cr=i(LOe),rbe=n(LOe,"SPAN",{});var q7t=s(rbe);kcr=r(q7t,"AutoModelForInstanceSegmentation"),q7t.forEach(t),LOe.forEach(t),MDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(M8.$$.fragment,hl),Scr=i(hl),Gd=n(hl,"P",{});var Wee=s(Gd);Rcr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),NW=n(Wee,"A",{href:!0});var j7t=s(NW);Pcr=r(j7t,"from_pretrained()"),j7t.forEach(t),Bcr=r(Wee," class method or the "),qW=n(Wee,"A",{href:!0});var D7t=s(qW);Icr=r(D7t,"from_config()"),D7t.forEach(t),Ncr=r(Wee,` class
method.`),Wee.forEach(t),qcr=i(hl),E8=n(hl,"P",{});var yOe=s(E8);jcr=r(yOe,"This class cannot be instantiated directly using "),tbe=n(yOe,"CODE",{});var G7t=s(tbe);Dcr=r(G7t,"__init__()"),G7t.forEach(t),Gcr=r(yOe," (throws an error)."),yOe.forEach(t),Ocr=i(hl),At=n(hl,"DIV",{class:!0});var DA=s(At);T(C8.$$.fragment,DA),Vcr=i(DA),abe=n(DA,"P",{});var O7t=s(abe);Xcr=r(O7t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),O7t.forEach(t),zcr=i(DA),Od=n(DA,"P",{});var Qee=s(Od);Wcr=r(Qee,`Note:
Loading a model from its configuration file does `),nbe=n(Qee,"STRONG",{});var V7t=s(nbe);Qcr=r(V7t,"not"),V7t.forEach(t),Hcr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Qee,"A",{href:!0});var X7t=s(jW);Ucr=r(X7t,"from_pretrained()"),X7t.forEach(t),Jcr=r(Qee," to load the model weights."),Qee.forEach(t),Ycr=i(DA),T(d7.$$.fragment,DA),DA.forEach(t),Kcr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(w8.$$.fragment,Ea),Zcr=i(Ea),sbe=n(Ea,"P",{});var z7t=s(sbe);efr=r(z7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z7t.forEach(t),ofr=i(Ea),Ya=n(Ea,"P",{});var GA=s(Ya);rfr=r(GA,"The model class to instantiate is selected based on the "),lbe=n(GA,"CODE",{});var W7t=s(lbe);tfr=r(W7t,"model_type"),W7t.forEach(t),afr=r(GA,` property of the config object (either
passed as an argument or loaded from `),ibe=n(GA,"CODE",{});var Q7t=s(ibe);nfr=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),sfr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(GA,"CODE",{});var H7t=s(dbe);lfr=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),ifr=r(GA,":"),GA.forEach(t),dfr=i(Ea),cbe=n(Ea,"UL",{});var U7t=s(cbe);c7=n(U7t,"LI",{});var xRe=s(c7);fbe=n(xRe,"STRONG",{});var J7t=s(fbe);cfr=r(J7t,"maskformer"),J7t.forEach(t),ffr=r(xRe," \u2014 "),DW=n(xRe,"A",{href:!0});var Y7t=s(DW);mfr=r(Y7t,"MaskFormerForInstanceSegmentation"),Y7t.forEach(t),gfr=r(xRe," (MaskFormer model)"),xRe.forEach(t),U7t.forEach(t),hfr=i(Ea),f7=n(Ea,"P",{});var $Re=s(f7);pfr=r($Re,"The model is set in evaluation mode by default using "),mbe=n($Re,"CODE",{});var K7t=s(mbe);_fr=r(K7t,"model.eval()"),K7t.forEach(t),ufr=r($Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n($Re,"CODE",{});var Z7t=s(gbe);bfr=r(Z7t,"model.train()"),Z7t.forEach(t),$Re.forEach(t),vfr=i(Ea),T(m7.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),EDe=i(f),Vd=n(f,"H2",{class:!0});var xOe=s(Vd);g7=n(xOe,"A",{id:!0,class:!0,href:!0});var eMt=s(g7);hbe=n(eMt,"SPAN",{});var oMt=s(hbe);T(A8.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),Ffr=i(xOe),pbe=n(xOe,"SPAN",{});var rMt=s(pbe);Tfr=r(rMt,"TFAutoModel"),rMt.forEach(t),xOe.forEach(t),CDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(L8.$$.fragment,pl),Mfr=i(pl),Xd=n(pl,"P",{});var Hee=s(Xd);Efr=r(Hee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GW=n(Hee,"A",{href:!0});var tMt=s(GW);Cfr=r(tMt,"from_pretrained()"),tMt.forEach(t),wfr=r(Hee," class method or the "),OW=n(Hee,"A",{href:!0});var aMt=s(OW);Afr=r(aMt,"from_config()"),aMt.forEach(t),Lfr=r(Hee,` class
method.`),Hee.forEach(t),yfr=i(pl),y8=n(pl,"P",{});var $Oe=s(y8);xfr=r($Oe,"This class cannot be instantiated directly using "),_be=n($Oe,"CODE",{});var nMt=s(_be);$fr=r(nMt,"__init__()"),nMt.forEach(t),kfr=r($Oe," (throws an error)."),$Oe.forEach(t),Sfr=i(pl),Lt=n(pl,"DIV",{class:!0});var OA=s(Lt);T(x8.$$.fragment,OA),Rfr=i(OA),ube=n(OA,"P",{});var sMt=s(ube);Pfr=r(sMt,"Instantiates one of the base model classes of the library from a configuration."),sMt.forEach(t),Bfr=i(OA),zd=n(OA,"P",{});var Uee=s(zd);Ifr=r(Uee,`Note:
Loading a model from its configuration file does `),bbe=n(Uee,"STRONG",{});var lMt=s(bbe);Nfr=r(lMt,"not"),lMt.forEach(t),qfr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Uee,"A",{href:!0});var iMt=s(VW);jfr=r(iMt,"from_pretrained()"),iMt.forEach(t),Dfr=r(Uee," to load the model weights."),Uee.forEach(t),Gfr=i(OA),T(h7.$$.fragment,OA),OA.forEach(t),Ofr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T($8.$$.fragment,_l),Vfr=i(_l),vbe=n(_l,"P",{});var dMt=s(vbe);Xfr=r(dMt,"Instantiate one of the base model classes of the library from a pretrained model."),dMt.forEach(t),zfr=i(_l),Ka=n(_l,"P",{});var VA=s(Ka);Wfr=r(VA,"The model class to instantiate is selected based on the "),Fbe=n(VA,"CODE",{});var cMt=s(Fbe);Qfr=r(cMt,"model_type"),cMt.forEach(t),Hfr=r(VA,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(VA,"CODE",{});var fMt=s(Tbe);Ufr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),Jfr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(VA,"CODE",{});var mMt=s(Mbe);Yfr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),Kfr=r(VA,":"),VA.forEach(t),Zfr=i(_l),q=n(_l,"UL",{});var D=s(q);p7=n(D,"LI",{});var kRe=s(p7);Ebe=n(kRe,"STRONG",{});var gMt=s(Ebe);emr=r(gMt,"albert"),gMt.forEach(t),omr=r(kRe," \u2014 "),XW=n(kRe,"A",{href:!0});var hMt=s(XW);rmr=r(hMt,"TFAlbertModel"),hMt.forEach(t),tmr=r(kRe," (ALBERT model)"),kRe.forEach(t),amr=i(D),_7=n(D,"LI",{});var SRe=s(_7);Cbe=n(SRe,"STRONG",{});var pMt=s(Cbe);nmr=r(pMt,"bart"),pMt.forEach(t),smr=r(SRe," \u2014 "),zW=n(SRe,"A",{href:!0});var _Mt=s(zW);lmr=r(_Mt,"TFBartModel"),_Mt.forEach(t),imr=r(SRe," (BART model)"),SRe.forEach(t),dmr=i(D),u7=n(D,"LI",{});var RRe=s(u7);wbe=n(RRe,"STRONG",{});var uMt=s(wbe);cmr=r(uMt,"bert"),uMt.forEach(t),fmr=r(RRe," \u2014 "),WW=n(RRe,"A",{href:!0});var bMt=s(WW);mmr=r(bMt,"TFBertModel"),bMt.forEach(t),gmr=r(RRe," (BERT model)"),RRe.forEach(t),hmr=i(D),b7=n(D,"LI",{});var PRe=s(b7);Abe=n(PRe,"STRONG",{});var vMt=s(Abe);pmr=r(vMt,"blenderbot"),vMt.forEach(t),_mr=r(PRe," \u2014 "),QW=n(PRe,"A",{href:!0});var FMt=s(QW);umr=r(FMt,"TFBlenderbotModel"),FMt.forEach(t),bmr=r(PRe," (Blenderbot model)"),PRe.forEach(t),vmr=i(D),v7=n(D,"LI",{});var BRe=s(v7);Lbe=n(BRe,"STRONG",{});var TMt=s(Lbe);Fmr=r(TMt,"blenderbot-small"),TMt.forEach(t),Tmr=r(BRe," \u2014 "),HW=n(BRe,"A",{href:!0});var MMt=s(HW);Mmr=r(MMt,"TFBlenderbotSmallModel"),MMt.forEach(t),Emr=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),Cmr=i(D),F7=n(D,"LI",{});var IRe=s(F7);ybe=n(IRe,"STRONG",{});var EMt=s(ybe);wmr=r(EMt,"camembert"),EMt.forEach(t),Amr=r(IRe," \u2014 "),UW=n(IRe,"A",{href:!0});var CMt=s(UW);Lmr=r(CMt,"TFCamembertModel"),CMt.forEach(t),ymr=r(IRe," (CamemBERT model)"),IRe.forEach(t),xmr=i(D),T7=n(D,"LI",{});var NRe=s(T7);xbe=n(NRe,"STRONG",{});var wMt=s(xbe);$mr=r(wMt,"clip"),wMt.forEach(t),kmr=r(NRe," \u2014 "),JW=n(NRe,"A",{href:!0});var AMt=s(JW);Smr=r(AMt,"TFCLIPModel"),AMt.forEach(t),Rmr=r(NRe," (CLIP model)"),NRe.forEach(t),Pmr=i(D),M7=n(D,"LI",{});var qRe=s(M7);$be=n(qRe,"STRONG",{});var LMt=s($be);Bmr=r(LMt,"convbert"),LMt.forEach(t),Imr=r(qRe," \u2014 "),YW=n(qRe,"A",{href:!0});var yMt=s(YW);Nmr=r(yMt,"TFConvBertModel"),yMt.forEach(t),qmr=r(qRe," (ConvBERT model)"),qRe.forEach(t),jmr=i(D),E7=n(D,"LI",{});var jRe=s(E7);kbe=n(jRe,"STRONG",{});var xMt=s(kbe);Dmr=r(xMt,"convnext"),xMt.forEach(t),Gmr=r(jRe," \u2014 "),KW=n(jRe,"A",{href:!0});var $Mt=s(KW);Omr=r($Mt,"TFConvNextModel"),$Mt.forEach(t),Vmr=r(jRe," (ConvNeXT model)"),jRe.forEach(t),Xmr=i(D),C7=n(D,"LI",{});var DRe=s(C7);Sbe=n(DRe,"STRONG",{});var kMt=s(Sbe);zmr=r(kMt,"ctrl"),kMt.forEach(t),Wmr=r(DRe," \u2014 "),ZW=n(DRe,"A",{href:!0});var SMt=s(ZW);Qmr=r(SMt,"TFCTRLModel"),SMt.forEach(t),Hmr=r(DRe," (CTRL model)"),DRe.forEach(t),Umr=i(D),w7=n(D,"LI",{});var GRe=s(w7);Rbe=n(GRe,"STRONG",{});var RMt=s(Rbe);Jmr=r(RMt,"data2vec-vision"),RMt.forEach(t),Ymr=r(GRe," \u2014 "),eQ=n(GRe,"A",{href:!0});var PMt=s(eQ);Kmr=r(PMt,"TFData2VecVisionModel"),PMt.forEach(t),Zmr=r(GRe," (Data2VecVision model)"),GRe.forEach(t),egr=i(D),A7=n(D,"LI",{});var ORe=s(A7);Pbe=n(ORe,"STRONG",{});var BMt=s(Pbe);ogr=r(BMt,"deberta"),BMt.forEach(t),rgr=r(ORe," \u2014 "),oQ=n(ORe,"A",{href:!0});var IMt=s(oQ);tgr=r(IMt,"TFDebertaModel"),IMt.forEach(t),agr=r(ORe," (DeBERTa model)"),ORe.forEach(t),ngr=i(D),L7=n(D,"LI",{});var VRe=s(L7);Bbe=n(VRe,"STRONG",{});var NMt=s(Bbe);sgr=r(NMt,"deberta-v2"),NMt.forEach(t),lgr=r(VRe," \u2014 "),rQ=n(VRe,"A",{href:!0});var qMt=s(rQ);igr=r(qMt,"TFDebertaV2Model"),qMt.forEach(t),dgr=r(VRe," (DeBERTa-v2 model)"),VRe.forEach(t),cgr=i(D),y7=n(D,"LI",{});var XRe=s(y7);Ibe=n(XRe,"STRONG",{});var jMt=s(Ibe);fgr=r(jMt,"distilbert"),jMt.forEach(t),mgr=r(XRe," \u2014 "),tQ=n(XRe,"A",{href:!0});var DMt=s(tQ);ggr=r(DMt,"TFDistilBertModel"),DMt.forEach(t),hgr=r(XRe," (DistilBERT model)"),XRe.forEach(t),pgr=i(D),x7=n(D,"LI",{});var zRe=s(x7);Nbe=n(zRe,"STRONG",{});var GMt=s(Nbe);_gr=r(GMt,"dpr"),GMt.forEach(t),ugr=r(zRe," \u2014 "),aQ=n(zRe,"A",{href:!0});var OMt=s(aQ);bgr=r(OMt,"TFDPRQuestionEncoder"),OMt.forEach(t),vgr=r(zRe," (DPR model)"),zRe.forEach(t),Fgr=i(D),$7=n(D,"LI",{});var WRe=s($7);qbe=n(WRe,"STRONG",{});var VMt=s(qbe);Tgr=r(VMt,"electra"),VMt.forEach(t),Mgr=r(WRe," \u2014 "),nQ=n(WRe,"A",{href:!0});var XMt=s(nQ);Egr=r(XMt,"TFElectraModel"),XMt.forEach(t),Cgr=r(WRe," (ELECTRA model)"),WRe.forEach(t),wgr=i(D),k7=n(D,"LI",{});var QRe=s(k7);jbe=n(QRe,"STRONG",{});var zMt=s(jbe);Agr=r(zMt,"flaubert"),zMt.forEach(t),Lgr=r(QRe," \u2014 "),sQ=n(QRe,"A",{href:!0});var WMt=s(sQ);ygr=r(WMt,"TFFlaubertModel"),WMt.forEach(t),xgr=r(QRe," (FlauBERT model)"),QRe.forEach(t),$gr=i(D),qs=n(D,"LI",{});var ck=s(qs);Dbe=n(ck,"STRONG",{});var QMt=s(Dbe);kgr=r(QMt,"funnel"),QMt.forEach(t),Sgr=r(ck," \u2014 "),lQ=n(ck,"A",{href:!0});var HMt=s(lQ);Rgr=r(HMt,"TFFunnelModel"),HMt.forEach(t),Pgr=r(ck," or "),iQ=n(ck,"A",{href:!0});var UMt=s(iQ);Bgr=r(UMt,"TFFunnelBaseModel"),UMt.forEach(t),Igr=r(ck," (Funnel Transformer model)"),ck.forEach(t),Ngr=i(D),S7=n(D,"LI",{});var HRe=s(S7);Gbe=n(HRe,"STRONG",{});var JMt=s(Gbe);qgr=r(JMt,"gpt2"),JMt.forEach(t),jgr=r(HRe," \u2014 "),dQ=n(HRe,"A",{href:!0});var YMt=s(dQ);Dgr=r(YMt,"TFGPT2Model"),YMt.forEach(t),Ggr=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),Ogr=i(D),R7=n(D,"LI",{});var URe=s(R7);Obe=n(URe,"STRONG",{});var KMt=s(Obe);Vgr=r(KMt,"gptj"),KMt.forEach(t),Xgr=r(URe," \u2014 "),cQ=n(URe,"A",{href:!0});var ZMt=s(cQ);zgr=r(ZMt,"TFGPTJModel"),ZMt.forEach(t),Wgr=r(URe," (GPT-J model)"),URe.forEach(t),Qgr=i(D),P7=n(D,"LI",{});var JRe=s(P7);Vbe=n(JRe,"STRONG",{});var e4t=s(Vbe);Hgr=r(e4t,"hubert"),e4t.forEach(t),Ugr=r(JRe," \u2014 "),fQ=n(JRe,"A",{href:!0});var o4t=s(fQ);Jgr=r(o4t,"TFHubertModel"),o4t.forEach(t),Ygr=r(JRe," (Hubert model)"),JRe.forEach(t),Kgr=i(D),B7=n(D,"LI",{});var YRe=s(B7);Xbe=n(YRe,"STRONG",{});var r4t=s(Xbe);Zgr=r(r4t,"layoutlm"),r4t.forEach(t),ehr=r(YRe," \u2014 "),mQ=n(YRe,"A",{href:!0});var t4t=s(mQ);ohr=r(t4t,"TFLayoutLMModel"),t4t.forEach(t),rhr=r(YRe," (LayoutLM model)"),YRe.forEach(t),thr=i(D),I7=n(D,"LI",{});var KRe=s(I7);zbe=n(KRe,"STRONG",{});var a4t=s(zbe);ahr=r(a4t,"led"),a4t.forEach(t),nhr=r(KRe," \u2014 "),gQ=n(KRe,"A",{href:!0});var n4t=s(gQ);shr=r(n4t,"TFLEDModel"),n4t.forEach(t),lhr=r(KRe," (LED model)"),KRe.forEach(t),ihr=i(D),N7=n(D,"LI",{});var ZRe=s(N7);Wbe=n(ZRe,"STRONG",{});var s4t=s(Wbe);dhr=r(s4t,"longformer"),s4t.forEach(t),chr=r(ZRe," \u2014 "),hQ=n(ZRe,"A",{href:!0});var l4t=s(hQ);fhr=r(l4t,"TFLongformerModel"),l4t.forEach(t),mhr=r(ZRe," (Longformer model)"),ZRe.forEach(t),ghr=i(D),q7=n(D,"LI",{});var ePe=s(q7);Qbe=n(ePe,"STRONG",{});var i4t=s(Qbe);hhr=r(i4t,"lxmert"),i4t.forEach(t),phr=r(ePe," \u2014 "),pQ=n(ePe,"A",{href:!0});var d4t=s(pQ);_hr=r(d4t,"TFLxmertModel"),d4t.forEach(t),uhr=r(ePe," (LXMERT model)"),ePe.forEach(t),bhr=i(D),j7=n(D,"LI",{});var oPe=s(j7);Hbe=n(oPe,"STRONG",{});var c4t=s(Hbe);vhr=r(c4t,"marian"),c4t.forEach(t),Fhr=r(oPe," \u2014 "),_Q=n(oPe,"A",{href:!0});var f4t=s(_Q);Thr=r(f4t,"TFMarianModel"),f4t.forEach(t),Mhr=r(oPe," (Marian model)"),oPe.forEach(t),Ehr=i(D),D7=n(D,"LI",{});var rPe=s(D7);Ube=n(rPe,"STRONG",{});var m4t=s(Ube);Chr=r(m4t,"mbart"),m4t.forEach(t),whr=r(rPe," \u2014 "),uQ=n(rPe,"A",{href:!0});var g4t=s(uQ);Ahr=r(g4t,"TFMBartModel"),g4t.forEach(t),Lhr=r(rPe," (mBART model)"),rPe.forEach(t),yhr=i(D),G7=n(D,"LI",{});var tPe=s(G7);Jbe=n(tPe,"STRONG",{});var h4t=s(Jbe);xhr=r(h4t,"mobilebert"),h4t.forEach(t),$hr=r(tPe," \u2014 "),bQ=n(tPe,"A",{href:!0});var p4t=s(bQ);khr=r(p4t,"TFMobileBertModel"),p4t.forEach(t),Shr=r(tPe," (MobileBERT model)"),tPe.forEach(t),Rhr=i(D),O7=n(D,"LI",{});var aPe=s(O7);Ybe=n(aPe,"STRONG",{});var _4t=s(Ybe);Phr=r(_4t,"mpnet"),_4t.forEach(t),Bhr=r(aPe," \u2014 "),vQ=n(aPe,"A",{href:!0});var u4t=s(vQ);Ihr=r(u4t,"TFMPNetModel"),u4t.forEach(t),Nhr=r(aPe," (MPNet model)"),aPe.forEach(t),qhr=i(D),V7=n(D,"LI",{});var nPe=s(V7);Kbe=n(nPe,"STRONG",{});var b4t=s(Kbe);jhr=r(b4t,"mt5"),b4t.forEach(t),Dhr=r(nPe," \u2014 "),FQ=n(nPe,"A",{href:!0});var v4t=s(FQ);Ghr=r(v4t,"TFMT5Model"),v4t.forEach(t),Ohr=r(nPe," (MT5 model)"),nPe.forEach(t),Vhr=i(D),X7=n(D,"LI",{});var sPe=s(X7);Zbe=n(sPe,"STRONG",{});var F4t=s(Zbe);Xhr=r(F4t,"openai-gpt"),F4t.forEach(t),zhr=r(sPe," \u2014 "),TQ=n(sPe,"A",{href:!0});var T4t=s(TQ);Whr=r(T4t,"TFOpenAIGPTModel"),T4t.forEach(t),Qhr=r(sPe," (OpenAI GPT model)"),sPe.forEach(t),Hhr=i(D),z7=n(D,"LI",{});var lPe=s(z7);e2e=n(lPe,"STRONG",{});var M4t=s(e2e);Uhr=r(M4t,"opt"),M4t.forEach(t),Jhr=r(lPe," \u2014 "),MQ=n(lPe,"A",{href:!0});var E4t=s(MQ);Yhr=r(E4t,"TFOPTModel"),E4t.forEach(t),Khr=r(lPe," (OPT model)"),lPe.forEach(t),Zhr=i(D),W7=n(D,"LI",{});var iPe=s(W7);o2e=n(iPe,"STRONG",{});var C4t=s(o2e);epr=r(C4t,"pegasus"),C4t.forEach(t),opr=r(iPe," \u2014 "),EQ=n(iPe,"A",{href:!0});var w4t=s(EQ);rpr=r(w4t,"TFPegasusModel"),w4t.forEach(t),tpr=r(iPe," (Pegasus model)"),iPe.forEach(t),apr=i(D),Q7=n(D,"LI",{});var dPe=s(Q7);r2e=n(dPe,"STRONG",{});var A4t=s(r2e);npr=r(A4t,"rembert"),A4t.forEach(t),spr=r(dPe," \u2014 "),CQ=n(dPe,"A",{href:!0});var L4t=s(CQ);lpr=r(L4t,"TFRemBertModel"),L4t.forEach(t),ipr=r(dPe," (RemBERT model)"),dPe.forEach(t),dpr=i(D),H7=n(D,"LI",{});var cPe=s(H7);t2e=n(cPe,"STRONG",{});var y4t=s(t2e);cpr=r(y4t,"roberta"),y4t.forEach(t),fpr=r(cPe," \u2014 "),wQ=n(cPe,"A",{href:!0});var x4t=s(wQ);mpr=r(x4t,"TFRobertaModel"),x4t.forEach(t),gpr=r(cPe," (RoBERTa model)"),cPe.forEach(t),hpr=i(D),U7=n(D,"LI",{});var fPe=s(U7);a2e=n(fPe,"STRONG",{});var $4t=s(a2e);ppr=r($4t,"roformer"),$4t.forEach(t),_pr=r(fPe," \u2014 "),AQ=n(fPe,"A",{href:!0});var k4t=s(AQ);upr=r(k4t,"TFRoFormerModel"),k4t.forEach(t),bpr=r(fPe," (RoFormer model)"),fPe.forEach(t),vpr=i(D),J7=n(D,"LI",{});var mPe=s(J7);n2e=n(mPe,"STRONG",{});var S4t=s(n2e);Fpr=r(S4t,"speech_to_text"),S4t.forEach(t),Tpr=r(mPe," \u2014 "),LQ=n(mPe,"A",{href:!0});var R4t=s(LQ);Mpr=r(R4t,"TFSpeech2TextModel"),R4t.forEach(t),Epr=r(mPe," (Speech2Text model)"),mPe.forEach(t),Cpr=i(D),Y7=n(D,"LI",{});var gPe=s(Y7);s2e=n(gPe,"STRONG",{});var P4t=s(s2e);wpr=r(P4t,"swin"),P4t.forEach(t),Apr=r(gPe," \u2014 "),yQ=n(gPe,"A",{href:!0});var B4t=s(yQ);Lpr=r(B4t,"TFSwinModel"),B4t.forEach(t),ypr=r(gPe," (Swin Transformer model)"),gPe.forEach(t),xpr=i(D),K7=n(D,"LI",{});var hPe=s(K7);l2e=n(hPe,"STRONG",{});var I4t=s(l2e);$pr=r(I4t,"t5"),I4t.forEach(t),kpr=r(hPe," \u2014 "),xQ=n(hPe,"A",{href:!0});var N4t=s(xQ);Spr=r(N4t,"TFT5Model"),N4t.forEach(t),Rpr=r(hPe," (T5 model)"),hPe.forEach(t),Ppr=i(D),Z7=n(D,"LI",{});var pPe=s(Z7);i2e=n(pPe,"STRONG",{});var q4t=s(i2e);Bpr=r(q4t,"tapas"),q4t.forEach(t),Ipr=r(pPe," \u2014 "),$Q=n(pPe,"A",{href:!0});var j4t=s($Q);Npr=r(j4t,"TFTapasModel"),j4t.forEach(t),qpr=r(pPe," (TAPAS model)"),pPe.forEach(t),jpr=i(D),eM=n(D,"LI",{});var _Pe=s(eM);d2e=n(_Pe,"STRONG",{});var D4t=s(d2e);Dpr=r(D4t,"transfo-xl"),D4t.forEach(t),Gpr=r(_Pe," \u2014 "),kQ=n(_Pe,"A",{href:!0});var G4t=s(kQ);Opr=r(G4t,"TFTransfoXLModel"),G4t.forEach(t),Vpr=r(_Pe," (Transformer-XL model)"),_Pe.forEach(t),Xpr=i(D),oM=n(D,"LI",{});var uPe=s(oM);c2e=n(uPe,"STRONG",{});var O4t=s(c2e);zpr=r(O4t,"vit"),O4t.forEach(t),Wpr=r(uPe," \u2014 "),SQ=n(uPe,"A",{href:!0});var V4t=s(SQ);Qpr=r(V4t,"TFViTModel"),V4t.forEach(t),Hpr=r(uPe," (ViT model)"),uPe.forEach(t),Upr=i(D),rM=n(D,"LI",{});var bPe=s(rM);f2e=n(bPe,"STRONG",{});var X4t=s(f2e);Jpr=r(X4t,"vit_mae"),X4t.forEach(t),Ypr=r(bPe," \u2014 "),RQ=n(bPe,"A",{href:!0});var z4t=s(RQ);Kpr=r(z4t,"TFViTMAEModel"),z4t.forEach(t),Zpr=r(bPe," (ViTMAE model)"),bPe.forEach(t),e_r=i(D),tM=n(D,"LI",{});var vPe=s(tM);m2e=n(vPe,"STRONG",{});var W4t=s(m2e);o_r=r(W4t,"wav2vec2"),W4t.forEach(t),r_r=r(vPe," \u2014 "),PQ=n(vPe,"A",{href:!0});var Q4t=s(PQ);t_r=r(Q4t,"TFWav2Vec2Model"),Q4t.forEach(t),a_r=r(vPe," (Wav2Vec2 model)"),vPe.forEach(t),n_r=i(D),aM=n(D,"LI",{});var FPe=s(aM);g2e=n(FPe,"STRONG",{});var H4t=s(g2e);s_r=r(H4t,"xlm"),H4t.forEach(t),l_r=r(FPe," \u2014 "),BQ=n(FPe,"A",{href:!0});var U4t=s(BQ);i_r=r(U4t,"TFXLMModel"),U4t.forEach(t),d_r=r(FPe," (XLM model)"),FPe.forEach(t),c_r=i(D),nM=n(D,"LI",{});var TPe=s(nM);h2e=n(TPe,"STRONG",{});var J4t=s(h2e);f_r=r(J4t,"xlm-roberta"),J4t.forEach(t),m_r=r(TPe," \u2014 "),IQ=n(TPe,"A",{href:!0});var Y4t=s(IQ);g_r=r(Y4t,"TFXLMRobertaModel"),Y4t.forEach(t),h_r=r(TPe," (XLM-RoBERTa model)"),TPe.forEach(t),p_r=i(D),sM=n(D,"LI",{});var MPe=s(sM);p2e=n(MPe,"STRONG",{});var K4t=s(p2e);__r=r(K4t,"xlnet"),K4t.forEach(t),u_r=r(MPe," \u2014 "),NQ=n(MPe,"A",{href:!0});var Z4t=s(NQ);b_r=r(Z4t,"TFXLNetModel"),Z4t.forEach(t),v_r=r(MPe," (XLNet model)"),MPe.forEach(t),D.forEach(t),F_r=i(_l),T(lM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),wDe=i(f),Wd=n(f,"H2",{class:!0});var kOe=s(Wd);iM=n(kOe,"A",{id:!0,class:!0,href:!0});var eEt=s(iM);_2e=n(eEt,"SPAN",{});var oEt=s(_2e);T(k8.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),T_r=i(kOe),u2e=n(kOe,"SPAN",{});var rEt=s(u2e);M_r=r(rEt,"TFAutoModelForPreTraining"),rEt.forEach(t),kOe.forEach(t),ADe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(S8.$$.fragment,ul),E_r=i(ul),Qd=n(ul,"P",{});var Jee=s(Qd);C_r=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qQ=n(Jee,"A",{href:!0});var tEt=s(qQ);w_r=r(tEt,"from_pretrained()"),tEt.forEach(t),A_r=r(Jee," class method or the "),jQ=n(Jee,"A",{href:!0});var aEt=s(jQ);L_r=r(aEt,"from_config()"),aEt.forEach(t),y_r=r(Jee,` class
method.`),Jee.forEach(t),x_r=i(ul),R8=n(ul,"P",{});var SOe=s(R8);$_r=r(SOe,"This class cannot be instantiated directly using "),b2e=n(SOe,"CODE",{});var nEt=s(b2e);k_r=r(nEt,"__init__()"),nEt.forEach(t),S_r=r(SOe," (throws an error)."),SOe.forEach(t),R_r=i(ul),yt=n(ul,"DIV",{class:!0});var XA=s(yt);T(P8.$$.fragment,XA),P_r=i(XA),v2e=n(XA,"P",{});var sEt=s(v2e);B_r=r(sEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sEt.forEach(t),I_r=i(XA),Hd=n(XA,"P",{});var Yee=s(Hd);N_r=r(Yee,`Note:
Loading a model from its configuration file does `),F2e=n(Yee,"STRONG",{});var lEt=s(F2e);q_r=r(lEt,"not"),lEt.forEach(t),j_r=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(Yee,"A",{href:!0});var iEt=s(DQ);D_r=r(iEt,"from_pretrained()"),iEt.forEach(t),G_r=r(Yee," to load the model weights."),Yee.forEach(t),O_r=i(XA),T(dM.$$.fragment,XA),XA.forEach(t),V_r=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(B8.$$.fragment,bl),X_r=i(bl),T2e=n(bl,"P",{});var dEt=s(T2e);z_r=r(dEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dEt.forEach(t),W_r=i(bl),Za=n(bl,"P",{});var zA=s(Za);Q_r=r(zA,"The model class to instantiate is selected based on the "),M2e=n(zA,"CODE",{});var cEt=s(M2e);H_r=r(cEt,"model_type"),cEt.forEach(t),U_r=r(zA,` property of the config object (either
passed as an argument or loaded from `),E2e=n(zA,"CODE",{});var fEt=s(E2e);J_r=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),Y_r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(zA,"CODE",{});var mEt=s(C2e);K_r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),Z_r=r(zA,":"),zA.forEach(t),eur=i(bl),se=n(bl,"UL",{});var le=s(se);cM=n(le,"LI",{});var EPe=s(cM);w2e=n(EPe,"STRONG",{});var gEt=s(w2e);our=r(gEt,"albert"),gEt.forEach(t),rur=r(EPe," \u2014 "),GQ=n(EPe,"A",{href:!0});var hEt=s(GQ);tur=r(hEt,"TFAlbertForPreTraining"),hEt.forEach(t),aur=r(EPe," (ALBERT model)"),EPe.forEach(t),nur=i(le),fM=n(le,"LI",{});var CPe=s(fM);A2e=n(CPe,"STRONG",{});var pEt=s(A2e);sur=r(pEt,"bart"),pEt.forEach(t),lur=r(CPe," \u2014 "),OQ=n(CPe,"A",{href:!0});var _Et=s(OQ);iur=r(_Et,"TFBartForConditionalGeneration"),_Et.forEach(t),dur=r(CPe," (BART model)"),CPe.forEach(t),cur=i(le),mM=n(le,"LI",{});var wPe=s(mM);L2e=n(wPe,"STRONG",{});var uEt=s(L2e);fur=r(uEt,"bert"),uEt.forEach(t),mur=r(wPe," \u2014 "),VQ=n(wPe,"A",{href:!0});var bEt=s(VQ);gur=r(bEt,"TFBertForPreTraining"),bEt.forEach(t),hur=r(wPe," (BERT model)"),wPe.forEach(t),pur=i(le),gM=n(le,"LI",{});var APe=s(gM);y2e=n(APe,"STRONG",{});var vEt=s(y2e);_ur=r(vEt,"camembert"),vEt.forEach(t),uur=r(APe," \u2014 "),XQ=n(APe,"A",{href:!0});var FEt=s(XQ);bur=r(FEt,"TFCamembertForMaskedLM"),FEt.forEach(t),vur=r(APe," (CamemBERT model)"),APe.forEach(t),Fur=i(le),hM=n(le,"LI",{});var LPe=s(hM);x2e=n(LPe,"STRONG",{});var TEt=s(x2e);Tur=r(TEt,"ctrl"),TEt.forEach(t),Mur=r(LPe," \u2014 "),zQ=n(LPe,"A",{href:!0});var MEt=s(zQ);Eur=r(MEt,"TFCTRLLMHeadModel"),MEt.forEach(t),Cur=r(LPe," (CTRL model)"),LPe.forEach(t),wur=i(le),pM=n(le,"LI",{});var yPe=s(pM);$2e=n(yPe,"STRONG",{});var EEt=s($2e);Aur=r(EEt,"distilbert"),EEt.forEach(t),Lur=r(yPe," \u2014 "),WQ=n(yPe,"A",{href:!0});var CEt=s(WQ);yur=r(CEt,"TFDistilBertForMaskedLM"),CEt.forEach(t),xur=r(yPe," (DistilBERT model)"),yPe.forEach(t),$ur=i(le),_M=n(le,"LI",{});var xPe=s(_M);k2e=n(xPe,"STRONG",{});var wEt=s(k2e);kur=r(wEt,"electra"),wEt.forEach(t),Sur=r(xPe," \u2014 "),QQ=n(xPe,"A",{href:!0});var AEt=s(QQ);Rur=r(AEt,"TFElectraForPreTraining"),AEt.forEach(t),Pur=r(xPe," (ELECTRA model)"),xPe.forEach(t),Bur=i(le),uM=n(le,"LI",{});var $Pe=s(uM);S2e=n($Pe,"STRONG",{});var LEt=s(S2e);Iur=r(LEt,"flaubert"),LEt.forEach(t),Nur=r($Pe," \u2014 "),HQ=n($Pe,"A",{href:!0});var yEt=s(HQ);qur=r(yEt,"TFFlaubertWithLMHeadModel"),yEt.forEach(t),jur=r($Pe," (FlauBERT model)"),$Pe.forEach(t),Dur=i(le),bM=n(le,"LI",{});var kPe=s(bM);R2e=n(kPe,"STRONG",{});var xEt=s(R2e);Gur=r(xEt,"funnel"),xEt.forEach(t),Our=r(kPe," \u2014 "),UQ=n(kPe,"A",{href:!0});var $Et=s(UQ);Vur=r($Et,"TFFunnelForPreTraining"),$Et.forEach(t),Xur=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),zur=i(le),vM=n(le,"LI",{});var SPe=s(vM);P2e=n(SPe,"STRONG",{});var kEt=s(P2e);Wur=r(kEt,"gpt2"),kEt.forEach(t),Qur=r(SPe," \u2014 "),JQ=n(SPe,"A",{href:!0});var SEt=s(JQ);Hur=r(SEt,"TFGPT2LMHeadModel"),SEt.forEach(t),Uur=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),Jur=i(le),FM=n(le,"LI",{});var RPe=s(FM);B2e=n(RPe,"STRONG",{});var REt=s(B2e);Yur=r(REt,"layoutlm"),REt.forEach(t),Kur=r(RPe," \u2014 "),YQ=n(RPe,"A",{href:!0});var PEt=s(YQ);Zur=r(PEt,"TFLayoutLMForMaskedLM"),PEt.forEach(t),e1r=r(RPe," (LayoutLM model)"),RPe.forEach(t),o1r=i(le),TM=n(le,"LI",{});var PPe=s(TM);I2e=n(PPe,"STRONG",{});var BEt=s(I2e);r1r=r(BEt,"lxmert"),BEt.forEach(t),t1r=r(PPe," \u2014 "),KQ=n(PPe,"A",{href:!0});var IEt=s(KQ);a1r=r(IEt,"TFLxmertForPreTraining"),IEt.forEach(t),n1r=r(PPe," (LXMERT model)"),PPe.forEach(t),s1r=i(le),MM=n(le,"LI",{});var BPe=s(MM);N2e=n(BPe,"STRONG",{});var NEt=s(N2e);l1r=r(NEt,"mobilebert"),NEt.forEach(t),i1r=r(BPe," \u2014 "),ZQ=n(BPe,"A",{href:!0});var qEt=s(ZQ);d1r=r(qEt,"TFMobileBertForPreTraining"),qEt.forEach(t),c1r=r(BPe," (MobileBERT model)"),BPe.forEach(t),f1r=i(le),EM=n(le,"LI",{});var IPe=s(EM);q2e=n(IPe,"STRONG",{});var jEt=s(q2e);m1r=r(jEt,"mpnet"),jEt.forEach(t),g1r=r(IPe," \u2014 "),eH=n(IPe,"A",{href:!0});var DEt=s(eH);h1r=r(DEt,"TFMPNetForMaskedLM"),DEt.forEach(t),p1r=r(IPe," (MPNet model)"),IPe.forEach(t),_1r=i(le),CM=n(le,"LI",{});var NPe=s(CM);j2e=n(NPe,"STRONG",{});var GEt=s(j2e);u1r=r(GEt,"openai-gpt"),GEt.forEach(t),b1r=r(NPe," \u2014 "),oH=n(NPe,"A",{href:!0});var OEt=s(oH);v1r=r(OEt,"TFOpenAIGPTLMHeadModel"),OEt.forEach(t),F1r=r(NPe," (OpenAI GPT model)"),NPe.forEach(t),T1r=i(le),wM=n(le,"LI",{});var qPe=s(wM);D2e=n(qPe,"STRONG",{});var VEt=s(D2e);M1r=r(VEt,"roberta"),VEt.forEach(t),E1r=r(qPe," \u2014 "),rH=n(qPe,"A",{href:!0});var XEt=s(rH);C1r=r(XEt,"TFRobertaForMaskedLM"),XEt.forEach(t),w1r=r(qPe," (RoBERTa model)"),qPe.forEach(t),A1r=i(le),AM=n(le,"LI",{});var jPe=s(AM);G2e=n(jPe,"STRONG",{});var zEt=s(G2e);L1r=r(zEt,"t5"),zEt.forEach(t),y1r=r(jPe," \u2014 "),tH=n(jPe,"A",{href:!0});var WEt=s(tH);x1r=r(WEt,"TFT5ForConditionalGeneration"),WEt.forEach(t),$1r=r(jPe," (T5 model)"),jPe.forEach(t),k1r=i(le),LM=n(le,"LI",{});var DPe=s(LM);O2e=n(DPe,"STRONG",{});var QEt=s(O2e);S1r=r(QEt,"tapas"),QEt.forEach(t),R1r=r(DPe," \u2014 "),aH=n(DPe,"A",{href:!0});var HEt=s(aH);P1r=r(HEt,"TFTapasForMaskedLM"),HEt.forEach(t),B1r=r(DPe," (TAPAS model)"),DPe.forEach(t),I1r=i(le),yM=n(le,"LI",{});var GPe=s(yM);V2e=n(GPe,"STRONG",{});var UEt=s(V2e);N1r=r(UEt,"transfo-xl"),UEt.forEach(t),q1r=r(GPe," \u2014 "),nH=n(GPe,"A",{href:!0});var JEt=s(nH);j1r=r(JEt,"TFTransfoXLLMHeadModel"),JEt.forEach(t),D1r=r(GPe," (Transformer-XL model)"),GPe.forEach(t),G1r=i(le),xM=n(le,"LI",{});var OPe=s(xM);X2e=n(OPe,"STRONG",{});var YEt=s(X2e);O1r=r(YEt,"vit_mae"),YEt.forEach(t),V1r=r(OPe," \u2014 "),sH=n(OPe,"A",{href:!0});var KEt=s(sH);X1r=r(KEt,"TFViTMAEForPreTraining"),KEt.forEach(t),z1r=r(OPe," (ViTMAE model)"),OPe.forEach(t),W1r=i(le),$M=n(le,"LI",{});var VPe=s($M);z2e=n(VPe,"STRONG",{});var ZEt=s(z2e);Q1r=r(ZEt,"xlm"),ZEt.forEach(t),H1r=r(VPe," \u2014 "),lH=n(VPe,"A",{href:!0});var eCt=s(lH);U1r=r(eCt,"TFXLMWithLMHeadModel"),eCt.forEach(t),J1r=r(VPe," (XLM model)"),VPe.forEach(t),Y1r=i(le),kM=n(le,"LI",{});var XPe=s(kM);W2e=n(XPe,"STRONG",{});var oCt=s(W2e);K1r=r(oCt,"xlm-roberta"),oCt.forEach(t),Z1r=r(XPe," \u2014 "),iH=n(XPe,"A",{href:!0});var rCt=s(iH);e3r=r(rCt,"TFXLMRobertaForMaskedLM"),rCt.forEach(t),o3r=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),r3r=i(le),SM=n(le,"LI",{});var zPe=s(SM);Q2e=n(zPe,"STRONG",{});var tCt=s(Q2e);t3r=r(tCt,"xlnet"),tCt.forEach(t),a3r=r(zPe," \u2014 "),dH=n(zPe,"A",{href:!0});var aCt=s(dH);n3r=r(aCt,"TFXLNetLMHeadModel"),aCt.forEach(t),s3r=r(zPe," (XLNet model)"),zPe.forEach(t),le.forEach(t),l3r=i(bl),T(RM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),LDe=i(f),Ud=n(f,"H2",{class:!0});var ROe=s(Ud);PM=n(ROe,"A",{id:!0,class:!0,href:!0});var nCt=s(PM);H2e=n(nCt,"SPAN",{});var sCt=s(H2e);T(I8.$$.fragment,sCt),sCt.forEach(t),nCt.forEach(t),i3r=i(ROe),U2e=n(ROe,"SPAN",{});var lCt=s(U2e);d3r=r(lCt,"TFAutoModelForCausalLM"),lCt.forEach(t),ROe.forEach(t),yDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(N8.$$.fragment,vl),c3r=i(vl),Jd=n(vl,"P",{});var Kee=s(Jd);f3r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cH=n(Kee,"A",{href:!0});var iCt=s(cH);m3r=r(iCt,"from_pretrained()"),iCt.forEach(t),g3r=r(Kee," class method or the "),fH=n(Kee,"A",{href:!0});var dCt=s(fH);h3r=r(dCt,"from_config()"),dCt.forEach(t),p3r=r(Kee,` class
method.`),Kee.forEach(t),_3r=i(vl),q8=n(vl,"P",{});var POe=s(q8);u3r=r(POe,"This class cannot be instantiated directly using "),J2e=n(POe,"CODE",{});var cCt=s(J2e);b3r=r(cCt,"__init__()"),cCt.forEach(t),v3r=r(POe," (throws an error)."),POe.forEach(t),F3r=i(vl),xt=n(vl,"DIV",{class:!0});var WA=s(xt);T(j8.$$.fragment,WA),T3r=i(WA),Y2e=n(WA,"P",{});var fCt=s(Y2e);M3r=r(fCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fCt.forEach(t),E3r=i(WA),Yd=n(WA,"P",{});var Zee=s(Yd);C3r=r(Zee,`Note:
Loading a model from its configuration file does `),K2e=n(Zee,"STRONG",{});var mCt=s(K2e);w3r=r(mCt,"not"),mCt.forEach(t),A3r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(Zee,"A",{href:!0});var gCt=s(mH);L3r=r(gCt,"from_pretrained()"),gCt.forEach(t),y3r=r(Zee," to load the model weights."),Zee.forEach(t),x3r=i(WA),T(BM.$$.fragment,WA),WA.forEach(t),$3r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(D8.$$.fragment,Fl),k3r=i(Fl),Z2e=n(Fl,"P",{});var hCt=s(Z2e);S3r=r(hCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hCt.forEach(t),R3r=i(Fl),en=n(Fl,"P",{});var QA=s(en);P3r=r(QA,"The model class to instantiate is selected based on the "),eve=n(QA,"CODE",{});var pCt=s(eve);B3r=r(pCt,"model_type"),pCt.forEach(t),I3r=r(QA,` property of the config object (either
passed as an argument or loaded from `),ove=n(QA,"CODE",{});var _Ct=s(ove);N3r=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),q3r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(QA,"CODE",{});var uCt=s(rve);j3r=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),D3r=r(QA,":"),QA.forEach(t),G3r=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);IM=n(Ce,"LI",{});var WPe=s(IM);tve=n(WPe,"STRONG",{});var bCt=s(tve);O3r=r(bCt,"bert"),bCt.forEach(t),V3r=r(WPe," \u2014 "),gH=n(WPe,"A",{href:!0});var vCt=s(gH);X3r=r(vCt,"TFBertLMHeadModel"),vCt.forEach(t),z3r=r(WPe," (BERT model)"),WPe.forEach(t),W3r=i(Ce),NM=n(Ce,"LI",{});var QPe=s(NM);ave=n(QPe,"STRONG",{});var FCt=s(ave);Q3r=r(FCt,"camembert"),FCt.forEach(t),H3r=r(QPe," \u2014 "),hH=n(QPe,"A",{href:!0});var TCt=s(hH);U3r=r(TCt,"TFCamembertForCausalLM"),TCt.forEach(t),J3r=r(QPe," (CamemBERT model)"),QPe.forEach(t),Y3r=i(Ce),qM=n(Ce,"LI",{});var HPe=s(qM);nve=n(HPe,"STRONG",{});var MCt=s(nve);K3r=r(MCt,"ctrl"),MCt.forEach(t),Z3r=r(HPe," \u2014 "),pH=n(HPe,"A",{href:!0});var ECt=s(pH);ebr=r(ECt,"TFCTRLLMHeadModel"),ECt.forEach(t),obr=r(HPe," (CTRL model)"),HPe.forEach(t),rbr=i(Ce),jM=n(Ce,"LI",{});var UPe=s(jM);sve=n(UPe,"STRONG",{});var CCt=s(sve);tbr=r(CCt,"gpt2"),CCt.forEach(t),abr=r(UPe," \u2014 "),_H=n(UPe,"A",{href:!0});var wCt=s(_H);nbr=r(wCt,"TFGPT2LMHeadModel"),wCt.forEach(t),sbr=r(UPe," (OpenAI GPT-2 model)"),UPe.forEach(t),lbr=i(Ce),DM=n(Ce,"LI",{});var JPe=s(DM);lve=n(JPe,"STRONG",{});var ACt=s(lve);ibr=r(ACt,"gptj"),ACt.forEach(t),dbr=r(JPe," \u2014 "),uH=n(JPe,"A",{href:!0});var LCt=s(uH);cbr=r(LCt,"TFGPTJForCausalLM"),LCt.forEach(t),fbr=r(JPe," (GPT-J model)"),JPe.forEach(t),mbr=i(Ce),GM=n(Ce,"LI",{});var YPe=s(GM);ive=n(YPe,"STRONG",{});var yCt=s(ive);gbr=r(yCt,"openai-gpt"),yCt.forEach(t),hbr=r(YPe," \u2014 "),bH=n(YPe,"A",{href:!0});var xCt=s(bH);pbr=r(xCt,"TFOpenAIGPTLMHeadModel"),xCt.forEach(t),_br=r(YPe," (OpenAI GPT model)"),YPe.forEach(t),ubr=i(Ce),OM=n(Ce,"LI",{});var KPe=s(OM);dve=n(KPe,"STRONG",{});var $Ct=s(dve);bbr=r($Ct,"opt"),$Ct.forEach(t),vbr=r(KPe," \u2014 "),vH=n(KPe,"A",{href:!0});var kCt=s(vH);Fbr=r(kCt,"TFOPTForCausalLM"),kCt.forEach(t),Tbr=r(KPe," (OPT model)"),KPe.forEach(t),Mbr=i(Ce),VM=n(Ce,"LI",{});var ZPe=s(VM);cve=n(ZPe,"STRONG",{});var SCt=s(cve);Ebr=r(SCt,"rembert"),SCt.forEach(t),Cbr=r(ZPe," \u2014 "),FH=n(ZPe,"A",{href:!0});var RCt=s(FH);wbr=r(RCt,"TFRemBertForCausalLM"),RCt.forEach(t),Abr=r(ZPe," (RemBERT model)"),ZPe.forEach(t),Lbr=i(Ce),XM=n(Ce,"LI",{});var eBe=s(XM);fve=n(eBe,"STRONG",{});var PCt=s(fve);ybr=r(PCt,"roberta"),PCt.forEach(t),xbr=r(eBe," \u2014 "),TH=n(eBe,"A",{href:!0});var BCt=s(TH);$br=r(BCt,"TFRobertaForCausalLM"),BCt.forEach(t),kbr=r(eBe," (RoBERTa model)"),eBe.forEach(t),Sbr=i(Ce),zM=n(Ce,"LI",{});var oBe=s(zM);mve=n(oBe,"STRONG",{});var ICt=s(mve);Rbr=r(ICt,"roformer"),ICt.forEach(t),Pbr=r(oBe," \u2014 "),MH=n(oBe,"A",{href:!0});var NCt=s(MH);Bbr=r(NCt,"TFRoFormerForCausalLM"),NCt.forEach(t),Ibr=r(oBe," (RoFormer model)"),oBe.forEach(t),Nbr=i(Ce),WM=n(Ce,"LI",{});var rBe=s(WM);gve=n(rBe,"STRONG",{});var qCt=s(gve);qbr=r(qCt,"transfo-xl"),qCt.forEach(t),jbr=r(rBe," \u2014 "),EH=n(rBe,"A",{href:!0});var jCt=s(EH);Dbr=r(jCt,"TFTransfoXLLMHeadModel"),jCt.forEach(t),Gbr=r(rBe," (Transformer-XL model)"),rBe.forEach(t),Obr=i(Ce),QM=n(Ce,"LI",{});var tBe=s(QM);hve=n(tBe,"STRONG",{});var DCt=s(hve);Vbr=r(DCt,"xlm"),DCt.forEach(t),Xbr=r(tBe," \u2014 "),CH=n(tBe,"A",{href:!0});var GCt=s(CH);zbr=r(GCt,"TFXLMWithLMHeadModel"),GCt.forEach(t),Wbr=r(tBe," (XLM model)"),tBe.forEach(t),Qbr=i(Ce),HM=n(Ce,"LI",{});var aBe=s(HM);pve=n(aBe,"STRONG",{});var OCt=s(pve);Hbr=r(OCt,"xlnet"),OCt.forEach(t),Ubr=r(aBe," \u2014 "),wH=n(aBe,"A",{href:!0});var VCt=s(wH);Jbr=r(VCt,"TFXLNetLMHeadModel"),VCt.forEach(t),Ybr=r(aBe," (XLNet model)"),aBe.forEach(t),Ce.forEach(t),Kbr=i(Fl),T(UM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),xDe=i(f),Kd=n(f,"H2",{class:!0});var BOe=s(Kd);JM=n(BOe,"A",{id:!0,class:!0,href:!0});var XCt=s(JM);_ve=n(XCt,"SPAN",{});var zCt=s(_ve);T(G8.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),Zbr=i(BOe),uve=n(BOe,"SPAN",{});var WCt=s(uve);e2r=r(WCt,"TFAutoModelForImageClassification"),WCt.forEach(t),BOe.forEach(t),$De=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(O8.$$.fragment,Tl),o2r=i(Tl),Zd=n(Tl,"P",{});var eoe=s(Zd);r2r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AH=n(eoe,"A",{href:!0});var QCt=s(AH);t2r=r(QCt,"from_pretrained()"),QCt.forEach(t),a2r=r(eoe," class method or the "),LH=n(eoe,"A",{href:!0});var HCt=s(LH);n2r=r(HCt,"from_config()"),HCt.forEach(t),s2r=r(eoe,` class
method.`),eoe.forEach(t),l2r=i(Tl),V8=n(Tl,"P",{});var IOe=s(V8);i2r=r(IOe,"This class cannot be instantiated directly using "),bve=n(IOe,"CODE",{});var UCt=s(bve);d2r=r(UCt,"__init__()"),UCt.forEach(t),c2r=r(IOe," (throws an error)."),IOe.forEach(t),f2r=i(Tl),$t=n(Tl,"DIV",{class:!0});var HA=s($t);T(X8.$$.fragment,HA),m2r=i(HA),vve=n(HA,"P",{});var JCt=s(vve);g2r=r(JCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),JCt.forEach(t),h2r=i(HA),ec=n(HA,"P",{});var ooe=s(ec);p2r=r(ooe,`Note:
Loading a model from its configuration file does `),Fve=n(ooe,"STRONG",{});var YCt=s(Fve);_2r=r(YCt,"not"),YCt.forEach(t),u2r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(ooe,"A",{href:!0});var KCt=s(yH);b2r=r(KCt,"from_pretrained()"),KCt.forEach(t),v2r=r(ooe," to load the model weights."),ooe.forEach(t),F2r=i(HA),T(YM.$$.fragment,HA),HA.forEach(t),T2r=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(z8.$$.fragment,Ml),M2r=i(Ml),Tve=n(Ml,"P",{});var ZCt=s(Tve);E2r=r(ZCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZCt.forEach(t),C2r=i(Ml),on=n(Ml,"P",{});var UA=s(on);w2r=r(UA,"The model class to instantiate is selected based on the "),Mve=n(UA,"CODE",{});var e5t=s(Mve);A2r=r(e5t,"model_type"),e5t.forEach(t),L2r=r(UA,` property of the config object (either
passed as an argument or loaded from `),Eve=n(UA,"CODE",{});var o5t=s(Eve);y2r=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),x2r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(UA,"CODE",{});var r5t=s(Cve);$2r=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),k2r=r(UA,":"),UA.forEach(t),S2r=i(Ml),rn=n(Ml,"UL",{});var JA=s(rn);KM=n(JA,"LI",{});var nBe=s(KM);wve=n(nBe,"STRONG",{});var t5t=s(wve);R2r=r(t5t,"convnext"),t5t.forEach(t),P2r=r(nBe," \u2014 "),xH=n(nBe,"A",{href:!0});var a5t=s(xH);B2r=r(a5t,"TFConvNextForImageClassification"),a5t.forEach(t),I2r=r(nBe," (ConvNeXT model)"),nBe.forEach(t),N2r=i(JA),ZM=n(JA,"LI",{});var sBe=s(ZM);Ave=n(sBe,"STRONG",{});var n5t=s(Ave);q2r=r(n5t,"data2vec-vision"),n5t.forEach(t),j2r=r(sBe," \u2014 "),$H=n(sBe,"A",{href:!0});var s5t=s($H);D2r=r(s5t,"TFData2VecVisionForImageClassification"),s5t.forEach(t),G2r=r(sBe," (Data2VecVision model)"),sBe.forEach(t),O2r=i(JA),e4=n(JA,"LI",{});var lBe=s(e4);Lve=n(lBe,"STRONG",{});var l5t=s(Lve);V2r=r(l5t,"swin"),l5t.forEach(t),X2r=r(lBe," \u2014 "),kH=n(lBe,"A",{href:!0});var i5t=s(kH);z2r=r(i5t,"TFSwinForImageClassification"),i5t.forEach(t),W2r=r(lBe," (Swin Transformer model)"),lBe.forEach(t),Q2r=i(JA),o4=n(JA,"LI",{});var iBe=s(o4);yve=n(iBe,"STRONG",{});var d5t=s(yve);H2r=r(d5t,"vit"),d5t.forEach(t),U2r=r(iBe," \u2014 "),SH=n(iBe,"A",{href:!0});var c5t=s(SH);J2r=r(c5t,"TFViTForImageClassification"),c5t.forEach(t),Y2r=r(iBe," (ViT model)"),iBe.forEach(t),JA.forEach(t),K2r=i(Ml),T(r4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),kDe=i(f),oc=n(f,"H2",{class:!0});var NOe=s(oc);t4=n(NOe,"A",{id:!0,class:!0,href:!0});var f5t=s(t4);xve=n(f5t,"SPAN",{});var m5t=s(xve);T(W8.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),Z2r=i(NOe),$ve=n(NOe,"SPAN",{});var g5t=s($ve);evr=r(g5t,"TFAutoModelForMaskedLM"),g5t.forEach(t),NOe.forEach(t),SDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(Q8.$$.fragment,El),ovr=i(El),rc=n(El,"P",{});var roe=s(rc);rvr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RH=n(roe,"A",{href:!0});var h5t=s(RH);tvr=r(h5t,"from_pretrained()"),h5t.forEach(t),avr=r(roe," class method or the "),PH=n(roe,"A",{href:!0});var p5t=s(PH);nvr=r(p5t,"from_config()"),p5t.forEach(t),svr=r(roe,` class
method.`),roe.forEach(t),lvr=i(El),H8=n(El,"P",{});var qOe=s(H8);ivr=r(qOe,"This class cannot be instantiated directly using "),kve=n(qOe,"CODE",{});var _5t=s(kve);dvr=r(_5t,"__init__()"),_5t.forEach(t),cvr=r(qOe," (throws an error)."),qOe.forEach(t),fvr=i(El),kt=n(El,"DIV",{class:!0});var YA=s(kt);T(U8.$$.fragment,YA),mvr=i(YA),Sve=n(YA,"P",{});var u5t=s(Sve);gvr=r(u5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u5t.forEach(t),hvr=i(YA),tc=n(YA,"P",{});var toe=s(tc);pvr=r(toe,`Note:
Loading a model from its configuration file does `),Rve=n(toe,"STRONG",{});var b5t=s(Rve);_vr=r(b5t,"not"),b5t.forEach(t),uvr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(toe,"A",{href:!0});var v5t=s(BH);bvr=r(v5t,"from_pretrained()"),v5t.forEach(t),vvr=r(toe," to load the model weights."),toe.forEach(t),Fvr=i(YA),T(a4.$$.fragment,YA),YA.forEach(t),Tvr=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(J8.$$.fragment,Cl),Mvr=i(Cl),Pve=n(Cl,"P",{});var F5t=s(Pve);Evr=r(F5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F5t.forEach(t),Cvr=i(Cl),tn=n(Cl,"P",{});var KA=s(tn);wvr=r(KA,"The model class to instantiate is selected based on the "),Bve=n(KA,"CODE",{});var T5t=s(Bve);Avr=r(T5t,"model_type"),T5t.forEach(t),Lvr=r(KA,` property of the config object (either
passed as an argument or loaded from `),Ive=n(KA,"CODE",{});var M5t=s(Ive);yvr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),xvr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(KA,"CODE",{});var E5t=s(Nve);$vr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),kvr=r(KA,":"),KA.forEach(t),Svr=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);n4=n(fe,"LI",{});var dBe=s(n4);qve=n(dBe,"STRONG",{});var C5t=s(qve);Rvr=r(C5t,"albert"),C5t.forEach(t),Pvr=r(dBe," \u2014 "),IH=n(dBe,"A",{href:!0});var w5t=s(IH);Bvr=r(w5t,"TFAlbertForMaskedLM"),w5t.forEach(t),Ivr=r(dBe," (ALBERT model)"),dBe.forEach(t),Nvr=i(fe),s4=n(fe,"LI",{});var cBe=s(s4);jve=n(cBe,"STRONG",{});var A5t=s(jve);qvr=r(A5t,"bert"),A5t.forEach(t),jvr=r(cBe," \u2014 "),NH=n(cBe,"A",{href:!0});var L5t=s(NH);Dvr=r(L5t,"TFBertForMaskedLM"),L5t.forEach(t),Gvr=r(cBe," (BERT model)"),cBe.forEach(t),Ovr=i(fe),l4=n(fe,"LI",{});var fBe=s(l4);Dve=n(fBe,"STRONG",{});var y5t=s(Dve);Vvr=r(y5t,"camembert"),y5t.forEach(t),Xvr=r(fBe," \u2014 "),qH=n(fBe,"A",{href:!0});var x5t=s(qH);zvr=r(x5t,"TFCamembertForMaskedLM"),x5t.forEach(t),Wvr=r(fBe," (CamemBERT model)"),fBe.forEach(t),Qvr=i(fe),i4=n(fe,"LI",{});var mBe=s(i4);Gve=n(mBe,"STRONG",{});var $5t=s(Gve);Hvr=r($5t,"convbert"),$5t.forEach(t),Uvr=r(mBe," \u2014 "),jH=n(mBe,"A",{href:!0});var k5t=s(jH);Jvr=r(k5t,"TFConvBertForMaskedLM"),k5t.forEach(t),Yvr=r(mBe," (ConvBERT model)"),mBe.forEach(t),Kvr=i(fe),d4=n(fe,"LI",{});var gBe=s(d4);Ove=n(gBe,"STRONG",{});var S5t=s(Ove);Zvr=r(S5t,"deberta"),S5t.forEach(t),eFr=r(gBe," \u2014 "),DH=n(gBe,"A",{href:!0});var R5t=s(DH);oFr=r(R5t,"TFDebertaForMaskedLM"),R5t.forEach(t),rFr=r(gBe," (DeBERTa model)"),gBe.forEach(t),tFr=i(fe),c4=n(fe,"LI",{});var hBe=s(c4);Vve=n(hBe,"STRONG",{});var P5t=s(Vve);aFr=r(P5t,"deberta-v2"),P5t.forEach(t),nFr=r(hBe," \u2014 "),GH=n(hBe,"A",{href:!0});var B5t=s(GH);sFr=r(B5t,"TFDebertaV2ForMaskedLM"),B5t.forEach(t),lFr=r(hBe," (DeBERTa-v2 model)"),hBe.forEach(t),iFr=i(fe),f4=n(fe,"LI",{});var pBe=s(f4);Xve=n(pBe,"STRONG",{});var I5t=s(Xve);dFr=r(I5t,"distilbert"),I5t.forEach(t),cFr=r(pBe," \u2014 "),OH=n(pBe,"A",{href:!0});var N5t=s(OH);fFr=r(N5t,"TFDistilBertForMaskedLM"),N5t.forEach(t),mFr=r(pBe," (DistilBERT model)"),pBe.forEach(t),gFr=i(fe),m4=n(fe,"LI",{});var _Be=s(m4);zve=n(_Be,"STRONG",{});var q5t=s(zve);hFr=r(q5t,"electra"),q5t.forEach(t),pFr=r(_Be," \u2014 "),VH=n(_Be,"A",{href:!0});var j5t=s(VH);_Fr=r(j5t,"TFElectraForMaskedLM"),j5t.forEach(t),uFr=r(_Be," (ELECTRA model)"),_Be.forEach(t),bFr=i(fe),g4=n(fe,"LI",{});var uBe=s(g4);Wve=n(uBe,"STRONG",{});var D5t=s(Wve);vFr=r(D5t,"flaubert"),D5t.forEach(t),FFr=r(uBe," \u2014 "),XH=n(uBe,"A",{href:!0});var G5t=s(XH);TFr=r(G5t,"TFFlaubertWithLMHeadModel"),G5t.forEach(t),MFr=r(uBe," (FlauBERT model)"),uBe.forEach(t),EFr=i(fe),h4=n(fe,"LI",{});var bBe=s(h4);Qve=n(bBe,"STRONG",{});var O5t=s(Qve);CFr=r(O5t,"funnel"),O5t.forEach(t),wFr=r(bBe," \u2014 "),zH=n(bBe,"A",{href:!0});var V5t=s(zH);AFr=r(V5t,"TFFunnelForMaskedLM"),V5t.forEach(t),LFr=r(bBe," (Funnel Transformer model)"),bBe.forEach(t),yFr=i(fe),p4=n(fe,"LI",{});var vBe=s(p4);Hve=n(vBe,"STRONG",{});var X5t=s(Hve);xFr=r(X5t,"layoutlm"),X5t.forEach(t),$Fr=r(vBe," \u2014 "),WH=n(vBe,"A",{href:!0});var z5t=s(WH);kFr=r(z5t,"TFLayoutLMForMaskedLM"),z5t.forEach(t),SFr=r(vBe," (LayoutLM model)"),vBe.forEach(t),RFr=i(fe),_4=n(fe,"LI",{});var FBe=s(_4);Uve=n(FBe,"STRONG",{});var W5t=s(Uve);PFr=r(W5t,"longformer"),W5t.forEach(t),BFr=r(FBe," \u2014 "),QH=n(FBe,"A",{href:!0});var Q5t=s(QH);IFr=r(Q5t,"TFLongformerForMaskedLM"),Q5t.forEach(t),NFr=r(FBe," (Longformer model)"),FBe.forEach(t),qFr=i(fe),u4=n(fe,"LI",{});var TBe=s(u4);Jve=n(TBe,"STRONG",{});var H5t=s(Jve);jFr=r(H5t,"mobilebert"),H5t.forEach(t),DFr=r(TBe," \u2014 "),HH=n(TBe,"A",{href:!0});var U5t=s(HH);GFr=r(U5t,"TFMobileBertForMaskedLM"),U5t.forEach(t),OFr=r(TBe," (MobileBERT model)"),TBe.forEach(t),VFr=i(fe),b4=n(fe,"LI",{});var MBe=s(b4);Yve=n(MBe,"STRONG",{});var J5t=s(Yve);XFr=r(J5t,"mpnet"),J5t.forEach(t),zFr=r(MBe," \u2014 "),UH=n(MBe,"A",{href:!0});var Y5t=s(UH);WFr=r(Y5t,"TFMPNetForMaskedLM"),Y5t.forEach(t),QFr=r(MBe," (MPNet model)"),MBe.forEach(t),HFr=i(fe),v4=n(fe,"LI",{});var EBe=s(v4);Kve=n(EBe,"STRONG",{});var K5t=s(Kve);UFr=r(K5t,"rembert"),K5t.forEach(t),JFr=r(EBe," \u2014 "),JH=n(EBe,"A",{href:!0});var Z5t=s(JH);YFr=r(Z5t,"TFRemBertForMaskedLM"),Z5t.forEach(t),KFr=r(EBe," (RemBERT model)"),EBe.forEach(t),ZFr=i(fe),F4=n(fe,"LI",{});var CBe=s(F4);Zve=n(CBe,"STRONG",{});var e0t=s(Zve);eTr=r(e0t,"roberta"),e0t.forEach(t),oTr=r(CBe," \u2014 "),YH=n(CBe,"A",{href:!0});var o0t=s(YH);rTr=r(o0t,"TFRobertaForMaskedLM"),o0t.forEach(t),tTr=r(CBe," (RoBERTa model)"),CBe.forEach(t),aTr=i(fe),T4=n(fe,"LI",{});var wBe=s(T4);eFe=n(wBe,"STRONG",{});var r0t=s(eFe);nTr=r(r0t,"roformer"),r0t.forEach(t),sTr=r(wBe," \u2014 "),KH=n(wBe,"A",{href:!0});var t0t=s(KH);lTr=r(t0t,"TFRoFormerForMaskedLM"),t0t.forEach(t),iTr=r(wBe," (RoFormer model)"),wBe.forEach(t),dTr=i(fe),M4=n(fe,"LI",{});var ABe=s(M4);oFe=n(ABe,"STRONG",{});var a0t=s(oFe);cTr=r(a0t,"tapas"),a0t.forEach(t),fTr=r(ABe," \u2014 "),ZH=n(ABe,"A",{href:!0});var n0t=s(ZH);mTr=r(n0t,"TFTapasForMaskedLM"),n0t.forEach(t),gTr=r(ABe," (TAPAS model)"),ABe.forEach(t),hTr=i(fe),E4=n(fe,"LI",{});var LBe=s(E4);rFe=n(LBe,"STRONG",{});var s0t=s(rFe);pTr=r(s0t,"xlm"),s0t.forEach(t),_Tr=r(LBe," \u2014 "),eU=n(LBe,"A",{href:!0});var l0t=s(eU);uTr=r(l0t,"TFXLMWithLMHeadModel"),l0t.forEach(t),bTr=r(LBe," (XLM model)"),LBe.forEach(t),vTr=i(fe),C4=n(fe,"LI",{});var yBe=s(C4);tFe=n(yBe,"STRONG",{});var i0t=s(tFe);FTr=r(i0t,"xlm-roberta"),i0t.forEach(t),TTr=r(yBe," \u2014 "),oU=n(yBe,"A",{href:!0});var d0t=s(oU);MTr=r(d0t,"TFXLMRobertaForMaskedLM"),d0t.forEach(t),ETr=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),fe.forEach(t),CTr=i(Cl),T(w4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),RDe=i(f),ac=n(f,"H2",{class:!0});var jOe=s(ac);A4=n(jOe,"A",{id:!0,class:!0,href:!0});var c0t=s(A4);aFe=n(c0t,"SPAN",{});var f0t=s(aFe);T(Y8.$$.fragment,f0t),f0t.forEach(t),c0t.forEach(t),wTr=i(jOe),nFe=n(jOe,"SPAN",{});var m0t=s(nFe);ATr=r(m0t,"TFAutoModelForSeq2SeqLM"),m0t.forEach(t),jOe.forEach(t),PDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(K8.$$.fragment,wl),LTr=i(wl),nc=n(wl,"P",{});var aoe=s(nc);yTr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rU=n(aoe,"A",{href:!0});var g0t=s(rU);xTr=r(g0t,"from_pretrained()"),g0t.forEach(t),$Tr=r(aoe," class method or the "),tU=n(aoe,"A",{href:!0});var h0t=s(tU);kTr=r(h0t,"from_config()"),h0t.forEach(t),STr=r(aoe,` class
method.`),aoe.forEach(t),RTr=i(wl),Z8=n(wl,"P",{});var DOe=s(Z8);PTr=r(DOe,"This class cannot be instantiated directly using "),sFe=n(DOe,"CODE",{});var p0t=s(sFe);BTr=r(p0t,"__init__()"),p0t.forEach(t),ITr=r(DOe," (throws an error)."),DOe.forEach(t),NTr=i(wl),St=n(wl,"DIV",{class:!0});var ZA=s(St);T(e9.$$.fragment,ZA),qTr=i(ZA),lFe=n(ZA,"P",{});var _0t=s(lFe);jTr=r(_0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_0t.forEach(t),DTr=i(ZA),sc=n(ZA,"P",{});var noe=s(sc);GTr=r(noe,`Note:
Loading a model from its configuration file does `),iFe=n(noe,"STRONG",{});var u0t=s(iFe);OTr=r(u0t,"not"),u0t.forEach(t),VTr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(noe,"A",{href:!0});var b0t=s(aU);XTr=r(b0t,"from_pretrained()"),b0t.forEach(t),zTr=r(noe," to load the model weights."),noe.forEach(t),WTr=i(ZA),T(L4.$$.fragment,ZA),ZA.forEach(t),QTr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(o9.$$.fragment,Al),HTr=i(Al),dFe=n(Al,"P",{});var v0t=s(dFe);UTr=r(v0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v0t.forEach(t),JTr=i(Al),an=n(Al,"P",{});var e6=s(an);YTr=r(e6,"The model class to instantiate is selected based on the "),cFe=n(e6,"CODE",{});var F0t=s(cFe);KTr=r(F0t,"model_type"),F0t.forEach(t),ZTr=r(e6,` property of the config object (either
passed as an argument or loaded from `),fFe=n(e6,"CODE",{});var T0t=s(fFe);e7r=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),o7r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(e6,"CODE",{});var M0t=s(mFe);r7r=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),t7r=r(e6,":"),e6.forEach(t),a7r=i(Al),ye=n(Al,"UL",{});var Ie=s(ye);y4=n(Ie,"LI",{});var xBe=s(y4);gFe=n(xBe,"STRONG",{});var E0t=s(gFe);n7r=r(E0t,"bart"),E0t.forEach(t),s7r=r(xBe," \u2014 "),nU=n(xBe,"A",{href:!0});var C0t=s(nU);l7r=r(C0t,"TFBartForConditionalGeneration"),C0t.forEach(t),i7r=r(xBe," (BART model)"),xBe.forEach(t),d7r=i(Ie),x4=n(Ie,"LI",{});var $Be=s(x4);hFe=n($Be,"STRONG",{});var w0t=s(hFe);c7r=r(w0t,"blenderbot"),w0t.forEach(t),f7r=r($Be," \u2014 "),sU=n($Be,"A",{href:!0});var A0t=s(sU);m7r=r(A0t,"TFBlenderbotForConditionalGeneration"),A0t.forEach(t),g7r=r($Be," (Blenderbot model)"),$Be.forEach(t),h7r=i(Ie),$4=n(Ie,"LI",{});var kBe=s($4);pFe=n(kBe,"STRONG",{});var L0t=s(pFe);p7r=r(L0t,"blenderbot-small"),L0t.forEach(t),_7r=r(kBe," \u2014 "),lU=n(kBe,"A",{href:!0});var y0t=s(lU);u7r=r(y0t,"TFBlenderbotSmallForConditionalGeneration"),y0t.forEach(t),b7r=r(kBe," (BlenderbotSmall model)"),kBe.forEach(t),v7r=i(Ie),k4=n(Ie,"LI",{});var SBe=s(k4);_Fe=n(SBe,"STRONG",{});var x0t=s(_Fe);F7r=r(x0t,"encoder-decoder"),x0t.forEach(t),T7r=r(SBe," \u2014 "),iU=n(SBe,"A",{href:!0});var $0t=s(iU);M7r=r($0t,"TFEncoderDecoderModel"),$0t.forEach(t),E7r=r(SBe," (Encoder decoder model)"),SBe.forEach(t),C7r=i(Ie),S4=n(Ie,"LI",{});var RBe=s(S4);uFe=n(RBe,"STRONG",{});var k0t=s(uFe);w7r=r(k0t,"led"),k0t.forEach(t),A7r=r(RBe," \u2014 "),dU=n(RBe,"A",{href:!0});var S0t=s(dU);L7r=r(S0t,"TFLEDForConditionalGeneration"),S0t.forEach(t),y7r=r(RBe," (LED model)"),RBe.forEach(t),x7r=i(Ie),R4=n(Ie,"LI",{});var PBe=s(R4);bFe=n(PBe,"STRONG",{});var R0t=s(bFe);$7r=r(R0t,"marian"),R0t.forEach(t),k7r=r(PBe," \u2014 "),cU=n(PBe,"A",{href:!0});var P0t=s(cU);S7r=r(P0t,"TFMarianMTModel"),P0t.forEach(t),R7r=r(PBe," (Marian model)"),PBe.forEach(t),P7r=i(Ie),P4=n(Ie,"LI",{});var BBe=s(P4);vFe=n(BBe,"STRONG",{});var B0t=s(vFe);B7r=r(B0t,"mbart"),B0t.forEach(t),I7r=r(BBe," \u2014 "),fU=n(BBe,"A",{href:!0});var I0t=s(fU);N7r=r(I0t,"TFMBartForConditionalGeneration"),I0t.forEach(t),q7r=r(BBe," (mBART model)"),BBe.forEach(t),j7r=i(Ie),B4=n(Ie,"LI",{});var IBe=s(B4);FFe=n(IBe,"STRONG",{});var N0t=s(FFe);D7r=r(N0t,"mt5"),N0t.forEach(t),G7r=r(IBe," \u2014 "),mU=n(IBe,"A",{href:!0});var q0t=s(mU);O7r=r(q0t,"TFMT5ForConditionalGeneration"),q0t.forEach(t),V7r=r(IBe," (MT5 model)"),IBe.forEach(t),X7r=i(Ie),I4=n(Ie,"LI",{});var NBe=s(I4);TFe=n(NBe,"STRONG",{});var j0t=s(TFe);z7r=r(j0t,"pegasus"),j0t.forEach(t),W7r=r(NBe," \u2014 "),gU=n(NBe,"A",{href:!0});var D0t=s(gU);Q7r=r(D0t,"TFPegasusForConditionalGeneration"),D0t.forEach(t),H7r=r(NBe," (Pegasus model)"),NBe.forEach(t),U7r=i(Ie),N4=n(Ie,"LI",{});var qBe=s(N4);MFe=n(qBe,"STRONG",{});var G0t=s(MFe);J7r=r(G0t,"t5"),G0t.forEach(t),Y7r=r(qBe," \u2014 "),hU=n(qBe,"A",{href:!0});var O0t=s(hU);K7r=r(O0t,"TFT5ForConditionalGeneration"),O0t.forEach(t),Z7r=r(qBe," (T5 model)"),qBe.forEach(t),Ie.forEach(t),eMr=i(Al),T(q4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),BDe=i(f),lc=n(f,"H2",{class:!0});var GOe=s(lc);j4=n(GOe,"A",{id:!0,class:!0,href:!0});var V0t=s(j4);EFe=n(V0t,"SPAN",{});var X0t=s(EFe);T(r9.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),oMr=i(GOe),CFe=n(GOe,"SPAN",{});var z0t=s(CFe);rMr=r(z0t,"TFAutoModelForSequenceClassification"),z0t.forEach(t),GOe.forEach(t),IDe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(t9.$$.fragment,Ll),tMr=i(Ll),ic=n(Ll,"P",{});var soe=s(ic);aMr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pU=n(soe,"A",{href:!0});var W0t=s(pU);nMr=r(W0t,"from_pretrained()"),W0t.forEach(t),sMr=r(soe," class method or the "),_U=n(soe,"A",{href:!0});var Q0t=s(_U);lMr=r(Q0t,"from_config()"),Q0t.forEach(t),iMr=r(soe,` class
method.`),soe.forEach(t),dMr=i(Ll),a9=n(Ll,"P",{});var OOe=s(a9);cMr=r(OOe,"This class cannot be instantiated directly using "),wFe=n(OOe,"CODE",{});var H0t=s(wFe);fMr=r(H0t,"__init__()"),H0t.forEach(t),mMr=r(OOe," (throws an error)."),OOe.forEach(t),gMr=i(Ll),Rt=n(Ll,"DIV",{class:!0});var o6=s(Rt);T(n9.$$.fragment,o6),hMr=i(o6),AFe=n(o6,"P",{});var U0t=s(AFe);pMr=r(U0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U0t.forEach(t),_Mr=i(o6),dc=n(o6,"P",{});var loe=s(dc);uMr=r(loe,`Note:
Loading a model from its configuration file does `),LFe=n(loe,"STRONG",{});var J0t=s(LFe);bMr=r(J0t,"not"),J0t.forEach(t),vMr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(loe,"A",{href:!0});var Y0t=s(uU);FMr=r(Y0t,"from_pretrained()"),Y0t.forEach(t),TMr=r(loe," to load the model weights."),loe.forEach(t),MMr=i(o6),T(D4.$$.fragment,o6),o6.forEach(t),EMr=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(s9.$$.fragment,yl),CMr=i(yl),yFe=n(yl,"P",{});var K0t=s(yFe);wMr=r(K0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K0t.forEach(t),AMr=i(yl),nn=n(yl,"P",{});var r6=s(nn);LMr=r(r6,"The model class to instantiate is selected based on the "),xFe=n(r6,"CODE",{});var Z0t=s(xFe);yMr=r(Z0t,"model_type"),Z0t.forEach(t),xMr=r(r6,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(r6,"CODE",{});var ewt=s($Fe);$Mr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),kMr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(r6,"CODE",{});var owt=s(kFe);SMr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),RMr=r(r6,":"),r6.forEach(t),PMr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);G4=n(ae,"LI",{});var jBe=s(G4);SFe=n(jBe,"STRONG",{});var rwt=s(SFe);BMr=r(rwt,"albert"),rwt.forEach(t),IMr=r(jBe," \u2014 "),bU=n(jBe,"A",{href:!0});var twt=s(bU);NMr=r(twt,"TFAlbertForSequenceClassification"),twt.forEach(t),qMr=r(jBe," (ALBERT model)"),jBe.forEach(t),jMr=i(ae),O4=n(ae,"LI",{});var DBe=s(O4);RFe=n(DBe,"STRONG",{});var awt=s(RFe);DMr=r(awt,"bert"),awt.forEach(t),GMr=r(DBe," \u2014 "),vU=n(DBe,"A",{href:!0});var nwt=s(vU);OMr=r(nwt,"TFBertForSequenceClassification"),nwt.forEach(t),VMr=r(DBe," (BERT model)"),DBe.forEach(t),XMr=i(ae),V4=n(ae,"LI",{});var GBe=s(V4);PFe=n(GBe,"STRONG",{});var swt=s(PFe);zMr=r(swt,"camembert"),swt.forEach(t),WMr=r(GBe," \u2014 "),FU=n(GBe,"A",{href:!0});var lwt=s(FU);QMr=r(lwt,"TFCamembertForSequenceClassification"),lwt.forEach(t),HMr=r(GBe," (CamemBERT model)"),GBe.forEach(t),UMr=i(ae),X4=n(ae,"LI",{});var OBe=s(X4);BFe=n(OBe,"STRONG",{});var iwt=s(BFe);JMr=r(iwt,"convbert"),iwt.forEach(t),YMr=r(OBe," \u2014 "),TU=n(OBe,"A",{href:!0});var dwt=s(TU);KMr=r(dwt,"TFConvBertForSequenceClassification"),dwt.forEach(t),ZMr=r(OBe," (ConvBERT model)"),OBe.forEach(t),e4r=i(ae),z4=n(ae,"LI",{});var VBe=s(z4);IFe=n(VBe,"STRONG",{});var cwt=s(IFe);o4r=r(cwt,"ctrl"),cwt.forEach(t),r4r=r(VBe," \u2014 "),MU=n(VBe,"A",{href:!0});var fwt=s(MU);t4r=r(fwt,"TFCTRLForSequenceClassification"),fwt.forEach(t),a4r=r(VBe," (CTRL model)"),VBe.forEach(t),n4r=i(ae),W4=n(ae,"LI",{});var XBe=s(W4);NFe=n(XBe,"STRONG",{});var mwt=s(NFe);s4r=r(mwt,"deberta"),mwt.forEach(t),l4r=r(XBe," \u2014 "),EU=n(XBe,"A",{href:!0});var gwt=s(EU);i4r=r(gwt,"TFDebertaForSequenceClassification"),gwt.forEach(t),d4r=r(XBe," (DeBERTa model)"),XBe.forEach(t),c4r=i(ae),Q4=n(ae,"LI",{});var zBe=s(Q4);qFe=n(zBe,"STRONG",{});var hwt=s(qFe);f4r=r(hwt,"deberta-v2"),hwt.forEach(t),m4r=r(zBe," \u2014 "),CU=n(zBe,"A",{href:!0});var pwt=s(CU);g4r=r(pwt,"TFDebertaV2ForSequenceClassification"),pwt.forEach(t),h4r=r(zBe," (DeBERTa-v2 model)"),zBe.forEach(t),p4r=i(ae),H4=n(ae,"LI",{});var WBe=s(H4);jFe=n(WBe,"STRONG",{});var _wt=s(jFe);_4r=r(_wt,"distilbert"),_wt.forEach(t),u4r=r(WBe," \u2014 "),wU=n(WBe,"A",{href:!0});var uwt=s(wU);b4r=r(uwt,"TFDistilBertForSequenceClassification"),uwt.forEach(t),v4r=r(WBe," (DistilBERT model)"),WBe.forEach(t),F4r=i(ae),U4=n(ae,"LI",{});var QBe=s(U4);DFe=n(QBe,"STRONG",{});var bwt=s(DFe);T4r=r(bwt,"electra"),bwt.forEach(t),M4r=r(QBe," \u2014 "),AU=n(QBe,"A",{href:!0});var vwt=s(AU);E4r=r(vwt,"TFElectraForSequenceClassification"),vwt.forEach(t),C4r=r(QBe," (ELECTRA model)"),QBe.forEach(t),w4r=i(ae),J4=n(ae,"LI",{});var HBe=s(J4);GFe=n(HBe,"STRONG",{});var Fwt=s(GFe);A4r=r(Fwt,"flaubert"),Fwt.forEach(t),L4r=r(HBe," \u2014 "),LU=n(HBe,"A",{href:!0});var Twt=s(LU);y4r=r(Twt,"TFFlaubertForSequenceClassification"),Twt.forEach(t),x4r=r(HBe," (FlauBERT model)"),HBe.forEach(t),$4r=i(ae),Y4=n(ae,"LI",{});var UBe=s(Y4);OFe=n(UBe,"STRONG",{});var Mwt=s(OFe);k4r=r(Mwt,"funnel"),Mwt.forEach(t),S4r=r(UBe," \u2014 "),yU=n(UBe,"A",{href:!0});var Ewt=s(yU);R4r=r(Ewt,"TFFunnelForSequenceClassification"),Ewt.forEach(t),P4r=r(UBe," (Funnel Transformer model)"),UBe.forEach(t),B4r=i(ae),K4=n(ae,"LI",{});var JBe=s(K4);VFe=n(JBe,"STRONG",{});var Cwt=s(VFe);I4r=r(Cwt,"gpt2"),Cwt.forEach(t),N4r=r(JBe," \u2014 "),xU=n(JBe,"A",{href:!0});var wwt=s(xU);q4r=r(wwt,"TFGPT2ForSequenceClassification"),wwt.forEach(t),j4r=r(JBe," (OpenAI GPT-2 model)"),JBe.forEach(t),D4r=i(ae),Z4=n(ae,"LI",{});var YBe=s(Z4);XFe=n(YBe,"STRONG",{});var Awt=s(XFe);G4r=r(Awt,"gptj"),Awt.forEach(t),O4r=r(YBe," \u2014 "),$U=n(YBe,"A",{href:!0});var Lwt=s($U);V4r=r(Lwt,"TFGPTJForSequenceClassification"),Lwt.forEach(t),X4r=r(YBe," (GPT-J model)"),YBe.forEach(t),z4r=i(ae),eE=n(ae,"LI",{});var KBe=s(eE);zFe=n(KBe,"STRONG",{});var ywt=s(zFe);W4r=r(ywt,"layoutlm"),ywt.forEach(t),Q4r=r(KBe," \u2014 "),kU=n(KBe,"A",{href:!0});var xwt=s(kU);H4r=r(xwt,"TFLayoutLMForSequenceClassification"),xwt.forEach(t),U4r=r(KBe," (LayoutLM model)"),KBe.forEach(t),J4r=i(ae),oE=n(ae,"LI",{});var ZBe=s(oE);WFe=n(ZBe,"STRONG",{});var $wt=s(WFe);Y4r=r($wt,"longformer"),$wt.forEach(t),K4r=r(ZBe," \u2014 "),SU=n(ZBe,"A",{href:!0});var kwt=s(SU);Z4r=r(kwt,"TFLongformerForSequenceClassification"),kwt.forEach(t),eEr=r(ZBe," (Longformer model)"),ZBe.forEach(t),oEr=i(ae),rE=n(ae,"LI",{});var eIe=s(rE);QFe=n(eIe,"STRONG",{});var Swt=s(QFe);rEr=r(Swt,"mobilebert"),Swt.forEach(t),tEr=r(eIe," \u2014 "),RU=n(eIe,"A",{href:!0});var Rwt=s(RU);aEr=r(Rwt,"TFMobileBertForSequenceClassification"),Rwt.forEach(t),nEr=r(eIe," (MobileBERT model)"),eIe.forEach(t),sEr=i(ae),tE=n(ae,"LI",{});var oIe=s(tE);HFe=n(oIe,"STRONG",{});var Pwt=s(HFe);lEr=r(Pwt,"mpnet"),Pwt.forEach(t),iEr=r(oIe," \u2014 "),PU=n(oIe,"A",{href:!0});var Bwt=s(PU);dEr=r(Bwt,"TFMPNetForSequenceClassification"),Bwt.forEach(t),cEr=r(oIe," (MPNet model)"),oIe.forEach(t),fEr=i(ae),aE=n(ae,"LI",{});var rIe=s(aE);UFe=n(rIe,"STRONG",{});var Iwt=s(UFe);mEr=r(Iwt,"openai-gpt"),Iwt.forEach(t),gEr=r(rIe," \u2014 "),BU=n(rIe,"A",{href:!0});var Nwt=s(BU);hEr=r(Nwt,"TFOpenAIGPTForSequenceClassification"),Nwt.forEach(t),pEr=r(rIe," (OpenAI GPT model)"),rIe.forEach(t),_Er=i(ae),nE=n(ae,"LI",{});var tIe=s(nE);JFe=n(tIe,"STRONG",{});var qwt=s(JFe);uEr=r(qwt,"rembert"),qwt.forEach(t),bEr=r(tIe," \u2014 "),IU=n(tIe,"A",{href:!0});var jwt=s(IU);vEr=r(jwt,"TFRemBertForSequenceClassification"),jwt.forEach(t),FEr=r(tIe," (RemBERT model)"),tIe.forEach(t),TEr=i(ae),sE=n(ae,"LI",{});var aIe=s(sE);YFe=n(aIe,"STRONG",{});var Dwt=s(YFe);MEr=r(Dwt,"roberta"),Dwt.forEach(t),EEr=r(aIe," \u2014 "),NU=n(aIe,"A",{href:!0});var Gwt=s(NU);CEr=r(Gwt,"TFRobertaForSequenceClassification"),Gwt.forEach(t),wEr=r(aIe," (RoBERTa model)"),aIe.forEach(t),AEr=i(ae),lE=n(ae,"LI",{});var nIe=s(lE);KFe=n(nIe,"STRONG",{});var Owt=s(KFe);LEr=r(Owt,"roformer"),Owt.forEach(t),yEr=r(nIe," \u2014 "),qU=n(nIe,"A",{href:!0});var Vwt=s(qU);xEr=r(Vwt,"TFRoFormerForSequenceClassification"),Vwt.forEach(t),$Er=r(nIe," (RoFormer model)"),nIe.forEach(t),kEr=i(ae),iE=n(ae,"LI",{});var sIe=s(iE);ZFe=n(sIe,"STRONG",{});var Xwt=s(ZFe);SEr=r(Xwt,"tapas"),Xwt.forEach(t),REr=r(sIe," \u2014 "),jU=n(sIe,"A",{href:!0});var zwt=s(jU);PEr=r(zwt,"TFTapasForSequenceClassification"),zwt.forEach(t),BEr=r(sIe," (TAPAS model)"),sIe.forEach(t),IEr=i(ae),dE=n(ae,"LI",{});var lIe=s(dE);eTe=n(lIe,"STRONG",{});var Wwt=s(eTe);NEr=r(Wwt,"transfo-xl"),Wwt.forEach(t),qEr=r(lIe," \u2014 "),DU=n(lIe,"A",{href:!0});var Qwt=s(DU);jEr=r(Qwt,"TFTransfoXLForSequenceClassification"),Qwt.forEach(t),DEr=r(lIe," (Transformer-XL model)"),lIe.forEach(t),GEr=i(ae),cE=n(ae,"LI",{});var iIe=s(cE);oTe=n(iIe,"STRONG",{});var Hwt=s(oTe);OEr=r(Hwt,"xlm"),Hwt.forEach(t),VEr=r(iIe," \u2014 "),GU=n(iIe,"A",{href:!0});var Uwt=s(GU);XEr=r(Uwt,"TFXLMForSequenceClassification"),Uwt.forEach(t),zEr=r(iIe," (XLM model)"),iIe.forEach(t),WEr=i(ae),fE=n(ae,"LI",{});var dIe=s(fE);rTe=n(dIe,"STRONG",{});var Jwt=s(rTe);QEr=r(Jwt,"xlm-roberta"),Jwt.forEach(t),HEr=r(dIe," \u2014 "),OU=n(dIe,"A",{href:!0});var Ywt=s(OU);UEr=r(Ywt,"TFXLMRobertaForSequenceClassification"),Ywt.forEach(t),JEr=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),YEr=i(ae),mE=n(ae,"LI",{});var cIe=s(mE);tTe=n(cIe,"STRONG",{});var Kwt=s(tTe);KEr=r(Kwt,"xlnet"),Kwt.forEach(t),ZEr=r(cIe," \u2014 "),VU=n(cIe,"A",{href:!0});var Zwt=s(VU);eCr=r(Zwt,"TFXLNetForSequenceClassification"),Zwt.forEach(t),oCr=r(cIe," (XLNet model)"),cIe.forEach(t),ae.forEach(t),rCr=i(yl),T(gE.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),NDe=i(f),cc=n(f,"H2",{class:!0});var VOe=s(cc);hE=n(VOe,"A",{id:!0,class:!0,href:!0});var eAt=s(hE);aTe=n(eAt,"SPAN",{});var oAt=s(aTe);T(l9.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),tCr=i(VOe),nTe=n(VOe,"SPAN",{});var rAt=s(nTe);aCr=r(rAt,"TFAutoModelForMultipleChoice"),rAt.forEach(t),VOe.forEach(t),qDe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(i9.$$.fragment,xl),nCr=i(xl),fc=n(xl,"P",{});var ioe=s(fc);sCr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XU=n(ioe,"A",{href:!0});var tAt=s(XU);lCr=r(tAt,"from_pretrained()"),tAt.forEach(t),iCr=r(ioe," class method or the "),zU=n(ioe,"A",{href:!0});var aAt=s(zU);dCr=r(aAt,"from_config()"),aAt.forEach(t),cCr=r(ioe,` class
method.`),ioe.forEach(t),fCr=i(xl),d9=n(xl,"P",{});var XOe=s(d9);mCr=r(XOe,"This class cannot be instantiated directly using "),sTe=n(XOe,"CODE",{});var nAt=s(sTe);gCr=r(nAt,"__init__()"),nAt.forEach(t),hCr=r(XOe," (throws an error)."),XOe.forEach(t),pCr=i(xl),Pt=n(xl,"DIV",{class:!0});var t6=s(Pt);T(c9.$$.fragment,t6),_Cr=i(t6),lTe=n(t6,"P",{});var sAt=s(lTe);uCr=r(sAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sAt.forEach(t),bCr=i(t6),mc=n(t6,"P",{});var doe=s(mc);vCr=r(doe,`Note:
Loading a model from its configuration file does `),iTe=n(doe,"STRONG",{});var lAt=s(iTe);FCr=r(lAt,"not"),lAt.forEach(t),TCr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(doe,"A",{href:!0});var iAt=s(WU);MCr=r(iAt,"from_pretrained()"),iAt.forEach(t),ECr=r(doe," to load the model weights."),doe.forEach(t),CCr=i(t6),T(pE.$$.fragment,t6),t6.forEach(t),wCr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(f9.$$.fragment,$l),ACr=i($l),dTe=n($l,"P",{});var dAt=s(dTe);LCr=r(dAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dAt.forEach(t),yCr=i($l),sn=n($l,"P",{});var a6=s(sn);xCr=r(a6,"The model class to instantiate is selected based on the "),cTe=n(a6,"CODE",{});var cAt=s(cTe);$Cr=r(cAt,"model_type"),cAt.forEach(t),kCr=r(a6,` property of the config object (either
passed as an argument or loaded from `),fTe=n(a6,"CODE",{});var fAt=s(fTe);SCr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),RCr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(a6,"CODE",{});var mAt=s(mTe);PCr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),BCr=r(a6,":"),a6.forEach(t),ICr=i($l),pe=n($l,"UL",{});var be=s(pe);_E=n(be,"LI",{});var fIe=s(_E);gTe=n(fIe,"STRONG",{});var gAt=s(gTe);NCr=r(gAt,"albert"),gAt.forEach(t),qCr=r(fIe," \u2014 "),QU=n(fIe,"A",{href:!0});var hAt=s(QU);jCr=r(hAt,"TFAlbertForMultipleChoice"),hAt.forEach(t),DCr=r(fIe," (ALBERT model)"),fIe.forEach(t),GCr=i(be),uE=n(be,"LI",{});var mIe=s(uE);hTe=n(mIe,"STRONG",{});var pAt=s(hTe);OCr=r(pAt,"bert"),pAt.forEach(t),VCr=r(mIe," \u2014 "),HU=n(mIe,"A",{href:!0});var _At=s(HU);XCr=r(_At,"TFBertForMultipleChoice"),_At.forEach(t),zCr=r(mIe," (BERT model)"),mIe.forEach(t),WCr=i(be),bE=n(be,"LI",{});var gIe=s(bE);pTe=n(gIe,"STRONG",{});var uAt=s(pTe);QCr=r(uAt,"camembert"),uAt.forEach(t),HCr=r(gIe," \u2014 "),UU=n(gIe,"A",{href:!0});var bAt=s(UU);UCr=r(bAt,"TFCamembertForMultipleChoice"),bAt.forEach(t),JCr=r(gIe," (CamemBERT model)"),gIe.forEach(t),YCr=i(be),vE=n(be,"LI",{});var hIe=s(vE);_Te=n(hIe,"STRONG",{});var vAt=s(_Te);KCr=r(vAt,"convbert"),vAt.forEach(t),ZCr=r(hIe," \u2014 "),JU=n(hIe,"A",{href:!0});var FAt=s(JU);e5r=r(FAt,"TFConvBertForMultipleChoice"),FAt.forEach(t),o5r=r(hIe," (ConvBERT model)"),hIe.forEach(t),r5r=i(be),FE=n(be,"LI",{});var pIe=s(FE);uTe=n(pIe,"STRONG",{});var TAt=s(uTe);t5r=r(TAt,"distilbert"),TAt.forEach(t),a5r=r(pIe," \u2014 "),YU=n(pIe,"A",{href:!0});var MAt=s(YU);n5r=r(MAt,"TFDistilBertForMultipleChoice"),MAt.forEach(t),s5r=r(pIe," (DistilBERT model)"),pIe.forEach(t),l5r=i(be),TE=n(be,"LI",{});var _Ie=s(TE);bTe=n(_Ie,"STRONG",{});var EAt=s(bTe);i5r=r(EAt,"electra"),EAt.forEach(t),d5r=r(_Ie," \u2014 "),KU=n(_Ie,"A",{href:!0});var CAt=s(KU);c5r=r(CAt,"TFElectraForMultipleChoice"),CAt.forEach(t),f5r=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),m5r=i(be),ME=n(be,"LI",{});var uIe=s(ME);vTe=n(uIe,"STRONG",{});var wAt=s(vTe);g5r=r(wAt,"flaubert"),wAt.forEach(t),h5r=r(uIe," \u2014 "),ZU=n(uIe,"A",{href:!0});var AAt=s(ZU);p5r=r(AAt,"TFFlaubertForMultipleChoice"),AAt.forEach(t),_5r=r(uIe," (FlauBERT model)"),uIe.forEach(t),u5r=i(be),EE=n(be,"LI",{});var bIe=s(EE);FTe=n(bIe,"STRONG",{});var LAt=s(FTe);b5r=r(LAt,"funnel"),LAt.forEach(t),v5r=r(bIe," \u2014 "),eJ=n(bIe,"A",{href:!0});var yAt=s(eJ);F5r=r(yAt,"TFFunnelForMultipleChoice"),yAt.forEach(t),T5r=r(bIe," (Funnel Transformer model)"),bIe.forEach(t),M5r=i(be),CE=n(be,"LI",{});var vIe=s(CE);TTe=n(vIe,"STRONG",{});var xAt=s(TTe);E5r=r(xAt,"longformer"),xAt.forEach(t),C5r=r(vIe," \u2014 "),oJ=n(vIe,"A",{href:!0});var $At=s(oJ);w5r=r($At,"TFLongformerForMultipleChoice"),$At.forEach(t),A5r=r(vIe," (Longformer model)"),vIe.forEach(t),L5r=i(be),wE=n(be,"LI",{});var FIe=s(wE);MTe=n(FIe,"STRONG",{});var kAt=s(MTe);y5r=r(kAt,"mobilebert"),kAt.forEach(t),x5r=r(FIe," \u2014 "),rJ=n(FIe,"A",{href:!0});var SAt=s(rJ);$5r=r(SAt,"TFMobileBertForMultipleChoice"),SAt.forEach(t),k5r=r(FIe," (MobileBERT model)"),FIe.forEach(t),S5r=i(be),AE=n(be,"LI",{});var TIe=s(AE);ETe=n(TIe,"STRONG",{});var RAt=s(ETe);R5r=r(RAt,"mpnet"),RAt.forEach(t),P5r=r(TIe," \u2014 "),tJ=n(TIe,"A",{href:!0});var PAt=s(tJ);B5r=r(PAt,"TFMPNetForMultipleChoice"),PAt.forEach(t),I5r=r(TIe," (MPNet model)"),TIe.forEach(t),N5r=i(be),LE=n(be,"LI",{});var MIe=s(LE);CTe=n(MIe,"STRONG",{});var BAt=s(CTe);q5r=r(BAt,"rembert"),BAt.forEach(t),j5r=r(MIe," \u2014 "),aJ=n(MIe,"A",{href:!0});var IAt=s(aJ);D5r=r(IAt,"TFRemBertForMultipleChoice"),IAt.forEach(t),G5r=r(MIe," (RemBERT model)"),MIe.forEach(t),O5r=i(be),yE=n(be,"LI",{});var EIe=s(yE);wTe=n(EIe,"STRONG",{});var NAt=s(wTe);V5r=r(NAt,"roberta"),NAt.forEach(t),X5r=r(EIe," \u2014 "),nJ=n(EIe,"A",{href:!0});var qAt=s(nJ);z5r=r(qAt,"TFRobertaForMultipleChoice"),qAt.forEach(t),W5r=r(EIe," (RoBERTa model)"),EIe.forEach(t),Q5r=i(be),xE=n(be,"LI",{});var CIe=s(xE);ATe=n(CIe,"STRONG",{});var jAt=s(ATe);H5r=r(jAt,"roformer"),jAt.forEach(t),U5r=r(CIe," \u2014 "),sJ=n(CIe,"A",{href:!0});var DAt=s(sJ);J5r=r(DAt,"TFRoFormerForMultipleChoice"),DAt.forEach(t),Y5r=r(CIe," (RoFormer model)"),CIe.forEach(t),K5r=i(be),$E=n(be,"LI",{});var wIe=s($E);LTe=n(wIe,"STRONG",{});var GAt=s(LTe);Z5r=r(GAt,"xlm"),GAt.forEach(t),e0r=r(wIe," \u2014 "),lJ=n(wIe,"A",{href:!0});var OAt=s(lJ);o0r=r(OAt,"TFXLMForMultipleChoice"),OAt.forEach(t),r0r=r(wIe," (XLM model)"),wIe.forEach(t),t0r=i(be),kE=n(be,"LI",{});var AIe=s(kE);yTe=n(AIe,"STRONG",{});var VAt=s(yTe);a0r=r(VAt,"xlm-roberta"),VAt.forEach(t),n0r=r(AIe," \u2014 "),iJ=n(AIe,"A",{href:!0});var XAt=s(iJ);s0r=r(XAt,"TFXLMRobertaForMultipleChoice"),XAt.forEach(t),l0r=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),i0r=i(be),SE=n(be,"LI",{});var LIe=s(SE);xTe=n(LIe,"STRONG",{});var zAt=s(xTe);d0r=r(zAt,"xlnet"),zAt.forEach(t),c0r=r(LIe," \u2014 "),dJ=n(LIe,"A",{href:!0});var WAt=s(dJ);f0r=r(WAt,"TFXLNetForMultipleChoice"),WAt.forEach(t),m0r=r(LIe," (XLNet model)"),LIe.forEach(t),be.forEach(t),g0r=i($l),T(RE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),jDe=i(f),gc=n(f,"H2",{class:!0});var zOe=s(gc);PE=n(zOe,"A",{id:!0,class:!0,href:!0});var QAt=s(PE);$Te=n(QAt,"SPAN",{});var HAt=s($Te);T(m9.$$.fragment,HAt),HAt.forEach(t),QAt.forEach(t),h0r=i(zOe),kTe=n(zOe,"SPAN",{});var UAt=s(kTe);p0r=r(UAt,"TFAutoModelForNextSentencePrediction"),UAt.forEach(t),zOe.forEach(t),DDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(g9.$$.fragment,kl),_0r=i(kl),hc=n(kl,"P",{});var coe=s(hc);u0r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cJ=n(coe,"A",{href:!0});var JAt=s(cJ);b0r=r(JAt,"from_pretrained()"),JAt.forEach(t),v0r=r(coe," class method or the "),fJ=n(coe,"A",{href:!0});var YAt=s(fJ);F0r=r(YAt,"from_config()"),YAt.forEach(t),T0r=r(coe,` class
method.`),coe.forEach(t),M0r=i(kl),h9=n(kl,"P",{});var WOe=s(h9);E0r=r(WOe,"This class cannot be instantiated directly using "),STe=n(WOe,"CODE",{});var KAt=s(STe);C0r=r(KAt,"__init__()"),KAt.forEach(t),w0r=r(WOe," (throws an error)."),WOe.forEach(t),A0r=i(kl),Bt=n(kl,"DIV",{class:!0});var n6=s(Bt);T(p9.$$.fragment,n6),L0r=i(n6),RTe=n(n6,"P",{});var ZAt=s(RTe);y0r=r(ZAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZAt.forEach(t),x0r=i(n6),pc=n(n6,"P",{});var foe=s(pc);$0r=r(foe,`Note:
Loading a model from its configuration file does `),PTe=n(foe,"STRONG",{});var e6t=s(PTe);k0r=r(e6t,"not"),e6t.forEach(t),S0r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(foe,"A",{href:!0});var o6t=s(mJ);R0r=r(o6t,"from_pretrained()"),o6t.forEach(t),P0r=r(foe," to load the model weights."),foe.forEach(t),B0r=i(n6),T(BE.$$.fragment,n6),n6.forEach(t),I0r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(_9.$$.fragment,Sl),N0r=i(Sl),BTe=n(Sl,"P",{});var r6t=s(BTe);q0r=r(r6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r6t.forEach(t),j0r=i(Sl),ln=n(Sl,"P",{});var s6=s(ln);D0r=r(s6,"The model class to instantiate is selected based on the "),ITe=n(s6,"CODE",{});var t6t=s(ITe);G0r=r(t6t,"model_type"),t6t.forEach(t),O0r=r(s6,` property of the config object (either
passed as an argument or loaded from `),NTe=n(s6,"CODE",{});var a6t=s(NTe);V0r=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),X0r=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(s6,"CODE",{});var n6t=s(qTe);z0r=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),W0r=r(s6,":"),s6.forEach(t),Q0r=i(Sl),u9=n(Sl,"UL",{});var QOe=s(u9);IE=n(QOe,"LI",{});var yIe=s(IE);jTe=n(yIe,"STRONG",{});var s6t=s(jTe);H0r=r(s6t,"bert"),s6t.forEach(t),U0r=r(yIe," \u2014 "),gJ=n(yIe,"A",{href:!0});var l6t=s(gJ);J0r=r(l6t,"TFBertForNextSentencePrediction"),l6t.forEach(t),Y0r=r(yIe," (BERT model)"),yIe.forEach(t),K0r=i(QOe),NE=n(QOe,"LI",{});var xIe=s(NE);DTe=n(xIe,"STRONG",{});var i6t=s(DTe);Z0r=r(i6t,"mobilebert"),i6t.forEach(t),ewr=r(xIe," \u2014 "),hJ=n(xIe,"A",{href:!0});var d6t=s(hJ);owr=r(d6t,"TFMobileBertForNextSentencePrediction"),d6t.forEach(t),rwr=r(xIe," (MobileBERT model)"),xIe.forEach(t),QOe.forEach(t),twr=i(Sl),T(qE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),GDe=i(f),_c=n(f,"H2",{class:!0});var HOe=s(_c);jE=n(HOe,"A",{id:!0,class:!0,href:!0});var c6t=s(jE);GTe=n(c6t,"SPAN",{});var f6t=s(GTe);T(b9.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),awr=i(HOe),OTe=n(HOe,"SPAN",{});var m6t=s(OTe);nwr=r(m6t,"TFAutoModelForTableQuestionAnswering"),m6t.forEach(t),HOe.forEach(t),ODe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(v9.$$.fragment,Rl),swr=i(Rl),uc=n(Rl,"P",{});var moe=s(uc);lwr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pJ=n(moe,"A",{href:!0});var g6t=s(pJ);iwr=r(g6t,"from_pretrained()"),g6t.forEach(t),dwr=r(moe," class method or the "),_J=n(moe,"A",{href:!0});var h6t=s(_J);cwr=r(h6t,"from_config()"),h6t.forEach(t),fwr=r(moe,` class
method.`),moe.forEach(t),mwr=i(Rl),F9=n(Rl,"P",{});var UOe=s(F9);gwr=r(UOe,"This class cannot be instantiated directly using "),VTe=n(UOe,"CODE",{});var p6t=s(VTe);hwr=r(p6t,"__init__()"),p6t.forEach(t),pwr=r(UOe," (throws an error)."),UOe.forEach(t),_wr=i(Rl),It=n(Rl,"DIV",{class:!0});var l6=s(It);T(T9.$$.fragment,l6),uwr=i(l6),XTe=n(l6,"P",{});var _6t=s(XTe);bwr=r(_6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_6t.forEach(t),vwr=i(l6),bc=n(l6,"P",{});var goe=s(bc);Fwr=r(goe,`Note:
Loading a model from its configuration file does `),zTe=n(goe,"STRONG",{});var u6t=s(zTe);Twr=r(u6t,"not"),u6t.forEach(t),Mwr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(goe,"A",{href:!0});var b6t=s(uJ);Ewr=r(b6t,"from_pretrained()"),b6t.forEach(t),Cwr=r(goe," to load the model weights."),goe.forEach(t),wwr=i(l6),T(DE.$$.fragment,l6),l6.forEach(t),Awr=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(M9.$$.fragment,Pl),Lwr=i(Pl),WTe=n(Pl,"P",{});var v6t=s(WTe);ywr=r(v6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v6t.forEach(t),xwr=i(Pl),dn=n(Pl,"P",{});var i6=s(dn);$wr=r(i6,"The model class to instantiate is selected based on the "),QTe=n(i6,"CODE",{});var F6t=s(QTe);kwr=r(F6t,"model_type"),F6t.forEach(t),Swr=r(i6,` property of the config object (either
passed as an argument or loaded from `),HTe=n(i6,"CODE",{});var T6t=s(HTe);Rwr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),Pwr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(i6,"CODE",{});var M6t=s(UTe);Bwr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),Iwr=r(i6,":"),i6.forEach(t),Nwr=i(Pl),JTe=n(Pl,"UL",{});var E6t=s(JTe);GE=n(E6t,"LI",{});var $Ie=s(GE);YTe=n($Ie,"STRONG",{});var C6t=s(YTe);qwr=r(C6t,"tapas"),C6t.forEach(t),jwr=r($Ie," \u2014 "),bJ=n($Ie,"A",{href:!0});var w6t=s(bJ);Dwr=r(w6t,"TFTapasForQuestionAnswering"),w6t.forEach(t),Gwr=r($Ie," (TAPAS model)"),$Ie.forEach(t),E6t.forEach(t),Owr=i(Pl),T(OE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),VDe=i(f),vc=n(f,"H2",{class:!0});var JOe=s(vc);VE=n(JOe,"A",{id:!0,class:!0,href:!0});var A6t=s(VE);KTe=n(A6t,"SPAN",{});var L6t=s(KTe);T(E9.$$.fragment,L6t),L6t.forEach(t),A6t.forEach(t),Vwr=i(JOe),ZTe=n(JOe,"SPAN",{});var y6t=s(ZTe);Xwr=r(y6t,"TFAutoModelForTokenClassification"),y6t.forEach(t),JOe.forEach(t),XDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(C9.$$.fragment,Bl),zwr=i(Bl),Fc=n(Bl,"P",{});var hoe=s(Fc);Wwr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=n(hoe,"A",{href:!0});var x6t=s(vJ);Qwr=r(x6t,"from_pretrained()"),x6t.forEach(t),Hwr=r(hoe," class method or the "),FJ=n(hoe,"A",{href:!0});var $6t=s(FJ);Uwr=r($6t,"from_config()"),$6t.forEach(t),Jwr=r(hoe,` class
method.`),hoe.forEach(t),Ywr=i(Bl),w9=n(Bl,"P",{});var YOe=s(w9);Kwr=r(YOe,"This class cannot be instantiated directly using "),e7e=n(YOe,"CODE",{});var k6t=s(e7e);Zwr=r(k6t,"__init__()"),k6t.forEach(t),eAr=r(YOe," (throws an error)."),YOe.forEach(t),oAr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var d6=s(Nt);T(A9.$$.fragment,d6),rAr=i(d6),o7e=n(d6,"P",{});var S6t=s(o7e);tAr=r(S6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S6t.forEach(t),aAr=i(d6),Tc=n(d6,"P",{});var poe=s(Tc);nAr=r(poe,`Note:
Loading a model from its configuration file does `),r7e=n(poe,"STRONG",{});var R6t=s(r7e);sAr=r(R6t,"not"),R6t.forEach(t),lAr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(poe,"A",{href:!0});var P6t=s(TJ);iAr=r(P6t,"from_pretrained()"),P6t.forEach(t),dAr=r(poe," to load the model weights."),poe.forEach(t),cAr=i(d6),T(XE.$$.fragment,d6),d6.forEach(t),fAr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(L9.$$.fragment,Il),mAr=i(Il),t7e=n(Il,"P",{});var B6t=s(t7e);gAr=r(B6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B6t.forEach(t),hAr=i(Il),cn=n(Il,"P",{});var c6=s(cn);pAr=r(c6,"The model class to instantiate is selected based on the "),a7e=n(c6,"CODE",{});var I6t=s(a7e);_Ar=r(I6t,"model_type"),I6t.forEach(t),uAr=r(c6,` property of the config object (either
passed as an argument or loaded from `),n7e=n(c6,"CODE",{});var N6t=s(n7e);bAr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),vAr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(c6,"CODE",{});var q6t=s(s7e);FAr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),TAr=r(c6,":"),c6.forEach(t),MAr=i(Il),de=n(Il,"UL",{});var me=s(de);zE=n(me,"LI",{});var kIe=s(zE);l7e=n(kIe,"STRONG",{});var j6t=s(l7e);EAr=r(j6t,"albert"),j6t.forEach(t),CAr=r(kIe," \u2014 "),MJ=n(kIe,"A",{href:!0});var D6t=s(MJ);wAr=r(D6t,"TFAlbertForTokenClassification"),D6t.forEach(t),AAr=r(kIe," (ALBERT model)"),kIe.forEach(t),LAr=i(me),WE=n(me,"LI",{});var SIe=s(WE);i7e=n(SIe,"STRONG",{});var G6t=s(i7e);yAr=r(G6t,"bert"),G6t.forEach(t),xAr=r(SIe," \u2014 "),EJ=n(SIe,"A",{href:!0});var O6t=s(EJ);$Ar=r(O6t,"TFBertForTokenClassification"),O6t.forEach(t),kAr=r(SIe," (BERT model)"),SIe.forEach(t),SAr=i(me),QE=n(me,"LI",{});var RIe=s(QE);d7e=n(RIe,"STRONG",{});var V6t=s(d7e);RAr=r(V6t,"camembert"),V6t.forEach(t),PAr=r(RIe," \u2014 "),CJ=n(RIe,"A",{href:!0});var X6t=s(CJ);BAr=r(X6t,"TFCamembertForTokenClassification"),X6t.forEach(t),IAr=r(RIe," (CamemBERT model)"),RIe.forEach(t),NAr=i(me),HE=n(me,"LI",{});var PIe=s(HE);c7e=n(PIe,"STRONG",{});var z6t=s(c7e);qAr=r(z6t,"convbert"),z6t.forEach(t),jAr=r(PIe," \u2014 "),wJ=n(PIe,"A",{href:!0});var W6t=s(wJ);DAr=r(W6t,"TFConvBertForTokenClassification"),W6t.forEach(t),GAr=r(PIe," (ConvBERT model)"),PIe.forEach(t),OAr=i(me),UE=n(me,"LI",{});var BIe=s(UE);f7e=n(BIe,"STRONG",{});var Q6t=s(f7e);VAr=r(Q6t,"deberta"),Q6t.forEach(t),XAr=r(BIe," \u2014 "),AJ=n(BIe,"A",{href:!0});var H6t=s(AJ);zAr=r(H6t,"TFDebertaForTokenClassification"),H6t.forEach(t),WAr=r(BIe," (DeBERTa model)"),BIe.forEach(t),QAr=i(me),JE=n(me,"LI",{});var IIe=s(JE);m7e=n(IIe,"STRONG",{});var U6t=s(m7e);HAr=r(U6t,"deberta-v2"),U6t.forEach(t),UAr=r(IIe," \u2014 "),LJ=n(IIe,"A",{href:!0});var J6t=s(LJ);JAr=r(J6t,"TFDebertaV2ForTokenClassification"),J6t.forEach(t),YAr=r(IIe," (DeBERTa-v2 model)"),IIe.forEach(t),KAr=i(me),YE=n(me,"LI",{});var NIe=s(YE);g7e=n(NIe,"STRONG",{});var Y6t=s(g7e);ZAr=r(Y6t,"distilbert"),Y6t.forEach(t),e6r=r(NIe," \u2014 "),yJ=n(NIe,"A",{href:!0});var K6t=s(yJ);o6r=r(K6t,"TFDistilBertForTokenClassification"),K6t.forEach(t),r6r=r(NIe," (DistilBERT model)"),NIe.forEach(t),t6r=i(me),KE=n(me,"LI",{});var qIe=s(KE);h7e=n(qIe,"STRONG",{});var Z6t=s(h7e);a6r=r(Z6t,"electra"),Z6t.forEach(t),n6r=r(qIe," \u2014 "),xJ=n(qIe,"A",{href:!0});var eLt=s(xJ);s6r=r(eLt,"TFElectraForTokenClassification"),eLt.forEach(t),l6r=r(qIe," (ELECTRA model)"),qIe.forEach(t),i6r=i(me),ZE=n(me,"LI",{});var jIe=s(ZE);p7e=n(jIe,"STRONG",{});var oLt=s(p7e);d6r=r(oLt,"flaubert"),oLt.forEach(t),c6r=r(jIe," \u2014 "),$J=n(jIe,"A",{href:!0});var rLt=s($J);f6r=r(rLt,"TFFlaubertForTokenClassification"),rLt.forEach(t),m6r=r(jIe," (FlauBERT model)"),jIe.forEach(t),g6r=i(me),eC=n(me,"LI",{});var DIe=s(eC);_7e=n(DIe,"STRONG",{});var tLt=s(_7e);h6r=r(tLt,"funnel"),tLt.forEach(t),p6r=r(DIe," \u2014 "),kJ=n(DIe,"A",{href:!0});var aLt=s(kJ);_6r=r(aLt,"TFFunnelForTokenClassification"),aLt.forEach(t),u6r=r(DIe," (Funnel Transformer model)"),DIe.forEach(t),b6r=i(me),oC=n(me,"LI",{});var GIe=s(oC);u7e=n(GIe,"STRONG",{});var nLt=s(u7e);v6r=r(nLt,"layoutlm"),nLt.forEach(t),F6r=r(GIe," \u2014 "),SJ=n(GIe,"A",{href:!0});var sLt=s(SJ);T6r=r(sLt,"TFLayoutLMForTokenClassification"),sLt.forEach(t),M6r=r(GIe," (LayoutLM model)"),GIe.forEach(t),E6r=i(me),rC=n(me,"LI",{});var OIe=s(rC);b7e=n(OIe,"STRONG",{});var lLt=s(b7e);C6r=r(lLt,"longformer"),lLt.forEach(t),w6r=r(OIe," \u2014 "),RJ=n(OIe,"A",{href:!0});var iLt=s(RJ);A6r=r(iLt,"TFLongformerForTokenClassification"),iLt.forEach(t),L6r=r(OIe," (Longformer model)"),OIe.forEach(t),y6r=i(me),tC=n(me,"LI",{});var VIe=s(tC);v7e=n(VIe,"STRONG",{});var dLt=s(v7e);x6r=r(dLt,"mobilebert"),dLt.forEach(t),$6r=r(VIe," \u2014 "),PJ=n(VIe,"A",{href:!0});var cLt=s(PJ);k6r=r(cLt,"TFMobileBertForTokenClassification"),cLt.forEach(t),S6r=r(VIe," (MobileBERT model)"),VIe.forEach(t),R6r=i(me),aC=n(me,"LI",{});var XIe=s(aC);F7e=n(XIe,"STRONG",{});var fLt=s(F7e);P6r=r(fLt,"mpnet"),fLt.forEach(t),B6r=r(XIe," \u2014 "),BJ=n(XIe,"A",{href:!0});var mLt=s(BJ);I6r=r(mLt,"TFMPNetForTokenClassification"),mLt.forEach(t),N6r=r(XIe," (MPNet model)"),XIe.forEach(t),q6r=i(me),nC=n(me,"LI",{});var zIe=s(nC);T7e=n(zIe,"STRONG",{});var gLt=s(T7e);j6r=r(gLt,"rembert"),gLt.forEach(t),D6r=r(zIe," \u2014 "),IJ=n(zIe,"A",{href:!0});var hLt=s(IJ);G6r=r(hLt,"TFRemBertForTokenClassification"),hLt.forEach(t),O6r=r(zIe," (RemBERT model)"),zIe.forEach(t),V6r=i(me),sC=n(me,"LI",{});var WIe=s(sC);M7e=n(WIe,"STRONG",{});var pLt=s(M7e);X6r=r(pLt,"roberta"),pLt.forEach(t),z6r=r(WIe," \u2014 "),NJ=n(WIe,"A",{href:!0});var _Lt=s(NJ);W6r=r(_Lt,"TFRobertaForTokenClassification"),_Lt.forEach(t),Q6r=r(WIe," (RoBERTa model)"),WIe.forEach(t),H6r=i(me),lC=n(me,"LI",{});var QIe=s(lC);E7e=n(QIe,"STRONG",{});var uLt=s(E7e);U6r=r(uLt,"roformer"),uLt.forEach(t),J6r=r(QIe," \u2014 "),qJ=n(QIe,"A",{href:!0});var bLt=s(qJ);Y6r=r(bLt,"TFRoFormerForTokenClassification"),bLt.forEach(t),K6r=r(QIe," (RoFormer model)"),QIe.forEach(t),Z6r=i(me),iC=n(me,"LI",{});var HIe=s(iC);C7e=n(HIe,"STRONG",{});var vLt=s(C7e);eLr=r(vLt,"xlm"),vLt.forEach(t),oLr=r(HIe," \u2014 "),jJ=n(HIe,"A",{href:!0});var FLt=s(jJ);rLr=r(FLt,"TFXLMForTokenClassification"),FLt.forEach(t),tLr=r(HIe," (XLM model)"),HIe.forEach(t),aLr=i(me),dC=n(me,"LI",{});var UIe=s(dC);w7e=n(UIe,"STRONG",{});var TLt=s(w7e);nLr=r(TLt,"xlm-roberta"),TLt.forEach(t),sLr=r(UIe," \u2014 "),DJ=n(UIe,"A",{href:!0});var MLt=s(DJ);lLr=r(MLt,"TFXLMRobertaForTokenClassification"),MLt.forEach(t),iLr=r(UIe," (XLM-RoBERTa model)"),UIe.forEach(t),dLr=i(me),cC=n(me,"LI",{});var JIe=s(cC);A7e=n(JIe,"STRONG",{});var ELt=s(A7e);cLr=r(ELt,"xlnet"),ELt.forEach(t),fLr=r(JIe," \u2014 "),GJ=n(JIe,"A",{href:!0});var CLt=s(GJ);mLr=r(CLt,"TFXLNetForTokenClassification"),CLt.forEach(t),gLr=r(JIe," (XLNet model)"),JIe.forEach(t),me.forEach(t),hLr=i(Il),T(fC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),zDe=i(f),Mc=n(f,"H2",{class:!0});var KOe=s(Mc);mC=n(KOe,"A",{id:!0,class:!0,href:!0});var wLt=s(mC);L7e=n(wLt,"SPAN",{});var ALt=s(L7e);T(y9.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),pLr=i(KOe),y7e=n(KOe,"SPAN",{});var LLt=s(y7e);_Lr=r(LLt,"TFAutoModelForQuestionAnswering"),LLt.forEach(t),KOe.forEach(t),WDe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(x9.$$.fragment,Nl),uLr=i(Nl),Ec=n(Nl,"P",{});var _oe=s(Ec);bLr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OJ=n(_oe,"A",{href:!0});var yLt=s(OJ);vLr=r(yLt,"from_pretrained()"),yLt.forEach(t),FLr=r(_oe," class method or the "),VJ=n(_oe,"A",{href:!0});var xLt=s(VJ);TLr=r(xLt,"from_config()"),xLt.forEach(t),MLr=r(_oe,` class
method.`),_oe.forEach(t),ELr=i(Nl),$9=n(Nl,"P",{});var ZOe=s($9);CLr=r(ZOe,"This class cannot be instantiated directly using "),x7e=n(ZOe,"CODE",{});var $Lt=s(x7e);wLr=r($Lt,"__init__()"),$Lt.forEach(t),ALr=r(ZOe," (throws an error)."),ZOe.forEach(t),LLr=i(Nl),qt=n(Nl,"DIV",{class:!0});var f6=s(qt);T(k9.$$.fragment,f6),yLr=i(f6),$7e=n(f6,"P",{});var kLt=s($7e);xLr=r(kLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kLt.forEach(t),$Lr=i(f6),Cc=n(f6,"P",{});var uoe=s(Cc);kLr=r(uoe,`Note:
Loading a model from its configuration file does `),k7e=n(uoe,"STRONG",{});var SLt=s(k7e);SLr=r(SLt,"not"),SLt.forEach(t),RLr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(uoe,"A",{href:!0});var RLt=s(XJ);PLr=r(RLt,"from_pretrained()"),RLt.forEach(t),BLr=r(uoe," to load the model weights."),uoe.forEach(t),ILr=i(f6),T(gC.$$.fragment,f6),f6.forEach(t),NLr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(S9.$$.fragment,ql),qLr=i(ql),S7e=n(ql,"P",{});var PLt=s(S7e);jLr=r(PLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PLt.forEach(t),DLr=i(ql),fn=n(ql,"P",{});var m6=s(fn);GLr=r(m6,"The model class to instantiate is selected based on the "),R7e=n(m6,"CODE",{});var BLt=s(R7e);OLr=r(BLt,"model_type"),BLt.forEach(t),VLr=r(m6,` property of the config object (either
passed as an argument or loaded from `),P7e=n(m6,"CODE",{});var ILt=s(P7e);XLr=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),zLr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=n(m6,"CODE",{});var NLt=s(B7e);WLr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),QLr=r(m6,":"),m6.forEach(t),HLr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);hC=n(ge,"LI",{});var YIe=s(hC);I7e=n(YIe,"STRONG",{});var qLt=s(I7e);ULr=r(qLt,"albert"),qLt.forEach(t),JLr=r(YIe," \u2014 "),zJ=n(YIe,"A",{href:!0});var jLt=s(zJ);YLr=r(jLt,"TFAlbertForQuestionAnswering"),jLt.forEach(t),KLr=r(YIe," (ALBERT model)"),YIe.forEach(t),ZLr=i(ge),pC=n(ge,"LI",{});var KIe=s(pC);N7e=n(KIe,"STRONG",{});var DLt=s(N7e);eyr=r(DLt,"bert"),DLt.forEach(t),oyr=r(KIe," \u2014 "),WJ=n(KIe,"A",{href:!0});var GLt=s(WJ);ryr=r(GLt,"TFBertForQuestionAnswering"),GLt.forEach(t),tyr=r(KIe," (BERT model)"),KIe.forEach(t),ayr=i(ge),_C=n(ge,"LI",{});var ZIe=s(_C);q7e=n(ZIe,"STRONG",{});var OLt=s(q7e);nyr=r(OLt,"camembert"),OLt.forEach(t),syr=r(ZIe," \u2014 "),QJ=n(ZIe,"A",{href:!0});var VLt=s(QJ);lyr=r(VLt,"TFCamembertForQuestionAnswering"),VLt.forEach(t),iyr=r(ZIe," (CamemBERT model)"),ZIe.forEach(t),dyr=i(ge),uC=n(ge,"LI",{});var eNe=s(uC);j7e=n(eNe,"STRONG",{});var XLt=s(j7e);cyr=r(XLt,"convbert"),XLt.forEach(t),fyr=r(eNe," \u2014 "),HJ=n(eNe,"A",{href:!0});var zLt=s(HJ);myr=r(zLt,"TFConvBertForQuestionAnswering"),zLt.forEach(t),gyr=r(eNe," (ConvBERT model)"),eNe.forEach(t),hyr=i(ge),bC=n(ge,"LI",{});var oNe=s(bC);D7e=n(oNe,"STRONG",{});var WLt=s(D7e);pyr=r(WLt,"deberta"),WLt.forEach(t),_yr=r(oNe," \u2014 "),UJ=n(oNe,"A",{href:!0});var QLt=s(UJ);uyr=r(QLt,"TFDebertaForQuestionAnswering"),QLt.forEach(t),byr=r(oNe," (DeBERTa model)"),oNe.forEach(t),vyr=i(ge),vC=n(ge,"LI",{});var rNe=s(vC);G7e=n(rNe,"STRONG",{});var HLt=s(G7e);Fyr=r(HLt,"deberta-v2"),HLt.forEach(t),Tyr=r(rNe," \u2014 "),JJ=n(rNe,"A",{href:!0});var ULt=s(JJ);Myr=r(ULt,"TFDebertaV2ForQuestionAnswering"),ULt.forEach(t),Eyr=r(rNe," (DeBERTa-v2 model)"),rNe.forEach(t),Cyr=i(ge),FC=n(ge,"LI",{});var tNe=s(FC);O7e=n(tNe,"STRONG",{});var JLt=s(O7e);wyr=r(JLt,"distilbert"),JLt.forEach(t),Ayr=r(tNe," \u2014 "),YJ=n(tNe,"A",{href:!0});var YLt=s(YJ);Lyr=r(YLt,"TFDistilBertForQuestionAnswering"),YLt.forEach(t),yyr=r(tNe," (DistilBERT model)"),tNe.forEach(t),xyr=i(ge),TC=n(ge,"LI",{});var aNe=s(TC);V7e=n(aNe,"STRONG",{});var KLt=s(V7e);$yr=r(KLt,"electra"),KLt.forEach(t),kyr=r(aNe," \u2014 "),KJ=n(aNe,"A",{href:!0});var ZLt=s(KJ);Syr=r(ZLt,"TFElectraForQuestionAnswering"),ZLt.forEach(t),Ryr=r(aNe," (ELECTRA model)"),aNe.forEach(t),Pyr=i(ge),MC=n(ge,"LI",{});var nNe=s(MC);X7e=n(nNe,"STRONG",{});var eyt=s(X7e);Byr=r(eyt,"flaubert"),eyt.forEach(t),Iyr=r(nNe," \u2014 "),ZJ=n(nNe,"A",{href:!0});var oyt=s(ZJ);Nyr=r(oyt,"TFFlaubertForQuestionAnsweringSimple"),oyt.forEach(t),qyr=r(nNe," (FlauBERT model)"),nNe.forEach(t),jyr=i(ge),EC=n(ge,"LI",{});var sNe=s(EC);z7e=n(sNe,"STRONG",{});var ryt=s(z7e);Dyr=r(ryt,"funnel"),ryt.forEach(t),Gyr=r(sNe," \u2014 "),eY=n(sNe,"A",{href:!0});var tyt=s(eY);Oyr=r(tyt,"TFFunnelForQuestionAnswering"),tyt.forEach(t),Vyr=r(sNe," (Funnel Transformer model)"),sNe.forEach(t),Xyr=i(ge),CC=n(ge,"LI",{});var lNe=s(CC);W7e=n(lNe,"STRONG",{});var ayt=s(W7e);zyr=r(ayt,"gptj"),ayt.forEach(t),Wyr=r(lNe," \u2014 "),oY=n(lNe,"A",{href:!0});var nyt=s(oY);Qyr=r(nyt,"TFGPTJForQuestionAnswering"),nyt.forEach(t),Hyr=r(lNe," (GPT-J model)"),lNe.forEach(t),Uyr=i(ge),wC=n(ge,"LI",{});var iNe=s(wC);Q7e=n(iNe,"STRONG",{});var syt=s(Q7e);Jyr=r(syt,"longformer"),syt.forEach(t),Yyr=r(iNe," \u2014 "),rY=n(iNe,"A",{href:!0});var lyt=s(rY);Kyr=r(lyt,"TFLongformerForQuestionAnswering"),lyt.forEach(t),Zyr=r(iNe," (Longformer model)"),iNe.forEach(t),e8r=i(ge),AC=n(ge,"LI",{});var dNe=s(AC);H7e=n(dNe,"STRONG",{});var iyt=s(H7e);o8r=r(iyt,"mobilebert"),iyt.forEach(t),r8r=r(dNe," \u2014 "),tY=n(dNe,"A",{href:!0});var dyt=s(tY);t8r=r(dyt,"TFMobileBertForQuestionAnswering"),dyt.forEach(t),a8r=r(dNe," (MobileBERT model)"),dNe.forEach(t),n8r=i(ge),LC=n(ge,"LI",{});var cNe=s(LC);U7e=n(cNe,"STRONG",{});var cyt=s(U7e);s8r=r(cyt,"mpnet"),cyt.forEach(t),l8r=r(cNe," \u2014 "),aY=n(cNe,"A",{href:!0});var fyt=s(aY);i8r=r(fyt,"TFMPNetForQuestionAnswering"),fyt.forEach(t),d8r=r(cNe," (MPNet model)"),cNe.forEach(t),c8r=i(ge),yC=n(ge,"LI",{});var fNe=s(yC);J7e=n(fNe,"STRONG",{});var myt=s(J7e);f8r=r(myt,"rembert"),myt.forEach(t),m8r=r(fNe," \u2014 "),nY=n(fNe,"A",{href:!0});var gyt=s(nY);g8r=r(gyt,"TFRemBertForQuestionAnswering"),gyt.forEach(t),h8r=r(fNe," (RemBERT model)"),fNe.forEach(t),p8r=i(ge),xC=n(ge,"LI",{});var mNe=s(xC);Y7e=n(mNe,"STRONG",{});var hyt=s(Y7e);_8r=r(hyt,"roberta"),hyt.forEach(t),u8r=r(mNe," \u2014 "),sY=n(mNe,"A",{href:!0});var pyt=s(sY);b8r=r(pyt,"TFRobertaForQuestionAnswering"),pyt.forEach(t),v8r=r(mNe," (RoBERTa model)"),mNe.forEach(t),F8r=i(ge),$C=n(ge,"LI",{});var gNe=s($C);K7e=n(gNe,"STRONG",{});var _yt=s(K7e);T8r=r(_yt,"roformer"),_yt.forEach(t),M8r=r(gNe," \u2014 "),lY=n(gNe,"A",{href:!0});var uyt=s(lY);E8r=r(uyt,"TFRoFormerForQuestionAnswering"),uyt.forEach(t),C8r=r(gNe," (RoFormer model)"),gNe.forEach(t),w8r=i(ge),kC=n(ge,"LI",{});var hNe=s(kC);Z7e=n(hNe,"STRONG",{});var byt=s(Z7e);A8r=r(byt,"xlm"),byt.forEach(t),L8r=r(hNe," \u2014 "),iY=n(hNe,"A",{href:!0});var vyt=s(iY);y8r=r(vyt,"TFXLMForQuestionAnsweringSimple"),vyt.forEach(t),x8r=r(hNe," (XLM model)"),hNe.forEach(t),$8r=i(ge),SC=n(ge,"LI",{});var pNe=s(SC);eMe=n(pNe,"STRONG",{});var Fyt=s(eMe);k8r=r(Fyt,"xlm-roberta"),Fyt.forEach(t),S8r=r(pNe," \u2014 "),dY=n(pNe,"A",{href:!0});var Tyt=s(dY);R8r=r(Tyt,"TFXLMRobertaForQuestionAnswering"),Tyt.forEach(t),P8r=r(pNe," (XLM-RoBERTa model)"),pNe.forEach(t),B8r=i(ge),RC=n(ge,"LI",{});var _Ne=s(RC);oMe=n(_Ne,"STRONG",{});var Myt=s(oMe);I8r=r(Myt,"xlnet"),Myt.forEach(t),N8r=r(_Ne," \u2014 "),cY=n(_Ne,"A",{href:!0});var Eyt=s(cY);q8r=r(Eyt,"TFXLNetForQuestionAnsweringSimple"),Eyt.forEach(t),j8r=r(_Ne," (XLNet model)"),_Ne.forEach(t),ge.forEach(t),D8r=i(ql),T(PC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),QDe=i(f),wc=n(f,"H2",{class:!0});var eVe=s(wc);BC=n(eVe,"A",{id:!0,class:!0,href:!0});var Cyt=s(BC);rMe=n(Cyt,"SPAN",{});var wyt=s(rMe);T(R9.$$.fragment,wyt),wyt.forEach(t),Cyt.forEach(t),G8r=i(eVe),tMe=n(eVe,"SPAN",{});var Ayt=s(tMe);O8r=r(Ayt,"TFAutoModelForVision2Seq"),Ayt.forEach(t),eVe.forEach(t),HDe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(P9.$$.fragment,jl),V8r=i(jl),Ac=n(jl,"P",{});var boe=s(Ac);X8r=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fY=n(boe,"A",{href:!0});var Lyt=s(fY);z8r=r(Lyt,"from_pretrained()"),Lyt.forEach(t),W8r=r(boe," class method or the "),mY=n(boe,"A",{href:!0});var yyt=s(mY);Q8r=r(yyt,"from_config()"),yyt.forEach(t),H8r=r(boe,` class
method.`),boe.forEach(t),U8r=i(jl),B9=n(jl,"P",{});var oVe=s(B9);J8r=r(oVe,"This class cannot be instantiated directly using "),aMe=n(oVe,"CODE",{});var xyt=s(aMe);Y8r=r(xyt,"__init__()"),xyt.forEach(t),K8r=r(oVe," (throws an error)."),oVe.forEach(t),Z8r=i(jl),jt=n(jl,"DIV",{class:!0});var g6=s(jt);T(I9.$$.fragment,g6),e9r=i(g6),nMe=n(g6,"P",{});var $yt=s(nMe);o9r=r($yt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$yt.forEach(t),r9r=i(g6),Lc=n(g6,"P",{});var voe=s(Lc);t9r=r(voe,`Note:
Loading a model from its configuration file does `),sMe=n(voe,"STRONG",{});var kyt=s(sMe);a9r=r(kyt,"not"),kyt.forEach(t),n9r=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(voe,"A",{href:!0});var Syt=s(gY);s9r=r(Syt,"from_pretrained()"),Syt.forEach(t),l9r=r(voe," to load the model weights."),voe.forEach(t),i9r=i(g6),T(IC.$$.fragment,g6),g6.forEach(t),d9r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(N9.$$.fragment,Dl),c9r=i(Dl),lMe=n(Dl,"P",{});var Ryt=s(lMe);f9r=r(Ryt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ryt.forEach(t),m9r=i(Dl),mn=n(Dl,"P",{});var h6=s(mn);g9r=r(h6,"The model class to instantiate is selected based on the "),iMe=n(h6,"CODE",{});var Pyt=s(iMe);h9r=r(Pyt,"model_type"),Pyt.forEach(t),p9r=r(h6,` property of the config object (either
passed as an argument or loaded from `),dMe=n(h6,"CODE",{});var Byt=s(dMe);_9r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),u9r=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(h6,"CODE",{});var Iyt=s(cMe);b9r=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),v9r=r(h6,":"),h6.forEach(t),F9r=i(Dl),fMe=n(Dl,"UL",{});var Nyt=s(fMe);NC=n(Nyt,"LI",{});var uNe=s(NC);mMe=n(uNe,"STRONG",{});var qyt=s(mMe);T9r=r(qyt,"vision-encoder-decoder"),qyt.forEach(t),M9r=r(uNe," \u2014 "),hY=n(uNe,"A",{href:!0});var jyt=s(hY);E9r=r(jyt,"TFVisionEncoderDecoderModel"),jyt.forEach(t),C9r=r(uNe," (Vision Encoder decoder model)"),uNe.forEach(t),Nyt.forEach(t),w9r=i(Dl),T(qC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),UDe=i(f),yc=n(f,"H2",{class:!0});var rVe=s(yc);jC=n(rVe,"A",{id:!0,class:!0,href:!0});var Dyt=s(jC);gMe=n(Dyt,"SPAN",{});var Gyt=s(gMe);T(q9.$$.fragment,Gyt),Gyt.forEach(t),Dyt.forEach(t),A9r=i(rVe),hMe=n(rVe,"SPAN",{});var Oyt=s(hMe);L9r=r(Oyt,"TFAutoModelForSpeechSeq2Seq"),Oyt.forEach(t),rVe.forEach(t),JDe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(j9.$$.fragment,Gl),y9r=i(Gl),xc=n(Gl,"P",{});var Foe=s(xc);x9r=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pY=n(Foe,"A",{href:!0});var Vyt=s(pY);$9r=r(Vyt,"from_pretrained()"),Vyt.forEach(t),k9r=r(Foe," class method or the "),_Y=n(Foe,"A",{href:!0});var Xyt=s(_Y);S9r=r(Xyt,"from_config()"),Xyt.forEach(t),R9r=r(Foe,` class
method.`),Foe.forEach(t),P9r=i(Gl),D9=n(Gl,"P",{});var tVe=s(D9);B9r=r(tVe,"This class cannot be instantiated directly using "),pMe=n(tVe,"CODE",{});var zyt=s(pMe);I9r=r(zyt,"__init__()"),zyt.forEach(t),N9r=r(tVe," (throws an error)."),tVe.forEach(t),q9r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var p6=s(Dt);T(G9.$$.fragment,p6),j9r=i(p6),_Me=n(p6,"P",{});var Wyt=s(_Me);D9r=r(Wyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wyt.forEach(t),G9r=i(p6),$c=n(p6,"P",{});var Toe=s($c);O9r=r(Toe,`Note:
Loading a model from its configuration file does `),uMe=n(Toe,"STRONG",{});var Qyt=s(uMe);V9r=r(Qyt,"not"),Qyt.forEach(t),X9r=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Toe,"A",{href:!0});var Hyt=s(uY);z9r=r(Hyt,"from_pretrained()"),Hyt.forEach(t),W9r=r(Toe," to load the model weights."),Toe.forEach(t),Q9r=i(p6),T(DC.$$.fragment,p6),p6.forEach(t),H9r=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(O9.$$.fragment,Ol),U9r=i(Ol),bMe=n(Ol,"P",{});var Uyt=s(bMe);J9r=r(Uyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Uyt.forEach(t),Y9r=i(Ol),gn=n(Ol,"P",{});var _6=s(gn);K9r=r(_6,"The model class to instantiate is selected based on the "),vMe=n(_6,"CODE",{});var Jyt=s(vMe);Z9r=r(Jyt,"model_type"),Jyt.forEach(t),exr=r(_6,` property of the config object (either
passed as an argument or loaded from `),FMe=n(_6,"CODE",{});var Yyt=s(FMe);oxr=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),rxr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(_6,"CODE",{});var Kyt=s(TMe);txr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),axr=r(_6,":"),_6.forEach(t),nxr=i(Ol),MMe=n(Ol,"UL",{});var Zyt=s(MMe);GC=n(Zyt,"LI",{});var bNe=s(GC);EMe=n(bNe,"STRONG",{});var e8t=s(EMe);sxr=r(e8t,"speech_to_text"),e8t.forEach(t),lxr=r(bNe," \u2014 "),bY=n(bNe,"A",{href:!0});var o8t=s(bY);ixr=r(o8t,"TFSpeech2TextForConditionalGeneration"),o8t.forEach(t),dxr=r(bNe," (Speech2Text model)"),bNe.forEach(t),Zyt.forEach(t),cxr=i(Ol),T(OC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),YDe=i(f),kc=n(f,"H2",{class:!0});var aVe=s(kc);VC=n(aVe,"A",{id:!0,class:!0,href:!0});var r8t=s(VC);CMe=n(r8t,"SPAN",{});var t8t=s(CMe);T(V9.$$.fragment,t8t),t8t.forEach(t),r8t.forEach(t),fxr=i(aVe),wMe=n(aVe,"SPAN",{});var a8t=s(wMe);mxr=r(a8t,"FlaxAutoModel"),a8t.forEach(t),aVe.forEach(t),KDe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(X9.$$.fragment,Vl),gxr=i(Vl),Sc=n(Vl,"P",{});var Moe=s(Sc);hxr=r(Moe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vY=n(Moe,"A",{href:!0});var n8t=s(vY);pxr=r(n8t,"from_pretrained()"),n8t.forEach(t),_xr=r(Moe," class method or the "),FY=n(Moe,"A",{href:!0});var s8t=s(FY);uxr=r(s8t,"from_config()"),s8t.forEach(t),bxr=r(Moe,` class
method.`),Moe.forEach(t),vxr=i(Vl),z9=n(Vl,"P",{});var nVe=s(z9);Fxr=r(nVe,"This class cannot be instantiated directly using "),AMe=n(nVe,"CODE",{});var l8t=s(AMe);Txr=r(l8t,"__init__()"),l8t.forEach(t),Mxr=r(nVe," (throws an error)."),nVe.forEach(t),Exr=i(Vl),Gt=n(Vl,"DIV",{class:!0});var u6=s(Gt);T(W9.$$.fragment,u6),Cxr=i(u6),LMe=n(u6,"P",{});var i8t=s(LMe);wxr=r(i8t,"Instantiates one of the base model classes of the library from a configuration."),i8t.forEach(t),Axr=i(u6),Rc=n(u6,"P",{});var Eoe=s(Rc);Lxr=r(Eoe,`Note:
Loading a model from its configuration file does `),yMe=n(Eoe,"STRONG",{});var d8t=s(yMe);yxr=r(d8t,"not"),d8t.forEach(t),xxr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Eoe,"A",{href:!0});var c8t=s(TY);$xr=r(c8t,"from_pretrained()"),c8t.forEach(t),kxr=r(Eoe," to load the model weights."),Eoe.forEach(t),Sxr=i(u6),T(XC.$$.fragment,u6),u6.forEach(t),Rxr=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(Q9.$$.fragment,Xl),Pxr=i(Xl),xMe=n(Xl,"P",{});var f8t=s(xMe);Bxr=r(f8t,"Instantiate one of the base model classes of the library from a pretrained model."),f8t.forEach(t),Ixr=i(Xl),hn=n(Xl,"P",{});var b6=s(hn);Nxr=r(b6,"The model class to instantiate is selected based on the "),$Me=n(b6,"CODE",{});var m8t=s($Me);qxr=r(m8t,"model_type"),m8t.forEach(t),jxr=r(b6,` property of the config object (either
passed as an argument or loaded from `),kMe=n(b6,"CODE",{});var g8t=s(kMe);Dxr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),Gxr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(b6,"CODE",{});var h8t=s(SMe);Oxr=r(h8t,"pretrained_model_name_or_path"),h8t.forEach(t),Vxr=r(b6,":"),b6.forEach(t),Xxr=i(Xl),re=n(Xl,"UL",{});var ne=s(re);zC=n(ne,"LI",{});var vNe=s(zC);RMe=n(vNe,"STRONG",{});var p8t=s(RMe);zxr=r(p8t,"albert"),p8t.forEach(t),Wxr=r(vNe," \u2014 "),MY=n(vNe,"A",{href:!0});var _8t=s(MY);Qxr=r(_8t,"FlaxAlbertModel"),_8t.forEach(t),Hxr=r(vNe," (ALBERT model)"),vNe.forEach(t),Uxr=i(ne),WC=n(ne,"LI",{});var FNe=s(WC);PMe=n(FNe,"STRONG",{});var u8t=s(PMe);Jxr=r(u8t,"bart"),u8t.forEach(t),Yxr=r(FNe," \u2014 "),EY=n(FNe,"A",{href:!0});var b8t=s(EY);Kxr=r(b8t,"FlaxBartModel"),b8t.forEach(t),Zxr=r(FNe," (BART model)"),FNe.forEach(t),e$r=i(ne),QC=n(ne,"LI",{});var TNe=s(QC);BMe=n(TNe,"STRONG",{});var v8t=s(BMe);o$r=r(v8t,"beit"),v8t.forEach(t),r$r=r(TNe," \u2014 "),CY=n(TNe,"A",{href:!0});var F8t=s(CY);t$r=r(F8t,"FlaxBeitModel"),F8t.forEach(t),a$r=r(TNe," (BEiT model)"),TNe.forEach(t),n$r=i(ne),HC=n(ne,"LI",{});var MNe=s(HC);IMe=n(MNe,"STRONG",{});var T8t=s(IMe);s$r=r(T8t,"bert"),T8t.forEach(t),l$r=r(MNe," \u2014 "),wY=n(MNe,"A",{href:!0});var M8t=s(wY);i$r=r(M8t,"FlaxBertModel"),M8t.forEach(t),d$r=r(MNe," (BERT model)"),MNe.forEach(t),c$r=i(ne),UC=n(ne,"LI",{});var ENe=s(UC);NMe=n(ENe,"STRONG",{});var E8t=s(NMe);f$r=r(E8t,"big_bird"),E8t.forEach(t),m$r=r(ENe," \u2014 "),AY=n(ENe,"A",{href:!0});var C8t=s(AY);g$r=r(C8t,"FlaxBigBirdModel"),C8t.forEach(t),h$r=r(ENe," (BigBird model)"),ENe.forEach(t),p$r=i(ne),JC=n(ne,"LI",{});var CNe=s(JC);qMe=n(CNe,"STRONG",{});var w8t=s(qMe);_$r=r(w8t,"blenderbot"),w8t.forEach(t),u$r=r(CNe," \u2014 "),LY=n(CNe,"A",{href:!0});var A8t=s(LY);b$r=r(A8t,"FlaxBlenderbotModel"),A8t.forEach(t),v$r=r(CNe," (Blenderbot model)"),CNe.forEach(t),F$r=i(ne),YC=n(ne,"LI",{});var wNe=s(YC);jMe=n(wNe,"STRONG",{});var L8t=s(jMe);T$r=r(L8t,"blenderbot-small"),L8t.forEach(t),M$r=r(wNe," \u2014 "),yY=n(wNe,"A",{href:!0});var y8t=s(yY);E$r=r(y8t,"FlaxBlenderbotSmallModel"),y8t.forEach(t),C$r=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),w$r=i(ne),KC=n(ne,"LI",{});var ANe=s(KC);DMe=n(ANe,"STRONG",{});var x8t=s(DMe);A$r=r(x8t,"clip"),x8t.forEach(t),L$r=r(ANe," \u2014 "),xY=n(ANe,"A",{href:!0});var $8t=s(xY);y$r=r($8t,"FlaxCLIPModel"),$8t.forEach(t),x$r=r(ANe," (CLIP model)"),ANe.forEach(t),$$r=i(ne),ZC=n(ne,"LI",{});var LNe=s(ZC);GMe=n(LNe,"STRONG",{});var k8t=s(GMe);k$r=r(k8t,"distilbert"),k8t.forEach(t),S$r=r(LNe," \u2014 "),$Y=n(LNe,"A",{href:!0});var S8t=s($Y);R$r=r(S8t,"FlaxDistilBertModel"),S8t.forEach(t),P$r=r(LNe," (DistilBERT model)"),LNe.forEach(t),B$r=i(ne),e5=n(ne,"LI",{});var yNe=s(e5);OMe=n(yNe,"STRONG",{});var R8t=s(OMe);I$r=r(R8t,"electra"),R8t.forEach(t),N$r=r(yNe," \u2014 "),kY=n(yNe,"A",{href:!0});var P8t=s(kY);q$r=r(P8t,"FlaxElectraModel"),P8t.forEach(t),j$r=r(yNe," (ELECTRA model)"),yNe.forEach(t),D$r=i(ne),o5=n(ne,"LI",{});var xNe=s(o5);VMe=n(xNe,"STRONG",{});var B8t=s(VMe);G$r=r(B8t,"gpt2"),B8t.forEach(t),O$r=r(xNe," \u2014 "),SY=n(xNe,"A",{href:!0});var I8t=s(SY);V$r=r(I8t,"FlaxGPT2Model"),I8t.forEach(t),X$r=r(xNe," (OpenAI GPT-2 model)"),xNe.forEach(t),z$r=i(ne),r5=n(ne,"LI",{});var $Ne=s(r5);XMe=n($Ne,"STRONG",{});var N8t=s(XMe);W$r=r(N8t,"gpt_neo"),N8t.forEach(t),Q$r=r($Ne," \u2014 "),RY=n($Ne,"A",{href:!0});var q8t=s(RY);H$r=r(q8t,"FlaxGPTNeoModel"),q8t.forEach(t),U$r=r($Ne," (GPT Neo model)"),$Ne.forEach(t),J$r=i(ne),t5=n(ne,"LI",{});var kNe=s(t5);zMe=n(kNe,"STRONG",{});var j8t=s(zMe);Y$r=r(j8t,"gptj"),j8t.forEach(t),K$r=r(kNe," \u2014 "),PY=n(kNe,"A",{href:!0});var D8t=s(PY);Z$r=r(D8t,"FlaxGPTJModel"),D8t.forEach(t),ekr=r(kNe," (GPT-J model)"),kNe.forEach(t),okr=i(ne),a5=n(ne,"LI",{});var SNe=s(a5);WMe=n(SNe,"STRONG",{});var G8t=s(WMe);rkr=r(G8t,"marian"),G8t.forEach(t),tkr=r(SNe," \u2014 "),BY=n(SNe,"A",{href:!0});var O8t=s(BY);akr=r(O8t,"FlaxMarianModel"),O8t.forEach(t),nkr=r(SNe," (Marian model)"),SNe.forEach(t),skr=i(ne),n5=n(ne,"LI",{});var RNe=s(n5);QMe=n(RNe,"STRONG",{});var V8t=s(QMe);lkr=r(V8t,"mbart"),V8t.forEach(t),ikr=r(RNe," \u2014 "),IY=n(RNe,"A",{href:!0});var X8t=s(IY);dkr=r(X8t,"FlaxMBartModel"),X8t.forEach(t),ckr=r(RNe," (mBART model)"),RNe.forEach(t),fkr=i(ne),s5=n(ne,"LI",{});var PNe=s(s5);HMe=n(PNe,"STRONG",{});var z8t=s(HMe);mkr=r(z8t,"mt5"),z8t.forEach(t),gkr=r(PNe," \u2014 "),NY=n(PNe,"A",{href:!0});var W8t=s(NY);hkr=r(W8t,"FlaxMT5Model"),W8t.forEach(t),pkr=r(PNe," (MT5 model)"),PNe.forEach(t),_kr=i(ne),l5=n(ne,"LI",{});var BNe=s(l5);UMe=n(BNe,"STRONG",{});var Q8t=s(UMe);ukr=r(Q8t,"opt"),Q8t.forEach(t),bkr=r(BNe," \u2014 "),qY=n(BNe,"A",{href:!0});var H8t=s(qY);vkr=r(H8t,"FlaxOPTModel"),H8t.forEach(t),Fkr=r(BNe," (OPT model)"),BNe.forEach(t),Tkr=i(ne),i5=n(ne,"LI",{});var INe=s(i5);JMe=n(INe,"STRONG",{});var U8t=s(JMe);Mkr=r(U8t,"pegasus"),U8t.forEach(t),Ekr=r(INe," \u2014 "),jY=n(INe,"A",{href:!0});var J8t=s(jY);Ckr=r(J8t,"FlaxPegasusModel"),J8t.forEach(t),wkr=r(INe," (Pegasus model)"),INe.forEach(t),Akr=i(ne),d5=n(ne,"LI",{});var NNe=s(d5);YMe=n(NNe,"STRONG",{});var Y8t=s(YMe);Lkr=r(Y8t,"roberta"),Y8t.forEach(t),ykr=r(NNe," \u2014 "),DY=n(NNe,"A",{href:!0});var K8t=s(DY);xkr=r(K8t,"FlaxRobertaModel"),K8t.forEach(t),$kr=r(NNe," (RoBERTa model)"),NNe.forEach(t),kkr=i(ne),c5=n(ne,"LI",{});var qNe=s(c5);KMe=n(qNe,"STRONG",{});var Z8t=s(KMe);Skr=r(Z8t,"roformer"),Z8t.forEach(t),Rkr=r(qNe," \u2014 "),GY=n(qNe,"A",{href:!0});var e9t=s(GY);Pkr=r(e9t,"FlaxRoFormerModel"),e9t.forEach(t),Bkr=r(qNe," (RoFormer model)"),qNe.forEach(t),Ikr=i(ne),f5=n(ne,"LI",{});var jNe=s(f5);ZMe=n(jNe,"STRONG",{});var o9t=s(ZMe);Nkr=r(o9t,"t5"),o9t.forEach(t),qkr=r(jNe," \u2014 "),OY=n(jNe,"A",{href:!0});var r9t=s(OY);jkr=r(r9t,"FlaxT5Model"),r9t.forEach(t),Dkr=r(jNe," (T5 model)"),jNe.forEach(t),Gkr=i(ne),m5=n(ne,"LI",{});var DNe=s(m5);e4e=n(DNe,"STRONG",{});var t9t=s(e4e);Okr=r(t9t,"vision-text-dual-encoder"),t9t.forEach(t),Vkr=r(DNe," \u2014 "),VY=n(DNe,"A",{href:!0});var a9t=s(VY);Xkr=r(a9t,"FlaxVisionTextDualEncoderModel"),a9t.forEach(t),zkr=r(DNe," (VisionTextDualEncoder model)"),DNe.forEach(t),Wkr=i(ne),g5=n(ne,"LI",{});var GNe=s(g5);o4e=n(GNe,"STRONG",{});var n9t=s(o4e);Qkr=r(n9t,"vit"),n9t.forEach(t),Hkr=r(GNe," \u2014 "),XY=n(GNe,"A",{href:!0});var s9t=s(XY);Ukr=r(s9t,"FlaxViTModel"),s9t.forEach(t),Jkr=r(GNe," (ViT model)"),GNe.forEach(t),Ykr=i(ne),h5=n(ne,"LI",{});var ONe=s(h5);r4e=n(ONe,"STRONG",{});var l9t=s(r4e);Kkr=r(l9t,"wav2vec2"),l9t.forEach(t),Zkr=r(ONe," \u2014 "),zY=n(ONe,"A",{href:!0});var i9t=s(zY);eSr=r(i9t,"FlaxWav2Vec2Model"),i9t.forEach(t),oSr=r(ONe," (Wav2Vec2 model)"),ONe.forEach(t),rSr=i(ne),p5=n(ne,"LI",{});var VNe=s(p5);t4e=n(VNe,"STRONG",{});var d9t=s(t4e);tSr=r(d9t,"xglm"),d9t.forEach(t),aSr=r(VNe," \u2014 "),WY=n(VNe,"A",{href:!0});var c9t=s(WY);nSr=r(c9t,"FlaxXGLMModel"),c9t.forEach(t),sSr=r(VNe," (XGLM model)"),VNe.forEach(t),lSr=i(ne),_5=n(ne,"LI",{});var XNe=s(_5);a4e=n(XNe,"STRONG",{});var f9t=s(a4e);iSr=r(f9t,"xlm-roberta"),f9t.forEach(t),dSr=r(XNe," \u2014 "),QY=n(XNe,"A",{href:!0});var m9t=s(QY);cSr=r(m9t,"FlaxXLMRobertaModel"),m9t.forEach(t),fSr=r(XNe," (XLM-RoBERTa model)"),XNe.forEach(t),ne.forEach(t),mSr=i(Xl),T(u5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),ZDe=i(f),Pc=n(f,"H2",{class:!0});var sVe=s(Pc);b5=n(sVe,"A",{id:!0,class:!0,href:!0});var g9t=s(b5);n4e=n(g9t,"SPAN",{});var h9t=s(n4e);T(H9.$$.fragment,h9t),h9t.forEach(t),g9t.forEach(t),gSr=i(sVe),s4e=n(sVe,"SPAN",{});var p9t=s(s4e);hSr=r(p9t,"FlaxAutoModelForCausalLM"),p9t.forEach(t),sVe.forEach(t),eGe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(U9.$$.fragment,zl),pSr=i(zl),Bc=n(zl,"P",{});var Coe=s(Bc);_Sr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HY=n(Coe,"A",{href:!0});var _9t=s(HY);uSr=r(_9t,"from_pretrained()"),_9t.forEach(t),bSr=r(Coe," class method or the "),UY=n(Coe,"A",{href:!0});var u9t=s(UY);vSr=r(u9t,"from_config()"),u9t.forEach(t),FSr=r(Coe,` class
method.`),Coe.forEach(t),TSr=i(zl),J9=n(zl,"P",{});var lVe=s(J9);MSr=r(lVe,"This class cannot be instantiated directly using "),l4e=n(lVe,"CODE",{});var b9t=s(l4e);ESr=r(b9t,"__init__()"),b9t.forEach(t),CSr=r(lVe," (throws an error)."),lVe.forEach(t),wSr=i(zl),Ot=n(zl,"DIV",{class:!0});var v6=s(Ot);T(Y9.$$.fragment,v6),ASr=i(v6),i4e=n(v6,"P",{});var v9t=s(i4e);LSr=r(v9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v9t.forEach(t),ySr=i(v6),Ic=n(v6,"P",{});var woe=s(Ic);xSr=r(woe,`Note:
Loading a model from its configuration file does `),d4e=n(woe,"STRONG",{});var F9t=s(d4e);$Sr=r(F9t,"not"),F9t.forEach(t),kSr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(woe,"A",{href:!0});var T9t=s(JY);SSr=r(T9t,"from_pretrained()"),T9t.forEach(t),RSr=r(woe," to load the model weights."),woe.forEach(t),PSr=i(v6),T(v5.$$.fragment,v6),v6.forEach(t),BSr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(K9.$$.fragment,Wl),ISr=i(Wl),c4e=n(Wl,"P",{});var M9t=s(c4e);NSr=r(M9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),M9t.forEach(t),qSr=i(Wl),pn=n(Wl,"P",{});var F6=s(pn);jSr=r(F6,"The model class to instantiate is selected based on the "),f4e=n(F6,"CODE",{});var E9t=s(f4e);DSr=r(E9t,"model_type"),E9t.forEach(t),GSr=r(F6,` property of the config object (either
passed as an argument or loaded from `),m4e=n(F6,"CODE",{});var C9t=s(m4e);OSr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),VSr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(F6,"CODE",{});var w9t=s(g4e);XSr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),zSr=r(F6,":"),F6.forEach(t),WSr=i(Wl),xe=n(Wl,"UL",{});var Ne=s(xe);F5=n(Ne,"LI",{});var zNe=s(F5);h4e=n(zNe,"STRONG",{});var A9t=s(h4e);QSr=r(A9t,"bart"),A9t.forEach(t),HSr=r(zNe," \u2014 "),YY=n(zNe,"A",{href:!0});var L9t=s(YY);USr=r(L9t,"FlaxBartForCausalLM"),L9t.forEach(t),JSr=r(zNe," (BART model)"),zNe.forEach(t),YSr=i(Ne),T5=n(Ne,"LI",{});var WNe=s(T5);p4e=n(WNe,"STRONG",{});var y9t=s(p4e);KSr=r(y9t,"bert"),y9t.forEach(t),ZSr=r(WNe," \u2014 "),KY=n(WNe,"A",{href:!0});var x9t=s(KY);eRr=r(x9t,"FlaxBertForCausalLM"),x9t.forEach(t),oRr=r(WNe," (BERT model)"),WNe.forEach(t),rRr=i(Ne),M5=n(Ne,"LI",{});var QNe=s(M5);_4e=n(QNe,"STRONG",{});var $9t=s(_4e);tRr=r($9t,"big_bird"),$9t.forEach(t),aRr=r(QNe," \u2014 "),ZY=n(QNe,"A",{href:!0});var k9t=s(ZY);nRr=r(k9t,"FlaxBigBirdForCausalLM"),k9t.forEach(t),sRr=r(QNe," (BigBird model)"),QNe.forEach(t),lRr=i(Ne),E5=n(Ne,"LI",{});var HNe=s(E5);u4e=n(HNe,"STRONG",{});var S9t=s(u4e);iRr=r(S9t,"electra"),S9t.forEach(t),dRr=r(HNe," \u2014 "),eK=n(HNe,"A",{href:!0});var R9t=s(eK);cRr=r(R9t,"FlaxElectraForCausalLM"),R9t.forEach(t),fRr=r(HNe," (ELECTRA model)"),HNe.forEach(t),mRr=i(Ne),C5=n(Ne,"LI",{});var UNe=s(C5);b4e=n(UNe,"STRONG",{});var P9t=s(b4e);gRr=r(P9t,"gpt2"),P9t.forEach(t),hRr=r(UNe," \u2014 "),oK=n(UNe,"A",{href:!0});var B9t=s(oK);pRr=r(B9t,"FlaxGPT2LMHeadModel"),B9t.forEach(t),_Rr=r(UNe," (OpenAI GPT-2 model)"),UNe.forEach(t),uRr=i(Ne),w5=n(Ne,"LI",{});var JNe=s(w5);v4e=n(JNe,"STRONG",{});var I9t=s(v4e);bRr=r(I9t,"gpt_neo"),I9t.forEach(t),vRr=r(JNe," \u2014 "),rK=n(JNe,"A",{href:!0});var N9t=s(rK);FRr=r(N9t,"FlaxGPTNeoForCausalLM"),N9t.forEach(t),TRr=r(JNe," (GPT Neo model)"),JNe.forEach(t),MRr=i(Ne),A5=n(Ne,"LI",{});var YNe=s(A5);F4e=n(YNe,"STRONG",{});var q9t=s(F4e);ERr=r(q9t,"gptj"),q9t.forEach(t),CRr=r(YNe," \u2014 "),tK=n(YNe,"A",{href:!0});var j9t=s(tK);wRr=r(j9t,"FlaxGPTJForCausalLM"),j9t.forEach(t),ARr=r(YNe," (GPT-J model)"),YNe.forEach(t),LRr=i(Ne),L5=n(Ne,"LI",{});var KNe=s(L5);T4e=n(KNe,"STRONG",{});var D9t=s(T4e);yRr=r(D9t,"opt"),D9t.forEach(t),xRr=r(KNe," \u2014 "),aK=n(KNe,"A",{href:!0});var G9t=s(aK);$Rr=r(G9t,"FlaxOPTForCausalLM"),G9t.forEach(t),kRr=r(KNe," (OPT model)"),KNe.forEach(t),SRr=i(Ne),y5=n(Ne,"LI",{});var ZNe=s(y5);M4e=n(ZNe,"STRONG",{});var O9t=s(M4e);RRr=r(O9t,"roberta"),O9t.forEach(t),PRr=r(ZNe," \u2014 "),nK=n(ZNe,"A",{href:!0});var V9t=s(nK);BRr=r(V9t,"FlaxRobertaForCausalLM"),V9t.forEach(t),IRr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),NRr=i(Ne),x5=n(Ne,"LI",{});var eqe=s(x5);E4e=n(eqe,"STRONG",{});var X9t=s(E4e);qRr=r(X9t,"xglm"),X9t.forEach(t),jRr=r(eqe," \u2014 "),sK=n(eqe,"A",{href:!0});var z9t=s(sK);DRr=r(z9t,"FlaxXGLMForCausalLM"),z9t.forEach(t),GRr=r(eqe," (XGLM model)"),eqe.forEach(t),Ne.forEach(t),ORr=i(Wl),T($5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),oGe=i(f),Nc=n(f,"H2",{class:!0});var iVe=s(Nc);k5=n(iVe,"A",{id:!0,class:!0,href:!0});var W9t=s(k5);C4e=n(W9t,"SPAN",{});var Q9t=s(C4e);T(Z9.$$.fragment,Q9t),Q9t.forEach(t),W9t.forEach(t),VRr=i(iVe),w4e=n(iVe,"SPAN",{});var H9t=s(w4e);XRr=r(H9t,"FlaxAutoModelForPreTraining"),H9t.forEach(t),iVe.forEach(t),rGe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(ex.$$.fragment,Ql),zRr=i(Ql),qc=n(Ql,"P",{});var Aoe=s(qc);WRr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lK=n(Aoe,"A",{href:!0});var U9t=s(lK);QRr=r(U9t,"from_pretrained()"),U9t.forEach(t),HRr=r(Aoe," class method or the "),iK=n(Aoe,"A",{href:!0});var J9t=s(iK);URr=r(J9t,"from_config()"),J9t.forEach(t),JRr=r(Aoe,` class
method.`),Aoe.forEach(t),YRr=i(Ql),ox=n(Ql,"P",{});var dVe=s(ox);KRr=r(dVe,"This class cannot be instantiated directly using "),A4e=n(dVe,"CODE",{});var Y9t=s(A4e);ZRr=r(Y9t,"__init__()"),Y9t.forEach(t),ePr=r(dVe," (throws an error)."),dVe.forEach(t),oPr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var T6=s(Vt);T(rx.$$.fragment,T6),rPr=i(T6),L4e=n(T6,"P",{});var K9t=s(L4e);tPr=r(K9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K9t.forEach(t),aPr=i(T6),jc=n(T6,"P",{});var Loe=s(jc);nPr=r(Loe,`Note:
Loading a model from its configuration file does `),y4e=n(Loe,"STRONG",{});var Z9t=s(y4e);sPr=r(Z9t,"not"),Z9t.forEach(t),lPr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Loe,"A",{href:!0});var ext=s(dK);iPr=r(ext,"from_pretrained()"),ext.forEach(t),dPr=r(Loe," to load the model weights."),Loe.forEach(t),cPr=i(T6),T(S5.$$.fragment,T6),T6.forEach(t),fPr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(tx.$$.fragment,Hl),mPr=i(Hl),x4e=n(Hl,"P",{});var oxt=s(x4e);gPr=r(oxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oxt.forEach(t),hPr=i(Hl),_n=n(Hl,"P",{});var M6=s(_n);pPr=r(M6,"The model class to instantiate is selected based on the "),$4e=n(M6,"CODE",{});var rxt=s($4e);_Pr=r(rxt,"model_type"),rxt.forEach(t),uPr=r(M6,` property of the config object (either
passed as an argument or loaded from `),k4e=n(M6,"CODE",{});var txt=s(k4e);bPr=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),vPr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(M6,"CODE",{});var axt=s(S4e);FPr=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),TPr=r(M6,":"),M6.forEach(t),MPr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);R5=n(we,"LI",{});var oqe=s(R5);R4e=n(oqe,"STRONG",{});var nxt=s(R4e);EPr=r(nxt,"albert"),nxt.forEach(t),CPr=r(oqe," \u2014 "),cK=n(oqe,"A",{href:!0});var sxt=s(cK);wPr=r(sxt,"FlaxAlbertForPreTraining"),sxt.forEach(t),APr=r(oqe," (ALBERT model)"),oqe.forEach(t),LPr=i(we),P5=n(we,"LI",{});var rqe=s(P5);P4e=n(rqe,"STRONG",{});var lxt=s(P4e);yPr=r(lxt,"bart"),lxt.forEach(t),xPr=r(rqe," \u2014 "),fK=n(rqe,"A",{href:!0});var ixt=s(fK);$Pr=r(ixt,"FlaxBartForConditionalGeneration"),ixt.forEach(t),kPr=r(rqe," (BART model)"),rqe.forEach(t),SPr=i(we),B5=n(we,"LI",{});var tqe=s(B5);B4e=n(tqe,"STRONG",{});var dxt=s(B4e);RPr=r(dxt,"bert"),dxt.forEach(t),PPr=r(tqe," \u2014 "),mK=n(tqe,"A",{href:!0});var cxt=s(mK);BPr=r(cxt,"FlaxBertForPreTraining"),cxt.forEach(t),IPr=r(tqe," (BERT model)"),tqe.forEach(t),NPr=i(we),I5=n(we,"LI",{});var aqe=s(I5);I4e=n(aqe,"STRONG",{});var fxt=s(I4e);qPr=r(fxt,"big_bird"),fxt.forEach(t),jPr=r(aqe," \u2014 "),gK=n(aqe,"A",{href:!0});var mxt=s(gK);DPr=r(mxt,"FlaxBigBirdForPreTraining"),mxt.forEach(t),GPr=r(aqe," (BigBird model)"),aqe.forEach(t),OPr=i(we),N5=n(we,"LI",{});var nqe=s(N5);N4e=n(nqe,"STRONG",{});var gxt=s(N4e);VPr=r(gxt,"electra"),gxt.forEach(t),XPr=r(nqe," \u2014 "),hK=n(nqe,"A",{href:!0});var hxt=s(hK);zPr=r(hxt,"FlaxElectraForPreTraining"),hxt.forEach(t),WPr=r(nqe," (ELECTRA model)"),nqe.forEach(t),QPr=i(we),q5=n(we,"LI",{});var sqe=s(q5);q4e=n(sqe,"STRONG",{});var pxt=s(q4e);HPr=r(pxt,"mbart"),pxt.forEach(t),UPr=r(sqe," \u2014 "),pK=n(sqe,"A",{href:!0});var _xt=s(pK);JPr=r(_xt,"FlaxMBartForConditionalGeneration"),_xt.forEach(t),YPr=r(sqe," (mBART model)"),sqe.forEach(t),KPr=i(we),j5=n(we,"LI",{});var lqe=s(j5);j4e=n(lqe,"STRONG",{});var uxt=s(j4e);ZPr=r(uxt,"mt5"),uxt.forEach(t),eBr=r(lqe," \u2014 "),_K=n(lqe,"A",{href:!0});var bxt=s(_K);oBr=r(bxt,"FlaxMT5ForConditionalGeneration"),bxt.forEach(t),rBr=r(lqe," (MT5 model)"),lqe.forEach(t),tBr=i(we),D5=n(we,"LI",{});var iqe=s(D5);D4e=n(iqe,"STRONG",{});var vxt=s(D4e);aBr=r(vxt,"roberta"),vxt.forEach(t),nBr=r(iqe," \u2014 "),uK=n(iqe,"A",{href:!0});var Fxt=s(uK);sBr=r(Fxt,"FlaxRobertaForMaskedLM"),Fxt.forEach(t),lBr=r(iqe," (RoBERTa model)"),iqe.forEach(t),iBr=i(we),G5=n(we,"LI",{});var dqe=s(G5);G4e=n(dqe,"STRONG",{});var Txt=s(G4e);dBr=r(Txt,"roformer"),Txt.forEach(t),cBr=r(dqe," \u2014 "),bK=n(dqe,"A",{href:!0});var Mxt=s(bK);fBr=r(Mxt,"FlaxRoFormerForMaskedLM"),Mxt.forEach(t),mBr=r(dqe," (RoFormer model)"),dqe.forEach(t),gBr=i(we),O5=n(we,"LI",{});var cqe=s(O5);O4e=n(cqe,"STRONG",{});var Ext=s(O4e);hBr=r(Ext,"t5"),Ext.forEach(t),pBr=r(cqe," \u2014 "),vK=n(cqe,"A",{href:!0});var Cxt=s(vK);_Br=r(Cxt,"FlaxT5ForConditionalGeneration"),Cxt.forEach(t),uBr=r(cqe," (T5 model)"),cqe.forEach(t),bBr=i(we),V5=n(we,"LI",{});var fqe=s(V5);V4e=n(fqe,"STRONG",{});var wxt=s(V4e);vBr=r(wxt,"wav2vec2"),wxt.forEach(t),FBr=r(fqe," \u2014 "),FK=n(fqe,"A",{href:!0});var Axt=s(FK);TBr=r(Axt,"FlaxWav2Vec2ForPreTraining"),Axt.forEach(t),MBr=r(fqe," (Wav2Vec2 model)"),fqe.forEach(t),EBr=i(we),X5=n(we,"LI",{});var mqe=s(X5);X4e=n(mqe,"STRONG",{});var Lxt=s(X4e);CBr=r(Lxt,"xlm-roberta"),Lxt.forEach(t),wBr=r(mqe," \u2014 "),TK=n(mqe,"A",{href:!0});var yxt=s(TK);ABr=r(yxt,"FlaxXLMRobertaForMaskedLM"),yxt.forEach(t),LBr=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),we.forEach(t),yBr=i(Hl),T(z5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),tGe=i(f),Dc=n(f,"H2",{class:!0});var cVe=s(Dc);W5=n(cVe,"A",{id:!0,class:!0,href:!0});var xxt=s(W5);z4e=n(xxt,"SPAN",{});var $xt=s(z4e);T(ax.$$.fragment,$xt),$xt.forEach(t),xxt.forEach(t),xBr=i(cVe),W4e=n(cVe,"SPAN",{});var kxt=s(W4e);$Br=r(kxt,"FlaxAutoModelForMaskedLM"),kxt.forEach(t),cVe.forEach(t),aGe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(nx.$$.fragment,Ul),kBr=i(Ul),Gc=n(Ul,"P",{});var yoe=s(Gc);SBr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MK=n(yoe,"A",{href:!0});var Sxt=s(MK);RBr=r(Sxt,"from_pretrained()"),Sxt.forEach(t),PBr=r(yoe," class method or the "),EK=n(yoe,"A",{href:!0});var Rxt=s(EK);BBr=r(Rxt,"from_config()"),Rxt.forEach(t),IBr=r(yoe,` class
method.`),yoe.forEach(t),NBr=i(Ul),sx=n(Ul,"P",{});var fVe=s(sx);qBr=r(fVe,"This class cannot be instantiated directly using "),Q4e=n(fVe,"CODE",{});var Pxt=s(Q4e);jBr=r(Pxt,"__init__()"),Pxt.forEach(t),DBr=r(fVe," (throws an error)."),fVe.forEach(t),GBr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var E6=s(Xt);T(lx.$$.fragment,E6),OBr=i(E6),H4e=n(E6,"P",{});var Bxt=s(H4e);VBr=r(Bxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Bxt.forEach(t),XBr=i(E6),Oc=n(E6,"P",{});var xoe=s(Oc);zBr=r(xoe,`Note:
Loading a model from its configuration file does `),U4e=n(xoe,"STRONG",{});var Ixt=s(U4e);WBr=r(Ixt,"not"),Ixt.forEach(t),QBr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(xoe,"A",{href:!0});var Nxt=s(CK);HBr=r(Nxt,"from_pretrained()"),Nxt.forEach(t),UBr=r(xoe," to load the model weights."),xoe.forEach(t),JBr=i(E6),T(Q5.$$.fragment,E6),E6.forEach(t),YBr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(ix.$$.fragment,Jl),KBr=i(Jl),J4e=n(Jl,"P",{});var qxt=s(J4e);ZBr=r(qxt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qxt.forEach(t),eIr=i(Jl),un=n(Jl,"P",{});var C6=s(un);oIr=r(C6,"The model class to instantiate is selected based on the "),Y4e=n(C6,"CODE",{});var jxt=s(Y4e);rIr=r(jxt,"model_type"),jxt.forEach(t),tIr=r(C6,` property of the config object (either
passed as an argument or loaded from `),K4e=n(C6,"CODE",{});var Dxt=s(K4e);aIr=r(Dxt,"pretrained_model_name_or_path"),Dxt.forEach(t),nIr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(C6,"CODE",{});var Gxt=s(Z4e);sIr=r(Gxt,"pretrained_model_name_or_path"),Gxt.forEach(t),lIr=r(C6,":"),C6.forEach(t),iIr=i(Jl),$e=n(Jl,"UL",{});var qe=s($e);H5=n(qe,"LI",{});var gqe=s(H5);eEe=n(gqe,"STRONG",{});var Oxt=s(eEe);dIr=r(Oxt,"albert"),Oxt.forEach(t),cIr=r(gqe," \u2014 "),wK=n(gqe,"A",{href:!0});var Vxt=s(wK);fIr=r(Vxt,"FlaxAlbertForMaskedLM"),Vxt.forEach(t),mIr=r(gqe," (ALBERT model)"),gqe.forEach(t),gIr=i(qe),U5=n(qe,"LI",{});var hqe=s(U5);oEe=n(hqe,"STRONG",{});var Xxt=s(oEe);hIr=r(Xxt,"bart"),Xxt.forEach(t),pIr=r(hqe," \u2014 "),AK=n(hqe,"A",{href:!0});var zxt=s(AK);_Ir=r(zxt,"FlaxBartForConditionalGeneration"),zxt.forEach(t),uIr=r(hqe," (BART model)"),hqe.forEach(t),bIr=i(qe),J5=n(qe,"LI",{});var pqe=s(J5);rEe=n(pqe,"STRONG",{});var Wxt=s(rEe);vIr=r(Wxt,"bert"),Wxt.forEach(t),FIr=r(pqe," \u2014 "),LK=n(pqe,"A",{href:!0});var Qxt=s(LK);TIr=r(Qxt,"FlaxBertForMaskedLM"),Qxt.forEach(t),MIr=r(pqe," (BERT model)"),pqe.forEach(t),EIr=i(qe),Y5=n(qe,"LI",{});var _qe=s(Y5);tEe=n(_qe,"STRONG",{});var Hxt=s(tEe);CIr=r(Hxt,"big_bird"),Hxt.forEach(t),wIr=r(_qe," \u2014 "),yK=n(_qe,"A",{href:!0});var Uxt=s(yK);AIr=r(Uxt,"FlaxBigBirdForMaskedLM"),Uxt.forEach(t),LIr=r(_qe," (BigBird model)"),_qe.forEach(t),yIr=i(qe),K5=n(qe,"LI",{});var uqe=s(K5);aEe=n(uqe,"STRONG",{});var Jxt=s(aEe);xIr=r(Jxt,"distilbert"),Jxt.forEach(t),$Ir=r(uqe," \u2014 "),xK=n(uqe,"A",{href:!0});var Yxt=s(xK);kIr=r(Yxt,"FlaxDistilBertForMaskedLM"),Yxt.forEach(t),SIr=r(uqe," (DistilBERT model)"),uqe.forEach(t),RIr=i(qe),Z5=n(qe,"LI",{});var bqe=s(Z5);nEe=n(bqe,"STRONG",{});var Kxt=s(nEe);PIr=r(Kxt,"electra"),Kxt.forEach(t),BIr=r(bqe," \u2014 "),$K=n(bqe,"A",{href:!0});var Zxt=s($K);IIr=r(Zxt,"FlaxElectraForMaskedLM"),Zxt.forEach(t),NIr=r(bqe," (ELECTRA model)"),bqe.forEach(t),qIr=i(qe),e0=n(qe,"LI",{});var vqe=s(e0);sEe=n(vqe,"STRONG",{});var e$t=s(sEe);jIr=r(e$t,"mbart"),e$t.forEach(t),DIr=r(vqe," \u2014 "),kK=n(vqe,"A",{href:!0});var o$t=s(kK);GIr=r(o$t,"FlaxMBartForConditionalGeneration"),o$t.forEach(t),OIr=r(vqe," (mBART model)"),vqe.forEach(t),VIr=i(qe),o0=n(qe,"LI",{});var Fqe=s(o0);lEe=n(Fqe,"STRONG",{});var r$t=s(lEe);XIr=r(r$t,"roberta"),r$t.forEach(t),zIr=r(Fqe," \u2014 "),SK=n(Fqe,"A",{href:!0});var t$t=s(SK);WIr=r(t$t,"FlaxRobertaForMaskedLM"),t$t.forEach(t),QIr=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),HIr=i(qe),r0=n(qe,"LI",{});var Tqe=s(r0);iEe=n(Tqe,"STRONG",{});var a$t=s(iEe);UIr=r(a$t,"roformer"),a$t.forEach(t),JIr=r(Tqe," \u2014 "),RK=n(Tqe,"A",{href:!0});var n$t=s(RK);YIr=r(n$t,"FlaxRoFormerForMaskedLM"),n$t.forEach(t),KIr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),ZIr=i(qe),t0=n(qe,"LI",{});var Mqe=s(t0);dEe=n(Mqe,"STRONG",{});var s$t=s(dEe);eNr=r(s$t,"xlm-roberta"),s$t.forEach(t),oNr=r(Mqe," \u2014 "),PK=n(Mqe,"A",{href:!0});var l$t=s(PK);rNr=r(l$t,"FlaxXLMRobertaForMaskedLM"),l$t.forEach(t),tNr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),qe.forEach(t),aNr=i(Jl),T(a0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),nGe=i(f),Vc=n(f,"H2",{class:!0});var mVe=s(Vc);n0=n(mVe,"A",{id:!0,class:!0,href:!0});var i$t=s(n0);cEe=n(i$t,"SPAN",{});var d$t=s(cEe);T(dx.$$.fragment,d$t),d$t.forEach(t),i$t.forEach(t),nNr=i(mVe),fEe=n(mVe,"SPAN",{});var c$t=s(fEe);sNr=r(c$t,"FlaxAutoModelForSeq2SeqLM"),c$t.forEach(t),mVe.forEach(t),sGe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(cx.$$.fragment,Yl),lNr=i(Yl),Xc=n(Yl,"P",{});var $oe=s(Xc);iNr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BK=n($oe,"A",{href:!0});var f$t=s(BK);dNr=r(f$t,"from_pretrained()"),f$t.forEach(t),cNr=r($oe," class method or the "),IK=n($oe,"A",{href:!0});var m$t=s(IK);fNr=r(m$t,"from_config()"),m$t.forEach(t),mNr=r($oe,` class
method.`),$oe.forEach(t),gNr=i(Yl),fx=n(Yl,"P",{});var gVe=s(fx);hNr=r(gVe,"This class cannot be instantiated directly using "),mEe=n(gVe,"CODE",{});var g$t=s(mEe);pNr=r(g$t,"__init__()"),g$t.forEach(t),_Nr=r(gVe," (throws an error)."),gVe.forEach(t),uNr=i(Yl),zt=n(Yl,"DIV",{class:!0});var w6=s(zt);T(mx.$$.fragment,w6),bNr=i(w6),gEe=n(w6,"P",{});var h$t=s(gEe);vNr=r(h$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h$t.forEach(t),FNr=i(w6),zc=n(w6,"P",{});var koe=s(zc);TNr=r(koe,`Note:
Loading a model from its configuration file does `),hEe=n(koe,"STRONG",{});var p$t=s(hEe);MNr=r(p$t,"not"),p$t.forEach(t),ENr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(koe,"A",{href:!0});var _$t=s(NK);CNr=r(_$t,"from_pretrained()"),_$t.forEach(t),wNr=r(koe," to load the model weights."),koe.forEach(t),ANr=i(w6),T(s0.$$.fragment,w6),w6.forEach(t),LNr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(gx.$$.fragment,Kl),yNr=i(Kl),pEe=n(Kl,"P",{});var u$t=s(pEe);xNr=r(u$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u$t.forEach(t),$Nr=i(Kl),bn=n(Kl,"P",{});var A6=s(bn);kNr=r(A6,"The model class to instantiate is selected based on the "),_Ee=n(A6,"CODE",{});var b$t=s(_Ee);SNr=r(b$t,"model_type"),b$t.forEach(t),RNr=r(A6,` property of the config object (either
passed as an argument or loaded from `),uEe=n(A6,"CODE",{});var v$t=s(uEe);PNr=r(v$t,"pretrained_model_name_or_path"),v$t.forEach(t),BNr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=n(A6,"CODE",{});var F$t=s(bEe);INr=r(F$t,"pretrained_model_name_or_path"),F$t.forEach(t),NNr=r(A6,":"),A6.forEach(t),qNr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);l0=n(ze,"LI",{});var Eqe=s(l0);vEe=n(Eqe,"STRONG",{});var T$t=s(vEe);jNr=r(T$t,"bart"),T$t.forEach(t),DNr=r(Eqe," \u2014 "),qK=n(Eqe,"A",{href:!0});var M$t=s(qK);GNr=r(M$t,"FlaxBartForConditionalGeneration"),M$t.forEach(t),ONr=r(Eqe," (BART model)"),Eqe.forEach(t),VNr=i(ze),i0=n(ze,"LI",{});var Cqe=s(i0);FEe=n(Cqe,"STRONG",{});var E$t=s(FEe);XNr=r(E$t,"blenderbot"),E$t.forEach(t),zNr=r(Cqe," \u2014 "),jK=n(Cqe,"A",{href:!0});var C$t=s(jK);WNr=r(C$t,"FlaxBlenderbotForConditionalGeneration"),C$t.forEach(t),QNr=r(Cqe," (Blenderbot model)"),Cqe.forEach(t),HNr=i(ze),d0=n(ze,"LI",{});var wqe=s(d0);TEe=n(wqe,"STRONG",{});var w$t=s(TEe);UNr=r(w$t,"blenderbot-small"),w$t.forEach(t),JNr=r(wqe," \u2014 "),DK=n(wqe,"A",{href:!0});var A$t=s(DK);YNr=r(A$t,"FlaxBlenderbotSmallForConditionalGeneration"),A$t.forEach(t),KNr=r(wqe," (BlenderbotSmall model)"),wqe.forEach(t),ZNr=i(ze),c0=n(ze,"LI",{});var Aqe=s(c0);MEe=n(Aqe,"STRONG",{});var L$t=s(MEe);eqr=r(L$t,"encoder-decoder"),L$t.forEach(t),oqr=r(Aqe," \u2014 "),GK=n(Aqe,"A",{href:!0});var y$t=s(GK);rqr=r(y$t,"FlaxEncoderDecoderModel"),y$t.forEach(t),tqr=r(Aqe," (Encoder decoder model)"),Aqe.forEach(t),aqr=i(ze),f0=n(ze,"LI",{});var Lqe=s(f0);EEe=n(Lqe,"STRONG",{});var x$t=s(EEe);nqr=r(x$t,"marian"),x$t.forEach(t),sqr=r(Lqe," \u2014 "),OK=n(Lqe,"A",{href:!0});var $$t=s(OK);lqr=r($$t,"FlaxMarianMTModel"),$$t.forEach(t),iqr=r(Lqe," (Marian model)"),Lqe.forEach(t),dqr=i(ze),m0=n(ze,"LI",{});var yqe=s(m0);CEe=n(yqe,"STRONG",{});var k$t=s(CEe);cqr=r(k$t,"mbart"),k$t.forEach(t),fqr=r(yqe," \u2014 "),VK=n(yqe,"A",{href:!0});var S$t=s(VK);mqr=r(S$t,"FlaxMBartForConditionalGeneration"),S$t.forEach(t),gqr=r(yqe," (mBART model)"),yqe.forEach(t),hqr=i(ze),g0=n(ze,"LI",{});var xqe=s(g0);wEe=n(xqe,"STRONG",{});var R$t=s(wEe);pqr=r(R$t,"mt5"),R$t.forEach(t),_qr=r(xqe," \u2014 "),XK=n(xqe,"A",{href:!0});var P$t=s(XK);uqr=r(P$t,"FlaxMT5ForConditionalGeneration"),P$t.forEach(t),bqr=r(xqe," (MT5 model)"),xqe.forEach(t),vqr=i(ze),h0=n(ze,"LI",{});var $qe=s(h0);AEe=n($qe,"STRONG",{});var B$t=s(AEe);Fqr=r(B$t,"pegasus"),B$t.forEach(t),Tqr=r($qe," \u2014 "),zK=n($qe,"A",{href:!0});var I$t=s(zK);Mqr=r(I$t,"FlaxPegasusForConditionalGeneration"),I$t.forEach(t),Eqr=r($qe," (Pegasus model)"),$qe.forEach(t),Cqr=i(ze),p0=n(ze,"LI",{});var kqe=s(p0);LEe=n(kqe,"STRONG",{});var N$t=s(LEe);wqr=r(N$t,"t5"),N$t.forEach(t),Aqr=r(kqe," \u2014 "),WK=n(kqe,"A",{href:!0});var q$t=s(WK);Lqr=r(q$t,"FlaxT5ForConditionalGeneration"),q$t.forEach(t),yqr=r(kqe," (T5 model)"),kqe.forEach(t),ze.forEach(t),xqr=i(Kl),T(_0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),lGe=i(f),Wc=n(f,"H2",{class:!0});var hVe=s(Wc);u0=n(hVe,"A",{id:!0,class:!0,href:!0});var j$t=s(u0);yEe=n(j$t,"SPAN",{});var D$t=s(yEe);T(hx.$$.fragment,D$t),D$t.forEach(t),j$t.forEach(t),$qr=i(hVe),xEe=n(hVe,"SPAN",{});var G$t=s(xEe);kqr=r(G$t,"FlaxAutoModelForSequenceClassification"),G$t.forEach(t),hVe.forEach(t),iGe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(px.$$.fragment,Zl),Sqr=i(Zl),Qc=n(Zl,"P",{});var Soe=s(Qc);Rqr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QK=n(Soe,"A",{href:!0});var O$t=s(QK);Pqr=r(O$t,"from_pretrained()"),O$t.forEach(t),Bqr=r(Soe," class method or the "),HK=n(Soe,"A",{href:!0});var V$t=s(HK);Iqr=r(V$t,"from_config()"),V$t.forEach(t),Nqr=r(Soe,` class
method.`),Soe.forEach(t),qqr=i(Zl),_x=n(Zl,"P",{});var pVe=s(_x);jqr=r(pVe,"This class cannot be instantiated directly using "),$Ee=n(pVe,"CODE",{});var X$t=s($Ee);Dqr=r(X$t,"__init__()"),X$t.forEach(t),Gqr=r(pVe," (throws an error)."),pVe.forEach(t),Oqr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var L6=s(Wt);T(ux.$$.fragment,L6),Vqr=i(L6),kEe=n(L6,"P",{});var z$t=s(kEe);Xqr=r(z$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z$t.forEach(t),zqr=i(L6),Hc=n(L6,"P",{});var Roe=s(Hc);Wqr=r(Roe,`Note:
Loading a model from its configuration file does `),SEe=n(Roe,"STRONG",{});var W$t=s(SEe);Qqr=r(W$t,"not"),W$t.forEach(t),Hqr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Roe,"A",{href:!0});var Q$t=s(UK);Uqr=r(Q$t,"from_pretrained()"),Q$t.forEach(t),Jqr=r(Roe," to load the model weights."),Roe.forEach(t),Yqr=i(L6),T(b0.$$.fragment,L6),L6.forEach(t),Kqr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(bx.$$.fragment,ei),Zqr=i(ei),REe=n(ei,"P",{});var H$t=s(REe);ejr=r(H$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H$t.forEach(t),ojr=i(ei),vn=n(ei,"P",{});var y6=s(vn);rjr=r(y6,"The model class to instantiate is selected based on the "),PEe=n(y6,"CODE",{});var U$t=s(PEe);tjr=r(U$t,"model_type"),U$t.forEach(t),ajr=r(y6,` property of the config object (either
passed as an argument or loaded from `),BEe=n(y6,"CODE",{});var J$t=s(BEe);njr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),sjr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(y6,"CODE",{});var Y$t=s(IEe);ljr=r(Y$t,"pretrained_model_name_or_path"),Y$t.forEach(t),ijr=r(y6,":"),y6.forEach(t),djr=i(ei),ke=n(ei,"UL",{});var je=s(ke);v0=n(je,"LI",{});var Sqe=s(v0);NEe=n(Sqe,"STRONG",{});var K$t=s(NEe);cjr=r(K$t,"albert"),K$t.forEach(t),fjr=r(Sqe," \u2014 "),JK=n(Sqe,"A",{href:!0});var Z$t=s(JK);mjr=r(Z$t,"FlaxAlbertForSequenceClassification"),Z$t.forEach(t),gjr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),hjr=i(je),F0=n(je,"LI",{});var Rqe=s(F0);qEe=n(Rqe,"STRONG",{});var ekt=s(qEe);pjr=r(ekt,"bart"),ekt.forEach(t),_jr=r(Rqe," \u2014 "),YK=n(Rqe,"A",{href:!0});var okt=s(YK);ujr=r(okt,"FlaxBartForSequenceClassification"),okt.forEach(t),bjr=r(Rqe," (BART model)"),Rqe.forEach(t),vjr=i(je),T0=n(je,"LI",{});var Pqe=s(T0);jEe=n(Pqe,"STRONG",{});var rkt=s(jEe);Fjr=r(rkt,"bert"),rkt.forEach(t),Tjr=r(Pqe," \u2014 "),KK=n(Pqe,"A",{href:!0});var tkt=s(KK);Mjr=r(tkt,"FlaxBertForSequenceClassification"),tkt.forEach(t),Ejr=r(Pqe," (BERT model)"),Pqe.forEach(t),Cjr=i(je),M0=n(je,"LI",{});var Bqe=s(M0);DEe=n(Bqe,"STRONG",{});var akt=s(DEe);wjr=r(akt,"big_bird"),akt.forEach(t),Ajr=r(Bqe," \u2014 "),ZK=n(Bqe,"A",{href:!0});var nkt=s(ZK);Ljr=r(nkt,"FlaxBigBirdForSequenceClassification"),nkt.forEach(t),yjr=r(Bqe," (BigBird model)"),Bqe.forEach(t),xjr=i(je),E0=n(je,"LI",{});var Iqe=s(E0);GEe=n(Iqe,"STRONG",{});var skt=s(GEe);$jr=r(skt,"distilbert"),skt.forEach(t),kjr=r(Iqe," \u2014 "),eZ=n(Iqe,"A",{href:!0});var lkt=s(eZ);Sjr=r(lkt,"FlaxDistilBertForSequenceClassification"),lkt.forEach(t),Rjr=r(Iqe," (DistilBERT model)"),Iqe.forEach(t),Pjr=i(je),C0=n(je,"LI",{});var Nqe=s(C0);OEe=n(Nqe,"STRONG",{});var ikt=s(OEe);Bjr=r(ikt,"electra"),ikt.forEach(t),Ijr=r(Nqe," \u2014 "),oZ=n(Nqe,"A",{href:!0});var dkt=s(oZ);Njr=r(dkt,"FlaxElectraForSequenceClassification"),dkt.forEach(t),qjr=r(Nqe," (ELECTRA model)"),Nqe.forEach(t),jjr=i(je),w0=n(je,"LI",{});var qqe=s(w0);VEe=n(qqe,"STRONG",{});var ckt=s(VEe);Djr=r(ckt,"mbart"),ckt.forEach(t),Gjr=r(qqe," \u2014 "),rZ=n(qqe,"A",{href:!0});var fkt=s(rZ);Ojr=r(fkt,"FlaxMBartForSequenceClassification"),fkt.forEach(t),Vjr=r(qqe," (mBART model)"),qqe.forEach(t),Xjr=i(je),A0=n(je,"LI",{});var jqe=s(A0);XEe=n(jqe,"STRONG",{});var mkt=s(XEe);zjr=r(mkt,"roberta"),mkt.forEach(t),Wjr=r(jqe," \u2014 "),tZ=n(jqe,"A",{href:!0});var gkt=s(tZ);Qjr=r(gkt,"FlaxRobertaForSequenceClassification"),gkt.forEach(t),Hjr=r(jqe," (RoBERTa model)"),jqe.forEach(t),Ujr=i(je),L0=n(je,"LI",{});var Dqe=s(L0);zEe=n(Dqe,"STRONG",{});var hkt=s(zEe);Jjr=r(hkt,"roformer"),hkt.forEach(t),Yjr=r(Dqe," \u2014 "),aZ=n(Dqe,"A",{href:!0});var pkt=s(aZ);Kjr=r(pkt,"FlaxRoFormerForSequenceClassification"),pkt.forEach(t),Zjr=r(Dqe," (RoFormer model)"),Dqe.forEach(t),eDr=i(je),y0=n(je,"LI",{});var Gqe=s(y0);WEe=n(Gqe,"STRONG",{});var _kt=s(WEe);oDr=r(_kt,"xlm-roberta"),_kt.forEach(t),rDr=r(Gqe," \u2014 "),nZ=n(Gqe,"A",{href:!0});var ukt=s(nZ);tDr=r(ukt,"FlaxXLMRobertaForSequenceClassification"),ukt.forEach(t),aDr=r(Gqe," (XLM-RoBERTa model)"),Gqe.forEach(t),je.forEach(t),nDr=i(ei),T(x0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),dGe=i(f),Uc=n(f,"H2",{class:!0});var _Ve=s(Uc);$0=n(_Ve,"A",{id:!0,class:!0,href:!0});var bkt=s($0);QEe=n(bkt,"SPAN",{});var vkt=s(QEe);T(vx.$$.fragment,vkt),vkt.forEach(t),bkt.forEach(t),sDr=i(_Ve),HEe=n(_Ve,"SPAN",{});var Fkt=s(HEe);lDr=r(Fkt,"FlaxAutoModelForQuestionAnswering"),Fkt.forEach(t),_Ve.forEach(t),cGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(Fx.$$.fragment,oi),iDr=i(oi),Jc=n(oi,"P",{});var Poe=s(Jc);dDr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sZ=n(Poe,"A",{href:!0});var Tkt=s(sZ);cDr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),fDr=r(Poe," class method or the "),lZ=n(Poe,"A",{href:!0});var Mkt=s(lZ);mDr=r(Mkt,"from_config()"),Mkt.forEach(t),gDr=r(Poe,` class
method.`),Poe.forEach(t),hDr=i(oi),Tx=n(oi,"P",{});var uVe=s(Tx);pDr=r(uVe,"This class cannot be instantiated directly using "),UEe=n(uVe,"CODE",{});var Ekt=s(UEe);_Dr=r(Ekt,"__init__()"),Ekt.forEach(t),uDr=r(uVe," (throws an error)."),uVe.forEach(t),bDr=i(oi),Qt=n(oi,"DIV",{class:!0});var x6=s(Qt);T(Mx.$$.fragment,x6),vDr=i(x6),JEe=n(x6,"P",{});var Ckt=s(JEe);FDr=r(Ckt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ckt.forEach(t),TDr=i(x6),Yc=n(x6,"P",{});var Boe=s(Yc);MDr=r(Boe,`Note:
Loading a model from its configuration file does `),YEe=n(Boe,"STRONG",{});var wkt=s(YEe);EDr=r(wkt,"not"),wkt.forEach(t),CDr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(Boe,"A",{href:!0});var Akt=s(iZ);wDr=r(Akt,"from_pretrained()"),Akt.forEach(t),ADr=r(Boe," to load the model weights."),Boe.forEach(t),LDr=i(x6),T(k0.$$.fragment,x6),x6.forEach(t),yDr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(Ex.$$.fragment,ri),xDr=i(ri),KEe=n(ri,"P",{});var Lkt=s(KEe);$Dr=r(Lkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lkt.forEach(t),kDr=i(ri),Fn=n(ri,"P",{});var $6=s(Fn);SDr=r($6,"The model class to instantiate is selected based on the "),ZEe=n($6,"CODE",{});var ykt=s(ZEe);RDr=r(ykt,"model_type"),ykt.forEach(t),PDr=r($6,` property of the config object (either
passed as an argument or loaded from `),eCe=n($6,"CODE",{});var xkt=s(eCe);BDr=r(xkt,"pretrained_model_name_or_path"),xkt.forEach(t),IDr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n($6,"CODE",{});var $kt=s(oCe);NDr=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),qDr=r($6,":"),$6.forEach(t),jDr=i(ri),Se=n(ri,"UL",{});var De=s(Se);S0=n(De,"LI",{});var Oqe=s(S0);rCe=n(Oqe,"STRONG",{});var kkt=s(rCe);DDr=r(kkt,"albert"),kkt.forEach(t),GDr=r(Oqe," \u2014 "),dZ=n(Oqe,"A",{href:!0});var Skt=s(dZ);ODr=r(Skt,"FlaxAlbertForQuestionAnswering"),Skt.forEach(t),VDr=r(Oqe," (ALBERT model)"),Oqe.forEach(t),XDr=i(De),R0=n(De,"LI",{});var Vqe=s(R0);tCe=n(Vqe,"STRONG",{});var Rkt=s(tCe);zDr=r(Rkt,"bart"),Rkt.forEach(t),WDr=r(Vqe," \u2014 "),cZ=n(Vqe,"A",{href:!0});var Pkt=s(cZ);QDr=r(Pkt,"FlaxBartForQuestionAnswering"),Pkt.forEach(t),HDr=r(Vqe," (BART model)"),Vqe.forEach(t),UDr=i(De),P0=n(De,"LI",{});var Xqe=s(P0);aCe=n(Xqe,"STRONG",{});var Bkt=s(aCe);JDr=r(Bkt,"bert"),Bkt.forEach(t),YDr=r(Xqe," \u2014 "),fZ=n(Xqe,"A",{href:!0});var Ikt=s(fZ);KDr=r(Ikt,"FlaxBertForQuestionAnswering"),Ikt.forEach(t),ZDr=r(Xqe," (BERT model)"),Xqe.forEach(t),eGr=i(De),B0=n(De,"LI",{});var zqe=s(B0);nCe=n(zqe,"STRONG",{});var Nkt=s(nCe);oGr=r(Nkt,"big_bird"),Nkt.forEach(t),rGr=r(zqe," \u2014 "),mZ=n(zqe,"A",{href:!0});var qkt=s(mZ);tGr=r(qkt,"FlaxBigBirdForQuestionAnswering"),qkt.forEach(t),aGr=r(zqe," (BigBird model)"),zqe.forEach(t),nGr=i(De),I0=n(De,"LI",{});var Wqe=s(I0);sCe=n(Wqe,"STRONG",{});var jkt=s(sCe);sGr=r(jkt,"distilbert"),jkt.forEach(t),lGr=r(Wqe," \u2014 "),gZ=n(Wqe,"A",{href:!0});var Dkt=s(gZ);iGr=r(Dkt,"FlaxDistilBertForQuestionAnswering"),Dkt.forEach(t),dGr=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),cGr=i(De),N0=n(De,"LI",{});var Qqe=s(N0);lCe=n(Qqe,"STRONG",{});var Gkt=s(lCe);fGr=r(Gkt,"electra"),Gkt.forEach(t),mGr=r(Qqe," \u2014 "),hZ=n(Qqe,"A",{href:!0});var Okt=s(hZ);gGr=r(Okt,"FlaxElectraForQuestionAnswering"),Okt.forEach(t),hGr=r(Qqe," (ELECTRA model)"),Qqe.forEach(t),pGr=i(De),q0=n(De,"LI",{});var Hqe=s(q0);iCe=n(Hqe,"STRONG",{});var Vkt=s(iCe);_Gr=r(Vkt,"mbart"),Vkt.forEach(t),uGr=r(Hqe," \u2014 "),pZ=n(Hqe,"A",{href:!0});var Xkt=s(pZ);bGr=r(Xkt,"FlaxMBartForQuestionAnswering"),Xkt.forEach(t),vGr=r(Hqe," (mBART model)"),Hqe.forEach(t),FGr=i(De),j0=n(De,"LI",{});var Uqe=s(j0);dCe=n(Uqe,"STRONG",{});var zkt=s(dCe);TGr=r(zkt,"roberta"),zkt.forEach(t),MGr=r(Uqe," \u2014 "),_Z=n(Uqe,"A",{href:!0});var Wkt=s(_Z);EGr=r(Wkt,"FlaxRobertaForQuestionAnswering"),Wkt.forEach(t),CGr=r(Uqe," (RoBERTa model)"),Uqe.forEach(t),wGr=i(De),D0=n(De,"LI",{});var Jqe=s(D0);cCe=n(Jqe,"STRONG",{});var Qkt=s(cCe);AGr=r(Qkt,"roformer"),Qkt.forEach(t),LGr=r(Jqe," \u2014 "),uZ=n(Jqe,"A",{href:!0});var Hkt=s(uZ);yGr=r(Hkt,"FlaxRoFormerForQuestionAnswering"),Hkt.forEach(t),xGr=r(Jqe," (RoFormer model)"),Jqe.forEach(t),$Gr=i(De),G0=n(De,"LI",{});var Yqe=s(G0);fCe=n(Yqe,"STRONG",{});var Ukt=s(fCe);kGr=r(Ukt,"xlm-roberta"),Ukt.forEach(t),SGr=r(Yqe," \u2014 "),bZ=n(Yqe,"A",{href:!0});var Jkt=s(bZ);RGr=r(Jkt,"FlaxXLMRobertaForQuestionAnswering"),Jkt.forEach(t),PGr=r(Yqe," (XLM-RoBERTa model)"),Yqe.forEach(t),De.forEach(t),BGr=i(ri),T(O0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),fGe=i(f),Kc=n(f,"H2",{class:!0});var bVe=s(Kc);V0=n(bVe,"A",{id:!0,class:!0,href:!0});var Ykt=s(V0);mCe=n(Ykt,"SPAN",{});var Kkt=s(mCe);T(Cx.$$.fragment,Kkt),Kkt.forEach(t),Ykt.forEach(t),IGr=i(bVe),gCe=n(bVe,"SPAN",{});var Zkt=s(gCe);NGr=r(Zkt,"FlaxAutoModelForTokenClassification"),Zkt.forEach(t),bVe.forEach(t),mGe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(wx.$$.fragment,ti),qGr=i(ti),Zc=n(ti,"P",{});var Ioe=s(Zc);jGr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vZ=n(Ioe,"A",{href:!0});var eSt=s(vZ);DGr=r(eSt,"from_pretrained()"),eSt.forEach(t),GGr=r(Ioe," class method or the "),FZ=n(Ioe,"A",{href:!0});var oSt=s(FZ);OGr=r(oSt,"from_config()"),oSt.forEach(t),VGr=r(Ioe,` class
method.`),Ioe.forEach(t),XGr=i(ti),Ax=n(ti,"P",{});var vVe=s(Ax);zGr=r(vVe,"This class cannot be instantiated directly using "),hCe=n(vVe,"CODE",{});var rSt=s(hCe);WGr=r(rSt,"__init__()"),rSt.forEach(t),QGr=r(vVe," (throws an error)."),vVe.forEach(t),HGr=i(ti),Ht=n(ti,"DIV",{class:!0});var k6=s(Ht);T(Lx.$$.fragment,k6),UGr=i(k6),pCe=n(k6,"P",{});var tSt=s(pCe);JGr=r(tSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tSt.forEach(t),YGr=i(k6),ef=n(k6,"P",{});var Noe=s(ef);KGr=r(Noe,`Note:
Loading a model from its configuration file does `),_Ce=n(Noe,"STRONG",{});var aSt=s(_Ce);ZGr=r(aSt,"not"),aSt.forEach(t),eOr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Noe,"A",{href:!0});var nSt=s(TZ);oOr=r(nSt,"from_pretrained()"),nSt.forEach(t),rOr=r(Noe," to load the model weights."),Noe.forEach(t),tOr=i(k6),T(X0.$$.fragment,k6),k6.forEach(t),aOr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(yx.$$.fragment,ai),nOr=i(ai),uCe=n(ai,"P",{});var sSt=s(uCe);sOr=r(sSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sSt.forEach(t),lOr=i(ai),Tn=n(ai,"P",{});var S6=s(Tn);iOr=r(S6,"The model class to instantiate is selected based on the "),bCe=n(S6,"CODE",{});var lSt=s(bCe);dOr=r(lSt,"model_type"),lSt.forEach(t),cOr=r(S6,` property of the config object (either
passed as an argument or loaded from `),vCe=n(S6,"CODE",{});var iSt=s(vCe);fOr=r(iSt,"pretrained_model_name_or_path"),iSt.forEach(t),mOr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(S6,"CODE",{});var dSt=s(FCe);gOr=r(dSt,"pretrained_model_name_or_path"),dSt.forEach(t),hOr=r(S6,":"),S6.forEach(t),pOr=i(ai),Oe=n(ai,"UL",{});var Fo=s(Oe);z0=n(Fo,"LI",{});var Kqe=s(z0);TCe=n(Kqe,"STRONG",{});var cSt=s(TCe);_Or=r(cSt,"albert"),cSt.forEach(t),uOr=r(Kqe," \u2014 "),MZ=n(Kqe,"A",{href:!0});var fSt=s(MZ);bOr=r(fSt,"FlaxAlbertForTokenClassification"),fSt.forEach(t),vOr=r(Kqe," (ALBERT model)"),Kqe.forEach(t),FOr=i(Fo),W0=n(Fo,"LI",{});var Zqe=s(W0);MCe=n(Zqe,"STRONG",{});var mSt=s(MCe);TOr=r(mSt,"bert"),mSt.forEach(t),MOr=r(Zqe," \u2014 "),EZ=n(Zqe,"A",{href:!0});var gSt=s(EZ);EOr=r(gSt,"FlaxBertForTokenClassification"),gSt.forEach(t),COr=r(Zqe," (BERT model)"),Zqe.forEach(t),wOr=i(Fo),Q0=n(Fo,"LI",{});var eje=s(Q0);ECe=n(eje,"STRONG",{});var hSt=s(ECe);AOr=r(hSt,"big_bird"),hSt.forEach(t),LOr=r(eje," \u2014 "),CZ=n(eje,"A",{href:!0});var pSt=s(CZ);yOr=r(pSt,"FlaxBigBirdForTokenClassification"),pSt.forEach(t),xOr=r(eje," (BigBird model)"),eje.forEach(t),$Or=i(Fo),H0=n(Fo,"LI",{});var oje=s(H0);CCe=n(oje,"STRONG",{});var _St=s(CCe);kOr=r(_St,"distilbert"),_St.forEach(t),SOr=r(oje," \u2014 "),wZ=n(oje,"A",{href:!0});var uSt=s(wZ);ROr=r(uSt,"FlaxDistilBertForTokenClassification"),uSt.forEach(t),POr=r(oje," (DistilBERT model)"),oje.forEach(t),BOr=i(Fo),U0=n(Fo,"LI",{});var rje=s(U0);wCe=n(rje,"STRONG",{});var bSt=s(wCe);IOr=r(bSt,"electra"),bSt.forEach(t),NOr=r(rje," \u2014 "),AZ=n(rje,"A",{href:!0});var vSt=s(AZ);qOr=r(vSt,"FlaxElectraForTokenClassification"),vSt.forEach(t),jOr=r(rje," (ELECTRA model)"),rje.forEach(t),DOr=i(Fo),J0=n(Fo,"LI",{});var tje=s(J0);ACe=n(tje,"STRONG",{});var FSt=s(ACe);GOr=r(FSt,"roberta"),FSt.forEach(t),OOr=r(tje," \u2014 "),LZ=n(tje,"A",{href:!0});var TSt=s(LZ);VOr=r(TSt,"FlaxRobertaForTokenClassification"),TSt.forEach(t),XOr=r(tje," (RoBERTa model)"),tje.forEach(t),zOr=i(Fo),Y0=n(Fo,"LI",{});var aje=s(Y0);LCe=n(aje,"STRONG",{});var MSt=s(LCe);WOr=r(MSt,"roformer"),MSt.forEach(t),QOr=r(aje," \u2014 "),yZ=n(aje,"A",{href:!0});var ESt=s(yZ);HOr=r(ESt,"FlaxRoFormerForTokenClassification"),ESt.forEach(t),UOr=r(aje," (RoFormer model)"),aje.forEach(t),JOr=i(Fo),K0=n(Fo,"LI",{});var nje=s(K0);yCe=n(nje,"STRONG",{});var CSt=s(yCe);YOr=r(CSt,"xlm-roberta"),CSt.forEach(t),KOr=r(nje," \u2014 "),xZ=n(nje,"A",{href:!0});var wSt=s(xZ);ZOr=r(wSt,"FlaxXLMRobertaForTokenClassification"),wSt.forEach(t),eVr=r(nje," (XLM-RoBERTa model)"),nje.forEach(t),Fo.forEach(t),oVr=i(ai),T(Z0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),gGe=i(f),of=n(f,"H2",{class:!0});var FVe=s(of);ew=n(FVe,"A",{id:!0,class:!0,href:!0});var ASt=s(ew);xCe=n(ASt,"SPAN",{});var LSt=s(xCe);T(xx.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),rVr=i(FVe),$Ce=n(FVe,"SPAN",{});var ySt=s($Ce);tVr=r(ySt,"FlaxAutoModelForMultipleChoice"),ySt.forEach(t),FVe.forEach(t),hGe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T($x.$$.fragment,ni),aVr=i(ni),rf=n(ni,"P",{});var qoe=s(rf);nVr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$Z=n(qoe,"A",{href:!0});var xSt=s($Z);sVr=r(xSt,"from_pretrained()"),xSt.forEach(t),lVr=r(qoe," class method or the "),kZ=n(qoe,"A",{href:!0});var $St=s(kZ);iVr=r($St,"from_config()"),$St.forEach(t),dVr=r(qoe,` class
method.`),qoe.forEach(t),cVr=i(ni),kx=n(ni,"P",{});var TVe=s(kx);fVr=r(TVe,"This class cannot be instantiated directly using "),kCe=n(TVe,"CODE",{});var kSt=s(kCe);mVr=r(kSt,"__init__()"),kSt.forEach(t),gVr=r(TVe," (throws an error)."),TVe.forEach(t),hVr=i(ni),Ut=n(ni,"DIV",{class:!0});var R6=s(Ut);T(Sx.$$.fragment,R6),pVr=i(R6),SCe=n(R6,"P",{});var SSt=s(SCe);_Vr=r(SSt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SSt.forEach(t),uVr=i(R6),tf=n(R6,"P",{});var joe=s(tf);bVr=r(joe,`Note:
Loading a model from its configuration file does `),RCe=n(joe,"STRONG",{});var RSt=s(RCe);vVr=r(RSt,"not"),RSt.forEach(t),FVr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(joe,"A",{href:!0});var PSt=s(SZ);TVr=r(PSt,"from_pretrained()"),PSt.forEach(t),MVr=r(joe," to load the model weights."),joe.forEach(t),EVr=i(R6),T(ow.$$.fragment,R6),R6.forEach(t),CVr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(Rx.$$.fragment,si),wVr=i(si),PCe=n(si,"P",{});var BSt=s(PCe);AVr=r(BSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BSt.forEach(t),LVr=i(si),Mn=n(si,"P",{});var P6=s(Mn);yVr=r(P6,"The model class to instantiate is selected based on the "),BCe=n(P6,"CODE",{});var ISt=s(BCe);xVr=r(ISt,"model_type"),ISt.forEach(t),$Vr=r(P6,` property of the config object (either
passed as an argument or loaded from `),ICe=n(P6,"CODE",{});var NSt=s(ICe);kVr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),SVr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=n(P6,"CODE",{});var qSt=s(NCe);RVr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),PVr=r(P6,":"),P6.forEach(t),BVr=i(si),Ve=n(si,"UL",{});var To=s(Ve);rw=n(To,"LI",{});var sje=s(rw);qCe=n(sje,"STRONG",{});var jSt=s(qCe);IVr=r(jSt,"albert"),jSt.forEach(t),NVr=r(sje," \u2014 "),RZ=n(sje,"A",{href:!0});var DSt=s(RZ);qVr=r(DSt,"FlaxAlbertForMultipleChoice"),DSt.forEach(t),jVr=r(sje," (ALBERT model)"),sje.forEach(t),DVr=i(To),tw=n(To,"LI",{});var lje=s(tw);jCe=n(lje,"STRONG",{});var GSt=s(jCe);GVr=r(GSt,"bert"),GSt.forEach(t),OVr=r(lje," \u2014 "),PZ=n(lje,"A",{href:!0});var OSt=s(PZ);VVr=r(OSt,"FlaxBertForMultipleChoice"),OSt.forEach(t),XVr=r(lje," (BERT model)"),lje.forEach(t),zVr=i(To),aw=n(To,"LI",{});var ije=s(aw);DCe=n(ije,"STRONG",{});var VSt=s(DCe);WVr=r(VSt,"big_bird"),VSt.forEach(t),QVr=r(ije," \u2014 "),BZ=n(ije,"A",{href:!0});var XSt=s(BZ);HVr=r(XSt,"FlaxBigBirdForMultipleChoice"),XSt.forEach(t),UVr=r(ije," (BigBird model)"),ije.forEach(t),JVr=i(To),nw=n(To,"LI",{});var dje=s(nw);GCe=n(dje,"STRONG",{});var zSt=s(GCe);YVr=r(zSt,"distilbert"),zSt.forEach(t),KVr=r(dje," \u2014 "),IZ=n(dje,"A",{href:!0});var WSt=s(IZ);ZVr=r(WSt,"FlaxDistilBertForMultipleChoice"),WSt.forEach(t),eXr=r(dje," (DistilBERT model)"),dje.forEach(t),oXr=i(To),sw=n(To,"LI",{});var cje=s(sw);OCe=n(cje,"STRONG",{});var QSt=s(OCe);rXr=r(QSt,"electra"),QSt.forEach(t),tXr=r(cje," \u2014 "),NZ=n(cje,"A",{href:!0});var HSt=s(NZ);aXr=r(HSt,"FlaxElectraForMultipleChoice"),HSt.forEach(t),nXr=r(cje," (ELECTRA model)"),cje.forEach(t),sXr=i(To),lw=n(To,"LI",{});var fje=s(lw);VCe=n(fje,"STRONG",{});var USt=s(VCe);lXr=r(USt,"roberta"),USt.forEach(t),iXr=r(fje," \u2014 "),qZ=n(fje,"A",{href:!0});var JSt=s(qZ);dXr=r(JSt,"FlaxRobertaForMultipleChoice"),JSt.forEach(t),cXr=r(fje," (RoBERTa model)"),fje.forEach(t),fXr=i(To),iw=n(To,"LI",{});var mje=s(iw);XCe=n(mje,"STRONG",{});var YSt=s(XCe);mXr=r(YSt,"roformer"),YSt.forEach(t),gXr=r(mje," \u2014 "),jZ=n(mje,"A",{href:!0});var KSt=s(jZ);hXr=r(KSt,"FlaxRoFormerForMultipleChoice"),KSt.forEach(t),pXr=r(mje," (RoFormer model)"),mje.forEach(t),_Xr=i(To),dw=n(To,"LI",{});var gje=s(dw);zCe=n(gje,"STRONG",{});var ZSt=s(zCe);uXr=r(ZSt,"xlm-roberta"),ZSt.forEach(t),bXr=r(gje," \u2014 "),DZ=n(gje,"A",{href:!0});var eRt=s(DZ);vXr=r(eRt,"FlaxXLMRobertaForMultipleChoice"),eRt.forEach(t),FXr=r(gje," (XLM-RoBERTa model)"),gje.forEach(t),To.forEach(t),TXr=i(si),T(cw.$$.fragment,si),si.forEach(t),ni.forEach(t),pGe=i(f),af=n(f,"H2",{class:!0});var MVe=s(af);fw=n(MVe,"A",{id:!0,class:!0,href:!0});var oRt=s(fw);WCe=n(oRt,"SPAN",{});var rRt=s(WCe);T(Px.$$.fragment,rRt),rRt.forEach(t),oRt.forEach(t),MXr=i(MVe),QCe=n(MVe,"SPAN",{});var tRt=s(QCe);EXr=r(tRt,"FlaxAutoModelForNextSentencePrediction"),tRt.forEach(t),MVe.forEach(t),_Ge=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Bx.$$.fragment,li),CXr=i(li),nf=n(li,"P",{});var Doe=s(nf);wXr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GZ=n(Doe,"A",{href:!0});var aRt=s(GZ);AXr=r(aRt,"from_pretrained()"),aRt.forEach(t),LXr=r(Doe," class method or the "),OZ=n(Doe,"A",{href:!0});var nRt=s(OZ);yXr=r(nRt,"from_config()"),nRt.forEach(t),xXr=r(Doe,` class
method.`),Doe.forEach(t),$Xr=i(li),Ix=n(li,"P",{});var EVe=s(Ix);kXr=r(EVe,"This class cannot be instantiated directly using "),HCe=n(EVe,"CODE",{});var sRt=s(HCe);SXr=r(sRt,"__init__()"),sRt.forEach(t),RXr=r(EVe," (throws an error)."),EVe.forEach(t),PXr=i(li),Jt=n(li,"DIV",{class:!0});var B6=s(Jt);T(Nx.$$.fragment,B6),BXr=i(B6),UCe=n(B6,"P",{});var lRt=s(UCe);IXr=r(lRt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lRt.forEach(t),NXr=i(B6),sf=n(B6,"P",{});var Goe=s(sf);qXr=r(Goe,`Note:
Loading a model from its configuration file does `),JCe=n(Goe,"STRONG",{});var iRt=s(JCe);jXr=r(iRt,"not"),iRt.forEach(t),DXr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=n(Goe,"A",{href:!0});var dRt=s(VZ);GXr=r(dRt,"from_pretrained()"),dRt.forEach(t),OXr=r(Goe," to load the model weights."),Goe.forEach(t),VXr=i(B6),T(mw.$$.fragment,B6),B6.forEach(t),XXr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(qx.$$.fragment,ii),zXr=i(ii),YCe=n(ii,"P",{});var cRt=s(YCe);WXr=r(cRt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cRt.forEach(t),QXr=i(ii),En=n(ii,"P",{});var I6=s(En);HXr=r(I6,"The model class to instantiate is selected based on the "),KCe=n(I6,"CODE",{});var fRt=s(KCe);UXr=r(fRt,"model_type"),fRt.forEach(t),JXr=r(I6,` property of the config object (either
passed as an argument or loaded from `),ZCe=n(I6,"CODE",{});var mRt=s(ZCe);YXr=r(mRt,"pretrained_model_name_or_path"),mRt.forEach(t),KXr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(I6,"CODE",{});var gRt=s(e5e);ZXr=r(gRt,"pretrained_model_name_or_path"),gRt.forEach(t),ezr=r(I6,":"),I6.forEach(t),ozr=i(ii),o5e=n(ii,"UL",{});var hRt=s(o5e);gw=n(hRt,"LI",{});var hje=s(gw);r5e=n(hje,"STRONG",{});var pRt=s(r5e);rzr=r(pRt,"bert"),pRt.forEach(t),tzr=r(hje," \u2014 "),XZ=n(hje,"A",{href:!0});var _Rt=s(XZ);azr=r(_Rt,"FlaxBertForNextSentencePrediction"),_Rt.forEach(t),nzr=r(hje," (BERT model)"),hje.forEach(t),hRt.forEach(t),szr=i(ii),T(hw.$$.fragment,ii),ii.forEach(t),li.forEach(t),uGe=i(f),lf=n(f,"H2",{class:!0});var CVe=s(lf);pw=n(CVe,"A",{id:!0,class:!0,href:!0});var uRt=s(pw);t5e=n(uRt,"SPAN",{});var bRt=s(t5e);T(jx.$$.fragment,bRt),bRt.forEach(t),uRt.forEach(t),lzr=i(CVe),a5e=n(CVe,"SPAN",{});var vRt=s(a5e);izr=r(vRt,"FlaxAutoModelForImageClassification"),vRt.forEach(t),CVe.forEach(t),bGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Dx.$$.fragment,di),dzr=i(di),df=n(di,"P",{});var Ooe=s(df);czr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zZ=n(Ooe,"A",{href:!0});var FRt=s(zZ);fzr=r(FRt,"from_pretrained()"),FRt.forEach(t),mzr=r(Ooe," class method or the "),WZ=n(Ooe,"A",{href:!0});var TRt=s(WZ);gzr=r(TRt,"from_config()"),TRt.forEach(t),hzr=r(Ooe,` class
method.`),Ooe.forEach(t),pzr=i(di),Gx=n(di,"P",{});var wVe=s(Gx);_zr=r(wVe,"This class cannot be instantiated directly using "),n5e=n(wVe,"CODE",{});var MRt=s(n5e);uzr=r(MRt,"__init__()"),MRt.forEach(t),bzr=r(wVe," (throws an error)."),wVe.forEach(t),vzr=i(di),Yt=n(di,"DIV",{class:!0});var N6=s(Yt);T(Ox.$$.fragment,N6),Fzr=i(N6),s5e=n(N6,"P",{});var ERt=s(s5e);Tzr=r(ERt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ERt.forEach(t),Mzr=i(N6),cf=n(N6,"P",{});var Voe=s(cf);Ezr=r(Voe,`Note:
Loading a model from its configuration file does `),l5e=n(Voe,"STRONG",{});var CRt=s(l5e);Czr=r(CRt,"not"),CRt.forEach(t),wzr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(Voe,"A",{href:!0});var wRt=s(QZ);Azr=r(wRt,"from_pretrained()"),wRt.forEach(t),Lzr=r(Voe," to load the model weights."),Voe.forEach(t),yzr=i(N6),T(_w.$$.fragment,N6),N6.forEach(t),xzr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(Vx.$$.fragment,ci),$zr=i(ci),i5e=n(ci,"P",{});var ARt=s(i5e);kzr=r(ARt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ARt.forEach(t),Szr=i(ci),Cn=n(ci,"P",{});var q6=s(Cn);Rzr=r(q6,"The model class to instantiate is selected based on the "),d5e=n(q6,"CODE",{});var LRt=s(d5e);Pzr=r(LRt,"model_type"),LRt.forEach(t),Bzr=r(q6,` property of the config object (either
passed as an argument or loaded from `),c5e=n(q6,"CODE",{});var yRt=s(c5e);Izr=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),Nzr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(q6,"CODE",{});var xRt=s(f5e);qzr=r(xRt,"pretrained_model_name_or_path"),xRt.forEach(t),jzr=r(q6,":"),q6.forEach(t),Dzr=i(ci),Xx=n(ci,"UL",{});var AVe=s(Xx);uw=n(AVe,"LI",{});var pje=s(uw);m5e=n(pje,"STRONG",{});var $Rt=s(m5e);Gzr=r($Rt,"beit"),$Rt.forEach(t),Ozr=r(pje," \u2014 "),HZ=n(pje,"A",{href:!0});var kRt=s(HZ);Vzr=r(kRt,"FlaxBeitForImageClassification"),kRt.forEach(t),Xzr=r(pje," (BEiT model)"),pje.forEach(t),zzr=i(AVe),bw=n(AVe,"LI",{});var _je=s(bw);g5e=n(_je,"STRONG",{});var SRt=s(g5e);Wzr=r(SRt,"vit"),SRt.forEach(t),Qzr=r(_je," \u2014 "),UZ=n(_je,"A",{href:!0});var RRt=s(UZ);Hzr=r(RRt,"FlaxViTForImageClassification"),RRt.forEach(t),Uzr=r(_je," (ViT model)"),_je.forEach(t),AVe.forEach(t),Jzr=i(ci),T(vw.$$.fragment,ci),ci.forEach(t),di.forEach(t),vGe=i(f),ff=n(f,"H2",{class:!0});var LVe=s(ff);Fw=n(LVe,"A",{id:!0,class:!0,href:!0});var PRt=s(Fw);h5e=n(PRt,"SPAN",{});var BRt=s(h5e);T(zx.$$.fragment,BRt),BRt.forEach(t),PRt.forEach(t),Yzr=i(LVe),p5e=n(LVe,"SPAN",{});var IRt=s(p5e);Kzr=r(IRt,"FlaxAutoModelForVision2Seq"),IRt.forEach(t),LVe.forEach(t),FGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Wx.$$.fragment,fi),Zzr=i(fi),mf=n(fi,"P",{});var Xoe=s(mf);eWr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JZ=n(Xoe,"A",{href:!0});var NRt=s(JZ);oWr=r(NRt,"from_pretrained()"),NRt.forEach(t),rWr=r(Xoe," class method or the "),YZ=n(Xoe,"A",{href:!0});var qRt=s(YZ);tWr=r(qRt,"from_config()"),qRt.forEach(t),aWr=r(Xoe,` class
method.`),Xoe.forEach(t),nWr=i(fi),Qx=n(fi,"P",{});var yVe=s(Qx);sWr=r(yVe,"This class cannot be instantiated directly using "),_5e=n(yVe,"CODE",{});var jRt=s(_5e);lWr=r(jRt,"__init__()"),jRt.forEach(t),iWr=r(yVe," (throws an error)."),yVe.forEach(t),dWr=i(fi),Kt=n(fi,"DIV",{class:!0});var j6=s(Kt);T(Hx.$$.fragment,j6),cWr=i(j6),u5e=n(j6,"P",{});var DRt=s(u5e);fWr=r(DRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DRt.forEach(t),mWr=i(j6),gf=n(j6,"P",{});var zoe=s(gf);gWr=r(zoe,`Note:
Loading a model from its configuration file does `),b5e=n(zoe,"STRONG",{});var GRt=s(b5e);hWr=r(GRt,"not"),GRt.forEach(t),pWr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(zoe,"A",{href:!0});var ORt=s(KZ);_Wr=r(ORt,"from_pretrained()"),ORt.forEach(t),uWr=r(zoe," to load the model weights."),zoe.forEach(t),bWr=i(j6),T(Tw.$$.fragment,j6),j6.forEach(t),vWr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(Ux.$$.fragment,mi),FWr=i(mi),v5e=n(mi,"P",{});var VRt=s(v5e);TWr=r(VRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VRt.forEach(t),MWr=i(mi),wn=n(mi,"P",{});var D6=s(wn);EWr=r(D6,"The model class to instantiate is selected based on the "),F5e=n(D6,"CODE",{});var XRt=s(F5e);CWr=r(XRt,"model_type"),XRt.forEach(t),wWr=r(D6,` property of the config object (either
passed as an argument or loaded from `),T5e=n(D6,"CODE",{});var zRt=s(T5e);AWr=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),LWr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(D6,"CODE",{});var WRt=s(M5e);yWr=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),xWr=r(D6,":"),D6.forEach(t),$Wr=i(mi),E5e=n(mi,"UL",{});var QRt=s(E5e);Mw=n(QRt,"LI",{});var uje=s(Mw);C5e=n(uje,"STRONG",{});var HRt=s(C5e);kWr=r(HRt,"vision-encoder-decoder"),HRt.forEach(t),SWr=r(uje," \u2014 "),ZZ=n(uje,"A",{href:!0});var URt=s(ZZ);RWr=r(URt,"FlaxVisionEncoderDecoderModel"),URt.forEach(t),PWr=r(uje," (Vision Encoder decoder model)"),uje.forEach(t),QRt.forEach(t),BWr=i(mi),T(Ew.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ZBt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(uk,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(bk,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig"),c(vk,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig"),c(Fk,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig"),c(Tk,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig"),c(Mk,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Ek,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Ck,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(wk,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Ak,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Lk,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig"),c(yk,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig"),c(xk,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig"),c($k,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig"),c(kk,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig"),c(Sk,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig"),c(Rk,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig"),c(Pk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Bk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ik,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Nk,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig"),c(qk,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(jk,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Dk,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig"),c(Gk,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig"),c(Ok,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Vk,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig"),c(Xk,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig"),c(zk,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig"),c(Wk,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Qk,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Hk,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig"),c(Uk,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig"),c(Jk,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig"),c(Yk,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig"),c(Kk,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig"),c(Zk,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config"),c(eS,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(oS,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(rS,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig"),c(tS,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig"),c(aS,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig"),c(nS,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig"),c(sS,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lS,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(iS,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dS,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(cS,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig"),c(fS,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig"),c(mS,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig"),c(gS,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig"),c(hS,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig"),c(pS,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config"),c(_S,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig"),c(uS,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(bS,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig"),c(vS,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTConfig"),c(FS,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(TS,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(MS,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig"),c(ES,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config"),c(CS,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(wS,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(AS,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig"),c(LS,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig"),c(yS,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig"),c(xS,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig"),c($S,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(kS,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(SS,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(RS,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagConfig"),c(PS,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmConfig"),c(BS,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig"),c(IS,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig"),c(NS,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig"),c(qS,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig"),c(jS,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig"),c(DS,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig"),c(GS,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig"),c(OS,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig"),c(VS,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig"),c(XS,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig"),c(zS,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(WS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(QS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(HS,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig"),c(US,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(JS,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig"),c(YS,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config"),c(KS,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig"),c(ZS,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(eR,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(oR,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig"),c(rR,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(tR,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(aR,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig"),c(nR,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig"),c(sR,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(lR,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(iR,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(dR,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig"),c(cR,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(fR,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mR,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(gR,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig"),c(hR,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig"),c(pR,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig"),c(_R,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(uR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(bR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(vR,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig"),c(FR,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig"),c(TR,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($g,"id","transformers.AutoTokenizer"),c($g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($g,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(MR,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ER,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(CR,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wR,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizer"),c(AR,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizerFast"),c(LR,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizer"),c(yR,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(xR,"href","/docs/transformers/pr_17313/en/model_doc/bartpho#transformers.BartphoTokenizer"),c($R,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(kR,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(RR,"href","/docs/transformers/pr_17313/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(PR,"href","/docs/transformers/pr_17313/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(BR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(IR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(NR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(jR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(DR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(GR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(OR,"href","/docs/transformers/pr_17313/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(VR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizer"),c(XR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineTokenizer"),c(WR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(QR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(UR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizer"),c(YR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(KR,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ZR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oP,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizer"),c(rP,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(tP,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(aP,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sP,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lP,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(iP,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dP,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizer"),c(cP,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(fP,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(mP,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizer"),c(gP,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(hP,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(pP,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizer"),c(_P,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(uP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(MP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(wP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AP,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LP,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c($P,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizer"),c(DP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizerFast"),c(GP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VP,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeTokenizer"),c(XP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(QP,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianTokenizer"),c(HP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizer"),c(UP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(JP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(YP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(KP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(ZP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17313/en/model_doc/mluke#transformers.MLukeTokenizer"),c(oB,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(rB,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(aB,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(nB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(sB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(lB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(cB,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mB,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gB,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hB,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pB,"href","/docs/transformers/pr_17313/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_B,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uB,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(bB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(vB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagTokenizer"),c(TB,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizer"),c(MB,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizerFast"),c(EB,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CB,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wB,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AB,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(yB,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SB,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(PB,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(BB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(qB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(DB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(GB,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasTokenizer"),c(OB,"href","/docs/transformers/pr_17313/en/model_doc/tapex#transformers.TapexTokenizer"),c(VB,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(XB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(zB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(WB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(UB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizer"),c(JB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(YB,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMTokenizer"),c(KB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ZB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(eI,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(oI,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rI,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tI,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(aI,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(nI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(sI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"id","transformers.AutoFeatureExtractor"),c(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(lI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(iI,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(EI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(CI,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($I,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(II,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jI,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoProcessor"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(DI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(GI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(OI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(VI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(XI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(zI,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(WI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(UI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(JI,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRProcessor"),c(YI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZI,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltProcessor"),c(eN,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(oN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"id","transformers.AutoModel"),c(pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(aN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel"),c(iN,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel"),c(dN,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel"),c(cN,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(fN,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mN,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel"),c(gN,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(hN,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(pN,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(_N,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel"),c(uN,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel"),c(bN,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel"),c(vN,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel"),c(FN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel"),c(TN,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel"),c(MN,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel"),c(EN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(CN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(wN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(AN,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel"),c(LN,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(yN,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(xN,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel"),c($N,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel"),c(kN,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel"),c(SN,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(RN,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel"),c(PN,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel"),c(BN,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel"),c(IN,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel"),c(NN,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel"),c(qN,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel"),c(jN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel"),c(DN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel"),c(GN,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel"),c(ON,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model"),c(VN,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(XN,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(zN,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel"),c(WN,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel"),c(QN,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel"),c(HN,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel"),c(UN,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(JN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(YN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(KN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(ZN,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel"),c(eq,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitModel"),c(oq,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel"),c(rq,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel"),c(tq,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel"),c(aq,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model"),c(nq,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel"),c(sq,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel"),c(lq,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel"),c(iq,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTModel"),c(dq,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cq,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fq,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel"),c(mq,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model"),c(gq,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hq,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pq,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel"),c(_q,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel"),c(uq,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel"),c(bq,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel"),c(vq,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Fq,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Tq,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Mq,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel"),c(Eq,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel"),c(Cq,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel"),c(wq,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel"),c(Aq,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(Lq,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel"),c(yq,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel"),c(xq,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel"),c($q,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel"),c(kq,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel"),c(Sq,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Rq,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel"),c(Pq,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Bq,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel"),c(Iq,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model"),c(Nq,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel"),c(qq,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(jq,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Dq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Gq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Oq,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel"),c(Vq,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel"),c(Xq,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(zq,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Wq,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel"),c(Qq,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Hq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Uq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Jq,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel"),c(Yq,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel"),c(Kq,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel"),c(Zq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ej,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(oj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(rj,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel"),c(tj,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel"),c(aj,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pu,"id","transformers.AutoModelForPreTraining"),c(pu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(nj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ij,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining"),c(dj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining"),c(fj,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(mj,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hj,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pj,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uj,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vj,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Tj,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Mj,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Cj,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wj,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yj,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xj,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($j,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kj,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Rj,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(Pj,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Ij,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jj,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Dj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Gj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Oj,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Vj,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Xj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Wj,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l1,"id","transformers.AutoModelForCausalLM"),c(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l1,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Jj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM"),c(eD,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel"),c(oD,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rD,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tD,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aD,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nD,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sD,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lD,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dD,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cD,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fD,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mD,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gD,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(hD,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM"),c(pD,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_D,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uD,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bD,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM"),c(vD,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(FD,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(TD,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(MD,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ED,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(CD,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wD,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(AD,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(LD,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yD,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xD,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($D,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kD,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(RD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(PD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(BD,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H1,"id","transformers.AutoModelForMaskedLM"),c(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H1,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(ID,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(VD,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XD,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(WD,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(QD,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(HD,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(JD,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(YD,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(KD,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eG,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oG,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rG,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeForMaskedLM"),c(tG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lG,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iG,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dG,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cG,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(fG,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mG,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gG,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hG,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pG,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_G,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vG,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForSeq2SeqLM"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(FG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yG,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel"),c(SG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eb,"id","transformers.AutoModelForSequenceClassification"),c(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eb,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(jG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c($O,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForMultipleChoice"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(BO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForNextSentencePrediction"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(gV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(uV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(bV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(vV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(FV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForTokenClassification"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(TV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(LV,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification"),c(xV,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(kV,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(RV,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(BV,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(NV,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(qV,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(jV,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(DV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(GV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(OV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(VV,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(XV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(zV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WV,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(QV,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(HV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(JV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(YV,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(KV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(eX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(oX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(rX,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(tX,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ev,"id","transformers.AutoModelForQuestionAnswering"),c(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ev,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(aX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(TX,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(VX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WX,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForTableQuestionAnswering"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(QX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForImageClassification"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification"),c(oz,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(rz,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification"),c(tz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(az,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification"),c(nz,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(sz,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(lz,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassification"),c(iz,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(dz,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(cz,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fz,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(mz,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(gz,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(hz,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(pz,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_z,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification"),c(uz,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification"),c(bz,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForVision2Seq"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(vz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForAudioClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(yz,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(xz,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c($z,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(kz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Rz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForAudioFrameClassification"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(jz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Dz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Gz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Oz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForCTC"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Qz,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC"),c(Hz,"href","/docs/transformers/pr_17313/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Uz,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC"),c(Jz,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Yz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Kz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Zz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(eW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(oW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(rW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(sW,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForAudioXVector"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(fW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(mW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(gW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(hW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForMaskedImageModeling"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(pW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(vW,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(FW,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForObjectDetection"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection"),c(wW,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForImageSegmentation"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(AW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.AutoModelForSemanticSegmentation"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c($W,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(PW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(BW,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(IW,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.AutoModelForInstanceSegmentation"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.TFAutoModel"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel"),c(zW,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel"),c(WW,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel"),c(QW,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(HW,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(UW,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel"),c(JW,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel"),c(YW,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel"),c(KW,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel"),c(ZW,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel"),c(eQ,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(oQ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel"),c(rQ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(tQ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(aQ,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(nQ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel"),c(sQ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(lQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel"),c(iQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(dQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model"),c(cQ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel"),c(fQ,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel"),c(mQ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(gQ,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel"),c(hQ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel"),c(pQ,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel"),c(_Q,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel"),c(uQ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel"),c(bQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(vQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel"),c(FQ,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model"),c(TQ,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(MQ,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTModel"),c(EQ,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel"),c(CQ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel"),c(wQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel"),c(AQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel"),c(LQ,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(yQ,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel"),c(xQ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model"),c($Q,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel"),c(kQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(SQ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel"),c(RQ,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(PQ,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(BQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel"),c(IQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(NQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForPreTraining"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(OQ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining"),c(XQ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(HQ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(UQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(JQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(YQ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(ZQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(eH,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oH,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tH,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nH,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sH,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(lH,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iH,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(dH,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForCausalLM"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(cH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(hH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(pH,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_H,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uH,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(bH,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vH,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(FH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(TH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(MH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(EH,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(CH,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForImageClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(AH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c($H,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(kH,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(SH,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForMaskedLM"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(RH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(NH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(qH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(DH,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(GH,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(OH,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VH,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(XH,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zH,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(WH,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QH,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(HH,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(UH,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(YH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(rU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sU,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(lU,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(iU,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(dU,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(cU,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel"),c(fU,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(gU,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.TFAutoModelForSequenceClassification"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(pU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c($U,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(IU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(NU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(qU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(OU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(VU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForMultipleChoice"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(eJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(oJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(rJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(tJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(aJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(nJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(iJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(dJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(hJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForTokenClassification"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c($J,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(SJ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(DJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.TFAutoModelForQuestionAnswering"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(eY,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(dY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.TFAutoModelForVision2Seq"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModel"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel"),c(EY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel"),c(CY,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel"),c(wY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel"),c(AY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(LY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xY,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel"),c($Y,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(kY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel"),c(SY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(RY,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(PY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(BY,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel"),c(IY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel"),c(NY,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model"),c(qY,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTModel"),c(jY,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(DY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(GY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(OY,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model"),c(VY,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(XY,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel"),c(zY,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(WY,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(QY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForCausalLM"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(KY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ZY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(eK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(oK,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(rK,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(tK,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(aK,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(nK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(sK,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForPreTraining"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(lK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vK,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(TK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForMaskedLM"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(AK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(yK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(xK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c($K,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(kK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(PK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(BK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jK,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(DK,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(GK,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(OK,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XK,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zK,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(WK,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(rZ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(sZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForTokenClassification"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(yZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForMultipleChoice"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c($Z,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(PZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(BZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(IZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(NZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(qZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(DZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(GZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForImageClassification"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(zZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(UZ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(JZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,G6),e(rt,bf),b(f,Ge,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,O6),e(We,yn),e(We,xn),e(xn,V6),e(We,ui),e(We,$n),e($n,X6),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,fk),e(Ae,vi),e(vi,mk),e(Ae,gk),b(f,Eo,u),b(f,wa,u),e(wa,hk),e(wa,Ff),e(Ff,pk),e(wa,xVe),b(f,bje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,Woe),M(z6,Woe,null),e(Fi,$Ve),e(Fi,Qoe),e(Qoe,kVe),b(f,vje,u),b(f,kn,u),e(kn,SVe),e(kn,Hoe),e(Hoe,RVe),e(kn,PVe),e(kn,Uoe),e(Uoe,BVe),e(kn,IVe),b(f,Fje,u),M(W6,f,u),b(f,Tje,u),b(f,_k,u),e(_k,NVe),b(f,Mje,u),M(Mf,f,u),b(f,Eje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Joe),M(Q6,Joe,null),e(Ti,qVe),e(Ti,Yoe),e(Yoe,jVe),b(f,Cje,u),b(f,Co,u),M(H6,Co,null),e(Co,DVe),e(Co,U6),e(U6,GVe),e(U6,uk),e(uk,OVe),e(U6,VVe),e(Co,XVe),e(Co,J6),e(J6,zVe),e(J6,Koe),e(Koe,WVe),e(J6,QVe),e(Co,HVe),e(Co,Er),M(Y6,Er,null),e(Er,UVe),e(Er,Zoe),e(Zoe,JVe),e(Er,YVe),e(Er,Mi),e(Mi,KVe),e(Mi,ere),e(ere,ZVe),e(Mi,eXe),e(Mi,ore),e(ore,oXe),e(Mi,rXe),e(Er,tXe),e(Er,A),e(A,Cf),e(Cf,rre),e(rre,aXe),e(Cf,nXe),e(Cf,bk),e(bk,sXe),e(Cf,lXe),e(A,iXe),e(A,wf),e(wf,tre),e(tre,dXe),e(wf,cXe),e(wf,vk),e(vk,fXe),e(wf,mXe),e(A,gXe),e(A,Af),e(Af,are),e(are,hXe),e(Af,pXe),e(Af,Fk),e(Fk,_Xe),e(Af,uXe),e(A,bXe),e(A,Lf),e(Lf,nre),e(nre,vXe),e(Lf,FXe),e(Lf,Tk),e(Tk,TXe),e(Lf,MXe),e(A,EXe),e(A,yf),e(yf,sre),e(sre,CXe),e(yf,wXe),e(yf,Mk),e(Mk,AXe),e(yf,LXe),e(A,yXe),e(A,xf),e(xf,lre),e(lre,xXe),e(xf,$Xe),e(xf,Ek),e(Ek,kXe),e(xf,SXe),e(A,RXe),e(A,$f),e($f,ire),e(ire,PXe),e($f,BXe),e($f,Ck),e(Ck,IXe),e($f,NXe),e(A,qXe),e(A,kf),e(kf,dre),e(dre,jXe),e(kf,DXe),e(kf,wk),e(wk,GXe),e(kf,OXe),e(A,VXe),e(A,Sf),e(Sf,cre),e(cre,XXe),e(Sf,zXe),e(Sf,Ak),e(Ak,WXe),e(Sf,QXe),e(A,HXe),e(A,Rf),e(Rf,fre),e(fre,UXe),e(Rf,JXe),e(Rf,Lk),e(Lk,YXe),e(Rf,KXe),e(A,ZXe),e(A,Pf),e(Pf,mre),e(mre,eze),e(Pf,oze),e(Pf,yk),e(yk,rze),e(Pf,tze),e(A,aze),e(A,Bf),e(Bf,gre),e(gre,nze),e(Bf,sze),e(Bf,xk),e(xk,lze),e(Bf,ize),e(A,dze),e(A,If),e(If,hre),e(hre,cze),e(If,fze),e(If,$k),e($k,mze),e(If,gze),e(A,hze),e(A,Nf),e(Nf,pre),e(pre,pze),e(Nf,_ze),e(Nf,kk),e(kk,uze),e(Nf,bze),e(A,vze),e(A,qf),e(qf,_re),e(_re,Fze),e(qf,Tze),e(qf,Sk),e(Sk,Mze),e(qf,Eze),e(A,Cze),e(A,jf),e(jf,ure),e(ure,wze),e(jf,Aze),e(jf,Rk),e(Rk,Lze),e(jf,yze),e(A,xze),e(A,Df),e(Df,bre),e(bre,$ze),e(Df,kze),e(Df,Pk),e(Pk,Sze),e(Df,Rze),e(A,Pze),e(A,Gf),e(Gf,vre),e(vre,Bze),e(Gf,Ize),e(Gf,Bk),e(Bk,Nze),e(Gf,qze),e(A,jze),e(A,Of),e(Of,Fre),e(Fre,Dze),e(Of,Gze),e(Of,Ik),e(Ik,Oze),e(Of,Vze),e(A,Xze),e(A,Vf),e(Vf,Tre),e(Tre,zze),e(Vf,Wze),e(Vf,Nk),e(Nk,Qze),e(Vf,Hze),e(A,Uze),e(A,Xf),e(Xf,Mre),e(Mre,Jze),e(Xf,Yze),e(Xf,qk),e(qk,Kze),e(Xf,Zze),e(A,eWe),e(A,zf),e(zf,Ere),e(Ere,oWe),e(zf,rWe),e(zf,jk),e(jk,tWe),e(zf,aWe),e(A,nWe),e(A,Wf),e(Wf,Cre),e(Cre,sWe),e(Wf,lWe),e(Wf,Dk),e(Dk,iWe),e(Wf,dWe),e(A,cWe),e(A,Qf),e(Qf,wre),e(wre,fWe),e(Qf,mWe),e(Qf,Gk),e(Gk,gWe),e(Qf,hWe),e(A,pWe),e(A,Hf),e(Hf,Are),e(Are,_We),e(Hf,uWe),e(Hf,Ok),e(Ok,bWe),e(Hf,vWe),e(A,FWe),e(A,Uf),e(Uf,Lre),e(Lre,TWe),e(Uf,MWe),e(Uf,Vk),e(Vk,EWe),e(Uf,CWe),e(A,wWe),e(A,Jf),e(Jf,yre),e(yre,AWe),e(Jf,LWe),e(Jf,Xk),e(Xk,yWe),e(Jf,xWe),e(A,$We),e(A,Yf),e(Yf,xre),e(xre,kWe),e(Yf,SWe),e(Yf,zk),e(zk,RWe),e(Yf,PWe),e(A,BWe),e(A,Kf),e(Kf,$re),e($re,IWe),e(Kf,NWe),e(Kf,Wk),e(Wk,qWe),e(Kf,jWe),e(A,DWe),e(A,Zf),e(Zf,kre),e(kre,GWe),e(Zf,OWe),e(Zf,Qk),e(Qk,VWe),e(Zf,XWe),e(A,zWe),e(A,em),e(em,Sre),e(Sre,WWe),e(em,QWe),e(em,Hk),e(Hk,HWe),e(em,UWe),e(A,JWe),e(A,om),e(om,Rre),e(Rre,YWe),e(om,KWe),e(om,Uk),e(Uk,ZWe),e(om,eQe),e(A,oQe),e(A,rm),e(rm,Pre),e(Pre,rQe),e(rm,tQe),e(rm,Jk),e(Jk,aQe),e(rm,nQe),e(A,sQe),e(A,tm),e(tm,Bre),e(Bre,lQe),e(tm,iQe),e(tm,Yk),e(Yk,dQe),e(tm,cQe),e(A,fQe),e(A,am),e(am,Ire),e(Ire,mQe),e(am,gQe),e(am,Kk),e(Kk,hQe),e(am,pQe),e(A,_Qe),e(A,nm),e(nm,Nre),e(Nre,uQe),e(nm,bQe),e(nm,Zk),e(Zk,vQe),e(nm,FQe),e(A,TQe),e(A,sm),e(sm,qre),e(qre,MQe),e(sm,EQe),e(sm,eS),e(eS,CQe),e(sm,wQe),e(A,AQe),e(A,lm),e(lm,jre),e(jre,LQe),e(lm,yQe),e(lm,oS),e(oS,xQe),e(lm,$Qe),e(A,kQe),e(A,im),e(im,Dre),e(Dre,SQe),e(im,RQe),e(im,rS),e(rS,PQe),e(im,BQe),e(A,IQe),e(A,dm),e(dm,Gre),e(Gre,NQe),e(dm,qQe),e(dm,tS),e(tS,jQe),e(dm,DQe),e(A,GQe),e(A,cm),e(cm,Ore),e(Ore,OQe),e(cm,VQe),e(cm,aS),e(aS,XQe),e(cm,zQe),e(A,WQe),e(A,fm),e(fm,Vre),e(Vre,QQe),e(fm,HQe),e(fm,nS),e(nS,UQe),e(fm,JQe),e(A,YQe),e(A,mm),e(mm,Xre),e(Xre,KQe),e(mm,ZQe),e(mm,sS),e(sS,eHe),e(mm,oHe),e(A,rHe),e(A,gm),e(gm,zre),e(zre,tHe),e(gm,aHe),e(gm,lS),e(lS,nHe),e(gm,sHe),e(A,lHe),e(A,hm),e(hm,Wre),e(Wre,iHe),e(hm,dHe),e(hm,iS),e(iS,cHe),e(hm,fHe),e(A,mHe),e(A,pm),e(pm,Qre),e(Qre,gHe),e(pm,hHe),e(pm,dS),e(dS,pHe),e(pm,_He),e(A,uHe),e(A,_m),e(_m,Hre),e(Hre,bHe),e(_m,vHe),e(_m,cS),e(cS,FHe),e(_m,THe),e(A,MHe),e(A,um),e(um,Ure),e(Ure,EHe),e(um,CHe),e(um,fS),e(fS,wHe),e(um,AHe),e(A,LHe),e(A,bm),e(bm,Jre),e(Jre,yHe),e(bm,xHe),e(bm,mS),e(mS,$He),e(bm,kHe),e(A,SHe),e(A,vm),e(vm,Yre),e(Yre,RHe),e(vm,PHe),e(vm,gS),e(gS,BHe),e(vm,IHe),e(A,NHe),e(A,Fm),e(Fm,Kre),e(Kre,qHe),e(Fm,jHe),e(Fm,hS),e(hS,DHe),e(Fm,GHe),e(A,OHe),e(A,Tm),e(Tm,Zre),e(Zre,VHe),e(Tm,XHe),e(Tm,pS),e(pS,zHe),e(Tm,WHe),e(A,QHe),e(A,Mm),e(Mm,ete),e(ete,HHe),e(Mm,UHe),e(Mm,_S),e(_S,JHe),e(Mm,YHe),e(A,KHe),e(A,Em),e(Em,ote),e(ote,ZHe),e(Em,eUe),e(Em,uS),e(uS,oUe),e(Em,rUe),e(A,tUe),e(A,Cm),e(Cm,rte),e(rte,aUe),e(Cm,nUe),e(Cm,bS),e(bS,sUe),e(Cm,lUe),e(A,iUe),e(A,wm),e(wm,tte),e(tte,dUe),e(wm,cUe),e(wm,vS),e(vS,fUe),e(wm,mUe),e(A,gUe),e(A,Am),e(Am,ate),e(ate,hUe),e(Am,pUe),e(Am,FS),e(FS,_Ue),e(Am,uUe),e(A,bUe),e(A,Lm),e(Lm,nte),e(nte,vUe),e(Lm,FUe),e(Lm,TS),e(TS,TUe),e(Lm,MUe),e(A,EUe),e(A,ym),e(ym,ste),e(ste,CUe),e(ym,wUe),e(ym,MS),e(MS,AUe),e(ym,LUe),e(A,yUe),e(A,xm),e(xm,lte),e(lte,xUe),e(xm,$Ue),e(xm,ES),e(ES,kUe),e(xm,SUe),e(A,RUe),e(A,$m),e($m,ite),e(ite,PUe),e($m,BUe),e($m,CS),e(CS,IUe),e($m,NUe),e(A,qUe),e(A,km),e(km,dte),e(dte,jUe),e(km,DUe),e(km,wS),e(wS,GUe),e(km,OUe),e(A,VUe),e(A,Sm),e(Sm,cte),e(cte,XUe),e(Sm,zUe),e(Sm,AS),e(AS,WUe),e(Sm,QUe),e(A,HUe),e(A,Rm),e(Rm,fte),e(fte,UUe),e(Rm,JUe),e(Rm,LS),e(LS,YUe),e(Rm,KUe),e(A,ZUe),e(A,Pm),e(Pm,mte),e(mte,eJe),e(Pm,oJe),e(Pm,yS),e(yS,rJe),e(Pm,tJe),e(A,aJe),e(A,Bm),e(Bm,gte),e(gte,nJe),e(Bm,sJe),e(Bm,xS),e(xS,lJe),e(Bm,iJe),e(A,dJe),e(A,Im),e(Im,hte),e(hte,cJe),e(Im,fJe),e(Im,$S),e($S,mJe),e(Im,gJe),e(A,hJe),e(A,Nm),e(Nm,pte),e(pte,pJe),e(Nm,_Je),e(Nm,kS),e(kS,uJe),e(Nm,bJe),e(A,vJe),e(A,qm),e(qm,_te),e(_te,FJe),e(qm,TJe),e(qm,SS),e(SS,MJe),e(qm,EJe),e(A,CJe),e(A,jm),e(jm,ute),e(ute,wJe),e(jm,AJe),e(jm,RS),e(RS,LJe),e(jm,yJe),e(A,xJe),e(A,Dm),e(Dm,bte),e(bte,$Je),e(Dm,kJe),e(Dm,PS),e(PS,SJe),e(Dm,RJe),e(A,PJe),e(A,Gm),e(Gm,vte),e(vte,BJe),e(Gm,IJe),e(Gm,BS),e(BS,NJe),e(Gm,qJe),e(A,jJe),e(A,Om),e(Om,Fte),e(Fte,DJe),e(Om,GJe),e(Om,IS),e(IS,OJe),e(Om,VJe),e(A,XJe),e(A,Vm),e(Vm,Tte),e(Tte,zJe),e(Vm,WJe),e(Vm,NS),e(NS,QJe),e(Vm,HJe),e(A,UJe),e(A,Xm),e(Xm,Mte),e(Mte,JJe),e(Xm,YJe),e(Xm,qS),e(qS,KJe),e(Xm,ZJe),e(A,eYe),e(A,zm),e(zm,Ete),e(Ete,oYe),e(zm,rYe),e(zm,jS),e(jS,tYe),e(zm,aYe),e(A,nYe),e(A,Wm),e(Wm,Cte),e(Cte,sYe),e(Wm,lYe),e(Wm,DS),e(DS,iYe),e(Wm,dYe),e(A,cYe),e(A,Qm),e(Qm,wte),e(wte,fYe),e(Qm,mYe),e(Qm,GS),e(GS,gYe),e(Qm,hYe),e(A,pYe),e(A,Hm),e(Hm,Ate),e(Ate,_Ye),e(Hm,uYe),e(Hm,OS),e(OS,bYe),e(Hm,vYe),e(A,FYe),e(A,Um),e(Um,Lte),e(Lte,TYe),e(Um,MYe),e(Um,VS),e(VS,EYe),e(Um,CYe),e(A,wYe),e(A,Jm),e(Jm,yte),e(yte,AYe),e(Jm,LYe),e(Jm,XS),e(XS,yYe),e(Jm,xYe),e(A,$Ye),e(A,Ym),e(Ym,xte),e(xte,kYe),e(Ym,SYe),e(Ym,zS),e(zS,RYe),e(Ym,PYe),e(A,BYe),e(A,Km),e(Km,$te),e($te,IYe),e(Km,NYe),e(Km,WS),e(WS,qYe),e(Km,jYe),e(A,DYe),e(A,Zm),e(Zm,kte),e(kte,GYe),e(Zm,OYe),e(Zm,QS),e(QS,VYe),e(Zm,XYe),e(A,zYe),e(A,eg),e(eg,Ste),e(Ste,WYe),e(eg,QYe),e(eg,HS),e(HS,HYe),e(eg,UYe),e(A,JYe),e(A,og),e(og,Rte),e(Rte,YYe),e(og,KYe),e(og,US),e(US,ZYe),e(og,eKe),e(A,oKe),e(A,rg),e(rg,Pte),e(Pte,rKe),e(rg,tKe),e(rg,JS),e(JS,aKe),e(rg,nKe),e(A,sKe),e(A,tg),e(tg,Bte),e(Bte,lKe),e(tg,iKe),e(tg,YS),e(YS,dKe),e(tg,cKe),e(A,fKe),e(A,ag),e(ag,Ite),e(Ite,mKe),e(ag,gKe),e(ag,KS),e(KS,hKe),e(ag,pKe),e(A,_Ke),e(A,ng),e(ng,Nte),e(Nte,uKe),e(ng,bKe),e(ng,ZS),e(ZS,vKe),e(ng,FKe),e(A,TKe),e(A,sg),e(sg,qte),e(qte,MKe),e(sg,EKe),e(sg,eR),e(eR,CKe),e(sg,wKe),e(A,AKe),e(A,lg),e(lg,jte),e(jte,LKe),e(lg,yKe),e(lg,oR),e(oR,xKe),e(lg,$Ke),e(A,kKe),e(A,ig),e(ig,Dte),e(Dte,SKe),e(ig,RKe),e(ig,rR),e(rR,PKe),e(ig,BKe),e(A,IKe),e(A,dg),e(dg,Gte),e(Gte,NKe),e(dg,qKe),e(dg,tR),e(tR,jKe),e(dg,DKe),e(A,GKe),e(A,cg),e(cg,Ote),e(Ote,OKe),e(cg,VKe),e(cg,aR),e(aR,XKe),e(cg,zKe),e(A,WKe),e(A,fg),e(fg,Vte),e(Vte,QKe),e(fg,HKe),e(fg,nR),e(nR,UKe),e(fg,JKe),e(A,YKe),e(A,mg),e(mg,Xte),e(Xte,KKe),e(mg,ZKe),e(mg,sR),e(sR,eZe),e(mg,oZe),e(A,rZe),e(A,gg),e(gg,zte),e(zte,tZe),e(gg,aZe),e(gg,lR),e(lR,nZe),e(gg,sZe),e(A,lZe),e(A,hg),e(hg,Wte),e(Wte,iZe),e(hg,dZe),e(hg,iR),e(iR,cZe),e(hg,fZe),e(A,mZe),e(A,pg),e(pg,Qte),e(Qte,gZe),e(pg,hZe),e(pg,dR),e(dR,pZe),e(pg,_Ze),e(A,uZe),e(A,_g),e(_g,Hte),e(Hte,bZe),e(_g,vZe),e(_g,cR),e(cR,FZe),e(_g,TZe),e(A,MZe),e(A,ug),e(ug,Ute),e(Ute,EZe),e(ug,CZe),e(ug,fR),e(fR,wZe),e(ug,AZe),e(A,LZe),e(A,bg),e(bg,Jte),e(Jte,yZe),e(bg,xZe),e(bg,mR),e(mR,$Ze),e(bg,kZe),e(A,SZe),e(A,vg),e(vg,Yte),e(Yte,RZe),e(vg,PZe),e(vg,gR),e(gR,BZe),e(vg,IZe),e(A,NZe),e(A,Fg),e(Fg,Kte),e(Kte,qZe),e(Fg,jZe),e(Fg,hR),e(hR,DZe),e(Fg,GZe),e(A,OZe),e(A,Tg),e(Tg,Zte),e(Zte,VZe),e(Tg,XZe),e(Tg,pR),e(pR,zZe),e(Tg,WZe),e(A,QZe),e(A,Mg),e(Mg,eae),e(eae,HZe),e(Mg,UZe),e(Mg,_R),e(_R,JZe),e(Mg,YZe),e(A,KZe),e(A,Eg),e(Eg,oae),e(oae,ZZe),e(Eg,eeo),e(Eg,uR),e(uR,oeo),e(Eg,reo),e(A,teo),e(A,Cg),e(Cg,rae),e(rae,aeo),e(Cg,neo),e(Cg,bR),e(bR,seo),e(Cg,leo),e(A,ieo),e(A,wg),e(wg,tae),e(tae,deo),e(wg,ceo),e(wg,vR),e(vR,feo),e(wg,meo),e(A,geo),e(A,Ag),e(Ag,aae),e(aae,heo),e(Ag,peo),e(Ag,FR),e(FR,_eo),e(Ag,ueo),e(A,beo),e(A,Lg),e(Lg,nae),e(nae,veo),e(Lg,Feo),e(Lg,TR),e(TR,Teo),e(Lg,Meo),e(Er,Eeo),M(yg,Er,null),e(Co,Ceo),e(Co,xg),M(K6,xg,null),e(xg,weo),e(xg,sae),e(sae,Aeo),b(f,wje,u),b(f,Ei,u),e(Ei,$g),e($g,lae),M(Z6,lae,null),e(Ei,Leo),e(Ei,iae),e(iae,yeo),b(f,Aje,u),b(f,wo,u),M(eL,wo,null),e(wo,xeo),e(wo,oL),e(oL,$eo),e(oL,MR),e(MR,keo),e(oL,Seo),e(wo,Reo),e(wo,rL),e(rL,Peo),e(rL,dae),e(dae,Beo),e(rL,Ieo),e(wo,Neo),e(wo,Cr),M(tL,Cr,null),e(Cr,qeo),e(Cr,cae),e(cae,jeo),e(Cr,Deo),e(Cr,Aa),e(Aa,Geo),e(Aa,fae),e(fae,Oeo),e(Aa,Veo),e(Aa,mae),e(mae,Xeo),e(Aa,zeo),e(Aa,gae),e(gae,Weo),e(Aa,Qeo),e(Cr,Heo),e(Cr,k),e(k,Sn),e(Sn,hae),e(hae,Ueo),e(Sn,Jeo),e(Sn,ER),e(ER,Yeo),e(Sn,Keo),e(Sn,CR),e(CR,Zeo),e(Sn,eoo),e(k,ooo),e(k,Rn),e(Rn,pae),e(pae,roo),e(Rn,too),e(Rn,wR),e(wR,aoo),e(Rn,noo),e(Rn,AR),e(AR,soo),e(Rn,loo),e(k,ioo),e(k,Pn),e(Pn,_ae),e(_ae,doo),e(Pn,coo),e(Pn,LR),e(LR,foo),e(Pn,moo),e(Pn,yR),e(yR,goo),e(Pn,hoo),e(k,poo),e(k,kg),e(kg,uae),e(uae,_oo),e(kg,uoo),e(kg,xR),e(xR,boo),e(kg,voo),e(k,Foo),e(k,Bn),e(Bn,bae),e(bae,Too),e(Bn,Moo),e(Bn,$R),e($R,Eoo),e(Bn,Coo),e(Bn,kR),e(kR,woo),e(Bn,Aoo),e(k,Loo),e(k,Sg),e(Sg,vae),e(vae,yoo),e(Sg,xoo),e(Sg,SR),e(SR,$oo),e(Sg,koo),e(k,Soo),e(k,Rg),e(Rg,Fae),e(Fae,Roo),e(Rg,Poo),e(Rg,RR),e(RR,Boo),e(Rg,Ioo),e(k,Noo),e(k,Pg),e(Pg,Tae),e(Tae,qoo),e(Pg,joo),e(Pg,PR),e(PR,Doo),e(Pg,Goo),e(k,Ooo),e(k,In),e(In,Mae),e(Mae,Voo),e(In,Xoo),e(In,BR),e(BR,zoo),e(In,Woo),e(In,IR),e(IR,Qoo),e(In,Hoo),e(k,Uoo),e(k,Nn),e(Nn,Eae),e(Eae,Joo),e(Nn,Yoo),e(Nn,NR),e(NR,Koo),e(Nn,Zoo),e(Nn,qR),e(qR,ero),e(Nn,oro),e(k,rro),e(k,qn),e(qn,Cae),e(Cae,tro),e(qn,aro),e(qn,jR),e(jR,nro),e(qn,sro),e(qn,DR),e(DR,lro),e(qn,iro),e(k,dro),e(k,Bg),e(Bg,wae),e(wae,cro),e(Bg,fro),e(Bg,GR),e(GR,mro),e(Bg,gro),e(k,hro),e(k,Ig),e(Ig,Aae),e(Aae,pro),e(Ig,_ro),e(Ig,OR),e(OR,uro),e(Ig,bro),e(k,vro),e(k,jn),e(jn,Lae),e(Lae,Fro),e(jn,Tro),e(jn,VR),e(VR,Mro),e(jn,Ero),e(jn,XR),e(XR,Cro),e(jn,wro),e(k,Aro),e(k,Ng),e(Ng,yae),e(yae,Lro),e(Ng,yro),e(Ng,zR),e(zR,xro),e(Ng,$ro),e(k,kro),e(k,Dn),e(Dn,xae),e(xae,Sro),e(Dn,Rro),e(Dn,WR),e(WR,Pro),e(Dn,Bro),e(Dn,QR),e(QR,Iro),e(Dn,Nro),e(k,qro),e(k,Gn),e(Gn,$ae),e($ae,jro),e(Gn,Dro),e(Gn,HR),e(HR,Gro),e(Gn,Oro),e(Gn,UR),e(UR,Vro),e(Gn,Xro),e(k,zro),e(k,On),e(On,kae),e(kae,Wro),e(On,Qro),e(On,JR),e(JR,Hro),e(On,Uro),e(On,YR),e(YR,Jro),e(On,Yro),e(k,Kro),e(k,qg),e(qg,Sae),e(Sae,Zro),e(qg,eto),e(qg,KR),e(KR,oto),e(qg,rto),e(k,tto),e(k,Vn),e(Vn,Rae),e(Rae,ato),e(Vn,nto),e(Vn,ZR),e(ZR,sto),e(Vn,lto),e(Vn,eP),e(eP,ito),e(Vn,dto),e(k,cto),e(k,Xn),e(Xn,Pae),e(Pae,fto),e(Xn,mto),e(Xn,oP),e(oP,gto),e(Xn,hto),e(Xn,rP),e(rP,pto),e(Xn,_to),e(k,uto),e(k,zn),e(zn,Bae),e(Bae,bto),e(zn,vto),e(zn,tP),e(tP,Fto),e(zn,Tto),e(zn,aP),e(aP,Mto),e(zn,Eto),e(k,Cto),e(k,Wn),e(Wn,Iae),e(Iae,wto),e(Wn,Ato),e(Wn,nP),e(nP,Lto),e(Wn,yto),e(Wn,sP),e(sP,xto),e(Wn,$to),e(k,kto),e(k,Qn),e(Qn,Nae),e(Nae,Sto),e(Qn,Rto),e(Qn,lP),e(lP,Pto),e(Qn,Bto),e(Qn,iP),e(iP,Ito),e(Qn,Nto),e(k,qto),e(k,Hn),e(Hn,qae),e(qae,jto),e(Hn,Dto),e(Hn,dP),e(dP,Gto),e(Hn,Oto),e(Hn,cP),e(cP,Vto),e(Hn,Xto),e(k,zto),e(k,jg),e(jg,jae),e(jae,Wto),e(jg,Qto),e(jg,fP),e(fP,Hto),e(jg,Uto),e(k,Jto),e(k,Un),e(Un,Dae),e(Dae,Yto),e(Un,Kto),e(Un,mP),e(mP,Zto),e(Un,eao),e(Un,gP),e(gP,oao),e(Un,rao),e(k,tao),e(k,Dg),e(Dg,Gae),e(Gae,aao),e(Dg,nao),e(Dg,hP),e(hP,sao),e(Dg,lao),e(k,iao),e(k,Jn),e(Jn,Oae),e(Oae,dao),e(Jn,cao),e(Jn,pP),e(pP,fao),e(Jn,mao),e(Jn,_P),e(_P,gao),e(Jn,hao),e(k,pao),e(k,Yn),e(Yn,Vae),e(Vae,_ao),e(Yn,uao),e(Yn,uP),e(uP,bao),e(Yn,vao),e(Yn,bP),e(bP,Fao),e(Yn,Tao),e(k,Mao),e(k,Kn),e(Kn,Xae),e(Xae,Eao),e(Kn,Cao),e(Kn,vP),e(vP,wao),e(Kn,Aao),e(Kn,FP),e(FP,Lao),e(Kn,yao),e(k,xao),e(k,Gg),e(Gg,zae),e(zae,$ao),e(Gg,kao),e(Gg,TP),e(TP,Sao),e(Gg,Rao),e(k,Pao),e(k,Zn),e(Zn,Wae),e(Wae,Bao),e(Zn,Iao),e(Zn,MP),e(MP,Nao),e(Zn,qao),e(Zn,EP),e(EP,jao),e(Zn,Dao),e(k,Gao),e(k,es),e(es,Qae),e(Qae,Oao),e(es,Vao),e(es,CP),e(CP,Xao),e(es,zao),e(es,wP),e(wP,Wao),e(es,Qao),e(k,Hao),e(k,os),e(os,Hae),e(Hae,Uao),e(os,Jao),e(os,AP),e(AP,Yao),e(os,Kao),e(os,LP),e(LP,Zao),e(os,eno),e(k,ono),e(k,Og),e(Og,Uae),e(Uae,rno),e(Og,tno),e(Og,yP),e(yP,ano),e(Og,nno),e(k,sno),e(k,rs),e(rs,Jae),e(Jae,lno),e(rs,ino),e(rs,xP),e(xP,dno),e(rs,cno),e(rs,$P),e($P,fno),e(rs,mno),e(k,gno),e(k,ts),e(ts,Yae),e(Yae,hno),e(ts,pno),e(ts,kP),e(kP,_no),e(ts,uno),e(ts,SP),e(SP,bno),e(ts,vno),e(k,Fno),e(k,as),e(as,Kae),e(Kae,Tno),e(as,Mno),e(as,RP),e(RP,Eno),e(as,Cno),e(as,PP),e(PP,wno),e(as,Ano),e(k,Lno),e(k,ns),e(ns,Zae),e(Zae,yno),e(ns,xno),e(ns,BP),e(BP,$no),e(ns,kno),e(ns,IP),e(IP,Sno),e(ns,Rno),e(k,Pno),e(k,ss),e(ss,ene),e(ene,Bno),e(ss,Ino),e(ss,NP),e(NP,Nno),e(ss,qno),e(ss,qP),e(qP,jno),e(ss,Dno),e(k,Gno),e(k,ls),e(ls,one),e(one,Ono),e(ls,Vno),e(ls,jP),e(jP,Xno),e(ls,zno),e(ls,DP),e(DP,Wno),e(ls,Qno),e(k,Hno),e(k,is),e(is,rne),e(rne,Uno),e(is,Jno),e(is,GP),e(GP,Yno),e(is,Kno),e(is,OP),e(OP,Zno),e(is,eso),e(k,oso),e(k,Vg),e(Vg,tne),e(tne,rso),e(Vg,tso),e(Vg,VP),e(VP,aso),e(Vg,nso),e(k,sso),e(k,ds),e(ds,ane),e(ane,lso),e(ds,iso),e(ds,XP),e(XP,dso),e(ds,cso),e(ds,zP),e(zP,fso),e(ds,mso),e(k,gso),e(k,Xg),e(Xg,nne),e(nne,hso),e(Xg,pso),e(Xg,WP),e(WP,_so),e(Xg,uso),e(k,bso),e(k,zg),e(zg,sne),e(sne,vso),e(zg,Fso),e(zg,QP),e(QP,Tso),e(zg,Mso),e(k,Eso),e(k,cs),e(cs,lne),e(lne,Cso),e(cs,wso),e(cs,HP),e(HP,Aso),e(cs,Lso),e(cs,UP),e(UP,yso),e(cs,xso),e(k,$so),e(k,fs),e(fs,ine),e(ine,kso),e(fs,Sso),e(fs,JP),e(JP,Rso),e(fs,Pso),e(fs,YP),e(YP,Bso),e(fs,Iso),e(k,Nso),e(k,ms),e(ms,dne),e(dne,qso),e(ms,jso),e(ms,KP),e(KP,Dso),e(ms,Gso),e(ms,ZP),e(ZP,Oso),e(ms,Vso),e(k,Xso),e(k,Wg),e(Wg,cne),e(cne,zso),e(Wg,Wso),e(Wg,eB),e(eB,Qso),e(Wg,Hso),e(k,Uso),e(k,gs),e(gs,fne),e(fne,Jso),e(gs,Yso),e(gs,oB),e(oB,Kso),e(gs,Zso),e(gs,rB),e(rB,elo),e(gs,olo),e(k,rlo),e(k,hs),e(hs,mne),e(mne,tlo),e(hs,alo),e(hs,tB),e(tB,nlo),e(hs,slo),e(hs,aB),e(aB,llo),e(hs,ilo),e(k,dlo),e(k,ps),e(ps,gne),e(gne,clo),e(ps,flo),e(ps,nB),e(nB,mlo),e(ps,glo),e(ps,sB),e(sB,hlo),e(ps,plo),e(k,_lo),e(k,_s),e(_s,hne),e(hne,ulo),e(_s,blo),e(_s,lB),e(lB,vlo),e(_s,Flo),e(_s,iB),e(iB,Tlo),e(_s,Mlo),e(k,Elo),e(k,us),e(us,pne),e(pne,Clo),e(us,wlo),e(us,dB),e(dB,Alo),e(us,Llo),e(us,cB),e(cB,ylo),e(us,xlo),e(k,$lo),e(k,Qg),e(Qg,_ne),e(_ne,klo),e(Qg,Slo),e(Qg,fB),e(fB,Rlo),e(Qg,Plo),e(k,Blo),e(k,bs),e(bs,une),e(une,Ilo),e(bs,Nlo),e(bs,mB),e(mB,qlo),e(bs,jlo),e(bs,gB),e(gB,Dlo),e(bs,Glo),e(k,Olo),e(k,Hg),e(Hg,bne),e(bne,Vlo),e(Hg,Xlo),e(Hg,hB),e(hB,zlo),e(Hg,Wlo),e(k,Qlo),e(k,Ug),e(Ug,vne),e(vne,Hlo),e(Ug,Ulo),e(Ug,pB),e(pB,Jlo),e(Ug,Ylo),e(k,Klo),e(k,Jg),e(Jg,Fne),e(Fne,Zlo),e(Jg,eio),e(Jg,_B),e(_B,oio),e(Jg,rio),e(k,tio),e(k,Yg),e(Yg,Tne),e(Tne,aio),e(Yg,nio),e(Yg,uB),e(uB,sio),e(Yg,lio),e(k,iio),e(k,vs),e(vs,Mne),e(Mne,dio),e(vs,cio),e(vs,bB),e(bB,fio),e(vs,mio),e(vs,vB),e(vB,gio),e(vs,hio),e(k,pio),e(k,Kg),e(Kg,Ene),e(Ene,_io),e(Kg,uio),e(Kg,FB),e(FB,bio),e(Kg,vio),e(k,Fio),e(k,Fs),e(Fs,Cne),e(Cne,Tio),e(Fs,Mio),e(Fs,TB),e(TB,Eio),e(Fs,Cio),e(Fs,MB),e(MB,wio),e(Fs,Aio),e(k,Lio),e(k,Ts),e(Ts,wne),e(wne,yio),e(Ts,xio),e(Ts,EB),e(EB,$io),e(Ts,kio),e(Ts,CB),e(CB,Sio),e(Ts,Rio),e(k,Pio),e(k,Ms),e(Ms,Ane),e(Ane,Bio),e(Ms,Iio),e(Ms,wB),e(wB,Nio),e(Ms,qio),e(Ms,AB),e(AB,jio),e(Ms,Dio),e(k,Gio),e(k,Es),e(Es,Lne),e(Lne,Oio),e(Es,Vio),e(Es,LB),e(LB,Xio),e(Es,zio),e(Es,yB),e(yB,Wio),e(Es,Qio),e(k,Hio),e(k,Cs),e(Cs,yne),e(yne,Uio),e(Cs,Jio),e(Cs,xB),e(xB,Yio),e(Cs,Kio),e(Cs,$B),e($B,Zio),e(Cs,edo),e(k,odo),e(k,ws),e(ws,xne),e(xne,rdo),e(ws,tdo),e(ws,kB),e(kB,ado),e(ws,ndo),e(ws,SB),e(SB,sdo),e(ws,ldo),e(k,ido),e(k,Zg),e(Zg,$ne),e($ne,ddo),e(Zg,cdo),e(Zg,RB),e(RB,fdo),e(Zg,mdo),e(k,gdo),e(k,eh),e(eh,kne),e(kne,hdo),e(eh,pdo),e(eh,PB),e(PB,_do),e(eh,udo),e(k,bdo),e(k,As),e(As,Sne),e(Sne,vdo),e(As,Fdo),e(As,BB),e(BB,Tdo),e(As,Mdo),e(As,IB),e(IB,Edo),e(As,Cdo),e(k,wdo),e(k,Ls),e(Ls,Rne),e(Rne,Ado),e(Ls,Ldo),e(Ls,NB),e(NB,ydo),e(Ls,xdo),e(Ls,qB),e(qB,$do),e(Ls,kdo),e(k,Sdo),e(k,ys),e(ys,Pne),e(Pne,Rdo),e(ys,Pdo),e(ys,jB),e(jB,Bdo),e(ys,Ido),e(ys,DB),e(DB,Ndo),e(ys,qdo),e(k,jdo),e(k,oh),e(oh,Bne),e(Bne,Ddo),e(oh,Gdo),e(oh,GB),e(GB,Odo),e(oh,Vdo),e(k,Xdo),e(k,rh),e(rh,Ine),e(Ine,zdo),e(rh,Wdo),e(rh,OB),e(OB,Qdo),e(rh,Hdo),e(k,Udo),e(k,th),e(th,Nne),e(Nne,Jdo),e(th,Ydo),e(th,VB),e(VB,Kdo),e(th,Zdo),e(k,eco),e(k,xs),e(xs,qne),e(qne,oco),e(xs,rco),e(xs,XB),e(XB,tco),e(xs,aco),e(xs,zB),e(zB,nco),e(xs,sco),e(k,lco),e(k,ah),e(ah,jne),e(jne,ico),e(ah,dco),e(ah,WB),e(WB,cco),e(ah,fco),e(k,mco),e(k,nh),e(nh,Dne),e(Dne,gco),e(nh,hco),e(nh,QB),e(QB,pco),e(nh,_co),e(k,uco),e(k,sh),e(sh,Gne),e(Gne,bco),e(sh,vco),e(sh,HB),e(HB,Fco),e(sh,Tco),e(k,Mco),e(k,$s),e($s,One),e(One,Eco),e($s,Cco),e($s,UB),e(UB,wco),e($s,Aco),e($s,JB),e(JB,Lco),e($s,yco),e(k,xco),e(k,lh),e(lh,Vne),e(Vne,$co),e(lh,kco),e(lh,YB),e(YB,Sco),e(lh,Rco),e(k,Pco),e(k,ih),e(ih,Xne),e(Xne,Bco),e(ih,Ico),e(ih,KB),e(KB,Nco),e(ih,qco),e(k,jco),e(k,ks),e(ks,zne),e(zne,Dco),e(ks,Gco),e(ks,ZB),e(ZB,Oco),e(ks,Vco),e(ks,eI),e(eI,Xco),e(ks,zco),e(k,Wco),e(k,Ss),e(Ss,Wne),e(Wne,Qco),e(Ss,Hco),e(Ss,oI),e(oI,Uco),e(Ss,Jco),e(Ss,rI),e(rI,Yco),e(Ss,Kco),e(k,Zco),e(k,Rs),e(Rs,Qne),e(Qne,efo),e(Rs,ofo),e(Rs,tI),e(tI,rfo),e(Rs,tfo),e(Rs,aI),e(aI,afo),e(Rs,nfo),e(k,sfo),e(k,Ps),e(Ps,Hne),e(Hne,lfo),e(Ps,ifo),e(Ps,nI),e(nI,dfo),e(Ps,cfo),e(Ps,sI),e(sI,ffo),e(Ps,mfo),e(Cr,gfo),M(dh,Cr,null),e(wo,hfo),e(wo,ch),M(aL,ch,null),e(ch,pfo),e(ch,Une),e(Une,_fo),b(f,Lje,u),b(f,Ci,u),e(Ci,fh),e(fh,Jne),M(nL,Jne,null),e(Ci,ufo),e(Ci,Yne),e(Yne,bfo),b(f,yje,u),b(f,Ao,u),M(sL,Ao,null),e(Ao,vfo),e(Ao,lL),e(lL,Ffo),e(lL,lI),e(lI,Tfo),e(lL,Mfo),e(Ao,Efo),e(Ao,iL),e(iL,Cfo),e(iL,Kne),e(Kne,wfo),e(iL,Afo),e(Ao,Lfo),e(Ao,He),M(dL,He,null),e(He,yfo),e(He,Zne),e(Zne,xfo),e(He,$fo),e(He,La),e(La,kfo),e(La,ese),e(ese,Sfo),e(La,Rfo),e(La,ose),e(ose,Pfo),e(La,Bfo),e(La,rse),e(rse,Ifo),e(La,Nfo),e(He,qfo),e(He,Y),e(Y,mh),e(mh,tse),e(tse,jfo),e(mh,Dfo),e(mh,iI),e(iI,Gfo),e(mh,Ofo),e(Y,Vfo),e(Y,gh),e(gh,ase),e(ase,Xfo),e(gh,zfo),e(gh,dI),e(dI,Wfo),e(gh,Qfo),e(Y,Hfo),e(Y,hh),e(hh,nse),e(nse,Ufo),e(hh,Jfo),e(hh,cI),e(cI,Yfo),e(hh,Kfo),e(Y,Zfo),e(Y,ph),e(ph,sse),e(sse,emo),e(ph,omo),e(ph,fI),e(fI,rmo),e(ph,tmo),e(Y,amo),e(Y,_h),e(_h,lse),e(lse,nmo),e(_h,smo),e(_h,mI),e(mI,lmo),e(_h,imo),e(Y,dmo),e(Y,uh),e(uh,ise),e(ise,cmo),e(uh,fmo),e(uh,gI),e(gI,mmo),e(uh,gmo),e(Y,hmo),e(Y,bh),e(bh,dse),e(dse,pmo),e(bh,_mo),e(bh,hI),e(hI,umo),e(bh,bmo),e(Y,vmo),e(Y,vh),e(vh,cse),e(cse,Fmo),e(vh,Tmo),e(vh,pI),e(pI,Mmo),e(vh,Emo),e(Y,Cmo),e(Y,Fh),e(Fh,fse),e(fse,wmo),e(Fh,Amo),e(Fh,_I),e(_I,Lmo),e(Fh,ymo),e(Y,xmo),e(Y,Th),e(Th,mse),e(mse,$mo),e(Th,kmo),e(Th,uI),e(uI,Smo),e(Th,Rmo),e(Y,Pmo),e(Y,Mh),e(Mh,gse),e(gse,Bmo),e(Mh,Imo),e(Mh,bI),e(bI,Nmo),e(Mh,qmo),e(Y,jmo),e(Y,Eh),e(Eh,hse),e(hse,Dmo),e(Eh,Gmo),e(Eh,vI),e(vI,Omo),e(Eh,Vmo),e(Y,Xmo),e(Y,Ch),e(Ch,pse),e(pse,zmo),e(Ch,Wmo),e(Ch,FI),e(FI,Qmo),e(Ch,Hmo),e(Y,Umo),e(Y,wh),e(wh,_se),e(_se,Jmo),e(wh,Ymo),e(wh,TI),e(TI,Kmo),e(wh,Zmo),e(Y,ego),e(Y,Ah),e(Ah,use),e(use,ogo),e(Ah,rgo),e(Ah,MI),e(MI,tgo),e(Ah,ago),e(Y,ngo),e(Y,Lh),e(Lh,bse),e(bse,sgo),e(Lh,lgo),e(Lh,EI),e(EI,igo),e(Lh,dgo),e(Y,cgo),e(Y,yh),e(yh,vse),e(vse,fgo),e(yh,mgo),e(yh,CI),e(CI,ggo),e(yh,hgo),e(Y,pgo),e(Y,xh),e(xh,Fse),e(Fse,_go),e(xh,ugo),e(xh,wI),e(wI,bgo),e(xh,vgo),e(Y,Fgo),e(Y,$h),e($h,Tse),e(Tse,Tgo),e($h,Mgo),e($h,AI),e(AI,Ego),e($h,Cgo),e(Y,wgo),e(Y,kh),e(kh,Mse),e(Mse,Ago),e(kh,Lgo),e(kh,LI),e(LI,ygo),e(kh,xgo),e(Y,$go),e(Y,Sh),e(Sh,Ese),e(Ese,kgo),e(Sh,Sgo),e(Sh,yI),e(yI,Rgo),e(Sh,Pgo),e(Y,Bgo),e(Y,Rh),e(Rh,Cse),e(Cse,Igo),e(Rh,Ngo),e(Rh,xI),e(xI,qgo),e(Rh,jgo),e(Y,Dgo),e(Y,Ph),e(Ph,wse),e(wse,Ggo),e(Ph,Ogo),e(Ph,$I),e($I,Vgo),e(Ph,Xgo),e(Y,zgo),e(Y,Bh),e(Bh,Ase),e(Ase,Wgo),e(Bh,Qgo),e(Bh,kI),e(kI,Hgo),e(Bh,Ugo),e(Y,Jgo),e(Y,Ih),e(Ih,Lse),e(Lse,Ygo),e(Ih,Kgo),e(Ih,SI),e(SI,Zgo),e(Ih,eho),e(Y,oho),e(Y,Nh),e(Nh,yse),e(yse,rho),e(Nh,tho),e(Nh,RI),e(RI,aho),e(Nh,nho),e(Y,sho),e(Y,qh),e(qh,xse),e(xse,lho),e(qh,iho),e(qh,PI),e(PI,dho),e(qh,cho),e(Y,fho),e(Y,jh),e(jh,$se),e($se,mho),e(jh,gho),e(jh,BI),e(BI,hho),e(jh,pho),e(Y,_ho),e(Y,Dh),e(Dh,kse),e(kse,uho),e(Dh,bho),e(Dh,II),e(II,vho),e(Dh,Fho),e(Y,Tho),e(Y,Gh),e(Gh,Sse),e(Sse,Mho),e(Gh,Eho),e(Gh,NI),e(NI,Cho),e(Gh,who),e(Y,Aho),e(Y,Oh),e(Oh,Rse),e(Rse,Lho),e(Oh,yho),e(Oh,qI),e(qI,xho),e(Oh,$ho),e(Y,kho),e(Y,Vh),e(Vh,Pse),e(Pse,Sho),e(Vh,Rho),e(Vh,jI),e(jI,Pho),e(Vh,Bho),e(He,Iho),M(Xh,He,null),e(He,Nho),M(zh,He,null),e(Ao,qho),e(Ao,Wh),M(cL,Wh,null),e(Wh,jho),e(Wh,Bse),e(Bse,Dho),b(f,xje,u),b(f,wi,u),e(wi,Qh),e(Qh,Ise),M(fL,Ise,null),e(wi,Gho),e(wi,Nse),e(Nse,Oho),b(f,$je,u),b(f,Lo,u),M(mL,Lo,null),e(Lo,Vho),e(Lo,gL),e(gL,Xho),e(gL,DI),e(DI,zho),e(gL,Who),e(Lo,Qho),e(Lo,hL),e(hL,Hho),e(hL,qse),e(qse,Uho),e(hL,Jho),e(Lo,Yho),e(Lo,Ue),M(pL,Ue,null),e(Ue,Kho),e(Ue,jse),e(jse,Zho),e(Ue,epo),e(Ue,Ai),e(Ai,opo),e(Ai,Dse),e(Dse,rpo),e(Ai,tpo),e(Ai,Gse),e(Gse,apo),e(Ai,npo),e(Ue,spo),e(Ue,he),e(he,Hh),e(Hh,Ose),e(Ose,lpo),e(Hh,ipo),e(Hh,GI),e(GI,dpo),e(Hh,cpo),e(he,fpo),e(he,Uh),e(Uh,Vse),e(Vse,mpo),e(Uh,gpo),e(Uh,Xse),e(Xse,hpo),e(Uh,ppo),e(he,_po),e(he,Jh),e(Jh,zse),e(zse,upo),e(Jh,bpo),e(Jh,OI),e(OI,vpo),e(Jh,Fpo),e(he,Tpo),e(he,Yh),e(Yh,Wse),e(Wse,Mpo),e(Yh,Epo),e(Yh,VI),e(VI,Cpo),e(Yh,wpo),e(he,Apo),e(he,Kh),e(Kh,Qse),e(Qse,Lpo),e(Kh,ypo),e(Kh,XI),e(XI,xpo),e(Kh,$po),e(he,kpo),e(he,Zh),e(Zh,Hse),e(Hse,Spo),e(Zh,Rpo),e(Zh,zI),e(zI,Ppo),e(Zh,Bpo),e(he,Ipo),e(he,ep),e(ep,Use),e(Use,Npo),e(ep,qpo),e(ep,WI),e(WI,jpo),e(ep,Dpo),e(he,Gpo),e(he,op),e(op,Jse),e(Jse,Opo),e(op,Vpo),e(op,QI),e(QI,Xpo),e(op,zpo),e(he,Wpo),e(he,rp),e(rp,Yse),e(Yse,Qpo),e(rp,Hpo),e(rp,HI),e(HI,Upo),e(rp,Jpo),e(he,Ypo),e(he,tp),e(tp,Kse),e(Kse,Kpo),e(tp,Zpo),e(tp,UI),e(UI,e_o),e(tp,o_o),e(he,r_o),e(he,ap),e(ap,Zse),e(Zse,t_o),e(ap,a_o),e(ap,JI),e(JI,n_o),e(ap,s_o),e(he,l_o),e(he,np),e(np,ele),e(ele,i_o),e(np,d_o),e(np,YI),e(YI,c_o),e(np,f_o),e(he,m_o),e(he,sp),e(sp,ole),e(ole,g_o),e(sp,h_o),e(sp,KI),e(KI,p_o),e(sp,__o),e(he,u_o),e(he,lp),e(lp,rle),e(rle,b_o),e(lp,v_o),e(lp,ZI),e(ZI,F_o),e(lp,T_o),e(he,M_o),e(he,ip),e(ip,tle),e(tle,E_o),e(ip,C_o),e(ip,eN),e(eN,w_o),e(ip,A_o),e(he,L_o),e(he,dp),e(dp,ale),e(ale,y_o),e(dp,x_o),e(dp,oN),e(oN,$_o),e(dp,k_o),e(he,S_o),e(he,cp),e(cp,nle),e(nle,R_o),e(cp,P_o),e(cp,rN),e(rN,B_o),e(cp,I_o),e(he,N_o),e(he,fp),e(fp,sle),e(sle,q_o),e(fp,j_o),e(fp,tN),e(tN,D_o),e(fp,G_o),e(Ue,O_o),M(mp,Ue,null),e(Ue,V_o),M(gp,Ue,null),e(Lo,X_o),e(Lo,hp),M(_L,hp,null),e(hp,z_o),e(hp,lle),e(lle,W_o),b(f,kje,u),b(f,Li,u),e(Li,pp),e(pp,ile),M(uL,ile,null),e(Li,Q_o),e(Li,dle),e(dle,H_o),b(f,Sje,u),b(f,yo,u),M(bL,yo,null),e(yo,U_o),e(yo,yi),e(yi,J_o),e(yi,aN),e(aN,Y_o),e(yi,K_o),e(yi,nN),e(nN,Z_o),e(yi,euo),e(yo,ouo),e(yo,vL),e(vL,ruo),e(vL,cle),e(cle,tuo),e(vL,auo),e(yo,nuo),e(yo,tt),M(FL,tt,null),e(tt,suo),e(tt,fle),e(fle,luo),e(tt,iuo),e(tt,xi),e(xi,duo),e(xi,mle),e(mle,cuo),e(xi,fuo),e(xi,sN),e(sN,muo),e(xi,guo),e(tt,huo),M(_p,tt,null),e(yo,puo),e(yo,Je),M(TL,Je,null),e(Je,_uo),e(Je,gle),e(gle,uuo),e(Je,buo),e(Je,ya),e(ya,vuo),e(ya,hle),e(hle,Fuo),e(ya,Tuo),e(ya,ple),e(ple,Muo),e(ya,Euo),e(ya,_le),e(_le,Cuo),e(ya,wuo),e(Je,Auo),e(Je,y),e(y,up),e(up,ule),e(ule,Luo),e(up,yuo),e(up,lN),e(lN,xuo),e(up,$uo),e(y,kuo),e(y,bp),e(bp,ble),e(ble,Suo),e(bp,Ruo),e(bp,iN),e(iN,Puo),e(bp,Buo),e(y,Iuo),e(y,vp),e(vp,vle),e(vle,Nuo),e(vp,quo),e(vp,dN),e(dN,juo),e(vp,Duo),e(y,Guo),e(y,Fp),e(Fp,Fle),e(Fle,Ouo),e(Fp,Vuo),e(Fp,cN),e(cN,Xuo),e(Fp,zuo),e(y,Wuo),e(y,Tp),e(Tp,Tle),e(Tle,Quo),e(Tp,Huo),e(Tp,fN),e(fN,Uuo),e(Tp,Juo),e(y,Yuo),e(y,Mp),e(Mp,Mle),e(Mle,Kuo),e(Mp,Zuo),e(Mp,mN),e(mN,e1o),e(Mp,o1o),e(y,r1o),e(y,Ep),e(Ep,Ele),e(Ele,t1o),e(Ep,a1o),e(Ep,gN),e(gN,n1o),e(Ep,s1o),e(y,l1o),e(y,Cp),e(Cp,Cle),e(Cle,i1o),e(Cp,d1o),e(Cp,hN),e(hN,c1o),e(Cp,f1o),e(y,m1o),e(y,wp),e(wp,wle),e(wle,g1o),e(wp,h1o),e(wp,pN),e(pN,p1o),e(wp,_1o),e(y,u1o),e(y,Ap),e(Ap,Ale),e(Ale,b1o),e(Ap,v1o),e(Ap,_N),e(_N,F1o),e(Ap,T1o),e(y,M1o),e(y,Lp),e(Lp,Lle),e(Lle,E1o),e(Lp,C1o),e(Lp,uN),e(uN,w1o),e(Lp,A1o),e(y,L1o),e(y,yp),e(yp,yle),e(yle,y1o),e(yp,x1o),e(yp,bN),e(bN,$1o),e(yp,k1o),e(y,S1o),e(y,xp),e(xp,xle),e(xle,R1o),e(xp,P1o),e(xp,vN),e(vN,B1o),e(xp,I1o),e(y,N1o),e(y,$p),e($p,$le),e($le,q1o),e($p,j1o),e($p,FN),e(FN,D1o),e($p,G1o),e(y,O1o),e(y,kp),e(kp,kle),e(kle,V1o),e(kp,X1o),e(kp,TN),e(TN,z1o),e(kp,W1o),e(y,Q1o),e(y,Sp),e(Sp,Sle),e(Sle,H1o),e(Sp,U1o),e(Sp,MN),e(MN,J1o),e(Sp,Y1o),e(y,K1o),e(y,Rp),e(Rp,Rle),e(Rle,Z1o),e(Rp,e3o),e(Rp,EN),e(EN,o3o),e(Rp,r3o),e(y,t3o),e(y,Pp),e(Pp,Ple),e(Ple,a3o),e(Pp,n3o),e(Pp,CN),e(CN,s3o),e(Pp,l3o),e(y,i3o),e(y,Bp),e(Bp,Ble),e(Ble,d3o),e(Bp,c3o),e(Bp,wN),e(wN,f3o),e(Bp,m3o),e(y,g3o),e(y,Ip),e(Ip,Ile),e(Ile,h3o),e(Ip,p3o),e(Ip,AN),e(AN,_3o),e(Ip,u3o),e(y,b3o),e(y,Np),e(Np,Nle),e(Nle,v3o),e(Np,F3o),e(Np,LN),e(LN,T3o),e(Np,M3o),e(y,E3o),e(y,qp),e(qp,qle),e(qle,C3o),e(qp,w3o),e(qp,yN),e(yN,A3o),e(qp,L3o),e(y,y3o),e(y,jp),e(jp,jle),e(jle,x3o),e(jp,$3o),e(jp,xN),e(xN,k3o),e(jp,S3o),e(y,R3o),e(y,Dp),e(Dp,Dle),e(Dle,P3o),e(Dp,B3o),e(Dp,$N),e($N,I3o),e(Dp,N3o),e(y,q3o),e(y,Gp),e(Gp,Gle),e(Gle,j3o),e(Gp,D3o),e(Gp,kN),e(kN,G3o),e(Gp,O3o),e(y,V3o),e(y,Op),e(Op,Ole),e(Ole,X3o),e(Op,z3o),e(Op,SN),e(SN,W3o),e(Op,Q3o),e(y,H3o),e(y,Vp),e(Vp,Vle),e(Vle,U3o),e(Vp,J3o),e(Vp,RN),e(RN,Y3o),e(Vp,K3o),e(y,Z3o),e(y,Xp),e(Xp,Xle),e(Xle,ebo),e(Xp,obo),e(Xp,PN),e(PN,rbo),e(Xp,tbo),e(y,abo),e(y,zp),e(zp,zle),e(zle,nbo),e(zp,sbo),e(zp,BN),e(BN,lbo),e(zp,ibo),e(y,dbo),e(y,Wp),e(Wp,Wle),e(Wle,cbo),e(Wp,fbo),e(Wp,IN),e(IN,mbo),e(Wp,gbo),e(y,hbo),e(y,Qp),e(Qp,Qle),e(Qle,pbo),e(Qp,_bo),e(Qp,NN),e(NN,ubo),e(Qp,bbo),e(y,vbo),e(y,Hp),e(Hp,Hle),e(Hle,Fbo),e(Hp,Tbo),e(Hp,qN),e(qN,Mbo),e(Hp,Ebo),e(y,Cbo),e(y,Bs),e(Bs,Ule),e(Ule,wbo),e(Bs,Abo),e(Bs,jN),e(jN,Lbo),e(Bs,ybo),e(Bs,DN),e(DN,xbo),e(Bs,$bo),e(y,kbo),e(y,Up),e(Up,Jle),e(Jle,Sbo),e(Up,Rbo),e(Up,GN),e(GN,Pbo),e(Up,Bbo),e(y,Ibo),e(y,Jp),e(Jp,Yle),e(Yle,Nbo),e(Jp,qbo),e(Jp,ON),e(ON,jbo),e(Jp,Dbo),e(y,Gbo),e(y,Yp),e(Yp,Kle),e(Kle,Obo),e(Yp,Vbo),e(Yp,VN),e(VN,Xbo),e(Yp,zbo),e(y,Wbo),e(y,Kp),e(Kp,Zle),e(Zle,Qbo),e(Kp,Hbo),e(Kp,XN),e(XN,Ubo),e(Kp,Jbo),e(y,Ybo),e(y,Zp),e(Zp,eie),e(eie,Kbo),e(Zp,Zbo),e(Zp,zN),e(zN,e2o),e(Zp,o2o),e(y,r2o),e(y,e_),e(e_,oie),e(oie,t2o),e(e_,a2o),e(e_,WN),e(WN,n2o),e(e_,s2o),e(y,l2o),e(y,o_),e(o_,rie),e(rie,i2o),e(o_,d2o),e(o_,QN),e(QN,c2o),e(o_,f2o),e(y,m2o),e(y,r_),e(r_,tie),e(tie,g2o),e(r_,h2o),e(r_,HN),e(HN,p2o),e(r_,_2o),e(y,u2o),e(y,t_),e(t_,aie),e(aie,b2o),e(t_,v2o),e(t_,UN),e(UN,F2o),e(t_,T2o),e(y,M2o),e(y,a_),e(a_,nie),e(nie,E2o),e(a_,C2o),e(a_,JN),e(JN,w2o),e(a_,A2o),e(y,L2o),e(y,n_),e(n_,sie),e(sie,y2o),e(n_,x2o),e(n_,YN),e(YN,$2o),e(n_,k2o),e(y,S2o),e(y,s_),e(s_,lie),e(lie,R2o),e(s_,P2o),e(s_,KN),e(KN,B2o),e(s_,I2o),e(y,N2o),e(y,l_),e(l_,iie),e(iie,q2o),e(l_,j2o),e(l_,ZN),e(ZN,D2o),e(l_,G2o),e(y,O2o),e(y,i_),e(i_,die),e(die,V2o),e(i_,X2o),e(i_,eq),e(eq,z2o),e(i_,W2o),e(y,Q2o),e(y,d_),e(d_,cie),e(cie,H2o),e(d_,U2o),e(d_,oq),e(oq,J2o),e(d_,Y2o),e(y,K2o),e(y,c_),e(c_,fie),e(fie,Z2o),e(c_,evo),e(c_,rq),e(rq,ovo),e(c_,rvo),e(y,tvo),e(y,f_),e(f_,mie),e(mie,avo),e(f_,nvo),e(f_,tq),e(tq,svo),e(f_,lvo),e(y,ivo),e(y,m_),e(m_,gie),e(gie,dvo),e(m_,cvo),e(m_,aq),e(aq,fvo),e(m_,mvo),e(y,gvo),e(y,g_),e(g_,hie),e(hie,hvo),e(g_,pvo),e(g_,nq),e(nq,_vo),e(g_,uvo),e(y,bvo),e(y,h_),e(h_,pie),e(pie,vvo),e(h_,Fvo),e(h_,sq),e(sq,Tvo),e(h_,Mvo),e(y,Evo),e(y,p_),e(p_,_ie),e(_ie,Cvo),e(p_,wvo),e(p_,lq),e(lq,Avo),e(p_,Lvo),e(y,yvo),e(y,__),e(__,uie),e(uie,xvo),e(__,$vo),e(__,iq),e(iq,kvo),e(__,Svo),e(y,Rvo),e(y,u_),e(u_,bie),e(bie,Pvo),e(u_,Bvo),e(u_,dq),e(dq,Ivo),e(u_,Nvo),e(y,qvo),e(y,b_),e(b_,vie),e(vie,jvo),e(b_,Dvo),e(b_,cq),e(cq,Gvo),e(b_,Ovo),e(y,Vvo),e(y,v_),e(v_,Fie),e(Fie,Xvo),e(v_,zvo),e(v_,fq),e(fq,Wvo),e(v_,Qvo),e(y,Hvo),e(y,F_),e(F_,Tie),e(Tie,Uvo),e(F_,Jvo),e(F_,mq),e(mq,Yvo),e(F_,Kvo),e(y,Zvo),e(y,T_),e(T_,Mie),e(Mie,eFo),e(T_,oFo),e(T_,gq),e(gq,rFo),e(T_,tFo),e(y,aFo),e(y,M_),e(M_,Eie),e(Eie,nFo),e(M_,sFo),e(M_,hq),e(hq,lFo),e(M_,iFo),e(y,dFo),e(y,E_),e(E_,Cie),e(Cie,cFo),e(E_,fFo),e(E_,pq),e(pq,mFo),e(E_,gFo),e(y,hFo),e(y,C_),e(C_,wie),e(wie,pFo),e(C_,_Fo),e(C_,_q),e(_q,uFo),e(C_,bFo),e(y,vFo),e(y,w_),e(w_,Aie),e(Aie,FFo),e(w_,TFo),e(w_,uq),e(uq,MFo),e(w_,EFo),e(y,CFo),e(y,A_),e(A_,Lie),e(Lie,wFo),e(A_,AFo),e(A_,bq),e(bq,LFo),e(A_,yFo),e(y,xFo),e(y,L_),e(L_,yie),e(yie,$Fo),e(L_,kFo),e(L_,vq),e(vq,SFo),e(L_,RFo),e(y,PFo),e(y,y_),e(y_,xie),e(xie,BFo),e(y_,IFo),e(y_,Fq),e(Fq,NFo),e(y_,qFo),e(y,jFo),e(y,x_),e(x_,$ie),e($ie,DFo),e(x_,GFo),e(x_,Tq),e(Tq,OFo),e(x_,VFo),e(y,XFo),e(y,$_),e($_,kie),e(kie,zFo),e($_,WFo),e($_,Mq),e(Mq,QFo),e($_,HFo),e(y,UFo),e(y,k_),e(k_,Sie),e(Sie,JFo),e(k_,YFo),e(k_,Eq),e(Eq,KFo),e(k_,ZFo),e(y,eTo),e(y,S_),e(S_,Rie),e(Rie,oTo),e(S_,rTo),e(S_,Cq),e(Cq,tTo),e(S_,aTo),e(y,nTo),e(y,R_),e(R_,Pie),e(Pie,sTo),e(R_,lTo),e(R_,wq),e(wq,iTo),e(R_,dTo),e(y,cTo),e(y,P_),e(P_,Bie),e(Bie,fTo),e(P_,mTo),e(P_,Aq),e(Aq,gTo),e(P_,hTo),e(y,pTo),e(y,B_),e(B_,Iie),e(Iie,_To),e(B_,uTo),e(B_,Lq),e(Lq,bTo),e(B_,vTo),e(y,FTo),e(y,I_),e(I_,Nie),e(Nie,TTo),e(I_,MTo),e(I_,yq),e(yq,ETo),e(I_,CTo),e(y,wTo),e(y,N_),e(N_,qie),e(qie,ATo),e(N_,LTo),e(N_,xq),e(xq,yTo),e(N_,xTo),e(y,$To),e(y,q_),e(q_,jie),e(jie,kTo),e(q_,STo),e(q_,$q),e($q,RTo),e(q_,PTo),e(y,BTo),e(y,j_),e(j_,Die),e(Die,ITo),e(j_,NTo),e(j_,kq),e(kq,qTo),e(j_,jTo),e(y,DTo),e(y,D_),e(D_,Gie),e(Gie,GTo),e(D_,OTo),e(D_,Sq),e(Sq,VTo),e(D_,XTo),e(y,zTo),e(y,G_),e(G_,Oie),e(Oie,WTo),e(G_,QTo),e(G_,Rq),e(Rq,HTo),e(G_,UTo),e(y,JTo),e(y,O_),e(O_,Vie),e(Vie,YTo),e(O_,KTo),e(O_,Pq),e(Pq,ZTo),e(O_,e7o),e(y,o7o),e(y,V_),e(V_,Xie),e(Xie,r7o),e(V_,t7o),e(V_,Bq),e(Bq,a7o),e(V_,n7o),e(y,s7o),e(y,X_),e(X_,zie),e(zie,l7o),e(X_,i7o),e(X_,Iq),e(Iq,d7o),e(X_,c7o),e(y,f7o),e(y,z_),e(z_,Wie),e(Wie,m7o),e(z_,g7o),e(z_,Nq),e(Nq,h7o),e(z_,p7o),e(y,_7o),e(y,W_),e(W_,Qie),e(Qie,u7o),e(W_,b7o),e(W_,qq),e(qq,v7o),e(W_,F7o),e(y,T7o),e(y,Q_),e(Q_,Hie),e(Hie,M7o),e(Q_,E7o),e(Q_,jq),e(jq,C7o),e(Q_,w7o),e(y,A7o),e(y,H_),e(H_,Uie),e(Uie,L7o),e(H_,y7o),e(H_,Dq),e(Dq,x7o),e(H_,$7o),e(y,k7o),e(y,U_),e(U_,Jie),e(Jie,S7o),e(U_,R7o),e(U_,Gq),e(Gq,P7o),e(U_,B7o),e(y,I7o),e(y,J_),e(J_,Yie),e(Yie,N7o),e(J_,q7o),e(J_,Oq),e(Oq,j7o),e(J_,D7o),e(y,G7o),e(y,Y_),e(Y_,Kie),e(Kie,O7o),e(Y_,V7o),e(Y_,Vq),e(Vq,X7o),e(Y_,z7o),e(y,W7o),e(y,K_),e(K_,Zie),e(Zie,Q7o),e(K_,H7o),e(K_,Xq),e(Xq,U7o),e(K_,J7o),e(y,Y7o),e(y,Z_),e(Z_,ede),e(ede,K7o),e(Z_,Z7o),e(Z_,zq),e(zq,eMo),e(Z_,oMo),e(y,rMo),e(y,eu),e(eu,ode),e(ode,tMo),e(eu,aMo),e(eu,Wq),e(Wq,nMo),e(eu,sMo),e(y,lMo),e(y,ou),e(ou,rde),e(rde,iMo),e(ou,dMo),e(ou,Qq),e(Qq,cMo),e(ou,fMo),e(y,mMo),e(y,ru),e(ru,tde),e(tde,gMo),e(ru,hMo),e(ru,Hq),e(Hq,pMo),e(ru,_Mo),e(y,uMo),e(y,tu),e(tu,ade),e(ade,bMo),e(tu,vMo),e(tu,Uq),e(Uq,FMo),e(tu,TMo),e(y,MMo),e(y,au),e(au,nde),e(nde,EMo),e(au,CMo),e(au,Jq),e(Jq,wMo),e(au,AMo),e(y,LMo),e(y,nu),e(nu,sde),e(sde,yMo),e(nu,xMo),e(nu,Yq),e(Yq,$Mo),e(nu,kMo),e(y,SMo),e(y,su),e(su,lde),e(lde,RMo),e(su,PMo),e(su,Kq),e(Kq,BMo),e(su,IMo),e(y,NMo),e(y,lu),e(lu,ide),e(ide,qMo),e(lu,jMo),e(lu,Zq),e(Zq,DMo),e(lu,GMo),e(y,OMo),e(y,iu),e(iu,dde),e(dde,VMo),e(iu,XMo),e(iu,ej),e(ej,zMo),e(iu,WMo),e(y,QMo),e(y,du),e(du,cde),e(cde,HMo),e(du,UMo),e(du,oj),e(oj,JMo),e(du,YMo),e(y,KMo),e(y,cu),e(cu,fde),e(fde,ZMo),e(cu,e4o),e(cu,rj),e(rj,o4o),e(cu,r4o),e(y,t4o),e(y,fu),e(fu,mde),e(mde,a4o),e(fu,n4o),e(fu,tj),e(tj,s4o),e(fu,l4o),e(y,i4o),e(y,mu),e(mu,gde),e(gde,d4o),e(mu,c4o),e(mu,aj),e(aj,f4o),e(mu,m4o),e(Je,g4o),e(Je,gu),e(gu,h4o),e(gu,hde),e(hde,p4o),e(gu,_4o),e(gu,pde),e(pde,u4o),e(Je,b4o),M(hu,Je,null),b(f,Rje,u),b(f,$i,u),e($i,pu),e(pu,_de),M(ML,_de,null),e($i,v4o),e($i,ude),e(ude,F4o),b(f,Pje,u),b(f,xo,u),M(EL,xo,null),e(xo,T4o),e(xo,ki),e(ki,M4o),e(ki,nj),e(nj,E4o),e(ki,C4o),e(ki,sj),e(sj,w4o),e(ki,A4o),e(xo,L4o),e(xo,CL),e(CL,y4o),e(CL,bde),e(bde,x4o),e(CL,$4o),e(xo,k4o),e(xo,at),M(wL,at,null),e(at,S4o),e(at,vde),e(vde,R4o),e(at,P4o),e(at,Si),e(Si,B4o),e(Si,Fde),e(Fde,I4o),e(Si,N4o),e(Si,lj),e(lj,q4o),e(Si,j4o),e(at,D4o),M(_u,at,null),e(xo,G4o),e(xo,Ye),M(AL,Ye,null),e(Ye,O4o),e(Ye,Tde),e(Tde,V4o),e(Ye,X4o),e(Ye,xa),e(xa,z4o),e(xa,Mde),e(Mde,W4o),e(xa,Q4o),e(xa,Ede),e(Ede,H4o),e(xa,U4o),e(xa,Cde),e(Cde,J4o),e(xa,Y4o),e(Ye,K4o),e(Ye,G),e(G,uu),e(uu,wde),e(wde,Z4o),e(uu,eEo),e(uu,ij),e(ij,oEo),e(uu,rEo),e(G,tEo),e(G,bu),e(bu,Ade),e(Ade,aEo),e(bu,nEo),e(bu,dj),e(dj,sEo),e(bu,lEo),e(G,iEo),e(G,vu),e(vu,Lde),e(Lde,dEo),e(vu,cEo),e(vu,cj),e(cj,fEo),e(vu,mEo),e(G,gEo),e(G,Fu),e(Fu,yde),e(yde,hEo),e(Fu,pEo),e(Fu,fj),e(fj,_Eo),e(Fu,uEo),e(G,bEo),e(G,Tu),e(Tu,xde),e(xde,vEo),e(Tu,FEo),e(Tu,mj),e(mj,TEo),e(Tu,MEo),e(G,EEo),e(G,Mu),e(Mu,$de),e($de,CEo),e(Mu,wEo),e(Mu,gj),e(gj,AEo),e(Mu,LEo),e(G,yEo),e(G,Eu),e(Eu,kde),e(kde,xEo),e(Eu,$Eo),e(Eu,hj),e(hj,kEo),e(Eu,SEo),e(G,REo),e(G,Cu),e(Cu,Sde),e(Sde,PEo),e(Cu,BEo),e(Cu,pj),e(pj,IEo),e(Cu,NEo),e(G,qEo),e(G,wu),e(wu,Rde),e(Rde,jEo),e(wu,DEo),e(wu,_j),e(_j,GEo),e(wu,OEo),e(G,VEo),e(G,Au),e(Au,Pde),e(Pde,XEo),e(Au,zEo),e(Au,uj),e(uj,WEo),e(Au,QEo),e(G,HEo),e(G,Lu),e(Lu,Bde),e(Bde,UEo),e(Lu,JEo),e(Lu,bj),e(bj,YEo),e(Lu,KEo),e(G,ZEo),e(G,yu),e(yu,Ide),e(Ide,eCo),e(yu,oCo),e(yu,vj),e(vj,rCo),e(yu,tCo),e(G,aCo),e(G,xu),e(xu,Nde),e(Nde,nCo),e(xu,sCo),e(xu,Fj),e(Fj,lCo),e(xu,iCo),e(G,dCo),e(G,$u),e($u,qde),e(qde,cCo),e($u,fCo),e($u,Tj),e(Tj,mCo),e($u,gCo),e(G,hCo),e(G,ku),e(ku,jde),e(jde,pCo),e(ku,_Co),e(ku,Mj),e(Mj,uCo),e(ku,bCo),e(G,vCo),e(G,Su),e(Su,Dde),e(Dde,FCo),e(Su,TCo),e(Su,Ej),e(Ej,MCo),e(Su,ECo),e(G,CCo),e(G,Ru),e(Ru,Gde),e(Gde,wCo),e(Ru,ACo),e(Ru,Cj),e(Cj,LCo),e(Ru,yCo),e(G,xCo),e(G,Pu),e(Pu,Ode),e(Ode,$Co),e(Pu,kCo),e(Pu,wj),e(wj,SCo),e(Pu,RCo),e(G,PCo),e(G,Bu),e(Bu,Vde),e(Vde,BCo),e(Bu,ICo),e(Bu,Aj),e(Aj,NCo),e(Bu,qCo),e(G,jCo),e(G,Iu),e(Iu,Xde),e(Xde,DCo),e(Iu,GCo),e(Iu,Lj),e(Lj,OCo),e(Iu,VCo),e(G,XCo),e(G,Nu),e(Nu,zde),e(zde,zCo),e(Nu,WCo),e(Nu,yj),e(yj,QCo),e(Nu,HCo),e(G,UCo),e(G,qu),e(qu,Wde),e(Wde,JCo),e(qu,YCo),e(qu,xj),e(xj,KCo),e(qu,ZCo),e(G,e5o),e(G,ju),e(ju,Qde),e(Qde,o5o),e(ju,r5o),e(ju,$j),e($j,t5o),e(ju,a5o),e(G,n5o),e(G,Du),e(Du,Hde),e(Hde,s5o),e(Du,l5o),e(Du,kj),e(kj,i5o),e(Du,d5o),e(G,c5o),e(G,Gu),e(Gu,Ude),e(Ude,f5o),e(Gu,m5o),e(Gu,Sj),e(Sj,g5o),e(Gu,h5o),e(G,p5o),e(G,Ou),e(Ou,Jde),e(Jde,_5o),e(Ou,u5o),e(Ou,Rj),e(Rj,b5o),e(Ou,v5o),e(G,F5o),e(G,Vu),e(Vu,Yde),e(Yde,T5o),e(Vu,M5o),e(Vu,Pj),e(Pj,E5o),e(Vu,C5o),e(G,w5o),e(G,Xu),e(Xu,Kde),e(Kde,A5o),e(Xu,L5o),e(Xu,Bj),e(Bj,y5o),e(Xu,x5o),e(G,$5o),e(G,zu),e(zu,Zde),e(Zde,k5o),e(zu,S5o),e(zu,Ij),e(Ij,R5o),e(zu,P5o),e(G,B5o),e(G,Wu),e(Wu,ece),e(ece,I5o),e(Wu,N5o),e(Wu,Nj),e(Nj,q5o),e(Wu,j5o),e(G,D5o),e(G,Qu),e(Qu,oce),e(oce,G5o),e(Qu,O5o),e(Qu,qj),e(qj,V5o),e(Qu,X5o),e(G,z5o),e(G,Hu),e(Hu,rce),e(rce,W5o),e(Hu,Q5o),e(Hu,jj),e(jj,H5o),e(Hu,U5o),e(G,J5o),e(G,Uu),e(Uu,tce),e(tce,Y5o),e(Uu,K5o),e(Uu,Dj),e(Dj,Z5o),e(Uu,e0o),e(G,o0o),e(G,Ju),e(Ju,ace),e(ace,r0o),e(Ju,t0o),e(Ju,Gj),e(Gj,a0o),e(Ju,n0o),e(G,s0o),e(G,Yu),e(Yu,nce),e(nce,l0o),e(Yu,i0o),e(Yu,Oj),e(Oj,d0o),e(Yu,c0o),e(G,f0o),e(G,Ku),e(Ku,sce),e(sce,m0o),e(Ku,g0o),e(Ku,Vj),e(Vj,h0o),e(Ku,p0o),e(G,_0o),e(G,Zu),e(Zu,lce),e(lce,u0o),e(Zu,b0o),e(Zu,Xj),e(Xj,v0o),e(Zu,F0o),e(G,T0o),e(G,e1),e(e1,ice),e(ice,M0o),e(e1,E0o),e(e1,zj),e(zj,C0o),e(e1,w0o),e(G,A0o),e(G,o1),e(o1,dce),e(dce,L0o),e(o1,y0o),e(o1,Wj),e(Wj,x0o),e(o1,$0o),e(G,k0o),e(G,r1),e(r1,cce),e(cce,S0o),e(r1,R0o),e(r1,Qj),e(Qj,P0o),e(r1,B0o),e(G,I0o),e(G,t1),e(t1,fce),e(fce,N0o),e(t1,q0o),e(t1,Hj),e(Hj,j0o),e(t1,D0o),e(G,G0o),e(G,a1),e(a1,mce),e(mce,O0o),e(a1,V0o),e(a1,Uj),e(Uj,X0o),e(a1,z0o),e(Ye,W0o),e(Ye,n1),e(n1,Q0o),e(n1,gce),e(gce,H0o),e(n1,U0o),e(n1,hce),e(hce,J0o),e(Ye,Y0o),M(s1,Ye,null),b(f,Bje,u),b(f,Ri,u),e(Ri,l1),e(l1,pce),M(LL,pce,null),e(Ri,K0o),e(Ri,_ce),e(_ce,Z0o),b(f,Ije,u),b(f,$o,u),M(yL,$o,null),e($o,ewo),e($o,Pi),e(Pi,owo),e(Pi,Jj),e(Jj,rwo),e(Pi,two),e(Pi,Yj),e(Yj,awo),e(Pi,nwo),e($o,swo),e($o,xL),e(xL,lwo),e(xL,uce),e(uce,iwo),e(xL,dwo),e($o,cwo),e($o,nt),M($L,nt,null),e(nt,fwo),e(nt,bce),e(bce,mwo),e(nt,gwo),e(nt,Bi),e(Bi,hwo),e(Bi,vce),e(vce,pwo),e(Bi,_wo),e(Bi,Kj),e(Kj,uwo),e(Bi,bwo),e(nt,vwo),M(i1,nt,null),e($o,Fwo),e($o,Ke),M(kL,Ke,null),e(Ke,Two),e(Ke,Fce),e(Fce,Mwo),e(Ke,Ewo),e(Ke,$a),e($a,Cwo),e($a,Tce),e(Tce,wwo),e($a,Awo),e($a,Mce),e(Mce,Lwo),e($a,ywo),e($a,Ece),e(Ece,xwo),e($a,$wo),e(Ke,kwo),e(Ke,z),e(z,d1),e(d1,Cce),e(Cce,Swo),e(d1,Rwo),e(d1,Zj),e(Zj,Pwo),e(d1,Bwo),e(z,Iwo),e(z,c1),e(c1,wce),e(wce,Nwo),e(c1,qwo),e(c1,eD),e(eD,jwo),e(c1,Dwo),e(z,Gwo),e(z,f1),e(f1,Ace),e(Ace,Owo),e(f1,Vwo),e(f1,oD),e(oD,Xwo),e(f1,zwo),e(z,Wwo),e(z,m1),e(m1,Lce),e(Lce,Qwo),e(m1,Hwo),e(m1,rD),e(rD,Uwo),e(m1,Jwo),e(z,Ywo),e(z,g1),e(g1,yce),e(yce,Kwo),e(g1,Zwo),e(g1,tD),e(tD,eAo),e(g1,oAo),e(z,rAo),e(z,h1),e(h1,xce),e(xce,tAo),e(h1,aAo),e(h1,aD),e(aD,nAo),e(h1,sAo),e(z,lAo),e(z,p1),e(p1,$ce),e($ce,iAo),e(p1,dAo),e(p1,nD),e(nD,cAo),e(p1,fAo),e(z,mAo),e(z,_1),e(_1,kce),e(kce,gAo),e(_1,hAo),e(_1,sD),e(sD,pAo),e(_1,_Ao),e(z,uAo),e(z,u1),e(u1,Sce),e(Sce,bAo),e(u1,vAo),e(u1,lD),e(lD,FAo),e(u1,TAo),e(z,MAo),e(z,b1),e(b1,Rce),e(Rce,EAo),e(b1,CAo),e(b1,iD),e(iD,wAo),e(b1,AAo),e(z,LAo),e(z,v1),e(v1,Pce),e(Pce,yAo),e(v1,xAo),e(v1,dD),e(dD,$Ao),e(v1,kAo),e(z,SAo),e(z,F1),e(F1,Bce),e(Bce,RAo),e(F1,PAo),e(F1,cD),e(cD,BAo),e(F1,IAo),e(z,NAo),e(z,T1),e(T1,Ice),e(Ice,qAo),e(T1,jAo),e(T1,fD),e(fD,DAo),e(T1,GAo),e(z,OAo),e(z,M1),e(M1,Nce),e(Nce,VAo),e(M1,XAo),e(M1,mD),e(mD,zAo),e(M1,WAo),e(z,QAo),e(z,E1),e(E1,qce),e(qce,HAo),e(E1,UAo),e(E1,gD),e(gD,JAo),e(E1,YAo),e(z,KAo),e(z,C1),e(C1,jce),e(jce,ZAo),e(C1,e6o),e(C1,hD),e(hD,o6o),e(C1,r6o),e(z,t6o),e(z,w1),e(w1,Dce),e(Dce,a6o),e(w1,n6o),e(w1,pD),e(pD,s6o),e(w1,l6o),e(z,i6o),e(z,A1),e(A1,Gce),e(Gce,d6o),e(A1,c6o),e(A1,_D),e(_D,f6o),e(A1,m6o),e(z,g6o),e(z,L1),e(L1,Oce),e(Oce,h6o),e(L1,p6o),e(L1,uD),e(uD,_6o),e(L1,u6o),e(z,b6o),e(z,y1),e(y1,Vce),e(Vce,v6o),e(y1,F6o),e(y1,bD),e(bD,T6o),e(y1,M6o),e(z,E6o),e(z,x1),e(x1,Xce),e(Xce,C6o),e(x1,w6o),e(x1,vD),e(vD,A6o),e(x1,L6o),e(z,y6o),e(z,$1),e($1,zce),e(zce,x6o),e($1,$6o),e($1,FD),e(FD,k6o),e($1,S6o),e(z,R6o),e(z,k1),e(k1,Wce),e(Wce,P6o),e(k1,B6o),e(k1,TD),e(TD,I6o),e(k1,N6o),e(z,q6o),e(z,S1),e(S1,Qce),e(Qce,j6o),e(S1,D6o),e(S1,MD),e(MD,G6o),e(S1,O6o),e(z,V6o),e(z,R1),e(R1,Hce),e(Hce,X6o),e(R1,z6o),e(R1,ED),e(ED,W6o),e(R1,Q6o),e(z,H6o),e(z,P1),e(P1,Uce),e(Uce,U6o),e(P1,J6o),e(P1,CD),e(CD,Y6o),e(P1,K6o),e(z,Z6o),e(z,B1),e(B1,Jce),e(Jce,eLo),e(B1,oLo),e(B1,wD),e(wD,rLo),e(B1,tLo),e(z,aLo),e(z,I1),e(I1,Yce),e(Yce,nLo),e(I1,sLo),e(I1,AD),e(AD,lLo),e(I1,iLo),e(z,dLo),e(z,N1),e(N1,Kce),e(Kce,cLo),e(N1,fLo),e(N1,LD),e(LD,mLo),e(N1,gLo),e(z,hLo),e(z,q1),e(q1,Zce),e(Zce,pLo),e(q1,_Lo),e(q1,yD),e(yD,uLo),e(q1,bLo),e(z,vLo),e(z,j1),e(j1,efe),e(efe,FLo),e(j1,TLo),e(j1,xD),e(xD,MLo),e(j1,ELo),e(z,CLo),e(z,D1),e(D1,ofe),e(ofe,wLo),e(D1,ALo),e(D1,$D),e($D,LLo),e(D1,yLo),e(z,xLo),e(z,G1),e(G1,rfe),e(rfe,$Lo),e(G1,kLo),e(G1,kD),e(kD,SLo),e(G1,RLo),e(z,PLo),e(z,O1),e(O1,tfe),e(tfe,BLo),e(O1,ILo),e(O1,SD),e(SD,NLo),e(O1,qLo),e(z,jLo),e(z,V1),e(V1,afe),e(afe,DLo),e(V1,GLo),e(V1,RD),e(RD,OLo),e(V1,VLo),e(z,XLo),e(z,X1),e(X1,nfe),e(nfe,zLo),e(X1,WLo),e(X1,PD),e(PD,QLo),e(X1,HLo),e(z,ULo),e(z,z1),e(z1,sfe),e(sfe,JLo),e(z1,YLo),e(z1,BD),e(BD,KLo),e(z1,ZLo),e(Ke,eyo),e(Ke,W1),e(W1,oyo),e(W1,lfe),e(lfe,ryo),e(W1,tyo),e(W1,ife),e(ife,ayo),e(Ke,nyo),M(Q1,Ke,null),b(f,Nje,u),b(f,Ii,u),e(Ii,H1),e(H1,dfe),M(SL,dfe,null),e(Ii,syo),e(Ii,cfe),e(cfe,lyo),b(f,qje,u),b(f,ko,u),M(RL,ko,null),e(ko,iyo),e(ko,Ni),e(Ni,dyo),e(Ni,ID),e(ID,cyo),e(Ni,fyo),e(Ni,ND),e(ND,myo),e(Ni,gyo),e(ko,hyo),e(ko,PL),e(PL,pyo),e(PL,ffe),e(ffe,_yo),e(PL,uyo),e(ko,byo),e(ko,st),M(BL,st,null),e(st,vyo),e(st,mfe),e(mfe,Fyo),e(st,Tyo),e(st,qi),e(qi,Myo),e(qi,gfe),e(gfe,Eyo),e(qi,Cyo),e(qi,qD),e(qD,wyo),e(qi,Ayo),e(st,Lyo),M(U1,st,null),e(ko,yyo),e(ko,Ze),M(IL,Ze,null),e(Ze,xyo),e(Ze,hfe),e(hfe,$yo),e(Ze,kyo),e(Ze,ka),e(ka,Syo),e(ka,pfe),e(pfe,Ryo),e(ka,Pyo),e(ka,_fe),e(_fe,Byo),e(ka,Iyo),e(ka,ufe),e(ufe,Nyo),e(ka,qyo),e(Ze,jyo),e(Ze,W),e(W,J1),e(J1,bfe),e(bfe,Dyo),e(J1,Gyo),e(J1,jD),e(jD,Oyo),e(J1,Vyo),e(W,Xyo),e(W,Y1),e(Y1,vfe),e(vfe,zyo),e(Y1,Wyo),e(Y1,DD),e(DD,Qyo),e(Y1,Hyo),e(W,Uyo),e(W,K1),e(K1,Ffe),e(Ffe,Jyo),e(K1,Yyo),e(K1,GD),e(GD,Kyo),e(K1,Zyo),e(W,e8o),e(W,Z1),e(Z1,Tfe),e(Tfe,o8o),e(Z1,r8o),e(Z1,OD),e(OD,t8o),e(Z1,a8o),e(W,n8o),e(W,e3),e(e3,Mfe),e(Mfe,s8o),e(e3,l8o),e(e3,VD),e(VD,i8o),e(e3,d8o),e(W,c8o),e(W,o3),e(o3,Efe),e(Efe,f8o),e(o3,m8o),e(o3,XD),e(XD,g8o),e(o3,h8o),e(W,p8o),e(W,r3),e(r3,Cfe),e(Cfe,_8o),e(r3,u8o),e(r3,zD),e(zD,b8o),e(r3,v8o),e(W,F8o),e(W,t3),e(t3,wfe),e(wfe,T8o),e(t3,M8o),e(t3,WD),e(WD,E8o),e(t3,C8o),e(W,w8o),e(W,a3),e(a3,Afe),e(Afe,A8o),e(a3,L8o),e(a3,QD),e(QD,y8o),e(a3,x8o),e(W,$8o),e(W,n3),e(n3,Lfe),e(Lfe,k8o),e(n3,S8o),e(n3,HD),e(HD,R8o),e(n3,P8o),e(W,B8o),e(W,s3),e(s3,yfe),e(yfe,I8o),e(s3,N8o),e(s3,UD),e(UD,q8o),e(s3,j8o),e(W,D8o),e(W,l3),e(l3,xfe),e(xfe,G8o),e(l3,O8o),e(l3,JD),e(JD,V8o),e(l3,X8o),e(W,z8o),e(W,i3),e(i3,$fe),e($fe,W8o),e(i3,Q8o),e(i3,YD),e(YD,H8o),e(i3,U8o),e(W,J8o),e(W,d3),e(d3,kfe),e(kfe,Y8o),e(d3,K8o),e(d3,KD),e(KD,Z8o),e(d3,e9o),e(W,o9o),e(W,c3),e(c3,Sfe),e(Sfe,r9o),e(c3,t9o),e(c3,ZD),e(ZD,a9o),e(c3,n9o),e(W,s9o),e(W,f3),e(f3,Rfe),e(Rfe,l9o),e(f3,i9o),e(f3,eG),e(eG,d9o),e(f3,c9o),e(W,f9o),e(W,m3),e(m3,Pfe),e(Pfe,m9o),e(m3,g9o),e(m3,oG),e(oG,h9o),e(m3,p9o),e(W,_9o),e(W,g3),e(g3,Bfe),e(Bfe,u9o),e(g3,b9o),e(g3,rG),e(rG,v9o),e(g3,F9o),e(W,T9o),e(W,h3),e(h3,Ife),e(Ife,M9o),e(h3,E9o),e(h3,tG),e(tG,C9o),e(h3,w9o),e(W,A9o),e(W,p3),e(p3,Nfe),e(Nfe,L9o),e(p3,y9o),e(p3,aG),e(aG,x9o),e(p3,$9o),e(W,k9o),e(W,_3),e(_3,qfe),e(qfe,S9o),e(_3,R9o),e(_3,nG),e(nG,P9o),e(_3,B9o),e(W,I9o),e(W,u3),e(u3,jfe),e(jfe,N9o),e(u3,q9o),e(u3,sG),e(sG,j9o),e(u3,D9o),e(W,G9o),e(W,b3),e(b3,Dfe),e(Dfe,O9o),e(b3,V9o),e(b3,lG),e(lG,X9o),e(b3,z9o),e(W,W9o),e(W,v3),e(v3,Gfe),e(Gfe,Q9o),e(v3,H9o),e(v3,iG),e(iG,U9o),e(v3,J9o),e(W,Y9o),e(W,F3),e(F3,Ofe),e(Ofe,K9o),e(F3,Z9o),e(F3,dG),e(dG,exo),e(F3,oxo),e(W,rxo),e(W,T3),e(T3,Vfe),e(Vfe,txo),e(T3,axo),e(T3,cG),e(cG,nxo),e(T3,sxo),e(W,lxo),e(W,M3),e(M3,Xfe),e(Xfe,ixo),e(M3,dxo),e(M3,fG),e(fG,cxo),e(M3,fxo),e(W,mxo),e(W,E3),e(E3,zfe),e(zfe,gxo),e(E3,hxo),e(E3,mG),e(mG,pxo),e(E3,_xo),e(W,uxo),e(W,C3),e(C3,Wfe),e(Wfe,bxo),e(C3,vxo),e(C3,gG),e(gG,Fxo),e(C3,Txo),e(W,Mxo),e(W,w3),e(w3,Qfe),e(Qfe,Exo),e(w3,Cxo),e(w3,hG),e(hG,wxo),e(w3,Axo),e(W,Lxo),e(W,A3),e(A3,Hfe),e(Hfe,yxo),e(A3,xxo),e(A3,pG),e(pG,$xo),e(A3,kxo),e(W,Sxo),e(W,L3),e(L3,Ufe),e(Ufe,Rxo),e(L3,Pxo),e(L3,Jfe),e(Jfe,Bxo),e(L3,Ixo),e(W,Nxo),e(W,y3),e(y3,Yfe),e(Yfe,qxo),e(y3,jxo),e(y3,_G),e(_G,Dxo),e(y3,Gxo),e(W,Oxo),e(W,x3),e(x3,Kfe),e(Kfe,Vxo),e(x3,Xxo),e(x3,uG),e(uG,zxo),e(x3,Wxo),e(W,Qxo),e(W,$3),e($3,Zfe),e(Zfe,Hxo),e($3,Uxo),e($3,bG),e(bG,Jxo),e($3,Yxo),e(W,Kxo),e(W,k3),e(k3,eme),e(eme,Zxo),e(k3,e$o),e(k3,vG),e(vG,o$o),e(k3,r$o),e(Ze,t$o),e(Ze,S3),e(S3,a$o),e(S3,ome),e(ome,n$o),e(S3,s$o),e(S3,rme),e(rme,l$o),e(Ze,i$o),M(R3,Ze,null),b(f,jje,u),b(f,ji,u),e(ji,P3),e(P3,tme),M(NL,tme,null),e(ji,d$o),e(ji,ame),e(ame,c$o),b(f,Dje,u),b(f,So,u),M(qL,So,null),e(So,f$o),e(So,Di),e(Di,m$o),e(Di,FG),e(FG,g$o),e(Di,h$o),e(Di,TG),e(TG,p$o),e(Di,_$o),e(So,u$o),e(So,jL),e(jL,b$o),e(jL,nme),e(nme,v$o),e(jL,F$o),e(So,T$o),e(So,lt),M(DL,lt,null),e(lt,M$o),e(lt,sme),e(sme,E$o),e(lt,C$o),e(lt,Gi),e(Gi,w$o),e(Gi,lme),e(lme,A$o),e(Gi,L$o),e(Gi,MG),e(MG,y$o),e(Gi,x$o),e(lt,$$o),M(B3,lt,null),e(So,k$o),e(So,eo),M(GL,eo,null),e(eo,S$o),e(eo,ime),e(ime,R$o),e(eo,P$o),e(eo,Sa),e(Sa,B$o),e(Sa,dme),e(dme,I$o),e(Sa,N$o),e(Sa,cme),e(cme,q$o),e(Sa,j$o),e(Sa,fme),e(fme,D$o),e(Sa,G$o),e(eo,O$o),e(eo,ue),e(ue,I3),e(I3,mme),e(mme,V$o),e(I3,X$o),e(I3,EG),e(EG,z$o),e(I3,W$o),e(ue,Q$o),e(ue,N3),e(N3,gme),e(gme,H$o),e(N3,U$o),e(N3,CG),e(CG,J$o),e(N3,Y$o),e(ue,K$o),e(ue,q3),e(q3,hme),e(hme,Z$o),e(q3,eko),e(q3,wG),e(wG,oko),e(q3,rko),e(ue,tko),e(ue,j3),e(j3,pme),e(pme,ako),e(j3,nko),e(j3,AG),e(AG,sko),e(j3,lko),e(ue,iko),e(ue,D3),e(D3,_me),e(_me,dko),e(D3,cko),e(D3,LG),e(LG,fko),e(D3,mko),e(ue,gko),e(ue,G3),e(G3,ume),e(ume,hko),e(G3,pko),e(G3,yG),e(yG,_ko),e(G3,uko),e(ue,bko),e(ue,O3),e(O3,bme),e(bme,vko),e(O3,Fko),e(O3,xG),e(xG,Tko),e(O3,Mko),e(ue,Eko),e(ue,V3),e(V3,vme),e(vme,Cko),e(V3,wko),e(V3,$G),e($G,Ako),e(V3,Lko),e(ue,yko),e(ue,X3),e(X3,Fme),e(Fme,xko),e(X3,$ko),e(X3,kG),e(kG,kko),e(X3,Sko),e(ue,Rko),e(ue,z3),e(z3,Tme),e(Tme,Pko),e(z3,Bko),e(z3,SG),e(SG,Iko),e(z3,Nko),e(ue,qko),e(ue,W3),e(W3,Mme),e(Mme,jko),e(W3,Dko),e(W3,RG),e(RG,Gko),e(W3,Oko),e(ue,Vko),e(ue,Q3),e(Q3,Eme),e(Eme,Xko),e(Q3,zko),e(Q3,PG),e(PG,Wko),e(Q3,Qko),e(ue,Hko),e(ue,H3),e(H3,Cme),e(Cme,Uko),e(H3,Jko),e(H3,BG),e(BG,Yko),e(H3,Kko),e(ue,Zko),e(ue,U3),e(U3,wme),e(wme,eSo),e(U3,oSo),e(U3,IG),e(IG,rSo),e(U3,tSo),e(ue,aSo),e(ue,J3),e(J3,Ame),e(Ame,nSo),e(J3,sSo),e(J3,NG),e(NG,lSo),e(J3,iSo),e(ue,dSo),e(ue,Y3),e(Y3,Lme),e(Lme,cSo),e(Y3,fSo),e(Y3,qG),e(qG,mSo),e(Y3,gSo),e(eo,hSo),e(eo,K3),e(K3,pSo),e(K3,yme),e(yme,_So),e(K3,uSo),e(K3,xme),e(xme,bSo),e(eo,vSo),M(Z3,eo,null),b(f,Gje,u),b(f,Oi,u),e(Oi,eb),e(eb,$me),M(OL,$me,null),e(Oi,FSo),e(Oi,kme),e(kme,TSo),b(f,Oje,u),b(f,Ro,u),M(VL,Ro,null),e(Ro,MSo),e(Ro,Vi),e(Vi,ESo),e(Vi,jG),e(jG,CSo),e(Vi,wSo),e(Vi,DG),e(DG,ASo),e(Vi,LSo),e(Ro,ySo),e(Ro,XL),e(XL,xSo),e(XL,Sme),e(Sme,$So),e(XL,kSo),e(Ro,SSo),e(Ro,it),M(zL,it,null),e(it,RSo),e(it,Rme),e(Rme,PSo),e(it,BSo),e(it,Xi),e(Xi,ISo),e(Xi,Pme),e(Pme,NSo),e(Xi,qSo),e(Xi,GG),e(GG,jSo),e(Xi,DSo),e(it,GSo),M(ob,it,null),e(Ro,OSo),e(Ro,oo),M(WL,oo,null),e(oo,VSo),e(oo,Bme),e(Bme,XSo),e(oo,zSo),e(oo,Ra),e(Ra,WSo),e(Ra,Ime),e(Ime,QSo),e(Ra,HSo),e(Ra,Nme),e(Nme,USo),e(Ra,JSo),e(Ra,qme),e(qme,YSo),e(Ra,KSo),e(oo,ZSo),e(oo,N),e(N,rb),e(rb,jme),e(jme,eRo),e(rb,oRo),e(rb,OG),e(OG,rRo),e(rb,tRo),e(N,aRo),e(N,tb),e(tb,Dme),e(Dme,nRo),e(tb,sRo),e(tb,VG),e(VG,lRo),e(tb,iRo),e(N,dRo),e(N,ab),e(ab,Gme),e(Gme,cRo),e(ab,fRo),e(ab,XG),e(XG,mRo),e(ab,gRo),e(N,hRo),e(N,nb),e(nb,Ome),e(Ome,pRo),e(nb,_Ro),e(nb,zG),e(zG,uRo),e(nb,bRo),e(N,vRo),e(N,sb),e(sb,Vme),e(Vme,FRo),e(sb,TRo),e(sb,WG),e(WG,MRo),e(sb,ERo),e(N,CRo),e(N,lb),e(lb,Xme),e(Xme,wRo),e(lb,ARo),e(lb,QG),e(QG,LRo),e(lb,yRo),e(N,xRo),e(N,ib),e(ib,zme),e(zme,$Ro),e(ib,kRo),e(ib,HG),e(HG,SRo),e(ib,RRo),e(N,PRo),e(N,db),e(db,Wme),e(Wme,BRo),e(db,IRo),e(db,UG),e(UG,NRo),e(db,qRo),e(N,jRo),e(N,cb),e(cb,Qme),e(Qme,DRo),e(cb,GRo),e(cb,JG),e(JG,ORo),e(cb,VRo),e(N,XRo),e(N,fb),e(fb,Hme),e(Hme,zRo),e(fb,WRo),e(fb,YG),e(YG,QRo),e(fb,HRo),e(N,URo),e(N,mb),e(mb,Ume),e(Ume,JRo),e(mb,YRo),e(mb,KG),e(KG,KRo),e(mb,ZRo),e(N,ePo),e(N,gb),e(gb,Jme),e(Jme,oPo),e(gb,rPo),e(gb,ZG),e(ZG,tPo),e(gb,aPo),e(N,nPo),e(N,hb),e(hb,Yme),e(Yme,sPo),e(hb,lPo),e(hb,eO),e(eO,iPo),e(hb,dPo),e(N,cPo),e(N,pb),e(pb,Kme),e(Kme,fPo),e(pb,mPo),e(pb,oO),e(oO,gPo),e(pb,hPo),e(N,pPo),e(N,_b),e(_b,Zme),e(Zme,_Po),e(_b,uPo),e(_b,rO),e(rO,bPo),e(_b,vPo),e(N,FPo),e(N,ub),e(ub,ege),e(ege,TPo),e(ub,MPo),e(ub,tO),e(tO,EPo),e(ub,CPo),e(N,wPo),e(N,bb),e(bb,oge),e(oge,APo),e(bb,LPo),e(bb,aO),e(aO,yPo),e(bb,xPo),e(N,$Po),e(N,vb),e(vb,rge),e(rge,kPo),e(vb,SPo),e(vb,nO),e(nO,RPo),e(vb,PPo),e(N,BPo),e(N,Fb),e(Fb,tge),e(tge,IPo),e(Fb,NPo),e(Fb,sO),e(sO,qPo),e(Fb,jPo),e(N,DPo),e(N,Tb),e(Tb,age),e(age,GPo),e(Tb,OPo),e(Tb,lO),e(lO,VPo),e(Tb,XPo),e(N,zPo),e(N,Mb),e(Mb,nge),e(nge,WPo),e(Mb,QPo),e(Mb,iO),e(iO,HPo),e(Mb,UPo),e(N,JPo),e(N,Eb),e(Eb,sge),e(sge,YPo),e(Eb,KPo),e(Eb,dO),e(dO,ZPo),e(Eb,eBo),e(N,oBo),e(N,Cb),e(Cb,lge),e(lge,rBo),e(Cb,tBo),e(Cb,cO),e(cO,aBo),e(Cb,nBo),e(N,sBo),e(N,wb),e(wb,ige),e(ige,lBo),e(wb,iBo),e(wb,fO),e(fO,dBo),e(wb,cBo),e(N,fBo),e(N,Ab),e(Ab,dge),e(dge,mBo),e(Ab,gBo),e(Ab,mO),e(mO,hBo),e(Ab,pBo),e(N,_Bo),e(N,Lb),e(Lb,cge),e(cge,uBo),e(Lb,bBo),e(Lb,gO),e(gO,vBo),e(Lb,FBo),e(N,TBo),e(N,yb),e(yb,fge),e(fge,MBo),e(yb,EBo),e(yb,hO),e(hO,CBo),e(yb,wBo),e(N,ABo),e(N,xb),e(xb,mge),e(mge,LBo),e(xb,yBo),e(xb,pO),e(pO,xBo),e(xb,$Bo),e(N,kBo),e(N,$b),e($b,gge),e(gge,SBo),e($b,RBo),e($b,_O),e(_O,PBo),e($b,BBo),e(N,IBo),e(N,kb),e(kb,hge),e(hge,NBo),e(kb,qBo),e(kb,uO),e(uO,jBo),e(kb,DBo),e(N,GBo),e(N,Sb),e(Sb,pge),e(pge,OBo),e(Sb,VBo),e(Sb,bO),e(bO,XBo),e(Sb,zBo),e(N,WBo),e(N,Rb),e(Rb,_ge),e(_ge,QBo),e(Rb,HBo),e(Rb,vO),e(vO,UBo),e(Rb,JBo),e(N,YBo),e(N,Pb),e(Pb,uge),e(uge,KBo),e(Pb,ZBo),e(Pb,FO),e(FO,eIo),e(Pb,oIo),e(N,rIo),e(N,Bb),e(Bb,bge),e(bge,tIo),e(Bb,aIo),e(Bb,TO),e(TO,nIo),e(Bb,sIo),e(N,lIo),e(N,Ib),e(Ib,vge),e(vge,iIo),e(Ib,dIo),e(Ib,MO),e(MO,cIo),e(Ib,fIo),e(N,mIo),e(N,Nb),e(Nb,Fge),e(Fge,gIo),e(Nb,hIo),e(Nb,EO),e(EO,pIo),e(Nb,_Io),e(N,uIo),e(N,qb),e(qb,Tge),e(Tge,bIo),e(qb,vIo),e(qb,CO),e(CO,FIo),e(qb,TIo),e(N,MIo),e(N,jb),e(jb,Mge),e(Mge,EIo),e(jb,CIo),e(jb,wO),e(wO,wIo),e(jb,AIo),e(N,LIo),e(N,Db),e(Db,Ege),e(Ege,yIo),e(Db,xIo),e(Db,AO),e(AO,$Io),e(Db,kIo),e(N,SIo),e(N,Gb),e(Gb,Cge),e(Cge,RIo),e(Gb,PIo),e(Gb,LO),e(LO,BIo),e(Gb,IIo),e(N,NIo),e(N,Ob),e(Ob,wge),e(wge,qIo),e(Ob,jIo),e(Ob,yO),e(yO,DIo),e(Ob,GIo),e(N,OIo),e(N,Vb),e(Vb,Age),e(Age,VIo),e(Vb,XIo),e(Vb,xO),e(xO,zIo),e(Vb,WIo),e(N,QIo),e(N,Xb),e(Xb,Lge),e(Lge,HIo),e(Xb,UIo),e(Xb,$O),e($O,JIo),e(Xb,YIo),e(N,KIo),e(N,zb),e(zb,yge),e(yge,ZIo),e(zb,eNo),e(zb,kO),e(kO,oNo),e(zb,rNo),e(N,tNo),e(N,Wb),e(Wb,xge),e(xge,aNo),e(Wb,nNo),e(Wb,SO),e(SO,sNo),e(Wb,lNo),e(N,iNo),e(N,Qb),e(Qb,$ge),e($ge,dNo),e(Qb,cNo),e(Qb,RO),e(RO,fNo),e(Qb,mNo),e(N,gNo),e(N,Hb),e(Hb,kge),e(kge,hNo),e(Hb,pNo),e(Hb,PO),e(PO,_No),e(Hb,uNo),e(oo,bNo),e(oo,Ub),e(Ub,vNo),e(Ub,Sge),e(Sge,FNo),e(Ub,TNo),e(Ub,Rge),e(Rge,MNo),e(oo,ENo),M(Jb,oo,null),b(f,Vje,u),b(f,zi,u),e(zi,Yb),e(Yb,Pge),M(QL,Pge,null),e(zi,CNo),e(zi,Bge),e(Bge,wNo),b(f,Xje,u),b(f,Po,u),M(HL,Po,null),e(Po,ANo),e(Po,Wi),e(Wi,LNo),e(Wi,BO),e(BO,yNo),e(Wi,xNo),e(Wi,IO),e(IO,$No),e(Wi,kNo),e(Po,SNo),e(Po,UL),e(UL,RNo),e(UL,Ige),e(Ige,PNo),e(UL,BNo),e(Po,INo),e(Po,dt),M(JL,dt,null),e(dt,NNo),e(dt,Nge),e(Nge,qNo),e(dt,jNo),e(dt,Qi),e(Qi,DNo),e(Qi,qge),e(qge,GNo),e(Qi,ONo),e(Qi,NO),e(NO,VNo),e(Qi,XNo),e(dt,zNo),M(Kb,dt,null),e(Po,WNo),e(Po,ro),M(YL,ro,null),e(ro,QNo),e(ro,jge),e(jge,HNo),e(ro,UNo),e(ro,Pa),e(Pa,JNo),e(Pa,Dge),e(Dge,YNo),e(Pa,KNo),e(Pa,Gge),e(Gge,ZNo),e(Pa,eqo),e(Pa,Oge),e(Oge,oqo),e(Pa,rqo),e(ro,tqo),e(ro,Z),e(Z,Zb),e(Zb,Vge),e(Vge,aqo),e(Zb,nqo),e(Zb,qO),e(qO,sqo),e(Zb,lqo),e(Z,iqo),e(Z,e2),e(e2,Xge),e(Xge,dqo),e(e2,cqo),e(e2,jO),e(jO,fqo),e(e2,mqo),e(Z,gqo),e(Z,o2),e(o2,zge),e(zge,hqo),e(o2,pqo),e(o2,DO),e(DO,_qo),e(o2,uqo),e(Z,bqo),e(Z,r2),e(r2,Wge),e(Wge,vqo),e(r2,Fqo),e(r2,GO),e(GO,Tqo),e(r2,Mqo),e(Z,Eqo),e(Z,t2),e(t2,Qge),e(Qge,Cqo),e(t2,wqo),e(t2,OO),e(OO,Aqo),e(t2,Lqo),e(Z,yqo),e(Z,a2),e(a2,Hge),e(Hge,xqo),e(a2,$qo),e(a2,VO),e(VO,kqo),e(a2,Sqo),e(Z,Rqo),e(Z,n2),e(n2,Uge),e(Uge,Pqo),e(n2,Bqo),e(n2,XO),e(XO,Iqo),e(n2,Nqo),e(Z,qqo),e(Z,s2),e(s2,Jge),e(Jge,jqo),e(s2,Dqo),e(s2,zO),e(zO,Gqo),e(s2,Oqo),e(Z,Vqo),e(Z,l2),e(l2,Yge),e(Yge,Xqo),e(l2,zqo),e(l2,WO),e(WO,Wqo),e(l2,Qqo),e(Z,Hqo),e(Z,i2),e(i2,Kge),e(Kge,Uqo),e(i2,Jqo),e(i2,QO),e(QO,Yqo),e(i2,Kqo),e(Z,Zqo),e(Z,d2),e(d2,Zge),e(Zge,ejo),e(d2,ojo),e(d2,HO),e(HO,rjo),e(d2,tjo),e(Z,ajo),e(Z,c2),e(c2,ehe),e(ehe,njo),e(c2,sjo),e(c2,UO),e(UO,ljo),e(c2,ijo),e(Z,djo),e(Z,f2),e(f2,ohe),e(ohe,cjo),e(f2,fjo),e(f2,JO),e(JO,mjo),e(f2,gjo),e(Z,hjo),e(Z,m2),e(m2,rhe),e(rhe,pjo),e(m2,_jo),e(m2,YO),e(YO,ujo),e(m2,bjo),e(Z,vjo),e(Z,g2),e(g2,the),e(the,Fjo),e(g2,Tjo),e(g2,KO),e(KO,Mjo),e(g2,Ejo),e(Z,Cjo),e(Z,h2),e(h2,ahe),e(ahe,wjo),e(h2,Ajo),e(h2,ZO),e(ZO,Ljo),e(h2,yjo),e(Z,xjo),e(Z,p2),e(p2,nhe),e(nhe,$jo),e(p2,kjo),e(p2,eV),e(eV,Sjo),e(p2,Rjo),e(Z,Pjo),e(Z,_2),e(_2,she),e(she,Bjo),e(_2,Ijo),e(_2,oV),e(oV,Njo),e(_2,qjo),e(Z,jjo),e(Z,u2),e(u2,lhe),e(lhe,Djo),e(u2,Gjo),e(u2,rV),e(rV,Ojo),e(u2,Vjo),e(Z,Xjo),e(Z,b2),e(b2,ihe),e(ihe,zjo),e(b2,Wjo),e(b2,tV),e(tV,Qjo),e(b2,Hjo),e(Z,Ujo),e(Z,v2),e(v2,dhe),e(dhe,Jjo),e(v2,Yjo),e(v2,aV),e(aV,Kjo),e(v2,Zjo),e(Z,eDo),e(Z,F2),e(F2,che),e(che,oDo),e(F2,rDo),e(F2,nV),e(nV,tDo),e(F2,aDo),e(Z,nDo),e(Z,T2),e(T2,fhe),e(fhe,sDo),e(T2,lDo),e(T2,sV),e(sV,iDo),e(T2,dDo),e(Z,cDo),e(Z,M2),e(M2,mhe),e(mhe,fDo),e(M2,mDo),e(M2,lV),e(lV,gDo),e(M2,hDo),e(Z,pDo),e(Z,E2),e(E2,ghe),e(ghe,_Do),e(E2,uDo),e(E2,iV),e(iV,bDo),e(E2,vDo),e(Z,FDo),e(Z,C2),e(C2,hhe),e(hhe,TDo),e(C2,MDo),e(C2,dV),e(dV,EDo),e(C2,CDo),e(Z,wDo),e(Z,w2),e(w2,phe),e(phe,ADo),e(w2,LDo),e(w2,cV),e(cV,yDo),e(w2,xDo),e(Z,$Do),e(Z,A2),e(A2,_he),e(_he,kDo),e(A2,SDo),e(A2,fV),e(fV,RDo),e(A2,PDo),e(Z,BDo),e(Z,L2),e(L2,uhe),e(uhe,IDo),e(L2,NDo),e(L2,mV),e(mV,qDo),e(L2,jDo),e(ro,DDo),e(ro,y2),e(y2,GDo),e(y2,bhe),e(bhe,ODo),e(y2,VDo),e(y2,vhe),e(vhe,XDo),e(ro,zDo),M(x2,ro,null),b(f,zje,u),b(f,Hi,u),e(Hi,$2),e($2,Fhe),M(KL,Fhe,null),e(Hi,WDo),e(Hi,The),e(The,QDo),b(f,Wje,u),b(f,Bo,u),M(ZL,Bo,null),e(Bo,HDo),e(Bo,Ui),e(Ui,UDo),e(Ui,gV),e(gV,JDo),e(Ui,YDo),e(Ui,hV),e(hV,KDo),e(Ui,ZDo),e(Bo,eGo),e(Bo,ey),e(ey,oGo),e(ey,Mhe),e(Mhe,rGo),e(ey,tGo),e(Bo,aGo),e(Bo,ct),M(oy,ct,null),e(ct,nGo),e(ct,Ehe),e(Ehe,sGo),e(ct,lGo),e(ct,Ji),e(Ji,iGo),e(Ji,Che),e(Che,dGo),e(Ji,cGo),e(Ji,pV),e(pV,fGo),e(Ji,mGo),e(ct,gGo),M(k2,ct,null),e(Bo,hGo),e(Bo,to),M(ry,to,null),e(to,pGo),e(to,whe),e(whe,_Go),e(to,uGo),e(to,Ba),e(Ba,bGo),e(Ba,Ahe),e(Ahe,vGo),e(Ba,FGo),e(Ba,Lhe),e(Lhe,TGo),e(Ba,MGo),e(Ba,yhe),e(yhe,EGo),e(Ba,CGo),e(to,wGo),e(to,Yr),e(Yr,S2),e(S2,xhe),e(xhe,AGo),e(S2,LGo),e(S2,_V),e(_V,yGo),e(S2,xGo),e(Yr,$Go),e(Yr,R2),e(R2,$he),e($he,kGo),e(R2,SGo),e(R2,uV),e(uV,RGo),e(R2,PGo),e(Yr,BGo),e(Yr,P2),e(P2,khe),e(khe,IGo),e(P2,NGo),e(P2,bV),e(bV,qGo),e(P2,jGo),e(Yr,DGo),e(Yr,B2),e(B2,She),e(She,GGo),e(B2,OGo),e(B2,vV),e(vV,VGo),e(B2,XGo),e(Yr,zGo),e(Yr,I2),e(I2,Rhe),e(Rhe,WGo),e(I2,QGo),e(I2,FV),e(FV,HGo),e(I2,UGo),e(to,JGo),e(to,N2),e(N2,YGo),e(N2,Phe),e(Phe,KGo),e(N2,ZGo),e(N2,Bhe),e(Bhe,eOo),e(to,oOo),M(q2,to,null),b(f,Qje,u),b(f,Yi,u),e(Yi,j2),e(j2,Ihe),M(ty,Ihe,null),e(Yi,rOo),e(Yi,Nhe),e(Nhe,tOo),b(f,Hje,u),b(f,Io,u),M(ay,Io,null),e(Io,aOo),e(Io,Ki),e(Ki,nOo),e(Ki,TV),e(TV,sOo),e(Ki,lOo),e(Ki,MV),e(MV,iOo),e(Ki,dOo),e(Io,cOo),e(Io,ny),e(ny,fOo),e(ny,qhe),e(qhe,mOo),e(ny,gOo),e(Io,hOo),e(Io,ft),M(sy,ft,null),e(ft,pOo),e(ft,jhe),e(jhe,_Oo),e(ft,uOo),e(ft,Zi),e(Zi,bOo),e(Zi,Dhe),e(Dhe,vOo),e(Zi,FOo),e(Zi,EV),e(EV,TOo),e(Zi,MOo),e(ft,EOo),M(D2,ft,null),e(Io,COo),e(Io,ao),M(ly,ao,null),e(ao,wOo),e(ao,Ghe),e(Ghe,AOo),e(ao,LOo),e(ao,Ia),e(Ia,yOo),e(Ia,Ohe),e(Ohe,xOo),e(Ia,$Oo),e(Ia,Vhe),e(Vhe,kOo),e(Ia,SOo),e(Ia,Xhe),e(Xhe,ROo),e(Ia,POo),e(ao,BOo),e(ao,U),e(U,G2),e(G2,zhe),e(zhe,IOo),e(G2,NOo),e(G2,CV),e(CV,qOo),e(G2,jOo),e(U,DOo),e(U,O2),e(O2,Whe),e(Whe,GOo),e(O2,OOo),e(O2,wV),e(wV,VOo),e(O2,XOo),e(U,zOo),e(U,V2),e(V2,Qhe),e(Qhe,WOo),e(V2,QOo),e(V2,AV),e(AV,HOo),e(V2,UOo),e(U,JOo),e(U,X2),e(X2,Hhe),e(Hhe,YOo),e(X2,KOo),e(X2,LV),e(LV,ZOo),e(X2,eVo),e(U,oVo),e(U,z2),e(z2,Uhe),e(Uhe,rVo),e(z2,tVo),e(z2,yV),e(yV,aVo),e(z2,nVo),e(U,sVo),e(U,W2),e(W2,Jhe),e(Jhe,lVo),e(W2,iVo),e(W2,xV),e(xV,dVo),e(W2,cVo),e(U,fVo),e(U,Q2),e(Q2,Yhe),e(Yhe,mVo),e(Q2,gVo),e(Q2,$V),e($V,hVo),e(Q2,pVo),e(U,_Vo),e(U,H2),e(H2,Khe),e(Khe,uVo),e(H2,bVo),e(H2,kV),e(kV,vVo),e(H2,FVo),e(U,TVo),e(U,U2),e(U2,Zhe),e(Zhe,MVo),e(U2,EVo),e(U2,SV),e(SV,CVo),e(U2,wVo),e(U,AVo),e(U,J2),e(J2,epe),e(epe,LVo),e(J2,yVo),e(J2,RV),e(RV,xVo),e(J2,$Vo),e(U,kVo),e(U,Y2),e(Y2,ope),e(ope,SVo),e(Y2,RVo),e(Y2,PV),e(PV,PVo),e(Y2,BVo),e(U,IVo),e(U,K2),e(K2,rpe),e(rpe,NVo),e(K2,qVo),e(K2,BV),e(BV,jVo),e(K2,DVo),e(U,GVo),e(U,Z2),e(Z2,tpe),e(tpe,OVo),e(Z2,VVo),e(Z2,IV),e(IV,XVo),e(Z2,zVo),e(U,WVo),e(U,ev),e(ev,ape),e(ape,QVo),e(ev,HVo),e(ev,NV),e(NV,UVo),e(ev,JVo),e(U,YVo),e(U,ov),e(ov,npe),e(npe,KVo),e(ov,ZVo),e(ov,qV),e(qV,eXo),e(ov,oXo),e(U,rXo),e(U,rv),e(rv,spe),e(spe,tXo),e(rv,aXo),e(rv,jV),e(jV,nXo),e(rv,sXo),e(U,lXo),e(U,tv),e(tv,lpe),e(lpe,iXo),e(tv,dXo),e(tv,DV),e(DV,cXo),e(tv,fXo),e(U,mXo),e(U,av),e(av,ipe),e(ipe,gXo),e(av,hXo),e(av,GV),e(GV,pXo),e(av,_Xo),e(U,uXo),e(U,nv),e(nv,dpe),e(dpe,bXo),e(nv,vXo),e(nv,OV),e(OV,FXo),e(nv,TXo),e(U,MXo),e(U,sv),e(sv,cpe),e(cpe,EXo),e(sv,CXo),e(sv,VV),e(VV,wXo),e(sv,AXo),e(U,LXo),e(U,lv),e(lv,fpe),e(fpe,yXo),e(lv,xXo),e(lv,XV),e(XV,$Xo),e(lv,kXo),e(U,SXo),e(U,iv),e(iv,mpe),e(mpe,RXo),e(iv,PXo),e(iv,zV),e(zV,BXo),e(iv,IXo),e(U,NXo),e(U,dv),e(dv,gpe),e(gpe,qXo),e(dv,jXo),e(dv,WV),e(WV,DXo),e(dv,GXo),e(U,OXo),e(U,cv),e(cv,hpe),e(hpe,VXo),e(cv,XXo),e(cv,QV),e(QV,zXo),e(cv,WXo),e(U,QXo),e(U,fv),e(fv,ppe),e(ppe,HXo),e(fv,UXo),e(fv,HV),e(HV,JXo),e(fv,YXo),e(U,KXo),e(U,mv),e(mv,_pe),e(_pe,ZXo),e(mv,ezo),e(mv,UV),e(UV,ozo),e(mv,rzo),e(U,tzo),e(U,gv),e(gv,upe),e(upe,azo),e(gv,nzo),e(gv,JV),e(JV,szo),e(gv,lzo),e(U,izo),e(U,hv),e(hv,bpe),e(bpe,dzo),e(hv,czo),e(hv,YV),e(YV,fzo),e(hv,mzo),e(U,gzo),e(U,pv),e(pv,vpe),e(vpe,hzo),e(pv,pzo),e(pv,KV),e(KV,_zo),e(pv,uzo),e(U,bzo),e(U,_v),e(_v,Fpe),e(Fpe,vzo),e(_v,Fzo),e(_v,ZV),e(ZV,Tzo),e(_v,Mzo),e(U,Ezo),e(U,uv),e(uv,Tpe),e(Tpe,Czo),e(uv,wzo),e(uv,eX),e(eX,Azo),e(uv,Lzo),e(U,yzo),e(U,bv),e(bv,Mpe),e(Mpe,xzo),e(bv,$zo),e(bv,oX),e(oX,kzo),e(bv,Szo),e(U,Rzo),e(U,vv),e(vv,Epe),e(Epe,Pzo),e(vv,Bzo),e(vv,rX),e(rX,Izo),e(vv,Nzo),e(U,qzo),e(U,Fv),e(Fv,Cpe),e(Cpe,jzo),e(Fv,Dzo),e(Fv,tX),e(tX,Gzo),e(Fv,Ozo),e(ao,Vzo),e(ao,Tv),e(Tv,Xzo),e(Tv,wpe),e(wpe,zzo),e(Tv,Wzo),e(Tv,Ape),e(Ape,Qzo),e(ao,Hzo),M(Mv,ao,null),b(f,Uje,u),b(f,ed,u),e(ed,Ev),e(Ev,Lpe),M(iy,Lpe,null),e(ed,Uzo),e(ed,ype),e(ype,Jzo),b(f,Jje,u),b(f,No,u),M(dy,No,null),e(No,Yzo),e(No,od),e(od,Kzo),e(od,aX),e(aX,Zzo),e(od,eWo),e(od,nX),e(nX,oWo),e(od,rWo),e(No,tWo),e(No,cy),e(cy,aWo),e(cy,xpe),e(xpe,nWo),e(cy,sWo),e(No,lWo),e(No,mt),M(fy,mt,null),e(mt,iWo),e(mt,$pe),e($pe,dWo),e(mt,cWo),e(mt,rd),e(rd,fWo),e(rd,kpe),e(kpe,mWo),e(rd,gWo),e(rd,sX),e(sX,hWo),e(rd,pWo),e(mt,_Wo),M(Cv,mt,null),e(No,uWo),e(No,no),M(my,no,null),e(no,bWo),e(no,Spe),e(Spe,vWo),e(no,FWo),e(no,Na),e(Na,TWo),e(Na,Rpe),e(Rpe,MWo),e(Na,EWo),e(Na,Ppe),e(Ppe,CWo),e(Na,wWo),e(Na,Bpe),e(Bpe,AWo),e(Na,LWo),e(no,yWo),e(no,V),e(V,wv),e(wv,Ipe),e(Ipe,xWo),e(wv,$Wo),e(wv,lX),e(lX,kWo),e(wv,SWo),e(V,RWo),e(V,Av),e(Av,Npe),e(Npe,PWo),e(Av,BWo),e(Av,iX),e(iX,IWo),e(Av,NWo),e(V,qWo),e(V,Lv),e(Lv,qpe),e(qpe,jWo),e(Lv,DWo),e(Lv,dX),e(dX,GWo),e(Lv,OWo),e(V,VWo),e(V,yv),e(yv,jpe),e(jpe,XWo),e(yv,zWo),e(yv,cX),e(cX,WWo),e(yv,QWo),e(V,HWo),e(V,xv),e(xv,Dpe),e(Dpe,UWo),e(xv,JWo),e(xv,fX),e(fX,YWo),e(xv,KWo),e(V,ZWo),e(V,$v),e($v,Gpe),e(Gpe,eQo),e($v,oQo),e($v,mX),e(mX,rQo),e($v,tQo),e(V,aQo),e(V,kv),e(kv,Ope),e(Ope,nQo),e(kv,sQo),e(kv,gX),e(gX,lQo),e(kv,iQo),e(V,dQo),e(V,Sv),e(Sv,Vpe),e(Vpe,cQo),e(Sv,fQo),e(Sv,hX),e(hX,mQo),e(Sv,gQo),e(V,hQo),e(V,Rv),e(Rv,Xpe),e(Xpe,pQo),e(Rv,_Qo),e(Rv,pX),e(pX,uQo),e(Rv,bQo),e(V,vQo),e(V,Pv),e(Pv,zpe),e(zpe,FQo),e(Pv,TQo),e(Pv,_X),e(_X,MQo),e(Pv,EQo),e(V,CQo),e(V,Bv),e(Bv,Wpe),e(Wpe,wQo),e(Bv,AQo),e(Bv,uX),e(uX,LQo),e(Bv,yQo),e(V,xQo),e(V,Iv),e(Iv,Qpe),e(Qpe,$Qo),e(Iv,kQo),e(Iv,bX),e(bX,SQo),e(Iv,RQo),e(V,PQo),e(V,Nv),e(Nv,Hpe),e(Hpe,BQo),e(Nv,IQo),e(Nv,vX),e(vX,NQo),e(Nv,qQo),e(V,jQo),e(V,qv),e(qv,Upe),e(Upe,DQo),e(qv,GQo),e(qv,FX),e(FX,OQo),e(qv,VQo),e(V,XQo),e(V,jv),e(jv,Jpe),e(Jpe,zQo),e(jv,WQo),e(jv,TX),e(TX,QQo),e(jv,HQo),e(V,UQo),e(V,Dv),e(Dv,Ype),e(Ype,JQo),e(Dv,YQo),e(Dv,MX),e(MX,KQo),e(Dv,ZQo),e(V,eHo),e(V,Gv),e(Gv,Kpe),e(Kpe,oHo),e(Gv,rHo),e(Gv,EX),e(EX,tHo),e(Gv,aHo),e(V,nHo),e(V,Ov),e(Ov,Zpe),e(Zpe,sHo),e(Ov,lHo),e(Ov,CX),e(CX,iHo),e(Ov,dHo),e(V,cHo),e(V,Vv),e(Vv,e_e),e(e_e,fHo),e(Vv,mHo),e(Vv,wX),e(wX,gHo),e(Vv,hHo),e(V,pHo),e(V,Xv),e(Xv,o_e),e(o_e,_Ho),e(Xv,uHo),e(Xv,AX),e(AX,bHo),e(Xv,vHo),e(V,FHo),e(V,zv),e(zv,r_e),e(r_e,THo),e(zv,MHo),e(zv,LX),e(LX,EHo),e(zv,CHo),e(V,wHo),e(V,Wv),e(Wv,t_e),e(t_e,AHo),e(Wv,LHo),e(Wv,yX),e(yX,yHo),e(Wv,xHo),e(V,$Ho),e(V,Qv),e(Qv,a_e),e(a_e,kHo),e(Qv,SHo),e(Qv,xX),e(xX,RHo),e(Qv,PHo),e(V,BHo),e(V,Hv),e(Hv,n_e),e(n_e,IHo),e(Hv,NHo),e(Hv,$X),e($X,qHo),e(Hv,jHo),e(V,DHo),e(V,Uv),e(Uv,s_e),e(s_e,GHo),e(Uv,OHo),e(Uv,kX),e(kX,VHo),e(Uv,XHo),e(V,zHo),e(V,Jv),e(Jv,l_e),e(l_e,WHo),e(Jv,QHo),e(Jv,SX),e(SX,HHo),e(Jv,UHo),e(V,JHo),e(V,Yv),e(Yv,i_e),e(i_e,YHo),e(Yv,KHo),e(Yv,RX),e(RX,ZHo),e(Yv,eUo),e(V,oUo),e(V,Kv),e(Kv,d_e),e(d_e,rUo),e(Kv,tUo),e(Kv,PX),e(PX,aUo),e(Kv,nUo),e(V,sUo),e(V,Zv),e(Zv,c_e),e(c_e,lUo),e(Zv,iUo),e(Zv,BX),e(BX,dUo),e(Zv,cUo),e(V,fUo),e(V,eF),e(eF,f_e),e(f_e,mUo),e(eF,gUo),e(eF,IX),e(IX,hUo),e(eF,pUo),e(V,_Uo),e(V,oF),e(oF,m_e),e(m_e,uUo),e(oF,bUo),e(oF,NX),e(NX,vUo),e(oF,FUo),e(V,TUo),e(V,rF),e(rF,g_e),e(g_e,MUo),e(rF,EUo),e(rF,qX),e(qX,CUo),e(rF,wUo),e(V,AUo),e(V,tF),e(tF,h_e),e(h_e,LUo),e(tF,yUo),e(tF,jX),e(jX,xUo),e(tF,$Uo),e(V,kUo),e(V,aF),e(aF,p_e),e(p_e,SUo),e(aF,RUo),e(aF,DX),e(DX,PUo),e(aF,BUo),e(V,IUo),e(V,nF),e(nF,__e),e(__e,NUo),e(nF,qUo),e(nF,GX),e(GX,jUo),e(nF,DUo),e(V,GUo),e(V,sF),e(sF,u_e),e(u_e,OUo),e(sF,VUo),e(sF,OX),e(OX,XUo),e(sF,zUo),e(V,WUo),e(V,lF),e(lF,b_e),e(b_e,QUo),e(lF,HUo),e(lF,VX),e(VX,UUo),e(lF,JUo),e(V,YUo),e(V,iF),e(iF,v_e),e(v_e,KUo),e(iF,ZUo),e(iF,XX),e(XX,eJo),e(iF,oJo),e(V,rJo),e(V,dF),e(dF,F_e),e(F_e,tJo),e(dF,aJo),e(dF,zX),e(zX,nJo),e(dF,sJo),e(V,lJo),e(V,cF),e(cF,T_e),e(T_e,iJo),e(cF,dJo),e(cF,WX),e(WX,cJo),e(cF,fJo),e(no,mJo),e(no,fF),e(fF,gJo),e(fF,M_e),e(M_e,hJo),e(fF,pJo),e(fF,E_e),e(E_e,_Jo),e(no,uJo),M(mF,no,null),b(f,Yje,u),b(f,td,u),e(td,gF),e(gF,C_e),M(gy,C_e,null),e(td,bJo),e(td,w_e),e(w_e,vJo),b(f,Kje,u),b(f,qo,u),M(hy,qo,null),e(qo,FJo),e(qo,ad),e(ad,TJo),e(ad,QX),e(QX,MJo),e(ad,EJo),e(ad,HX),e(HX,CJo),e(ad,wJo),e(qo,AJo),e(qo,py),e(py,LJo),e(py,A_e),e(A_e,yJo),e(py,xJo),e(qo,$Jo),e(qo,gt),M(_y,gt,null),e(gt,kJo),e(gt,L_e),e(L_e,SJo),e(gt,RJo),e(gt,nd),e(nd,PJo),e(nd,y_e),e(y_e,BJo),e(nd,IJo),e(nd,UX),e(UX,NJo),e(nd,qJo),e(gt,jJo),M(hF,gt,null),e(qo,DJo),e(qo,so),M(uy,so,null),e(so,GJo),e(so,x_e),e(x_e,OJo),e(so,VJo),e(so,qa),e(qa,XJo),e(qa,$_e),e($_e,zJo),e(qa,WJo),e(qa,k_e),e(k_e,QJo),e(qa,HJo),e(qa,S_e),e(S_e,UJo),e(qa,JJo),e(so,YJo),e(so,R_e),e(R_e,pF),e(pF,P_e),e(P_e,KJo),e(pF,ZJo),e(pF,JX),e(JX,eYo),e(pF,oYo),e(so,rYo),e(so,_F),e(_F,tYo),e(_F,B_e),e(B_e,aYo),e(_F,nYo),e(_F,I_e),e(I_e,sYo),e(so,lYo),M(uF,so,null),b(f,Zje,u),b(f,sd,u),e(sd,bF),e(bF,N_e),M(by,N_e,null),e(sd,iYo),e(sd,q_e),e(q_e,dYo),b(f,eDe,u),b(f,jo,u),M(vy,jo,null),e(jo,cYo),e(jo,ld),e(ld,fYo),e(ld,YX),e(YX,mYo),e(ld,gYo),e(ld,KX),e(KX,hYo),e(ld,pYo),e(jo,_Yo),e(jo,Fy),e(Fy,uYo),e(Fy,j_e),e(j_e,bYo),e(Fy,vYo),e(jo,FYo),e(jo,ht),M(Ty,ht,null),e(ht,TYo),e(ht,D_e),e(D_e,MYo),e(ht,EYo),e(ht,id),e(id,CYo),e(id,G_e),e(G_e,wYo),e(id,AYo),e(id,ZX),e(ZX,LYo),e(id,yYo),e(ht,xYo),M(vF,ht,null),e(jo,$Yo),e(jo,lo),M(My,lo,null),e(lo,kYo),e(lo,O_e),e(O_e,SYo),e(lo,RYo),e(lo,ja),e(ja,PYo),e(ja,V_e),e(V_e,BYo),e(ja,IYo),e(ja,X_e),e(X_e,NYo),e(ja,qYo),e(ja,z_e),e(z_e,jYo),e(ja,DYo),e(lo,GYo),e(lo,ve),e(ve,FF),e(FF,W_e),e(W_e,OYo),e(FF,VYo),e(FF,ez),e(ez,XYo),e(FF,zYo),e(ve,WYo),e(ve,TF),e(TF,Q_e),e(Q_e,QYo),e(TF,HYo),e(TF,oz),e(oz,UYo),e(TF,JYo),e(ve,YYo),e(ve,MF),e(MF,H_e),e(H_e,KYo),e(MF,ZYo),e(MF,rz),e(rz,eKo),e(MF,oKo),e(ve,rKo),e(ve,EF),e(EF,U_e),e(U_e,tKo),e(EF,aKo),e(EF,tz),e(tz,nKo),e(EF,sKo),e(ve,lKo),e(ve,Is),e(Is,J_e),e(J_e,iKo),e(Is,dKo),e(Is,az),e(az,cKo),e(Is,fKo),e(Is,nz),e(nz,mKo),e(Is,gKo),e(ve,hKo),e(ve,CF),e(CF,Y_e),e(Y_e,pKo),e(CF,_Ko),e(CF,sz),e(sz,uKo),e(CF,bKo),e(ve,vKo),e(ve,Ns),e(Ns,K_e),e(K_e,FKo),e(Ns,TKo),e(Ns,lz),e(lz,MKo),e(Ns,EKo),e(Ns,iz),e(iz,CKo),e(Ns,wKo),e(ve,AKo),e(ve,pt),e(pt,Z_e),e(Z_e,LKo),e(pt,yKo),e(pt,dz),e(dz,xKo),e(pt,$Ko),e(pt,cz),e(cz,kKo),e(pt,SKo),e(pt,fz),e(fz,RKo),e(pt,PKo),e(ve,BKo),e(ve,wF),e(wF,eue),e(eue,IKo),e(wF,NKo),e(wF,mz),e(mz,qKo),e(wF,jKo),e(ve,DKo),e(ve,AF),e(AF,oue),e(oue,GKo),e(AF,OKo),e(AF,gz),e(gz,VKo),e(AF,XKo),e(ve,zKo),e(ve,LF),e(LF,rue),e(rue,WKo),e(LF,QKo),e(LF,hz),e(hz,HKo),e(LF,UKo),e(ve,JKo),e(ve,yF),e(yF,tue),e(tue,YKo),e(yF,KKo),e(yF,pz),e(pz,ZKo),e(yF,eZo),e(ve,oZo),e(ve,xF),e(xF,aue),e(aue,rZo),e(xF,tZo),e(xF,_z),e(_z,aZo),e(xF,nZo),e(ve,sZo),e(ve,$F),e($F,nue),e(nue,lZo),e($F,iZo),e($F,uz),e(uz,dZo),e($F,cZo),e(ve,fZo),e(ve,kF),e(kF,sue),e(sue,mZo),e(kF,gZo),e(kF,bz),e(bz,hZo),e(kF,pZo),e(lo,_Zo),e(lo,SF),e(SF,uZo),e(SF,lue),e(lue,bZo),e(SF,vZo),e(SF,iue),e(iue,FZo),e(lo,TZo),M(RF,lo,null),b(f,oDe,u),b(f,dd,u),e(dd,PF),e(PF,due),M(Ey,due,null),e(dd,MZo),e(dd,cue),e(cue,EZo),b(f,rDe,u),b(f,Do,u),M(Cy,Do,null),e(Do,CZo),e(Do,cd),e(cd,wZo),e(cd,vz),e(vz,AZo),e(cd,LZo),e(cd,Fz),e(Fz,yZo),e(cd,xZo),e(Do,$Zo),e(Do,wy),e(wy,kZo),e(wy,fue),e(fue,SZo),e(wy,RZo),e(Do,PZo),e(Do,_t),M(Ay,_t,null),e(_t,BZo),e(_t,mue),e(mue,IZo),e(_t,NZo),e(_t,fd),e(fd,qZo),e(fd,gue),e(gue,jZo),e(fd,DZo),e(fd,Tz),e(Tz,GZo),e(fd,OZo),e(_t,VZo),M(BF,_t,null),e(Do,XZo),e(Do,io),M(Ly,io,null),e(io,zZo),e(io,hue),e(hue,WZo),e(io,QZo),e(io,Da),e(Da,HZo),e(Da,pue),e(pue,UZo),e(Da,JZo),e(Da,_ue),e(_ue,YZo),e(Da,KZo),e(Da,uue),e(uue,ZZo),e(Da,eer),e(io,oer),e(io,bue),e(bue,IF),e(IF,vue),e(vue,rer),e(IF,ter),e(IF,Mz),e(Mz,aer),e(IF,ner),e(io,ser),e(io,NF),e(NF,ler),e(NF,Fue),e(Fue,ier),e(NF,der),e(NF,Tue),e(Tue,cer),e(io,fer),M(qF,io,null),b(f,tDe,u),b(f,md,u),e(md,jF),e(jF,Mue),M(yy,Mue,null),e(md,mer),e(md,Eue),e(Eue,ger),b(f,aDe,u),b(f,Go,u),M(xy,Go,null),e(Go,her),e(Go,gd),e(gd,per),e(gd,Ez),e(Ez,_er),e(gd,uer),e(gd,Cz),e(Cz,ber),e(gd,ver),e(Go,Fer),e(Go,$y),e($y,Ter),e($y,Cue),e(Cue,Mer),e($y,Eer),e(Go,Cer),e(Go,ut),M(ky,ut,null),e(ut,wer),e(ut,wue),e(wue,Aer),e(ut,Ler),e(ut,hd),e(hd,yer),e(hd,Aue),e(Aue,xer),e(hd,$er),e(hd,wz),e(wz,ker),e(hd,Ser),e(ut,Rer),M(DF,ut,null),e(Go,Per),e(Go,co),M(Sy,co,null),e(co,Ber),e(co,Lue),e(Lue,Ier),e(co,Ner),e(co,Ga),e(Ga,qer),e(Ga,yue),e(yue,jer),e(Ga,Der),e(Ga,xue),e(xue,Ger),e(Ga,Oer),e(Ga,$ue),e($ue,Ver),e(Ga,Xer),e(co,zer),e(co,Re),e(Re,GF),e(GF,kue),e(kue,Wer),e(GF,Qer),e(GF,Az),e(Az,Her),e(GF,Uer),e(Re,Jer),e(Re,OF),e(OF,Sue),e(Sue,Yer),e(OF,Ker),e(OF,Lz),e(Lz,Zer),e(OF,eor),e(Re,oor),e(Re,VF),e(VF,Rue),e(Rue,ror),e(VF,tor),e(VF,yz),e(yz,aor),e(VF,nor),e(Re,sor),e(Re,XF),e(XF,Pue),e(Pue,lor),e(XF,ior),e(XF,xz),e(xz,dor),e(XF,cor),e(Re,mor),e(Re,zF),e(zF,Bue),e(Bue,gor),e(zF,hor),e(zF,$z),e($z,por),e(zF,_or),e(Re,uor),e(Re,WF),e(WF,Iue),e(Iue,bor),e(WF,vor),e(WF,kz),e(kz,For),e(WF,Tor),e(Re,Mor),e(Re,QF),e(QF,Nue),e(Nue,Eor),e(QF,Cor),e(QF,Sz),e(Sz,wor),e(QF,Aor),e(Re,Lor),e(Re,HF),e(HF,que),e(que,yor),e(HF,xor),e(HF,Rz),e(Rz,$or),e(HF,kor),e(Re,Sor),e(Re,UF),e(UF,jue),e(jue,Ror),e(UF,Por),e(UF,Pz),e(Pz,Bor),e(UF,Ior),e(co,Nor),e(co,JF),e(JF,qor),e(JF,Due),e(Due,jor),e(JF,Dor),e(JF,Gue),e(Gue,Gor),e(co,Oor),M(YF,co,null),b(f,nDe,u),b(f,pd,u),e(pd,KF),e(KF,Oue),M(Ry,Oue,null),e(pd,Vor),e(pd,Vue),e(Vue,Xor),b(f,sDe,u),b(f,Oo,u),M(Py,Oo,null),e(Oo,zor),e(Oo,_d),e(_d,Wor),e(_d,Bz),e(Bz,Qor),e(_d,Hor),e(_d,Iz),e(Iz,Uor),e(_d,Jor),e(Oo,Yor),e(Oo,By),e(By,Kor),e(By,Xue),e(Xue,Zor),e(By,err),e(Oo,orr),e(Oo,bt),M(Iy,bt,null),e(bt,rrr),e(bt,zue),e(zue,trr),e(bt,arr),e(bt,ud),e(ud,nrr),e(ud,Wue),e(Wue,srr),e(ud,lrr),e(ud,Nz),e(Nz,irr),e(ud,drr),e(bt,crr),M(ZF,bt,null),e(Oo,frr),e(Oo,fo),M(Ny,fo,null),e(fo,mrr),e(fo,Que),e(Que,grr),e(fo,hrr),e(fo,Oa),e(Oa,prr),e(Oa,Hue),e(Hue,_rr),e(Oa,urr),e(Oa,Uue),e(Uue,brr),e(Oa,vrr),e(Oa,Jue),e(Jue,Frr),e(Oa,Trr),e(fo,Mrr),e(fo,Kr),e(Kr,eT),e(eT,Yue),e(Yue,Err),e(eT,Crr),e(eT,qz),e(qz,wrr),e(eT,Arr),e(Kr,Lrr),e(Kr,oT),e(oT,Kue),e(Kue,yrr),e(oT,xrr),e(oT,jz),e(jz,$rr),e(oT,krr),e(Kr,Srr),e(Kr,rT),e(rT,Zue),e(Zue,Rrr),e(rT,Prr),e(rT,Dz),e(Dz,Brr),e(rT,Irr),e(Kr,Nrr),e(Kr,tT),e(tT,e1e),e(e1e,qrr),e(tT,jrr),e(tT,Gz),e(Gz,Drr),e(tT,Grr),e(Kr,Orr),e(Kr,aT),e(aT,o1e),e(o1e,Vrr),e(aT,Xrr),e(aT,Oz),e(Oz,zrr),e(aT,Wrr),e(fo,Qrr),e(fo,nT),e(nT,Hrr),e(nT,r1e),e(r1e,Urr),e(nT,Jrr),e(nT,t1e),e(t1e,Yrr),e(fo,Krr),M(sT,fo,null),b(f,lDe,u),b(f,bd,u),e(bd,lT),e(lT,a1e),M(qy,a1e,null),e(bd,Zrr),e(bd,n1e),e(n1e,etr),b(f,iDe,u),b(f,Vo,u),M(jy,Vo,null),e(Vo,otr),e(Vo,vd),e(vd,rtr),e(vd,Vz),e(Vz,ttr),e(vd,atr),e(vd,Xz),e(Xz,ntr),e(vd,str),e(Vo,ltr),e(Vo,Dy),e(Dy,itr),e(Dy,s1e),e(s1e,dtr),e(Dy,ctr),e(Vo,ftr),e(Vo,vt),M(Gy,vt,null),e(vt,mtr),e(vt,l1e),e(l1e,gtr),e(vt,htr),e(vt,Fd),e(Fd,ptr),e(Fd,i1e),e(i1e,_tr),e(Fd,utr),e(Fd,zz),e(zz,btr),e(Fd,vtr),e(vt,Ftr),M(iT,vt,null),e(Vo,Ttr),e(Vo,mo),M(Oy,mo,null),e(mo,Mtr),e(mo,d1e),e(d1e,Etr),e(mo,Ctr),e(mo,Va),e(Va,wtr),e(Va,c1e),e(c1e,Atr),e(Va,Ltr),e(Va,f1e),e(f1e,ytr),e(Va,xtr),e(Va,m1e),e(m1e,$tr),e(Va,ktr),e(mo,Str),e(mo,Le),e(Le,dT),e(dT,g1e),e(g1e,Rtr),e(dT,Ptr),e(dT,Wz),e(Wz,Btr),e(dT,Itr),e(Le,Ntr),e(Le,cT),e(cT,h1e),e(h1e,qtr),e(cT,jtr),e(cT,Qz),e(Qz,Dtr),e(cT,Gtr),e(Le,Otr),e(Le,fT),e(fT,p1e),e(p1e,Vtr),e(fT,Xtr),e(fT,Hz),e(Hz,ztr),e(fT,Wtr),e(Le,Qtr),e(Le,mT),e(mT,_1e),e(_1e,Htr),e(mT,Utr),e(mT,Uz),e(Uz,Jtr),e(mT,Ytr),e(Le,Ktr),e(Le,gT),e(gT,u1e),e(u1e,Ztr),e(gT,ear),e(gT,Jz),e(Jz,oar),e(gT,rar),e(Le,tar),e(Le,hT),e(hT,b1e),e(b1e,aar),e(hT,nar),e(hT,Yz),e(Yz,sar),e(hT,lar),e(Le,iar),e(Le,pT),e(pT,v1e),e(v1e,dar),e(pT,car),e(pT,Kz),e(Kz,far),e(pT,mar),e(Le,gar),e(Le,_T),e(_T,F1e),e(F1e,har),e(_T,par),e(_T,Zz),e(Zz,_ar),e(_T,uar),e(Le,bar),e(Le,uT),e(uT,T1e),e(T1e,Far),e(uT,Tar),e(uT,eW),e(eW,Mar),e(uT,Ear),e(Le,Car),e(Le,bT),e(bT,M1e),e(M1e,war),e(bT,Aar),e(bT,oW),e(oW,Lar),e(bT,yar),e(mo,xar),e(mo,vT),e(vT,$ar),e(vT,E1e),e(E1e,kar),e(vT,Sar),e(vT,C1e),e(C1e,Rar),e(mo,Par),M(FT,mo,null),b(f,dDe,u),b(f,Td,u),e(Td,TT),e(TT,w1e),M(Vy,w1e,null),e(Td,Bar),e(Td,A1e),e(A1e,Iar),b(f,cDe,u),b(f,Xo,u),M(Xy,Xo,null),e(Xo,Nar),e(Xo,Md),e(Md,qar),e(Md,rW),e(rW,jar),e(Md,Dar),e(Md,tW),e(tW,Gar),e(Md,Oar),e(Xo,Var),e(Xo,zy),e(zy,Xar),e(zy,L1e),e(L1e,zar),e(zy,War),e(Xo,Qar),e(Xo,Ft),M(Wy,Ft,null),e(Ft,Har),e(Ft,y1e),e(y1e,Uar),e(Ft,Jar),e(Ft,Ed),e(Ed,Yar),e(Ed,x1e),e(x1e,Kar),e(Ed,Zar),e(Ed,aW),e(aW,enr),e(Ed,onr),e(Ft,rnr),M(MT,Ft,null),e(Xo,tnr),e(Xo,go),M(Qy,go,null),e(go,anr),e(go,$1e),e($1e,nnr),e(go,snr),e(go,Xa),e(Xa,lnr),e(Xa,k1e),e(k1e,inr),e(Xa,dnr),e(Xa,S1e),e(S1e,cnr),e(Xa,fnr),e(Xa,R1e),e(R1e,mnr),e(Xa,gnr),e(go,hnr),e(go,Hy),e(Hy,ET),e(ET,P1e),e(P1e,pnr),e(ET,_nr),e(ET,nW),e(nW,unr),e(ET,bnr),e(Hy,vnr),e(Hy,CT),e(CT,B1e),e(B1e,Fnr),e(CT,Tnr),e(CT,sW),e(sW,Mnr),e(CT,Enr),e(go,Cnr),e(go,wT),e(wT,wnr),e(wT,I1e),e(I1e,Anr),e(wT,Lnr),e(wT,N1e),e(N1e,ynr),e(go,xnr),M(AT,go,null),b(f,fDe,u),b(f,Cd,u),e(Cd,LT),e(LT,q1e),M(Uy,q1e,null),e(Cd,$nr),e(Cd,j1e),e(j1e,knr),b(f,mDe,u),b(f,zo,u),M(Jy,zo,null),e(zo,Snr),e(zo,wd),e(wd,Rnr),e(wd,lW),e(lW,Pnr),e(wd,Bnr),e(wd,iW),e(iW,Inr),e(wd,Nnr),e(zo,qnr),e(zo,Yy),e(Yy,jnr),e(Yy,D1e),e(D1e,Dnr),e(Yy,Gnr),e(zo,Onr),e(zo,Tt),M(Ky,Tt,null),e(Tt,Vnr),e(Tt,G1e),e(G1e,Xnr),e(Tt,znr),e(Tt,Ad),e(Ad,Wnr),e(Ad,O1e),e(O1e,Qnr),e(Ad,Hnr),e(Ad,dW),e(dW,Unr),e(Ad,Jnr),e(Tt,Ynr),M(yT,Tt,null),e(zo,Knr),e(zo,ho),M(Zy,ho,null),e(ho,Znr),e(ho,V1e),e(V1e,esr),e(ho,osr),e(ho,za),e(za,rsr),e(za,X1e),e(X1e,tsr),e(za,asr),e(za,z1e),e(z1e,nsr),e(za,ssr),e(za,W1e),e(W1e,lsr),e(za,isr),e(ho,dsr),e(ho,Zr),e(Zr,xT),e(xT,Q1e),e(Q1e,csr),e(xT,fsr),e(xT,cW),e(cW,msr),e(xT,gsr),e(Zr,hsr),e(Zr,$T),e($T,H1e),e(H1e,psr),e($T,_sr),e($T,fW),e(fW,usr),e($T,bsr),e(Zr,vsr),e(Zr,kT),e(kT,U1e),e(U1e,Fsr),e(kT,Tsr),e(kT,mW),e(mW,Msr),e(kT,Esr),e(Zr,Csr),e(Zr,ST),e(ST,J1e),e(J1e,wsr),e(ST,Asr),e(ST,gW),e(gW,Lsr),e(ST,ysr),e(Zr,xsr),e(Zr,RT),e(RT,Y1e),e(Y1e,$sr),e(RT,ksr),e(RT,hW),e(hW,Ssr),e(RT,Rsr),e(ho,Psr),e(ho,PT),e(PT,Bsr),e(PT,K1e),e(K1e,Isr),e(PT,Nsr),e(PT,Z1e),e(Z1e,qsr),e(ho,jsr),M(BT,ho,null),b(f,gDe,u),b(f,Ld,u),e(Ld,IT),e(IT,e3e),M(e8,e3e,null),e(Ld,Dsr),e(Ld,o3e),e(o3e,Gsr),b(f,hDe,u),b(f,Wo,u),M(o8,Wo,null),e(Wo,Osr),e(Wo,yd),e(yd,Vsr),e(yd,pW),e(pW,Xsr),e(yd,zsr),e(yd,_W),e(_W,Wsr),e(yd,Qsr),e(Wo,Hsr),e(Wo,r8),e(r8,Usr),e(r8,r3e),e(r3e,Jsr),e(r8,Ysr),e(Wo,Ksr),e(Wo,Mt),M(t8,Mt,null),e(Mt,Zsr),e(Mt,t3e),e(t3e,elr),e(Mt,olr),e(Mt,xd),e(xd,rlr),e(xd,a3e),e(a3e,tlr),e(xd,alr),e(xd,uW),e(uW,nlr),e(xd,slr),e(Mt,llr),M(NT,Mt,null),e(Wo,ilr),e(Wo,po),M(a8,po,null),e(po,dlr),e(po,n3e),e(n3e,clr),e(po,flr),e(po,Wa),e(Wa,mlr),e(Wa,s3e),e(s3e,glr),e(Wa,hlr),e(Wa,l3e),e(l3e,plr),e(Wa,_lr),e(Wa,i3e),e(i3e,ulr),e(Wa,blr),e(po,vlr),e(po,$d),e($d,qT),e(qT,d3e),e(d3e,Flr),e(qT,Tlr),e(qT,bW),e(bW,Mlr),e(qT,Elr),e($d,Clr),e($d,jT),e(jT,c3e),e(c3e,wlr),e(jT,Alr),e(jT,vW),e(vW,Llr),e(jT,ylr),e($d,xlr),e($d,DT),e(DT,f3e),e(f3e,$lr),e(DT,klr),e(DT,FW),e(FW,Slr),e(DT,Rlr),e(po,Plr),e(po,GT),e(GT,Blr),e(GT,m3e),e(m3e,Ilr),e(GT,Nlr),e(GT,g3e),e(g3e,qlr),e(po,jlr),M(OT,po,null),b(f,pDe,u),b(f,kd,u),e(kd,VT),e(VT,h3e),M(n8,h3e,null),e(kd,Dlr),e(kd,p3e),e(p3e,Glr),b(f,_De,u),b(f,Qo,u),M(s8,Qo,null),e(Qo,Olr),e(Qo,Sd),e(Sd,Vlr),e(Sd,TW),e(TW,Xlr),e(Sd,zlr),e(Sd,MW),e(MW,Wlr),e(Sd,Qlr),e(Qo,Hlr),e(Qo,l8),e(l8,Ulr),e(l8,_3e),e(_3e,Jlr),e(l8,Ylr),e(Qo,Klr),e(Qo,Et),M(i8,Et,null),e(Et,Zlr),e(Et,u3e),e(u3e,eir),e(Et,oir),e(Et,Rd),e(Rd,rir),e(Rd,b3e),e(b3e,tir),e(Rd,air),e(Rd,EW),e(EW,nir),e(Rd,sir),e(Et,lir),M(XT,Et,null),e(Qo,iir),e(Qo,_o),M(d8,_o,null),e(_o,dir),e(_o,v3e),e(v3e,cir),e(_o,fir),e(_o,Qa),e(Qa,mir),e(Qa,F3e),e(F3e,gir),e(Qa,hir),e(Qa,T3e),e(T3e,pir),e(Qa,_ir),e(Qa,M3e),e(M3e,uir),e(Qa,bir),e(_o,vir),e(_o,c8),e(c8,zT),e(zT,E3e),e(E3e,Fir),e(zT,Tir),e(zT,CW),e(CW,Mir),e(zT,Eir),e(c8,Cir),e(c8,WT),e(WT,C3e),e(C3e,wir),e(WT,Air),e(WT,wW),e(wW,Lir),e(WT,yir),e(_o,xir),e(_o,QT),e(QT,$ir),e(QT,w3e),e(w3e,kir),e(QT,Sir),e(QT,A3e),e(A3e,Rir),e(_o,Pir),M(HT,_o,null),b(f,uDe,u),b(f,Pd,u),e(Pd,UT),e(UT,L3e),M(f8,L3e,null),e(Pd,Bir),e(Pd,y3e),e(y3e,Iir),b(f,bDe,u),b(f,Ho,u),M(m8,Ho,null),e(Ho,Nir),e(Ho,Bd),e(Bd,qir),e(Bd,AW),e(AW,jir),e(Bd,Dir),e(Bd,LW),e(LW,Gir),e(Bd,Oir),e(Ho,Vir),e(Ho,g8),e(g8,Xir),e(g8,x3e),e(x3e,zir),e(g8,Wir),e(Ho,Qir),e(Ho,Ct),M(h8,Ct,null),e(Ct,Hir),e(Ct,$3e),e($3e,Uir),e(Ct,Jir),e(Ct,Id),e(Id,Yir),e(Id,k3e),e(k3e,Kir),e(Id,Zir),e(Id,yW),e(yW,edr),e(Id,odr),e(Ct,rdr),M(JT,Ct,null),e(Ho,tdr),e(Ho,uo),M(p8,uo,null),e(uo,adr),e(uo,S3e),e(S3e,ndr),e(uo,sdr),e(uo,Ha),e(Ha,ldr),e(Ha,R3e),e(R3e,idr),e(Ha,ddr),e(Ha,P3e),e(P3e,cdr),e(Ha,fdr),e(Ha,B3e),e(B3e,mdr),e(Ha,gdr),e(uo,hdr),e(uo,I3e),e(I3e,YT),e(YT,N3e),e(N3e,pdr),e(YT,_dr),e(YT,xW),e(xW,udr),e(YT,bdr),e(uo,vdr),e(uo,KT),e(KT,Fdr),e(KT,q3e),e(q3e,Tdr),e(KT,Mdr),e(KT,j3e),e(j3e,Edr),e(uo,Cdr),M(ZT,uo,null),b(f,vDe,u),b(f,Nd,u),e(Nd,e7),e(e7,D3e),M(_8,D3e,null),e(Nd,wdr),e(Nd,G3e),e(G3e,Adr),b(f,FDe,u),b(f,Uo,u),M(u8,Uo,null),e(Uo,Ldr),e(Uo,qd),e(qd,ydr),e(qd,$W),e($W,xdr),e(qd,$dr),e(qd,kW),e(kW,kdr),e(qd,Sdr),e(Uo,Rdr),e(Uo,b8),e(b8,Pdr),e(b8,O3e),e(O3e,Bdr),e(b8,Idr),e(Uo,Ndr),e(Uo,wt),M(v8,wt,null),e(wt,qdr),e(wt,V3e),e(V3e,jdr),e(wt,Ddr),e(wt,jd),e(jd,Gdr),e(jd,X3e),e(X3e,Odr),e(jd,Vdr),e(jd,SW),e(SW,Xdr),e(jd,zdr),e(wt,Wdr),M(o7,wt,null),e(Uo,Qdr),e(Uo,bo),M(F8,bo,null),e(bo,Hdr),e(bo,z3e),e(z3e,Udr),e(bo,Jdr),e(bo,Ua),e(Ua,Ydr),e(Ua,W3e),e(W3e,Kdr),e(Ua,Zdr),e(Ua,Q3e),e(Q3e,ecr),e(Ua,ocr),e(Ua,H3e),e(H3e,rcr),e(Ua,tcr),e(bo,acr),e(bo,Ja),e(Ja,r7),e(r7,U3e),e(U3e,ncr),e(r7,scr),e(r7,RW),e(RW,lcr),e(r7,icr),e(Ja,dcr),e(Ja,t7),e(t7,J3e),e(J3e,ccr),e(t7,fcr),e(t7,PW),e(PW,mcr),e(t7,gcr),e(Ja,hcr),e(Ja,a7),e(a7,Y3e),e(Y3e,pcr),e(a7,_cr),e(a7,BW),e(BW,ucr),e(a7,bcr),e(Ja,vcr),e(Ja,n7),e(n7,K3e),e(K3e,Fcr),e(n7,Tcr),e(n7,IW),e(IW,Mcr),e(n7,Ecr),e(bo,Ccr),e(bo,s7),e(s7,wcr),e(s7,Z3e),e(Z3e,Acr),e(s7,Lcr),e(s7,ebe),e(ebe,ycr),e(bo,xcr),M(l7,bo,null),b(f,TDe,u),b(f,Dd,u),e(Dd,i7),e(i7,obe),M(T8,obe,null),e(Dd,$cr),e(Dd,rbe),e(rbe,kcr),b(f,MDe,u),b(f,Jo,u),M(M8,Jo,null),e(Jo,Scr),e(Jo,Gd),e(Gd,Rcr),e(Gd,NW),e(NW,Pcr),e(Gd,Bcr),e(Gd,qW),e(qW,Icr),e(Gd,Ncr),e(Jo,qcr),e(Jo,E8),e(E8,jcr),e(E8,tbe),e(tbe,Dcr),e(E8,Gcr),e(Jo,Ocr),e(Jo,At),M(C8,At,null),e(At,Vcr),e(At,abe),e(abe,Xcr),e(At,zcr),e(At,Od),e(Od,Wcr),e(Od,nbe),e(nbe,Qcr),e(Od,Hcr),e(Od,jW),e(jW,Ucr),e(Od,Jcr),e(At,Ycr),M(d7,At,null),e(Jo,Kcr),e(Jo,vo),M(w8,vo,null),e(vo,Zcr),e(vo,sbe),e(sbe,efr),e(vo,ofr),e(vo,Ya),e(Ya,rfr),e(Ya,lbe),e(lbe,tfr),e(Ya,afr),e(Ya,ibe),e(ibe,nfr),e(Ya,sfr),e(Ya,dbe),e(dbe,lfr),e(Ya,ifr),e(vo,dfr),e(vo,cbe),e(cbe,c7),e(c7,fbe),e(fbe,cfr),e(c7,ffr),e(c7,DW),e(DW,mfr),e(c7,gfr),e(vo,hfr),e(vo,f7),e(f7,pfr),e(f7,mbe),e(mbe,_fr),e(f7,ufr),e(f7,gbe),e(gbe,bfr),e(vo,vfr),M(m7,vo,null),b(f,EDe,u),b(f,Vd,u),e(Vd,g7),e(g7,hbe),M(A8,hbe,null),e(Vd,Ffr),e(Vd,pbe),e(pbe,Tfr),b(f,CDe,u),b(f,Yo,u),M(L8,Yo,null),e(Yo,Mfr),e(Yo,Xd),e(Xd,Efr),e(Xd,GW),e(GW,Cfr),e(Xd,wfr),e(Xd,OW),e(OW,Afr),e(Xd,Lfr),e(Yo,yfr),e(Yo,y8),e(y8,xfr),e(y8,_be),e(_be,$fr),e(y8,kfr),e(Yo,Sfr),e(Yo,Lt),M(x8,Lt,null),e(Lt,Rfr),e(Lt,ube),e(ube,Pfr),e(Lt,Bfr),e(Lt,zd),e(zd,Ifr),e(zd,bbe),e(bbe,Nfr),e(zd,qfr),e(zd,VW),e(VW,jfr),e(zd,Dfr),e(Lt,Gfr),M(h7,Lt,null),e(Yo,Ofr),e(Yo,wr),M($8,wr,null),e(wr,Vfr),e(wr,vbe),e(vbe,Xfr),e(wr,zfr),e(wr,Ka),e(Ka,Wfr),e(Ka,Fbe),e(Fbe,Qfr),e(Ka,Hfr),e(Ka,Tbe),e(Tbe,Ufr),e(Ka,Jfr),e(Ka,Mbe),e(Mbe,Yfr),e(Ka,Kfr),e(wr,Zfr),e(wr,q),e(q,p7),e(p7,Ebe),e(Ebe,emr),e(p7,omr),e(p7,XW),e(XW,rmr),e(p7,tmr),e(q,amr),e(q,_7),e(_7,Cbe),e(Cbe,nmr),e(_7,smr),e(_7,zW),e(zW,lmr),e(_7,imr),e(q,dmr),e(q,u7),e(u7,wbe),e(wbe,cmr),e(u7,fmr),e(u7,WW),e(WW,mmr),e(u7,gmr),e(q,hmr),e(q,b7),e(b7,Abe),e(Abe,pmr),e(b7,_mr),e(b7,QW),e(QW,umr),e(b7,bmr),e(q,vmr),e(q,v7),e(v7,Lbe),e(Lbe,Fmr),e(v7,Tmr),e(v7,HW),e(HW,Mmr),e(v7,Emr),e(q,Cmr),e(q,F7),e(F7,ybe),e(ybe,wmr),e(F7,Amr),e(F7,UW),e(UW,Lmr),e(F7,ymr),e(q,xmr),e(q,T7),e(T7,xbe),e(xbe,$mr),e(T7,kmr),e(T7,JW),e(JW,Smr),e(T7,Rmr),e(q,Pmr),e(q,M7),e(M7,$be),e($be,Bmr),e(M7,Imr),e(M7,YW),e(YW,Nmr),e(M7,qmr),e(q,jmr),e(q,E7),e(E7,kbe),e(kbe,Dmr),e(E7,Gmr),e(E7,KW),e(KW,Omr),e(E7,Vmr),e(q,Xmr),e(q,C7),e(C7,Sbe),e(Sbe,zmr),e(C7,Wmr),e(C7,ZW),e(ZW,Qmr),e(C7,Hmr),e(q,Umr),e(q,w7),e(w7,Rbe),e(Rbe,Jmr),e(w7,Ymr),e(w7,eQ),e(eQ,Kmr),e(w7,Zmr),e(q,egr),e(q,A7),e(A7,Pbe),e(Pbe,ogr),e(A7,rgr),e(A7,oQ),e(oQ,tgr),e(A7,agr),e(q,ngr),e(q,L7),e(L7,Bbe),e(Bbe,sgr),e(L7,lgr),e(L7,rQ),e(rQ,igr),e(L7,dgr),e(q,cgr),e(q,y7),e(y7,Ibe),e(Ibe,fgr),e(y7,mgr),e(y7,tQ),e(tQ,ggr),e(y7,hgr),e(q,pgr),e(q,x7),e(x7,Nbe),e(Nbe,_gr),e(x7,ugr),e(x7,aQ),e(aQ,bgr),e(x7,vgr),e(q,Fgr),e(q,$7),e($7,qbe),e(qbe,Tgr),e($7,Mgr),e($7,nQ),e(nQ,Egr),e($7,Cgr),e(q,wgr),e(q,k7),e(k7,jbe),e(jbe,Agr),e(k7,Lgr),e(k7,sQ),e(sQ,ygr),e(k7,xgr),e(q,$gr),e(q,qs),e(qs,Dbe),e(Dbe,kgr),e(qs,Sgr),e(qs,lQ),e(lQ,Rgr),e(qs,Pgr),e(qs,iQ),e(iQ,Bgr),e(qs,Igr),e(q,Ngr),e(q,S7),e(S7,Gbe),e(Gbe,qgr),e(S7,jgr),e(S7,dQ),e(dQ,Dgr),e(S7,Ggr),e(q,Ogr),e(q,R7),e(R7,Obe),e(Obe,Vgr),e(R7,Xgr),e(R7,cQ),e(cQ,zgr),e(R7,Wgr),e(q,Qgr),e(q,P7),e(P7,Vbe),e(Vbe,Hgr),e(P7,Ugr),e(P7,fQ),e(fQ,Jgr),e(P7,Ygr),e(q,Kgr),e(q,B7),e(B7,Xbe),e(Xbe,Zgr),e(B7,ehr),e(B7,mQ),e(mQ,ohr),e(B7,rhr),e(q,thr),e(q,I7),e(I7,zbe),e(zbe,ahr),e(I7,nhr),e(I7,gQ),e(gQ,shr),e(I7,lhr),e(q,ihr),e(q,N7),e(N7,Wbe),e(Wbe,dhr),e(N7,chr),e(N7,hQ),e(hQ,fhr),e(N7,mhr),e(q,ghr),e(q,q7),e(q7,Qbe),e(Qbe,hhr),e(q7,phr),e(q7,pQ),e(pQ,_hr),e(q7,uhr),e(q,bhr),e(q,j7),e(j7,Hbe),e(Hbe,vhr),e(j7,Fhr),e(j7,_Q),e(_Q,Thr),e(j7,Mhr),e(q,Ehr),e(q,D7),e(D7,Ube),e(Ube,Chr),e(D7,whr),e(D7,uQ),e(uQ,Ahr),e(D7,Lhr),e(q,yhr),e(q,G7),e(G7,Jbe),e(Jbe,xhr),e(G7,$hr),e(G7,bQ),e(bQ,khr),e(G7,Shr),e(q,Rhr),e(q,O7),e(O7,Ybe),e(Ybe,Phr),e(O7,Bhr),e(O7,vQ),e(vQ,Ihr),e(O7,Nhr),e(q,qhr),e(q,V7),e(V7,Kbe),e(Kbe,jhr),e(V7,Dhr),e(V7,FQ),e(FQ,Ghr),e(V7,Ohr),e(q,Vhr),e(q,X7),e(X7,Zbe),e(Zbe,Xhr),e(X7,zhr),e(X7,TQ),e(TQ,Whr),e(X7,Qhr),e(q,Hhr),e(q,z7),e(z7,e2e),e(e2e,Uhr),e(z7,Jhr),e(z7,MQ),e(MQ,Yhr),e(z7,Khr),e(q,Zhr),e(q,W7),e(W7,o2e),e(o2e,epr),e(W7,opr),e(W7,EQ),e(EQ,rpr),e(W7,tpr),e(q,apr),e(q,Q7),e(Q7,r2e),e(r2e,npr),e(Q7,spr),e(Q7,CQ),e(CQ,lpr),e(Q7,ipr),e(q,dpr),e(q,H7),e(H7,t2e),e(t2e,cpr),e(H7,fpr),e(H7,wQ),e(wQ,mpr),e(H7,gpr),e(q,hpr),e(q,U7),e(U7,a2e),e(a2e,ppr),e(U7,_pr),e(U7,AQ),e(AQ,upr),e(U7,bpr),e(q,vpr),e(q,J7),e(J7,n2e),e(n2e,Fpr),e(J7,Tpr),e(J7,LQ),e(LQ,Mpr),e(J7,Epr),e(q,Cpr),e(q,Y7),e(Y7,s2e),e(s2e,wpr),e(Y7,Apr),e(Y7,yQ),e(yQ,Lpr),e(Y7,ypr),e(q,xpr),e(q,K7),e(K7,l2e),e(l2e,$pr),e(K7,kpr),e(K7,xQ),e(xQ,Spr),e(K7,Rpr),e(q,Ppr),e(q,Z7),e(Z7,i2e),e(i2e,Bpr),e(Z7,Ipr),e(Z7,$Q),e($Q,Npr),e(Z7,qpr),e(q,jpr),e(q,eM),e(eM,d2e),e(d2e,Dpr),e(eM,Gpr),e(eM,kQ),e(kQ,Opr),e(eM,Vpr),e(q,Xpr),e(q,oM),e(oM,c2e),e(c2e,zpr),e(oM,Wpr),e(oM,SQ),e(SQ,Qpr),e(oM,Hpr),e(q,Upr),e(q,rM),e(rM,f2e),e(f2e,Jpr),e(rM,Ypr),e(rM,RQ),e(RQ,Kpr),e(rM,Zpr),e(q,e_r),e(q,tM),e(tM,m2e),e(m2e,o_r),e(tM,r_r),e(tM,PQ),e(PQ,t_r),e(tM,a_r),e(q,n_r),e(q,aM),e(aM,g2e),e(g2e,s_r),e(aM,l_r),e(aM,BQ),e(BQ,i_r),e(aM,d_r),e(q,c_r),e(q,nM),e(nM,h2e),e(h2e,f_r),e(nM,m_r),e(nM,IQ),e(IQ,g_r),e(nM,h_r),e(q,p_r),e(q,sM),e(sM,p2e),e(p2e,__r),e(sM,u_r),e(sM,NQ),e(NQ,b_r),e(sM,v_r),e(wr,F_r),M(lM,wr,null),b(f,wDe,u),b(f,Wd,u),e(Wd,iM),e(iM,_2e),M(k8,_2e,null),e(Wd,T_r),e(Wd,u2e),e(u2e,M_r),b(f,ADe,u),b(f,Ko,u),M(S8,Ko,null),e(Ko,E_r),e(Ko,Qd),e(Qd,C_r),e(Qd,qQ),e(qQ,w_r),e(Qd,A_r),e(Qd,jQ),e(jQ,L_r),e(Qd,y_r),e(Ko,x_r),e(Ko,R8),e(R8,$_r),e(R8,b2e),e(b2e,k_r),e(R8,S_r),e(Ko,R_r),e(Ko,yt),M(P8,yt,null),e(yt,P_r),e(yt,v2e),e(v2e,B_r),e(yt,I_r),e(yt,Hd),e(Hd,N_r),e(Hd,F2e),e(F2e,q_r),e(Hd,j_r),e(Hd,DQ),e(DQ,D_r),e(Hd,G_r),e(yt,O_r),M(dM,yt,null),e(Ko,V_r),e(Ko,Ar),M(B8,Ar,null),e(Ar,X_r),e(Ar,T2e),e(T2e,z_r),e(Ar,W_r),e(Ar,Za),e(Za,Q_r),e(Za,M2e),e(M2e,H_r),e(Za,U_r),e(Za,E2e),e(E2e,J_r),e(Za,Y_r),e(Za,C2e),e(C2e,K_r),e(Za,Z_r),e(Ar,eur),e(Ar,se),e(se,cM),e(cM,w2e),e(w2e,our),e(cM,rur),e(cM,GQ),e(GQ,tur),e(cM,aur),e(se,nur),e(se,fM),e(fM,A2e),e(A2e,sur),e(fM,lur),e(fM,OQ),e(OQ,iur),e(fM,dur),e(se,cur),e(se,mM),e(mM,L2e),e(L2e,fur),e(mM,mur),e(mM,VQ),e(VQ,gur),e(mM,hur),e(se,pur),e(se,gM),e(gM,y2e),e(y2e,_ur),e(gM,uur),e(gM,XQ),e(XQ,bur),e(gM,vur),e(se,Fur),e(se,hM),e(hM,x2e),e(x2e,Tur),e(hM,Mur),e(hM,zQ),e(zQ,Eur),e(hM,Cur),e(se,wur),e(se,pM),e(pM,$2e),e($2e,Aur),e(pM,Lur),e(pM,WQ),e(WQ,yur),e(pM,xur),e(se,$ur),e(se,_M),e(_M,k2e),e(k2e,kur),e(_M,Sur),e(_M,QQ),e(QQ,Rur),e(_M,Pur),e(se,Bur),e(se,uM),e(uM,S2e),e(S2e,Iur),e(uM,Nur),e(uM,HQ),e(HQ,qur),e(uM,jur),e(se,Dur),e(se,bM),e(bM,R2e),e(R2e,Gur),e(bM,Our),e(bM,UQ),e(UQ,Vur),e(bM,Xur),e(se,zur),e(se,vM),e(vM,P2e),e(P2e,Wur),e(vM,Qur),e(vM,JQ),e(JQ,Hur),e(vM,Uur),e(se,Jur),e(se,FM),e(FM,B2e),e(B2e,Yur),e(FM,Kur),e(FM,YQ),e(YQ,Zur),e(FM,e1r),e(se,o1r),e(se,TM),e(TM,I2e),e(I2e,r1r),e(TM,t1r),e(TM,KQ),e(KQ,a1r),e(TM,n1r),e(se,s1r),e(se,MM),e(MM,N2e),e(N2e,l1r),e(MM,i1r),e(MM,ZQ),e(ZQ,d1r),e(MM,c1r),e(se,f1r),e(se,EM),e(EM,q2e),e(q2e,m1r),e(EM,g1r),e(EM,eH),e(eH,h1r),e(EM,p1r),e(se,_1r),e(se,CM),e(CM,j2e),e(j2e,u1r),e(CM,b1r),e(CM,oH),e(oH,v1r),e(CM,F1r),e(se,T1r),e(se,wM),e(wM,D2e),e(D2e,M1r),e(wM,E1r),e(wM,rH),e(rH,C1r),e(wM,w1r),e(se,A1r),e(se,AM),e(AM,G2e),e(G2e,L1r),e(AM,y1r),e(AM,tH),e(tH,x1r),e(AM,$1r),e(se,k1r),e(se,LM),e(LM,O2e),e(O2e,S1r),e(LM,R1r),e(LM,aH),e(aH,P1r),e(LM,B1r),e(se,I1r),e(se,yM),e(yM,V2e),e(V2e,N1r),e(yM,q1r),e(yM,nH),e(nH,j1r),e(yM,D1r),e(se,G1r),e(se,xM),e(xM,X2e),e(X2e,O1r),e(xM,V1r),e(xM,sH),e(sH,X1r),e(xM,z1r),e(se,W1r),e(se,$M),e($M,z2e),e(z2e,Q1r),e($M,H1r),e($M,lH),e(lH,U1r),e($M,J1r),e(se,Y1r),e(se,kM),e(kM,W2e),e(W2e,K1r),e(kM,Z1r),e(kM,iH),e(iH,e3r),e(kM,o3r),e(se,r3r),e(se,SM),e(SM,Q2e),e(Q2e,t3r),e(SM,a3r),e(SM,dH),e(dH,n3r),e(SM,s3r),e(Ar,l3r),M(RM,Ar,null),b(f,LDe,u),b(f,Ud,u),e(Ud,PM),e(PM,H2e),M(I8,H2e,null),e(Ud,i3r),e(Ud,U2e),e(U2e,d3r),b(f,yDe,u),b(f,Zo,u),M(N8,Zo,null),e(Zo,c3r),e(Zo,Jd),e(Jd,f3r),e(Jd,cH),e(cH,m3r),e(Jd,g3r),e(Jd,fH),e(fH,h3r),e(Jd,p3r),e(Zo,_3r),e(Zo,q8),e(q8,u3r),e(q8,J2e),e(J2e,b3r),e(q8,v3r),e(Zo,F3r),e(Zo,xt),M(j8,xt,null),e(xt,T3r),e(xt,Y2e),e(Y2e,M3r),e(xt,E3r),e(xt,Yd),e(Yd,C3r),e(Yd,K2e),e(K2e,w3r),e(Yd,A3r),e(Yd,mH),e(mH,L3r),e(Yd,y3r),e(xt,x3r),M(BM,xt,null),e(Zo,$3r),e(Zo,Lr),M(D8,Lr,null),e(Lr,k3r),e(Lr,Z2e),e(Z2e,S3r),e(Lr,R3r),e(Lr,en),e(en,P3r),e(en,eve),e(eve,B3r),e(en,I3r),e(en,ove),e(ove,N3r),e(en,q3r),e(en,rve),e(rve,j3r),e(en,D3r),e(Lr,G3r),e(Lr,Me),e(Me,IM),e(IM,tve),e(tve,O3r),e(IM,V3r),e(IM,gH),e(gH,X3r),e(IM,z3r),e(Me,W3r),e(Me,NM),e(NM,ave),e(ave,Q3r),e(NM,H3r),e(NM,hH),e(hH,U3r),e(NM,J3r),e(Me,Y3r),e(Me,qM),e(qM,nve),e(nve,K3r),e(qM,Z3r),e(qM,pH),e(pH,ebr),e(qM,obr),e(Me,rbr),e(Me,jM),e(jM,sve),e(sve,tbr),e(jM,abr),e(jM,_H),e(_H,nbr),e(jM,sbr),e(Me,lbr),e(Me,DM),e(DM,lve),e(lve,ibr),e(DM,dbr),e(DM,uH),e(uH,cbr),e(DM,fbr),e(Me,mbr),e(Me,GM),e(GM,ive),e(ive,gbr),e(GM,hbr),e(GM,bH),e(bH,pbr),e(GM,_br),e(Me,ubr),e(Me,OM),e(OM,dve),e(dve,bbr),e(OM,vbr),e(OM,vH),e(vH,Fbr),e(OM,Tbr),e(Me,Mbr),e(Me,VM),e(VM,cve),e(cve,Ebr),e(VM,Cbr),e(VM,FH),e(FH,wbr),e(VM,Abr),e(Me,Lbr),e(Me,XM),e(XM,fve),e(fve,ybr),e(XM,xbr),e(XM,TH),e(TH,$br),e(XM,kbr),e(Me,Sbr),e(Me,zM),e(zM,mve),e(mve,Rbr),e(zM,Pbr),e(zM,MH),e(MH,Bbr),e(zM,Ibr),e(Me,Nbr),e(Me,WM),e(WM,gve),e(gve,qbr),e(WM,jbr),e(WM,EH),e(EH,Dbr),e(WM,Gbr),e(Me,Obr),e(Me,QM),e(QM,hve),e(hve,Vbr),e(QM,Xbr),e(QM,CH),e(CH,zbr),e(QM,Wbr),e(Me,Qbr),e(Me,HM),e(HM,pve),e(pve,Hbr),e(HM,Ubr),e(HM,wH),e(wH,Jbr),e(HM,Ybr),e(Lr,Kbr),M(UM,Lr,null),b(f,xDe,u),b(f,Kd,u),e(Kd,JM),e(JM,_ve),M(G8,_ve,null),e(Kd,Zbr),e(Kd,uve),e(uve,e2r),b(f,$De,u),b(f,er,u),M(O8,er,null),e(er,o2r),e(er,Zd),e(Zd,r2r),e(Zd,AH),e(AH,t2r),e(Zd,a2r),e(Zd,LH),e(LH,n2r),e(Zd,s2r),e(er,l2r),e(er,V8),e(V8,i2r),e(V8,bve),e(bve,d2r),e(V8,c2r),e(er,f2r),e(er,$t),M(X8,$t,null),e($t,m2r),e($t,vve),e(vve,g2r),e($t,h2r),e($t,ec),e(ec,p2r),e(ec,Fve),e(Fve,_2r),e(ec,u2r),e(ec,yH),e(yH,b2r),e(ec,v2r),e($t,F2r),M(YM,$t,null),e(er,T2r),e(er,yr),M(z8,yr,null),e(yr,M2r),e(yr,Tve),e(Tve,E2r),e(yr,C2r),e(yr,on),e(on,w2r),e(on,Mve),e(Mve,A2r),e(on,L2r),e(on,Eve),e(Eve,y2r),e(on,x2r),e(on,Cve),e(Cve,$2r),e(on,k2r),e(yr,S2r),e(yr,rn),e(rn,KM),e(KM,wve),e(wve,R2r),e(KM,P2r),e(KM,xH),e(xH,B2r),e(KM,I2r),e(rn,N2r),e(rn,ZM),e(ZM,Ave),e(Ave,q2r),e(ZM,j2r),e(ZM,$H),e($H,D2r),e(ZM,G2r),e(rn,O2r),e(rn,e4),e(e4,Lve),e(Lve,V2r),e(e4,X2r),e(e4,kH),e(kH,z2r),e(e4,W2r),e(rn,Q2r),e(rn,o4),e(o4,yve),e(yve,H2r),e(o4,U2r),e(o4,SH),e(SH,J2r),e(o4,Y2r),e(yr,K2r),M(r4,yr,null),b(f,kDe,u),b(f,oc,u),e(oc,t4),e(t4,xve),M(W8,xve,null),e(oc,Z2r),e(oc,$ve),e($ve,evr),b(f,SDe,u),b(f,or,u),M(Q8,or,null),e(or,ovr),e(or,rc),e(rc,rvr),e(rc,RH),e(RH,tvr),e(rc,avr),e(rc,PH),e(PH,nvr),e(rc,svr),e(or,lvr),e(or,H8),e(H8,ivr),e(H8,kve),e(kve,dvr),e(H8,cvr),e(or,fvr),e(or,kt),M(U8,kt,null),e(kt,mvr),e(kt,Sve),e(Sve,gvr),e(kt,hvr),e(kt,tc),e(tc,pvr),e(tc,Rve),e(Rve,_vr),e(tc,uvr),e(tc,BH),e(BH,bvr),e(tc,vvr),e(kt,Fvr),M(a4,kt,null),e(or,Tvr),e(or,xr),M(J8,xr,null),e(xr,Mvr),e(xr,Pve),e(Pve,Evr),e(xr,Cvr),e(xr,tn),e(tn,wvr),e(tn,Bve),e(Bve,Avr),e(tn,Lvr),e(tn,Ive),e(Ive,yvr),e(tn,xvr),e(tn,Nve),e(Nve,$vr),e(tn,kvr),e(xr,Svr),e(xr,ie),e(ie,n4),e(n4,qve),e(qve,Rvr),e(n4,Pvr),e(n4,IH),e(IH,Bvr),e(n4,Ivr),e(ie,Nvr),e(ie,s4),e(s4,jve),e(jve,qvr),e(s4,jvr),e(s4,NH),e(NH,Dvr),e(s4,Gvr),e(ie,Ovr),e(ie,l4),e(l4,Dve),e(Dve,Vvr),e(l4,Xvr),e(l4,qH),e(qH,zvr),e(l4,Wvr),e(ie,Qvr),e(ie,i4),e(i4,Gve),e(Gve,Hvr),e(i4,Uvr),e(i4,jH),e(jH,Jvr),e(i4,Yvr),e(ie,Kvr),e(ie,d4),e(d4,Ove),e(Ove,Zvr),e(d4,eFr),e(d4,DH),e(DH,oFr),e(d4,rFr),e(ie,tFr),e(ie,c4),e(c4,Vve),e(Vve,aFr),e(c4,nFr),e(c4,GH),e(GH,sFr),e(c4,lFr),e(ie,iFr),e(ie,f4),e(f4,Xve),e(Xve,dFr),e(f4,cFr),e(f4,OH),e(OH,fFr),e(f4,mFr),e(ie,gFr),e(ie,m4),e(m4,zve),e(zve,hFr),e(m4,pFr),e(m4,VH),e(VH,_Fr),e(m4,uFr),e(ie,bFr),e(ie,g4),e(g4,Wve),e(Wve,vFr),e(g4,FFr),e(g4,XH),e(XH,TFr),e(g4,MFr),e(ie,EFr),e(ie,h4),e(h4,Qve),e(Qve,CFr),e(h4,wFr),e(h4,zH),e(zH,AFr),e(h4,LFr),e(ie,yFr),e(ie,p4),e(p4,Hve),e(Hve,xFr),e(p4,$Fr),e(p4,WH),e(WH,kFr),e(p4,SFr),e(ie,RFr),e(ie,_4),e(_4,Uve),e(Uve,PFr),e(_4,BFr),e(_4,QH),e(QH,IFr),e(_4,NFr),e(ie,qFr),e(ie,u4),e(u4,Jve),e(Jve,jFr),e(u4,DFr),e(u4,HH),e(HH,GFr),e(u4,OFr),e(ie,VFr),e(ie,b4),e(b4,Yve),e(Yve,XFr),e(b4,zFr),e(b4,UH),e(UH,WFr),e(b4,QFr),e(ie,HFr),e(ie,v4),e(v4,Kve),e(Kve,UFr),e(v4,JFr),e(v4,JH),e(JH,YFr),e(v4,KFr),e(ie,ZFr),e(ie,F4),e(F4,Zve),e(Zve,eTr),e(F4,oTr),e(F4,YH),e(YH,rTr),e(F4,tTr),e(ie,aTr),e(ie,T4),e(T4,eFe),e(eFe,nTr),e(T4,sTr),e(T4,KH),e(KH,lTr),e(T4,iTr),e(ie,dTr),e(ie,M4),e(M4,oFe),e(oFe,cTr),e(M4,fTr),e(M4,ZH),e(ZH,mTr),e(M4,gTr),e(ie,hTr),e(ie,E4),e(E4,rFe),e(rFe,pTr),e(E4,_Tr),e(E4,eU),e(eU,uTr),e(E4,bTr),e(ie,vTr),e(ie,C4),e(C4,tFe),e(tFe,FTr),e(C4,TTr),e(C4,oU),e(oU,MTr),e(C4,ETr),e(xr,CTr),M(w4,xr,null),b(f,RDe,u),b(f,ac,u),e(ac,A4),e(A4,aFe),M(Y8,aFe,null),e(ac,wTr),e(ac,nFe),e(nFe,ATr),b(f,PDe,u),b(f,rr,u),M(K8,rr,null),e(rr,LTr),e(rr,nc),e(nc,yTr),e(nc,rU),e(rU,xTr),e(nc,$Tr),e(nc,tU),e(tU,kTr),e(nc,STr),e(rr,RTr),e(rr,Z8),e(Z8,PTr),e(Z8,sFe),e(sFe,BTr),e(Z8,ITr),e(rr,NTr),e(rr,St),M(e9,St,null),e(St,qTr),e(St,lFe),e(lFe,jTr),e(St,DTr),e(St,sc),e(sc,GTr),e(sc,iFe),e(iFe,OTr),e(sc,VTr),e(sc,aU),e(aU,XTr),e(sc,zTr),e(St,WTr),M(L4,St,null),e(rr,QTr),e(rr,$r),M(o9,$r,null),e($r,HTr),e($r,dFe),e(dFe,UTr),e($r,JTr),e($r,an),e(an,YTr),e(an,cFe),e(cFe,KTr),e(an,ZTr),e(an,fFe),e(fFe,e7r),e(an,o7r),e(an,mFe),e(mFe,r7r),e(an,t7r),e($r,a7r),e($r,ye),e(ye,y4),e(y4,gFe),e(gFe,n7r),e(y4,s7r),e(y4,nU),e(nU,l7r),e(y4,i7r),e(ye,d7r),e(ye,x4),e(x4,hFe),e(hFe,c7r),e(x4,f7r),e(x4,sU),e(sU,m7r),e(x4,g7r),e(ye,h7r),e(ye,$4),e($4,pFe),e(pFe,p7r),e($4,_7r),e($4,lU),e(lU,u7r),e($4,b7r),e(ye,v7r),e(ye,k4),e(k4,_Fe),e(_Fe,F7r),e(k4,T7r),e(k4,iU),e(iU,M7r),e(k4,E7r),e(ye,C7r),e(ye,S4),e(S4,uFe),e(uFe,w7r),e(S4,A7r),e(S4,dU),e(dU,L7r),e(S4,y7r),e(ye,x7r),e(ye,R4),e(R4,bFe),e(bFe,$7r),e(R4,k7r),e(R4,cU),e(cU,S7r),e(R4,R7r),e(ye,P7r),e(ye,P4),e(P4,vFe),e(vFe,B7r),e(P4,I7r),e(P4,fU),e(fU,N7r),e(P4,q7r),e(ye,j7r),e(ye,B4),e(B4,FFe),e(FFe,D7r),e(B4,G7r),e(B4,mU),e(mU,O7r),e(B4,V7r),e(ye,X7r),e(ye,I4),e(I4,TFe),e(TFe,z7r),e(I4,W7r),e(I4,gU),e(gU,Q7r),e(I4,H7r),e(ye,U7r),e(ye,N4),e(N4,MFe),e(MFe,J7r),e(N4,Y7r),e(N4,hU),e(hU,K7r),e(N4,Z7r),e($r,eMr),M(q4,$r,null),b(f,BDe,u),b(f,lc,u),e(lc,j4),e(j4,EFe),M(r9,EFe,null),e(lc,oMr),e(lc,CFe),e(CFe,rMr),b(f,IDe,u),b(f,tr,u),M(t9,tr,null),e(tr,tMr),e(tr,ic),e(ic,aMr),e(ic,pU),e(pU,nMr),e(ic,sMr),e(ic,_U),e(_U,lMr),e(ic,iMr),e(tr,dMr),e(tr,a9),e(a9,cMr),e(a9,wFe),e(wFe,fMr),e(a9,mMr),e(tr,gMr),e(tr,Rt),M(n9,Rt,null),e(Rt,hMr),e(Rt,AFe),e(AFe,pMr),e(Rt,_Mr),e(Rt,dc),e(dc,uMr),e(dc,LFe),e(LFe,bMr),e(dc,vMr),e(dc,uU),e(uU,FMr),e(dc,TMr),e(Rt,MMr),M(D4,Rt,null),e(tr,EMr),e(tr,kr),M(s9,kr,null),e(kr,CMr),e(kr,yFe),e(yFe,wMr),e(kr,AMr),e(kr,nn),e(nn,LMr),e(nn,xFe),e(xFe,yMr),e(nn,xMr),e(nn,$Fe),e($Fe,$Mr),e(nn,kMr),e(nn,kFe),e(kFe,SMr),e(nn,RMr),e(kr,PMr),e(kr,oe),e(oe,G4),e(G4,SFe),e(SFe,BMr),e(G4,IMr),e(G4,bU),e(bU,NMr),e(G4,qMr),e(oe,jMr),e(oe,O4),e(O4,RFe),e(RFe,DMr),e(O4,GMr),e(O4,vU),e(vU,OMr),e(O4,VMr),e(oe,XMr),e(oe,V4),e(V4,PFe),e(PFe,zMr),e(V4,WMr),e(V4,FU),e(FU,QMr),e(V4,HMr),e(oe,UMr),e(oe,X4),e(X4,BFe),e(BFe,JMr),e(X4,YMr),e(X4,TU),e(TU,KMr),e(X4,ZMr),e(oe,e4r),e(oe,z4),e(z4,IFe),e(IFe,o4r),e(z4,r4r),e(z4,MU),e(MU,t4r),e(z4,a4r),e(oe,n4r),e(oe,W4),e(W4,NFe),e(NFe,s4r),e(W4,l4r),e(W4,EU),e(EU,i4r),e(W4,d4r),e(oe,c4r),e(oe,Q4),e(Q4,qFe),e(qFe,f4r),e(Q4,m4r),e(Q4,CU),e(CU,g4r),e(Q4,h4r),e(oe,p4r),e(oe,H4),e(H4,jFe),e(jFe,_4r),e(H4,u4r),e(H4,wU),e(wU,b4r),e(H4,v4r),e(oe,F4r),e(oe,U4),e(U4,DFe),e(DFe,T4r),e(U4,M4r),e(U4,AU),e(AU,E4r),e(U4,C4r),e(oe,w4r),e(oe,J4),e(J4,GFe),e(GFe,A4r),e(J4,L4r),e(J4,LU),e(LU,y4r),e(J4,x4r),e(oe,$4r),e(oe,Y4),e(Y4,OFe),e(OFe,k4r),e(Y4,S4r),e(Y4,yU),e(yU,R4r),e(Y4,P4r),e(oe,B4r),e(oe,K4),e(K4,VFe),e(VFe,I4r),e(K4,N4r),e(K4,xU),e(xU,q4r),e(K4,j4r),e(oe,D4r),e(oe,Z4),e(Z4,XFe),e(XFe,G4r),e(Z4,O4r),e(Z4,$U),e($U,V4r),e(Z4,X4r),e(oe,z4r),e(oe,eE),e(eE,zFe),e(zFe,W4r),e(eE,Q4r),e(eE,kU),e(kU,H4r),e(eE,U4r),e(oe,J4r),e(oe,oE),e(oE,WFe),e(WFe,Y4r),e(oE,K4r),e(oE,SU),e(SU,Z4r),e(oE,eEr),e(oe,oEr),e(oe,rE),e(rE,QFe),e(QFe,rEr),e(rE,tEr),e(rE,RU),e(RU,aEr),e(rE,nEr),e(oe,sEr),e(oe,tE),e(tE,HFe),e(HFe,lEr),e(tE,iEr),e(tE,PU),e(PU,dEr),e(tE,cEr),e(oe,fEr),e(oe,aE),e(aE,UFe),e(UFe,mEr),e(aE,gEr),e(aE,BU),e(BU,hEr),e(aE,pEr),e(oe,_Er),e(oe,nE),e(nE,JFe),e(JFe,uEr),e(nE,bEr),e(nE,IU),e(IU,vEr),e(nE,FEr),e(oe,TEr),e(oe,sE),e(sE,YFe),e(YFe,MEr),e(sE,EEr),e(sE,NU),e(NU,CEr),e(sE,wEr),e(oe,AEr),e(oe,lE),e(lE,KFe),e(KFe,LEr),e(lE,yEr),e(lE,qU),e(qU,xEr),e(lE,$Er),e(oe,kEr),e(oe,iE),e(iE,ZFe),e(ZFe,SEr),e(iE,REr),e(iE,jU),e(jU,PEr),e(iE,BEr),e(oe,IEr),e(oe,dE),e(dE,eTe),e(eTe,NEr),e(dE,qEr),e(dE,DU),e(DU,jEr),e(dE,DEr),e(oe,GEr),e(oe,cE),e(cE,oTe),e(oTe,OEr),e(cE,VEr),e(cE,GU),e(GU,XEr),e(cE,zEr),e(oe,WEr),e(oe,fE),e(fE,rTe),e(rTe,QEr),e(fE,HEr),e(fE,OU),e(OU,UEr),e(fE,JEr),e(oe,YEr),e(oe,mE),e(mE,tTe),e(tTe,KEr),e(mE,ZEr),e(mE,VU),e(VU,eCr),e(mE,oCr),e(kr,rCr),M(gE,kr,null),b(f,NDe,u),b(f,cc,u),e(cc,hE),e(hE,aTe),M(l9,aTe,null),e(cc,tCr),e(cc,nTe),e(nTe,aCr),b(f,qDe,u),b(f,ar,u),M(i9,ar,null),e(ar,nCr),e(ar,fc),e(fc,sCr),e(fc,XU),e(XU,lCr),e(fc,iCr),e(fc,zU),e(zU,dCr),e(fc,cCr),e(ar,fCr),e(ar,d9),e(d9,mCr),e(d9,sTe),e(sTe,gCr),e(d9,hCr),e(ar,pCr),e(ar,Pt),M(c9,Pt,null),e(Pt,_Cr),e(Pt,lTe),e(lTe,uCr),e(Pt,bCr),e(Pt,mc),e(mc,vCr),e(mc,iTe),e(iTe,FCr),e(mc,TCr),e(mc,WU),e(WU,MCr),e(mc,ECr),e(Pt,CCr),M(pE,Pt,null),e(ar,wCr),e(ar,Sr),M(f9,Sr,null),e(Sr,ACr),e(Sr,dTe),e(dTe,LCr),e(Sr,yCr),e(Sr,sn),e(sn,xCr),e(sn,cTe),e(cTe,$Cr),e(sn,kCr),e(sn,fTe),e(fTe,SCr),e(sn,RCr),e(sn,mTe),e(mTe,PCr),e(sn,BCr),e(Sr,ICr),e(Sr,pe),e(pe,_E),e(_E,gTe),e(gTe,NCr),e(_E,qCr),e(_E,QU),e(QU,jCr),e(_E,DCr),e(pe,GCr),e(pe,uE),e(uE,hTe),e(hTe,OCr),e(uE,VCr),e(uE,HU),e(HU,XCr),e(uE,zCr),e(pe,WCr),e(pe,bE),e(bE,pTe),e(pTe,QCr),e(bE,HCr),e(bE,UU),e(UU,UCr),e(bE,JCr),e(pe,YCr),e(pe,vE),e(vE,_Te),e(_Te,KCr),e(vE,ZCr),e(vE,JU),e(JU,e5r),e(vE,o5r),e(pe,r5r),e(pe,FE),e(FE,uTe),e(uTe,t5r),e(FE,a5r),e(FE,YU),e(YU,n5r),e(FE,s5r),e(pe,l5r),e(pe,TE),e(TE,bTe),e(bTe,i5r),e(TE,d5r),e(TE,KU),e(KU,c5r),e(TE,f5r),e(pe,m5r),e(pe,ME),e(ME,vTe),e(vTe,g5r),e(ME,h5r),e(ME,ZU),e(ZU,p5r),e(ME,_5r),e(pe,u5r),e(pe,EE),e(EE,FTe),e(FTe,b5r),e(EE,v5r),e(EE,eJ),e(eJ,F5r),e(EE,T5r),e(pe,M5r),e(pe,CE),e(CE,TTe),e(TTe,E5r),e(CE,C5r),e(CE,oJ),e(oJ,w5r),e(CE,A5r),e(pe,L5r),e(pe,wE),e(wE,MTe),e(MTe,y5r),e(wE,x5r),e(wE,rJ),e(rJ,$5r),e(wE,k5r),e(pe,S5r),e(pe,AE),e(AE,ETe),e(ETe,R5r),e(AE,P5r),e(AE,tJ),e(tJ,B5r),e(AE,I5r),e(pe,N5r),e(pe,LE),e(LE,CTe),e(CTe,q5r),e(LE,j5r),e(LE,aJ),e(aJ,D5r),e(LE,G5r),e(pe,O5r),e(pe,yE),e(yE,wTe),e(wTe,V5r),e(yE,X5r),e(yE,nJ),e(nJ,z5r),e(yE,W5r),e(pe,Q5r),e(pe,xE),e(xE,ATe),e(ATe,H5r),e(xE,U5r),e(xE,sJ),e(sJ,J5r),e(xE,Y5r),e(pe,K5r),e(pe,$E),e($E,LTe),e(LTe,Z5r),e($E,e0r),e($E,lJ),e(lJ,o0r),e($E,r0r),e(pe,t0r),e(pe,kE),e(kE,yTe),e(yTe,a0r),e(kE,n0r),e(kE,iJ),e(iJ,s0r),e(kE,l0r),e(pe,i0r),e(pe,SE),e(SE,xTe),e(xTe,d0r),e(SE,c0r),e(SE,dJ),e(dJ,f0r),e(SE,m0r),e(Sr,g0r),M(RE,Sr,null),b(f,jDe,u),b(f,gc,u),e(gc,PE),e(PE,$Te),M(m9,$Te,null),e(gc,h0r),e(gc,kTe),e(kTe,p0r),b(f,DDe,u),b(f,nr,u),M(g9,nr,null),e(nr,_0r),e(nr,hc),e(hc,u0r),e(hc,cJ),e(cJ,b0r),e(hc,v0r),e(hc,fJ),e(fJ,F0r),e(hc,T0r),e(nr,M0r),e(nr,h9),e(h9,E0r),e(h9,STe),e(STe,C0r),e(h9,w0r),e(nr,A0r),e(nr,Bt),M(p9,Bt,null),e(Bt,L0r),e(Bt,RTe),e(RTe,y0r),e(Bt,x0r),e(Bt,pc),e(pc,$0r),e(pc,PTe),e(PTe,k0r),e(pc,S0r),e(pc,mJ),e(mJ,R0r),e(pc,P0r),e(Bt,B0r),M(BE,Bt,null),e(nr,I0r),e(nr,Rr),M(_9,Rr,null),e(Rr,N0r),e(Rr,BTe),e(BTe,q0r),e(Rr,j0r),e(Rr,ln),e(ln,D0r),e(ln,ITe),e(ITe,G0r),e(ln,O0r),e(ln,NTe),e(NTe,V0r),e(ln,X0r),e(ln,qTe),e(qTe,z0r),e(ln,W0r),e(Rr,Q0r),e(Rr,u9),e(u9,IE),e(IE,jTe),e(jTe,H0r),e(IE,U0r),e(IE,gJ),e(gJ,J0r),e(IE,Y0r),e(u9,K0r),e(u9,NE),e(NE,DTe),e(DTe,Z0r),e(NE,ewr),e(NE,hJ),e(hJ,owr),e(NE,rwr),e(Rr,twr),M(qE,Rr,null),b(f,GDe,u),b(f,_c,u),e(_c,jE),e(jE,GTe),M(b9,GTe,null),e(_c,awr),e(_c,OTe),e(OTe,nwr),b(f,ODe,u),b(f,sr,u),M(v9,sr,null),e(sr,swr),e(sr,uc),e(uc,lwr),e(uc,pJ),e(pJ,iwr),e(uc,dwr),e(uc,_J),e(_J,cwr),e(uc,fwr),e(sr,mwr),e(sr,F9),e(F9,gwr),e(F9,VTe),e(VTe,hwr),e(F9,pwr),e(sr,_wr),e(sr,It),M(T9,It,null),e(It,uwr),e(It,XTe),e(XTe,bwr),e(It,vwr),e(It,bc),e(bc,Fwr),e(bc,zTe),e(zTe,Twr),e(bc,Mwr),e(bc,uJ),e(uJ,Ewr),e(bc,Cwr),e(It,wwr),M(DE,It,null),e(sr,Awr),e(sr,Pr),M(M9,Pr,null),e(Pr,Lwr),e(Pr,WTe),e(WTe,ywr),e(Pr,xwr),e(Pr,dn),e(dn,$wr),e(dn,QTe),e(QTe,kwr),e(dn,Swr),e(dn,HTe),e(HTe,Rwr),e(dn,Pwr),e(dn,UTe),e(UTe,Bwr),e(dn,Iwr),e(Pr,Nwr),e(Pr,JTe),e(JTe,GE),e(GE,YTe),e(YTe,qwr),e(GE,jwr),e(GE,bJ),e(bJ,Dwr),e(GE,Gwr),e(Pr,Owr),M(OE,Pr,null),b(f,VDe,u),b(f,vc,u),e(vc,VE),e(VE,KTe),M(E9,KTe,null),e(vc,Vwr),e(vc,ZTe),e(ZTe,Xwr),b(f,XDe,u),b(f,lr,u),M(C9,lr,null),e(lr,zwr),e(lr,Fc),e(Fc,Wwr),e(Fc,vJ),e(vJ,Qwr),e(Fc,Hwr),e(Fc,FJ),e(FJ,Uwr),e(Fc,Jwr),e(lr,Ywr),e(lr,w9),e(w9,Kwr),e(w9,e7e),e(e7e,Zwr),e(w9,eAr),e(lr,oAr),e(lr,Nt),M(A9,Nt,null),e(Nt,rAr),e(Nt,o7e),e(o7e,tAr),e(Nt,aAr),e(Nt,Tc),e(Tc,nAr),e(Tc,r7e),e(r7e,sAr),e(Tc,lAr),e(Tc,TJ),e(TJ,iAr),e(Tc,dAr),e(Nt,cAr),M(XE,Nt,null),e(lr,fAr),e(lr,Br),M(L9,Br,null),e(Br,mAr),e(Br,t7e),e(t7e,gAr),e(Br,hAr),e(Br,cn),e(cn,pAr),e(cn,a7e),e(a7e,_Ar),e(cn,uAr),e(cn,n7e),e(n7e,bAr),e(cn,vAr),e(cn,s7e),e(s7e,FAr),e(cn,TAr),e(Br,MAr),e(Br,de),e(de,zE),e(zE,l7e),e(l7e,EAr),e(zE,CAr),e(zE,MJ),e(MJ,wAr),e(zE,AAr),e(de,LAr),e(de,WE),e(WE,i7e),e(i7e,yAr),e(WE,xAr),e(WE,EJ),e(EJ,$Ar),e(WE,kAr),e(de,SAr),e(de,QE),e(QE,d7e),e(d7e,RAr),e(QE,PAr),e(QE,CJ),e(CJ,BAr),e(QE,IAr),e(de,NAr),e(de,HE),e(HE,c7e),e(c7e,qAr),e(HE,jAr),e(HE,wJ),e(wJ,DAr),e(HE,GAr),e(de,OAr),e(de,UE),e(UE,f7e),e(f7e,VAr),e(UE,XAr),e(UE,AJ),e(AJ,zAr),e(UE,WAr),e(de,QAr),e(de,JE),e(JE,m7e),e(m7e,HAr),e(JE,UAr),e(JE,LJ),e(LJ,JAr),e(JE,YAr),e(de,KAr),e(de,YE),e(YE,g7e),e(g7e,ZAr),e(YE,e6r),e(YE,yJ),e(yJ,o6r),e(YE,r6r),e(de,t6r),e(de,KE),e(KE,h7e),e(h7e,a6r),e(KE,n6r),e(KE,xJ),e(xJ,s6r),e(KE,l6r),e(de,i6r),e(de,ZE),e(ZE,p7e),e(p7e,d6r),e(ZE,c6r),e(ZE,$J),e($J,f6r),e(ZE,m6r),e(de,g6r),e(de,eC),e(eC,_7e),e(_7e,h6r),e(eC,p6r),e(eC,kJ),e(kJ,_6r),e(eC,u6r),e(de,b6r),e(de,oC),e(oC,u7e),e(u7e,v6r),e(oC,F6r),e(oC,SJ),e(SJ,T6r),e(oC,M6r),e(de,E6r),e(de,rC),e(rC,b7e),e(b7e,C6r),e(rC,w6r),e(rC,RJ),e(RJ,A6r),e(rC,L6r),e(de,y6r),e(de,tC),e(tC,v7e),e(v7e,x6r),e(tC,$6r),e(tC,PJ),e(PJ,k6r),e(tC,S6r),e(de,R6r),e(de,aC),e(aC,F7e),e(F7e,P6r),e(aC,B6r),e(aC,BJ),e(BJ,I6r),e(aC,N6r),e(de,q6r),e(de,nC),e(nC,T7e),e(T7e,j6r),e(nC,D6r),e(nC,IJ),e(IJ,G6r),e(nC,O6r),e(de,V6r),e(de,sC),e(sC,M7e),e(M7e,X6r),e(sC,z6r),e(sC,NJ),e(NJ,W6r),e(sC,Q6r),e(de,H6r),e(de,lC),e(lC,E7e),e(E7e,U6r),e(lC,J6r),e(lC,qJ),e(qJ,Y6r),e(lC,K6r),e(de,Z6r),e(de,iC),e(iC,C7e),e(C7e,eLr),e(iC,oLr),e(iC,jJ),e(jJ,rLr),e(iC,tLr),e(de,aLr),e(de,dC),e(dC,w7e),e(w7e,nLr),e(dC,sLr),e(dC,DJ),e(DJ,lLr),e(dC,iLr),e(de,dLr),e(de,cC),e(cC,A7e),e(A7e,cLr),e(cC,fLr),e(cC,GJ),e(GJ,mLr),e(cC,gLr),e(Br,hLr),M(fC,Br,null),b(f,zDe,u),b(f,Mc,u),e(Mc,mC),e(mC,L7e),M(y9,L7e,null),e(Mc,pLr),e(Mc,y7e),e(y7e,_Lr),b(f,WDe,u),b(f,ir,u),M(x9,ir,null),e(ir,uLr),e(ir,Ec),e(Ec,bLr),e(Ec,OJ),e(OJ,vLr),e(Ec,FLr),e(Ec,VJ),e(VJ,TLr),e(Ec,MLr),e(ir,ELr),e(ir,$9),e($9,CLr),e($9,x7e),e(x7e,wLr),e($9,ALr),e(ir,LLr),e(ir,qt),M(k9,qt,null),e(qt,yLr),e(qt,$7e),e($7e,xLr),e(qt,$Lr),e(qt,Cc),e(Cc,kLr),e(Cc,k7e),e(k7e,SLr),e(Cc,RLr),e(Cc,XJ),e(XJ,PLr),e(Cc,BLr),e(qt,ILr),M(gC,qt,null),e(ir,NLr),e(ir,Ir),M(S9,Ir,null),e(Ir,qLr),e(Ir,S7e),e(S7e,jLr),e(Ir,DLr),e(Ir,fn),e(fn,GLr),e(fn,R7e),e(R7e,OLr),e(fn,VLr),e(fn,P7e),e(P7e,XLr),e(fn,zLr),e(fn,B7e),e(B7e,WLr),e(fn,QLr),e(Ir,HLr),e(Ir,ce),e(ce,hC),e(hC,I7e),e(I7e,ULr),e(hC,JLr),e(hC,zJ),e(zJ,YLr),e(hC,KLr),e(ce,ZLr),e(ce,pC),e(pC,N7e),e(N7e,eyr),e(pC,oyr),e(pC,WJ),e(WJ,ryr),e(pC,tyr),e(ce,ayr),e(ce,_C),e(_C,q7e),e(q7e,nyr),e(_C,syr),e(_C,QJ),e(QJ,lyr),e(_C,iyr),e(ce,dyr),e(ce,uC),e(uC,j7e),e(j7e,cyr),e(uC,fyr),e(uC,HJ),e(HJ,myr),e(uC,gyr),e(ce,hyr),e(ce,bC),e(bC,D7e),e(D7e,pyr),e(bC,_yr),e(bC,UJ),e(UJ,uyr),e(bC,byr),e(ce,vyr),e(ce,vC),e(vC,G7e),e(G7e,Fyr),e(vC,Tyr),e(vC,JJ),e(JJ,Myr),e(vC,Eyr),e(ce,Cyr),e(ce,FC),e(FC,O7e),e(O7e,wyr),e(FC,Ayr),e(FC,YJ),e(YJ,Lyr),e(FC,yyr),e(ce,xyr),e(ce,TC),e(TC,V7e),e(V7e,$yr),e(TC,kyr),e(TC,KJ),e(KJ,Syr),e(TC,Ryr),e(ce,Pyr),e(ce,MC),e(MC,X7e),e(X7e,Byr),e(MC,Iyr),e(MC,ZJ),e(ZJ,Nyr),e(MC,qyr),e(ce,jyr),e(ce,EC),e(EC,z7e),e(z7e,Dyr),e(EC,Gyr),e(EC,eY),e(eY,Oyr),e(EC,Vyr),e(ce,Xyr),e(ce,CC),e(CC,W7e),e(W7e,zyr),e(CC,Wyr),e(CC,oY),e(oY,Qyr),e(CC,Hyr),e(ce,Uyr),e(ce,wC),e(wC,Q7e),e(Q7e,Jyr),e(wC,Yyr),e(wC,rY),e(rY,Kyr),e(wC,Zyr),e(ce,e8r),e(ce,AC),e(AC,H7e),e(H7e,o8r),e(AC,r8r),e(AC,tY),e(tY,t8r),e(AC,a8r),e(ce,n8r),e(ce,LC),e(LC,U7e),e(U7e,s8r),e(LC,l8r),e(LC,aY),e(aY,i8r),e(LC,d8r),e(ce,c8r),e(ce,yC),e(yC,J7e),e(J7e,f8r),e(yC,m8r),e(yC,nY),e(nY,g8r),e(yC,h8r),e(ce,p8r),e(ce,xC),e(xC,Y7e),e(Y7e,_8r),e(xC,u8r),e(xC,sY),e(sY,b8r),e(xC,v8r),e(ce,F8r),e(ce,$C),e($C,K7e),e(K7e,T8r),e($C,M8r),e($C,lY),e(lY,E8r),e($C,C8r),e(ce,w8r),e(ce,kC),e(kC,Z7e),e(Z7e,A8r),e(kC,L8r),e(kC,iY),e(iY,y8r),e(kC,x8r),e(ce,$8r),e(ce,SC),e(SC,eMe),e(eMe,k8r),e(SC,S8r),e(SC,dY),e(dY,R8r),e(SC,P8r),e(ce,B8r),e(ce,RC),e(RC,oMe),e(oMe,I8r),e(RC,N8r),e(RC,cY),e(cY,q8r),e(RC,j8r),e(Ir,D8r),M(PC,Ir,null),b(f,QDe,u),b(f,wc,u),e(wc,BC),e(BC,rMe),M(R9,rMe,null),e(wc,G8r),e(wc,tMe),e(tMe,O8r),b(f,HDe,u),b(f,dr,u),M(P9,dr,null),e(dr,V8r),e(dr,Ac),e(Ac,X8r),e(Ac,fY),e(fY,z8r),e(Ac,W8r),e(Ac,mY),e(mY,Q8r),e(Ac,H8r),e(dr,U8r),e(dr,B9),e(B9,J8r),e(B9,aMe),e(aMe,Y8r),e(B9,K8r),e(dr,Z8r),e(dr,jt),M(I9,jt,null),e(jt,e9r),e(jt,nMe),e(nMe,o9r),e(jt,r9r),e(jt,Lc),e(Lc,t9r),e(Lc,sMe),e(sMe,a9r),e(Lc,n9r),e(Lc,gY),e(gY,s9r),e(Lc,l9r),e(jt,i9r),M(IC,jt,null),e(dr,d9r),e(dr,Nr),M(N9,Nr,null),e(Nr,c9r),e(Nr,lMe),e(lMe,f9r),e(Nr,m9r),e(Nr,mn),e(mn,g9r),e(mn,iMe),e(iMe,h9r),e(mn,p9r),e(mn,dMe),e(dMe,_9r),e(mn,u9r),e(mn,cMe),e(cMe,b9r),e(mn,v9r),e(Nr,F9r),e(Nr,fMe),e(fMe,NC),e(NC,mMe),e(mMe,T9r),e(NC,M9r),e(NC,hY),e(hY,E9r),e(NC,C9r),e(Nr,w9r),M(qC,Nr,null),b(f,UDe,u),b(f,yc,u),e(yc,jC),e(jC,gMe),M(q9,gMe,null),e(yc,A9r),e(yc,hMe),e(hMe,L9r),b(f,JDe,u),b(f,cr,u),M(j9,cr,null),e(cr,y9r),e(cr,xc),e(xc,x9r),e(xc,pY),e(pY,$9r),e(xc,k9r),e(xc,_Y),e(_Y,S9r),e(xc,R9r),e(cr,P9r),e(cr,D9),e(D9,B9r),e(D9,pMe),e(pMe,I9r),e(D9,N9r),e(cr,q9r),e(cr,Dt),M(G9,Dt,null),e(Dt,j9r),e(Dt,_Me),e(_Me,D9r),e(Dt,G9r),e(Dt,$c),e($c,O9r),e($c,uMe),e(uMe,V9r),e($c,X9r),e($c,uY),e(uY,z9r),e($c,W9r),e(Dt,Q9r),M(DC,Dt,null),e(cr,H9r),e(cr,qr),M(O9,qr,null),e(qr,U9r),e(qr,bMe),e(bMe,J9r),e(qr,Y9r),e(qr,gn),e(gn,K9r),e(gn,vMe),e(vMe,Z9r),e(gn,exr),e(gn,FMe),e(FMe,oxr),e(gn,rxr),e(gn,TMe),e(TMe,txr),e(gn,axr),e(qr,nxr),e(qr,MMe),e(MMe,GC),e(GC,EMe),e(EMe,sxr),e(GC,lxr),e(GC,bY),e(bY,ixr),e(GC,dxr),e(qr,cxr),M(OC,qr,null),b(f,YDe,u),b(f,kc,u),e(kc,VC),e(VC,CMe),M(V9,CMe,null),e(kc,fxr),e(kc,wMe),e(wMe,mxr),b(f,KDe,u),b(f,fr,u),M(X9,fr,null),e(fr,gxr),e(fr,Sc),e(Sc,hxr),e(Sc,vY),e(vY,pxr),e(Sc,_xr),e(Sc,FY),e(FY,uxr),e(Sc,bxr),e(fr,vxr),e(fr,z9),e(z9,Fxr),e(z9,AMe),e(AMe,Txr),e(z9,Mxr),e(fr,Exr),e(fr,Gt),M(W9,Gt,null),e(Gt,Cxr),e(Gt,LMe),e(LMe,wxr),e(Gt,Axr),e(Gt,Rc),e(Rc,Lxr),e(Rc,yMe),e(yMe,yxr),e(Rc,xxr),e(Rc,TY),e(TY,$xr),e(Rc,kxr),e(Gt,Sxr),M(XC,Gt,null),e(fr,Rxr),e(fr,jr),M(Q9,jr,null),e(jr,Pxr),e(jr,xMe),e(xMe,Bxr),e(jr,Ixr),e(jr,hn),e(hn,Nxr),e(hn,$Me),e($Me,qxr),e(hn,jxr),e(hn,kMe),e(kMe,Dxr),e(hn,Gxr),e(hn,SMe),e(SMe,Oxr),e(hn,Vxr),e(jr,Xxr),e(jr,re),e(re,zC),e(zC,RMe),e(RMe,zxr),e(zC,Wxr),e(zC,MY),e(MY,Qxr),e(zC,Hxr),e(re,Uxr),e(re,WC),e(WC,PMe),e(PMe,Jxr),e(WC,Yxr),e(WC,EY),e(EY,Kxr),e(WC,Zxr),e(re,e$r),e(re,QC),e(QC,BMe),e(BMe,o$r),e(QC,r$r),e(QC,CY),e(CY,t$r),e(QC,a$r),e(re,n$r),e(re,HC),e(HC,IMe),e(IMe,s$r),e(HC,l$r),e(HC,wY),e(wY,i$r),e(HC,d$r),e(re,c$r),e(re,UC),e(UC,NMe),e(NMe,f$r),e(UC,m$r),e(UC,AY),e(AY,g$r),e(UC,h$r),e(re,p$r),e(re,JC),e(JC,qMe),e(qMe,_$r),e(JC,u$r),e(JC,LY),e(LY,b$r),e(JC,v$r),e(re,F$r),e(re,YC),e(YC,jMe),e(jMe,T$r),e(YC,M$r),e(YC,yY),e(yY,E$r),e(YC,C$r),e(re,w$r),e(re,KC),e(KC,DMe),e(DMe,A$r),e(KC,L$r),e(KC,xY),e(xY,y$r),e(KC,x$r),e(re,$$r),e(re,ZC),e(ZC,GMe),e(GMe,k$r),e(ZC,S$r),e(ZC,$Y),e($Y,R$r),e(ZC,P$r),e(re,B$r),e(re,e5),e(e5,OMe),e(OMe,I$r),e(e5,N$r),e(e5,kY),e(kY,q$r),e(e5,j$r),e(re,D$r),e(re,o5),e(o5,VMe),e(VMe,G$r),e(o5,O$r),e(o5,SY),e(SY,V$r),e(o5,X$r),e(re,z$r),e(re,r5),e(r5,XMe),e(XMe,W$r),e(r5,Q$r),e(r5,RY),e(RY,H$r),e(r5,U$r),e(re,J$r),e(re,t5),e(t5,zMe),e(zMe,Y$r),e(t5,K$r),e(t5,PY),e(PY,Z$r),e(t5,ekr),e(re,okr),e(re,a5),e(a5,WMe),e(WMe,rkr),e(a5,tkr),e(a5,BY),e(BY,akr),e(a5,nkr),e(re,skr),e(re,n5),e(n5,QMe),e(QMe,lkr),e(n5,ikr),e(n5,IY),e(IY,dkr),e(n5,ckr),e(re,fkr),e(re,s5),e(s5,HMe),e(HMe,mkr),e(s5,gkr),e(s5,NY),e(NY,hkr),e(s5,pkr),e(re,_kr),e(re,l5),e(l5,UMe),e(UMe,ukr),e(l5,bkr),e(l5,qY),e(qY,vkr),e(l5,Fkr),e(re,Tkr),e(re,i5),e(i5,JMe),e(JMe,Mkr),e(i5,Ekr),e(i5,jY),e(jY,Ckr),e(i5,wkr),e(re,Akr),e(re,d5),e(d5,YMe),e(YMe,Lkr),e(d5,ykr),e(d5,DY),e(DY,xkr),e(d5,$kr),e(re,kkr),e(re,c5),e(c5,KMe),e(KMe,Skr),e(c5,Rkr),e(c5,GY),e(GY,Pkr),e(c5,Bkr),e(re,Ikr),e(re,f5),e(f5,ZMe),e(ZMe,Nkr),e(f5,qkr),e(f5,OY),e(OY,jkr),e(f5,Dkr),e(re,Gkr),e(re,m5),e(m5,e4e),e(e4e,Okr),e(m5,Vkr),e(m5,VY),e(VY,Xkr),e(m5,zkr),e(re,Wkr),e(re,g5),e(g5,o4e),e(o4e,Qkr),e(g5,Hkr),e(g5,XY),e(XY,Ukr),e(g5,Jkr),e(re,Ykr),e(re,h5),e(h5,r4e),e(r4e,Kkr),e(h5,Zkr),e(h5,zY),e(zY,eSr),e(h5,oSr),e(re,rSr),e(re,p5),e(p5,t4e),e(t4e,tSr),e(p5,aSr),e(p5,WY),e(WY,nSr),e(p5,sSr),e(re,lSr),e(re,_5),e(_5,a4e),e(a4e,iSr),e(_5,dSr),e(_5,QY),e(QY,cSr),e(_5,fSr),e(jr,mSr),M(u5,jr,null),b(f,ZDe,u),b(f,Pc,u),e(Pc,b5),e(b5,n4e),M(H9,n4e,null),e(Pc,gSr),e(Pc,s4e),e(s4e,hSr),b(f,eGe,u),b(f,mr,u),M(U9,mr,null),e(mr,pSr),e(mr,Bc),e(Bc,_Sr),e(Bc,HY),e(HY,uSr),e(Bc,bSr),e(Bc,UY),e(UY,vSr),e(Bc,FSr),e(mr,TSr),e(mr,J9),e(J9,MSr),e(J9,l4e),e(l4e,ESr),e(J9,CSr),e(mr,wSr),e(mr,Ot),M(Y9,Ot,null),e(Ot,ASr),e(Ot,i4e),e(i4e,LSr),e(Ot,ySr),e(Ot,Ic),e(Ic,xSr),e(Ic,d4e),e(d4e,$Sr),e(Ic,kSr),e(Ic,JY),e(JY,SSr),e(Ic,RSr),e(Ot,PSr),M(v5,Ot,null),e(mr,BSr),e(mr,Dr),M(K9,Dr,null),e(Dr,ISr),e(Dr,c4e),e(c4e,NSr),e(Dr,qSr),e(Dr,pn),e(pn,jSr),e(pn,f4e),e(f4e,DSr),e(pn,GSr),e(pn,m4e),e(m4e,OSr),e(pn,VSr),e(pn,g4e),e(g4e,XSr),e(pn,zSr),e(Dr,WSr),e(Dr,xe),e(xe,F5),e(F5,h4e),e(h4e,QSr),e(F5,HSr),e(F5,YY),e(YY,USr),e(F5,JSr),e(xe,YSr),e(xe,T5),e(T5,p4e),e(p4e,KSr),e(T5,ZSr),e(T5,KY),e(KY,eRr),e(T5,oRr),e(xe,rRr),e(xe,M5),e(M5,_4e),e(_4e,tRr),e(M5,aRr),e(M5,ZY),e(ZY,nRr),e(M5,sRr),e(xe,lRr),e(xe,E5),e(E5,u4e),e(u4e,iRr),e(E5,dRr),e(E5,eK),e(eK,cRr),e(E5,fRr),e(xe,mRr),e(xe,C5),e(C5,b4e),e(b4e,gRr),e(C5,hRr),e(C5,oK),e(oK,pRr),e(C5,_Rr),e(xe,uRr),e(xe,w5),e(w5,v4e),e(v4e,bRr),e(w5,vRr),e(w5,rK),e(rK,FRr),e(w5,TRr),e(xe,MRr),e(xe,A5),e(A5,F4e),e(F4e,ERr),e(A5,CRr),e(A5,tK),e(tK,wRr),e(A5,ARr),e(xe,LRr),e(xe,L5),e(L5,T4e),e(T4e,yRr),e(L5,xRr),e(L5,aK),e(aK,$Rr),e(L5,kRr),e(xe,SRr),e(xe,y5),e(y5,M4e),e(M4e,RRr),e(y5,PRr),e(y5,nK),e(nK,BRr),e(y5,IRr),e(xe,NRr),e(xe,x5),e(x5,E4e),e(E4e,qRr),e(x5,jRr),e(x5,sK),e(sK,DRr),e(x5,GRr),e(Dr,ORr),M($5,Dr,null),b(f,oGe,u),b(f,Nc,u),e(Nc,k5),e(k5,C4e),M(Z9,C4e,null),e(Nc,VRr),e(Nc,w4e),e(w4e,XRr),b(f,rGe,u),b(f,gr,u),M(ex,gr,null),e(gr,zRr),e(gr,qc),e(qc,WRr),e(qc,lK),e(lK,QRr),e(qc,HRr),e(qc,iK),e(iK,URr),e(qc,JRr),e(gr,YRr),e(gr,ox),e(ox,KRr),e(ox,A4e),e(A4e,ZRr),e(ox,ePr),e(gr,oPr),e(gr,Vt),M(rx,Vt,null),e(Vt,rPr),e(Vt,L4e),e(L4e,tPr),e(Vt,aPr),e(Vt,jc),e(jc,nPr),e(jc,y4e),e(y4e,sPr),e(jc,lPr),e(jc,dK),e(dK,iPr),e(jc,dPr),e(Vt,cPr),M(S5,Vt,null),e(gr,fPr),e(gr,Gr),M(tx,Gr,null),e(Gr,mPr),e(Gr,x4e),e(x4e,gPr),e(Gr,hPr),e(Gr,_n),e(_n,pPr),e(_n,$4e),e($4e,_Pr),e(_n,uPr),e(_n,k4e),e(k4e,bPr),e(_n,vPr),e(_n,S4e),e(S4e,FPr),e(_n,TPr),e(Gr,MPr),e(Gr,Ee),e(Ee,R5),e(R5,R4e),e(R4e,EPr),e(R5,CPr),e(R5,cK),e(cK,wPr),e(R5,APr),e(Ee,LPr),e(Ee,P5),e(P5,P4e),e(P4e,yPr),e(P5,xPr),e(P5,fK),e(fK,$Pr),e(P5,kPr),e(Ee,SPr),e(Ee,B5),e(B5,B4e),e(B4e,RPr),e(B5,PPr),e(B5,mK),e(mK,BPr),e(B5,IPr),e(Ee,NPr),e(Ee,I5),e(I5,I4e),e(I4e,qPr),e(I5,jPr),e(I5,gK),e(gK,DPr),e(I5,GPr),e(Ee,OPr),e(Ee,N5),e(N5,N4e),e(N4e,VPr),e(N5,XPr),e(N5,hK),e(hK,zPr),e(N5,WPr),e(Ee,QPr),e(Ee,q5),e(q5,q4e),e(q4e,HPr),e(q5,UPr),e(q5,pK),e(pK,JPr),e(q5,YPr),e(Ee,KPr),e(Ee,j5),e(j5,j4e),e(j4e,ZPr),e(j5,eBr),e(j5,_K),e(_K,oBr),e(j5,rBr),e(Ee,tBr),e(Ee,D5),e(D5,D4e),e(D4e,aBr),e(D5,nBr),e(D5,uK),e(uK,sBr),e(D5,lBr),e(Ee,iBr),e(Ee,G5),e(G5,G4e),e(G4e,dBr),e(G5,cBr),e(G5,bK),e(bK,fBr),e(G5,mBr),e(Ee,gBr),e(Ee,O5),e(O5,O4e),e(O4e,hBr),e(O5,pBr),e(O5,vK),e(vK,_Br),e(O5,uBr),e(Ee,bBr),e(Ee,V5),e(V5,V4e),e(V4e,vBr),e(V5,FBr),e(V5,FK),e(FK,TBr),e(V5,MBr),e(Ee,EBr),e(Ee,X5),e(X5,X4e),e(X4e,CBr),e(X5,wBr),e(X5,TK),e(TK,ABr),e(X5,LBr),e(Gr,yBr),M(z5,Gr,null),b(f,tGe,u),b(f,Dc,u),e(Dc,W5),e(W5,z4e),M(ax,z4e,null),e(Dc,xBr),e(Dc,W4e),e(W4e,$Br),b(f,aGe,u),b(f,hr,u),M(nx,hr,null),e(hr,kBr),e(hr,Gc),e(Gc,SBr),e(Gc,MK),e(MK,RBr),e(Gc,PBr),e(Gc,EK),e(EK,BBr),e(Gc,IBr),e(hr,NBr),e(hr,sx),e(sx,qBr),e(sx,Q4e),e(Q4e,jBr),e(sx,DBr),e(hr,GBr),e(hr,Xt),M(lx,Xt,null),e(Xt,OBr),e(Xt,H4e),e(H4e,VBr),e(Xt,XBr),e(Xt,Oc),e(Oc,zBr),e(Oc,U4e),e(U4e,WBr),e(Oc,QBr),e(Oc,CK),e(CK,HBr),e(Oc,UBr),e(Xt,JBr),M(Q5,Xt,null),e(hr,YBr),e(hr,Or),M(ix,Or,null),e(Or,KBr),e(Or,J4e),e(J4e,ZBr),e(Or,eIr),e(Or,un),e(un,oIr),e(un,Y4e),e(Y4e,rIr),e(un,tIr),e(un,K4e),e(K4e,aIr),e(un,nIr),e(un,Z4e),e(Z4e,sIr),e(un,lIr),e(Or,iIr),e(Or,$e),e($e,H5),e(H5,eEe),e(eEe,dIr),e(H5,cIr),e(H5,wK),e(wK,fIr),e(H5,mIr),e($e,gIr),e($e,U5),e(U5,oEe),e(oEe,hIr),e(U5,pIr),e(U5,AK),e(AK,_Ir),e(U5,uIr),e($e,bIr),e($e,J5),e(J5,rEe),e(rEe,vIr),e(J5,FIr),e(J5,LK),e(LK,TIr),e(J5,MIr),e($e,EIr),e($e,Y5),e(Y5,tEe),e(tEe,CIr),e(Y5,wIr),e(Y5,yK),e(yK,AIr),e(Y5,LIr),e($e,yIr),e($e,K5),e(K5,aEe),e(aEe,xIr),e(K5,$Ir),e(K5,xK),e(xK,kIr),e(K5,SIr),e($e,RIr),e($e,Z5),e(Z5,nEe),e(nEe,PIr),e(Z5,BIr),e(Z5,$K),e($K,IIr),e(Z5,NIr),e($e,qIr),e($e,e0),e(e0,sEe),e(sEe,jIr),e(e0,DIr),e(e0,kK),e(kK,GIr),e(e0,OIr),e($e,VIr),e($e,o0),e(o0,lEe),e(lEe,XIr),e(o0,zIr),e(o0,SK),e(SK,WIr),e(o0,QIr),e($e,HIr),e($e,r0),e(r0,iEe),e(iEe,UIr),e(r0,JIr),e(r0,RK),e(RK,YIr),e(r0,KIr),e($e,ZIr),e($e,t0),e(t0,dEe),e(dEe,eNr),e(t0,oNr),e(t0,PK),e(PK,rNr),e(t0,tNr),e(Or,aNr),M(a0,Or,null),b(f,nGe,u),b(f,Vc,u),e(Vc,n0),e(n0,cEe),M(dx,cEe,null),e(Vc,nNr),e(Vc,fEe),e(fEe,sNr),b(f,sGe,u),b(f,pr,u),M(cx,pr,null),e(pr,lNr),e(pr,Xc),e(Xc,iNr),e(Xc,BK),e(BK,dNr),e(Xc,cNr),e(Xc,IK),e(IK,fNr),e(Xc,mNr),e(pr,gNr),e(pr,fx),e(fx,hNr),e(fx,mEe),e(mEe,pNr),e(fx,_Nr),e(pr,uNr),e(pr,zt),M(mx,zt,null),e(zt,bNr),e(zt,gEe),e(gEe,vNr),e(zt,FNr),e(zt,zc),e(zc,TNr),e(zc,hEe),e(hEe,MNr),e(zc,ENr),e(zc,NK),e(NK,CNr),e(zc,wNr),e(zt,ANr),M(s0,zt,null),e(pr,LNr),e(pr,Vr),M(gx,Vr,null),e(Vr,yNr),e(Vr,pEe),e(pEe,xNr),e(Vr,$Nr),e(Vr,bn),e(bn,kNr),e(bn,_Ee),e(_Ee,SNr),e(bn,RNr),e(bn,uEe),e(uEe,PNr),e(bn,BNr),e(bn,bEe),e(bEe,INr),e(bn,NNr),e(Vr,qNr),e(Vr,Pe),e(Pe,l0),e(l0,vEe),e(vEe,jNr),e(l0,DNr),e(l0,qK),e(qK,GNr),e(l0,ONr),e(Pe,VNr),e(Pe,i0),e(i0,FEe),e(FEe,XNr),e(i0,zNr),e(i0,jK),e(jK,WNr),e(i0,QNr),e(Pe,HNr),e(Pe,d0),e(d0,TEe),e(TEe,UNr),e(d0,JNr),e(d0,DK),e(DK,YNr),e(d0,KNr),e(Pe,ZNr),e(Pe,c0),e(c0,MEe),e(MEe,eqr),e(c0,oqr),e(c0,GK),e(GK,rqr),e(c0,tqr),e(Pe,aqr),e(Pe,f0),e(f0,EEe),e(EEe,nqr),e(f0,sqr),e(f0,OK),e(OK,lqr),e(f0,iqr),e(Pe,dqr),e(Pe,m0),e(m0,CEe),e(CEe,cqr),e(m0,fqr),e(m0,VK),e(VK,mqr),e(m0,gqr),e(Pe,hqr),e(Pe,g0),e(g0,wEe),e(wEe,pqr),e(g0,_qr),e(g0,XK),e(XK,uqr),e(g0,bqr),e(Pe,vqr),e(Pe,h0),e(h0,AEe),e(AEe,Fqr),e(h0,Tqr),e(h0,zK),e(zK,Mqr),e(h0,Eqr),e(Pe,Cqr),e(Pe,p0),e(p0,LEe),e(LEe,wqr),e(p0,Aqr),e(p0,WK),e(WK,Lqr),e(p0,yqr),e(Vr,xqr),M(_0,Vr,null),b(f,lGe,u),b(f,Wc,u),e(Wc,u0),e(u0,yEe),M(hx,yEe,null),e(Wc,$qr),e(Wc,xEe),e(xEe,kqr),b(f,iGe,u),b(f,_r,u),M(px,_r,null),e(_r,Sqr),e(_r,Qc),e(Qc,Rqr),e(Qc,QK),e(QK,Pqr),e(Qc,Bqr),e(Qc,HK),e(HK,Iqr),e(Qc,Nqr),e(_r,qqr),e(_r,_x),e(_x,jqr),e(_x,$Ee),e($Ee,Dqr),e(_x,Gqr),e(_r,Oqr),e(_r,Wt),M(ux,Wt,null),e(Wt,Vqr),e(Wt,kEe),e(kEe,Xqr),e(Wt,zqr),e(Wt,Hc),e(Hc,Wqr),e(Hc,SEe),e(SEe,Qqr),e(Hc,Hqr),e(Hc,UK),e(UK,Uqr),e(Hc,Jqr),e(Wt,Yqr),M(b0,Wt,null),e(_r,Kqr),e(_r,Xr),M(bx,Xr,null),e(Xr,Zqr),e(Xr,REe),e(REe,ejr),e(Xr,ojr),e(Xr,vn),e(vn,rjr),e(vn,PEe),e(PEe,tjr),e(vn,ajr),e(vn,BEe),e(BEe,njr),e(vn,sjr),e(vn,IEe),e(IEe,ljr),e(vn,ijr),e(Xr,djr),e(Xr,ke),e(ke,v0),e(v0,NEe),e(NEe,cjr),e(v0,fjr),e(v0,JK),e(JK,mjr),e(v0,gjr),e(ke,hjr),e(ke,F0),e(F0,qEe),e(qEe,pjr),e(F0,_jr),e(F0,YK),e(YK,ujr),e(F0,bjr),e(ke,vjr),e(ke,T0),e(T0,jEe),e(jEe,Fjr),e(T0,Tjr),e(T0,KK),e(KK,Mjr),e(T0,Ejr),e(ke,Cjr),e(ke,M0),e(M0,DEe),e(DEe,wjr),e(M0,Ajr),e(M0,ZK),e(ZK,Ljr),e(M0,yjr),e(ke,xjr),e(ke,E0),e(E0,GEe),e(GEe,$jr),e(E0,kjr),e(E0,eZ),e(eZ,Sjr),e(E0,Rjr),e(ke,Pjr),e(ke,C0),e(C0,OEe),e(OEe,Bjr),e(C0,Ijr),e(C0,oZ),e(oZ,Njr),e(C0,qjr),e(ke,jjr),e(ke,w0),e(w0,VEe),e(VEe,Djr),e(w0,Gjr),e(w0,rZ),e(rZ,Ojr),e(w0,Vjr),e(ke,Xjr),e(ke,A0),e(A0,XEe),e(XEe,zjr),e(A0,Wjr),e(A0,tZ),e(tZ,Qjr),e(A0,Hjr),e(ke,Ujr),e(ke,L0),e(L0,zEe),e(zEe,Jjr),e(L0,Yjr),e(L0,aZ),e(aZ,Kjr),e(L0,Zjr),e(ke,eDr),e(ke,y0),e(y0,WEe),e(WEe,oDr),e(y0,rDr),e(y0,nZ),e(nZ,tDr),e(y0,aDr),e(Xr,nDr),M(x0,Xr,null),b(f,dGe,u),b(f,Uc,u),e(Uc,$0),e($0,QEe),M(vx,QEe,null),e(Uc,sDr),e(Uc,HEe),e(HEe,lDr),b(f,cGe,u),b(f,ur,u),M(Fx,ur,null),e(ur,iDr),e(ur,Jc),e(Jc,dDr),e(Jc,sZ),e(sZ,cDr),e(Jc,fDr),e(Jc,lZ),e(lZ,mDr),e(Jc,gDr),e(ur,hDr),e(ur,Tx),e(Tx,pDr),e(Tx,UEe),e(UEe,_Dr),e(Tx,uDr),e(ur,bDr),e(ur,Qt),M(Mx,Qt,null),e(Qt,vDr),e(Qt,JEe),e(JEe,FDr),e(Qt,TDr),e(Qt,Yc),e(Yc,MDr),e(Yc,YEe),e(YEe,EDr),e(Yc,CDr),e(Yc,iZ),e(iZ,wDr),e(Yc,ADr),e(Qt,LDr),M(k0,Qt,null),e(ur,yDr),e(ur,zr),M(Ex,zr,null),e(zr,xDr),e(zr,KEe),e(KEe,$Dr),e(zr,kDr),e(zr,Fn),e(Fn,SDr),e(Fn,ZEe),e(ZEe,RDr),e(Fn,PDr),e(Fn,eCe),e(eCe,BDr),e(Fn,IDr),e(Fn,oCe),e(oCe,NDr),e(Fn,qDr),e(zr,jDr),e(zr,Se),e(Se,S0),e(S0,rCe),e(rCe,DDr),e(S0,GDr),e(S0,dZ),e(dZ,ODr),e(S0,VDr),e(Se,XDr),e(Se,R0),e(R0,tCe),e(tCe,zDr),e(R0,WDr),e(R0,cZ),e(cZ,QDr),e(R0,HDr),e(Se,UDr),e(Se,P0),e(P0,aCe),e(aCe,JDr),e(P0,YDr),e(P0,fZ),e(fZ,KDr),e(P0,ZDr),e(Se,eGr),e(Se,B0),e(B0,nCe),e(nCe,oGr),e(B0,rGr),e(B0,mZ),e(mZ,tGr),e(B0,aGr),e(Se,nGr),e(Se,I0),e(I0,sCe),e(sCe,sGr),e(I0,lGr),e(I0,gZ),e(gZ,iGr),e(I0,dGr),e(Se,cGr),e(Se,N0),e(N0,lCe),e(lCe,fGr),e(N0,mGr),e(N0,hZ),e(hZ,gGr),e(N0,hGr),e(Se,pGr),e(Se,q0),e(q0,iCe),e(iCe,_Gr),e(q0,uGr),e(q0,pZ),e(pZ,bGr),e(q0,vGr),e(Se,FGr),e(Se,j0),e(j0,dCe),e(dCe,TGr),e(j0,MGr),e(j0,_Z),e(_Z,EGr),e(j0,CGr),e(Se,wGr),e(Se,D0),e(D0,cCe),e(cCe,AGr),e(D0,LGr),e(D0,uZ),e(uZ,yGr),e(D0,xGr),e(Se,$Gr),e(Se,G0),e(G0,fCe),e(fCe,kGr),e(G0,SGr),e(G0,bZ),e(bZ,RGr),e(G0,PGr),e(zr,BGr),M(O0,zr,null),b(f,fGe,u),b(f,Kc,u),e(Kc,V0),e(V0,mCe),M(Cx,mCe,null),e(Kc,IGr),e(Kc,gCe),e(gCe,NGr),b(f,mGe,u),b(f,br,u),M(wx,br,null),e(br,qGr),e(br,Zc),e(Zc,jGr),e(Zc,vZ),e(vZ,DGr),e(Zc,GGr),e(Zc,FZ),e(FZ,OGr),e(Zc,VGr),e(br,XGr),e(br,Ax),e(Ax,zGr),e(Ax,hCe),e(hCe,WGr),e(Ax,QGr),e(br,HGr),e(br,Ht),M(Lx,Ht,null),e(Ht,UGr),e(Ht,pCe),e(pCe,JGr),e(Ht,YGr),e(Ht,ef),e(ef,KGr),e(ef,_Ce),e(_Ce,ZGr),e(ef,eOr),e(ef,TZ),e(TZ,oOr),e(ef,rOr),e(Ht,tOr),M(X0,Ht,null),e(br,aOr),e(br,Wr),M(yx,Wr,null),e(Wr,nOr),e(Wr,uCe),e(uCe,sOr),e(Wr,lOr),e(Wr,Tn),e(Tn,iOr),e(Tn,bCe),e(bCe,dOr),e(Tn,cOr),e(Tn,vCe),e(vCe,fOr),e(Tn,mOr),e(Tn,FCe),e(FCe,gOr),e(Tn,hOr),e(Wr,pOr),e(Wr,Oe),e(Oe,z0),e(z0,TCe),e(TCe,_Or),e(z0,uOr),e(z0,MZ),e(MZ,bOr),e(z0,vOr),e(Oe,FOr),e(Oe,W0),e(W0,MCe),e(MCe,TOr),e(W0,MOr),e(W0,EZ),e(EZ,EOr),e(W0,COr),e(Oe,wOr),e(Oe,Q0),e(Q0,ECe),e(ECe,AOr),e(Q0,LOr),e(Q0,CZ),e(CZ,yOr),e(Q0,xOr),e(Oe,$Or),e(Oe,H0),e(H0,CCe),e(CCe,kOr),e(H0,SOr),e(H0,wZ),e(wZ,ROr),e(H0,POr),e(Oe,BOr),e(Oe,U0),e(U0,wCe),e(wCe,IOr),e(U0,NOr),e(U0,AZ),e(AZ,qOr),e(U0,jOr),e(Oe,DOr),e(Oe,J0),e(J0,ACe),e(ACe,GOr),e(J0,OOr),e(J0,LZ),e(LZ,VOr),e(J0,XOr),e(Oe,zOr),e(Oe,Y0),e(Y0,LCe),e(LCe,WOr),e(Y0,QOr),e(Y0,yZ),e(yZ,HOr),e(Y0,UOr),e(Oe,JOr),e(Oe,K0),e(K0,yCe),e(yCe,YOr),e(K0,KOr),e(K0,xZ),e(xZ,ZOr),e(K0,eVr),e(Wr,oVr),M(Z0,Wr,null),b(f,gGe,u),b(f,of,u),e(of,ew),e(ew,xCe),M(xx,xCe,null),e(of,rVr),e(of,$Ce),e($Ce,tVr),b(f,hGe,u),b(f,vr,u),M($x,vr,null),e(vr,aVr),e(vr,rf),e(rf,nVr),e(rf,$Z),e($Z,sVr),e(rf,lVr),e(rf,kZ),e(kZ,iVr),e(rf,dVr),e(vr,cVr),e(vr,kx),e(kx,fVr),e(kx,kCe),e(kCe,mVr),e(kx,gVr),e(vr,hVr),e(vr,Ut),M(Sx,Ut,null),e(Ut,pVr),e(Ut,SCe),e(SCe,_Vr),e(Ut,uVr),e(Ut,tf),e(tf,bVr),e(tf,RCe),e(RCe,vVr),e(tf,FVr),e(tf,SZ),e(SZ,TVr),e(tf,MVr),e(Ut,EVr),M(ow,Ut,null),e(vr,CVr),e(vr,Qr),M(Rx,Qr,null),e(Qr,wVr),e(Qr,PCe),e(PCe,AVr),e(Qr,LVr),e(Qr,Mn),e(Mn,yVr),e(Mn,BCe),e(BCe,xVr),e(Mn,$Vr),e(Mn,ICe),e(ICe,kVr),e(Mn,SVr),e(Mn,NCe),e(NCe,RVr),e(Mn,PVr),e(Qr,BVr),e(Qr,Ve),e(Ve,rw),e(rw,qCe),e(qCe,IVr),e(rw,NVr),e(rw,RZ),e(RZ,qVr),e(rw,jVr),e(Ve,DVr),e(Ve,tw),e(tw,jCe),e(jCe,GVr),e(tw,OVr),e(tw,PZ),e(PZ,VVr),e(tw,XVr),e(Ve,zVr),e(Ve,aw),e(aw,DCe),e(DCe,WVr),e(aw,QVr),e(aw,BZ),e(BZ,HVr),e(aw,UVr),e(Ve,JVr),e(Ve,nw),e(nw,GCe),e(GCe,YVr),e(nw,KVr),e(nw,IZ),e(IZ,ZVr),e(nw,eXr),e(Ve,oXr),e(Ve,sw),e(sw,OCe),e(OCe,rXr),e(sw,tXr),e(sw,NZ),e(NZ,aXr),e(sw,nXr),e(Ve,sXr),e(Ve,lw),e(lw,VCe),e(VCe,lXr),e(lw,iXr),e(lw,qZ),e(qZ,dXr),e(lw,cXr),e(Ve,fXr),e(Ve,iw),e(iw,XCe),e(XCe,mXr),e(iw,gXr),e(iw,jZ),e(jZ,hXr),e(iw,pXr),e(Ve,_Xr),e(Ve,dw),e(dw,zCe),e(zCe,uXr),e(dw,bXr),e(dw,DZ),e(DZ,vXr),e(dw,FXr),e(Qr,TXr),M(cw,Qr,null),b(f,pGe,u),b(f,af,u),e(af,fw),e(fw,WCe),M(Px,WCe,null),e(af,MXr),e(af,QCe),e(QCe,EXr),b(f,_Ge,u),b(f,Fr,u),M(Bx,Fr,null),e(Fr,CXr),e(Fr,nf),e(nf,wXr),e(nf,GZ),e(GZ,AXr),e(nf,LXr),e(nf,OZ),e(OZ,yXr),e(nf,xXr),e(Fr,$Xr),e(Fr,Ix),e(Ix,kXr),e(Ix,HCe),e(HCe,SXr),e(Ix,RXr),e(Fr,PXr),e(Fr,Jt),M(Nx,Jt,null),e(Jt,BXr),e(Jt,UCe),e(UCe,IXr),e(Jt,NXr),e(Jt,sf),e(sf,qXr),e(sf,JCe),e(JCe,jXr),e(sf,DXr),e(sf,VZ),e(VZ,GXr),e(sf,OXr),e(Jt,VXr),M(mw,Jt,null),e(Fr,XXr),e(Fr,Hr),M(qx,Hr,null),e(Hr,zXr),e(Hr,YCe),e(YCe,WXr),e(Hr,QXr),e(Hr,En),e(En,HXr),e(En,KCe),e(KCe,UXr),e(En,JXr),e(En,ZCe),e(ZCe,YXr),e(En,KXr),e(En,e5e),e(e5e,ZXr),e(En,ezr),e(Hr,ozr),e(Hr,o5e),e(o5e,gw),e(gw,r5e),e(r5e,rzr),e(gw,tzr),e(gw,XZ),e(XZ,azr),e(gw,nzr),e(Hr,szr),M(hw,Hr,null),b(f,uGe,u),b(f,lf,u),e(lf,pw),e(pw,t5e),M(jx,t5e,null),e(lf,lzr),e(lf,a5e),e(a5e,izr),b(f,bGe,u),b(f,Tr,u),M(Dx,Tr,null),e(Tr,dzr),e(Tr,df),e(df,czr),e(df,zZ),e(zZ,fzr),e(df,mzr),e(df,WZ),e(WZ,gzr),e(df,hzr),e(Tr,pzr),e(Tr,Gx),e(Gx,_zr),e(Gx,n5e),e(n5e,uzr),e(Gx,bzr),e(Tr,vzr),e(Tr,Yt),M(Ox,Yt,null),e(Yt,Fzr),e(Yt,s5e),e(s5e,Tzr),e(Yt,Mzr),e(Yt,cf),e(cf,Ezr),e(cf,l5e),e(l5e,Czr),e(cf,wzr),e(cf,QZ),e(QZ,Azr),e(cf,Lzr),e(Yt,yzr),M(_w,Yt,null),e(Tr,xzr),e(Tr,Ur),M(Vx,Ur,null),e(Ur,$zr),e(Ur,i5e),e(i5e,kzr),e(Ur,Szr),e(Ur,Cn),e(Cn,Rzr),e(Cn,d5e),e(d5e,Pzr),e(Cn,Bzr),e(Cn,c5e),e(c5e,Izr),e(Cn,Nzr),e(Cn,f5e),e(f5e,qzr),e(Cn,jzr),e(Ur,Dzr),e(Ur,Xx),e(Xx,uw),e(uw,m5e),e(m5e,Gzr),e(uw,Ozr),e(uw,HZ),e(HZ,Vzr),e(uw,Xzr),e(Xx,zzr),e(Xx,bw),e(bw,g5e),e(g5e,Wzr),e(bw,Qzr),e(bw,UZ),e(UZ,Hzr),e(bw,Uzr),e(Ur,Jzr),M(vw,Ur,null),b(f,vGe,u),b(f,ff,u),e(ff,Fw),e(Fw,h5e),M(zx,h5e,null),e(ff,Yzr),e(ff,p5e),e(p5e,Kzr),b(f,FGe,u),b(f,Mr,u),M(Wx,Mr,null),e(Mr,Zzr),e(Mr,mf),e(mf,eWr),e(mf,JZ),e(JZ,oWr),e(mf,rWr),e(mf,YZ),e(YZ,tWr),e(mf,aWr),e(Mr,nWr),e(Mr,Qx),e(Qx,sWr),e(Qx,_5e),e(_5e,lWr),e(Qx,iWr),e(Mr,dWr),e(Mr,Kt),M(Hx,Kt,null),e(Kt,cWr),e(Kt,u5e),e(u5e,fWr),e(Kt,mWr),e(Kt,gf),e(gf,gWr),e(gf,b5e),e(b5e,hWr),e(gf,pWr),e(gf,KZ),e(KZ,_Wr),e(gf,uWr),e(Kt,bWr),M(Tw,Kt,null),e(Mr,vWr),e(Mr,Jr),M(Ux,Jr,null),e(Jr,FWr),e(Jr,v5e),e(v5e,TWr),e(Jr,MWr),e(Jr,wn),e(wn,EWr),e(wn,F5e),e(F5e,CWr),e(wn,wWr),e(wn,T5e),e(T5e,AWr),e(wn,LWr),e(wn,M5e),e(M5e,yWr),e(wn,xWr),e(Jr,$Wr),e(Jr,E5e),e(E5e,Mw),e(Mw,C5e),e(C5e,kWr),e(Mw,SWr),e(Mw,ZZ),e(ZZ,RWr),e(Mw,PWr),e(Jr,BWr),M(Ew,Jr,null),TGe=!0},p(f,[u]){const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),Mf.$set(Jx);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),yg.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),dh.$set(A5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),Xh.$set(L5e);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),zh.$set(Yx);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),mp.$set(y5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),gp.$set(An);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),_p.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),hu.$set($5e);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),_u.$set(k5e);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),s1.$set(Kx);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),i1.$set(S5e);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),Q1.$set(Zx);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),U1.$set(R5e);const e$={};u&2&&(e$.$$scope={dirty:u,ctx:f}),R3.$set(e$);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),B3.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),Z3.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),ob.$set(I5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Jb.$set(hf);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),Kb.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),x2.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),k2.$set(j5e);const o$={};u&2&&(o$.$$scope={dirty:u,ctx:f}),q2.$set(o$);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),D2.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),Mv.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),Cv.$set(O5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),mF.$set(et);const r$={};u&2&&(r$.$$scope={dirty:u,ctx:f}),hF.$set(r$);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),uF.$set(V5e);const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),vF.$set(t$);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),RF.$set(X5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),BF.$set(ot);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),qF.$set(z5e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),DF.$set(pf);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),YF.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),ZF.$set(Q5e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),sT.$set(L);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),iT.$set(Cw);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),FT.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),MT.$set(U5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),AT.$set(ww);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),yT.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),BT.$set(Y5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),NT.$set(Aw);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),OT.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),XT.$set(Z5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),HT.$set(Lw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),JT.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),ZT.$set(o0e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),o7.$set(yw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),l7.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),d7.$set(t0e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),m7.$set(xw);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),h7.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),lM.$set(n0e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),dM.$set($w);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),RM.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),BM.$set(l0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),UM.$set(kw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),YM.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),r4.$set(d0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),a4.$set(Sw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),w4.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),L4.$set(f0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),q4.$set(Rw);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),D4.$set(m0e);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),gE.$set(g0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),pE.$set(Pw);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),RE.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),BE.$set(p0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),qE.$set(Bw);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),DE.$set(_0e);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),OE.$set(u0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),XE.$set(Iw);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),fC.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),gC.$set(v0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),PC.$set(Nw);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),IC.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),qC.$set(T0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),DC.$set(qw);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),OC.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),XC.$set(E0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),u5.$set(jw);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),v5.$set(C0e);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),$5.$set(w0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),S5.$set(Dw);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),z5.$set(A0e);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),Q5.$set(L0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),a0.$set(Gw);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),s0.$set(y0e);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),_0.$set(x0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),b0.$set(Ow);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),x0.$set($0e);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),k0.$set(k0e);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),O0.$set(Vw);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),X0.$set(S0e);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),Z0.$set(R0e);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),ow.$set(Xw);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),cw.$set(P0e);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),mw.$set(B0e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),hw.$set(zw);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),_w.$set(I0e);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),vw.$set(N0e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),Tw.$set(Ww);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),Ew.$set(q0e)},i(f){TGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(Mf.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(Y6.$$.fragment,f),E(yg.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(tL.$$.fragment,f),E(dh.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(dL.$$.fragment,f),E(Xh.$$.fragment,f),E(zh.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(pL.$$.fragment,f),E(mp.$$.fragment,f),E(gp.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(_p.$$.fragment,f),E(TL.$$.fragment,f),E(hu.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(_u.$$.fragment,f),E(AL.$$.fragment,f),E(s1.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E($L.$$.fragment,f),E(i1.$$.fragment,f),E(kL.$$.fragment,f),E(Q1.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(U1.$$.fragment,f),E(IL.$$.fragment,f),E(R3.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(B3.$$.fragment,f),E(GL.$$.fragment,f),E(Z3.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(ob.$$.fragment,f),E(WL.$$.fragment,f),E(Jb.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(Kb.$$.fragment,f),E(YL.$$.fragment,f),E(x2.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(k2.$$.fragment,f),E(ry.$$.fragment,f),E(q2.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(D2.$$.fragment,f),E(ly.$$.fragment,f),E(Mv.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Cv.$$.fragment,f),E(my.$$.fragment,f),E(mF.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(hF.$$.fragment,f),E(uy.$$.fragment,f),E(uF.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(vF.$$.fragment,f),E(My.$$.fragment,f),E(RF.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(BF.$$.fragment,f),E(Ly.$$.fragment,f),E(qF.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(DF.$$.fragment,f),E(Sy.$$.fragment,f),E(YF.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(ZF.$$.fragment,f),E(Ny.$$.fragment,f),E(sT.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(iT.$$.fragment,f),E(Oy.$$.fragment,f),E(FT.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(MT.$$.fragment,f),E(Qy.$$.fragment,f),E(AT.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(yT.$$.fragment,f),E(Zy.$$.fragment,f),E(BT.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(NT.$$.fragment,f),E(a8.$$.fragment,f),E(OT.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(XT.$$.fragment,f),E(d8.$$.fragment,f),E(HT.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(JT.$$.fragment,f),E(p8.$$.fragment,f),E(ZT.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(o7.$$.fragment,f),E(F8.$$.fragment,f),E(l7.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(d7.$$.fragment,f),E(w8.$$.fragment,f),E(m7.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(h7.$$.fragment,f),E($8.$$.fragment,f),E(lM.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(dM.$$.fragment,f),E(B8.$$.fragment,f),E(RM.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(BM.$$.fragment,f),E(D8.$$.fragment,f),E(UM.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(YM.$$.fragment,f),E(z8.$$.fragment,f),E(r4.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(a4.$$.fragment,f),E(J8.$$.fragment,f),E(w4.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(L4.$$.fragment,f),E(o9.$$.fragment,f),E(q4.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(D4.$$.fragment,f),E(s9.$$.fragment,f),E(gE.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(pE.$$.fragment,f),E(f9.$$.fragment,f),E(RE.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(BE.$$.fragment,f),E(_9.$$.fragment,f),E(qE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(DE.$$.fragment,f),E(M9.$$.fragment,f),E(OE.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(XE.$$.fragment,f),E(L9.$$.fragment,f),E(fC.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(gC.$$.fragment,f),E(S9.$$.fragment,f),E(PC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(IC.$$.fragment,f),E(N9.$$.fragment,f),E(qC.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(DC.$$.fragment,f),E(O9.$$.fragment,f),E(OC.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(XC.$$.fragment,f),E(Q9.$$.fragment,f),E(u5.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(v5.$$.fragment,f),E(K9.$$.fragment,f),E($5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(S5.$$.fragment,f),E(tx.$$.fragment,f),E(z5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(Q5.$$.fragment,f),E(ix.$$.fragment,f),E(a0.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(s0.$$.fragment,f),E(gx.$$.fragment,f),E(_0.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(b0.$$.fragment,f),E(bx.$$.fragment,f),E(x0.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(k0.$$.fragment,f),E(Ex.$$.fragment,f),E(O0.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(X0.$$.fragment,f),E(yx.$$.fragment,f),E(Z0.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(ow.$$.fragment,f),E(Rx.$$.fragment,f),E(cw.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(mw.$$.fragment,f),E(qx.$$.fragment,f),E(hw.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(_w.$$.fragment,f),E(Vx.$$.fragment,f),E(vw.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Tw.$$.fragment,f),E(Ux.$$.fragment,f),E(Ew.$$.fragment,f),TGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(Mf.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(Y6.$$.fragment,f),C(yg.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(tL.$$.fragment,f),C(dh.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(dL.$$.fragment,f),C(Xh.$$.fragment,f),C(zh.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(pL.$$.fragment,f),C(mp.$$.fragment,f),C(gp.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(_p.$$.fragment,f),C(TL.$$.fragment,f),C(hu.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(_u.$$.fragment,f),C(AL.$$.fragment,f),C(s1.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C($L.$$.fragment,f),C(i1.$$.fragment,f),C(kL.$$.fragment,f),C(Q1.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(U1.$$.fragment,f),C(IL.$$.fragment,f),C(R3.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(B3.$$.fragment,f),C(GL.$$.fragment,f),C(Z3.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(ob.$$.fragment,f),C(WL.$$.fragment,f),C(Jb.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(Kb.$$.fragment,f),C(YL.$$.fragment,f),C(x2.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(k2.$$.fragment,f),C(ry.$$.fragment,f),C(q2.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(D2.$$.fragment,f),C(ly.$$.fragment,f),C(Mv.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Cv.$$.fragment,f),C(my.$$.fragment,f),C(mF.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(hF.$$.fragment,f),C(uy.$$.fragment,f),C(uF.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(vF.$$.fragment,f),C(My.$$.fragment,f),C(RF.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(BF.$$.fragment,f),C(Ly.$$.fragment,f),C(qF.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(DF.$$.fragment,f),C(Sy.$$.fragment,f),C(YF.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(ZF.$$.fragment,f),C(Ny.$$.fragment,f),C(sT.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(iT.$$.fragment,f),C(Oy.$$.fragment,f),C(FT.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(MT.$$.fragment,f),C(Qy.$$.fragment,f),C(AT.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(yT.$$.fragment,f),C(Zy.$$.fragment,f),C(BT.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(NT.$$.fragment,f),C(a8.$$.fragment,f),C(OT.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(XT.$$.fragment,f),C(d8.$$.fragment,f),C(HT.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(JT.$$.fragment,f),C(p8.$$.fragment,f),C(ZT.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(o7.$$.fragment,f),C(F8.$$.fragment,f),C(l7.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(d7.$$.fragment,f),C(w8.$$.fragment,f),C(m7.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(h7.$$.fragment,f),C($8.$$.fragment,f),C(lM.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(dM.$$.fragment,f),C(B8.$$.fragment,f),C(RM.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(BM.$$.fragment,f),C(D8.$$.fragment,f),C(UM.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(YM.$$.fragment,f),C(z8.$$.fragment,f),C(r4.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(a4.$$.fragment,f),C(J8.$$.fragment,f),C(w4.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(L4.$$.fragment,f),C(o9.$$.fragment,f),C(q4.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(D4.$$.fragment,f),C(s9.$$.fragment,f),C(gE.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(pE.$$.fragment,f),C(f9.$$.fragment,f),C(RE.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(BE.$$.fragment,f),C(_9.$$.fragment,f),C(qE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(DE.$$.fragment,f),C(M9.$$.fragment,f),C(OE.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(XE.$$.fragment,f),C(L9.$$.fragment,f),C(fC.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(gC.$$.fragment,f),C(S9.$$.fragment,f),C(PC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(IC.$$.fragment,f),C(N9.$$.fragment,f),C(qC.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(DC.$$.fragment,f),C(O9.$$.fragment,f),C(OC.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(XC.$$.fragment,f),C(Q9.$$.fragment,f),C(u5.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(v5.$$.fragment,f),C(K9.$$.fragment,f),C($5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(S5.$$.fragment,f),C(tx.$$.fragment,f),C(z5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(Q5.$$.fragment,f),C(ix.$$.fragment,f),C(a0.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(s0.$$.fragment,f),C(gx.$$.fragment,f),C(_0.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(b0.$$.fragment,f),C(bx.$$.fragment,f),C(x0.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(k0.$$.fragment,f),C(Ex.$$.fragment,f),C(O0.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(X0.$$.fragment,f),C(yx.$$.fragment,f),C(Z0.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(ow.$$.fragment,f),C(Rx.$$.fragment,f),C(cw.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(mw.$$.fragment,f),C(qx.$$.fragment,f),C(hw.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(_w.$$.fragment,f),C(Vx.$$.fragment,f),C(vw.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Tw.$$.fragment,f),C(Ux.$$.fragment,f),C(Ew.$$.fragment,f),TGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(Ge),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(bje),f&&t(Fi),w(z6),f&&t(vje),f&&t(kn),f&&t(Fje),w(W6,f),f&&t(Tje),f&&t(_k),f&&t(Mje),w(Mf,f),f&&t(Eje),f&&t(Ti),w(Q6),f&&t(Cje),f&&t(Co),w(H6),w(Y6),w(yg),w(K6),f&&t(wje),f&&t(Ei),w(Z6),f&&t(Aje),f&&t(wo),w(eL),w(tL),w(dh),w(aL),f&&t(Lje),f&&t(Ci),w(nL),f&&t(yje),f&&t(Ao),w(sL),w(dL),w(Xh),w(zh),w(cL),f&&t(xje),f&&t(wi),w(fL),f&&t($je),f&&t(Lo),w(mL),w(pL),w(mp),w(gp),w(_L),f&&t(kje),f&&t(Li),w(uL),f&&t(Sje),f&&t(yo),w(bL),w(FL),w(_p),w(TL),w(hu),f&&t(Rje),f&&t($i),w(ML),f&&t(Pje),f&&t(xo),w(EL),w(wL),w(_u),w(AL),w(s1),f&&t(Bje),f&&t(Ri),w(LL),f&&t(Ije),f&&t($o),w(yL),w($L),w(i1),w(kL),w(Q1),f&&t(Nje),f&&t(Ii),w(SL),f&&t(qje),f&&t(ko),w(RL),w(BL),w(U1),w(IL),w(R3),f&&t(jje),f&&t(ji),w(NL),f&&t(Dje),f&&t(So),w(qL),w(DL),w(B3),w(GL),w(Z3),f&&t(Gje),f&&t(Oi),w(OL),f&&t(Oje),f&&t(Ro),w(VL),w(zL),w(ob),w(WL),w(Jb),f&&t(Vje),f&&t(zi),w(QL),f&&t(Xje),f&&t(Po),w(HL),w(JL),w(Kb),w(YL),w(x2),f&&t(zje),f&&t(Hi),w(KL),f&&t(Wje),f&&t(Bo),w(ZL),w(oy),w(k2),w(ry),w(q2),f&&t(Qje),f&&t(Yi),w(ty),f&&t(Hje),f&&t(Io),w(ay),w(sy),w(D2),w(ly),w(Mv),f&&t(Uje),f&&t(ed),w(iy),f&&t(Jje),f&&t(No),w(dy),w(fy),w(Cv),w(my),w(mF),f&&t(Yje),f&&t(td),w(gy),f&&t(Kje),f&&t(qo),w(hy),w(_y),w(hF),w(uy),w(uF),f&&t(Zje),f&&t(sd),w(by),f&&t(eDe),f&&t(jo),w(vy),w(Ty),w(vF),w(My),w(RF),f&&t(oDe),f&&t(dd),w(Ey),f&&t(rDe),f&&t(Do),w(Cy),w(Ay),w(BF),w(Ly),w(qF),f&&t(tDe),f&&t(md),w(yy),f&&t(aDe),f&&t(Go),w(xy),w(ky),w(DF),w(Sy),w(YF),f&&t(nDe),f&&t(pd),w(Ry),f&&t(sDe),f&&t(Oo),w(Py),w(Iy),w(ZF),w(Ny),w(sT),f&&t(lDe),f&&t(bd),w(qy),f&&t(iDe),f&&t(Vo),w(jy),w(Gy),w(iT),w(Oy),w(FT),f&&t(dDe),f&&t(Td),w(Vy),f&&t(cDe),f&&t(Xo),w(Xy),w(Wy),w(MT),w(Qy),w(AT),f&&t(fDe),f&&t(Cd),w(Uy),f&&t(mDe),f&&t(zo),w(Jy),w(Ky),w(yT),w(Zy),w(BT),f&&t(gDe),f&&t(Ld),w(e8),f&&t(hDe),f&&t(Wo),w(o8),w(t8),w(NT),w(a8),w(OT),f&&t(pDe),f&&t(kd),w(n8),f&&t(_De),f&&t(Qo),w(s8),w(i8),w(XT),w(d8),w(HT),f&&t(uDe),f&&t(Pd),w(f8),f&&t(bDe),f&&t(Ho),w(m8),w(h8),w(JT),w(p8),w(ZT),f&&t(vDe),f&&t(Nd),w(_8),f&&t(FDe),f&&t(Uo),w(u8),w(v8),w(o7),w(F8),w(l7),f&&t(TDe),f&&t(Dd),w(T8),f&&t(MDe),f&&t(Jo),w(M8),w(C8),w(d7),w(w8),w(m7),f&&t(EDe),f&&t(Vd),w(A8),f&&t(CDe),f&&t(Yo),w(L8),w(x8),w(h7),w($8),w(lM),f&&t(wDe),f&&t(Wd),w(k8),f&&t(ADe),f&&t(Ko),w(S8),w(P8),w(dM),w(B8),w(RM),f&&t(LDe),f&&t(Ud),w(I8),f&&t(yDe),f&&t(Zo),w(N8),w(j8),w(BM),w(D8),w(UM),f&&t(xDe),f&&t(Kd),w(G8),f&&t($De),f&&t(er),w(O8),w(X8),w(YM),w(z8),w(r4),f&&t(kDe),f&&t(oc),w(W8),f&&t(SDe),f&&t(or),w(Q8),w(U8),w(a4),w(J8),w(w4),f&&t(RDe),f&&t(ac),w(Y8),f&&t(PDe),f&&t(rr),w(K8),w(e9),w(L4),w(o9),w(q4),f&&t(BDe),f&&t(lc),w(r9),f&&t(IDe),f&&t(tr),w(t9),w(n9),w(D4),w(s9),w(gE),f&&t(NDe),f&&t(cc),w(l9),f&&t(qDe),f&&t(ar),w(i9),w(c9),w(pE),w(f9),w(RE),f&&t(jDe),f&&t(gc),w(m9),f&&t(DDe),f&&t(nr),w(g9),w(p9),w(BE),w(_9),w(qE),f&&t(GDe),f&&t(_c),w(b9),f&&t(ODe),f&&t(sr),w(v9),w(T9),w(DE),w(M9),w(OE),f&&t(VDe),f&&t(vc),w(E9),f&&t(XDe),f&&t(lr),w(C9),w(A9),w(XE),w(L9),w(fC),f&&t(zDe),f&&t(Mc),w(y9),f&&t(WDe),f&&t(ir),w(x9),w(k9),w(gC),w(S9),w(PC),f&&t(QDe),f&&t(wc),w(R9),f&&t(HDe),f&&t(dr),w(P9),w(I9),w(IC),w(N9),w(qC),f&&t(UDe),f&&t(yc),w(q9),f&&t(JDe),f&&t(cr),w(j9),w(G9),w(DC),w(O9),w(OC),f&&t(YDe),f&&t(kc),w(V9),f&&t(KDe),f&&t(fr),w(X9),w(W9),w(XC),w(Q9),w(u5),f&&t(ZDe),f&&t(Pc),w(H9),f&&t(eGe),f&&t(mr),w(U9),w(Y9),w(v5),w(K9),w($5),f&&t(oGe),f&&t(Nc),w(Z9),f&&t(rGe),f&&t(gr),w(ex),w(rx),w(S5),w(tx),w(z5),f&&t(tGe),f&&t(Dc),w(ax),f&&t(aGe),f&&t(hr),w(nx),w(lx),w(Q5),w(ix),w(a0),f&&t(nGe),f&&t(Vc),w(dx),f&&t(sGe),f&&t(pr),w(cx),w(mx),w(s0),w(gx),w(_0),f&&t(lGe),f&&t(Wc),w(hx),f&&t(iGe),f&&t(_r),w(px),w(ux),w(b0),w(bx),w(x0),f&&t(dGe),f&&t(Uc),w(vx),f&&t(cGe),f&&t(ur),w(Fx),w(Mx),w(k0),w(Ex),w(O0),f&&t(fGe),f&&t(Kc),w(Cx),f&&t(mGe),f&&t(br),w(wx),w(Lx),w(X0),w(yx),w(Z0),f&&t(gGe),f&&t(of),w(xx),f&&t(hGe),f&&t(vr),w($x),w(Sx),w(ow),w(Rx),w(cw),f&&t(pGe),f&&t(af),w(Px),f&&t(_Ge),f&&t(Fr),w(Bx),w(Nx),w(mw),w(qx),w(hw),f&&t(uGe),f&&t(lf),w(jx),f&&t(bGe),f&&t(Tr),w(Dx),w(Ox),w(_w),w(Vx),w(vw),f&&t(vGe),f&&t(ff),w(zx),f&&t(FGe),f&&t(Mr),w(Wx),w(Hx),w(Tw),w(Ux),w(Ew)}}}const ZBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eIt(x){return ePt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lIt extends JRt{constructor(g){super();YRt(this,g,eIt,KBt,KRt,{})}}export{lIt as default,ZBt as metadata};
