import{S as sRt,i as lRt,s as iRt,e as a,k as l,w as F,t as o,M as dRt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as cRt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as eWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function fRt(y){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,N6,bf,De,We,_i,Ln,q6,yn,xn,j6,ui,$n,D6,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),N6=o(")."),bf=l(),De=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),q6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),j6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),D6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var lk=s(p);m=r(lk,"NewModelConfig"),lk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var ik=s(gi);uf=r(ik,"model_type"),ik.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var dk=s(hi);pi=r(dk,'"new-model"'),dk.forEach(t),N6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);Ln=r(wa,"NewModel"),wa.forEach(t),q6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var ck=s(yn);xn=r(ck,"PreTrainedModel"),ck.forEach(t),j6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),D6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var fk=s(bi);vf=r(fk,"NewModelConfig"),fk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,N6),b(Qe,bf,Ae),b(Qe,De,Ae),e(De,We),e(De,_i),e(_i,Ln),e(De,q6),e(De,yn),e(yn,xn),e(De,j6),e(De,ui),e(ui,$n),e(De,D6),e(De,bi),e(bi,vf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(De)}}}function mRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function pRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function uRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(y){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,N6,bf,De,We,_i,Ln,q6,yn,xn,j6,ui,$n,D6,bi,vf,Ca,Qe,Ae,lk,vi,ik,dk,Eo,wa,ck,Ff,fk,gVe,rje,Fi,Tf,qoe,G6,hVe,joe,pVe,tje,kn,_Ve,Doe,uVe,bVe,Goe,vVe,FVe,aje,O6,nje,mk,TVe,sje,Mf,lje,Ti,Ef,Ooe,V6,MVe,Voe,EVe,ije,Co,X6,CVe,z6,wVe,gk,AVe,LVe,yVe,W6,xVe,Xoe,$Ve,kVe,SVe,Er,Q6,RVe,zoe,PVe,BVe,Mi,IVe,Woe,NVe,qVe,Qoe,jVe,DVe,GVe,A,Cf,Hoe,OVe,VVe,hk,XVe,zVe,WVe,wf,Uoe,QVe,HVe,pk,UVe,JVe,YVe,Af,Joe,KVe,ZVe,_k,eXe,oXe,rXe,Lf,Yoe,tXe,aXe,uk,nXe,sXe,lXe,yf,Koe,iXe,dXe,bk,cXe,fXe,mXe,xf,Zoe,gXe,hXe,vk,pXe,_Xe,uXe,$f,ere,bXe,vXe,Fk,FXe,TXe,MXe,kf,ore,EXe,CXe,Tk,wXe,AXe,LXe,Sf,rre,yXe,xXe,Mk,$Xe,kXe,SXe,Rf,tre,RXe,PXe,Ek,BXe,IXe,NXe,Pf,are,qXe,jXe,Ck,DXe,GXe,OXe,Bf,nre,VXe,XXe,wk,zXe,WXe,QXe,If,sre,HXe,UXe,Ak,JXe,YXe,KXe,Nf,lre,ZXe,eze,Lk,oze,rze,tze,qf,ire,aze,nze,yk,sze,lze,ize,jf,dre,dze,cze,xk,fze,mze,gze,Df,cre,hze,pze,$k,_ze,uze,bze,Gf,fre,vze,Fze,kk,Tze,Mze,Eze,Of,mre,Cze,wze,Sk,Aze,Lze,yze,Vf,gre,xze,$ze,Rk,kze,Sze,Rze,Xf,hre,Pze,Bze,Pk,Ize,Nze,qze,zf,pre,jze,Dze,Bk,Gze,Oze,Vze,Wf,_re,Xze,zze,Ik,Wze,Qze,Hze,Qf,ure,Uze,Jze,Nk,Yze,Kze,Zze,Hf,bre,eWe,oWe,qk,rWe,tWe,aWe,Uf,vre,nWe,sWe,jk,lWe,iWe,dWe,Jf,Fre,cWe,fWe,Dk,mWe,gWe,hWe,Yf,Tre,pWe,_We,Gk,uWe,bWe,vWe,Kf,Mre,FWe,TWe,Ok,MWe,EWe,CWe,Zf,Ere,wWe,AWe,Vk,LWe,yWe,xWe,em,Cre,$We,kWe,Xk,SWe,RWe,PWe,om,wre,BWe,IWe,zk,NWe,qWe,jWe,rm,Are,DWe,GWe,Wk,OWe,VWe,XWe,tm,Lre,zWe,WWe,Qk,QWe,HWe,UWe,am,yre,JWe,YWe,Hk,KWe,ZWe,eQe,nm,xre,oQe,rQe,Uk,tQe,aQe,nQe,sm,$re,sQe,lQe,Jk,iQe,dQe,cQe,lm,kre,fQe,mQe,Yk,gQe,hQe,pQe,im,Sre,_Qe,uQe,Kk,bQe,vQe,FQe,dm,Rre,TQe,MQe,Zk,EQe,CQe,wQe,cm,Pre,AQe,LQe,eS,yQe,xQe,$Qe,fm,Bre,kQe,SQe,oS,RQe,PQe,BQe,mm,Ire,IQe,NQe,rS,qQe,jQe,DQe,gm,Nre,GQe,OQe,tS,VQe,XQe,zQe,hm,qre,WQe,QQe,aS,HQe,UQe,JQe,pm,jre,YQe,KQe,nS,ZQe,eHe,oHe,_m,Dre,rHe,tHe,sS,aHe,nHe,sHe,um,Gre,lHe,iHe,lS,dHe,cHe,fHe,bm,Ore,mHe,gHe,iS,hHe,pHe,_He,vm,Vre,uHe,bHe,dS,vHe,FHe,THe,Fm,Xre,MHe,EHe,cS,CHe,wHe,AHe,Tm,zre,LHe,yHe,fS,xHe,$He,kHe,Mm,Wre,SHe,RHe,mS,PHe,BHe,IHe,Em,Qre,NHe,qHe,gS,jHe,DHe,GHe,Cm,Hre,OHe,VHe,hS,XHe,zHe,WHe,wm,Ure,QHe,HHe,pS,UHe,JHe,YHe,Am,Jre,KHe,ZHe,_S,eUe,oUe,rUe,Lm,Yre,tUe,aUe,uS,nUe,sUe,lUe,ym,Kre,iUe,dUe,bS,cUe,fUe,mUe,xm,Zre,gUe,hUe,vS,pUe,_Ue,uUe,$m,ete,bUe,vUe,FS,FUe,TUe,MUe,km,ote,EUe,CUe,TS,wUe,AUe,LUe,Sm,rte,yUe,xUe,MS,$Ue,kUe,SUe,Rm,tte,RUe,PUe,ES,BUe,IUe,NUe,Pm,ate,qUe,jUe,CS,DUe,GUe,OUe,Bm,nte,VUe,XUe,wS,zUe,WUe,QUe,Im,ste,HUe,UUe,AS,JUe,YUe,KUe,Nm,lte,ZUe,eJe,LS,oJe,rJe,tJe,qm,ite,aJe,nJe,yS,sJe,lJe,iJe,jm,dte,dJe,cJe,xS,fJe,mJe,gJe,Dm,cte,hJe,pJe,$S,_Je,uJe,bJe,Gm,fte,vJe,FJe,kS,TJe,MJe,EJe,Om,mte,CJe,wJe,SS,AJe,LJe,yJe,Vm,gte,xJe,$Je,RS,kJe,SJe,RJe,Xm,hte,PJe,BJe,PS,IJe,NJe,qJe,zm,pte,jJe,DJe,BS,GJe,OJe,VJe,Wm,_te,XJe,zJe,IS,WJe,QJe,HJe,Qm,ute,UJe,JJe,NS,YJe,KJe,ZJe,Hm,bte,eYe,oYe,qS,rYe,tYe,aYe,Um,vte,nYe,sYe,jS,lYe,iYe,dYe,Jm,Fte,cYe,fYe,DS,mYe,gYe,hYe,Ym,Tte,pYe,_Ye,GS,uYe,bYe,vYe,Km,Mte,FYe,TYe,OS,MYe,EYe,CYe,Zm,Ete,wYe,AYe,VS,LYe,yYe,xYe,eg,Cte,$Ye,kYe,XS,SYe,RYe,PYe,og,wte,BYe,IYe,zS,NYe,qYe,jYe,rg,Ate,DYe,GYe,WS,OYe,VYe,XYe,tg,Lte,zYe,WYe,QS,QYe,HYe,UYe,ag,yte,JYe,YYe,HS,KYe,ZYe,eKe,ng,xte,oKe,rKe,US,tKe,aKe,nKe,sg,$te,sKe,lKe,JS,iKe,dKe,cKe,lg,kte,fKe,mKe,YS,gKe,hKe,pKe,ig,Ste,_Ke,uKe,KS,bKe,vKe,FKe,dg,Rte,TKe,MKe,ZS,EKe,CKe,wKe,cg,Pte,AKe,LKe,eR,yKe,xKe,$Ke,fg,Bte,kKe,SKe,oR,RKe,PKe,BKe,mg,Ite,IKe,NKe,rR,qKe,jKe,DKe,gg,Nte,GKe,OKe,tR,VKe,XKe,zKe,hg,qte,WKe,QKe,aR,HKe,UKe,JKe,pg,jte,YKe,KKe,nR,ZKe,eZe,oZe,_g,Dte,rZe,tZe,sR,aZe,nZe,sZe,ug,Gte,lZe,iZe,lR,dZe,cZe,fZe,bg,Ote,mZe,gZe,iR,hZe,pZe,_Ze,vg,Vte,uZe,bZe,dR,vZe,FZe,TZe,Fg,Xte,MZe,EZe,cR,CZe,wZe,AZe,Tg,zte,LZe,yZe,fR,xZe,$Ze,kZe,Mg,Wte,SZe,RZe,mR,PZe,BZe,IZe,Eg,Qte,NZe,qZe,gR,jZe,DZe,GZe,Cg,Hte,OZe,VZe,hR,XZe,zZe,WZe,wg,Ute,QZe,HZe,pR,UZe,JZe,YZe,Ag,Jte,KZe,ZZe,_R,eeo,oeo,reo,Lg,teo,yg,H6,aeo,Yte,neo,dje,Ei,xg,Kte,U6,seo,Zte,leo,cje,wo,J6,ieo,Y6,deo,uR,ceo,feo,meo,K6,geo,eae,heo,peo,_eo,Cr,Z6,ueo,oae,beo,veo,Aa,Feo,rae,Teo,Meo,tae,Eeo,Ceo,aae,weo,Aeo,Leo,k,Sn,nae,yeo,xeo,bR,$eo,keo,vR,Seo,Reo,Peo,Rn,sae,Beo,Ieo,FR,Neo,qeo,TR,jeo,Deo,Geo,Pn,lae,Oeo,Veo,MR,Xeo,zeo,ER,Weo,Qeo,Heo,$g,iae,Ueo,Jeo,CR,Yeo,Keo,Zeo,Bn,dae,eoo,ooo,wR,roo,too,AR,aoo,noo,soo,kg,cae,loo,ioo,LR,doo,coo,foo,Sg,fae,moo,goo,yR,hoo,poo,_oo,Rg,mae,uoo,boo,xR,voo,Foo,Too,In,gae,Moo,Eoo,$R,Coo,woo,kR,Aoo,Loo,yoo,Nn,hae,xoo,$oo,SR,koo,Soo,RR,Roo,Poo,Boo,qn,pae,Ioo,Noo,PR,qoo,joo,BR,Doo,Goo,Ooo,Pg,_ae,Voo,Xoo,IR,zoo,Woo,Qoo,Bg,uae,Hoo,Uoo,NR,Joo,Yoo,Koo,jn,bae,Zoo,ero,qR,oro,rro,jR,tro,aro,nro,Ig,vae,sro,lro,DR,iro,dro,cro,Dn,Fae,fro,mro,GR,gro,hro,OR,pro,_ro,uro,Gn,Tae,bro,vro,VR,Fro,Tro,XR,Mro,Ero,Cro,On,Mae,wro,Aro,zR,Lro,yro,WR,xro,$ro,kro,Ng,Eae,Sro,Rro,QR,Pro,Bro,Iro,Vn,Cae,Nro,qro,HR,jro,Dro,UR,Gro,Oro,Vro,Xn,wae,Xro,zro,JR,Wro,Qro,YR,Hro,Uro,Jro,zn,Aae,Yro,Kro,KR,Zro,eto,ZR,oto,rto,tto,Wn,Lae,ato,nto,eP,sto,lto,oP,ito,dto,cto,Qn,yae,fto,mto,rP,gto,hto,tP,pto,_to,uto,Hn,xae,bto,vto,aP,Fto,Tto,nP,Mto,Eto,Cto,qg,$ae,wto,Ato,sP,Lto,yto,xto,Un,kae,$to,kto,lP,Sto,Rto,iP,Pto,Bto,Ito,jg,Sae,Nto,qto,dP,jto,Dto,Gto,Jn,Rae,Oto,Vto,cP,Xto,zto,fP,Wto,Qto,Hto,Yn,Pae,Uto,Jto,mP,Yto,Kto,gP,Zto,eao,oao,Kn,Bae,rao,tao,hP,aao,nao,pP,sao,lao,iao,Dg,Iae,dao,cao,_P,fao,mao,gao,Zn,Nae,hao,pao,uP,_ao,uao,bP,bao,vao,Fao,es,qae,Tao,Mao,vP,Eao,Cao,FP,wao,Aao,Lao,os,jae,yao,xao,TP,$ao,kao,MP,Sao,Rao,Pao,Gg,Dae,Bao,Iao,EP,Nao,qao,jao,rs,Gae,Dao,Gao,CP,Oao,Vao,wP,Xao,zao,Wao,ts,Oae,Qao,Hao,AP,Uao,Jao,LP,Yao,Kao,Zao,as,Vae,eno,ono,yP,rno,tno,xP,ano,nno,sno,ns,Xae,lno,ino,$P,dno,cno,kP,fno,mno,gno,ss,zae,hno,pno,SP,_no,uno,RP,bno,vno,Fno,ls,Wae,Tno,Mno,PP,Eno,Cno,BP,wno,Ano,Lno,is,Qae,yno,xno,IP,$no,kno,NP,Sno,Rno,Pno,Og,Hae,Bno,Ino,qP,Nno,qno,jno,ds,Uae,Dno,Gno,jP,Ono,Vno,DP,Xno,zno,Wno,Vg,Jae,Qno,Hno,GP,Uno,Jno,Yno,Xg,Yae,Kno,Zno,OP,eso,oso,rso,cs,Kae,tso,aso,VP,nso,sso,XP,lso,iso,dso,fs,Zae,cso,fso,zP,mso,gso,WP,hso,pso,_so,ms,ene,uso,bso,QP,vso,Fso,HP,Tso,Mso,Eso,zg,one,Cso,wso,UP,Aso,Lso,yso,gs,rne,xso,$so,JP,kso,Sso,YP,Rso,Pso,Bso,hs,tne,Iso,Nso,KP,qso,jso,ZP,Dso,Gso,Oso,ps,ane,Vso,Xso,eB,zso,Wso,oB,Qso,Hso,Uso,_s,nne,Jso,Yso,rB,Kso,Zso,tB,elo,olo,rlo,us,sne,tlo,alo,aB,nlo,slo,nB,llo,ilo,dlo,Wg,lne,clo,flo,sB,mlo,glo,hlo,bs,ine,plo,_lo,lB,ulo,blo,iB,vlo,Flo,Tlo,Qg,dne,Mlo,Elo,dB,Clo,wlo,Alo,Hg,cne,Llo,ylo,cB,xlo,$lo,klo,Ug,fne,Slo,Rlo,fB,Plo,Blo,Ilo,Jg,mne,Nlo,qlo,mB,jlo,Dlo,Glo,vs,gne,Olo,Vlo,gB,Xlo,zlo,hB,Wlo,Qlo,Hlo,Yg,hne,Ulo,Jlo,pB,Ylo,Klo,Zlo,Fs,pne,eio,oio,_B,rio,tio,uB,aio,nio,sio,Ts,_ne,lio,iio,bB,dio,cio,vB,fio,mio,gio,Ms,une,hio,pio,FB,_io,uio,TB,bio,vio,Fio,Es,bne,Tio,Mio,MB,Eio,Cio,EB,wio,Aio,Lio,Cs,vne,yio,xio,CB,$io,kio,wB,Sio,Rio,Pio,ws,Fne,Bio,Iio,AB,Nio,qio,LB,jio,Dio,Gio,Kg,Tne,Oio,Vio,yB,Xio,zio,Wio,Zg,Mne,Qio,Hio,xB,Uio,Jio,Yio,As,Ene,Kio,Zio,$B,edo,odo,kB,rdo,tdo,ado,Ls,Cne,ndo,sdo,SB,ldo,ido,RB,ddo,cdo,fdo,ys,wne,mdo,gdo,PB,hdo,pdo,BB,_do,udo,bdo,eh,Ane,vdo,Fdo,IB,Tdo,Mdo,Edo,oh,Lne,Cdo,wdo,NB,Ado,Ldo,ydo,rh,yne,xdo,$do,qB,kdo,Sdo,Rdo,xs,xne,Pdo,Bdo,jB,Ido,Ndo,DB,qdo,jdo,Ddo,th,$ne,Gdo,Odo,GB,Vdo,Xdo,zdo,ah,kne,Wdo,Qdo,OB,Hdo,Udo,Jdo,nh,Sne,Ydo,Kdo,VB,Zdo,eco,oco,$s,Rne,rco,tco,XB,aco,nco,zB,sco,lco,ico,sh,Pne,dco,cco,WB,fco,mco,gco,lh,Bne,hco,pco,QB,_co,uco,bco,ks,Ine,vco,Fco,HB,Tco,Mco,UB,Eco,Cco,wco,Ss,Nne,Aco,Lco,JB,yco,xco,YB,$co,kco,Sco,Rs,qne,Rco,Pco,KB,Bco,Ico,ZB,Nco,qco,jco,Ps,jne,Dco,Gco,eI,Oco,Vco,oI,Xco,zco,Wco,ih,Qco,dh,eL,Hco,Dne,Uco,fje,Ci,ch,Gne,oL,Jco,One,Yco,mje,Ao,rL,Kco,tL,Zco,rI,efo,ofo,rfo,aL,tfo,Vne,afo,nfo,sfo,He,nL,lfo,Xne,ifo,dfo,La,cfo,zne,ffo,mfo,Wne,gfo,hfo,Qne,pfo,_fo,ufo,Y,fh,Hne,bfo,vfo,tI,Ffo,Tfo,Mfo,mh,Une,Efo,Cfo,aI,wfo,Afo,Lfo,gh,Jne,yfo,xfo,nI,$fo,kfo,Sfo,hh,Yne,Rfo,Pfo,sI,Bfo,Ifo,Nfo,ph,Kne,qfo,jfo,lI,Dfo,Gfo,Ofo,_h,Zne,Vfo,Xfo,iI,zfo,Wfo,Qfo,uh,ese,Hfo,Ufo,dI,Jfo,Yfo,Kfo,bh,ose,Zfo,emo,cI,omo,rmo,tmo,vh,rse,amo,nmo,fI,smo,lmo,imo,Fh,tse,dmo,cmo,mI,fmo,mmo,gmo,Th,ase,hmo,pmo,gI,_mo,umo,bmo,Mh,nse,vmo,Fmo,hI,Tmo,Mmo,Emo,Eh,sse,Cmo,wmo,pI,Amo,Lmo,ymo,Ch,lse,xmo,$mo,_I,kmo,Smo,Rmo,wh,ise,Pmo,Bmo,uI,Imo,Nmo,qmo,Ah,dse,jmo,Dmo,bI,Gmo,Omo,Vmo,Lh,cse,Xmo,zmo,vI,Wmo,Qmo,Hmo,yh,fse,Umo,Jmo,FI,Ymo,Kmo,Zmo,xh,mse,ego,ogo,TI,rgo,tgo,ago,$h,gse,ngo,sgo,MI,lgo,igo,dgo,kh,hse,cgo,fgo,EI,mgo,ggo,hgo,Sh,pse,pgo,_go,CI,ugo,bgo,vgo,Rh,_se,Fgo,Tgo,wI,Mgo,Ego,Cgo,Ph,use,wgo,Ago,AI,Lgo,ygo,xgo,Bh,bse,$go,kgo,LI,Sgo,Rgo,Pgo,Ih,vse,Bgo,Igo,yI,Ngo,qgo,jgo,Nh,Fse,Dgo,Ggo,xI,Ogo,Vgo,Xgo,qh,Tse,zgo,Wgo,$I,Qgo,Hgo,Ugo,jh,Mse,Jgo,Ygo,kI,Kgo,Zgo,eho,Dh,Ese,oho,rho,SI,tho,aho,nho,Gh,Cse,sho,lho,RI,iho,dho,cho,Oh,fho,Vh,mho,Xh,sL,gho,wse,hho,gje,wi,zh,Ase,lL,pho,Lse,_ho,hje,Lo,iL,uho,dL,bho,PI,vho,Fho,Tho,cL,Mho,yse,Eho,Cho,who,Ue,fL,Aho,xse,Lho,yho,Ai,xho,$se,$ho,kho,kse,Sho,Rho,Pho,he,Wh,Sse,Bho,Iho,BI,Nho,qho,jho,Qh,Rse,Dho,Gho,Pse,Oho,Vho,Xho,Hh,Bse,zho,Who,II,Qho,Hho,Uho,Uh,Ise,Jho,Yho,NI,Kho,Zho,epo,Jh,Nse,opo,rpo,qI,tpo,apo,npo,Yh,qse,spo,lpo,jI,ipo,dpo,cpo,Kh,jse,fpo,mpo,DI,gpo,hpo,ppo,Zh,Dse,_po,upo,GI,bpo,vpo,Fpo,ep,Gse,Tpo,Mpo,OI,Epo,Cpo,wpo,op,Ose,Apo,Lpo,VI,ypo,xpo,$po,rp,Vse,kpo,Spo,XI,Rpo,Ppo,Bpo,tp,Xse,Ipo,Npo,zI,qpo,jpo,Dpo,ap,zse,Gpo,Opo,WI,Vpo,Xpo,zpo,np,Wse,Wpo,Qpo,QI,Hpo,Upo,Jpo,sp,Qse,Ypo,Kpo,HI,Zpo,e_o,o_o,lp,Hse,r_o,t_o,UI,a_o,n_o,s_o,ip,Use,l_o,i_o,JI,d_o,c_o,f_o,dp,Jse,m_o,g_o,YI,h_o,p_o,__o,cp,u_o,fp,b_o,mp,mL,v_o,Yse,F_o,pje,Li,gp,Kse,gL,T_o,Zse,M_o,_je,yo,hL,E_o,yi,C_o,KI,w_o,A_o,ZI,L_o,y_o,x_o,pL,$_o,ele,k_o,S_o,R_o,tt,_L,P_o,ole,B_o,I_o,xi,N_o,rle,q_o,j_o,eN,D_o,G_o,O_o,hp,V_o,Je,uL,X_o,tle,z_o,W_o,ya,Q_o,ale,H_o,U_o,nle,J_o,Y_o,sle,K_o,Z_o,euo,x,pp,lle,ouo,ruo,oN,tuo,auo,nuo,_p,ile,suo,luo,rN,iuo,duo,cuo,up,dle,fuo,muo,tN,guo,huo,puo,bp,cle,_uo,uuo,aN,buo,vuo,Fuo,vp,fle,Tuo,Muo,nN,Euo,Cuo,wuo,Fp,mle,Auo,Luo,sN,yuo,xuo,$uo,Tp,gle,kuo,Suo,lN,Ruo,Puo,Buo,Mp,hle,Iuo,Nuo,iN,quo,juo,Duo,Ep,ple,Guo,Ouo,dN,Vuo,Xuo,zuo,Cp,_le,Wuo,Quo,cN,Huo,Uuo,Juo,wp,ule,Yuo,Kuo,fN,Zuo,e1o,o1o,Ap,ble,r1o,t1o,mN,a1o,n1o,s1o,Lp,vle,l1o,i1o,gN,d1o,c1o,f1o,yp,Fle,m1o,g1o,hN,h1o,p1o,_1o,xp,Tle,u1o,b1o,pN,v1o,F1o,T1o,$p,Mle,M1o,E1o,_N,C1o,w1o,A1o,kp,Ele,L1o,y1o,uN,x1o,$1o,k1o,Sp,Cle,S1o,R1o,bN,P1o,B1o,I1o,Rp,wle,N1o,q1o,vN,j1o,D1o,G1o,Pp,Ale,O1o,V1o,FN,X1o,z1o,W1o,Bp,Lle,Q1o,H1o,TN,U1o,J1o,Y1o,Ip,yle,K1o,Z1o,MN,e3o,o3o,r3o,Np,xle,t3o,a3o,EN,n3o,s3o,l3o,qp,$le,i3o,d3o,CN,c3o,f3o,m3o,jp,kle,g3o,h3o,wN,p3o,_3o,u3o,Dp,Sle,b3o,v3o,AN,F3o,T3o,M3o,Gp,Rle,E3o,C3o,LN,w3o,A3o,L3o,Op,Ple,y3o,x3o,yN,$3o,k3o,S3o,Vp,Ble,R3o,P3o,xN,B3o,I3o,N3o,Xp,Ile,q3o,j3o,$N,D3o,G3o,O3o,zp,Nle,V3o,X3o,kN,z3o,W3o,Q3o,Wp,qle,H3o,U3o,SN,J3o,Y3o,K3o,Bs,jle,Z3o,ebo,RN,obo,rbo,PN,tbo,abo,nbo,Qp,Dle,sbo,lbo,BN,ibo,dbo,cbo,Hp,Gle,fbo,mbo,IN,gbo,hbo,pbo,Up,Ole,_bo,ubo,NN,bbo,vbo,Fbo,Jp,Vle,Tbo,Mbo,qN,Ebo,Cbo,wbo,Yp,Xle,Abo,Lbo,jN,ybo,xbo,$bo,Kp,zle,kbo,Sbo,DN,Rbo,Pbo,Bbo,Zp,Wle,Ibo,Nbo,GN,qbo,jbo,Dbo,e_,Qle,Gbo,Obo,ON,Vbo,Xbo,zbo,o_,Hle,Wbo,Qbo,VN,Hbo,Ubo,Jbo,r_,Ule,Ybo,Kbo,XN,Zbo,e2o,o2o,t_,Jle,r2o,t2o,zN,a2o,n2o,s2o,a_,Yle,l2o,i2o,WN,d2o,c2o,f2o,n_,Kle,m2o,g2o,QN,h2o,p2o,_2o,s_,Zle,u2o,b2o,HN,v2o,F2o,T2o,l_,eie,M2o,E2o,UN,C2o,w2o,A2o,i_,oie,L2o,y2o,JN,x2o,$2o,k2o,d_,rie,S2o,R2o,YN,P2o,B2o,I2o,c_,tie,N2o,q2o,KN,j2o,D2o,G2o,f_,aie,O2o,V2o,ZN,X2o,z2o,W2o,m_,nie,Q2o,H2o,eq,U2o,J2o,Y2o,g_,sie,K2o,Z2o,oq,evo,ovo,rvo,h_,lie,tvo,avo,rq,nvo,svo,lvo,p_,iie,ivo,dvo,tq,cvo,fvo,mvo,__,die,gvo,hvo,aq,pvo,_vo,uvo,u_,cie,bvo,vvo,nq,Fvo,Tvo,Mvo,b_,fie,Evo,Cvo,sq,wvo,Avo,Lvo,v_,mie,yvo,xvo,lq,$vo,kvo,Svo,F_,gie,Rvo,Pvo,iq,Bvo,Ivo,Nvo,T_,hie,qvo,jvo,dq,Dvo,Gvo,Ovo,M_,pie,Vvo,Xvo,cq,zvo,Wvo,Qvo,E_,_ie,Hvo,Uvo,fq,Jvo,Yvo,Kvo,C_,uie,Zvo,eFo,mq,oFo,rFo,tFo,w_,bie,aFo,nFo,gq,sFo,lFo,iFo,A_,vie,dFo,cFo,hq,fFo,mFo,gFo,L_,Fie,hFo,pFo,pq,_Fo,uFo,bFo,y_,Tie,vFo,FFo,_q,TFo,MFo,EFo,x_,Mie,CFo,wFo,uq,AFo,LFo,yFo,$_,Eie,xFo,$Fo,bq,kFo,SFo,RFo,k_,Cie,PFo,BFo,vq,IFo,NFo,qFo,S_,wie,jFo,DFo,Fq,GFo,OFo,VFo,R_,Aie,XFo,zFo,Tq,WFo,QFo,HFo,P_,Lie,UFo,JFo,Mq,YFo,KFo,ZFo,B_,yie,eTo,oTo,Eq,rTo,tTo,aTo,I_,xie,nTo,sTo,Cq,lTo,iTo,dTo,N_,$ie,cTo,fTo,wq,mTo,gTo,hTo,q_,kie,pTo,_To,Aq,uTo,bTo,vTo,j_,Sie,FTo,TTo,Lq,MTo,ETo,CTo,D_,Rie,wTo,ATo,yq,LTo,yTo,xTo,G_,Pie,$To,kTo,xq,STo,RTo,PTo,O_,Bie,BTo,ITo,$q,NTo,qTo,jTo,V_,Iie,DTo,GTo,kq,OTo,VTo,XTo,X_,Nie,zTo,WTo,Sq,QTo,HTo,UTo,z_,qie,JTo,YTo,Rq,KTo,ZTo,e7o,W_,jie,o7o,r7o,Pq,t7o,a7o,n7o,Q_,Die,s7o,l7o,Bq,i7o,d7o,c7o,H_,Gie,f7o,m7o,Iq,g7o,h7o,p7o,U_,Oie,_7o,u7o,Nq,b7o,v7o,F7o,J_,Vie,T7o,M7o,qq,E7o,C7o,w7o,Y_,Xie,A7o,L7o,jq,y7o,x7o,$7o,K_,zie,k7o,S7o,Dq,R7o,P7o,B7o,Z_,Wie,I7o,N7o,Gq,q7o,j7o,D7o,eu,Qie,G7o,O7o,Oq,V7o,X7o,z7o,ou,Hie,W7o,Q7o,Vq,H7o,U7o,J7o,ru,Uie,Y7o,K7o,Xq,Z7o,eMo,oMo,tu,Jie,rMo,tMo,zq,aMo,nMo,sMo,au,Yie,lMo,iMo,Wq,dMo,cMo,fMo,nu,Kie,mMo,gMo,Qq,hMo,pMo,_Mo,su,Zie,uMo,bMo,Hq,vMo,FMo,TMo,lu,ede,MMo,EMo,Uq,CMo,wMo,AMo,iu,ode,LMo,yMo,Jq,xMo,$Mo,kMo,du,rde,SMo,RMo,Yq,PMo,BMo,IMo,cu,NMo,tde,qMo,jMo,ade,DMo,GMo,fu,uje,$i,mu,nde,bL,OMo,sde,VMo,bje,xo,vL,XMo,ki,zMo,Kq,WMo,QMo,Zq,HMo,UMo,JMo,FL,YMo,lde,KMo,ZMo,e4o,at,TL,o4o,ide,r4o,t4o,Si,a4o,dde,n4o,s4o,ej,l4o,i4o,d4o,gu,c4o,Ye,ML,f4o,cde,m4o,g4o,xa,h4o,fde,p4o,_4o,mde,u4o,b4o,gde,v4o,F4o,T4o,G,hu,hde,M4o,E4o,oj,C4o,w4o,A4o,pu,pde,L4o,y4o,rj,x4o,$4o,k4o,_u,_de,S4o,R4o,tj,P4o,B4o,I4o,uu,ude,N4o,q4o,aj,j4o,D4o,G4o,bu,bde,O4o,V4o,nj,X4o,z4o,W4o,vu,vde,Q4o,H4o,sj,U4o,J4o,Y4o,Fu,Fde,K4o,Z4o,lj,eEo,oEo,rEo,Tu,Tde,tEo,aEo,ij,nEo,sEo,lEo,Mu,Mde,iEo,dEo,dj,cEo,fEo,mEo,Eu,Ede,gEo,hEo,cj,pEo,_Eo,uEo,Cu,Cde,bEo,vEo,fj,FEo,TEo,MEo,wu,wde,EEo,CEo,mj,wEo,AEo,LEo,Au,Ade,yEo,xEo,gj,$Eo,kEo,SEo,Lu,Lde,REo,PEo,hj,BEo,IEo,NEo,yu,yde,qEo,jEo,pj,DEo,GEo,OEo,xu,xde,VEo,XEo,_j,zEo,WEo,QEo,$u,$de,HEo,UEo,uj,JEo,YEo,KEo,ku,kde,ZEo,eCo,bj,oCo,rCo,tCo,Su,Sde,aCo,nCo,vj,sCo,lCo,iCo,Ru,Rde,dCo,cCo,Fj,fCo,mCo,gCo,Pu,Pde,hCo,pCo,Tj,_Co,uCo,bCo,Bu,Bde,vCo,FCo,Mj,TCo,MCo,ECo,Iu,Ide,CCo,wCo,Ej,ACo,LCo,yCo,Nu,Nde,xCo,$Co,Cj,kCo,SCo,RCo,qu,qde,PCo,BCo,wj,ICo,NCo,qCo,ju,jde,jCo,DCo,Aj,GCo,OCo,VCo,Du,Dde,XCo,zCo,Lj,WCo,QCo,HCo,Gu,Gde,UCo,JCo,yj,YCo,KCo,ZCo,Ou,Ode,e5o,o5o,xj,r5o,t5o,a5o,Vu,Vde,n5o,s5o,$j,l5o,i5o,d5o,Xu,Xde,c5o,f5o,kj,m5o,g5o,h5o,zu,zde,p5o,_5o,Sj,u5o,b5o,v5o,Wu,Wde,F5o,T5o,Rj,M5o,E5o,C5o,Qu,Qde,w5o,A5o,Pj,L5o,y5o,x5o,Hu,Hde,$5o,k5o,Bj,S5o,R5o,P5o,Uu,Ude,B5o,I5o,Ij,N5o,q5o,j5o,Ju,Jde,D5o,G5o,Nj,O5o,V5o,X5o,Yu,Yde,z5o,W5o,qj,Q5o,H5o,U5o,Ku,Kde,J5o,Y5o,jj,K5o,Z5o,e0o,Zu,Zde,o0o,r0o,Dj,t0o,a0o,n0o,e1,ece,s0o,l0o,Gj,i0o,d0o,c0o,o1,oce,f0o,m0o,Oj,g0o,h0o,p0o,r1,_0o,rce,u0o,b0o,tce,v0o,F0o,t1,vje,Ri,a1,ace,EL,T0o,nce,M0o,Fje,$o,CL,E0o,Pi,C0o,Vj,w0o,A0o,Xj,L0o,y0o,x0o,wL,$0o,sce,k0o,S0o,R0o,nt,AL,P0o,lce,B0o,I0o,Bi,N0o,ice,q0o,j0o,zj,D0o,G0o,O0o,n1,V0o,Ke,LL,X0o,dce,z0o,W0o,$a,Q0o,cce,H0o,U0o,fce,J0o,Y0o,mce,K0o,Z0o,ewo,z,s1,gce,owo,rwo,Wj,two,awo,nwo,l1,hce,swo,lwo,Qj,iwo,dwo,cwo,i1,pce,fwo,mwo,Hj,gwo,hwo,pwo,d1,_ce,_wo,uwo,Uj,bwo,vwo,Fwo,c1,uce,Two,Mwo,Jj,Ewo,Cwo,wwo,f1,bce,Awo,Lwo,Yj,ywo,xwo,$wo,m1,vce,kwo,Swo,Kj,Rwo,Pwo,Bwo,g1,Fce,Iwo,Nwo,Zj,qwo,jwo,Dwo,h1,Tce,Gwo,Owo,eD,Vwo,Xwo,zwo,p1,Mce,Wwo,Qwo,oD,Hwo,Uwo,Jwo,_1,Ece,Ywo,Kwo,rD,Zwo,eAo,oAo,u1,Cce,rAo,tAo,tD,aAo,nAo,sAo,b1,wce,lAo,iAo,aD,dAo,cAo,fAo,v1,Ace,mAo,gAo,nD,hAo,pAo,_Ao,F1,Lce,uAo,bAo,sD,vAo,FAo,TAo,T1,yce,MAo,EAo,lD,CAo,wAo,AAo,M1,xce,LAo,yAo,iD,xAo,$Ao,kAo,E1,$ce,SAo,RAo,dD,PAo,BAo,IAo,C1,kce,NAo,qAo,cD,jAo,DAo,GAo,w1,Sce,OAo,VAo,fD,XAo,zAo,WAo,A1,Rce,QAo,HAo,mD,UAo,JAo,YAo,L1,Pce,KAo,ZAo,gD,e6o,o6o,r6o,y1,Bce,t6o,a6o,hD,n6o,s6o,l6o,x1,Ice,i6o,d6o,pD,c6o,f6o,m6o,$1,Nce,g6o,h6o,_D,p6o,_6o,u6o,k1,qce,b6o,v6o,uD,F6o,T6o,M6o,S1,jce,E6o,C6o,bD,w6o,A6o,L6o,R1,Dce,y6o,x6o,vD,$6o,k6o,S6o,P1,Gce,R6o,P6o,FD,B6o,I6o,N6o,B1,Oce,q6o,j6o,TD,D6o,G6o,O6o,I1,Vce,V6o,X6o,MD,z6o,W6o,Q6o,N1,Xce,H6o,U6o,ED,J6o,Y6o,K6o,q1,zce,Z6o,eLo,CD,oLo,rLo,tLo,j1,Wce,aLo,nLo,wD,sLo,lLo,iLo,D1,Qce,dLo,cLo,AD,fLo,mLo,gLo,G1,Hce,hLo,pLo,LD,_Lo,uLo,bLo,O1,Uce,vLo,FLo,yD,TLo,MLo,ELo,V1,CLo,Jce,wLo,ALo,Yce,LLo,yLo,X1,Tje,Ii,z1,Kce,yL,xLo,Zce,$Lo,Mje,ko,xL,kLo,Ni,SLo,xD,RLo,PLo,$D,BLo,ILo,NLo,$L,qLo,efe,jLo,DLo,GLo,st,kL,OLo,ofe,VLo,XLo,qi,zLo,rfe,WLo,QLo,kD,HLo,ULo,JLo,W1,YLo,Ze,SL,KLo,tfe,ZLo,eyo,ka,oyo,afe,ryo,tyo,nfe,ayo,nyo,sfe,syo,lyo,iyo,W,Q1,lfe,dyo,cyo,SD,fyo,myo,gyo,H1,ife,hyo,pyo,RD,_yo,uyo,byo,U1,dfe,vyo,Fyo,PD,Tyo,Myo,Eyo,J1,cfe,Cyo,wyo,BD,Ayo,Lyo,yyo,Y1,ffe,xyo,$yo,ID,kyo,Syo,Ryo,K1,mfe,Pyo,Byo,ND,Iyo,Nyo,qyo,Z1,gfe,jyo,Dyo,qD,Gyo,Oyo,Vyo,e3,hfe,Xyo,zyo,jD,Wyo,Qyo,Hyo,o3,pfe,Uyo,Jyo,DD,Yyo,Kyo,Zyo,r3,_fe,e8o,o8o,GD,r8o,t8o,a8o,t3,ufe,n8o,s8o,OD,l8o,i8o,d8o,a3,bfe,c8o,f8o,VD,m8o,g8o,h8o,n3,vfe,p8o,_8o,XD,u8o,b8o,v8o,s3,Ffe,F8o,T8o,zD,M8o,E8o,C8o,l3,Tfe,w8o,A8o,WD,L8o,y8o,x8o,i3,Mfe,$8o,k8o,QD,S8o,R8o,P8o,d3,Efe,B8o,I8o,HD,N8o,q8o,j8o,c3,Cfe,D8o,G8o,UD,O8o,V8o,X8o,f3,wfe,z8o,W8o,JD,Q8o,H8o,U8o,m3,Afe,J8o,Y8o,YD,K8o,Z8o,e9o,g3,Lfe,o9o,r9o,KD,t9o,a9o,n9o,h3,yfe,s9o,l9o,ZD,i9o,d9o,c9o,p3,xfe,f9o,m9o,eG,g9o,h9o,p9o,_3,$fe,_9o,u9o,oG,b9o,v9o,F9o,u3,kfe,T9o,M9o,rG,E9o,C9o,w9o,b3,Sfe,A9o,L9o,tG,y9o,x9o,$9o,v3,Rfe,k9o,S9o,aG,R9o,P9o,B9o,F3,Pfe,I9o,N9o,nG,q9o,j9o,D9o,T3,Bfe,G9o,O9o,sG,V9o,X9o,z9o,M3,Ife,W9o,Q9o,lG,H9o,U9o,J9o,E3,Nfe,Y9o,K9o,iG,Z9o,exo,oxo,C3,qfe,rxo,txo,jfe,axo,nxo,sxo,w3,Dfe,lxo,ixo,dG,dxo,cxo,fxo,A3,Gfe,mxo,gxo,cG,hxo,pxo,_xo,L3,Ofe,uxo,bxo,fG,vxo,Fxo,Txo,y3,Vfe,Mxo,Exo,mG,Cxo,wxo,Axo,x3,Lxo,Xfe,yxo,xxo,zfe,$xo,kxo,$3,Eje,ji,k3,Wfe,RL,Sxo,Qfe,Rxo,Cje,So,PL,Pxo,Di,Bxo,gG,Ixo,Nxo,hG,qxo,jxo,Dxo,BL,Gxo,Hfe,Oxo,Vxo,Xxo,lt,IL,zxo,Ufe,Wxo,Qxo,Gi,Hxo,Jfe,Uxo,Jxo,pG,Yxo,Kxo,Zxo,S3,e$o,eo,NL,o$o,Yfe,r$o,t$o,Sa,a$o,Kfe,n$o,s$o,Zfe,l$o,i$o,eme,d$o,c$o,f$o,ue,R3,ome,m$o,g$o,_G,h$o,p$o,_$o,P3,rme,u$o,b$o,uG,v$o,F$o,T$o,B3,tme,M$o,E$o,bG,C$o,w$o,A$o,I3,ame,L$o,y$o,vG,x$o,$$o,k$o,N3,nme,S$o,R$o,FG,P$o,B$o,I$o,q3,sme,N$o,q$o,TG,j$o,D$o,G$o,j3,lme,O$o,V$o,MG,X$o,z$o,W$o,D3,ime,Q$o,H$o,EG,U$o,J$o,Y$o,G3,dme,K$o,Z$o,CG,eko,oko,rko,O3,cme,tko,ako,wG,nko,sko,lko,V3,fme,iko,dko,AG,cko,fko,mko,X3,mme,gko,hko,LG,pko,_ko,uko,z3,gme,bko,vko,yG,Fko,Tko,Mko,W3,hme,Eko,Cko,xG,wko,Ako,Lko,Q3,pme,yko,xko,$G,$ko,kko,Sko,H3,_me,Rko,Pko,kG,Bko,Iko,Nko,U3,qko,ume,jko,Dko,bme,Gko,Oko,J3,wje,Oi,Y3,vme,qL,Vko,Fme,Xko,Aje,Ro,jL,zko,Vi,Wko,SG,Qko,Hko,RG,Uko,Jko,Yko,DL,Kko,Tme,Zko,eSo,oSo,it,GL,rSo,Mme,tSo,aSo,Xi,nSo,Eme,sSo,lSo,PG,iSo,dSo,cSo,K3,fSo,oo,OL,mSo,Cme,gSo,hSo,Ra,pSo,wme,_So,uSo,Ame,bSo,vSo,Lme,FSo,TSo,MSo,N,Z3,yme,ESo,CSo,BG,wSo,ASo,LSo,eb,xme,ySo,xSo,IG,$So,kSo,SSo,ob,$me,RSo,PSo,NG,BSo,ISo,NSo,rb,kme,qSo,jSo,qG,DSo,GSo,OSo,tb,Sme,VSo,XSo,jG,zSo,WSo,QSo,ab,Rme,HSo,USo,DG,JSo,YSo,KSo,nb,Pme,ZSo,eRo,GG,oRo,rRo,tRo,sb,Bme,aRo,nRo,OG,sRo,lRo,iRo,lb,Ime,dRo,cRo,VG,fRo,mRo,gRo,ib,Nme,hRo,pRo,XG,_Ro,uRo,bRo,db,qme,vRo,FRo,zG,TRo,MRo,ERo,cb,jme,CRo,wRo,WG,ARo,LRo,yRo,fb,Dme,xRo,$Ro,QG,kRo,SRo,RRo,mb,Gme,PRo,BRo,HG,IRo,NRo,qRo,gb,Ome,jRo,DRo,UG,GRo,ORo,VRo,hb,Vme,XRo,zRo,JG,WRo,QRo,HRo,pb,Xme,URo,JRo,YG,YRo,KRo,ZRo,_b,zme,ePo,oPo,KG,rPo,tPo,aPo,ub,Wme,nPo,sPo,ZG,lPo,iPo,dPo,bb,Qme,cPo,fPo,eO,mPo,gPo,hPo,vb,Hme,pPo,_Po,oO,uPo,bPo,vPo,Fb,Ume,FPo,TPo,rO,MPo,EPo,CPo,Tb,Jme,wPo,APo,tO,LPo,yPo,xPo,Mb,Yme,$Po,kPo,aO,SPo,RPo,PPo,Eb,Kme,BPo,IPo,nO,NPo,qPo,jPo,Cb,Zme,DPo,GPo,sO,OPo,VPo,XPo,wb,ege,zPo,WPo,lO,QPo,HPo,UPo,Ab,oge,JPo,YPo,iO,KPo,ZPo,eBo,Lb,rge,oBo,rBo,dO,tBo,aBo,nBo,yb,tge,sBo,lBo,cO,iBo,dBo,cBo,xb,age,fBo,mBo,fO,gBo,hBo,pBo,$b,nge,_Bo,uBo,mO,bBo,vBo,FBo,kb,sge,TBo,MBo,gO,EBo,CBo,wBo,Sb,lge,ABo,LBo,hO,yBo,xBo,$Bo,Rb,ige,kBo,SBo,pO,RBo,PBo,BBo,Pb,dge,IBo,NBo,_O,qBo,jBo,DBo,Bb,cge,GBo,OBo,uO,VBo,XBo,zBo,Ib,fge,WBo,QBo,bO,HBo,UBo,JBo,Nb,mge,YBo,KBo,vO,ZBo,eIo,oIo,qb,gge,rIo,tIo,FO,aIo,nIo,sIo,jb,hge,lIo,iIo,TO,dIo,cIo,fIo,Db,pge,mIo,gIo,MO,hIo,pIo,_Io,Gb,_ge,uIo,bIo,EO,vIo,FIo,TIo,Ob,uge,MIo,EIo,CO,CIo,wIo,AIo,Vb,bge,LIo,yIo,wO,xIo,$Io,kIo,Xb,vge,SIo,RIo,AO,PIo,BIo,IIo,zb,Fge,NIo,qIo,LO,jIo,DIo,GIo,Wb,OIo,Tge,VIo,XIo,Mge,zIo,WIo,Qb,Lje,zi,Hb,Ege,VL,QIo,Cge,HIo,yje,Po,XL,UIo,Wi,JIo,yO,YIo,KIo,xO,ZIo,eNo,oNo,zL,rNo,wge,tNo,aNo,nNo,dt,WL,sNo,Age,lNo,iNo,Qi,dNo,Lge,cNo,fNo,$O,mNo,gNo,hNo,Ub,pNo,ro,QL,_No,yge,uNo,bNo,Pa,vNo,xge,FNo,TNo,$ge,MNo,ENo,kge,CNo,wNo,ANo,Z,Jb,Sge,LNo,yNo,kO,xNo,$No,kNo,Yb,Rge,SNo,RNo,SO,PNo,BNo,INo,Kb,Pge,NNo,qNo,RO,jNo,DNo,GNo,Zb,Bge,ONo,VNo,PO,XNo,zNo,WNo,e2,Ige,QNo,HNo,BO,UNo,JNo,YNo,o2,Nge,KNo,ZNo,IO,eqo,oqo,rqo,r2,qge,tqo,aqo,NO,nqo,sqo,lqo,t2,jge,iqo,dqo,qO,cqo,fqo,mqo,a2,Dge,gqo,hqo,jO,pqo,_qo,uqo,n2,Gge,bqo,vqo,DO,Fqo,Tqo,Mqo,s2,Oge,Eqo,Cqo,GO,wqo,Aqo,Lqo,l2,Vge,yqo,xqo,OO,$qo,kqo,Sqo,i2,Xge,Rqo,Pqo,VO,Bqo,Iqo,Nqo,d2,zge,qqo,jqo,XO,Dqo,Gqo,Oqo,c2,Wge,Vqo,Xqo,zO,zqo,Wqo,Qqo,f2,Qge,Hqo,Uqo,WO,Jqo,Yqo,Kqo,m2,Hge,Zqo,ejo,QO,ojo,rjo,tjo,g2,Uge,ajo,njo,HO,sjo,ljo,ijo,h2,Jge,djo,cjo,UO,fjo,mjo,gjo,p2,Yge,hjo,pjo,JO,_jo,ujo,bjo,_2,Kge,vjo,Fjo,YO,Tjo,Mjo,Ejo,u2,Zge,Cjo,wjo,KO,Ajo,Ljo,yjo,b2,ehe,xjo,$jo,ZO,kjo,Sjo,Rjo,v2,ohe,Pjo,Bjo,eV,Ijo,Njo,qjo,F2,rhe,jjo,Djo,oV,Gjo,Ojo,Vjo,T2,the,Xjo,zjo,rV,Wjo,Qjo,Hjo,M2,ahe,Ujo,Jjo,tV,Yjo,Kjo,Zjo,E2,nhe,eDo,oDo,aV,rDo,tDo,aDo,C2,she,nDo,sDo,nV,lDo,iDo,dDo,w2,cDo,lhe,fDo,mDo,ihe,gDo,hDo,A2,xje,Hi,L2,dhe,HL,pDo,che,_Do,$je,Bo,UL,uDo,Ui,bDo,sV,vDo,FDo,lV,TDo,MDo,EDo,JL,CDo,fhe,wDo,ADo,LDo,ct,YL,yDo,mhe,xDo,$Do,Ji,kDo,ghe,SDo,RDo,iV,PDo,BDo,IDo,y2,NDo,to,KL,qDo,hhe,jDo,DDo,Ba,GDo,phe,ODo,VDo,_he,XDo,zDo,uhe,WDo,QDo,HDo,Yr,x2,bhe,UDo,JDo,dV,YDo,KDo,ZDo,$2,vhe,eGo,oGo,cV,rGo,tGo,aGo,k2,Fhe,nGo,sGo,fV,lGo,iGo,dGo,S2,The,cGo,fGo,mV,mGo,gGo,hGo,R2,Mhe,pGo,_Go,gV,uGo,bGo,vGo,P2,FGo,Ehe,TGo,MGo,Che,EGo,CGo,B2,kje,Yi,I2,whe,ZL,wGo,Ahe,AGo,Sje,Io,ey,LGo,Ki,yGo,hV,xGo,$Go,pV,kGo,SGo,RGo,oy,PGo,Lhe,BGo,IGo,NGo,ft,ry,qGo,yhe,jGo,DGo,Zi,GGo,xhe,OGo,VGo,_V,XGo,zGo,WGo,N2,QGo,ao,ty,HGo,$he,UGo,JGo,Ia,YGo,khe,KGo,ZGo,She,eOo,oOo,Rhe,rOo,tOo,aOo,U,q2,Phe,nOo,sOo,uV,lOo,iOo,dOo,j2,Bhe,cOo,fOo,bV,mOo,gOo,hOo,D2,Ihe,pOo,_Oo,vV,uOo,bOo,vOo,G2,Nhe,FOo,TOo,FV,MOo,EOo,COo,O2,qhe,wOo,AOo,TV,LOo,yOo,xOo,V2,jhe,$Oo,kOo,MV,SOo,ROo,POo,X2,Dhe,BOo,IOo,EV,NOo,qOo,jOo,z2,Ghe,DOo,GOo,CV,OOo,VOo,XOo,W2,Ohe,zOo,WOo,wV,QOo,HOo,UOo,Q2,Vhe,JOo,YOo,AV,KOo,ZOo,eVo,H2,Xhe,oVo,rVo,LV,tVo,aVo,nVo,U2,zhe,sVo,lVo,yV,iVo,dVo,cVo,J2,Whe,fVo,mVo,xV,gVo,hVo,pVo,Y2,Qhe,_Vo,uVo,$V,bVo,vVo,FVo,K2,Hhe,TVo,MVo,kV,EVo,CVo,wVo,Z2,Uhe,AVo,LVo,SV,yVo,xVo,$Vo,ev,Jhe,kVo,SVo,RV,RVo,PVo,BVo,ov,Yhe,IVo,NVo,PV,qVo,jVo,DVo,rv,Khe,GVo,OVo,BV,VVo,XVo,zVo,tv,Zhe,WVo,QVo,IV,HVo,UVo,JVo,av,epe,YVo,KVo,NV,ZVo,eXo,oXo,nv,ope,rXo,tXo,qV,aXo,nXo,sXo,sv,rpe,lXo,iXo,jV,dXo,cXo,fXo,lv,tpe,mXo,gXo,DV,hXo,pXo,_Xo,iv,ape,uXo,bXo,GV,vXo,FXo,TXo,dv,npe,MXo,EXo,OV,CXo,wXo,AXo,cv,spe,LXo,yXo,VV,xXo,$Xo,kXo,fv,lpe,SXo,RXo,XV,PXo,BXo,IXo,mv,ipe,NXo,qXo,zV,jXo,DXo,GXo,gv,dpe,OXo,VXo,WV,XXo,zXo,WXo,hv,cpe,QXo,HXo,QV,UXo,JXo,YXo,pv,fpe,KXo,ZXo,HV,ezo,ozo,rzo,_v,mpe,tzo,azo,UV,nzo,szo,lzo,uv,gpe,izo,dzo,JV,czo,fzo,mzo,bv,gzo,hpe,hzo,pzo,ppe,_zo,uzo,vv,Rje,ed,Fv,_pe,ay,bzo,upe,vzo,Pje,No,ny,Fzo,od,Tzo,YV,Mzo,Ezo,KV,Czo,wzo,Azo,sy,Lzo,bpe,yzo,xzo,$zo,mt,ly,kzo,vpe,Szo,Rzo,rd,Pzo,Fpe,Bzo,Izo,ZV,Nzo,qzo,jzo,Tv,Dzo,no,iy,Gzo,Tpe,Ozo,Vzo,Na,Xzo,Mpe,zzo,Wzo,Epe,Qzo,Hzo,Cpe,Uzo,Jzo,Yzo,V,Mv,wpe,Kzo,Zzo,eX,eWo,oWo,rWo,Ev,Ape,tWo,aWo,oX,nWo,sWo,lWo,Cv,Lpe,iWo,dWo,rX,cWo,fWo,mWo,wv,ype,gWo,hWo,tX,pWo,_Wo,uWo,Av,xpe,bWo,vWo,aX,FWo,TWo,MWo,Lv,$pe,EWo,CWo,nX,wWo,AWo,LWo,yv,kpe,yWo,xWo,sX,$Wo,kWo,SWo,xv,Spe,RWo,PWo,lX,BWo,IWo,NWo,$v,Rpe,qWo,jWo,iX,DWo,GWo,OWo,kv,Ppe,VWo,XWo,dX,zWo,WWo,QWo,Sv,Bpe,HWo,UWo,cX,JWo,YWo,KWo,Rv,Ipe,ZWo,eQo,fX,oQo,rQo,tQo,Pv,Npe,aQo,nQo,mX,sQo,lQo,iQo,Bv,qpe,dQo,cQo,gX,fQo,mQo,gQo,Iv,jpe,hQo,pQo,hX,_Qo,uQo,bQo,Nv,Dpe,vQo,FQo,pX,TQo,MQo,EQo,qv,Gpe,CQo,wQo,_X,AQo,LQo,yQo,jv,Ope,xQo,$Qo,uX,kQo,SQo,RQo,Dv,Vpe,PQo,BQo,bX,IQo,NQo,qQo,Gv,Xpe,jQo,DQo,vX,GQo,OQo,VQo,Ov,zpe,XQo,zQo,FX,WQo,QQo,HQo,Vv,Wpe,UQo,JQo,TX,YQo,KQo,ZQo,Xv,Qpe,eHo,oHo,MX,rHo,tHo,aHo,zv,Hpe,nHo,sHo,EX,lHo,iHo,dHo,Wv,Upe,cHo,fHo,CX,mHo,gHo,hHo,Qv,Jpe,pHo,_Ho,wX,uHo,bHo,vHo,Hv,Ype,FHo,THo,AX,MHo,EHo,CHo,Uv,Kpe,wHo,AHo,LX,LHo,yHo,xHo,Jv,Zpe,$Ho,kHo,yX,SHo,RHo,PHo,Yv,e_e,BHo,IHo,xX,NHo,qHo,jHo,Kv,o_e,DHo,GHo,$X,OHo,VHo,XHo,Zv,r_e,zHo,WHo,kX,QHo,HHo,UHo,eF,t_e,JHo,YHo,SX,KHo,ZHo,eUo,oF,a_e,oUo,rUo,RX,tUo,aUo,nUo,rF,n_e,sUo,lUo,PX,iUo,dUo,cUo,tF,s_e,fUo,mUo,BX,gUo,hUo,pUo,aF,l_e,_Uo,uUo,IX,bUo,vUo,FUo,nF,i_e,TUo,MUo,NX,EUo,CUo,wUo,sF,d_e,AUo,LUo,qX,yUo,xUo,$Uo,lF,c_e,kUo,SUo,jX,RUo,PUo,BUo,iF,IUo,f_e,NUo,qUo,m_e,jUo,DUo,dF,Bje,td,cF,g_e,dy,GUo,h_e,OUo,Ije,qo,cy,VUo,ad,XUo,DX,zUo,WUo,GX,QUo,HUo,UUo,fy,JUo,p_e,YUo,KUo,ZUo,gt,my,eJo,__e,oJo,rJo,nd,tJo,u_e,aJo,nJo,OX,sJo,lJo,iJo,fF,dJo,so,gy,cJo,b_e,fJo,mJo,qa,gJo,v_e,hJo,pJo,F_e,_Jo,uJo,T_e,bJo,vJo,FJo,M_e,mF,E_e,TJo,MJo,VX,EJo,CJo,wJo,gF,AJo,C_e,LJo,yJo,w_e,xJo,$Jo,hF,Nje,sd,pF,A_e,hy,kJo,L_e,SJo,qje,jo,py,RJo,ld,PJo,XX,BJo,IJo,zX,NJo,qJo,jJo,_y,DJo,y_e,GJo,OJo,VJo,ht,uy,XJo,x_e,zJo,WJo,id,QJo,$_e,HJo,UJo,WX,JJo,YJo,KJo,_F,ZJo,lo,by,eYo,k_e,oYo,rYo,ja,tYo,S_e,aYo,nYo,R_e,sYo,lYo,P_e,iYo,dYo,cYo,ve,uF,B_e,fYo,mYo,QX,gYo,hYo,pYo,bF,I_e,_Yo,uYo,HX,bYo,vYo,FYo,vF,N_e,TYo,MYo,UX,EYo,CYo,wYo,FF,q_e,AYo,LYo,JX,yYo,xYo,$Yo,Is,j_e,kYo,SYo,YX,RYo,PYo,KX,BYo,IYo,NYo,TF,D_e,qYo,jYo,ZX,DYo,GYo,OYo,Ns,G_e,VYo,XYo,ez,zYo,WYo,oz,QYo,HYo,UYo,pt,O_e,JYo,YYo,rz,KYo,ZYo,tz,eKo,oKo,az,rKo,tKo,aKo,MF,V_e,nKo,sKo,nz,lKo,iKo,dKo,EF,X_e,cKo,fKo,sz,mKo,gKo,hKo,CF,z_e,pKo,_Ko,lz,uKo,bKo,vKo,wF,W_e,FKo,TKo,iz,MKo,EKo,CKo,AF,Q_e,wKo,AKo,dz,LKo,yKo,xKo,LF,H_e,$Ko,kKo,cz,SKo,RKo,PKo,yF,U_e,BKo,IKo,fz,NKo,qKo,jKo,xF,DKo,J_e,GKo,OKo,Y_e,VKo,XKo,$F,jje,dd,kF,K_e,vy,zKo,Z_e,WKo,Dje,Do,Fy,QKo,cd,HKo,mz,UKo,JKo,gz,YKo,KKo,ZKo,Ty,eZo,eue,oZo,rZo,tZo,_t,My,aZo,oue,nZo,sZo,fd,lZo,rue,iZo,dZo,hz,cZo,fZo,mZo,SF,gZo,io,Ey,hZo,tue,pZo,_Zo,Da,uZo,aue,bZo,vZo,nue,FZo,TZo,sue,MZo,EZo,CZo,lue,RF,iue,wZo,AZo,pz,LZo,yZo,xZo,PF,$Zo,due,kZo,SZo,cue,RZo,PZo,BF,Gje,md,IF,fue,Cy,BZo,mue,IZo,Oje,Go,wy,NZo,gd,qZo,_z,jZo,DZo,uz,GZo,OZo,VZo,Ay,XZo,gue,zZo,WZo,QZo,ut,Ly,HZo,hue,UZo,JZo,hd,YZo,pue,KZo,ZZo,bz,eer,oer,rer,NF,ter,co,yy,aer,_ue,ner,ser,Ga,ler,uue,ier,der,bue,cer,fer,vue,mer,ger,her,Se,qF,Fue,per,_er,vz,uer,ber,ver,jF,Tue,Fer,Ter,Fz,Mer,Eer,Cer,DF,Mue,wer,Aer,Tz,Ler,yer,xer,GF,Eue,$er,ker,Mz,Ser,Rer,Per,OF,Cue,Ber,Ier,Ez,Ner,qer,jer,VF,wue,Der,Ger,Cz,Oer,Ver,Xer,XF,Aue,zer,Wer,wz,Qer,Her,Uer,zF,Lue,Jer,Yer,Az,Ker,Zer,eor,WF,yue,oor,ror,Lz,tor,aor,nor,QF,sor,xue,lor,ior,$ue,dor,cor,HF,Vje,pd,UF,kue,xy,mor,Sue,gor,Xje,Oo,$y,hor,_d,por,yz,_or,uor,xz,bor,vor,For,ky,Tor,Rue,Mor,Eor,Cor,bt,Sy,wor,Pue,Aor,Lor,ud,yor,Bue,xor,$or,$z,kor,Sor,Ror,JF,Por,fo,Ry,Bor,Iue,Ior,Nor,Oa,qor,Nue,jor,Dor,que,Gor,Oor,jue,Vor,Xor,zor,Kr,YF,Due,Wor,Qor,kz,Hor,Uor,Jor,KF,Gue,Yor,Kor,Sz,Zor,err,orr,ZF,Oue,rrr,trr,Rz,arr,nrr,srr,eT,Vue,lrr,irr,Pz,drr,crr,frr,oT,Xue,mrr,grr,Bz,hrr,prr,_rr,rT,urr,zue,brr,vrr,Wue,Frr,Trr,tT,zje,bd,aT,Que,Py,Mrr,Hue,Err,Wje,Vo,By,Crr,vd,wrr,Iz,Arr,Lrr,Nz,yrr,xrr,$rr,Iy,krr,Uue,Srr,Rrr,Prr,vt,Ny,Brr,Jue,Irr,Nrr,Fd,qrr,Yue,jrr,Drr,qz,Grr,Orr,Vrr,nT,Xrr,mo,qy,zrr,Kue,Wrr,Qrr,Va,Hrr,Zue,Urr,Jrr,e1e,Yrr,Krr,o1e,Zrr,etr,otr,Re,sT,r1e,rtr,ttr,jz,atr,ntr,str,lT,t1e,ltr,itr,Dz,dtr,ctr,ftr,iT,a1e,mtr,gtr,Gz,htr,ptr,_tr,dT,n1e,utr,btr,Oz,vtr,Ftr,Ttr,cT,s1e,Mtr,Etr,Vz,Ctr,wtr,Atr,fT,l1e,Ltr,ytr,Xz,xtr,$tr,ktr,mT,i1e,Str,Rtr,zz,Ptr,Btr,Itr,gT,d1e,Ntr,qtr,Wz,jtr,Dtr,Gtr,hT,c1e,Otr,Vtr,Qz,Xtr,ztr,Wtr,pT,Qtr,f1e,Htr,Utr,m1e,Jtr,Ytr,_T,Qje,Td,uT,g1e,jy,Ktr,h1e,Ztr,Hje,Xo,Dy,ear,Md,oar,Hz,rar,tar,Uz,aar,nar,sar,Gy,lar,p1e,iar,dar,car,Ft,Oy,far,_1e,mar,gar,Ed,har,u1e,par,_ar,Jz,uar,bar,Far,bT,Tar,go,Vy,Mar,b1e,Ear,Car,Xa,war,v1e,Aar,Lar,F1e,yar,xar,T1e,$ar,kar,Sar,Xy,vT,M1e,Rar,Par,Yz,Bar,Iar,Nar,FT,E1e,qar,jar,Kz,Dar,Gar,Oar,TT,Var,C1e,Xar,zar,w1e,War,Qar,MT,Uje,Cd,ET,A1e,zy,Har,L1e,Uar,Jje,zo,Wy,Jar,wd,Yar,Zz,Kar,Zar,eW,enr,onr,rnr,Qy,tnr,y1e,anr,nnr,snr,Tt,Hy,lnr,x1e,inr,dnr,Ad,cnr,$1e,fnr,mnr,oW,gnr,hnr,pnr,CT,_nr,ho,Uy,unr,k1e,bnr,vnr,za,Fnr,S1e,Tnr,Mnr,R1e,Enr,Cnr,P1e,wnr,Anr,Lnr,Zr,wT,B1e,ynr,xnr,rW,$nr,knr,Snr,AT,I1e,Rnr,Pnr,tW,Bnr,Inr,Nnr,LT,N1e,qnr,jnr,aW,Dnr,Gnr,Onr,yT,q1e,Vnr,Xnr,nW,znr,Wnr,Qnr,xT,j1e,Hnr,Unr,sW,Jnr,Ynr,Knr,$T,Znr,D1e,esr,osr,G1e,rsr,tsr,kT,Yje,Ld,ST,O1e,Jy,asr,V1e,nsr,Kje,Wo,Yy,ssr,yd,lsr,lW,isr,dsr,iW,csr,fsr,msr,Ky,gsr,X1e,hsr,psr,_sr,Mt,Zy,usr,z1e,bsr,vsr,xd,Fsr,W1e,Tsr,Msr,dW,Esr,Csr,wsr,RT,Asr,po,e8,Lsr,Q1e,ysr,xsr,Wa,$sr,H1e,ksr,Ssr,U1e,Rsr,Psr,J1e,Bsr,Isr,Nsr,$d,PT,Y1e,qsr,jsr,cW,Dsr,Gsr,Osr,BT,K1e,Vsr,Xsr,fW,zsr,Wsr,Qsr,IT,Z1e,Hsr,Usr,mW,Jsr,Ysr,Ksr,NT,Zsr,e3e,elr,olr,o3e,rlr,tlr,qT,Zje,kd,jT,r3e,o8,alr,t3e,nlr,eDe,Qo,r8,slr,Sd,llr,gW,ilr,dlr,hW,clr,flr,mlr,t8,glr,a3e,hlr,plr,_lr,Et,a8,ulr,n3e,blr,vlr,Rd,Flr,s3e,Tlr,Mlr,pW,Elr,Clr,wlr,DT,Alr,_o,n8,Llr,l3e,ylr,xlr,Qa,$lr,i3e,klr,Slr,d3e,Rlr,Plr,c3e,Blr,Ilr,Nlr,s8,GT,f3e,qlr,jlr,_W,Dlr,Glr,Olr,OT,m3e,Vlr,Xlr,uW,zlr,Wlr,Qlr,VT,Hlr,g3e,Ulr,Jlr,h3e,Ylr,Klr,XT,oDe,Pd,zT,p3e,l8,Zlr,_3e,eir,rDe,Ho,i8,oir,Bd,rir,bW,tir,air,vW,nir,sir,lir,d8,iir,u3e,dir,cir,fir,Ct,c8,mir,b3e,gir,hir,Id,pir,v3e,_ir,uir,FW,bir,vir,Fir,WT,Tir,uo,f8,Mir,F3e,Eir,Cir,Ha,wir,T3e,Air,Lir,M3e,yir,xir,E3e,$ir,kir,Sir,C3e,QT,w3e,Rir,Pir,TW,Bir,Iir,Nir,HT,qir,A3e,jir,Dir,L3e,Gir,Oir,UT,tDe,Nd,JT,y3e,m8,Vir,x3e,Xir,aDe,Uo,g8,zir,qd,Wir,MW,Qir,Hir,EW,Uir,Jir,Yir,h8,Kir,$3e,Zir,edr,odr,wt,p8,rdr,k3e,tdr,adr,jd,ndr,S3e,sdr,ldr,CW,idr,ddr,cdr,YT,fdr,bo,_8,mdr,R3e,gdr,hdr,Ua,pdr,P3e,_dr,udr,B3e,bdr,vdr,I3e,Fdr,Tdr,Mdr,Ja,KT,N3e,Edr,Cdr,wW,wdr,Adr,Ldr,ZT,q3e,ydr,xdr,AW,$dr,kdr,Sdr,e7,j3e,Rdr,Pdr,LW,Bdr,Idr,Ndr,o7,D3e,qdr,jdr,yW,Ddr,Gdr,Odr,r7,Vdr,G3e,Xdr,zdr,O3e,Wdr,Qdr,t7,nDe,Dd,a7,V3e,u8,Hdr,X3e,Udr,sDe,Jo,b8,Jdr,Gd,Ydr,xW,Kdr,Zdr,$W,ecr,ocr,rcr,v8,tcr,z3e,acr,ncr,scr,At,F8,lcr,W3e,icr,dcr,Od,ccr,Q3e,fcr,mcr,kW,gcr,hcr,pcr,n7,_cr,vo,T8,ucr,H3e,bcr,vcr,Ya,Fcr,U3e,Tcr,Mcr,J3e,Ecr,Ccr,Y3e,wcr,Acr,Lcr,K3e,s7,Z3e,ycr,xcr,SW,$cr,kcr,Scr,l7,Rcr,ebe,Pcr,Bcr,obe,Icr,Ncr,i7,lDe,Vd,d7,rbe,M8,qcr,tbe,jcr,iDe,Yo,E8,Dcr,Xd,Gcr,RW,Ocr,Vcr,PW,Xcr,zcr,Wcr,C8,Qcr,abe,Hcr,Ucr,Jcr,Lt,w8,Ycr,nbe,Kcr,Zcr,zd,efr,sbe,ofr,rfr,BW,tfr,afr,nfr,c7,sfr,wr,A8,lfr,lbe,ifr,dfr,Ka,cfr,ibe,ffr,mfr,dbe,gfr,hfr,cbe,pfr,_fr,ufr,q,f7,fbe,bfr,vfr,IW,Ffr,Tfr,Mfr,m7,mbe,Efr,Cfr,NW,wfr,Afr,Lfr,g7,gbe,yfr,xfr,qW,$fr,kfr,Sfr,h7,hbe,Rfr,Pfr,jW,Bfr,Ifr,Nfr,p7,pbe,qfr,jfr,DW,Dfr,Gfr,Ofr,_7,_be,Vfr,Xfr,GW,zfr,Wfr,Qfr,u7,ube,Hfr,Ufr,OW,Jfr,Yfr,Kfr,b7,bbe,Zfr,emr,VW,omr,rmr,tmr,v7,vbe,amr,nmr,XW,smr,lmr,imr,F7,Fbe,dmr,cmr,zW,fmr,mmr,gmr,T7,Tbe,hmr,pmr,WW,_mr,umr,bmr,M7,Mbe,vmr,Fmr,QW,Tmr,Mmr,Emr,E7,Ebe,Cmr,wmr,HW,Amr,Lmr,ymr,C7,Cbe,xmr,$mr,UW,kmr,Smr,Rmr,w7,wbe,Pmr,Bmr,JW,Imr,Nmr,qmr,A7,Abe,jmr,Dmr,YW,Gmr,Omr,Vmr,L7,Lbe,Xmr,zmr,KW,Wmr,Qmr,Hmr,qs,ybe,Umr,Jmr,ZW,Ymr,Kmr,eQ,Zmr,egr,ogr,y7,xbe,rgr,tgr,oQ,agr,ngr,sgr,x7,$be,lgr,igr,rQ,dgr,cgr,fgr,$7,kbe,mgr,ggr,tQ,hgr,pgr,_gr,k7,Sbe,ugr,bgr,aQ,vgr,Fgr,Tgr,S7,Rbe,Mgr,Egr,nQ,Cgr,wgr,Agr,R7,Pbe,Lgr,ygr,sQ,xgr,$gr,kgr,P7,Bbe,Sgr,Rgr,lQ,Pgr,Bgr,Igr,B7,Ibe,Ngr,qgr,iQ,jgr,Dgr,Ggr,I7,Nbe,Ogr,Vgr,dQ,Xgr,zgr,Wgr,N7,qbe,Qgr,Hgr,cQ,Ugr,Jgr,Ygr,q7,jbe,Kgr,Zgr,fQ,ehr,ohr,rhr,j7,Dbe,thr,ahr,mQ,nhr,shr,lhr,D7,Gbe,ihr,dhr,gQ,chr,fhr,mhr,G7,Obe,ghr,hhr,hQ,phr,_hr,uhr,O7,Vbe,bhr,vhr,pQ,Fhr,Thr,Mhr,V7,Xbe,Ehr,Chr,_Q,whr,Ahr,Lhr,X7,zbe,yhr,xhr,uQ,$hr,khr,Shr,z7,Wbe,Rhr,Phr,bQ,Bhr,Ihr,Nhr,W7,Qbe,qhr,jhr,vQ,Dhr,Ghr,Ohr,Q7,Hbe,Vhr,Xhr,FQ,zhr,Whr,Qhr,H7,Ube,Hhr,Uhr,TQ,Jhr,Yhr,Khr,U7,Jbe,Zhr,epr,MQ,opr,rpr,tpr,J7,Ybe,apr,npr,EQ,spr,lpr,ipr,Y7,Kbe,dpr,cpr,CQ,fpr,mpr,gpr,K7,Zbe,hpr,ppr,wQ,_pr,upr,bpr,Z7,e2e,vpr,Fpr,AQ,Tpr,Mpr,Epr,eM,o2e,Cpr,wpr,LQ,Apr,Lpr,ypr,oM,r2e,xpr,$pr,yQ,kpr,Spr,Rpr,rM,t2e,Ppr,Bpr,xQ,Ipr,Npr,qpr,tM,dDe,Wd,aM,a2e,L8,jpr,n2e,Dpr,cDe,Ko,y8,Gpr,Qd,Opr,$Q,Vpr,Xpr,kQ,zpr,Wpr,Qpr,x8,Hpr,s2e,Upr,Jpr,Ypr,yt,$8,Kpr,l2e,Zpr,e_r,Hd,o_r,i2e,r_r,t_r,SQ,a_r,n_r,s_r,nM,l_r,Ar,k8,i_r,d2e,d_r,c_r,Za,f_r,c2e,m_r,g_r,f2e,h_r,p_r,m2e,__r,u_r,b_r,se,sM,g2e,v_r,F_r,RQ,T_r,M_r,E_r,lM,h2e,C_r,w_r,PQ,A_r,L_r,y_r,iM,p2e,x_r,$_r,BQ,k_r,S_r,R_r,dM,_2e,P_r,B_r,IQ,I_r,N_r,q_r,cM,u2e,j_r,D_r,NQ,G_r,O_r,V_r,fM,b2e,X_r,z_r,qQ,W_r,Q_r,H_r,mM,v2e,U_r,J_r,jQ,Y_r,K_r,Z_r,gM,F2e,eur,our,DQ,rur,tur,aur,hM,T2e,nur,sur,GQ,lur,iur,dur,pM,M2e,cur,fur,OQ,mur,gur,hur,_M,E2e,pur,_ur,VQ,uur,bur,vur,uM,C2e,Fur,Tur,XQ,Mur,Eur,Cur,bM,w2e,wur,Aur,zQ,Lur,yur,xur,vM,A2e,$ur,kur,WQ,Sur,Rur,Pur,FM,L2e,Bur,Iur,QQ,Nur,qur,jur,TM,y2e,Dur,Gur,HQ,Our,Vur,Xur,MM,x2e,zur,Wur,UQ,Qur,Hur,Uur,EM,$2e,Jur,Yur,JQ,Kur,Zur,e1r,CM,k2e,o1r,r1r,YQ,t1r,a1r,n1r,wM,S2e,s1r,l1r,KQ,i1r,d1r,c1r,AM,R2e,f1r,m1r,ZQ,g1r,h1r,p1r,LM,P2e,_1r,u1r,eH,b1r,v1r,F1r,yM,B2e,T1r,M1r,oH,E1r,C1r,w1r,xM,fDe,Ud,$M,I2e,S8,A1r,N2e,L1r,mDe,Zo,R8,y1r,Jd,x1r,rH,$1r,k1r,tH,S1r,R1r,P1r,P8,B1r,q2e,I1r,N1r,q1r,xt,B8,j1r,j2e,D1r,G1r,Yd,O1r,D2e,V1r,X1r,aH,z1r,W1r,Q1r,kM,H1r,Lr,I8,U1r,G2e,J1r,Y1r,en,K1r,O2e,Z1r,e3r,V2e,o3r,r3r,X2e,t3r,a3r,n3r,Me,SM,z2e,s3r,l3r,nH,i3r,d3r,c3r,RM,W2e,f3r,m3r,sH,g3r,h3r,p3r,PM,Q2e,_3r,u3r,lH,b3r,v3r,F3r,BM,H2e,T3r,M3r,iH,E3r,C3r,w3r,IM,U2e,A3r,L3r,dH,y3r,x3r,$3r,NM,J2e,k3r,S3r,cH,R3r,P3r,B3r,qM,Y2e,I3r,N3r,fH,q3r,j3r,D3r,jM,K2e,G3r,O3r,mH,V3r,X3r,z3r,DM,Z2e,W3r,Q3r,gH,H3r,U3r,J3r,GM,eve,Y3r,K3r,hH,Z3r,ebr,obr,OM,ove,rbr,tbr,pH,abr,nbr,sbr,VM,rve,lbr,ibr,_H,dbr,cbr,fbr,XM,tve,mbr,gbr,uH,hbr,pbr,_br,zM,gDe,Kd,WM,ave,N8,ubr,nve,bbr,hDe,er,q8,vbr,Zd,Fbr,bH,Tbr,Mbr,vH,Ebr,Cbr,wbr,j8,Abr,sve,Lbr,ybr,xbr,$t,D8,$br,lve,kbr,Sbr,ec,Rbr,ive,Pbr,Bbr,FH,Ibr,Nbr,qbr,QM,jbr,yr,G8,Dbr,dve,Gbr,Obr,on,Vbr,cve,Xbr,zbr,fve,Wbr,Qbr,mve,Hbr,Ubr,Jbr,rn,HM,gve,Ybr,Kbr,TH,Zbr,e2r,o2r,UM,hve,r2r,t2r,MH,a2r,n2r,s2r,JM,pve,l2r,i2r,EH,d2r,c2r,f2r,YM,_ve,m2r,g2r,CH,h2r,p2r,_2r,KM,pDe,oc,ZM,uve,O8,u2r,bve,b2r,_De,or,V8,v2r,rc,F2r,wH,T2r,M2r,AH,E2r,C2r,w2r,X8,A2r,vve,L2r,y2r,x2r,kt,z8,$2r,Fve,k2r,S2r,tc,R2r,Tve,P2r,B2r,LH,I2r,N2r,q2r,e4,j2r,xr,W8,D2r,Mve,G2r,O2r,tn,V2r,Eve,X2r,z2r,Cve,W2r,Q2r,wve,H2r,U2r,J2r,ie,o4,Ave,Y2r,K2r,yH,Z2r,evr,ovr,r4,Lve,rvr,tvr,xH,avr,nvr,svr,t4,yve,lvr,ivr,$H,dvr,cvr,fvr,a4,xve,mvr,gvr,kH,hvr,pvr,_vr,n4,$ve,uvr,bvr,SH,vvr,Fvr,Tvr,s4,kve,Mvr,Evr,RH,Cvr,wvr,Avr,l4,Sve,Lvr,yvr,PH,xvr,$vr,kvr,i4,Rve,Svr,Rvr,BH,Pvr,Bvr,Ivr,d4,Pve,Nvr,qvr,IH,jvr,Dvr,Gvr,c4,Bve,Ovr,Vvr,NH,Xvr,zvr,Wvr,f4,Ive,Qvr,Hvr,qH,Uvr,Jvr,Yvr,m4,Nve,Kvr,Zvr,jH,eFr,oFr,rFr,g4,qve,tFr,aFr,DH,nFr,sFr,lFr,h4,jve,iFr,dFr,GH,cFr,fFr,mFr,p4,Dve,gFr,hFr,OH,pFr,_Fr,uFr,_4,Gve,bFr,vFr,VH,FFr,TFr,MFr,u4,Ove,EFr,CFr,XH,wFr,AFr,LFr,b4,Vve,yFr,xFr,zH,$Fr,kFr,SFr,v4,Xve,RFr,PFr,WH,BFr,IFr,NFr,F4,zve,qFr,jFr,QH,DFr,GFr,OFr,T4,uDe,ac,M4,Wve,Q8,VFr,Qve,XFr,bDe,rr,H8,zFr,nc,WFr,HH,QFr,HFr,UH,UFr,JFr,YFr,U8,KFr,Hve,ZFr,eTr,oTr,St,J8,rTr,Uve,tTr,aTr,sc,nTr,Jve,sTr,lTr,JH,iTr,dTr,cTr,E4,fTr,$r,Y8,mTr,Yve,gTr,hTr,an,pTr,Kve,_Tr,uTr,Zve,bTr,vTr,eFe,FTr,TTr,MTr,Le,C4,oFe,ETr,CTr,YH,wTr,ATr,LTr,w4,rFe,yTr,xTr,KH,$Tr,kTr,STr,A4,tFe,RTr,PTr,ZH,BTr,ITr,NTr,L4,aFe,qTr,jTr,eU,DTr,GTr,OTr,y4,nFe,VTr,XTr,oU,zTr,WTr,QTr,x4,sFe,HTr,UTr,rU,JTr,YTr,KTr,$4,lFe,ZTr,e7r,tU,o7r,r7r,t7r,k4,iFe,a7r,n7r,aU,s7r,l7r,i7r,S4,dFe,d7r,c7r,nU,f7r,m7r,g7r,R4,cFe,h7r,p7r,sU,_7r,u7r,b7r,P4,vDe,lc,B4,fFe,K8,v7r,mFe,F7r,FDe,tr,Z8,T7r,ic,M7r,lU,E7r,C7r,iU,w7r,A7r,L7r,e9,y7r,gFe,x7r,$7r,k7r,Rt,o9,S7r,hFe,R7r,P7r,dc,B7r,pFe,I7r,N7r,dU,q7r,j7r,D7r,I4,G7r,kr,r9,O7r,_Fe,V7r,X7r,nn,z7r,uFe,W7r,Q7r,bFe,H7r,U7r,vFe,J7r,Y7r,K7r,oe,N4,FFe,Z7r,eMr,cU,oMr,rMr,tMr,q4,TFe,aMr,nMr,fU,sMr,lMr,iMr,j4,MFe,dMr,cMr,mU,fMr,mMr,gMr,D4,EFe,hMr,pMr,gU,_Mr,uMr,bMr,G4,CFe,vMr,FMr,hU,TMr,MMr,EMr,O4,wFe,CMr,wMr,pU,AMr,LMr,yMr,V4,AFe,xMr,$Mr,_U,kMr,SMr,RMr,X4,LFe,PMr,BMr,uU,IMr,NMr,qMr,z4,yFe,jMr,DMr,bU,GMr,OMr,VMr,W4,xFe,XMr,zMr,vU,WMr,QMr,HMr,Q4,$Fe,UMr,JMr,FU,YMr,KMr,ZMr,H4,kFe,e4r,o4r,TU,r4r,t4r,a4r,U4,SFe,n4r,s4r,MU,l4r,i4r,d4r,J4,RFe,c4r,f4r,EU,m4r,g4r,h4r,Y4,PFe,p4r,_4r,CU,u4r,b4r,v4r,K4,BFe,F4r,T4r,wU,M4r,E4r,C4r,Z4,IFe,w4r,A4r,AU,L4r,y4r,x4r,eE,NFe,$4r,k4r,LU,S4r,R4r,P4r,oE,qFe,B4r,I4r,yU,N4r,q4r,j4r,rE,jFe,D4r,G4r,xU,O4r,V4r,X4r,tE,DFe,z4r,W4r,$U,Q4r,H4r,U4r,aE,GFe,J4r,Y4r,kU,K4r,Z4r,eEr,nE,OFe,oEr,rEr,SU,tEr,aEr,nEr,sE,VFe,sEr,lEr,RU,iEr,dEr,cEr,lE,XFe,fEr,mEr,PU,gEr,hEr,pEr,iE,zFe,_Er,uEr,BU,bEr,vEr,FEr,dE,TDe,cc,cE,WFe,t9,TEr,QFe,MEr,MDe,ar,a9,EEr,fc,CEr,IU,wEr,AEr,NU,LEr,yEr,xEr,n9,$Er,HFe,kEr,SEr,REr,Pt,s9,PEr,UFe,BEr,IEr,mc,NEr,JFe,qEr,jEr,qU,DEr,GEr,OEr,fE,VEr,Sr,l9,XEr,YFe,zEr,WEr,sn,QEr,KFe,HEr,UEr,ZFe,JEr,YEr,eTe,KEr,ZEr,eCr,pe,mE,oTe,oCr,rCr,jU,tCr,aCr,nCr,gE,rTe,sCr,lCr,DU,iCr,dCr,cCr,hE,tTe,fCr,mCr,GU,gCr,hCr,pCr,pE,aTe,_Cr,uCr,OU,bCr,vCr,FCr,_E,nTe,TCr,MCr,VU,ECr,CCr,wCr,uE,sTe,ACr,LCr,XU,yCr,xCr,$Cr,bE,lTe,kCr,SCr,zU,RCr,PCr,BCr,vE,iTe,ICr,NCr,WU,qCr,jCr,DCr,FE,dTe,GCr,OCr,QU,VCr,XCr,zCr,TE,cTe,WCr,QCr,HU,HCr,UCr,JCr,ME,fTe,YCr,KCr,UU,ZCr,e5r,o5r,EE,mTe,r5r,t5r,JU,a5r,n5r,s5r,CE,gTe,l5r,i5r,YU,d5r,c5r,f5r,wE,hTe,m5r,g5r,KU,h5r,p5r,_5r,AE,pTe,u5r,b5r,ZU,v5r,F5r,T5r,LE,_Te,M5r,E5r,eJ,C5r,w5r,A5r,yE,uTe,L5r,y5r,oJ,x5r,$5r,k5r,xE,EDe,gc,$E,bTe,i9,S5r,vTe,R5r,CDe,nr,d9,P5r,hc,B5r,rJ,I5r,N5r,tJ,q5r,j5r,D5r,c9,G5r,FTe,O5r,V5r,X5r,Bt,f9,z5r,TTe,W5r,Q5r,pc,H5r,MTe,U5r,J5r,aJ,Y5r,K5r,Z5r,kE,e0r,Rr,m9,o0r,ETe,r0r,t0r,ln,a0r,CTe,n0r,s0r,wTe,l0r,i0r,ATe,d0r,c0r,f0r,g9,SE,LTe,m0r,g0r,nJ,h0r,p0r,_0r,RE,yTe,u0r,b0r,sJ,v0r,F0r,T0r,PE,wDe,_c,BE,xTe,h9,M0r,$Te,E0r,ADe,sr,p9,C0r,uc,w0r,lJ,A0r,L0r,iJ,y0r,x0r,$0r,_9,k0r,kTe,S0r,R0r,P0r,It,u9,B0r,STe,I0r,N0r,bc,q0r,RTe,j0r,D0r,dJ,G0r,O0r,V0r,IE,X0r,Pr,b9,z0r,PTe,W0r,Q0r,dn,H0r,BTe,U0r,J0r,ITe,Y0r,K0r,NTe,Z0r,ewr,owr,qTe,NE,jTe,rwr,twr,cJ,awr,nwr,swr,qE,LDe,vc,jE,DTe,v9,lwr,GTe,iwr,yDe,lr,F9,dwr,Fc,cwr,fJ,fwr,mwr,mJ,gwr,hwr,pwr,T9,_wr,OTe,uwr,bwr,vwr,Nt,M9,Fwr,VTe,Twr,Mwr,Tc,Ewr,XTe,Cwr,wwr,gJ,Awr,Lwr,ywr,DE,xwr,Br,E9,$wr,zTe,kwr,Swr,cn,Rwr,WTe,Pwr,Bwr,QTe,Iwr,Nwr,HTe,qwr,jwr,Dwr,de,GE,UTe,Gwr,Owr,hJ,Vwr,Xwr,zwr,OE,JTe,Wwr,Qwr,pJ,Hwr,Uwr,Jwr,VE,YTe,Ywr,Kwr,_J,Zwr,eAr,oAr,XE,KTe,rAr,tAr,uJ,aAr,nAr,sAr,zE,ZTe,lAr,iAr,bJ,dAr,cAr,fAr,WE,e7e,mAr,gAr,vJ,hAr,pAr,_Ar,QE,o7e,uAr,bAr,FJ,vAr,FAr,TAr,HE,r7e,MAr,EAr,TJ,CAr,wAr,AAr,UE,t7e,LAr,yAr,MJ,xAr,$Ar,kAr,JE,a7e,SAr,RAr,EJ,PAr,BAr,IAr,YE,n7e,NAr,qAr,CJ,jAr,DAr,GAr,KE,s7e,OAr,VAr,wJ,XAr,zAr,WAr,ZE,l7e,QAr,HAr,AJ,UAr,JAr,YAr,eC,i7e,KAr,ZAr,LJ,e6r,o6r,r6r,oC,d7e,t6r,a6r,yJ,n6r,s6r,l6r,rC,c7e,i6r,d6r,xJ,c6r,f6r,m6r,tC,f7e,g6r,h6r,$J,p6r,_6r,u6r,aC,m7e,b6r,v6r,kJ,F6r,T6r,M6r,nC,g7e,E6r,C6r,SJ,w6r,A6r,L6r,sC,h7e,y6r,x6r,RJ,$6r,k6r,S6r,lC,xDe,Mc,iC,p7e,C9,R6r,_7e,P6r,$De,ir,w9,B6r,Ec,I6r,PJ,N6r,q6r,BJ,j6r,D6r,G6r,A9,O6r,u7e,V6r,X6r,z6r,qt,L9,W6r,b7e,Q6r,H6r,Cc,U6r,v7e,J6r,Y6r,IJ,K6r,Z6r,eLr,dC,oLr,Ir,y9,rLr,F7e,tLr,aLr,fn,nLr,T7e,sLr,lLr,M7e,iLr,dLr,E7e,cLr,fLr,mLr,ce,cC,C7e,gLr,hLr,NJ,pLr,_Lr,uLr,fC,w7e,bLr,vLr,qJ,FLr,TLr,MLr,mC,A7e,ELr,CLr,jJ,wLr,ALr,LLr,gC,L7e,yLr,xLr,DJ,$Lr,kLr,SLr,hC,y7e,RLr,PLr,GJ,BLr,ILr,NLr,pC,x7e,qLr,jLr,OJ,DLr,GLr,OLr,_C,$7e,VLr,XLr,VJ,zLr,WLr,QLr,uC,k7e,HLr,ULr,XJ,JLr,YLr,KLr,bC,S7e,ZLr,eyr,zJ,oyr,ryr,tyr,vC,R7e,ayr,nyr,WJ,syr,lyr,iyr,FC,P7e,dyr,cyr,QJ,fyr,myr,gyr,TC,B7e,hyr,pyr,HJ,_yr,uyr,byr,MC,I7e,vyr,Fyr,UJ,Tyr,Myr,Eyr,EC,N7e,Cyr,wyr,JJ,Ayr,Lyr,yyr,CC,q7e,xyr,$yr,YJ,kyr,Syr,Ryr,wC,j7e,Pyr,Byr,KJ,Iyr,Nyr,qyr,AC,D7e,jyr,Dyr,ZJ,Gyr,Oyr,Vyr,LC,G7e,Xyr,zyr,eY,Wyr,Qyr,Hyr,yC,O7e,Uyr,Jyr,oY,Yyr,Kyr,Zyr,xC,V7e,e8r,o8r,rY,r8r,t8r,a8r,$C,kDe,wc,kC,X7e,x9,n8r,z7e,s8r,SDe,dr,$9,l8r,Ac,i8r,tY,d8r,c8r,aY,f8r,m8r,g8r,k9,h8r,W7e,p8r,_8r,u8r,jt,S9,b8r,Q7e,v8r,F8r,Lc,T8r,H7e,M8r,E8r,nY,C8r,w8r,A8r,SC,L8r,Nr,R9,y8r,U7e,x8r,$8r,mn,k8r,J7e,S8r,R8r,Y7e,P8r,B8r,K7e,I8r,N8r,q8r,Z7e,RC,eMe,j8r,D8r,sY,G8r,O8r,V8r,PC,RDe,yc,BC,oMe,P9,X8r,rMe,z8r,PDe,cr,B9,W8r,xc,Q8r,lY,H8r,U8r,iY,J8r,Y8r,K8r,I9,Z8r,tMe,e9r,o9r,r9r,Dt,N9,t9r,aMe,a9r,n9r,$c,s9r,nMe,l9r,i9r,dY,d9r,c9r,f9r,IC,m9r,qr,q9,g9r,sMe,h9r,p9r,gn,_9r,lMe,u9r,b9r,iMe,v9r,F9r,dMe,T9r,M9r,E9r,cMe,NC,fMe,C9r,w9r,cY,A9r,L9r,y9r,qC,BDe,kc,jC,mMe,j9,x9r,gMe,$9r,IDe,fr,D9,k9r,Sc,S9r,fY,R9r,P9r,mY,B9r,I9r,N9r,G9,q9r,hMe,j9r,D9r,G9r,Gt,O9,O9r,pMe,V9r,X9r,Rc,z9r,_Me,W9r,Q9r,gY,H9r,U9r,J9r,DC,Y9r,jr,V9,K9r,uMe,Z9r,exr,hn,oxr,bMe,rxr,txr,vMe,axr,nxr,FMe,sxr,lxr,ixr,re,GC,TMe,dxr,cxr,hY,fxr,mxr,gxr,OC,MMe,hxr,pxr,pY,_xr,uxr,bxr,VC,EMe,vxr,Fxr,_Y,Txr,Mxr,Exr,XC,CMe,Cxr,wxr,uY,Axr,Lxr,yxr,zC,wMe,xxr,$xr,bY,kxr,Sxr,Rxr,WC,AMe,Pxr,Bxr,vY,Ixr,Nxr,qxr,QC,LMe,jxr,Dxr,FY,Gxr,Oxr,Vxr,HC,yMe,Xxr,zxr,TY,Wxr,Qxr,Hxr,UC,xMe,Uxr,Jxr,MY,Yxr,Kxr,Zxr,JC,$Me,e$r,o$r,EY,r$r,t$r,a$r,YC,kMe,n$r,s$r,CY,l$r,i$r,d$r,KC,SMe,c$r,f$r,wY,m$r,g$r,h$r,ZC,RMe,p$r,_$r,AY,u$r,b$r,v$r,e5,PMe,F$r,T$r,LY,M$r,E$r,C$r,o5,BMe,w$r,A$r,yY,L$r,y$r,x$r,r5,IMe,$$r,k$r,xY,S$r,R$r,P$r,t5,NMe,B$r,I$r,$Y,N$r,q$r,j$r,a5,qMe,D$r,G$r,kY,O$r,V$r,X$r,n5,jMe,z$r,W$r,SY,Q$r,H$r,U$r,s5,DMe,J$r,Y$r,RY,K$r,Z$r,ekr,l5,GMe,okr,rkr,PY,tkr,akr,nkr,i5,OMe,skr,lkr,BY,ikr,dkr,ckr,d5,VMe,fkr,mkr,IY,gkr,hkr,pkr,c5,XMe,_kr,ukr,NY,bkr,vkr,Fkr,f5,zMe,Tkr,Mkr,qY,Ekr,Ckr,wkr,m5,WMe,Akr,Lkr,jY,ykr,xkr,$kr,g5,NDe,Pc,h5,QMe,X9,kkr,HMe,Skr,qDe,mr,z9,Rkr,Bc,Pkr,DY,Bkr,Ikr,GY,Nkr,qkr,jkr,W9,Dkr,UMe,Gkr,Okr,Vkr,Ot,Q9,Xkr,JMe,zkr,Wkr,Ic,Qkr,YMe,Hkr,Ukr,OY,Jkr,Ykr,Kkr,p5,Zkr,Dr,H9,eSr,KMe,oSr,rSr,pn,tSr,ZMe,aSr,nSr,e4e,sSr,lSr,o4e,iSr,dSr,cSr,ye,_5,r4e,fSr,mSr,VY,gSr,hSr,pSr,u5,t4e,_Sr,uSr,XY,bSr,vSr,FSr,b5,a4e,TSr,MSr,zY,ESr,CSr,wSr,v5,n4e,ASr,LSr,WY,ySr,xSr,$Sr,F5,s4e,kSr,SSr,QY,RSr,PSr,BSr,T5,l4e,ISr,NSr,HY,qSr,jSr,DSr,M5,i4e,GSr,OSr,UY,VSr,XSr,zSr,E5,d4e,WSr,QSr,JY,HSr,USr,JSr,C5,c4e,YSr,KSr,YY,ZSr,eRr,oRr,w5,f4e,rRr,tRr,KY,aRr,nRr,sRr,A5,jDe,Nc,L5,m4e,U9,lRr,g4e,iRr,DDe,gr,J9,dRr,qc,cRr,ZY,fRr,mRr,eK,gRr,hRr,pRr,Y9,_Rr,h4e,uRr,bRr,vRr,Vt,K9,FRr,p4e,TRr,MRr,jc,ERr,_4e,CRr,wRr,oK,ARr,LRr,yRr,y5,xRr,Gr,Z9,$Rr,u4e,kRr,SRr,_n,RRr,b4e,PRr,BRr,v4e,IRr,NRr,F4e,qRr,jRr,DRr,Ee,x5,T4e,GRr,ORr,rK,VRr,XRr,zRr,$5,M4e,WRr,QRr,tK,HRr,URr,JRr,k5,E4e,YRr,KRr,aK,ZRr,ePr,oPr,S5,C4e,rPr,tPr,nK,aPr,nPr,sPr,R5,w4e,lPr,iPr,sK,dPr,cPr,fPr,P5,A4e,mPr,gPr,lK,hPr,pPr,_Pr,B5,L4e,uPr,bPr,iK,vPr,FPr,TPr,I5,y4e,MPr,EPr,dK,CPr,wPr,APr,N5,x4e,LPr,yPr,cK,xPr,$Pr,kPr,q5,$4e,SPr,RPr,fK,PPr,BPr,IPr,j5,k4e,NPr,qPr,mK,jPr,DPr,GPr,D5,S4e,OPr,VPr,gK,XPr,zPr,WPr,G5,GDe,Dc,O5,R4e,ex,QPr,P4e,HPr,ODe,hr,ox,UPr,Gc,JPr,hK,YPr,KPr,pK,ZPr,eBr,oBr,rx,rBr,B4e,tBr,aBr,nBr,Xt,tx,sBr,I4e,lBr,iBr,Oc,dBr,N4e,cBr,fBr,_K,mBr,gBr,hBr,V5,pBr,Or,ax,_Br,q4e,uBr,bBr,un,vBr,j4e,FBr,TBr,D4e,MBr,EBr,G4e,CBr,wBr,ABr,xe,X5,O4e,LBr,yBr,uK,xBr,$Br,kBr,z5,V4e,SBr,RBr,bK,PBr,BBr,IBr,W5,X4e,NBr,qBr,vK,jBr,DBr,GBr,Q5,z4e,OBr,VBr,FK,XBr,zBr,WBr,H5,W4e,QBr,HBr,TK,UBr,JBr,YBr,U5,Q4e,KBr,ZBr,MK,eIr,oIr,rIr,J5,H4e,tIr,aIr,EK,nIr,sIr,lIr,Y5,U4e,iIr,dIr,CK,cIr,fIr,mIr,K5,J4e,gIr,hIr,wK,pIr,_Ir,uIr,Z5,Y4e,bIr,vIr,AK,FIr,TIr,MIr,e0,VDe,Vc,o0,K4e,nx,EIr,Z4e,CIr,XDe,pr,sx,wIr,Xc,AIr,LK,LIr,yIr,yK,xIr,$Ir,kIr,lx,SIr,eEe,RIr,PIr,BIr,zt,ix,IIr,oEe,NIr,qIr,zc,jIr,rEe,DIr,GIr,xK,OIr,VIr,XIr,r0,zIr,Vr,dx,WIr,tEe,QIr,HIr,bn,UIr,aEe,JIr,YIr,nEe,KIr,ZIr,sEe,eNr,oNr,rNr,Pe,t0,lEe,tNr,aNr,$K,nNr,sNr,lNr,a0,iEe,iNr,dNr,kK,cNr,fNr,mNr,n0,dEe,gNr,hNr,SK,pNr,_Nr,uNr,s0,cEe,bNr,vNr,RK,FNr,TNr,MNr,l0,fEe,ENr,CNr,PK,wNr,ANr,LNr,i0,mEe,yNr,xNr,BK,$Nr,kNr,SNr,d0,gEe,RNr,PNr,IK,BNr,INr,NNr,c0,hEe,qNr,jNr,NK,DNr,GNr,ONr,f0,pEe,VNr,XNr,qK,zNr,WNr,QNr,m0,zDe,Wc,g0,_Ee,cx,HNr,uEe,UNr,WDe,_r,fx,JNr,Qc,YNr,jK,KNr,ZNr,DK,eqr,oqr,rqr,mx,tqr,bEe,aqr,nqr,sqr,Wt,gx,lqr,vEe,iqr,dqr,Hc,cqr,FEe,fqr,mqr,GK,gqr,hqr,pqr,h0,_qr,Xr,hx,uqr,TEe,bqr,vqr,vn,Fqr,MEe,Tqr,Mqr,EEe,Eqr,Cqr,CEe,wqr,Aqr,Lqr,$e,p0,wEe,yqr,xqr,OK,$qr,kqr,Sqr,_0,AEe,Rqr,Pqr,VK,Bqr,Iqr,Nqr,u0,LEe,qqr,jqr,XK,Dqr,Gqr,Oqr,b0,yEe,Vqr,Xqr,zK,zqr,Wqr,Qqr,v0,xEe,Hqr,Uqr,WK,Jqr,Yqr,Kqr,F0,$Ee,Zqr,ejr,QK,ojr,rjr,tjr,T0,kEe,ajr,njr,HK,sjr,ljr,ijr,M0,SEe,djr,cjr,UK,fjr,mjr,gjr,E0,REe,hjr,pjr,JK,_jr,ujr,bjr,C0,PEe,vjr,Fjr,YK,Tjr,Mjr,Ejr,w0,QDe,Uc,A0,BEe,px,Cjr,IEe,wjr,HDe,ur,_x,Ajr,Jc,Ljr,KK,yjr,xjr,ZK,$jr,kjr,Sjr,ux,Rjr,NEe,Pjr,Bjr,Ijr,Qt,bx,Njr,qEe,qjr,jjr,Yc,Djr,jEe,Gjr,Ojr,eZ,Vjr,Xjr,zjr,L0,Wjr,zr,vx,Qjr,DEe,Hjr,Ujr,Fn,Jjr,GEe,Yjr,Kjr,OEe,Zjr,eDr,VEe,oDr,rDr,tDr,ke,y0,XEe,aDr,nDr,oZ,sDr,lDr,iDr,x0,zEe,dDr,cDr,rZ,fDr,mDr,gDr,$0,WEe,hDr,pDr,tZ,_Dr,uDr,bDr,k0,QEe,vDr,FDr,aZ,TDr,MDr,EDr,S0,HEe,CDr,wDr,nZ,ADr,LDr,yDr,R0,UEe,xDr,$Dr,sZ,kDr,SDr,RDr,P0,JEe,PDr,BDr,lZ,IDr,NDr,qDr,B0,YEe,jDr,DDr,iZ,GDr,ODr,VDr,I0,KEe,XDr,zDr,dZ,WDr,QDr,HDr,N0,ZEe,UDr,JDr,cZ,YDr,KDr,ZDr,q0,UDe,Kc,j0,eCe,Fx,eGr,oCe,oGr,JDe,br,Tx,rGr,Zc,tGr,fZ,aGr,nGr,mZ,sGr,lGr,iGr,Mx,dGr,rCe,cGr,fGr,mGr,Ht,Ex,gGr,tCe,hGr,pGr,ef,_Gr,aCe,uGr,bGr,gZ,vGr,FGr,TGr,D0,MGr,Wr,Cx,EGr,nCe,CGr,wGr,Tn,AGr,sCe,LGr,yGr,lCe,xGr,$Gr,iCe,kGr,SGr,RGr,Ge,G0,dCe,PGr,BGr,hZ,IGr,NGr,qGr,O0,cCe,jGr,DGr,pZ,GGr,OGr,VGr,V0,fCe,XGr,zGr,_Z,WGr,QGr,HGr,X0,mCe,UGr,JGr,uZ,YGr,KGr,ZGr,z0,gCe,eOr,oOr,bZ,rOr,tOr,aOr,W0,hCe,nOr,sOr,vZ,lOr,iOr,dOr,Q0,pCe,cOr,fOr,FZ,mOr,gOr,hOr,H0,_Ce,pOr,_Or,TZ,uOr,bOr,vOr,U0,YDe,of,J0,uCe,wx,FOr,bCe,TOr,KDe,vr,Ax,MOr,rf,EOr,MZ,COr,wOr,EZ,AOr,LOr,yOr,Lx,xOr,vCe,$Or,kOr,SOr,Ut,yx,ROr,FCe,POr,BOr,tf,IOr,TCe,NOr,qOr,CZ,jOr,DOr,GOr,Y0,OOr,Qr,xx,VOr,MCe,XOr,zOr,Mn,WOr,ECe,QOr,HOr,CCe,UOr,JOr,wCe,YOr,KOr,ZOr,Oe,K0,ACe,eVr,oVr,wZ,rVr,tVr,aVr,Z0,LCe,nVr,sVr,AZ,lVr,iVr,dVr,ew,yCe,cVr,fVr,LZ,mVr,gVr,hVr,ow,xCe,pVr,_Vr,yZ,uVr,bVr,vVr,rw,$Ce,FVr,TVr,xZ,MVr,EVr,CVr,tw,kCe,wVr,AVr,$Z,LVr,yVr,xVr,aw,SCe,$Vr,kVr,kZ,SVr,RVr,PVr,nw,RCe,BVr,IVr,SZ,NVr,qVr,jVr,sw,ZDe,af,lw,PCe,$x,DVr,BCe,GVr,eGe,Fr,kx,OVr,nf,VVr,RZ,XVr,zVr,PZ,WVr,QVr,HVr,Sx,UVr,ICe,JVr,YVr,KVr,Jt,Rx,ZVr,NCe,eXr,oXr,sf,rXr,qCe,tXr,aXr,BZ,nXr,sXr,lXr,iw,iXr,Hr,Px,dXr,jCe,cXr,fXr,En,mXr,DCe,gXr,hXr,GCe,pXr,_Xr,OCe,uXr,bXr,vXr,VCe,dw,XCe,FXr,TXr,IZ,MXr,EXr,CXr,cw,oGe,lf,fw,zCe,Bx,wXr,WCe,AXr,rGe,Tr,Ix,LXr,df,yXr,NZ,xXr,$Xr,qZ,kXr,SXr,RXr,Nx,PXr,QCe,BXr,IXr,NXr,Yt,qx,qXr,HCe,jXr,DXr,cf,GXr,UCe,OXr,VXr,jZ,XXr,zXr,WXr,mw,QXr,Ur,jx,HXr,JCe,UXr,JXr,Cn,YXr,YCe,KXr,ZXr,KCe,ezr,ozr,ZCe,rzr,tzr,azr,Dx,gw,e5e,nzr,szr,DZ,lzr,izr,dzr,hw,o5e,czr,fzr,GZ,mzr,gzr,hzr,pw,tGe,ff,_w,r5e,Gx,pzr,t5e,_zr,aGe,Mr,Ox,uzr,mf,bzr,OZ,vzr,Fzr,VZ,Tzr,Mzr,Ezr,Vx,Czr,a5e,wzr,Azr,Lzr,Kt,Xx,yzr,n5e,xzr,$zr,gf,kzr,s5e,Szr,Rzr,XZ,Pzr,Bzr,Izr,uw,Nzr,Jr,zx,qzr,l5e,jzr,Dzr,wn,Gzr,i5e,Ozr,Vzr,d5e,Xzr,zzr,c5e,Wzr,Qzr,Hzr,f5e,bw,m5e,Uzr,Jzr,zZ,Yzr,Kzr,Zzr,vw,nGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),G6=new te({}),O6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new eWr({props:{warning:!0,$$slots:{default:[fRt]},$$scope:{ctx:y}}}),V6=new te({}),X6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L590"}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L613"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:y}}}),H6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L736"}}),U6=new te({}),J6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L391"}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17313/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L405"}}),ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:y}}}),eL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L604"}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Oh=new eWr({props:{$$slots:{default:[hRt]},$$scope:{ctx:y}}}),Vh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:y}}}),sL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),lL=new te({}),iL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L89"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L103"}}),cp=new eWr({props:{$$slots:{default:[_Rt]},$$scope:{ctx:y}}}),fp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:y}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L256"}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L740"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),hp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:y}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),fu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:y}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L747"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),gu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:y}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),t1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:y}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L762"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),n1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:y}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:y}}}),yL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L769"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),W1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[CRt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[wRt]},$$scope:{ctx:y}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L776"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ARt]},$$scope:{ctx:y}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:y}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L785"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:y}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[xRt]},$$scope:{ctx:y}}}),VL=new te({}),XL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L819"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$Rt]},$$scope:{ctx:y}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),A2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kRt]},$$scope:{ctx:y}}}),HL=new te({}),UL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L826"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[SRt]},$$scope:{ctx:y}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),B2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[RRt]},$$scope:{ctx:y}}}),ZL=new te({}),ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L812"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),N2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[PRt]},$$scope:{ctx:y}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:y}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L794"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IRt]},$$scope:{ctx:y}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:y}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L801"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qRt]},$$scope:{ctx:y}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:y}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L835"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:y}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:y}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L874"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:y}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:y}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L881"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:y}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:y}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L904"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[WRt]},$$scope:{ctx:y}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[QRt]},$$scope:{ctx:y}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L888"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[HRt]},$$scope:{ctx:y}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[URt]},$$scope:{ctx:y}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L895"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JRt]},$$scope:{ctx:y}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YRt]},$$scope:{ctx:y}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L913"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[KRt]},$$scope:{ctx:y}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:y}}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L920"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ePt]},$$scope:{ctx:y}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:y}}}),o8=new te({}),r8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L867"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rPt]},$$scope:{ctx:y}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:y}}}),l8=new te({}),i8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L842"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:y}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:y}}}),m8=new te({}),g8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L849"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:y}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:y}}}),u8=new te({}),b8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L858"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:y}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:y}}}),M8=new te({}),E8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:y}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fPt]},$$scope:{ctx:y}}}),L8=new te({}),y8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mPt]},$$scope:{ctx:y}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:y}}}),S8=new te({}),R8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:y}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pPt]},$$scope:{ctx:y}}}),N8=new te({}),q8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_Pt]},$$scope:{ctx:y}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:y}}}),O8=new te({}),V8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:y}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:y}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:y}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:y}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:y}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:y}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:y}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:y}}}),i9=new te({}),d9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:y}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:y}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:y}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:y}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:y}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:y}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:y}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:y}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:y}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:y}}}),P9=new te({}),B9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:y}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:y}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:y}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:y}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:y}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:y}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:y}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:y}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:y}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:y}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:y}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:y}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:y}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:y}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:y}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:y}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:y}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:y}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:y}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:y}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:y}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:y}}}),Bx=new te({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:y}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:y}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:y}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),N6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),q6=o("AutoConfig"),yn=o(", "),xn=a("a"),j6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),D6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),lk=o("will create a model that is an instance of "),vi=a("a"),ik=o("BertModel"),dk=o("."),Eo=l(),wa=a("p"),ck=o("There is one class of "),Ff=a("code"),fk=o("AutoModel"),gVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rje=l(),Fi=a("h2"),Tf=a("a"),qoe=a("span"),F(G6.$$.fragment),hVe=l(),joe=a("span"),pVe=o("Extending the Auto Classes"),tje=l(),kn=a("p"),_Ve=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Doe=a("code"),uVe=o("NewModel"),bVe=o(", make sure you have a "),Goe=a("code"),vVe=o("NewModelConfig"),FVe=o(` then you can add those to the auto
classes like this:`),aje=l(),F(O6.$$.fragment),nje=l(),mk=a("p"),TVe=o("You will then be able to use the auto classes like you would usually do!"),sje=l(),F(Mf.$$.fragment),lje=l(),Ti=a("h2"),Ef=a("a"),Ooe=a("span"),F(V6.$$.fragment),MVe=l(),Voe=a("span"),EVe=o("AutoConfig"),ije=l(),Co=a("div"),F(X6.$$.fragment),CVe=l(),z6=a("p"),wVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gk=a("a"),AVe=o("from_pretrained()"),LVe=o(" class method."),yVe=l(),W6=a("p"),xVe=o("This class cannot be instantiated directly using "),Xoe=a("code"),$Ve=o("__init__()"),kVe=o(" (throws an error)."),SVe=l(),Er=a("div"),F(Q6.$$.fragment),RVe=l(),zoe=a("p"),PVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BVe=l(),Mi=a("p"),IVe=o("The configuration class to instantiate is selected based on the "),Woe=a("code"),NVe=o("model_type"),qVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Qoe=a("code"),jVe=o("pretrained_model_name_or_path"),DVe=o(":"),GVe=l(),A=a("ul"),Cf=a("li"),Hoe=a("strong"),OVe=o("albert"),VVe=o(" \u2014 "),hk=a("a"),XVe=o("AlbertConfig"),zVe=o(" (ALBERT model)"),WVe=l(),wf=a("li"),Uoe=a("strong"),QVe=o("bart"),HVe=o(" \u2014 "),pk=a("a"),UVe=o("BartConfig"),JVe=o(" (BART model)"),YVe=l(),Af=a("li"),Joe=a("strong"),KVe=o("beit"),ZVe=o(" \u2014 "),_k=a("a"),eXe=o("BeitConfig"),oXe=o(" (BEiT model)"),rXe=l(),Lf=a("li"),Yoe=a("strong"),tXe=o("bert"),aXe=o(" \u2014 "),uk=a("a"),nXe=o("BertConfig"),sXe=o(" (BERT model)"),lXe=l(),yf=a("li"),Koe=a("strong"),iXe=o("bert-generation"),dXe=o(" \u2014 "),bk=a("a"),cXe=o("BertGenerationConfig"),fXe=o(" (Bert Generation model)"),mXe=l(),xf=a("li"),Zoe=a("strong"),gXe=o("big_bird"),hXe=o(" \u2014 "),vk=a("a"),pXe=o("BigBirdConfig"),_Xe=o(" (BigBird model)"),uXe=l(),$f=a("li"),ere=a("strong"),bXe=o("bigbird_pegasus"),vXe=o(" \u2014 "),Fk=a("a"),FXe=o("BigBirdPegasusConfig"),TXe=o(" (BigBird-Pegasus model)"),MXe=l(),kf=a("li"),ore=a("strong"),EXe=o("blenderbot"),CXe=o(" \u2014 "),Tk=a("a"),wXe=o("BlenderbotConfig"),AXe=o(" (Blenderbot model)"),LXe=l(),Sf=a("li"),rre=a("strong"),yXe=o("blenderbot-small"),xXe=o(" \u2014 "),Mk=a("a"),$Xe=o("BlenderbotSmallConfig"),kXe=o(" (BlenderbotSmall model)"),SXe=l(),Rf=a("li"),tre=a("strong"),RXe=o("camembert"),PXe=o(" \u2014 "),Ek=a("a"),BXe=o("CamembertConfig"),IXe=o(" (CamemBERT model)"),NXe=l(),Pf=a("li"),are=a("strong"),qXe=o("canine"),jXe=o(" \u2014 "),Ck=a("a"),DXe=o("CanineConfig"),GXe=o(" (CANINE model)"),OXe=l(),Bf=a("li"),nre=a("strong"),VXe=o("clip"),XXe=o(" \u2014 "),wk=a("a"),zXe=o("CLIPConfig"),WXe=o(" (CLIP model)"),QXe=l(),If=a("li"),sre=a("strong"),HXe=o("convbert"),UXe=o(" \u2014 "),Ak=a("a"),JXe=o("ConvBertConfig"),YXe=o(" (ConvBERT model)"),KXe=l(),Nf=a("li"),lre=a("strong"),ZXe=o("convnext"),eze=o(" \u2014 "),Lk=a("a"),oze=o("ConvNextConfig"),rze=o(" (ConvNeXT model)"),tze=l(),qf=a("li"),ire=a("strong"),aze=o("ctrl"),nze=o(" \u2014 "),yk=a("a"),sze=o("CTRLConfig"),lze=o(" (CTRL model)"),ize=l(),jf=a("li"),dre=a("strong"),dze=o("cvt"),cze=o(" \u2014 "),xk=a("a"),fze=o("CvtConfig"),mze=o(" (CvT model)"),gze=l(),Df=a("li"),cre=a("strong"),hze=o("data2vec-audio"),pze=o(" \u2014 "),$k=a("a"),_ze=o("Data2VecAudioConfig"),uze=o(" (Data2VecAudio model)"),bze=l(),Gf=a("li"),fre=a("strong"),vze=o("data2vec-text"),Fze=o(" \u2014 "),kk=a("a"),Tze=o("Data2VecTextConfig"),Mze=o(" (Data2VecText model)"),Eze=l(),Of=a("li"),mre=a("strong"),Cze=o("data2vec-vision"),wze=o(" \u2014 "),Sk=a("a"),Aze=o("Data2VecVisionConfig"),Lze=o(" (Data2VecVision model)"),yze=l(),Vf=a("li"),gre=a("strong"),xze=o("deberta"),$ze=o(" \u2014 "),Rk=a("a"),kze=o("DebertaConfig"),Sze=o(" (DeBERTa model)"),Rze=l(),Xf=a("li"),hre=a("strong"),Pze=o("deberta-v2"),Bze=o(" \u2014 "),Pk=a("a"),Ize=o("DebertaV2Config"),Nze=o(" (DeBERTa-v2 model)"),qze=l(),zf=a("li"),pre=a("strong"),jze=o("decision_transformer"),Dze=o(" \u2014 "),Bk=a("a"),Gze=o("DecisionTransformerConfig"),Oze=o(" (Decision Transformer model)"),Vze=l(),Wf=a("li"),_re=a("strong"),Xze=o("deit"),zze=o(" \u2014 "),Ik=a("a"),Wze=o("DeiTConfig"),Qze=o(" (DeiT model)"),Hze=l(),Qf=a("li"),ure=a("strong"),Uze=o("detr"),Jze=o(" \u2014 "),Nk=a("a"),Yze=o("DetrConfig"),Kze=o(" (DETR model)"),Zze=l(),Hf=a("li"),bre=a("strong"),eWe=o("distilbert"),oWe=o(" \u2014 "),qk=a("a"),rWe=o("DistilBertConfig"),tWe=o(" (DistilBERT model)"),aWe=l(),Uf=a("li"),vre=a("strong"),nWe=o("dpr"),sWe=o(" \u2014 "),jk=a("a"),lWe=o("DPRConfig"),iWe=o(" (DPR model)"),dWe=l(),Jf=a("li"),Fre=a("strong"),cWe=o("dpt"),fWe=o(" \u2014 "),Dk=a("a"),mWe=o("DPTConfig"),gWe=o(" (DPT model)"),hWe=l(),Yf=a("li"),Tre=a("strong"),pWe=o("electra"),_We=o(" \u2014 "),Gk=a("a"),uWe=o("ElectraConfig"),bWe=o(" (ELECTRA model)"),vWe=l(),Kf=a("li"),Mre=a("strong"),FWe=o("encoder-decoder"),TWe=o(" \u2014 "),Ok=a("a"),MWe=o("EncoderDecoderConfig"),EWe=o(" (Encoder decoder model)"),CWe=l(),Zf=a("li"),Ere=a("strong"),wWe=o("flaubert"),AWe=o(" \u2014 "),Vk=a("a"),LWe=o("FlaubertConfig"),yWe=o(" (FlauBERT model)"),xWe=l(),em=a("li"),Cre=a("strong"),$We=o("flava"),kWe=o(" \u2014 "),Xk=a("a"),SWe=o("FlavaConfig"),RWe=o(" (FLAVA model)"),PWe=l(),om=a("li"),wre=a("strong"),BWe=o("fnet"),IWe=o(" \u2014 "),zk=a("a"),NWe=o("FNetConfig"),qWe=o(" (FNet model)"),jWe=l(),rm=a("li"),Are=a("strong"),DWe=o("fsmt"),GWe=o(" \u2014 "),Wk=a("a"),OWe=o("FSMTConfig"),VWe=o(" (FairSeq Machine-Translation model)"),XWe=l(),tm=a("li"),Lre=a("strong"),zWe=o("funnel"),WWe=o(" \u2014 "),Qk=a("a"),QWe=o("FunnelConfig"),HWe=o(" (Funnel Transformer model)"),UWe=l(),am=a("li"),yre=a("strong"),JWe=o("glpn"),YWe=o(" \u2014 "),Hk=a("a"),KWe=o("GLPNConfig"),ZWe=o(" (GLPN model)"),eQe=l(),nm=a("li"),xre=a("strong"),oQe=o("gpt2"),rQe=o(" \u2014 "),Uk=a("a"),tQe=o("GPT2Config"),aQe=o(" (OpenAI GPT-2 model)"),nQe=l(),sm=a("li"),$re=a("strong"),sQe=o("gpt_neo"),lQe=o(" \u2014 "),Jk=a("a"),iQe=o("GPTNeoConfig"),dQe=o(" (GPT Neo model)"),cQe=l(),lm=a("li"),kre=a("strong"),fQe=o("gpt_neox"),mQe=o(" \u2014 "),Yk=a("a"),gQe=o("GPTNeoXConfig"),hQe=o(" (GPT NeoX model)"),pQe=l(),im=a("li"),Sre=a("strong"),_Qe=o("gptj"),uQe=o(" \u2014 "),Kk=a("a"),bQe=o("GPTJConfig"),vQe=o(" (GPT-J model)"),FQe=l(),dm=a("li"),Rre=a("strong"),TQe=o("groupvit"),MQe=o(" \u2014 "),Zk=a("a"),EQe=o("GroupViTConfig"),CQe=o(" (GroupViT model)"),wQe=l(),cm=a("li"),Pre=a("strong"),AQe=o("hubert"),LQe=o(" \u2014 "),eS=a("a"),yQe=o("HubertConfig"),xQe=o(" (Hubert model)"),$Qe=l(),fm=a("li"),Bre=a("strong"),kQe=o("ibert"),SQe=o(" \u2014 "),oS=a("a"),RQe=o("IBertConfig"),PQe=o(" (I-BERT model)"),BQe=l(),mm=a("li"),Ire=a("strong"),IQe=o("imagegpt"),NQe=o(" \u2014 "),rS=a("a"),qQe=o("ImageGPTConfig"),jQe=o(" (ImageGPT model)"),DQe=l(),gm=a("li"),Nre=a("strong"),GQe=o("layoutlm"),OQe=o(" \u2014 "),tS=a("a"),VQe=o("LayoutLMConfig"),XQe=o(" (LayoutLM model)"),zQe=l(),hm=a("li"),qre=a("strong"),WQe=o("layoutlmv2"),QQe=o(" \u2014 "),aS=a("a"),HQe=o("LayoutLMv2Config"),UQe=o(" (LayoutLMv2 model)"),JQe=l(),pm=a("li"),jre=a("strong"),YQe=o("layoutlmv3"),KQe=o(" \u2014 "),nS=a("a"),ZQe=o("LayoutLMv3Config"),eHe=o(" (LayoutLMv3 model)"),oHe=l(),_m=a("li"),Dre=a("strong"),rHe=o("led"),tHe=o(" \u2014 "),sS=a("a"),aHe=o("LEDConfig"),nHe=o(" (LED model)"),sHe=l(),um=a("li"),Gre=a("strong"),lHe=o("levit"),iHe=o(" \u2014 "),lS=a("a"),dHe=o("LevitConfig"),cHe=o(" (LeViT model)"),fHe=l(),bm=a("li"),Ore=a("strong"),mHe=o("longformer"),gHe=o(" \u2014 "),iS=a("a"),hHe=o("LongformerConfig"),pHe=o(" (Longformer model)"),_He=l(),vm=a("li"),Vre=a("strong"),uHe=o("luke"),bHe=o(" \u2014 "),dS=a("a"),vHe=o("LukeConfig"),FHe=o(" (LUKE model)"),THe=l(),Fm=a("li"),Xre=a("strong"),MHe=o("lxmert"),EHe=o(" \u2014 "),cS=a("a"),CHe=o("LxmertConfig"),wHe=o(" (LXMERT model)"),AHe=l(),Tm=a("li"),zre=a("strong"),LHe=o("m2m_100"),yHe=o(" \u2014 "),fS=a("a"),xHe=o("M2M100Config"),$He=o(" (M2M100 model)"),kHe=l(),Mm=a("li"),Wre=a("strong"),SHe=o("marian"),RHe=o(" \u2014 "),mS=a("a"),PHe=o("MarianConfig"),BHe=o(" (Marian model)"),IHe=l(),Em=a("li"),Qre=a("strong"),NHe=o("maskformer"),qHe=o(" \u2014 "),gS=a("a"),jHe=o("MaskFormerConfig"),DHe=o(" (MaskFormer model)"),GHe=l(),Cm=a("li"),Hre=a("strong"),OHe=o("mbart"),VHe=o(" \u2014 "),hS=a("a"),XHe=o("MBartConfig"),zHe=o(" (mBART model)"),WHe=l(),wm=a("li"),Ure=a("strong"),QHe=o("megatron-bert"),HHe=o(" \u2014 "),pS=a("a"),UHe=o("MegatronBertConfig"),JHe=o(" (Megatron-BERT model)"),YHe=l(),Am=a("li"),Jre=a("strong"),KHe=o("mobilebert"),ZHe=o(" \u2014 "),_S=a("a"),eUe=o("MobileBertConfig"),oUe=o(" (MobileBERT model)"),rUe=l(),Lm=a("li"),Yre=a("strong"),tUe=o("mpnet"),aUe=o(" \u2014 "),uS=a("a"),nUe=o("MPNetConfig"),sUe=o(" (MPNet model)"),lUe=l(),ym=a("li"),Kre=a("strong"),iUe=o("mt5"),dUe=o(" \u2014 "),bS=a("a"),cUe=o("MT5Config"),fUe=o(" (MT5 model)"),mUe=l(),xm=a("li"),Zre=a("strong"),gUe=o("nystromformer"),hUe=o(" \u2014 "),vS=a("a"),pUe=o("NystromformerConfig"),_Ue=o(" (Nystr\xF6mformer model)"),uUe=l(),$m=a("li"),ete=a("strong"),bUe=o("openai-gpt"),vUe=o(" \u2014 "),FS=a("a"),FUe=o("OpenAIGPTConfig"),TUe=o(" (OpenAI GPT model)"),MUe=l(),km=a("li"),ote=a("strong"),EUe=o("opt"),CUe=o(" \u2014 "),TS=a("a"),wUe=o("OPTConfig"),AUe=o(" (OPT model)"),LUe=l(),Sm=a("li"),rte=a("strong"),yUe=o("pegasus"),xUe=o(" \u2014 "),MS=a("a"),$Ue=o("PegasusConfig"),kUe=o(" (Pegasus model)"),SUe=l(),Rm=a("li"),tte=a("strong"),RUe=o("perceiver"),PUe=o(" \u2014 "),ES=a("a"),BUe=o("PerceiverConfig"),IUe=o(" (Perceiver model)"),NUe=l(),Pm=a("li"),ate=a("strong"),qUe=o("plbart"),jUe=o(" \u2014 "),CS=a("a"),DUe=o("PLBartConfig"),GUe=o(" (PLBart model)"),OUe=l(),Bm=a("li"),nte=a("strong"),VUe=o("poolformer"),XUe=o(" \u2014 "),wS=a("a"),zUe=o("PoolFormerConfig"),WUe=o(" (PoolFormer model)"),QUe=l(),Im=a("li"),ste=a("strong"),HUe=o("prophetnet"),UUe=o(" \u2014 "),AS=a("a"),JUe=o("ProphetNetConfig"),YUe=o(" (ProphetNet model)"),KUe=l(),Nm=a("li"),lte=a("strong"),ZUe=o("qdqbert"),eJe=o(" \u2014 "),LS=a("a"),oJe=o("QDQBertConfig"),rJe=o(" (QDQBert model)"),tJe=l(),qm=a("li"),ite=a("strong"),aJe=o("rag"),nJe=o(" \u2014 "),yS=a("a"),sJe=o("RagConfig"),lJe=o(" (RAG model)"),iJe=l(),jm=a("li"),dte=a("strong"),dJe=o("realm"),cJe=o(" \u2014 "),xS=a("a"),fJe=o("RealmConfig"),mJe=o(" (REALM model)"),gJe=l(),Dm=a("li"),cte=a("strong"),hJe=o("reformer"),pJe=o(" \u2014 "),$S=a("a"),_Je=o("ReformerConfig"),uJe=o(" (Reformer model)"),bJe=l(),Gm=a("li"),fte=a("strong"),vJe=o("regnet"),FJe=o(" \u2014 "),kS=a("a"),TJe=o("RegNetConfig"),MJe=o(" (RegNet model)"),EJe=l(),Om=a("li"),mte=a("strong"),CJe=o("rembert"),wJe=o(" \u2014 "),SS=a("a"),AJe=o("RemBertConfig"),LJe=o(" (RemBERT model)"),yJe=l(),Vm=a("li"),gte=a("strong"),xJe=o("resnet"),$Je=o(" \u2014 "),RS=a("a"),kJe=o("ResNetConfig"),SJe=o(" (ResNet model)"),RJe=l(),Xm=a("li"),hte=a("strong"),PJe=o("retribert"),BJe=o(" \u2014 "),PS=a("a"),IJe=o("RetriBertConfig"),NJe=o(" (RetriBERT model)"),qJe=l(),zm=a("li"),pte=a("strong"),jJe=o("roberta"),DJe=o(" \u2014 "),BS=a("a"),GJe=o("RobertaConfig"),OJe=o(" (RoBERTa model)"),VJe=l(),Wm=a("li"),_te=a("strong"),XJe=o("roformer"),zJe=o(" \u2014 "),IS=a("a"),WJe=o("RoFormerConfig"),QJe=o(" (RoFormer model)"),HJe=l(),Qm=a("li"),ute=a("strong"),UJe=o("segformer"),JJe=o(" \u2014 "),NS=a("a"),YJe=o("SegformerConfig"),KJe=o(" (SegFormer model)"),ZJe=l(),Hm=a("li"),bte=a("strong"),eYe=o("sew"),oYe=o(" \u2014 "),qS=a("a"),rYe=o("SEWConfig"),tYe=o(" (SEW model)"),aYe=l(),Um=a("li"),vte=a("strong"),nYe=o("sew-d"),sYe=o(" \u2014 "),jS=a("a"),lYe=o("SEWDConfig"),iYe=o(" (SEW-D model)"),dYe=l(),Jm=a("li"),Fte=a("strong"),cYe=o("speech-encoder-decoder"),fYe=o(" \u2014 "),DS=a("a"),mYe=o("SpeechEncoderDecoderConfig"),gYe=o(" (Speech Encoder decoder model)"),hYe=l(),Ym=a("li"),Tte=a("strong"),pYe=o("speech_to_text"),_Ye=o(" \u2014 "),GS=a("a"),uYe=o("Speech2TextConfig"),bYe=o(" (Speech2Text model)"),vYe=l(),Km=a("li"),Mte=a("strong"),FYe=o("speech_to_text_2"),TYe=o(" \u2014 "),OS=a("a"),MYe=o("Speech2Text2Config"),EYe=o(" (Speech2Text2 model)"),CYe=l(),Zm=a("li"),Ete=a("strong"),wYe=o("splinter"),AYe=o(" \u2014 "),VS=a("a"),LYe=o("SplinterConfig"),yYe=o(" (Splinter model)"),xYe=l(),eg=a("li"),Cte=a("strong"),$Ye=o("squeezebert"),kYe=o(" \u2014 "),XS=a("a"),SYe=o("SqueezeBertConfig"),RYe=o(" (SqueezeBERT model)"),PYe=l(),og=a("li"),wte=a("strong"),BYe=o("swin"),IYe=o(" \u2014 "),zS=a("a"),NYe=o("SwinConfig"),qYe=o(" (Swin Transformer model)"),jYe=l(),rg=a("li"),Ate=a("strong"),DYe=o("t5"),GYe=o(" \u2014 "),WS=a("a"),OYe=o("T5Config"),VYe=o(" (T5 model)"),XYe=l(),tg=a("li"),Lte=a("strong"),zYe=o("tapas"),WYe=o(" \u2014 "),QS=a("a"),QYe=o("TapasConfig"),HYe=o(" (TAPAS model)"),UYe=l(),ag=a("li"),yte=a("strong"),JYe=o("trajectory_transformer"),YYe=o(" \u2014 "),HS=a("a"),KYe=o("TrajectoryTransformerConfig"),ZYe=o(" (Trajectory Transformer model)"),eKe=l(),ng=a("li"),xte=a("strong"),oKe=o("transfo-xl"),rKe=o(" \u2014 "),US=a("a"),tKe=o("TransfoXLConfig"),aKe=o(" (Transformer-XL model)"),nKe=l(),sg=a("li"),$te=a("strong"),sKe=o("trocr"),lKe=o(" \u2014 "),JS=a("a"),iKe=o("TrOCRConfig"),dKe=o(" (TrOCR model)"),cKe=l(),lg=a("li"),kte=a("strong"),fKe=o("unispeech"),mKe=o(" \u2014 "),YS=a("a"),gKe=o("UniSpeechConfig"),hKe=o(" (UniSpeech model)"),pKe=l(),ig=a("li"),Ste=a("strong"),_Ke=o("unispeech-sat"),uKe=o(" \u2014 "),KS=a("a"),bKe=o("UniSpeechSatConfig"),vKe=o(" (UniSpeechSat model)"),FKe=l(),dg=a("li"),Rte=a("strong"),TKe=o("van"),MKe=o(" \u2014 "),ZS=a("a"),EKe=o("VanConfig"),CKe=o(" (VAN model)"),wKe=l(),cg=a("li"),Pte=a("strong"),AKe=o("vilt"),LKe=o(" \u2014 "),eR=a("a"),yKe=o("ViltConfig"),xKe=o(" (ViLT model)"),$Ke=l(),fg=a("li"),Bte=a("strong"),kKe=o("vision-encoder-decoder"),SKe=o(" \u2014 "),oR=a("a"),RKe=o("VisionEncoderDecoderConfig"),PKe=o(" (Vision Encoder decoder model)"),BKe=l(),mg=a("li"),Ite=a("strong"),IKe=o("vision-text-dual-encoder"),NKe=o(" \u2014 "),rR=a("a"),qKe=o("VisionTextDualEncoderConfig"),jKe=o(" (VisionTextDualEncoder model)"),DKe=l(),gg=a("li"),Nte=a("strong"),GKe=o("visual_bert"),OKe=o(" \u2014 "),tR=a("a"),VKe=o("VisualBertConfig"),XKe=o(" (VisualBERT model)"),zKe=l(),hg=a("li"),qte=a("strong"),WKe=o("vit"),QKe=o(" \u2014 "),aR=a("a"),HKe=o("ViTConfig"),UKe=o(" (ViT model)"),JKe=l(),pg=a("li"),jte=a("strong"),YKe=o("vit_mae"),KKe=o(" \u2014 "),nR=a("a"),ZKe=o("ViTMAEConfig"),eZe=o(" (ViTMAE model)"),oZe=l(),_g=a("li"),Dte=a("strong"),rZe=o("wav2vec2"),tZe=o(" \u2014 "),sR=a("a"),aZe=o("Wav2Vec2Config"),nZe=o(" (Wav2Vec2 model)"),sZe=l(),ug=a("li"),Gte=a("strong"),lZe=o("wav2vec2-conformer"),iZe=o(" \u2014 "),lR=a("a"),dZe=o("Wav2Vec2ConformerConfig"),cZe=o(" (Wav2Vec2-Conformer model)"),fZe=l(),bg=a("li"),Ote=a("strong"),mZe=o("wavlm"),gZe=o(" \u2014 "),iR=a("a"),hZe=o("WavLMConfig"),pZe=o(" (WavLM model)"),_Ze=l(),vg=a("li"),Vte=a("strong"),uZe=o("xglm"),bZe=o(" \u2014 "),dR=a("a"),vZe=o("XGLMConfig"),FZe=o(" (XGLM model)"),TZe=l(),Fg=a("li"),Xte=a("strong"),MZe=o("xlm"),EZe=o(" \u2014 "),cR=a("a"),CZe=o("XLMConfig"),wZe=o(" (XLM model)"),AZe=l(),Tg=a("li"),zte=a("strong"),LZe=o("xlm-prophetnet"),yZe=o(" \u2014 "),fR=a("a"),xZe=o("XLMProphetNetConfig"),$Ze=o(" (XLM-ProphetNet model)"),kZe=l(),Mg=a("li"),Wte=a("strong"),SZe=o("xlm-roberta"),RZe=o(" \u2014 "),mR=a("a"),PZe=o("XLMRobertaConfig"),BZe=o(" (XLM-RoBERTa model)"),IZe=l(),Eg=a("li"),Qte=a("strong"),NZe=o("xlm-roberta-xl"),qZe=o(" \u2014 "),gR=a("a"),jZe=o("XLMRobertaXLConfig"),DZe=o(" (XLM-RoBERTa-XL model)"),GZe=l(),Cg=a("li"),Hte=a("strong"),OZe=o("xlnet"),VZe=o(" \u2014 "),hR=a("a"),XZe=o("XLNetConfig"),zZe=o(" (XLNet model)"),WZe=l(),wg=a("li"),Ute=a("strong"),QZe=o("yolos"),HZe=o(" \u2014 "),pR=a("a"),UZe=o("YolosConfig"),JZe=o(" (YOLOS model)"),YZe=l(),Ag=a("li"),Jte=a("strong"),KZe=o("yoso"),ZZe=o(" \u2014 "),_R=a("a"),eeo=o("YosoConfig"),oeo=o(" (YOSO model)"),reo=l(),F(Lg.$$.fragment),teo=l(),yg=a("div"),F(H6.$$.fragment),aeo=l(),Yte=a("p"),neo=o("Register a new configuration for this class."),dje=l(),Ei=a("h2"),xg=a("a"),Kte=a("span"),F(U6.$$.fragment),seo=l(),Zte=a("span"),leo=o("AutoTokenizer"),cje=l(),wo=a("div"),F(J6.$$.fragment),ieo=l(),Y6=a("p"),deo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uR=a("a"),ceo=o("AutoTokenizer.from_pretrained()"),feo=o(" class method."),meo=l(),K6=a("p"),geo=o("This class cannot be instantiated directly using "),eae=a("code"),heo=o("__init__()"),peo=o(" (throws an error)."),_eo=l(),Cr=a("div"),F(Z6.$$.fragment),ueo=l(),oae=a("p"),beo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),veo=l(),Aa=a("p"),Feo=o("The tokenizer class to instantiate is selected based on the "),rae=a("code"),Teo=o("model_type"),Meo=o(` property of the config object (either
passed as an argument or loaded from `),tae=a("code"),Eeo=o("pretrained_model_name_or_path"),Ceo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=a("code"),weo=o("pretrained_model_name_or_path"),Aeo=o(":"),Leo=l(),k=a("ul"),Sn=a("li"),nae=a("strong"),yeo=o("albert"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("AlbertTokenizer"),keo=o(" or "),vR=a("a"),Seo=o("AlbertTokenizerFast"),Reo=o(" (ALBERT model)"),Peo=l(),Rn=a("li"),sae=a("strong"),Beo=o("bart"),Ieo=o(" \u2014 "),FR=a("a"),Neo=o("BartTokenizer"),qeo=o(" or "),TR=a("a"),jeo=o("BartTokenizerFast"),Deo=o(" (BART model)"),Geo=l(),Pn=a("li"),lae=a("strong"),Oeo=o("barthez"),Veo=o(" \u2014 "),MR=a("a"),Xeo=o("BarthezTokenizer"),zeo=o(" or "),ER=a("a"),Weo=o("BarthezTokenizerFast"),Qeo=o(" (BARThez model)"),Heo=l(),$g=a("li"),iae=a("strong"),Ueo=o("bartpho"),Jeo=o(" \u2014 "),CR=a("a"),Yeo=o("BartphoTokenizer"),Keo=o(" (BARTpho model)"),Zeo=l(),Bn=a("li"),dae=a("strong"),eoo=o("bert"),ooo=o(" \u2014 "),wR=a("a"),roo=o("BertTokenizer"),too=o(" or "),AR=a("a"),aoo=o("BertTokenizerFast"),noo=o(" (BERT model)"),soo=l(),kg=a("li"),cae=a("strong"),loo=o("bert-generation"),ioo=o(" \u2014 "),LR=a("a"),doo=o("BertGenerationTokenizer"),coo=o(" (Bert Generation model)"),foo=l(),Sg=a("li"),fae=a("strong"),moo=o("bert-japanese"),goo=o(" \u2014 "),yR=a("a"),hoo=o("BertJapaneseTokenizer"),poo=o(" (BertJapanese model)"),_oo=l(),Rg=a("li"),mae=a("strong"),uoo=o("bertweet"),boo=o(" \u2014 "),xR=a("a"),voo=o("BertweetTokenizer"),Foo=o(" (BERTweet model)"),Too=l(),In=a("li"),gae=a("strong"),Moo=o("big_bird"),Eoo=o(" \u2014 "),$R=a("a"),Coo=o("BigBirdTokenizer"),woo=o(" or "),kR=a("a"),Aoo=o("BigBirdTokenizerFast"),Loo=o(" (BigBird model)"),yoo=l(),Nn=a("li"),hae=a("strong"),xoo=o("bigbird_pegasus"),$oo=o(" \u2014 "),SR=a("a"),koo=o("PegasusTokenizer"),Soo=o(" or "),RR=a("a"),Roo=o("PegasusTokenizerFast"),Poo=o(" (BigBird-Pegasus model)"),Boo=l(),qn=a("li"),pae=a("strong"),Ioo=o("blenderbot"),Noo=o(" \u2014 "),PR=a("a"),qoo=o("BlenderbotTokenizer"),joo=o(" or "),BR=a("a"),Doo=o("BlenderbotTokenizerFast"),Goo=o(" (Blenderbot model)"),Ooo=l(),Pg=a("li"),_ae=a("strong"),Voo=o("blenderbot-small"),Xoo=o(" \u2014 "),IR=a("a"),zoo=o("BlenderbotSmallTokenizer"),Woo=o(" (BlenderbotSmall model)"),Qoo=l(),Bg=a("li"),uae=a("strong"),Hoo=o("byt5"),Uoo=o(" \u2014 "),NR=a("a"),Joo=o("ByT5Tokenizer"),Yoo=o(" (ByT5 model)"),Koo=l(),jn=a("li"),bae=a("strong"),Zoo=o("camembert"),ero=o(" \u2014 "),qR=a("a"),oro=o("CamembertTokenizer"),rro=o(" or "),jR=a("a"),tro=o("CamembertTokenizerFast"),aro=o(" (CamemBERT model)"),nro=l(),Ig=a("li"),vae=a("strong"),sro=o("canine"),lro=o(" \u2014 "),DR=a("a"),iro=o("CanineTokenizer"),dro=o(" (CANINE model)"),cro=l(),Dn=a("li"),Fae=a("strong"),fro=o("clip"),mro=o(" \u2014 "),GR=a("a"),gro=o("CLIPTokenizer"),hro=o(" or "),OR=a("a"),pro=o("CLIPTokenizerFast"),_ro=o(" (CLIP model)"),uro=l(),Gn=a("li"),Tae=a("strong"),bro=o("convbert"),vro=o(" \u2014 "),VR=a("a"),Fro=o("ConvBertTokenizer"),Tro=o(" or "),XR=a("a"),Mro=o("ConvBertTokenizerFast"),Ero=o(" (ConvBERT model)"),Cro=l(),On=a("li"),Mae=a("strong"),wro=o("cpm"),Aro=o(" \u2014 "),zR=a("a"),Lro=o("CpmTokenizer"),yro=o(" or "),WR=a("a"),xro=o("CpmTokenizerFast"),$ro=o(" (CPM model)"),kro=l(),Ng=a("li"),Eae=a("strong"),Sro=o("ctrl"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("CTRLTokenizer"),Bro=o(" (CTRL model)"),Iro=l(),Vn=a("li"),Cae=a("strong"),Nro=o("data2vec-text"),qro=o(" \u2014 "),HR=a("a"),jro=o("RobertaTokenizer"),Dro=o(" or "),UR=a("a"),Gro=o("RobertaTokenizerFast"),Oro=o(" (Data2VecText model)"),Vro=l(),Xn=a("li"),wae=a("strong"),Xro=o("deberta"),zro=o(" \u2014 "),JR=a("a"),Wro=o("DebertaTokenizer"),Qro=o(" or "),YR=a("a"),Hro=o("DebertaTokenizerFast"),Uro=o(" (DeBERTa model)"),Jro=l(),zn=a("li"),Aae=a("strong"),Yro=o("deberta-v2"),Kro=o(" \u2014 "),KR=a("a"),Zro=o("DebertaV2Tokenizer"),eto=o(" or "),ZR=a("a"),oto=o("DebertaV2TokenizerFast"),rto=o(" (DeBERTa-v2 model)"),tto=l(),Wn=a("li"),Lae=a("strong"),ato=o("distilbert"),nto=o(" \u2014 "),eP=a("a"),sto=o("DistilBertTokenizer"),lto=o(" or "),oP=a("a"),ito=o("DistilBertTokenizerFast"),dto=o(" (DistilBERT model)"),cto=l(),Qn=a("li"),yae=a("strong"),fto=o("dpr"),mto=o(" \u2014 "),rP=a("a"),gto=o("DPRQuestionEncoderTokenizer"),hto=o(" or "),tP=a("a"),pto=o("DPRQuestionEncoderTokenizerFast"),_to=o(" (DPR model)"),uto=l(),Hn=a("li"),xae=a("strong"),bto=o("electra"),vto=o(" \u2014 "),aP=a("a"),Fto=o("ElectraTokenizer"),Tto=o(" or "),nP=a("a"),Mto=o("ElectraTokenizerFast"),Eto=o(" (ELECTRA model)"),Cto=l(),qg=a("li"),$ae=a("strong"),wto=o("flaubert"),Ato=o(" \u2014 "),sP=a("a"),Lto=o("FlaubertTokenizer"),yto=o(" (FlauBERT model)"),xto=l(),Un=a("li"),kae=a("strong"),$to=o("fnet"),kto=o(" \u2014 "),lP=a("a"),Sto=o("FNetTokenizer"),Rto=o(" or "),iP=a("a"),Pto=o("FNetTokenizerFast"),Bto=o(" (FNet model)"),Ito=l(),jg=a("li"),Sae=a("strong"),Nto=o("fsmt"),qto=o(" \u2014 "),dP=a("a"),jto=o("FSMTTokenizer"),Dto=o(" (FairSeq Machine-Translation model)"),Gto=l(),Jn=a("li"),Rae=a("strong"),Oto=o("funnel"),Vto=o(" \u2014 "),cP=a("a"),Xto=o("FunnelTokenizer"),zto=o(" or "),fP=a("a"),Wto=o("FunnelTokenizerFast"),Qto=o(" (Funnel Transformer model)"),Hto=l(),Yn=a("li"),Pae=a("strong"),Uto=o("gpt2"),Jto=o(" \u2014 "),mP=a("a"),Yto=o("GPT2Tokenizer"),Kto=o(" or "),gP=a("a"),Zto=o("GPT2TokenizerFast"),eao=o(" (OpenAI GPT-2 model)"),oao=l(),Kn=a("li"),Bae=a("strong"),rao=o("gpt_neo"),tao=o(" \u2014 "),hP=a("a"),aao=o("GPT2Tokenizer"),nao=o(" or "),pP=a("a"),sao=o("GPT2TokenizerFast"),lao=o(" (GPT Neo model)"),iao=l(),Dg=a("li"),Iae=a("strong"),dao=o("gpt_neox"),cao=o(" \u2014 "),_P=a("a"),fao=o("GPTNeoXTokenizerFast"),mao=o(" (GPT NeoX model)"),gao=l(),Zn=a("li"),Nae=a("strong"),hao=o("gptj"),pao=o(" \u2014 "),uP=a("a"),_ao=o("GPT2Tokenizer"),uao=o(" or "),bP=a("a"),bao=o("GPT2TokenizerFast"),vao=o(" (GPT-J model)"),Fao=l(),es=a("li"),qae=a("strong"),Tao=o("groupvit"),Mao=o(" \u2014 "),vP=a("a"),Eao=o("CLIPTokenizer"),Cao=o(" or "),FP=a("a"),wao=o("CLIPTokenizerFast"),Aao=o(" (GroupViT model)"),Lao=l(),os=a("li"),jae=a("strong"),yao=o("herbert"),xao=o(" \u2014 "),TP=a("a"),$ao=o("HerbertTokenizer"),kao=o(" or "),MP=a("a"),Sao=o("HerbertTokenizerFast"),Rao=o(" (HerBERT model)"),Pao=l(),Gg=a("li"),Dae=a("strong"),Bao=o("hubert"),Iao=o(" \u2014 "),EP=a("a"),Nao=o("Wav2Vec2CTCTokenizer"),qao=o(" (Hubert model)"),jao=l(),rs=a("li"),Gae=a("strong"),Dao=o("ibert"),Gao=o(" \u2014 "),CP=a("a"),Oao=o("RobertaTokenizer"),Vao=o(" or "),wP=a("a"),Xao=o("RobertaTokenizerFast"),zao=o(" (I-BERT model)"),Wao=l(),ts=a("li"),Oae=a("strong"),Qao=o("layoutlm"),Hao=o(" \u2014 "),AP=a("a"),Uao=o("LayoutLMTokenizer"),Jao=o(" or "),LP=a("a"),Yao=o("LayoutLMTokenizerFast"),Kao=o(" (LayoutLM model)"),Zao=l(),as=a("li"),Vae=a("strong"),eno=o("layoutlmv2"),ono=o(" \u2014 "),yP=a("a"),rno=o("LayoutLMv2Tokenizer"),tno=o(" or "),xP=a("a"),ano=o("LayoutLMv2TokenizerFast"),nno=o(" (LayoutLMv2 model)"),sno=l(),ns=a("li"),Xae=a("strong"),lno=o("layoutlmv3"),ino=o(" \u2014 "),$P=a("a"),dno=o("LayoutLMv3Tokenizer"),cno=o(" or "),kP=a("a"),fno=o("LayoutLMv3TokenizerFast"),mno=o(" (LayoutLMv3 model)"),gno=l(),ss=a("li"),zae=a("strong"),hno=o("layoutxlm"),pno=o(" \u2014 "),SP=a("a"),_no=o("LayoutXLMTokenizer"),uno=o(" or "),RP=a("a"),bno=o("LayoutXLMTokenizerFast"),vno=o(" (LayoutXLM model)"),Fno=l(),ls=a("li"),Wae=a("strong"),Tno=o("led"),Mno=o(" \u2014 "),PP=a("a"),Eno=o("LEDTokenizer"),Cno=o(" or "),BP=a("a"),wno=o("LEDTokenizerFast"),Ano=o(" (LED model)"),Lno=l(),is=a("li"),Qae=a("strong"),yno=o("longformer"),xno=o(" \u2014 "),IP=a("a"),$no=o("LongformerTokenizer"),kno=o(" or "),NP=a("a"),Sno=o("LongformerTokenizerFast"),Rno=o(" (Longformer model)"),Pno=l(),Og=a("li"),Hae=a("strong"),Bno=o("luke"),Ino=o(" \u2014 "),qP=a("a"),Nno=o("LukeTokenizer"),qno=o(" (LUKE model)"),jno=l(),ds=a("li"),Uae=a("strong"),Dno=o("lxmert"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("LxmertTokenizer"),Vno=o(" or "),DP=a("a"),Xno=o("LxmertTokenizerFast"),zno=o(" (LXMERT model)"),Wno=l(),Vg=a("li"),Jae=a("strong"),Qno=o("m2m_100"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("M2M100Tokenizer"),Jno=o(" (M2M100 model)"),Yno=l(),Xg=a("li"),Yae=a("strong"),Kno=o("marian"),Zno=o(" \u2014 "),OP=a("a"),eso=o("MarianTokenizer"),oso=o(" (Marian model)"),rso=l(),cs=a("li"),Kae=a("strong"),tso=o("mbart"),aso=o(" \u2014 "),VP=a("a"),nso=o("MBartTokenizer"),sso=o(" or "),XP=a("a"),lso=o("MBartTokenizerFast"),iso=o(" (mBART model)"),dso=l(),fs=a("li"),Zae=a("strong"),cso=o("mbart50"),fso=o(" \u2014 "),zP=a("a"),mso=o("MBart50Tokenizer"),gso=o(" or "),WP=a("a"),hso=o("MBart50TokenizerFast"),pso=o(" (mBART-50 model)"),_so=l(),ms=a("li"),ene=a("strong"),uso=o("megatron-bert"),bso=o(" \u2014 "),QP=a("a"),vso=o("BertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("BertTokenizerFast"),Mso=o(" (Megatron-BERT model)"),Eso=l(),zg=a("li"),one=a("strong"),Cso=o("mluke"),wso=o(" \u2014 "),UP=a("a"),Aso=o("MLukeTokenizer"),Lso=o(" (mLUKE model)"),yso=l(),gs=a("li"),rne=a("strong"),xso=o("mobilebert"),$so=o(" \u2014 "),JP=a("a"),kso=o("MobileBertTokenizer"),Sso=o(" or "),YP=a("a"),Rso=o("MobileBertTokenizerFast"),Pso=o(" (MobileBERT model)"),Bso=l(),hs=a("li"),tne=a("strong"),Iso=o("mpnet"),Nso=o(" \u2014 "),KP=a("a"),qso=o("MPNetTokenizer"),jso=o(" or "),ZP=a("a"),Dso=o("MPNetTokenizerFast"),Gso=o(" (MPNet model)"),Oso=l(),ps=a("li"),ane=a("strong"),Vso=o("mt5"),Xso=o(" \u2014 "),eB=a("a"),zso=o("MT5Tokenizer"),Wso=o(" or "),oB=a("a"),Qso=o("MT5TokenizerFast"),Hso=o(" (MT5 model)"),Uso=l(),_s=a("li"),nne=a("strong"),Jso=o("nystromformer"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("AlbertTokenizer"),Zso=o(" or "),tB=a("a"),elo=o("AlbertTokenizerFast"),olo=o(" (Nystr\xF6mformer model)"),rlo=l(),us=a("li"),sne=a("strong"),tlo=o("openai-gpt"),alo=o(" \u2014 "),aB=a("a"),nlo=o("OpenAIGPTTokenizer"),slo=o(" or "),nB=a("a"),llo=o("OpenAIGPTTokenizerFast"),ilo=o(" (OpenAI GPT model)"),dlo=l(),Wg=a("li"),lne=a("strong"),clo=o("opt"),flo=o(" \u2014 "),sB=a("a"),mlo=o("GPT2Tokenizer"),glo=o(" (OPT model)"),hlo=l(),bs=a("li"),ine=a("strong"),plo=o("pegasus"),_lo=o(" \u2014 "),lB=a("a"),ulo=o("PegasusTokenizer"),blo=o(" or "),iB=a("a"),vlo=o("PegasusTokenizerFast"),Flo=o(" (Pegasus model)"),Tlo=l(),Qg=a("li"),dne=a("strong"),Mlo=o("perceiver"),Elo=o(" \u2014 "),dB=a("a"),Clo=o("PerceiverTokenizer"),wlo=o(" (Perceiver model)"),Alo=l(),Hg=a("li"),cne=a("strong"),Llo=o("phobert"),ylo=o(" \u2014 "),cB=a("a"),xlo=o("PhobertTokenizer"),$lo=o(" (PhoBERT model)"),klo=l(),Ug=a("li"),fne=a("strong"),Slo=o("plbart"),Rlo=o(" \u2014 "),fB=a("a"),Plo=o("PLBartTokenizer"),Blo=o(" (PLBart model)"),Ilo=l(),Jg=a("li"),mne=a("strong"),Nlo=o("prophetnet"),qlo=o(" \u2014 "),mB=a("a"),jlo=o("ProphetNetTokenizer"),Dlo=o(" (ProphetNet model)"),Glo=l(),vs=a("li"),gne=a("strong"),Olo=o("qdqbert"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("BertTokenizer"),zlo=o(" or "),hB=a("a"),Wlo=o("BertTokenizerFast"),Qlo=o(" (QDQBert model)"),Hlo=l(),Yg=a("li"),hne=a("strong"),Ulo=o("rag"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("RagTokenizer"),Klo=o(" (RAG model)"),Zlo=l(),Fs=a("li"),pne=a("strong"),eio=o("realm"),oio=o(" \u2014 "),_B=a("a"),rio=o("RealmTokenizer"),tio=o(" or "),uB=a("a"),aio=o("RealmTokenizerFast"),nio=o(" (REALM model)"),sio=l(),Ts=a("li"),_ne=a("strong"),lio=o("reformer"),iio=o(" \u2014 "),bB=a("a"),dio=o("ReformerTokenizer"),cio=o(" or "),vB=a("a"),fio=o("ReformerTokenizerFast"),mio=o(" (Reformer model)"),gio=l(),Ms=a("li"),une=a("strong"),hio=o("rembert"),pio=o(" \u2014 "),FB=a("a"),_io=o("RemBertTokenizer"),uio=o(" or "),TB=a("a"),bio=o("RemBertTokenizerFast"),vio=o(" (RemBERT model)"),Fio=l(),Es=a("li"),bne=a("strong"),Tio=o("retribert"),Mio=o(" \u2014 "),MB=a("a"),Eio=o("RetriBertTokenizer"),Cio=o(" or "),EB=a("a"),wio=o("RetriBertTokenizerFast"),Aio=o(" (RetriBERT model)"),Lio=l(),Cs=a("li"),vne=a("strong"),yio=o("roberta"),xio=o(" \u2014 "),CB=a("a"),$io=o("RobertaTokenizer"),kio=o(" or "),wB=a("a"),Sio=o("RobertaTokenizerFast"),Rio=o(" (RoBERTa model)"),Pio=l(),ws=a("li"),Fne=a("strong"),Bio=o("roformer"),Iio=o(" \u2014 "),AB=a("a"),Nio=o("RoFormerTokenizer"),qio=o(" or "),LB=a("a"),jio=o("RoFormerTokenizerFast"),Dio=o(" (RoFormer model)"),Gio=l(),Kg=a("li"),Tne=a("strong"),Oio=o("speech_to_text"),Vio=o(" \u2014 "),yB=a("a"),Xio=o("Speech2TextTokenizer"),zio=o(" (Speech2Text model)"),Wio=l(),Zg=a("li"),Mne=a("strong"),Qio=o("speech_to_text_2"),Hio=o(" \u2014 "),xB=a("a"),Uio=o("Speech2Text2Tokenizer"),Jio=o(" (Speech2Text2 model)"),Yio=l(),As=a("li"),Ene=a("strong"),Kio=o("splinter"),Zio=o(" \u2014 "),$B=a("a"),edo=o("SplinterTokenizer"),odo=o(" or "),kB=a("a"),rdo=o("SplinterTokenizerFast"),tdo=o(" (Splinter model)"),ado=l(),Ls=a("li"),Cne=a("strong"),ndo=o("squeezebert"),sdo=o(" \u2014 "),SB=a("a"),ldo=o("SqueezeBertTokenizer"),ido=o(" or "),RB=a("a"),ddo=o("SqueezeBertTokenizerFast"),cdo=o(" (SqueezeBERT model)"),fdo=l(),ys=a("li"),wne=a("strong"),mdo=o("t5"),gdo=o(" \u2014 "),PB=a("a"),hdo=o("T5Tokenizer"),pdo=o(" or "),BB=a("a"),_do=o("T5TokenizerFast"),udo=o(" (T5 model)"),bdo=l(),eh=a("li"),Ane=a("strong"),vdo=o("tapas"),Fdo=o(" \u2014 "),IB=a("a"),Tdo=o("TapasTokenizer"),Mdo=o(" (TAPAS model)"),Edo=l(),oh=a("li"),Lne=a("strong"),Cdo=o("tapex"),wdo=o(" \u2014 "),NB=a("a"),Ado=o("TapexTokenizer"),Ldo=o(" (TAPEX model)"),ydo=l(),rh=a("li"),yne=a("strong"),xdo=o("transfo-xl"),$do=o(" \u2014 "),qB=a("a"),kdo=o("TransfoXLTokenizer"),Sdo=o(" (Transformer-XL model)"),Rdo=l(),xs=a("li"),xne=a("strong"),Pdo=o("visual_bert"),Bdo=o(" \u2014 "),jB=a("a"),Ido=o("BertTokenizer"),Ndo=o(" or "),DB=a("a"),qdo=o("BertTokenizerFast"),jdo=o(" (VisualBERT model)"),Ddo=l(),th=a("li"),$ne=a("strong"),Gdo=o("wav2vec2"),Odo=o(" \u2014 "),GB=a("a"),Vdo=o("Wav2Vec2CTCTokenizer"),Xdo=o(" (Wav2Vec2 model)"),zdo=l(),ah=a("li"),kne=a("strong"),Wdo=o("wav2vec2-conformer"),Qdo=o(" \u2014 "),OB=a("a"),Hdo=o("Wav2Vec2CTCTokenizer"),Udo=o(" (Wav2Vec2-Conformer model)"),Jdo=l(),nh=a("li"),Sne=a("strong"),Ydo=o("wav2vec2_phoneme"),Kdo=o(" \u2014 "),VB=a("a"),Zdo=o("Wav2Vec2PhonemeCTCTokenizer"),eco=o(" (Wav2Vec2Phoneme model)"),oco=l(),$s=a("li"),Rne=a("strong"),rco=o("xglm"),tco=o(" \u2014 "),XB=a("a"),aco=o("XGLMTokenizer"),nco=o(" or "),zB=a("a"),sco=o("XGLMTokenizerFast"),lco=o(" (XGLM model)"),ico=l(),sh=a("li"),Pne=a("strong"),dco=o("xlm"),cco=o(" \u2014 "),WB=a("a"),fco=o("XLMTokenizer"),mco=o(" (XLM model)"),gco=l(),lh=a("li"),Bne=a("strong"),hco=o("xlm-prophetnet"),pco=o(" \u2014 "),QB=a("a"),_co=o("XLMProphetNetTokenizer"),uco=o(" (XLM-ProphetNet model)"),bco=l(),ks=a("li"),Ine=a("strong"),vco=o("xlm-roberta"),Fco=o(" \u2014 "),HB=a("a"),Tco=o("XLMRobertaTokenizer"),Mco=o(" or "),UB=a("a"),Eco=o("XLMRobertaTokenizerFast"),Cco=o(" (XLM-RoBERTa model)"),wco=l(),Ss=a("li"),Nne=a("strong"),Aco=o("xlm-roberta-xl"),Lco=o(" \u2014 "),JB=a("a"),yco=o("RobertaTokenizer"),xco=o(" or "),YB=a("a"),$co=o("RobertaTokenizerFast"),kco=o(" (XLM-RoBERTa-XL model)"),Sco=l(),Rs=a("li"),qne=a("strong"),Rco=o("xlnet"),Pco=o(" \u2014 "),KB=a("a"),Bco=o("XLNetTokenizer"),Ico=o(" or "),ZB=a("a"),Nco=o("XLNetTokenizerFast"),qco=o(" (XLNet model)"),jco=l(),Ps=a("li"),jne=a("strong"),Dco=o("yoso"),Gco=o(" \u2014 "),eI=a("a"),Oco=o("AlbertTokenizer"),Vco=o(" or "),oI=a("a"),Xco=o("AlbertTokenizerFast"),zco=o(" (YOSO model)"),Wco=l(),F(ih.$$.fragment),Qco=l(),dh=a("div"),F(eL.$$.fragment),Hco=l(),Dne=a("p"),Uco=o("Register a new tokenizer in this mapping."),fje=l(),Ci=a("h2"),ch=a("a"),Gne=a("span"),F(oL.$$.fragment),Jco=l(),One=a("span"),Yco=o("AutoFeatureExtractor"),mje=l(),Ao=a("div"),F(rL.$$.fragment),Kco=l(),tL=a("p"),Zco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rI=a("a"),efo=o("AutoFeatureExtractor.from_pretrained()"),ofo=o(" class method."),rfo=l(),aL=a("p"),tfo=o("This class cannot be instantiated directly using "),Vne=a("code"),afo=o("__init__()"),nfo=o(" (throws an error)."),sfo=l(),He=a("div"),F(nL.$$.fragment),lfo=l(),Xne=a("p"),ifo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dfo=l(),La=a("p"),cfo=o("The feature extractor class to instantiate is selected based on the "),zne=a("code"),ffo=o("model_type"),mfo=o(` property of the config object
(either passed as an argument or loaded from `),Wne=a("code"),gfo=o("pretrained_model_name_or_path"),hfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qne=a("code"),pfo=o("pretrained_model_name_or_path"),_fo=o(":"),ufo=l(),Y=a("ul"),fh=a("li"),Hne=a("strong"),bfo=o("beit"),vfo=o(" \u2014 "),tI=a("a"),Ffo=o("BeitFeatureExtractor"),Tfo=o(" (BEiT model)"),Mfo=l(),mh=a("li"),Une=a("strong"),Efo=o("clip"),Cfo=o(" \u2014 "),aI=a("a"),wfo=o("CLIPFeatureExtractor"),Afo=o(" (CLIP model)"),Lfo=l(),gh=a("li"),Jne=a("strong"),yfo=o("convnext"),xfo=o(" \u2014 "),nI=a("a"),$fo=o("ConvNextFeatureExtractor"),kfo=o(" (ConvNeXT model)"),Sfo=l(),hh=a("li"),Yne=a("strong"),Rfo=o("cvt"),Pfo=o(" \u2014 "),sI=a("a"),Bfo=o("ConvNextFeatureExtractor"),Ifo=o(" (CvT model)"),Nfo=l(),ph=a("li"),Kne=a("strong"),qfo=o("data2vec-audio"),jfo=o(" \u2014 "),lI=a("a"),Dfo=o("Wav2Vec2FeatureExtractor"),Gfo=o(" (Data2VecAudio model)"),Ofo=l(),_h=a("li"),Zne=a("strong"),Vfo=o("data2vec-vision"),Xfo=o(" \u2014 "),iI=a("a"),zfo=o("BeitFeatureExtractor"),Wfo=o(" (Data2VecVision model)"),Qfo=l(),uh=a("li"),ese=a("strong"),Hfo=o("deit"),Ufo=o(" \u2014 "),dI=a("a"),Jfo=o("DeiTFeatureExtractor"),Yfo=o(" (DeiT model)"),Kfo=l(),bh=a("li"),ose=a("strong"),Zfo=o("detr"),emo=o(" \u2014 "),cI=a("a"),omo=o("DetrFeatureExtractor"),rmo=o(" (DETR model)"),tmo=l(),vh=a("li"),rse=a("strong"),amo=o("dpt"),nmo=o(" \u2014 "),fI=a("a"),smo=o("DPTFeatureExtractor"),lmo=o(" (DPT model)"),imo=l(),Fh=a("li"),tse=a("strong"),dmo=o("flava"),cmo=o(" \u2014 "),mI=a("a"),fmo=o("FlavaFeatureExtractor"),mmo=o(" (FLAVA model)"),gmo=l(),Th=a("li"),ase=a("strong"),hmo=o("glpn"),pmo=o(" \u2014 "),gI=a("a"),_mo=o("GLPNFeatureExtractor"),umo=o(" (GLPN model)"),bmo=l(),Mh=a("li"),nse=a("strong"),vmo=o("groupvit"),Fmo=o(" \u2014 "),hI=a("a"),Tmo=o("CLIPFeatureExtractor"),Mmo=o(" (GroupViT model)"),Emo=l(),Eh=a("li"),sse=a("strong"),Cmo=o("hubert"),wmo=o(" \u2014 "),pI=a("a"),Amo=o("Wav2Vec2FeatureExtractor"),Lmo=o(" (Hubert model)"),ymo=l(),Ch=a("li"),lse=a("strong"),xmo=o("imagegpt"),$mo=o(" \u2014 "),_I=a("a"),kmo=o("ImageGPTFeatureExtractor"),Smo=o(" (ImageGPT model)"),Rmo=l(),wh=a("li"),ise=a("strong"),Pmo=o("layoutlmv2"),Bmo=o(" \u2014 "),uI=a("a"),Imo=o("LayoutLMv2FeatureExtractor"),Nmo=o(" (LayoutLMv2 model)"),qmo=l(),Ah=a("li"),dse=a("strong"),jmo=o("layoutlmv3"),Dmo=o(" \u2014 "),bI=a("a"),Gmo=o("LayoutLMv3FeatureExtractor"),Omo=o(" (LayoutLMv3 model)"),Vmo=l(),Lh=a("li"),cse=a("strong"),Xmo=o("levit"),zmo=o(" \u2014 "),vI=a("a"),Wmo=o("LevitFeatureExtractor"),Qmo=o(" (LeViT model)"),Hmo=l(),yh=a("li"),fse=a("strong"),Umo=o("maskformer"),Jmo=o(" \u2014 "),FI=a("a"),Ymo=o("MaskFormerFeatureExtractor"),Kmo=o(" (MaskFormer model)"),Zmo=l(),xh=a("li"),mse=a("strong"),ego=o("perceiver"),ogo=o(" \u2014 "),TI=a("a"),rgo=o("PerceiverFeatureExtractor"),tgo=o(" (Perceiver model)"),ago=l(),$h=a("li"),gse=a("strong"),ngo=o("poolformer"),sgo=o(" \u2014 "),MI=a("a"),lgo=o("PoolFormerFeatureExtractor"),igo=o(" (PoolFormer model)"),dgo=l(),kh=a("li"),hse=a("strong"),cgo=o("regnet"),fgo=o(" \u2014 "),EI=a("a"),mgo=o("ConvNextFeatureExtractor"),ggo=o(" (RegNet model)"),hgo=l(),Sh=a("li"),pse=a("strong"),pgo=o("resnet"),_go=o(" \u2014 "),CI=a("a"),ugo=o("ConvNextFeatureExtractor"),bgo=o(" (ResNet model)"),vgo=l(),Rh=a("li"),_se=a("strong"),Fgo=o("segformer"),Tgo=o(" \u2014 "),wI=a("a"),Mgo=o("SegformerFeatureExtractor"),Ego=o(" (SegFormer model)"),Cgo=l(),Ph=a("li"),use=a("strong"),wgo=o("speech_to_text"),Ago=o(" \u2014 "),AI=a("a"),Lgo=o("Speech2TextFeatureExtractor"),ygo=o(" (Speech2Text model)"),xgo=l(),Bh=a("li"),bse=a("strong"),$go=o("swin"),kgo=o(" \u2014 "),LI=a("a"),Sgo=o("ViTFeatureExtractor"),Rgo=o(" (Swin Transformer model)"),Pgo=l(),Ih=a("li"),vse=a("strong"),Bgo=o("van"),Igo=o(" \u2014 "),yI=a("a"),Ngo=o("ConvNextFeatureExtractor"),qgo=o(" (VAN model)"),jgo=l(),Nh=a("li"),Fse=a("strong"),Dgo=o("vit"),Ggo=o(" \u2014 "),xI=a("a"),Ogo=o("ViTFeatureExtractor"),Vgo=o(" (ViT model)"),Xgo=l(),qh=a("li"),Tse=a("strong"),zgo=o("vit_mae"),Wgo=o(" \u2014 "),$I=a("a"),Qgo=o("ViTFeatureExtractor"),Hgo=o(" (ViTMAE model)"),Ugo=l(),jh=a("li"),Mse=a("strong"),Jgo=o("wav2vec2"),Ygo=o(" \u2014 "),kI=a("a"),Kgo=o("Wav2Vec2FeatureExtractor"),Zgo=o(" (Wav2Vec2 model)"),eho=l(),Dh=a("li"),Ese=a("strong"),oho=o("wav2vec2-conformer"),rho=o(" \u2014 "),SI=a("a"),tho=o("Wav2Vec2FeatureExtractor"),aho=o(" (Wav2Vec2-Conformer model)"),nho=l(),Gh=a("li"),Cse=a("strong"),sho=o("yolos"),lho=o(" \u2014 "),RI=a("a"),iho=o("YolosFeatureExtractor"),dho=o(" (YOLOS model)"),cho=l(),F(Oh.$$.fragment),fho=l(),F(Vh.$$.fragment),mho=l(),Xh=a("div"),F(sL.$$.fragment),gho=l(),wse=a("p"),hho=o("Register a new feature extractor for this class."),gje=l(),wi=a("h2"),zh=a("a"),Ase=a("span"),F(lL.$$.fragment),pho=l(),Lse=a("span"),_ho=o("AutoProcessor"),hje=l(),Lo=a("div"),F(iL.$$.fragment),uho=l(),dL=a("p"),bho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PI=a("a"),vho=o("AutoProcessor.from_pretrained()"),Fho=o(" class method."),Tho=l(),cL=a("p"),Mho=o("This class cannot be instantiated directly using "),yse=a("code"),Eho=o("__init__()"),Cho=o(" (throws an error)."),who=l(),Ue=a("div"),F(fL.$$.fragment),Aho=l(),xse=a("p"),Lho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yho=l(),Ai=a("p"),xho=o("The processor class to instantiate is selected based on the "),$se=a("code"),$ho=o("model_type"),kho=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),Sho=o("pretrained_model_name_or_path"),Rho=o(" if possible):"),Pho=l(),he=a("ul"),Wh=a("li"),Sse=a("strong"),Bho=o("clip"),Iho=o(" \u2014 "),BI=a("a"),Nho=o("CLIPProcessor"),qho=o(" (CLIP model)"),jho=l(),Qh=a("li"),Rse=a("strong"),Dho=o("flava"),Gho=o(" \u2014 "),Pse=a("code"),Oho=o("FLAVAProcessor"),Vho=o(" (FLAVA model)"),Xho=l(),Hh=a("li"),Bse=a("strong"),zho=o("groupvit"),Who=o(" \u2014 "),II=a("a"),Qho=o("CLIPProcessor"),Hho=o(" (GroupViT model)"),Uho=l(),Uh=a("li"),Ise=a("strong"),Jho=o("layoutlmv2"),Yho=o(" \u2014 "),NI=a("a"),Kho=o("LayoutLMv2Processor"),Zho=o(" (LayoutLMv2 model)"),epo=l(),Jh=a("li"),Nse=a("strong"),opo=o("layoutlmv3"),rpo=o(" \u2014 "),qI=a("a"),tpo=o("LayoutLMv3Processor"),apo=o(" (LayoutLMv3 model)"),npo=l(),Yh=a("li"),qse=a("strong"),spo=o("layoutxlm"),lpo=o(" \u2014 "),jI=a("a"),ipo=o("LayoutXLMProcessor"),dpo=o(" (LayoutXLM model)"),cpo=l(),Kh=a("li"),jse=a("strong"),fpo=o("sew"),mpo=o(" \u2014 "),DI=a("a"),gpo=o("Wav2Vec2Processor"),hpo=o(" (SEW model)"),ppo=l(),Zh=a("li"),Dse=a("strong"),_po=o("sew-d"),upo=o(" \u2014 "),GI=a("a"),bpo=o("Wav2Vec2Processor"),vpo=o(" (SEW-D model)"),Fpo=l(),ep=a("li"),Gse=a("strong"),Tpo=o("speech_to_text"),Mpo=o(" \u2014 "),OI=a("a"),Epo=o("Speech2TextProcessor"),Cpo=o(" (Speech2Text model)"),wpo=l(),op=a("li"),Ose=a("strong"),Apo=o("speech_to_text_2"),Lpo=o(" \u2014 "),VI=a("a"),ypo=o("Speech2Text2Processor"),xpo=o(" (Speech2Text2 model)"),$po=l(),rp=a("li"),Vse=a("strong"),kpo=o("trocr"),Spo=o(" \u2014 "),XI=a("a"),Rpo=o("TrOCRProcessor"),Ppo=o(" (TrOCR model)"),Bpo=l(),tp=a("li"),Xse=a("strong"),Ipo=o("unispeech"),Npo=o(" \u2014 "),zI=a("a"),qpo=o("Wav2Vec2Processor"),jpo=o(" (UniSpeech model)"),Dpo=l(),ap=a("li"),zse=a("strong"),Gpo=o("unispeech-sat"),Opo=o(" \u2014 "),WI=a("a"),Vpo=o("Wav2Vec2Processor"),Xpo=o(" (UniSpeechSat model)"),zpo=l(),np=a("li"),Wse=a("strong"),Wpo=o("vilt"),Qpo=o(" \u2014 "),QI=a("a"),Hpo=o("ViltProcessor"),Upo=o(" (ViLT model)"),Jpo=l(),sp=a("li"),Qse=a("strong"),Ypo=o("vision-text-dual-encoder"),Kpo=o(" \u2014 "),HI=a("a"),Zpo=o("VisionTextDualEncoderProcessor"),e_o=o(" (VisionTextDualEncoder model)"),o_o=l(),lp=a("li"),Hse=a("strong"),r_o=o("wav2vec2"),t_o=o(" \u2014 "),UI=a("a"),a_o=o("Wav2Vec2Processor"),n_o=o(" (Wav2Vec2 model)"),s_o=l(),ip=a("li"),Use=a("strong"),l_o=o("wav2vec2-conformer"),i_o=o(" \u2014 "),JI=a("a"),d_o=o("Wav2Vec2Processor"),c_o=o(" (Wav2Vec2-Conformer model)"),f_o=l(),dp=a("li"),Jse=a("strong"),m_o=o("wavlm"),g_o=o(" \u2014 "),YI=a("a"),h_o=o("Wav2Vec2Processor"),p_o=o(" (WavLM model)"),__o=l(),F(cp.$$.fragment),u_o=l(),F(fp.$$.fragment),b_o=l(),mp=a("div"),F(mL.$$.fragment),v_o=l(),Yse=a("p"),F_o=o("Register a new processor for this class."),pje=l(),Li=a("h2"),gp=a("a"),Kse=a("span"),F(gL.$$.fragment),T_o=l(),Zse=a("span"),M_o=o("AutoModel"),_je=l(),yo=a("div"),F(hL.$$.fragment),E_o=l(),yi=a("p"),C_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KI=a("a"),w_o=o("from_pretrained()"),A_o=o(" class method or the "),ZI=a("a"),L_o=o("from_config()"),y_o=o(` class
method.`),x_o=l(),pL=a("p"),$_o=o("This class cannot be instantiated directly using "),ele=a("code"),k_o=o("__init__()"),S_o=o(" (throws an error)."),R_o=l(),tt=a("div"),F(_L.$$.fragment),P_o=l(),ole=a("p"),B_o=o("Instantiates one of the base model classes of the library from a configuration."),I_o=l(),xi=a("p"),N_o=o(`Note:
Loading a model from its configuration file does `),rle=a("strong"),q_o=o("not"),j_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=a("a"),D_o=o("from_pretrained()"),G_o=o(" to load the model weights."),O_o=l(),F(hp.$$.fragment),V_o=l(),Je=a("div"),F(uL.$$.fragment),X_o=l(),tle=a("p"),z_o=o("Instantiate one of the base model classes of the library from a pretrained model."),W_o=l(),ya=a("p"),Q_o=o("The model class to instantiate is selected based on the "),ale=a("code"),H_o=o("model_type"),U_o=o(` property of the config object (either
passed as an argument or loaded from `),nle=a("code"),J_o=o("pretrained_model_name_or_path"),Y_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=a("code"),K_o=o("pretrained_model_name_or_path"),Z_o=o(":"),euo=l(),x=a("ul"),pp=a("li"),lle=a("strong"),ouo=o("albert"),ruo=o(" \u2014 "),oN=a("a"),tuo=o("AlbertModel"),auo=o(" (ALBERT model)"),nuo=l(),_p=a("li"),ile=a("strong"),suo=o("bart"),luo=o(" \u2014 "),rN=a("a"),iuo=o("BartModel"),duo=o(" (BART model)"),cuo=l(),up=a("li"),dle=a("strong"),fuo=o("beit"),muo=o(" \u2014 "),tN=a("a"),guo=o("BeitModel"),huo=o(" (BEiT model)"),puo=l(),bp=a("li"),cle=a("strong"),_uo=o("bert"),uuo=o(" \u2014 "),aN=a("a"),buo=o("BertModel"),vuo=o(" (BERT model)"),Fuo=l(),vp=a("li"),fle=a("strong"),Tuo=o("bert-generation"),Muo=o(" \u2014 "),nN=a("a"),Euo=o("BertGenerationEncoder"),Cuo=o(" (Bert Generation model)"),wuo=l(),Fp=a("li"),mle=a("strong"),Auo=o("big_bird"),Luo=o(" \u2014 "),sN=a("a"),yuo=o("BigBirdModel"),xuo=o(" (BigBird model)"),$uo=l(),Tp=a("li"),gle=a("strong"),kuo=o("bigbird_pegasus"),Suo=o(" \u2014 "),lN=a("a"),Ruo=o("BigBirdPegasusModel"),Puo=o(" (BigBird-Pegasus model)"),Buo=l(),Mp=a("li"),hle=a("strong"),Iuo=o("blenderbot"),Nuo=o(" \u2014 "),iN=a("a"),quo=o("BlenderbotModel"),juo=o(" (Blenderbot model)"),Duo=l(),Ep=a("li"),ple=a("strong"),Guo=o("blenderbot-small"),Ouo=o(" \u2014 "),dN=a("a"),Vuo=o("BlenderbotSmallModel"),Xuo=o(" (BlenderbotSmall model)"),zuo=l(),Cp=a("li"),_le=a("strong"),Wuo=o("camembert"),Quo=o(" \u2014 "),cN=a("a"),Huo=o("CamembertModel"),Uuo=o(" (CamemBERT model)"),Juo=l(),wp=a("li"),ule=a("strong"),Yuo=o("canine"),Kuo=o(" \u2014 "),fN=a("a"),Zuo=o("CanineModel"),e1o=o(" (CANINE model)"),o1o=l(),Ap=a("li"),ble=a("strong"),r1o=o("clip"),t1o=o(" \u2014 "),mN=a("a"),a1o=o("CLIPModel"),n1o=o(" (CLIP model)"),s1o=l(),Lp=a("li"),vle=a("strong"),l1o=o("convbert"),i1o=o(" \u2014 "),gN=a("a"),d1o=o("ConvBertModel"),c1o=o(" (ConvBERT model)"),f1o=l(),yp=a("li"),Fle=a("strong"),m1o=o("convnext"),g1o=o(" \u2014 "),hN=a("a"),h1o=o("ConvNextModel"),p1o=o(" (ConvNeXT model)"),_1o=l(),xp=a("li"),Tle=a("strong"),u1o=o("ctrl"),b1o=o(" \u2014 "),pN=a("a"),v1o=o("CTRLModel"),F1o=o(" (CTRL model)"),T1o=l(),$p=a("li"),Mle=a("strong"),M1o=o("cvt"),E1o=o(" \u2014 "),_N=a("a"),C1o=o("CvtModel"),w1o=o(" (CvT model)"),A1o=l(),kp=a("li"),Ele=a("strong"),L1o=o("data2vec-audio"),y1o=o(" \u2014 "),uN=a("a"),x1o=o("Data2VecAudioModel"),$1o=o(" (Data2VecAudio model)"),k1o=l(),Sp=a("li"),Cle=a("strong"),S1o=o("data2vec-text"),R1o=o(" \u2014 "),bN=a("a"),P1o=o("Data2VecTextModel"),B1o=o(" (Data2VecText model)"),I1o=l(),Rp=a("li"),wle=a("strong"),N1o=o("data2vec-vision"),q1o=o(" \u2014 "),vN=a("a"),j1o=o("Data2VecVisionModel"),D1o=o(" (Data2VecVision model)"),G1o=l(),Pp=a("li"),Ale=a("strong"),O1o=o("deberta"),V1o=o(" \u2014 "),FN=a("a"),X1o=o("DebertaModel"),z1o=o(" (DeBERTa model)"),W1o=l(),Bp=a("li"),Lle=a("strong"),Q1o=o("deberta-v2"),H1o=o(" \u2014 "),TN=a("a"),U1o=o("DebertaV2Model"),J1o=o(" (DeBERTa-v2 model)"),Y1o=l(),Ip=a("li"),yle=a("strong"),K1o=o("decision_transformer"),Z1o=o(" \u2014 "),MN=a("a"),e3o=o("DecisionTransformerModel"),o3o=o(" (Decision Transformer model)"),r3o=l(),Np=a("li"),xle=a("strong"),t3o=o("deit"),a3o=o(" \u2014 "),EN=a("a"),n3o=o("DeiTModel"),s3o=o(" (DeiT model)"),l3o=l(),qp=a("li"),$le=a("strong"),i3o=o("detr"),d3o=o(" \u2014 "),CN=a("a"),c3o=o("DetrModel"),f3o=o(" (DETR model)"),m3o=l(),jp=a("li"),kle=a("strong"),g3o=o("distilbert"),h3o=o(" \u2014 "),wN=a("a"),p3o=o("DistilBertModel"),_3o=o(" (DistilBERT model)"),u3o=l(),Dp=a("li"),Sle=a("strong"),b3o=o("dpr"),v3o=o(" \u2014 "),AN=a("a"),F3o=o("DPRQuestionEncoder"),T3o=o(" (DPR model)"),M3o=l(),Gp=a("li"),Rle=a("strong"),E3o=o("dpt"),C3o=o(" \u2014 "),LN=a("a"),w3o=o("DPTModel"),A3o=o(" (DPT model)"),L3o=l(),Op=a("li"),Ple=a("strong"),y3o=o("electra"),x3o=o(" \u2014 "),yN=a("a"),$3o=o("ElectraModel"),k3o=o(" (ELECTRA model)"),S3o=l(),Vp=a("li"),Ble=a("strong"),R3o=o("flaubert"),P3o=o(" \u2014 "),xN=a("a"),B3o=o("FlaubertModel"),I3o=o(" (FlauBERT model)"),N3o=l(),Xp=a("li"),Ile=a("strong"),q3o=o("flava"),j3o=o(" \u2014 "),$N=a("a"),D3o=o("FlavaModel"),G3o=o(" (FLAVA model)"),O3o=l(),zp=a("li"),Nle=a("strong"),V3o=o("fnet"),X3o=o(" \u2014 "),kN=a("a"),z3o=o("FNetModel"),W3o=o(" (FNet model)"),Q3o=l(),Wp=a("li"),qle=a("strong"),H3o=o("fsmt"),U3o=o(" \u2014 "),SN=a("a"),J3o=o("FSMTModel"),Y3o=o(" (FairSeq Machine-Translation model)"),K3o=l(),Bs=a("li"),jle=a("strong"),Z3o=o("funnel"),ebo=o(" \u2014 "),RN=a("a"),obo=o("FunnelModel"),rbo=o(" or "),PN=a("a"),tbo=o("FunnelBaseModel"),abo=o(" (Funnel Transformer model)"),nbo=l(),Qp=a("li"),Dle=a("strong"),sbo=o("glpn"),lbo=o(" \u2014 "),BN=a("a"),ibo=o("GLPNModel"),dbo=o(" (GLPN model)"),cbo=l(),Hp=a("li"),Gle=a("strong"),fbo=o("gpt2"),mbo=o(" \u2014 "),IN=a("a"),gbo=o("GPT2Model"),hbo=o(" (OpenAI GPT-2 model)"),pbo=l(),Up=a("li"),Ole=a("strong"),_bo=o("gpt_neo"),ubo=o(" \u2014 "),NN=a("a"),bbo=o("GPTNeoModel"),vbo=o(" (GPT Neo model)"),Fbo=l(),Jp=a("li"),Vle=a("strong"),Tbo=o("gpt_neox"),Mbo=o(" \u2014 "),qN=a("a"),Ebo=o("GPTNeoXModel"),Cbo=o(" (GPT NeoX model)"),wbo=l(),Yp=a("li"),Xle=a("strong"),Abo=o("gptj"),Lbo=o(" \u2014 "),jN=a("a"),ybo=o("GPTJModel"),xbo=o(" (GPT-J model)"),$bo=l(),Kp=a("li"),zle=a("strong"),kbo=o("groupvit"),Sbo=o(" \u2014 "),DN=a("a"),Rbo=o("GroupViTModel"),Pbo=o(" (GroupViT model)"),Bbo=l(),Zp=a("li"),Wle=a("strong"),Ibo=o("hubert"),Nbo=o(" \u2014 "),GN=a("a"),qbo=o("HubertModel"),jbo=o(" (Hubert model)"),Dbo=l(),e_=a("li"),Qle=a("strong"),Gbo=o("ibert"),Obo=o(" \u2014 "),ON=a("a"),Vbo=o("IBertModel"),Xbo=o(" (I-BERT model)"),zbo=l(),o_=a("li"),Hle=a("strong"),Wbo=o("imagegpt"),Qbo=o(" \u2014 "),VN=a("a"),Hbo=o("ImageGPTModel"),Ubo=o(" (ImageGPT model)"),Jbo=l(),r_=a("li"),Ule=a("strong"),Ybo=o("layoutlm"),Kbo=o(" \u2014 "),XN=a("a"),Zbo=o("LayoutLMModel"),e2o=o(" (LayoutLM model)"),o2o=l(),t_=a("li"),Jle=a("strong"),r2o=o("layoutlmv2"),t2o=o(" \u2014 "),zN=a("a"),a2o=o("LayoutLMv2Model"),n2o=o(" (LayoutLMv2 model)"),s2o=l(),a_=a("li"),Yle=a("strong"),l2o=o("layoutlmv3"),i2o=o(" \u2014 "),WN=a("a"),d2o=o("LayoutLMv3Model"),c2o=o(" (LayoutLMv3 model)"),f2o=l(),n_=a("li"),Kle=a("strong"),m2o=o("led"),g2o=o(" \u2014 "),QN=a("a"),h2o=o("LEDModel"),p2o=o(" (LED model)"),_2o=l(),s_=a("li"),Zle=a("strong"),u2o=o("levit"),b2o=o(" \u2014 "),HN=a("a"),v2o=o("LevitModel"),F2o=o(" (LeViT model)"),T2o=l(),l_=a("li"),eie=a("strong"),M2o=o("longformer"),E2o=o(" \u2014 "),UN=a("a"),C2o=o("LongformerModel"),w2o=o(" (Longformer model)"),A2o=l(),i_=a("li"),oie=a("strong"),L2o=o("luke"),y2o=o(" \u2014 "),JN=a("a"),x2o=o("LukeModel"),$2o=o(" (LUKE model)"),k2o=l(),d_=a("li"),rie=a("strong"),S2o=o("lxmert"),R2o=o(" \u2014 "),YN=a("a"),P2o=o("LxmertModel"),B2o=o(" (LXMERT model)"),I2o=l(),c_=a("li"),tie=a("strong"),N2o=o("m2m_100"),q2o=o(" \u2014 "),KN=a("a"),j2o=o("M2M100Model"),D2o=o(" (M2M100 model)"),G2o=l(),f_=a("li"),aie=a("strong"),O2o=o("marian"),V2o=o(" \u2014 "),ZN=a("a"),X2o=o("MarianModel"),z2o=o(" (Marian model)"),W2o=l(),m_=a("li"),nie=a("strong"),Q2o=o("maskformer"),H2o=o(" \u2014 "),eq=a("a"),U2o=o("MaskFormerModel"),J2o=o(" (MaskFormer model)"),Y2o=l(),g_=a("li"),sie=a("strong"),K2o=o("mbart"),Z2o=o(" \u2014 "),oq=a("a"),evo=o("MBartModel"),ovo=o(" (mBART model)"),rvo=l(),h_=a("li"),lie=a("strong"),tvo=o("megatron-bert"),avo=o(" \u2014 "),rq=a("a"),nvo=o("MegatronBertModel"),svo=o(" (Megatron-BERT model)"),lvo=l(),p_=a("li"),iie=a("strong"),ivo=o("mobilebert"),dvo=o(" \u2014 "),tq=a("a"),cvo=o("MobileBertModel"),fvo=o(" (MobileBERT model)"),mvo=l(),__=a("li"),die=a("strong"),gvo=o("mpnet"),hvo=o(" \u2014 "),aq=a("a"),pvo=o("MPNetModel"),_vo=o(" (MPNet model)"),uvo=l(),u_=a("li"),cie=a("strong"),bvo=o("mt5"),vvo=o(" \u2014 "),nq=a("a"),Fvo=o("MT5Model"),Tvo=o(" (MT5 model)"),Mvo=l(),b_=a("li"),fie=a("strong"),Evo=o("nystromformer"),Cvo=o(" \u2014 "),sq=a("a"),wvo=o("NystromformerModel"),Avo=o(" (Nystr\xF6mformer model)"),Lvo=l(),v_=a("li"),mie=a("strong"),yvo=o("openai-gpt"),xvo=o(" \u2014 "),lq=a("a"),$vo=o("OpenAIGPTModel"),kvo=o(" (OpenAI GPT model)"),Svo=l(),F_=a("li"),gie=a("strong"),Rvo=o("opt"),Pvo=o(" \u2014 "),iq=a("a"),Bvo=o("OPTModel"),Ivo=o(" (OPT model)"),Nvo=l(),T_=a("li"),hie=a("strong"),qvo=o("pegasus"),jvo=o(" \u2014 "),dq=a("a"),Dvo=o("PegasusModel"),Gvo=o(" (Pegasus model)"),Ovo=l(),M_=a("li"),pie=a("strong"),Vvo=o("perceiver"),Xvo=o(" \u2014 "),cq=a("a"),zvo=o("PerceiverModel"),Wvo=o(" (Perceiver model)"),Qvo=l(),E_=a("li"),_ie=a("strong"),Hvo=o("plbart"),Uvo=o(" \u2014 "),fq=a("a"),Jvo=o("PLBartModel"),Yvo=o(" (PLBart model)"),Kvo=l(),C_=a("li"),uie=a("strong"),Zvo=o("poolformer"),eFo=o(" \u2014 "),mq=a("a"),oFo=o("PoolFormerModel"),rFo=o(" (PoolFormer model)"),tFo=l(),w_=a("li"),bie=a("strong"),aFo=o("prophetnet"),nFo=o(" \u2014 "),gq=a("a"),sFo=o("ProphetNetModel"),lFo=o(" (ProphetNet model)"),iFo=l(),A_=a("li"),vie=a("strong"),dFo=o("qdqbert"),cFo=o(" \u2014 "),hq=a("a"),fFo=o("QDQBertModel"),mFo=o(" (QDQBert model)"),gFo=l(),L_=a("li"),Fie=a("strong"),hFo=o("reformer"),pFo=o(" \u2014 "),pq=a("a"),_Fo=o("ReformerModel"),uFo=o(" (Reformer model)"),bFo=l(),y_=a("li"),Tie=a("strong"),vFo=o("regnet"),FFo=o(" \u2014 "),_q=a("a"),TFo=o("RegNetModel"),MFo=o(" (RegNet model)"),EFo=l(),x_=a("li"),Mie=a("strong"),CFo=o("rembert"),wFo=o(" \u2014 "),uq=a("a"),AFo=o("RemBertModel"),LFo=o(" (RemBERT model)"),yFo=l(),$_=a("li"),Eie=a("strong"),xFo=o("resnet"),$Fo=o(" \u2014 "),bq=a("a"),kFo=o("ResNetModel"),SFo=o(" (ResNet model)"),RFo=l(),k_=a("li"),Cie=a("strong"),PFo=o("retribert"),BFo=o(" \u2014 "),vq=a("a"),IFo=o("RetriBertModel"),NFo=o(" (RetriBERT model)"),qFo=l(),S_=a("li"),wie=a("strong"),jFo=o("roberta"),DFo=o(" \u2014 "),Fq=a("a"),GFo=o("RobertaModel"),OFo=o(" (RoBERTa model)"),VFo=l(),R_=a("li"),Aie=a("strong"),XFo=o("roformer"),zFo=o(" \u2014 "),Tq=a("a"),WFo=o("RoFormerModel"),QFo=o(" (RoFormer model)"),HFo=l(),P_=a("li"),Lie=a("strong"),UFo=o("segformer"),JFo=o(" \u2014 "),Mq=a("a"),YFo=o("SegformerModel"),KFo=o(" (SegFormer model)"),ZFo=l(),B_=a("li"),yie=a("strong"),eTo=o("sew"),oTo=o(" \u2014 "),Eq=a("a"),rTo=o("SEWModel"),tTo=o(" (SEW model)"),aTo=l(),I_=a("li"),xie=a("strong"),nTo=o("sew-d"),sTo=o(" \u2014 "),Cq=a("a"),lTo=o("SEWDModel"),iTo=o(" (SEW-D model)"),dTo=l(),N_=a("li"),$ie=a("strong"),cTo=o("speech_to_text"),fTo=o(" \u2014 "),wq=a("a"),mTo=o("Speech2TextModel"),gTo=o(" (Speech2Text model)"),hTo=l(),q_=a("li"),kie=a("strong"),pTo=o("splinter"),_To=o(" \u2014 "),Aq=a("a"),uTo=o("SplinterModel"),bTo=o(" (Splinter model)"),vTo=l(),j_=a("li"),Sie=a("strong"),FTo=o("squeezebert"),TTo=o(" \u2014 "),Lq=a("a"),MTo=o("SqueezeBertModel"),ETo=o(" (SqueezeBERT model)"),CTo=l(),D_=a("li"),Rie=a("strong"),wTo=o("swin"),ATo=o(" \u2014 "),yq=a("a"),LTo=o("SwinModel"),yTo=o(" (Swin Transformer model)"),xTo=l(),G_=a("li"),Pie=a("strong"),$To=o("t5"),kTo=o(" \u2014 "),xq=a("a"),STo=o("T5Model"),RTo=o(" (T5 model)"),PTo=l(),O_=a("li"),Bie=a("strong"),BTo=o("tapas"),ITo=o(" \u2014 "),$q=a("a"),NTo=o("TapasModel"),qTo=o(" (TAPAS model)"),jTo=l(),V_=a("li"),Iie=a("strong"),DTo=o("trajectory_transformer"),GTo=o(" \u2014 "),kq=a("a"),OTo=o("TrajectoryTransformerModel"),VTo=o(" (Trajectory Transformer model)"),XTo=l(),X_=a("li"),Nie=a("strong"),zTo=o("transfo-xl"),WTo=o(" \u2014 "),Sq=a("a"),QTo=o("TransfoXLModel"),HTo=o(" (Transformer-XL model)"),UTo=l(),z_=a("li"),qie=a("strong"),JTo=o("unispeech"),YTo=o(" \u2014 "),Rq=a("a"),KTo=o("UniSpeechModel"),ZTo=o(" (UniSpeech model)"),e7o=l(),W_=a("li"),jie=a("strong"),o7o=o("unispeech-sat"),r7o=o(" \u2014 "),Pq=a("a"),t7o=o("UniSpeechSatModel"),a7o=o(" (UniSpeechSat model)"),n7o=l(),Q_=a("li"),Die=a("strong"),s7o=o("van"),l7o=o(" \u2014 "),Bq=a("a"),i7o=o("VanModel"),d7o=o(" (VAN model)"),c7o=l(),H_=a("li"),Gie=a("strong"),f7o=o("vilt"),m7o=o(" \u2014 "),Iq=a("a"),g7o=o("ViltModel"),h7o=o(" (ViLT model)"),p7o=l(),U_=a("li"),Oie=a("strong"),_7o=o("vision-text-dual-encoder"),u7o=o(" \u2014 "),Nq=a("a"),b7o=o("VisionTextDualEncoderModel"),v7o=o(" (VisionTextDualEncoder model)"),F7o=l(),J_=a("li"),Vie=a("strong"),T7o=o("visual_bert"),M7o=o(" \u2014 "),qq=a("a"),E7o=o("VisualBertModel"),C7o=o(" (VisualBERT model)"),w7o=l(),Y_=a("li"),Xie=a("strong"),A7o=o("vit"),L7o=o(" \u2014 "),jq=a("a"),y7o=o("ViTModel"),x7o=o(" (ViT model)"),$7o=l(),K_=a("li"),zie=a("strong"),k7o=o("vit_mae"),S7o=o(" \u2014 "),Dq=a("a"),R7o=o("ViTMAEModel"),P7o=o(" (ViTMAE model)"),B7o=l(),Z_=a("li"),Wie=a("strong"),I7o=o("wav2vec2"),N7o=o(" \u2014 "),Gq=a("a"),q7o=o("Wav2Vec2Model"),j7o=o(" (Wav2Vec2 model)"),D7o=l(),eu=a("li"),Qie=a("strong"),G7o=o("wav2vec2-conformer"),O7o=o(" \u2014 "),Oq=a("a"),V7o=o("Wav2Vec2ConformerModel"),X7o=o(" (Wav2Vec2-Conformer model)"),z7o=l(),ou=a("li"),Hie=a("strong"),W7o=o("wavlm"),Q7o=o(" \u2014 "),Vq=a("a"),H7o=o("WavLMModel"),U7o=o(" (WavLM model)"),J7o=l(),ru=a("li"),Uie=a("strong"),Y7o=o("xglm"),K7o=o(" \u2014 "),Xq=a("a"),Z7o=o("XGLMModel"),eMo=o(" (XGLM model)"),oMo=l(),tu=a("li"),Jie=a("strong"),rMo=o("xlm"),tMo=o(" \u2014 "),zq=a("a"),aMo=o("XLMModel"),nMo=o(" (XLM model)"),sMo=l(),au=a("li"),Yie=a("strong"),lMo=o("xlm-prophetnet"),iMo=o(" \u2014 "),Wq=a("a"),dMo=o("XLMProphetNetModel"),cMo=o(" (XLM-ProphetNet model)"),fMo=l(),nu=a("li"),Kie=a("strong"),mMo=o("xlm-roberta"),gMo=o(" \u2014 "),Qq=a("a"),hMo=o("XLMRobertaModel"),pMo=o(" (XLM-RoBERTa model)"),_Mo=l(),su=a("li"),Zie=a("strong"),uMo=o("xlm-roberta-xl"),bMo=o(" \u2014 "),Hq=a("a"),vMo=o("XLMRobertaXLModel"),FMo=o(" (XLM-RoBERTa-XL model)"),TMo=l(),lu=a("li"),ede=a("strong"),MMo=o("xlnet"),EMo=o(" \u2014 "),Uq=a("a"),CMo=o("XLNetModel"),wMo=o(" (XLNet model)"),AMo=l(),iu=a("li"),ode=a("strong"),LMo=o("yolos"),yMo=o(" \u2014 "),Jq=a("a"),xMo=o("YolosModel"),$Mo=o(" (YOLOS model)"),kMo=l(),du=a("li"),rde=a("strong"),SMo=o("yoso"),RMo=o(" \u2014 "),Yq=a("a"),PMo=o("YosoModel"),BMo=o(" (YOSO model)"),IMo=l(),cu=a("p"),NMo=o("The model is set in evaluation mode by default using "),tde=a("code"),qMo=o("model.eval()"),jMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),DMo=o("model.train()"),GMo=l(),F(fu.$$.fragment),uje=l(),$i=a("h2"),mu=a("a"),nde=a("span"),F(bL.$$.fragment),OMo=l(),sde=a("span"),VMo=o("AutoModelForPreTraining"),bje=l(),xo=a("div"),F(vL.$$.fragment),XMo=l(),ki=a("p"),zMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=a("a"),WMo=o("from_pretrained()"),QMo=o(" class method or the "),Zq=a("a"),HMo=o("from_config()"),UMo=o(` class
method.`),JMo=l(),FL=a("p"),YMo=o("This class cannot be instantiated directly using "),lde=a("code"),KMo=o("__init__()"),ZMo=o(" (throws an error)."),e4o=l(),at=a("div"),F(TL.$$.fragment),o4o=l(),ide=a("p"),r4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t4o=l(),Si=a("p"),a4o=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),n4o=o("not"),s4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),l4o=o("from_pretrained()"),i4o=o(" to load the model weights."),d4o=l(),F(gu.$$.fragment),c4o=l(),Ye=a("div"),F(ML.$$.fragment),f4o=l(),cde=a("p"),m4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g4o=l(),xa=a("p"),h4o=o("The model class to instantiate is selected based on the "),fde=a("code"),p4o=o("model_type"),_4o=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),u4o=o("pretrained_model_name_or_path"),b4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),v4o=o("pretrained_model_name_or_path"),F4o=o(":"),T4o=l(),G=a("ul"),hu=a("li"),hde=a("strong"),M4o=o("albert"),E4o=o(" \u2014 "),oj=a("a"),C4o=o("AlbertForPreTraining"),w4o=o(" (ALBERT model)"),A4o=l(),pu=a("li"),pde=a("strong"),L4o=o("bart"),y4o=o(" \u2014 "),rj=a("a"),x4o=o("BartForConditionalGeneration"),$4o=o(" (BART model)"),k4o=l(),_u=a("li"),_de=a("strong"),S4o=o("bert"),R4o=o(" \u2014 "),tj=a("a"),P4o=o("BertForPreTraining"),B4o=o(" (BERT model)"),I4o=l(),uu=a("li"),ude=a("strong"),N4o=o("big_bird"),q4o=o(" \u2014 "),aj=a("a"),j4o=o("BigBirdForPreTraining"),D4o=o(" (BigBird model)"),G4o=l(),bu=a("li"),bde=a("strong"),O4o=o("camembert"),V4o=o(" \u2014 "),nj=a("a"),X4o=o("CamembertForMaskedLM"),z4o=o(" (CamemBERT model)"),W4o=l(),vu=a("li"),vde=a("strong"),Q4o=o("ctrl"),H4o=o(" \u2014 "),sj=a("a"),U4o=o("CTRLLMHeadModel"),J4o=o(" (CTRL model)"),Y4o=l(),Fu=a("li"),Fde=a("strong"),K4o=o("data2vec-text"),Z4o=o(" \u2014 "),lj=a("a"),eEo=o("Data2VecTextForMaskedLM"),oEo=o(" (Data2VecText model)"),rEo=l(),Tu=a("li"),Tde=a("strong"),tEo=o("deberta"),aEo=o(" \u2014 "),ij=a("a"),nEo=o("DebertaForMaskedLM"),sEo=o(" (DeBERTa model)"),lEo=l(),Mu=a("li"),Mde=a("strong"),iEo=o("deberta-v2"),dEo=o(" \u2014 "),dj=a("a"),cEo=o("DebertaV2ForMaskedLM"),fEo=o(" (DeBERTa-v2 model)"),mEo=l(),Eu=a("li"),Ede=a("strong"),gEo=o("distilbert"),hEo=o(" \u2014 "),cj=a("a"),pEo=o("DistilBertForMaskedLM"),_Eo=o(" (DistilBERT model)"),uEo=l(),Cu=a("li"),Cde=a("strong"),bEo=o("electra"),vEo=o(" \u2014 "),fj=a("a"),FEo=o("ElectraForPreTraining"),TEo=o(" (ELECTRA model)"),MEo=l(),wu=a("li"),wde=a("strong"),EEo=o("flaubert"),CEo=o(" \u2014 "),mj=a("a"),wEo=o("FlaubertWithLMHeadModel"),AEo=o(" (FlauBERT model)"),LEo=l(),Au=a("li"),Ade=a("strong"),yEo=o("flava"),xEo=o(" \u2014 "),gj=a("a"),$Eo=o("FlavaForPreTraining"),kEo=o(" (FLAVA model)"),SEo=l(),Lu=a("li"),Lde=a("strong"),REo=o("fnet"),PEo=o(" \u2014 "),hj=a("a"),BEo=o("FNetForPreTraining"),IEo=o(" (FNet model)"),NEo=l(),yu=a("li"),yde=a("strong"),qEo=o("fsmt"),jEo=o(" \u2014 "),pj=a("a"),DEo=o("FSMTForConditionalGeneration"),GEo=o(" (FairSeq Machine-Translation model)"),OEo=l(),xu=a("li"),xde=a("strong"),VEo=o("funnel"),XEo=o(" \u2014 "),_j=a("a"),zEo=o("FunnelForPreTraining"),WEo=o(" (Funnel Transformer model)"),QEo=l(),$u=a("li"),$de=a("strong"),HEo=o("gpt2"),UEo=o(" \u2014 "),uj=a("a"),JEo=o("GPT2LMHeadModel"),YEo=o(" (OpenAI GPT-2 model)"),KEo=l(),ku=a("li"),kde=a("strong"),ZEo=o("ibert"),eCo=o(" \u2014 "),bj=a("a"),oCo=o("IBertForMaskedLM"),rCo=o(" (I-BERT model)"),tCo=l(),Su=a("li"),Sde=a("strong"),aCo=o("layoutlm"),nCo=o(" \u2014 "),vj=a("a"),sCo=o("LayoutLMForMaskedLM"),lCo=o(" (LayoutLM model)"),iCo=l(),Ru=a("li"),Rde=a("strong"),dCo=o("longformer"),cCo=o(" \u2014 "),Fj=a("a"),fCo=o("LongformerForMaskedLM"),mCo=o(" (Longformer model)"),gCo=l(),Pu=a("li"),Pde=a("strong"),hCo=o("lxmert"),pCo=o(" \u2014 "),Tj=a("a"),_Co=o("LxmertForPreTraining"),uCo=o(" (LXMERT model)"),bCo=l(),Bu=a("li"),Bde=a("strong"),vCo=o("megatron-bert"),FCo=o(" \u2014 "),Mj=a("a"),TCo=o("MegatronBertForPreTraining"),MCo=o(" (Megatron-BERT model)"),ECo=l(),Iu=a("li"),Ide=a("strong"),CCo=o("mobilebert"),wCo=o(" \u2014 "),Ej=a("a"),ACo=o("MobileBertForPreTraining"),LCo=o(" (MobileBERT model)"),yCo=l(),Nu=a("li"),Nde=a("strong"),xCo=o("mpnet"),$Co=o(" \u2014 "),Cj=a("a"),kCo=o("MPNetForMaskedLM"),SCo=o(" (MPNet model)"),RCo=l(),qu=a("li"),qde=a("strong"),PCo=o("openai-gpt"),BCo=o(" \u2014 "),wj=a("a"),ICo=o("OpenAIGPTLMHeadModel"),NCo=o(" (OpenAI GPT model)"),qCo=l(),ju=a("li"),jde=a("strong"),jCo=o("retribert"),DCo=o(" \u2014 "),Aj=a("a"),GCo=o("RetriBertModel"),OCo=o(" (RetriBERT model)"),VCo=l(),Du=a("li"),Dde=a("strong"),XCo=o("roberta"),zCo=o(" \u2014 "),Lj=a("a"),WCo=o("RobertaForMaskedLM"),QCo=o(" (RoBERTa model)"),HCo=l(),Gu=a("li"),Gde=a("strong"),UCo=o("splinter"),JCo=o(" \u2014 "),yj=a("a"),YCo=o("SplinterForPreTraining"),KCo=o(" (Splinter model)"),ZCo=l(),Ou=a("li"),Ode=a("strong"),e5o=o("squeezebert"),o5o=o(" \u2014 "),xj=a("a"),r5o=o("SqueezeBertForMaskedLM"),t5o=o(" (SqueezeBERT model)"),a5o=l(),Vu=a("li"),Vde=a("strong"),n5o=o("t5"),s5o=o(" \u2014 "),$j=a("a"),l5o=o("T5ForConditionalGeneration"),i5o=o(" (T5 model)"),d5o=l(),Xu=a("li"),Xde=a("strong"),c5o=o("tapas"),f5o=o(" \u2014 "),kj=a("a"),m5o=o("TapasForMaskedLM"),g5o=o(" (TAPAS model)"),h5o=l(),zu=a("li"),zde=a("strong"),p5o=o("transfo-xl"),_5o=o(" \u2014 "),Sj=a("a"),u5o=o("TransfoXLLMHeadModel"),b5o=o(" (Transformer-XL model)"),v5o=l(),Wu=a("li"),Wde=a("strong"),F5o=o("unispeech"),T5o=o(" \u2014 "),Rj=a("a"),M5o=o("UniSpeechForPreTraining"),E5o=o(" (UniSpeech model)"),C5o=l(),Qu=a("li"),Qde=a("strong"),w5o=o("unispeech-sat"),A5o=o(" \u2014 "),Pj=a("a"),L5o=o("UniSpeechSatForPreTraining"),y5o=o(" (UniSpeechSat model)"),x5o=l(),Hu=a("li"),Hde=a("strong"),$5o=o("visual_bert"),k5o=o(" \u2014 "),Bj=a("a"),S5o=o("VisualBertForPreTraining"),R5o=o(" (VisualBERT model)"),P5o=l(),Uu=a("li"),Ude=a("strong"),B5o=o("vit_mae"),I5o=o(" \u2014 "),Ij=a("a"),N5o=o("ViTMAEForPreTraining"),q5o=o(" (ViTMAE model)"),j5o=l(),Ju=a("li"),Jde=a("strong"),D5o=o("wav2vec2"),G5o=o(" \u2014 "),Nj=a("a"),O5o=o("Wav2Vec2ForPreTraining"),V5o=o(" (Wav2Vec2 model)"),X5o=l(),Yu=a("li"),Yde=a("strong"),z5o=o("wav2vec2-conformer"),W5o=o(" \u2014 "),qj=a("a"),Q5o=o("Wav2Vec2ConformerForPreTraining"),H5o=o(" (Wav2Vec2-Conformer model)"),U5o=l(),Ku=a("li"),Kde=a("strong"),J5o=o("xlm"),Y5o=o(" \u2014 "),jj=a("a"),K5o=o("XLMWithLMHeadModel"),Z5o=o(" (XLM model)"),e0o=l(),Zu=a("li"),Zde=a("strong"),o0o=o("xlm-roberta"),r0o=o(" \u2014 "),Dj=a("a"),t0o=o("XLMRobertaForMaskedLM"),a0o=o(" (XLM-RoBERTa model)"),n0o=l(),e1=a("li"),ece=a("strong"),s0o=o("xlm-roberta-xl"),l0o=o(" \u2014 "),Gj=a("a"),i0o=o("XLMRobertaXLForMaskedLM"),d0o=o(" (XLM-RoBERTa-XL model)"),c0o=l(),o1=a("li"),oce=a("strong"),f0o=o("xlnet"),m0o=o(" \u2014 "),Oj=a("a"),g0o=o("XLNetLMHeadModel"),h0o=o(" (XLNet model)"),p0o=l(),r1=a("p"),_0o=o("The model is set in evaluation mode by default using "),rce=a("code"),u0o=o("model.eval()"),b0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=a("code"),v0o=o("model.train()"),F0o=l(),F(t1.$$.fragment),vje=l(),Ri=a("h2"),a1=a("a"),ace=a("span"),F(EL.$$.fragment),T0o=l(),nce=a("span"),M0o=o("AutoModelForCausalLM"),Fje=l(),$o=a("div"),F(CL.$$.fragment),E0o=l(),Pi=a("p"),C0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vj=a("a"),w0o=o("from_pretrained()"),A0o=o(" class method or the "),Xj=a("a"),L0o=o("from_config()"),y0o=o(` class
method.`),x0o=l(),wL=a("p"),$0o=o("This class cannot be instantiated directly using "),sce=a("code"),k0o=o("__init__()"),S0o=o(" (throws an error)."),R0o=l(),nt=a("div"),F(AL.$$.fragment),P0o=l(),lce=a("p"),B0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I0o=l(),Bi=a("p"),N0o=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),q0o=o("not"),j0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),D0o=o("from_pretrained()"),G0o=o(" to load the model weights."),O0o=l(),F(n1.$$.fragment),V0o=l(),Ke=a("div"),F(LL.$$.fragment),X0o=l(),dce=a("p"),z0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W0o=l(),$a=a("p"),Q0o=o("The model class to instantiate is selected based on the "),cce=a("code"),H0o=o("model_type"),U0o=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),J0o=o("pretrained_model_name_or_path"),Y0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),K0o=o("pretrained_model_name_or_path"),Z0o=o(":"),ewo=l(),z=a("ul"),s1=a("li"),gce=a("strong"),owo=o("bart"),rwo=o(" \u2014 "),Wj=a("a"),two=o("BartForCausalLM"),awo=o(" (BART model)"),nwo=l(),l1=a("li"),hce=a("strong"),swo=o("bert"),lwo=o(" \u2014 "),Qj=a("a"),iwo=o("BertLMHeadModel"),dwo=o(" (BERT model)"),cwo=l(),i1=a("li"),pce=a("strong"),fwo=o("bert-generation"),mwo=o(" \u2014 "),Hj=a("a"),gwo=o("BertGenerationDecoder"),hwo=o(" (Bert Generation model)"),pwo=l(),d1=a("li"),_ce=a("strong"),_wo=o("big_bird"),uwo=o(" \u2014 "),Uj=a("a"),bwo=o("BigBirdForCausalLM"),vwo=o(" (BigBird model)"),Fwo=l(),c1=a("li"),uce=a("strong"),Two=o("bigbird_pegasus"),Mwo=o(" \u2014 "),Jj=a("a"),Ewo=o("BigBirdPegasusForCausalLM"),Cwo=o(" (BigBird-Pegasus model)"),wwo=l(),f1=a("li"),bce=a("strong"),Awo=o("blenderbot"),Lwo=o(" \u2014 "),Yj=a("a"),ywo=o("BlenderbotForCausalLM"),xwo=o(" (Blenderbot model)"),$wo=l(),m1=a("li"),vce=a("strong"),kwo=o("blenderbot-small"),Swo=o(" \u2014 "),Kj=a("a"),Rwo=o("BlenderbotSmallForCausalLM"),Pwo=o(" (BlenderbotSmall model)"),Bwo=l(),g1=a("li"),Fce=a("strong"),Iwo=o("camembert"),Nwo=o(" \u2014 "),Zj=a("a"),qwo=o("CamembertForCausalLM"),jwo=o(" (CamemBERT model)"),Dwo=l(),h1=a("li"),Tce=a("strong"),Gwo=o("ctrl"),Owo=o(" \u2014 "),eD=a("a"),Vwo=o("CTRLLMHeadModel"),Xwo=o(" (CTRL model)"),zwo=l(),p1=a("li"),Mce=a("strong"),Wwo=o("data2vec-text"),Qwo=o(" \u2014 "),oD=a("a"),Hwo=o("Data2VecTextForCausalLM"),Uwo=o(" (Data2VecText model)"),Jwo=l(),_1=a("li"),Ece=a("strong"),Ywo=o("electra"),Kwo=o(" \u2014 "),rD=a("a"),Zwo=o("ElectraForCausalLM"),eAo=o(" (ELECTRA model)"),oAo=l(),u1=a("li"),Cce=a("strong"),rAo=o("gpt2"),tAo=o(" \u2014 "),tD=a("a"),aAo=o("GPT2LMHeadModel"),nAo=o(" (OpenAI GPT-2 model)"),sAo=l(),b1=a("li"),wce=a("strong"),lAo=o("gpt_neo"),iAo=o(" \u2014 "),aD=a("a"),dAo=o("GPTNeoForCausalLM"),cAo=o(" (GPT Neo model)"),fAo=l(),v1=a("li"),Ace=a("strong"),mAo=o("gpt_neox"),gAo=o(" \u2014 "),nD=a("a"),hAo=o("GPTNeoXForCausalLM"),pAo=o(" (GPT NeoX model)"),_Ao=l(),F1=a("li"),Lce=a("strong"),uAo=o("gptj"),bAo=o(" \u2014 "),sD=a("a"),vAo=o("GPTJForCausalLM"),FAo=o(" (GPT-J model)"),TAo=l(),T1=a("li"),yce=a("strong"),MAo=o("marian"),EAo=o(" \u2014 "),lD=a("a"),CAo=o("MarianForCausalLM"),wAo=o(" (Marian model)"),AAo=l(),M1=a("li"),xce=a("strong"),LAo=o("mbart"),yAo=o(" \u2014 "),iD=a("a"),xAo=o("MBartForCausalLM"),$Ao=o(" (mBART model)"),kAo=l(),E1=a("li"),$ce=a("strong"),SAo=o("megatron-bert"),RAo=o(" \u2014 "),dD=a("a"),PAo=o("MegatronBertForCausalLM"),BAo=o(" (Megatron-BERT model)"),IAo=l(),C1=a("li"),kce=a("strong"),NAo=o("openai-gpt"),qAo=o(" \u2014 "),cD=a("a"),jAo=o("OpenAIGPTLMHeadModel"),DAo=o(" (OpenAI GPT model)"),GAo=l(),w1=a("li"),Sce=a("strong"),OAo=o("opt"),VAo=o(" \u2014 "),fD=a("a"),XAo=o("OPTForCausalLM"),zAo=o(" (OPT model)"),WAo=l(),A1=a("li"),Rce=a("strong"),QAo=o("pegasus"),HAo=o(" \u2014 "),mD=a("a"),UAo=o("PegasusForCausalLM"),JAo=o(" (Pegasus model)"),YAo=l(),L1=a("li"),Pce=a("strong"),KAo=o("plbart"),ZAo=o(" \u2014 "),gD=a("a"),e6o=o("PLBartForCausalLM"),o6o=o(" (PLBart model)"),r6o=l(),y1=a("li"),Bce=a("strong"),t6o=o("prophetnet"),a6o=o(" \u2014 "),hD=a("a"),n6o=o("ProphetNetForCausalLM"),s6o=o(" (ProphetNet model)"),l6o=l(),x1=a("li"),Ice=a("strong"),i6o=o("qdqbert"),d6o=o(" \u2014 "),pD=a("a"),c6o=o("QDQBertLMHeadModel"),f6o=o(" (QDQBert model)"),m6o=l(),$1=a("li"),Nce=a("strong"),g6o=o("reformer"),h6o=o(" \u2014 "),_D=a("a"),p6o=o("ReformerModelWithLMHead"),_6o=o(" (Reformer model)"),u6o=l(),k1=a("li"),qce=a("strong"),b6o=o("rembert"),v6o=o(" \u2014 "),uD=a("a"),F6o=o("RemBertForCausalLM"),T6o=o(" (RemBERT model)"),M6o=l(),S1=a("li"),jce=a("strong"),E6o=o("roberta"),C6o=o(" \u2014 "),bD=a("a"),w6o=o("RobertaForCausalLM"),A6o=o(" (RoBERTa model)"),L6o=l(),R1=a("li"),Dce=a("strong"),y6o=o("roformer"),x6o=o(" \u2014 "),vD=a("a"),$6o=o("RoFormerForCausalLM"),k6o=o(" (RoFormer model)"),S6o=l(),P1=a("li"),Gce=a("strong"),R6o=o("speech_to_text_2"),P6o=o(" \u2014 "),FD=a("a"),B6o=o("Speech2Text2ForCausalLM"),I6o=o(" (Speech2Text2 model)"),N6o=l(),B1=a("li"),Oce=a("strong"),q6o=o("transfo-xl"),j6o=o(" \u2014 "),TD=a("a"),D6o=o("TransfoXLLMHeadModel"),G6o=o(" (Transformer-XL model)"),O6o=l(),I1=a("li"),Vce=a("strong"),V6o=o("trocr"),X6o=o(" \u2014 "),MD=a("a"),z6o=o("TrOCRForCausalLM"),W6o=o(" (TrOCR model)"),Q6o=l(),N1=a("li"),Xce=a("strong"),H6o=o("xglm"),U6o=o(" \u2014 "),ED=a("a"),J6o=o("XGLMForCausalLM"),Y6o=o(" (XGLM model)"),K6o=l(),q1=a("li"),zce=a("strong"),Z6o=o("xlm"),eLo=o(" \u2014 "),CD=a("a"),oLo=o("XLMWithLMHeadModel"),rLo=o(" (XLM model)"),tLo=l(),j1=a("li"),Wce=a("strong"),aLo=o("xlm-prophetnet"),nLo=o(" \u2014 "),wD=a("a"),sLo=o("XLMProphetNetForCausalLM"),lLo=o(" (XLM-ProphetNet model)"),iLo=l(),D1=a("li"),Qce=a("strong"),dLo=o("xlm-roberta"),cLo=o(" \u2014 "),AD=a("a"),fLo=o("XLMRobertaForCausalLM"),mLo=o(" (XLM-RoBERTa model)"),gLo=l(),G1=a("li"),Hce=a("strong"),hLo=o("xlm-roberta-xl"),pLo=o(" \u2014 "),LD=a("a"),_Lo=o("XLMRobertaXLForCausalLM"),uLo=o(" (XLM-RoBERTa-XL model)"),bLo=l(),O1=a("li"),Uce=a("strong"),vLo=o("xlnet"),FLo=o(" \u2014 "),yD=a("a"),TLo=o("XLNetLMHeadModel"),MLo=o(" (XLNet model)"),ELo=l(),V1=a("p"),CLo=o("The model is set in evaluation mode by default using "),Jce=a("code"),wLo=o("model.eval()"),ALo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),LLo=o("model.train()"),yLo=l(),F(X1.$$.fragment),Tje=l(),Ii=a("h2"),z1=a("a"),Kce=a("span"),F(yL.$$.fragment),xLo=l(),Zce=a("span"),$Lo=o("AutoModelForMaskedLM"),Mje=l(),ko=a("div"),F(xL.$$.fragment),kLo=l(),Ni=a("p"),SLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xD=a("a"),RLo=o("from_pretrained()"),PLo=o(" class method or the "),$D=a("a"),BLo=o("from_config()"),ILo=o(` class
method.`),NLo=l(),$L=a("p"),qLo=o("This class cannot be instantiated directly using "),efe=a("code"),jLo=o("__init__()"),DLo=o(" (throws an error)."),GLo=l(),st=a("div"),F(kL.$$.fragment),OLo=l(),ofe=a("p"),VLo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XLo=l(),qi=a("p"),zLo=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),WLo=o("not"),QLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=a("a"),HLo=o("from_pretrained()"),ULo=o(" to load the model weights."),JLo=l(),F(W1.$$.fragment),YLo=l(),Ze=a("div"),F(SL.$$.fragment),KLo=l(),tfe=a("p"),ZLo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eyo=l(),ka=a("p"),oyo=o("The model class to instantiate is selected based on the "),afe=a("code"),ryo=o("model_type"),tyo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),ayo=o("pretrained_model_name_or_path"),nyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),syo=o("pretrained_model_name_or_path"),lyo=o(":"),iyo=l(),W=a("ul"),Q1=a("li"),lfe=a("strong"),dyo=o("albert"),cyo=o(" \u2014 "),SD=a("a"),fyo=o("AlbertForMaskedLM"),myo=o(" (ALBERT model)"),gyo=l(),H1=a("li"),ife=a("strong"),hyo=o("bart"),pyo=o(" \u2014 "),RD=a("a"),_yo=o("BartForConditionalGeneration"),uyo=o(" (BART model)"),byo=l(),U1=a("li"),dfe=a("strong"),vyo=o("bert"),Fyo=o(" \u2014 "),PD=a("a"),Tyo=o("BertForMaskedLM"),Myo=o(" (BERT model)"),Eyo=l(),J1=a("li"),cfe=a("strong"),Cyo=o("big_bird"),wyo=o(" \u2014 "),BD=a("a"),Ayo=o("BigBirdForMaskedLM"),Lyo=o(" (BigBird model)"),yyo=l(),Y1=a("li"),ffe=a("strong"),xyo=o("camembert"),$yo=o(" \u2014 "),ID=a("a"),kyo=o("CamembertForMaskedLM"),Syo=o(" (CamemBERT model)"),Ryo=l(),K1=a("li"),mfe=a("strong"),Pyo=o("convbert"),Byo=o(" \u2014 "),ND=a("a"),Iyo=o("ConvBertForMaskedLM"),Nyo=o(" (ConvBERT model)"),qyo=l(),Z1=a("li"),gfe=a("strong"),jyo=o("data2vec-text"),Dyo=o(" \u2014 "),qD=a("a"),Gyo=o("Data2VecTextForMaskedLM"),Oyo=o(" (Data2VecText model)"),Vyo=l(),e3=a("li"),hfe=a("strong"),Xyo=o("deberta"),zyo=o(" \u2014 "),jD=a("a"),Wyo=o("DebertaForMaskedLM"),Qyo=o(" (DeBERTa model)"),Hyo=l(),o3=a("li"),pfe=a("strong"),Uyo=o("deberta-v2"),Jyo=o(" \u2014 "),DD=a("a"),Yyo=o("DebertaV2ForMaskedLM"),Kyo=o(" (DeBERTa-v2 model)"),Zyo=l(),r3=a("li"),_fe=a("strong"),e8o=o("distilbert"),o8o=o(" \u2014 "),GD=a("a"),r8o=o("DistilBertForMaskedLM"),t8o=o(" (DistilBERT model)"),a8o=l(),t3=a("li"),ufe=a("strong"),n8o=o("electra"),s8o=o(" \u2014 "),OD=a("a"),l8o=o("ElectraForMaskedLM"),i8o=o(" (ELECTRA model)"),d8o=l(),a3=a("li"),bfe=a("strong"),c8o=o("flaubert"),f8o=o(" \u2014 "),VD=a("a"),m8o=o("FlaubertWithLMHeadModel"),g8o=o(" (FlauBERT model)"),h8o=l(),n3=a("li"),vfe=a("strong"),p8o=o("fnet"),_8o=o(" \u2014 "),XD=a("a"),u8o=o("FNetForMaskedLM"),b8o=o(" (FNet model)"),v8o=l(),s3=a("li"),Ffe=a("strong"),F8o=o("funnel"),T8o=o(" \u2014 "),zD=a("a"),M8o=o("FunnelForMaskedLM"),E8o=o(" (Funnel Transformer model)"),C8o=l(),l3=a("li"),Tfe=a("strong"),w8o=o("ibert"),A8o=o(" \u2014 "),WD=a("a"),L8o=o("IBertForMaskedLM"),y8o=o(" (I-BERT model)"),x8o=l(),i3=a("li"),Mfe=a("strong"),$8o=o("layoutlm"),k8o=o(" \u2014 "),QD=a("a"),S8o=o("LayoutLMForMaskedLM"),R8o=o(" (LayoutLM model)"),P8o=l(),d3=a("li"),Efe=a("strong"),B8o=o("longformer"),I8o=o(" \u2014 "),HD=a("a"),N8o=o("LongformerForMaskedLM"),q8o=o(" (Longformer model)"),j8o=l(),c3=a("li"),Cfe=a("strong"),D8o=o("luke"),G8o=o(" \u2014 "),UD=a("a"),O8o=o("LukeForMaskedLM"),V8o=o(" (LUKE model)"),X8o=l(),f3=a("li"),wfe=a("strong"),z8o=o("mbart"),W8o=o(" \u2014 "),JD=a("a"),Q8o=o("MBartForConditionalGeneration"),H8o=o(" (mBART model)"),U8o=l(),m3=a("li"),Afe=a("strong"),J8o=o("megatron-bert"),Y8o=o(" \u2014 "),YD=a("a"),K8o=o("MegatronBertForMaskedLM"),Z8o=o(" (Megatron-BERT model)"),e9o=l(),g3=a("li"),Lfe=a("strong"),o9o=o("mobilebert"),r9o=o(" \u2014 "),KD=a("a"),t9o=o("MobileBertForMaskedLM"),a9o=o(" (MobileBERT model)"),n9o=l(),h3=a("li"),yfe=a("strong"),s9o=o("mpnet"),l9o=o(" \u2014 "),ZD=a("a"),i9o=o("MPNetForMaskedLM"),d9o=o(" (MPNet model)"),c9o=l(),p3=a("li"),xfe=a("strong"),f9o=o("nystromformer"),m9o=o(" \u2014 "),eG=a("a"),g9o=o("NystromformerForMaskedLM"),h9o=o(" (Nystr\xF6mformer model)"),p9o=l(),_3=a("li"),$fe=a("strong"),_9o=o("perceiver"),u9o=o(" \u2014 "),oG=a("a"),b9o=o("PerceiverForMaskedLM"),v9o=o(" (Perceiver model)"),F9o=l(),u3=a("li"),kfe=a("strong"),T9o=o("qdqbert"),M9o=o(" \u2014 "),rG=a("a"),E9o=o("QDQBertForMaskedLM"),C9o=o(" (QDQBert model)"),w9o=l(),b3=a("li"),Sfe=a("strong"),A9o=o("reformer"),L9o=o(" \u2014 "),tG=a("a"),y9o=o("ReformerForMaskedLM"),x9o=o(" (Reformer model)"),$9o=l(),v3=a("li"),Rfe=a("strong"),k9o=o("rembert"),S9o=o(" \u2014 "),aG=a("a"),R9o=o("RemBertForMaskedLM"),P9o=o(" (RemBERT model)"),B9o=l(),F3=a("li"),Pfe=a("strong"),I9o=o("roberta"),N9o=o(" \u2014 "),nG=a("a"),q9o=o("RobertaForMaskedLM"),j9o=o(" (RoBERTa model)"),D9o=l(),T3=a("li"),Bfe=a("strong"),G9o=o("roformer"),O9o=o(" \u2014 "),sG=a("a"),V9o=o("RoFormerForMaskedLM"),X9o=o(" (RoFormer model)"),z9o=l(),M3=a("li"),Ife=a("strong"),W9o=o("squeezebert"),Q9o=o(" \u2014 "),lG=a("a"),H9o=o("SqueezeBertForMaskedLM"),U9o=o(" (SqueezeBERT model)"),J9o=l(),E3=a("li"),Nfe=a("strong"),Y9o=o("tapas"),K9o=o(" \u2014 "),iG=a("a"),Z9o=o("TapasForMaskedLM"),exo=o(" (TAPAS model)"),oxo=l(),C3=a("li"),qfe=a("strong"),rxo=o("wav2vec2"),txo=o(" \u2014 "),jfe=a("code"),axo=o("Wav2Vec2ForMaskedLM"),nxo=o(" (Wav2Vec2 model)"),sxo=l(),w3=a("li"),Dfe=a("strong"),lxo=o("xlm"),ixo=o(" \u2014 "),dG=a("a"),dxo=o("XLMWithLMHeadModel"),cxo=o(" (XLM model)"),fxo=l(),A3=a("li"),Gfe=a("strong"),mxo=o("xlm-roberta"),gxo=o(" \u2014 "),cG=a("a"),hxo=o("XLMRobertaForMaskedLM"),pxo=o(" (XLM-RoBERTa model)"),_xo=l(),L3=a("li"),Ofe=a("strong"),uxo=o("xlm-roberta-xl"),bxo=o(" \u2014 "),fG=a("a"),vxo=o("XLMRobertaXLForMaskedLM"),Fxo=o(" (XLM-RoBERTa-XL model)"),Txo=l(),y3=a("li"),Vfe=a("strong"),Mxo=o("yoso"),Exo=o(" \u2014 "),mG=a("a"),Cxo=o("YosoForMaskedLM"),wxo=o(" (YOSO model)"),Axo=l(),x3=a("p"),Lxo=o("The model is set in evaluation mode by default using "),Xfe=a("code"),yxo=o("model.eval()"),xxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),$xo=o("model.train()"),kxo=l(),F($3.$$.fragment),Eje=l(),ji=a("h2"),k3=a("a"),Wfe=a("span"),F(RL.$$.fragment),Sxo=l(),Qfe=a("span"),Rxo=o("AutoModelForSeq2SeqLM"),Cje=l(),So=a("div"),F(PL.$$.fragment),Pxo=l(),Di=a("p"),Bxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gG=a("a"),Ixo=o("from_pretrained()"),Nxo=o(" class method or the "),hG=a("a"),qxo=o("from_config()"),jxo=o(` class
method.`),Dxo=l(),BL=a("p"),Gxo=o("This class cannot be instantiated directly using "),Hfe=a("code"),Oxo=o("__init__()"),Vxo=o(" (throws an error)."),Xxo=l(),lt=a("div"),F(IL.$$.fragment),zxo=l(),Ufe=a("p"),Wxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Qxo=l(),Gi=a("p"),Hxo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),Uxo=o("not"),Jxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),Yxo=o("from_pretrained()"),Kxo=o(" to load the model weights."),Zxo=l(),F(S3.$$.fragment),e$o=l(),eo=a("div"),F(NL.$$.fragment),o$o=l(),Yfe=a("p"),r$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t$o=l(),Sa=a("p"),a$o=o("The model class to instantiate is selected based on the "),Kfe=a("code"),n$o=o("model_type"),s$o=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=a("code"),d$o=o("pretrained_model_name_or_path"),c$o=o(":"),f$o=l(),ue=a("ul"),R3=a("li"),ome=a("strong"),m$o=o("bart"),g$o=o(" \u2014 "),_G=a("a"),h$o=o("BartForConditionalGeneration"),p$o=o(" (BART model)"),_$o=l(),P3=a("li"),rme=a("strong"),u$o=o("bigbird_pegasus"),b$o=o(" \u2014 "),uG=a("a"),v$o=o("BigBirdPegasusForConditionalGeneration"),F$o=o(" (BigBird-Pegasus model)"),T$o=l(),B3=a("li"),tme=a("strong"),M$o=o("blenderbot"),E$o=o(" \u2014 "),bG=a("a"),C$o=o("BlenderbotForConditionalGeneration"),w$o=o(" (Blenderbot model)"),A$o=l(),I3=a("li"),ame=a("strong"),L$o=o("blenderbot-small"),y$o=o(" \u2014 "),vG=a("a"),x$o=o("BlenderbotSmallForConditionalGeneration"),$$o=o(" (BlenderbotSmall model)"),k$o=l(),N3=a("li"),nme=a("strong"),S$o=o("encoder-decoder"),R$o=o(" \u2014 "),FG=a("a"),P$o=o("EncoderDecoderModel"),B$o=o(" (Encoder decoder model)"),I$o=l(),q3=a("li"),sme=a("strong"),N$o=o("fsmt"),q$o=o(" \u2014 "),TG=a("a"),j$o=o("FSMTForConditionalGeneration"),D$o=o(" (FairSeq Machine-Translation model)"),G$o=l(),j3=a("li"),lme=a("strong"),O$o=o("led"),V$o=o(" \u2014 "),MG=a("a"),X$o=o("LEDForConditionalGeneration"),z$o=o(" (LED model)"),W$o=l(),D3=a("li"),ime=a("strong"),Q$o=o("m2m_100"),H$o=o(" \u2014 "),EG=a("a"),U$o=o("M2M100ForConditionalGeneration"),J$o=o(" (M2M100 model)"),Y$o=l(),G3=a("li"),dme=a("strong"),K$o=o("marian"),Z$o=o(" \u2014 "),CG=a("a"),eko=o("MarianMTModel"),oko=o(" (Marian model)"),rko=l(),O3=a("li"),cme=a("strong"),tko=o("mbart"),ako=o(" \u2014 "),wG=a("a"),nko=o("MBartForConditionalGeneration"),sko=o(" (mBART model)"),lko=l(),V3=a("li"),fme=a("strong"),iko=o("mt5"),dko=o(" \u2014 "),AG=a("a"),cko=o("MT5ForConditionalGeneration"),fko=o(" (MT5 model)"),mko=l(),X3=a("li"),mme=a("strong"),gko=o("pegasus"),hko=o(" \u2014 "),LG=a("a"),pko=o("PegasusForConditionalGeneration"),_ko=o(" (Pegasus model)"),uko=l(),z3=a("li"),gme=a("strong"),bko=o("plbart"),vko=o(" \u2014 "),yG=a("a"),Fko=o("PLBartForConditionalGeneration"),Tko=o(" (PLBart model)"),Mko=l(),W3=a("li"),hme=a("strong"),Eko=o("prophetnet"),Cko=o(" \u2014 "),xG=a("a"),wko=o("ProphetNetForConditionalGeneration"),Ako=o(" (ProphetNet model)"),Lko=l(),Q3=a("li"),pme=a("strong"),yko=o("t5"),xko=o(" \u2014 "),$G=a("a"),$ko=o("T5ForConditionalGeneration"),kko=o(" (T5 model)"),Sko=l(),H3=a("li"),_me=a("strong"),Rko=o("xlm-prophetnet"),Pko=o(" \u2014 "),kG=a("a"),Bko=o("XLMProphetNetForConditionalGeneration"),Iko=o(" (XLM-ProphetNet model)"),Nko=l(),U3=a("p"),qko=o("The model is set in evaluation mode by default using "),ume=a("code"),jko=o("model.eval()"),Dko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),Gko=o("model.train()"),Oko=l(),F(J3.$$.fragment),wje=l(),Oi=a("h2"),Y3=a("a"),vme=a("span"),F(qL.$$.fragment),Vko=l(),Fme=a("span"),Xko=o("AutoModelForSequenceClassification"),Aje=l(),Ro=a("div"),F(jL.$$.fragment),zko=l(),Vi=a("p"),Wko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SG=a("a"),Qko=o("from_pretrained()"),Hko=o(" class method or the "),RG=a("a"),Uko=o("from_config()"),Jko=o(` class
method.`),Yko=l(),DL=a("p"),Kko=o("This class cannot be instantiated directly using "),Tme=a("code"),Zko=o("__init__()"),eSo=o(" (throws an error)."),oSo=l(),it=a("div"),F(GL.$$.fragment),rSo=l(),Mme=a("p"),tSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aSo=l(),Xi=a("p"),nSo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),sSo=o("not"),lSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),iSo=o("from_pretrained()"),dSo=o(" to load the model weights."),cSo=l(),F(K3.$$.fragment),fSo=l(),oo=a("div"),F(OL.$$.fragment),mSo=l(),Cme=a("p"),gSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hSo=l(),Ra=a("p"),pSo=o("The model class to instantiate is selected based on the "),wme=a("code"),_So=o("model_type"),uSo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),bSo=o("pretrained_model_name_or_path"),vSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),FSo=o("pretrained_model_name_or_path"),TSo=o(":"),MSo=l(),N=a("ul"),Z3=a("li"),yme=a("strong"),ESo=o("albert"),CSo=o(" \u2014 "),BG=a("a"),wSo=o("AlbertForSequenceClassification"),ASo=o(" (ALBERT model)"),LSo=l(),eb=a("li"),xme=a("strong"),ySo=o("bart"),xSo=o(" \u2014 "),IG=a("a"),$So=o("BartForSequenceClassification"),kSo=o(" (BART model)"),SSo=l(),ob=a("li"),$me=a("strong"),RSo=o("bert"),PSo=o(" \u2014 "),NG=a("a"),BSo=o("BertForSequenceClassification"),ISo=o(" (BERT model)"),NSo=l(),rb=a("li"),kme=a("strong"),qSo=o("big_bird"),jSo=o(" \u2014 "),qG=a("a"),DSo=o("BigBirdForSequenceClassification"),GSo=o(" (BigBird model)"),OSo=l(),tb=a("li"),Sme=a("strong"),VSo=o("bigbird_pegasus"),XSo=o(" \u2014 "),jG=a("a"),zSo=o("BigBirdPegasusForSequenceClassification"),WSo=o(" (BigBird-Pegasus model)"),QSo=l(),ab=a("li"),Rme=a("strong"),HSo=o("camembert"),USo=o(" \u2014 "),DG=a("a"),JSo=o("CamembertForSequenceClassification"),YSo=o(" (CamemBERT model)"),KSo=l(),nb=a("li"),Pme=a("strong"),ZSo=o("canine"),eRo=o(" \u2014 "),GG=a("a"),oRo=o("CanineForSequenceClassification"),rRo=o(" (CANINE model)"),tRo=l(),sb=a("li"),Bme=a("strong"),aRo=o("convbert"),nRo=o(" \u2014 "),OG=a("a"),sRo=o("ConvBertForSequenceClassification"),lRo=o(" (ConvBERT model)"),iRo=l(),lb=a("li"),Ime=a("strong"),dRo=o("ctrl"),cRo=o(" \u2014 "),VG=a("a"),fRo=o("CTRLForSequenceClassification"),mRo=o(" (CTRL model)"),gRo=l(),ib=a("li"),Nme=a("strong"),hRo=o("data2vec-text"),pRo=o(" \u2014 "),XG=a("a"),_Ro=o("Data2VecTextForSequenceClassification"),uRo=o(" (Data2VecText model)"),bRo=l(),db=a("li"),qme=a("strong"),vRo=o("deberta"),FRo=o(" \u2014 "),zG=a("a"),TRo=o("DebertaForSequenceClassification"),MRo=o(" (DeBERTa model)"),ERo=l(),cb=a("li"),jme=a("strong"),CRo=o("deberta-v2"),wRo=o(" \u2014 "),WG=a("a"),ARo=o("DebertaV2ForSequenceClassification"),LRo=o(" (DeBERTa-v2 model)"),yRo=l(),fb=a("li"),Dme=a("strong"),xRo=o("distilbert"),$Ro=o(" \u2014 "),QG=a("a"),kRo=o("DistilBertForSequenceClassification"),SRo=o(" (DistilBERT model)"),RRo=l(),mb=a("li"),Gme=a("strong"),PRo=o("electra"),BRo=o(" \u2014 "),HG=a("a"),IRo=o("ElectraForSequenceClassification"),NRo=o(" (ELECTRA model)"),qRo=l(),gb=a("li"),Ome=a("strong"),jRo=o("flaubert"),DRo=o(" \u2014 "),UG=a("a"),GRo=o("FlaubertForSequenceClassification"),ORo=o(" (FlauBERT model)"),VRo=l(),hb=a("li"),Vme=a("strong"),XRo=o("fnet"),zRo=o(" \u2014 "),JG=a("a"),WRo=o("FNetForSequenceClassification"),QRo=o(" (FNet model)"),HRo=l(),pb=a("li"),Xme=a("strong"),URo=o("funnel"),JRo=o(" \u2014 "),YG=a("a"),YRo=o("FunnelForSequenceClassification"),KRo=o(" (Funnel Transformer model)"),ZRo=l(),_b=a("li"),zme=a("strong"),ePo=o("gpt2"),oPo=o(" \u2014 "),KG=a("a"),rPo=o("GPT2ForSequenceClassification"),tPo=o(" (OpenAI GPT-2 model)"),aPo=l(),ub=a("li"),Wme=a("strong"),nPo=o("gpt_neo"),sPo=o(" \u2014 "),ZG=a("a"),lPo=o("GPTNeoForSequenceClassification"),iPo=o(" (GPT Neo model)"),dPo=l(),bb=a("li"),Qme=a("strong"),cPo=o("gptj"),fPo=o(" \u2014 "),eO=a("a"),mPo=o("GPTJForSequenceClassification"),gPo=o(" (GPT-J model)"),hPo=l(),vb=a("li"),Hme=a("strong"),pPo=o("ibert"),_Po=o(" \u2014 "),oO=a("a"),uPo=o("IBertForSequenceClassification"),bPo=o(" (I-BERT model)"),vPo=l(),Fb=a("li"),Ume=a("strong"),FPo=o("layoutlm"),TPo=o(" \u2014 "),rO=a("a"),MPo=o("LayoutLMForSequenceClassification"),EPo=o(" (LayoutLM model)"),CPo=l(),Tb=a("li"),Jme=a("strong"),wPo=o("layoutlmv2"),APo=o(" \u2014 "),tO=a("a"),LPo=o("LayoutLMv2ForSequenceClassification"),yPo=o(" (LayoutLMv2 model)"),xPo=l(),Mb=a("li"),Yme=a("strong"),$Po=o("layoutlmv3"),kPo=o(" \u2014 "),aO=a("a"),SPo=o("LayoutLMv3ForSequenceClassification"),RPo=o(" (LayoutLMv3 model)"),PPo=l(),Eb=a("li"),Kme=a("strong"),BPo=o("led"),IPo=o(" \u2014 "),nO=a("a"),NPo=o("LEDForSequenceClassification"),qPo=o(" (LED model)"),jPo=l(),Cb=a("li"),Zme=a("strong"),DPo=o("longformer"),GPo=o(" \u2014 "),sO=a("a"),OPo=o("LongformerForSequenceClassification"),VPo=o(" (Longformer model)"),XPo=l(),wb=a("li"),ege=a("strong"),zPo=o("mbart"),WPo=o(" \u2014 "),lO=a("a"),QPo=o("MBartForSequenceClassification"),HPo=o(" (mBART model)"),UPo=l(),Ab=a("li"),oge=a("strong"),JPo=o("megatron-bert"),YPo=o(" \u2014 "),iO=a("a"),KPo=o("MegatronBertForSequenceClassification"),ZPo=o(" (Megatron-BERT model)"),eBo=l(),Lb=a("li"),rge=a("strong"),oBo=o("mobilebert"),rBo=o(" \u2014 "),dO=a("a"),tBo=o("MobileBertForSequenceClassification"),aBo=o(" (MobileBERT model)"),nBo=l(),yb=a("li"),tge=a("strong"),sBo=o("mpnet"),lBo=o(" \u2014 "),cO=a("a"),iBo=o("MPNetForSequenceClassification"),dBo=o(" (MPNet model)"),cBo=l(),xb=a("li"),age=a("strong"),fBo=o("nystromformer"),mBo=o(" \u2014 "),fO=a("a"),gBo=o("NystromformerForSequenceClassification"),hBo=o(" (Nystr\xF6mformer model)"),pBo=l(),$b=a("li"),nge=a("strong"),_Bo=o("openai-gpt"),uBo=o(" \u2014 "),mO=a("a"),bBo=o("OpenAIGPTForSequenceClassification"),vBo=o(" (OpenAI GPT model)"),FBo=l(),kb=a("li"),sge=a("strong"),TBo=o("perceiver"),MBo=o(" \u2014 "),gO=a("a"),EBo=o("PerceiverForSequenceClassification"),CBo=o(" (Perceiver model)"),wBo=l(),Sb=a("li"),lge=a("strong"),ABo=o("plbart"),LBo=o(" \u2014 "),hO=a("a"),yBo=o("PLBartForSequenceClassification"),xBo=o(" (PLBart model)"),$Bo=l(),Rb=a("li"),ige=a("strong"),kBo=o("qdqbert"),SBo=o(" \u2014 "),pO=a("a"),RBo=o("QDQBertForSequenceClassification"),PBo=o(" (QDQBert model)"),BBo=l(),Pb=a("li"),dge=a("strong"),IBo=o("reformer"),NBo=o(" \u2014 "),_O=a("a"),qBo=o("ReformerForSequenceClassification"),jBo=o(" (Reformer model)"),DBo=l(),Bb=a("li"),cge=a("strong"),GBo=o("rembert"),OBo=o(" \u2014 "),uO=a("a"),VBo=o("RemBertForSequenceClassification"),XBo=o(" (RemBERT model)"),zBo=l(),Ib=a("li"),fge=a("strong"),WBo=o("roberta"),QBo=o(" \u2014 "),bO=a("a"),HBo=o("RobertaForSequenceClassification"),UBo=o(" (RoBERTa model)"),JBo=l(),Nb=a("li"),mge=a("strong"),YBo=o("roformer"),KBo=o(" \u2014 "),vO=a("a"),ZBo=o("RoFormerForSequenceClassification"),eIo=o(" (RoFormer model)"),oIo=l(),qb=a("li"),gge=a("strong"),rIo=o("squeezebert"),tIo=o(" \u2014 "),FO=a("a"),aIo=o("SqueezeBertForSequenceClassification"),nIo=o(" (SqueezeBERT model)"),sIo=l(),jb=a("li"),hge=a("strong"),lIo=o("tapas"),iIo=o(" \u2014 "),TO=a("a"),dIo=o("TapasForSequenceClassification"),cIo=o(" (TAPAS model)"),fIo=l(),Db=a("li"),pge=a("strong"),mIo=o("transfo-xl"),gIo=o(" \u2014 "),MO=a("a"),hIo=o("TransfoXLForSequenceClassification"),pIo=o(" (Transformer-XL model)"),_Io=l(),Gb=a("li"),_ge=a("strong"),uIo=o("xlm"),bIo=o(" \u2014 "),EO=a("a"),vIo=o("XLMForSequenceClassification"),FIo=o(" (XLM model)"),TIo=l(),Ob=a("li"),uge=a("strong"),MIo=o("xlm-roberta"),EIo=o(" \u2014 "),CO=a("a"),CIo=o("XLMRobertaForSequenceClassification"),wIo=o(" (XLM-RoBERTa model)"),AIo=l(),Vb=a("li"),bge=a("strong"),LIo=o("xlm-roberta-xl"),yIo=o(" \u2014 "),wO=a("a"),xIo=o("XLMRobertaXLForSequenceClassification"),$Io=o(" (XLM-RoBERTa-XL model)"),kIo=l(),Xb=a("li"),vge=a("strong"),SIo=o("xlnet"),RIo=o(" \u2014 "),AO=a("a"),PIo=o("XLNetForSequenceClassification"),BIo=o(" (XLNet model)"),IIo=l(),zb=a("li"),Fge=a("strong"),NIo=o("yoso"),qIo=o(" \u2014 "),LO=a("a"),jIo=o("YosoForSequenceClassification"),DIo=o(" (YOSO model)"),GIo=l(),Wb=a("p"),OIo=o("The model is set in evaluation mode by default using "),Tge=a("code"),VIo=o("model.eval()"),XIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),zIo=o("model.train()"),WIo=l(),F(Qb.$$.fragment),Lje=l(),zi=a("h2"),Hb=a("a"),Ege=a("span"),F(VL.$$.fragment),QIo=l(),Cge=a("span"),HIo=o("AutoModelForMultipleChoice"),yje=l(),Po=a("div"),F(XL.$$.fragment),UIo=l(),Wi=a("p"),JIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yO=a("a"),YIo=o("from_pretrained()"),KIo=o(" class method or the "),xO=a("a"),ZIo=o("from_config()"),eNo=o(` class
method.`),oNo=l(),zL=a("p"),rNo=o("This class cannot be instantiated directly using "),wge=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),dt=a("div"),F(WL.$$.fragment),sNo=l(),Age=a("p"),lNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iNo=l(),Qi=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),mNo=o("from_pretrained()"),gNo=o(" to load the model weights."),hNo=l(),F(Ub.$$.fragment),pNo=l(),ro=a("div"),F(QL.$$.fragment),_No=l(),yge=a("p"),uNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bNo=l(),Pa=a("p"),vNo=o("The model class to instantiate is selected based on the "),xge=a("code"),FNo=o("model_type"),TNo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),MNo=o("pretrained_model_name_or_path"),ENo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),CNo=o("pretrained_model_name_or_path"),wNo=o(":"),ANo=l(),Z=a("ul"),Jb=a("li"),Sge=a("strong"),LNo=o("albert"),yNo=o(" \u2014 "),kO=a("a"),xNo=o("AlbertForMultipleChoice"),$No=o(" (ALBERT model)"),kNo=l(),Yb=a("li"),Rge=a("strong"),SNo=o("bert"),RNo=o(" \u2014 "),SO=a("a"),PNo=o("BertForMultipleChoice"),BNo=o(" (BERT model)"),INo=l(),Kb=a("li"),Pge=a("strong"),NNo=o("big_bird"),qNo=o(" \u2014 "),RO=a("a"),jNo=o("BigBirdForMultipleChoice"),DNo=o(" (BigBird model)"),GNo=l(),Zb=a("li"),Bge=a("strong"),ONo=o("camembert"),VNo=o(" \u2014 "),PO=a("a"),XNo=o("CamembertForMultipleChoice"),zNo=o(" (CamemBERT model)"),WNo=l(),e2=a("li"),Ige=a("strong"),QNo=o("canine"),HNo=o(" \u2014 "),BO=a("a"),UNo=o("CanineForMultipleChoice"),JNo=o(" (CANINE model)"),YNo=l(),o2=a("li"),Nge=a("strong"),KNo=o("convbert"),ZNo=o(" \u2014 "),IO=a("a"),eqo=o("ConvBertForMultipleChoice"),oqo=o(" (ConvBERT model)"),rqo=l(),r2=a("li"),qge=a("strong"),tqo=o("data2vec-text"),aqo=o(" \u2014 "),NO=a("a"),nqo=o("Data2VecTextForMultipleChoice"),sqo=o(" (Data2VecText model)"),lqo=l(),t2=a("li"),jge=a("strong"),iqo=o("deberta-v2"),dqo=o(" \u2014 "),qO=a("a"),cqo=o("DebertaV2ForMultipleChoice"),fqo=o(" (DeBERTa-v2 model)"),mqo=l(),a2=a("li"),Dge=a("strong"),gqo=o("distilbert"),hqo=o(" \u2014 "),jO=a("a"),pqo=o("DistilBertForMultipleChoice"),_qo=o(" (DistilBERT model)"),uqo=l(),n2=a("li"),Gge=a("strong"),bqo=o("electra"),vqo=o(" \u2014 "),DO=a("a"),Fqo=o("ElectraForMultipleChoice"),Tqo=o(" (ELECTRA model)"),Mqo=l(),s2=a("li"),Oge=a("strong"),Eqo=o("flaubert"),Cqo=o(" \u2014 "),GO=a("a"),wqo=o("FlaubertForMultipleChoice"),Aqo=o(" (FlauBERT model)"),Lqo=l(),l2=a("li"),Vge=a("strong"),yqo=o("fnet"),xqo=o(" \u2014 "),OO=a("a"),$qo=o("FNetForMultipleChoice"),kqo=o(" (FNet model)"),Sqo=l(),i2=a("li"),Xge=a("strong"),Rqo=o("funnel"),Pqo=o(" \u2014 "),VO=a("a"),Bqo=o("FunnelForMultipleChoice"),Iqo=o(" (Funnel Transformer model)"),Nqo=l(),d2=a("li"),zge=a("strong"),qqo=o("ibert"),jqo=o(" \u2014 "),XO=a("a"),Dqo=o("IBertForMultipleChoice"),Gqo=o(" (I-BERT model)"),Oqo=l(),c2=a("li"),Wge=a("strong"),Vqo=o("longformer"),Xqo=o(" \u2014 "),zO=a("a"),zqo=o("LongformerForMultipleChoice"),Wqo=o(" (Longformer model)"),Qqo=l(),f2=a("li"),Qge=a("strong"),Hqo=o("megatron-bert"),Uqo=o(" \u2014 "),WO=a("a"),Jqo=o("MegatronBertForMultipleChoice"),Yqo=o(" (Megatron-BERT model)"),Kqo=l(),m2=a("li"),Hge=a("strong"),Zqo=o("mobilebert"),ejo=o(" \u2014 "),QO=a("a"),ojo=o("MobileBertForMultipleChoice"),rjo=o(" (MobileBERT model)"),tjo=l(),g2=a("li"),Uge=a("strong"),ajo=o("mpnet"),njo=o(" \u2014 "),HO=a("a"),sjo=o("MPNetForMultipleChoice"),ljo=o(" (MPNet model)"),ijo=l(),h2=a("li"),Jge=a("strong"),djo=o("nystromformer"),cjo=o(" \u2014 "),UO=a("a"),fjo=o("NystromformerForMultipleChoice"),mjo=o(" (Nystr\xF6mformer model)"),gjo=l(),p2=a("li"),Yge=a("strong"),hjo=o("qdqbert"),pjo=o(" \u2014 "),JO=a("a"),_jo=o("QDQBertForMultipleChoice"),ujo=o(" (QDQBert model)"),bjo=l(),_2=a("li"),Kge=a("strong"),vjo=o("rembert"),Fjo=o(" \u2014 "),YO=a("a"),Tjo=o("RemBertForMultipleChoice"),Mjo=o(" (RemBERT model)"),Ejo=l(),u2=a("li"),Zge=a("strong"),Cjo=o("roberta"),wjo=o(" \u2014 "),KO=a("a"),Ajo=o("RobertaForMultipleChoice"),Ljo=o(" (RoBERTa model)"),yjo=l(),b2=a("li"),ehe=a("strong"),xjo=o("roformer"),$jo=o(" \u2014 "),ZO=a("a"),kjo=o("RoFormerForMultipleChoice"),Sjo=o(" (RoFormer model)"),Rjo=l(),v2=a("li"),ohe=a("strong"),Pjo=o("squeezebert"),Bjo=o(" \u2014 "),eV=a("a"),Ijo=o("SqueezeBertForMultipleChoice"),Njo=o(" (SqueezeBERT model)"),qjo=l(),F2=a("li"),rhe=a("strong"),jjo=o("xlm"),Djo=o(" \u2014 "),oV=a("a"),Gjo=o("XLMForMultipleChoice"),Ojo=o(" (XLM model)"),Vjo=l(),T2=a("li"),the=a("strong"),Xjo=o("xlm-roberta"),zjo=o(" \u2014 "),rV=a("a"),Wjo=o("XLMRobertaForMultipleChoice"),Qjo=o(" (XLM-RoBERTa model)"),Hjo=l(),M2=a("li"),ahe=a("strong"),Ujo=o("xlm-roberta-xl"),Jjo=o(" \u2014 "),tV=a("a"),Yjo=o("XLMRobertaXLForMultipleChoice"),Kjo=o(" (XLM-RoBERTa-XL model)"),Zjo=l(),E2=a("li"),nhe=a("strong"),eDo=o("xlnet"),oDo=o(" \u2014 "),aV=a("a"),rDo=o("XLNetForMultipleChoice"),tDo=o(" (XLNet model)"),aDo=l(),C2=a("li"),she=a("strong"),nDo=o("yoso"),sDo=o(" \u2014 "),nV=a("a"),lDo=o("YosoForMultipleChoice"),iDo=o(" (YOSO model)"),dDo=l(),w2=a("p"),cDo=o("The model is set in evaluation mode by default using "),lhe=a("code"),fDo=o("model.eval()"),mDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),gDo=o("model.train()"),hDo=l(),F(A2.$$.fragment),xje=l(),Hi=a("h2"),L2=a("a"),dhe=a("span"),F(HL.$$.fragment),pDo=l(),che=a("span"),_Do=o("AutoModelForNextSentencePrediction"),$je=l(),Bo=a("div"),F(UL.$$.fragment),uDo=l(),Ui=a("p"),bDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sV=a("a"),vDo=o("from_pretrained()"),FDo=o(" class method or the "),lV=a("a"),TDo=o("from_config()"),MDo=o(` class
method.`),EDo=l(),JL=a("p"),CDo=o("This class cannot be instantiated directly using "),fhe=a("code"),wDo=o("__init__()"),ADo=o(" (throws an error)."),LDo=l(),ct=a("div"),F(YL.$$.fragment),yDo=l(),mhe=a("p"),xDo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Do=l(),Ji=a("p"),kDo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),SDo=o("not"),RDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),PDo=o("from_pretrained()"),BDo=o(" to load the model weights."),IDo=l(),F(y2.$$.fragment),NDo=l(),to=a("div"),F(KL.$$.fragment),qDo=l(),hhe=a("p"),jDo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DDo=l(),Ba=a("p"),GDo=o("The model class to instantiate is selected based on the "),phe=a("code"),ODo=o("model_type"),VDo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),WDo=o("pretrained_model_name_or_path"),QDo=o(":"),HDo=l(),Yr=a("ul"),x2=a("li"),bhe=a("strong"),UDo=o("bert"),JDo=o(" \u2014 "),dV=a("a"),YDo=o("BertForNextSentencePrediction"),KDo=o(" (BERT model)"),ZDo=l(),$2=a("li"),vhe=a("strong"),eGo=o("fnet"),oGo=o(" \u2014 "),cV=a("a"),rGo=o("FNetForNextSentencePrediction"),tGo=o(" (FNet model)"),aGo=l(),k2=a("li"),Fhe=a("strong"),nGo=o("megatron-bert"),sGo=o(" \u2014 "),fV=a("a"),lGo=o("MegatronBertForNextSentencePrediction"),iGo=o(" (Megatron-BERT model)"),dGo=l(),S2=a("li"),The=a("strong"),cGo=o("mobilebert"),fGo=o(" \u2014 "),mV=a("a"),mGo=o("MobileBertForNextSentencePrediction"),gGo=o(" (MobileBERT model)"),hGo=l(),R2=a("li"),Mhe=a("strong"),pGo=o("qdqbert"),_Go=o(" \u2014 "),gV=a("a"),uGo=o("QDQBertForNextSentencePrediction"),bGo=o(" (QDQBert model)"),vGo=l(),P2=a("p"),FGo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),TGo=o("model.eval()"),MGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),EGo=o("model.train()"),CGo=l(),F(B2.$$.fragment),kje=l(),Yi=a("h2"),I2=a("a"),whe=a("span"),F(ZL.$$.fragment),wGo=l(),Ahe=a("span"),AGo=o("AutoModelForTokenClassification"),Sje=l(),Io=a("div"),F(ey.$$.fragment),LGo=l(),Ki=a("p"),yGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hV=a("a"),xGo=o("from_pretrained()"),$Go=o(" class method or the "),pV=a("a"),kGo=o("from_config()"),SGo=o(` class
method.`),RGo=l(),oy=a("p"),PGo=o("This class cannot be instantiated directly using "),Lhe=a("code"),BGo=o("__init__()"),IGo=o(" (throws an error)."),NGo=l(),ft=a("div"),F(ry.$$.fragment),qGo=l(),yhe=a("p"),jGo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DGo=l(),Zi=a("p"),GGo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),OGo=o("not"),VGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),XGo=o("from_pretrained()"),zGo=o(" to load the model weights."),WGo=l(),F(N2.$$.fragment),QGo=l(),ao=a("div"),F(ty.$$.fragment),HGo=l(),$he=a("p"),UGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JGo=l(),Ia=a("p"),YGo=o("The model class to instantiate is selected based on the "),khe=a("code"),KGo=o("model_type"),ZGo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),eOo=o("pretrained_model_name_or_path"),oOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),rOo=o("pretrained_model_name_or_path"),tOo=o(":"),aOo=l(),U=a("ul"),q2=a("li"),Phe=a("strong"),nOo=o("albert"),sOo=o(" \u2014 "),uV=a("a"),lOo=o("AlbertForTokenClassification"),iOo=o(" (ALBERT model)"),dOo=l(),j2=a("li"),Bhe=a("strong"),cOo=o("bert"),fOo=o(" \u2014 "),bV=a("a"),mOo=o("BertForTokenClassification"),gOo=o(" (BERT model)"),hOo=l(),D2=a("li"),Ihe=a("strong"),pOo=o("big_bird"),_Oo=o(" \u2014 "),vV=a("a"),uOo=o("BigBirdForTokenClassification"),bOo=o(" (BigBird model)"),vOo=l(),G2=a("li"),Nhe=a("strong"),FOo=o("camembert"),TOo=o(" \u2014 "),FV=a("a"),MOo=o("CamembertForTokenClassification"),EOo=o(" (CamemBERT model)"),COo=l(),O2=a("li"),qhe=a("strong"),wOo=o("canine"),AOo=o(" \u2014 "),TV=a("a"),LOo=o("CanineForTokenClassification"),yOo=o(" (CANINE model)"),xOo=l(),V2=a("li"),jhe=a("strong"),$Oo=o("convbert"),kOo=o(" \u2014 "),MV=a("a"),SOo=o("ConvBertForTokenClassification"),ROo=o(" (ConvBERT model)"),POo=l(),X2=a("li"),Dhe=a("strong"),BOo=o("data2vec-text"),IOo=o(" \u2014 "),EV=a("a"),NOo=o("Data2VecTextForTokenClassification"),qOo=o(" (Data2VecText model)"),jOo=l(),z2=a("li"),Ghe=a("strong"),DOo=o("deberta"),GOo=o(" \u2014 "),CV=a("a"),OOo=o("DebertaForTokenClassification"),VOo=o(" (DeBERTa model)"),XOo=l(),W2=a("li"),Ohe=a("strong"),zOo=o("deberta-v2"),WOo=o(" \u2014 "),wV=a("a"),QOo=o("DebertaV2ForTokenClassification"),HOo=o(" (DeBERTa-v2 model)"),UOo=l(),Q2=a("li"),Vhe=a("strong"),JOo=o("distilbert"),YOo=o(" \u2014 "),AV=a("a"),KOo=o("DistilBertForTokenClassification"),ZOo=o(" (DistilBERT model)"),eVo=l(),H2=a("li"),Xhe=a("strong"),oVo=o("electra"),rVo=o(" \u2014 "),LV=a("a"),tVo=o("ElectraForTokenClassification"),aVo=o(" (ELECTRA model)"),nVo=l(),U2=a("li"),zhe=a("strong"),sVo=o("flaubert"),lVo=o(" \u2014 "),yV=a("a"),iVo=o("FlaubertForTokenClassification"),dVo=o(" (FlauBERT model)"),cVo=l(),J2=a("li"),Whe=a("strong"),fVo=o("fnet"),mVo=o(" \u2014 "),xV=a("a"),gVo=o("FNetForTokenClassification"),hVo=o(" (FNet model)"),pVo=l(),Y2=a("li"),Qhe=a("strong"),_Vo=o("funnel"),uVo=o(" \u2014 "),$V=a("a"),bVo=o("FunnelForTokenClassification"),vVo=o(" (Funnel Transformer model)"),FVo=l(),K2=a("li"),Hhe=a("strong"),TVo=o("gpt2"),MVo=o(" \u2014 "),kV=a("a"),EVo=o("GPT2ForTokenClassification"),CVo=o(" (OpenAI GPT-2 model)"),wVo=l(),Z2=a("li"),Uhe=a("strong"),AVo=o("ibert"),LVo=o(" \u2014 "),SV=a("a"),yVo=o("IBertForTokenClassification"),xVo=o(" (I-BERT model)"),$Vo=l(),ev=a("li"),Jhe=a("strong"),kVo=o("layoutlm"),SVo=o(" \u2014 "),RV=a("a"),RVo=o("LayoutLMForTokenClassification"),PVo=o(" (LayoutLM model)"),BVo=l(),ov=a("li"),Yhe=a("strong"),IVo=o("layoutlmv2"),NVo=o(" \u2014 "),PV=a("a"),qVo=o("LayoutLMv2ForTokenClassification"),jVo=o(" (LayoutLMv2 model)"),DVo=l(),rv=a("li"),Khe=a("strong"),GVo=o("layoutlmv3"),OVo=o(" \u2014 "),BV=a("a"),VVo=o("LayoutLMv3ForTokenClassification"),XVo=o(" (LayoutLMv3 model)"),zVo=l(),tv=a("li"),Zhe=a("strong"),WVo=o("longformer"),QVo=o(" \u2014 "),IV=a("a"),HVo=o("LongformerForTokenClassification"),UVo=o(" (Longformer model)"),JVo=l(),av=a("li"),epe=a("strong"),YVo=o("megatron-bert"),KVo=o(" \u2014 "),NV=a("a"),ZVo=o("MegatronBertForTokenClassification"),eXo=o(" (Megatron-BERT model)"),oXo=l(),nv=a("li"),ope=a("strong"),rXo=o("mobilebert"),tXo=o(" \u2014 "),qV=a("a"),aXo=o("MobileBertForTokenClassification"),nXo=o(" (MobileBERT model)"),sXo=l(),sv=a("li"),rpe=a("strong"),lXo=o("mpnet"),iXo=o(" \u2014 "),jV=a("a"),dXo=o("MPNetForTokenClassification"),cXo=o(" (MPNet model)"),fXo=l(),lv=a("li"),tpe=a("strong"),mXo=o("nystromformer"),gXo=o(" \u2014 "),DV=a("a"),hXo=o("NystromformerForTokenClassification"),pXo=o(" (Nystr\xF6mformer model)"),_Xo=l(),iv=a("li"),ape=a("strong"),uXo=o("qdqbert"),bXo=o(" \u2014 "),GV=a("a"),vXo=o("QDQBertForTokenClassification"),FXo=o(" (QDQBert model)"),TXo=l(),dv=a("li"),npe=a("strong"),MXo=o("rembert"),EXo=o(" \u2014 "),OV=a("a"),CXo=o("RemBertForTokenClassification"),wXo=o(" (RemBERT model)"),AXo=l(),cv=a("li"),spe=a("strong"),LXo=o("roberta"),yXo=o(" \u2014 "),VV=a("a"),xXo=o("RobertaForTokenClassification"),$Xo=o(" (RoBERTa model)"),kXo=l(),fv=a("li"),lpe=a("strong"),SXo=o("roformer"),RXo=o(" \u2014 "),XV=a("a"),PXo=o("RoFormerForTokenClassification"),BXo=o(" (RoFormer model)"),IXo=l(),mv=a("li"),ipe=a("strong"),NXo=o("squeezebert"),qXo=o(" \u2014 "),zV=a("a"),jXo=o("SqueezeBertForTokenClassification"),DXo=o(" (SqueezeBERT model)"),GXo=l(),gv=a("li"),dpe=a("strong"),OXo=o("xlm"),VXo=o(" \u2014 "),WV=a("a"),XXo=o("XLMForTokenClassification"),zXo=o(" (XLM model)"),WXo=l(),hv=a("li"),cpe=a("strong"),QXo=o("xlm-roberta"),HXo=o(" \u2014 "),QV=a("a"),UXo=o("XLMRobertaForTokenClassification"),JXo=o(" (XLM-RoBERTa model)"),YXo=l(),pv=a("li"),fpe=a("strong"),KXo=o("xlm-roberta-xl"),ZXo=o(" \u2014 "),HV=a("a"),ezo=o("XLMRobertaXLForTokenClassification"),ozo=o(" (XLM-RoBERTa-XL model)"),rzo=l(),_v=a("li"),mpe=a("strong"),tzo=o("xlnet"),azo=o(" \u2014 "),UV=a("a"),nzo=o("XLNetForTokenClassification"),szo=o(" (XLNet model)"),lzo=l(),uv=a("li"),gpe=a("strong"),izo=o("yoso"),dzo=o(" \u2014 "),JV=a("a"),czo=o("YosoForTokenClassification"),fzo=o(" (YOSO model)"),mzo=l(),bv=a("p"),gzo=o("The model is set in evaluation mode by default using "),hpe=a("code"),hzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),_zo=o("model.train()"),uzo=l(),F(vv.$$.fragment),Rje=l(),ed=a("h2"),Fv=a("a"),_pe=a("span"),F(ay.$$.fragment),bzo=l(),upe=a("span"),vzo=o("AutoModelForQuestionAnswering"),Pje=l(),No=a("div"),F(ny.$$.fragment),Fzo=l(),od=a("p"),Tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YV=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" class method or the "),KV=a("a"),Czo=o("from_config()"),wzo=o(` class
method.`),Azo=l(),sy=a("p"),Lzo=o("This class cannot be instantiated directly using "),bpe=a("code"),yzo=o("__init__()"),xzo=o(" (throws an error)."),$zo=l(),mt=a("div"),F(ly.$$.fragment),kzo=l(),vpe=a("p"),Szo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rzo=l(),rd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),Bzo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),Nzo=o("from_pretrained()"),qzo=o(" to load the model weights."),jzo=l(),F(Tv.$$.fragment),Dzo=l(),no=a("div"),F(iy.$$.fragment),Gzo=l(),Tpe=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vzo=l(),Na=a("p"),Xzo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),zzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),V=a("ul"),Mv=a("li"),wpe=a("strong"),Kzo=o("albert"),Zzo=o(" \u2014 "),eX=a("a"),eWo=o("AlbertForQuestionAnswering"),oWo=o(" (ALBERT model)"),rWo=l(),Ev=a("li"),Ape=a("strong"),tWo=o("bart"),aWo=o(" \u2014 "),oX=a("a"),nWo=o("BartForQuestionAnswering"),sWo=o(" (BART model)"),lWo=l(),Cv=a("li"),Lpe=a("strong"),iWo=o("bert"),dWo=o(" \u2014 "),rX=a("a"),cWo=o("BertForQuestionAnswering"),fWo=o(" (BERT model)"),mWo=l(),wv=a("li"),ype=a("strong"),gWo=o("big_bird"),hWo=o(" \u2014 "),tX=a("a"),pWo=o("BigBirdForQuestionAnswering"),_Wo=o(" (BigBird model)"),uWo=l(),Av=a("li"),xpe=a("strong"),bWo=o("bigbird_pegasus"),vWo=o(" \u2014 "),aX=a("a"),FWo=o("BigBirdPegasusForQuestionAnswering"),TWo=o(" (BigBird-Pegasus model)"),MWo=l(),Lv=a("li"),$pe=a("strong"),EWo=o("camembert"),CWo=o(" \u2014 "),nX=a("a"),wWo=o("CamembertForQuestionAnswering"),AWo=o(" (CamemBERT model)"),LWo=l(),yv=a("li"),kpe=a("strong"),yWo=o("canine"),xWo=o(" \u2014 "),sX=a("a"),$Wo=o("CanineForQuestionAnswering"),kWo=o(" (CANINE model)"),SWo=l(),xv=a("li"),Spe=a("strong"),RWo=o("convbert"),PWo=o(" \u2014 "),lX=a("a"),BWo=o("ConvBertForQuestionAnswering"),IWo=o(" (ConvBERT model)"),NWo=l(),$v=a("li"),Rpe=a("strong"),qWo=o("data2vec-text"),jWo=o(" \u2014 "),iX=a("a"),DWo=o("Data2VecTextForQuestionAnswering"),GWo=o(" (Data2VecText model)"),OWo=l(),kv=a("li"),Ppe=a("strong"),VWo=o("deberta"),XWo=o(" \u2014 "),dX=a("a"),zWo=o("DebertaForQuestionAnswering"),WWo=o(" (DeBERTa model)"),QWo=l(),Sv=a("li"),Bpe=a("strong"),HWo=o("deberta-v2"),UWo=o(" \u2014 "),cX=a("a"),JWo=o("DebertaV2ForQuestionAnswering"),YWo=o(" (DeBERTa-v2 model)"),KWo=l(),Rv=a("li"),Ipe=a("strong"),ZWo=o("distilbert"),eQo=o(" \u2014 "),fX=a("a"),oQo=o("DistilBertForQuestionAnswering"),rQo=o(" (DistilBERT model)"),tQo=l(),Pv=a("li"),Npe=a("strong"),aQo=o("electra"),nQo=o(" \u2014 "),mX=a("a"),sQo=o("ElectraForQuestionAnswering"),lQo=o(" (ELECTRA model)"),iQo=l(),Bv=a("li"),qpe=a("strong"),dQo=o("flaubert"),cQo=o(" \u2014 "),gX=a("a"),fQo=o("FlaubertForQuestionAnsweringSimple"),mQo=o(" (FlauBERT model)"),gQo=l(),Iv=a("li"),jpe=a("strong"),hQo=o("fnet"),pQo=o(" \u2014 "),hX=a("a"),_Qo=o("FNetForQuestionAnswering"),uQo=o(" (FNet model)"),bQo=l(),Nv=a("li"),Dpe=a("strong"),vQo=o("funnel"),FQo=o(" \u2014 "),pX=a("a"),TQo=o("FunnelForQuestionAnswering"),MQo=o(" (Funnel Transformer model)"),EQo=l(),qv=a("li"),Gpe=a("strong"),CQo=o("gptj"),wQo=o(" \u2014 "),_X=a("a"),AQo=o("GPTJForQuestionAnswering"),LQo=o(" (GPT-J model)"),yQo=l(),jv=a("li"),Ope=a("strong"),xQo=o("ibert"),$Qo=o(" \u2014 "),uX=a("a"),kQo=o("IBertForQuestionAnswering"),SQo=o(" (I-BERT model)"),RQo=l(),Dv=a("li"),Vpe=a("strong"),PQo=o("layoutlmv2"),BQo=o(" \u2014 "),bX=a("a"),IQo=o("LayoutLMv2ForQuestionAnswering"),NQo=o(" (LayoutLMv2 model)"),qQo=l(),Gv=a("li"),Xpe=a("strong"),jQo=o("layoutlmv3"),DQo=o(" \u2014 "),vX=a("a"),GQo=o("LayoutLMv3ForQuestionAnswering"),OQo=o(" (LayoutLMv3 model)"),VQo=l(),Ov=a("li"),zpe=a("strong"),XQo=o("led"),zQo=o(" \u2014 "),FX=a("a"),WQo=o("LEDForQuestionAnswering"),QQo=o(" (LED model)"),HQo=l(),Vv=a("li"),Wpe=a("strong"),UQo=o("longformer"),JQo=o(" \u2014 "),TX=a("a"),YQo=o("LongformerForQuestionAnswering"),KQo=o(" (Longformer model)"),ZQo=l(),Xv=a("li"),Qpe=a("strong"),eHo=o("lxmert"),oHo=o(" \u2014 "),MX=a("a"),rHo=o("LxmertForQuestionAnswering"),tHo=o(" (LXMERT model)"),aHo=l(),zv=a("li"),Hpe=a("strong"),nHo=o("mbart"),sHo=o(" \u2014 "),EX=a("a"),lHo=o("MBartForQuestionAnswering"),iHo=o(" (mBART model)"),dHo=l(),Wv=a("li"),Upe=a("strong"),cHo=o("megatron-bert"),fHo=o(" \u2014 "),CX=a("a"),mHo=o("MegatronBertForQuestionAnswering"),gHo=o(" (Megatron-BERT model)"),hHo=l(),Qv=a("li"),Jpe=a("strong"),pHo=o("mobilebert"),_Ho=o(" \u2014 "),wX=a("a"),uHo=o("MobileBertForQuestionAnswering"),bHo=o(" (MobileBERT model)"),vHo=l(),Hv=a("li"),Ype=a("strong"),FHo=o("mpnet"),THo=o(" \u2014 "),AX=a("a"),MHo=o("MPNetForQuestionAnswering"),EHo=o(" (MPNet model)"),CHo=l(),Uv=a("li"),Kpe=a("strong"),wHo=o("nystromformer"),AHo=o(" \u2014 "),LX=a("a"),LHo=o("NystromformerForQuestionAnswering"),yHo=o(" (Nystr\xF6mformer model)"),xHo=l(),Jv=a("li"),Zpe=a("strong"),$Ho=o("qdqbert"),kHo=o(" \u2014 "),yX=a("a"),SHo=o("QDQBertForQuestionAnswering"),RHo=o(" (QDQBert model)"),PHo=l(),Yv=a("li"),e_e=a("strong"),BHo=o("reformer"),IHo=o(" \u2014 "),xX=a("a"),NHo=o("ReformerForQuestionAnswering"),qHo=o(" (Reformer model)"),jHo=l(),Kv=a("li"),o_e=a("strong"),DHo=o("rembert"),GHo=o(" \u2014 "),$X=a("a"),OHo=o("RemBertForQuestionAnswering"),VHo=o(" (RemBERT model)"),XHo=l(),Zv=a("li"),r_e=a("strong"),zHo=o("roberta"),WHo=o(" \u2014 "),kX=a("a"),QHo=o("RobertaForQuestionAnswering"),HHo=o(" (RoBERTa model)"),UHo=l(),eF=a("li"),t_e=a("strong"),JHo=o("roformer"),YHo=o(" \u2014 "),SX=a("a"),KHo=o("RoFormerForQuestionAnswering"),ZHo=o(" (RoFormer model)"),eUo=l(),oF=a("li"),a_e=a("strong"),oUo=o("splinter"),rUo=o(" \u2014 "),RX=a("a"),tUo=o("SplinterForQuestionAnswering"),aUo=o(" (Splinter model)"),nUo=l(),rF=a("li"),n_e=a("strong"),sUo=o("squeezebert"),lUo=o(" \u2014 "),PX=a("a"),iUo=o("SqueezeBertForQuestionAnswering"),dUo=o(" (SqueezeBERT model)"),cUo=l(),tF=a("li"),s_e=a("strong"),fUo=o("xlm"),mUo=o(" \u2014 "),BX=a("a"),gUo=o("XLMForQuestionAnsweringSimple"),hUo=o(" (XLM model)"),pUo=l(),aF=a("li"),l_e=a("strong"),_Uo=o("xlm-roberta"),uUo=o(" \u2014 "),IX=a("a"),bUo=o("XLMRobertaForQuestionAnswering"),vUo=o(" (XLM-RoBERTa model)"),FUo=l(),nF=a("li"),i_e=a("strong"),TUo=o("xlm-roberta-xl"),MUo=o(" \u2014 "),NX=a("a"),EUo=o("XLMRobertaXLForQuestionAnswering"),CUo=o(" (XLM-RoBERTa-XL model)"),wUo=l(),sF=a("li"),d_e=a("strong"),AUo=o("xlnet"),LUo=o(" \u2014 "),qX=a("a"),yUo=o("XLNetForQuestionAnsweringSimple"),xUo=o(" (XLNet model)"),$Uo=l(),lF=a("li"),c_e=a("strong"),kUo=o("yoso"),SUo=o(" \u2014 "),jX=a("a"),RUo=o("YosoForQuestionAnswering"),PUo=o(" (YOSO model)"),BUo=l(),iF=a("p"),IUo=o("The model is set in evaluation mode by default using "),f_e=a("code"),NUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),jUo=o("model.train()"),DUo=l(),F(dF.$$.fragment),Bje=l(),td=a("h2"),cF=a("a"),g_e=a("span"),F(dy.$$.fragment),GUo=l(),h_e=a("span"),OUo=o("AutoModelForTableQuestionAnswering"),Ije=l(),qo=a("div"),F(cy.$$.fragment),VUo=l(),ad=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DX=a("a"),zUo=o("from_pretrained()"),WUo=o(" class method or the "),GX=a("a"),QUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),fy=a("p"),JUo=o("This class cannot be instantiated directly using "),p_e=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),gt=a("div"),F(my.$$.fragment),eJo=l(),__e=a("p"),oJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rJo=l(),nd=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),F(fF.$$.fragment),dJo=l(),so=a("div"),F(gy.$$.fragment),cJo=l(),b_e=a("p"),fJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mJo=l(),qa=a("p"),gJo=o("The model class to instantiate is selected based on the "),v_e=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),_Jo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),FJo=l(),M_e=a("ul"),mF=a("li"),E_e=a("strong"),TJo=o("tapas"),MJo=o(" \u2014 "),VX=a("a"),EJo=o("TapasForQuestionAnswering"),CJo=o(" (TAPAS model)"),wJo=l(),gF=a("p"),AJo=o("The model is set in evaluation mode by default using "),C_e=a("code"),LJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),xJo=o("model.train()"),$Jo=l(),F(hF.$$.fragment),Nje=l(),sd=a("h2"),pF=a("a"),A_e=a("span"),F(hy.$$.fragment),kJo=l(),L_e=a("span"),SJo=o("AutoModelForImageClassification"),qje=l(),jo=a("div"),F(py.$$.fragment),RJo=l(),ld=a("p"),PJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XX=a("a"),BJo=o("from_pretrained()"),IJo=o(" class method or the "),zX=a("a"),NJo=o("from_config()"),qJo=o(` class
method.`),jJo=l(),_y=a("p"),DJo=o("This class cannot be instantiated directly using "),y_e=a("code"),GJo=o("__init__()"),OJo=o(" (throws an error)."),VJo=l(),ht=a("div"),F(uy.$$.fragment),XJo=l(),x_e=a("p"),zJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WJo=l(),id=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),HJo=o("not"),UJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),JJo=o("from_pretrained()"),YJo=o(" to load the model weights."),KJo=l(),F(_F.$$.fragment),ZJo=l(),lo=a("div"),F(by.$$.fragment),eYo=l(),k_e=a("p"),oYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rYo=l(),ja=a("p"),tYo=o("The model class to instantiate is selected based on the "),S_e=a("code"),aYo=o("model_type"),nYo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(":"),cYo=l(),ve=a("ul"),uF=a("li"),B_e=a("strong"),fYo=o("beit"),mYo=o(" \u2014 "),QX=a("a"),gYo=o("BeitForImageClassification"),hYo=o(" (BEiT model)"),pYo=l(),bF=a("li"),I_e=a("strong"),_Yo=o("convnext"),uYo=o(" \u2014 "),HX=a("a"),bYo=o("ConvNextForImageClassification"),vYo=o(" (ConvNeXT model)"),FYo=l(),vF=a("li"),N_e=a("strong"),TYo=o("cvt"),MYo=o(" \u2014 "),UX=a("a"),EYo=o("CvtForImageClassification"),CYo=o(" (CvT model)"),wYo=l(),FF=a("li"),q_e=a("strong"),AYo=o("data2vec-vision"),LYo=o(" \u2014 "),JX=a("a"),yYo=o("Data2VecVisionForImageClassification"),xYo=o(" (Data2VecVision model)"),$Yo=l(),Is=a("li"),j_e=a("strong"),kYo=o("deit"),SYo=o(" \u2014 "),YX=a("a"),RYo=o("DeiTForImageClassification"),PYo=o(" or "),KX=a("a"),BYo=o("DeiTForImageClassificationWithTeacher"),IYo=o(" (DeiT model)"),NYo=l(),TF=a("li"),D_e=a("strong"),qYo=o("imagegpt"),jYo=o(" \u2014 "),ZX=a("a"),DYo=o("ImageGPTForImageClassification"),GYo=o(" (ImageGPT model)"),OYo=l(),Ns=a("li"),G_e=a("strong"),VYo=o("levit"),XYo=o(" \u2014 "),ez=a("a"),zYo=o("LevitForImageClassification"),WYo=o(" or "),oz=a("a"),QYo=o("LevitForImageClassificationWithTeacher"),HYo=o(" (LeViT model)"),UYo=l(),pt=a("li"),O_e=a("strong"),JYo=o("perceiver"),YYo=o(" \u2014 "),rz=a("a"),KYo=o("PerceiverForImageClassificationLearned"),ZYo=o(" or "),tz=a("a"),eKo=o("PerceiverForImageClassificationFourier"),oKo=o(" or "),az=a("a"),rKo=o("PerceiverForImageClassificationConvProcessing"),tKo=o(" (Perceiver model)"),aKo=l(),MF=a("li"),V_e=a("strong"),nKo=o("poolformer"),sKo=o(" \u2014 "),nz=a("a"),lKo=o("PoolFormerForImageClassification"),iKo=o(" (PoolFormer model)"),dKo=l(),EF=a("li"),X_e=a("strong"),cKo=o("regnet"),fKo=o(" \u2014 "),sz=a("a"),mKo=o("RegNetForImageClassification"),gKo=o(" (RegNet model)"),hKo=l(),CF=a("li"),z_e=a("strong"),pKo=o("resnet"),_Ko=o(" \u2014 "),lz=a("a"),uKo=o("ResNetForImageClassification"),bKo=o(" (ResNet model)"),vKo=l(),wF=a("li"),W_e=a("strong"),FKo=o("segformer"),TKo=o(" \u2014 "),iz=a("a"),MKo=o("SegformerForImageClassification"),EKo=o(" (SegFormer model)"),CKo=l(),AF=a("li"),Q_e=a("strong"),wKo=o("swin"),AKo=o(" \u2014 "),dz=a("a"),LKo=o("SwinForImageClassification"),yKo=o(" (Swin Transformer model)"),xKo=l(),LF=a("li"),H_e=a("strong"),$Ko=o("van"),kKo=o(" \u2014 "),cz=a("a"),SKo=o("VanForImageClassification"),RKo=o(" (VAN model)"),PKo=l(),yF=a("li"),U_e=a("strong"),BKo=o("vit"),IKo=o(" \u2014 "),fz=a("a"),NKo=o("ViTForImageClassification"),qKo=o(" (ViT model)"),jKo=l(),xF=a("p"),DKo=o("The model is set in evaluation mode by default using "),J_e=a("code"),GKo=o("model.eval()"),OKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),VKo=o("model.train()"),XKo=l(),F($F.$$.fragment),jje=l(),dd=a("h2"),kF=a("a"),K_e=a("span"),F(vy.$$.fragment),zKo=l(),Z_e=a("span"),WKo=o("AutoModelForVision2Seq"),Dje=l(),Do=a("div"),F(Fy.$$.fragment),QKo=l(),cd=a("p"),HKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mz=a("a"),UKo=o("from_pretrained()"),JKo=o(" class method or the "),gz=a("a"),YKo=o("from_config()"),KKo=o(` class
method.`),ZKo=l(),Ty=a("p"),eZo=o("This class cannot be instantiated directly using "),eue=a("code"),oZo=o("__init__()"),rZo=o(" (throws an error)."),tZo=l(),_t=a("div"),F(My.$$.fragment),aZo=l(),oue=a("p"),nZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sZo=l(),fd=a("p"),lZo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),iZo=o("not"),dZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),cZo=o("from_pretrained()"),fZo=o(" to load the model weights."),mZo=l(),F(SF.$$.fragment),gZo=l(),io=a("div"),F(Ey.$$.fragment),hZo=l(),tue=a("p"),pZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Zo=l(),Da=a("p"),uZo=o("The model class to instantiate is selected based on the "),aue=a("code"),bZo=o("model_type"),vZo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),FZo=o("pretrained_model_name_or_path"),TZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),MZo=o("pretrained_model_name_or_path"),EZo=o(":"),CZo=l(),lue=a("ul"),RF=a("li"),iue=a("strong"),wZo=o("vision-encoder-decoder"),AZo=o(" \u2014 "),pz=a("a"),LZo=o("VisionEncoderDecoderModel"),yZo=o(" (Vision Encoder decoder model)"),xZo=l(),PF=a("p"),$Zo=o("The model is set in evaluation mode by default using "),due=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),RZo=o("model.train()"),PZo=l(),F(BF.$$.fragment),Gje=l(),md=a("h2"),IF=a("a"),fue=a("span"),F(Cy.$$.fragment),BZo=l(),mue=a("span"),IZo=o("AutoModelForAudioClassification"),Oje=l(),Go=a("div"),F(wy.$$.fragment),NZo=l(),gd=a("p"),qZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_z=a("a"),jZo=o("from_pretrained()"),DZo=o(" class method or the "),uz=a("a"),GZo=o("from_config()"),OZo=o(` class
method.`),VZo=l(),Ay=a("p"),XZo=o("This class cannot be instantiated directly using "),gue=a("code"),zZo=o("__init__()"),WZo=o(" (throws an error)."),QZo=l(),ut=a("div"),F(Ly.$$.fragment),HZo=l(),hue=a("p"),UZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JZo=l(),hd=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),eer=o("from_pretrained()"),oer=o(" to load the model weights."),rer=l(),F(NF.$$.fragment),ter=l(),co=a("div"),F(yy.$$.fragment),aer=l(),_ue=a("p"),ner=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ser=l(),Ga=a("p"),ler=o("The model class to instantiate is selected based on the "),uue=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),Se=a("ul"),qF=a("li"),Fue=a("strong"),per=o("data2vec-audio"),_er=o(" \u2014 "),vz=a("a"),uer=o("Data2VecAudioForSequenceClassification"),ber=o(" (Data2VecAudio model)"),ver=l(),jF=a("li"),Tue=a("strong"),Fer=o("hubert"),Ter=o(" \u2014 "),Fz=a("a"),Mer=o("HubertForSequenceClassification"),Eer=o(" (Hubert model)"),Cer=l(),DF=a("li"),Mue=a("strong"),wer=o("sew"),Aer=o(" \u2014 "),Tz=a("a"),Ler=o("SEWForSequenceClassification"),yer=o(" (SEW model)"),xer=l(),GF=a("li"),Eue=a("strong"),$er=o("sew-d"),ker=o(" \u2014 "),Mz=a("a"),Ser=o("SEWDForSequenceClassification"),Rer=o(" (SEW-D model)"),Per=l(),OF=a("li"),Cue=a("strong"),Ber=o("unispeech"),Ier=o(" \u2014 "),Ez=a("a"),Ner=o("UniSpeechForSequenceClassification"),qer=o(" (UniSpeech model)"),jer=l(),VF=a("li"),wue=a("strong"),Der=o("unispeech-sat"),Ger=o(" \u2014 "),Cz=a("a"),Oer=o("UniSpeechSatForSequenceClassification"),Ver=o(" (UniSpeechSat model)"),Xer=l(),XF=a("li"),Aue=a("strong"),zer=o("wav2vec2"),Wer=o(" \u2014 "),wz=a("a"),Qer=o("Wav2Vec2ForSequenceClassification"),Her=o(" (Wav2Vec2 model)"),Uer=l(),zF=a("li"),Lue=a("strong"),Jer=o("wav2vec2-conformer"),Yer=o(" \u2014 "),Az=a("a"),Ker=o("Wav2Vec2ConformerForSequenceClassification"),Zer=o(" (Wav2Vec2-Conformer model)"),eor=l(),WF=a("li"),yue=a("strong"),oor=o("wavlm"),ror=o(" \u2014 "),Lz=a("a"),tor=o("WavLMForSequenceClassification"),aor=o(" (WavLM model)"),nor=l(),QF=a("p"),sor=o("The model is set in evaluation mode by default using "),xue=a("code"),lor=o("model.eval()"),ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),dor=o("model.train()"),cor=l(),F(HF.$$.fragment),Vje=l(),pd=a("h2"),UF=a("a"),kue=a("span"),F(xy.$$.fragment),mor=l(),Sue=a("span"),gor=o("AutoModelForAudioFrameClassification"),Xje=l(),Oo=a("div"),F($y.$$.fragment),hor=l(),_d=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yz=a("a"),_or=o("from_pretrained()"),uor=o(" class method or the "),xz=a("a"),bor=o("from_config()"),vor=o(` class
method.`),For=l(),ky=a("p"),Tor=o("This class cannot be instantiated directly using "),Rue=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),bt=a("div"),F(Sy.$$.fragment),wor=l(),Pue=a("p"),Aor=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lor=l(),ud=a("p"),yor=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),F(JF.$$.fragment),Por=l(),fo=a("div"),F(Ry.$$.fragment),Bor=l(),Iue=a("p"),Ior=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nor=l(),Oa=a("p"),qor=o("The model class to instantiate is selected based on the "),Nue=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),Kr=a("ul"),YF=a("li"),Due=a("strong"),Wor=o("data2vec-audio"),Qor=o(" \u2014 "),kz=a("a"),Hor=o("Data2VecAudioForAudioFrameClassification"),Uor=o(" (Data2VecAudio model)"),Jor=l(),KF=a("li"),Gue=a("strong"),Yor=o("unispeech-sat"),Kor=o(" \u2014 "),Sz=a("a"),Zor=o("UniSpeechSatForAudioFrameClassification"),err=o(" (UniSpeechSat model)"),orr=l(),ZF=a("li"),Oue=a("strong"),rrr=o("wav2vec2"),trr=o(" \u2014 "),Rz=a("a"),arr=o("Wav2Vec2ForAudioFrameClassification"),nrr=o(" (Wav2Vec2 model)"),srr=l(),eT=a("li"),Vue=a("strong"),lrr=o("wav2vec2-conformer"),irr=o(" \u2014 "),Pz=a("a"),drr=o("Wav2Vec2ConformerForAudioFrameClassification"),crr=o(" (Wav2Vec2-Conformer model)"),frr=l(),oT=a("li"),Xue=a("strong"),mrr=o("wavlm"),grr=o(" \u2014 "),Bz=a("a"),hrr=o("WavLMForAudioFrameClassification"),prr=o(" (WavLM model)"),_rr=l(),rT=a("p"),urr=o("The model is set in evaluation mode by default using "),zue=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),Frr=o("model.train()"),Trr=l(),F(tT.$$.fragment),zje=l(),bd=a("h2"),aT=a("a"),Que=a("span"),F(Py.$$.fragment),Mrr=l(),Hue=a("span"),Err=o("AutoModelForCTC"),Wje=l(),Vo=a("div"),F(By.$$.fragment),Crr=l(),vd=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Iz=a("a"),Arr=o("from_pretrained()"),Lrr=o(" class method or the "),Nz=a("a"),yrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),Iy=a("p"),krr=o("This class cannot be instantiated directly using "),Uue=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Prr=l(),vt=a("div"),F(Ny.$$.fragment),Brr=l(),Jue=a("p"),Irr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Nrr=l(),Fd=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(nT.$$.fragment),Xrr=l(),mo=a("div"),F(qy.$$.fragment),zrr=l(),Kue=a("p"),Wrr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Qrr=l(),Va=a("p"),Hrr=o("The model class to instantiate is selected based on the "),Zue=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),Re=a("ul"),sT=a("li"),r1e=a("strong"),rtr=o("data2vec-audio"),ttr=o(" \u2014 "),jz=a("a"),atr=o("Data2VecAudioForCTC"),ntr=o(" (Data2VecAudio model)"),str=l(),lT=a("li"),t1e=a("strong"),ltr=o("hubert"),itr=o(" \u2014 "),Dz=a("a"),dtr=o("HubertForCTC"),ctr=o(" (Hubert model)"),ftr=l(),iT=a("li"),a1e=a("strong"),mtr=o("sew"),gtr=o(" \u2014 "),Gz=a("a"),htr=o("SEWForCTC"),ptr=o(" (SEW model)"),_tr=l(),dT=a("li"),n1e=a("strong"),utr=o("sew-d"),btr=o(" \u2014 "),Oz=a("a"),vtr=o("SEWDForCTC"),Ftr=o(" (SEW-D model)"),Ttr=l(),cT=a("li"),s1e=a("strong"),Mtr=o("unispeech"),Etr=o(" \u2014 "),Vz=a("a"),Ctr=o("UniSpeechForCTC"),wtr=o(" (UniSpeech model)"),Atr=l(),fT=a("li"),l1e=a("strong"),Ltr=o("unispeech-sat"),ytr=o(" \u2014 "),Xz=a("a"),xtr=o("UniSpeechSatForCTC"),$tr=o(" (UniSpeechSat model)"),ktr=l(),mT=a("li"),i1e=a("strong"),Str=o("wav2vec2"),Rtr=o(" \u2014 "),zz=a("a"),Ptr=o("Wav2Vec2ForCTC"),Btr=o(" (Wav2Vec2 model)"),Itr=l(),gT=a("li"),d1e=a("strong"),Ntr=o("wav2vec2-conformer"),qtr=o(" \u2014 "),Wz=a("a"),jtr=o("Wav2Vec2ConformerForCTC"),Dtr=o(" (Wav2Vec2-Conformer model)"),Gtr=l(),hT=a("li"),c1e=a("strong"),Otr=o("wavlm"),Vtr=o(" \u2014 "),Qz=a("a"),Xtr=o("WavLMForCTC"),ztr=o(" (WavLM model)"),Wtr=l(),pT=a("p"),Qtr=o("The model is set in evaluation mode by default using "),f1e=a("code"),Htr=o("model.eval()"),Utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=a("code"),Jtr=o("model.train()"),Ytr=l(),F(_T.$$.fragment),Qje=l(),Td=a("h2"),uT=a("a"),g1e=a("span"),F(jy.$$.fragment),Ktr=l(),h1e=a("span"),Ztr=o("AutoModelForSpeechSeq2Seq"),Hje=l(),Xo=a("div"),F(Dy.$$.fragment),ear=l(),Md=a("p"),oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hz=a("a"),rar=o("from_pretrained()"),tar=o(" class method or the "),Uz=a("a"),aar=o("from_config()"),nar=o(` class
method.`),sar=l(),Gy=a("p"),lar=o("This class cannot be instantiated directly using "),p1e=a("code"),iar=o("__init__()"),dar=o(" (throws an error)."),car=l(),Ft=a("div"),F(Oy.$$.fragment),far=l(),_1e=a("p"),mar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gar=l(),Ed=a("p"),har=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),par=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),uar=o("from_pretrained()"),bar=o(" to load the model weights."),Far=l(),F(bT.$$.fragment),Tar=l(),go=a("div"),F(Vy.$$.fragment),Mar=l(),b1e=a("p"),Ear=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Car=l(),Xa=a("p"),war=o("The model class to instantiate is selected based on the "),v1e=a("code"),Aar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),yar=o("pretrained_model_name_or_path"),xar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),$ar=o("pretrained_model_name_or_path"),kar=o(":"),Sar=l(),Xy=a("ul"),vT=a("li"),M1e=a("strong"),Rar=o("speech-encoder-decoder"),Par=o(" \u2014 "),Yz=a("a"),Bar=o("SpeechEncoderDecoderModel"),Iar=o(" (Speech Encoder decoder model)"),Nar=l(),FT=a("li"),E1e=a("strong"),qar=o("speech_to_text"),jar=o(" \u2014 "),Kz=a("a"),Dar=o("Speech2TextForConditionalGeneration"),Gar=o(" (Speech2Text model)"),Oar=l(),TT=a("p"),Var=o("The model is set in evaluation mode by default using "),C1e=a("code"),Xar=o("model.eval()"),zar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),War=o("model.train()"),Qar=l(),F(MT.$$.fragment),Uje=l(),Cd=a("h2"),ET=a("a"),A1e=a("span"),F(zy.$$.fragment),Har=l(),L1e=a("span"),Uar=o("AutoModelForAudioXVector"),Jje=l(),zo=a("div"),F(Wy.$$.fragment),Jar=l(),wd=a("p"),Yar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Zz=a("a"),Kar=o("from_pretrained()"),Zar=o(" class method or the "),eW=a("a"),enr=o("from_config()"),onr=o(` class
method.`),rnr=l(),Qy=a("p"),tnr=o("This class cannot be instantiated directly using "),y1e=a("code"),anr=o("__init__()"),nnr=o(" (throws an error)."),snr=l(),Tt=a("div"),F(Hy.$$.fragment),lnr=l(),x1e=a("p"),inr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dnr=l(),Ad=a("p"),cnr=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),fnr=o("not"),mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),gnr=o("from_pretrained()"),hnr=o(" to load the model weights."),pnr=l(),F(CT.$$.fragment),_nr=l(),ho=a("div"),F(Uy.$$.fragment),unr=l(),k1e=a("p"),bnr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vnr=l(),za=a("p"),Fnr=o("The model class to instantiate is selected based on the "),S1e=a("code"),Tnr=o("model_type"),Mnr=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),Enr=o("pretrained_model_name_or_path"),Cnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(":"),Lnr=l(),Zr=a("ul"),wT=a("li"),B1e=a("strong"),ynr=o("data2vec-audio"),xnr=o(" \u2014 "),rW=a("a"),$nr=o("Data2VecAudioForXVector"),knr=o(" (Data2VecAudio model)"),Snr=l(),AT=a("li"),I1e=a("strong"),Rnr=o("unispeech-sat"),Pnr=o(" \u2014 "),tW=a("a"),Bnr=o("UniSpeechSatForXVector"),Inr=o(" (UniSpeechSat model)"),Nnr=l(),LT=a("li"),N1e=a("strong"),qnr=o("wav2vec2"),jnr=o(" \u2014 "),aW=a("a"),Dnr=o("Wav2Vec2ForXVector"),Gnr=o(" (Wav2Vec2 model)"),Onr=l(),yT=a("li"),q1e=a("strong"),Vnr=o("wav2vec2-conformer"),Xnr=o(" \u2014 "),nW=a("a"),znr=o("Wav2Vec2ConformerForXVector"),Wnr=o(" (Wav2Vec2-Conformer model)"),Qnr=l(),xT=a("li"),j1e=a("strong"),Hnr=o("wavlm"),Unr=o(" \u2014 "),sW=a("a"),Jnr=o("WavLMForXVector"),Ynr=o(" (WavLM model)"),Knr=l(),$T=a("p"),Znr=o("The model is set in evaluation mode by default using "),D1e=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),rsr=o("model.train()"),tsr=l(),F(kT.$$.fragment),Yje=l(),Ld=a("h2"),ST=a("a"),O1e=a("span"),F(Jy.$$.fragment),asr=l(),V1e=a("span"),nsr=o("AutoModelForMaskedImageModeling"),Kje=l(),Wo=a("div"),F(Yy.$$.fragment),ssr=l(),yd=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lW=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),iW=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),Ky=a("p"),gsr=o("This class cannot be instantiated directly using "),X1e=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),Mt=a("div"),F(Zy.$$.fragment),usr=l(),z1e=a("p"),bsr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vsr=l(),xd=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(RT.$$.fragment),Asr=l(),po=a("div"),F(e8.$$.fragment),Lsr=l(),Q1e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xsr=l(),Wa=a("p"),$sr=o("The model class to instantiate is selected based on the "),H1e=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(":"),Nsr=l(),$d=a("ul"),PT=a("li"),Y1e=a("strong"),qsr=o("deit"),jsr=o(" \u2014 "),cW=a("a"),Dsr=o("DeiTForMaskedImageModeling"),Gsr=o(" (DeiT model)"),Osr=l(),BT=a("li"),K1e=a("strong"),Vsr=o("swin"),Xsr=o(" \u2014 "),fW=a("a"),zsr=o("SwinForMaskedImageModeling"),Wsr=o(" (Swin Transformer model)"),Qsr=l(),IT=a("li"),Z1e=a("strong"),Hsr=o("vit"),Usr=o(" \u2014 "),mW=a("a"),Jsr=o("ViTForMaskedImageModeling"),Ysr=o(" (ViT model)"),Ksr=l(),NT=a("p"),Zsr=o("The model is set in evaluation mode by default using "),e3e=a("code"),elr=o("model.eval()"),olr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=a("code"),rlr=o("model.train()"),tlr=l(),F(qT.$$.fragment),Zje=l(),kd=a("h2"),jT=a("a"),r3e=a("span"),F(o8.$$.fragment),alr=l(),t3e=a("span"),nlr=o("AutoModelForObjectDetection"),eDe=l(),Qo=a("div"),F(r8.$$.fragment),slr=l(),Sd=a("p"),llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gW=a("a"),ilr=o("from_pretrained()"),dlr=o(" class method or the "),hW=a("a"),clr=o("from_config()"),flr=o(` class
method.`),mlr=l(),t8=a("p"),glr=o("This class cannot be instantiated directly using "),a3e=a("code"),hlr=o("__init__()"),plr=o(" (throws an error)."),_lr=l(),Et=a("div"),F(a8.$$.fragment),ulr=l(),n3e=a("p"),blr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vlr=l(),Rd=a("p"),Flr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),Tlr=o("not"),Mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Elr=o("from_pretrained()"),Clr=o(" to load the model weights."),wlr=l(),F(DT.$$.fragment),Alr=l(),_o=a("div"),F(n8.$$.fragment),Llr=l(),l3e=a("p"),ylr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),xlr=l(),Qa=a("p"),$lr=o("The model class to instantiate is selected based on the "),i3e=a("code"),klr=o("model_type"),Slr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),Blr=o("pretrained_model_name_or_path"),Ilr=o(":"),Nlr=l(),s8=a("ul"),GT=a("li"),f3e=a("strong"),qlr=o("detr"),jlr=o(" \u2014 "),_W=a("a"),Dlr=o("DetrForObjectDetection"),Glr=o(" (DETR model)"),Olr=l(),OT=a("li"),m3e=a("strong"),Vlr=o("yolos"),Xlr=o(" \u2014 "),uW=a("a"),zlr=o("YolosForObjectDetection"),Wlr=o(" (YOLOS model)"),Qlr=l(),VT=a("p"),Hlr=o("The model is set in evaluation mode by default using "),g3e=a("code"),Ulr=o("model.eval()"),Jlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h3e=a("code"),Ylr=o("model.train()"),Klr=l(),F(XT.$$.fragment),oDe=l(),Pd=a("h2"),zT=a("a"),p3e=a("span"),F(l8.$$.fragment),Zlr=l(),_3e=a("span"),eir=o("AutoModelForImageSegmentation"),rDe=l(),Ho=a("div"),F(i8.$$.fragment),oir=l(),Bd=a("p"),rir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bW=a("a"),tir=o("from_pretrained()"),air=o(" class method or the "),vW=a("a"),nir=o("from_config()"),sir=o(` class
method.`),lir=l(),d8=a("p"),iir=o("This class cannot be instantiated directly using "),u3e=a("code"),dir=o("__init__()"),cir=o(" (throws an error)."),fir=l(),Ct=a("div"),F(c8.$$.fragment),mir=l(),b3e=a("p"),gir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hir=l(),Id=a("p"),pir=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),_ir=o("not"),uir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),bir=o("from_pretrained()"),vir=o(" to load the model weights."),Fir=l(),F(WT.$$.fragment),Tir=l(),uo=a("div"),F(f8.$$.fragment),Mir=l(),F3e=a("p"),Eir=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Cir=l(),Ha=a("p"),wir=o("The model class to instantiate is selected based on the "),T3e=a("code"),Air=o("model_type"),Lir=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),yir=o("pretrained_model_name_or_path"),xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(":"),Sir=l(),C3e=a("ul"),QT=a("li"),w3e=a("strong"),Rir=o("detr"),Pir=o(" \u2014 "),TW=a("a"),Bir=o("DetrForSegmentation"),Iir=o(" (DETR model)"),Nir=l(),HT=a("p"),qir=o("The model is set in evaluation mode by default using "),A3e=a("code"),jir=o("model.eval()"),Dir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L3e=a("code"),Gir=o("model.train()"),Oir=l(),F(UT.$$.fragment),tDe=l(),Nd=a("h2"),JT=a("a"),y3e=a("span"),F(m8.$$.fragment),Vir=l(),x3e=a("span"),Xir=o("AutoModelForSemanticSegmentation"),aDe=l(),Uo=a("div"),F(g8.$$.fragment),zir=l(),qd=a("p"),Wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),MW=a("a"),Qir=o("from_pretrained()"),Hir=o(" class method or the "),EW=a("a"),Uir=o("from_config()"),Jir=o(` class
method.`),Yir=l(),h8=a("p"),Kir=o("This class cannot be instantiated directly using "),$3e=a("code"),Zir=o("__init__()"),edr=o(" (throws an error)."),odr=l(),wt=a("div"),F(p8.$$.fragment),rdr=l(),k3e=a("p"),tdr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),adr=l(),jd=a("p"),ndr=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),sdr=o("not"),ldr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),idr=o("from_pretrained()"),ddr=o(" to load the model weights."),cdr=l(),F(YT.$$.fragment),fdr=l(),bo=a("div"),F(_8.$$.fragment),mdr=l(),R3e=a("p"),gdr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hdr=l(),Ua=a("p"),pdr=o("The model class to instantiate is selected based on the "),P3e=a("code"),_dr=o("model_type"),udr=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),bdr=o("pretrained_model_name_or_path"),vdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(":"),Mdr=l(),Ja=a("ul"),KT=a("li"),N3e=a("strong"),Edr=o("beit"),Cdr=o(" \u2014 "),wW=a("a"),wdr=o("BeitForSemanticSegmentation"),Adr=o(" (BEiT model)"),Ldr=l(),ZT=a("li"),q3e=a("strong"),ydr=o("data2vec-vision"),xdr=o(" \u2014 "),AW=a("a"),$dr=o("Data2VecVisionForSemanticSegmentation"),kdr=o(" (Data2VecVision model)"),Sdr=l(),e7=a("li"),j3e=a("strong"),Rdr=o("dpt"),Pdr=o(" \u2014 "),LW=a("a"),Bdr=o("DPTForSemanticSegmentation"),Idr=o(" (DPT model)"),Ndr=l(),o7=a("li"),D3e=a("strong"),qdr=o("segformer"),jdr=o(" \u2014 "),yW=a("a"),Ddr=o("SegformerForSemanticSegmentation"),Gdr=o(" (SegFormer model)"),Odr=l(),r7=a("p"),Vdr=o("The model is set in evaluation mode by default using "),G3e=a("code"),Xdr=o("model.eval()"),zdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O3e=a("code"),Wdr=o("model.train()"),Qdr=l(),F(t7.$$.fragment),nDe=l(),Dd=a("h2"),a7=a("a"),V3e=a("span"),F(u8.$$.fragment),Hdr=l(),X3e=a("span"),Udr=o("AutoModelForInstanceSegmentation"),sDe=l(),Jo=a("div"),F(b8.$$.fragment),Jdr=l(),Gd=a("p"),Ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xW=a("a"),Kdr=o("from_pretrained()"),Zdr=o(" class method or the "),$W=a("a"),ecr=o("from_config()"),ocr=o(` class
method.`),rcr=l(),v8=a("p"),tcr=o("This class cannot be instantiated directly using "),z3e=a("code"),acr=o("__init__()"),ncr=o(" (throws an error)."),scr=l(),At=a("div"),F(F8.$$.fragment),lcr=l(),W3e=a("p"),icr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dcr=l(),Od=a("p"),ccr=o(`Note:
Loading a model from its configuration file does `),Q3e=a("strong"),fcr=o("not"),mcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),gcr=o("from_pretrained()"),hcr=o(" to load the model weights."),pcr=l(),F(n7.$$.fragment),_cr=l(),vo=a("div"),F(T8.$$.fragment),ucr=l(),H3e=a("p"),bcr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vcr=l(),Ya=a("p"),Fcr=o("The model class to instantiate is selected based on the "),U3e=a("code"),Tcr=o("model_type"),Mcr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),Ecr=o("pretrained_model_name_or_path"),Ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),wcr=o("pretrained_model_name_or_path"),Acr=o(":"),Lcr=l(),K3e=a("ul"),s7=a("li"),Z3e=a("strong"),ycr=o("maskformer"),xcr=o(" \u2014 "),SW=a("a"),$cr=o("MaskFormerForInstanceSegmentation"),kcr=o(" (MaskFormer model)"),Scr=l(),l7=a("p"),Rcr=o("The model is set in evaluation mode by default using "),ebe=a("code"),Pcr=o("model.eval()"),Bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),Icr=o("model.train()"),Ncr=l(),F(i7.$$.fragment),lDe=l(),Vd=a("h2"),d7=a("a"),rbe=a("span"),F(M8.$$.fragment),qcr=l(),tbe=a("span"),jcr=o("TFAutoModel"),iDe=l(),Yo=a("div"),F(E8.$$.fragment),Dcr=l(),Xd=a("p"),Gcr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RW=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" class method or the "),PW=a("a"),Xcr=o("from_config()"),zcr=o(` class
method.`),Wcr=l(),C8=a("p"),Qcr=o("This class cannot be instantiated directly using "),abe=a("code"),Hcr=o("__init__()"),Ucr=o(" (throws an error)."),Jcr=l(),Lt=a("div"),F(w8.$$.fragment),Ycr=l(),nbe=a("p"),Kcr=o("Instantiates one of the base model classes of the library from a configuration."),Zcr=l(),zd=a("p"),efr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),ofr=o("not"),rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),tfr=o("from_pretrained()"),afr=o(" to load the model weights."),nfr=l(),F(c7.$$.fragment),sfr=l(),wr=a("div"),F(A8.$$.fragment),lfr=l(),lbe=a("p"),ifr=o("Instantiate one of the base model classes of the library from a pretrained model."),dfr=l(),Ka=a("p"),cfr=o("The model class to instantiate is selected based on the "),ibe=a("code"),ffr=o("model_type"),mfr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(":"),ufr=l(),q=a("ul"),f7=a("li"),fbe=a("strong"),bfr=o("albert"),vfr=o(" \u2014 "),IW=a("a"),Ffr=o("TFAlbertModel"),Tfr=o(" (ALBERT model)"),Mfr=l(),m7=a("li"),mbe=a("strong"),Efr=o("bart"),Cfr=o(" \u2014 "),NW=a("a"),wfr=o("TFBartModel"),Afr=o(" (BART model)"),Lfr=l(),g7=a("li"),gbe=a("strong"),yfr=o("bert"),xfr=o(" \u2014 "),qW=a("a"),$fr=o("TFBertModel"),kfr=o(" (BERT model)"),Sfr=l(),h7=a("li"),hbe=a("strong"),Rfr=o("blenderbot"),Pfr=o(" \u2014 "),jW=a("a"),Bfr=o("TFBlenderbotModel"),Ifr=o(" (Blenderbot model)"),Nfr=l(),p7=a("li"),pbe=a("strong"),qfr=o("blenderbot-small"),jfr=o(" \u2014 "),DW=a("a"),Dfr=o("TFBlenderbotSmallModel"),Gfr=o(" (BlenderbotSmall model)"),Ofr=l(),_7=a("li"),_be=a("strong"),Vfr=o("camembert"),Xfr=o(" \u2014 "),GW=a("a"),zfr=o("TFCamembertModel"),Wfr=o(" (CamemBERT model)"),Qfr=l(),u7=a("li"),ube=a("strong"),Hfr=o("clip"),Ufr=o(" \u2014 "),OW=a("a"),Jfr=o("TFCLIPModel"),Yfr=o(" (CLIP model)"),Kfr=l(),b7=a("li"),bbe=a("strong"),Zfr=o("convbert"),emr=o(" \u2014 "),VW=a("a"),omr=o("TFConvBertModel"),rmr=o(" (ConvBERT model)"),tmr=l(),v7=a("li"),vbe=a("strong"),amr=o("convnext"),nmr=o(" \u2014 "),XW=a("a"),smr=o("TFConvNextModel"),lmr=o(" (ConvNeXT model)"),imr=l(),F7=a("li"),Fbe=a("strong"),dmr=o("ctrl"),cmr=o(" \u2014 "),zW=a("a"),fmr=o("TFCTRLModel"),mmr=o(" (CTRL model)"),gmr=l(),T7=a("li"),Tbe=a("strong"),hmr=o("data2vec-vision"),pmr=o(" \u2014 "),WW=a("a"),_mr=o("TFData2VecVisionModel"),umr=o(" (Data2VecVision model)"),bmr=l(),M7=a("li"),Mbe=a("strong"),vmr=o("deberta"),Fmr=o(" \u2014 "),QW=a("a"),Tmr=o("TFDebertaModel"),Mmr=o(" (DeBERTa model)"),Emr=l(),E7=a("li"),Ebe=a("strong"),Cmr=o("deberta-v2"),wmr=o(" \u2014 "),HW=a("a"),Amr=o("TFDebertaV2Model"),Lmr=o(" (DeBERTa-v2 model)"),ymr=l(),C7=a("li"),Cbe=a("strong"),xmr=o("distilbert"),$mr=o(" \u2014 "),UW=a("a"),kmr=o("TFDistilBertModel"),Smr=o(" (DistilBERT model)"),Rmr=l(),w7=a("li"),wbe=a("strong"),Pmr=o("dpr"),Bmr=o(" \u2014 "),JW=a("a"),Imr=o("TFDPRQuestionEncoder"),Nmr=o(" (DPR model)"),qmr=l(),A7=a("li"),Abe=a("strong"),jmr=o("electra"),Dmr=o(" \u2014 "),YW=a("a"),Gmr=o("TFElectraModel"),Omr=o(" (ELECTRA model)"),Vmr=l(),L7=a("li"),Lbe=a("strong"),Xmr=o("flaubert"),zmr=o(" \u2014 "),KW=a("a"),Wmr=o("TFFlaubertModel"),Qmr=o(" (FlauBERT model)"),Hmr=l(),qs=a("li"),ybe=a("strong"),Umr=o("funnel"),Jmr=o(" \u2014 "),ZW=a("a"),Ymr=o("TFFunnelModel"),Kmr=o(" or "),eQ=a("a"),Zmr=o("TFFunnelBaseModel"),egr=o(" (Funnel Transformer model)"),ogr=l(),y7=a("li"),xbe=a("strong"),rgr=o("gpt2"),tgr=o(" \u2014 "),oQ=a("a"),agr=o("TFGPT2Model"),ngr=o(" (OpenAI GPT-2 model)"),sgr=l(),x7=a("li"),$be=a("strong"),lgr=o("gptj"),igr=o(" \u2014 "),rQ=a("a"),dgr=o("TFGPTJModel"),cgr=o(" (GPT-J model)"),fgr=l(),$7=a("li"),kbe=a("strong"),mgr=o("hubert"),ggr=o(" \u2014 "),tQ=a("a"),hgr=o("TFHubertModel"),pgr=o(" (Hubert model)"),_gr=l(),k7=a("li"),Sbe=a("strong"),ugr=o("layoutlm"),bgr=o(" \u2014 "),aQ=a("a"),vgr=o("TFLayoutLMModel"),Fgr=o(" (LayoutLM model)"),Tgr=l(),S7=a("li"),Rbe=a("strong"),Mgr=o("led"),Egr=o(" \u2014 "),nQ=a("a"),Cgr=o("TFLEDModel"),wgr=o(" (LED model)"),Agr=l(),R7=a("li"),Pbe=a("strong"),Lgr=o("longformer"),ygr=o(" \u2014 "),sQ=a("a"),xgr=o("TFLongformerModel"),$gr=o(" (Longformer model)"),kgr=l(),P7=a("li"),Bbe=a("strong"),Sgr=o("lxmert"),Rgr=o(" \u2014 "),lQ=a("a"),Pgr=o("TFLxmertModel"),Bgr=o(" (LXMERT model)"),Igr=l(),B7=a("li"),Ibe=a("strong"),Ngr=o("marian"),qgr=o(" \u2014 "),iQ=a("a"),jgr=o("TFMarianModel"),Dgr=o(" (Marian model)"),Ggr=l(),I7=a("li"),Nbe=a("strong"),Ogr=o("mbart"),Vgr=o(" \u2014 "),dQ=a("a"),Xgr=o("TFMBartModel"),zgr=o(" (mBART model)"),Wgr=l(),N7=a("li"),qbe=a("strong"),Qgr=o("mobilebert"),Hgr=o(" \u2014 "),cQ=a("a"),Ugr=o("TFMobileBertModel"),Jgr=o(" (MobileBERT model)"),Ygr=l(),q7=a("li"),jbe=a("strong"),Kgr=o("mpnet"),Zgr=o(" \u2014 "),fQ=a("a"),ehr=o("TFMPNetModel"),ohr=o(" (MPNet model)"),rhr=l(),j7=a("li"),Dbe=a("strong"),thr=o("mt5"),ahr=o(" \u2014 "),mQ=a("a"),nhr=o("TFMT5Model"),shr=o(" (MT5 model)"),lhr=l(),D7=a("li"),Gbe=a("strong"),ihr=o("openai-gpt"),dhr=o(" \u2014 "),gQ=a("a"),chr=o("TFOpenAIGPTModel"),fhr=o(" (OpenAI GPT model)"),mhr=l(),G7=a("li"),Obe=a("strong"),ghr=o("opt"),hhr=o(" \u2014 "),hQ=a("a"),phr=o("TFOPTModel"),_hr=o(" (OPT model)"),uhr=l(),O7=a("li"),Vbe=a("strong"),bhr=o("pegasus"),vhr=o(" \u2014 "),pQ=a("a"),Fhr=o("TFPegasusModel"),Thr=o(" (Pegasus model)"),Mhr=l(),V7=a("li"),Xbe=a("strong"),Ehr=o("rembert"),Chr=o(" \u2014 "),_Q=a("a"),whr=o("TFRemBertModel"),Ahr=o(" (RemBERT model)"),Lhr=l(),X7=a("li"),zbe=a("strong"),yhr=o("roberta"),xhr=o(" \u2014 "),uQ=a("a"),$hr=o("TFRobertaModel"),khr=o(" (RoBERTa model)"),Shr=l(),z7=a("li"),Wbe=a("strong"),Rhr=o("roformer"),Phr=o(" \u2014 "),bQ=a("a"),Bhr=o("TFRoFormerModel"),Ihr=o(" (RoFormer model)"),Nhr=l(),W7=a("li"),Qbe=a("strong"),qhr=o("speech_to_text"),jhr=o(" \u2014 "),vQ=a("a"),Dhr=o("TFSpeech2TextModel"),Ghr=o(" (Speech2Text model)"),Ohr=l(),Q7=a("li"),Hbe=a("strong"),Vhr=o("swin"),Xhr=o(" \u2014 "),FQ=a("a"),zhr=o("TFSwinModel"),Whr=o(" (Swin Transformer model)"),Qhr=l(),H7=a("li"),Ube=a("strong"),Hhr=o("t5"),Uhr=o(" \u2014 "),TQ=a("a"),Jhr=o("TFT5Model"),Yhr=o(" (T5 model)"),Khr=l(),U7=a("li"),Jbe=a("strong"),Zhr=o("tapas"),epr=o(" \u2014 "),MQ=a("a"),opr=o("TFTapasModel"),rpr=o(" (TAPAS model)"),tpr=l(),J7=a("li"),Ybe=a("strong"),apr=o("transfo-xl"),npr=o(" \u2014 "),EQ=a("a"),spr=o("TFTransfoXLModel"),lpr=o(" (Transformer-XL model)"),ipr=l(),Y7=a("li"),Kbe=a("strong"),dpr=o("vit"),cpr=o(" \u2014 "),CQ=a("a"),fpr=o("TFViTModel"),mpr=o(" (ViT model)"),gpr=l(),K7=a("li"),Zbe=a("strong"),hpr=o("vit_mae"),ppr=o(" \u2014 "),wQ=a("a"),_pr=o("TFViTMAEModel"),upr=o(" (ViTMAE model)"),bpr=l(),Z7=a("li"),e2e=a("strong"),vpr=o("wav2vec2"),Fpr=o(" \u2014 "),AQ=a("a"),Tpr=o("TFWav2Vec2Model"),Mpr=o(" (Wav2Vec2 model)"),Epr=l(),eM=a("li"),o2e=a("strong"),Cpr=o("xlm"),wpr=o(" \u2014 "),LQ=a("a"),Apr=o("TFXLMModel"),Lpr=o(" (XLM model)"),ypr=l(),oM=a("li"),r2e=a("strong"),xpr=o("xlm-roberta"),$pr=o(" \u2014 "),yQ=a("a"),kpr=o("TFXLMRobertaModel"),Spr=o(" (XLM-RoBERTa model)"),Rpr=l(),rM=a("li"),t2e=a("strong"),Ppr=o("xlnet"),Bpr=o(" \u2014 "),xQ=a("a"),Ipr=o("TFXLNetModel"),Npr=o(" (XLNet model)"),qpr=l(),F(tM.$$.fragment),dDe=l(),Wd=a("h2"),aM=a("a"),a2e=a("span"),F(L8.$$.fragment),jpr=l(),n2e=a("span"),Dpr=o("TFAutoModelForPreTraining"),cDe=l(),Ko=a("div"),F(y8.$$.fragment),Gpr=l(),Qd=a("p"),Opr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$Q=a("a"),Vpr=o("from_pretrained()"),Xpr=o(" class method or the "),kQ=a("a"),zpr=o("from_config()"),Wpr=o(` class
method.`),Qpr=l(),x8=a("p"),Hpr=o("This class cannot be instantiated directly using "),s2e=a("code"),Upr=o("__init__()"),Jpr=o(" (throws an error)."),Ypr=l(),yt=a("div"),F($8.$$.fragment),Kpr=l(),l2e=a("p"),Zpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e_r=l(),Hd=a("p"),o_r=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),r_r=o("not"),t_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),a_r=o("from_pretrained()"),n_r=o(" to load the model weights."),s_r=l(),F(nM.$$.fragment),l_r=l(),Ar=a("div"),F(k8.$$.fragment),i_r=l(),d2e=a("p"),d_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c_r=l(),Za=a("p"),f_r=o("The model class to instantiate is selected based on the "),c2e=a("code"),m_r=o("model_type"),g_r=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),h_r=o("pretrained_model_name_or_path"),p_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),__r=o("pretrained_model_name_or_path"),u_r=o(":"),b_r=l(),se=a("ul"),sM=a("li"),g2e=a("strong"),v_r=o("albert"),F_r=o(" \u2014 "),RQ=a("a"),T_r=o("TFAlbertForPreTraining"),M_r=o(" (ALBERT model)"),E_r=l(),lM=a("li"),h2e=a("strong"),C_r=o("bart"),w_r=o(" \u2014 "),PQ=a("a"),A_r=o("TFBartForConditionalGeneration"),L_r=o(" (BART model)"),y_r=l(),iM=a("li"),p2e=a("strong"),x_r=o("bert"),$_r=o(" \u2014 "),BQ=a("a"),k_r=o("TFBertForPreTraining"),S_r=o(" (BERT model)"),R_r=l(),dM=a("li"),_2e=a("strong"),P_r=o("camembert"),B_r=o(" \u2014 "),IQ=a("a"),I_r=o("TFCamembertForMaskedLM"),N_r=o(" (CamemBERT model)"),q_r=l(),cM=a("li"),u2e=a("strong"),j_r=o("ctrl"),D_r=o(" \u2014 "),NQ=a("a"),G_r=o("TFCTRLLMHeadModel"),O_r=o(" (CTRL model)"),V_r=l(),fM=a("li"),b2e=a("strong"),X_r=o("distilbert"),z_r=o(" \u2014 "),qQ=a("a"),W_r=o("TFDistilBertForMaskedLM"),Q_r=o(" (DistilBERT model)"),H_r=l(),mM=a("li"),v2e=a("strong"),U_r=o("electra"),J_r=o(" \u2014 "),jQ=a("a"),Y_r=o("TFElectraForPreTraining"),K_r=o(" (ELECTRA model)"),Z_r=l(),gM=a("li"),F2e=a("strong"),eur=o("flaubert"),our=o(" \u2014 "),DQ=a("a"),rur=o("TFFlaubertWithLMHeadModel"),tur=o(" (FlauBERT model)"),aur=l(),hM=a("li"),T2e=a("strong"),nur=o("funnel"),sur=o(" \u2014 "),GQ=a("a"),lur=o("TFFunnelForPreTraining"),iur=o(" (Funnel Transformer model)"),dur=l(),pM=a("li"),M2e=a("strong"),cur=o("gpt2"),fur=o(" \u2014 "),OQ=a("a"),mur=o("TFGPT2LMHeadModel"),gur=o(" (OpenAI GPT-2 model)"),hur=l(),_M=a("li"),E2e=a("strong"),pur=o("layoutlm"),_ur=o(" \u2014 "),VQ=a("a"),uur=o("TFLayoutLMForMaskedLM"),bur=o(" (LayoutLM model)"),vur=l(),uM=a("li"),C2e=a("strong"),Fur=o("lxmert"),Tur=o(" \u2014 "),XQ=a("a"),Mur=o("TFLxmertForPreTraining"),Eur=o(" (LXMERT model)"),Cur=l(),bM=a("li"),w2e=a("strong"),wur=o("mobilebert"),Aur=o(" \u2014 "),zQ=a("a"),Lur=o("TFMobileBertForPreTraining"),yur=o(" (MobileBERT model)"),xur=l(),vM=a("li"),A2e=a("strong"),$ur=o("mpnet"),kur=o(" \u2014 "),WQ=a("a"),Sur=o("TFMPNetForMaskedLM"),Rur=o(" (MPNet model)"),Pur=l(),FM=a("li"),L2e=a("strong"),Bur=o("openai-gpt"),Iur=o(" \u2014 "),QQ=a("a"),Nur=o("TFOpenAIGPTLMHeadModel"),qur=o(" (OpenAI GPT model)"),jur=l(),TM=a("li"),y2e=a("strong"),Dur=o("roberta"),Gur=o(" \u2014 "),HQ=a("a"),Our=o("TFRobertaForMaskedLM"),Vur=o(" (RoBERTa model)"),Xur=l(),MM=a("li"),x2e=a("strong"),zur=o("t5"),Wur=o(" \u2014 "),UQ=a("a"),Qur=o("TFT5ForConditionalGeneration"),Hur=o(" (T5 model)"),Uur=l(),EM=a("li"),$2e=a("strong"),Jur=o("tapas"),Yur=o(" \u2014 "),JQ=a("a"),Kur=o("TFTapasForMaskedLM"),Zur=o(" (TAPAS model)"),e1r=l(),CM=a("li"),k2e=a("strong"),o1r=o("transfo-xl"),r1r=o(" \u2014 "),YQ=a("a"),t1r=o("TFTransfoXLLMHeadModel"),a1r=o(" (Transformer-XL model)"),n1r=l(),wM=a("li"),S2e=a("strong"),s1r=o("vit_mae"),l1r=o(" \u2014 "),KQ=a("a"),i1r=o("TFViTMAEForPreTraining"),d1r=o(" (ViTMAE model)"),c1r=l(),AM=a("li"),R2e=a("strong"),f1r=o("xlm"),m1r=o(" \u2014 "),ZQ=a("a"),g1r=o("TFXLMWithLMHeadModel"),h1r=o(" (XLM model)"),p1r=l(),LM=a("li"),P2e=a("strong"),_1r=o("xlm-roberta"),u1r=o(" \u2014 "),eH=a("a"),b1r=o("TFXLMRobertaForMaskedLM"),v1r=o(" (XLM-RoBERTa model)"),F1r=l(),yM=a("li"),B2e=a("strong"),T1r=o("xlnet"),M1r=o(" \u2014 "),oH=a("a"),E1r=o("TFXLNetLMHeadModel"),C1r=o(" (XLNet model)"),w1r=l(),F(xM.$$.fragment),fDe=l(),Ud=a("h2"),$M=a("a"),I2e=a("span"),F(S8.$$.fragment),A1r=l(),N2e=a("span"),L1r=o("TFAutoModelForCausalLM"),mDe=l(),Zo=a("div"),F(R8.$$.fragment),y1r=l(),Jd=a("p"),x1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rH=a("a"),$1r=o("from_pretrained()"),k1r=o(" class method or the "),tH=a("a"),S1r=o("from_config()"),R1r=o(` class
method.`),P1r=l(),P8=a("p"),B1r=o("This class cannot be instantiated directly using "),q2e=a("code"),I1r=o("__init__()"),N1r=o(" (throws an error)."),q1r=l(),xt=a("div"),F(B8.$$.fragment),j1r=l(),j2e=a("p"),D1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G1r=l(),Yd=a("p"),O1r=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),V1r=o("not"),X1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),z1r=o("from_pretrained()"),W1r=o(" to load the model weights."),Q1r=l(),F(kM.$$.fragment),H1r=l(),Lr=a("div"),F(I8.$$.fragment),U1r=l(),G2e=a("p"),J1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Y1r=l(),en=a("p"),K1r=o("The model class to instantiate is selected based on the "),O2e=a("code"),Z1r=o("model_type"),e3r=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),t3r=o("pretrained_model_name_or_path"),a3r=o(":"),n3r=l(),Me=a("ul"),SM=a("li"),z2e=a("strong"),s3r=o("bert"),l3r=o(" \u2014 "),nH=a("a"),i3r=o("TFBertLMHeadModel"),d3r=o(" (BERT model)"),c3r=l(),RM=a("li"),W2e=a("strong"),f3r=o("camembert"),m3r=o(" \u2014 "),sH=a("a"),g3r=o("TFCamembertForCausalLM"),h3r=o(" (CamemBERT model)"),p3r=l(),PM=a("li"),Q2e=a("strong"),_3r=o("ctrl"),u3r=o(" \u2014 "),lH=a("a"),b3r=o("TFCTRLLMHeadModel"),v3r=o(" (CTRL model)"),F3r=l(),BM=a("li"),H2e=a("strong"),T3r=o("gpt2"),M3r=o(" \u2014 "),iH=a("a"),E3r=o("TFGPT2LMHeadModel"),C3r=o(" (OpenAI GPT-2 model)"),w3r=l(),IM=a("li"),U2e=a("strong"),A3r=o("gptj"),L3r=o(" \u2014 "),dH=a("a"),y3r=o("TFGPTJForCausalLM"),x3r=o(" (GPT-J model)"),$3r=l(),NM=a("li"),J2e=a("strong"),k3r=o("openai-gpt"),S3r=o(" \u2014 "),cH=a("a"),R3r=o("TFOpenAIGPTLMHeadModel"),P3r=o(" (OpenAI GPT model)"),B3r=l(),qM=a("li"),Y2e=a("strong"),I3r=o("opt"),N3r=o(" \u2014 "),fH=a("a"),q3r=o("TFOPTForCausalLM"),j3r=o(" (OPT model)"),D3r=l(),jM=a("li"),K2e=a("strong"),G3r=o("rembert"),O3r=o(" \u2014 "),mH=a("a"),V3r=o("TFRemBertForCausalLM"),X3r=o(" (RemBERT model)"),z3r=l(),DM=a("li"),Z2e=a("strong"),W3r=o("roberta"),Q3r=o(" \u2014 "),gH=a("a"),H3r=o("TFRobertaForCausalLM"),U3r=o(" (RoBERTa model)"),J3r=l(),GM=a("li"),eve=a("strong"),Y3r=o("roformer"),K3r=o(" \u2014 "),hH=a("a"),Z3r=o("TFRoFormerForCausalLM"),ebr=o(" (RoFormer model)"),obr=l(),OM=a("li"),ove=a("strong"),rbr=o("transfo-xl"),tbr=o(" \u2014 "),pH=a("a"),abr=o("TFTransfoXLLMHeadModel"),nbr=o(" (Transformer-XL model)"),sbr=l(),VM=a("li"),rve=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),_H=a("a"),dbr=o("TFXLMWithLMHeadModel"),cbr=o(" (XLM model)"),fbr=l(),XM=a("li"),tve=a("strong"),mbr=o("xlnet"),gbr=o(" \u2014 "),uH=a("a"),hbr=o("TFXLNetLMHeadModel"),pbr=o(" (XLNet model)"),_br=l(),F(zM.$$.fragment),gDe=l(),Kd=a("h2"),WM=a("a"),ave=a("span"),F(N8.$$.fragment),ubr=l(),nve=a("span"),bbr=o("TFAutoModelForImageClassification"),hDe=l(),er=a("div"),F(q8.$$.fragment),vbr=l(),Zd=a("p"),Fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bH=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" class method or the "),vH=a("a"),Ebr=o("from_config()"),Cbr=o(` class
method.`),wbr=l(),j8=a("p"),Abr=o("This class cannot be instantiated directly using "),sve=a("code"),Lbr=o("__init__()"),ybr=o(" (throws an error)."),xbr=l(),$t=a("div"),F(D8.$$.fragment),$br=l(),lve=a("p"),kbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sbr=l(),ec=a("p"),Rbr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),Pbr=o("not"),Bbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),Ibr=o("from_pretrained()"),Nbr=o(" to load the model weights."),qbr=l(),F(QM.$$.fragment),jbr=l(),yr=a("div"),F(G8.$$.fragment),Dbr=l(),dve=a("p"),Gbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Obr=l(),on=a("p"),Vbr=o("The model class to instantiate is selected based on the "),cve=a("code"),Xbr=o("model_type"),zbr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),Wbr=o("pretrained_model_name_or_path"),Qbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),Hbr=o("pretrained_model_name_or_path"),Ubr=o(":"),Jbr=l(),rn=a("ul"),HM=a("li"),gve=a("strong"),Ybr=o("convnext"),Kbr=o(" \u2014 "),TH=a("a"),Zbr=o("TFConvNextForImageClassification"),e2r=o(" (ConvNeXT model)"),o2r=l(),UM=a("li"),hve=a("strong"),r2r=o("data2vec-vision"),t2r=o(" \u2014 "),MH=a("a"),a2r=o("TFData2VecVisionForImageClassification"),n2r=o(" (Data2VecVision model)"),s2r=l(),JM=a("li"),pve=a("strong"),l2r=o("swin"),i2r=o(" \u2014 "),EH=a("a"),d2r=o("TFSwinForImageClassification"),c2r=o(" (Swin Transformer model)"),f2r=l(),YM=a("li"),_ve=a("strong"),m2r=o("vit"),g2r=o(" \u2014 "),CH=a("a"),h2r=o("TFViTForImageClassification"),p2r=o(" (ViT model)"),_2r=l(),F(KM.$$.fragment),pDe=l(),oc=a("h2"),ZM=a("a"),uve=a("span"),F(O8.$$.fragment),u2r=l(),bve=a("span"),b2r=o("TFAutoModelForMaskedLM"),_De=l(),or=a("div"),F(V8.$$.fragment),v2r=l(),rc=a("p"),F2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wH=a("a"),T2r=o("from_pretrained()"),M2r=o(" class method or the "),AH=a("a"),E2r=o("from_config()"),C2r=o(` class
method.`),w2r=l(),X8=a("p"),A2r=o("This class cannot be instantiated directly using "),vve=a("code"),L2r=o("__init__()"),y2r=o(" (throws an error)."),x2r=l(),kt=a("div"),F(z8.$$.fragment),$2r=l(),Fve=a("p"),k2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S2r=l(),tc=a("p"),R2r=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),P2r=o("not"),B2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),I2r=o("from_pretrained()"),N2r=o(" to load the model weights."),q2r=l(),F(e4.$$.fragment),j2r=l(),xr=a("div"),F(W8.$$.fragment),D2r=l(),Mve=a("p"),G2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O2r=l(),tn=a("p"),V2r=o("The model class to instantiate is selected based on the "),Eve=a("code"),X2r=o("model_type"),z2r=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),W2r=o("pretrained_model_name_or_path"),Q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),H2r=o("pretrained_model_name_or_path"),U2r=o(":"),J2r=l(),ie=a("ul"),o4=a("li"),Ave=a("strong"),Y2r=o("albert"),K2r=o(" \u2014 "),yH=a("a"),Z2r=o("TFAlbertForMaskedLM"),evr=o(" (ALBERT model)"),ovr=l(),r4=a("li"),Lve=a("strong"),rvr=o("bert"),tvr=o(" \u2014 "),xH=a("a"),avr=o("TFBertForMaskedLM"),nvr=o(" (BERT model)"),svr=l(),t4=a("li"),yve=a("strong"),lvr=o("camembert"),ivr=o(" \u2014 "),$H=a("a"),dvr=o("TFCamembertForMaskedLM"),cvr=o(" (CamemBERT model)"),fvr=l(),a4=a("li"),xve=a("strong"),mvr=o("convbert"),gvr=o(" \u2014 "),kH=a("a"),hvr=o("TFConvBertForMaskedLM"),pvr=o(" (ConvBERT model)"),_vr=l(),n4=a("li"),$ve=a("strong"),uvr=o("deberta"),bvr=o(" \u2014 "),SH=a("a"),vvr=o("TFDebertaForMaskedLM"),Fvr=o(" (DeBERTa model)"),Tvr=l(),s4=a("li"),kve=a("strong"),Mvr=o("deberta-v2"),Evr=o(" \u2014 "),RH=a("a"),Cvr=o("TFDebertaV2ForMaskedLM"),wvr=o(" (DeBERTa-v2 model)"),Avr=l(),l4=a("li"),Sve=a("strong"),Lvr=o("distilbert"),yvr=o(" \u2014 "),PH=a("a"),xvr=o("TFDistilBertForMaskedLM"),$vr=o(" (DistilBERT model)"),kvr=l(),i4=a("li"),Rve=a("strong"),Svr=o("electra"),Rvr=o(" \u2014 "),BH=a("a"),Pvr=o("TFElectraForMaskedLM"),Bvr=o(" (ELECTRA model)"),Ivr=l(),d4=a("li"),Pve=a("strong"),Nvr=o("flaubert"),qvr=o(" \u2014 "),IH=a("a"),jvr=o("TFFlaubertWithLMHeadModel"),Dvr=o(" (FlauBERT model)"),Gvr=l(),c4=a("li"),Bve=a("strong"),Ovr=o("funnel"),Vvr=o(" \u2014 "),NH=a("a"),Xvr=o("TFFunnelForMaskedLM"),zvr=o(" (Funnel Transformer model)"),Wvr=l(),f4=a("li"),Ive=a("strong"),Qvr=o("layoutlm"),Hvr=o(" \u2014 "),qH=a("a"),Uvr=o("TFLayoutLMForMaskedLM"),Jvr=o(" (LayoutLM model)"),Yvr=l(),m4=a("li"),Nve=a("strong"),Kvr=o("longformer"),Zvr=o(" \u2014 "),jH=a("a"),eFr=o("TFLongformerForMaskedLM"),oFr=o(" (Longformer model)"),rFr=l(),g4=a("li"),qve=a("strong"),tFr=o("mobilebert"),aFr=o(" \u2014 "),DH=a("a"),nFr=o("TFMobileBertForMaskedLM"),sFr=o(" (MobileBERT model)"),lFr=l(),h4=a("li"),jve=a("strong"),iFr=o("mpnet"),dFr=o(" \u2014 "),GH=a("a"),cFr=o("TFMPNetForMaskedLM"),fFr=o(" (MPNet model)"),mFr=l(),p4=a("li"),Dve=a("strong"),gFr=o("rembert"),hFr=o(" \u2014 "),OH=a("a"),pFr=o("TFRemBertForMaskedLM"),_Fr=o(" (RemBERT model)"),uFr=l(),_4=a("li"),Gve=a("strong"),bFr=o("roberta"),vFr=o(" \u2014 "),VH=a("a"),FFr=o("TFRobertaForMaskedLM"),TFr=o(" (RoBERTa model)"),MFr=l(),u4=a("li"),Ove=a("strong"),EFr=o("roformer"),CFr=o(" \u2014 "),XH=a("a"),wFr=o("TFRoFormerForMaskedLM"),AFr=o(" (RoFormer model)"),LFr=l(),b4=a("li"),Vve=a("strong"),yFr=o("tapas"),xFr=o(" \u2014 "),zH=a("a"),$Fr=o("TFTapasForMaskedLM"),kFr=o(" (TAPAS model)"),SFr=l(),v4=a("li"),Xve=a("strong"),RFr=o("xlm"),PFr=o(" \u2014 "),WH=a("a"),BFr=o("TFXLMWithLMHeadModel"),IFr=o(" (XLM model)"),NFr=l(),F4=a("li"),zve=a("strong"),qFr=o("xlm-roberta"),jFr=o(" \u2014 "),QH=a("a"),DFr=o("TFXLMRobertaForMaskedLM"),GFr=o(" (XLM-RoBERTa model)"),OFr=l(),F(T4.$$.fragment),uDe=l(),ac=a("h2"),M4=a("a"),Wve=a("span"),F(Q8.$$.fragment),VFr=l(),Qve=a("span"),XFr=o("TFAutoModelForSeq2SeqLM"),bDe=l(),rr=a("div"),F(H8.$$.fragment),zFr=l(),nc=a("p"),WFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HH=a("a"),QFr=o("from_pretrained()"),HFr=o(" class method or the "),UH=a("a"),UFr=o("from_config()"),JFr=o(` class
method.`),YFr=l(),U8=a("p"),KFr=o("This class cannot be instantiated directly using "),Hve=a("code"),ZFr=o("__init__()"),eTr=o(" (throws an error)."),oTr=l(),St=a("div"),F(J8.$$.fragment),rTr=l(),Uve=a("p"),tTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aTr=l(),sc=a("p"),nTr=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),sTr=o("not"),lTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),iTr=o("from_pretrained()"),dTr=o(" to load the model weights."),cTr=l(),F(E4.$$.fragment),fTr=l(),$r=a("div"),F(Y8.$$.fragment),mTr=l(),Yve=a("p"),gTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hTr=l(),an=a("p"),pTr=o("The model class to instantiate is selected based on the "),Kve=a("code"),_Tr=o("model_type"),uTr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),FTr=o("pretrained_model_name_or_path"),TTr=o(":"),MTr=l(),Le=a("ul"),C4=a("li"),oFe=a("strong"),ETr=o("bart"),CTr=o(" \u2014 "),YH=a("a"),wTr=o("TFBartForConditionalGeneration"),ATr=o(" (BART model)"),LTr=l(),w4=a("li"),rFe=a("strong"),yTr=o("blenderbot"),xTr=o(" \u2014 "),KH=a("a"),$Tr=o("TFBlenderbotForConditionalGeneration"),kTr=o(" (Blenderbot model)"),STr=l(),A4=a("li"),tFe=a("strong"),RTr=o("blenderbot-small"),PTr=o(" \u2014 "),ZH=a("a"),BTr=o("TFBlenderbotSmallForConditionalGeneration"),ITr=o(" (BlenderbotSmall model)"),NTr=l(),L4=a("li"),aFe=a("strong"),qTr=o("encoder-decoder"),jTr=o(" \u2014 "),eU=a("a"),DTr=o("TFEncoderDecoderModel"),GTr=o(" (Encoder decoder model)"),OTr=l(),y4=a("li"),nFe=a("strong"),VTr=o("led"),XTr=o(" \u2014 "),oU=a("a"),zTr=o("TFLEDForConditionalGeneration"),WTr=o(" (LED model)"),QTr=l(),x4=a("li"),sFe=a("strong"),HTr=o("marian"),UTr=o(" \u2014 "),rU=a("a"),JTr=o("TFMarianMTModel"),YTr=o(" (Marian model)"),KTr=l(),$4=a("li"),lFe=a("strong"),ZTr=o("mbart"),e7r=o(" \u2014 "),tU=a("a"),o7r=o("TFMBartForConditionalGeneration"),r7r=o(" (mBART model)"),t7r=l(),k4=a("li"),iFe=a("strong"),a7r=o("mt5"),n7r=o(" \u2014 "),aU=a("a"),s7r=o("TFMT5ForConditionalGeneration"),l7r=o(" (MT5 model)"),i7r=l(),S4=a("li"),dFe=a("strong"),d7r=o("pegasus"),c7r=o(" \u2014 "),nU=a("a"),f7r=o("TFPegasusForConditionalGeneration"),m7r=o(" (Pegasus model)"),g7r=l(),R4=a("li"),cFe=a("strong"),h7r=o("t5"),p7r=o(" \u2014 "),sU=a("a"),_7r=o("TFT5ForConditionalGeneration"),u7r=o(" (T5 model)"),b7r=l(),F(P4.$$.fragment),vDe=l(),lc=a("h2"),B4=a("a"),fFe=a("span"),F(K8.$$.fragment),v7r=l(),mFe=a("span"),F7r=o("TFAutoModelForSequenceClassification"),FDe=l(),tr=a("div"),F(Z8.$$.fragment),T7r=l(),ic=a("p"),M7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lU=a("a"),E7r=o("from_pretrained()"),C7r=o(" class method or the "),iU=a("a"),w7r=o("from_config()"),A7r=o(` class
method.`),L7r=l(),e9=a("p"),y7r=o("This class cannot be instantiated directly using "),gFe=a("code"),x7r=o("__init__()"),$7r=o(" (throws an error)."),k7r=l(),Rt=a("div"),F(o9.$$.fragment),S7r=l(),hFe=a("p"),R7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P7r=l(),dc=a("p"),B7r=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),I7r=o("not"),N7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),q7r=o("from_pretrained()"),j7r=o(" to load the model weights."),D7r=l(),F(I4.$$.fragment),G7r=l(),kr=a("div"),F(r9.$$.fragment),O7r=l(),_Fe=a("p"),V7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X7r=l(),nn=a("p"),z7r=o("The model class to instantiate is selected based on the "),uFe=a("code"),W7r=o("model_type"),Q7r=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),H7r=o("pretrained_model_name_or_path"),U7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(":"),K7r=l(),oe=a("ul"),N4=a("li"),FFe=a("strong"),Z7r=o("albert"),eMr=o(" \u2014 "),cU=a("a"),oMr=o("TFAlbertForSequenceClassification"),rMr=o(" (ALBERT model)"),tMr=l(),q4=a("li"),TFe=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),fU=a("a"),sMr=o("TFBertForSequenceClassification"),lMr=o(" (BERT model)"),iMr=l(),j4=a("li"),MFe=a("strong"),dMr=o("camembert"),cMr=o(" \u2014 "),mU=a("a"),fMr=o("TFCamembertForSequenceClassification"),mMr=o(" (CamemBERT model)"),gMr=l(),D4=a("li"),EFe=a("strong"),hMr=o("convbert"),pMr=o(" \u2014 "),gU=a("a"),_Mr=o("TFConvBertForSequenceClassification"),uMr=o(" (ConvBERT model)"),bMr=l(),G4=a("li"),CFe=a("strong"),vMr=o("ctrl"),FMr=o(" \u2014 "),hU=a("a"),TMr=o("TFCTRLForSequenceClassification"),MMr=o(" (CTRL model)"),EMr=l(),O4=a("li"),wFe=a("strong"),CMr=o("deberta"),wMr=o(" \u2014 "),pU=a("a"),AMr=o("TFDebertaForSequenceClassification"),LMr=o(" (DeBERTa model)"),yMr=l(),V4=a("li"),AFe=a("strong"),xMr=o("deberta-v2"),$Mr=o(" \u2014 "),_U=a("a"),kMr=o("TFDebertaV2ForSequenceClassification"),SMr=o(" (DeBERTa-v2 model)"),RMr=l(),X4=a("li"),LFe=a("strong"),PMr=o("distilbert"),BMr=o(" \u2014 "),uU=a("a"),IMr=o("TFDistilBertForSequenceClassification"),NMr=o(" (DistilBERT model)"),qMr=l(),z4=a("li"),yFe=a("strong"),jMr=o("electra"),DMr=o(" \u2014 "),bU=a("a"),GMr=o("TFElectraForSequenceClassification"),OMr=o(" (ELECTRA model)"),VMr=l(),W4=a("li"),xFe=a("strong"),XMr=o("flaubert"),zMr=o(" \u2014 "),vU=a("a"),WMr=o("TFFlaubertForSequenceClassification"),QMr=o(" (FlauBERT model)"),HMr=l(),Q4=a("li"),$Fe=a("strong"),UMr=o("funnel"),JMr=o(" \u2014 "),FU=a("a"),YMr=o("TFFunnelForSequenceClassification"),KMr=o(" (Funnel Transformer model)"),ZMr=l(),H4=a("li"),kFe=a("strong"),e4r=o("gpt2"),o4r=o(" \u2014 "),TU=a("a"),r4r=o("TFGPT2ForSequenceClassification"),t4r=o(" (OpenAI GPT-2 model)"),a4r=l(),U4=a("li"),SFe=a("strong"),n4r=o("gptj"),s4r=o(" \u2014 "),MU=a("a"),l4r=o("TFGPTJForSequenceClassification"),i4r=o(" (GPT-J model)"),d4r=l(),J4=a("li"),RFe=a("strong"),c4r=o("layoutlm"),f4r=o(" \u2014 "),EU=a("a"),m4r=o("TFLayoutLMForSequenceClassification"),g4r=o(" (LayoutLM model)"),h4r=l(),Y4=a("li"),PFe=a("strong"),p4r=o("longformer"),_4r=o(" \u2014 "),CU=a("a"),u4r=o("TFLongformerForSequenceClassification"),b4r=o(" (Longformer model)"),v4r=l(),K4=a("li"),BFe=a("strong"),F4r=o("mobilebert"),T4r=o(" \u2014 "),wU=a("a"),M4r=o("TFMobileBertForSequenceClassification"),E4r=o(" (MobileBERT model)"),C4r=l(),Z4=a("li"),IFe=a("strong"),w4r=o("mpnet"),A4r=o(" \u2014 "),AU=a("a"),L4r=o("TFMPNetForSequenceClassification"),y4r=o(" (MPNet model)"),x4r=l(),eE=a("li"),NFe=a("strong"),$4r=o("openai-gpt"),k4r=o(" \u2014 "),LU=a("a"),S4r=o("TFOpenAIGPTForSequenceClassification"),R4r=o(" (OpenAI GPT model)"),P4r=l(),oE=a("li"),qFe=a("strong"),B4r=o("rembert"),I4r=o(" \u2014 "),yU=a("a"),N4r=o("TFRemBertForSequenceClassification"),q4r=o(" (RemBERT model)"),j4r=l(),rE=a("li"),jFe=a("strong"),D4r=o("roberta"),G4r=o(" \u2014 "),xU=a("a"),O4r=o("TFRobertaForSequenceClassification"),V4r=o(" (RoBERTa model)"),X4r=l(),tE=a("li"),DFe=a("strong"),z4r=o("roformer"),W4r=o(" \u2014 "),$U=a("a"),Q4r=o("TFRoFormerForSequenceClassification"),H4r=o(" (RoFormer model)"),U4r=l(),aE=a("li"),GFe=a("strong"),J4r=o("tapas"),Y4r=o(" \u2014 "),kU=a("a"),K4r=o("TFTapasForSequenceClassification"),Z4r=o(" (TAPAS model)"),eEr=l(),nE=a("li"),OFe=a("strong"),oEr=o("transfo-xl"),rEr=o(" \u2014 "),SU=a("a"),tEr=o("TFTransfoXLForSequenceClassification"),aEr=o(" (Transformer-XL model)"),nEr=l(),sE=a("li"),VFe=a("strong"),sEr=o("xlm"),lEr=o(" \u2014 "),RU=a("a"),iEr=o("TFXLMForSequenceClassification"),dEr=o(" (XLM model)"),cEr=l(),lE=a("li"),XFe=a("strong"),fEr=o("xlm-roberta"),mEr=o(" \u2014 "),PU=a("a"),gEr=o("TFXLMRobertaForSequenceClassification"),hEr=o(" (XLM-RoBERTa model)"),pEr=l(),iE=a("li"),zFe=a("strong"),_Er=o("xlnet"),uEr=o(" \u2014 "),BU=a("a"),bEr=o("TFXLNetForSequenceClassification"),vEr=o(" (XLNet model)"),FEr=l(),F(dE.$$.fragment),TDe=l(),cc=a("h2"),cE=a("a"),WFe=a("span"),F(t9.$$.fragment),TEr=l(),QFe=a("span"),MEr=o("TFAutoModelForMultipleChoice"),MDe=l(),ar=a("div"),F(a9.$$.fragment),EEr=l(),fc=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IU=a("a"),wEr=o("from_pretrained()"),AEr=o(" class method or the "),NU=a("a"),LEr=o("from_config()"),yEr=o(` class
method.`),xEr=l(),n9=a("p"),$Er=o("This class cannot be instantiated directly using "),HFe=a("code"),kEr=o("__init__()"),SEr=o(" (throws an error)."),REr=l(),Pt=a("div"),F(s9.$$.fragment),PEr=l(),UFe=a("p"),BEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IEr=l(),mc=a("p"),NEr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),qEr=o("not"),jEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),DEr=o("from_pretrained()"),GEr=o(" to load the model weights."),OEr=l(),F(fE.$$.fragment),VEr=l(),Sr=a("div"),F(l9.$$.fragment),XEr=l(),YFe=a("p"),zEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WEr=l(),sn=a("p"),QEr=o("The model class to instantiate is selected based on the "),KFe=a("code"),HEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),eCr=l(),pe=a("ul"),mE=a("li"),oTe=a("strong"),oCr=o("albert"),rCr=o(" \u2014 "),jU=a("a"),tCr=o("TFAlbertForMultipleChoice"),aCr=o(" (ALBERT model)"),nCr=l(),gE=a("li"),rTe=a("strong"),sCr=o("bert"),lCr=o(" \u2014 "),DU=a("a"),iCr=o("TFBertForMultipleChoice"),dCr=o(" (BERT model)"),cCr=l(),hE=a("li"),tTe=a("strong"),fCr=o("camembert"),mCr=o(" \u2014 "),GU=a("a"),gCr=o("TFCamembertForMultipleChoice"),hCr=o(" (CamemBERT model)"),pCr=l(),pE=a("li"),aTe=a("strong"),_Cr=o("convbert"),uCr=o(" \u2014 "),OU=a("a"),bCr=o("TFConvBertForMultipleChoice"),vCr=o(" (ConvBERT model)"),FCr=l(),_E=a("li"),nTe=a("strong"),TCr=o("distilbert"),MCr=o(" \u2014 "),VU=a("a"),ECr=o("TFDistilBertForMultipleChoice"),CCr=o(" (DistilBERT model)"),wCr=l(),uE=a("li"),sTe=a("strong"),ACr=o("electra"),LCr=o(" \u2014 "),XU=a("a"),yCr=o("TFElectraForMultipleChoice"),xCr=o(" (ELECTRA model)"),$Cr=l(),bE=a("li"),lTe=a("strong"),kCr=o("flaubert"),SCr=o(" \u2014 "),zU=a("a"),RCr=o("TFFlaubertForMultipleChoice"),PCr=o(" (FlauBERT model)"),BCr=l(),vE=a("li"),iTe=a("strong"),ICr=o("funnel"),NCr=o(" \u2014 "),WU=a("a"),qCr=o("TFFunnelForMultipleChoice"),jCr=o(" (Funnel Transformer model)"),DCr=l(),FE=a("li"),dTe=a("strong"),GCr=o("longformer"),OCr=o(" \u2014 "),QU=a("a"),VCr=o("TFLongformerForMultipleChoice"),XCr=o(" (Longformer model)"),zCr=l(),TE=a("li"),cTe=a("strong"),WCr=o("mobilebert"),QCr=o(" \u2014 "),HU=a("a"),HCr=o("TFMobileBertForMultipleChoice"),UCr=o(" (MobileBERT model)"),JCr=l(),ME=a("li"),fTe=a("strong"),YCr=o("mpnet"),KCr=o(" \u2014 "),UU=a("a"),ZCr=o("TFMPNetForMultipleChoice"),e5r=o(" (MPNet model)"),o5r=l(),EE=a("li"),mTe=a("strong"),r5r=o("rembert"),t5r=o(" \u2014 "),JU=a("a"),a5r=o("TFRemBertForMultipleChoice"),n5r=o(" (RemBERT model)"),s5r=l(),CE=a("li"),gTe=a("strong"),l5r=o("roberta"),i5r=o(" \u2014 "),YU=a("a"),d5r=o("TFRobertaForMultipleChoice"),c5r=o(" (RoBERTa model)"),f5r=l(),wE=a("li"),hTe=a("strong"),m5r=o("roformer"),g5r=o(" \u2014 "),KU=a("a"),h5r=o("TFRoFormerForMultipleChoice"),p5r=o(" (RoFormer model)"),_5r=l(),AE=a("li"),pTe=a("strong"),u5r=o("xlm"),b5r=o(" \u2014 "),ZU=a("a"),v5r=o("TFXLMForMultipleChoice"),F5r=o(" (XLM model)"),T5r=l(),LE=a("li"),_Te=a("strong"),M5r=o("xlm-roberta"),E5r=o(" \u2014 "),eJ=a("a"),C5r=o("TFXLMRobertaForMultipleChoice"),w5r=o(" (XLM-RoBERTa model)"),A5r=l(),yE=a("li"),uTe=a("strong"),L5r=o("xlnet"),y5r=o(" \u2014 "),oJ=a("a"),x5r=o("TFXLNetForMultipleChoice"),$5r=o(" (XLNet model)"),k5r=l(),F(xE.$$.fragment),EDe=l(),gc=a("h2"),$E=a("a"),bTe=a("span"),F(i9.$$.fragment),S5r=l(),vTe=a("span"),R5r=o("TFAutoModelForNextSentencePrediction"),CDe=l(),nr=a("div"),F(d9.$$.fragment),P5r=l(),hc=a("p"),B5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rJ=a("a"),I5r=o("from_pretrained()"),N5r=o(" class method or the "),tJ=a("a"),q5r=o("from_config()"),j5r=o(` class
method.`),D5r=l(),c9=a("p"),G5r=o("This class cannot be instantiated directly using "),FTe=a("code"),O5r=o("__init__()"),V5r=o(" (throws an error)."),X5r=l(),Bt=a("div"),F(f9.$$.fragment),z5r=l(),TTe=a("p"),W5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q5r=l(),pc=a("p"),H5r=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),U5r=o("not"),J5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),Y5r=o("from_pretrained()"),K5r=o(" to load the model weights."),Z5r=l(),F(kE.$$.fragment),e0r=l(),Rr=a("div"),F(m9.$$.fragment),o0r=l(),ETe=a("p"),r0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),t0r=l(),ln=a("p"),a0r=o("The model class to instantiate is selected based on the "),CTe=a("code"),n0r=o("model_type"),s0r=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(":"),f0r=l(),g9=a("ul"),SE=a("li"),LTe=a("strong"),m0r=o("bert"),g0r=o(" \u2014 "),nJ=a("a"),h0r=o("TFBertForNextSentencePrediction"),p0r=o(" (BERT model)"),_0r=l(),RE=a("li"),yTe=a("strong"),u0r=o("mobilebert"),b0r=o(" \u2014 "),sJ=a("a"),v0r=o("TFMobileBertForNextSentencePrediction"),F0r=o(" (MobileBERT model)"),T0r=l(),F(PE.$$.fragment),wDe=l(),_c=a("h2"),BE=a("a"),xTe=a("span"),F(h9.$$.fragment),M0r=l(),$Te=a("span"),E0r=o("TFAutoModelForTableQuestionAnswering"),ADe=l(),sr=a("div"),F(p9.$$.fragment),C0r=l(),uc=a("p"),w0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lJ=a("a"),A0r=o("from_pretrained()"),L0r=o(" class method or the "),iJ=a("a"),y0r=o("from_config()"),x0r=o(` class
method.`),$0r=l(),_9=a("p"),k0r=o("This class cannot be instantiated directly using "),kTe=a("code"),S0r=o("__init__()"),R0r=o(" (throws an error)."),P0r=l(),It=a("div"),F(u9.$$.fragment),B0r=l(),STe=a("p"),I0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N0r=l(),bc=a("p"),q0r=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),j0r=o("not"),D0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" to load the model weights."),V0r=l(),F(IE.$$.fragment),X0r=l(),Pr=a("div"),F(b9.$$.fragment),z0r=l(),PTe=a("p"),W0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q0r=l(),dn=a("p"),H0r=o("The model class to instantiate is selected based on the "),BTe=a("code"),U0r=o("model_type"),J0r=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),Z0r=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),qTe=a("ul"),NE=a("li"),jTe=a("strong"),rwr=o("tapas"),twr=o(" \u2014 "),cJ=a("a"),awr=o("TFTapasForQuestionAnswering"),nwr=o(" (TAPAS model)"),swr=l(),F(qE.$$.fragment),LDe=l(),vc=a("h2"),jE=a("a"),DTe=a("span"),F(v9.$$.fragment),lwr=l(),GTe=a("span"),iwr=o("TFAutoModelForTokenClassification"),yDe=l(),lr=a("div"),F(F9.$$.fragment),dwr=l(),Fc=a("p"),cwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fJ=a("a"),fwr=o("from_pretrained()"),mwr=o(" class method or the "),mJ=a("a"),gwr=o("from_config()"),hwr=o(` class
method.`),pwr=l(),T9=a("p"),_wr=o("This class cannot be instantiated directly using "),OTe=a("code"),uwr=o("__init__()"),bwr=o(" (throws an error)."),vwr=l(),Nt=a("div"),F(M9.$$.fragment),Fwr=l(),VTe=a("p"),Twr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mwr=l(),Tc=a("p"),Ewr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),Cwr=o("not"),wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),Awr=o("from_pretrained()"),Lwr=o(" to load the model weights."),ywr=l(),F(DE.$$.fragment),xwr=l(),Br=a("div"),F(E9.$$.fragment),$wr=l(),zTe=a("p"),kwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Swr=l(),cn=a("p"),Rwr=o("The model class to instantiate is selected based on the "),WTe=a("code"),Pwr=o("model_type"),Bwr=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),Iwr=o("pretrained_model_name_or_path"),Nwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),qwr=o("pretrained_model_name_or_path"),jwr=o(":"),Dwr=l(),de=a("ul"),GE=a("li"),UTe=a("strong"),Gwr=o("albert"),Owr=o(" \u2014 "),hJ=a("a"),Vwr=o("TFAlbertForTokenClassification"),Xwr=o(" (ALBERT model)"),zwr=l(),OE=a("li"),JTe=a("strong"),Wwr=o("bert"),Qwr=o(" \u2014 "),pJ=a("a"),Hwr=o("TFBertForTokenClassification"),Uwr=o(" (BERT model)"),Jwr=l(),VE=a("li"),YTe=a("strong"),Ywr=o("camembert"),Kwr=o(" \u2014 "),_J=a("a"),Zwr=o("TFCamembertForTokenClassification"),eAr=o(" (CamemBERT model)"),oAr=l(),XE=a("li"),KTe=a("strong"),rAr=o("convbert"),tAr=o(" \u2014 "),uJ=a("a"),aAr=o("TFConvBertForTokenClassification"),nAr=o(" (ConvBERT model)"),sAr=l(),zE=a("li"),ZTe=a("strong"),lAr=o("deberta"),iAr=o(" \u2014 "),bJ=a("a"),dAr=o("TFDebertaForTokenClassification"),cAr=o(" (DeBERTa model)"),fAr=l(),WE=a("li"),e7e=a("strong"),mAr=o("deberta-v2"),gAr=o(" \u2014 "),vJ=a("a"),hAr=o("TFDebertaV2ForTokenClassification"),pAr=o(" (DeBERTa-v2 model)"),_Ar=l(),QE=a("li"),o7e=a("strong"),uAr=o("distilbert"),bAr=o(" \u2014 "),FJ=a("a"),vAr=o("TFDistilBertForTokenClassification"),FAr=o(" (DistilBERT model)"),TAr=l(),HE=a("li"),r7e=a("strong"),MAr=o("electra"),EAr=o(" \u2014 "),TJ=a("a"),CAr=o("TFElectraForTokenClassification"),wAr=o(" (ELECTRA model)"),AAr=l(),UE=a("li"),t7e=a("strong"),LAr=o("flaubert"),yAr=o(" \u2014 "),MJ=a("a"),xAr=o("TFFlaubertForTokenClassification"),$Ar=o(" (FlauBERT model)"),kAr=l(),JE=a("li"),a7e=a("strong"),SAr=o("funnel"),RAr=o(" \u2014 "),EJ=a("a"),PAr=o("TFFunnelForTokenClassification"),BAr=o(" (Funnel Transformer model)"),IAr=l(),YE=a("li"),n7e=a("strong"),NAr=o("layoutlm"),qAr=o(" \u2014 "),CJ=a("a"),jAr=o("TFLayoutLMForTokenClassification"),DAr=o(" (LayoutLM model)"),GAr=l(),KE=a("li"),s7e=a("strong"),OAr=o("longformer"),VAr=o(" \u2014 "),wJ=a("a"),XAr=o("TFLongformerForTokenClassification"),zAr=o(" (Longformer model)"),WAr=l(),ZE=a("li"),l7e=a("strong"),QAr=o("mobilebert"),HAr=o(" \u2014 "),AJ=a("a"),UAr=o("TFMobileBertForTokenClassification"),JAr=o(" (MobileBERT model)"),YAr=l(),eC=a("li"),i7e=a("strong"),KAr=o("mpnet"),ZAr=o(" \u2014 "),LJ=a("a"),e6r=o("TFMPNetForTokenClassification"),o6r=o(" (MPNet model)"),r6r=l(),oC=a("li"),d7e=a("strong"),t6r=o("rembert"),a6r=o(" \u2014 "),yJ=a("a"),n6r=o("TFRemBertForTokenClassification"),s6r=o(" (RemBERT model)"),l6r=l(),rC=a("li"),c7e=a("strong"),i6r=o("roberta"),d6r=o(" \u2014 "),xJ=a("a"),c6r=o("TFRobertaForTokenClassification"),f6r=o(" (RoBERTa model)"),m6r=l(),tC=a("li"),f7e=a("strong"),g6r=o("roformer"),h6r=o(" \u2014 "),$J=a("a"),p6r=o("TFRoFormerForTokenClassification"),_6r=o(" (RoFormer model)"),u6r=l(),aC=a("li"),m7e=a("strong"),b6r=o("xlm"),v6r=o(" \u2014 "),kJ=a("a"),F6r=o("TFXLMForTokenClassification"),T6r=o(" (XLM model)"),M6r=l(),nC=a("li"),g7e=a("strong"),E6r=o("xlm-roberta"),C6r=o(" \u2014 "),SJ=a("a"),w6r=o("TFXLMRobertaForTokenClassification"),A6r=o(" (XLM-RoBERTa model)"),L6r=l(),sC=a("li"),h7e=a("strong"),y6r=o("xlnet"),x6r=o(" \u2014 "),RJ=a("a"),$6r=o("TFXLNetForTokenClassification"),k6r=o(" (XLNet model)"),S6r=l(),F(lC.$$.fragment),xDe=l(),Mc=a("h2"),iC=a("a"),p7e=a("span"),F(C9.$$.fragment),R6r=l(),_7e=a("span"),P6r=o("TFAutoModelForQuestionAnswering"),$De=l(),ir=a("div"),F(w9.$$.fragment),B6r=l(),Ec=a("p"),I6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PJ=a("a"),N6r=o("from_pretrained()"),q6r=o(" class method or the "),BJ=a("a"),j6r=o("from_config()"),D6r=o(` class
method.`),G6r=l(),A9=a("p"),O6r=o("This class cannot be instantiated directly using "),u7e=a("code"),V6r=o("__init__()"),X6r=o(" (throws an error)."),z6r=l(),qt=a("div"),F(L9.$$.fragment),W6r=l(),b7e=a("p"),Q6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H6r=l(),Cc=a("p"),U6r=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),J6r=o("not"),Y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),K6r=o("from_pretrained()"),Z6r=o(" to load the model weights."),eLr=l(),F(dC.$$.fragment),oLr=l(),Ir=a("div"),F(y9.$$.fragment),rLr=l(),F7e=a("p"),tLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aLr=l(),fn=a("p"),nLr=o("The model class to instantiate is selected based on the "),T7e=a("code"),sLr=o("model_type"),lLr=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),iLr=o("pretrained_model_name_or_path"),dLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),cLr=o("pretrained_model_name_or_path"),fLr=o(":"),mLr=l(),ce=a("ul"),cC=a("li"),C7e=a("strong"),gLr=o("albert"),hLr=o(" \u2014 "),NJ=a("a"),pLr=o("TFAlbertForQuestionAnswering"),_Lr=o(" (ALBERT model)"),uLr=l(),fC=a("li"),w7e=a("strong"),bLr=o("bert"),vLr=o(" \u2014 "),qJ=a("a"),FLr=o("TFBertForQuestionAnswering"),TLr=o(" (BERT model)"),MLr=l(),mC=a("li"),A7e=a("strong"),ELr=o("camembert"),CLr=o(" \u2014 "),jJ=a("a"),wLr=o("TFCamembertForQuestionAnswering"),ALr=o(" (CamemBERT model)"),LLr=l(),gC=a("li"),L7e=a("strong"),yLr=o("convbert"),xLr=o(" \u2014 "),DJ=a("a"),$Lr=o("TFConvBertForQuestionAnswering"),kLr=o(" (ConvBERT model)"),SLr=l(),hC=a("li"),y7e=a("strong"),RLr=o("deberta"),PLr=o(" \u2014 "),GJ=a("a"),BLr=o("TFDebertaForQuestionAnswering"),ILr=o(" (DeBERTa model)"),NLr=l(),pC=a("li"),x7e=a("strong"),qLr=o("deberta-v2"),jLr=o(" \u2014 "),OJ=a("a"),DLr=o("TFDebertaV2ForQuestionAnswering"),GLr=o(" (DeBERTa-v2 model)"),OLr=l(),_C=a("li"),$7e=a("strong"),VLr=o("distilbert"),XLr=o(" \u2014 "),VJ=a("a"),zLr=o("TFDistilBertForQuestionAnswering"),WLr=o(" (DistilBERT model)"),QLr=l(),uC=a("li"),k7e=a("strong"),HLr=o("electra"),ULr=o(" \u2014 "),XJ=a("a"),JLr=o("TFElectraForQuestionAnswering"),YLr=o(" (ELECTRA model)"),KLr=l(),bC=a("li"),S7e=a("strong"),ZLr=o("flaubert"),eyr=o(" \u2014 "),zJ=a("a"),oyr=o("TFFlaubertForQuestionAnsweringSimple"),ryr=o(" (FlauBERT model)"),tyr=l(),vC=a("li"),R7e=a("strong"),ayr=o("funnel"),nyr=o(" \u2014 "),WJ=a("a"),syr=o("TFFunnelForQuestionAnswering"),lyr=o(" (Funnel Transformer model)"),iyr=l(),FC=a("li"),P7e=a("strong"),dyr=o("gptj"),cyr=o(" \u2014 "),QJ=a("a"),fyr=o("TFGPTJForQuestionAnswering"),myr=o(" (GPT-J model)"),gyr=l(),TC=a("li"),B7e=a("strong"),hyr=o("longformer"),pyr=o(" \u2014 "),HJ=a("a"),_yr=o("TFLongformerForQuestionAnswering"),uyr=o(" (Longformer model)"),byr=l(),MC=a("li"),I7e=a("strong"),vyr=o("mobilebert"),Fyr=o(" \u2014 "),UJ=a("a"),Tyr=o("TFMobileBertForQuestionAnswering"),Myr=o(" (MobileBERT model)"),Eyr=l(),EC=a("li"),N7e=a("strong"),Cyr=o("mpnet"),wyr=o(" \u2014 "),JJ=a("a"),Ayr=o("TFMPNetForQuestionAnswering"),Lyr=o(" (MPNet model)"),yyr=l(),CC=a("li"),q7e=a("strong"),xyr=o("rembert"),$yr=o(" \u2014 "),YJ=a("a"),kyr=o("TFRemBertForQuestionAnswering"),Syr=o(" (RemBERT model)"),Ryr=l(),wC=a("li"),j7e=a("strong"),Pyr=o("roberta"),Byr=o(" \u2014 "),KJ=a("a"),Iyr=o("TFRobertaForQuestionAnswering"),Nyr=o(" (RoBERTa model)"),qyr=l(),AC=a("li"),D7e=a("strong"),jyr=o("roformer"),Dyr=o(" \u2014 "),ZJ=a("a"),Gyr=o("TFRoFormerForQuestionAnswering"),Oyr=o(" (RoFormer model)"),Vyr=l(),LC=a("li"),G7e=a("strong"),Xyr=o("xlm"),zyr=o(" \u2014 "),eY=a("a"),Wyr=o("TFXLMForQuestionAnsweringSimple"),Qyr=o(" (XLM model)"),Hyr=l(),yC=a("li"),O7e=a("strong"),Uyr=o("xlm-roberta"),Jyr=o(" \u2014 "),oY=a("a"),Yyr=o("TFXLMRobertaForQuestionAnswering"),Kyr=o(" (XLM-RoBERTa model)"),Zyr=l(),xC=a("li"),V7e=a("strong"),e8r=o("xlnet"),o8r=o(" \u2014 "),rY=a("a"),r8r=o("TFXLNetForQuestionAnsweringSimple"),t8r=o(" (XLNet model)"),a8r=l(),F($C.$$.fragment),kDe=l(),wc=a("h2"),kC=a("a"),X7e=a("span"),F(x9.$$.fragment),n8r=l(),z7e=a("span"),s8r=o("TFAutoModelForVision2Seq"),SDe=l(),dr=a("div"),F($9.$$.fragment),l8r=l(),Ac=a("p"),i8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tY=a("a"),d8r=o("from_pretrained()"),c8r=o(" class method or the "),aY=a("a"),f8r=o("from_config()"),m8r=o(` class
method.`),g8r=l(),k9=a("p"),h8r=o("This class cannot be instantiated directly using "),W7e=a("code"),p8r=o("__init__()"),_8r=o(" (throws an error)."),u8r=l(),jt=a("div"),F(S9.$$.fragment),b8r=l(),Q7e=a("p"),v8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),F8r=l(),Lc=a("p"),T8r=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),M8r=o("not"),E8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),C8r=o("from_pretrained()"),w8r=o(" to load the model weights."),A8r=l(),F(SC.$$.fragment),L8r=l(),Nr=a("div"),F(R9.$$.fragment),y8r=l(),U7e=a("p"),x8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$8r=l(),mn=a("p"),k8r=o("The model class to instantiate is selected based on the "),J7e=a("code"),S8r=o("model_type"),R8r=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),P8r=o("pretrained_model_name_or_path"),B8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),I8r=o("pretrained_model_name_or_path"),N8r=o(":"),q8r=l(),Z7e=a("ul"),RC=a("li"),eMe=a("strong"),j8r=o("vision-encoder-decoder"),D8r=o(" \u2014 "),sY=a("a"),G8r=o("TFVisionEncoderDecoderModel"),O8r=o(" (Vision Encoder decoder model)"),V8r=l(),F(PC.$$.fragment),RDe=l(),yc=a("h2"),BC=a("a"),oMe=a("span"),F(P9.$$.fragment),X8r=l(),rMe=a("span"),z8r=o("TFAutoModelForSpeechSeq2Seq"),PDe=l(),cr=a("div"),F(B9.$$.fragment),W8r=l(),xc=a("p"),Q8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lY=a("a"),H8r=o("from_pretrained()"),U8r=o(" class method or the "),iY=a("a"),J8r=o("from_config()"),Y8r=o(` class
method.`),K8r=l(),I9=a("p"),Z8r=o("This class cannot be instantiated directly using "),tMe=a("code"),e9r=o("__init__()"),o9r=o(" (throws an error)."),r9r=l(),Dt=a("div"),F(N9.$$.fragment),t9r=l(),aMe=a("p"),a9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n9r=l(),$c=a("p"),s9r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),l9r=o("not"),i9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),d9r=o("from_pretrained()"),c9r=o(" to load the model weights."),f9r=l(),F(IC.$$.fragment),m9r=l(),qr=a("div"),F(q9.$$.fragment),g9r=l(),sMe=a("p"),h9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),p9r=l(),gn=a("p"),_9r=o("The model class to instantiate is selected based on the "),lMe=a("code"),u9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),v9r=o("pretrained_model_name_or_path"),F9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),cMe=a("ul"),NC=a("li"),fMe=a("strong"),C9r=o("speech_to_text"),w9r=o(" \u2014 "),cY=a("a"),A9r=o("TFSpeech2TextForConditionalGeneration"),L9r=o(" (Speech2Text model)"),y9r=l(),F(qC.$$.fragment),BDe=l(),kc=a("h2"),jC=a("a"),mMe=a("span"),F(j9.$$.fragment),x9r=l(),gMe=a("span"),$9r=o("FlaxAutoModel"),IDe=l(),fr=a("div"),F(D9.$$.fragment),k9r=l(),Sc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),mY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),N9r=l(),G9=a("p"),q9r=o("This class cannot be instantiated directly using "),hMe=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Gt=a("div"),F(O9.$$.fragment),O9r=l(),pMe=a("p"),V9r=o("Instantiates one of the base model classes of the library from a configuration."),X9r=l(),Rc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),W9r=o("not"),Q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(DC.$$.fragment),Y9r=l(),jr=a("div"),F(V9.$$.fragment),K9r=l(),uMe=a("p"),Z9r=o("Instantiate one of the base model classes of the library from a pretrained model."),exr=l(),hn=a("p"),oxr=o("The model class to instantiate is selected based on the "),bMe=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),re=a("ul"),GC=a("li"),TMe=a("strong"),dxr=o("albert"),cxr=o(" \u2014 "),hY=a("a"),fxr=o("FlaxAlbertModel"),mxr=o(" (ALBERT model)"),gxr=l(),OC=a("li"),MMe=a("strong"),hxr=o("bart"),pxr=o(" \u2014 "),pY=a("a"),_xr=o("FlaxBartModel"),uxr=o(" (BART model)"),bxr=l(),VC=a("li"),EMe=a("strong"),vxr=o("beit"),Fxr=o(" \u2014 "),_Y=a("a"),Txr=o("FlaxBeitModel"),Mxr=o(" (BEiT model)"),Exr=l(),XC=a("li"),CMe=a("strong"),Cxr=o("bert"),wxr=o(" \u2014 "),uY=a("a"),Axr=o("FlaxBertModel"),Lxr=o(" (BERT model)"),yxr=l(),zC=a("li"),wMe=a("strong"),xxr=o("big_bird"),$xr=o(" \u2014 "),bY=a("a"),kxr=o("FlaxBigBirdModel"),Sxr=o(" (BigBird model)"),Rxr=l(),WC=a("li"),AMe=a("strong"),Pxr=o("blenderbot"),Bxr=o(" \u2014 "),vY=a("a"),Ixr=o("FlaxBlenderbotModel"),Nxr=o(" (Blenderbot model)"),qxr=l(),QC=a("li"),LMe=a("strong"),jxr=o("blenderbot-small"),Dxr=o(" \u2014 "),FY=a("a"),Gxr=o("FlaxBlenderbotSmallModel"),Oxr=o(" (BlenderbotSmall model)"),Vxr=l(),HC=a("li"),yMe=a("strong"),Xxr=o("clip"),zxr=o(" \u2014 "),TY=a("a"),Wxr=o("FlaxCLIPModel"),Qxr=o(" (CLIP model)"),Hxr=l(),UC=a("li"),xMe=a("strong"),Uxr=o("distilbert"),Jxr=o(" \u2014 "),MY=a("a"),Yxr=o("FlaxDistilBertModel"),Kxr=o(" (DistilBERT model)"),Zxr=l(),JC=a("li"),$Me=a("strong"),e$r=o("electra"),o$r=o(" \u2014 "),EY=a("a"),r$r=o("FlaxElectraModel"),t$r=o(" (ELECTRA model)"),a$r=l(),YC=a("li"),kMe=a("strong"),n$r=o("gpt2"),s$r=o(" \u2014 "),CY=a("a"),l$r=o("FlaxGPT2Model"),i$r=o(" (OpenAI GPT-2 model)"),d$r=l(),KC=a("li"),SMe=a("strong"),c$r=o("gpt_neo"),f$r=o(" \u2014 "),wY=a("a"),m$r=o("FlaxGPTNeoModel"),g$r=o(" (GPT Neo model)"),h$r=l(),ZC=a("li"),RMe=a("strong"),p$r=o("gptj"),_$r=o(" \u2014 "),AY=a("a"),u$r=o("FlaxGPTJModel"),b$r=o(" (GPT-J model)"),v$r=l(),e5=a("li"),PMe=a("strong"),F$r=o("marian"),T$r=o(" \u2014 "),LY=a("a"),M$r=o("FlaxMarianModel"),E$r=o(" (Marian model)"),C$r=l(),o5=a("li"),BMe=a("strong"),w$r=o("mbart"),A$r=o(" \u2014 "),yY=a("a"),L$r=o("FlaxMBartModel"),y$r=o(" (mBART model)"),x$r=l(),r5=a("li"),IMe=a("strong"),$$r=o("mt5"),k$r=o(" \u2014 "),xY=a("a"),S$r=o("FlaxMT5Model"),R$r=o(" (MT5 model)"),P$r=l(),t5=a("li"),NMe=a("strong"),B$r=o("opt"),I$r=o(" \u2014 "),$Y=a("a"),N$r=o("FlaxOPTModel"),q$r=o(" (OPT model)"),j$r=l(),a5=a("li"),qMe=a("strong"),D$r=o("pegasus"),G$r=o(" \u2014 "),kY=a("a"),O$r=o("FlaxPegasusModel"),V$r=o(" (Pegasus model)"),X$r=l(),n5=a("li"),jMe=a("strong"),z$r=o("roberta"),W$r=o(" \u2014 "),SY=a("a"),Q$r=o("FlaxRobertaModel"),H$r=o(" (RoBERTa model)"),U$r=l(),s5=a("li"),DMe=a("strong"),J$r=o("roformer"),Y$r=o(" \u2014 "),RY=a("a"),K$r=o("FlaxRoFormerModel"),Z$r=o(" (RoFormer model)"),ekr=l(),l5=a("li"),GMe=a("strong"),okr=o("t5"),rkr=o(" \u2014 "),PY=a("a"),tkr=o("FlaxT5Model"),akr=o(" (T5 model)"),nkr=l(),i5=a("li"),OMe=a("strong"),skr=o("vision-text-dual-encoder"),lkr=o(" \u2014 "),BY=a("a"),ikr=o("FlaxVisionTextDualEncoderModel"),dkr=o(" (VisionTextDualEncoder model)"),ckr=l(),d5=a("li"),VMe=a("strong"),fkr=o("vit"),mkr=o(" \u2014 "),IY=a("a"),gkr=o("FlaxViTModel"),hkr=o(" (ViT model)"),pkr=l(),c5=a("li"),XMe=a("strong"),_kr=o("wav2vec2"),ukr=o(" \u2014 "),NY=a("a"),bkr=o("FlaxWav2Vec2Model"),vkr=o(" (Wav2Vec2 model)"),Fkr=l(),f5=a("li"),zMe=a("strong"),Tkr=o("xglm"),Mkr=o(" \u2014 "),qY=a("a"),Ekr=o("FlaxXGLMModel"),Ckr=o(" (XGLM model)"),wkr=l(),m5=a("li"),WMe=a("strong"),Akr=o("xlm-roberta"),Lkr=o(" \u2014 "),jY=a("a"),ykr=o("FlaxXLMRobertaModel"),xkr=o(" (XLM-RoBERTa model)"),$kr=l(),F(g5.$$.fragment),NDe=l(),Pc=a("h2"),h5=a("a"),QMe=a("span"),F(X9.$$.fragment),kkr=l(),HMe=a("span"),Skr=o("FlaxAutoModelForCausalLM"),qDe=l(),mr=a("div"),F(z9.$$.fragment),Rkr=l(),Bc=a("p"),Pkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DY=a("a"),Bkr=o("from_pretrained()"),Ikr=o(" class method or the "),GY=a("a"),Nkr=o("from_config()"),qkr=o(` class
method.`),jkr=l(),W9=a("p"),Dkr=o("This class cannot be instantiated directly using "),UMe=a("code"),Gkr=o("__init__()"),Okr=o(" (throws an error)."),Vkr=l(),Ot=a("div"),F(Q9.$$.fragment),Xkr=l(),JMe=a("p"),zkr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wkr=l(),Ic=a("p"),Qkr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),Hkr=o("not"),Ukr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),Jkr=o("from_pretrained()"),Ykr=o(" to load the model weights."),Kkr=l(),F(p5.$$.fragment),Zkr=l(),Dr=a("div"),F(H9.$$.fragment),eSr=l(),KMe=a("p"),oSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rSr=l(),pn=a("p"),tSr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),aSr=o("model_type"),nSr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),sSr=o("pretrained_model_name_or_path"),lSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(":"),cSr=l(),ye=a("ul"),_5=a("li"),r4e=a("strong"),fSr=o("bart"),mSr=o(" \u2014 "),VY=a("a"),gSr=o("FlaxBartForCausalLM"),hSr=o(" (BART model)"),pSr=l(),u5=a("li"),t4e=a("strong"),_Sr=o("bert"),uSr=o(" \u2014 "),XY=a("a"),bSr=o("FlaxBertForCausalLM"),vSr=o(" (BERT model)"),FSr=l(),b5=a("li"),a4e=a("strong"),TSr=o("big_bird"),MSr=o(" \u2014 "),zY=a("a"),ESr=o("FlaxBigBirdForCausalLM"),CSr=o(" (BigBird model)"),wSr=l(),v5=a("li"),n4e=a("strong"),ASr=o("electra"),LSr=o(" \u2014 "),WY=a("a"),ySr=o("FlaxElectraForCausalLM"),xSr=o(" (ELECTRA model)"),$Sr=l(),F5=a("li"),s4e=a("strong"),kSr=o("gpt2"),SSr=o(" \u2014 "),QY=a("a"),RSr=o("FlaxGPT2LMHeadModel"),PSr=o(" (OpenAI GPT-2 model)"),BSr=l(),T5=a("li"),l4e=a("strong"),ISr=o("gpt_neo"),NSr=o(" \u2014 "),HY=a("a"),qSr=o("FlaxGPTNeoForCausalLM"),jSr=o(" (GPT Neo model)"),DSr=l(),M5=a("li"),i4e=a("strong"),GSr=o("gptj"),OSr=o(" \u2014 "),UY=a("a"),VSr=o("FlaxGPTJForCausalLM"),XSr=o(" (GPT-J model)"),zSr=l(),E5=a("li"),d4e=a("strong"),WSr=o("opt"),QSr=o(" \u2014 "),JY=a("a"),HSr=o("FlaxOPTForCausalLM"),USr=o(" (OPT model)"),JSr=l(),C5=a("li"),c4e=a("strong"),YSr=o("roberta"),KSr=o(" \u2014 "),YY=a("a"),ZSr=o("FlaxRobertaForCausalLM"),eRr=o(" (RoBERTa model)"),oRr=l(),w5=a("li"),f4e=a("strong"),rRr=o("xglm"),tRr=o(" \u2014 "),KY=a("a"),aRr=o("FlaxXGLMForCausalLM"),nRr=o(" (XGLM model)"),sRr=l(),F(A5.$$.fragment),jDe=l(),Nc=a("h2"),L5=a("a"),m4e=a("span"),F(U9.$$.fragment),lRr=l(),g4e=a("span"),iRr=o("FlaxAutoModelForPreTraining"),DDe=l(),gr=a("div"),F(J9.$$.fragment),dRr=l(),qc=a("p"),cRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZY=a("a"),fRr=o("from_pretrained()"),mRr=o(" class method or the "),eK=a("a"),gRr=o("from_config()"),hRr=o(` class
method.`),pRr=l(),Y9=a("p"),_Rr=o("This class cannot be instantiated directly using "),h4e=a("code"),uRr=o("__init__()"),bRr=o(" (throws an error)."),vRr=l(),Vt=a("div"),F(K9.$$.fragment),FRr=l(),p4e=a("p"),TRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MRr=l(),jc=a("p"),ERr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),CRr=o("not"),wRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),ARr=o("from_pretrained()"),LRr=o(" to load the model weights."),yRr=l(),F(y5.$$.fragment),xRr=l(),Gr=a("div"),F(Z9.$$.fragment),$Rr=l(),u4e=a("p"),kRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SRr=l(),_n=a("p"),RRr=o("The model class to instantiate is selected based on the "),b4e=a("code"),PRr=o("model_type"),BRr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),IRr=o("pretrained_model_name_or_path"),NRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),qRr=o("pretrained_model_name_or_path"),jRr=o(":"),DRr=l(),Ee=a("ul"),x5=a("li"),T4e=a("strong"),GRr=o("albert"),ORr=o(" \u2014 "),rK=a("a"),VRr=o("FlaxAlbertForPreTraining"),XRr=o(" (ALBERT model)"),zRr=l(),$5=a("li"),M4e=a("strong"),WRr=o("bart"),QRr=o(" \u2014 "),tK=a("a"),HRr=o("FlaxBartForConditionalGeneration"),URr=o(" (BART model)"),JRr=l(),k5=a("li"),E4e=a("strong"),YRr=o("bert"),KRr=o(" \u2014 "),aK=a("a"),ZRr=o("FlaxBertForPreTraining"),ePr=o(" (BERT model)"),oPr=l(),S5=a("li"),C4e=a("strong"),rPr=o("big_bird"),tPr=o(" \u2014 "),nK=a("a"),aPr=o("FlaxBigBirdForPreTraining"),nPr=o(" (BigBird model)"),sPr=l(),R5=a("li"),w4e=a("strong"),lPr=o("electra"),iPr=o(" \u2014 "),sK=a("a"),dPr=o("FlaxElectraForPreTraining"),cPr=o(" (ELECTRA model)"),fPr=l(),P5=a("li"),A4e=a("strong"),mPr=o("mbart"),gPr=o(" \u2014 "),lK=a("a"),hPr=o("FlaxMBartForConditionalGeneration"),pPr=o(" (mBART model)"),_Pr=l(),B5=a("li"),L4e=a("strong"),uPr=o("mt5"),bPr=o(" \u2014 "),iK=a("a"),vPr=o("FlaxMT5ForConditionalGeneration"),FPr=o(" (MT5 model)"),TPr=l(),I5=a("li"),y4e=a("strong"),MPr=o("roberta"),EPr=o(" \u2014 "),dK=a("a"),CPr=o("FlaxRobertaForMaskedLM"),wPr=o(" (RoBERTa model)"),APr=l(),N5=a("li"),x4e=a("strong"),LPr=o("roformer"),yPr=o(" \u2014 "),cK=a("a"),xPr=o("FlaxRoFormerForMaskedLM"),$Pr=o(" (RoFormer model)"),kPr=l(),q5=a("li"),$4e=a("strong"),SPr=o("t5"),RPr=o(" \u2014 "),fK=a("a"),PPr=o("FlaxT5ForConditionalGeneration"),BPr=o(" (T5 model)"),IPr=l(),j5=a("li"),k4e=a("strong"),NPr=o("wav2vec2"),qPr=o(" \u2014 "),mK=a("a"),jPr=o("FlaxWav2Vec2ForPreTraining"),DPr=o(" (Wav2Vec2 model)"),GPr=l(),D5=a("li"),S4e=a("strong"),OPr=o("xlm-roberta"),VPr=o(" \u2014 "),gK=a("a"),XPr=o("FlaxXLMRobertaForMaskedLM"),zPr=o(" (XLM-RoBERTa model)"),WPr=l(),F(G5.$$.fragment),GDe=l(),Dc=a("h2"),O5=a("a"),R4e=a("span"),F(ex.$$.fragment),QPr=l(),P4e=a("span"),HPr=o("FlaxAutoModelForMaskedLM"),ODe=l(),hr=a("div"),F(ox.$$.fragment),UPr=l(),Gc=a("p"),JPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hK=a("a"),YPr=o("from_pretrained()"),KPr=o(" class method or the "),pK=a("a"),ZPr=o("from_config()"),eBr=o(` class
method.`),oBr=l(),rx=a("p"),rBr=o("This class cannot be instantiated directly using "),B4e=a("code"),tBr=o("__init__()"),aBr=o(" (throws an error)."),nBr=l(),Xt=a("div"),F(tx.$$.fragment),sBr=l(),I4e=a("p"),lBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iBr=l(),Oc=a("p"),dBr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),cBr=o("not"),fBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),mBr=o("from_pretrained()"),gBr=o(" to load the model weights."),hBr=l(),F(V5.$$.fragment),pBr=l(),Or=a("div"),F(ax.$$.fragment),_Br=l(),q4e=a("p"),uBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bBr=l(),un=a("p"),vBr=o("The model class to instantiate is selected based on the "),j4e=a("code"),FBr=o("model_type"),TBr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),CBr=o("pretrained_model_name_or_path"),wBr=o(":"),ABr=l(),xe=a("ul"),X5=a("li"),O4e=a("strong"),LBr=o("albert"),yBr=o(" \u2014 "),uK=a("a"),xBr=o("FlaxAlbertForMaskedLM"),$Br=o(" (ALBERT model)"),kBr=l(),z5=a("li"),V4e=a("strong"),SBr=o("bart"),RBr=o(" \u2014 "),bK=a("a"),PBr=o("FlaxBartForConditionalGeneration"),BBr=o(" (BART model)"),IBr=l(),W5=a("li"),X4e=a("strong"),NBr=o("bert"),qBr=o(" \u2014 "),vK=a("a"),jBr=o("FlaxBertForMaskedLM"),DBr=o(" (BERT model)"),GBr=l(),Q5=a("li"),z4e=a("strong"),OBr=o("big_bird"),VBr=o(" \u2014 "),FK=a("a"),XBr=o("FlaxBigBirdForMaskedLM"),zBr=o(" (BigBird model)"),WBr=l(),H5=a("li"),W4e=a("strong"),QBr=o("distilbert"),HBr=o(" \u2014 "),TK=a("a"),UBr=o("FlaxDistilBertForMaskedLM"),JBr=o(" (DistilBERT model)"),YBr=l(),U5=a("li"),Q4e=a("strong"),KBr=o("electra"),ZBr=o(" \u2014 "),MK=a("a"),eIr=o("FlaxElectraForMaskedLM"),oIr=o(" (ELECTRA model)"),rIr=l(),J5=a("li"),H4e=a("strong"),tIr=o("mbart"),aIr=o(" \u2014 "),EK=a("a"),nIr=o("FlaxMBartForConditionalGeneration"),sIr=o(" (mBART model)"),lIr=l(),Y5=a("li"),U4e=a("strong"),iIr=o("roberta"),dIr=o(" \u2014 "),CK=a("a"),cIr=o("FlaxRobertaForMaskedLM"),fIr=o(" (RoBERTa model)"),mIr=l(),K5=a("li"),J4e=a("strong"),gIr=o("roformer"),hIr=o(" \u2014 "),wK=a("a"),pIr=o("FlaxRoFormerForMaskedLM"),_Ir=o(" (RoFormer model)"),uIr=l(),Z5=a("li"),Y4e=a("strong"),bIr=o("xlm-roberta"),vIr=o(" \u2014 "),AK=a("a"),FIr=o("FlaxXLMRobertaForMaskedLM"),TIr=o(" (XLM-RoBERTa model)"),MIr=l(),F(e0.$$.fragment),VDe=l(),Vc=a("h2"),o0=a("a"),K4e=a("span"),F(nx.$$.fragment),EIr=l(),Z4e=a("span"),CIr=o("FlaxAutoModelForSeq2SeqLM"),XDe=l(),pr=a("div"),F(sx.$$.fragment),wIr=l(),Xc=a("p"),AIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LK=a("a"),LIr=o("from_pretrained()"),yIr=o(" class method or the "),yK=a("a"),xIr=o("from_config()"),$Ir=o(` class
method.`),kIr=l(),lx=a("p"),SIr=o("This class cannot be instantiated directly using "),eEe=a("code"),RIr=o("__init__()"),PIr=o(" (throws an error)."),BIr=l(),zt=a("div"),F(ix.$$.fragment),IIr=l(),oEe=a("p"),NIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qIr=l(),zc=a("p"),jIr=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),DIr=o("not"),GIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),OIr=o("from_pretrained()"),VIr=o(" to load the model weights."),XIr=l(),F(r0.$$.fragment),zIr=l(),Vr=a("div"),F(dx.$$.fragment),WIr=l(),tEe=a("p"),QIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HIr=l(),bn=a("p"),UIr=o("The model class to instantiate is selected based on the "),aEe=a("code"),JIr=o("model_type"),YIr=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),KIr=o("pretrained_model_name_or_path"),ZIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),eNr=o("pretrained_model_name_or_path"),oNr=o(":"),rNr=l(),Pe=a("ul"),t0=a("li"),lEe=a("strong"),tNr=o("bart"),aNr=o(" \u2014 "),$K=a("a"),nNr=o("FlaxBartForConditionalGeneration"),sNr=o(" (BART model)"),lNr=l(),a0=a("li"),iEe=a("strong"),iNr=o("blenderbot"),dNr=o(" \u2014 "),kK=a("a"),cNr=o("FlaxBlenderbotForConditionalGeneration"),fNr=o(" (Blenderbot model)"),mNr=l(),n0=a("li"),dEe=a("strong"),gNr=o("blenderbot-small"),hNr=o(" \u2014 "),SK=a("a"),pNr=o("FlaxBlenderbotSmallForConditionalGeneration"),_Nr=o(" (BlenderbotSmall model)"),uNr=l(),s0=a("li"),cEe=a("strong"),bNr=o("encoder-decoder"),vNr=o(" \u2014 "),RK=a("a"),FNr=o("FlaxEncoderDecoderModel"),TNr=o(" (Encoder decoder model)"),MNr=l(),l0=a("li"),fEe=a("strong"),ENr=o("marian"),CNr=o(" \u2014 "),PK=a("a"),wNr=o("FlaxMarianMTModel"),ANr=o(" (Marian model)"),LNr=l(),i0=a("li"),mEe=a("strong"),yNr=o("mbart"),xNr=o(" \u2014 "),BK=a("a"),$Nr=o("FlaxMBartForConditionalGeneration"),kNr=o(" (mBART model)"),SNr=l(),d0=a("li"),gEe=a("strong"),RNr=o("mt5"),PNr=o(" \u2014 "),IK=a("a"),BNr=o("FlaxMT5ForConditionalGeneration"),INr=o(" (MT5 model)"),NNr=l(),c0=a("li"),hEe=a("strong"),qNr=o("pegasus"),jNr=o(" \u2014 "),NK=a("a"),DNr=o("FlaxPegasusForConditionalGeneration"),GNr=o(" (Pegasus model)"),ONr=l(),f0=a("li"),pEe=a("strong"),VNr=o("t5"),XNr=o(" \u2014 "),qK=a("a"),zNr=o("FlaxT5ForConditionalGeneration"),WNr=o(" (T5 model)"),QNr=l(),F(m0.$$.fragment),zDe=l(),Wc=a("h2"),g0=a("a"),_Ee=a("span"),F(cx.$$.fragment),HNr=l(),uEe=a("span"),UNr=o("FlaxAutoModelForSequenceClassification"),WDe=l(),_r=a("div"),F(fx.$$.fragment),JNr=l(),Qc=a("p"),YNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jK=a("a"),KNr=o("from_pretrained()"),ZNr=o(" class method or the "),DK=a("a"),eqr=o("from_config()"),oqr=o(` class
method.`),rqr=l(),mx=a("p"),tqr=o("This class cannot be instantiated directly using "),bEe=a("code"),aqr=o("__init__()"),nqr=o(" (throws an error)."),sqr=l(),Wt=a("div"),F(gx.$$.fragment),lqr=l(),vEe=a("p"),iqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dqr=l(),Hc=a("p"),cqr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),fqr=o("not"),mqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),gqr=o("from_pretrained()"),hqr=o(" to load the model weights."),pqr=l(),F(h0.$$.fragment),_qr=l(),Xr=a("div"),F(hx.$$.fragment),uqr=l(),TEe=a("p"),bqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vqr=l(),vn=a("p"),Fqr=o("The model class to instantiate is selected based on the "),MEe=a("code"),Tqr=o("model_type"),Mqr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),Eqr=o("pretrained_model_name_or_path"),Cqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),wqr=o("pretrained_model_name_or_path"),Aqr=o(":"),Lqr=l(),$e=a("ul"),p0=a("li"),wEe=a("strong"),yqr=o("albert"),xqr=o(" \u2014 "),OK=a("a"),$qr=o("FlaxAlbertForSequenceClassification"),kqr=o(" (ALBERT model)"),Sqr=l(),_0=a("li"),AEe=a("strong"),Rqr=o("bart"),Pqr=o(" \u2014 "),VK=a("a"),Bqr=o("FlaxBartForSequenceClassification"),Iqr=o(" (BART model)"),Nqr=l(),u0=a("li"),LEe=a("strong"),qqr=o("bert"),jqr=o(" \u2014 "),XK=a("a"),Dqr=o("FlaxBertForSequenceClassification"),Gqr=o(" (BERT model)"),Oqr=l(),b0=a("li"),yEe=a("strong"),Vqr=o("big_bird"),Xqr=o(" \u2014 "),zK=a("a"),zqr=o("FlaxBigBirdForSequenceClassification"),Wqr=o(" (BigBird model)"),Qqr=l(),v0=a("li"),xEe=a("strong"),Hqr=o("distilbert"),Uqr=o(" \u2014 "),WK=a("a"),Jqr=o("FlaxDistilBertForSequenceClassification"),Yqr=o(" (DistilBERT model)"),Kqr=l(),F0=a("li"),$Ee=a("strong"),Zqr=o("electra"),ejr=o(" \u2014 "),QK=a("a"),ojr=o("FlaxElectraForSequenceClassification"),rjr=o(" (ELECTRA model)"),tjr=l(),T0=a("li"),kEe=a("strong"),ajr=o("mbart"),njr=o(" \u2014 "),HK=a("a"),sjr=o("FlaxMBartForSequenceClassification"),ljr=o(" (mBART model)"),ijr=l(),M0=a("li"),SEe=a("strong"),djr=o("roberta"),cjr=o(" \u2014 "),UK=a("a"),fjr=o("FlaxRobertaForSequenceClassification"),mjr=o(" (RoBERTa model)"),gjr=l(),E0=a("li"),REe=a("strong"),hjr=o("roformer"),pjr=o(" \u2014 "),JK=a("a"),_jr=o("FlaxRoFormerForSequenceClassification"),ujr=o(" (RoFormer model)"),bjr=l(),C0=a("li"),PEe=a("strong"),vjr=o("xlm-roberta"),Fjr=o(" \u2014 "),YK=a("a"),Tjr=o("FlaxXLMRobertaForSequenceClassification"),Mjr=o(" (XLM-RoBERTa model)"),Ejr=l(),F(w0.$$.fragment),QDe=l(),Uc=a("h2"),A0=a("a"),BEe=a("span"),F(px.$$.fragment),Cjr=l(),IEe=a("span"),wjr=o("FlaxAutoModelForQuestionAnswering"),HDe=l(),ur=a("div"),F(_x.$$.fragment),Ajr=l(),Jc=a("p"),Ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KK=a("a"),yjr=o("from_pretrained()"),xjr=o(" class method or the "),ZK=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),ux=a("p"),Rjr=o("This class cannot be instantiated directly using "),NEe=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Qt=a("div"),F(bx.$$.fragment),Njr=l(),qEe=a("p"),qjr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jjr=l(),Yc=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(L0.$$.fragment),Wjr=l(),zr=a("div"),F(vx.$$.fragment),Qjr=l(),DEe=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ujr=l(),Fn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),GEe=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),ke=a("ul"),y0=a("li"),XEe=a("strong"),aDr=o("albert"),nDr=o(" \u2014 "),oZ=a("a"),sDr=o("FlaxAlbertForQuestionAnswering"),lDr=o(" (ALBERT model)"),iDr=l(),x0=a("li"),zEe=a("strong"),dDr=o("bart"),cDr=o(" \u2014 "),rZ=a("a"),fDr=o("FlaxBartForQuestionAnswering"),mDr=o(" (BART model)"),gDr=l(),$0=a("li"),WEe=a("strong"),hDr=o("bert"),pDr=o(" \u2014 "),tZ=a("a"),_Dr=o("FlaxBertForQuestionAnswering"),uDr=o(" (BERT model)"),bDr=l(),k0=a("li"),QEe=a("strong"),vDr=o("big_bird"),FDr=o(" \u2014 "),aZ=a("a"),TDr=o("FlaxBigBirdForQuestionAnswering"),MDr=o(" (BigBird model)"),EDr=l(),S0=a("li"),HEe=a("strong"),CDr=o("distilbert"),wDr=o(" \u2014 "),nZ=a("a"),ADr=o("FlaxDistilBertForQuestionAnswering"),LDr=o(" (DistilBERT model)"),yDr=l(),R0=a("li"),UEe=a("strong"),xDr=o("electra"),$Dr=o(" \u2014 "),sZ=a("a"),kDr=o("FlaxElectraForQuestionAnswering"),SDr=o(" (ELECTRA model)"),RDr=l(),P0=a("li"),JEe=a("strong"),PDr=o("mbart"),BDr=o(" \u2014 "),lZ=a("a"),IDr=o("FlaxMBartForQuestionAnswering"),NDr=o(" (mBART model)"),qDr=l(),B0=a("li"),YEe=a("strong"),jDr=o("roberta"),DDr=o(" \u2014 "),iZ=a("a"),GDr=o("FlaxRobertaForQuestionAnswering"),ODr=o(" (RoBERTa model)"),VDr=l(),I0=a("li"),KEe=a("strong"),XDr=o("roformer"),zDr=o(" \u2014 "),dZ=a("a"),WDr=o("FlaxRoFormerForQuestionAnswering"),QDr=o(" (RoFormer model)"),HDr=l(),N0=a("li"),ZEe=a("strong"),UDr=o("xlm-roberta"),JDr=o(" \u2014 "),cZ=a("a"),YDr=o("FlaxXLMRobertaForQuestionAnswering"),KDr=o(" (XLM-RoBERTa model)"),ZDr=l(),F(q0.$$.fragment),UDe=l(),Kc=a("h2"),j0=a("a"),eCe=a("span"),F(Fx.$$.fragment),eGr=l(),oCe=a("span"),oGr=o("FlaxAutoModelForTokenClassification"),JDe=l(),br=a("div"),F(Tx.$$.fragment),rGr=l(),Zc=a("p"),tGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fZ=a("a"),aGr=o("from_pretrained()"),nGr=o(" class method or the "),mZ=a("a"),sGr=o("from_config()"),lGr=o(` class
method.`),iGr=l(),Mx=a("p"),dGr=o("This class cannot be instantiated directly using "),rCe=a("code"),cGr=o("__init__()"),fGr=o(" (throws an error)."),mGr=l(),Ht=a("div"),F(Ex.$$.fragment),gGr=l(),tCe=a("p"),hGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pGr=l(),ef=a("p"),_Gr=o(`Note:
Loading a model from its configuration file does `),aCe=a("strong"),uGr=o("not"),bGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),vGr=o("from_pretrained()"),FGr=o(" to load the model weights."),TGr=l(),F(D0.$$.fragment),MGr=l(),Wr=a("div"),F(Cx.$$.fragment),EGr=l(),nCe=a("p"),CGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wGr=l(),Tn=a("p"),AGr=o("The model class to instantiate is selected based on the "),sCe=a("code"),LGr=o("model_type"),yGr=o(` property of the config object (either
passed as an argument or loaded from `),lCe=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=a("code"),kGr=o("pretrained_model_name_or_path"),SGr=o(":"),RGr=l(),Ge=a("ul"),G0=a("li"),dCe=a("strong"),PGr=o("albert"),BGr=o(" \u2014 "),hZ=a("a"),IGr=o("FlaxAlbertForTokenClassification"),NGr=o(" (ALBERT model)"),qGr=l(),O0=a("li"),cCe=a("strong"),jGr=o("bert"),DGr=o(" \u2014 "),pZ=a("a"),GGr=o("FlaxBertForTokenClassification"),OGr=o(" (BERT model)"),VGr=l(),V0=a("li"),fCe=a("strong"),XGr=o("big_bird"),zGr=o(" \u2014 "),_Z=a("a"),WGr=o("FlaxBigBirdForTokenClassification"),QGr=o(" (BigBird model)"),HGr=l(),X0=a("li"),mCe=a("strong"),UGr=o("distilbert"),JGr=o(" \u2014 "),uZ=a("a"),YGr=o("FlaxDistilBertForTokenClassification"),KGr=o(" (DistilBERT model)"),ZGr=l(),z0=a("li"),gCe=a("strong"),eOr=o("electra"),oOr=o(" \u2014 "),bZ=a("a"),rOr=o("FlaxElectraForTokenClassification"),tOr=o(" (ELECTRA model)"),aOr=l(),W0=a("li"),hCe=a("strong"),nOr=o("roberta"),sOr=o(" \u2014 "),vZ=a("a"),lOr=o("FlaxRobertaForTokenClassification"),iOr=o(" (RoBERTa model)"),dOr=l(),Q0=a("li"),pCe=a("strong"),cOr=o("roformer"),fOr=o(" \u2014 "),FZ=a("a"),mOr=o("FlaxRoFormerForTokenClassification"),gOr=o(" (RoFormer model)"),hOr=l(),H0=a("li"),_Ce=a("strong"),pOr=o("xlm-roberta"),_Or=o(" \u2014 "),TZ=a("a"),uOr=o("FlaxXLMRobertaForTokenClassification"),bOr=o(" (XLM-RoBERTa model)"),vOr=l(),F(U0.$$.fragment),YDe=l(),of=a("h2"),J0=a("a"),uCe=a("span"),F(wx.$$.fragment),FOr=l(),bCe=a("span"),TOr=o("FlaxAutoModelForMultipleChoice"),KDe=l(),vr=a("div"),F(Ax.$$.fragment),MOr=l(),rf=a("p"),EOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MZ=a("a"),COr=o("from_pretrained()"),wOr=o(" class method or the "),EZ=a("a"),AOr=o("from_config()"),LOr=o(` class
method.`),yOr=l(),Lx=a("p"),xOr=o("This class cannot be instantiated directly using "),vCe=a("code"),$Or=o("__init__()"),kOr=o(" (throws an error)."),SOr=l(),Ut=a("div"),F(yx.$$.fragment),ROr=l(),FCe=a("p"),POr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BOr=l(),tf=a("p"),IOr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),NOr=o("not"),qOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),jOr=o("from_pretrained()"),DOr=o(" to load the model weights."),GOr=l(),F(Y0.$$.fragment),OOr=l(),Qr=a("div"),F(xx.$$.fragment),VOr=l(),MCe=a("p"),XOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zOr=l(),Mn=a("p"),WOr=o("The model class to instantiate is selected based on the "),ECe=a("code"),QOr=o("model_type"),HOr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),UOr=o("pretrained_model_name_or_path"),JOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(":"),ZOr=l(),Oe=a("ul"),K0=a("li"),ACe=a("strong"),eVr=o("albert"),oVr=o(" \u2014 "),wZ=a("a"),rVr=o("FlaxAlbertForMultipleChoice"),tVr=o(" (ALBERT model)"),aVr=l(),Z0=a("li"),LCe=a("strong"),nVr=o("bert"),sVr=o(" \u2014 "),AZ=a("a"),lVr=o("FlaxBertForMultipleChoice"),iVr=o(" (BERT model)"),dVr=l(),ew=a("li"),yCe=a("strong"),cVr=o("big_bird"),fVr=o(" \u2014 "),LZ=a("a"),mVr=o("FlaxBigBirdForMultipleChoice"),gVr=o(" (BigBird model)"),hVr=l(),ow=a("li"),xCe=a("strong"),pVr=o("distilbert"),_Vr=o(" \u2014 "),yZ=a("a"),uVr=o("FlaxDistilBertForMultipleChoice"),bVr=o(" (DistilBERT model)"),vVr=l(),rw=a("li"),$Ce=a("strong"),FVr=o("electra"),TVr=o(" \u2014 "),xZ=a("a"),MVr=o("FlaxElectraForMultipleChoice"),EVr=o(" (ELECTRA model)"),CVr=l(),tw=a("li"),kCe=a("strong"),wVr=o("roberta"),AVr=o(" \u2014 "),$Z=a("a"),LVr=o("FlaxRobertaForMultipleChoice"),yVr=o(" (RoBERTa model)"),xVr=l(),aw=a("li"),SCe=a("strong"),$Vr=o("roformer"),kVr=o(" \u2014 "),kZ=a("a"),SVr=o("FlaxRoFormerForMultipleChoice"),RVr=o(" (RoFormer model)"),PVr=l(),nw=a("li"),RCe=a("strong"),BVr=o("xlm-roberta"),IVr=o(" \u2014 "),SZ=a("a"),NVr=o("FlaxXLMRobertaForMultipleChoice"),qVr=o(" (XLM-RoBERTa model)"),jVr=l(),F(sw.$$.fragment),ZDe=l(),af=a("h2"),lw=a("a"),PCe=a("span"),F($x.$$.fragment),DVr=l(),BCe=a("span"),GVr=o("FlaxAutoModelForNextSentencePrediction"),eGe=l(),Fr=a("div"),F(kx.$$.fragment),OVr=l(),nf=a("p"),VVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RZ=a("a"),XVr=o("from_pretrained()"),zVr=o(" class method or the "),PZ=a("a"),WVr=o("from_config()"),QVr=o(` class
method.`),HVr=l(),Sx=a("p"),UVr=o("This class cannot be instantiated directly using "),ICe=a("code"),JVr=o("__init__()"),YVr=o(" (throws an error)."),KVr=l(),Jt=a("div"),F(Rx.$$.fragment),ZVr=l(),NCe=a("p"),eXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oXr=l(),sf=a("p"),rXr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),tXr=o("not"),aXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),nXr=o("from_pretrained()"),sXr=o(" to load the model weights."),lXr=l(),F(iw.$$.fragment),iXr=l(),Hr=a("div"),F(Px.$$.fragment),dXr=l(),jCe=a("p"),cXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fXr=l(),En=a("p"),mXr=o("The model class to instantiate is selected based on the "),DCe=a("code"),gXr=o("model_type"),hXr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),pXr=o("pretrained_model_name_or_path"),_Xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),uXr=o("pretrained_model_name_or_path"),bXr=o(":"),vXr=l(),VCe=a("ul"),dw=a("li"),XCe=a("strong"),FXr=o("bert"),TXr=o(" \u2014 "),IZ=a("a"),MXr=o("FlaxBertForNextSentencePrediction"),EXr=o(" (BERT model)"),CXr=l(),F(cw.$$.fragment),oGe=l(),lf=a("h2"),fw=a("a"),zCe=a("span"),F(Bx.$$.fragment),wXr=l(),WCe=a("span"),AXr=o("FlaxAutoModelForImageClassification"),rGe=l(),Tr=a("div"),F(Ix.$$.fragment),LXr=l(),df=a("p"),yXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NZ=a("a"),xXr=o("from_pretrained()"),$Xr=o(" class method or the "),qZ=a("a"),kXr=o("from_config()"),SXr=o(` class
method.`),RXr=l(),Nx=a("p"),PXr=o("This class cannot be instantiated directly using "),QCe=a("code"),BXr=o("__init__()"),IXr=o(" (throws an error)."),NXr=l(),Yt=a("div"),F(qx.$$.fragment),qXr=l(),HCe=a("p"),jXr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DXr=l(),cf=a("p"),GXr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),OXr=o("not"),VXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),XXr=o("from_pretrained()"),zXr=o(" to load the model weights."),WXr=l(),F(mw.$$.fragment),QXr=l(),Ur=a("div"),F(jx.$$.fragment),HXr=l(),JCe=a("p"),UXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JXr=l(),Cn=a("p"),YXr=o("The model class to instantiate is selected based on the "),YCe=a("code"),KXr=o("model_type"),ZXr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),ezr=o("pretrained_model_name_or_path"),ozr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),rzr=o("pretrained_model_name_or_path"),tzr=o(":"),azr=l(),Dx=a("ul"),gw=a("li"),e5e=a("strong"),nzr=o("beit"),szr=o(" \u2014 "),DZ=a("a"),lzr=o("FlaxBeitForImageClassification"),izr=o(" (BEiT model)"),dzr=l(),hw=a("li"),o5e=a("strong"),czr=o("vit"),fzr=o(" \u2014 "),GZ=a("a"),mzr=o("FlaxViTForImageClassification"),gzr=o(" (ViT model)"),hzr=l(),F(pw.$$.fragment),tGe=l(),ff=a("h2"),_w=a("a"),r5e=a("span"),F(Gx.$$.fragment),pzr=l(),t5e=a("span"),_zr=o("FlaxAutoModelForVision2Seq"),aGe=l(),Mr=a("div"),F(Ox.$$.fragment),uzr=l(),mf=a("p"),bzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OZ=a("a"),vzr=o("from_pretrained()"),Fzr=o(" class method or the "),VZ=a("a"),Tzr=o("from_config()"),Mzr=o(` class
method.`),Ezr=l(),Vx=a("p"),Czr=o("This class cannot be instantiated directly using "),a5e=a("code"),wzr=o("__init__()"),Azr=o(" (throws an error)."),Lzr=l(),Kt=a("div"),F(Xx.$$.fragment),yzr=l(),n5e=a("p"),xzr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$zr=l(),gf=a("p"),kzr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),Szr=o("not"),Rzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),Pzr=o("from_pretrained()"),Bzr=o(" to load the model weights."),Izr=l(),F(uw.$$.fragment),Nzr=l(),Jr=a("div"),F(zx.$$.fragment),qzr=l(),l5e=a("p"),jzr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dzr=l(),wn=a("p"),Gzr=o("The model class to instantiate is selected based on the "),i5e=a("code"),Ozr=o("model_type"),Vzr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),Wzr=o("pretrained_model_name_or_path"),Qzr=o(":"),Hzr=l(),f5e=a("ul"),bw=a("li"),m5e=a("strong"),Uzr=o("vision-encoder-decoder"),Jzr=o(" \u2014 "),zZ=a("a"),Yzr=o("FlaxVisionEncoderDecoderModel"),Kzr=o(" (Vision Encoder decoder model)"),Zzr=l(),F(vw.$$.fragment),this.h()},l(f){const u=dRt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Wx=s(p);m=n(Wx,"A",{id:!0,class:!0,href:!0});var g5e=s(m);_=n(g5e,"SPAN",{});var h5e=s(_);T(d.$$.fragment,h5e),h5e.forEach(t),g5e.forEach(t),h=i(Wx),Mo=n(Wx,"SPAN",{});var p5e=s(Mo);gi=r(p5e,"Auto Classes"),p5e.forEach(t),Wx.forEach(t),uf=i(f),rt=n(f,"P",{});var Qx=s(rt);hi=r(Qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Qx,"CODE",{});var _5e=s(pi);N6=r(_5e,"from_pretrained()"),_5e.forEach(t),bf=r(Qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Qx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var u5e=s(Ln);q6=r(u5e,"AutoConfig"),u5e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var b5e=s(xn);j6=r(b5e,"AutoModel"),b5e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var v5e=s($n);D6=r(v5e,"AutoTokenizer"),v5e.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Hx=s(Ae);lk=r(Hx,"will create a model that is an instance of "),vi=n(Hx,"A",{href:!0});var F5e=s(vi);ik=r(F5e,"BertModel"),F5e.forEach(t),dk=r(Hx,"."),Hx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ux=s(wa);ck=r(Ux,"There is one class of "),Ff=n(Ux,"CODE",{});var T5e=s(Ff);fk=r(T5e,"AutoModel"),T5e.forEach(t),gVe=r(Ux," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ux.forEach(t),rje=i(f),Fi=n(f,"H2",{class:!0});var Jx=s(Fi);Tf=n(Jx,"A",{id:!0,class:!0,href:!0});var M5e=s(Tf);qoe=n(M5e,"SPAN",{});var E5e=s(qoe);T(G6.$$.fragment,E5e),E5e.forEach(t),M5e.forEach(t),hVe=i(Jx),joe=n(Jx,"SPAN",{});var C5e=s(joe);pVe=r(C5e,"Extending the Auto Classes"),C5e.forEach(t),Jx.forEach(t),tje=i(f),kn=n(f,"P",{});var hf=s(kn);_Ve=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Doe=n(hf,"CODE",{});var w5e=s(Doe);uVe=r(w5e,"NewModel"),w5e.forEach(t),bVe=r(hf,", make sure you have a "),Goe=n(hf,"CODE",{});var A5e=s(Goe);vVe=r(A5e,"NewModelConfig"),A5e.forEach(t),FVe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),aje=i(f),T(O6.$$.fragment,f),nje=i(f),mk=n(f,"P",{});var L5e=s(mk);TVe=r(L5e,"You will then be able to use the auto classes like you would usually do!"),L5e.forEach(t),sje=i(f),T(Mf.$$.fragment,f),lje=i(f),Ti=n(f,"H2",{class:!0});var Yx=s(Ti);Ef=n(Yx,"A",{id:!0,class:!0,href:!0});var y5e=s(Ef);Ooe=n(y5e,"SPAN",{});var x5e=s(Ooe);T(V6.$$.fragment,x5e),x5e.forEach(t),y5e.forEach(t),MVe=i(Yx),Voe=n(Yx,"SPAN",{});var $5e=s(Voe);EVe=r($5e,"AutoConfig"),$5e.forEach(t),Yx.forEach(t),ije=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(X6.$$.fragment,et),CVe=i(et),z6=n(et,"P",{});var Kx=s(z6);wVe=r(Kx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gk=n(Kx,"A",{href:!0});var k5e=s(gk);AVe=r(k5e,"from_pretrained()"),k5e.forEach(t),LVe=r(Kx," class method."),Kx.forEach(t),yVe=i(et),W6=n(et,"P",{});var Zx=s(W6);xVe=r(Zx,"This class cannot be instantiated directly using "),Xoe=n(Zx,"CODE",{});var S5e=s(Xoe);$Ve=r(S5e,"__init__()"),S5e.forEach(t),kVe=r(Zx," (throws an error)."),Zx.forEach(t),SVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Q6.$$.fragment,ot),RVe=i(ot),zoe=n(ot,"P",{});var R5e=s(zoe);PVe=r(R5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R5e.forEach(t),BVe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);IVe=r(pf,"The configuration class to instantiate is selected based on the "),Woe=n(pf,"CODE",{});var P5e=s(Woe);NVe=r(P5e,"model_type"),P5e.forEach(t),qVe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Qoe=n(pf,"CODE",{});var B5e=s(Qoe);jVe=r(B5e,"pretrained_model_name_or_path"),B5e.forEach(t),DVe=r(pf,":"),pf.forEach(t),GVe=i(ot),A=n(ot,"UL",{});var L=s(A);Cf=n(L,"LI",{});var Fw=s(Cf);Hoe=n(Fw,"STRONG",{});var I5e=s(Hoe);OVe=r(I5e,"albert"),I5e.forEach(t),VVe=r(Fw," \u2014 "),hk=n(Fw,"A",{href:!0});var N5e=s(hk);XVe=r(N5e,"AlbertConfig"),N5e.forEach(t),zVe=r(Fw," (ALBERT model)"),Fw.forEach(t),WVe=i(L),wf=n(L,"LI",{});var Tw=s(wf);Uoe=n(Tw,"STRONG",{});var q5e=s(Uoe);QVe=r(q5e,"bart"),q5e.forEach(t),HVe=r(Tw," \u2014 "),pk=n(Tw,"A",{href:!0});var j5e=s(pk);UVe=r(j5e,"BartConfig"),j5e.forEach(t),JVe=r(Tw," (BART model)"),Tw.forEach(t),YVe=i(L),Af=n(L,"LI",{});var Mw=s(Af);Joe=n(Mw,"STRONG",{});var D5e=s(Joe);KVe=r(D5e,"beit"),D5e.forEach(t),ZVe=r(Mw," \u2014 "),_k=n(Mw,"A",{href:!0});var G5e=s(_k);eXe=r(G5e,"BeitConfig"),G5e.forEach(t),oXe=r(Mw," (BEiT model)"),Mw.forEach(t),rXe=i(L),Lf=n(L,"LI",{});var Ew=s(Lf);Yoe=n(Ew,"STRONG",{});var O5e=s(Yoe);tXe=r(O5e,"bert"),O5e.forEach(t),aXe=r(Ew," \u2014 "),uk=n(Ew,"A",{href:!0});var V5e=s(uk);nXe=r(V5e,"BertConfig"),V5e.forEach(t),sXe=r(Ew," (BERT model)"),Ew.forEach(t),lXe=i(L),yf=n(L,"LI",{});var Cw=s(yf);Koe=n(Cw,"STRONG",{});var X5e=s(Koe);iXe=r(X5e,"bert-generation"),X5e.forEach(t),dXe=r(Cw," \u2014 "),bk=n(Cw,"A",{href:!0});var z5e=s(bk);cXe=r(z5e,"BertGenerationConfig"),z5e.forEach(t),fXe=r(Cw," (Bert Generation model)"),Cw.forEach(t),mXe=i(L),xf=n(L,"LI",{});var ww=s(xf);Zoe=n(ww,"STRONG",{});var W5e=s(Zoe);gXe=r(W5e,"big_bird"),W5e.forEach(t),hXe=r(ww," \u2014 "),vk=n(ww,"A",{href:!0});var Q5e=s(vk);pXe=r(Q5e,"BigBirdConfig"),Q5e.forEach(t),_Xe=r(ww," (BigBird model)"),ww.forEach(t),uXe=i(L),$f=n(L,"LI",{});var Aw=s($f);ere=n(Aw,"STRONG",{});var H5e=s(ere);bXe=r(H5e,"bigbird_pegasus"),H5e.forEach(t),vXe=r(Aw," \u2014 "),Fk=n(Aw,"A",{href:!0});var U5e=s(Fk);FXe=r(U5e,"BigBirdPegasusConfig"),U5e.forEach(t),TXe=r(Aw," (BigBird-Pegasus model)"),Aw.forEach(t),MXe=i(L),kf=n(L,"LI",{});var Lw=s(kf);ore=n(Lw,"STRONG",{});var J5e=s(ore);EXe=r(J5e,"blenderbot"),J5e.forEach(t),CXe=r(Lw," \u2014 "),Tk=n(Lw,"A",{href:!0});var Y5e=s(Tk);wXe=r(Y5e,"BlenderbotConfig"),Y5e.forEach(t),AXe=r(Lw," (Blenderbot model)"),Lw.forEach(t),LXe=i(L),Sf=n(L,"LI",{});var yw=s(Sf);rre=n(yw,"STRONG",{});var K5e=s(rre);yXe=r(K5e,"blenderbot-small"),K5e.forEach(t),xXe=r(yw," \u2014 "),Mk=n(yw,"A",{href:!0});var Z5e=s(Mk);$Xe=r(Z5e,"BlenderbotSmallConfig"),Z5e.forEach(t),kXe=r(yw," (BlenderbotSmall model)"),yw.forEach(t),SXe=i(L),Rf=n(L,"LI",{});var xw=s(Rf);tre=n(xw,"STRONG",{});var e0e=s(tre);RXe=r(e0e,"camembert"),e0e.forEach(t),PXe=r(xw," \u2014 "),Ek=n(xw,"A",{href:!0});var o0e=s(Ek);BXe=r(o0e,"CamembertConfig"),o0e.forEach(t),IXe=r(xw," (CamemBERT model)"),xw.forEach(t),NXe=i(L),Pf=n(L,"LI",{});var $w=s(Pf);are=n($w,"STRONG",{});var r0e=s(are);qXe=r(r0e,"canine"),r0e.forEach(t),jXe=r($w," \u2014 "),Ck=n($w,"A",{href:!0});var t0e=s(Ck);DXe=r(t0e,"CanineConfig"),t0e.forEach(t),GXe=r($w," (CANINE model)"),$w.forEach(t),OXe=i(L),Bf=n(L,"LI",{});var kw=s(Bf);nre=n(kw,"STRONG",{});var a0e=s(nre);VXe=r(a0e,"clip"),a0e.forEach(t),XXe=r(kw," \u2014 "),wk=n(kw,"A",{href:!0});var n0e=s(wk);zXe=r(n0e,"CLIPConfig"),n0e.forEach(t),WXe=r(kw," (CLIP model)"),kw.forEach(t),QXe=i(L),If=n(L,"LI",{});var Sw=s(If);sre=n(Sw,"STRONG",{});var s0e=s(sre);HXe=r(s0e,"convbert"),s0e.forEach(t),UXe=r(Sw," \u2014 "),Ak=n(Sw,"A",{href:!0});var l0e=s(Ak);JXe=r(l0e,"ConvBertConfig"),l0e.forEach(t),YXe=r(Sw," (ConvBERT model)"),Sw.forEach(t),KXe=i(L),Nf=n(L,"LI",{});var Rw=s(Nf);lre=n(Rw,"STRONG",{});var i0e=s(lre);ZXe=r(i0e,"convnext"),i0e.forEach(t),eze=r(Rw," \u2014 "),Lk=n(Rw,"A",{href:!0});var d0e=s(Lk);oze=r(d0e,"ConvNextConfig"),d0e.forEach(t),rze=r(Rw," (ConvNeXT model)"),Rw.forEach(t),tze=i(L),qf=n(L,"LI",{});var Pw=s(qf);ire=n(Pw,"STRONG",{});var c0e=s(ire);aze=r(c0e,"ctrl"),c0e.forEach(t),nze=r(Pw," \u2014 "),yk=n(Pw,"A",{href:!0});var f0e=s(yk);sze=r(f0e,"CTRLConfig"),f0e.forEach(t),lze=r(Pw," (CTRL model)"),Pw.forEach(t),ize=i(L),jf=n(L,"LI",{});var Bw=s(jf);dre=n(Bw,"STRONG",{});var m0e=s(dre);dze=r(m0e,"cvt"),m0e.forEach(t),cze=r(Bw," \u2014 "),xk=n(Bw,"A",{href:!0});var g0e=s(xk);fze=r(g0e,"CvtConfig"),g0e.forEach(t),mze=r(Bw," (CvT model)"),Bw.forEach(t),gze=i(L),Df=n(L,"LI",{});var Iw=s(Df);cre=n(Iw,"STRONG",{});var h0e=s(cre);hze=r(h0e,"data2vec-audio"),h0e.forEach(t),pze=r(Iw," \u2014 "),$k=n(Iw,"A",{href:!0});var p0e=s($k);_ze=r(p0e,"Data2VecAudioConfig"),p0e.forEach(t),uze=r(Iw," (Data2VecAudio model)"),Iw.forEach(t),bze=i(L),Gf=n(L,"LI",{});var Nw=s(Gf);fre=n(Nw,"STRONG",{});var _0e=s(fre);vze=r(_0e,"data2vec-text"),_0e.forEach(t),Fze=r(Nw," \u2014 "),kk=n(Nw,"A",{href:!0});var u0e=s(kk);Tze=r(u0e,"Data2VecTextConfig"),u0e.forEach(t),Mze=r(Nw," (Data2VecText model)"),Nw.forEach(t),Eze=i(L),Of=n(L,"LI",{});var qw=s(Of);mre=n(qw,"STRONG",{});var b0e=s(mre);Cze=r(b0e,"data2vec-vision"),b0e.forEach(t),wze=r(qw," \u2014 "),Sk=n(qw,"A",{href:!0});var v0e=s(Sk);Aze=r(v0e,"Data2VecVisionConfig"),v0e.forEach(t),Lze=r(qw," (Data2VecVision model)"),qw.forEach(t),yze=i(L),Vf=n(L,"LI",{});var jw=s(Vf);gre=n(jw,"STRONG",{});var F0e=s(gre);xze=r(F0e,"deberta"),F0e.forEach(t),$ze=r(jw," \u2014 "),Rk=n(jw,"A",{href:!0});var T0e=s(Rk);kze=r(T0e,"DebertaConfig"),T0e.forEach(t),Sze=r(jw," (DeBERTa model)"),jw.forEach(t),Rze=i(L),Xf=n(L,"LI",{});var Dw=s(Xf);hre=n(Dw,"STRONG",{});var M0e=s(hre);Pze=r(M0e,"deberta-v2"),M0e.forEach(t),Bze=r(Dw," \u2014 "),Pk=n(Dw,"A",{href:!0});var E0e=s(Pk);Ize=r(E0e,"DebertaV2Config"),E0e.forEach(t),Nze=r(Dw," (DeBERTa-v2 model)"),Dw.forEach(t),qze=i(L),zf=n(L,"LI",{});var Gw=s(zf);pre=n(Gw,"STRONG",{});var C0e=s(pre);jze=r(C0e,"decision_transformer"),C0e.forEach(t),Dze=r(Gw," \u2014 "),Bk=n(Gw,"A",{href:!0});var w0e=s(Bk);Gze=r(w0e,"DecisionTransformerConfig"),w0e.forEach(t),Oze=r(Gw," (Decision Transformer model)"),Gw.forEach(t),Vze=i(L),Wf=n(L,"LI",{});var Ow=s(Wf);_re=n(Ow,"STRONG",{});var A0e=s(_re);Xze=r(A0e,"deit"),A0e.forEach(t),zze=r(Ow," \u2014 "),Ik=n(Ow,"A",{href:!0});var oWr=s(Ik);Wze=r(oWr,"DeiTConfig"),oWr.forEach(t),Qze=r(Ow," (DeiT model)"),Ow.forEach(t),Hze=i(L),Qf=n(L,"LI",{});var L0e=s(Qf);ure=n(L0e,"STRONG",{});var rWr=s(ure);Uze=r(rWr,"detr"),rWr.forEach(t),Jze=r(L0e," \u2014 "),Nk=n(L0e,"A",{href:!0});var tWr=s(Nk);Yze=r(tWr,"DetrConfig"),tWr.forEach(t),Kze=r(L0e," (DETR model)"),L0e.forEach(t),Zze=i(L),Hf=n(L,"LI",{});var y0e=s(Hf);bre=n(y0e,"STRONG",{});var aWr=s(bre);eWe=r(aWr,"distilbert"),aWr.forEach(t),oWe=r(y0e," \u2014 "),qk=n(y0e,"A",{href:!0});var nWr=s(qk);rWe=r(nWr,"DistilBertConfig"),nWr.forEach(t),tWe=r(y0e," (DistilBERT model)"),y0e.forEach(t),aWe=i(L),Uf=n(L,"LI",{});var x0e=s(Uf);vre=n(x0e,"STRONG",{});var sWr=s(vre);nWe=r(sWr,"dpr"),sWr.forEach(t),sWe=r(x0e," \u2014 "),jk=n(x0e,"A",{href:!0});var lWr=s(jk);lWe=r(lWr,"DPRConfig"),lWr.forEach(t),iWe=r(x0e," (DPR model)"),x0e.forEach(t),dWe=i(L),Jf=n(L,"LI",{});var $0e=s(Jf);Fre=n($0e,"STRONG",{});var iWr=s(Fre);cWe=r(iWr,"dpt"),iWr.forEach(t),fWe=r($0e," \u2014 "),Dk=n($0e,"A",{href:!0});var dWr=s(Dk);mWe=r(dWr,"DPTConfig"),dWr.forEach(t),gWe=r($0e," (DPT model)"),$0e.forEach(t),hWe=i(L),Yf=n(L,"LI",{});var k0e=s(Yf);Tre=n(k0e,"STRONG",{});var cWr=s(Tre);pWe=r(cWr,"electra"),cWr.forEach(t),_We=r(k0e," \u2014 "),Gk=n(k0e,"A",{href:!0});var fWr=s(Gk);uWe=r(fWr,"ElectraConfig"),fWr.forEach(t),bWe=r(k0e," (ELECTRA model)"),k0e.forEach(t),vWe=i(L),Kf=n(L,"LI",{});var S0e=s(Kf);Mre=n(S0e,"STRONG",{});var mWr=s(Mre);FWe=r(mWr,"encoder-decoder"),mWr.forEach(t),TWe=r(S0e," \u2014 "),Ok=n(S0e,"A",{href:!0});var gWr=s(Ok);MWe=r(gWr,"EncoderDecoderConfig"),gWr.forEach(t),EWe=r(S0e," (Encoder decoder model)"),S0e.forEach(t),CWe=i(L),Zf=n(L,"LI",{});var R0e=s(Zf);Ere=n(R0e,"STRONG",{});var hWr=s(Ere);wWe=r(hWr,"flaubert"),hWr.forEach(t),AWe=r(R0e," \u2014 "),Vk=n(R0e,"A",{href:!0});var pWr=s(Vk);LWe=r(pWr,"FlaubertConfig"),pWr.forEach(t),yWe=r(R0e," (FlauBERT model)"),R0e.forEach(t),xWe=i(L),em=n(L,"LI",{});var P0e=s(em);Cre=n(P0e,"STRONG",{});var _Wr=s(Cre);$We=r(_Wr,"flava"),_Wr.forEach(t),kWe=r(P0e," \u2014 "),Xk=n(P0e,"A",{href:!0});var uWr=s(Xk);SWe=r(uWr,"FlavaConfig"),uWr.forEach(t),RWe=r(P0e," (FLAVA model)"),P0e.forEach(t),PWe=i(L),om=n(L,"LI",{});var B0e=s(om);wre=n(B0e,"STRONG",{});var bWr=s(wre);BWe=r(bWr,"fnet"),bWr.forEach(t),IWe=r(B0e," \u2014 "),zk=n(B0e,"A",{href:!0});var vWr=s(zk);NWe=r(vWr,"FNetConfig"),vWr.forEach(t),qWe=r(B0e," (FNet model)"),B0e.forEach(t),jWe=i(L),rm=n(L,"LI",{});var I0e=s(rm);Are=n(I0e,"STRONG",{});var FWr=s(Are);DWe=r(FWr,"fsmt"),FWr.forEach(t),GWe=r(I0e," \u2014 "),Wk=n(I0e,"A",{href:!0});var TWr=s(Wk);OWe=r(TWr,"FSMTConfig"),TWr.forEach(t),VWe=r(I0e," (FairSeq Machine-Translation model)"),I0e.forEach(t),XWe=i(L),tm=n(L,"LI",{});var N0e=s(tm);Lre=n(N0e,"STRONG",{});var MWr=s(Lre);zWe=r(MWr,"funnel"),MWr.forEach(t),WWe=r(N0e," \u2014 "),Qk=n(N0e,"A",{href:!0});var EWr=s(Qk);QWe=r(EWr,"FunnelConfig"),EWr.forEach(t),HWe=r(N0e," (Funnel Transformer model)"),N0e.forEach(t),UWe=i(L),am=n(L,"LI",{});var q0e=s(am);yre=n(q0e,"STRONG",{});var CWr=s(yre);JWe=r(CWr,"glpn"),CWr.forEach(t),YWe=r(q0e," \u2014 "),Hk=n(q0e,"A",{href:!0});var wWr=s(Hk);KWe=r(wWr,"GLPNConfig"),wWr.forEach(t),ZWe=r(q0e," (GLPN model)"),q0e.forEach(t),eQe=i(L),nm=n(L,"LI",{});var j0e=s(nm);xre=n(j0e,"STRONG",{});var AWr=s(xre);oQe=r(AWr,"gpt2"),AWr.forEach(t),rQe=r(j0e," \u2014 "),Uk=n(j0e,"A",{href:!0});var LWr=s(Uk);tQe=r(LWr,"GPT2Config"),LWr.forEach(t),aQe=r(j0e," (OpenAI GPT-2 model)"),j0e.forEach(t),nQe=i(L),sm=n(L,"LI",{});var D0e=s(sm);$re=n(D0e,"STRONG",{});var yWr=s($re);sQe=r(yWr,"gpt_neo"),yWr.forEach(t),lQe=r(D0e," \u2014 "),Jk=n(D0e,"A",{href:!0});var xWr=s(Jk);iQe=r(xWr,"GPTNeoConfig"),xWr.forEach(t),dQe=r(D0e," (GPT Neo model)"),D0e.forEach(t),cQe=i(L),lm=n(L,"LI",{});var G0e=s(lm);kre=n(G0e,"STRONG",{});var $Wr=s(kre);fQe=r($Wr,"gpt_neox"),$Wr.forEach(t),mQe=r(G0e," \u2014 "),Yk=n(G0e,"A",{href:!0});var kWr=s(Yk);gQe=r(kWr,"GPTNeoXConfig"),kWr.forEach(t),hQe=r(G0e," (GPT NeoX model)"),G0e.forEach(t),pQe=i(L),im=n(L,"LI",{});var O0e=s(im);Sre=n(O0e,"STRONG",{});var SWr=s(Sre);_Qe=r(SWr,"gptj"),SWr.forEach(t),uQe=r(O0e," \u2014 "),Kk=n(O0e,"A",{href:!0});var RWr=s(Kk);bQe=r(RWr,"GPTJConfig"),RWr.forEach(t),vQe=r(O0e," (GPT-J model)"),O0e.forEach(t),FQe=i(L),dm=n(L,"LI",{});var V0e=s(dm);Rre=n(V0e,"STRONG",{});var PWr=s(Rre);TQe=r(PWr,"groupvit"),PWr.forEach(t),MQe=r(V0e," \u2014 "),Zk=n(V0e,"A",{href:!0});var BWr=s(Zk);EQe=r(BWr,"GroupViTConfig"),BWr.forEach(t),CQe=r(V0e," (GroupViT model)"),V0e.forEach(t),wQe=i(L),cm=n(L,"LI",{});var X0e=s(cm);Pre=n(X0e,"STRONG",{});var IWr=s(Pre);AQe=r(IWr,"hubert"),IWr.forEach(t),LQe=r(X0e," \u2014 "),eS=n(X0e,"A",{href:!0});var NWr=s(eS);yQe=r(NWr,"HubertConfig"),NWr.forEach(t),xQe=r(X0e," (Hubert model)"),X0e.forEach(t),$Qe=i(L),fm=n(L,"LI",{});var z0e=s(fm);Bre=n(z0e,"STRONG",{});var qWr=s(Bre);kQe=r(qWr,"ibert"),qWr.forEach(t),SQe=r(z0e," \u2014 "),oS=n(z0e,"A",{href:!0});var jWr=s(oS);RQe=r(jWr,"IBertConfig"),jWr.forEach(t),PQe=r(z0e," (I-BERT model)"),z0e.forEach(t),BQe=i(L),mm=n(L,"LI",{});var W0e=s(mm);Ire=n(W0e,"STRONG",{});var DWr=s(Ire);IQe=r(DWr,"imagegpt"),DWr.forEach(t),NQe=r(W0e," \u2014 "),rS=n(W0e,"A",{href:!0});var GWr=s(rS);qQe=r(GWr,"ImageGPTConfig"),GWr.forEach(t),jQe=r(W0e," (ImageGPT model)"),W0e.forEach(t),DQe=i(L),gm=n(L,"LI",{});var Q0e=s(gm);Nre=n(Q0e,"STRONG",{});var OWr=s(Nre);GQe=r(OWr,"layoutlm"),OWr.forEach(t),OQe=r(Q0e," \u2014 "),tS=n(Q0e,"A",{href:!0});var VWr=s(tS);VQe=r(VWr,"LayoutLMConfig"),VWr.forEach(t),XQe=r(Q0e," (LayoutLM model)"),Q0e.forEach(t),zQe=i(L),hm=n(L,"LI",{});var H0e=s(hm);qre=n(H0e,"STRONG",{});var XWr=s(qre);WQe=r(XWr,"layoutlmv2"),XWr.forEach(t),QQe=r(H0e," \u2014 "),aS=n(H0e,"A",{href:!0});var zWr=s(aS);HQe=r(zWr,"LayoutLMv2Config"),zWr.forEach(t),UQe=r(H0e," (LayoutLMv2 model)"),H0e.forEach(t),JQe=i(L),pm=n(L,"LI",{});var U0e=s(pm);jre=n(U0e,"STRONG",{});var WWr=s(jre);YQe=r(WWr,"layoutlmv3"),WWr.forEach(t),KQe=r(U0e," \u2014 "),nS=n(U0e,"A",{href:!0});var QWr=s(nS);ZQe=r(QWr,"LayoutLMv3Config"),QWr.forEach(t),eHe=r(U0e," (LayoutLMv3 model)"),U0e.forEach(t),oHe=i(L),_m=n(L,"LI",{});var J0e=s(_m);Dre=n(J0e,"STRONG",{});var HWr=s(Dre);rHe=r(HWr,"led"),HWr.forEach(t),tHe=r(J0e," \u2014 "),sS=n(J0e,"A",{href:!0});var UWr=s(sS);aHe=r(UWr,"LEDConfig"),UWr.forEach(t),nHe=r(J0e," (LED model)"),J0e.forEach(t),sHe=i(L),um=n(L,"LI",{});var Y0e=s(um);Gre=n(Y0e,"STRONG",{});var JWr=s(Gre);lHe=r(JWr,"levit"),JWr.forEach(t),iHe=r(Y0e," \u2014 "),lS=n(Y0e,"A",{href:!0});var YWr=s(lS);dHe=r(YWr,"LevitConfig"),YWr.forEach(t),cHe=r(Y0e," (LeViT model)"),Y0e.forEach(t),fHe=i(L),bm=n(L,"LI",{});var K0e=s(bm);Ore=n(K0e,"STRONG",{});var KWr=s(Ore);mHe=r(KWr,"longformer"),KWr.forEach(t),gHe=r(K0e," \u2014 "),iS=n(K0e,"A",{href:!0});var ZWr=s(iS);hHe=r(ZWr,"LongformerConfig"),ZWr.forEach(t),pHe=r(K0e," (Longformer model)"),K0e.forEach(t),_He=i(L),vm=n(L,"LI",{});var Z0e=s(vm);Vre=n(Z0e,"STRONG",{});var eQr=s(Vre);uHe=r(eQr,"luke"),eQr.forEach(t),bHe=r(Z0e," \u2014 "),dS=n(Z0e,"A",{href:!0});var oQr=s(dS);vHe=r(oQr,"LukeConfig"),oQr.forEach(t),FHe=r(Z0e," (LUKE model)"),Z0e.forEach(t),THe=i(L),Fm=n(L,"LI",{});var ewe=s(Fm);Xre=n(ewe,"STRONG",{});var rQr=s(Xre);MHe=r(rQr,"lxmert"),rQr.forEach(t),EHe=r(ewe," \u2014 "),cS=n(ewe,"A",{href:!0});var tQr=s(cS);CHe=r(tQr,"LxmertConfig"),tQr.forEach(t),wHe=r(ewe," (LXMERT model)"),ewe.forEach(t),AHe=i(L),Tm=n(L,"LI",{});var owe=s(Tm);zre=n(owe,"STRONG",{});var aQr=s(zre);LHe=r(aQr,"m2m_100"),aQr.forEach(t),yHe=r(owe," \u2014 "),fS=n(owe,"A",{href:!0});var nQr=s(fS);xHe=r(nQr,"M2M100Config"),nQr.forEach(t),$He=r(owe," (M2M100 model)"),owe.forEach(t),kHe=i(L),Mm=n(L,"LI",{});var rwe=s(Mm);Wre=n(rwe,"STRONG",{});var sQr=s(Wre);SHe=r(sQr,"marian"),sQr.forEach(t),RHe=r(rwe," \u2014 "),mS=n(rwe,"A",{href:!0});var lQr=s(mS);PHe=r(lQr,"MarianConfig"),lQr.forEach(t),BHe=r(rwe," (Marian model)"),rwe.forEach(t),IHe=i(L),Em=n(L,"LI",{});var twe=s(Em);Qre=n(twe,"STRONG",{});var iQr=s(Qre);NHe=r(iQr,"maskformer"),iQr.forEach(t),qHe=r(twe," \u2014 "),gS=n(twe,"A",{href:!0});var dQr=s(gS);jHe=r(dQr,"MaskFormerConfig"),dQr.forEach(t),DHe=r(twe," (MaskFormer model)"),twe.forEach(t),GHe=i(L),Cm=n(L,"LI",{});var awe=s(Cm);Hre=n(awe,"STRONG",{});var cQr=s(Hre);OHe=r(cQr,"mbart"),cQr.forEach(t),VHe=r(awe," \u2014 "),hS=n(awe,"A",{href:!0});var fQr=s(hS);XHe=r(fQr,"MBartConfig"),fQr.forEach(t),zHe=r(awe," (mBART model)"),awe.forEach(t),WHe=i(L),wm=n(L,"LI",{});var nwe=s(wm);Ure=n(nwe,"STRONG",{});var mQr=s(Ure);QHe=r(mQr,"megatron-bert"),mQr.forEach(t),HHe=r(nwe," \u2014 "),pS=n(nwe,"A",{href:!0});var gQr=s(pS);UHe=r(gQr,"MegatronBertConfig"),gQr.forEach(t),JHe=r(nwe," (Megatron-BERT model)"),nwe.forEach(t),YHe=i(L),Am=n(L,"LI",{});var swe=s(Am);Jre=n(swe,"STRONG",{});var hQr=s(Jre);KHe=r(hQr,"mobilebert"),hQr.forEach(t),ZHe=r(swe," \u2014 "),_S=n(swe,"A",{href:!0});var pQr=s(_S);eUe=r(pQr,"MobileBertConfig"),pQr.forEach(t),oUe=r(swe," (MobileBERT model)"),swe.forEach(t),rUe=i(L),Lm=n(L,"LI",{});var lwe=s(Lm);Yre=n(lwe,"STRONG",{});var _Qr=s(Yre);tUe=r(_Qr,"mpnet"),_Qr.forEach(t),aUe=r(lwe," \u2014 "),uS=n(lwe,"A",{href:!0});var uQr=s(uS);nUe=r(uQr,"MPNetConfig"),uQr.forEach(t),sUe=r(lwe," (MPNet model)"),lwe.forEach(t),lUe=i(L),ym=n(L,"LI",{});var iwe=s(ym);Kre=n(iwe,"STRONG",{});var bQr=s(Kre);iUe=r(bQr,"mt5"),bQr.forEach(t),dUe=r(iwe," \u2014 "),bS=n(iwe,"A",{href:!0});var vQr=s(bS);cUe=r(vQr,"MT5Config"),vQr.forEach(t),fUe=r(iwe," (MT5 model)"),iwe.forEach(t),mUe=i(L),xm=n(L,"LI",{});var dwe=s(xm);Zre=n(dwe,"STRONG",{});var FQr=s(Zre);gUe=r(FQr,"nystromformer"),FQr.forEach(t),hUe=r(dwe," \u2014 "),vS=n(dwe,"A",{href:!0});var TQr=s(vS);pUe=r(TQr,"NystromformerConfig"),TQr.forEach(t),_Ue=r(dwe," (Nystr\xF6mformer model)"),dwe.forEach(t),uUe=i(L),$m=n(L,"LI",{});var cwe=s($m);ete=n(cwe,"STRONG",{});var MQr=s(ete);bUe=r(MQr,"openai-gpt"),MQr.forEach(t),vUe=r(cwe," \u2014 "),FS=n(cwe,"A",{href:!0});var EQr=s(FS);FUe=r(EQr,"OpenAIGPTConfig"),EQr.forEach(t),TUe=r(cwe," (OpenAI GPT model)"),cwe.forEach(t),MUe=i(L),km=n(L,"LI",{});var fwe=s(km);ote=n(fwe,"STRONG",{});var CQr=s(ote);EUe=r(CQr,"opt"),CQr.forEach(t),CUe=r(fwe," \u2014 "),TS=n(fwe,"A",{href:!0});var wQr=s(TS);wUe=r(wQr,"OPTConfig"),wQr.forEach(t),AUe=r(fwe," (OPT model)"),fwe.forEach(t),LUe=i(L),Sm=n(L,"LI",{});var mwe=s(Sm);rte=n(mwe,"STRONG",{});var AQr=s(rte);yUe=r(AQr,"pegasus"),AQr.forEach(t),xUe=r(mwe," \u2014 "),MS=n(mwe,"A",{href:!0});var LQr=s(MS);$Ue=r(LQr,"PegasusConfig"),LQr.forEach(t),kUe=r(mwe," (Pegasus model)"),mwe.forEach(t),SUe=i(L),Rm=n(L,"LI",{});var gwe=s(Rm);tte=n(gwe,"STRONG",{});var yQr=s(tte);RUe=r(yQr,"perceiver"),yQr.forEach(t),PUe=r(gwe," \u2014 "),ES=n(gwe,"A",{href:!0});var xQr=s(ES);BUe=r(xQr,"PerceiverConfig"),xQr.forEach(t),IUe=r(gwe," (Perceiver model)"),gwe.forEach(t),NUe=i(L),Pm=n(L,"LI",{});var hwe=s(Pm);ate=n(hwe,"STRONG",{});var $Qr=s(ate);qUe=r($Qr,"plbart"),$Qr.forEach(t),jUe=r(hwe," \u2014 "),CS=n(hwe,"A",{href:!0});var kQr=s(CS);DUe=r(kQr,"PLBartConfig"),kQr.forEach(t),GUe=r(hwe," (PLBart model)"),hwe.forEach(t),OUe=i(L),Bm=n(L,"LI",{});var pwe=s(Bm);nte=n(pwe,"STRONG",{});var SQr=s(nte);VUe=r(SQr,"poolformer"),SQr.forEach(t),XUe=r(pwe," \u2014 "),wS=n(pwe,"A",{href:!0});var RQr=s(wS);zUe=r(RQr,"PoolFormerConfig"),RQr.forEach(t),WUe=r(pwe," (PoolFormer model)"),pwe.forEach(t),QUe=i(L),Im=n(L,"LI",{});var _we=s(Im);ste=n(_we,"STRONG",{});var PQr=s(ste);HUe=r(PQr,"prophetnet"),PQr.forEach(t),UUe=r(_we," \u2014 "),AS=n(_we,"A",{href:!0});var BQr=s(AS);JUe=r(BQr,"ProphetNetConfig"),BQr.forEach(t),YUe=r(_we," (ProphetNet model)"),_we.forEach(t),KUe=i(L),Nm=n(L,"LI",{});var uwe=s(Nm);lte=n(uwe,"STRONG",{});var IQr=s(lte);ZUe=r(IQr,"qdqbert"),IQr.forEach(t),eJe=r(uwe," \u2014 "),LS=n(uwe,"A",{href:!0});var NQr=s(LS);oJe=r(NQr,"QDQBertConfig"),NQr.forEach(t),rJe=r(uwe," (QDQBert model)"),uwe.forEach(t),tJe=i(L),qm=n(L,"LI",{});var bwe=s(qm);ite=n(bwe,"STRONG",{});var qQr=s(ite);aJe=r(qQr,"rag"),qQr.forEach(t),nJe=r(bwe," \u2014 "),yS=n(bwe,"A",{href:!0});var jQr=s(yS);sJe=r(jQr,"RagConfig"),jQr.forEach(t),lJe=r(bwe," (RAG model)"),bwe.forEach(t),iJe=i(L),jm=n(L,"LI",{});var vwe=s(jm);dte=n(vwe,"STRONG",{});var DQr=s(dte);dJe=r(DQr,"realm"),DQr.forEach(t),cJe=r(vwe," \u2014 "),xS=n(vwe,"A",{href:!0});var GQr=s(xS);fJe=r(GQr,"RealmConfig"),GQr.forEach(t),mJe=r(vwe," (REALM model)"),vwe.forEach(t),gJe=i(L),Dm=n(L,"LI",{});var Fwe=s(Dm);cte=n(Fwe,"STRONG",{});var OQr=s(cte);hJe=r(OQr,"reformer"),OQr.forEach(t),pJe=r(Fwe," \u2014 "),$S=n(Fwe,"A",{href:!0});var VQr=s($S);_Je=r(VQr,"ReformerConfig"),VQr.forEach(t),uJe=r(Fwe," (Reformer model)"),Fwe.forEach(t),bJe=i(L),Gm=n(L,"LI",{});var Twe=s(Gm);fte=n(Twe,"STRONG",{});var XQr=s(fte);vJe=r(XQr,"regnet"),XQr.forEach(t),FJe=r(Twe," \u2014 "),kS=n(Twe,"A",{href:!0});var zQr=s(kS);TJe=r(zQr,"RegNetConfig"),zQr.forEach(t),MJe=r(Twe," (RegNet model)"),Twe.forEach(t),EJe=i(L),Om=n(L,"LI",{});var Mwe=s(Om);mte=n(Mwe,"STRONG",{});var WQr=s(mte);CJe=r(WQr,"rembert"),WQr.forEach(t),wJe=r(Mwe," \u2014 "),SS=n(Mwe,"A",{href:!0});var QQr=s(SS);AJe=r(QQr,"RemBertConfig"),QQr.forEach(t),LJe=r(Mwe," (RemBERT model)"),Mwe.forEach(t),yJe=i(L),Vm=n(L,"LI",{});var Ewe=s(Vm);gte=n(Ewe,"STRONG",{});var HQr=s(gte);xJe=r(HQr,"resnet"),HQr.forEach(t),$Je=r(Ewe," \u2014 "),RS=n(Ewe,"A",{href:!0});var UQr=s(RS);kJe=r(UQr,"ResNetConfig"),UQr.forEach(t),SJe=r(Ewe," (ResNet model)"),Ewe.forEach(t),RJe=i(L),Xm=n(L,"LI",{});var Cwe=s(Xm);hte=n(Cwe,"STRONG",{});var JQr=s(hte);PJe=r(JQr,"retribert"),JQr.forEach(t),BJe=r(Cwe," \u2014 "),PS=n(Cwe,"A",{href:!0});var YQr=s(PS);IJe=r(YQr,"RetriBertConfig"),YQr.forEach(t),NJe=r(Cwe," (RetriBERT model)"),Cwe.forEach(t),qJe=i(L),zm=n(L,"LI",{});var wwe=s(zm);pte=n(wwe,"STRONG",{});var KQr=s(pte);jJe=r(KQr,"roberta"),KQr.forEach(t),DJe=r(wwe," \u2014 "),BS=n(wwe,"A",{href:!0});var ZQr=s(BS);GJe=r(ZQr,"RobertaConfig"),ZQr.forEach(t),OJe=r(wwe," (RoBERTa model)"),wwe.forEach(t),VJe=i(L),Wm=n(L,"LI",{});var Awe=s(Wm);_te=n(Awe,"STRONG",{});var eHr=s(_te);XJe=r(eHr,"roformer"),eHr.forEach(t),zJe=r(Awe," \u2014 "),IS=n(Awe,"A",{href:!0});var oHr=s(IS);WJe=r(oHr,"RoFormerConfig"),oHr.forEach(t),QJe=r(Awe," (RoFormer model)"),Awe.forEach(t),HJe=i(L),Qm=n(L,"LI",{});var Lwe=s(Qm);ute=n(Lwe,"STRONG",{});var rHr=s(ute);UJe=r(rHr,"segformer"),rHr.forEach(t),JJe=r(Lwe," \u2014 "),NS=n(Lwe,"A",{href:!0});var tHr=s(NS);YJe=r(tHr,"SegformerConfig"),tHr.forEach(t),KJe=r(Lwe," (SegFormer model)"),Lwe.forEach(t),ZJe=i(L),Hm=n(L,"LI",{});var ywe=s(Hm);bte=n(ywe,"STRONG",{});var aHr=s(bte);eYe=r(aHr,"sew"),aHr.forEach(t),oYe=r(ywe," \u2014 "),qS=n(ywe,"A",{href:!0});var nHr=s(qS);rYe=r(nHr,"SEWConfig"),nHr.forEach(t),tYe=r(ywe," (SEW model)"),ywe.forEach(t),aYe=i(L),Um=n(L,"LI",{});var xwe=s(Um);vte=n(xwe,"STRONG",{});var sHr=s(vte);nYe=r(sHr,"sew-d"),sHr.forEach(t),sYe=r(xwe," \u2014 "),jS=n(xwe,"A",{href:!0});var lHr=s(jS);lYe=r(lHr,"SEWDConfig"),lHr.forEach(t),iYe=r(xwe," (SEW-D model)"),xwe.forEach(t),dYe=i(L),Jm=n(L,"LI",{});var $we=s(Jm);Fte=n($we,"STRONG",{});var iHr=s(Fte);cYe=r(iHr,"speech-encoder-decoder"),iHr.forEach(t),fYe=r($we," \u2014 "),DS=n($we,"A",{href:!0});var dHr=s(DS);mYe=r(dHr,"SpeechEncoderDecoderConfig"),dHr.forEach(t),gYe=r($we," (Speech Encoder decoder model)"),$we.forEach(t),hYe=i(L),Ym=n(L,"LI",{});var kwe=s(Ym);Tte=n(kwe,"STRONG",{});var cHr=s(Tte);pYe=r(cHr,"speech_to_text"),cHr.forEach(t),_Ye=r(kwe," \u2014 "),GS=n(kwe,"A",{href:!0});var fHr=s(GS);uYe=r(fHr,"Speech2TextConfig"),fHr.forEach(t),bYe=r(kwe," (Speech2Text model)"),kwe.forEach(t),vYe=i(L),Km=n(L,"LI",{});var Swe=s(Km);Mte=n(Swe,"STRONG",{});var mHr=s(Mte);FYe=r(mHr,"speech_to_text_2"),mHr.forEach(t),TYe=r(Swe," \u2014 "),OS=n(Swe,"A",{href:!0});var gHr=s(OS);MYe=r(gHr,"Speech2Text2Config"),gHr.forEach(t),EYe=r(Swe," (Speech2Text2 model)"),Swe.forEach(t),CYe=i(L),Zm=n(L,"LI",{});var Rwe=s(Zm);Ete=n(Rwe,"STRONG",{});var hHr=s(Ete);wYe=r(hHr,"splinter"),hHr.forEach(t),AYe=r(Rwe," \u2014 "),VS=n(Rwe,"A",{href:!0});var pHr=s(VS);LYe=r(pHr,"SplinterConfig"),pHr.forEach(t),yYe=r(Rwe," (Splinter model)"),Rwe.forEach(t),xYe=i(L),eg=n(L,"LI",{});var Pwe=s(eg);Cte=n(Pwe,"STRONG",{});var _Hr=s(Cte);$Ye=r(_Hr,"squeezebert"),_Hr.forEach(t),kYe=r(Pwe," \u2014 "),XS=n(Pwe,"A",{href:!0});var uHr=s(XS);SYe=r(uHr,"SqueezeBertConfig"),uHr.forEach(t),RYe=r(Pwe," (SqueezeBERT model)"),Pwe.forEach(t),PYe=i(L),og=n(L,"LI",{});var Bwe=s(og);wte=n(Bwe,"STRONG",{});var bHr=s(wte);BYe=r(bHr,"swin"),bHr.forEach(t),IYe=r(Bwe," \u2014 "),zS=n(Bwe,"A",{href:!0});var vHr=s(zS);NYe=r(vHr,"SwinConfig"),vHr.forEach(t),qYe=r(Bwe," (Swin Transformer model)"),Bwe.forEach(t),jYe=i(L),rg=n(L,"LI",{});var Iwe=s(rg);Ate=n(Iwe,"STRONG",{});var FHr=s(Ate);DYe=r(FHr,"t5"),FHr.forEach(t),GYe=r(Iwe," \u2014 "),WS=n(Iwe,"A",{href:!0});var THr=s(WS);OYe=r(THr,"T5Config"),THr.forEach(t),VYe=r(Iwe," (T5 model)"),Iwe.forEach(t),XYe=i(L),tg=n(L,"LI",{});var Nwe=s(tg);Lte=n(Nwe,"STRONG",{});var MHr=s(Lte);zYe=r(MHr,"tapas"),MHr.forEach(t),WYe=r(Nwe," \u2014 "),QS=n(Nwe,"A",{href:!0});var EHr=s(QS);QYe=r(EHr,"TapasConfig"),EHr.forEach(t),HYe=r(Nwe," (TAPAS model)"),Nwe.forEach(t),UYe=i(L),ag=n(L,"LI",{});var qwe=s(ag);yte=n(qwe,"STRONG",{});var CHr=s(yte);JYe=r(CHr,"trajectory_transformer"),CHr.forEach(t),YYe=r(qwe," \u2014 "),HS=n(qwe,"A",{href:!0});var wHr=s(HS);KYe=r(wHr,"TrajectoryTransformerConfig"),wHr.forEach(t),ZYe=r(qwe," (Trajectory Transformer model)"),qwe.forEach(t),eKe=i(L),ng=n(L,"LI",{});var jwe=s(ng);xte=n(jwe,"STRONG",{});var AHr=s(xte);oKe=r(AHr,"transfo-xl"),AHr.forEach(t),rKe=r(jwe," \u2014 "),US=n(jwe,"A",{href:!0});var LHr=s(US);tKe=r(LHr,"TransfoXLConfig"),LHr.forEach(t),aKe=r(jwe," (Transformer-XL model)"),jwe.forEach(t),nKe=i(L),sg=n(L,"LI",{});var Dwe=s(sg);$te=n(Dwe,"STRONG",{});var yHr=s($te);sKe=r(yHr,"trocr"),yHr.forEach(t),lKe=r(Dwe," \u2014 "),JS=n(Dwe,"A",{href:!0});var xHr=s(JS);iKe=r(xHr,"TrOCRConfig"),xHr.forEach(t),dKe=r(Dwe," (TrOCR model)"),Dwe.forEach(t),cKe=i(L),lg=n(L,"LI",{});var Gwe=s(lg);kte=n(Gwe,"STRONG",{});var $Hr=s(kte);fKe=r($Hr,"unispeech"),$Hr.forEach(t),mKe=r(Gwe," \u2014 "),YS=n(Gwe,"A",{href:!0});var kHr=s(YS);gKe=r(kHr,"UniSpeechConfig"),kHr.forEach(t),hKe=r(Gwe," (UniSpeech model)"),Gwe.forEach(t),pKe=i(L),ig=n(L,"LI",{});var Owe=s(ig);Ste=n(Owe,"STRONG",{});var SHr=s(Ste);_Ke=r(SHr,"unispeech-sat"),SHr.forEach(t),uKe=r(Owe," \u2014 "),KS=n(Owe,"A",{href:!0});var RHr=s(KS);bKe=r(RHr,"UniSpeechSatConfig"),RHr.forEach(t),vKe=r(Owe," (UniSpeechSat model)"),Owe.forEach(t),FKe=i(L),dg=n(L,"LI",{});var Vwe=s(dg);Rte=n(Vwe,"STRONG",{});var PHr=s(Rte);TKe=r(PHr,"van"),PHr.forEach(t),MKe=r(Vwe," \u2014 "),ZS=n(Vwe,"A",{href:!0});var BHr=s(ZS);EKe=r(BHr,"VanConfig"),BHr.forEach(t),CKe=r(Vwe," (VAN model)"),Vwe.forEach(t),wKe=i(L),cg=n(L,"LI",{});var Xwe=s(cg);Pte=n(Xwe,"STRONG",{});var IHr=s(Pte);AKe=r(IHr,"vilt"),IHr.forEach(t),LKe=r(Xwe," \u2014 "),eR=n(Xwe,"A",{href:!0});var NHr=s(eR);yKe=r(NHr,"ViltConfig"),NHr.forEach(t),xKe=r(Xwe," (ViLT model)"),Xwe.forEach(t),$Ke=i(L),fg=n(L,"LI",{});var zwe=s(fg);Bte=n(zwe,"STRONG",{});var qHr=s(Bte);kKe=r(qHr,"vision-encoder-decoder"),qHr.forEach(t),SKe=r(zwe," \u2014 "),oR=n(zwe,"A",{href:!0});var jHr=s(oR);RKe=r(jHr,"VisionEncoderDecoderConfig"),jHr.forEach(t),PKe=r(zwe," (Vision Encoder decoder model)"),zwe.forEach(t),BKe=i(L),mg=n(L,"LI",{});var Wwe=s(mg);Ite=n(Wwe,"STRONG",{});var DHr=s(Ite);IKe=r(DHr,"vision-text-dual-encoder"),DHr.forEach(t),NKe=r(Wwe," \u2014 "),rR=n(Wwe,"A",{href:!0});var GHr=s(rR);qKe=r(GHr,"VisionTextDualEncoderConfig"),GHr.forEach(t),jKe=r(Wwe," (VisionTextDualEncoder model)"),Wwe.forEach(t),DKe=i(L),gg=n(L,"LI",{});var Qwe=s(gg);Nte=n(Qwe,"STRONG",{});var OHr=s(Nte);GKe=r(OHr,"visual_bert"),OHr.forEach(t),OKe=r(Qwe," \u2014 "),tR=n(Qwe,"A",{href:!0});var VHr=s(tR);VKe=r(VHr,"VisualBertConfig"),VHr.forEach(t),XKe=r(Qwe," (VisualBERT model)"),Qwe.forEach(t),zKe=i(L),hg=n(L,"LI",{});var Hwe=s(hg);qte=n(Hwe,"STRONG",{});var XHr=s(qte);WKe=r(XHr,"vit"),XHr.forEach(t),QKe=r(Hwe," \u2014 "),aR=n(Hwe,"A",{href:!0});var zHr=s(aR);HKe=r(zHr,"ViTConfig"),zHr.forEach(t),UKe=r(Hwe," (ViT model)"),Hwe.forEach(t),JKe=i(L),pg=n(L,"LI",{});var Uwe=s(pg);jte=n(Uwe,"STRONG",{});var WHr=s(jte);YKe=r(WHr,"vit_mae"),WHr.forEach(t),KKe=r(Uwe," \u2014 "),nR=n(Uwe,"A",{href:!0});var QHr=s(nR);ZKe=r(QHr,"ViTMAEConfig"),QHr.forEach(t),eZe=r(Uwe," (ViTMAE model)"),Uwe.forEach(t),oZe=i(L),_g=n(L,"LI",{});var Jwe=s(_g);Dte=n(Jwe,"STRONG",{});var HHr=s(Dte);rZe=r(HHr,"wav2vec2"),HHr.forEach(t),tZe=r(Jwe," \u2014 "),sR=n(Jwe,"A",{href:!0});var UHr=s(sR);aZe=r(UHr,"Wav2Vec2Config"),UHr.forEach(t),nZe=r(Jwe," (Wav2Vec2 model)"),Jwe.forEach(t),sZe=i(L),ug=n(L,"LI",{});var Ywe=s(ug);Gte=n(Ywe,"STRONG",{});var JHr=s(Gte);lZe=r(JHr,"wav2vec2-conformer"),JHr.forEach(t),iZe=r(Ywe," \u2014 "),lR=n(Ywe,"A",{href:!0});var YHr=s(lR);dZe=r(YHr,"Wav2Vec2ConformerConfig"),YHr.forEach(t),cZe=r(Ywe," (Wav2Vec2-Conformer model)"),Ywe.forEach(t),fZe=i(L),bg=n(L,"LI",{});var Kwe=s(bg);Ote=n(Kwe,"STRONG",{});var KHr=s(Ote);mZe=r(KHr,"wavlm"),KHr.forEach(t),gZe=r(Kwe," \u2014 "),iR=n(Kwe,"A",{href:!0});var ZHr=s(iR);hZe=r(ZHr,"WavLMConfig"),ZHr.forEach(t),pZe=r(Kwe," (WavLM model)"),Kwe.forEach(t),_Ze=i(L),vg=n(L,"LI",{});var Zwe=s(vg);Vte=n(Zwe,"STRONG",{});var eUr=s(Vte);uZe=r(eUr,"xglm"),eUr.forEach(t),bZe=r(Zwe," \u2014 "),dR=n(Zwe,"A",{href:!0});var oUr=s(dR);vZe=r(oUr,"XGLMConfig"),oUr.forEach(t),FZe=r(Zwe," (XGLM model)"),Zwe.forEach(t),TZe=i(L),Fg=n(L,"LI",{});var eAe=s(Fg);Xte=n(eAe,"STRONG",{});var rUr=s(Xte);MZe=r(rUr,"xlm"),rUr.forEach(t),EZe=r(eAe," \u2014 "),cR=n(eAe,"A",{href:!0});var tUr=s(cR);CZe=r(tUr,"XLMConfig"),tUr.forEach(t),wZe=r(eAe," (XLM model)"),eAe.forEach(t),AZe=i(L),Tg=n(L,"LI",{});var oAe=s(Tg);zte=n(oAe,"STRONG",{});var aUr=s(zte);LZe=r(aUr,"xlm-prophetnet"),aUr.forEach(t),yZe=r(oAe," \u2014 "),fR=n(oAe,"A",{href:!0});var nUr=s(fR);xZe=r(nUr,"XLMProphetNetConfig"),nUr.forEach(t),$Ze=r(oAe," (XLM-ProphetNet model)"),oAe.forEach(t),kZe=i(L),Mg=n(L,"LI",{});var rAe=s(Mg);Wte=n(rAe,"STRONG",{});var sUr=s(Wte);SZe=r(sUr,"xlm-roberta"),sUr.forEach(t),RZe=r(rAe," \u2014 "),mR=n(rAe,"A",{href:!0});var lUr=s(mR);PZe=r(lUr,"XLMRobertaConfig"),lUr.forEach(t),BZe=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),IZe=i(L),Eg=n(L,"LI",{});var tAe=s(Eg);Qte=n(tAe,"STRONG",{});var iUr=s(Qte);NZe=r(iUr,"xlm-roberta-xl"),iUr.forEach(t),qZe=r(tAe," \u2014 "),gR=n(tAe,"A",{href:!0});var dUr=s(gR);jZe=r(dUr,"XLMRobertaXLConfig"),dUr.forEach(t),DZe=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),GZe=i(L),Cg=n(L,"LI",{});var aAe=s(Cg);Hte=n(aAe,"STRONG",{});var cUr=s(Hte);OZe=r(cUr,"xlnet"),cUr.forEach(t),VZe=r(aAe," \u2014 "),hR=n(aAe,"A",{href:!0});var fUr=s(hR);XZe=r(fUr,"XLNetConfig"),fUr.forEach(t),zZe=r(aAe," (XLNet model)"),aAe.forEach(t),WZe=i(L),wg=n(L,"LI",{});var nAe=s(wg);Ute=n(nAe,"STRONG",{});var mUr=s(Ute);QZe=r(mUr,"yolos"),mUr.forEach(t),HZe=r(nAe," \u2014 "),pR=n(nAe,"A",{href:!0});var gUr=s(pR);UZe=r(gUr,"YolosConfig"),gUr.forEach(t),JZe=r(nAe," (YOLOS model)"),nAe.forEach(t),YZe=i(L),Ag=n(L,"LI",{});var sAe=s(Ag);Jte=n(sAe,"STRONG",{});var hUr=s(Jte);KZe=r(hUr,"yoso"),hUr.forEach(t),ZZe=r(sAe," \u2014 "),_R=n(sAe,"A",{href:!0});var pUr=s(_R);eeo=r(pUr,"YosoConfig"),pUr.forEach(t),oeo=r(sAe," (YOSO model)"),sAe.forEach(t),L.forEach(t),reo=i(ot),T(Lg.$$.fragment,ot),ot.forEach(t),teo=i(et),yg=n(et,"DIV",{class:!0});var sGe=s(yg);T(H6.$$.fragment,sGe),aeo=i(sGe),Yte=n(sGe,"P",{});var _Ur=s(Yte);neo=r(_Ur,"Register a new configuration for this class."),_Ur.forEach(t),sGe.forEach(t),et.forEach(t),dje=i(f),Ei=n(f,"H2",{class:!0});var lGe=s(Ei);xg=n(lGe,"A",{id:!0,class:!0,href:!0});var uUr=s(xg);Kte=n(uUr,"SPAN",{});var bUr=s(Kte);T(U6.$$.fragment,bUr),bUr.forEach(t),uUr.forEach(t),seo=i(lGe),Zte=n(lGe,"SPAN",{});var vUr=s(Zte);leo=r(vUr,"AutoTokenizer"),vUr.forEach(t),lGe.forEach(t),cje=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(J6.$$.fragment,js),ieo=i(js),Y6=n(js,"P",{});var iGe=s(Y6);deo=r(iGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uR=n(iGe,"A",{href:!0});var FUr=s(uR);ceo=r(FUr,"AutoTokenizer.from_pretrained()"),FUr.forEach(t),feo=r(iGe," class method."),iGe.forEach(t),meo=i(js),K6=n(js,"P",{});var dGe=s(K6);geo=r(dGe,"This class cannot be instantiated directly using "),eae=n(dGe,"CODE",{});var TUr=s(eae);heo=r(TUr,"__init__()"),TUr.forEach(t),peo=r(dGe," (throws an error)."),dGe.forEach(t),_eo=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(Z6.$$.fragment,Ds),ueo=i(Ds),oae=n(Ds,"P",{});var MUr=s(oae);beo=r(MUr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),MUr.forEach(t),veo=i(Ds),Aa=n(Ds,"P",{});var Vw=s(Aa);Feo=r(Vw,"The tokenizer class to instantiate is selected based on the "),rae=n(Vw,"CODE",{});var EUr=s(rae);Teo=r(EUr,"model_type"),EUr.forEach(t),Meo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),tae=n(Vw,"CODE",{});var CUr=s(tae);Eeo=r(CUr,"pretrained_model_name_or_path"),CUr.forEach(t),Ceo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=n(Vw,"CODE",{});var wUr=s(aae);weo=r(wUr,"pretrained_model_name_or_path"),wUr.forEach(t),Aeo=r(Vw,":"),Vw.forEach(t),Leo=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var e$=s(Sn);nae=n(e$,"STRONG",{});var AUr=s(nae);yeo=r(AUr,"albert"),AUr.forEach(t),xeo=r(e$," \u2014 "),bR=n(e$,"A",{href:!0});var LUr=s(bR);$eo=r(LUr,"AlbertTokenizer"),LUr.forEach(t),keo=r(e$," or "),vR=n(e$,"A",{href:!0});var yUr=s(vR);Seo=r(yUr,"AlbertTokenizerFast"),yUr.forEach(t),Reo=r(e$," (ALBERT model)"),e$.forEach(t),Peo=i(S),Rn=n(S,"LI",{});var o$=s(Rn);sae=n(o$,"STRONG",{});var xUr=s(sae);Beo=r(xUr,"bart"),xUr.forEach(t),Ieo=r(o$," \u2014 "),FR=n(o$,"A",{href:!0});var $Ur=s(FR);Neo=r($Ur,"BartTokenizer"),$Ur.forEach(t),qeo=r(o$," or "),TR=n(o$,"A",{href:!0});var kUr=s(TR);jeo=r(kUr,"BartTokenizerFast"),kUr.forEach(t),Deo=r(o$," (BART model)"),o$.forEach(t),Geo=i(S),Pn=n(S,"LI",{});var r$=s(Pn);lae=n(r$,"STRONG",{});var SUr=s(lae);Oeo=r(SUr,"barthez"),SUr.forEach(t),Veo=r(r$," \u2014 "),MR=n(r$,"A",{href:!0});var RUr=s(MR);Xeo=r(RUr,"BarthezTokenizer"),RUr.forEach(t),zeo=r(r$," or "),ER=n(r$,"A",{href:!0});var PUr=s(ER);Weo=r(PUr,"BarthezTokenizerFast"),PUr.forEach(t),Qeo=r(r$," (BARThez model)"),r$.forEach(t),Heo=i(S),$g=n(S,"LI",{});var lAe=s($g);iae=n(lAe,"STRONG",{});var BUr=s(iae);Ueo=r(BUr,"bartpho"),BUr.forEach(t),Jeo=r(lAe," \u2014 "),CR=n(lAe,"A",{href:!0});var IUr=s(CR);Yeo=r(IUr,"BartphoTokenizer"),IUr.forEach(t),Keo=r(lAe," (BARTpho model)"),lAe.forEach(t),Zeo=i(S),Bn=n(S,"LI",{});var t$=s(Bn);dae=n(t$,"STRONG",{});var NUr=s(dae);eoo=r(NUr,"bert"),NUr.forEach(t),ooo=r(t$," \u2014 "),wR=n(t$,"A",{href:!0});var qUr=s(wR);roo=r(qUr,"BertTokenizer"),qUr.forEach(t),too=r(t$," or "),AR=n(t$,"A",{href:!0});var jUr=s(AR);aoo=r(jUr,"BertTokenizerFast"),jUr.forEach(t),noo=r(t$," (BERT model)"),t$.forEach(t),soo=i(S),kg=n(S,"LI",{});var iAe=s(kg);cae=n(iAe,"STRONG",{});var DUr=s(cae);loo=r(DUr,"bert-generation"),DUr.forEach(t),ioo=r(iAe," \u2014 "),LR=n(iAe,"A",{href:!0});var GUr=s(LR);doo=r(GUr,"BertGenerationTokenizer"),GUr.forEach(t),coo=r(iAe," (Bert Generation model)"),iAe.forEach(t),foo=i(S),Sg=n(S,"LI",{});var dAe=s(Sg);fae=n(dAe,"STRONG",{});var OUr=s(fae);moo=r(OUr,"bert-japanese"),OUr.forEach(t),goo=r(dAe," \u2014 "),yR=n(dAe,"A",{href:!0});var VUr=s(yR);hoo=r(VUr,"BertJapaneseTokenizer"),VUr.forEach(t),poo=r(dAe," (BertJapanese model)"),dAe.forEach(t),_oo=i(S),Rg=n(S,"LI",{});var cAe=s(Rg);mae=n(cAe,"STRONG",{});var XUr=s(mae);uoo=r(XUr,"bertweet"),XUr.forEach(t),boo=r(cAe," \u2014 "),xR=n(cAe,"A",{href:!0});var zUr=s(xR);voo=r(zUr,"BertweetTokenizer"),zUr.forEach(t),Foo=r(cAe," (BERTweet model)"),cAe.forEach(t),Too=i(S),In=n(S,"LI",{});var a$=s(In);gae=n(a$,"STRONG",{});var WUr=s(gae);Moo=r(WUr,"big_bird"),WUr.forEach(t),Eoo=r(a$," \u2014 "),$R=n(a$,"A",{href:!0});var QUr=s($R);Coo=r(QUr,"BigBirdTokenizer"),QUr.forEach(t),woo=r(a$," or "),kR=n(a$,"A",{href:!0});var HUr=s(kR);Aoo=r(HUr,"BigBirdTokenizerFast"),HUr.forEach(t),Loo=r(a$," (BigBird model)"),a$.forEach(t),yoo=i(S),Nn=n(S,"LI",{});var n$=s(Nn);hae=n(n$,"STRONG",{});var UUr=s(hae);xoo=r(UUr,"bigbird_pegasus"),UUr.forEach(t),$oo=r(n$," \u2014 "),SR=n(n$,"A",{href:!0});var JUr=s(SR);koo=r(JUr,"PegasusTokenizer"),JUr.forEach(t),Soo=r(n$," or "),RR=n(n$,"A",{href:!0});var YUr=s(RR);Roo=r(YUr,"PegasusTokenizerFast"),YUr.forEach(t),Poo=r(n$," (BigBird-Pegasus model)"),n$.forEach(t),Boo=i(S),qn=n(S,"LI",{});var s$=s(qn);pae=n(s$,"STRONG",{});var KUr=s(pae);Ioo=r(KUr,"blenderbot"),KUr.forEach(t),Noo=r(s$," \u2014 "),PR=n(s$,"A",{href:!0});var ZUr=s(PR);qoo=r(ZUr,"BlenderbotTokenizer"),ZUr.forEach(t),joo=r(s$," or "),BR=n(s$,"A",{href:!0});var eJr=s(BR);Doo=r(eJr,"BlenderbotTokenizerFast"),eJr.forEach(t),Goo=r(s$," (Blenderbot model)"),s$.forEach(t),Ooo=i(S),Pg=n(S,"LI",{});var fAe=s(Pg);_ae=n(fAe,"STRONG",{});var oJr=s(_ae);Voo=r(oJr,"blenderbot-small"),oJr.forEach(t),Xoo=r(fAe," \u2014 "),IR=n(fAe,"A",{href:!0});var rJr=s(IR);zoo=r(rJr,"BlenderbotSmallTokenizer"),rJr.forEach(t),Woo=r(fAe," (BlenderbotSmall model)"),fAe.forEach(t),Qoo=i(S),Bg=n(S,"LI",{});var mAe=s(Bg);uae=n(mAe,"STRONG",{});var tJr=s(uae);Hoo=r(tJr,"byt5"),tJr.forEach(t),Uoo=r(mAe," \u2014 "),NR=n(mAe,"A",{href:!0});var aJr=s(NR);Joo=r(aJr,"ByT5Tokenizer"),aJr.forEach(t),Yoo=r(mAe," (ByT5 model)"),mAe.forEach(t),Koo=i(S),jn=n(S,"LI",{});var l$=s(jn);bae=n(l$,"STRONG",{});var nJr=s(bae);Zoo=r(nJr,"camembert"),nJr.forEach(t),ero=r(l$," \u2014 "),qR=n(l$,"A",{href:!0});var sJr=s(qR);oro=r(sJr,"CamembertTokenizer"),sJr.forEach(t),rro=r(l$," or "),jR=n(l$,"A",{href:!0});var lJr=s(jR);tro=r(lJr,"CamembertTokenizerFast"),lJr.forEach(t),aro=r(l$," (CamemBERT model)"),l$.forEach(t),nro=i(S),Ig=n(S,"LI",{});var gAe=s(Ig);vae=n(gAe,"STRONG",{});var iJr=s(vae);sro=r(iJr,"canine"),iJr.forEach(t),lro=r(gAe," \u2014 "),DR=n(gAe,"A",{href:!0});var dJr=s(DR);iro=r(dJr,"CanineTokenizer"),dJr.forEach(t),dro=r(gAe," (CANINE model)"),gAe.forEach(t),cro=i(S),Dn=n(S,"LI",{});var i$=s(Dn);Fae=n(i$,"STRONG",{});var cJr=s(Fae);fro=r(cJr,"clip"),cJr.forEach(t),mro=r(i$," \u2014 "),GR=n(i$,"A",{href:!0});var fJr=s(GR);gro=r(fJr,"CLIPTokenizer"),fJr.forEach(t),hro=r(i$," or "),OR=n(i$,"A",{href:!0});var mJr=s(OR);pro=r(mJr,"CLIPTokenizerFast"),mJr.forEach(t),_ro=r(i$," (CLIP model)"),i$.forEach(t),uro=i(S),Gn=n(S,"LI",{});var d$=s(Gn);Tae=n(d$,"STRONG",{});var gJr=s(Tae);bro=r(gJr,"convbert"),gJr.forEach(t),vro=r(d$," \u2014 "),VR=n(d$,"A",{href:!0});var hJr=s(VR);Fro=r(hJr,"ConvBertTokenizer"),hJr.forEach(t),Tro=r(d$," or "),XR=n(d$,"A",{href:!0});var pJr=s(XR);Mro=r(pJr,"ConvBertTokenizerFast"),pJr.forEach(t),Ero=r(d$," (ConvBERT model)"),d$.forEach(t),Cro=i(S),On=n(S,"LI",{});var c$=s(On);Mae=n(c$,"STRONG",{});var _Jr=s(Mae);wro=r(_Jr,"cpm"),_Jr.forEach(t),Aro=r(c$," \u2014 "),zR=n(c$,"A",{href:!0});var uJr=s(zR);Lro=r(uJr,"CpmTokenizer"),uJr.forEach(t),yro=r(c$," or "),WR=n(c$,"A",{href:!0});var bJr=s(WR);xro=r(bJr,"CpmTokenizerFast"),bJr.forEach(t),$ro=r(c$," (CPM model)"),c$.forEach(t),kro=i(S),Ng=n(S,"LI",{});var hAe=s(Ng);Eae=n(hAe,"STRONG",{});var vJr=s(Eae);Sro=r(vJr,"ctrl"),vJr.forEach(t),Rro=r(hAe," \u2014 "),QR=n(hAe,"A",{href:!0});var FJr=s(QR);Pro=r(FJr,"CTRLTokenizer"),FJr.forEach(t),Bro=r(hAe," (CTRL model)"),hAe.forEach(t),Iro=i(S),Vn=n(S,"LI",{});var f$=s(Vn);Cae=n(f$,"STRONG",{});var TJr=s(Cae);Nro=r(TJr,"data2vec-text"),TJr.forEach(t),qro=r(f$," \u2014 "),HR=n(f$,"A",{href:!0});var MJr=s(HR);jro=r(MJr,"RobertaTokenizer"),MJr.forEach(t),Dro=r(f$," or "),UR=n(f$,"A",{href:!0});var EJr=s(UR);Gro=r(EJr,"RobertaTokenizerFast"),EJr.forEach(t),Oro=r(f$," (Data2VecText model)"),f$.forEach(t),Vro=i(S),Xn=n(S,"LI",{});var m$=s(Xn);wae=n(m$,"STRONG",{});var CJr=s(wae);Xro=r(CJr,"deberta"),CJr.forEach(t),zro=r(m$," \u2014 "),JR=n(m$,"A",{href:!0});var wJr=s(JR);Wro=r(wJr,"DebertaTokenizer"),wJr.forEach(t),Qro=r(m$," or "),YR=n(m$,"A",{href:!0});var AJr=s(YR);Hro=r(AJr,"DebertaTokenizerFast"),AJr.forEach(t),Uro=r(m$," (DeBERTa model)"),m$.forEach(t),Jro=i(S),zn=n(S,"LI",{});var g$=s(zn);Aae=n(g$,"STRONG",{});var LJr=s(Aae);Yro=r(LJr,"deberta-v2"),LJr.forEach(t),Kro=r(g$," \u2014 "),KR=n(g$,"A",{href:!0});var yJr=s(KR);Zro=r(yJr,"DebertaV2Tokenizer"),yJr.forEach(t),eto=r(g$," or "),ZR=n(g$,"A",{href:!0});var xJr=s(ZR);oto=r(xJr,"DebertaV2TokenizerFast"),xJr.forEach(t),rto=r(g$," (DeBERTa-v2 model)"),g$.forEach(t),tto=i(S),Wn=n(S,"LI",{});var h$=s(Wn);Lae=n(h$,"STRONG",{});var $Jr=s(Lae);ato=r($Jr,"distilbert"),$Jr.forEach(t),nto=r(h$," \u2014 "),eP=n(h$,"A",{href:!0});var kJr=s(eP);sto=r(kJr,"DistilBertTokenizer"),kJr.forEach(t),lto=r(h$," or "),oP=n(h$,"A",{href:!0});var SJr=s(oP);ito=r(SJr,"DistilBertTokenizerFast"),SJr.forEach(t),dto=r(h$," (DistilBERT model)"),h$.forEach(t),cto=i(S),Qn=n(S,"LI",{});var p$=s(Qn);yae=n(p$,"STRONG",{});var RJr=s(yae);fto=r(RJr,"dpr"),RJr.forEach(t),mto=r(p$," \u2014 "),rP=n(p$,"A",{href:!0});var PJr=s(rP);gto=r(PJr,"DPRQuestionEncoderTokenizer"),PJr.forEach(t),hto=r(p$," or "),tP=n(p$,"A",{href:!0});var BJr=s(tP);pto=r(BJr,"DPRQuestionEncoderTokenizerFast"),BJr.forEach(t),_to=r(p$," (DPR model)"),p$.forEach(t),uto=i(S),Hn=n(S,"LI",{});var _$=s(Hn);xae=n(_$,"STRONG",{});var IJr=s(xae);bto=r(IJr,"electra"),IJr.forEach(t),vto=r(_$," \u2014 "),aP=n(_$,"A",{href:!0});var NJr=s(aP);Fto=r(NJr,"ElectraTokenizer"),NJr.forEach(t),Tto=r(_$," or "),nP=n(_$,"A",{href:!0});var qJr=s(nP);Mto=r(qJr,"ElectraTokenizerFast"),qJr.forEach(t),Eto=r(_$," (ELECTRA model)"),_$.forEach(t),Cto=i(S),qg=n(S,"LI",{});var pAe=s(qg);$ae=n(pAe,"STRONG",{});var jJr=s($ae);wto=r(jJr,"flaubert"),jJr.forEach(t),Ato=r(pAe," \u2014 "),sP=n(pAe,"A",{href:!0});var DJr=s(sP);Lto=r(DJr,"FlaubertTokenizer"),DJr.forEach(t),yto=r(pAe," (FlauBERT model)"),pAe.forEach(t),xto=i(S),Un=n(S,"LI",{});var u$=s(Un);kae=n(u$,"STRONG",{});var GJr=s(kae);$to=r(GJr,"fnet"),GJr.forEach(t),kto=r(u$," \u2014 "),lP=n(u$,"A",{href:!0});var OJr=s(lP);Sto=r(OJr,"FNetTokenizer"),OJr.forEach(t),Rto=r(u$," or "),iP=n(u$,"A",{href:!0});var VJr=s(iP);Pto=r(VJr,"FNetTokenizerFast"),VJr.forEach(t),Bto=r(u$," (FNet model)"),u$.forEach(t),Ito=i(S),jg=n(S,"LI",{});var _Ae=s(jg);Sae=n(_Ae,"STRONG",{});var XJr=s(Sae);Nto=r(XJr,"fsmt"),XJr.forEach(t),qto=r(_Ae," \u2014 "),dP=n(_Ae,"A",{href:!0});var zJr=s(dP);jto=r(zJr,"FSMTTokenizer"),zJr.forEach(t),Dto=r(_Ae," (FairSeq Machine-Translation model)"),_Ae.forEach(t),Gto=i(S),Jn=n(S,"LI",{});var b$=s(Jn);Rae=n(b$,"STRONG",{});var WJr=s(Rae);Oto=r(WJr,"funnel"),WJr.forEach(t),Vto=r(b$," \u2014 "),cP=n(b$,"A",{href:!0});var QJr=s(cP);Xto=r(QJr,"FunnelTokenizer"),QJr.forEach(t),zto=r(b$," or "),fP=n(b$,"A",{href:!0});var HJr=s(fP);Wto=r(HJr,"FunnelTokenizerFast"),HJr.forEach(t),Qto=r(b$," (Funnel Transformer model)"),b$.forEach(t),Hto=i(S),Yn=n(S,"LI",{});var v$=s(Yn);Pae=n(v$,"STRONG",{});var UJr=s(Pae);Uto=r(UJr,"gpt2"),UJr.forEach(t),Jto=r(v$," \u2014 "),mP=n(v$,"A",{href:!0});var JJr=s(mP);Yto=r(JJr,"GPT2Tokenizer"),JJr.forEach(t),Kto=r(v$," or "),gP=n(v$,"A",{href:!0});var YJr=s(gP);Zto=r(YJr,"GPT2TokenizerFast"),YJr.forEach(t),eao=r(v$," (OpenAI GPT-2 model)"),v$.forEach(t),oao=i(S),Kn=n(S,"LI",{});var F$=s(Kn);Bae=n(F$,"STRONG",{});var KJr=s(Bae);rao=r(KJr,"gpt_neo"),KJr.forEach(t),tao=r(F$," \u2014 "),hP=n(F$,"A",{href:!0});var ZJr=s(hP);aao=r(ZJr,"GPT2Tokenizer"),ZJr.forEach(t),nao=r(F$," or "),pP=n(F$,"A",{href:!0});var eYr=s(pP);sao=r(eYr,"GPT2TokenizerFast"),eYr.forEach(t),lao=r(F$," (GPT Neo model)"),F$.forEach(t),iao=i(S),Dg=n(S,"LI",{});var uAe=s(Dg);Iae=n(uAe,"STRONG",{});var oYr=s(Iae);dao=r(oYr,"gpt_neox"),oYr.forEach(t),cao=r(uAe," \u2014 "),_P=n(uAe,"A",{href:!0});var rYr=s(_P);fao=r(rYr,"GPTNeoXTokenizerFast"),rYr.forEach(t),mao=r(uAe," (GPT NeoX model)"),uAe.forEach(t),gao=i(S),Zn=n(S,"LI",{});var T$=s(Zn);Nae=n(T$,"STRONG",{});var tYr=s(Nae);hao=r(tYr,"gptj"),tYr.forEach(t),pao=r(T$," \u2014 "),uP=n(T$,"A",{href:!0});var aYr=s(uP);_ao=r(aYr,"GPT2Tokenizer"),aYr.forEach(t),uao=r(T$," or "),bP=n(T$,"A",{href:!0});var nYr=s(bP);bao=r(nYr,"GPT2TokenizerFast"),nYr.forEach(t),vao=r(T$," (GPT-J model)"),T$.forEach(t),Fao=i(S),es=n(S,"LI",{});var M$=s(es);qae=n(M$,"STRONG",{});var sYr=s(qae);Tao=r(sYr,"groupvit"),sYr.forEach(t),Mao=r(M$," \u2014 "),vP=n(M$,"A",{href:!0});var lYr=s(vP);Eao=r(lYr,"CLIPTokenizer"),lYr.forEach(t),Cao=r(M$," or "),FP=n(M$,"A",{href:!0});var iYr=s(FP);wao=r(iYr,"CLIPTokenizerFast"),iYr.forEach(t),Aao=r(M$," (GroupViT model)"),M$.forEach(t),Lao=i(S),os=n(S,"LI",{});var E$=s(os);jae=n(E$,"STRONG",{});var dYr=s(jae);yao=r(dYr,"herbert"),dYr.forEach(t),xao=r(E$," \u2014 "),TP=n(E$,"A",{href:!0});var cYr=s(TP);$ao=r(cYr,"HerbertTokenizer"),cYr.forEach(t),kao=r(E$," or "),MP=n(E$,"A",{href:!0});var fYr=s(MP);Sao=r(fYr,"HerbertTokenizerFast"),fYr.forEach(t),Rao=r(E$," (HerBERT model)"),E$.forEach(t),Pao=i(S),Gg=n(S,"LI",{});var bAe=s(Gg);Dae=n(bAe,"STRONG",{});var mYr=s(Dae);Bao=r(mYr,"hubert"),mYr.forEach(t),Iao=r(bAe," \u2014 "),EP=n(bAe,"A",{href:!0});var gYr=s(EP);Nao=r(gYr,"Wav2Vec2CTCTokenizer"),gYr.forEach(t),qao=r(bAe," (Hubert model)"),bAe.forEach(t),jao=i(S),rs=n(S,"LI",{});var C$=s(rs);Gae=n(C$,"STRONG",{});var hYr=s(Gae);Dao=r(hYr,"ibert"),hYr.forEach(t),Gao=r(C$," \u2014 "),CP=n(C$,"A",{href:!0});var pYr=s(CP);Oao=r(pYr,"RobertaTokenizer"),pYr.forEach(t),Vao=r(C$," or "),wP=n(C$,"A",{href:!0});var _Yr=s(wP);Xao=r(_Yr,"RobertaTokenizerFast"),_Yr.forEach(t),zao=r(C$," (I-BERT model)"),C$.forEach(t),Wao=i(S),ts=n(S,"LI",{});var w$=s(ts);Oae=n(w$,"STRONG",{});var uYr=s(Oae);Qao=r(uYr,"layoutlm"),uYr.forEach(t),Hao=r(w$," \u2014 "),AP=n(w$,"A",{href:!0});var bYr=s(AP);Uao=r(bYr,"LayoutLMTokenizer"),bYr.forEach(t),Jao=r(w$," or "),LP=n(w$,"A",{href:!0});var vYr=s(LP);Yao=r(vYr,"LayoutLMTokenizerFast"),vYr.forEach(t),Kao=r(w$," (LayoutLM model)"),w$.forEach(t),Zao=i(S),as=n(S,"LI",{});var A$=s(as);Vae=n(A$,"STRONG",{});var FYr=s(Vae);eno=r(FYr,"layoutlmv2"),FYr.forEach(t),ono=r(A$," \u2014 "),yP=n(A$,"A",{href:!0});var TYr=s(yP);rno=r(TYr,"LayoutLMv2Tokenizer"),TYr.forEach(t),tno=r(A$," or "),xP=n(A$,"A",{href:!0});var MYr=s(xP);ano=r(MYr,"LayoutLMv2TokenizerFast"),MYr.forEach(t),nno=r(A$," (LayoutLMv2 model)"),A$.forEach(t),sno=i(S),ns=n(S,"LI",{});var L$=s(ns);Xae=n(L$,"STRONG",{});var EYr=s(Xae);lno=r(EYr,"layoutlmv3"),EYr.forEach(t),ino=r(L$," \u2014 "),$P=n(L$,"A",{href:!0});var CYr=s($P);dno=r(CYr,"LayoutLMv3Tokenizer"),CYr.forEach(t),cno=r(L$," or "),kP=n(L$,"A",{href:!0});var wYr=s(kP);fno=r(wYr,"LayoutLMv3TokenizerFast"),wYr.forEach(t),mno=r(L$," (LayoutLMv3 model)"),L$.forEach(t),gno=i(S),ss=n(S,"LI",{});var y$=s(ss);zae=n(y$,"STRONG",{});var AYr=s(zae);hno=r(AYr,"layoutxlm"),AYr.forEach(t),pno=r(y$," \u2014 "),SP=n(y$,"A",{href:!0});var LYr=s(SP);_no=r(LYr,"LayoutXLMTokenizer"),LYr.forEach(t),uno=r(y$," or "),RP=n(y$,"A",{href:!0});var yYr=s(RP);bno=r(yYr,"LayoutXLMTokenizerFast"),yYr.forEach(t),vno=r(y$," (LayoutXLM model)"),y$.forEach(t),Fno=i(S),ls=n(S,"LI",{});var x$=s(ls);Wae=n(x$,"STRONG",{});var xYr=s(Wae);Tno=r(xYr,"led"),xYr.forEach(t),Mno=r(x$," \u2014 "),PP=n(x$,"A",{href:!0});var $Yr=s(PP);Eno=r($Yr,"LEDTokenizer"),$Yr.forEach(t),Cno=r(x$," or "),BP=n(x$,"A",{href:!0});var kYr=s(BP);wno=r(kYr,"LEDTokenizerFast"),kYr.forEach(t),Ano=r(x$," (LED model)"),x$.forEach(t),Lno=i(S),is=n(S,"LI",{});var $$=s(is);Qae=n($$,"STRONG",{});var SYr=s(Qae);yno=r(SYr,"longformer"),SYr.forEach(t),xno=r($$," \u2014 "),IP=n($$,"A",{href:!0});var RYr=s(IP);$no=r(RYr,"LongformerTokenizer"),RYr.forEach(t),kno=r($$," or "),NP=n($$,"A",{href:!0});var PYr=s(NP);Sno=r(PYr,"LongformerTokenizerFast"),PYr.forEach(t),Rno=r($$," (Longformer model)"),$$.forEach(t),Pno=i(S),Og=n(S,"LI",{});var vAe=s(Og);Hae=n(vAe,"STRONG",{});var BYr=s(Hae);Bno=r(BYr,"luke"),BYr.forEach(t),Ino=r(vAe," \u2014 "),qP=n(vAe,"A",{href:!0});var IYr=s(qP);Nno=r(IYr,"LukeTokenizer"),IYr.forEach(t),qno=r(vAe," (LUKE model)"),vAe.forEach(t),jno=i(S),ds=n(S,"LI",{});var k$=s(ds);Uae=n(k$,"STRONG",{});var NYr=s(Uae);Dno=r(NYr,"lxmert"),NYr.forEach(t),Gno=r(k$," \u2014 "),jP=n(k$,"A",{href:!0});var qYr=s(jP);Ono=r(qYr,"LxmertTokenizer"),qYr.forEach(t),Vno=r(k$," or "),DP=n(k$,"A",{href:!0});var jYr=s(DP);Xno=r(jYr,"LxmertTokenizerFast"),jYr.forEach(t),zno=r(k$," (LXMERT model)"),k$.forEach(t),Wno=i(S),Vg=n(S,"LI",{});var FAe=s(Vg);Jae=n(FAe,"STRONG",{});var DYr=s(Jae);Qno=r(DYr,"m2m_100"),DYr.forEach(t),Hno=r(FAe," \u2014 "),GP=n(FAe,"A",{href:!0});var GYr=s(GP);Uno=r(GYr,"M2M100Tokenizer"),GYr.forEach(t),Jno=r(FAe," (M2M100 model)"),FAe.forEach(t),Yno=i(S),Xg=n(S,"LI",{});var TAe=s(Xg);Yae=n(TAe,"STRONG",{});var OYr=s(Yae);Kno=r(OYr,"marian"),OYr.forEach(t),Zno=r(TAe," \u2014 "),OP=n(TAe,"A",{href:!0});var VYr=s(OP);eso=r(VYr,"MarianTokenizer"),VYr.forEach(t),oso=r(TAe," (Marian model)"),TAe.forEach(t),rso=i(S),cs=n(S,"LI",{});var S$=s(cs);Kae=n(S$,"STRONG",{});var XYr=s(Kae);tso=r(XYr,"mbart"),XYr.forEach(t),aso=r(S$," \u2014 "),VP=n(S$,"A",{href:!0});var zYr=s(VP);nso=r(zYr,"MBartTokenizer"),zYr.forEach(t),sso=r(S$," or "),XP=n(S$,"A",{href:!0});var WYr=s(XP);lso=r(WYr,"MBartTokenizerFast"),WYr.forEach(t),iso=r(S$," (mBART model)"),S$.forEach(t),dso=i(S),fs=n(S,"LI",{});var R$=s(fs);Zae=n(R$,"STRONG",{});var QYr=s(Zae);cso=r(QYr,"mbart50"),QYr.forEach(t),fso=r(R$," \u2014 "),zP=n(R$,"A",{href:!0});var HYr=s(zP);mso=r(HYr,"MBart50Tokenizer"),HYr.forEach(t),gso=r(R$," or "),WP=n(R$,"A",{href:!0});var UYr=s(WP);hso=r(UYr,"MBart50TokenizerFast"),UYr.forEach(t),pso=r(R$," (mBART-50 model)"),R$.forEach(t),_so=i(S),ms=n(S,"LI",{});var P$=s(ms);ene=n(P$,"STRONG",{});var JYr=s(ene);uso=r(JYr,"megatron-bert"),JYr.forEach(t),bso=r(P$," \u2014 "),QP=n(P$,"A",{href:!0});var YYr=s(QP);vso=r(YYr,"BertTokenizer"),YYr.forEach(t),Fso=r(P$," or "),HP=n(P$,"A",{href:!0});var KYr=s(HP);Tso=r(KYr,"BertTokenizerFast"),KYr.forEach(t),Mso=r(P$," (Megatron-BERT model)"),P$.forEach(t),Eso=i(S),zg=n(S,"LI",{});var MAe=s(zg);one=n(MAe,"STRONG",{});var ZYr=s(one);Cso=r(ZYr,"mluke"),ZYr.forEach(t),wso=r(MAe," \u2014 "),UP=n(MAe,"A",{href:!0});var eKr=s(UP);Aso=r(eKr,"MLukeTokenizer"),eKr.forEach(t),Lso=r(MAe," (mLUKE model)"),MAe.forEach(t),yso=i(S),gs=n(S,"LI",{});var B$=s(gs);rne=n(B$,"STRONG",{});var oKr=s(rne);xso=r(oKr,"mobilebert"),oKr.forEach(t),$so=r(B$," \u2014 "),JP=n(B$,"A",{href:!0});var rKr=s(JP);kso=r(rKr,"MobileBertTokenizer"),rKr.forEach(t),Sso=r(B$," or "),YP=n(B$,"A",{href:!0});var tKr=s(YP);Rso=r(tKr,"MobileBertTokenizerFast"),tKr.forEach(t),Pso=r(B$," (MobileBERT model)"),B$.forEach(t),Bso=i(S),hs=n(S,"LI",{});var I$=s(hs);tne=n(I$,"STRONG",{});var aKr=s(tne);Iso=r(aKr,"mpnet"),aKr.forEach(t),Nso=r(I$," \u2014 "),KP=n(I$,"A",{href:!0});var nKr=s(KP);qso=r(nKr,"MPNetTokenizer"),nKr.forEach(t),jso=r(I$," or "),ZP=n(I$,"A",{href:!0});var sKr=s(ZP);Dso=r(sKr,"MPNetTokenizerFast"),sKr.forEach(t),Gso=r(I$," (MPNet model)"),I$.forEach(t),Oso=i(S),ps=n(S,"LI",{});var N$=s(ps);ane=n(N$,"STRONG",{});var lKr=s(ane);Vso=r(lKr,"mt5"),lKr.forEach(t),Xso=r(N$," \u2014 "),eB=n(N$,"A",{href:!0});var iKr=s(eB);zso=r(iKr,"MT5Tokenizer"),iKr.forEach(t),Wso=r(N$," or "),oB=n(N$,"A",{href:!0});var dKr=s(oB);Qso=r(dKr,"MT5TokenizerFast"),dKr.forEach(t),Hso=r(N$," (MT5 model)"),N$.forEach(t),Uso=i(S),_s=n(S,"LI",{});var q$=s(_s);nne=n(q$,"STRONG",{});var cKr=s(nne);Jso=r(cKr,"nystromformer"),cKr.forEach(t),Yso=r(q$," \u2014 "),rB=n(q$,"A",{href:!0});var fKr=s(rB);Kso=r(fKr,"AlbertTokenizer"),fKr.forEach(t),Zso=r(q$," or "),tB=n(q$,"A",{href:!0});var mKr=s(tB);elo=r(mKr,"AlbertTokenizerFast"),mKr.forEach(t),olo=r(q$," (Nystr\xF6mformer model)"),q$.forEach(t),rlo=i(S),us=n(S,"LI",{});var j$=s(us);sne=n(j$,"STRONG",{});var gKr=s(sne);tlo=r(gKr,"openai-gpt"),gKr.forEach(t),alo=r(j$," \u2014 "),aB=n(j$,"A",{href:!0});var hKr=s(aB);nlo=r(hKr,"OpenAIGPTTokenizer"),hKr.forEach(t),slo=r(j$," or "),nB=n(j$,"A",{href:!0});var pKr=s(nB);llo=r(pKr,"OpenAIGPTTokenizerFast"),pKr.forEach(t),ilo=r(j$," (OpenAI GPT model)"),j$.forEach(t),dlo=i(S),Wg=n(S,"LI",{});var EAe=s(Wg);lne=n(EAe,"STRONG",{});var _Kr=s(lne);clo=r(_Kr,"opt"),_Kr.forEach(t),flo=r(EAe," \u2014 "),sB=n(EAe,"A",{href:!0});var uKr=s(sB);mlo=r(uKr,"GPT2Tokenizer"),uKr.forEach(t),glo=r(EAe," (OPT model)"),EAe.forEach(t),hlo=i(S),bs=n(S,"LI",{});var D$=s(bs);ine=n(D$,"STRONG",{});var bKr=s(ine);plo=r(bKr,"pegasus"),bKr.forEach(t),_lo=r(D$," \u2014 "),lB=n(D$,"A",{href:!0});var vKr=s(lB);ulo=r(vKr,"PegasusTokenizer"),vKr.forEach(t),blo=r(D$," or "),iB=n(D$,"A",{href:!0});var FKr=s(iB);vlo=r(FKr,"PegasusTokenizerFast"),FKr.forEach(t),Flo=r(D$," (Pegasus model)"),D$.forEach(t),Tlo=i(S),Qg=n(S,"LI",{});var CAe=s(Qg);dne=n(CAe,"STRONG",{});var TKr=s(dne);Mlo=r(TKr,"perceiver"),TKr.forEach(t),Elo=r(CAe," \u2014 "),dB=n(CAe,"A",{href:!0});var MKr=s(dB);Clo=r(MKr,"PerceiverTokenizer"),MKr.forEach(t),wlo=r(CAe," (Perceiver model)"),CAe.forEach(t),Alo=i(S),Hg=n(S,"LI",{});var wAe=s(Hg);cne=n(wAe,"STRONG",{});var EKr=s(cne);Llo=r(EKr,"phobert"),EKr.forEach(t),ylo=r(wAe," \u2014 "),cB=n(wAe,"A",{href:!0});var CKr=s(cB);xlo=r(CKr,"PhobertTokenizer"),CKr.forEach(t),$lo=r(wAe," (PhoBERT model)"),wAe.forEach(t),klo=i(S),Ug=n(S,"LI",{});var AAe=s(Ug);fne=n(AAe,"STRONG",{});var wKr=s(fne);Slo=r(wKr,"plbart"),wKr.forEach(t),Rlo=r(AAe," \u2014 "),fB=n(AAe,"A",{href:!0});var AKr=s(fB);Plo=r(AKr,"PLBartTokenizer"),AKr.forEach(t),Blo=r(AAe," (PLBart model)"),AAe.forEach(t),Ilo=i(S),Jg=n(S,"LI",{});var LAe=s(Jg);mne=n(LAe,"STRONG",{});var LKr=s(mne);Nlo=r(LKr,"prophetnet"),LKr.forEach(t),qlo=r(LAe," \u2014 "),mB=n(LAe,"A",{href:!0});var yKr=s(mB);jlo=r(yKr,"ProphetNetTokenizer"),yKr.forEach(t),Dlo=r(LAe," (ProphetNet model)"),LAe.forEach(t),Glo=i(S),vs=n(S,"LI",{});var G$=s(vs);gne=n(G$,"STRONG",{});var xKr=s(gne);Olo=r(xKr,"qdqbert"),xKr.forEach(t),Vlo=r(G$," \u2014 "),gB=n(G$,"A",{href:!0});var $Kr=s(gB);Xlo=r($Kr,"BertTokenizer"),$Kr.forEach(t),zlo=r(G$," or "),hB=n(G$,"A",{href:!0});var kKr=s(hB);Wlo=r(kKr,"BertTokenizerFast"),kKr.forEach(t),Qlo=r(G$," (QDQBert model)"),G$.forEach(t),Hlo=i(S),Yg=n(S,"LI",{});var yAe=s(Yg);hne=n(yAe,"STRONG",{});var SKr=s(hne);Ulo=r(SKr,"rag"),SKr.forEach(t),Jlo=r(yAe," \u2014 "),pB=n(yAe,"A",{href:!0});var RKr=s(pB);Ylo=r(RKr,"RagTokenizer"),RKr.forEach(t),Klo=r(yAe," (RAG model)"),yAe.forEach(t),Zlo=i(S),Fs=n(S,"LI",{});var O$=s(Fs);pne=n(O$,"STRONG",{});var PKr=s(pne);eio=r(PKr,"realm"),PKr.forEach(t),oio=r(O$," \u2014 "),_B=n(O$,"A",{href:!0});var BKr=s(_B);rio=r(BKr,"RealmTokenizer"),BKr.forEach(t),tio=r(O$," or "),uB=n(O$,"A",{href:!0});var IKr=s(uB);aio=r(IKr,"RealmTokenizerFast"),IKr.forEach(t),nio=r(O$," (REALM model)"),O$.forEach(t),sio=i(S),Ts=n(S,"LI",{});var V$=s(Ts);_ne=n(V$,"STRONG",{});var NKr=s(_ne);lio=r(NKr,"reformer"),NKr.forEach(t),iio=r(V$," \u2014 "),bB=n(V$,"A",{href:!0});var qKr=s(bB);dio=r(qKr,"ReformerTokenizer"),qKr.forEach(t),cio=r(V$," or "),vB=n(V$,"A",{href:!0});var jKr=s(vB);fio=r(jKr,"ReformerTokenizerFast"),jKr.forEach(t),mio=r(V$," (Reformer model)"),V$.forEach(t),gio=i(S),Ms=n(S,"LI",{});var X$=s(Ms);une=n(X$,"STRONG",{});var DKr=s(une);hio=r(DKr,"rembert"),DKr.forEach(t),pio=r(X$," \u2014 "),FB=n(X$,"A",{href:!0});var GKr=s(FB);_io=r(GKr,"RemBertTokenizer"),GKr.forEach(t),uio=r(X$," or "),TB=n(X$,"A",{href:!0});var OKr=s(TB);bio=r(OKr,"RemBertTokenizerFast"),OKr.forEach(t),vio=r(X$," (RemBERT model)"),X$.forEach(t),Fio=i(S),Es=n(S,"LI",{});var z$=s(Es);bne=n(z$,"STRONG",{});var VKr=s(bne);Tio=r(VKr,"retribert"),VKr.forEach(t),Mio=r(z$," \u2014 "),MB=n(z$,"A",{href:!0});var XKr=s(MB);Eio=r(XKr,"RetriBertTokenizer"),XKr.forEach(t),Cio=r(z$," or "),EB=n(z$,"A",{href:!0});var zKr=s(EB);wio=r(zKr,"RetriBertTokenizerFast"),zKr.forEach(t),Aio=r(z$," (RetriBERT model)"),z$.forEach(t),Lio=i(S),Cs=n(S,"LI",{});var W$=s(Cs);vne=n(W$,"STRONG",{});var WKr=s(vne);yio=r(WKr,"roberta"),WKr.forEach(t),xio=r(W$," \u2014 "),CB=n(W$,"A",{href:!0});var QKr=s(CB);$io=r(QKr,"RobertaTokenizer"),QKr.forEach(t),kio=r(W$," or "),wB=n(W$,"A",{href:!0});var HKr=s(wB);Sio=r(HKr,"RobertaTokenizerFast"),HKr.forEach(t),Rio=r(W$," (RoBERTa model)"),W$.forEach(t),Pio=i(S),ws=n(S,"LI",{});var Q$=s(ws);Fne=n(Q$,"STRONG",{});var UKr=s(Fne);Bio=r(UKr,"roformer"),UKr.forEach(t),Iio=r(Q$," \u2014 "),AB=n(Q$,"A",{href:!0});var JKr=s(AB);Nio=r(JKr,"RoFormerTokenizer"),JKr.forEach(t),qio=r(Q$," or "),LB=n(Q$,"A",{href:!0});var YKr=s(LB);jio=r(YKr,"RoFormerTokenizerFast"),YKr.forEach(t),Dio=r(Q$," (RoFormer model)"),Q$.forEach(t),Gio=i(S),Kg=n(S,"LI",{});var xAe=s(Kg);Tne=n(xAe,"STRONG",{});var KKr=s(Tne);Oio=r(KKr,"speech_to_text"),KKr.forEach(t),Vio=r(xAe," \u2014 "),yB=n(xAe,"A",{href:!0});var ZKr=s(yB);Xio=r(ZKr,"Speech2TextTokenizer"),ZKr.forEach(t),zio=r(xAe," (Speech2Text model)"),xAe.forEach(t),Wio=i(S),Zg=n(S,"LI",{});var $Ae=s(Zg);Mne=n($Ae,"STRONG",{});var eZr=s(Mne);Qio=r(eZr,"speech_to_text_2"),eZr.forEach(t),Hio=r($Ae," \u2014 "),xB=n($Ae,"A",{href:!0});var oZr=s(xB);Uio=r(oZr,"Speech2Text2Tokenizer"),oZr.forEach(t),Jio=r($Ae," (Speech2Text2 model)"),$Ae.forEach(t),Yio=i(S),As=n(S,"LI",{});var H$=s(As);Ene=n(H$,"STRONG",{});var rZr=s(Ene);Kio=r(rZr,"splinter"),rZr.forEach(t),Zio=r(H$," \u2014 "),$B=n(H$,"A",{href:!0});var tZr=s($B);edo=r(tZr,"SplinterTokenizer"),tZr.forEach(t),odo=r(H$," or "),kB=n(H$,"A",{href:!0});var aZr=s(kB);rdo=r(aZr,"SplinterTokenizerFast"),aZr.forEach(t),tdo=r(H$," (Splinter model)"),H$.forEach(t),ado=i(S),Ls=n(S,"LI",{});var U$=s(Ls);Cne=n(U$,"STRONG",{});var nZr=s(Cne);ndo=r(nZr,"squeezebert"),nZr.forEach(t),sdo=r(U$," \u2014 "),SB=n(U$,"A",{href:!0});var sZr=s(SB);ldo=r(sZr,"SqueezeBertTokenizer"),sZr.forEach(t),ido=r(U$," or "),RB=n(U$,"A",{href:!0});var lZr=s(RB);ddo=r(lZr,"SqueezeBertTokenizerFast"),lZr.forEach(t),cdo=r(U$," (SqueezeBERT model)"),U$.forEach(t),fdo=i(S),ys=n(S,"LI",{});var J$=s(ys);wne=n(J$,"STRONG",{});var iZr=s(wne);mdo=r(iZr,"t5"),iZr.forEach(t),gdo=r(J$," \u2014 "),PB=n(J$,"A",{href:!0});var dZr=s(PB);hdo=r(dZr,"T5Tokenizer"),dZr.forEach(t),pdo=r(J$," or "),BB=n(J$,"A",{href:!0});var cZr=s(BB);_do=r(cZr,"T5TokenizerFast"),cZr.forEach(t),udo=r(J$," (T5 model)"),J$.forEach(t),bdo=i(S),eh=n(S,"LI",{});var kAe=s(eh);Ane=n(kAe,"STRONG",{});var fZr=s(Ane);vdo=r(fZr,"tapas"),fZr.forEach(t),Fdo=r(kAe," \u2014 "),IB=n(kAe,"A",{href:!0});var mZr=s(IB);Tdo=r(mZr,"TapasTokenizer"),mZr.forEach(t),Mdo=r(kAe," (TAPAS model)"),kAe.forEach(t),Edo=i(S),oh=n(S,"LI",{});var SAe=s(oh);Lne=n(SAe,"STRONG",{});var gZr=s(Lne);Cdo=r(gZr,"tapex"),gZr.forEach(t),wdo=r(SAe," \u2014 "),NB=n(SAe,"A",{href:!0});var hZr=s(NB);Ado=r(hZr,"TapexTokenizer"),hZr.forEach(t),Ldo=r(SAe," (TAPEX model)"),SAe.forEach(t),ydo=i(S),rh=n(S,"LI",{});var RAe=s(rh);yne=n(RAe,"STRONG",{});var pZr=s(yne);xdo=r(pZr,"transfo-xl"),pZr.forEach(t),$do=r(RAe," \u2014 "),qB=n(RAe,"A",{href:!0});var _Zr=s(qB);kdo=r(_Zr,"TransfoXLTokenizer"),_Zr.forEach(t),Sdo=r(RAe," (Transformer-XL model)"),RAe.forEach(t),Rdo=i(S),xs=n(S,"LI",{});var Y$=s(xs);xne=n(Y$,"STRONG",{});var uZr=s(xne);Pdo=r(uZr,"visual_bert"),uZr.forEach(t),Bdo=r(Y$," \u2014 "),jB=n(Y$,"A",{href:!0});var bZr=s(jB);Ido=r(bZr,"BertTokenizer"),bZr.forEach(t),Ndo=r(Y$," or "),DB=n(Y$,"A",{href:!0});var vZr=s(DB);qdo=r(vZr,"BertTokenizerFast"),vZr.forEach(t),jdo=r(Y$," (VisualBERT model)"),Y$.forEach(t),Ddo=i(S),th=n(S,"LI",{});var PAe=s(th);$ne=n(PAe,"STRONG",{});var FZr=s($ne);Gdo=r(FZr,"wav2vec2"),FZr.forEach(t),Odo=r(PAe," \u2014 "),GB=n(PAe,"A",{href:!0});var TZr=s(GB);Vdo=r(TZr,"Wav2Vec2CTCTokenizer"),TZr.forEach(t),Xdo=r(PAe," (Wav2Vec2 model)"),PAe.forEach(t),zdo=i(S),ah=n(S,"LI",{});var BAe=s(ah);kne=n(BAe,"STRONG",{});var MZr=s(kne);Wdo=r(MZr,"wav2vec2-conformer"),MZr.forEach(t),Qdo=r(BAe," \u2014 "),OB=n(BAe,"A",{href:!0});var EZr=s(OB);Hdo=r(EZr,"Wav2Vec2CTCTokenizer"),EZr.forEach(t),Udo=r(BAe," (Wav2Vec2-Conformer model)"),BAe.forEach(t),Jdo=i(S),nh=n(S,"LI",{});var IAe=s(nh);Sne=n(IAe,"STRONG",{});var CZr=s(Sne);Ydo=r(CZr,"wav2vec2_phoneme"),CZr.forEach(t),Kdo=r(IAe," \u2014 "),VB=n(IAe,"A",{href:!0});var wZr=s(VB);Zdo=r(wZr,"Wav2Vec2PhonemeCTCTokenizer"),wZr.forEach(t),eco=r(IAe," (Wav2Vec2Phoneme model)"),IAe.forEach(t),oco=i(S),$s=n(S,"LI",{});var K$=s($s);Rne=n(K$,"STRONG",{});var AZr=s(Rne);rco=r(AZr,"xglm"),AZr.forEach(t),tco=r(K$," \u2014 "),XB=n(K$,"A",{href:!0});var LZr=s(XB);aco=r(LZr,"XGLMTokenizer"),LZr.forEach(t),nco=r(K$," or "),zB=n(K$,"A",{href:!0});var yZr=s(zB);sco=r(yZr,"XGLMTokenizerFast"),yZr.forEach(t),lco=r(K$," (XGLM model)"),K$.forEach(t),ico=i(S),sh=n(S,"LI",{});var NAe=s(sh);Pne=n(NAe,"STRONG",{});var xZr=s(Pne);dco=r(xZr,"xlm"),xZr.forEach(t),cco=r(NAe," \u2014 "),WB=n(NAe,"A",{href:!0});var $Zr=s(WB);fco=r($Zr,"XLMTokenizer"),$Zr.forEach(t),mco=r(NAe," (XLM model)"),NAe.forEach(t),gco=i(S),lh=n(S,"LI",{});var qAe=s(lh);Bne=n(qAe,"STRONG",{});var kZr=s(Bne);hco=r(kZr,"xlm-prophetnet"),kZr.forEach(t),pco=r(qAe," \u2014 "),QB=n(qAe,"A",{href:!0});var SZr=s(QB);_co=r(SZr,"XLMProphetNetTokenizer"),SZr.forEach(t),uco=r(qAe," (XLM-ProphetNet model)"),qAe.forEach(t),bco=i(S),ks=n(S,"LI",{});var Z$=s(ks);Ine=n(Z$,"STRONG",{});var RZr=s(Ine);vco=r(RZr,"xlm-roberta"),RZr.forEach(t),Fco=r(Z$," \u2014 "),HB=n(Z$,"A",{href:!0});var PZr=s(HB);Tco=r(PZr,"XLMRobertaTokenizer"),PZr.forEach(t),Mco=r(Z$," or "),UB=n(Z$,"A",{href:!0});var BZr=s(UB);Eco=r(BZr,"XLMRobertaTokenizerFast"),BZr.forEach(t),Cco=r(Z$," (XLM-RoBERTa model)"),Z$.forEach(t),wco=i(S),Ss=n(S,"LI",{});var ek=s(Ss);Nne=n(ek,"STRONG",{});var IZr=s(Nne);Aco=r(IZr,"xlm-roberta-xl"),IZr.forEach(t),Lco=r(ek," \u2014 "),JB=n(ek,"A",{href:!0});var NZr=s(JB);yco=r(NZr,"RobertaTokenizer"),NZr.forEach(t),xco=r(ek," or "),YB=n(ek,"A",{href:!0});var qZr=s(YB);$co=r(qZr,"RobertaTokenizerFast"),qZr.forEach(t),kco=r(ek," (XLM-RoBERTa-XL model)"),ek.forEach(t),Sco=i(S),Rs=n(S,"LI",{});var ok=s(Rs);qne=n(ok,"STRONG",{});var jZr=s(qne);Rco=r(jZr,"xlnet"),jZr.forEach(t),Pco=r(ok," \u2014 "),KB=n(ok,"A",{href:!0});var DZr=s(KB);Bco=r(DZr,"XLNetTokenizer"),DZr.forEach(t),Ico=r(ok," or "),ZB=n(ok,"A",{href:!0});var GZr=s(ZB);Nco=r(GZr,"XLNetTokenizerFast"),GZr.forEach(t),qco=r(ok," (XLNet model)"),ok.forEach(t),jco=i(S),Ps=n(S,"LI",{});var rk=s(Ps);jne=n(rk,"STRONG",{});var OZr=s(jne);Dco=r(OZr,"yoso"),OZr.forEach(t),Gco=r(rk," \u2014 "),eI=n(rk,"A",{href:!0});var VZr=s(eI);Oco=r(VZr,"AlbertTokenizer"),VZr.forEach(t),Vco=r(rk," or "),oI=n(rk,"A",{href:!0});var XZr=s(oI);Xco=r(XZr,"AlbertTokenizerFast"),XZr.forEach(t),zco=r(rk," (YOSO model)"),rk.forEach(t),S.forEach(t),Wco=i(Ds),T(ih.$$.fragment,Ds),Ds.forEach(t),Qco=i(js),dh=n(js,"DIV",{class:!0});var cGe=s(dh);T(eL.$$.fragment,cGe),Hco=i(cGe),Dne=n(cGe,"P",{});var zZr=s(Dne);Uco=r(zZr,"Register a new tokenizer in this mapping."),zZr.forEach(t),cGe.forEach(t),js.forEach(t),fje=i(f),Ci=n(f,"H2",{class:!0});var fGe=s(Ci);ch=n(fGe,"A",{id:!0,class:!0,href:!0});var WZr=s(ch);Gne=n(WZr,"SPAN",{});var QZr=s(Gne);T(oL.$$.fragment,QZr),QZr.forEach(t),WZr.forEach(t),Jco=i(fGe),One=n(fGe,"SPAN",{});var HZr=s(One);Yco=r(HZr,"AutoFeatureExtractor"),HZr.forEach(t),fGe.forEach(t),mje=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(rL.$$.fragment,Gs),Kco=i(Gs),tL=n(Gs,"P",{});var mGe=s(tL);Zco=r(mGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rI=n(mGe,"A",{href:!0});var UZr=s(rI);efo=r(UZr,"AutoFeatureExtractor.from_pretrained()"),UZr.forEach(t),ofo=r(mGe," class method."),mGe.forEach(t),rfo=i(Gs),aL=n(Gs,"P",{});var gGe=s(aL);tfo=r(gGe,"This class cannot be instantiated directly using "),Vne=n(gGe,"CODE",{});var JZr=s(Vne);afo=r(JZr,"__init__()"),JZr.forEach(t),nfo=r(gGe," (throws an error)."),gGe.forEach(t),sfo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(nL.$$.fragment,Zt),lfo=i(Zt),Xne=n(Zt,"P",{});var YZr=s(Xne);ifo=r(YZr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),YZr.forEach(t),dfo=i(Zt),La=n(Zt,"P",{});var Xw=s(La);cfo=r(Xw,"The feature extractor class to instantiate is selected based on the "),zne=n(Xw,"CODE",{});var KZr=s(zne);ffo=r(KZr,"model_type"),KZr.forEach(t),mfo=r(Xw,` property of the config object
(either passed as an argument or loaded from `),Wne=n(Xw,"CODE",{});var ZZr=s(Wne);gfo=r(ZZr,"pretrained_model_name_or_path"),ZZr.forEach(t),hfo=r(Xw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qne=n(Xw,"CODE",{});var eet=s(Qne);pfo=r(eet,"pretrained_model_name_or_path"),eet.forEach(t),_fo=r(Xw,":"),Xw.forEach(t),ufo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);fh=n(K,"LI",{});var jAe=s(fh);Hne=n(jAe,"STRONG",{});var oet=s(Hne);bfo=r(oet,"beit"),oet.forEach(t),vfo=r(jAe," \u2014 "),tI=n(jAe,"A",{href:!0});var ret=s(tI);Ffo=r(ret,"BeitFeatureExtractor"),ret.forEach(t),Tfo=r(jAe," (BEiT model)"),jAe.forEach(t),Mfo=i(K),mh=n(K,"LI",{});var DAe=s(mh);Une=n(DAe,"STRONG",{});var tet=s(Une);Efo=r(tet,"clip"),tet.forEach(t),Cfo=r(DAe," \u2014 "),aI=n(DAe,"A",{href:!0});var aet=s(aI);wfo=r(aet,"CLIPFeatureExtractor"),aet.forEach(t),Afo=r(DAe," (CLIP model)"),DAe.forEach(t),Lfo=i(K),gh=n(K,"LI",{});var GAe=s(gh);Jne=n(GAe,"STRONG",{});var net=s(Jne);yfo=r(net,"convnext"),net.forEach(t),xfo=r(GAe," \u2014 "),nI=n(GAe,"A",{href:!0});var set=s(nI);$fo=r(set,"ConvNextFeatureExtractor"),set.forEach(t),kfo=r(GAe," (ConvNeXT model)"),GAe.forEach(t),Sfo=i(K),hh=n(K,"LI",{});var OAe=s(hh);Yne=n(OAe,"STRONG",{});var iet=s(Yne);Rfo=r(iet,"cvt"),iet.forEach(t),Pfo=r(OAe," \u2014 "),sI=n(OAe,"A",{href:!0});var det=s(sI);Bfo=r(det,"ConvNextFeatureExtractor"),det.forEach(t),Ifo=r(OAe," (CvT model)"),OAe.forEach(t),Nfo=i(K),ph=n(K,"LI",{});var VAe=s(ph);Kne=n(VAe,"STRONG",{});var cet=s(Kne);qfo=r(cet,"data2vec-audio"),cet.forEach(t),jfo=r(VAe," \u2014 "),lI=n(VAe,"A",{href:!0});var fet=s(lI);Dfo=r(fet,"Wav2Vec2FeatureExtractor"),fet.forEach(t),Gfo=r(VAe," (Data2VecAudio model)"),VAe.forEach(t),Ofo=i(K),_h=n(K,"LI",{});var XAe=s(_h);Zne=n(XAe,"STRONG",{});var met=s(Zne);Vfo=r(met,"data2vec-vision"),met.forEach(t),Xfo=r(XAe," \u2014 "),iI=n(XAe,"A",{href:!0});var get=s(iI);zfo=r(get,"BeitFeatureExtractor"),get.forEach(t),Wfo=r(XAe," (Data2VecVision model)"),XAe.forEach(t),Qfo=i(K),uh=n(K,"LI",{});var zAe=s(uh);ese=n(zAe,"STRONG",{});var het=s(ese);Hfo=r(het,"deit"),het.forEach(t),Ufo=r(zAe," \u2014 "),dI=n(zAe,"A",{href:!0});var pet=s(dI);Jfo=r(pet,"DeiTFeatureExtractor"),pet.forEach(t),Yfo=r(zAe," (DeiT model)"),zAe.forEach(t),Kfo=i(K),bh=n(K,"LI",{});var WAe=s(bh);ose=n(WAe,"STRONG",{});var _et=s(ose);Zfo=r(_et,"detr"),_et.forEach(t),emo=r(WAe," \u2014 "),cI=n(WAe,"A",{href:!0});var uet=s(cI);omo=r(uet,"DetrFeatureExtractor"),uet.forEach(t),rmo=r(WAe," (DETR model)"),WAe.forEach(t),tmo=i(K),vh=n(K,"LI",{});var QAe=s(vh);rse=n(QAe,"STRONG",{});var bet=s(rse);amo=r(bet,"dpt"),bet.forEach(t),nmo=r(QAe," \u2014 "),fI=n(QAe,"A",{href:!0});var vet=s(fI);smo=r(vet,"DPTFeatureExtractor"),vet.forEach(t),lmo=r(QAe," (DPT model)"),QAe.forEach(t),imo=i(K),Fh=n(K,"LI",{});var HAe=s(Fh);tse=n(HAe,"STRONG",{});var Fet=s(tse);dmo=r(Fet,"flava"),Fet.forEach(t),cmo=r(HAe," \u2014 "),mI=n(HAe,"A",{href:!0});var Tet=s(mI);fmo=r(Tet,"FlavaFeatureExtractor"),Tet.forEach(t),mmo=r(HAe," (FLAVA model)"),HAe.forEach(t),gmo=i(K),Th=n(K,"LI",{});var UAe=s(Th);ase=n(UAe,"STRONG",{});var Met=s(ase);hmo=r(Met,"glpn"),Met.forEach(t),pmo=r(UAe," \u2014 "),gI=n(UAe,"A",{href:!0});var Eet=s(gI);_mo=r(Eet,"GLPNFeatureExtractor"),Eet.forEach(t),umo=r(UAe," (GLPN model)"),UAe.forEach(t),bmo=i(K),Mh=n(K,"LI",{});var JAe=s(Mh);nse=n(JAe,"STRONG",{});var Cet=s(nse);vmo=r(Cet,"groupvit"),Cet.forEach(t),Fmo=r(JAe," \u2014 "),hI=n(JAe,"A",{href:!0});var wet=s(hI);Tmo=r(wet,"CLIPFeatureExtractor"),wet.forEach(t),Mmo=r(JAe," (GroupViT model)"),JAe.forEach(t),Emo=i(K),Eh=n(K,"LI",{});var YAe=s(Eh);sse=n(YAe,"STRONG",{});var Aet=s(sse);Cmo=r(Aet,"hubert"),Aet.forEach(t),wmo=r(YAe," \u2014 "),pI=n(YAe,"A",{href:!0});var Let=s(pI);Amo=r(Let,"Wav2Vec2FeatureExtractor"),Let.forEach(t),Lmo=r(YAe," (Hubert model)"),YAe.forEach(t),ymo=i(K),Ch=n(K,"LI",{});var KAe=s(Ch);lse=n(KAe,"STRONG",{});var yet=s(lse);xmo=r(yet,"imagegpt"),yet.forEach(t),$mo=r(KAe," \u2014 "),_I=n(KAe,"A",{href:!0});var xet=s(_I);kmo=r(xet,"ImageGPTFeatureExtractor"),xet.forEach(t),Smo=r(KAe," (ImageGPT model)"),KAe.forEach(t),Rmo=i(K),wh=n(K,"LI",{});var ZAe=s(wh);ise=n(ZAe,"STRONG",{});var $et=s(ise);Pmo=r($et,"layoutlmv2"),$et.forEach(t),Bmo=r(ZAe," \u2014 "),uI=n(ZAe,"A",{href:!0});var ket=s(uI);Imo=r(ket,"LayoutLMv2FeatureExtractor"),ket.forEach(t),Nmo=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),qmo=i(K),Ah=n(K,"LI",{});var e6e=s(Ah);dse=n(e6e,"STRONG",{});var Set=s(dse);jmo=r(Set,"layoutlmv3"),Set.forEach(t),Dmo=r(e6e," \u2014 "),bI=n(e6e,"A",{href:!0});var Ret=s(bI);Gmo=r(Ret,"LayoutLMv3FeatureExtractor"),Ret.forEach(t),Omo=r(e6e," (LayoutLMv3 model)"),e6e.forEach(t),Vmo=i(K),Lh=n(K,"LI",{});var o6e=s(Lh);cse=n(o6e,"STRONG",{});var Pet=s(cse);Xmo=r(Pet,"levit"),Pet.forEach(t),zmo=r(o6e," \u2014 "),vI=n(o6e,"A",{href:!0});var Bet=s(vI);Wmo=r(Bet,"LevitFeatureExtractor"),Bet.forEach(t),Qmo=r(o6e," (LeViT model)"),o6e.forEach(t),Hmo=i(K),yh=n(K,"LI",{});var r6e=s(yh);fse=n(r6e,"STRONG",{});var Iet=s(fse);Umo=r(Iet,"maskformer"),Iet.forEach(t),Jmo=r(r6e," \u2014 "),FI=n(r6e,"A",{href:!0});var Net=s(FI);Ymo=r(Net,"MaskFormerFeatureExtractor"),Net.forEach(t),Kmo=r(r6e," (MaskFormer model)"),r6e.forEach(t),Zmo=i(K),xh=n(K,"LI",{});var t6e=s(xh);mse=n(t6e,"STRONG",{});var qet=s(mse);ego=r(qet,"perceiver"),qet.forEach(t),ogo=r(t6e," \u2014 "),TI=n(t6e,"A",{href:!0});var jet=s(TI);rgo=r(jet,"PerceiverFeatureExtractor"),jet.forEach(t),tgo=r(t6e," (Perceiver model)"),t6e.forEach(t),ago=i(K),$h=n(K,"LI",{});var a6e=s($h);gse=n(a6e,"STRONG",{});var Det=s(gse);ngo=r(Det,"poolformer"),Det.forEach(t),sgo=r(a6e," \u2014 "),MI=n(a6e,"A",{href:!0});var Get=s(MI);lgo=r(Get,"PoolFormerFeatureExtractor"),Get.forEach(t),igo=r(a6e," (PoolFormer model)"),a6e.forEach(t),dgo=i(K),kh=n(K,"LI",{});var n6e=s(kh);hse=n(n6e,"STRONG",{});var Oet=s(hse);cgo=r(Oet,"regnet"),Oet.forEach(t),fgo=r(n6e," \u2014 "),EI=n(n6e,"A",{href:!0});var Vet=s(EI);mgo=r(Vet,"ConvNextFeatureExtractor"),Vet.forEach(t),ggo=r(n6e," (RegNet model)"),n6e.forEach(t),hgo=i(K),Sh=n(K,"LI",{});var s6e=s(Sh);pse=n(s6e,"STRONG",{});var Xet=s(pse);pgo=r(Xet,"resnet"),Xet.forEach(t),_go=r(s6e," \u2014 "),CI=n(s6e,"A",{href:!0});var zet=s(CI);ugo=r(zet,"ConvNextFeatureExtractor"),zet.forEach(t),bgo=r(s6e," (ResNet model)"),s6e.forEach(t),vgo=i(K),Rh=n(K,"LI",{});var l6e=s(Rh);_se=n(l6e,"STRONG",{});var Wet=s(_se);Fgo=r(Wet,"segformer"),Wet.forEach(t),Tgo=r(l6e," \u2014 "),wI=n(l6e,"A",{href:!0});var Qet=s(wI);Mgo=r(Qet,"SegformerFeatureExtractor"),Qet.forEach(t),Ego=r(l6e," (SegFormer model)"),l6e.forEach(t),Cgo=i(K),Ph=n(K,"LI",{});var i6e=s(Ph);use=n(i6e,"STRONG",{});var Het=s(use);wgo=r(Het,"speech_to_text"),Het.forEach(t),Ago=r(i6e," \u2014 "),AI=n(i6e,"A",{href:!0});var Uet=s(AI);Lgo=r(Uet,"Speech2TextFeatureExtractor"),Uet.forEach(t),ygo=r(i6e," (Speech2Text model)"),i6e.forEach(t),xgo=i(K),Bh=n(K,"LI",{});var d6e=s(Bh);bse=n(d6e,"STRONG",{});var Jet=s(bse);$go=r(Jet,"swin"),Jet.forEach(t),kgo=r(d6e," \u2014 "),LI=n(d6e,"A",{href:!0});var Yet=s(LI);Sgo=r(Yet,"ViTFeatureExtractor"),Yet.forEach(t),Rgo=r(d6e," (Swin Transformer model)"),d6e.forEach(t),Pgo=i(K),Ih=n(K,"LI",{});var c6e=s(Ih);vse=n(c6e,"STRONG",{});var Ket=s(vse);Bgo=r(Ket,"van"),Ket.forEach(t),Igo=r(c6e," \u2014 "),yI=n(c6e,"A",{href:!0});var Zet=s(yI);Ngo=r(Zet,"ConvNextFeatureExtractor"),Zet.forEach(t),qgo=r(c6e," (VAN model)"),c6e.forEach(t),jgo=i(K),Nh=n(K,"LI",{});var f6e=s(Nh);Fse=n(f6e,"STRONG",{});var eot=s(Fse);Dgo=r(eot,"vit"),eot.forEach(t),Ggo=r(f6e," \u2014 "),xI=n(f6e,"A",{href:!0});var oot=s(xI);Ogo=r(oot,"ViTFeatureExtractor"),oot.forEach(t),Vgo=r(f6e," (ViT model)"),f6e.forEach(t),Xgo=i(K),qh=n(K,"LI",{});var m6e=s(qh);Tse=n(m6e,"STRONG",{});var rot=s(Tse);zgo=r(rot,"vit_mae"),rot.forEach(t),Wgo=r(m6e," \u2014 "),$I=n(m6e,"A",{href:!0});var tot=s($I);Qgo=r(tot,"ViTFeatureExtractor"),tot.forEach(t),Hgo=r(m6e," (ViTMAE model)"),m6e.forEach(t),Ugo=i(K),jh=n(K,"LI",{});var g6e=s(jh);Mse=n(g6e,"STRONG",{});var aot=s(Mse);Jgo=r(aot,"wav2vec2"),aot.forEach(t),Ygo=r(g6e," \u2014 "),kI=n(g6e,"A",{href:!0});var not=s(kI);Kgo=r(not,"Wav2Vec2FeatureExtractor"),not.forEach(t),Zgo=r(g6e," (Wav2Vec2 model)"),g6e.forEach(t),eho=i(K),Dh=n(K,"LI",{});var h6e=s(Dh);Ese=n(h6e,"STRONG",{});var sot=s(Ese);oho=r(sot,"wav2vec2-conformer"),sot.forEach(t),rho=r(h6e," \u2014 "),SI=n(h6e,"A",{href:!0});var lot=s(SI);tho=r(lot,"Wav2Vec2FeatureExtractor"),lot.forEach(t),aho=r(h6e," (Wav2Vec2-Conformer model)"),h6e.forEach(t),nho=i(K),Gh=n(K,"LI",{});var p6e=s(Gh);Cse=n(p6e,"STRONG",{});var iot=s(Cse);sho=r(iot,"yolos"),iot.forEach(t),lho=r(p6e," \u2014 "),RI=n(p6e,"A",{href:!0});var dot=s(RI);iho=r(dot,"YolosFeatureExtractor"),dot.forEach(t),dho=r(p6e," (YOLOS model)"),p6e.forEach(t),K.forEach(t),cho=i(Zt),T(Oh.$$.fragment,Zt),fho=i(Zt),T(Vh.$$.fragment,Zt),Zt.forEach(t),mho=i(Gs),Xh=n(Gs,"DIV",{class:!0});var hGe=s(Xh);T(sL.$$.fragment,hGe),gho=i(hGe),wse=n(hGe,"P",{});var cot=s(wse);hho=r(cot,"Register a new feature extractor for this class."),cot.forEach(t),hGe.forEach(t),Gs.forEach(t),gje=i(f),wi=n(f,"H2",{class:!0});var pGe=s(wi);zh=n(pGe,"A",{id:!0,class:!0,href:!0});var fot=s(zh);Ase=n(fot,"SPAN",{});var mot=s(Ase);T(lL.$$.fragment,mot),mot.forEach(t),fot.forEach(t),pho=i(pGe),Lse=n(pGe,"SPAN",{});var got=s(Lse);_ho=r(got,"AutoProcessor"),got.forEach(t),pGe.forEach(t),hje=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(iL.$$.fragment,Os),uho=i(Os),dL=n(Os,"P",{});var _Ge=s(dL);bho=r(_Ge,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PI=n(_Ge,"A",{href:!0});var hot=s(PI);vho=r(hot,"AutoProcessor.from_pretrained()"),hot.forEach(t),Fho=r(_Ge," class method."),_Ge.forEach(t),Tho=i(Os),cL=n(Os,"P",{});var uGe=s(cL);Mho=r(uGe,"This class cannot be instantiated directly using "),yse=n(uGe,"CODE",{});var pot=s(yse);Eho=r(pot,"__init__()"),pot.forEach(t),Cho=r(uGe," (throws an error)."),uGe.forEach(t),who=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(fL.$$.fragment,ea),Aho=i(ea),xse=n(ea,"P",{});var _ot=s(xse);Lho=r(_ot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_ot.forEach(t),yho=i(ea),Ai=n(ea,"P",{});var WZ=s(Ai);xho=r(WZ,"The processor class to instantiate is selected based on the "),$se=n(WZ,"CODE",{});var uot=s($se);$ho=r(uot,"model_type"),uot.forEach(t),kho=r(WZ,` property of the config object (either
passed as an argument or loaded from `),kse=n(WZ,"CODE",{});var bot=s(kse);Sho=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),Rho=r(WZ," if possible):"),WZ.forEach(t),Pho=i(ea),he=n(ea,"UL",{});var _e=s(he);Wh=n(_e,"LI",{});var _6e=s(Wh);Sse=n(_6e,"STRONG",{});var vot=s(Sse);Bho=r(vot,"clip"),vot.forEach(t),Iho=r(_6e," \u2014 "),BI=n(_6e,"A",{href:!0});var Fot=s(BI);Nho=r(Fot,"CLIPProcessor"),Fot.forEach(t),qho=r(_6e," (CLIP model)"),_6e.forEach(t),jho=i(_e),Qh=n(_e,"LI",{});var u6e=s(Qh);Rse=n(u6e,"STRONG",{});var Tot=s(Rse);Dho=r(Tot,"flava"),Tot.forEach(t),Gho=r(u6e," \u2014 "),Pse=n(u6e,"CODE",{});var Mot=s(Pse);Oho=r(Mot,"FLAVAProcessor"),Mot.forEach(t),Vho=r(u6e," (FLAVA model)"),u6e.forEach(t),Xho=i(_e),Hh=n(_e,"LI",{});var b6e=s(Hh);Bse=n(b6e,"STRONG",{});var Eot=s(Bse);zho=r(Eot,"groupvit"),Eot.forEach(t),Who=r(b6e," \u2014 "),II=n(b6e,"A",{href:!0});var Cot=s(II);Qho=r(Cot,"CLIPProcessor"),Cot.forEach(t),Hho=r(b6e," (GroupViT model)"),b6e.forEach(t),Uho=i(_e),Uh=n(_e,"LI",{});var v6e=s(Uh);Ise=n(v6e,"STRONG",{});var wot=s(Ise);Jho=r(wot,"layoutlmv2"),wot.forEach(t),Yho=r(v6e," \u2014 "),NI=n(v6e,"A",{href:!0});var Aot=s(NI);Kho=r(Aot,"LayoutLMv2Processor"),Aot.forEach(t),Zho=r(v6e," (LayoutLMv2 model)"),v6e.forEach(t),epo=i(_e),Jh=n(_e,"LI",{});var F6e=s(Jh);Nse=n(F6e,"STRONG",{});var Lot=s(Nse);opo=r(Lot,"layoutlmv3"),Lot.forEach(t),rpo=r(F6e," \u2014 "),qI=n(F6e,"A",{href:!0});var yot=s(qI);tpo=r(yot,"LayoutLMv3Processor"),yot.forEach(t),apo=r(F6e," (LayoutLMv3 model)"),F6e.forEach(t),npo=i(_e),Yh=n(_e,"LI",{});var T6e=s(Yh);qse=n(T6e,"STRONG",{});var xot=s(qse);spo=r(xot,"layoutxlm"),xot.forEach(t),lpo=r(T6e," \u2014 "),jI=n(T6e,"A",{href:!0});var $ot=s(jI);ipo=r($ot,"LayoutXLMProcessor"),$ot.forEach(t),dpo=r(T6e," (LayoutXLM model)"),T6e.forEach(t),cpo=i(_e),Kh=n(_e,"LI",{});var M6e=s(Kh);jse=n(M6e,"STRONG",{});var kot=s(jse);fpo=r(kot,"sew"),kot.forEach(t),mpo=r(M6e," \u2014 "),DI=n(M6e,"A",{href:!0});var Sot=s(DI);gpo=r(Sot,"Wav2Vec2Processor"),Sot.forEach(t),hpo=r(M6e," (SEW model)"),M6e.forEach(t),ppo=i(_e),Zh=n(_e,"LI",{});var E6e=s(Zh);Dse=n(E6e,"STRONG",{});var Rot=s(Dse);_po=r(Rot,"sew-d"),Rot.forEach(t),upo=r(E6e," \u2014 "),GI=n(E6e,"A",{href:!0});var Pot=s(GI);bpo=r(Pot,"Wav2Vec2Processor"),Pot.forEach(t),vpo=r(E6e," (SEW-D model)"),E6e.forEach(t),Fpo=i(_e),ep=n(_e,"LI",{});var C6e=s(ep);Gse=n(C6e,"STRONG",{});var Bot=s(Gse);Tpo=r(Bot,"speech_to_text"),Bot.forEach(t),Mpo=r(C6e," \u2014 "),OI=n(C6e,"A",{href:!0});var Iot=s(OI);Epo=r(Iot,"Speech2TextProcessor"),Iot.forEach(t),Cpo=r(C6e," (Speech2Text model)"),C6e.forEach(t),wpo=i(_e),op=n(_e,"LI",{});var w6e=s(op);Ose=n(w6e,"STRONG",{});var Not=s(Ose);Apo=r(Not,"speech_to_text_2"),Not.forEach(t),Lpo=r(w6e," \u2014 "),VI=n(w6e,"A",{href:!0});var qot=s(VI);ypo=r(qot,"Speech2Text2Processor"),qot.forEach(t),xpo=r(w6e," (Speech2Text2 model)"),w6e.forEach(t),$po=i(_e),rp=n(_e,"LI",{});var A6e=s(rp);Vse=n(A6e,"STRONG",{});var jot=s(Vse);kpo=r(jot,"trocr"),jot.forEach(t),Spo=r(A6e," \u2014 "),XI=n(A6e,"A",{href:!0});var Dot=s(XI);Rpo=r(Dot,"TrOCRProcessor"),Dot.forEach(t),Ppo=r(A6e," (TrOCR model)"),A6e.forEach(t),Bpo=i(_e),tp=n(_e,"LI",{});var L6e=s(tp);Xse=n(L6e,"STRONG",{});var Got=s(Xse);Ipo=r(Got,"unispeech"),Got.forEach(t),Npo=r(L6e," \u2014 "),zI=n(L6e,"A",{href:!0});var Oot=s(zI);qpo=r(Oot,"Wav2Vec2Processor"),Oot.forEach(t),jpo=r(L6e," (UniSpeech model)"),L6e.forEach(t),Dpo=i(_e),ap=n(_e,"LI",{});var y6e=s(ap);zse=n(y6e,"STRONG",{});var Vot=s(zse);Gpo=r(Vot,"unispeech-sat"),Vot.forEach(t),Opo=r(y6e," \u2014 "),WI=n(y6e,"A",{href:!0});var Xot=s(WI);Vpo=r(Xot,"Wav2Vec2Processor"),Xot.forEach(t),Xpo=r(y6e," (UniSpeechSat model)"),y6e.forEach(t),zpo=i(_e),np=n(_e,"LI",{});var x6e=s(np);Wse=n(x6e,"STRONG",{});var zot=s(Wse);Wpo=r(zot,"vilt"),zot.forEach(t),Qpo=r(x6e," \u2014 "),QI=n(x6e,"A",{href:!0});var Wot=s(QI);Hpo=r(Wot,"ViltProcessor"),Wot.forEach(t),Upo=r(x6e," (ViLT model)"),x6e.forEach(t),Jpo=i(_e),sp=n(_e,"LI",{});var $6e=s(sp);Qse=n($6e,"STRONG",{});var Qot=s(Qse);Ypo=r(Qot,"vision-text-dual-encoder"),Qot.forEach(t),Kpo=r($6e," \u2014 "),HI=n($6e,"A",{href:!0});var Hot=s(HI);Zpo=r(Hot,"VisionTextDualEncoderProcessor"),Hot.forEach(t),e_o=r($6e," (VisionTextDualEncoder model)"),$6e.forEach(t),o_o=i(_e),lp=n(_e,"LI",{});var k6e=s(lp);Hse=n(k6e,"STRONG",{});var Uot=s(Hse);r_o=r(Uot,"wav2vec2"),Uot.forEach(t),t_o=r(k6e," \u2014 "),UI=n(k6e,"A",{href:!0});var Jot=s(UI);a_o=r(Jot,"Wav2Vec2Processor"),Jot.forEach(t),n_o=r(k6e," (Wav2Vec2 model)"),k6e.forEach(t),s_o=i(_e),ip=n(_e,"LI",{});var S6e=s(ip);Use=n(S6e,"STRONG",{});var Yot=s(Use);l_o=r(Yot,"wav2vec2-conformer"),Yot.forEach(t),i_o=r(S6e," \u2014 "),JI=n(S6e,"A",{href:!0});var Kot=s(JI);d_o=r(Kot,"Wav2Vec2Processor"),Kot.forEach(t),c_o=r(S6e," (Wav2Vec2-Conformer model)"),S6e.forEach(t),f_o=i(_e),dp=n(_e,"LI",{});var R6e=s(dp);Jse=n(R6e,"STRONG",{});var Zot=s(Jse);m_o=r(Zot,"wavlm"),Zot.forEach(t),g_o=r(R6e," \u2014 "),YI=n(R6e,"A",{href:!0});var ert=s(YI);h_o=r(ert,"Wav2Vec2Processor"),ert.forEach(t),p_o=r(R6e," (WavLM model)"),R6e.forEach(t),_e.forEach(t),__o=i(ea),T(cp.$$.fragment,ea),u_o=i(ea),T(fp.$$.fragment,ea),ea.forEach(t),b_o=i(Os),mp=n(Os,"DIV",{class:!0});var bGe=s(mp);T(mL.$$.fragment,bGe),v_o=i(bGe),Yse=n(bGe,"P",{});var ort=s(Yse);F_o=r(ort,"Register a new processor for this class."),ort.forEach(t),bGe.forEach(t),Os.forEach(t),pje=i(f),Li=n(f,"H2",{class:!0});var vGe=s(Li);gp=n(vGe,"A",{id:!0,class:!0,href:!0});var rrt=s(gp);Kse=n(rrt,"SPAN",{});var trt=s(Kse);T(gL.$$.fragment,trt),trt.forEach(t),rrt.forEach(t),T_o=i(vGe),Zse=n(vGe,"SPAN",{});var art=s(Zse);M_o=r(art,"AutoModel"),art.forEach(t),vGe.forEach(t),_je=i(f),yo=n(f,"DIV",{class:!0});var Vs=s(yo);T(hL.$$.fragment,Vs),E_o=i(Vs),yi=n(Vs,"P",{});var QZ=s(yi);C_o=r(QZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KI=n(QZ,"A",{href:!0});var nrt=s(KI);w_o=r(nrt,"from_pretrained()"),nrt.forEach(t),A_o=r(QZ," class method or the "),ZI=n(QZ,"A",{href:!0});var srt=s(ZI);L_o=r(srt,"from_config()"),srt.forEach(t),y_o=r(QZ,` class
method.`),QZ.forEach(t),x_o=i(Vs),pL=n(Vs,"P",{});var FGe=s(pL);$_o=r(FGe,"This class cannot be instantiated directly using "),ele=n(FGe,"CODE",{});var lrt=s(ele);k_o=r(lrt,"__init__()"),lrt.forEach(t),S_o=r(FGe," (throws an error)."),FGe.forEach(t),R_o=i(Vs),tt=n(Vs,"DIV",{class:!0});var zw=s(tt);T(_L.$$.fragment,zw),P_o=i(zw),ole=n(zw,"P",{});var irt=s(ole);B_o=r(irt,"Instantiates one of the base model classes of the library from a configuration."),irt.forEach(t),I_o=i(zw),xi=n(zw,"P",{});var HZ=s(xi);N_o=r(HZ,`Note:
Loading a model from its configuration file does `),rle=n(HZ,"STRONG",{});var drt=s(rle);q_o=r(drt,"not"),drt.forEach(t),j_o=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=n(HZ,"A",{href:!0});var crt=s(eN);D_o=r(crt,"from_pretrained()"),crt.forEach(t),G_o=r(HZ," to load the model weights."),HZ.forEach(t),O_o=i(zw),T(hp.$$.fragment,zw),zw.forEach(t),V_o=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(uL.$$.fragment,oa),X_o=i(oa),tle=n(oa,"P",{});var frt=s(tle);z_o=r(frt,"Instantiate one of the base model classes of the library from a pretrained model."),frt.forEach(t),W_o=i(oa),ya=n(oa,"P",{});var Ww=s(ya);Q_o=r(Ww,"The model class to instantiate is selected based on the "),ale=n(Ww,"CODE",{});var mrt=s(ale);H_o=r(mrt,"model_type"),mrt.forEach(t),U_o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),nle=n(Ww,"CODE",{});var grt=s(nle);J_o=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),Y_o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=n(Ww,"CODE",{});var hrt=s(sle);K_o=r(hrt,"pretrained_model_name_or_path"),hrt.forEach(t),Z_o=r(Ww,":"),Ww.forEach(t),euo=i(oa),x=n(oa,"UL",{});var $=s(x);pp=n($,"LI",{});var P6e=s(pp);lle=n(P6e,"STRONG",{});var prt=s(lle);ouo=r(prt,"albert"),prt.forEach(t),ruo=r(P6e," \u2014 "),oN=n(P6e,"A",{href:!0});var _rt=s(oN);tuo=r(_rt,"AlbertModel"),_rt.forEach(t),auo=r(P6e," (ALBERT model)"),P6e.forEach(t),nuo=i($),_p=n($,"LI",{});var B6e=s(_p);ile=n(B6e,"STRONG",{});var urt=s(ile);suo=r(urt,"bart"),urt.forEach(t),luo=r(B6e," \u2014 "),rN=n(B6e,"A",{href:!0});var brt=s(rN);iuo=r(brt,"BartModel"),brt.forEach(t),duo=r(B6e," (BART model)"),B6e.forEach(t),cuo=i($),up=n($,"LI",{});var I6e=s(up);dle=n(I6e,"STRONG",{});var vrt=s(dle);fuo=r(vrt,"beit"),vrt.forEach(t),muo=r(I6e," \u2014 "),tN=n(I6e,"A",{href:!0});var Frt=s(tN);guo=r(Frt,"BeitModel"),Frt.forEach(t),huo=r(I6e," (BEiT model)"),I6e.forEach(t),puo=i($),bp=n($,"LI",{});var N6e=s(bp);cle=n(N6e,"STRONG",{});var Trt=s(cle);_uo=r(Trt,"bert"),Trt.forEach(t),uuo=r(N6e," \u2014 "),aN=n(N6e,"A",{href:!0});var Mrt=s(aN);buo=r(Mrt,"BertModel"),Mrt.forEach(t),vuo=r(N6e," (BERT model)"),N6e.forEach(t),Fuo=i($),vp=n($,"LI",{});var q6e=s(vp);fle=n(q6e,"STRONG",{});var Ert=s(fle);Tuo=r(Ert,"bert-generation"),Ert.forEach(t),Muo=r(q6e," \u2014 "),nN=n(q6e,"A",{href:!0});var Crt=s(nN);Euo=r(Crt,"BertGenerationEncoder"),Crt.forEach(t),Cuo=r(q6e," (Bert Generation model)"),q6e.forEach(t),wuo=i($),Fp=n($,"LI",{});var j6e=s(Fp);mle=n(j6e,"STRONG",{});var wrt=s(mle);Auo=r(wrt,"big_bird"),wrt.forEach(t),Luo=r(j6e," \u2014 "),sN=n(j6e,"A",{href:!0});var Art=s(sN);yuo=r(Art,"BigBirdModel"),Art.forEach(t),xuo=r(j6e," (BigBird model)"),j6e.forEach(t),$uo=i($),Tp=n($,"LI",{});var D6e=s(Tp);gle=n(D6e,"STRONG",{});var Lrt=s(gle);kuo=r(Lrt,"bigbird_pegasus"),Lrt.forEach(t),Suo=r(D6e," \u2014 "),lN=n(D6e,"A",{href:!0});var yrt=s(lN);Ruo=r(yrt,"BigBirdPegasusModel"),yrt.forEach(t),Puo=r(D6e," (BigBird-Pegasus model)"),D6e.forEach(t),Buo=i($),Mp=n($,"LI",{});var G6e=s(Mp);hle=n(G6e,"STRONG",{});var xrt=s(hle);Iuo=r(xrt,"blenderbot"),xrt.forEach(t),Nuo=r(G6e," \u2014 "),iN=n(G6e,"A",{href:!0});var $rt=s(iN);quo=r($rt,"BlenderbotModel"),$rt.forEach(t),juo=r(G6e," (Blenderbot model)"),G6e.forEach(t),Duo=i($),Ep=n($,"LI",{});var O6e=s(Ep);ple=n(O6e,"STRONG",{});var krt=s(ple);Guo=r(krt,"blenderbot-small"),krt.forEach(t),Ouo=r(O6e," \u2014 "),dN=n(O6e,"A",{href:!0});var Srt=s(dN);Vuo=r(Srt,"BlenderbotSmallModel"),Srt.forEach(t),Xuo=r(O6e," (BlenderbotSmall model)"),O6e.forEach(t),zuo=i($),Cp=n($,"LI",{});var V6e=s(Cp);_le=n(V6e,"STRONG",{});var Rrt=s(_le);Wuo=r(Rrt,"camembert"),Rrt.forEach(t),Quo=r(V6e," \u2014 "),cN=n(V6e,"A",{href:!0});var Prt=s(cN);Huo=r(Prt,"CamembertModel"),Prt.forEach(t),Uuo=r(V6e," (CamemBERT model)"),V6e.forEach(t),Juo=i($),wp=n($,"LI",{});var X6e=s(wp);ule=n(X6e,"STRONG",{});var Brt=s(ule);Yuo=r(Brt,"canine"),Brt.forEach(t),Kuo=r(X6e," \u2014 "),fN=n(X6e,"A",{href:!0});var Irt=s(fN);Zuo=r(Irt,"CanineModel"),Irt.forEach(t),e1o=r(X6e," (CANINE model)"),X6e.forEach(t),o1o=i($),Ap=n($,"LI",{});var z6e=s(Ap);ble=n(z6e,"STRONG",{});var Nrt=s(ble);r1o=r(Nrt,"clip"),Nrt.forEach(t),t1o=r(z6e," \u2014 "),mN=n(z6e,"A",{href:!0});var qrt=s(mN);a1o=r(qrt,"CLIPModel"),qrt.forEach(t),n1o=r(z6e," (CLIP model)"),z6e.forEach(t),s1o=i($),Lp=n($,"LI",{});var W6e=s(Lp);vle=n(W6e,"STRONG",{});var jrt=s(vle);l1o=r(jrt,"convbert"),jrt.forEach(t),i1o=r(W6e," \u2014 "),gN=n(W6e,"A",{href:!0});var Drt=s(gN);d1o=r(Drt,"ConvBertModel"),Drt.forEach(t),c1o=r(W6e," (ConvBERT model)"),W6e.forEach(t),f1o=i($),yp=n($,"LI",{});var Q6e=s(yp);Fle=n(Q6e,"STRONG",{});var Grt=s(Fle);m1o=r(Grt,"convnext"),Grt.forEach(t),g1o=r(Q6e," \u2014 "),hN=n(Q6e,"A",{href:!0});var Ort=s(hN);h1o=r(Ort,"ConvNextModel"),Ort.forEach(t),p1o=r(Q6e," (ConvNeXT model)"),Q6e.forEach(t),_1o=i($),xp=n($,"LI",{});var H6e=s(xp);Tle=n(H6e,"STRONG",{});var Vrt=s(Tle);u1o=r(Vrt,"ctrl"),Vrt.forEach(t),b1o=r(H6e," \u2014 "),pN=n(H6e,"A",{href:!0});var Xrt=s(pN);v1o=r(Xrt,"CTRLModel"),Xrt.forEach(t),F1o=r(H6e," (CTRL model)"),H6e.forEach(t),T1o=i($),$p=n($,"LI",{});var U6e=s($p);Mle=n(U6e,"STRONG",{});var zrt=s(Mle);M1o=r(zrt,"cvt"),zrt.forEach(t),E1o=r(U6e," \u2014 "),_N=n(U6e,"A",{href:!0});var Wrt=s(_N);C1o=r(Wrt,"CvtModel"),Wrt.forEach(t),w1o=r(U6e," (CvT model)"),U6e.forEach(t),A1o=i($),kp=n($,"LI",{});var J6e=s(kp);Ele=n(J6e,"STRONG",{});var Qrt=s(Ele);L1o=r(Qrt,"data2vec-audio"),Qrt.forEach(t),y1o=r(J6e," \u2014 "),uN=n(J6e,"A",{href:!0});var Hrt=s(uN);x1o=r(Hrt,"Data2VecAudioModel"),Hrt.forEach(t),$1o=r(J6e," (Data2VecAudio model)"),J6e.forEach(t),k1o=i($),Sp=n($,"LI",{});var Y6e=s(Sp);Cle=n(Y6e,"STRONG",{});var Urt=s(Cle);S1o=r(Urt,"data2vec-text"),Urt.forEach(t),R1o=r(Y6e," \u2014 "),bN=n(Y6e,"A",{href:!0});var Jrt=s(bN);P1o=r(Jrt,"Data2VecTextModel"),Jrt.forEach(t),B1o=r(Y6e," (Data2VecText model)"),Y6e.forEach(t),I1o=i($),Rp=n($,"LI",{});var K6e=s(Rp);wle=n(K6e,"STRONG",{});var Yrt=s(wle);N1o=r(Yrt,"data2vec-vision"),Yrt.forEach(t),q1o=r(K6e," \u2014 "),vN=n(K6e,"A",{href:!0});var Krt=s(vN);j1o=r(Krt,"Data2VecVisionModel"),Krt.forEach(t),D1o=r(K6e," (Data2VecVision model)"),K6e.forEach(t),G1o=i($),Pp=n($,"LI",{});var Z6e=s(Pp);Ale=n(Z6e,"STRONG",{});var Zrt=s(Ale);O1o=r(Zrt,"deberta"),Zrt.forEach(t),V1o=r(Z6e," \u2014 "),FN=n(Z6e,"A",{href:!0});var ett=s(FN);X1o=r(ett,"DebertaModel"),ett.forEach(t),z1o=r(Z6e," (DeBERTa model)"),Z6e.forEach(t),W1o=i($),Bp=n($,"LI",{});var eLe=s(Bp);Lle=n(eLe,"STRONG",{});var ott=s(Lle);Q1o=r(ott,"deberta-v2"),ott.forEach(t),H1o=r(eLe," \u2014 "),TN=n(eLe,"A",{href:!0});var rtt=s(TN);U1o=r(rtt,"DebertaV2Model"),rtt.forEach(t),J1o=r(eLe," (DeBERTa-v2 model)"),eLe.forEach(t),Y1o=i($),Ip=n($,"LI",{});var oLe=s(Ip);yle=n(oLe,"STRONG",{});var ttt=s(yle);K1o=r(ttt,"decision_transformer"),ttt.forEach(t),Z1o=r(oLe," \u2014 "),MN=n(oLe,"A",{href:!0});var att=s(MN);e3o=r(att,"DecisionTransformerModel"),att.forEach(t),o3o=r(oLe," (Decision Transformer model)"),oLe.forEach(t),r3o=i($),Np=n($,"LI",{});var rLe=s(Np);xle=n(rLe,"STRONG",{});var ntt=s(xle);t3o=r(ntt,"deit"),ntt.forEach(t),a3o=r(rLe," \u2014 "),EN=n(rLe,"A",{href:!0});var stt=s(EN);n3o=r(stt,"DeiTModel"),stt.forEach(t),s3o=r(rLe," (DeiT model)"),rLe.forEach(t),l3o=i($),qp=n($,"LI",{});var tLe=s(qp);$le=n(tLe,"STRONG",{});var ltt=s($le);i3o=r(ltt,"detr"),ltt.forEach(t),d3o=r(tLe," \u2014 "),CN=n(tLe,"A",{href:!0});var itt=s(CN);c3o=r(itt,"DetrModel"),itt.forEach(t),f3o=r(tLe," (DETR model)"),tLe.forEach(t),m3o=i($),jp=n($,"LI",{});var aLe=s(jp);kle=n(aLe,"STRONG",{});var dtt=s(kle);g3o=r(dtt,"distilbert"),dtt.forEach(t),h3o=r(aLe," \u2014 "),wN=n(aLe,"A",{href:!0});var ctt=s(wN);p3o=r(ctt,"DistilBertModel"),ctt.forEach(t),_3o=r(aLe," (DistilBERT model)"),aLe.forEach(t),u3o=i($),Dp=n($,"LI",{});var nLe=s(Dp);Sle=n(nLe,"STRONG",{});var ftt=s(Sle);b3o=r(ftt,"dpr"),ftt.forEach(t),v3o=r(nLe," \u2014 "),AN=n(nLe,"A",{href:!0});var mtt=s(AN);F3o=r(mtt,"DPRQuestionEncoder"),mtt.forEach(t),T3o=r(nLe," (DPR model)"),nLe.forEach(t),M3o=i($),Gp=n($,"LI",{});var sLe=s(Gp);Rle=n(sLe,"STRONG",{});var gtt=s(Rle);E3o=r(gtt,"dpt"),gtt.forEach(t),C3o=r(sLe," \u2014 "),LN=n(sLe,"A",{href:!0});var htt=s(LN);w3o=r(htt,"DPTModel"),htt.forEach(t),A3o=r(sLe," (DPT model)"),sLe.forEach(t),L3o=i($),Op=n($,"LI",{});var lLe=s(Op);Ple=n(lLe,"STRONG",{});var ptt=s(Ple);y3o=r(ptt,"electra"),ptt.forEach(t),x3o=r(lLe," \u2014 "),yN=n(lLe,"A",{href:!0});var _tt=s(yN);$3o=r(_tt,"ElectraModel"),_tt.forEach(t),k3o=r(lLe," (ELECTRA model)"),lLe.forEach(t),S3o=i($),Vp=n($,"LI",{});var iLe=s(Vp);Ble=n(iLe,"STRONG",{});var utt=s(Ble);R3o=r(utt,"flaubert"),utt.forEach(t),P3o=r(iLe," \u2014 "),xN=n(iLe,"A",{href:!0});var btt=s(xN);B3o=r(btt,"FlaubertModel"),btt.forEach(t),I3o=r(iLe," (FlauBERT model)"),iLe.forEach(t),N3o=i($),Xp=n($,"LI",{});var dLe=s(Xp);Ile=n(dLe,"STRONG",{});var vtt=s(Ile);q3o=r(vtt,"flava"),vtt.forEach(t),j3o=r(dLe," \u2014 "),$N=n(dLe,"A",{href:!0});var Ftt=s($N);D3o=r(Ftt,"FlavaModel"),Ftt.forEach(t),G3o=r(dLe," (FLAVA model)"),dLe.forEach(t),O3o=i($),zp=n($,"LI",{});var cLe=s(zp);Nle=n(cLe,"STRONG",{});var Ttt=s(Nle);V3o=r(Ttt,"fnet"),Ttt.forEach(t),X3o=r(cLe," \u2014 "),kN=n(cLe,"A",{href:!0});var Mtt=s(kN);z3o=r(Mtt,"FNetModel"),Mtt.forEach(t),W3o=r(cLe," (FNet model)"),cLe.forEach(t),Q3o=i($),Wp=n($,"LI",{});var fLe=s(Wp);qle=n(fLe,"STRONG",{});var Ett=s(qle);H3o=r(Ett,"fsmt"),Ett.forEach(t),U3o=r(fLe," \u2014 "),SN=n(fLe,"A",{href:!0});var Ctt=s(SN);J3o=r(Ctt,"FSMTModel"),Ctt.forEach(t),Y3o=r(fLe," (FairSeq Machine-Translation model)"),fLe.forEach(t),K3o=i($),Bs=n($,"LI",{});var tk=s(Bs);jle=n(tk,"STRONG",{});var wtt=s(jle);Z3o=r(wtt,"funnel"),wtt.forEach(t),ebo=r(tk," \u2014 "),RN=n(tk,"A",{href:!0});var Att=s(RN);obo=r(Att,"FunnelModel"),Att.forEach(t),rbo=r(tk," or "),PN=n(tk,"A",{href:!0});var Ltt=s(PN);tbo=r(Ltt,"FunnelBaseModel"),Ltt.forEach(t),abo=r(tk," (Funnel Transformer model)"),tk.forEach(t),nbo=i($),Qp=n($,"LI",{});var mLe=s(Qp);Dle=n(mLe,"STRONG",{});var ytt=s(Dle);sbo=r(ytt,"glpn"),ytt.forEach(t),lbo=r(mLe," \u2014 "),BN=n(mLe,"A",{href:!0});var xtt=s(BN);ibo=r(xtt,"GLPNModel"),xtt.forEach(t),dbo=r(mLe," (GLPN model)"),mLe.forEach(t),cbo=i($),Hp=n($,"LI",{});var gLe=s(Hp);Gle=n(gLe,"STRONG",{});var $tt=s(Gle);fbo=r($tt,"gpt2"),$tt.forEach(t),mbo=r(gLe," \u2014 "),IN=n(gLe,"A",{href:!0});var ktt=s(IN);gbo=r(ktt,"GPT2Model"),ktt.forEach(t),hbo=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),pbo=i($),Up=n($,"LI",{});var hLe=s(Up);Ole=n(hLe,"STRONG",{});var Stt=s(Ole);_bo=r(Stt,"gpt_neo"),Stt.forEach(t),ubo=r(hLe," \u2014 "),NN=n(hLe,"A",{href:!0});var Rtt=s(NN);bbo=r(Rtt,"GPTNeoModel"),Rtt.forEach(t),vbo=r(hLe," (GPT Neo model)"),hLe.forEach(t),Fbo=i($),Jp=n($,"LI",{});var pLe=s(Jp);Vle=n(pLe,"STRONG",{});var Ptt=s(Vle);Tbo=r(Ptt,"gpt_neox"),Ptt.forEach(t),Mbo=r(pLe," \u2014 "),qN=n(pLe,"A",{href:!0});var Btt=s(qN);Ebo=r(Btt,"GPTNeoXModel"),Btt.forEach(t),Cbo=r(pLe," (GPT NeoX model)"),pLe.forEach(t),wbo=i($),Yp=n($,"LI",{});var _Le=s(Yp);Xle=n(_Le,"STRONG",{});var Itt=s(Xle);Abo=r(Itt,"gptj"),Itt.forEach(t),Lbo=r(_Le," \u2014 "),jN=n(_Le,"A",{href:!0});var Ntt=s(jN);ybo=r(Ntt,"GPTJModel"),Ntt.forEach(t),xbo=r(_Le," (GPT-J model)"),_Le.forEach(t),$bo=i($),Kp=n($,"LI",{});var uLe=s(Kp);zle=n(uLe,"STRONG",{});var qtt=s(zle);kbo=r(qtt,"groupvit"),qtt.forEach(t),Sbo=r(uLe," \u2014 "),DN=n(uLe,"A",{href:!0});var jtt=s(DN);Rbo=r(jtt,"GroupViTModel"),jtt.forEach(t),Pbo=r(uLe," (GroupViT model)"),uLe.forEach(t),Bbo=i($),Zp=n($,"LI",{});var bLe=s(Zp);Wle=n(bLe,"STRONG",{});var Dtt=s(Wle);Ibo=r(Dtt,"hubert"),Dtt.forEach(t),Nbo=r(bLe," \u2014 "),GN=n(bLe,"A",{href:!0});var Gtt=s(GN);qbo=r(Gtt,"HubertModel"),Gtt.forEach(t),jbo=r(bLe," (Hubert model)"),bLe.forEach(t),Dbo=i($),e_=n($,"LI",{});var vLe=s(e_);Qle=n(vLe,"STRONG",{});var Ott=s(Qle);Gbo=r(Ott,"ibert"),Ott.forEach(t),Obo=r(vLe," \u2014 "),ON=n(vLe,"A",{href:!0});var Vtt=s(ON);Vbo=r(Vtt,"IBertModel"),Vtt.forEach(t),Xbo=r(vLe," (I-BERT model)"),vLe.forEach(t),zbo=i($),o_=n($,"LI",{});var FLe=s(o_);Hle=n(FLe,"STRONG",{});var Xtt=s(Hle);Wbo=r(Xtt,"imagegpt"),Xtt.forEach(t),Qbo=r(FLe," \u2014 "),VN=n(FLe,"A",{href:!0});var ztt=s(VN);Hbo=r(ztt,"ImageGPTModel"),ztt.forEach(t),Ubo=r(FLe," (ImageGPT model)"),FLe.forEach(t),Jbo=i($),r_=n($,"LI",{});var TLe=s(r_);Ule=n(TLe,"STRONG",{});var Wtt=s(Ule);Ybo=r(Wtt,"layoutlm"),Wtt.forEach(t),Kbo=r(TLe," \u2014 "),XN=n(TLe,"A",{href:!0});var Qtt=s(XN);Zbo=r(Qtt,"LayoutLMModel"),Qtt.forEach(t),e2o=r(TLe," (LayoutLM model)"),TLe.forEach(t),o2o=i($),t_=n($,"LI",{});var MLe=s(t_);Jle=n(MLe,"STRONG",{});var Htt=s(Jle);r2o=r(Htt,"layoutlmv2"),Htt.forEach(t),t2o=r(MLe," \u2014 "),zN=n(MLe,"A",{href:!0});var Utt=s(zN);a2o=r(Utt,"LayoutLMv2Model"),Utt.forEach(t),n2o=r(MLe," (LayoutLMv2 model)"),MLe.forEach(t),s2o=i($),a_=n($,"LI",{});var ELe=s(a_);Yle=n(ELe,"STRONG",{});var Jtt=s(Yle);l2o=r(Jtt,"layoutlmv3"),Jtt.forEach(t),i2o=r(ELe," \u2014 "),WN=n(ELe,"A",{href:!0});var Ytt=s(WN);d2o=r(Ytt,"LayoutLMv3Model"),Ytt.forEach(t),c2o=r(ELe," (LayoutLMv3 model)"),ELe.forEach(t),f2o=i($),n_=n($,"LI",{});var CLe=s(n_);Kle=n(CLe,"STRONG",{});var Ktt=s(Kle);m2o=r(Ktt,"led"),Ktt.forEach(t),g2o=r(CLe," \u2014 "),QN=n(CLe,"A",{href:!0});var Ztt=s(QN);h2o=r(Ztt,"LEDModel"),Ztt.forEach(t),p2o=r(CLe," (LED model)"),CLe.forEach(t),_2o=i($),s_=n($,"LI",{});var wLe=s(s_);Zle=n(wLe,"STRONG",{});var eat=s(Zle);u2o=r(eat,"levit"),eat.forEach(t),b2o=r(wLe," \u2014 "),HN=n(wLe,"A",{href:!0});var oat=s(HN);v2o=r(oat,"LevitModel"),oat.forEach(t),F2o=r(wLe," (LeViT model)"),wLe.forEach(t),T2o=i($),l_=n($,"LI",{});var ALe=s(l_);eie=n(ALe,"STRONG",{});var rat=s(eie);M2o=r(rat,"longformer"),rat.forEach(t),E2o=r(ALe," \u2014 "),UN=n(ALe,"A",{href:!0});var tat=s(UN);C2o=r(tat,"LongformerModel"),tat.forEach(t),w2o=r(ALe," (Longformer model)"),ALe.forEach(t),A2o=i($),i_=n($,"LI",{});var LLe=s(i_);oie=n(LLe,"STRONG",{});var aat=s(oie);L2o=r(aat,"luke"),aat.forEach(t),y2o=r(LLe," \u2014 "),JN=n(LLe,"A",{href:!0});var nat=s(JN);x2o=r(nat,"LukeModel"),nat.forEach(t),$2o=r(LLe," (LUKE model)"),LLe.forEach(t),k2o=i($),d_=n($,"LI",{});var yLe=s(d_);rie=n(yLe,"STRONG",{});var sat=s(rie);S2o=r(sat,"lxmert"),sat.forEach(t),R2o=r(yLe," \u2014 "),YN=n(yLe,"A",{href:!0});var lat=s(YN);P2o=r(lat,"LxmertModel"),lat.forEach(t),B2o=r(yLe," (LXMERT model)"),yLe.forEach(t),I2o=i($),c_=n($,"LI",{});var xLe=s(c_);tie=n(xLe,"STRONG",{});var iat=s(tie);N2o=r(iat,"m2m_100"),iat.forEach(t),q2o=r(xLe," \u2014 "),KN=n(xLe,"A",{href:!0});var dat=s(KN);j2o=r(dat,"M2M100Model"),dat.forEach(t),D2o=r(xLe," (M2M100 model)"),xLe.forEach(t),G2o=i($),f_=n($,"LI",{});var $Le=s(f_);aie=n($Le,"STRONG",{});var cat=s(aie);O2o=r(cat,"marian"),cat.forEach(t),V2o=r($Le," \u2014 "),ZN=n($Le,"A",{href:!0});var fat=s(ZN);X2o=r(fat,"MarianModel"),fat.forEach(t),z2o=r($Le," (Marian model)"),$Le.forEach(t),W2o=i($),m_=n($,"LI",{});var kLe=s(m_);nie=n(kLe,"STRONG",{});var mat=s(nie);Q2o=r(mat,"maskformer"),mat.forEach(t),H2o=r(kLe," \u2014 "),eq=n(kLe,"A",{href:!0});var gat=s(eq);U2o=r(gat,"MaskFormerModel"),gat.forEach(t),J2o=r(kLe," (MaskFormer model)"),kLe.forEach(t),Y2o=i($),g_=n($,"LI",{});var SLe=s(g_);sie=n(SLe,"STRONG",{});var hat=s(sie);K2o=r(hat,"mbart"),hat.forEach(t),Z2o=r(SLe," \u2014 "),oq=n(SLe,"A",{href:!0});var pat=s(oq);evo=r(pat,"MBartModel"),pat.forEach(t),ovo=r(SLe," (mBART model)"),SLe.forEach(t),rvo=i($),h_=n($,"LI",{});var RLe=s(h_);lie=n(RLe,"STRONG",{});var _at=s(lie);tvo=r(_at,"megatron-bert"),_at.forEach(t),avo=r(RLe," \u2014 "),rq=n(RLe,"A",{href:!0});var uat=s(rq);nvo=r(uat,"MegatronBertModel"),uat.forEach(t),svo=r(RLe," (Megatron-BERT model)"),RLe.forEach(t),lvo=i($),p_=n($,"LI",{});var PLe=s(p_);iie=n(PLe,"STRONG",{});var bat=s(iie);ivo=r(bat,"mobilebert"),bat.forEach(t),dvo=r(PLe," \u2014 "),tq=n(PLe,"A",{href:!0});var vat=s(tq);cvo=r(vat,"MobileBertModel"),vat.forEach(t),fvo=r(PLe," (MobileBERT model)"),PLe.forEach(t),mvo=i($),__=n($,"LI",{});var BLe=s(__);die=n(BLe,"STRONG",{});var Fat=s(die);gvo=r(Fat,"mpnet"),Fat.forEach(t),hvo=r(BLe," \u2014 "),aq=n(BLe,"A",{href:!0});var Tat=s(aq);pvo=r(Tat,"MPNetModel"),Tat.forEach(t),_vo=r(BLe," (MPNet model)"),BLe.forEach(t),uvo=i($),u_=n($,"LI",{});var ILe=s(u_);cie=n(ILe,"STRONG",{});var Mat=s(cie);bvo=r(Mat,"mt5"),Mat.forEach(t),vvo=r(ILe," \u2014 "),nq=n(ILe,"A",{href:!0});var Eat=s(nq);Fvo=r(Eat,"MT5Model"),Eat.forEach(t),Tvo=r(ILe," (MT5 model)"),ILe.forEach(t),Mvo=i($),b_=n($,"LI",{});var NLe=s(b_);fie=n(NLe,"STRONG",{});var Cat=s(fie);Evo=r(Cat,"nystromformer"),Cat.forEach(t),Cvo=r(NLe," \u2014 "),sq=n(NLe,"A",{href:!0});var wat=s(sq);wvo=r(wat,"NystromformerModel"),wat.forEach(t),Avo=r(NLe," (Nystr\xF6mformer model)"),NLe.forEach(t),Lvo=i($),v_=n($,"LI",{});var qLe=s(v_);mie=n(qLe,"STRONG",{});var Aat=s(mie);yvo=r(Aat,"openai-gpt"),Aat.forEach(t),xvo=r(qLe," \u2014 "),lq=n(qLe,"A",{href:!0});var Lat=s(lq);$vo=r(Lat,"OpenAIGPTModel"),Lat.forEach(t),kvo=r(qLe," (OpenAI GPT model)"),qLe.forEach(t),Svo=i($),F_=n($,"LI",{});var jLe=s(F_);gie=n(jLe,"STRONG",{});var yat=s(gie);Rvo=r(yat,"opt"),yat.forEach(t),Pvo=r(jLe," \u2014 "),iq=n(jLe,"A",{href:!0});var xat=s(iq);Bvo=r(xat,"OPTModel"),xat.forEach(t),Ivo=r(jLe," (OPT model)"),jLe.forEach(t),Nvo=i($),T_=n($,"LI",{});var DLe=s(T_);hie=n(DLe,"STRONG",{});var $at=s(hie);qvo=r($at,"pegasus"),$at.forEach(t),jvo=r(DLe," \u2014 "),dq=n(DLe,"A",{href:!0});var kat=s(dq);Dvo=r(kat,"PegasusModel"),kat.forEach(t),Gvo=r(DLe," (Pegasus model)"),DLe.forEach(t),Ovo=i($),M_=n($,"LI",{});var GLe=s(M_);pie=n(GLe,"STRONG",{});var Sat=s(pie);Vvo=r(Sat,"perceiver"),Sat.forEach(t),Xvo=r(GLe," \u2014 "),cq=n(GLe,"A",{href:!0});var Rat=s(cq);zvo=r(Rat,"PerceiverModel"),Rat.forEach(t),Wvo=r(GLe," (Perceiver model)"),GLe.forEach(t),Qvo=i($),E_=n($,"LI",{});var OLe=s(E_);_ie=n(OLe,"STRONG",{});var Pat=s(_ie);Hvo=r(Pat,"plbart"),Pat.forEach(t),Uvo=r(OLe," \u2014 "),fq=n(OLe,"A",{href:!0});var Bat=s(fq);Jvo=r(Bat,"PLBartModel"),Bat.forEach(t),Yvo=r(OLe," (PLBart model)"),OLe.forEach(t),Kvo=i($),C_=n($,"LI",{});var VLe=s(C_);uie=n(VLe,"STRONG",{});var Iat=s(uie);Zvo=r(Iat,"poolformer"),Iat.forEach(t),eFo=r(VLe," \u2014 "),mq=n(VLe,"A",{href:!0});var Nat=s(mq);oFo=r(Nat,"PoolFormerModel"),Nat.forEach(t),rFo=r(VLe," (PoolFormer model)"),VLe.forEach(t),tFo=i($),w_=n($,"LI",{});var XLe=s(w_);bie=n(XLe,"STRONG",{});var qat=s(bie);aFo=r(qat,"prophetnet"),qat.forEach(t),nFo=r(XLe," \u2014 "),gq=n(XLe,"A",{href:!0});var jat=s(gq);sFo=r(jat,"ProphetNetModel"),jat.forEach(t),lFo=r(XLe," (ProphetNet model)"),XLe.forEach(t),iFo=i($),A_=n($,"LI",{});var zLe=s(A_);vie=n(zLe,"STRONG",{});var Dat=s(vie);dFo=r(Dat,"qdqbert"),Dat.forEach(t),cFo=r(zLe," \u2014 "),hq=n(zLe,"A",{href:!0});var Gat=s(hq);fFo=r(Gat,"QDQBertModel"),Gat.forEach(t),mFo=r(zLe," (QDQBert model)"),zLe.forEach(t),gFo=i($),L_=n($,"LI",{});var WLe=s(L_);Fie=n(WLe,"STRONG",{});var Oat=s(Fie);hFo=r(Oat,"reformer"),Oat.forEach(t),pFo=r(WLe," \u2014 "),pq=n(WLe,"A",{href:!0});var Vat=s(pq);_Fo=r(Vat,"ReformerModel"),Vat.forEach(t),uFo=r(WLe," (Reformer model)"),WLe.forEach(t),bFo=i($),y_=n($,"LI",{});var QLe=s(y_);Tie=n(QLe,"STRONG",{});var Xat=s(Tie);vFo=r(Xat,"regnet"),Xat.forEach(t),FFo=r(QLe," \u2014 "),_q=n(QLe,"A",{href:!0});var zat=s(_q);TFo=r(zat,"RegNetModel"),zat.forEach(t),MFo=r(QLe," (RegNet model)"),QLe.forEach(t),EFo=i($),x_=n($,"LI",{});var HLe=s(x_);Mie=n(HLe,"STRONG",{});var Wat=s(Mie);CFo=r(Wat,"rembert"),Wat.forEach(t),wFo=r(HLe," \u2014 "),uq=n(HLe,"A",{href:!0});var Qat=s(uq);AFo=r(Qat,"RemBertModel"),Qat.forEach(t),LFo=r(HLe," (RemBERT model)"),HLe.forEach(t),yFo=i($),$_=n($,"LI",{});var ULe=s($_);Eie=n(ULe,"STRONG",{});var Hat=s(Eie);xFo=r(Hat,"resnet"),Hat.forEach(t),$Fo=r(ULe," \u2014 "),bq=n(ULe,"A",{href:!0});var Uat=s(bq);kFo=r(Uat,"ResNetModel"),Uat.forEach(t),SFo=r(ULe," (ResNet model)"),ULe.forEach(t),RFo=i($),k_=n($,"LI",{});var JLe=s(k_);Cie=n(JLe,"STRONG",{});var Jat=s(Cie);PFo=r(Jat,"retribert"),Jat.forEach(t),BFo=r(JLe," \u2014 "),vq=n(JLe,"A",{href:!0});var Yat=s(vq);IFo=r(Yat,"RetriBertModel"),Yat.forEach(t),NFo=r(JLe," (RetriBERT model)"),JLe.forEach(t),qFo=i($),S_=n($,"LI",{});var YLe=s(S_);wie=n(YLe,"STRONG",{});var Kat=s(wie);jFo=r(Kat,"roberta"),Kat.forEach(t),DFo=r(YLe," \u2014 "),Fq=n(YLe,"A",{href:!0});var Zat=s(Fq);GFo=r(Zat,"RobertaModel"),Zat.forEach(t),OFo=r(YLe," (RoBERTa model)"),YLe.forEach(t),VFo=i($),R_=n($,"LI",{});var KLe=s(R_);Aie=n(KLe,"STRONG",{});var ent=s(Aie);XFo=r(ent,"roformer"),ent.forEach(t),zFo=r(KLe," \u2014 "),Tq=n(KLe,"A",{href:!0});var ont=s(Tq);WFo=r(ont,"RoFormerModel"),ont.forEach(t),QFo=r(KLe," (RoFormer model)"),KLe.forEach(t),HFo=i($),P_=n($,"LI",{});var ZLe=s(P_);Lie=n(ZLe,"STRONG",{});var rnt=s(Lie);UFo=r(rnt,"segformer"),rnt.forEach(t),JFo=r(ZLe," \u2014 "),Mq=n(ZLe,"A",{href:!0});var tnt=s(Mq);YFo=r(tnt,"SegformerModel"),tnt.forEach(t),KFo=r(ZLe," (SegFormer model)"),ZLe.forEach(t),ZFo=i($),B_=n($,"LI",{});var eye=s(B_);yie=n(eye,"STRONG",{});var ant=s(yie);eTo=r(ant,"sew"),ant.forEach(t),oTo=r(eye," \u2014 "),Eq=n(eye,"A",{href:!0});var nnt=s(Eq);rTo=r(nnt,"SEWModel"),nnt.forEach(t),tTo=r(eye," (SEW model)"),eye.forEach(t),aTo=i($),I_=n($,"LI",{});var oye=s(I_);xie=n(oye,"STRONG",{});var snt=s(xie);nTo=r(snt,"sew-d"),snt.forEach(t),sTo=r(oye," \u2014 "),Cq=n(oye,"A",{href:!0});var lnt=s(Cq);lTo=r(lnt,"SEWDModel"),lnt.forEach(t),iTo=r(oye," (SEW-D model)"),oye.forEach(t),dTo=i($),N_=n($,"LI",{});var rye=s(N_);$ie=n(rye,"STRONG",{});var int=s($ie);cTo=r(int,"speech_to_text"),int.forEach(t),fTo=r(rye," \u2014 "),wq=n(rye,"A",{href:!0});var dnt=s(wq);mTo=r(dnt,"Speech2TextModel"),dnt.forEach(t),gTo=r(rye," (Speech2Text model)"),rye.forEach(t),hTo=i($),q_=n($,"LI",{});var tye=s(q_);kie=n(tye,"STRONG",{});var cnt=s(kie);pTo=r(cnt,"splinter"),cnt.forEach(t),_To=r(tye," \u2014 "),Aq=n(tye,"A",{href:!0});var fnt=s(Aq);uTo=r(fnt,"SplinterModel"),fnt.forEach(t),bTo=r(tye," (Splinter model)"),tye.forEach(t),vTo=i($),j_=n($,"LI",{});var aye=s(j_);Sie=n(aye,"STRONG",{});var mnt=s(Sie);FTo=r(mnt,"squeezebert"),mnt.forEach(t),TTo=r(aye," \u2014 "),Lq=n(aye,"A",{href:!0});var gnt=s(Lq);MTo=r(gnt,"SqueezeBertModel"),gnt.forEach(t),ETo=r(aye," (SqueezeBERT model)"),aye.forEach(t),CTo=i($),D_=n($,"LI",{});var nye=s(D_);Rie=n(nye,"STRONG",{});var hnt=s(Rie);wTo=r(hnt,"swin"),hnt.forEach(t),ATo=r(nye," \u2014 "),yq=n(nye,"A",{href:!0});var pnt=s(yq);LTo=r(pnt,"SwinModel"),pnt.forEach(t),yTo=r(nye," (Swin Transformer model)"),nye.forEach(t),xTo=i($),G_=n($,"LI",{});var sye=s(G_);Pie=n(sye,"STRONG",{});var _nt=s(Pie);$To=r(_nt,"t5"),_nt.forEach(t),kTo=r(sye," \u2014 "),xq=n(sye,"A",{href:!0});var unt=s(xq);STo=r(unt,"T5Model"),unt.forEach(t),RTo=r(sye," (T5 model)"),sye.forEach(t),PTo=i($),O_=n($,"LI",{});var lye=s(O_);Bie=n(lye,"STRONG",{});var bnt=s(Bie);BTo=r(bnt,"tapas"),bnt.forEach(t),ITo=r(lye," \u2014 "),$q=n(lye,"A",{href:!0});var vnt=s($q);NTo=r(vnt,"TapasModel"),vnt.forEach(t),qTo=r(lye," (TAPAS model)"),lye.forEach(t),jTo=i($),V_=n($,"LI",{});var iye=s(V_);Iie=n(iye,"STRONG",{});var Fnt=s(Iie);DTo=r(Fnt,"trajectory_transformer"),Fnt.forEach(t),GTo=r(iye," \u2014 "),kq=n(iye,"A",{href:!0});var Tnt=s(kq);OTo=r(Tnt,"TrajectoryTransformerModel"),Tnt.forEach(t),VTo=r(iye," (Trajectory Transformer model)"),iye.forEach(t),XTo=i($),X_=n($,"LI",{});var dye=s(X_);Nie=n(dye,"STRONG",{});var Mnt=s(Nie);zTo=r(Mnt,"transfo-xl"),Mnt.forEach(t),WTo=r(dye," \u2014 "),Sq=n(dye,"A",{href:!0});var Ent=s(Sq);QTo=r(Ent,"TransfoXLModel"),Ent.forEach(t),HTo=r(dye," (Transformer-XL model)"),dye.forEach(t),UTo=i($),z_=n($,"LI",{});var cye=s(z_);qie=n(cye,"STRONG",{});var Cnt=s(qie);JTo=r(Cnt,"unispeech"),Cnt.forEach(t),YTo=r(cye," \u2014 "),Rq=n(cye,"A",{href:!0});var wnt=s(Rq);KTo=r(wnt,"UniSpeechModel"),wnt.forEach(t),ZTo=r(cye," (UniSpeech model)"),cye.forEach(t),e7o=i($),W_=n($,"LI",{});var fye=s(W_);jie=n(fye,"STRONG",{});var Ant=s(jie);o7o=r(Ant,"unispeech-sat"),Ant.forEach(t),r7o=r(fye," \u2014 "),Pq=n(fye,"A",{href:!0});var Lnt=s(Pq);t7o=r(Lnt,"UniSpeechSatModel"),Lnt.forEach(t),a7o=r(fye," (UniSpeechSat model)"),fye.forEach(t),n7o=i($),Q_=n($,"LI",{});var mye=s(Q_);Die=n(mye,"STRONG",{});var ynt=s(Die);s7o=r(ynt,"van"),ynt.forEach(t),l7o=r(mye," \u2014 "),Bq=n(mye,"A",{href:!0});var xnt=s(Bq);i7o=r(xnt,"VanModel"),xnt.forEach(t),d7o=r(mye," (VAN model)"),mye.forEach(t),c7o=i($),H_=n($,"LI",{});var gye=s(H_);Gie=n(gye,"STRONG",{});var $nt=s(Gie);f7o=r($nt,"vilt"),$nt.forEach(t),m7o=r(gye," \u2014 "),Iq=n(gye,"A",{href:!0});var knt=s(Iq);g7o=r(knt,"ViltModel"),knt.forEach(t),h7o=r(gye," (ViLT model)"),gye.forEach(t),p7o=i($),U_=n($,"LI",{});var hye=s(U_);Oie=n(hye,"STRONG",{});var Snt=s(Oie);_7o=r(Snt,"vision-text-dual-encoder"),Snt.forEach(t),u7o=r(hye," \u2014 "),Nq=n(hye,"A",{href:!0});var Rnt=s(Nq);b7o=r(Rnt,"VisionTextDualEncoderModel"),Rnt.forEach(t),v7o=r(hye," (VisionTextDualEncoder model)"),hye.forEach(t),F7o=i($),J_=n($,"LI",{});var pye=s(J_);Vie=n(pye,"STRONG",{});var Pnt=s(Vie);T7o=r(Pnt,"visual_bert"),Pnt.forEach(t),M7o=r(pye," \u2014 "),qq=n(pye,"A",{href:!0});var Bnt=s(qq);E7o=r(Bnt,"VisualBertModel"),Bnt.forEach(t),C7o=r(pye," (VisualBERT model)"),pye.forEach(t),w7o=i($),Y_=n($,"LI",{});var _ye=s(Y_);Xie=n(_ye,"STRONG",{});var Int=s(Xie);A7o=r(Int,"vit"),Int.forEach(t),L7o=r(_ye," \u2014 "),jq=n(_ye,"A",{href:!0});var Nnt=s(jq);y7o=r(Nnt,"ViTModel"),Nnt.forEach(t),x7o=r(_ye," (ViT model)"),_ye.forEach(t),$7o=i($),K_=n($,"LI",{});var uye=s(K_);zie=n(uye,"STRONG",{});var qnt=s(zie);k7o=r(qnt,"vit_mae"),qnt.forEach(t),S7o=r(uye," \u2014 "),Dq=n(uye,"A",{href:!0});var jnt=s(Dq);R7o=r(jnt,"ViTMAEModel"),jnt.forEach(t),P7o=r(uye," (ViTMAE model)"),uye.forEach(t),B7o=i($),Z_=n($,"LI",{});var bye=s(Z_);Wie=n(bye,"STRONG",{});var Dnt=s(Wie);I7o=r(Dnt,"wav2vec2"),Dnt.forEach(t),N7o=r(bye," \u2014 "),Gq=n(bye,"A",{href:!0});var Gnt=s(Gq);q7o=r(Gnt,"Wav2Vec2Model"),Gnt.forEach(t),j7o=r(bye," (Wav2Vec2 model)"),bye.forEach(t),D7o=i($),eu=n($,"LI",{});var vye=s(eu);Qie=n(vye,"STRONG",{});var Ont=s(Qie);G7o=r(Ont,"wav2vec2-conformer"),Ont.forEach(t),O7o=r(vye," \u2014 "),Oq=n(vye,"A",{href:!0});var Vnt=s(Oq);V7o=r(Vnt,"Wav2Vec2ConformerModel"),Vnt.forEach(t),X7o=r(vye," (Wav2Vec2-Conformer model)"),vye.forEach(t),z7o=i($),ou=n($,"LI",{});var Fye=s(ou);Hie=n(Fye,"STRONG",{});var Xnt=s(Hie);W7o=r(Xnt,"wavlm"),Xnt.forEach(t),Q7o=r(Fye," \u2014 "),Vq=n(Fye,"A",{href:!0});var znt=s(Vq);H7o=r(znt,"WavLMModel"),znt.forEach(t),U7o=r(Fye," (WavLM model)"),Fye.forEach(t),J7o=i($),ru=n($,"LI",{});var Tye=s(ru);Uie=n(Tye,"STRONG",{});var Wnt=s(Uie);Y7o=r(Wnt,"xglm"),Wnt.forEach(t),K7o=r(Tye," \u2014 "),Xq=n(Tye,"A",{href:!0});var Qnt=s(Xq);Z7o=r(Qnt,"XGLMModel"),Qnt.forEach(t),eMo=r(Tye," (XGLM model)"),Tye.forEach(t),oMo=i($),tu=n($,"LI",{});var Mye=s(tu);Jie=n(Mye,"STRONG",{});var Hnt=s(Jie);rMo=r(Hnt,"xlm"),Hnt.forEach(t),tMo=r(Mye," \u2014 "),zq=n(Mye,"A",{href:!0});var Unt=s(zq);aMo=r(Unt,"XLMModel"),Unt.forEach(t),nMo=r(Mye," (XLM model)"),Mye.forEach(t),sMo=i($),au=n($,"LI",{});var Eye=s(au);Yie=n(Eye,"STRONG",{});var Jnt=s(Yie);lMo=r(Jnt,"xlm-prophetnet"),Jnt.forEach(t),iMo=r(Eye," \u2014 "),Wq=n(Eye,"A",{href:!0});var Ynt=s(Wq);dMo=r(Ynt,"XLMProphetNetModel"),Ynt.forEach(t),cMo=r(Eye," (XLM-ProphetNet model)"),Eye.forEach(t),fMo=i($),nu=n($,"LI",{});var Cye=s(nu);Kie=n(Cye,"STRONG",{});var Knt=s(Kie);mMo=r(Knt,"xlm-roberta"),Knt.forEach(t),gMo=r(Cye," \u2014 "),Qq=n(Cye,"A",{href:!0});var Znt=s(Qq);hMo=r(Znt,"XLMRobertaModel"),Znt.forEach(t),pMo=r(Cye," (XLM-RoBERTa model)"),Cye.forEach(t),_Mo=i($),su=n($,"LI",{});var wye=s(su);Zie=n(wye,"STRONG",{});var est=s(Zie);uMo=r(est,"xlm-roberta-xl"),est.forEach(t),bMo=r(wye," \u2014 "),Hq=n(wye,"A",{href:!0});var ost=s(Hq);vMo=r(ost,"XLMRobertaXLModel"),ost.forEach(t),FMo=r(wye," (XLM-RoBERTa-XL model)"),wye.forEach(t),TMo=i($),lu=n($,"LI",{});var Aye=s(lu);ede=n(Aye,"STRONG",{});var rst=s(ede);MMo=r(rst,"xlnet"),rst.forEach(t),EMo=r(Aye," \u2014 "),Uq=n(Aye,"A",{href:!0});var tst=s(Uq);CMo=r(tst,"XLNetModel"),tst.forEach(t),wMo=r(Aye," (XLNet model)"),Aye.forEach(t),AMo=i($),iu=n($,"LI",{});var Lye=s(iu);ode=n(Lye,"STRONG",{});var ast=s(ode);LMo=r(ast,"yolos"),ast.forEach(t),yMo=r(Lye," \u2014 "),Jq=n(Lye,"A",{href:!0});var nst=s(Jq);xMo=r(nst,"YolosModel"),nst.forEach(t),$Mo=r(Lye," (YOLOS model)"),Lye.forEach(t),kMo=i($),du=n($,"LI",{});var yye=s(du);rde=n(yye,"STRONG",{});var sst=s(rde);SMo=r(sst,"yoso"),sst.forEach(t),RMo=r(yye," \u2014 "),Yq=n(yye,"A",{href:!0});var lst=s(Yq);PMo=r(lst,"YosoModel"),lst.forEach(t),BMo=r(yye," (YOSO model)"),yye.forEach(t),$.forEach(t),IMo=i(oa),cu=n(oa,"P",{});var xye=s(cu);NMo=r(xye,"The model is set in evaluation mode by default using "),tde=n(xye,"CODE",{});var ist=s(tde);qMo=r(ist,"model.eval()"),ist.forEach(t),jMo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(xye,"CODE",{});var dst=s(ade);DMo=r(dst,"model.train()"),dst.forEach(t),xye.forEach(t),GMo=i(oa),T(fu.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),uje=i(f),$i=n(f,"H2",{class:!0});var TGe=s($i);mu=n(TGe,"A",{id:!0,class:!0,href:!0});var cst=s(mu);nde=n(cst,"SPAN",{});var fst=s(nde);T(bL.$$.fragment,fst),fst.forEach(t),cst.forEach(t),OMo=i(TGe),sde=n(TGe,"SPAN",{});var mst=s(sde);VMo=r(mst,"AutoModelForPreTraining"),mst.forEach(t),TGe.forEach(t),bje=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T(vL.$$.fragment,Xs),XMo=i(Xs),ki=n(Xs,"P",{});var UZ=s(ki);zMo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=n(UZ,"A",{href:!0});var gst=s(Kq);WMo=r(gst,"from_pretrained()"),gst.forEach(t),QMo=r(UZ," class method or the "),Zq=n(UZ,"A",{href:!0});var hst=s(Zq);HMo=r(hst,"from_config()"),hst.forEach(t),UMo=r(UZ,` class
method.`),UZ.forEach(t),JMo=i(Xs),FL=n(Xs,"P",{});var MGe=s(FL);YMo=r(MGe,"This class cannot be instantiated directly using "),lde=n(MGe,"CODE",{});var pst=s(lde);KMo=r(pst,"__init__()"),pst.forEach(t),ZMo=r(MGe," (throws an error)."),MGe.forEach(t),e4o=i(Xs),at=n(Xs,"DIV",{class:!0});var Qw=s(at);T(TL.$$.fragment,Qw),o4o=i(Qw),ide=n(Qw,"P",{});var _st=s(ide);r4o=r(_st,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_st.forEach(t),t4o=i(Qw),Si=n(Qw,"P",{});var JZ=s(Si);a4o=r(JZ,`Note:
Loading a model from its configuration file does `),dde=n(JZ,"STRONG",{});var ust=s(dde);n4o=r(ust,"not"),ust.forEach(t),s4o=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(JZ,"A",{href:!0});var bst=s(ej);l4o=r(bst,"from_pretrained()"),bst.forEach(t),i4o=r(JZ," to load the model weights."),JZ.forEach(t),d4o=i(Qw),T(gu.$$.fragment,Qw),Qw.forEach(t),c4o=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(ML.$$.fragment,ra),f4o=i(ra),cde=n(ra,"P",{});var vst=s(cde);m4o=r(vst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vst.forEach(t),g4o=i(ra),xa=n(ra,"P",{});var Hw=s(xa);h4o=r(Hw,"The model class to instantiate is selected based on the "),fde=n(Hw,"CODE",{});var Fst=s(fde);p4o=r(Fst,"model_type"),Fst.forEach(t),_4o=r(Hw,` property of the config object (either
passed as an argument or loaded from `),mde=n(Hw,"CODE",{});var Tst=s(mde);u4o=r(Tst,"pretrained_model_name_or_path"),Tst.forEach(t),b4o=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(Hw,"CODE",{});var Mst=s(gde);v4o=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),F4o=r(Hw,":"),Hw.forEach(t),T4o=i(ra),G=n(ra,"UL",{});var O=s(G);hu=n(O,"LI",{});var $ye=s(hu);hde=n($ye,"STRONG",{});var Est=s(hde);M4o=r(Est,"albert"),Est.forEach(t),E4o=r($ye," \u2014 "),oj=n($ye,"A",{href:!0});var Cst=s(oj);C4o=r(Cst,"AlbertForPreTraining"),Cst.forEach(t),w4o=r($ye," (ALBERT model)"),$ye.forEach(t),A4o=i(O),pu=n(O,"LI",{});var kye=s(pu);pde=n(kye,"STRONG",{});var wst=s(pde);L4o=r(wst,"bart"),wst.forEach(t),y4o=r(kye," \u2014 "),rj=n(kye,"A",{href:!0});var Ast=s(rj);x4o=r(Ast,"BartForConditionalGeneration"),Ast.forEach(t),$4o=r(kye," (BART model)"),kye.forEach(t),k4o=i(O),_u=n(O,"LI",{});var Sye=s(_u);_de=n(Sye,"STRONG",{});var Lst=s(_de);S4o=r(Lst,"bert"),Lst.forEach(t),R4o=r(Sye," \u2014 "),tj=n(Sye,"A",{href:!0});var yst=s(tj);P4o=r(yst,"BertForPreTraining"),yst.forEach(t),B4o=r(Sye," (BERT model)"),Sye.forEach(t),I4o=i(O),uu=n(O,"LI",{});var Rye=s(uu);ude=n(Rye,"STRONG",{});var xst=s(ude);N4o=r(xst,"big_bird"),xst.forEach(t),q4o=r(Rye," \u2014 "),aj=n(Rye,"A",{href:!0});var $st=s(aj);j4o=r($st,"BigBirdForPreTraining"),$st.forEach(t),D4o=r(Rye," (BigBird model)"),Rye.forEach(t),G4o=i(O),bu=n(O,"LI",{});var Pye=s(bu);bde=n(Pye,"STRONG",{});var kst=s(bde);O4o=r(kst,"camembert"),kst.forEach(t),V4o=r(Pye," \u2014 "),nj=n(Pye,"A",{href:!0});var Sst=s(nj);X4o=r(Sst,"CamembertForMaskedLM"),Sst.forEach(t),z4o=r(Pye," (CamemBERT model)"),Pye.forEach(t),W4o=i(O),vu=n(O,"LI",{});var Bye=s(vu);vde=n(Bye,"STRONG",{});var Rst=s(vde);Q4o=r(Rst,"ctrl"),Rst.forEach(t),H4o=r(Bye," \u2014 "),sj=n(Bye,"A",{href:!0});var Pst=s(sj);U4o=r(Pst,"CTRLLMHeadModel"),Pst.forEach(t),J4o=r(Bye," (CTRL model)"),Bye.forEach(t),Y4o=i(O),Fu=n(O,"LI",{});var Iye=s(Fu);Fde=n(Iye,"STRONG",{});var Bst=s(Fde);K4o=r(Bst,"data2vec-text"),Bst.forEach(t),Z4o=r(Iye," \u2014 "),lj=n(Iye,"A",{href:!0});var Ist=s(lj);eEo=r(Ist,"Data2VecTextForMaskedLM"),Ist.forEach(t),oEo=r(Iye," (Data2VecText model)"),Iye.forEach(t),rEo=i(O),Tu=n(O,"LI",{});var Nye=s(Tu);Tde=n(Nye,"STRONG",{});var Nst=s(Tde);tEo=r(Nst,"deberta"),Nst.forEach(t),aEo=r(Nye," \u2014 "),ij=n(Nye,"A",{href:!0});var qst=s(ij);nEo=r(qst,"DebertaForMaskedLM"),qst.forEach(t),sEo=r(Nye," (DeBERTa model)"),Nye.forEach(t),lEo=i(O),Mu=n(O,"LI",{});var qye=s(Mu);Mde=n(qye,"STRONG",{});var jst=s(Mde);iEo=r(jst,"deberta-v2"),jst.forEach(t),dEo=r(qye," \u2014 "),dj=n(qye,"A",{href:!0});var Dst=s(dj);cEo=r(Dst,"DebertaV2ForMaskedLM"),Dst.forEach(t),fEo=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),mEo=i(O),Eu=n(O,"LI",{});var jye=s(Eu);Ede=n(jye,"STRONG",{});var Gst=s(Ede);gEo=r(Gst,"distilbert"),Gst.forEach(t),hEo=r(jye," \u2014 "),cj=n(jye,"A",{href:!0});var Ost=s(cj);pEo=r(Ost,"DistilBertForMaskedLM"),Ost.forEach(t),_Eo=r(jye," (DistilBERT model)"),jye.forEach(t),uEo=i(O),Cu=n(O,"LI",{});var Dye=s(Cu);Cde=n(Dye,"STRONG",{});var Vst=s(Cde);bEo=r(Vst,"electra"),Vst.forEach(t),vEo=r(Dye," \u2014 "),fj=n(Dye,"A",{href:!0});var Xst=s(fj);FEo=r(Xst,"ElectraForPreTraining"),Xst.forEach(t),TEo=r(Dye," (ELECTRA model)"),Dye.forEach(t),MEo=i(O),wu=n(O,"LI",{});var Gye=s(wu);wde=n(Gye,"STRONG",{});var zst=s(wde);EEo=r(zst,"flaubert"),zst.forEach(t),CEo=r(Gye," \u2014 "),mj=n(Gye,"A",{href:!0});var Wst=s(mj);wEo=r(Wst,"FlaubertWithLMHeadModel"),Wst.forEach(t),AEo=r(Gye," (FlauBERT model)"),Gye.forEach(t),LEo=i(O),Au=n(O,"LI",{});var Oye=s(Au);Ade=n(Oye,"STRONG",{});var Qst=s(Ade);yEo=r(Qst,"flava"),Qst.forEach(t),xEo=r(Oye," \u2014 "),gj=n(Oye,"A",{href:!0});var Hst=s(gj);$Eo=r(Hst,"FlavaForPreTraining"),Hst.forEach(t),kEo=r(Oye," (FLAVA model)"),Oye.forEach(t),SEo=i(O),Lu=n(O,"LI",{});var Vye=s(Lu);Lde=n(Vye,"STRONG",{});var Ust=s(Lde);REo=r(Ust,"fnet"),Ust.forEach(t),PEo=r(Vye," \u2014 "),hj=n(Vye,"A",{href:!0});var Jst=s(hj);BEo=r(Jst,"FNetForPreTraining"),Jst.forEach(t),IEo=r(Vye," (FNet model)"),Vye.forEach(t),NEo=i(O),yu=n(O,"LI",{});var Xye=s(yu);yde=n(Xye,"STRONG",{});var Yst=s(yde);qEo=r(Yst,"fsmt"),Yst.forEach(t),jEo=r(Xye," \u2014 "),pj=n(Xye,"A",{href:!0});var Kst=s(pj);DEo=r(Kst,"FSMTForConditionalGeneration"),Kst.forEach(t),GEo=r(Xye," (FairSeq Machine-Translation model)"),Xye.forEach(t),OEo=i(O),xu=n(O,"LI",{});var zye=s(xu);xde=n(zye,"STRONG",{});var Zst=s(xde);VEo=r(Zst,"funnel"),Zst.forEach(t),XEo=r(zye," \u2014 "),_j=n(zye,"A",{href:!0});var elt=s(_j);zEo=r(elt,"FunnelForPreTraining"),elt.forEach(t),WEo=r(zye," (Funnel Transformer model)"),zye.forEach(t),QEo=i(O),$u=n(O,"LI",{});var Wye=s($u);$de=n(Wye,"STRONG",{});var olt=s($de);HEo=r(olt,"gpt2"),olt.forEach(t),UEo=r(Wye," \u2014 "),uj=n(Wye,"A",{href:!0});var rlt=s(uj);JEo=r(rlt,"GPT2LMHeadModel"),rlt.forEach(t),YEo=r(Wye," (OpenAI GPT-2 model)"),Wye.forEach(t),KEo=i(O),ku=n(O,"LI",{});var Qye=s(ku);kde=n(Qye,"STRONG",{});var tlt=s(kde);ZEo=r(tlt,"ibert"),tlt.forEach(t),eCo=r(Qye," \u2014 "),bj=n(Qye,"A",{href:!0});var alt=s(bj);oCo=r(alt,"IBertForMaskedLM"),alt.forEach(t),rCo=r(Qye," (I-BERT model)"),Qye.forEach(t),tCo=i(O),Su=n(O,"LI",{});var Hye=s(Su);Sde=n(Hye,"STRONG",{});var nlt=s(Sde);aCo=r(nlt,"layoutlm"),nlt.forEach(t),nCo=r(Hye," \u2014 "),vj=n(Hye,"A",{href:!0});var slt=s(vj);sCo=r(slt,"LayoutLMForMaskedLM"),slt.forEach(t),lCo=r(Hye," (LayoutLM model)"),Hye.forEach(t),iCo=i(O),Ru=n(O,"LI",{});var Uye=s(Ru);Rde=n(Uye,"STRONG",{});var llt=s(Rde);dCo=r(llt,"longformer"),llt.forEach(t),cCo=r(Uye," \u2014 "),Fj=n(Uye,"A",{href:!0});var ilt=s(Fj);fCo=r(ilt,"LongformerForMaskedLM"),ilt.forEach(t),mCo=r(Uye," (Longformer model)"),Uye.forEach(t),gCo=i(O),Pu=n(O,"LI",{});var Jye=s(Pu);Pde=n(Jye,"STRONG",{});var dlt=s(Pde);hCo=r(dlt,"lxmert"),dlt.forEach(t),pCo=r(Jye," \u2014 "),Tj=n(Jye,"A",{href:!0});var clt=s(Tj);_Co=r(clt,"LxmertForPreTraining"),clt.forEach(t),uCo=r(Jye," (LXMERT model)"),Jye.forEach(t),bCo=i(O),Bu=n(O,"LI",{});var Yye=s(Bu);Bde=n(Yye,"STRONG",{});var flt=s(Bde);vCo=r(flt,"megatron-bert"),flt.forEach(t),FCo=r(Yye," \u2014 "),Mj=n(Yye,"A",{href:!0});var mlt=s(Mj);TCo=r(mlt,"MegatronBertForPreTraining"),mlt.forEach(t),MCo=r(Yye," (Megatron-BERT model)"),Yye.forEach(t),ECo=i(O),Iu=n(O,"LI",{});var Kye=s(Iu);Ide=n(Kye,"STRONG",{});var glt=s(Ide);CCo=r(glt,"mobilebert"),glt.forEach(t),wCo=r(Kye," \u2014 "),Ej=n(Kye,"A",{href:!0});var hlt=s(Ej);ACo=r(hlt,"MobileBertForPreTraining"),hlt.forEach(t),LCo=r(Kye," (MobileBERT model)"),Kye.forEach(t),yCo=i(O),Nu=n(O,"LI",{});var Zye=s(Nu);Nde=n(Zye,"STRONG",{});var plt=s(Nde);xCo=r(plt,"mpnet"),plt.forEach(t),$Co=r(Zye," \u2014 "),Cj=n(Zye,"A",{href:!0});var _lt=s(Cj);kCo=r(_lt,"MPNetForMaskedLM"),_lt.forEach(t),SCo=r(Zye," (MPNet model)"),Zye.forEach(t),RCo=i(O),qu=n(O,"LI",{});var e8e=s(qu);qde=n(e8e,"STRONG",{});var ult=s(qde);PCo=r(ult,"openai-gpt"),ult.forEach(t),BCo=r(e8e," \u2014 "),wj=n(e8e,"A",{href:!0});var blt=s(wj);ICo=r(blt,"OpenAIGPTLMHeadModel"),blt.forEach(t),NCo=r(e8e," (OpenAI GPT model)"),e8e.forEach(t),qCo=i(O),ju=n(O,"LI",{});var o8e=s(ju);jde=n(o8e,"STRONG",{});var vlt=s(jde);jCo=r(vlt,"retribert"),vlt.forEach(t),DCo=r(o8e," \u2014 "),Aj=n(o8e,"A",{href:!0});var Flt=s(Aj);GCo=r(Flt,"RetriBertModel"),Flt.forEach(t),OCo=r(o8e," (RetriBERT model)"),o8e.forEach(t),VCo=i(O),Du=n(O,"LI",{});var r8e=s(Du);Dde=n(r8e,"STRONG",{});var Tlt=s(Dde);XCo=r(Tlt,"roberta"),Tlt.forEach(t),zCo=r(r8e," \u2014 "),Lj=n(r8e,"A",{href:!0});var Mlt=s(Lj);WCo=r(Mlt,"RobertaForMaskedLM"),Mlt.forEach(t),QCo=r(r8e," (RoBERTa model)"),r8e.forEach(t),HCo=i(O),Gu=n(O,"LI",{});var t8e=s(Gu);Gde=n(t8e,"STRONG",{});var Elt=s(Gde);UCo=r(Elt,"splinter"),Elt.forEach(t),JCo=r(t8e," \u2014 "),yj=n(t8e,"A",{href:!0});var Clt=s(yj);YCo=r(Clt,"SplinterForPreTraining"),Clt.forEach(t),KCo=r(t8e," (Splinter model)"),t8e.forEach(t),ZCo=i(O),Ou=n(O,"LI",{});var a8e=s(Ou);Ode=n(a8e,"STRONG",{});var wlt=s(Ode);e5o=r(wlt,"squeezebert"),wlt.forEach(t),o5o=r(a8e," \u2014 "),xj=n(a8e,"A",{href:!0});var Alt=s(xj);r5o=r(Alt,"SqueezeBertForMaskedLM"),Alt.forEach(t),t5o=r(a8e," (SqueezeBERT model)"),a8e.forEach(t),a5o=i(O),Vu=n(O,"LI",{});var n8e=s(Vu);Vde=n(n8e,"STRONG",{});var Llt=s(Vde);n5o=r(Llt,"t5"),Llt.forEach(t),s5o=r(n8e," \u2014 "),$j=n(n8e,"A",{href:!0});var ylt=s($j);l5o=r(ylt,"T5ForConditionalGeneration"),ylt.forEach(t),i5o=r(n8e," (T5 model)"),n8e.forEach(t),d5o=i(O),Xu=n(O,"LI",{});var s8e=s(Xu);Xde=n(s8e,"STRONG",{});var xlt=s(Xde);c5o=r(xlt,"tapas"),xlt.forEach(t),f5o=r(s8e," \u2014 "),kj=n(s8e,"A",{href:!0});var $lt=s(kj);m5o=r($lt,"TapasForMaskedLM"),$lt.forEach(t),g5o=r(s8e," (TAPAS model)"),s8e.forEach(t),h5o=i(O),zu=n(O,"LI",{});var l8e=s(zu);zde=n(l8e,"STRONG",{});var klt=s(zde);p5o=r(klt,"transfo-xl"),klt.forEach(t),_5o=r(l8e," \u2014 "),Sj=n(l8e,"A",{href:!0});var Slt=s(Sj);u5o=r(Slt,"TransfoXLLMHeadModel"),Slt.forEach(t),b5o=r(l8e," (Transformer-XL model)"),l8e.forEach(t),v5o=i(O),Wu=n(O,"LI",{});var i8e=s(Wu);Wde=n(i8e,"STRONG",{});var Rlt=s(Wde);F5o=r(Rlt,"unispeech"),Rlt.forEach(t),T5o=r(i8e," \u2014 "),Rj=n(i8e,"A",{href:!0});var Plt=s(Rj);M5o=r(Plt,"UniSpeechForPreTraining"),Plt.forEach(t),E5o=r(i8e," (UniSpeech model)"),i8e.forEach(t),C5o=i(O),Qu=n(O,"LI",{});var d8e=s(Qu);Qde=n(d8e,"STRONG",{});var Blt=s(Qde);w5o=r(Blt,"unispeech-sat"),Blt.forEach(t),A5o=r(d8e," \u2014 "),Pj=n(d8e,"A",{href:!0});var Ilt=s(Pj);L5o=r(Ilt,"UniSpeechSatForPreTraining"),Ilt.forEach(t),y5o=r(d8e," (UniSpeechSat model)"),d8e.forEach(t),x5o=i(O),Hu=n(O,"LI",{});var c8e=s(Hu);Hde=n(c8e,"STRONG",{});var Nlt=s(Hde);$5o=r(Nlt,"visual_bert"),Nlt.forEach(t),k5o=r(c8e," \u2014 "),Bj=n(c8e,"A",{href:!0});var qlt=s(Bj);S5o=r(qlt,"VisualBertForPreTraining"),qlt.forEach(t),R5o=r(c8e," (VisualBERT model)"),c8e.forEach(t),P5o=i(O),Uu=n(O,"LI",{});var f8e=s(Uu);Ude=n(f8e,"STRONG",{});var jlt=s(Ude);B5o=r(jlt,"vit_mae"),jlt.forEach(t),I5o=r(f8e," \u2014 "),Ij=n(f8e,"A",{href:!0});var Dlt=s(Ij);N5o=r(Dlt,"ViTMAEForPreTraining"),Dlt.forEach(t),q5o=r(f8e," (ViTMAE model)"),f8e.forEach(t),j5o=i(O),Ju=n(O,"LI",{});var m8e=s(Ju);Jde=n(m8e,"STRONG",{});var Glt=s(Jde);D5o=r(Glt,"wav2vec2"),Glt.forEach(t),G5o=r(m8e," \u2014 "),Nj=n(m8e,"A",{href:!0});var Olt=s(Nj);O5o=r(Olt,"Wav2Vec2ForPreTraining"),Olt.forEach(t),V5o=r(m8e," (Wav2Vec2 model)"),m8e.forEach(t),X5o=i(O),Yu=n(O,"LI",{});var g8e=s(Yu);Yde=n(g8e,"STRONG",{});var Vlt=s(Yde);z5o=r(Vlt,"wav2vec2-conformer"),Vlt.forEach(t),W5o=r(g8e," \u2014 "),qj=n(g8e,"A",{href:!0});var Xlt=s(qj);Q5o=r(Xlt,"Wav2Vec2ConformerForPreTraining"),Xlt.forEach(t),H5o=r(g8e," (Wav2Vec2-Conformer model)"),g8e.forEach(t),U5o=i(O),Ku=n(O,"LI",{});var h8e=s(Ku);Kde=n(h8e,"STRONG",{});var zlt=s(Kde);J5o=r(zlt,"xlm"),zlt.forEach(t),Y5o=r(h8e," \u2014 "),jj=n(h8e,"A",{href:!0});var Wlt=s(jj);K5o=r(Wlt,"XLMWithLMHeadModel"),Wlt.forEach(t),Z5o=r(h8e," (XLM model)"),h8e.forEach(t),e0o=i(O),Zu=n(O,"LI",{});var p8e=s(Zu);Zde=n(p8e,"STRONG",{});var Qlt=s(Zde);o0o=r(Qlt,"xlm-roberta"),Qlt.forEach(t),r0o=r(p8e," \u2014 "),Dj=n(p8e,"A",{href:!0});var Hlt=s(Dj);t0o=r(Hlt,"XLMRobertaForMaskedLM"),Hlt.forEach(t),a0o=r(p8e," (XLM-RoBERTa model)"),p8e.forEach(t),n0o=i(O),e1=n(O,"LI",{});var _8e=s(e1);ece=n(_8e,"STRONG",{});var Ult=s(ece);s0o=r(Ult,"xlm-roberta-xl"),Ult.forEach(t),l0o=r(_8e," \u2014 "),Gj=n(_8e,"A",{href:!0});var Jlt=s(Gj);i0o=r(Jlt,"XLMRobertaXLForMaskedLM"),Jlt.forEach(t),d0o=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),c0o=i(O),o1=n(O,"LI",{});var u8e=s(o1);oce=n(u8e,"STRONG",{});var Ylt=s(oce);f0o=r(Ylt,"xlnet"),Ylt.forEach(t),m0o=r(u8e," \u2014 "),Oj=n(u8e,"A",{href:!0});var Klt=s(Oj);g0o=r(Klt,"XLNetLMHeadModel"),Klt.forEach(t),h0o=r(u8e," (XLNet model)"),u8e.forEach(t),O.forEach(t),p0o=i(ra),r1=n(ra,"P",{});var b8e=s(r1);_0o=r(b8e,"The model is set in evaluation mode by default using "),rce=n(b8e,"CODE",{});var Zlt=s(rce);u0o=r(Zlt,"model.eval()"),Zlt.forEach(t),b0o=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=n(b8e,"CODE",{});var eit=s(tce);v0o=r(eit,"model.train()"),eit.forEach(t),b8e.forEach(t),F0o=i(ra),T(t1.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),vje=i(f),Ri=n(f,"H2",{class:!0});var EGe=s(Ri);a1=n(EGe,"A",{id:!0,class:!0,href:!0});var oit=s(a1);ace=n(oit,"SPAN",{});var rit=s(ace);T(EL.$$.fragment,rit),rit.forEach(t),oit.forEach(t),T0o=i(EGe),nce=n(EGe,"SPAN",{});var tit=s(nce);M0o=r(tit,"AutoModelForCausalLM"),tit.forEach(t),EGe.forEach(t),Fje=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(CL.$$.fragment,zs),E0o=i(zs),Pi=n(zs,"P",{});var YZ=s(Pi);C0o=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vj=n(YZ,"A",{href:!0});var ait=s(Vj);w0o=r(ait,"from_pretrained()"),ait.forEach(t),A0o=r(YZ," class method or the "),Xj=n(YZ,"A",{href:!0});var nit=s(Xj);L0o=r(nit,"from_config()"),nit.forEach(t),y0o=r(YZ,` class
method.`),YZ.forEach(t),x0o=i(zs),wL=n(zs,"P",{});var CGe=s(wL);$0o=r(CGe,"This class cannot be instantiated directly using "),sce=n(CGe,"CODE",{});var sit=s(sce);k0o=r(sit,"__init__()"),sit.forEach(t),S0o=r(CGe," (throws an error)."),CGe.forEach(t),R0o=i(zs),nt=n(zs,"DIV",{class:!0});var Uw=s(nt);T(AL.$$.fragment,Uw),P0o=i(Uw),lce=n(Uw,"P",{});var lit=s(lce);B0o=r(lit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lit.forEach(t),I0o=i(Uw),Bi=n(Uw,"P",{});var KZ=s(Bi);N0o=r(KZ,`Note:
Loading a model from its configuration file does `),ice=n(KZ,"STRONG",{});var iit=s(ice);q0o=r(iit,"not"),iit.forEach(t),j0o=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(KZ,"A",{href:!0});var dit=s(zj);D0o=r(dit,"from_pretrained()"),dit.forEach(t),G0o=r(KZ," to load the model weights."),KZ.forEach(t),O0o=i(Uw),T(n1.$$.fragment,Uw),Uw.forEach(t),V0o=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(LL.$$.fragment,ta),X0o=i(ta),dce=n(ta,"P",{});var cit=s(dce);z0o=r(cit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cit.forEach(t),W0o=i(ta),$a=n(ta,"P",{});var Jw=s($a);Q0o=r(Jw,"The model class to instantiate is selected based on the "),cce=n(Jw,"CODE",{});var fit=s(cce);H0o=r(fit,"model_type"),fit.forEach(t),U0o=r(Jw,` property of the config object (either
passed as an argument or loaded from `),fce=n(Jw,"CODE",{});var mit=s(fce);J0o=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),Y0o=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(Jw,"CODE",{});var git=s(mce);K0o=r(git,"pretrained_model_name_or_path"),git.forEach(t),Z0o=r(Jw,":"),Jw.forEach(t),ewo=i(ta),z=n(ta,"UL",{});var Q=s(z);s1=n(Q,"LI",{});var v8e=s(s1);gce=n(v8e,"STRONG",{});var hit=s(gce);owo=r(hit,"bart"),hit.forEach(t),rwo=r(v8e," \u2014 "),Wj=n(v8e,"A",{href:!0});var pit=s(Wj);two=r(pit,"BartForCausalLM"),pit.forEach(t),awo=r(v8e," (BART model)"),v8e.forEach(t),nwo=i(Q),l1=n(Q,"LI",{});var F8e=s(l1);hce=n(F8e,"STRONG",{});var _it=s(hce);swo=r(_it,"bert"),_it.forEach(t),lwo=r(F8e," \u2014 "),Qj=n(F8e,"A",{href:!0});var uit=s(Qj);iwo=r(uit,"BertLMHeadModel"),uit.forEach(t),dwo=r(F8e," (BERT model)"),F8e.forEach(t),cwo=i(Q),i1=n(Q,"LI",{});var T8e=s(i1);pce=n(T8e,"STRONG",{});var bit=s(pce);fwo=r(bit,"bert-generation"),bit.forEach(t),mwo=r(T8e," \u2014 "),Hj=n(T8e,"A",{href:!0});var vit=s(Hj);gwo=r(vit,"BertGenerationDecoder"),vit.forEach(t),hwo=r(T8e," (Bert Generation model)"),T8e.forEach(t),pwo=i(Q),d1=n(Q,"LI",{});var M8e=s(d1);_ce=n(M8e,"STRONG",{});var Fit=s(_ce);_wo=r(Fit,"big_bird"),Fit.forEach(t),uwo=r(M8e," \u2014 "),Uj=n(M8e,"A",{href:!0});var Tit=s(Uj);bwo=r(Tit,"BigBirdForCausalLM"),Tit.forEach(t),vwo=r(M8e," (BigBird model)"),M8e.forEach(t),Fwo=i(Q),c1=n(Q,"LI",{});var E8e=s(c1);uce=n(E8e,"STRONG",{});var Mit=s(uce);Two=r(Mit,"bigbird_pegasus"),Mit.forEach(t),Mwo=r(E8e," \u2014 "),Jj=n(E8e,"A",{href:!0});var Eit=s(Jj);Ewo=r(Eit,"BigBirdPegasusForCausalLM"),Eit.forEach(t),Cwo=r(E8e," (BigBird-Pegasus model)"),E8e.forEach(t),wwo=i(Q),f1=n(Q,"LI",{});var C8e=s(f1);bce=n(C8e,"STRONG",{});var Cit=s(bce);Awo=r(Cit,"blenderbot"),Cit.forEach(t),Lwo=r(C8e," \u2014 "),Yj=n(C8e,"A",{href:!0});var wit=s(Yj);ywo=r(wit,"BlenderbotForCausalLM"),wit.forEach(t),xwo=r(C8e," (Blenderbot model)"),C8e.forEach(t),$wo=i(Q),m1=n(Q,"LI",{});var w8e=s(m1);vce=n(w8e,"STRONG",{});var Ait=s(vce);kwo=r(Ait,"blenderbot-small"),Ait.forEach(t),Swo=r(w8e," \u2014 "),Kj=n(w8e,"A",{href:!0});var Lit=s(Kj);Rwo=r(Lit,"BlenderbotSmallForCausalLM"),Lit.forEach(t),Pwo=r(w8e," (BlenderbotSmall model)"),w8e.forEach(t),Bwo=i(Q),g1=n(Q,"LI",{});var A8e=s(g1);Fce=n(A8e,"STRONG",{});var yit=s(Fce);Iwo=r(yit,"camembert"),yit.forEach(t),Nwo=r(A8e," \u2014 "),Zj=n(A8e,"A",{href:!0});var xit=s(Zj);qwo=r(xit,"CamembertForCausalLM"),xit.forEach(t),jwo=r(A8e," (CamemBERT model)"),A8e.forEach(t),Dwo=i(Q),h1=n(Q,"LI",{});var L8e=s(h1);Tce=n(L8e,"STRONG",{});var $it=s(Tce);Gwo=r($it,"ctrl"),$it.forEach(t),Owo=r(L8e," \u2014 "),eD=n(L8e,"A",{href:!0});var kit=s(eD);Vwo=r(kit,"CTRLLMHeadModel"),kit.forEach(t),Xwo=r(L8e," (CTRL model)"),L8e.forEach(t),zwo=i(Q),p1=n(Q,"LI",{});var y8e=s(p1);Mce=n(y8e,"STRONG",{});var Sit=s(Mce);Wwo=r(Sit,"data2vec-text"),Sit.forEach(t),Qwo=r(y8e," \u2014 "),oD=n(y8e,"A",{href:!0});var Rit=s(oD);Hwo=r(Rit,"Data2VecTextForCausalLM"),Rit.forEach(t),Uwo=r(y8e," (Data2VecText model)"),y8e.forEach(t),Jwo=i(Q),_1=n(Q,"LI",{});var x8e=s(_1);Ece=n(x8e,"STRONG",{});var Pit=s(Ece);Ywo=r(Pit,"electra"),Pit.forEach(t),Kwo=r(x8e," \u2014 "),rD=n(x8e,"A",{href:!0});var Bit=s(rD);Zwo=r(Bit,"ElectraForCausalLM"),Bit.forEach(t),eAo=r(x8e," (ELECTRA model)"),x8e.forEach(t),oAo=i(Q),u1=n(Q,"LI",{});var $8e=s(u1);Cce=n($8e,"STRONG",{});var Iit=s(Cce);rAo=r(Iit,"gpt2"),Iit.forEach(t),tAo=r($8e," \u2014 "),tD=n($8e,"A",{href:!0});var Nit=s(tD);aAo=r(Nit,"GPT2LMHeadModel"),Nit.forEach(t),nAo=r($8e," (OpenAI GPT-2 model)"),$8e.forEach(t),sAo=i(Q),b1=n(Q,"LI",{});var k8e=s(b1);wce=n(k8e,"STRONG",{});var qit=s(wce);lAo=r(qit,"gpt_neo"),qit.forEach(t),iAo=r(k8e," \u2014 "),aD=n(k8e,"A",{href:!0});var jit=s(aD);dAo=r(jit,"GPTNeoForCausalLM"),jit.forEach(t),cAo=r(k8e," (GPT Neo model)"),k8e.forEach(t),fAo=i(Q),v1=n(Q,"LI",{});var S8e=s(v1);Ace=n(S8e,"STRONG",{});var Dit=s(Ace);mAo=r(Dit,"gpt_neox"),Dit.forEach(t),gAo=r(S8e," \u2014 "),nD=n(S8e,"A",{href:!0});var Git=s(nD);hAo=r(Git,"GPTNeoXForCausalLM"),Git.forEach(t),pAo=r(S8e," (GPT NeoX model)"),S8e.forEach(t),_Ao=i(Q),F1=n(Q,"LI",{});var R8e=s(F1);Lce=n(R8e,"STRONG",{});var Oit=s(Lce);uAo=r(Oit,"gptj"),Oit.forEach(t),bAo=r(R8e," \u2014 "),sD=n(R8e,"A",{href:!0});var Vit=s(sD);vAo=r(Vit,"GPTJForCausalLM"),Vit.forEach(t),FAo=r(R8e," (GPT-J model)"),R8e.forEach(t),TAo=i(Q),T1=n(Q,"LI",{});var P8e=s(T1);yce=n(P8e,"STRONG",{});var Xit=s(yce);MAo=r(Xit,"marian"),Xit.forEach(t),EAo=r(P8e," \u2014 "),lD=n(P8e,"A",{href:!0});var zit=s(lD);CAo=r(zit,"MarianForCausalLM"),zit.forEach(t),wAo=r(P8e," (Marian model)"),P8e.forEach(t),AAo=i(Q),M1=n(Q,"LI",{});var B8e=s(M1);xce=n(B8e,"STRONG",{});var Wit=s(xce);LAo=r(Wit,"mbart"),Wit.forEach(t),yAo=r(B8e," \u2014 "),iD=n(B8e,"A",{href:!0});var Qit=s(iD);xAo=r(Qit,"MBartForCausalLM"),Qit.forEach(t),$Ao=r(B8e," (mBART model)"),B8e.forEach(t),kAo=i(Q),E1=n(Q,"LI",{});var I8e=s(E1);$ce=n(I8e,"STRONG",{});var Hit=s($ce);SAo=r(Hit,"megatron-bert"),Hit.forEach(t),RAo=r(I8e," \u2014 "),dD=n(I8e,"A",{href:!0});var Uit=s(dD);PAo=r(Uit,"MegatronBertForCausalLM"),Uit.forEach(t),BAo=r(I8e," (Megatron-BERT model)"),I8e.forEach(t),IAo=i(Q),C1=n(Q,"LI",{});var N8e=s(C1);kce=n(N8e,"STRONG",{});var Jit=s(kce);NAo=r(Jit,"openai-gpt"),Jit.forEach(t),qAo=r(N8e," \u2014 "),cD=n(N8e,"A",{href:!0});var Yit=s(cD);jAo=r(Yit,"OpenAIGPTLMHeadModel"),Yit.forEach(t),DAo=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),GAo=i(Q),w1=n(Q,"LI",{});var q8e=s(w1);Sce=n(q8e,"STRONG",{});var Kit=s(Sce);OAo=r(Kit,"opt"),Kit.forEach(t),VAo=r(q8e," \u2014 "),fD=n(q8e,"A",{href:!0});var Zit=s(fD);XAo=r(Zit,"OPTForCausalLM"),Zit.forEach(t),zAo=r(q8e," (OPT model)"),q8e.forEach(t),WAo=i(Q),A1=n(Q,"LI",{});var j8e=s(A1);Rce=n(j8e,"STRONG",{});var edt=s(Rce);QAo=r(edt,"pegasus"),edt.forEach(t),HAo=r(j8e," \u2014 "),mD=n(j8e,"A",{href:!0});var odt=s(mD);UAo=r(odt,"PegasusForCausalLM"),odt.forEach(t),JAo=r(j8e," (Pegasus model)"),j8e.forEach(t),YAo=i(Q),L1=n(Q,"LI",{});var D8e=s(L1);Pce=n(D8e,"STRONG",{});var rdt=s(Pce);KAo=r(rdt,"plbart"),rdt.forEach(t),ZAo=r(D8e," \u2014 "),gD=n(D8e,"A",{href:!0});var tdt=s(gD);e6o=r(tdt,"PLBartForCausalLM"),tdt.forEach(t),o6o=r(D8e," (PLBart model)"),D8e.forEach(t),r6o=i(Q),y1=n(Q,"LI",{});var G8e=s(y1);Bce=n(G8e,"STRONG",{});var adt=s(Bce);t6o=r(adt,"prophetnet"),adt.forEach(t),a6o=r(G8e," \u2014 "),hD=n(G8e,"A",{href:!0});var ndt=s(hD);n6o=r(ndt,"ProphetNetForCausalLM"),ndt.forEach(t),s6o=r(G8e," (ProphetNet model)"),G8e.forEach(t),l6o=i(Q),x1=n(Q,"LI",{});var O8e=s(x1);Ice=n(O8e,"STRONG",{});var sdt=s(Ice);i6o=r(sdt,"qdqbert"),sdt.forEach(t),d6o=r(O8e," \u2014 "),pD=n(O8e,"A",{href:!0});var ldt=s(pD);c6o=r(ldt,"QDQBertLMHeadModel"),ldt.forEach(t),f6o=r(O8e," (QDQBert model)"),O8e.forEach(t),m6o=i(Q),$1=n(Q,"LI",{});var V8e=s($1);Nce=n(V8e,"STRONG",{});var idt=s(Nce);g6o=r(idt,"reformer"),idt.forEach(t),h6o=r(V8e," \u2014 "),_D=n(V8e,"A",{href:!0});var ddt=s(_D);p6o=r(ddt,"ReformerModelWithLMHead"),ddt.forEach(t),_6o=r(V8e," (Reformer model)"),V8e.forEach(t),u6o=i(Q),k1=n(Q,"LI",{});var X8e=s(k1);qce=n(X8e,"STRONG",{});var cdt=s(qce);b6o=r(cdt,"rembert"),cdt.forEach(t),v6o=r(X8e," \u2014 "),uD=n(X8e,"A",{href:!0});var fdt=s(uD);F6o=r(fdt,"RemBertForCausalLM"),fdt.forEach(t),T6o=r(X8e," (RemBERT model)"),X8e.forEach(t),M6o=i(Q),S1=n(Q,"LI",{});var z8e=s(S1);jce=n(z8e,"STRONG",{});var mdt=s(jce);E6o=r(mdt,"roberta"),mdt.forEach(t),C6o=r(z8e," \u2014 "),bD=n(z8e,"A",{href:!0});var gdt=s(bD);w6o=r(gdt,"RobertaForCausalLM"),gdt.forEach(t),A6o=r(z8e," (RoBERTa model)"),z8e.forEach(t),L6o=i(Q),R1=n(Q,"LI",{});var W8e=s(R1);Dce=n(W8e,"STRONG",{});var hdt=s(Dce);y6o=r(hdt,"roformer"),hdt.forEach(t),x6o=r(W8e," \u2014 "),vD=n(W8e,"A",{href:!0});var pdt=s(vD);$6o=r(pdt,"RoFormerForCausalLM"),pdt.forEach(t),k6o=r(W8e," (RoFormer model)"),W8e.forEach(t),S6o=i(Q),P1=n(Q,"LI",{});var Q8e=s(P1);Gce=n(Q8e,"STRONG",{});var _dt=s(Gce);R6o=r(_dt,"speech_to_text_2"),_dt.forEach(t),P6o=r(Q8e," \u2014 "),FD=n(Q8e,"A",{href:!0});var udt=s(FD);B6o=r(udt,"Speech2Text2ForCausalLM"),udt.forEach(t),I6o=r(Q8e," (Speech2Text2 model)"),Q8e.forEach(t),N6o=i(Q),B1=n(Q,"LI",{});var H8e=s(B1);Oce=n(H8e,"STRONG",{});var bdt=s(Oce);q6o=r(bdt,"transfo-xl"),bdt.forEach(t),j6o=r(H8e," \u2014 "),TD=n(H8e,"A",{href:!0});var vdt=s(TD);D6o=r(vdt,"TransfoXLLMHeadModel"),vdt.forEach(t),G6o=r(H8e," (Transformer-XL model)"),H8e.forEach(t),O6o=i(Q),I1=n(Q,"LI",{});var U8e=s(I1);Vce=n(U8e,"STRONG",{});var Fdt=s(Vce);V6o=r(Fdt,"trocr"),Fdt.forEach(t),X6o=r(U8e," \u2014 "),MD=n(U8e,"A",{href:!0});var Tdt=s(MD);z6o=r(Tdt,"TrOCRForCausalLM"),Tdt.forEach(t),W6o=r(U8e," (TrOCR model)"),U8e.forEach(t),Q6o=i(Q),N1=n(Q,"LI",{});var J8e=s(N1);Xce=n(J8e,"STRONG",{});var Mdt=s(Xce);H6o=r(Mdt,"xglm"),Mdt.forEach(t),U6o=r(J8e," \u2014 "),ED=n(J8e,"A",{href:!0});var Edt=s(ED);J6o=r(Edt,"XGLMForCausalLM"),Edt.forEach(t),Y6o=r(J8e," (XGLM model)"),J8e.forEach(t),K6o=i(Q),q1=n(Q,"LI",{});var Y8e=s(q1);zce=n(Y8e,"STRONG",{});var Cdt=s(zce);Z6o=r(Cdt,"xlm"),Cdt.forEach(t),eLo=r(Y8e," \u2014 "),CD=n(Y8e,"A",{href:!0});var wdt=s(CD);oLo=r(wdt,"XLMWithLMHeadModel"),wdt.forEach(t),rLo=r(Y8e," (XLM model)"),Y8e.forEach(t),tLo=i(Q),j1=n(Q,"LI",{});var K8e=s(j1);Wce=n(K8e,"STRONG",{});var Adt=s(Wce);aLo=r(Adt,"xlm-prophetnet"),Adt.forEach(t),nLo=r(K8e," \u2014 "),wD=n(K8e,"A",{href:!0});var Ldt=s(wD);sLo=r(Ldt,"XLMProphetNetForCausalLM"),Ldt.forEach(t),lLo=r(K8e," (XLM-ProphetNet model)"),K8e.forEach(t),iLo=i(Q),D1=n(Q,"LI",{});var Z8e=s(D1);Qce=n(Z8e,"STRONG",{});var ydt=s(Qce);dLo=r(ydt,"xlm-roberta"),ydt.forEach(t),cLo=r(Z8e," \u2014 "),AD=n(Z8e,"A",{href:!0});var xdt=s(AD);fLo=r(xdt,"XLMRobertaForCausalLM"),xdt.forEach(t),mLo=r(Z8e," (XLM-RoBERTa model)"),Z8e.forEach(t),gLo=i(Q),G1=n(Q,"LI",{});var e9e=s(G1);Hce=n(e9e,"STRONG",{});var $dt=s(Hce);hLo=r($dt,"xlm-roberta-xl"),$dt.forEach(t),pLo=r(e9e," \u2014 "),LD=n(e9e,"A",{href:!0});var kdt=s(LD);_Lo=r(kdt,"XLMRobertaXLForCausalLM"),kdt.forEach(t),uLo=r(e9e," (XLM-RoBERTa-XL model)"),e9e.forEach(t),bLo=i(Q),O1=n(Q,"LI",{});var o9e=s(O1);Uce=n(o9e,"STRONG",{});var Sdt=s(Uce);vLo=r(Sdt,"xlnet"),Sdt.forEach(t),FLo=r(o9e," \u2014 "),yD=n(o9e,"A",{href:!0});var Rdt=s(yD);TLo=r(Rdt,"XLNetLMHeadModel"),Rdt.forEach(t),MLo=r(o9e," (XLNet model)"),o9e.forEach(t),Q.forEach(t),ELo=i(ta),V1=n(ta,"P",{});var r9e=s(V1);CLo=r(r9e,"The model is set in evaluation mode by default using "),Jce=n(r9e,"CODE",{});var Pdt=s(Jce);wLo=r(Pdt,"model.eval()"),Pdt.forEach(t),ALo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(r9e,"CODE",{});var Bdt=s(Yce);LLo=r(Bdt,"model.train()"),Bdt.forEach(t),r9e.forEach(t),yLo=i(ta),T(X1.$$.fragment,ta),ta.forEach(t),zs.forEach(t),Tje=i(f),Ii=n(f,"H2",{class:!0});var wGe=s(Ii);z1=n(wGe,"A",{id:!0,class:!0,href:!0});var Idt=s(z1);Kce=n(Idt,"SPAN",{});var Ndt=s(Kce);T(yL.$$.fragment,Ndt),Ndt.forEach(t),Idt.forEach(t),xLo=i(wGe),Zce=n(wGe,"SPAN",{});var qdt=s(Zce);$Lo=r(qdt,"AutoModelForMaskedLM"),qdt.forEach(t),wGe.forEach(t),Mje=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(xL.$$.fragment,Ws),kLo=i(Ws),Ni=n(Ws,"P",{});var ZZ=s(Ni);SLo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xD=n(ZZ,"A",{href:!0});var jdt=s(xD);RLo=r(jdt,"from_pretrained()"),jdt.forEach(t),PLo=r(ZZ," class method or the "),$D=n(ZZ,"A",{href:!0});var Ddt=s($D);BLo=r(Ddt,"from_config()"),Ddt.forEach(t),ILo=r(ZZ,` class
method.`),ZZ.forEach(t),NLo=i(Ws),$L=n(Ws,"P",{});var AGe=s($L);qLo=r(AGe,"This class cannot be instantiated directly using "),efe=n(AGe,"CODE",{});var Gdt=s(efe);jLo=r(Gdt,"__init__()"),Gdt.forEach(t),DLo=r(AGe," (throws an error)."),AGe.forEach(t),GLo=i(Ws),st=n(Ws,"DIV",{class:!0});var Yw=s(st);T(kL.$$.fragment,Yw),OLo=i(Yw),ofe=n(Yw,"P",{});var Odt=s(ofe);VLo=r(Odt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Odt.forEach(t),XLo=i(Yw),qi=n(Yw,"P",{});var eee=s(qi);zLo=r(eee,`Note:
Loading a model from its configuration file does `),rfe=n(eee,"STRONG",{});var Vdt=s(rfe);WLo=r(Vdt,"not"),Vdt.forEach(t),QLo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=n(eee,"A",{href:!0});var Xdt=s(kD);HLo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),ULo=r(eee," to load the model weights."),eee.forEach(t),JLo=i(Yw),T(W1.$$.fragment,Yw),Yw.forEach(t),YLo=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(SL.$$.fragment,aa),KLo=i(aa),tfe=n(aa,"P",{});var zdt=s(tfe);ZLo=r(zdt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zdt.forEach(t),eyo=i(aa),ka=n(aa,"P",{});var Kw=s(ka);oyo=r(Kw,"The model class to instantiate is selected based on the "),afe=n(Kw,"CODE",{});var Wdt=s(afe);ryo=r(Wdt,"model_type"),Wdt.forEach(t),tyo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),nfe=n(Kw,"CODE",{});var Qdt=s(nfe);ayo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),nyo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(Kw,"CODE",{});var Hdt=s(sfe);syo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),lyo=r(Kw,":"),Kw.forEach(t),iyo=i(aa),W=n(aa,"UL",{});var H=s(W);Q1=n(H,"LI",{});var t9e=s(Q1);lfe=n(t9e,"STRONG",{});var Udt=s(lfe);dyo=r(Udt,"albert"),Udt.forEach(t),cyo=r(t9e," \u2014 "),SD=n(t9e,"A",{href:!0});var Jdt=s(SD);fyo=r(Jdt,"AlbertForMaskedLM"),Jdt.forEach(t),myo=r(t9e," (ALBERT model)"),t9e.forEach(t),gyo=i(H),H1=n(H,"LI",{});var a9e=s(H1);ife=n(a9e,"STRONG",{});var Ydt=s(ife);hyo=r(Ydt,"bart"),Ydt.forEach(t),pyo=r(a9e," \u2014 "),RD=n(a9e,"A",{href:!0});var Kdt=s(RD);_yo=r(Kdt,"BartForConditionalGeneration"),Kdt.forEach(t),uyo=r(a9e," (BART model)"),a9e.forEach(t),byo=i(H),U1=n(H,"LI",{});var n9e=s(U1);dfe=n(n9e,"STRONG",{});var Zdt=s(dfe);vyo=r(Zdt,"bert"),Zdt.forEach(t),Fyo=r(n9e," \u2014 "),PD=n(n9e,"A",{href:!0});var ect=s(PD);Tyo=r(ect,"BertForMaskedLM"),ect.forEach(t),Myo=r(n9e," (BERT model)"),n9e.forEach(t),Eyo=i(H),J1=n(H,"LI",{});var s9e=s(J1);cfe=n(s9e,"STRONG",{});var oct=s(cfe);Cyo=r(oct,"big_bird"),oct.forEach(t),wyo=r(s9e," \u2014 "),BD=n(s9e,"A",{href:!0});var rct=s(BD);Ayo=r(rct,"BigBirdForMaskedLM"),rct.forEach(t),Lyo=r(s9e," (BigBird model)"),s9e.forEach(t),yyo=i(H),Y1=n(H,"LI",{});var l9e=s(Y1);ffe=n(l9e,"STRONG",{});var tct=s(ffe);xyo=r(tct,"camembert"),tct.forEach(t),$yo=r(l9e," \u2014 "),ID=n(l9e,"A",{href:!0});var act=s(ID);kyo=r(act,"CamembertForMaskedLM"),act.forEach(t),Syo=r(l9e," (CamemBERT model)"),l9e.forEach(t),Ryo=i(H),K1=n(H,"LI",{});var i9e=s(K1);mfe=n(i9e,"STRONG",{});var nct=s(mfe);Pyo=r(nct,"convbert"),nct.forEach(t),Byo=r(i9e," \u2014 "),ND=n(i9e,"A",{href:!0});var sct=s(ND);Iyo=r(sct,"ConvBertForMaskedLM"),sct.forEach(t),Nyo=r(i9e," (ConvBERT model)"),i9e.forEach(t),qyo=i(H),Z1=n(H,"LI",{});var d9e=s(Z1);gfe=n(d9e,"STRONG",{});var lct=s(gfe);jyo=r(lct,"data2vec-text"),lct.forEach(t),Dyo=r(d9e," \u2014 "),qD=n(d9e,"A",{href:!0});var ict=s(qD);Gyo=r(ict,"Data2VecTextForMaskedLM"),ict.forEach(t),Oyo=r(d9e," (Data2VecText model)"),d9e.forEach(t),Vyo=i(H),e3=n(H,"LI",{});var c9e=s(e3);hfe=n(c9e,"STRONG",{});var dct=s(hfe);Xyo=r(dct,"deberta"),dct.forEach(t),zyo=r(c9e," \u2014 "),jD=n(c9e,"A",{href:!0});var cct=s(jD);Wyo=r(cct,"DebertaForMaskedLM"),cct.forEach(t),Qyo=r(c9e," (DeBERTa model)"),c9e.forEach(t),Hyo=i(H),o3=n(H,"LI",{});var f9e=s(o3);pfe=n(f9e,"STRONG",{});var fct=s(pfe);Uyo=r(fct,"deberta-v2"),fct.forEach(t),Jyo=r(f9e," \u2014 "),DD=n(f9e,"A",{href:!0});var mct=s(DD);Yyo=r(mct,"DebertaV2ForMaskedLM"),mct.forEach(t),Kyo=r(f9e," (DeBERTa-v2 model)"),f9e.forEach(t),Zyo=i(H),r3=n(H,"LI",{});var m9e=s(r3);_fe=n(m9e,"STRONG",{});var gct=s(_fe);e8o=r(gct,"distilbert"),gct.forEach(t),o8o=r(m9e," \u2014 "),GD=n(m9e,"A",{href:!0});var hct=s(GD);r8o=r(hct,"DistilBertForMaskedLM"),hct.forEach(t),t8o=r(m9e," (DistilBERT model)"),m9e.forEach(t),a8o=i(H),t3=n(H,"LI",{});var g9e=s(t3);ufe=n(g9e,"STRONG",{});var pct=s(ufe);n8o=r(pct,"electra"),pct.forEach(t),s8o=r(g9e," \u2014 "),OD=n(g9e,"A",{href:!0});var _ct=s(OD);l8o=r(_ct,"ElectraForMaskedLM"),_ct.forEach(t),i8o=r(g9e," (ELECTRA model)"),g9e.forEach(t),d8o=i(H),a3=n(H,"LI",{});var h9e=s(a3);bfe=n(h9e,"STRONG",{});var uct=s(bfe);c8o=r(uct,"flaubert"),uct.forEach(t),f8o=r(h9e," \u2014 "),VD=n(h9e,"A",{href:!0});var bct=s(VD);m8o=r(bct,"FlaubertWithLMHeadModel"),bct.forEach(t),g8o=r(h9e," (FlauBERT model)"),h9e.forEach(t),h8o=i(H),n3=n(H,"LI",{});var p9e=s(n3);vfe=n(p9e,"STRONG",{});var vct=s(vfe);p8o=r(vct,"fnet"),vct.forEach(t),_8o=r(p9e," \u2014 "),XD=n(p9e,"A",{href:!0});var Fct=s(XD);u8o=r(Fct,"FNetForMaskedLM"),Fct.forEach(t),b8o=r(p9e," (FNet model)"),p9e.forEach(t),v8o=i(H),s3=n(H,"LI",{});var _9e=s(s3);Ffe=n(_9e,"STRONG",{});var Tct=s(Ffe);F8o=r(Tct,"funnel"),Tct.forEach(t),T8o=r(_9e," \u2014 "),zD=n(_9e,"A",{href:!0});var Mct=s(zD);M8o=r(Mct,"FunnelForMaskedLM"),Mct.forEach(t),E8o=r(_9e," (Funnel Transformer model)"),_9e.forEach(t),C8o=i(H),l3=n(H,"LI",{});var u9e=s(l3);Tfe=n(u9e,"STRONG",{});var Ect=s(Tfe);w8o=r(Ect,"ibert"),Ect.forEach(t),A8o=r(u9e," \u2014 "),WD=n(u9e,"A",{href:!0});var Cct=s(WD);L8o=r(Cct,"IBertForMaskedLM"),Cct.forEach(t),y8o=r(u9e," (I-BERT model)"),u9e.forEach(t),x8o=i(H),i3=n(H,"LI",{});var b9e=s(i3);Mfe=n(b9e,"STRONG",{});var wct=s(Mfe);$8o=r(wct,"layoutlm"),wct.forEach(t),k8o=r(b9e," \u2014 "),QD=n(b9e,"A",{href:!0});var Act=s(QD);S8o=r(Act,"LayoutLMForMaskedLM"),Act.forEach(t),R8o=r(b9e," (LayoutLM model)"),b9e.forEach(t),P8o=i(H),d3=n(H,"LI",{});var v9e=s(d3);Efe=n(v9e,"STRONG",{});var Lct=s(Efe);B8o=r(Lct,"longformer"),Lct.forEach(t),I8o=r(v9e," \u2014 "),HD=n(v9e,"A",{href:!0});var yct=s(HD);N8o=r(yct,"LongformerForMaskedLM"),yct.forEach(t),q8o=r(v9e," (Longformer model)"),v9e.forEach(t),j8o=i(H),c3=n(H,"LI",{});var F9e=s(c3);Cfe=n(F9e,"STRONG",{});var xct=s(Cfe);D8o=r(xct,"luke"),xct.forEach(t),G8o=r(F9e," \u2014 "),UD=n(F9e,"A",{href:!0});var $ct=s(UD);O8o=r($ct,"LukeForMaskedLM"),$ct.forEach(t),V8o=r(F9e," (LUKE model)"),F9e.forEach(t),X8o=i(H),f3=n(H,"LI",{});var T9e=s(f3);wfe=n(T9e,"STRONG",{});var kct=s(wfe);z8o=r(kct,"mbart"),kct.forEach(t),W8o=r(T9e," \u2014 "),JD=n(T9e,"A",{href:!0});var Sct=s(JD);Q8o=r(Sct,"MBartForConditionalGeneration"),Sct.forEach(t),H8o=r(T9e," (mBART model)"),T9e.forEach(t),U8o=i(H),m3=n(H,"LI",{});var M9e=s(m3);Afe=n(M9e,"STRONG",{});var Rct=s(Afe);J8o=r(Rct,"megatron-bert"),Rct.forEach(t),Y8o=r(M9e," \u2014 "),YD=n(M9e,"A",{href:!0});var Pct=s(YD);K8o=r(Pct,"MegatronBertForMaskedLM"),Pct.forEach(t),Z8o=r(M9e," (Megatron-BERT model)"),M9e.forEach(t),e9o=i(H),g3=n(H,"LI",{});var E9e=s(g3);Lfe=n(E9e,"STRONG",{});var Bct=s(Lfe);o9o=r(Bct,"mobilebert"),Bct.forEach(t),r9o=r(E9e," \u2014 "),KD=n(E9e,"A",{href:!0});var Ict=s(KD);t9o=r(Ict,"MobileBertForMaskedLM"),Ict.forEach(t),a9o=r(E9e," (MobileBERT model)"),E9e.forEach(t),n9o=i(H),h3=n(H,"LI",{});var C9e=s(h3);yfe=n(C9e,"STRONG",{});var Nct=s(yfe);s9o=r(Nct,"mpnet"),Nct.forEach(t),l9o=r(C9e," \u2014 "),ZD=n(C9e,"A",{href:!0});var qct=s(ZD);i9o=r(qct,"MPNetForMaskedLM"),qct.forEach(t),d9o=r(C9e," (MPNet model)"),C9e.forEach(t),c9o=i(H),p3=n(H,"LI",{});var w9e=s(p3);xfe=n(w9e,"STRONG",{});var jct=s(xfe);f9o=r(jct,"nystromformer"),jct.forEach(t),m9o=r(w9e," \u2014 "),eG=n(w9e,"A",{href:!0});var Dct=s(eG);g9o=r(Dct,"NystromformerForMaskedLM"),Dct.forEach(t),h9o=r(w9e," (Nystr\xF6mformer model)"),w9e.forEach(t),p9o=i(H),_3=n(H,"LI",{});var A9e=s(_3);$fe=n(A9e,"STRONG",{});var Gct=s($fe);_9o=r(Gct,"perceiver"),Gct.forEach(t),u9o=r(A9e," \u2014 "),oG=n(A9e,"A",{href:!0});var Oct=s(oG);b9o=r(Oct,"PerceiverForMaskedLM"),Oct.forEach(t),v9o=r(A9e," (Perceiver model)"),A9e.forEach(t),F9o=i(H),u3=n(H,"LI",{});var L9e=s(u3);kfe=n(L9e,"STRONG",{});var Vct=s(kfe);T9o=r(Vct,"qdqbert"),Vct.forEach(t),M9o=r(L9e," \u2014 "),rG=n(L9e,"A",{href:!0});var Xct=s(rG);E9o=r(Xct,"QDQBertForMaskedLM"),Xct.forEach(t),C9o=r(L9e," (QDQBert model)"),L9e.forEach(t),w9o=i(H),b3=n(H,"LI",{});var y9e=s(b3);Sfe=n(y9e,"STRONG",{});var zct=s(Sfe);A9o=r(zct,"reformer"),zct.forEach(t),L9o=r(y9e," \u2014 "),tG=n(y9e,"A",{href:!0});var Wct=s(tG);y9o=r(Wct,"ReformerForMaskedLM"),Wct.forEach(t),x9o=r(y9e," (Reformer model)"),y9e.forEach(t),$9o=i(H),v3=n(H,"LI",{});var x9e=s(v3);Rfe=n(x9e,"STRONG",{});var Qct=s(Rfe);k9o=r(Qct,"rembert"),Qct.forEach(t),S9o=r(x9e," \u2014 "),aG=n(x9e,"A",{href:!0});var Hct=s(aG);R9o=r(Hct,"RemBertForMaskedLM"),Hct.forEach(t),P9o=r(x9e," (RemBERT model)"),x9e.forEach(t),B9o=i(H),F3=n(H,"LI",{});var $9e=s(F3);Pfe=n($9e,"STRONG",{});var Uct=s(Pfe);I9o=r(Uct,"roberta"),Uct.forEach(t),N9o=r($9e," \u2014 "),nG=n($9e,"A",{href:!0});var Jct=s(nG);q9o=r(Jct,"RobertaForMaskedLM"),Jct.forEach(t),j9o=r($9e," (RoBERTa model)"),$9e.forEach(t),D9o=i(H),T3=n(H,"LI",{});var k9e=s(T3);Bfe=n(k9e,"STRONG",{});var Yct=s(Bfe);G9o=r(Yct,"roformer"),Yct.forEach(t),O9o=r(k9e," \u2014 "),sG=n(k9e,"A",{href:!0});var Kct=s(sG);V9o=r(Kct,"RoFormerForMaskedLM"),Kct.forEach(t),X9o=r(k9e," (RoFormer model)"),k9e.forEach(t),z9o=i(H),M3=n(H,"LI",{});var S9e=s(M3);Ife=n(S9e,"STRONG",{});var Zct=s(Ife);W9o=r(Zct,"squeezebert"),Zct.forEach(t),Q9o=r(S9e," \u2014 "),lG=n(S9e,"A",{href:!0});var eft=s(lG);H9o=r(eft,"SqueezeBertForMaskedLM"),eft.forEach(t),U9o=r(S9e," (SqueezeBERT model)"),S9e.forEach(t),J9o=i(H),E3=n(H,"LI",{});var R9e=s(E3);Nfe=n(R9e,"STRONG",{});var oft=s(Nfe);Y9o=r(oft,"tapas"),oft.forEach(t),K9o=r(R9e," \u2014 "),iG=n(R9e,"A",{href:!0});var rft=s(iG);Z9o=r(rft,"TapasForMaskedLM"),rft.forEach(t),exo=r(R9e," (TAPAS model)"),R9e.forEach(t),oxo=i(H),C3=n(H,"LI",{});var P9e=s(C3);qfe=n(P9e,"STRONG",{});var tft=s(qfe);rxo=r(tft,"wav2vec2"),tft.forEach(t),txo=r(P9e," \u2014 "),jfe=n(P9e,"CODE",{});var aft=s(jfe);axo=r(aft,"Wav2Vec2ForMaskedLM"),aft.forEach(t),nxo=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),sxo=i(H),w3=n(H,"LI",{});var B9e=s(w3);Dfe=n(B9e,"STRONG",{});var nft=s(Dfe);lxo=r(nft,"xlm"),nft.forEach(t),ixo=r(B9e," \u2014 "),dG=n(B9e,"A",{href:!0});var sft=s(dG);dxo=r(sft,"XLMWithLMHeadModel"),sft.forEach(t),cxo=r(B9e," (XLM model)"),B9e.forEach(t),fxo=i(H),A3=n(H,"LI",{});var I9e=s(A3);Gfe=n(I9e,"STRONG",{});var lft=s(Gfe);mxo=r(lft,"xlm-roberta"),lft.forEach(t),gxo=r(I9e," \u2014 "),cG=n(I9e,"A",{href:!0});var ift=s(cG);hxo=r(ift,"XLMRobertaForMaskedLM"),ift.forEach(t),pxo=r(I9e," (XLM-RoBERTa model)"),I9e.forEach(t),_xo=i(H),L3=n(H,"LI",{});var N9e=s(L3);Ofe=n(N9e,"STRONG",{});var dft=s(Ofe);uxo=r(dft,"xlm-roberta-xl"),dft.forEach(t),bxo=r(N9e," \u2014 "),fG=n(N9e,"A",{href:!0});var cft=s(fG);vxo=r(cft,"XLMRobertaXLForMaskedLM"),cft.forEach(t),Fxo=r(N9e," (XLM-RoBERTa-XL model)"),N9e.forEach(t),Txo=i(H),y3=n(H,"LI",{});var q9e=s(y3);Vfe=n(q9e,"STRONG",{});var fft=s(Vfe);Mxo=r(fft,"yoso"),fft.forEach(t),Exo=r(q9e," \u2014 "),mG=n(q9e,"A",{href:!0});var mft=s(mG);Cxo=r(mft,"YosoForMaskedLM"),mft.forEach(t),wxo=r(q9e," (YOSO model)"),q9e.forEach(t),H.forEach(t),Axo=i(aa),x3=n(aa,"P",{});var j9e=s(x3);Lxo=r(j9e,"The model is set in evaluation mode by default using "),Xfe=n(j9e,"CODE",{});var gft=s(Xfe);yxo=r(gft,"model.eval()"),gft.forEach(t),xxo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(j9e,"CODE",{});var hft=s(zfe);$xo=r(hft,"model.train()"),hft.forEach(t),j9e.forEach(t),kxo=i(aa),T($3.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),Eje=i(f),ji=n(f,"H2",{class:!0});var LGe=s(ji);k3=n(LGe,"A",{id:!0,class:!0,href:!0});var pft=s(k3);Wfe=n(pft,"SPAN",{});var _ft=s(Wfe);T(RL.$$.fragment,_ft),_ft.forEach(t),pft.forEach(t),Sxo=i(LGe),Qfe=n(LGe,"SPAN",{});var uft=s(Qfe);Rxo=r(uft,"AutoModelForSeq2SeqLM"),uft.forEach(t),LGe.forEach(t),Cje=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(PL.$$.fragment,Qs),Pxo=i(Qs),Di=n(Qs,"P",{});var oee=s(Di);Bxo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gG=n(oee,"A",{href:!0});var bft=s(gG);Ixo=r(bft,"from_pretrained()"),bft.forEach(t),Nxo=r(oee," class method or the "),hG=n(oee,"A",{href:!0});var vft=s(hG);qxo=r(vft,"from_config()"),vft.forEach(t),jxo=r(oee,` class
method.`),oee.forEach(t),Dxo=i(Qs),BL=n(Qs,"P",{});var yGe=s(BL);Gxo=r(yGe,"This class cannot be instantiated directly using "),Hfe=n(yGe,"CODE",{});var Fft=s(Hfe);Oxo=r(Fft,"__init__()"),Fft.forEach(t),Vxo=r(yGe," (throws an error)."),yGe.forEach(t),Xxo=i(Qs),lt=n(Qs,"DIV",{class:!0});var Zw=s(lt);T(IL.$$.fragment,Zw),zxo=i(Zw),Ufe=n(Zw,"P",{});var Tft=s(Ufe);Wxo=r(Tft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tft.forEach(t),Qxo=i(Zw),Gi=n(Zw,"P",{});var ree=s(Gi);Hxo=r(ree,`Note:
Loading a model from its configuration file does `),Jfe=n(ree,"STRONG",{});var Mft=s(Jfe);Uxo=r(Mft,"not"),Mft.forEach(t),Jxo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(ree,"A",{href:!0});var Eft=s(pG);Yxo=r(Eft,"from_pretrained()"),Eft.forEach(t),Kxo=r(ree," to load the model weights."),ree.forEach(t),Zxo=i(Zw),T(S3.$$.fragment,Zw),Zw.forEach(t),e$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(NL.$$.fragment,na),o$o=i(na),Yfe=n(na,"P",{});var Cft=s(Yfe);r$o=r(Cft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cft.forEach(t),t$o=i(na),Sa=n(na,"P",{});var eA=s(Sa);a$o=r(eA,"The model class to instantiate is selected based on the "),Kfe=n(eA,"CODE",{});var wft=s(Kfe);n$o=r(wft,"model_type"),wft.forEach(t),s$o=r(eA,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(eA,"CODE",{});var Aft=s(Zfe);l$o=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),i$o=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=n(eA,"CODE",{});var Lft=s(eme);d$o=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),c$o=r(eA,":"),eA.forEach(t),f$o=i(na),ue=n(na,"UL",{});var Fe=s(ue);R3=n(Fe,"LI",{});var D9e=s(R3);ome=n(D9e,"STRONG",{});var yft=s(ome);m$o=r(yft,"bart"),yft.forEach(t),g$o=r(D9e," \u2014 "),_G=n(D9e,"A",{href:!0});var xft=s(_G);h$o=r(xft,"BartForConditionalGeneration"),xft.forEach(t),p$o=r(D9e," (BART model)"),D9e.forEach(t),_$o=i(Fe),P3=n(Fe,"LI",{});var G9e=s(P3);rme=n(G9e,"STRONG",{});var $ft=s(rme);u$o=r($ft,"bigbird_pegasus"),$ft.forEach(t),b$o=r(G9e," \u2014 "),uG=n(G9e,"A",{href:!0});var kft=s(uG);v$o=r(kft,"BigBirdPegasusForConditionalGeneration"),kft.forEach(t),F$o=r(G9e," (BigBird-Pegasus model)"),G9e.forEach(t),T$o=i(Fe),B3=n(Fe,"LI",{});var O9e=s(B3);tme=n(O9e,"STRONG",{});var Sft=s(tme);M$o=r(Sft,"blenderbot"),Sft.forEach(t),E$o=r(O9e," \u2014 "),bG=n(O9e,"A",{href:!0});var Rft=s(bG);C$o=r(Rft,"BlenderbotForConditionalGeneration"),Rft.forEach(t),w$o=r(O9e," (Blenderbot model)"),O9e.forEach(t),A$o=i(Fe),I3=n(Fe,"LI",{});var V9e=s(I3);ame=n(V9e,"STRONG",{});var Pft=s(ame);L$o=r(Pft,"blenderbot-small"),Pft.forEach(t),y$o=r(V9e," \u2014 "),vG=n(V9e,"A",{href:!0});var Bft=s(vG);x$o=r(Bft,"BlenderbotSmallForConditionalGeneration"),Bft.forEach(t),$$o=r(V9e," (BlenderbotSmall model)"),V9e.forEach(t),k$o=i(Fe),N3=n(Fe,"LI",{});var X9e=s(N3);nme=n(X9e,"STRONG",{});var Ift=s(nme);S$o=r(Ift,"encoder-decoder"),Ift.forEach(t),R$o=r(X9e," \u2014 "),FG=n(X9e,"A",{href:!0});var Nft=s(FG);P$o=r(Nft,"EncoderDecoderModel"),Nft.forEach(t),B$o=r(X9e," (Encoder decoder model)"),X9e.forEach(t),I$o=i(Fe),q3=n(Fe,"LI",{});var z9e=s(q3);sme=n(z9e,"STRONG",{});var qft=s(sme);N$o=r(qft,"fsmt"),qft.forEach(t),q$o=r(z9e," \u2014 "),TG=n(z9e,"A",{href:!0});var jft=s(TG);j$o=r(jft,"FSMTForConditionalGeneration"),jft.forEach(t),D$o=r(z9e," (FairSeq Machine-Translation model)"),z9e.forEach(t),G$o=i(Fe),j3=n(Fe,"LI",{});var W9e=s(j3);lme=n(W9e,"STRONG",{});var Dft=s(lme);O$o=r(Dft,"led"),Dft.forEach(t),V$o=r(W9e," \u2014 "),MG=n(W9e,"A",{href:!0});var Gft=s(MG);X$o=r(Gft,"LEDForConditionalGeneration"),Gft.forEach(t),z$o=r(W9e," (LED model)"),W9e.forEach(t),W$o=i(Fe),D3=n(Fe,"LI",{});var Q9e=s(D3);ime=n(Q9e,"STRONG",{});var Oft=s(ime);Q$o=r(Oft,"m2m_100"),Oft.forEach(t),H$o=r(Q9e," \u2014 "),EG=n(Q9e,"A",{href:!0});var Vft=s(EG);U$o=r(Vft,"M2M100ForConditionalGeneration"),Vft.forEach(t),J$o=r(Q9e," (M2M100 model)"),Q9e.forEach(t),Y$o=i(Fe),G3=n(Fe,"LI",{});var H9e=s(G3);dme=n(H9e,"STRONG",{});var Xft=s(dme);K$o=r(Xft,"marian"),Xft.forEach(t),Z$o=r(H9e," \u2014 "),CG=n(H9e,"A",{href:!0});var zft=s(CG);eko=r(zft,"MarianMTModel"),zft.forEach(t),oko=r(H9e," (Marian model)"),H9e.forEach(t),rko=i(Fe),O3=n(Fe,"LI",{});var U9e=s(O3);cme=n(U9e,"STRONG",{});var Wft=s(cme);tko=r(Wft,"mbart"),Wft.forEach(t),ako=r(U9e," \u2014 "),wG=n(U9e,"A",{href:!0});var Qft=s(wG);nko=r(Qft,"MBartForConditionalGeneration"),Qft.forEach(t),sko=r(U9e," (mBART model)"),U9e.forEach(t),lko=i(Fe),V3=n(Fe,"LI",{});var J9e=s(V3);fme=n(J9e,"STRONG",{});var Hft=s(fme);iko=r(Hft,"mt5"),Hft.forEach(t),dko=r(J9e," \u2014 "),AG=n(J9e,"A",{href:!0});var Uft=s(AG);cko=r(Uft,"MT5ForConditionalGeneration"),Uft.forEach(t),fko=r(J9e," (MT5 model)"),J9e.forEach(t),mko=i(Fe),X3=n(Fe,"LI",{});var Y9e=s(X3);mme=n(Y9e,"STRONG",{});var Jft=s(mme);gko=r(Jft,"pegasus"),Jft.forEach(t),hko=r(Y9e," \u2014 "),LG=n(Y9e,"A",{href:!0});var Yft=s(LG);pko=r(Yft,"PegasusForConditionalGeneration"),Yft.forEach(t),_ko=r(Y9e," (Pegasus model)"),Y9e.forEach(t),uko=i(Fe),z3=n(Fe,"LI",{});var K9e=s(z3);gme=n(K9e,"STRONG",{});var Kft=s(gme);bko=r(Kft,"plbart"),Kft.forEach(t),vko=r(K9e," \u2014 "),yG=n(K9e,"A",{href:!0});var Zft=s(yG);Fko=r(Zft,"PLBartForConditionalGeneration"),Zft.forEach(t),Tko=r(K9e," (PLBart model)"),K9e.forEach(t),Mko=i(Fe),W3=n(Fe,"LI",{});var Z9e=s(W3);hme=n(Z9e,"STRONG",{});var emt=s(hme);Eko=r(emt,"prophetnet"),emt.forEach(t),Cko=r(Z9e," \u2014 "),xG=n(Z9e,"A",{href:!0});var omt=s(xG);wko=r(omt,"ProphetNetForConditionalGeneration"),omt.forEach(t),Ako=r(Z9e," (ProphetNet model)"),Z9e.forEach(t),Lko=i(Fe),Q3=n(Fe,"LI",{});var exe=s(Q3);pme=n(exe,"STRONG",{});var rmt=s(pme);yko=r(rmt,"t5"),rmt.forEach(t),xko=r(exe," \u2014 "),$G=n(exe,"A",{href:!0});var tmt=s($G);$ko=r(tmt,"T5ForConditionalGeneration"),tmt.forEach(t),kko=r(exe," (T5 model)"),exe.forEach(t),Sko=i(Fe),H3=n(Fe,"LI",{});var oxe=s(H3);_me=n(oxe,"STRONG",{});var amt=s(_me);Rko=r(amt,"xlm-prophetnet"),amt.forEach(t),Pko=r(oxe," \u2014 "),kG=n(oxe,"A",{href:!0});var nmt=s(kG);Bko=r(nmt,"XLMProphetNetForConditionalGeneration"),nmt.forEach(t),Iko=r(oxe," (XLM-ProphetNet model)"),oxe.forEach(t),Fe.forEach(t),Nko=i(na),U3=n(na,"P",{});var rxe=s(U3);qko=r(rxe,"The model is set in evaluation mode by default using "),ume=n(rxe,"CODE",{});var smt=s(ume);jko=r(smt,"model.eval()"),smt.forEach(t),Dko=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(rxe,"CODE",{});var lmt=s(bme);Gko=r(lmt,"model.train()"),lmt.forEach(t),rxe.forEach(t),Oko=i(na),T(J3.$$.fragment,na),na.forEach(t),Qs.forEach(t),wje=i(f),Oi=n(f,"H2",{class:!0});var xGe=s(Oi);Y3=n(xGe,"A",{id:!0,class:!0,href:!0});var imt=s(Y3);vme=n(imt,"SPAN",{});var dmt=s(vme);T(qL.$$.fragment,dmt),dmt.forEach(t),imt.forEach(t),Vko=i(xGe),Fme=n(xGe,"SPAN",{});var cmt=s(Fme);Xko=r(cmt,"AutoModelForSequenceClassification"),cmt.forEach(t),xGe.forEach(t),Aje=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(jL.$$.fragment,Hs),zko=i(Hs),Vi=n(Hs,"P",{});var tee=s(Vi);Wko=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SG=n(tee,"A",{href:!0});var fmt=s(SG);Qko=r(fmt,"from_pretrained()"),fmt.forEach(t),Hko=r(tee," class method or the "),RG=n(tee,"A",{href:!0});var mmt=s(RG);Uko=r(mmt,"from_config()"),mmt.forEach(t),Jko=r(tee,` class
method.`),tee.forEach(t),Yko=i(Hs),DL=n(Hs,"P",{});var $Ge=s(DL);Kko=r($Ge,"This class cannot be instantiated directly using "),Tme=n($Ge,"CODE",{});var gmt=s(Tme);Zko=r(gmt,"__init__()"),gmt.forEach(t),eSo=r($Ge," (throws an error)."),$Ge.forEach(t),oSo=i(Hs),it=n(Hs,"DIV",{class:!0});var oA=s(it);T(GL.$$.fragment,oA),rSo=i(oA),Mme=n(oA,"P",{});var hmt=s(Mme);tSo=r(hmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hmt.forEach(t),aSo=i(oA),Xi=n(oA,"P",{});var aee=s(Xi);nSo=r(aee,`Note:
Loading a model from its configuration file does `),Eme=n(aee,"STRONG",{});var pmt=s(Eme);sSo=r(pmt,"not"),pmt.forEach(t),lSo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(aee,"A",{href:!0});var _mt=s(PG);iSo=r(_mt,"from_pretrained()"),_mt.forEach(t),dSo=r(aee," to load the model weights."),aee.forEach(t),cSo=i(oA),T(K3.$$.fragment,oA),oA.forEach(t),fSo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(OL.$$.fragment,sa),mSo=i(sa),Cme=n(sa,"P",{});var umt=s(Cme);gSo=r(umt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),umt.forEach(t),hSo=i(sa),Ra=n(sa,"P",{});var rA=s(Ra);pSo=r(rA,"The model class to instantiate is selected based on the "),wme=n(rA,"CODE",{});var bmt=s(wme);_So=r(bmt,"model_type"),bmt.forEach(t),uSo=r(rA,` property of the config object (either
passed as an argument or loaded from `),Ame=n(rA,"CODE",{});var vmt=s(Ame);bSo=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),vSo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(rA,"CODE",{});var Fmt=s(Lme);FSo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),TSo=r(rA,":"),rA.forEach(t),MSo=i(sa),N=n(sa,"UL",{});var j=s(N);Z3=n(j,"LI",{});var txe=s(Z3);yme=n(txe,"STRONG",{});var Tmt=s(yme);ESo=r(Tmt,"albert"),Tmt.forEach(t),CSo=r(txe," \u2014 "),BG=n(txe,"A",{href:!0});var Mmt=s(BG);wSo=r(Mmt,"AlbertForSequenceClassification"),Mmt.forEach(t),ASo=r(txe," (ALBERT model)"),txe.forEach(t),LSo=i(j),eb=n(j,"LI",{});var axe=s(eb);xme=n(axe,"STRONG",{});var Emt=s(xme);ySo=r(Emt,"bart"),Emt.forEach(t),xSo=r(axe," \u2014 "),IG=n(axe,"A",{href:!0});var Cmt=s(IG);$So=r(Cmt,"BartForSequenceClassification"),Cmt.forEach(t),kSo=r(axe," (BART model)"),axe.forEach(t),SSo=i(j),ob=n(j,"LI",{});var nxe=s(ob);$me=n(nxe,"STRONG",{});var wmt=s($me);RSo=r(wmt,"bert"),wmt.forEach(t),PSo=r(nxe," \u2014 "),NG=n(nxe,"A",{href:!0});var Amt=s(NG);BSo=r(Amt,"BertForSequenceClassification"),Amt.forEach(t),ISo=r(nxe," (BERT model)"),nxe.forEach(t),NSo=i(j),rb=n(j,"LI",{});var sxe=s(rb);kme=n(sxe,"STRONG",{});var Lmt=s(kme);qSo=r(Lmt,"big_bird"),Lmt.forEach(t),jSo=r(sxe," \u2014 "),qG=n(sxe,"A",{href:!0});var ymt=s(qG);DSo=r(ymt,"BigBirdForSequenceClassification"),ymt.forEach(t),GSo=r(sxe," (BigBird model)"),sxe.forEach(t),OSo=i(j),tb=n(j,"LI",{});var lxe=s(tb);Sme=n(lxe,"STRONG",{});var xmt=s(Sme);VSo=r(xmt,"bigbird_pegasus"),xmt.forEach(t),XSo=r(lxe," \u2014 "),jG=n(lxe,"A",{href:!0});var $mt=s(jG);zSo=r($mt,"BigBirdPegasusForSequenceClassification"),$mt.forEach(t),WSo=r(lxe," (BigBird-Pegasus model)"),lxe.forEach(t),QSo=i(j),ab=n(j,"LI",{});var ixe=s(ab);Rme=n(ixe,"STRONG",{});var kmt=s(Rme);HSo=r(kmt,"camembert"),kmt.forEach(t),USo=r(ixe," \u2014 "),DG=n(ixe,"A",{href:!0});var Smt=s(DG);JSo=r(Smt,"CamembertForSequenceClassification"),Smt.forEach(t),YSo=r(ixe," (CamemBERT model)"),ixe.forEach(t),KSo=i(j),nb=n(j,"LI",{});var dxe=s(nb);Pme=n(dxe,"STRONG",{});var Rmt=s(Pme);ZSo=r(Rmt,"canine"),Rmt.forEach(t),eRo=r(dxe," \u2014 "),GG=n(dxe,"A",{href:!0});var Pmt=s(GG);oRo=r(Pmt,"CanineForSequenceClassification"),Pmt.forEach(t),rRo=r(dxe," (CANINE model)"),dxe.forEach(t),tRo=i(j),sb=n(j,"LI",{});var cxe=s(sb);Bme=n(cxe,"STRONG",{});var Bmt=s(Bme);aRo=r(Bmt,"convbert"),Bmt.forEach(t),nRo=r(cxe," \u2014 "),OG=n(cxe,"A",{href:!0});var Imt=s(OG);sRo=r(Imt,"ConvBertForSequenceClassification"),Imt.forEach(t),lRo=r(cxe," (ConvBERT model)"),cxe.forEach(t),iRo=i(j),lb=n(j,"LI",{});var fxe=s(lb);Ime=n(fxe,"STRONG",{});var Nmt=s(Ime);dRo=r(Nmt,"ctrl"),Nmt.forEach(t),cRo=r(fxe," \u2014 "),VG=n(fxe,"A",{href:!0});var qmt=s(VG);fRo=r(qmt,"CTRLForSequenceClassification"),qmt.forEach(t),mRo=r(fxe," (CTRL model)"),fxe.forEach(t),gRo=i(j),ib=n(j,"LI",{});var mxe=s(ib);Nme=n(mxe,"STRONG",{});var jmt=s(Nme);hRo=r(jmt,"data2vec-text"),jmt.forEach(t),pRo=r(mxe," \u2014 "),XG=n(mxe,"A",{href:!0});var Dmt=s(XG);_Ro=r(Dmt,"Data2VecTextForSequenceClassification"),Dmt.forEach(t),uRo=r(mxe," (Data2VecText model)"),mxe.forEach(t),bRo=i(j),db=n(j,"LI",{});var gxe=s(db);qme=n(gxe,"STRONG",{});var Gmt=s(qme);vRo=r(Gmt,"deberta"),Gmt.forEach(t),FRo=r(gxe," \u2014 "),zG=n(gxe,"A",{href:!0});var Omt=s(zG);TRo=r(Omt,"DebertaForSequenceClassification"),Omt.forEach(t),MRo=r(gxe," (DeBERTa model)"),gxe.forEach(t),ERo=i(j),cb=n(j,"LI",{});var hxe=s(cb);jme=n(hxe,"STRONG",{});var Vmt=s(jme);CRo=r(Vmt,"deberta-v2"),Vmt.forEach(t),wRo=r(hxe," \u2014 "),WG=n(hxe,"A",{href:!0});var Xmt=s(WG);ARo=r(Xmt,"DebertaV2ForSequenceClassification"),Xmt.forEach(t),LRo=r(hxe," (DeBERTa-v2 model)"),hxe.forEach(t),yRo=i(j),fb=n(j,"LI",{});var pxe=s(fb);Dme=n(pxe,"STRONG",{});var zmt=s(Dme);xRo=r(zmt,"distilbert"),zmt.forEach(t),$Ro=r(pxe," \u2014 "),QG=n(pxe,"A",{href:!0});var Wmt=s(QG);kRo=r(Wmt,"DistilBertForSequenceClassification"),Wmt.forEach(t),SRo=r(pxe," (DistilBERT model)"),pxe.forEach(t),RRo=i(j),mb=n(j,"LI",{});var _xe=s(mb);Gme=n(_xe,"STRONG",{});var Qmt=s(Gme);PRo=r(Qmt,"electra"),Qmt.forEach(t),BRo=r(_xe," \u2014 "),HG=n(_xe,"A",{href:!0});var Hmt=s(HG);IRo=r(Hmt,"ElectraForSequenceClassification"),Hmt.forEach(t),NRo=r(_xe," (ELECTRA model)"),_xe.forEach(t),qRo=i(j),gb=n(j,"LI",{});var uxe=s(gb);Ome=n(uxe,"STRONG",{});var Umt=s(Ome);jRo=r(Umt,"flaubert"),Umt.forEach(t),DRo=r(uxe," \u2014 "),UG=n(uxe,"A",{href:!0});var Jmt=s(UG);GRo=r(Jmt,"FlaubertForSequenceClassification"),Jmt.forEach(t),ORo=r(uxe," (FlauBERT model)"),uxe.forEach(t),VRo=i(j),hb=n(j,"LI",{});var bxe=s(hb);Vme=n(bxe,"STRONG",{});var Ymt=s(Vme);XRo=r(Ymt,"fnet"),Ymt.forEach(t),zRo=r(bxe," \u2014 "),JG=n(bxe,"A",{href:!0});var Kmt=s(JG);WRo=r(Kmt,"FNetForSequenceClassification"),Kmt.forEach(t),QRo=r(bxe," (FNet model)"),bxe.forEach(t),HRo=i(j),pb=n(j,"LI",{});var vxe=s(pb);Xme=n(vxe,"STRONG",{});var Zmt=s(Xme);URo=r(Zmt,"funnel"),Zmt.forEach(t),JRo=r(vxe," \u2014 "),YG=n(vxe,"A",{href:!0});var egt=s(YG);YRo=r(egt,"FunnelForSequenceClassification"),egt.forEach(t),KRo=r(vxe," (Funnel Transformer model)"),vxe.forEach(t),ZRo=i(j),_b=n(j,"LI",{});var Fxe=s(_b);zme=n(Fxe,"STRONG",{});var ogt=s(zme);ePo=r(ogt,"gpt2"),ogt.forEach(t),oPo=r(Fxe," \u2014 "),KG=n(Fxe,"A",{href:!0});var rgt=s(KG);rPo=r(rgt,"GPT2ForSequenceClassification"),rgt.forEach(t),tPo=r(Fxe," (OpenAI GPT-2 model)"),Fxe.forEach(t),aPo=i(j),ub=n(j,"LI",{});var Txe=s(ub);Wme=n(Txe,"STRONG",{});var tgt=s(Wme);nPo=r(tgt,"gpt_neo"),tgt.forEach(t),sPo=r(Txe," \u2014 "),ZG=n(Txe,"A",{href:!0});var agt=s(ZG);lPo=r(agt,"GPTNeoForSequenceClassification"),agt.forEach(t),iPo=r(Txe," (GPT Neo model)"),Txe.forEach(t),dPo=i(j),bb=n(j,"LI",{});var Mxe=s(bb);Qme=n(Mxe,"STRONG",{});var ngt=s(Qme);cPo=r(ngt,"gptj"),ngt.forEach(t),fPo=r(Mxe," \u2014 "),eO=n(Mxe,"A",{href:!0});var sgt=s(eO);mPo=r(sgt,"GPTJForSequenceClassification"),sgt.forEach(t),gPo=r(Mxe," (GPT-J model)"),Mxe.forEach(t),hPo=i(j),vb=n(j,"LI",{});var Exe=s(vb);Hme=n(Exe,"STRONG",{});var lgt=s(Hme);pPo=r(lgt,"ibert"),lgt.forEach(t),_Po=r(Exe," \u2014 "),oO=n(Exe,"A",{href:!0});var igt=s(oO);uPo=r(igt,"IBertForSequenceClassification"),igt.forEach(t),bPo=r(Exe," (I-BERT model)"),Exe.forEach(t),vPo=i(j),Fb=n(j,"LI",{});var Cxe=s(Fb);Ume=n(Cxe,"STRONG",{});var dgt=s(Ume);FPo=r(dgt,"layoutlm"),dgt.forEach(t),TPo=r(Cxe," \u2014 "),rO=n(Cxe,"A",{href:!0});var cgt=s(rO);MPo=r(cgt,"LayoutLMForSequenceClassification"),cgt.forEach(t),EPo=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),CPo=i(j),Tb=n(j,"LI",{});var wxe=s(Tb);Jme=n(wxe,"STRONG",{});var fgt=s(Jme);wPo=r(fgt,"layoutlmv2"),fgt.forEach(t),APo=r(wxe," \u2014 "),tO=n(wxe,"A",{href:!0});var mgt=s(tO);LPo=r(mgt,"LayoutLMv2ForSequenceClassification"),mgt.forEach(t),yPo=r(wxe," (LayoutLMv2 model)"),wxe.forEach(t),xPo=i(j),Mb=n(j,"LI",{});var Axe=s(Mb);Yme=n(Axe,"STRONG",{});var ggt=s(Yme);$Po=r(ggt,"layoutlmv3"),ggt.forEach(t),kPo=r(Axe," \u2014 "),aO=n(Axe,"A",{href:!0});var hgt=s(aO);SPo=r(hgt,"LayoutLMv3ForSequenceClassification"),hgt.forEach(t),RPo=r(Axe," (LayoutLMv3 model)"),Axe.forEach(t),PPo=i(j),Eb=n(j,"LI",{});var Lxe=s(Eb);Kme=n(Lxe,"STRONG",{});var pgt=s(Kme);BPo=r(pgt,"led"),pgt.forEach(t),IPo=r(Lxe," \u2014 "),nO=n(Lxe,"A",{href:!0});var _gt=s(nO);NPo=r(_gt,"LEDForSequenceClassification"),_gt.forEach(t),qPo=r(Lxe," (LED model)"),Lxe.forEach(t),jPo=i(j),Cb=n(j,"LI",{});var yxe=s(Cb);Zme=n(yxe,"STRONG",{});var ugt=s(Zme);DPo=r(ugt,"longformer"),ugt.forEach(t),GPo=r(yxe," \u2014 "),sO=n(yxe,"A",{href:!0});var bgt=s(sO);OPo=r(bgt,"LongformerForSequenceClassification"),bgt.forEach(t),VPo=r(yxe," (Longformer model)"),yxe.forEach(t),XPo=i(j),wb=n(j,"LI",{});var xxe=s(wb);ege=n(xxe,"STRONG",{});var vgt=s(ege);zPo=r(vgt,"mbart"),vgt.forEach(t),WPo=r(xxe," \u2014 "),lO=n(xxe,"A",{href:!0});var Fgt=s(lO);QPo=r(Fgt,"MBartForSequenceClassification"),Fgt.forEach(t),HPo=r(xxe," (mBART model)"),xxe.forEach(t),UPo=i(j),Ab=n(j,"LI",{});var $xe=s(Ab);oge=n($xe,"STRONG",{});var Tgt=s(oge);JPo=r(Tgt,"megatron-bert"),Tgt.forEach(t),YPo=r($xe," \u2014 "),iO=n($xe,"A",{href:!0});var Mgt=s(iO);KPo=r(Mgt,"MegatronBertForSequenceClassification"),Mgt.forEach(t),ZPo=r($xe," (Megatron-BERT model)"),$xe.forEach(t),eBo=i(j),Lb=n(j,"LI",{});var kxe=s(Lb);rge=n(kxe,"STRONG",{});var Egt=s(rge);oBo=r(Egt,"mobilebert"),Egt.forEach(t),rBo=r(kxe," \u2014 "),dO=n(kxe,"A",{href:!0});var Cgt=s(dO);tBo=r(Cgt,"MobileBertForSequenceClassification"),Cgt.forEach(t),aBo=r(kxe," (MobileBERT model)"),kxe.forEach(t),nBo=i(j),yb=n(j,"LI",{});var Sxe=s(yb);tge=n(Sxe,"STRONG",{});var wgt=s(tge);sBo=r(wgt,"mpnet"),wgt.forEach(t),lBo=r(Sxe," \u2014 "),cO=n(Sxe,"A",{href:!0});var Agt=s(cO);iBo=r(Agt,"MPNetForSequenceClassification"),Agt.forEach(t),dBo=r(Sxe," (MPNet model)"),Sxe.forEach(t),cBo=i(j),xb=n(j,"LI",{});var Rxe=s(xb);age=n(Rxe,"STRONG",{});var Lgt=s(age);fBo=r(Lgt,"nystromformer"),Lgt.forEach(t),mBo=r(Rxe," \u2014 "),fO=n(Rxe,"A",{href:!0});var ygt=s(fO);gBo=r(ygt,"NystromformerForSequenceClassification"),ygt.forEach(t),hBo=r(Rxe," (Nystr\xF6mformer model)"),Rxe.forEach(t),pBo=i(j),$b=n(j,"LI",{});var Pxe=s($b);nge=n(Pxe,"STRONG",{});var xgt=s(nge);_Bo=r(xgt,"openai-gpt"),xgt.forEach(t),uBo=r(Pxe," \u2014 "),mO=n(Pxe,"A",{href:!0});var $gt=s(mO);bBo=r($gt,"OpenAIGPTForSequenceClassification"),$gt.forEach(t),vBo=r(Pxe," (OpenAI GPT model)"),Pxe.forEach(t),FBo=i(j),kb=n(j,"LI",{});var Bxe=s(kb);sge=n(Bxe,"STRONG",{});var kgt=s(sge);TBo=r(kgt,"perceiver"),kgt.forEach(t),MBo=r(Bxe," \u2014 "),gO=n(Bxe,"A",{href:!0});var Sgt=s(gO);EBo=r(Sgt,"PerceiverForSequenceClassification"),Sgt.forEach(t),CBo=r(Bxe," (Perceiver model)"),Bxe.forEach(t),wBo=i(j),Sb=n(j,"LI",{});var Ixe=s(Sb);lge=n(Ixe,"STRONG",{});var Rgt=s(lge);ABo=r(Rgt,"plbart"),Rgt.forEach(t),LBo=r(Ixe," \u2014 "),hO=n(Ixe,"A",{href:!0});var Pgt=s(hO);yBo=r(Pgt,"PLBartForSequenceClassification"),Pgt.forEach(t),xBo=r(Ixe," (PLBart model)"),Ixe.forEach(t),$Bo=i(j),Rb=n(j,"LI",{});var Nxe=s(Rb);ige=n(Nxe,"STRONG",{});var Bgt=s(ige);kBo=r(Bgt,"qdqbert"),Bgt.forEach(t),SBo=r(Nxe," \u2014 "),pO=n(Nxe,"A",{href:!0});var Igt=s(pO);RBo=r(Igt,"QDQBertForSequenceClassification"),Igt.forEach(t),PBo=r(Nxe," (QDQBert model)"),Nxe.forEach(t),BBo=i(j),Pb=n(j,"LI",{});var qxe=s(Pb);dge=n(qxe,"STRONG",{});var Ngt=s(dge);IBo=r(Ngt,"reformer"),Ngt.forEach(t),NBo=r(qxe," \u2014 "),_O=n(qxe,"A",{href:!0});var qgt=s(_O);qBo=r(qgt,"ReformerForSequenceClassification"),qgt.forEach(t),jBo=r(qxe," (Reformer model)"),qxe.forEach(t),DBo=i(j),Bb=n(j,"LI",{});var jxe=s(Bb);cge=n(jxe,"STRONG",{});var jgt=s(cge);GBo=r(jgt,"rembert"),jgt.forEach(t),OBo=r(jxe," \u2014 "),uO=n(jxe,"A",{href:!0});var Dgt=s(uO);VBo=r(Dgt,"RemBertForSequenceClassification"),Dgt.forEach(t),XBo=r(jxe," (RemBERT model)"),jxe.forEach(t),zBo=i(j),Ib=n(j,"LI",{});var Dxe=s(Ib);fge=n(Dxe,"STRONG",{});var Ggt=s(fge);WBo=r(Ggt,"roberta"),Ggt.forEach(t),QBo=r(Dxe," \u2014 "),bO=n(Dxe,"A",{href:!0});var Ogt=s(bO);HBo=r(Ogt,"RobertaForSequenceClassification"),Ogt.forEach(t),UBo=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),JBo=i(j),Nb=n(j,"LI",{});var Gxe=s(Nb);mge=n(Gxe,"STRONG",{});var Vgt=s(mge);YBo=r(Vgt,"roformer"),Vgt.forEach(t),KBo=r(Gxe," \u2014 "),vO=n(Gxe,"A",{href:!0});var Xgt=s(vO);ZBo=r(Xgt,"RoFormerForSequenceClassification"),Xgt.forEach(t),eIo=r(Gxe," (RoFormer model)"),Gxe.forEach(t),oIo=i(j),qb=n(j,"LI",{});var Oxe=s(qb);gge=n(Oxe,"STRONG",{});var zgt=s(gge);rIo=r(zgt,"squeezebert"),zgt.forEach(t),tIo=r(Oxe," \u2014 "),FO=n(Oxe,"A",{href:!0});var Wgt=s(FO);aIo=r(Wgt,"SqueezeBertForSequenceClassification"),Wgt.forEach(t),nIo=r(Oxe," (SqueezeBERT model)"),Oxe.forEach(t),sIo=i(j),jb=n(j,"LI",{});var Vxe=s(jb);hge=n(Vxe,"STRONG",{});var Qgt=s(hge);lIo=r(Qgt,"tapas"),Qgt.forEach(t),iIo=r(Vxe," \u2014 "),TO=n(Vxe,"A",{href:!0});var Hgt=s(TO);dIo=r(Hgt,"TapasForSequenceClassification"),Hgt.forEach(t),cIo=r(Vxe," (TAPAS model)"),Vxe.forEach(t),fIo=i(j),Db=n(j,"LI",{});var Xxe=s(Db);pge=n(Xxe,"STRONG",{});var Ugt=s(pge);mIo=r(Ugt,"transfo-xl"),Ugt.forEach(t),gIo=r(Xxe," \u2014 "),MO=n(Xxe,"A",{href:!0});var Jgt=s(MO);hIo=r(Jgt,"TransfoXLForSequenceClassification"),Jgt.forEach(t),pIo=r(Xxe," (Transformer-XL model)"),Xxe.forEach(t),_Io=i(j),Gb=n(j,"LI",{});var zxe=s(Gb);_ge=n(zxe,"STRONG",{});var Ygt=s(_ge);uIo=r(Ygt,"xlm"),Ygt.forEach(t),bIo=r(zxe," \u2014 "),EO=n(zxe,"A",{href:!0});var Kgt=s(EO);vIo=r(Kgt,"XLMForSequenceClassification"),Kgt.forEach(t),FIo=r(zxe," (XLM model)"),zxe.forEach(t),TIo=i(j),Ob=n(j,"LI",{});var Wxe=s(Ob);uge=n(Wxe,"STRONG",{});var Zgt=s(uge);MIo=r(Zgt,"xlm-roberta"),Zgt.forEach(t),EIo=r(Wxe," \u2014 "),CO=n(Wxe,"A",{href:!0});var eht=s(CO);CIo=r(eht,"XLMRobertaForSequenceClassification"),eht.forEach(t),wIo=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),AIo=i(j),Vb=n(j,"LI",{});var Qxe=s(Vb);bge=n(Qxe,"STRONG",{});var oht=s(bge);LIo=r(oht,"xlm-roberta-xl"),oht.forEach(t),yIo=r(Qxe," \u2014 "),wO=n(Qxe,"A",{href:!0});var rht=s(wO);xIo=r(rht,"XLMRobertaXLForSequenceClassification"),rht.forEach(t),$Io=r(Qxe," (XLM-RoBERTa-XL model)"),Qxe.forEach(t),kIo=i(j),Xb=n(j,"LI",{});var Hxe=s(Xb);vge=n(Hxe,"STRONG",{});var tht=s(vge);SIo=r(tht,"xlnet"),tht.forEach(t),RIo=r(Hxe," \u2014 "),AO=n(Hxe,"A",{href:!0});var aht=s(AO);PIo=r(aht,"XLNetForSequenceClassification"),aht.forEach(t),BIo=r(Hxe," (XLNet model)"),Hxe.forEach(t),IIo=i(j),zb=n(j,"LI",{});var Uxe=s(zb);Fge=n(Uxe,"STRONG",{});var nht=s(Fge);NIo=r(nht,"yoso"),nht.forEach(t),qIo=r(Uxe," \u2014 "),LO=n(Uxe,"A",{href:!0});var sht=s(LO);jIo=r(sht,"YosoForSequenceClassification"),sht.forEach(t),DIo=r(Uxe," (YOSO model)"),Uxe.forEach(t),j.forEach(t),GIo=i(sa),Wb=n(sa,"P",{});var Jxe=s(Wb);OIo=r(Jxe,"The model is set in evaluation mode by default using "),Tge=n(Jxe,"CODE",{});var lht=s(Tge);VIo=r(lht,"model.eval()"),lht.forEach(t),XIo=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(Jxe,"CODE",{});var iht=s(Mge);zIo=r(iht,"model.train()"),iht.forEach(t),Jxe.forEach(t),WIo=i(sa),T(Qb.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),Lje=i(f),zi=n(f,"H2",{class:!0});var kGe=s(zi);Hb=n(kGe,"A",{id:!0,class:!0,href:!0});var dht=s(Hb);Ege=n(dht,"SPAN",{});var cht=s(Ege);T(VL.$$.fragment,cht),cht.forEach(t),dht.forEach(t),QIo=i(kGe),Cge=n(kGe,"SPAN",{});var fht=s(Cge);HIo=r(fht,"AutoModelForMultipleChoice"),fht.forEach(t),kGe.forEach(t),yje=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(XL.$$.fragment,Us),UIo=i(Us),Wi=n(Us,"P",{});var nee=s(Wi);JIo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yO=n(nee,"A",{href:!0});var mht=s(yO);YIo=r(mht,"from_pretrained()"),mht.forEach(t),KIo=r(nee," class method or the "),xO=n(nee,"A",{href:!0});var ght=s(xO);ZIo=r(ght,"from_config()"),ght.forEach(t),eNo=r(nee,` class
method.`),nee.forEach(t),oNo=i(Us),zL=n(Us,"P",{});var SGe=s(zL);rNo=r(SGe,"This class cannot be instantiated directly using "),wge=n(SGe,"CODE",{});var hht=s(wge);tNo=r(hht,"__init__()"),hht.forEach(t),aNo=r(SGe," (throws an error)."),SGe.forEach(t),nNo=i(Us),dt=n(Us,"DIV",{class:!0});var tA=s(dt);T(WL.$$.fragment,tA),sNo=i(tA),Age=n(tA,"P",{});var pht=s(Age);lNo=r(pht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pht.forEach(t),iNo=i(tA),Qi=n(tA,"P",{});var see=s(Qi);dNo=r(see,`Note:
Loading a model from its configuration file does `),Lge=n(see,"STRONG",{});var _ht=s(Lge);cNo=r(_ht,"not"),_ht.forEach(t),fNo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(see,"A",{href:!0});var uht=s($O);mNo=r(uht,"from_pretrained()"),uht.forEach(t),gNo=r(see," to load the model weights."),see.forEach(t),hNo=i(tA),T(Ub.$$.fragment,tA),tA.forEach(t),pNo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(QL.$$.fragment,la),_No=i(la),yge=n(la,"P",{});var bht=s(yge);uNo=r(bht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bht.forEach(t),bNo=i(la),Pa=n(la,"P",{});var aA=s(Pa);vNo=r(aA,"The model class to instantiate is selected based on the "),xge=n(aA,"CODE",{});var vht=s(xge);FNo=r(vht,"model_type"),vht.forEach(t),TNo=r(aA,` property of the config object (either
passed as an argument or loaded from `),$ge=n(aA,"CODE",{});var Fht=s($ge);MNo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),ENo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(aA,"CODE",{});var Tht=s(kge);CNo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),wNo=r(aA,":"),aA.forEach(t),ANo=i(la),Z=n(la,"UL",{});var ee=s(Z);Jb=n(ee,"LI",{});var Yxe=s(Jb);Sge=n(Yxe,"STRONG",{});var Mht=s(Sge);LNo=r(Mht,"albert"),Mht.forEach(t),yNo=r(Yxe," \u2014 "),kO=n(Yxe,"A",{href:!0});var Eht=s(kO);xNo=r(Eht,"AlbertForMultipleChoice"),Eht.forEach(t),$No=r(Yxe," (ALBERT model)"),Yxe.forEach(t),kNo=i(ee),Yb=n(ee,"LI",{});var Kxe=s(Yb);Rge=n(Kxe,"STRONG",{});var Cht=s(Rge);SNo=r(Cht,"bert"),Cht.forEach(t),RNo=r(Kxe," \u2014 "),SO=n(Kxe,"A",{href:!0});var wht=s(SO);PNo=r(wht,"BertForMultipleChoice"),wht.forEach(t),BNo=r(Kxe," (BERT model)"),Kxe.forEach(t),INo=i(ee),Kb=n(ee,"LI",{});var Zxe=s(Kb);Pge=n(Zxe,"STRONG",{});var Aht=s(Pge);NNo=r(Aht,"big_bird"),Aht.forEach(t),qNo=r(Zxe," \u2014 "),RO=n(Zxe,"A",{href:!0});var Lht=s(RO);jNo=r(Lht,"BigBirdForMultipleChoice"),Lht.forEach(t),DNo=r(Zxe," (BigBird model)"),Zxe.forEach(t),GNo=i(ee),Zb=n(ee,"LI",{});var e$e=s(Zb);Bge=n(e$e,"STRONG",{});var yht=s(Bge);ONo=r(yht,"camembert"),yht.forEach(t),VNo=r(e$e," \u2014 "),PO=n(e$e,"A",{href:!0});var xht=s(PO);XNo=r(xht,"CamembertForMultipleChoice"),xht.forEach(t),zNo=r(e$e," (CamemBERT model)"),e$e.forEach(t),WNo=i(ee),e2=n(ee,"LI",{});var o$e=s(e2);Ige=n(o$e,"STRONG",{});var $ht=s(Ige);QNo=r($ht,"canine"),$ht.forEach(t),HNo=r(o$e," \u2014 "),BO=n(o$e,"A",{href:!0});var kht=s(BO);UNo=r(kht,"CanineForMultipleChoice"),kht.forEach(t),JNo=r(o$e," (CANINE model)"),o$e.forEach(t),YNo=i(ee),o2=n(ee,"LI",{});var r$e=s(o2);Nge=n(r$e,"STRONG",{});var Sht=s(Nge);KNo=r(Sht,"convbert"),Sht.forEach(t),ZNo=r(r$e," \u2014 "),IO=n(r$e,"A",{href:!0});var Rht=s(IO);eqo=r(Rht,"ConvBertForMultipleChoice"),Rht.forEach(t),oqo=r(r$e," (ConvBERT model)"),r$e.forEach(t),rqo=i(ee),r2=n(ee,"LI",{});var t$e=s(r2);qge=n(t$e,"STRONG",{});var Pht=s(qge);tqo=r(Pht,"data2vec-text"),Pht.forEach(t),aqo=r(t$e," \u2014 "),NO=n(t$e,"A",{href:!0});var Bht=s(NO);nqo=r(Bht,"Data2VecTextForMultipleChoice"),Bht.forEach(t),sqo=r(t$e," (Data2VecText model)"),t$e.forEach(t),lqo=i(ee),t2=n(ee,"LI",{});var a$e=s(t2);jge=n(a$e,"STRONG",{});var Iht=s(jge);iqo=r(Iht,"deberta-v2"),Iht.forEach(t),dqo=r(a$e," \u2014 "),qO=n(a$e,"A",{href:!0});var Nht=s(qO);cqo=r(Nht,"DebertaV2ForMultipleChoice"),Nht.forEach(t),fqo=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),mqo=i(ee),a2=n(ee,"LI",{});var n$e=s(a2);Dge=n(n$e,"STRONG",{});var qht=s(Dge);gqo=r(qht,"distilbert"),qht.forEach(t),hqo=r(n$e," \u2014 "),jO=n(n$e,"A",{href:!0});var jht=s(jO);pqo=r(jht,"DistilBertForMultipleChoice"),jht.forEach(t),_qo=r(n$e," (DistilBERT model)"),n$e.forEach(t),uqo=i(ee),n2=n(ee,"LI",{});var s$e=s(n2);Gge=n(s$e,"STRONG",{});var Dht=s(Gge);bqo=r(Dht,"electra"),Dht.forEach(t),vqo=r(s$e," \u2014 "),DO=n(s$e,"A",{href:!0});var Ght=s(DO);Fqo=r(Ght,"ElectraForMultipleChoice"),Ght.forEach(t),Tqo=r(s$e," (ELECTRA model)"),s$e.forEach(t),Mqo=i(ee),s2=n(ee,"LI",{});var l$e=s(s2);Oge=n(l$e,"STRONG",{});var Oht=s(Oge);Eqo=r(Oht,"flaubert"),Oht.forEach(t),Cqo=r(l$e," \u2014 "),GO=n(l$e,"A",{href:!0});var Vht=s(GO);wqo=r(Vht,"FlaubertForMultipleChoice"),Vht.forEach(t),Aqo=r(l$e," (FlauBERT model)"),l$e.forEach(t),Lqo=i(ee),l2=n(ee,"LI",{});var i$e=s(l2);Vge=n(i$e,"STRONG",{});var Xht=s(Vge);yqo=r(Xht,"fnet"),Xht.forEach(t),xqo=r(i$e," \u2014 "),OO=n(i$e,"A",{href:!0});var zht=s(OO);$qo=r(zht,"FNetForMultipleChoice"),zht.forEach(t),kqo=r(i$e," (FNet model)"),i$e.forEach(t),Sqo=i(ee),i2=n(ee,"LI",{});var d$e=s(i2);Xge=n(d$e,"STRONG",{});var Wht=s(Xge);Rqo=r(Wht,"funnel"),Wht.forEach(t),Pqo=r(d$e," \u2014 "),VO=n(d$e,"A",{href:!0});var Qht=s(VO);Bqo=r(Qht,"FunnelForMultipleChoice"),Qht.forEach(t),Iqo=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),Nqo=i(ee),d2=n(ee,"LI",{});var c$e=s(d2);zge=n(c$e,"STRONG",{});var Hht=s(zge);qqo=r(Hht,"ibert"),Hht.forEach(t),jqo=r(c$e," \u2014 "),XO=n(c$e,"A",{href:!0});var Uht=s(XO);Dqo=r(Uht,"IBertForMultipleChoice"),Uht.forEach(t),Gqo=r(c$e," (I-BERT model)"),c$e.forEach(t),Oqo=i(ee),c2=n(ee,"LI",{});var f$e=s(c2);Wge=n(f$e,"STRONG",{});var Jht=s(Wge);Vqo=r(Jht,"longformer"),Jht.forEach(t),Xqo=r(f$e," \u2014 "),zO=n(f$e,"A",{href:!0});var Yht=s(zO);zqo=r(Yht,"LongformerForMultipleChoice"),Yht.forEach(t),Wqo=r(f$e," (Longformer model)"),f$e.forEach(t),Qqo=i(ee),f2=n(ee,"LI",{});var m$e=s(f2);Qge=n(m$e,"STRONG",{});var Kht=s(Qge);Hqo=r(Kht,"megatron-bert"),Kht.forEach(t),Uqo=r(m$e," \u2014 "),WO=n(m$e,"A",{href:!0});var Zht=s(WO);Jqo=r(Zht,"MegatronBertForMultipleChoice"),Zht.forEach(t),Yqo=r(m$e," (Megatron-BERT model)"),m$e.forEach(t),Kqo=i(ee),m2=n(ee,"LI",{});var g$e=s(m2);Hge=n(g$e,"STRONG",{});var ept=s(Hge);Zqo=r(ept,"mobilebert"),ept.forEach(t),ejo=r(g$e," \u2014 "),QO=n(g$e,"A",{href:!0});var opt=s(QO);ojo=r(opt,"MobileBertForMultipleChoice"),opt.forEach(t),rjo=r(g$e," (MobileBERT model)"),g$e.forEach(t),tjo=i(ee),g2=n(ee,"LI",{});var h$e=s(g2);Uge=n(h$e,"STRONG",{});var rpt=s(Uge);ajo=r(rpt,"mpnet"),rpt.forEach(t),njo=r(h$e," \u2014 "),HO=n(h$e,"A",{href:!0});var tpt=s(HO);sjo=r(tpt,"MPNetForMultipleChoice"),tpt.forEach(t),ljo=r(h$e," (MPNet model)"),h$e.forEach(t),ijo=i(ee),h2=n(ee,"LI",{});var p$e=s(h2);Jge=n(p$e,"STRONG",{});var apt=s(Jge);djo=r(apt,"nystromformer"),apt.forEach(t),cjo=r(p$e," \u2014 "),UO=n(p$e,"A",{href:!0});var npt=s(UO);fjo=r(npt,"NystromformerForMultipleChoice"),npt.forEach(t),mjo=r(p$e," (Nystr\xF6mformer model)"),p$e.forEach(t),gjo=i(ee),p2=n(ee,"LI",{});var _$e=s(p2);Yge=n(_$e,"STRONG",{});var spt=s(Yge);hjo=r(spt,"qdqbert"),spt.forEach(t),pjo=r(_$e," \u2014 "),JO=n(_$e,"A",{href:!0});var lpt=s(JO);_jo=r(lpt,"QDQBertForMultipleChoice"),lpt.forEach(t),ujo=r(_$e," (QDQBert model)"),_$e.forEach(t),bjo=i(ee),_2=n(ee,"LI",{});var u$e=s(_2);Kge=n(u$e,"STRONG",{});var ipt=s(Kge);vjo=r(ipt,"rembert"),ipt.forEach(t),Fjo=r(u$e," \u2014 "),YO=n(u$e,"A",{href:!0});var dpt=s(YO);Tjo=r(dpt,"RemBertForMultipleChoice"),dpt.forEach(t),Mjo=r(u$e," (RemBERT model)"),u$e.forEach(t),Ejo=i(ee),u2=n(ee,"LI",{});var b$e=s(u2);Zge=n(b$e,"STRONG",{});var cpt=s(Zge);Cjo=r(cpt,"roberta"),cpt.forEach(t),wjo=r(b$e," \u2014 "),KO=n(b$e,"A",{href:!0});var fpt=s(KO);Ajo=r(fpt,"RobertaForMultipleChoice"),fpt.forEach(t),Ljo=r(b$e," (RoBERTa model)"),b$e.forEach(t),yjo=i(ee),b2=n(ee,"LI",{});var v$e=s(b2);ehe=n(v$e,"STRONG",{});var mpt=s(ehe);xjo=r(mpt,"roformer"),mpt.forEach(t),$jo=r(v$e," \u2014 "),ZO=n(v$e,"A",{href:!0});var gpt=s(ZO);kjo=r(gpt,"RoFormerForMultipleChoice"),gpt.forEach(t),Sjo=r(v$e," (RoFormer model)"),v$e.forEach(t),Rjo=i(ee),v2=n(ee,"LI",{});var F$e=s(v2);ohe=n(F$e,"STRONG",{});var hpt=s(ohe);Pjo=r(hpt,"squeezebert"),hpt.forEach(t),Bjo=r(F$e," \u2014 "),eV=n(F$e,"A",{href:!0});var ppt=s(eV);Ijo=r(ppt,"SqueezeBertForMultipleChoice"),ppt.forEach(t),Njo=r(F$e," (SqueezeBERT model)"),F$e.forEach(t),qjo=i(ee),F2=n(ee,"LI",{});var T$e=s(F2);rhe=n(T$e,"STRONG",{});var _pt=s(rhe);jjo=r(_pt,"xlm"),_pt.forEach(t),Djo=r(T$e," \u2014 "),oV=n(T$e,"A",{href:!0});var upt=s(oV);Gjo=r(upt,"XLMForMultipleChoice"),upt.forEach(t),Ojo=r(T$e," (XLM model)"),T$e.forEach(t),Vjo=i(ee),T2=n(ee,"LI",{});var M$e=s(T2);the=n(M$e,"STRONG",{});var bpt=s(the);Xjo=r(bpt,"xlm-roberta"),bpt.forEach(t),zjo=r(M$e," \u2014 "),rV=n(M$e,"A",{href:!0});var vpt=s(rV);Wjo=r(vpt,"XLMRobertaForMultipleChoice"),vpt.forEach(t),Qjo=r(M$e," (XLM-RoBERTa model)"),M$e.forEach(t),Hjo=i(ee),M2=n(ee,"LI",{});var E$e=s(M2);ahe=n(E$e,"STRONG",{});var Fpt=s(ahe);Ujo=r(Fpt,"xlm-roberta-xl"),Fpt.forEach(t),Jjo=r(E$e," \u2014 "),tV=n(E$e,"A",{href:!0});var Tpt=s(tV);Yjo=r(Tpt,"XLMRobertaXLForMultipleChoice"),Tpt.forEach(t),Kjo=r(E$e," (XLM-RoBERTa-XL model)"),E$e.forEach(t),Zjo=i(ee),E2=n(ee,"LI",{});var C$e=s(E2);nhe=n(C$e,"STRONG",{});var Mpt=s(nhe);eDo=r(Mpt,"xlnet"),Mpt.forEach(t),oDo=r(C$e," \u2014 "),aV=n(C$e,"A",{href:!0});var Ept=s(aV);rDo=r(Ept,"XLNetForMultipleChoice"),Ept.forEach(t),tDo=r(C$e," (XLNet model)"),C$e.forEach(t),aDo=i(ee),C2=n(ee,"LI",{});var w$e=s(C2);she=n(w$e,"STRONG",{});var Cpt=s(she);nDo=r(Cpt,"yoso"),Cpt.forEach(t),sDo=r(w$e," \u2014 "),nV=n(w$e,"A",{href:!0});var wpt=s(nV);lDo=r(wpt,"YosoForMultipleChoice"),wpt.forEach(t),iDo=r(w$e," (YOSO model)"),w$e.forEach(t),ee.forEach(t),dDo=i(la),w2=n(la,"P",{});var A$e=s(w2);cDo=r(A$e,"The model is set in evaluation mode by default using "),lhe=n(A$e,"CODE",{});var Apt=s(lhe);fDo=r(Apt,"model.eval()"),Apt.forEach(t),mDo=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(A$e,"CODE",{});var Lpt=s(ihe);gDo=r(Lpt,"model.train()"),Lpt.forEach(t),A$e.forEach(t),hDo=i(la),T(A2.$$.fragment,la),la.forEach(t),Us.forEach(t),xje=i(f),Hi=n(f,"H2",{class:!0});var RGe=s(Hi);L2=n(RGe,"A",{id:!0,class:!0,href:!0});var ypt=s(L2);dhe=n(ypt,"SPAN",{});var xpt=s(dhe);T(HL.$$.fragment,xpt),xpt.forEach(t),ypt.forEach(t),pDo=i(RGe),che=n(RGe,"SPAN",{});var $pt=s(che);_Do=r($pt,"AutoModelForNextSentencePrediction"),$pt.forEach(t),RGe.forEach(t),$je=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(UL.$$.fragment,Js),uDo=i(Js),Ui=n(Js,"P",{});var lee=s(Ui);bDo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sV=n(lee,"A",{href:!0});var kpt=s(sV);vDo=r(kpt,"from_pretrained()"),kpt.forEach(t),FDo=r(lee," class method or the "),lV=n(lee,"A",{href:!0});var Spt=s(lV);TDo=r(Spt,"from_config()"),Spt.forEach(t),MDo=r(lee,` class
method.`),lee.forEach(t),EDo=i(Js),JL=n(Js,"P",{});var PGe=s(JL);CDo=r(PGe,"This class cannot be instantiated directly using "),fhe=n(PGe,"CODE",{});var Rpt=s(fhe);wDo=r(Rpt,"__init__()"),Rpt.forEach(t),ADo=r(PGe," (throws an error)."),PGe.forEach(t),LDo=i(Js),ct=n(Js,"DIV",{class:!0});var nA=s(ct);T(YL.$$.fragment,nA),yDo=i(nA),mhe=n(nA,"P",{});var Ppt=s(mhe);xDo=r(Ppt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ppt.forEach(t),$Do=i(nA),Ji=n(nA,"P",{});var iee=s(Ji);kDo=r(iee,`Note:
Loading a model from its configuration file does `),ghe=n(iee,"STRONG",{});var Bpt=s(ghe);SDo=r(Bpt,"not"),Bpt.forEach(t),RDo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(iee,"A",{href:!0});var Ipt=s(iV);PDo=r(Ipt,"from_pretrained()"),Ipt.forEach(t),BDo=r(iee," to load the model weights."),iee.forEach(t),IDo=i(nA),T(y2.$$.fragment,nA),nA.forEach(t),NDo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(KL.$$.fragment,ia),qDo=i(ia),hhe=n(ia,"P",{});var Npt=s(hhe);jDo=r(Npt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Npt.forEach(t),DDo=i(ia),Ba=n(ia,"P",{});var sA=s(Ba);GDo=r(sA,"The model class to instantiate is selected based on the "),phe=n(sA,"CODE",{});var qpt=s(phe);ODo=r(qpt,"model_type"),qpt.forEach(t),VDo=r(sA,` property of the config object (either
passed as an argument or loaded from `),_he=n(sA,"CODE",{});var jpt=s(_he);XDo=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),zDo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(sA,"CODE",{});var Dpt=s(uhe);WDo=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),QDo=r(sA,":"),sA.forEach(t),HDo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);x2=n(Ys,"LI",{});var L$e=s(x2);bhe=n(L$e,"STRONG",{});var Gpt=s(bhe);UDo=r(Gpt,"bert"),Gpt.forEach(t),JDo=r(L$e," \u2014 "),dV=n(L$e,"A",{href:!0});var Opt=s(dV);YDo=r(Opt,"BertForNextSentencePrediction"),Opt.forEach(t),KDo=r(L$e," (BERT model)"),L$e.forEach(t),ZDo=i(Ys),$2=n(Ys,"LI",{});var y$e=s($2);vhe=n(y$e,"STRONG",{});var Vpt=s(vhe);eGo=r(Vpt,"fnet"),Vpt.forEach(t),oGo=r(y$e," \u2014 "),cV=n(y$e,"A",{href:!0});var Xpt=s(cV);rGo=r(Xpt,"FNetForNextSentencePrediction"),Xpt.forEach(t),tGo=r(y$e," (FNet model)"),y$e.forEach(t),aGo=i(Ys),k2=n(Ys,"LI",{});var x$e=s(k2);Fhe=n(x$e,"STRONG",{});var zpt=s(Fhe);nGo=r(zpt,"megatron-bert"),zpt.forEach(t),sGo=r(x$e," \u2014 "),fV=n(x$e,"A",{href:!0});var Wpt=s(fV);lGo=r(Wpt,"MegatronBertForNextSentencePrediction"),Wpt.forEach(t),iGo=r(x$e," (Megatron-BERT model)"),x$e.forEach(t),dGo=i(Ys),S2=n(Ys,"LI",{});var $$e=s(S2);The=n($$e,"STRONG",{});var Qpt=s(The);cGo=r(Qpt,"mobilebert"),Qpt.forEach(t),fGo=r($$e," \u2014 "),mV=n($$e,"A",{href:!0});var Hpt=s(mV);mGo=r(Hpt,"MobileBertForNextSentencePrediction"),Hpt.forEach(t),gGo=r($$e," (MobileBERT model)"),$$e.forEach(t),hGo=i(Ys),R2=n(Ys,"LI",{});var k$e=s(R2);Mhe=n(k$e,"STRONG",{});var Upt=s(Mhe);pGo=r(Upt,"qdqbert"),Upt.forEach(t),_Go=r(k$e," \u2014 "),gV=n(k$e,"A",{href:!0});var Jpt=s(gV);uGo=r(Jpt,"QDQBertForNextSentencePrediction"),Jpt.forEach(t),bGo=r(k$e," (QDQBert model)"),k$e.forEach(t),Ys.forEach(t),vGo=i(ia),P2=n(ia,"P",{});var S$e=s(P2);FGo=r(S$e,"The model is set in evaluation mode by default using "),Ehe=n(S$e,"CODE",{});var Ypt=s(Ehe);TGo=r(Ypt,"model.eval()"),Ypt.forEach(t),MGo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(S$e,"CODE",{});var Kpt=s(Che);EGo=r(Kpt,"model.train()"),Kpt.forEach(t),S$e.forEach(t),CGo=i(ia),T(B2.$$.fragment,ia),ia.forEach(t),Js.forEach(t),kje=i(f),Yi=n(f,"H2",{class:!0});var BGe=s(Yi);I2=n(BGe,"A",{id:!0,class:!0,href:!0});var Zpt=s(I2);whe=n(Zpt,"SPAN",{});var e_t=s(whe);T(ZL.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),wGo=i(BGe),Ahe=n(BGe,"SPAN",{});var o_t=s(Ahe);AGo=r(o_t,"AutoModelForTokenClassification"),o_t.forEach(t),BGe.forEach(t),Sje=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(ey.$$.fragment,Ks),LGo=i(Ks),Ki=n(Ks,"P",{});var dee=s(Ki);yGo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hV=n(dee,"A",{href:!0});var r_t=s(hV);xGo=r(r_t,"from_pretrained()"),r_t.forEach(t),$Go=r(dee," class method or the "),pV=n(dee,"A",{href:!0});var t_t=s(pV);kGo=r(t_t,"from_config()"),t_t.forEach(t),SGo=r(dee,` class
method.`),dee.forEach(t),RGo=i(Ks),oy=n(Ks,"P",{});var IGe=s(oy);PGo=r(IGe,"This class cannot be instantiated directly using "),Lhe=n(IGe,"CODE",{});var a_t=s(Lhe);BGo=r(a_t,"__init__()"),a_t.forEach(t),IGo=r(IGe," (throws an error)."),IGe.forEach(t),NGo=i(Ks),ft=n(Ks,"DIV",{class:!0});var lA=s(ft);T(ry.$$.fragment,lA),qGo=i(lA),yhe=n(lA,"P",{});var n_t=s(yhe);jGo=r(n_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n_t.forEach(t),DGo=i(lA),Zi=n(lA,"P",{});var cee=s(Zi);GGo=r(cee,`Note:
Loading a model from its configuration file does `),xhe=n(cee,"STRONG",{});var s_t=s(xhe);OGo=r(s_t,"not"),s_t.forEach(t),VGo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(cee,"A",{href:!0});var l_t=s(_V);XGo=r(l_t,"from_pretrained()"),l_t.forEach(t),zGo=r(cee," to load the model weights."),cee.forEach(t),WGo=i(lA),T(N2.$$.fragment,lA),lA.forEach(t),QGo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(ty.$$.fragment,da),HGo=i(da),$he=n(da,"P",{});var i_t=s($he);UGo=r(i_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i_t.forEach(t),JGo=i(da),Ia=n(da,"P",{});var iA=s(Ia);YGo=r(iA,"The model class to instantiate is selected based on the "),khe=n(iA,"CODE",{});var d_t=s(khe);KGo=r(d_t,"model_type"),d_t.forEach(t),ZGo=r(iA,` property of the config object (either
passed as an argument or loaded from `),She=n(iA,"CODE",{});var c_t=s(She);eOo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),oOo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(iA,"CODE",{});var f_t=s(Rhe);rOo=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),tOo=r(iA,":"),iA.forEach(t),aOo=i(da),U=n(da,"UL",{});var J=s(U);q2=n(J,"LI",{});var R$e=s(q2);Phe=n(R$e,"STRONG",{});var m_t=s(Phe);nOo=r(m_t,"albert"),m_t.forEach(t),sOo=r(R$e," \u2014 "),uV=n(R$e,"A",{href:!0});var g_t=s(uV);lOo=r(g_t,"AlbertForTokenClassification"),g_t.forEach(t),iOo=r(R$e," (ALBERT model)"),R$e.forEach(t),dOo=i(J),j2=n(J,"LI",{});var P$e=s(j2);Bhe=n(P$e,"STRONG",{});var h_t=s(Bhe);cOo=r(h_t,"bert"),h_t.forEach(t),fOo=r(P$e," \u2014 "),bV=n(P$e,"A",{href:!0});var p_t=s(bV);mOo=r(p_t,"BertForTokenClassification"),p_t.forEach(t),gOo=r(P$e," (BERT model)"),P$e.forEach(t),hOo=i(J),D2=n(J,"LI",{});var B$e=s(D2);Ihe=n(B$e,"STRONG",{});var __t=s(Ihe);pOo=r(__t,"big_bird"),__t.forEach(t),_Oo=r(B$e," \u2014 "),vV=n(B$e,"A",{href:!0});var u_t=s(vV);uOo=r(u_t,"BigBirdForTokenClassification"),u_t.forEach(t),bOo=r(B$e," (BigBird model)"),B$e.forEach(t),vOo=i(J),G2=n(J,"LI",{});var I$e=s(G2);Nhe=n(I$e,"STRONG",{});var b_t=s(Nhe);FOo=r(b_t,"camembert"),b_t.forEach(t),TOo=r(I$e," \u2014 "),FV=n(I$e,"A",{href:!0});var v_t=s(FV);MOo=r(v_t,"CamembertForTokenClassification"),v_t.forEach(t),EOo=r(I$e," (CamemBERT model)"),I$e.forEach(t),COo=i(J),O2=n(J,"LI",{});var N$e=s(O2);qhe=n(N$e,"STRONG",{});var F_t=s(qhe);wOo=r(F_t,"canine"),F_t.forEach(t),AOo=r(N$e," \u2014 "),TV=n(N$e,"A",{href:!0});var T_t=s(TV);LOo=r(T_t,"CanineForTokenClassification"),T_t.forEach(t),yOo=r(N$e," (CANINE model)"),N$e.forEach(t),xOo=i(J),V2=n(J,"LI",{});var q$e=s(V2);jhe=n(q$e,"STRONG",{});var M_t=s(jhe);$Oo=r(M_t,"convbert"),M_t.forEach(t),kOo=r(q$e," \u2014 "),MV=n(q$e,"A",{href:!0});var E_t=s(MV);SOo=r(E_t,"ConvBertForTokenClassification"),E_t.forEach(t),ROo=r(q$e," (ConvBERT model)"),q$e.forEach(t),POo=i(J),X2=n(J,"LI",{});var j$e=s(X2);Dhe=n(j$e,"STRONG",{});var C_t=s(Dhe);BOo=r(C_t,"data2vec-text"),C_t.forEach(t),IOo=r(j$e," \u2014 "),EV=n(j$e,"A",{href:!0});var w_t=s(EV);NOo=r(w_t,"Data2VecTextForTokenClassification"),w_t.forEach(t),qOo=r(j$e," (Data2VecText model)"),j$e.forEach(t),jOo=i(J),z2=n(J,"LI",{});var D$e=s(z2);Ghe=n(D$e,"STRONG",{});var A_t=s(Ghe);DOo=r(A_t,"deberta"),A_t.forEach(t),GOo=r(D$e," \u2014 "),CV=n(D$e,"A",{href:!0});var L_t=s(CV);OOo=r(L_t,"DebertaForTokenClassification"),L_t.forEach(t),VOo=r(D$e," (DeBERTa model)"),D$e.forEach(t),XOo=i(J),W2=n(J,"LI",{});var G$e=s(W2);Ohe=n(G$e,"STRONG",{});var y_t=s(Ohe);zOo=r(y_t,"deberta-v2"),y_t.forEach(t),WOo=r(G$e," \u2014 "),wV=n(G$e,"A",{href:!0});var x_t=s(wV);QOo=r(x_t,"DebertaV2ForTokenClassification"),x_t.forEach(t),HOo=r(G$e," (DeBERTa-v2 model)"),G$e.forEach(t),UOo=i(J),Q2=n(J,"LI",{});var O$e=s(Q2);Vhe=n(O$e,"STRONG",{});var $_t=s(Vhe);JOo=r($_t,"distilbert"),$_t.forEach(t),YOo=r(O$e," \u2014 "),AV=n(O$e,"A",{href:!0});var k_t=s(AV);KOo=r(k_t,"DistilBertForTokenClassification"),k_t.forEach(t),ZOo=r(O$e," (DistilBERT model)"),O$e.forEach(t),eVo=i(J),H2=n(J,"LI",{});var V$e=s(H2);Xhe=n(V$e,"STRONG",{});var S_t=s(Xhe);oVo=r(S_t,"electra"),S_t.forEach(t),rVo=r(V$e," \u2014 "),LV=n(V$e,"A",{href:!0});var R_t=s(LV);tVo=r(R_t,"ElectraForTokenClassification"),R_t.forEach(t),aVo=r(V$e," (ELECTRA model)"),V$e.forEach(t),nVo=i(J),U2=n(J,"LI",{});var X$e=s(U2);zhe=n(X$e,"STRONG",{});var P_t=s(zhe);sVo=r(P_t,"flaubert"),P_t.forEach(t),lVo=r(X$e," \u2014 "),yV=n(X$e,"A",{href:!0});var B_t=s(yV);iVo=r(B_t,"FlaubertForTokenClassification"),B_t.forEach(t),dVo=r(X$e," (FlauBERT model)"),X$e.forEach(t),cVo=i(J),J2=n(J,"LI",{});var z$e=s(J2);Whe=n(z$e,"STRONG",{});var I_t=s(Whe);fVo=r(I_t,"fnet"),I_t.forEach(t),mVo=r(z$e," \u2014 "),xV=n(z$e,"A",{href:!0});var N_t=s(xV);gVo=r(N_t,"FNetForTokenClassification"),N_t.forEach(t),hVo=r(z$e," (FNet model)"),z$e.forEach(t),pVo=i(J),Y2=n(J,"LI",{});var W$e=s(Y2);Qhe=n(W$e,"STRONG",{});var q_t=s(Qhe);_Vo=r(q_t,"funnel"),q_t.forEach(t),uVo=r(W$e," \u2014 "),$V=n(W$e,"A",{href:!0});var j_t=s($V);bVo=r(j_t,"FunnelForTokenClassification"),j_t.forEach(t),vVo=r(W$e," (Funnel Transformer model)"),W$e.forEach(t),FVo=i(J),K2=n(J,"LI",{});var Q$e=s(K2);Hhe=n(Q$e,"STRONG",{});var D_t=s(Hhe);TVo=r(D_t,"gpt2"),D_t.forEach(t),MVo=r(Q$e," \u2014 "),kV=n(Q$e,"A",{href:!0});var G_t=s(kV);EVo=r(G_t,"GPT2ForTokenClassification"),G_t.forEach(t),CVo=r(Q$e," (OpenAI GPT-2 model)"),Q$e.forEach(t),wVo=i(J),Z2=n(J,"LI",{});var H$e=s(Z2);Uhe=n(H$e,"STRONG",{});var O_t=s(Uhe);AVo=r(O_t,"ibert"),O_t.forEach(t),LVo=r(H$e," \u2014 "),SV=n(H$e,"A",{href:!0});var V_t=s(SV);yVo=r(V_t,"IBertForTokenClassification"),V_t.forEach(t),xVo=r(H$e," (I-BERT model)"),H$e.forEach(t),$Vo=i(J),ev=n(J,"LI",{});var U$e=s(ev);Jhe=n(U$e,"STRONG",{});var X_t=s(Jhe);kVo=r(X_t,"layoutlm"),X_t.forEach(t),SVo=r(U$e," \u2014 "),RV=n(U$e,"A",{href:!0});var z_t=s(RV);RVo=r(z_t,"LayoutLMForTokenClassification"),z_t.forEach(t),PVo=r(U$e," (LayoutLM model)"),U$e.forEach(t),BVo=i(J),ov=n(J,"LI",{});var J$e=s(ov);Yhe=n(J$e,"STRONG",{});var W_t=s(Yhe);IVo=r(W_t,"layoutlmv2"),W_t.forEach(t),NVo=r(J$e," \u2014 "),PV=n(J$e,"A",{href:!0});var Q_t=s(PV);qVo=r(Q_t,"LayoutLMv2ForTokenClassification"),Q_t.forEach(t),jVo=r(J$e," (LayoutLMv2 model)"),J$e.forEach(t),DVo=i(J),rv=n(J,"LI",{});var Y$e=s(rv);Khe=n(Y$e,"STRONG",{});var H_t=s(Khe);GVo=r(H_t,"layoutlmv3"),H_t.forEach(t),OVo=r(Y$e," \u2014 "),BV=n(Y$e,"A",{href:!0});var U_t=s(BV);VVo=r(U_t,"LayoutLMv3ForTokenClassification"),U_t.forEach(t),XVo=r(Y$e," (LayoutLMv3 model)"),Y$e.forEach(t),zVo=i(J),tv=n(J,"LI",{});var K$e=s(tv);Zhe=n(K$e,"STRONG",{});var J_t=s(Zhe);WVo=r(J_t,"longformer"),J_t.forEach(t),QVo=r(K$e," \u2014 "),IV=n(K$e,"A",{href:!0});var Y_t=s(IV);HVo=r(Y_t,"LongformerForTokenClassification"),Y_t.forEach(t),UVo=r(K$e," (Longformer model)"),K$e.forEach(t),JVo=i(J),av=n(J,"LI",{});var Z$e=s(av);epe=n(Z$e,"STRONG",{});var K_t=s(epe);YVo=r(K_t,"megatron-bert"),K_t.forEach(t),KVo=r(Z$e," \u2014 "),NV=n(Z$e,"A",{href:!0});var Z_t=s(NV);ZVo=r(Z_t,"MegatronBertForTokenClassification"),Z_t.forEach(t),eXo=r(Z$e," (Megatron-BERT model)"),Z$e.forEach(t),oXo=i(J),nv=n(J,"LI",{});var eke=s(nv);ope=n(eke,"STRONG",{});var eut=s(ope);rXo=r(eut,"mobilebert"),eut.forEach(t),tXo=r(eke," \u2014 "),qV=n(eke,"A",{href:!0});var out=s(qV);aXo=r(out,"MobileBertForTokenClassification"),out.forEach(t),nXo=r(eke," (MobileBERT model)"),eke.forEach(t),sXo=i(J),sv=n(J,"LI",{});var oke=s(sv);rpe=n(oke,"STRONG",{});var rut=s(rpe);lXo=r(rut,"mpnet"),rut.forEach(t),iXo=r(oke," \u2014 "),jV=n(oke,"A",{href:!0});var tut=s(jV);dXo=r(tut,"MPNetForTokenClassification"),tut.forEach(t),cXo=r(oke," (MPNet model)"),oke.forEach(t),fXo=i(J),lv=n(J,"LI",{});var rke=s(lv);tpe=n(rke,"STRONG",{});var aut=s(tpe);mXo=r(aut,"nystromformer"),aut.forEach(t),gXo=r(rke," \u2014 "),DV=n(rke,"A",{href:!0});var nut=s(DV);hXo=r(nut,"NystromformerForTokenClassification"),nut.forEach(t),pXo=r(rke," (Nystr\xF6mformer model)"),rke.forEach(t),_Xo=i(J),iv=n(J,"LI",{});var tke=s(iv);ape=n(tke,"STRONG",{});var sut=s(ape);uXo=r(sut,"qdqbert"),sut.forEach(t),bXo=r(tke," \u2014 "),GV=n(tke,"A",{href:!0});var lut=s(GV);vXo=r(lut,"QDQBertForTokenClassification"),lut.forEach(t),FXo=r(tke," (QDQBert model)"),tke.forEach(t),TXo=i(J),dv=n(J,"LI",{});var ake=s(dv);npe=n(ake,"STRONG",{});var iut=s(npe);MXo=r(iut,"rembert"),iut.forEach(t),EXo=r(ake," \u2014 "),OV=n(ake,"A",{href:!0});var dut=s(OV);CXo=r(dut,"RemBertForTokenClassification"),dut.forEach(t),wXo=r(ake," (RemBERT model)"),ake.forEach(t),AXo=i(J),cv=n(J,"LI",{});var nke=s(cv);spe=n(nke,"STRONG",{});var cut=s(spe);LXo=r(cut,"roberta"),cut.forEach(t),yXo=r(nke," \u2014 "),VV=n(nke,"A",{href:!0});var fut=s(VV);xXo=r(fut,"RobertaForTokenClassification"),fut.forEach(t),$Xo=r(nke," (RoBERTa model)"),nke.forEach(t),kXo=i(J),fv=n(J,"LI",{});var ske=s(fv);lpe=n(ske,"STRONG",{});var mut=s(lpe);SXo=r(mut,"roformer"),mut.forEach(t),RXo=r(ske," \u2014 "),XV=n(ske,"A",{href:!0});var gut=s(XV);PXo=r(gut,"RoFormerForTokenClassification"),gut.forEach(t),BXo=r(ske," (RoFormer model)"),ske.forEach(t),IXo=i(J),mv=n(J,"LI",{});var lke=s(mv);ipe=n(lke,"STRONG",{});var hut=s(ipe);NXo=r(hut,"squeezebert"),hut.forEach(t),qXo=r(lke," \u2014 "),zV=n(lke,"A",{href:!0});var put=s(zV);jXo=r(put,"SqueezeBertForTokenClassification"),put.forEach(t),DXo=r(lke," (SqueezeBERT model)"),lke.forEach(t),GXo=i(J),gv=n(J,"LI",{});var ike=s(gv);dpe=n(ike,"STRONG",{});var _ut=s(dpe);OXo=r(_ut,"xlm"),_ut.forEach(t),VXo=r(ike," \u2014 "),WV=n(ike,"A",{href:!0});var uut=s(WV);XXo=r(uut,"XLMForTokenClassification"),uut.forEach(t),zXo=r(ike," (XLM model)"),ike.forEach(t),WXo=i(J),hv=n(J,"LI",{});var dke=s(hv);cpe=n(dke,"STRONG",{});var but=s(cpe);QXo=r(but,"xlm-roberta"),but.forEach(t),HXo=r(dke," \u2014 "),QV=n(dke,"A",{href:!0});var vut=s(QV);UXo=r(vut,"XLMRobertaForTokenClassification"),vut.forEach(t),JXo=r(dke," (XLM-RoBERTa model)"),dke.forEach(t),YXo=i(J),pv=n(J,"LI",{});var cke=s(pv);fpe=n(cke,"STRONG",{});var Fut=s(fpe);KXo=r(Fut,"xlm-roberta-xl"),Fut.forEach(t),ZXo=r(cke," \u2014 "),HV=n(cke,"A",{href:!0});var Tut=s(HV);ezo=r(Tut,"XLMRobertaXLForTokenClassification"),Tut.forEach(t),ozo=r(cke," (XLM-RoBERTa-XL model)"),cke.forEach(t),rzo=i(J),_v=n(J,"LI",{});var fke=s(_v);mpe=n(fke,"STRONG",{});var Mut=s(mpe);tzo=r(Mut,"xlnet"),Mut.forEach(t),azo=r(fke," \u2014 "),UV=n(fke,"A",{href:!0});var Eut=s(UV);nzo=r(Eut,"XLNetForTokenClassification"),Eut.forEach(t),szo=r(fke," (XLNet model)"),fke.forEach(t),lzo=i(J),uv=n(J,"LI",{});var mke=s(uv);gpe=n(mke,"STRONG",{});var Cut=s(gpe);izo=r(Cut,"yoso"),Cut.forEach(t),dzo=r(mke," \u2014 "),JV=n(mke,"A",{href:!0});var wut=s(JV);czo=r(wut,"YosoForTokenClassification"),wut.forEach(t),fzo=r(mke," (YOSO model)"),mke.forEach(t),J.forEach(t),mzo=i(da),bv=n(da,"P",{});var gke=s(bv);gzo=r(gke,"The model is set in evaluation mode by default using "),hpe=n(gke,"CODE",{});var Aut=s(hpe);hzo=r(Aut,"model.eval()"),Aut.forEach(t),pzo=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(gke,"CODE",{});var Lut=s(ppe);_zo=r(Lut,"model.train()"),Lut.forEach(t),gke.forEach(t),uzo=i(da),T(vv.$$.fragment,da),da.forEach(t),Ks.forEach(t),Rje=i(f),ed=n(f,"H2",{class:!0});var NGe=s(ed);Fv=n(NGe,"A",{id:!0,class:!0,href:!0});var yut=s(Fv);_pe=n(yut,"SPAN",{});var xut=s(_pe);T(ay.$$.fragment,xut),xut.forEach(t),yut.forEach(t),bzo=i(NGe),upe=n(NGe,"SPAN",{});var $ut=s(upe);vzo=r($ut,"AutoModelForQuestionAnswering"),$ut.forEach(t),NGe.forEach(t),Pje=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(ny.$$.fragment,Zs),Fzo=i(Zs),od=n(Zs,"P",{});var fee=s(od);Tzo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YV=n(fee,"A",{href:!0});var kut=s(YV);Mzo=r(kut,"from_pretrained()"),kut.forEach(t),Ezo=r(fee," class method or the "),KV=n(fee,"A",{href:!0});var Sut=s(KV);Czo=r(Sut,"from_config()"),Sut.forEach(t),wzo=r(fee,` class
method.`),fee.forEach(t),Azo=i(Zs),sy=n(Zs,"P",{});var qGe=s(sy);Lzo=r(qGe,"This class cannot be instantiated directly using "),bpe=n(qGe,"CODE",{});var Rut=s(bpe);yzo=r(Rut,"__init__()"),Rut.forEach(t),xzo=r(qGe," (throws an error)."),qGe.forEach(t),$zo=i(Zs),mt=n(Zs,"DIV",{class:!0});var dA=s(mt);T(ly.$$.fragment,dA),kzo=i(dA),vpe=n(dA,"P",{});var Put=s(vpe);Szo=r(Put,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Put.forEach(t),Rzo=i(dA),rd=n(dA,"P",{});var mee=s(rd);Pzo=r(mee,`Note:
Loading a model from its configuration file does `),Fpe=n(mee,"STRONG",{});var But=s(Fpe);Bzo=r(But,"not"),But.forEach(t),Izo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(mee,"A",{href:!0});var Iut=s(ZV);Nzo=r(Iut,"from_pretrained()"),Iut.forEach(t),qzo=r(mee," to load the model weights."),mee.forEach(t),jzo=i(dA),T(Tv.$$.fragment,dA),dA.forEach(t),Dzo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(iy.$$.fragment,ca),Gzo=i(ca),Tpe=n(ca,"P",{});var Nut=s(Tpe);Ozo=r(Nut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nut.forEach(t),Vzo=i(ca),Na=n(ca,"P",{});var cA=s(Na);Xzo=r(cA,"The model class to instantiate is selected based on the "),Mpe=n(cA,"CODE",{});var qut=s(Mpe);zzo=r(qut,"model_type"),qut.forEach(t),Wzo=r(cA,` property of the config object (either
passed as an argument or loaded from `),Epe=n(cA,"CODE",{});var jut=s(Epe);Qzo=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),Hzo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(cA,"CODE",{});var Dut=s(Cpe);Uzo=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Jzo=r(cA,":"),cA.forEach(t),Yzo=i(ca),V=n(ca,"UL",{});var X=s(V);Mv=n(X,"LI",{});var hke=s(Mv);wpe=n(hke,"STRONG",{});var Gut=s(wpe);Kzo=r(Gut,"albert"),Gut.forEach(t),Zzo=r(hke," \u2014 "),eX=n(hke,"A",{href:!0});var Out=s(eX);eWo=r(Out,"AlbertForQuestionAnswering"),Out.forEach(t),oWo=r(hke," (ALBERT model)"),hke.forEach(t),rWo=i(X),Ev=n(X,"LI",{});var pke=s(Ev);Ape=n(pke,"STRONG",{});var Vut=s(Ape);tWo=r(Vut,"bart"),Vut.forEach(t),aWo=r(pke," \u2014 "),oX=n(pke,"A",{href:!0});var Xut=s(oX);nWo=r(Xut,"BartForQuestionAnswering"),Xut.forEach(t),sWo=r(pke," (BART model)"),pke.forEach(t),lWo=i(X),Cv=n(X,"LI",{});var _ke=s(Cv);Lpe=n(_ke,"STRONG",{});var zut=s(Lpe);iWo=r(zut,"bert"),zut.forEach(t),dWo=r(_ke," \u2014 "),rX=n(_ke,"A",{href:!0});var Wut=s(rX);cWo=r(Wut,"BertForQuestionAnswering"),Wut.forEach(t),fWo=r(_ke," (BERT model)"),_ke.forEach(t),mWo=i(X),wv=n(X,"LI",{});var uke=s(wv);ype=n(uke,"STRONG",{});var Qut=s(ype);gWo=r(Qut,"big_bird"),Qut.forEach(t),hWo=r(uke," \u2014 "),tX=n(uke,"A",{href:!0});var Hut=s(tX);pWo=r(Hut,"BigBirdForQuestionAnswering"),Hut.forEach(t),_Wo=r(uke," (BigBird model)"),uke.forEach(t),uWo=i(X),Av=n(X,"LI",{});var bke=s(Av);xpe=n(bke,"STRONG",{});var Uut=s(xpe);bWo=r(Uut,"bigbird_pegasus"),Uut.forEach(t),vWo=r(bke," \u2014 "),aX=n(bke,"A",{href:!0});var Jut=s(aX);FWo=r(Jut,"BigBirdPegasusForQuestionAnswering"),Jut.forEach(t),TWo=r(bke," (BigBird-Pegasus model)"),bke.forEach(t),MWo=i(X),Lv=n(X,"LI",{});var vke=s(Lv);$pe=n(vke,"STRONG",{});var Yut=s($pe);EWo=r(Yut,"camembert"),Yut.forEach(t),CWo=r(vke," \u2014 "),nX=n(vke,"A",{href:!0});var Kut=s(nX);wWo=r(Kut,"CamembertForQuestionAnswering"),Kut.forEach(t),AWo=r(vke," (CamemBERT model)"),vke.forEach(t),LWo=i(X),yv=n(X,"LI",{});var Fke=s(yv);kpe=n(Fke,"STRONG",{});var Zut=s(kpe);yWo=r(Zut,"canine"),Zut.forEach(t),xWo=r(Fke," \u2014 "),sX=n(Fke,"A",{href:!0});var e1t=s(sX);$Wo=r(e1t,"CanineForQuestionAnswering"),e1t.forEach(t),kWo=r(Fke," (CANINE model)"),Fke.forEach(t),SWo=i(X),xv=n(X,"LI",{});var Tke=s(xv);Spe=n(Tke,"STRONG",{});var o1t=s(Spe);RWo=r(o1t,"convbert"),o1t.forEach(t),PWo=r(Tke," \u2014 "),lX=n(Tke,"A",{href:!0});var r1t=s(lX);BWo=r(r1t,"ConvBertForQuestionAnswering"),r1t.forEach(t),IWo=r(Tke," (ConvBERT model)"),Tke.forEach(t),NWo=i(X),$v=n(X,"LI",{});var Mke=s($v);Rpe=n(Mke,"STRONG",{});var t1t=s(Rpe);qWo=r(t1t,"data2vec-text"),t1t.forEach(t),jWo=r(Mke," \u2014 "),iX=n(Mke,"A",{href:!0});var a1t=s(iX);DWo=r(a1t,"Data2VecTextForQuestionAnswering"),a1t.forEach(t),GWo=r(Mke," (Data2VecText model)"),Mke.forEach(t),OWo=i(X),kv=n(X,"LI",{});var Eke=s(kv);Ppe=n(Eke,"STRONG",{});var n1t=s(Ppe);VWo=r(n1t,"deberta"),n1t.forEach(t),XWo=r(Eke," \u2014 "),dX=n(Eke,"A",{href:!0});var s1t=s(dX);zWo=r(s1t,"DebertaForQuestionAnswering"),s1t.forEach(t),WWo=r(Eke," (DeBERTa model)"),Eke.forEach(t),QWo=i(X),Sv=n(X,"LI",{});var Cke=s(Sv);Bpe=n(Cke,"STRONG",{});var l1t=s(Bpe);HWo=r(l1t,"deberta-v2"),l1t.forEach(t),UWo=r(Cke," \u2014 "),cX=n(Cke,"A",{href:!0});var i1t=s(cX);JWo=r(i1t,"DebertaV2ForQuestionAnswering"),i1t.forEach(t),YWo=r(Cke," (DeBERTa-v2 model)"),Cke.forEach(t),KWo=i(X),Rv=n(X,"LI",{});var wke=s(Rv);Ipe=n(wke,"STRONG",{});var d1t=s(Ipe);ZWo=r(d1t,"distilbert"),d1t.forEach(t),eQo=r(wke," \u2014 "),fX=n(wke,"A",{href:!0});var c1t=s(fX);oQo=r(c1t,"DistilBertForQuestionAnswering"),c1t.forEach(t),rQo=r(wke," (DistilBERT model)"),wke.forEach(t),tQo=i(X),Pv=n(X,"LI",{});var Ake=s(Pv);Npe=n(Ake,"STRONG",{});var f1t=s(Npe);aQo=r(f1t,"electra"),f1t.forEach(t),nQo=r(Ake," \u2014 "),mX=n(Ake,"A",{href:!0});var m1t=s(mX);sQo=r(m1t,"ElectraForQuestionAnswering"),m1t.forEach(t),lQo=r(Ake," (ELECTRA model)"),Ake.forEach(t),iQo=i(X),Bv=n(X,"LI",{});var Lke=s(Bv);qpe=n(Lke,"STRONG",{});var g1t=s(qpe);dQo=r(g1t,"flaubert"),g1t.forEach(t),cQo=r(Lke," \u2014 "),gX=n(Lke,"A",{href:!0});var h1t=s(gX);fQo=r(h1t,"FlaubertForQuestionAnsweringSimple"),h1t.forEach(t),mQo=r(Lke," (FlauBERT model)"),Lke.forEach(t),gQo=i(X),Iv=n(X,"LI",{});var yke=s(Iv);jpe=n(yke,"STRONG",{});var p1t=s(jpe);hQo=r(p1t,"fnet"),p1t.forEach(t),pQo=r(yke," \u2014 "),hX=n(yke,"A",{href:!0});var _1t=s(hX);_Qo=r(_1t,"FNetForQuestionAnswering"),_1t.forEach(t),uQo=r(yke," (FNet model)"),yke.forEach(t),bQo=i(X),Nv=n(X,"LI",{});var xke=s(Nv);Dpe=n(xke,"STRONG",{});var u1t=s(Dpe);vQo=r(u1t,"funnel"),u1t.forEach(t),FQo=r(xke," \u2014 "),pX=n(xke,"A",{href:!0});var b1t=s(pX);TQo=r(b1t,"FunnelForQuestionAnswering"),b1t.forEach(t),MQo=r(xke," (Funnel Transformer model)"),xke.forEach(t),EQo=i(X),qv=n(X,"LI",{});var $ke=s(qv);Gpe=n($ke,"STRONG",{});var v1t=s(Gpe);CQo=r(v1t,"gptj"),v1t.forEach(t),wQo=r($ke," \u2014 "),_X=n($ke,"A",{href:!0});var F1t=s(_X);AQo=r(F1t,"GPTJForQuestionAnswering"),F1t.forEach(t),LQo=r($ke," (GPT-J model)"),$ke.forEach(t),yQo=i(X),jv=n(X,"LI",{});var kke=s(jv);Ope=n(kke,"STRONG",{});var T1t=s(Ope);xQo=r(T1t,"ibert"),T1t.forEach(t),$Qo=r(kke," \u2014 "),uX=n(kke,"A",{href:!0});var M1t=s(uX);kQo=r(M1t,"IBertForQuestionAnswering"),M1t.forEach(t),SQo=r(kke," (I-BERT model)"),kke.forEach(t),RQo=i(X),Dv=n(X,"LI",{});var Ske=s(Dv);Vpe=n(Ske,"STRONG",{});var E1t=s(Vpe);PQo=r(E1t,"layoutlmv2"),E1t.forEach(t),BQo=r(Ske," \u2014 "),bX=n(Ske,"A",{href:!0});var C1t=s(bX);IQo=r(C1t,"LayoutLMv2ForQuestionAnswering"),C1t.forEach(t),NQo=r(Ske," (LayoutLMv2 model)"),Ske.forEach(t),qQo=i(X),Gv=n(X,"LI",{});var Rke=s(Gv);Xpe=n(Rke,"STRONG",{});var w1t=s(Xpe);jQo=r(w1t,"layoutlmv3"),w1t.forEach(t),DQo=r(Rke," \u2014 "),vX=n(Rke,"A",{href:!0});var A1t=s(vX);GQo=r(A1t,"LayoutLMv3ForQuestionAnswering"),A1t.forEach(t),OQo=r(Rke," (LayoutLMv3 model)"),Rke.forEach(t),VQo=i(X),Ov=n(X,"LI",{});var Pke=s(Ov);zpe=n(Pke,"STRONG",{});var L1t=s(zpe);XQo=r(L1t,"led"),L1t.forEach(t),zQo=r(Pke," \u2014 "),FX=n(Pke,"A",{href:!0});var y1t=s(FX);WQo=r(y1t,"LEDForQuestionAnswering"),y1t.forEach(t),QQo=r(Pke," (LED model)"),Pke.forEach(t),HQo=i(X),Vv=n(X,"LI",{});var Bke=s(Vv);Wpe=n(Bke,"STRONG",{});var x1t=s(Wpe);UQo=r(x1t,"longformer"),x1t.forEach(t),JQo=r(Bke," \u2014 "),TX=n(Bke,"A",{href:!0});var $1t=s(TX);YQo=r($1t,"LongformerForQuestionAnswering"),$1t.forEach(t),KQo=r(Bke," (Longformer model)"),Bke.forEach(t),ZQo=i(X),Xv=n(X,"LI",{});var Ike=s(Xv);Qpe=n(Ike,"STRONG",{});var k1t=s(Qpe);eHo=r(k1t,"lxmert"),k1t.forEach(t),oHo=r(Ike," \u2014 "),MX=n(Ike,"A",{href:!0});var S1t=s(MX);rHo=r(S1t,"LxmertForQuestionAnswering"),S1t.forEach(t),tHo=r(Ike," (LXMERT model)"),Ike.forEach(t),aHo=i(X),zv=n(X,"LI",{});var Nke=s(zv);Hpe=n(Nke,"STRONG",{});var R1t=s(Hpe);nHo=r(R1t,"mbart"),R1t.forEach(t),sHo=r(Nke," \u2014 "),EX=n(Nke,"A",{href:!0});var P1t=s(EX);lHo=r(P1t,"MBartForQuestionAnswering"),P1t.forEach(t),iHo=r(Nke," (mBART model)"),Nke.forEach(t),dHo=i(X),Wv=n(X,"LI",{});var qke=s(Wv);Upe=n(qke,"STRONG",{});var B1t=s(Upe);cHo=r(B1t,"megatron-bert"),B1t.forEach(t),fHo=r(qke," \u2014 "),CX=n(qke,"A",{href:!0});var I1t=s(CX);mHo=r(I1t,"MegatronBertForQuestionAnswering"),I1t.forEach(t),gHo=r(qke," (Megatron-BERT model)"),qke.forEach(t),hHo=i(X),Qv=n(X,"LI",{});var jke=s(Qv);Jpe=n(jke,"STRONG",{});var N1t=s(Jpe);pHo=r(N1t,"mobilebert"),N1t.forEach(t),_Ho=r(jke," \u2014 "),wX=n(jke,"A",{href:!0});var q1t=s(wX);uHo=r(q1t,"MobileBertForQuestionAnswering"),q1t.forEach(t),bHo=r(jke," (MobileBERT model)"),jke.forEach(t),vHo=i(X),Hv=n(X,"LI",{});var Dke=s(Hv);Ype=n(Dke,"STRONG",{});var j1t=s(Ype);FHo=r(j1t,"mpnet"),j1t.forEach(t),THo=r(Dke," \u2014 "),AX=n(Dke,"A",{href:!0});var D1t=s(AX);MHo=r(D1t,"MPNetForQuestionAnswering"),D1t.forEach(t),EHo=r(Dke," (MPNet model)"),Dke.forEach(t),CHo=i(X),Uv=n(X,"LI",{});var Gke=s(Uv);Kpe=n(Gke,"STRONG",{});var G1t=s(Kpe);wHo=r(G1t,"nystromformer"),G1t.forEach(t),AHo=r(Gke," \u2014 "),LX=n(Gke,"A",{href:!0});var O1t=s(LX);LHo=r(O1t,"NystromformerForQuestionAnswering"),O1t.forEach(t),yHo=r(Gke," (Nystr\xF6mformer model)"),Gke.forEach(t),xHo=i(X),Jv=n(X,"LI",{});var Oke=s(Jv);Zpe=n(Oke,"STRONG",{});var V1t=s(Zpe);$Ho=r(V1t,"qdqbert"),V1t.forEach(t),kHo=r(Oke," \u2014 "),yX=n(Oke,"A",{href:!0});var X1t=s(yX);SHo=r(X1t,"QDQBertForQuestionAnswering"),X1t.forEach(t),RHo=r(Oke," (QDQBert model)"),Oke.forEach(t),PHo=i(X),Yv=n(X,"LI",{});var Vke=s(Yv);e_e=n(Vke,"STRONG",{});var z1t=s(e_e);BHo=r(z1t,"reformer"),z1t.forEach(t),IHo=r(Vke," \u2014 "),xX=n(Vke,"A",{href:!0});var W1t=s(xX);NHo=r(W1t,"ReformerForQuestionAnswering"),W1t.forEach(t),qHo=r(Vke," (Reformer model)"),Vke.forEach(t),jHo=i(X),Kv=n(X,"LI",{});var Xke=s(Kv);o_e=n(Xke,"STRONG",{});var Q1t=s(o_e);DHo=r(Q1t,"rembert"),Q1t.forEach(t),GHo=r(Xke," \u2014 "),$X=n(Xke,"A",{href:!0});var H1t=s($X);OHo=r(H1t,"RemBertForQuestionAnswering"),H1t.forEach(t),VHo=r(Xke," (RemBERT model)"),Xke.forEach(t),XHo=i(X),Zv=n(X,"LI",{});var zke=s(Zv);r_e=n(zke,"STRONG",{});var U1t=s(r_e);zHo=r(U1t,"roberta"),U1t.forEach(t),WHo=r(zke," \u2014 "),kX=n(zke,"A",{href:!0});var J1t=s(kX);QHo=r(J1t,"RobertaForQuestionAnswering"),J1t.forEach(t),HHo=r(zke," (RoBERTa model)"),zke.forEach(t),UHo=i(X),eF=n(X,"LI",{});var Wke=s(eF);t_e=n(Wke,"STRONG",{});var Y1t=s(t_e);JHo=r(Y1t,"roformer"),Y1t.forEach(t),YHo=r(Wke," \u2014 "),SX=n(Wke,"A",{href:!0});var K1t=s(SX);KHo=r(K1t,"RoFormerForQuestionAnswering"),K1t.forEach(t),ZHo=r(Wke," (RoFormer model)"),Wke.forEach(t),eUo=i(X),oF=n(X,"LI",{});var Qke=s(oF);a_e=n(Qke,"STRONG",{});var Z1t=s(a_e);oUo=r(Z1t,"splinter"),Z1t.forEach(t),rUo=r(Qke," \u2014 "),RX=n(Qke,"A",{href:!0});var e3t=s(RX);tUo=r(e3t,"SplinterForQuestionAnswering"),e3t.forEach(t),aUo=r(Qke," (Splinter model)"),Qke.forEach(t),nUo=i(X),rF=n(X,"LI",{});var Hke=s(rF);n_e=n(Hke,"STRONG",{});var o3t=s(n_e);sUo=r(o3t,"squeezebert"),o3t.forEach(t),lUo=r(Hke," \u2014 "),PX=n(Hke,"A",{href:!0});var r3t=s(PX);iUo=r(r3t,"SqueezeBertForQuestionAnswering"),r3t.forEach(t),dUo=r(Hke," (SqueezeBERT model)"),Hke.forEach(t),cUo=i(X),tF=n(X,"LI",{});var Uke=s(tF);s_e=n(Uke,"STRONG",{});var t3t=s(s_e);fUo=r(t3t,"xlm"),t3t.forEach(t),mUo=r(Uke," \u2014 "),BX=n(Uke,"A",{href:!0});var a3t=s(BX);gUo=r(a3t,"XLMForQuestionAnsweringSimple"),a3t.forEach(t),hUo=r(Uke," (XLM model)"),Uke.forEach(t),pUo=i(X),aF=n(X,"LI",{});var Jke=s(aF);l_e=n(Jke,"STRONG",{});var n3t=s(l_e);_Uo=r(n3t,"xlm-roberta"),n3t.forEach(t),uUo=r(Jke," \u2014 "),IX=n(Jke,"A",{href:!0});var s3t=s(IX);bUo=r(s3t,"XLMRobertaForQuestionAnswering"),s3t.forEach(t),vUo=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),FUo=i(X),nF=n(X,"LI",{});var Yke=s(nF);i_e=n(Yke,"STRONG",{});var l3t=s(i_e);TUo=r(l3t,"xlm-roberta-xl"),l3t.forEach(t),MUo=r(Yke," \u2014 "),NX=n(Yke,"A",{href:!0});var i3t=s(NX);EUo=r(i3t,"XLMRobertaXLForQuestionAnswering"),i3t.forEach(t),CUo=r(Yke," (XLM-RoBERTa-XL model)"),Yke.forEach(t),wUo=i(X),sF=n(X,"LI",{});var Kke=s(sF);d_e=n(Kke,"STRONG",{});var d3t=s(d_e);AUo=r(d3t,"xlnet"),d3t.forEach(t),LUo=r(Kke," \u2014 "),qX=n(Kke,"A",{href:!0});var c3t=s(qX);yUo=r(c3t,"XLNetForQuestionAnsweringSimple"),c3t.forEach(t),xUo=r(Kke," (XLNet model)"),Kke.forEach(t),$Uo=i(X),lF=n(X,"LI",{});var Zke=s(lF);c_e=n(Zke,"STRONG",{});var f3t=s(c_e);kUo=r(f3t,"yoso"),f3t.forEach(t),SUo=r(Zke," \u2014 "),jX=n(Zke,"A",{href:!0});var m3t=s(jX);RUo=r(m3t,"YosoForQuestionAnswering"),m3t.forEach(t),PUo=r(Zke," (YOSO model)"),Zke.forEach(t),X.forEach(t),BUo=i(ca),iF=n(ca,"P",{});var eSe=s(iF);IUo=r(eSe,"The model is set in evaluation mode by default using "),f_e=n(eSe,"CODE",{});var g3t=s(f_e);NUo=r(g3t,"model.eval()"),g3t.forEach(t),qUo=r(eSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n(eSe,"CODE",{});var h3t=s(m_e);jUo=r(h3t,"model.train()"),h3t.forEach(t),eSe.forEach(t),DUo=i(ca),T(dF.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),Bje=i(f),td=n(f,"H2",{class:!0});var jGe=s(td);cF=n(jGe,"A",{id:!0,class:!0,href:!0});var p3t=s(cF);g_e=n(p3t,"SPAN",{});var _3t=s(g_e);T(dy.$$.fragment,_3t),_3t.forEach(t),p3t.forEach(t),GUo=i(jGe),h_e=n(jGe,"SPAN",{});var u3t=s(h_e);OUo=r(u3t,"AutoModelForTableQuestionAnswering"),u3t.forEach(t),jGe.forEach(t),Ije=i(f),qo=n(f,"DIV",{class:!0});var el=s(qo);T(cy.$$.fragment,el),VUo=i(el),ad=n(el,"P",{});var gee=s(ad);XUo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DX=n(gee,"A",{href:!0});var b3t=s(DX);zUo=r(b3t,"from_pretrained()"),b3t.forEach(t),WUo=r(gee," class method or the "),GX=n(gee,"A",{href:!0});var v3t=s(GX);QUo=r(v3t,"from_config()"),v3t.forEach(t),HUo=r(gee,` class
method.`),gee.forEach(t),UUo=i(el),fy=n(el,"P",{});var DGe=s(fy);JUo=r(DGe,"This class cannot be instantiated directly using "),p_e=n(DGe,"CODE",{});var F3t=s(p_e);YUo=r(F3t,"__init__()"),F3t.forEach(t),KUo=r(DGe," (throws an error)."),DGe.forEach(t),ZUo=i(el),gt=n(el,"DIV",{class:!0});var fA=s(gt);T(my.$$.fragment,fA),eJo=i(fA),__e=n(fA,"P",{});var T3t=s(__e);oJo=r(T3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),T3t.forEach(t),rJo=i(fA),nd=n(fA,"P",{});var hee=s(nd);tJo=r(hee,`Note:
Loading a model from its configuration file does `),u_e=n(hee,"STRONG",{});var M3t=s(u_e);aJo=r(M3t,"not"),M3t.forEach(t),nJo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(hee,"A",{href:!0});var E3t=s(OX);sJo=r(E3t,"from_pretrained()"),E3t.forEach(t),lJo=r(hee," to load the model weights."),hee.forEach(t),iJo=i(fA),T(fF.$$.fragment,fA),fA.forEach(t),dJo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(gy.$$.fragment,fa),cJo=i(fa),b_e=n(fa,"P",{});var C3t=s(b_e);fJo=r(C3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),C3t.forEach(t),mJo=i(fa),qa=n(fa,"P",{});var mA=s(qa);gJo=r(mA,"The model class to instantiate is selected based on the "),v_e=n(mA,"CODE",{});var w3t=s(v_e);hJo=r(w3t,"model_type"),w3t.forEach(t),pJo=r(mA,` property of the config object (either
passed as an argument or loaded from `),F_e=n(mA,"CODE",{});var A3t=s(F_e);_Jo=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),uJo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(mA,"CODE",{});var L3t=s(T_e);bJo=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),vJo=r(mA,":"),mA.forEach(t),FJo=i(fa),M_e=n(fa,"UL",{});var y3t=s(M_e);mF=n(y3t,"LI",{});var oSe=s(mF);E_e=n(oSe,"STRONG",{});var x3t=s(E_e);TJo=r(x3t,"tapas"),x3t.forEach(t),MJo=r(oSe," \u2014 "),VX=n(oSe,"A",{href:!0});var $3t=s(VX);EJo=r($3t,"TapasForQuestionAnswering"),$3t.forEach(t),CJo=r(oSe," (TAPAS model)"),oSe.forEach(t),y3t.forEach(t),wJo=i(fa),gF=n(fa,"P",{});var rSe=s(gF);AJo=r(rSe,"The model is set in evaluation mode by default using "),C_e=n(rSe,"CODE",{});var k3t=s(C_e);LJo=r(k3t,"model.eval()"),k3t.forEach(t),yJo=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(rSe,"CODE",{});var S3t=s(w_e);xJo=r(S3t,"model.train()"),S3t.forEach(t),rSe.forEach(t),$Jo=i(fa),T(hF.$$.fragment,fa),fa.forEach(t),el.forEach(t),Nje=i(f),sd=n(f,"H2",{class:!0});var GGe=s(sd);pF=n(GGe,"A",{id:!0,class:!0,href:!0});var R3t=s(pF);A_e=n(R3t,"SPAN",{});var P3t=s(A_e);T(hy.$$.fragment,P3t),P3t.forEach(t),R3t.forEach(t),kJo=i(GGe),L_e=n(GGe,"SPAN",{});var B3t=s(L_e);SJo=r(B3t,"AutoModelForImageClassification"),B3t.forEach(t),GGe.forEach(t),qje=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(py.$$.fragment,ol),RJo=i(ol),ld=n(ol,"P",{});var pee=s(ld);PJo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XX=n(pee,"A",{href:!0});var I3t=s(XX);BJo=r(I3t,"from_pretrained()"),I3t.forEach(t),IJo=r(pee," class method or the "),zX=n(pee,"A",{href:!0});var N3t=s(zX);NJo=r(N3t,"from_config()"),N3t.forEach(t),qJo=r(pee,` class
method.`),pee.forEach(t),jJo=i(ol),_y=n(ol,"P",{});var OGe=s(_y);DJo=r(OGe,"This class cannot be instantiated directly using "),y_e=n(OGe,"CODE",{});var q3t=s(y_e);GJo=r(q3t,"__init__()"),q3t.forEach(t),OJo=r(OGe," (throws an error)."),OGe.forEach(t),VJo=i(ol),ht=n(ol,"DIV",{class:!0});var gA=s(ht);T(uy.$$.fragment,gA),XJo=i(gA),x_e=n(gA,"P",{});var j3t=s(x_e);zJo=r(j3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),j3t.forEach(t),WJo=i(gA),id=n(gA,"P",{});var _ee=s(id);QJo=r(_ee,`Note:
Loading a model from its configuration file does `),$_e=n(_ee,"STRONG",{});var D3t=s($_e);HJo=r(D3t,"not"),D3t.forEach(t),UJo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(_ee,"A",{href:!0});var G3t=s(WX);JJo=r(G3t,"from_pretrained()"),G3t.forEach(t),YJo=r(_ee," to load the model weights."),_ee.forEach(t),KJo=i(gA),T(_F.$$.fragment,gA),gA.forEach(t),ZJo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(by.$$.fragment,ma),eYo=i(ma),k_e=n(ma,"P",{});var O3t=s(k_e);oYo=r(O3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),O3t.forEach(t),rYo=i(ma),ja=n(ma,"P",{});var hA=s(ja);tYo=r(hA,"The model class to instantiate is selected based on the "),S_e=n(hA,"CODE",{});var V3t=s(S_e);aYo=r(V3t,"model_type"),V3t.forEach(t),nYo=r(hA,` property of the config object (either
passed as an argument or loaded from `),R_e=n(hA,"CODE",{});var X3t=s(R_e);sYo=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),lYo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(hA,"CODE",{});var z3t=s(P_e);iYo=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),dYo=r(hA,":"),hA.forEach(t),cYo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);uF=n(Te,"LI",{});var tSe=s(uF);B_e=n(tSe,"STRONG",{});var W3t=s(B_e);fYo=r(W3t,"beit"),W3t.forEach(t),mYo=r(tSe," \u2014 "),QX=n(tSe,"A",{href:!0});var Q3t=s(QX);gYo=r(Q3t,"BeitForImageClassification"),Q3t.forEach(t),hYo=r(tSe," (BEiT model)"),tSe.forEach(t),pYo=i(Te),bF=n(Te,"LI",{});var aSe=s(bF);I_e=n(aSe,"STRONG",{});var H3t=s(I_e);_Yo=r(H3t,"convnext"),H3t.forEach(t),uYo=r(aSe," \u2014 "),HX=n(aSe,"A",{href:!0});var U3t=s(HX);bYo=r(U3t,"ConvNextForImageClassification"),U3t.forEach(t),vYo=r(aSe," (ConvNeXT model)"),aSe.forEach(t),FYo=i(Te),vF=n(Te,"LI",{});var nSe=s(vF);N_e=n(nSe,"STRONG",{});var J3t=s(N_e);TYo=r(J3t,"cvt"),J3t.forEach(t),MYo=r(nSe," \u2014 "),UX=n(nSe,"A",{href:!0});var Y3t=s(UX);EYo=r(Y3t,"CvtForImageClassification"),Y3t.forEach(t),CYo=r(nSe," (CvT model)"),nSe.forEach(t),wYo=i(Te),FF=n(Te,"LI",{});var sSe=s(FF);q_e=n(sSe,"STRONG",{});var K3t=s(q_e);AYo=r(K3t,"data2vec-vision"),K3t.forEach(t),LYo=r(sSe," \u2014 "),JX=n(sSe,"A",{href:!0});var Z3t=s(JX);yYo=r(Z3t,"Data2VecVisionForImageClassification"),Z3t.forEach(t),xYo=r(sSe," (Data2VecVision model)"),sSe.forEach(t),$Yo=i(Te),Is=n(Te,"LI",{});var ak=s(Is);j_e=n(ak,"STRONG",{});var ebt=s(j_e);kYo=r(ebt,"deit"),ebt.forEach(t),SYo=r(ak," \u2014 "),YX=n(ak,"A",{href:!0});var obt=s(YX);RYo=r(obt,"DeiTForImageClassification"),obt.forEach(t),PYo=r(ak," or "),KX=n(ak,"A",{href:!0});var rbt=s(KX);BYo=r(rbt,"DeiTForImageClassificationWithTeacher"),rbt.forEach(t),IYo=r(ak," (DeiT model)"),ak.forEach(t),NYo=i(Te),TF=n(Te,"LI",{});var lSe=s(TF);D_e=n(lSe,"STRONG",{});var tbt=s(D_e);qYo=r(tbt,"imagegpt"),tbt.forEach(t),jYo=r(lSe," \u2014 "),ZX=n(lSe,"A",{href:!0});var abt=s(ZX);DYo=r(abt,"ImageGPTForImageClassification"),abt.forEach(t),GYo=r(lSe," (ImageGPT model)"),lSe.forEach(t),OYo=i(Te),Ns=n(Te,"LI",{});var nk=s(Ns);G_e=n(nk,"STRONG",{});var nbt=s(G_e);VYo=r(nbt,"levit"),nbt.forEach(t),XYo=r(nk," \u2014 "),ez=n(nk,"A",{href:!0});var sbt=s(ez);zYo=r(sbt,"LevitForImageClassification"),sbt.forEach(t),WYo=r(nk," or "),oz=n(nk,"A",{href:!0});var lbt=s(oz);QYo=r(lbt,"LevitForImageClassificationWithTeacher"),lbt.forEach(t),HYo=r(nk," (LeViT model)"),nk.forEach(t),UYo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);O_e=n(_f,"STRONG",{});var ibt=s(O_e);JYo=r(ibt,"perceiver"),ibt.forEach(t),YYo=r(_f," \u2014 "),rz=n(_f,"A",{href:!0});var dbt=s(rz);KYo=r(dbt,"PerceiverForImageClassificationLearned"),dbt.forEach(t),ZYo=r(_f," or "),tz=n(_f,"A",{href:!0});var cbt=s(tz);eKo=r(cbt,"PerceiverForImageClassificationFourier"),cbt.forEach(t),oKo=r(_f," or "),az=n(_f,"A",{href:!0});var fbt=s(az);rKo=r(fbt,"PerceiverForImageClassificationConvProcessing"),fbt.forEach(t),tKo=r(_f," (Perceiver model)"),_f.forEach(t),aKo=i(Te),MF=n(Te,"LI",{});var iSe=s(MF);V_e=n(iSe,"STRONG",{});var mbt=s(V_e);nKo=r(mbt,"poolformer"),mbt.forEach(t),sKo=r(iSe," \u2014 "),nz=n(iSe,"A",{href:!0});var gbt=s(nz);lKo=r(gbt,"PoolFormerForImageClassification"),gbt.forEach(t),iKo=r(iSe," (PoolFormer model)"),iSe.forEach(t),dKo=i(Te),EF=n(Te,"LI",{});var dSe=s(EF);X_e=n(dSe,"STRONG",{});var hbt=s(X_e);cKo=r(hbt,"regnet"),hbt.forEach(t),fKo=r(dSe," \u2014 "),sz=n(dSe,"A",{href:!0});var pbt=s(sz);mKo=r(pbt,"RegNetForImageClassification"),pbt.forEach(t),gKo=r(dSe," (RegNet model)"),dSe.forEach(t),hKo=i(Te),CF=n(Te,"LI",{});var cSe=s(CF);z_e=n(cSe,"STRONG",{});var _bt=s(z_e);pKo=r(_bt,"resnet"),_bt.forEach(t),_Ko=r(cSe," \u2014 "),lz=n(cSe,"A",{href:!0});var ubt=s(lz);uKo=r(ubt,"ResNetForImageClassification"),ubt.forEach(t),bKo=r(cSe," (ResNet model)"),cSe.forEach(t),vKo=i(Te),wF=n(Te,"LI",{});var fSe=s(wF);W_e=n(fSe,"STRONG",{});var bbt=s(W_e);FKo=r(bbt,"segformer"),bbt.forEach(t),TKo=r(fSe," \u2014 "),iz=n(fSe,"A",{href:!0});var vbt=s(iz);MKo=r(vbt,"SegformerForImageClassification"),vbt.forEach(t),EKo=r(fSe," (SegFormer model)"),fSe.forEach(t),CKo=i(Te),AF=n(Te,"LI",{});var mSe=s(AF);Q_e=n(mSe,"STRONG",{});var Fbt=s(Q_e);wKo=r(Fbt,"swin"),Fbt.forEach(t),AKo=r(mSe," \u2014 "),dz=n(mSe,"A",{href:!0});var Tbt=s(dz);LKo=r(Tbt,"SwinForImageClassification"),Tbt.forEach(t),yKo=r(mSe," (Swin Transformer model)"),mSe.forEach(t),xKo=i(Te),LF=n(Te,"LI",{});var gSe=s(LF);H_e=n(gSe,"STRONG",{});var Mbt=s(H_e);$Ko=r(Mbt,"van"),Mbt.forEach(t),kKo=r(gSe," \u2014 "),cz=n(gSe,"A",{href:!0});var Ebt=s(cz);SKo=r(Ebt,"VanForImageClassification"),Ebt.forEach(t),RKo=r(gSe," (VAN model)"),gSe.forEach(t),PKo=i(Te),yF=n(Te,"LI",{});var hSe=s(yF);U_e=n(hSe,"STRONG",{});var Cbt=s(U_e);BKo=r(Cbt,"vit"),Cbt.forEach(t),IKo=r(hSe," \u2014 "),fz=n(hSe,"A",{href:!0});var wbt=s(fz);NKo=r(wbt,"ViTForImageClassification"),wbt.forEach(t),qKo=r(hSe," (ViT model)"),hSe.forEach(t),Te.forEach(t),jKo=i(ma),xF=n(ma,"P",{});var pSe=s(xF);DKo=r(pSe,"The model is set in evaluation mode by default using "),J_e=n(pSe,"CODE",{});var Abt=s(J_e);GKo=r(Abt,"model.eval()"),Abt.forEach(t),OKo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(pSe,"CODE",{});var Lbt=s(Y_e);VKo=r(Lbt,"model.train()"),Lbt.forEach(t),pSe.forEach(t),XKo=i(ma),T($F.$$.fragment,ma),ma.forEach(t),ol.forEach(t),jje=i(f),dd=n(f,"H2",{class:!0});var VGe=s(dd);kF=n(VGe,"A",{id:!0,class:!0,href:!0});var ybt=s(kF);K_e=n(ybt,"SPAN",{});var xbt=s(K_e);T(vy.$$.fragment,xbt),xbt.forEach(t),ybt.forEach(t),zKo=i(VGe),Z_e=n(VGe,"SPAN",{});var $bt=s(Z_e);WKo=r($bt,"AutoModelForVision2Seq"),$bt.forEach(t),VGe.forEach(t),Dje=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T(Fy.$$.fragment,rl),QKo=i(rl),cd=n(rl,"P",{});var uee=s(cd);HKo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mz=n(uee,"A",{href:!0});var kbt=s(mz);UKo=r(kbt,"from_pretrained()"),kbt.forEach(t),JKo=r(uee," class method or the "),gz=n(uee,"A",{href:!0});var Sbt=s(gz);YKo=r(Sbt,"from_config()"),Sbt.forEach(t),KKo=r(uee,` class
method.`),uee.forEach(t),ZKo=i(rl),Ty=n(rl,"P",{});var XGe=s(Ty);eZo=r(XGe,"This class cannot be instantiated directly using "),eue=n(XGe,"CODE",{});var Rbt=s(eue);oZo=r(Rbt,"__init__()"),Rbt.forEach(t),rZo=r(XGe," (throws an error)."),XGe.forEach(t),tZo=i(rl),_t=n(rl,"DIV",{class:!0});var pA=s(_t);T(My.$$.fragment,pA),aZo=i(pA),oue=n(pA,"P",{});var Pbt=s(oue);nZo=r(Pbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pbt.forEach(t),sZo=i(pA),fd=n(pA,"P",{});var bee=s(fd);lZo=r(bee,`Note:
Loading a model from its configuration file does `),rue=n(bee,"STRONG",{});var Bbt=s(rue);iZo=r(Bbt,"not"),Bbt.forEach(t),dZo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(bee,"A",{href:!0});var Ibt=s(hz);cZo=r(Ibt,"from_pretrained()"),Ibt.forEach(t),fZo=r(bee," to load the model weights."),bee.forEach(t),mZo=i(pA),T(SF.$$.fragment,pA),pA.forEach(t),gZo=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(Ey.$$.fragment,ga),hZo=i(ga),tue=n(ga,"P",{});var Nbt=s(tue);pZo=r(Nbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nbt.forEach(t),_Zo=i(ga),Da=n(ga,"P",{});var _A=s(Da);uZo=r(_A,"The model class to instantiate is selected based on the "),aue=n(_A,"CODE",{});var qbt=s(aue);bZo=r(qbt,"model_type"),qbt.forEach(t),vZo=r(_A,` property of the config object (either
passed as an argument or loaded from `),nue=n(_A,"CODE",{});var jbt=s(nue);FZo=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),TZo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(_A,"CODE",{});var Dbt=s(sue);MZo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),EZo=r(_A,":"),_A.forEach(t),CZo=i(ga),lue=n(ga,"UL",{});var Gbt=s(lue);RF=n(Gbt,"LI",{});var _Se=s(RF);iue=n(_Se,"STRONG",{});var Obt=s(iue);wZo=r(Obt,"vision-encoder-decoder"),Obt.forEach(t),AZo=r(_Se," \u2014 "),pz=n(_Se,"A",{href:!0});var Vbt=s(pz);LZo=r(Vbt,"VisionEncoderDecoderModel"),Vbt.forEach(t),yZo=r(_Se," (Vision Encoder decoder model)"),_Se.forEach(t),Gbt.forEach(t),xZo=i(ga),PF=n(ga,"P",{});var uSe=s(PF);$Zo=r(uSe,"The model is set in evaluation mode by default using "),due=n(uSe,"CODE",{});var Xbt=s(due);kZo=r(Xbt,"model.eval()"),Xbt.forEach(t),SZo=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(uSe,"CODE",{});var zbt=s(cue);RZo=r(zbt,"model.train()"),zbt.forEach(t),uSe.forEach(t),PZo=i(ga),T(BF.$$.fragment,ga),ga.forEach(t),rl.forEach(t),Gje=i(f),md=n(f,"H2",{class:!0});var zGe=s(md);IF=n(zGe,"A",{id:!0,class:!0,href:!0});var Wbt=s(IF);fue=n(Wbt,"SPAN",{});var Qbt=s(fue);T(Cy.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),BZo=i(zGe),mue=n(zGe,"SPAN",{});var Hbt=s(mue);IZo=r(Hbt,"AutoModelForAudioClassification"),Hbt.forEach(t),zGe.forEach(t),Oje=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(wy.$$.fragment,tl),NZo=i(tl),gd=n(tl,"P",{});var vee=s(gd);qZo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_z=n(vee,"A",{href:!0});var Ubt=s(_z);jZo=r(Ubt,"from_pretrained()"),Ubt.forEach(t),DZo=r(vee," class method or the "),uz=n(vee,"A",{href:!0});var Jbt=s(uz);GZo=r(Jbt,"from_config()"),Jbt.forEach(t),OZo=r(vee,` class
method.`),vee.forEach(t),VZo=i(tl),Ay=n(tl,"P",{});var WGe=s(Ay);XZo=r(WGe,"This class cannot be instantiated directly using "),gue=n(WGe,"CODE",{});var Ybt=s(gue);zZo=r(Ybt,"__init__()"),Ybt.forEach(t),WZo=r(WGe," (throws an error)."),WGe.forEach(t),QZo=i(tl),ut=n(tl,"DIV",{class:!0});var uA=s(ut);T(Ly.$$.fragment,uA),HZo=i(uA),hue=n(uA,"P",{});var Kbt=s(hue);UZo=r(Kbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kbt.forEach(t),JZo=i(uA),hd=n(uA,"P",{});var Fee=s(hd);YZo=r(Fee,`Note:
Loading a model from its configuration file does `),pue=n(Fee,"STRONG",{});var Zbt=s(pue);KZo=r(Zbt,"not"),Zbt.forEach(t),ZZo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(Fee,"A",{href:!0});var e2t=s(bz);eer=r(e2t,"from_pretrained()"),e2t.forEach(t),oer=r(Fee," to load the model weights."),Fee.forEach(t),rer=i(uA),T(NF.$$.fragment,uA),uA.forEach(t),ter=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(yy.$$.fragment,ha),aer=i(ha),_ue=n(ha,"P",{});var o2t=s(_ue);ner=r(o2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),o2t.forEach(t),ser=i(ha),Ga=n(ha,"P",{});var bA=s(Ga);ler=r(bA,"The model class to instantiate is selected based on the "),uue=n(bA,"CODE",{});var r2t=s(uue);ier=r(r2t,"model_type"),r2t.forEach(t),der=r(bA,` property of the config object (either
passed as an argument or loaded from `),bue=n(bA,"CODE",{});var t2t=s(bue);cer=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),fer=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(bA,"CODE",{});var a2t=s(vue);mer=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),ger=r(bA,":"),bA.forEach(t),her=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);qF=n(Ve,"LI",{});var bSe=s(qF);Fue=n(bSe,"STRONG",{});var n2t=s(Fue);per=r(n2t,"data2vec-audio"),n2t.forEach(t),_er=r(bSe," \u2014 "),vz=n(bSe,"A",{href:!0});var s2t=s(vz);uer=r(s2t,"Data2VecAudioForSequenceClassification"),s2t.forEach(t),ber=r(bSe," (Data2VecAudio model)"),bSe.forEach(t),ver=i(Ve),jF=n(Ve,"LI",{});var vSe=s(jF);Tue=n(vSe,"STRONG",{});var l2t=s(Tue);Fer=r(l2t,"hubert"),l2t.forEach(t),Ter=r(vSe," \u2014 "),Fz=n(vSe,"A",{href:!0});var i2t=s(Fz);Mer=r(i2t,"HubertForSequenceClassification"),i2t.forEach(t),Eer=r(vSe," (Hubert model)"),vSe.forEach(t),Cer=i(Ve),DF=n(Ve,"LI",{});var FSe=s(DF);Mue=n(FSe,"STRONG",{});var d2t=s(Mue);wer=r(d2t,"sew"),d2t.forEach(t),Aer=r(FSe," \u2014 "),Tz=n(FSe,"A",{href:!0});var c2t=s(Tz);Ler=r(c2t,"SEWForSequenceClassification"),c2t.forEach(t),yer=r(FSe," (SEW model)"),FSe.forEach(t),xer=i(Ve),GF=n(Ve,"LI",{});var TSe=s(GF);Eue=n(TSe,"STRONG",{});var f2t=s(Eue);$er=r(f2t,"sew-d"),f2t.forEach(t),ker=r(TSe," \u2014 "),Mz=n(TSe,"A",{href:!0});var m2t=s(Mz);Ser=r(m2t,"SEWDForSequenceClassification"),m2t.forEach(t),Rer=r(TSe," (SEW-D model)"),TSe.forEach(t),Per=i(Ve),OF=n(Ve,"LI",{});var MSe=s(OF);Cue=n(MSe,"STRONG",{});var g2t=s(Cue);Ber=r(g2t,"unispeech"),g2t.forEach(t),Ier=r(MSe," \u2014 "),Ez=n(MSe,"A",{href:!0});var h2t=s(Ez);Ner=r(h2t,"UniSpeechForSequenceClassification"),h2t.forEach(t),qer=r(MSe," (UniSpeech model)"),MSe.forEach(t),jer=i(Ve),VF=n(Ve,"LI",{});var ESe=s(VF);wue=n(ESe,"STRONG",{});var p2t=s(wue);Der=r(p2t,"unispeech-sat"),p2t.forEach(t),Ger=r(ESe," \u2014 "),Cz=n(ESe,"A",{href:!0});var _2t=s(Cz);Oer=r(_2t,"UniSpeechSatForSequenceClassification"),_2t.forEach(t),Ver=r(ESe," (UniSpeechSat model)"),ESe.forEach(t),Xer=i(Ve),XF=n(Ve,"LI",{});var CSe=s(XF);Aue=n(CSe,"STRONG",{});var u2t=s(Aue);zer=r(u2t,"wav2vec2"),u2t.forEach(t),Wer=r(CSe," \u2014 "),wz=n(CSe,"A",{href:!0});var b2t=s(wz);Qer=r(b2t,"Wav2Vec2ForSequenceClassification"),b2t.forEach(t),Her=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),Uer=i(Ve),zF=n(Ve,"LI",{});var wSe=s(zF);Lue=n(wSe,"STRONG",{});var v2t=s(Lue);Jer=r(v2t,"wav2vec2-conformer"),v2t.forEach(t),Yer=r(wSe," \u2014 "),Az=n(wSe,"A",{href:!0});var F2t=s(Az);Ker=r(F2t,"Wav2Vec2ConformerForSequenceClassification"),F2t.forEach(t),Zer=r(wSe," (Wav2Vec2-Conformer model)"),wSe.forEach(t),eor=i(Ve),WF=n(Ve,"LI",{});var ASe=s(WF);yue=n(ASe,"STRONG",{});var T2t=s(yue);oor=r(T2t,"wavlm"),T2t.forEach(t),ror=r(ASe," \u2014 "),Lz=n(ASe,"A",{href:!0});var M2t=s(Lz);tor=r(M2t,"WavLMForSequenceClassification"),M2t.forEach(t),aor=r(ASe," (WavLM model)"),ASe.forEach(t),Ve.forEach(t),nor=i(ha),QF=n(ha,"P",{});var LSe=s(QF);sor=r(LSe,"The model is set in evaluation mode by default using "),xue=n(LSe,"CODE",{});var E2t=s(xue);lor=r(E2t,"model.eval()"),E2t.forEach(t),ior=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(LSe,"CODE",{});var C2t=s($ue);dor=r(C2t,"model.train()"),C2t.forEach(t),LSe.forEach(t),cor=i(ha),T(HF.$$.fragment,ha),ha.forEach(t),tl.forEach(t),Vje=i(f),pd=n(f,"H2",{class:!0});var QGe=s(pd);UF=n(QGe,"A",{id:!0,class:!0,href:!0});var w2t=s(UF);kue=n(w2t,"SPAN",{});var A2t=s(kue);T(xy.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),mor=i(QGe),Sue=n(QGe,"SPAN",{});var L2t=s(Sue);gor=r(L2t,"AutoModelForAudioFrameClassification"),L2t.forEach(t),QGe.forEach(t),Xje=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T($y.$$.fragment,al),hor=i(al),_d=n(al,"P",{});var Tee=s(_d);por=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yz=n(Tee,"A",{href:!0});var y2t=s(yz);_or=r(y2t,"from_pretrained()"),y2t.forEach(t),uor=r(Tee," class method or the "),xz=n(Tee,"A",{href:!0});var x2t=s(xz);bor=r(x2t,"from_config()"),x2t.forEach(t),vor=r(Tee,` class
method.`),Tee.forEach(t),For=i(al),ky=n(al,"P",{});var HGe=s(ky);Tor=r(HGe,"This class cannot be instantiated directly using "),Rue=n(HGe,"CODE",{});var $2t=s(Rue);Mor=r($2t,"__init__()"),$2t.forEach(t),Eor=r(HGe," (throws an error)."),HGe.forEach(t),Cor=i(al),bt=n(al,"DIV",{class:!0});var vA=s(bt);T(Sy.$$.fragment,vA),wor=i(vA),Pue=n(vA,"P",{});var k2t=s(Pue);Aor=r(k2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),k2t.forEach(t),Lor=i(vA),ud=n(vA,"P",{});var Mee=s(ud);yor=r(Mee,`Note:
Loading a model from its configuration file does `),Bue=n(Mee,"STRONG",{});var S2t=s(Bue);xor=r(S2t,"not"),S2t.forEach(t),$or=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(Mee,"A",{href:!0});var R2t=s($z);kor=r(R2t,"from_pretrained()"),R2t.forEach(t),Sor=r(Mee," to load the model weights."),Mee.forEach(t),Ror=i(vA),T(JF.$$.fragment,vA),vA.forEach(t),Por=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(Ry.$$.fragment,pa),Bor=i(pa),Iue=n(pa,"P",{});var P2t=s(Iue);Ior=r(P2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),P2t.forEach(t),Nor=i(pa),Oa=n(pa,"P",{});var FA=s(Oa);qor=r(FA,"The model class to instantiate is selected based on the "),Nue=n(FA,"CODE",{});var B2t=s(Nue);jor=r(B2t,"model_type"),B2t.forEach(t),Dor=r(FA,` property of the config object (either
passed as an argument or loaded from `),que=n(FA,"CODE",{});var I2t=s(que);Gor=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Oor=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(FA,"CODE",{});var N2t=s(jue);Vor=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),Xor=r(FA,":"),FA.forEach(t),zor=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);YF=n(nl,"LI",{});var ySe=s(YF);Due=n(ySe,"STRONG",{});var q2t=s(Due);Wor=r(q2t,"data2vec-audio"),q2t.forEach(t),Qor=r(ySe," \u2014 "),kz=n(ySe,"A",{href:!0});var j2t=s(kz);Hor=r(j2t,"Data2VecAudioForAudioFrameClassification"),j2t.forEach(t),Uor=r(ySe," (Data2VecAudio model)"),ySe.forEach(t),Jor=i(nl),KF=n(nl,"LI",{});var xSe=s(KF);Gue=n(xSe,"STRONG",{});var D2t=s(Gue);Yor=r(D2t,"unispeech-sat"),D2t.forEach(t),Kor=r(xSe," \u2014 "),Sz=n(xSe,"A",{href:!0});var G2t=s(Sz);Zor=r(G2t,"UniSpeechSatForAudioFrameClassification"),G2t.forEach(t),err=r(xSe," (UniSpeechSat model)"),xSe.forEach(t),orr=i(nl),ZF=n(nl,"LI",{});var $Se=s(ZF);Oue=n($Se,"STRONG",{});var O2t=s(Oue);rrr=r(O2t,"wav2vec2"),O2t.forEach(t),trr=r($Se," \u2014 "),Rz=n($Se,"A",{href:!0});var V2t=s(Rz);arr=r(V2t,"Wav2Vec2ForAudioFrameClassification"),V2t.forEach(t),nrr=r($Se," (Wav2Vec2 model)"),$Se.forEach(t),srr=i(nl),eT=n(nl,"LI",{});var kSe=s(eT);Vue=n(kSe,"STRONG",{});var X2t=s(Vue);lrr=r(X2t,"wav2vec2-conformer"),X2t.forEach(t),irr=r(kSe," \u2014 "),Pz=n(kSe,"A",{href:!0});var z2t=s(Pz);drr=r(z2t,"Wav2Vec2ConformerForAudioFrameClassification"),z2t.forEach(t),crr=r(kSe," (Wav2Vec2-Conformer model)"),kSe.forEach(t),frr=i(nl),oT=n(nl,"LI",{});var SSe=s(oT);Xue=n(SSe,"STRONG",{});var W2t=s(Xue);mrr=r(W2t,"wavlm"),W2t.forEach(t),grr=r(SSe," \u2014 "),Bz=n(SSe,"A",{href:!0});var Q2t=s(Bz);hrr=r(Q2t,"WavLMForAudioFrameClassification"),Q2t.forEach(t),prr=r(SSe," (WavLM model)"),SSe.forEach(t),nl.forEach(t),_rr=i(pa),rT=n(pa,"P",{});var RSe=s(rT);urr=r(RSe,"The model is set in evaluation mode by default using "),zue=n(RSe,"CODE",{});var H2t=s(zue);brr=r(H2t,"model.eval()"),H2t.forEach(t),vrr=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(RSe,"CODE",{});var U2t=s(Wue);Frr=r(U2t,"model.train()"),U2t.forEach(t),RSe.forEach(t),Trr=i(pa),T(tT.$$.fragment,pa),pa.forEach(t),al.forEach(t),zje=i(f),bd=n(f,"H2",{class:!0});var UGe=s(bd);aT=n(UGe,"A",{id:!0,class:!0,href:!0});var J2t=s(aT);Que=n(J2t,"SPAN",{});var Y2t=s(Que);T(Py.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),Mrr=i(UGe),Hue=n(UGe,"SPAN",{});var K2t=s(Hue);Err=r(K2t,"AutoModelForCTC"),K2t.forEach(t),UGe.forEach(t),Wje=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(By.$$.fragment,sl),Crr=i(sl),vd=n(sl,"P",{});var Eee=s(vd);wrr=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Iz=n(Eee,"A",{href:!0});var Z2t=s(Iz);Arr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Lrr=r(Eee," class method or the "),Nz=n(Eee,"A",{href:!0});var evt=s(Nz);yrr=r(evt,"from_config()"),evt.forEach(t),xrr=r(Eee,` class
method.`),Eee.forEach(t),$rr=i(sl),Iy=n(sl,"P",{});var JGe=s(Iy);krr=r(JGe,"This class cannot be instantiated directly using "),Uue=n(JGe,"CODE",{});var ovt=s(Uue);Srr=r(ovt,"__init__()"),ovt.forEach(t),Rrr=r(JGe," (throws an error)."),JGe.forEach(t),Prr=i(sl),vt=n(sl,"DIV",{class:!0});var TA=s(vt);T(Ny.$$.fragment,TA),Brr=i(TA),Jue=n(TA,"P",{});var rvt=s(Jue);Irr=r(rvt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rvt.forEach(t),Nrr=i(TA),Fd=n(TA,"P",{});var Cee=s(Fd);qrr=r(Cee,`Note:
Loading a model from its configuration file does `),Yue=n(Cee,"STRONG",{});var tvt=s(Yue);jrr=r(tvt,"not"),tvt.forEach(t),Drr=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(Cee,"A",{href:!0});var avt=s(qz);Grr=r(avt,"from_pretrained()"),avt.forEach(t),Orr=r(Cee," to load the model weights."),Cee.forEach(t),Vrr=i(TA),T(nT.$$.fragment,TA),TA.forEach(t),Xrr=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(qy.$$.fragment,_a),zrr=i(_a),Kue=n(_a,"P",{});var nvt=s(Kue);Wrr=r(nvt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),nvt.forEach(t),Qrr=i(_a),Va=n(_a,"P",{});var MA=s(Va);Hrr=r(MA,"The model class to instantiate is selected based on the "),Zue=n(MA,"CODE",{});var svt=s(Zue);Urr=r(svt,"model_type"),svt.forEach(t),Jrr=r(MA,` property of the config object (either
passed as an argument or loaded from `),e1e=n(MA,"CODE",{});var lvt=s(e1e);Yrr=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),Krr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(MA,"CODE",{});var ivt=s(o1e);Zrr=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),etr=r(MA,":"),MA.forEach(t),otr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);sT=n(Xe,"LI",{});var PSe=s(sT);r1e=n(PSe,"STRONG",{});var dvt=s(r1e);rtr=r(dvt,"data2vec-audio"),dvt.forEach(t),ttr=r(PSe," \u2014 "),jz=n(PSe,"A",{href:!0});var cvt=s(jz);atr=r(cvt,"Data2VecAudioForCTC"),cvt.forEach(t),ntr=r(PSe," (Data2VecAudio model)"),PSe.forEach(t),str=i(Xe),lT=n(Xe,"LI",{});var BSe=s(lT);t1e=n(BSe,"STRONG",{});var fvt=s(t1e);ltr=r(fvt,"hubert"),fvt.forEach(t),itr=r(BSe," \u2014 "),Dz=n(BSe,"A",{href:!0});var mvt=s(Dz);dtr=r(mvt,"HubertForCTC"),mvt.forEach(t),ctr=r(BSe," (Hubert model)"),BSe.forEach(t),ftr=i(Xe),iT=n(Xe,"LI",{});var ISe=s(iT);a1e=n(ISe,"STRONG",{});var gvt=s(a1e);mtr=r(gvt,"sew"),gvt.forEach(t),gtr=r(ISe," \u2014 "),Gz=n(ISe,"A",{href:!0});var hvt=s(Gz);htr=r(hvt,"SEWForCTC"),hvt.forEach(t),ptr=r(ISe," (SEW model)"),ISe.forEach(t),_tr=i(Xe),dT=n(Xe,"LI",{});var NSe=s(dT);n1e=n(NSe,"STRONG",{});var pvt=s(n1e);utr=r(pvt,"sew-d"),pvt.forEach(t),btr=r(NSe," \u2014 "),Oz=n(NSe,"A",{href:!0});var _vt=s(Oz);vtr=r(_vt,"SEWDForCTC"),_vt.forEach(t),Ftr=r(NSe," (SEW-D model)"),NSe.forEach(t),Ttr=i(Xe),cT=n(Xe,"LI",{});var qSe=s(cT);s1e=n(qSe,"STRONG",{});var uvt=s(s1e);Mtr=r(uvt,"unispeech"),uvt.forEach(t),Etr=r(qSe," \u2014 "),Vz=n(qSe,"A",{href:!0});var bvt=s(Vz);Ctr=r(bvt,"UniSpeechForCTC"),bvt.forEach(t),wtr=r(qSe," (UniSpeech model)"),qSe.forEach(t),Atr=i(Xe),fT=n(Xe,"LI",{});var jSe=s(fT);l1e=n(jSe,"STRONG",{});var vvt=s(l1e);Ltr=r(vvt,"unispeech-sat"),vvt.forEach(t),ytr=r(jSe," \u2014 "),Xz=n(jSe,"A",{href:!0});var Fvt=s(Xz);xtr=r(Fvt,"UniSpeechSatForCTC"),Fvt.forEach(t),$tr=r(jSe," (UniSpeechSat model)"),jSe.forEach(t),ktr=i(Xe),mT=n(Xe,"LI",{});var DSe=s(mT);i1e=n(DSe,"STRONG",{});var Tvt=s(i1e);Str=r(Tvt,"wav2vec2"),Tvt.forEach(t),Rtr=r(DSe," \u2014 "),zz=n(DSe,"A",{href:!0});var Mvt=s(zz);Ptr=r(Mvt,"Wav2Vec2ForCTC"),Mvt.forEach(t),Btr=r(DSe," (Wav2Vec2 model)"),DSe.forEach(t),Itr=i(Xe),gT=n(Xe,"LI",{});var GSe=s(gT);d1e=n(GSe,"STRONG",{});var Evt=s(d1e);Ntr=r(Evt,"wav2vec2-conformer"),Evt.forEach(t),qtr=r(GSe," \u2014 "),Wz=n(GSe,"A",{href:!0});var Cvt=s(Wz);jtr=r(Cvt,"Wav2Vec2ConformerForCTC"),Cvt.forEach(t),Dtr=r(GSe," (Wav2Vec2-Conformer model)"),GSe.forEach(t),Gtr=i(Xe),hT=n(Xe,"LI",{});var OSe=s(hT);c1e=n(OSe,"STRONG",{});var wvt=s(c1e);Otr=r(wvt,"wavlm"),wvt.forEach(t),Vtr=r(OSe," \u2014 "),Qz=n(OSe,"A",{href:!0});var Avt=s(Qz);Xtr=r(Avt,"WavLMForCTC"),Avt.forEach(t),ztr=r(OSe," (WavLM model)"),OSe.forEach(t),Xe.forEach(t),Wtr=i(_a),pT=n(_a,"P",{});var VSe=s(pT);Qtr=r(VSe,"The model is set in evaluation mode by default using "),f1e=n(VSe,"CODE",{});var Lvt=s(f1e);Htr=r(Lvt,"model.eval()"),Lvt.forEach(t),Utr=r(VSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=n(VSe,"CODE",{});var yvt=s(m1e);Jtr=r(yvt,"model.train()"),yvt.forEach(t),VSe.forEach(t),Ytr=i(_a),T(_T.$$.fragment,_a),_a.forEach(t),sl.forEach(t),Qje=i(f),Td=n(f,"H2",{class:!0});var YGe=s(Td);uT=n(YGe,"A",{id:!0,class:!0,href:!0});var xvt=s(uT);g1e=n(xvt,"SPAN",{});var $vt=s(g1e);T(jy.$$.fragment,$vt),$vt.forEach(t),xvt.forEach(t),Ktr=i(YGe),h1e=n(YGe,"SPAN",{});var kvt=s(h1e);Ztr=r(kvt,"AutoModelForSpeechSeq2Seq"),kvt.forEach(t),YGe.forEach(t),Hje=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(Dy.$$.fragment,ll),ear=i(ll),Md=n(ll,"P",{});var wee=s(Md);oar=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hz=n(wee,"A",{href:!0});var Svt=s(Hz);rar=r(Svt,"from_pretrained()"),Svt.forEach(t),tar=r(wee," class method or the "),Uz=n(wee,"A",{href:!0});var Rvt=s(Uz);aar=r(Rvt,"from_config()"),Rvt.forEach(t),nar=r(wee,` class
method.`),wee.forEach(t),sar=i(ll),Gy=n(ll,"P",{});var KGe=s(Gy);lar=r(KGe,"This class cannot be instantiated directly using "),p1e=n(KGe,"CODE",{});var Pvt=s(p1e);iar=r(Pvt,"__init__()"),Pvt.forEach(t),dar=r(KGe," (throws an error)."),KGe.forEach(t),car=i(ll),Ft=n(ll,"DIV",{class:!0});var EA=s(Ft);T(Oy.$$.fragment,EA),far=i(EA),_1e=n(EA,"P",{});var Bvt=s(_1e);mar=r(Bvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bvt.forEach(t),gar=i(EA),Ed=n(EA,"P",{});var Aee=s(Ed);har=r(Aee,`Note:
Loading a model from its configuration file does `),u1e=n(Aee,"STRONG",{});var Ivt=s(u1e);par=r(Ivt,"not"),Ivt.forEach(t),_ar=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(Aee,"A",{href:!0});var Nvt=s(Jz);uar=r(Nvt,"from_pretrained()"),Nvt.forEach(t),bar=r(Aee," to load the model weights."),Aee.forEach(t),Far=i(EA),T(bT.$$.fragment,EA),EA.forEach(t),Tar=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(Vy.$$.fragment,ua),Mar=i(ua),b1e=n(ua,"P",{});var qvt=s(b1e);Ear=r(qvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qvt.forEach(t),Car=i(ua),Xa=n(ua,"P",{});var CA=s(Xa);war=r(CA,"The model class to instantiate is selected based on the "),v1e=n(CA,"CODE",{});var jvt=s(v1e);Aar=r(jvt,"model_type"),jvt.forEach(t),Lar=r(CA,` property of the config object (either
passed as an argument or loaded from `),F1e=n(CA,"CODE",{});var Dvt=s(F1e);yar=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),xar=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(CA,"CODE",{});var Gvt=s(T1e);$ar=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),kar=r(CA,":"),CA.forEach(t),Sar=i(ua),Xy=n(ua,"UL",{});var ZGe=s(Xy);vT=n(ZGe,"LI",{});var XSe=s(vT);M1e=n(XSe,"STRONG",{});var Ovt=s(M1e);Rar=r(Ovt,"speech-encoder-decoder"),Ovt.forEach(t),Par=r(XSe," \u2014 "),Yz=n(XSe,"A",{href:!0});var Vvt=s(Yz);Bar=r(Vvt,"SpeechEncoderDecoderModel"),Vvt.forEach(t),Iar=r(XSe," (Speech Encoder decoder model)"),XSe.forEach(t),Nar=i(ZGe),FT=n(ZGe,"LI",{});var zSe=s(FT);E1e=n(zSe,"STRONG",{});var Xvt=s(E1e);qar=r(Xvt,"speech_to_text"),Xvt.forEach(t),jar=r(zSe," \u2014 "),Kz=n(zSe,"A",{href:!0});var zvt=s(Kz);Dar=r(zvt,"Speech2TextForConditionalGeneration"),zvt.forEach(t),Gar=r(zSe," (Speech2Text model)"),zSe.forEach(t),ZGe.forEach(t),Oar=i(ua),TT=n(ua,"P",{});var WSe=s(TT);Var=r(WSe,"The model is set in evaluation mode by default using "),C1e=n(WSe,"CODE",{});var Wvt=s(C1e);Xar=r(Wvt,"model.eval()"),Wvt.forEach(t),zar=r(WSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n(WSe,"CODE",{});var Qvt=s(w1e);War=r(Qvt,"model.train()"),Qvt.forEach(t),WSe.forEach(t),Qar=i(ua),T(MT.$$.fragment,ua),ua.forEach(t),ll.forEach(t),Uje=i(f),Cd=n(f,"H2",{class:!0});var eOe=s(Cd);ET=n(eOe,"A",{id:!0,class:!0,href:!0});var Hvt=s(ET);A1e=n(Hvt,"SPAN",{});var Uvt=s(A1e);T(zy.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),Har=i(eOe),L1e=n(eOe,"SPAN",{});var Jvt=s(L1e);Uar=r(Jvt,"AutoModelForAudioXVector"),Jvt.forEach(t),eOe.forEach(t),Jje=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(Wy.$$.fragment,il),Jar=i(il),wd=n(il,"P",{});var Lee=s(wd);Yar=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Zz=n(Lee,"A",{href:!0});var Yvt=s(Zz);Kar=r(Yvt,"from_pretrained()"),Yvt.forEach(t),Zar=r(Lee," class method or the "),eW=n(Lee,"A",{href:!0});var Kvt=s(eW);enr=r(Kvt,"from_config()"),Kvt.forEach(t),onr=r(Lee,` class
method.`),Lee.forEach(t),rnr=i(il),Qy=n(il,"P",{});var oOe=s(Qy);tnr=r(oOe,"This class cannot be instantiated directly using "),y1e=n(oOe,"CODE",{});var Zvt=s(y1e);anr=r(Zvt,"__init__()"),Zvt.forEach(t),nnr=r(oOe," (throws an error)."),oOe.forEach(t),snr=i(il),Tt=n(il,"DIV",{class:!0});var wA=s(Tt);T(Hy.$$.fragment,wA),lnr=i(wA),x1e=n(wA,"P",{});var eFt=s(x1e);inr=r(eFt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eFt.forEach(t),dnr=i(wA),Ad=n(wA,"P",{});var yee=s(Ad);cnr=r(yee,`Note:
Loading a model from its configuration file does `),$1e=n(yee,"STRONG",{});var oFt=s($1e);fnr=r(oFt,"not"),oFt.forEach(t),mnr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(yee,"A",{href:!0});var rFt=s(oW);gnr=r(rFt,"from_pretrained()"),rFt.forEach(t),hnr=r(yee," to load the model weights."),yee.forEach(t),pnr=i(wA),T(CT.$$.fragment,wA),wA.forEach(t),_nr=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(Uy.$$.fragment,ba),unr=i(ba),k1e=n(ba,"P",{});var tFt=s(k1e);bnr=r(tFt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tFt.forEach(t),vnr=i(ba),za=n(ba,"P",{});var AA=s(za);Fnr=r(AA,"The model class to instantiate is selected based on the "),S1e=n(AA,"CODE",{});var aFt=s(S1e);Tnr=r(aFt,"model_type"),aFt.forEach(t),Mnr=r(AA,` property of the config object (either
passed as an argument or loaded from `),R1e=n(AA,"CODE",{});var nFt=s(R1e);Enr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),Cnr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(AA,"CODE",{});var sFt=s(P1e);wnr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),Anr=r(AA,":"),AA.forEach(t),Lnr=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);wT=n(dl,"LI",{});var QSe=s(wT);B1e=n(QSe,"STRONG",{});var lFt=s(B1e);ynr=r(lFt,"data2vec-audio"),lFt.forEach(t),xnr=r(QSe," \u2014 "),rW=n(QSe,"A",{href:!0});var iFt=s(rW);$nr=r(iFt,"Data2VecAudioForXVector"),iFt.forEach(t),knr=r(QSe," (Data2VecAudio model)"),QSe.forEach(t),Snr=i(dl),AT=n(dl,"LI",{});var HSe=s(AT);I1e=n(HSe,"STRONG",{});var dFt=s(I1e);Rnr=r(dFt,"unispeech-sat"),dFt.forEach(t),Pnr=r(HSe," \u2014 "),tW=n(HSe,"A",{href:!0});var cFt=s(tW);Bnr=r(cFt,"UniSpeechSatForXVector"),cFt.forEach(t),Inr=r(HSe," (UniSpeechSat model)"),HSe.forEach(t),Nnr=i(dl),LT=n(dl,"LI",{});var USe=s(LT);N1e=n(USe,"STRONG",{});var fFt=s(N1e);qnr=r(fFt,"wav2vec2"),fFt.forEach(t),jnr=r(USe," \u2014 "),aW=n(USe,"A",{href:!0});var mFt=s(aW);Dnr=r(mFt,"Wav2Vec2ForXVector"),mFt.forEach(t),Gnr=r(USe," (Wav2Vec2 model)"),USe.forEach(t),Onr=i(dl),yT=n(dl,"LI",{});var JSe=s(yT);q1e=n(JSe,"STRONG",{});var gFt=s(q1e);Vnr=r(gFt,"wav2vec2-conformer"),gFt.forEach(t),Xnr=r(JSe," \u2014 "),nW=n(JSe,"A",{href:!0});var hFt=s(nW);znr=r(hFt,"Wav2Vec2ConformerForXVector"),hFt.forEach(t),Wnr=r(JSe," (Wav2Vec2-Conformer model)"),JSe.forEach(t),Qnr=i(dl),xT=n(dl,"LI",{});var YSe=s(xT);j1e=n(YSe,"STRONG",{});var pFt=s(j1e);Hnr=r(pFt,"wavlm"),pFt.forEach(t),Unr=r(YSe," \u2014 "),sW=n(YSe,"A",{href:!0});var _Ft=s(sW);Jnr=r(_Ft,"WavLMForXVector"),_Ft.forEach(t),Ynr=r(YSe," (WavLM model)"),YSe.forEach(t),dl.forEach(t),Knr=i(ba),$T=n(ba,"P",{});var KSe=s($T);Znr=r(KSe,"The model is set in evaluation mode by default using "),D1e=n(KSe,"CODE",{});var uFt=s(D1e);esr=r(uFt,"model.eval()"),uFt.forEach(t),osr=r(KSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(KSe,"CODE",{});var bFt=s(G1e);rsr=r(bFt,"model.train()"),bFt.forEach(t),KSe.forEach(t),tsr=i(ba),T(kT.$$.fragment,ba),ba.forEach(t),il.forEach(t),Yje=i(f),Ld=n(f,"H2",{class:!0});var rOe=s(Ld);ST=n(rOe,"A",{id:!0,class:!0,href:!0});var vFt=s(ST);O1e=n(vFt,"SPAN",{});var FFt=s(O1e);T(Jy.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),asr=i(rOe),V1e=n(rOe,"SPAN",{});var TFt=s(V1e);nsr=r(TFt,"AutoModelForMaskedImageModeling"),TFt.forEach(t),rOe.forEach(t),Kje=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(Yy.$$.fragment,cl),ssr=i(cl),yd=n(cl,"P",{});var xee=s(yd);lsr=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lW=n(xee,"A",{href:!0});var MFt=s(lW);isr=r(MFt,"from_pretrained()"),MFt.forEach(t),dsr=r(xee," class method or the "),iW=n(xee,"A",{href:!0});var EFt=s(iW);csr=r(EFt,"from_config()"),EFt.forEach(t),fsr=r(xee,` class
method.`),xee.forEach(t),msr=i(cl),Ky=n(cl,"P",{});var tOe=s(Ky);gsr=r(tOe,"This class cannot be instantiated directly using "),X1e=n(tOe,"CODE",{});var CFt=s(X1e);hsr=r(CFt,"__init__()"),CFt.forEach(t),psr=r(tOe," (throws an error)."),tOe.forEach(t),_sr=i(cl),Mt=n(cl,"DIV",{class:!0});var LA=s(Mt);T(Zy.$$.fragment,LA),usr=i(LA),z1e=n(LA,"P",{});var wFt=s(z1e);bsr=r(wFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wFt.forEach(t),vsr=i(LA),xd=n(LA,"P",{});var $ee=s(xd);Fsr=r($ee,`Note:
Loading a model from its configuration file does `),W1e=n($ee,"STRONG",{});var AFt=s(W1e);Tsr=r(AFt,"not"),AFt.forEach(t),Msr=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n($ee,"A",{href:!0});var LFt=s(dW);Esr=r(LFt,"from_pretrained()"),LFt.forEach(t),Csr=r($ee," to load the model weights."),$ee.forEach(t),wsr=i(LA),T(RT.$$.fragment,LA),LA.forEach(t),Asr=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(e8.$$.fragment,va),Lsr=i(va),Q1e=n(va,"P",{});var yFt=s(Q1e);ysr=r(yFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yFt.forEach(t),xsr=i(va),Wa=n(va,"P",{});var yA=s(Wa);$sr=r(yA,"The model class to instantiate is selected based on the "),H1e=n(yA,"CODE",{});var xFt=s(H1e);ksr=r(xFt,"model_type"),xFt.forEach(t),Ssr=r(yA,` property of the config object (either
passed as an argument or loaded from `),U1e=n(yA,"CODE",{});var $Ft=s(U1e);Rsr=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),Psr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(yA,"CODE",{});var kFt=s(J1e);Bsr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),Isr=r(yA,":"),yA.forEach(t),Nsr=i(va),$d=n(va,"UL",{});var kee=s($d);PT=n(kee,"LI",{});var ZSe=s(PT);Y1e=n(ZSe,"STRONG",{});var SFt=s(Y1e);qsr=r(SFt,"deit"),SFt.forEach(t),jsr=r(ZSe," \u2014 "),cW=n(ZSe,"A",{href:!0});var RFt=s(cW);Dsr=r(RFt,"DeiTForMaskedImageModeling"),RFt.forEach(t),Gsr=r(ZSe," (DeiT model)"),ZSe.forEach(t),Osr=i(kee),BT=n(kee,"LI",{});var eRe=s(BT);K1e=n(eRe,"STRONG",{});var PFt=s(K1e);Vsr=r(PFt,"swin"),PFt.forEach(t),Xsr=r(eRe," \u2014 "),fW=n(eRe,"A",{href:!0});var BFt=s(fW);zsr=r(BFt,"SwinForMaskedImageModeling"),BFt.forEach(t),Wsr=r(eRe," (Swin Transformer model)"),eRe.forEach(t),Qsr=i(kee),IT=n(kee,"LI",{});var oRe=s(IT);Z1e=n(oRe,"STRONG",{});var IFt=s(Z1e);Hsr=r(IFt,"vit"),IFt.forEach(t),Usr=r(oRe," \u2014 "),mW=n(oRe,"A",{href:!0});var NFt=s(mW);Jsr=r(NFt,"ViTForMaskedImageModeling"),NFt.forEach(t),Ysr=r(oRe," (ViT model)"),oRe.forEach(t),kee.forEach(t),Ksr=i(va),NT=n(va,"P",{});var rRe=s(NT);Zsr=r(rRe,"The model is set in evaluation mode by default using "),e3e=n(rRe,"CODE",{});var qFt=s(e3e);elr=r(qFt,"model.eval()"),qFt.forEach(t),olr=r(rRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=n(rRe,"CODE",{});var jFt=s(o3e);rlr=r(jFt,"model.train()"),jFt.forEach(t),rRe.forEach(t),tlr=i(va),T(qT.$$.fragment,va),va.forEach(t),cl.forEach(t),Zje=i(f),kd=n(f,"H2",{class:!0});var aOe=s(kd);jT=n(aOe,"A",{id:!0,class:!0,href:!0});var DFt=s(jT);r3e=n(DFt,"SPAN",{});var GFt=s(r3e);T(o8.$$.fragment,GFt),GFt.forEach(t),DFt.forEach(t),alr=i(aOe),t3e=n(aOe,"SPAN",{});var OFt=s(t3e);nlr=r(OFt,"AutoModelForObjectDetection"),OFt.forEach(t),aOe.forEach(t),eDe=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(r8.$$.fragment,fl),slr=i(fl),Sd=n(fl,"P",{});var See=s(Sd);llr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gW=n(See,"A",{href:!0});var VFt=s(gW);ilr=r(VFt,"from_pretrained()"),VFt.forEach(t),dlr=r(See," class method or the "),hW=n(See,"A",{href:!0});var XFt=s(hW);clr=r(XFt,"from_config()"),XFt.forEach(t),flr=r(See,` class
method.`),See.forEach(t),mlr=i(fl),t8=n(fl,"P",{});var nOe=s(t8);glr=r(nOe,"This class cannot be instantiated directly using "),a3e=n(nOe,"CODE",{});var zFt=s(a3e);hlr=r(zFt,"__init__()"),zFt.forEach(t),plr=r(nOe," (throws an error)."),nOe.forEach(t),_lr=i(fl),Et=n(fl,"DIV",{class:!0});var xA=s(Et);T(a8.$$.fragment,xA),ulr=i(xA),n3e=n(xA,"P",{});var WFt=s(n3e);blr=r(WFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),WFt.forEach(t),vlr=i(xA),Rd=n(xA,"P",{});var Ree=s(Rd);Flr=r(Ree,`Note:
Loading a model from its configuration file does `),s3e=n(Ree,"STRONG",{});var QFt=s(s3e);Tlr=r(QFt,"not"),QFt.forEach(t),Mlr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Ree,"A",{href:!0});var HFt=s(pW);Elr=r(HFt,"from_pretrained()"),HFt.forEach(t),Clr=r(Ree," to load the model weights."),Ree.forEach(t),wlr=i(xA),T(DT.$$.fragment,xA),xA.forEach(t),Alr=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(n8.$$.fragment,Fa),Llr=i(Fa),l3e=n(Fa,"P",{});var UFt=s(l3e);ylr=r(UFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),UFt.forEach(t),xlr=i(Fa),Qa=n(Fa,"P",{});var $A=s(Qa);$lr=r($A,"The model class to instantiate is selected based on the "),i3e=n($A,"CODE",{});var JFt=s(i3e);klr=r(JFt,"model_type"),JFt.forEach(t),Slr=r($A,` property of the config object (either
passed as an argument or loaded from `),d3e=n($A,"CODE",{});var YFt=s(d3e);Rlr=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),Plr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n($A,"CODE",{});var KFt=s(c3e);Blr=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),Ilr=r($A,":"),$A.forEach(t),Nlr=i(Fa),s8=n(Fa,"UL",{});var sOe=s(s8);GT=n(sOe,"LI",{});var tRe=s(GT);f3e=n(tRe,"STRONG",{});var ZFt=s(f3e);qlr=r(ZFt,"detr"),ZFt.forEach(t),jlr=r(tRe," \u2014 "),_W=n(tRe,"A",{href:!0});var eTt=s(_W);Dlr=r(eTt,"DetrForObjectDetection"),eTt.forEach(t),Glr=r(tRe," (DETR model)"),tRe.forEach(t),Olr=i(sOe),OT=n(sOe,"LI",{});var aRe=s(OT);m3e=n(aRe,"STRONG",{});var oTt=s(m3e);Vlr=r(oTt,"yolos"),oTt.forEach(t),Xlr=r(aRe," \u2014 "),uW=n(aRe,"A",{href:!0});var rTt=s(uW);zlr=r(rTt,"YolosForObjectDetection"),rTt.forEach(t),Wlr=r(aRe," (YOLOS model)"),aRe.forEach(t),sOe.forEach(t),Qlr=i(Fa),VT=n(Fa,"P",{});var nRe=s(VT);Hlr=r(nRe,"The model is set in evaluation mode by default using "),g3e=n(nRe,"CODE",{});var tTt=s(g3e);Ulr=r(tTt,"model.eval()"),tTt.forEach(t),Jlr=r(nRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h3e=n(nRe,"CODE",{});var aTt=s(h3e);Ylr=r(aTt,"model.train()"),aTt.forEach(t),nRe.forEach(t),Klr=i(Fa),T(XT.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),oDe=i(f),Pd=n(f,"H2",{class:!0});var lOe=s(Pd);zT=n(lOe,"A",{id:!0,class:!0,href:!0});var nTt=s(zT);p3e=n(nTt,"SPAN",{});var sTt=s(p3e);T(l8.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),Zlr=i(lOe),_3e=n(lOe,"SPAN",{});var lTt=s(_3e);eir=r(lTt,"AutoModelForImageSegmentation"),lTt.forEach(t),lOe.forEach(t),rDe=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(i8.$$.fragment,ml),oir=i(ml),Bd=n(ml,"P",{});var Pee=s(Bd);rir=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bW=n(Pee,"A",{href:!0});var iTt=s(bW);tir=r(iTt,"from_pretrained()"),iTt.forEach(t),air=r(Pee," class method or the "),vW=n(Pee,"A",{href:!0});var dTt=s(vW);nir=r(dTt,"from_config()"),dTt.forEach(t),sir=r(Pee,` class
method.`),Pee.forEach(t),lir=i(ml),d8=n(ml,"P",{});var iOe=s(d8);iir=r(iOe,"This class cannot be instantiated directly using "),u3e=n(iOe,"CODE",{});var cTt=s(u3e);dir=r(cTt,"__init__()"),cTt.forEach(t),cir=r(iOe," (throws an error)."),iOe.forEach(t),fir=i(ml),Ct=n(ml,"DIV",{class:!0});var kA=s(Ct);T(c8.$$.fragment,kA),mir=i(kA),b3e=n(kA,"P",{});var fTt=s(b3e);gir=r(fTt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fTt.forEach(t),hir=i(kA),Id=n(kA,"P",{});var Bee=s(Id);pir=r(Bee,`Note:
Loading a model from its configuration file does `),v3e=n(Bee,"STRONG",{});var mTt=s(v3e);_ir=r(mTt,"not"),mTt.forEach(t),uir=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(Bee,"A",{href:!0});var gTt=s(FW);bir=r(gTt,"from_pretrained()"),gTt.forEach(t),vir=r(Bee," to load the model weights."),Bee.forEach(t),Fir=i(kA),T(WT.$$.fragment,kA),kA.forEach(t),Tir=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(f8.$$.fragment,Ta),Mir=i(Ta),F3e=n(Ta,"P",{});var hTt=s(F3e);Eir=r(hTt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hTt.forEach(t),Cir=i(Ta),Ha=n(Ta,"P",{});var SA=s(Ha);wir=r(SA,"The model class to instantiate is selected based on the "),T3e=n(SA,"CODE",{});var pTt=s(T3e);Air=r(pTt,"model_type"),pTt.forEach(t),Lir=r(SA,` property of the config object (either
passed as an argument or loaded from `),M3e=n(SA,"CODE",{});var _Tt=s(M3e);yir=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),xir=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(SA,"CODE",{});var uTt=s(E3e);$ir=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),kir=r(SA,":"),SA.forEach(t),Sir=i(Ta),C3e=n(Ta,"UL",{});var bTt=s(C3e);QT=n(bTt,"LI",{});var sRe=s(QT);w3e=n(sRe,"STRONG",{});var vTt=s(w3e);Rir=r(vTt,"detr"),vTt.forEach(t),Pir=r(sRe," \u2014 "),TW=n(sRe,"A",{href:!0});var FTt=s(TW);Bir=r(FTt,"DetrForSegmentation"),FTt.forEach(t),Iir=r(sRe," (DETR model)"),sRe.forEach(t),bTt.forEach(t),Nir=i(Ta),HT=n(Ta,"P",{});var lRe=s(HT);qir=r(lRe,"The model is set in evaluation mode by default using "),A3e=n(lRe,"CODE",{});var TTt=s(A3e);jir=r(TTt,"model.eval()"),TTt.forEach(t),Dir=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L3e=n(lRe,"CODE",{});var MTt=s(L3e);Gir=r(MTt,"model.train()"),MTt.forEach(t),lRe.forEach(t),Oir=i(Ta),T(UT.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),tDe=i(f),Nd=n(f,"H2",{class:!0});var dOe=s(Nd);JT=n(dOe,"A",{id:!0,class:!0,href:!0});var ETt=s(JT);y3e=n(ETt,"SPAN",{});var CTt=s(y3e);T(m8.$$.fragment,CTt),CTt.forEach(t),ETt.forEach(t),Vir=i(dOe),x3e=n(dOe,"SPAN",{});var wTt=s(x3e);Xir=r(wTt,"AutoModelForSemanticSegmentation"),wTt.forEach(t),dOe.forEach(t),aDe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(g8.$$.fragment,gl),zir=i(gl),qd=n(gl,"P",{});var Iee=s(qd);Wir=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),MW=n(Iee,"A",{href:!0});var ATt=s(MW);Qir=r(ATt,"from_pretrained()"),ATt.forEach(t),Hir=r(Iee," class method or the "),EW=n(Iee,"A",{href:!0});var LTt=s(EW);Uir=r(LTt,"from_config()"),LTt.forEach(t),Jir=r(Iee,` class
method.`),Iee.forEach(t),Yir=i(gl),h8=n(gl,"P",{});var cOe=s(h8);Kir=r(cOe,"This class cannot be instantiated directly using "),$3e=n(cOe,"CODE",{});var yTt=s($3e);Zir=r(yTt,"__init__()"),yTt.forEach(t),edr=r(cOe," (throws an error)."),cOe.forEach(t),odr=i(gl),wt=n(gl,"DIV",{class:!0});var RA=s(wt);T(p8.$$.fragment,RA),rdr=i(RA),k3e=n(RA,"P",{});var xTt=s(k3e);tdr=r(xTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xTt.forEach(t),adr=i(RA),jd=n(RA,"P",{});var Nee=s(jd);ndr=r(Nee,`Note:
Loading a model from its configuration file does `),S3e=n(Nee,"STRONG",{});var $Tt=s(S3e);sdr=r($Tt,"not"),$Tt.forEach(t),ldr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(Nee,"A",{href:!0});var kTt=s(CW);idr=r(kTt,"from_pretrained()"),kTt.forEach(t),ddr=r(Nee," to load the model weights."),Nee.forEach(t),cdr=i(RA),T(YT.$$.fragment,RA),RA.forEach(t),fdr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(_8.$$.fragment,Ma),mdr=i(Ma),R3e=n(Ma,"P",{});var STt=s(R3e);gdr=r(STt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),STt.forEach(t),hdr=i(Ma),Ua=n(Ma,"P",{});var PA=s(Ua);pdr=r(PA,"The model class to instantiate is selected based on the "),P3e=n(PA,"CODE",{});var RTt=s(P3e);_dr=r(RTt,"model_type"),RTt.forEach(t),udr=r(PA,` property of the config object (either
passed as an argument or loaded from `),B3e=n(PA,"CODE",{});var PTt=s(B3e);bdr=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),vdr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(PA,"CODE",{});var BTt=s(I3e);Fdr=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),Tdr=r(PA,":"),PA.forEach(t),Mdr=i(Ma),Ja=n(Ma,"UL",{});var BA=s(Ja);KT=n(BA,"LI",{});var iRe=s(KT);N3e=n(iRe,"STRONG",{});var ITt=s(N3e);Edr=r(ITt,"beit"),ITt.forEach(t),Cdr=r(iRe," \u2014 "),wW=n(iRe,"A",{href:!0});var NTt=s(wW);wdr=r(NTt,"BeitForSemanticSegmentation"),NTt.forEach(t),Adr=r(iRe," (BEiT model)"),iRe.forEach(t),Ldr=i(BA),ZT=n(BA,"LI",{});var dRe=s(ZT);q3e=n(dRe,"STRONG",{});var qTt=s(q3e);ydr=r(qTt,"data2vec-vision"),qTt.forEach(t),xdr=r(dRe," \u2014 "),AW=n(dRe,"A",{href:!0});var jTt=s(AW);$dr=r(jTt,"Data2VecVisionForSemanticSegmentation"),jTt.forEach(t),kdr=r(dRe," (Data2VecVision model)"),dRe.forEach(t),Sdr=i(BA),e7=n(BA,"LI",{});var cRe=s(e7);j3e=n(cRe,"STRONG",{});var DTt=s(j3e);Rdr=r(DTt,"dpt"),DTt.forEach(t),Pdr=r(cRe," \u2014 "),LW=n(cRe,"A",{href:!0});var GTt=s(LW);Bdr=r(GTt,"DPTForSemanticSegmentation"),GTt.forEach(t),Idr=r(cRe," (DPT model)"),cRe.forEach(t),Ndr=i(BA),o7=n(BA,"LI",{});var fRe=s(o7);D3e=n(fRe,"STRONG",{});var OTt=s(D3e);qdr=r(OTt,"segformer"),OTt.forEach(t),jdr=r(fRe," \u2014 "),yW=n(fRe,"A",{href:!0});var VTt=s(yW);Ddr=r(VTt,"SegformerForSemanticSegmentation"),VTt.forEach(t),Gdr=r(fRe," (SegFormer model)"),fRe.forEach(t),BA.forEach(t),Odr=i(Ma),r7=n(Ma,"P",{});var mRe=s(r7);Vdr=r(mRe,"The model is set in evaluation mode by default using "),G3e=n(mRe,"CODE",{});var XTt=s(G3e);Xdr=r(XTt,"model.eval()"),XTt.forEach(t),zdr=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O3e=n(mRe,"CODE",{});var zTt=s(O3e);Wdr=r(zTt,"model.train()"),zTt.forEach(t),mRe.forEach(t),Qdr=i(Ma),T(t7.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),nDe=i(f),Dd=n(f,"H2",{class:!0});var fOe=s(Dd);a7=n(fOe,"A",{id:!0,class:!0,href:!0});var WTt=s(a7);V3e=n(WTt,"SPAN",{});var QTt=s(V3e);T(u8.$$.fragment,QTt),QTt.forEach(t),WTt.forEach(t),Hdr=i(fOe),X3e=n(fOe,"SPAN",{});var HTt=s(X3e);Udr=r(HTt,"AutoModelForInstanceSegmentation"),HTt.forEach(t),fOe.forEach(t),sDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(b8.$$.fragment,hl),Jdr=i(hl),Gd=n(hl,"P",{});var qee=s(Gd);Ydr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xW=n(qee,"A",{href:!0});var UTt=s(xW);Kdr=r(UTt,"from_pretrained()"),UTt.forEach(t),Zdr=r(qee," class method or the "),$W=n(qee,"A",{href:!0});var JTt=s($W);ecr=r(JTt,"from_config()"),JTt.forEach(t),ocr=r(qee,` class
method.`),qee.forEach(t),rcr=i(hl),v8=n(hl,"P",{});var mOe=s(v8);tcr=r(mOe,"This class cannot be instantiated directly using "),z3e=n(mOe,"CODE",{});var YTt=s(z3e);acr=r(YTt,"__init__()"),YTt.forEach(t),ncr=r(mOe," (throws an error)."),mOe.forEach(t),scr=i(hl),At=n(hl,"DIV",{class:!0});var IA=s(At);T(F8.$$.fragment,IA),lcr=i(IA),W3e=n(IA,"P",{});var KTt=s(W3e);icr=r(KTt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),KTt.forEach(t),dcr=i(IA),Od=n(IA,"P",{});var jee=s(Od);ccr=r(jee,`Note:
Loading a model from its configuration file does `),Q3e=n(jee,"STRONG",{});var ZTt=s(Q3e);fcr=r(ZTt,"not"),ZTt.forEach(t),mcr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(jee,"A",{href:!0});var e7t=s(kW);gcr=r(e7t,"from_pretrained()"),e7t.forEach(t),hcr=r(jee," to load the model weights."),jee.forEach(t),pcr=i(IA),T(n7.$$.fragment,IA),IA.forEach(t),_cr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(T8.$$.fragment,Ea),ucr=i(Ea),H3e=n(Ea,"P",{});var o7t=s(H3e);bcr=r(o7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),o7t.forEach(t),vcr=i(Ea),Ya=n(Ea,"P",{});var NA=s(Ya);Fcr=r(NA,"The model class to instantiate is selected based on the "),U3e=n(NA,"CODE",{});var r7t=s(U3e);Tcr=r(r7t,"model_type"),r7t.forEach(t),Mcr=r(NA,` property of the config object (either
passed as an argument or loaded from `),J3e=n(NA,"CODE",{});var t7t=s(J3e);Ecr=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),Ccr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(NA,"CODE",{});var a7t=s(Y3e);wcr=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),Acr=r(NA,":"),NA.forEach(t),Lcr=i(Ea),K3e=n(Ea,"UL",{});var n7t=s(K3e);s7=n(n7t,"LI",{});var gRe=s(s7);Z3e=n(gRe,"STRONG",{});var s7t=s(Z3e);ycr=r(s7t,"maskformer"),s7t.forEach(t),xcr=r(gRe," \u2014 "),SW=n(gRe,"A",{href:!0});var l7t=s(SW);$cr=r(l7t,"MaskFormerForInstanceSegmentation"),l7t.forEach(t),kcr=r(gRe," (MaskFormer model)"),gRe.forEach(t),n7t.forEach(t),Scr=i(Ea),l7=n(Ea,"P",{});var hRe=s(l7);Rcr=r(hRe,"The model is set in evaluation mode by default using "),ebe=n(hRe,"CODE",{});var i7t=s(ebe);Pcr=r(i7t,"model.eval()"),i7t.forEach(t),Bcr=r(hRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(hRe,"CODE",{});var d7t=s(obe);Icr=r(d7t,"model.train()"),d7t.forEach(t),hRe.forEach(t),Ncr=i(Ea),T(i7.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),lDe=i(f),Vd=n(f,"H2",{class:!0});var gOe=s(Vd);d7=n(gOe,"A",{id:!0,class:!0,href:!0});var c7t=s(d7);rbe=n(c7t,"SPAN",{});var f7t=s(rbe);T(M8.$$.fragment,f7t),f7t.forEach(t),c7t.forEach(t),qcr=i(gOe),tbe=n(gOe,"SPAN",{});var m7t=s(tbe);jcr=r(m7t,"TFAutoModel"),m7t.forEach(t),gOe.forEach(t),iDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(E8.$$.fragment,pl),Dcr=i(pl),Xd=n(pl,"P",{});var Dee=s(Xd);Gcr=r(Dee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RW=n(Dee,"A",{href:!0});var g7t=s(RW);Ocr=r(g7t,"from_pretrained()"),g7t.forEach(t),Vcr=r(Dee," class method or the "),PW=n(Dee,"A",{href:!0});var h7t=s(PW);Xcr=r(h7t,"from_config()"),h7t.forEach(t),zcr=r(Dee,` class
method.`),Dee.forEach(t),Wcr=i(pl),C8=n(pl,"P",{});var hOe=s(C8);Qcr=r(hOe,"This class cannot be instantiated directly using "),abe=n(hOe,"CODE",{});var p7t=s(abe);Hcr=r(p7t,"__init__()"),p7t.forEach(t),Ucr=r(hOe," (throws an error)."),hOe.forEach(t),Jcr=i(pl),Lt=n(pl,"DIV",{class:!0});var qA=s(Lt);T(w8.$$.fragment,qA),Ycr=i(qA),nbe=n(qA,"P",{});var _7t=s(nbe);Kcr=r(_7t,"Instantiates one of the base model classes of the library from a configuration."),_7t.forEach(t),Zcr=i(qA),zd=n(qA,"P",{});var Gee=s(zd);efr=r(Gee,`Note:
Loading a model from its configuration file does `),sbe=n(Gee,"STRONG",{});var u7t=s(sbe);ofr=r(u7t,"not"),u7t.forEach(t),rfr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Gee,"A",{href:!0});var b7t=s(BW);tfr=r(b7t,"from_pretrained()"),b7t.forEach(t),afr=r(Gee," to load the model weights."),Gee.forEach(t),nfr=i(qA),T(c7.$$.fragment,qA),qA.forEach(t),sfr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(A8.$$.fragment,_l),lfr=i(_l),lbe=n(_l,"P",{});var v7t=s(lbe);ifr=r(v7t,"Instantiate one of the base model classes of the library from a pretrained model."),v7t.forEach(t),dfr=i(_l),Ka=n(_l,"P",{});var jA=s(Ka);cfr=r(jA,"The model class to instantiate is selected based on the "),ibe=n(jA,"CODE",{});var F7t=s(ibe);ffr=r(F7t,"model_type"),F7t.forEach(t),mfr=r(jA,` property of the config object (either
passed as an argument or loaded from `),dbe=n(jA,"CODE",{});var T7t=s(dbe);gfr=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),hfr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(jA,"CODE",{});var M7t=s(cbe);pfr=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),_fr=r(jA,":"),jA.forEach(t),ufr=i(_l),q=n(_l,"UL",{});var D=s(q);f7=n(D,"LI",{});var pRe=s(f7);fbe=n(pRe,"STRONG",{});var E7t=s(fbe);bfr=r(E7t,"albert"),E7t.forEach(t),vfr=r(pRe," \u2014 "),IW=n(pRe,"A",{href:!0});var C7t=s(IW);Ffr=r(C7t,"TFAlbertModel"),C7t.forEach(t),Tfr=r(pRe," (ALBERT model)"),pRe.forEach(t),Mfr=i(D),m7=n(D,"LI",{});var _Re=s(m7);mbe=n(_Re,"STRONG",{});var w7t=s(mbe);Efr=r(w7t,"bart"),w7t.forEach(t),Cfr=r(_Re," \u2014 "),NW=n(_Re,"A",{href:!0});var A7t=s(NW);wfr=r(A7t,"TFBartModel"),A7t.forEach(t),Afr=r(_Re," (BART model)"),_Re.forEach(t),Lfr=i(D),g7=n(D,"LI",{});var uRe=s(g7);gbe=n(uRe,"STRONG",{});var L7t=s(gbe);yfr=r(L7t,"bert"),L7t.forEach(t),xfr=r(uRe," \u2014 "),qW=n(uRe,"A",{href:!0});var y7t=s(qW);$fr=r(y7t,"TFBertModel"),y7t.forEach(t),kfr=r(uRe," (BERT model)"),uRe.forEach(t),Sfr=i(D),h7=n(D,"LI",{});var bRe=s(h7);hbe=n(bRe,"STRONG",{});var x7t=s(hbe);Rfr=r(x7t,"blenderbot"),x7t.forEach(t),Pfr=r(bRe," \u2014 "),jW=n(bRe,"A",{href:!0});var $7t=s(jW);Bfr=r($7t,"TFBlenderbotModel"),$7t.forEach(t),Ifr=r(bRe," (Blenderbot model)"),bRe.forEach(t),Nfr=i(D),p7=n(D,"LI",{});var vRe=s(p7);pbe=n(vRe,"STRONG",{});var k7t=s(pbe);qfr=r(k7t,"blenderbot-small"),k7t.forEach(t),jfr=r(vRe," \u2014 "),DW=n(vRe,"A",{href:!0});var S7t=s(DW);Dfr=r(S7t,"TFBlenderbotSmallModel"),S7t.forEach(t),Gfr=r(vRe," (BlenderbotSmall model)"),vRe.forEach(t),Ofr=i(D),_7=n(D,"LI",{});var FRe=s(_7);_be=n(FRe,"STRONG",{});var R7t=s(_be);Vfr=r(R7t,"camembert"),R7t.forEach(t),Xfr=r(FRe," \u2014 "),GW=n(FRe,"A",{href:!0});var P7t=s(GW);zfr=r(P7t,"TFCamembertModel"),P7t.forEach(t),Wfr=r(FRe," (CamemBERT model)"),FRe.forEach(t),Qfr=i(D),u7=n(D,"LI",{});var TRe=s(u7);ube=n(TRe,"STRONG",{});var B7t=s(ube);Hfr=r(B7t,"clip"),B7t.forEach(t),Ufr=r(TRe," \u2014 "),OW=n(TRe,"A",{href:!0});var I7t=s(OW);Jfr=r(I7t,"TFCLIPModel"),I7t.forEach(t),Yfr=r(TRe," (CLIP model)"),TRe.forEach(t),Kfr=i(D),b7=n(D,"LI",{});var MRe=s(b7);bbe=n(MRe,"STRONG",{});var N7t=s(bbe);Zfr=r(N7t,"convbert"),N7t.forEach(t),emr=r(MRe," \u2014 "),VW=n(MRe,"A",{href:!0});var q7t=s(VW);omr=r(q7t,"TFConvBertModel"),q7t.forEach(t),rmr=r(MRe," (ConvBERT model)"),MRe.forEach(t),tmr=i(D),v7=n(D,"LI",{});var ERe=s(v7);vbe=n(ERe,"STRONG",{});var j7t=s(vbe);amr=r(j7t,"convnext"),j7t.forEach(t),nmr=r(ERe," \u2014 "),XW=n(ERe,"A",{href:!0});var D7t=s(XW);smr=r(D7t,"TFConvNextModel"),D7t.forEach(t),lmr=r(ERe," (ConvNeXT model)"),ERe.forEach(t),imr=i(D),F7=n(D,"LI",{});var CRe=s(F7);Fbe=n(CRe,"STRONG",{});var G7t=s(Fbe);dmr=r(G7t,"ctrl"),G7t.forEach(t),cmr=r(CRe," \u2014 "),zW=n(CRe,"A",{href:!0});var O7t=s(zW);fmr=r(O7t,"TFCTRLModel"),O7t.forEach(t),mmr=r(CRe," (CTRL model)"),CRe.forEach(t),gmr=i(D),T7=n(D,"LI",{});var wRe=s(T7);Tbe=n(wRe,"STRONG",{});var V7t=s(Tbe);hmr=r(V7t,"data2vec-vision"),V7t.forEach(t),pmr=r(wRe," \u2014 "),WW=n(wRe,"A",{href:!0});var X7t=s(WW);_mr=r(X7t,"TFData2VecVisionModel"),X7t.forEach(t),umr=r(wRe," (Data2VecVision model)"),wRe.forEach(t),bmr=i(D),M7=n(D,"LI",{});var ARe=s(M7);Mbe=n(ARe,"STRONG",{});var z7t=s(Mbe);vmr=r(z7t,"deberta"),z7t.forEach(t),Fmr=r(ARe," \u2014 "),QW=n(ARe,"A",{href:!0});var W7t=s(QW);Tmr=r(W7t,"TFDebertaModel"),W7t.forEach(t),Mmr=r(ARe," (DeBERTa model)"),ARe.forEach(t),Emr=i(D),E7=n(D,"LI",{});var LRe=s(E7);Ebe=n(LRe,"STRONG",{});var Q7t=s(Ebe);Cmr=r(Q7t,"deberta-v2"),Q7t.forEach(t),wmr=r(LRe," \u2014 "),HW=n(LRe,"A",{href:!0});var H7t=s(HW);Amr=r(H7t,"TFDebertaV2Model"),H7t.forEach(t),Lmr=r(LRe," (DeBERTa-v2 model)"),LRe.forEach(t),ymr=i(D),C7=n(D,"LI",{});var yRe=s(C7);Cbe=n(yRe,"STRONG",{});var U7t=s(Cbe);xmr=r(U7t,"distilbert"),U7t.forEach(t),$mr=r(yRe," \u2014 "),UW=n(yRe,"A",{href:!0});var J7t=s(UW);kmr=r(J7t,"TFDistilBertModel"),J7t.forEach(t),Smr=r(yRe," (DistilBERT model)"),yRe.forEach(t),Rmr=i(D),w7=n(D,"LI",{});var xRe=s(w7);wbe=n(xRe,"STRONG",{});var Y7t=s(wbe);Pmr=r(Y7t,"dpr"),Y7t.forEach(t),Bmr=r(xRe," \u2014 "),JW=n(xRe,"A",{href:!0});var K7t=s(JW);Imr=r(K7t,"TFDPRQuestionEncoder"),K7t.forEach(t),Nmr=r(xRe," (DPR model)"),xRe.forEach(t),qmr=i(D),A7=n(D,"LI",{});var $Re=s(A7);Abe=n($Re,"STRONG",{});var Z7t=s(Abe);jmr=r(Z7t,"electra"),Z7t.forEach(t),Dmr=r($Re," \u2014 "),YW=n($Re,"A",{href:!0});var eMt=s(YW);Gmr=r(eMt,"TFElectraModel"),eMt.forEach(t),Omr=r($Re," (ELECTRA model)"),$Re.forEach(t),Vmr=i(D),L7=n(D,"LI",{});var kRe=s(L7);Lbe=n(kRe,"STRONG",{});var oMt=s(Lbe);Xmr=r(oMt,"flaubert"),oMt.forEach(t),zmr=r(kRe," \u2014 "),KW=n(kRe,"A",{href:!0});var rMt=s(KW);Wmr=r(rMt,"TFFlaubertModel"),rMt.forEach(t),Qmr=r(kRe," (FlauBERT model)"),kRe.forEach(t),Hmr=i(D),qs=n(D,"LI",{});var sk=s(qs);ybe=n(sk,"STRONG",{});var tMt=s(ybe);Umr=r(tMt,"funnel"),tMt.forEach(t),Jmr=r(sk," \u2014 "),ZW=n(sk,"A",{href:!0});var aMt=s(ZW);Ymr=r(aMt,"TFFunnelModel"),aMt.forEach(t),Kmr=r(sk," or "),eQ=n(sk,"A",{href:!0});var nMt=s(eQ);Zmr=r(nMt,"TFFunnelBaseModel"),nMt.forEach(t),egr=r(sk," (Funnel Transformer model)"),sk.forEach(t),ogr=i(D),y7=n(D,"LI",{});var SRe=s(y7);xbe=n(SRe,"STRONG",{});var sMt=s(xbe);rgr=r(sMt,"gpt2"),sMt.forEach(t),tgr=r(SRe," \u2014 "),oQ=n(SRe,"A",{href:!0});var lMt=s(oQ);agr=r(lMt,"TFGPT2Model"),lMt.forEach(t),ngr=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),sgr=i(D),x7=n(D,"LI",{});var RRe=s(x7);$be=n(RRe,"STRONG",{});var iMt=s($be);lgr=r(iMt,"gptj"),iMt.forEach(t),igr=r(RRe," \u2014 "),rQ=n(RRe,"A",{href:!0});var dMt=s(rQ);dgr=r(dMt,"TFGPTJModel"),dMt.forEach(t),cgr=r(RRe," (GPT-J model)"),RRe.forEach(t),fgr=i(D),$7=n(D,"LI",{});var PRe=s($7);kbe=n(PRe,"STRONG",{});var cMt=s(kbe);mgr=r(cMt,"hubert"),cMt.forEach(t),ggr=r(PRe," \u2014 "),tQ=n(PRe,"A",{href:!0});var fMt=s(tQ);hgr=r(fMt,"TFHubertModel"),fMt.forEach(t),pgr=r(PRe," (Hubert model)"),PRe.forEach(t),_gr=i(D),k7=n(D,"LI",{});var BRe=s(k7);Sbe=n(BRe,"STRONG",{});var mMt=s(Sbe);ugr=r(mMt,"layoutlm"),mMt.forEach(t),bgr=r(BRe," \u2014 "),aQ=n(BRe,"A",{href:!0});var gMt=s(aQ);vgr=r(gMt,"TFLayoutLMModel"),gMt.forEach(t),Fgr=r(BRe," (LayoutLM model)"),BRe.forEach(t),Tgr=i(D),S7=n(D,"LI",{});var IRe=s(S7);Rbe=n(IRe,"STRONG",{});var hMt=s(Rbe);Mgr=r(hMt,"led"),hMt.forEach(t),Egr=r(IRe," \u2014 "),nQ=n(IRe,"A",{href:!0});var pMt=s(nQ);Cgr=r(pMt,"TFLEDModel"),pMt.forEach(t),wgr=r(IRe," (LED model)"),IRe.forEach(t),Agr=i(D),R7=n(D,"LI",{});var NRe=s(R7);Pbe=n(NRe,"STRONG",{});var _Mt=s(Pbe);Lgr=r(_Mt,"longformer"),_Mt.forEach(t),ygr=r(NRe," \u2014 "),sQ=n(NRe,"A",{href:!0});var uMt=s(sQ);xgr=r(uMt,"TFLongformerModel"),uMt.forEach(t),$gr=r(NRe," (Longformer model)"),NRe.forEach(t),kgr=i(D),P7=n(D,"LI",{});var qRe=s(P7);Bbe=n(qRe,"STRONG",{});var bMt=s(Bbe);Sgr=r(bMt,"lxmert"),bMt.forEach(t),Rgr=r(qRe," \u2014 "),lQ=n(qRe,"A",{href:!0});var vMt=s(lQ);Pgr=r(vMt,"TFLxmertModel"),vMt.forEach(t),Bgr=r(qRe," (LXMERT model)"),qRe.forEach(t),Igr=i(D),B7=n(D,"LI",{});var jRe=s(B7);Ibe=n(jRe,"STRONG",{});var FMt=s(Ibe);Ngr=r(FMt,"marian"),FMt.forEach(t),qgr=r(jRe," \u2014 "),iQ=n(jRe,"A",{href:!0});var TMt=s(iQ);jgr=r(TMt,"TFMarianModel"),TMt.forEach(t),Dgr=r(jRe," (Marian model)"),jRe.forEach(t),Ggr=i(D),I7=n(D,"LI",{});var DRe=s(I7);Nbe=n(DRe,"STRONG",{});var MMt=s(Nbe);Ogr=r(MMt,"mbart"),MMt.forEach(t),Vgr=r(DRe," \u2014 "),dQ=n(DRe,"A",{href:!0});var EMt=s(dQ);Xgr=r(EMt,"TFMBartModel"),EMt.forEach(t),zgr=r(DRe," (mBART model)"),DRe.forEach(t),Wgr=i(D),N7=n(D,"LI",{});var GRe=s(N7);qbe=n(GRe,"STRONG",{});var CMt=s(qbe);Qgr=r(CMt,"mobilebert"),CMt.forEach(t),Hgr=r(GRe," \u2014 "),cQ=n(GRe,"A",{href:!0});var wMt=s(cQ);Ugr=r(wMt,"TFMobileBertModel"),wMt.forEach(t),Jgr=r(GRe," (MobileBERT model)"),GRe.forEach(t),Ygr=i(D),q7=n(D,"LI",{});var ORe=s(q7);jbe=n(ORe,"STRONG",{});var AMt=s(jbe);Kgr=r(AMt,"mpnet"),AMt.forEach(t),Zgr=r(ORe," \u2014 "),fQ=n(ORe,"A",{href:!0});var LMt=s(fQ);ehr=r(LMt,"TFMPNetModel"),LMt.forEach(t),ohr=r(ORe," (MPNet model)"),ORe.forEach(t),rhr=i(D),j7=n(D,"LI",{});var VRe=s(j7);Dbe=n(VRe,"STRONG",{});var yMt=s(Dbe);thr=r(yMt,"mt5"),yMt.forEach(t),ahr=r(VRe," \u2014 "),mQ=n(VRe,"A",{href:!0});var xMt=s(mQ);nhr=r(xMt,"TFMT5Model"),xMt.forEach(t),shr=r(VRe," (MT5 model)"),VRe.forEach(t),lhr=i(D),D7=n(D,"LI",{});var XRe=s(D7);Gbe=n(XRe,"STRONG",{});var $Mt=s(Gbe);ihr=r($Mt,"openai-gpt"),$Mt.forEach(t),dhr=r(XRe," \u2014 "),gQ=n(XRe,"A",{href:!0});var kMt=s(gQ);chr=r(kMt,"TFOpenAIGPTModel"),kMt.forEach(t),fhr=r(XRe," (OpenAI GPT model)"),XRe.forEach(t),mhr=i(D),G7=n(D,"LI",{});var zRe=s(G7);Obe=n(zRe,"STRONG",{});var SMt=s(Obe);ghr=r(SMt,"opt"),SMt.forEach(t),hhr=r(zRe," \u2014 "),hQ=n(zRe,"A",{href:!0});var RMt=s(hQ);phr=r(RMt,"TFOPTModel"),RMt.forEach(t),_hr=r(zRe," (OPT model)"),zRe.forEach(t),uhr=i(D),O7=n(D,"LI",{});var WRe=s(O7);Vbe=n(WRe,"STRONG",{});var PMt=s(Vbe);bhr=r(PMt,"pegasus"),PMt.forEach(t),vhr=r(WRe," \u2014 "),pQ=n(WRe,"A",{href:!0});var BMt=s(pQ);Fhr=r(BMt,"TFPegasusModel"),BMt.forEach(t),Thr=r(WRe," (Pegasus model)"),WRe.forEach(t),Mhr=i(D),V7=n(D,"LI",{});var QRe=s(V7);Xbe=n(QRe,"STRONG",{});var IMt=s(Xbe);Ehr=r(IMt,"rembert"),IMt.forEach(t),Chr=r(QRe," \u2014 "),_Q=n(QRe,"A",{href:!0});var NMt=s(_Q);whr=r(NMt,"TFRemBertModel"),NMt.forEach(t),Ahr=r(QRe," (RemBERT model)"),QRe.forEach(t),Lhr=i(D),X7=n(D,"LI",{});var HRe=s(X7);zbe=n(HRe,"STRONG",{});var qMt=s(zbe);yhr=r(qMt,"roberta"),qMt.forEach(t),xhr=r(HRe," \u2014 "),uQ=n(HRe,"A",{href:!0});var jMt=s(uQ);$hr=r(jMt,"TFRobertaModel"),jMt.forEach(t),khr=r(HRe," (RoBERTa model)"),HRe.forEach(t),Shr=i(D),z7=n(D,"LI",{});var URe=s(z7);Wbe=n(URe,"STRONG",{});var DMt=s(Wbe);Rhr=r(DMt,"roformer"),DMt.forEach(t),Phr=r(URe," \u2014 "),bQ=n(URe,"A",{href:!0});var GMt=s(bQ);Bhr=r(GMt,"TFRoFormerModel"),GMt.forEach(t),Ihr=r(URe," (RoFormer model)"),URe.forEach(t),Nhr=i(D),W7=n(D,"LI",{});var JRe=s(W7);Qbe=n(JRe,"STRONG",{});var OMt=s(Qbe);qhr=r(OMt,"speech_to_text"),OMt.forEach(t),jhr=r(JRe," \u2014 "),vQ=n(JRe,"A",{href:!0});var VMt=s(vQ);Dhr=r(VMt,"TFSpeech2TextModel"),VMt.forEach(t),Ghr=r(JRe," (Speech2Text model)"),JRe.forEach(t),Ohr=i(D),Q7=n(D,"LI",{});var YRe=s(Q7);Hbe=n(YRe,"STRONG",{});var XMt=s(Hbe);Vhr=r(XMt,"swin"),XMt.forEach(t),Xhr=r(YRe," \u2014 "),FQ=n(YRe,"A",{href:!0});var zMt=s(FQ);zhr=r(zMt,"TFSwinModel"),zMt.forEach(t),Whr=r(YRe," (Swin Transformer model)"),YRe.forEach(t),Qhr=i(D),H7=n(D,"LI",{});var KRe=s(H7);Ube=n(KRe,"STRONG",{});var WMt=s(Ube);Hhr=r(WMt,"t5"),WMt.forEach(t),Uhr=r(KRe," \u2014 "),TQ=n(KRe,"A",{href:!0});var QMt=s(TQ);Jhr=r(QMt,"TFT5Model"),QMt.forEach(t),Yhr=r(KRe," (T5 model)"),KRe.forEach(t),Khr=i(D),U7=n(D,"LI",{});var ZRe=s(U7);Jbe=n(ZRe,"STRONG",{});var HMt=s(Jbe);Zhr=r(HMt,"tapas"),HMt.forEach(t),epr=r(ZRe," \u2014 "),MQ=n(ZRe,"A",{href:!0});var UMt=s(MQ);opr=r(UMt,"TFTapasModel"),UMt.forEach(t),rpr=r(ZRe," (TAPAS model)"),ZRe.forEach(t),tpr=i(D),J7=n(D,"LI",{});var ePe=s(J7);Ybe=n(ePe,"STRONG",{});var JMt=s(Ybe);apr=r(JMt,"transfo-xl"),JMt.forEach(t),npr=r(ePe," \u2014 "),EQ=n(ePe,"A",{href:!0});var YMt=s(EQ);spr=r(YMt,"TFTransfoXLModel"),YMt.forEach(t),lpr=r(ePe," (Transformer-XL model)"),ePe.forEach(t),ipr=i(D),Y7=n(D,"LI",{});var oPe=s(Y7);Kbe=n(oPe,"STRONG",{});var KMt=s(Kbe);dpr=r(KMt,"vit"),KMt.forEach(t),cpr=r(oPe," \u2014 "),CQ=n(oPe,"A",{href:!0});var ZMt=s(CQ);fpr=r(ZMt,"TFViTModel"),ZMt.forEach(t),mpr=r(oPe," (ViT model)"),oPe.forEach(t),gpr=i(D),K7=n(D,"LI",{});var rPe=s(K7);Zbe=n(rPe,"STRONG",{});var e4t=s(Zbe);hpr=r(e4t,"vit_mae"),e4t.forEach(t),ppr=r(rPe," \u2014 "),wQ=n(rPe,"A",{href:!0});var o4t=s(wQ);_pr=r(o4t,"TFViTMAEModel"),o4t.forEach(t),upr=r(rPe," (ViTMAE model)"),rPe.forEach(t),bpr=i(D),Z7=n(D,"LI",{});var tPe=s(Z7);e2e=n(tPe,"STRONG",{});var r4t=s(e2e);vpr=r(r4t,"wav2vec2"),r4t.forEach(t),Fpr=r(tPe," \u2014 "),AQ=n(tPe,"A",{href:!0});var t4t=s(AQ);Tpr=r(t4t,"TFWav2Vec2Model"),t4t.forEach(t),Mpr=r(tPe," (Wav2Vec2 model)"),tPe.forEach(t),Epr=i(D),eM=n(D,"LI",{});var aPe=s(eM);o2e=n(aPe,"STRONG",{});var a4t=s(o2e);Cpr=r(a4t,"xlm"),a4t.forEach(t),wpr=r(aPe," \u2014 "),LQ=n(aPe,"A",{href:!0});var n4t=s(LQ);Apr=r(n4t,"TFXLMModel"),n4t.forEach(t),Lpr=r(aPe," (XLM model)"),aPe.forEach(t),ypr=i(D),oM=n(D,"LI",{});var nPe=s(oM);r2e=n(nPe,"STRONG",{});var s4t=s(r2e);xpr=r(s4t,"xlm-roberta"),s4t.forEach(t),$pr=r(nPe," \u2014 "),yQ=n(nPe,"A",{href:!0});var l4t=s(yQ);kpr=r(l4t,"TFXLMRobertaModel"),l4t.forEach(t),Spr=r(nPe," (XLM-RoBERTa model)"),nPe.forEach(t),Rpr=i(D),rM=n(D,"LI",{});var sPe=s(rM);t2e=n(sPe,"STRONG",{});var i4t=s(t2e);Ppr=r(i4t,"xlnet"),i4t.forEach(t),Bpr=r(sPe," \u2014 "),xQ=n(sPe,"A",{href:!0});var d4t=s(xQ);Ipr=r(d4t,"TFXLNetModel"),d4t.forEach(t),Npr=r(sPe," (XLNet model)"),sPe.forEach(t),D.forEach(t),qpr=i(_l),T(tM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),dDe=i(f),Wd=n(f,"H2",{class:!0});var pOe=s(Wd);aM=n(pOe,"A",{id:!0,class:!0,href:!0});var c4t=s(aM);a2e=n(c4t,"SPAN",{});var f4t=s(a2e);T(L8.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),jpr=i(pOe),n2e=n(pOe,"SPAN",{});var m4t=s(n2e);Dpr=r(m4t,"TFAutoModelForPreTraining"),m4t.forEach(t),pOe.forEach(t),cDe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(y8.$$.fragment,ul),Gpr=i(ul),Qd=n(ul,"P",{});var Oee=s(Qd);Opr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$Q=n(Oee,"A",{href:!0});var g4t=s($Q);Vpr=r(g4t,"from_pretrained()"),g4t.forEach(t),Xpr=r(Oee," class method or the "),kQ=n(Oee,"A",{href:!0});var h4t=s(kQ);zpr=r(h4t,"from_config()"),h4t.forEach(t),Wpr=r(Oee,` class
method.`),Oee.forEach(t),Qpr=i(ul),x8=n(ul,"P",{});var _Oe=s(x8);Hpr=r(_Oe,"This class cannot be instantiated directly using "),s2e=n(_Oe,"CODE",{});var p4t=s(s2e);Upr=r(p4t,"__init__()"),p4t.forEach(t),Jpr=r(_Oe," (throws an error)."),_Oe.forEach(t),Ypr=i(ul),yt=n(ul,"DIV",{class:!0});var DA=s(yt);T($8.$$.fragment,DA),Kpr=i(DA),l2e=n(DA,"P",{});var _4t=s(l2e);Zpr=r(_4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_4t.forEach(t),e_r=i(DA),Hd=n(DA,"P",{});var Vee=s(Hd);o_r=r(Vee,`Note:
Loading a model from its configuration file does `),i2e=n(Vee,"STRONG",{});var u4t=s(i2e);r_r=r(u4t,"not"),u4t.forEach(t),t_r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(Vee,"A",{href:!0});var b4t=s(SQ);a_r=r(b4t,"from_pretrained()"),b4t.forEach(t),n_r=r(Vee," to load the model weights."),Vee.forEach(t),s_r=i(DA),T(nM.$$.fragment,DA),DA.forEach(t),l_r=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(k8.$$.fragment,bl),i_r=i(bl),d2e=n(bl,"P",{});var v4t=s(d2e);d_r=r(v4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v4t.forEach(t),c_r=i(bl),Za=n(bl,"P",{});var GA=s(Za);f_r=r(GA,"The model class to instantiate is selected based on the "),c2e=n(GA,"CODE",{});var F4t=s(c2e);m_r=r(F4t,"model_type"),F4t.forEach(t),g_r=r(GA,` property of the config object (either
passed as an argument or loaded from `),f2e=n(GA,"CODE",{});var T4t=s(f2e);h_r=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),p_r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(GA,"CODE",{});var M4t=s(m2e);__r=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),u_r=r(GA,":"),GA.forEach(t),b_r=i(bl),se=n(bl,"UL",{});var le=s(se);sM=n(le,"LI",{});var lPe=s(sM);g2e=n(lPe,"STRONG",{});var E4t=s(g2e);v_r=r(E4t,"albert"),E4t.forEach(t),F_r=r(lPe," \u2014 "),RQ=n(lPe,"A",{href:!0});var C4t=s(RQ);T_r=r(C4t,"TFAlbertForPreTraining"),C4t.forEach(t),M_r=r(lPe," (ALBERT model)"),lPe.forEach(t),E_r=i(le),lM=n(le,"LI",{});var iPe=s(lM);h2e=n(iPe,"STRONG",{});var w4t=s(h2e);C_r=r(w4t,"bart"),w4t.forEach(t),w_r=r(iPe," \u2014 "),PQ=n(iPe,"A",{href:!0});var A4t=s(PQ);A_r=r(A4t,"TFBartForConditionalGeneration"),A4t.forEach(t),L_r=r(iPe," (BART model)"),iPe.forEach(t),y_r=i(le),iM=n(le,"LI",{});var dPe=s(iM);p2e=n(dPe,"STRONG",{});var L4t=s(p2e);x_r=r(L4t,"bert"),L4t.forEach(t),$_r=r(dPe," \u2014 "),BQ=n(dPe,"A",{href:!0});var y4t=s(BQ);k_r=r(y4t,"TFBertForPreTraining"),y4t.forEach(t),S_r=r(dPe," (BERT model)"),dPe.forEach(t),R_r=i(le),dM=n(le,"LI",{});var cPe=s(dM);_2e=n(cPe,"STRONG",{});var x4t=s(_2e);P_r=r(x4t,"camembert"),x4t.forEach(t),B_r=r(cPe," \u2014 "),IQ=n(cPe,"A",{href:!0});var $4t=s(IQ);I_r=r($4t,"TFCamembertForMaskedLM"),$4t.forEach(t),N_r=r(cPe," (CamemBERT model)"),cPe.forEach(t),q_r=i(le),cM=n(le,"LI",{});var fPe=s(cM);u2e=n(fPe,"STRONG",{});var k4t=s(u2e);j_r=r(k4t,"ctrl"),k4t.forEach(t),D_r=r(fPe," \u2014 "),NQ=n(fPe,"A",{href:!0});var S4t=s(NQ);G_r=r(S4t,"TFCTRLLMHeadModel"),S4t.forEach(t),O_r=r(fPe," (CTRL model)"),fPe.forEach(t),V_r=i(le),fM=n(le,"LI",{});var mPe=s(fM);b2e=n(mPe,"STRONG",{});var R4t=s(b2e);X_r=r(R4t,"distilbert"),R4t.forEach(t),z_r=r(mPe," \u2014 "),qQ=n(mPe,"A",{href:!0});var P4t=s(qQ);W_r=r(P4t,"TFDistilBertForMaskedLM"),P4t.forEach(t),Q_r=r(mPe," (DistilBERT model)"),mPe.forEach(t),H_r=i(le),mM=n(le,"LI",{});var gPe=s(mM);v2e=n(gPe,"STRONG",{});var B4t=s(v2e);U_r=r(B4t,"electra"),B4t.forEach(t),J_r=r(gPe," \u2014 "),jQ=n(gPe,"A",{href:!0});var I4t=s(jQ);Y_r=r(I4t,"TFElectraForPreTraining"),I4t.forEach(t),K_r=r(gPe," (ELECTRA model)"),gPe.forEach(t),Z_r=i(le),gM=n(le,"LI",{});var hPe=s(gM);F2e=n(hPe,"STRONG",{});var N4t=s(F2e);eur=r(N4t,"flaubert"),N4t.forEach(t),our=r(hPe," \u2014 "),DQ=n(hPe,"A",{href:!0});var q4t=s(DQ);rur=r(q4t,"TFFlaubertWithLMHeadModel"),q4t.forEach(t),tur=r(hPe," (FlauBERT model)"),hPe.forEach(t),aur=i(le),hM=n(le,"LI",{});var pPe=s(hM);T2e=n(pPe,"STRONG",{});var j4t=s(T2e);nur=r(j4t,"funnel"),j4t.forEach(t),sur=r(pPe," \u2014 "),GQ=n(pPe,"A",{href:!0});var D4t=s(GQ);lur=r(D4t,"TFFunnelForPreTraining"),D4t.forEach(t),iur=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),dur=i(le),pM=n(le,"LI",{});var _Pe=s(pM);M2e=n(_Pe,"STRONG",{});var G4t=s(M2e);cur=r(G4t,"gpt2"),G4t.forEach(t),fur=r(_Pe," \u2014 "),OQ=n(_Pe,"A",{href:!0});var O4t=s(OQ);mur=r(O4t,"TFGPT2LMHeadModel"),O4t.forEach(t),gur=r(_Pe," (OpenAI GPT-2 model)"),_Pe.forEach(t),hur=i(le),_M=n(le,"LI",{});var uPe=s(_M);E2e=n(uPe,"STRONG",{});var V4t=s(E2e);pur=r(V4t,"layoutlm"),V4t.forEach(t),_ur=r(uPe," \u2014 "),VQ=n(uPe,"A",{href:!0});var X4t=s(VQ);uur=r(X4t,"TFLayoutLMForMaskedLM"),X4t.forEach(t),bur=r(uPe," (LayoutLM model)"),uPe.forEach(t),vur=i(le),uM=n(le,"LI",{});var bPe=s(uM);C2e=n(bPe,"STRONG",{});var z4t=s(C2e);Fur=r(z4t,"lxmert"),z4t.forEach(t),Tur=r(bPe," \u2014 "),XQ=n(bPe,"A",{href:!0});var W4t=s(XQ);Mur=r(W4t,"TFLxmertForPreTraining"),W4t.forEach(t),Eur=r(bPe," (LXMERT model)"),bPe.forEach(t),Cur=i(le),bM=n(le,"LI",{});var vPe=s(bM);w2e=n(vPe,"STRONG",{});var Q4t=s(w2e);wur=r(Q4t,"mobilebert"),Q4t.forEach(t),Aur=r(vPe," \u2014 "),zQ=n(vPe,"A",{href:!0});var H4t=s(zQ);Lur=r(H4t,"TFMobileBertForPreTraining"),H4t.forEach(t),yur=r(vPe," (MobileBERT model)"),vPe.forEach(t),xur=i(le),vM=n(le,"LI",{});var FPe=s(vM);A2e=n(FPe,"STRONG",{});var U4t=s(A2e);$ur=r(U4t,"mpnet"),U4t.forEach(t),kur=r(FPe," \u2014 "),WQ=n(FPe,"A",{href:!0});var J4t=s(WQ);Sur=r(J4t,"TFMPNetForMaskedLM"),J4t.forEach(t),Rur=r(FPe," (MPNet model)"),FPe.forEach(t),Pur=i(le),FM=n(le,"LI",{});var TPe=s(FM);L2e=n(TPe,"STRONG",{});var Y4t=s(L2e);Bur=r(Y4t,"openai-gpt"),Y4t.forEach(t),Iur=r(TPe," \u2014 "),QQ=n(TPe,"A",{href:!0});var K4t=s(QQ);Nur=r(K4t,"TFOpenAIGPTLMHeadModel"),K4t.forEach(t),qur=r(TPe," (OpenAI GPT model)"),TPe.forEach(t),jur=i(le),TM=n(le,"LI",{});var MPe=s(TM);y2e=n(MPe,"STRONG",{});var Z4t=s(y2e);Dur=r(Z4t,"roberta"),Z4t.forEach(t),Gur=r(MPe," \u2014 "),HQ=n(MPe,"A",{href:!0});var eEt=s(HQ);Our=r(eEt,"TFRobertaForMaskedLM"),eEt.forEach(t),Vur=r(MPe," (RoBERTa model)"),MPe.forEach(t),Xur=i(le),MM=n(le,"LI",{});var EPe=s(MM);x2e=n(EPe,"STRONG",{});var oEt=s(x2e);zur=r(oEt,"t5"),oEt.forEach(t),Wur=r(EPe," \u2014 "),UQ=n(EPe,"A",{href:!0});var rEt=s(UQ);Qur=r(rEt,"TFT5ForConditionalGeneration"),rEt.forEach(t),Hur=r(EPe," (T5 model)"),EPe.forEach(t),Uur=i(le),EM=n(le,"LI",{});var CPe=s(EM);$2e=n(CPe,"STRONG",{});var tEt=s($2e);Jur=r(tEt,"tapas"),tEt.forEach(t),Yur=r(CPe," \u2014 "),JQ=n(CPe,"A",{href:!0});var aEt=s(JQ);Kur=r(aEt,"TFTapasForMaskedLM"),aEt.forEach(t),Zur=r(CPe," (TAPAS model)"),CPe.forEach(t),e1r=i(le),CM=n(le,"LI",{});var wPe=s(CM);k2e=n(wPe,"STRONG",{});var nEt=s(k2e);o1r=r(nEt,"transfo-xl"),nEt.forEach(t),r1r=r(wPe," \u2014 "),YQ=n(wPe,"A",{href:!0});var sEt=s(YQ);t1r=r(sEt,"TFTransfoXLLMHeadModel"),sEt.forEach(t),a1r=r(wPe," (Transformer-XL model)"),wPe.forEach(t),n1r=i(le),wM=n(le,"LI",{});var APe=s(wM);S2e=n(APe,"STRONG",{});var lEt=s(S2e);s1r=r(lEt,"vit_mae"),lEt.forEach(t),l1r=r(APe," \u2014 "),KQ=n(APe,"A",{href:!0});var iEt=s(KQ);i1r=r(iEt,"TFViTMAEForPreTraining"),iEt.forEach(t),d1r=r(APe," (ViTMAE model)"),APe.forEach(t),c1r=i(le),AM=n(le,"LI",{});var LPe=s(AM);R2e=n(LPe,"STRONG",{});var dEt=s(R2e);f1r=r(dEt,"xlm"),dEt.forEach(t),m1r=r(LPe," \u2014 "),ZQ=n(LPe,"A",{href:!0});var cEt=s(ZQ);g1r=r(cEt,"TFXLMWithLMHeadModel"),cEt.forEach(t),h1r=r(LPe," (XLM model)"),LPe.forEach(t),p1r=i(le),LM=n(le,"LI",{});var yPe=s(LM);P2e=n(yPe,"STRONG",{});var fEt=s(P2e);_1r=r(fEt,"xlm-roberta"),fEt.forEach(t),u1r=r(yPe," \u2014 "),eH=n(yPe,"A",{href:!0});var mEt=s(eH);b1r=r(mEt,"TFXLMRobertaForMaskedLM"),mEt.forEach(t),v1r=r(yPe," (XLM-RoBERTa model)"),yPe.forEach(t),F1r=i(le),yM=n(le,"LI",{});var xPe=s(yM);B2e=n(xPe,"STRONG",{});var gEt=s(B2e);T1r=r(gEt,"xlnet"),gEt.forEach(t),M1r=r(xPe," \u2014 "),oH=n(xPe,"A",{href:!0});var hEt=s(oH);E1r=r(hEt,"TFXLNetLMHeadModel"),hEt.forEach(t),C1r=r(xPe," (XLNet model)"),xPe.forEach(t),le.forEach(t),w1r=i(bl),T(xM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),fDe=i(f),Ud=n(f,"H2",{class:!0});var uOe=s(Ud);$M=n(uOe,"A",{id:!0,class:!0,href:!0});var pEt=s($M);I2e=n(pEt,"SPAN",{});var _Et=s(I2e);T(S8.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),A1r=i(uOe),N2e=n(uOe,"SPAN",{});var uEt=s(N2e);L1r=r(uEt,"TFAutoModelForCausalLM"),uEt.forEach(t),uOe.forEach(t),mDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(R8.$$.fragment,vl),y1r=i(vl),Jd=n(vl,"P",{});var Xee=s(Jd);x1r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rH=n(Xee,"A",{href:!0});var bEt=s(rH);$1r=r(bEt,"from_pretrained()"),bEt.forEach(t),k1r=r(Xee," class method or the "),tH=n(Xee,"A",{href:!0});var vEt=s(tH);S1r=r(vEt,"from_config()"),vEt.forEach(t),R1r=r(Xee,` class
method.`),Xee.forEach(t),P1r=i(vl),P8=n(vl,"P",{});var bOe=s(P8);B1r=r(bOe,"This class cannot be instantiated directly using "),q2e=n(bOe,"CODE",{});var FEt=s(q2e);I1r=r(FEt,"__init__()"),FEt.forEach(t),N1r=r(bOe," (throws an error)."),bOe.forEach(t),q1r=i(vl),xt=n(vl,"DIV",{class:!0});var OA=s(xt);T(B8.$$.fragment,OA),j1r=i(OA),j2e=n(OA,"P",{});var TEt=s(j2e);D1r=r(TEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TEt.forEach(t),G1r=i(OA),Yd=n(OA,"P",{});var zee=s(Yd);O1r=r(zee,`Note:
Loading a model from its configuration file does `),D2e=n(zee,"STRONG",{});var MEt=s(D2e);V1r=r(MEt,"not"),MEt.forEach(t),X1r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(zee,"A",{href:!0});var EEt=s(aH);z1r=r(EEt,"from_pretrained()"),EEt.forEach(t),W1r=r(zee," to load the model weights."),zee.forEach(t),Q1r=i(OA),T(kM.$$.fragment,OA),OA.forEach(t),H1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(I8.$$.fragment,Fl),U1r=i(Fl),G2e=n(Fl,"P",{});var CEt=s(G2e);J1r=r(CEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CEt.forEach(t),Y1r=i(Fl),en=n(Fl,"P",{});var VA=s(en);K1r=r(VA,"The model class to instantiate is selected based on the "),O2e=n(VA,"CODE",{});var wEt=s(O2e);Z1r=r(wEt,"model_type"),wEt.forEach(t),e3r=r(VA,` property of the config object (either
passed as an argument or loaded from `),V2e=n(VA,"CODE",{});var AEt=s(V2e);o3r=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),r3r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(VA,"CODE",{});var LEt=s(X2e);t3r=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),a3r=r(VA,":"),VA.forEach(t),n3r=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);SM=n(Ce,"LI",{});var $Pe=s(SM);z2e=n($Pe,"STRONG",{});var yEt=s(z2e);s3r=r(yEt,"bert"),yEt.forEach(t),l3r=r($Pe," \u2014 "),nH=n($Pe,"A",{href:!0});var xEt=s(nH);i3r=r(xEt,"TFBertLMHeadModel"),xEt.forEach(t),d3r=r($Pe," (BERT model)"),$Pe.forEach(t),c3r=i(Ce),RM=n(Ce,"LI",{});var kPe=s(RM);W2e=n(kPe,"STRONG",{});var $Et=s(W2e);f3r=r($Et,"camembert"),$Et.forEach(t),m3r=r(kPe," \u2014 "),sH=n(kPe,"A",{href:!0});var kEt=s(sH);g3r=r(kEt,"TFCamembertForCausalLM"),kEt.forEach(t),h3r=r(kPe," (CamemBERT model)"),kPe.forEach(t),p3r=i(Ce),PM=n(Ce,"LI",{});var SPe=s(PM);Q2e=n(SPe,"STRONG",{});var SEt=s(Q2e);_3r=r(SEt,"ctrl"),SEt.forEach(t),u3r=r(SPe," \u2014 "),lH=n(SPe,"A",{href:!0});var REt=s(lH);b3r=r(REt,"TFCTRLLMHeadModel"),REt.forEach(t),v3r=r(SPe," (CTRL model)"),SPe.forEach(t),F3r=i(Ce),BM=n(Ce,"LI",{});var RPe=s(BM);H2e=n(RPe,"STRONG",{});var PEt=s(H2e);T3r=r(PEt,"gpt2"),PEt.forEach(t),M3r=r(RPe," \u2014 "),iH=n(RPe,"A",{href:!0});var BEt=s(iH);E3r=r(BEt,"TFGPT2LMHeadModel"),BEt.forEach(t),C3r=r(RPe," (OpenAI GPT-2 model)"),RPe.forEach(t),w3r=i(Ce),IM=n(Ce,"LI",{});var PPe=s(IM);U2e=n(PPe,"STRONG",{});var IEt=s(U2e);A3r=r(IEt,"gptj"),IEt.forEach(t),L3r=r(PPe," \u2014 "),dH=n(PPe,"A",{href:!0});var NEt=s(dH);y3r=r(NEt,"TFGPTJForCausalLM"),NEt.forEach(t),x3r=r(PPe," (GPT-J model)"),PPe.forEach(t),$3r=i(Ce),NM=n(Ce,"LI",{});var BPe=s(NM);J2e=n(BPe,"STRONG",{});var qEt=s(J2e);k3r=r(qEt,"openai-gpt"),qEt.forEach(t),S3r=r(BPe," \u2014 "),cH=n(BPe,"A",{href:!0});var jEt=s(cH);R3r=r(jEt,"TFOpenAIGPTLMHeadModel"),jEt.forEach(t),P3r=r(BPe," (OpenAI GPT model)"),BPe.forEach(t),B3r=i(Ce),qM=n(Ce,"LI",{});var IPe=s(qM);Y2e=n(IPe,"STRONG",{});var DEt=s(Y2e);I3r=r(DEt,"opt"),DEt.forEach(t),N3r=r(IPe," \u2014 "),fH=n(IPe,"A",{href:!0});var GEt=s(fH);q3r=r(GEt,"TFOPTForCausalLM"),GEt.forEach(t),j3r=r(IPe," (OPT model)"),IPe.forEach(t),D3r=i(Ce),jM=n(Ce,"LI",{});var NPe=s(jM);K2e=n(NPe,"STRONG",{});var OEt=s(K2e);G3r=r(OEt,"rembert"),OEt.forEach(t),O3r=r(NPe," \u2014 "),mH=n(NPe,"A",{href:!0});var VEt=s(mH);V3r=r(VEt,"TFRemBertForCausalLM"),VEt.forEach(t),X3r=r(NPe," (RemBERT model)"),NPe.forEach(t),z3r=i(Ce),DM=n(Ce,"LI",{});var qPe=s(DM);Z2e=n(qPe,"STRONG",{});var XEt=s(Z2e);W3r=r(XEt,"roberta"),XEt.forEach(t),Q3r=r(qPe," \u2014 "),gH=n(qPe,"A",{href:!0});var zEt=s(gH);H3r=r(zEt,"TFRobertaForCausalLM"),zEt.forEach(t),U3r=r(qPe," (RoBERTa model)"),qPe.forEach(t),J3r=i(Ce),GM=n(Ce,"LI",{});var jPe=s(GM);eve=n(jPe,"STRONG",{});var WEt=s(eve);Y3r=r(WEt,"roformer"),WEt.forEach(t),K3r=r(jPe," \u2014 "),hH=n(jPe,"A",{href:!0});var QEt=s(hH);Z3r=r(QEt,"TFRoFormerForCausalLM"),QEt.forEach(t),ebr=r(jPe," (RoFormer model)"),jPe.forEach(t),obr=i(Ce),OM=n(Ce,"LI",{});var DPe=s(OM);ove=n(DPe,"STRONG",{});var HEt=s(ove);rbr=r(HEt,"transfo-xl"),HEt.forEach(t),tbr=r(DPe," \u2014 "),pH=n(DPe,"A",{href:!0});var UEt=s(pH);abr=r(UEt,"TFTransfoXLLMHeadModel"),UEt.forEach(t),nbr=r(DPe," (Transformer-XL model)"),DPe.forEach(t),sbr=i(Ce),VM=n(Ce,"LI",{});var GPe=s(VM);rve=n(GPe,"STRONG",{});var JEt=s(rve);lbr=r(JEt,"xlm"),JEt.forEach(t),ibr=r(GPe," \u2014 "),_H=n(GPe,"A",{href:!0});var YEt=s(_H);dbr=r(YEt,"TFXLMWithLMHeadModel"),YEt.forEach(t),cbr=r(GPe," (XLM model)"),GPe.forEach(t),fbr=i(Ce),XM=n(Ce,"LI",{});var OPe=s(XM);tve=n(OPe,"STRONG",{});var KEt=s(tve);mbr=r(KEt,"xlnet"),KEt.forEach(t),gbr=r(OPe," \u2014 "),uH=n(OPe,"A",{href:!0});var ZEt=s(uH);hbr=r(ZEt,"TFXLNetLMHeadModel"),ZEt.forEach(t),pbr=r(OPe," (XLNet model)"),OPe.forEach(t),Ce.forEach(t),_br=i(Fl),T(zM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),gDe=i(f),Kd=n(f,"H2",{class:!0});var vOe=s(Kd);WM=n(vOe,"A",{id:!0,class:!0,href:!0});var eCt=s(WM);ave=n(eCt,"SPAN",{});var oCt=s(ave);T(N8.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),ubr=i(vOe),nve=n(vOe,"SPAN",{});var rCt=s(nve);bbr=r(rCt,"TFAutoModelForImageClassification"),rCt.forEach(t),vOe.forEach(t),hDe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(q8.$$.fragment,Tl),vbr=i(Tl),Zd=n(Tl,"P",{});var Wee=s(Zd);Fbr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bH=n(Wee,"A",{href:!0});var tCt=s(bH);Tbr=r(tCt,"from_pretrained()"),tCt.forEach(t),Mbr=r(Wee," class method or the "),vH=n(Wee,"A",{href:!0});var aCt=s(vH);Ebr=r(aCt,"from_config()"),aCt.forEach(t),Cbr=r(Wee,` class
method.`),Wee.forEach(t),wbr=i(Tl),j8=n(Tl,"P",{});var FOe=s(j8);Abr=r(FOe,"This class cannot be instantiated directly using "),sve=n(FOe,"CODE",{});var nCt=s(sve);Lbr=r(nCt,"__init__()"),nCt.forEach(t),ybr=r(FOe," (throws an error)."),FOe.forEach(t),xbr=i(Tl),$t=n(Tl,"DIV",{class:!0});var XA=s($t);T(D8.$$.fragment,XA),$br=i(XA),lve=n(XA,"P",{});var sCt=s(lve);kbr=r(sCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sCt.forEach(t),Sbr=i(XA),ec=n(XA,"P",{});var Qee=s(ec);Rbr=r(Qee,`Note:
Loading a model from its configuration file does `),ive=n(Qee,"STRONG",{});var lCt=s(ive);Pbr=r(lCt,"not"),lCt.forEach(t),Bbr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(Qee,"A",{href:!0});var iCt=s(FH);Ibr=r(iCt,"from_pretrained()"),iCt.forEach(t),Nbr=r(Qee," to load the model weights."),Qee.forEach(t),qbr=i(XA),T(QM.$$.fragment,XA),XA.forEach(t),jbr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(G8.$$.fragment,Ml),Dbr=i(Ml),dve=n(Ml,"P",{});var dCt=s(dve);Gbr=r(dCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dCt.forEach(t),Obr=i(Ml),on=n(Ml,"P",{});var zA=s(on);Vbr=r(zA,"The model class to instantiate is selected based on the "),cve=n(zA,"CODE",{});var cCt=s(cve);Xbr=r(cCt,"model_type"),cCt.forEach(t),zbr=r(zA,` property of the config object (either
passed as an argument or loaded from `),fve=n(zA,"CODE",{});var fCt=s(fve);Wbr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),Qbr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(zA,"CODE",{});var mCt=s(mve);Hbr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),Ubr=r(zA,":"),zA.forEach(t),Jbr=i(Ml),rn=n(Ml,"UL",{});var WA=s(rn);HM=n(WA,"LI",{});var VPe=s(HM);gve=n(VPe,"STRONG",{});var gCt=s(gve);Ybr=r(gCt,"convnext"),gCt.forEach(t),Kbr=r(VPe," \u2014 "),TH=n(VPe,"A",{href:!0});var hCt=s(TH);Zbr=r(hCt,"TFConvNextForImageClassification"),hCt.forEach(t),e2r=r(VPe," (ConvNeXT model)"),VPe.forEach(t),o2r=i(WA),UM=n(WA,"LI",{});var XPe=s(UM);hve=n(XPe,"STRONG",{});var pCt=s(hve);r2r=r(pCt,"data2vec-vision"),pCt.forEach(t),t2r=r(XPe," \u2014 "),MH=n(XPe,"A",{href:!0});var _Ct=s(MH);a2r=r(_Ct,"TFData2VecVisionForImageClassification"),_Ct.forEach(t),n2r=r(XPe," (Data2VecVision model)"),XPe.forEach(t),s2r=i(WA),JM=n(WA,"LI",{});var zPe=s(JM);pve=n(zPe,"STRONG",{});var uCt=s(pve);l2r=r(uCt,"swin"),uCt.forEach(t),i2r=r(zPe," \u2014 "),EH=n(zPe,"A",{href:!0});var bCt=s(EH);d2r=r(bCt,"TFSwinForImageClassification"),bCt.forEach(t),c2r=r(zPe," (Swin Transformer model)"),zPe.forEach(t),f2r=i(WA),YM=n(WA,"LI",{});var WPe=s(YM);_ve=n(WPe,"STRONG",{});var vCt=s(_ve);m2r=r(vCt,"vit"),vCt.forEach(t),g2r=r(WPe," \u2014 "),CH=n(WPe,"A",{href:!0});var FCt=s(CH);h2r=r(FCt,"TFViTForImageClassification"),FCt.forEach(t),p2r=r(WPe," (ViT model)"),WPe.forEach(t),WA.forEach(t),_2r=i(Ml),T(KM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),pDe=i(f),oc=n(f,"H2",{class:!0});var TOe=s(oc);ZM=n(TOe,"A",{id:!0,class:!0,href:!0});var TCt=s(ZM);uve=n(TCt,"SPAN",{});var MCt=s(uve);T(O8.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),u2r=i(TOe),bve=n(TOe,"SPAN",{});var ECt=s(bve);b2r=r(ECt,"TFAutoModelForMaskedLM"),ECt.forEach(t),TOe.forEach(t),_De=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(V8.$$.fragment,El),v2r=i(El),rc=n(El,"P",{});var Hee=s(rc);F2r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wH=n(Hee,"A",{href:!0});var CCt=s(wH);T2r=r(CCt,"from_pretrained()"),CCt.forEach(t),M2r=r(Hee," class method or the "),AH=n(Hee,"A",{href:!0});var wCt=s(AH);E2r=r(wCt,"from_config()"),wCt.forEach(t),C2r=r(Hee,` class
method.`),Hee.forEach(t),w2r=i(El),X8=n(El,"P",{});var MOe=s(X8);A2r=r(MOe,"This class cannot be instantiated directly using "),vve=n(MOe,"CODE",{});var ACt=s(vve);L2r=r(ACt,"__init__()"),ACt.forEach(t),y2r=r(MOe," (throws an error)."),MOe.forEach(t),x2r=i(El),kt=n(El,"DIV",{class:!0});var QA=s(kt);T(z8.$$.fragment,QA),$2r=i(QA),Fve=n(QA,"P",{});var LCt=s(Fve);k2r=r(LCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LCt.forEach(t),S2r=i(QA),tc=n(QA,"P",{});var Uee=s(tc);R2r=r(Uee,`Note:
Loading a model from its configuration file does `),Tve=n(Uee,"STRONG",{});var yCt=s(Tve);P2r=r(yCt,"not"),yCt.forEach(t),B2r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(Uee,"A",{href:!0});var xCt=s(LH);I2r=r(xCt,"from_pretrained()"),xCt.forEach(t),N2r=r(Uee," to load the model weights."),Uee.forEach(t),q2r=i(QA),T(e4.$$.fragment,QA),QA.forEach(t),j2r=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(W8.$$.fragment,Cl),D2r=i(Cl),Mve=n(Cl,"P",{});var $Ct=s(Mve);G2r=r($Ct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Ct.forEach(t),O2r=i(Cl),tn=n(Cl,"P",{});var HA=s(tn);V2r=r(HA,"The model class to instantiate is selected based on the "),Eve=n(HA,"CODE",{});var kCt=s(Eve);X2r=r(kCt,"model_type"),kCt.forEach(t),z2r=r(HA,` property of the config object (either
passed as an argument or loaded from `),Cve=n(HA,"CODE",{});var SCt=s(Cve);W2r=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),Q2r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(HA,"CODE",{});var RCt=s(wve);H2r=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),U2r=r(HA,":"),HA.forEach(t),J2r=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);o4=n(fe,"LI",{});var QPe=s(o4);Ave=n(QPe,"STRONG",{});var PCt=s(Ave);Y2r=r(PCt,"albert"),PCt.forEach(t),K2r=r(QPe," \u2014 "),yH=n(QPe,"A",{href:!0});var BCt=s(yH);Z2r=r(BCt,"TFAlbertForMaskedLM"),BCt.forEach(t),evr=r(QPe," (ALBERT model)"),QPe.forEach(t),ovr=i(fe),r4=n(fe,"LI",{});var HPe=s(r4);Lve=n(HPe,"STRONG",{});var ICt=s(Lve);rvr=r(ICt,"bert"),ICt.forEach(t),tvr=r(HPe," \u2014 "),xH=n(HPe,"A",{href:!0});var NCt=s(xH);avr=r(NCt,"TFBertForMaskedLM"),NCt.forEach(t),nvr=r(HPe," (BERT model)"),HPe.forEach(t),svr=i(fe),t4=n(fe,"LI",{});var UPe=s(t4);yve=n(UPe,"STRONG",{});var qCt=s(yve);lvr=r(qCt,"camembert"),qCt.forEach(t),ivr=r(UPe," \u2014 "),$H=n(UPe,"A",{href:!0});var jCt=s($H);dvr=r(jCt,"TFCamembertForMaskedLM"),jCt.forEach(t),cvr=r(UPe," (CamemBERT model)"),UPe.forEach(t),fvr=i(fe),a4=n(fe,"LI",{});var JPe=s(a4);xve=n(JPe,"STRONG",{});var DCt=s(xve);mvr=r(DCt,"convbert"),DCt.forEach(t),gvr=r(JPe," \u2014 "),kH=n(JPe,"A",{href:!0});var GCt=s(kH);hvr=r(GCt,"TFConvBertForMaskedLM"),GCt.forEach(t),pvr=r(JPe," (ConvBERT model)"),JPe.forEach(t),_vr=i(fe),n4=n(fe,"LI",{});var YPe=s(n4);$ve=n(YPe,"STRONG",{});var OCt=s($ve);uvr=r(OCt,"deberta"),OCt.forEach(t),bvr=r(YPe," \u2014 "),SH=n(YPe,"A",{href:!0});var VCt=s(SH);vvr=r(VCt,"TFDebertaForMaskedLM"),VCt.forEach(t),Fvr=r(YPe," (DeBERTa model)"),YPe.forEach(t),Tvr=i(fe),s4=n(fe,"LI",{});var KPe=s(s4);kve=n(KPe,"STRONG",{});var XCt=s(kve);Mvr=r(XCt,"deberta-v2"),XCt.forEach(t),Evr=r(KPe," \u2014 "),RH=n(KPe,"A",{href:!0});var zCt=s(RH);Cvr=r(zCt,"TFDebertaV2ForMaskedLM"),zCt.forEach(t),wvr=r(KPe," (DeBERTa-v2 model)"),KPe.forEach(t),Avr=i(fe),l4=n(fe,"LI",{});var ZPe=s(l4);Sve=n(ZPe,"STRONG",{});var WCt=s(Sve);Lvr=r(WCt,"distilbert"),WCt.forEach(t),yvr=r(ZPe," \u2014 "),PH=n(ZPe,"A",{href:!0});var QCt=s(PH);xvr=r(QCt,"TFDistilBertForMaskedLM"),QCt.forEach(t),$vr=r(ZPe," (DistilBERT model)"),ZPe.forEach(t),kvr=i(fe),i4=n(fe,"LI",{});var eBe=s(i4);Rve=n(eBe,"STRONG",{});var HCt=s(Rve);Svr=r(HCt,"electra"),HCt.forEach(t),Rvr=r(eBe," \u2014 "),BH=n(eBe,"A",{href:!0});var UCt=s(BH);Pvr=r(UCt,"TFElectraForMaskedLM"),UCt.forEach(t),Bvr=r(eBe," (ELECTRA model)"),eBe.forEach(t),Ivr=i(fe),d4=n(fe,"LI",{});var oBe=s(d4);Pve=n(oBe,"STRONG",{});var JCt=s(Pve);Nvr=r(JCt,"flaubert"),JCt.forEach(t),qvr=r(oBe," \u2014 "),IH=n(oBe,"A",{href:!0});var YCt=s(IH);jvr=r(YCt,"TFFlaubertWithLMHeadModel"),YCt.forEach(t),Dvr=r(oBe," (FlauBERT model)"),oBe.forEach(t),Gvr=i(fe),c4=n(fe,"LI",{});var rBe=s(c4);Bve=n(rBe,"STRONG",{});var KCt=s(Bve);Ovr=r(KCt,"funnel"),KCt.forEach(t),Vvr=r(rBe," \u2014 "),NH=n(rBe,"A",{href:!0});var ZCt=s(NH);Xvr=r(ZCt,"TFFunnelForMaskedLM"),ZCt.forEach(t),zvr=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),Wvr=i(fe),f4=n(fe,"LI",{});var tBe=s(f4);Ive=n(tBe,"STRONG",{});var e5t=s(Ive);Qvr=r(e5t,"layoutlm"),e5t.forEach(t),Hvr=r(tBe," \u2014 "),qH=n(tBe,"A",{href:!0});var o5t=s(qH);Uvr=r(o5t,"TFLayoutLMForMaskedLM"),o5t.forEach(t),Jvr=r(tBe," (LayoutLM model)"),tBe.forEach(t),Yvr=i(fe),m4=n(fe,"LI",{});var aBe=s(m4);Nve=n(aBe,"STRONG",{});var r5t=s(Nve);Kvr=r(r5t,"longformer"),r5t.forEach(t),Zvr=r(aBe," \u2014 "),jH=n(aBe,"A",{href:!0});var t5t=s(jH);eFr=r(t5t,"TFLongformerForMaskedLM"),t5t.forEach(t),oFr=r(aBe," (Longformer model)"),aBe.forEach(t),rFr=i(fe),g4=n(fe,"LI",{});var nBe=s(g4);qve=n(nBe,"STRONG",{});var a5t=s(qve);tFr=r(a5t,"mobilebert"),a5t.forEach(t),aFr=r(nBe," \u2014 "),DH=n(nBe,"A",{href:!0});var n5t=s(DH);nFr=r(n5t,"TFMobileBertForMaskedLM"),n5t.forEach(t),sFr=r(nBe," (MobileBERT model)"),nBe.forEach(t),lFr=i(fe),h4=n(fe,"LI",{});var sBe=s(h4);jve=n(sBe,"STRONG",{});var s5t=s(jve);iFr=r(s5t,"mpnet"),s5t.forEach(t),dFr=r(sBe," \u2014 "),GH=n(sBe,"A",{href:!0});var l5t=s(GH);cFr=r(l5t,"TFMPNetForMaskedLM"),l5t.forEach(t),fFr=r(sBe," (MPNet model)"),sBe.forEach(t),mFr=i(fe),p4=n(fe,"LI",{});var lBe=s(p4);Dve=n(lBe,"STRONG",{});var i5t=s(Dve);gFr=r(i5t,"rembert"),i5t.forEach(t),hFr=r(lBe," \u2014 "),OH=n(lBe,"A",{href:!0});var d5t=s(OH);pFr=r(d5t,"TFRemBertForMaskedLM"),d5t.forEach(t),_Fr=r(lBe," (RemBERT model)"),lBe.forEach(t),uFr=i(fe),_4=n(fe,"LI",{});var iBe=s(_4);Gve=n(iBe,"STRONG",{});var c5t=s(Gve);bFr=r(c5t,"roberta"),c5t.forEach(t),vFr=r(iBe," \u2014 "),VH=n(iBe,"A",{href:!0});var f5t=s(VH);FFr=r(f5t,"TFRobertaForMaskedLM"),f5t.forEach(t),TFr=r(iBe," (RoBERTa model)"),iBe.forEach(t),MFr=i(fe),u4=n(fe,"LI",{});var dBe=s(u4);Ove=n(dBe,"STRONG",{});var m5t=s(Ove);EFr=r(m5t,"roformer"),m5t.forEach(t),CFr=r(dBe," \u2014 "),XH=n(dBe,"A",{href:!0});var g5t=s(XH);wFr=r(g5t,"TFRoFormerForMaskedLM"),g5t.forEach(t),AFr=r(dBe," (RoFormer model)"),dBe.forEach(t),LFr=i(fe),b4=n(fe,"LI",{});var cBe=s(b4);Vve=n(cBe,"STRONG",{});var h5t=s(Vve);yFr=r(h5t,"tapas"),h5t.forEach(t),xFr=r(cBe," \u2014 "),zH=n(cBe,"A",{href:!0});var p5t=s(zH);$Fr=r(p5t,"TFTapasForMaskedLM"),p5t.forEach(t),kFr=r(cBe," (TAPAS model)"),cBe.forEach(t),SFr=i(fe),v4=n(fe,"LI",{});var fBe=s(v4);Xve=n(fBe,"STRONG",{});var _5t=s(Xve);RFr=r(_5t,"xlm"),_5t.forEach(t),PFr=r(fBe," \u2014 "),WH=n(fBe,"A",{href:!0});var u5t=s(WH);BFr=r(u5t,"TFXLMWithLMHeadModel"),u5t.forEach(t),IFr=r(fBe," (XLM model)"),fBe.forEach(t),NFr=i(fe),F4=n(fe,"LI",{});var mBe=s(F4);zve=n(mBe,"STRONG",{});var b5t=s(zve);qFr=r(b5t,"xlm-roberta"),b5t.forEach(t),jFr=r(mBe," \u2014 "),QH=n(mBe,"A",{href:!0});var v5t=s(QH);DFr=r(v5t,"TFXLMRobertaForMaskedLM"),v5t.forEach(t),GFr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),fe.forEach(t),OFr=i(Cl),T(T4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),uDe=i(f),ac=n(f,"H2",{class:!0});var EOe=s(ac);M4=n(EOe,"A",{id:!0,class:!0,href:!0});var F5t=s(M4);Wve=n(F5t,"SPAN",{});var T5t=s(Wve);T(Q8.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),VFr=i(EOe),Qve=n(EOe,"SPAN",{});var M5t=s(Qve);XFr=r(M5t,"TFAutoModelForSeq2SeqLM"),M5t.forEach(t),EOe.forEach(t),bDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(H8.$$.fragment,wl),zFr=i(wl),nc=n(wl,"P",{});var Jee=s(nc);WFr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HH=n(Jee,"A",{href:!0});var E5t=s(HH);QFr=r(E5t,"from_pretrained()"),E5t.forEach(t),HFr=r(Jee," class method or the "),UH=n(Jee,"A",{href:!0});var C5t=s(UH);UFr=r(C5t,"from_config()"),C5t.forEach(t),JFr=r(Jee,` class
method.`),Jee.forEach(t),YFr=i(wl),U8=n(wl,"P",{});var COe=s(U8);KFr=r(COe,"This class cannot be instantiated directly using "),Hve=n(COe,"CODE",{});var w5t=s(Hve);ZFr=r(w5t,"__init__()"),w5t.forEach(t),eTr=r(COe," (throws an error)."),COe.forEach(t),oTr=i(wl),St=n(wl,"DIV",{class:!0});var UA=s(St);T(J8.$$.fragment,UA),rTr=i(UA),Uve=n(UA,"P",{});var A5t=s(Uve);tTr=r(A5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A5t.forEach(t),aTr=i(UA),sc=n(UA,"P",{});var Yee=s(sc);nTr=r(Yee,`Note:
Loading a model from its configuration file does `),Jve=n(Yee,"STRONG",{});var L5t=s(Jve);sTr=r(L5t,"not"),L5t.forEach(t),lTr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Yee,"A",{href:!0});var y5t=s(JH);iTr=r(y5t,"from_pretrained()"),y5t.forEach(t),dTr=r(Yee," to load the model weights."),Yee.forEach(t),cTr=i(UA),T(E4.$$.fragment,UA),UA.forEach(t),fTr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(Y8.$$.fragment,Al),mTr=i(Al),Yve=n(Al,"P",{});var x5t=s(Yve);gTr=r(x5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x5t.forEach(t),hTr=i(Al),an=n(Al,"P",{});var JA=s(an);pTr=r(JA,"The model class to instantiate is selected based on the "),Kve=n(JA,"CODE",{});var $5t=s(Kve);_Tr=r($5t,"model_type"),$5t.forEach(t),uTr=r(JA,` property of the config object (either
passed as an argument or loaded from `),Zve=n(JA,"CODE",{});var k5t=s(Zve);bTr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),vTr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(JA,"CODE",{});var S5t=s(eFe);FTr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),TTr=r(JA,":"),JA.forEach(t),MTr=i(Al),Le=n(Al,"UL",{});var Be=s(Le);C4=n(Be,"LI",{});var gBe=s(C4);oFe=n(gBe,"STRONG",{});var R5t=s(oFe);ETr=r(R5t,"bart"),R5t.forEach(t),CTr=r(gBe," \u2014 "),YH=n(gBe,"A",{href:!0});var P5t=s(YH);wTr=r(P5t,"TFBartForConditionalGeneration"),P5t.forEach(t),ATr=r(gBe," (BART model)"),gBe.forEach(t),LTr=i(Be),w4=n(Be,"LI",{});var hBe=s(w4);rFe=n(hBe,"STRONG",{});var B5t=s(rFe);yTr=r(B5t,"blenderbot"),B5t.forEach(t),xTr=r(hBe," \u2014 "),KH=n(hBe,"A",{href:!0});var I5t=s(KH);$Tr=r(I5t,"TFBlenderbotForConditionalGeneration"),I5t.forEach(t),kTr=r(hBe," (Blenderbot model)"),hBe.forEach(t),STr=i(Be),A4=n(Be,"LI",{});var pBe=s(A4);tFe=n(pBe,"STRONG",{});var N5t=s(tFe);RTr=r(N5t,"blenderbot-small"),N5t.forEach(t),PTr=r(pBe," \u2014 "),ZH=n(pBe,"A",{href:!0});var q5t=s(ZH);BTr=r(q5t,"TFBlenderbotSmallForConditionalGeneration"),q5t.forEach(t),ITr=r(pBe," (BlenderbotSmall model)"),pBe.forEach(t),NTr=i(Be),L4=n(Be,"LI",{});var _Be=s(L4);aFe=n(_Be,"STRONG",{});var j5t=s(aFe);qTr=r(j5t,"encoder-decoder"),j5t.forEach(t),jTr=r(_Be," \u2014 "),eU=n(_Be,"A",{href:!0});var D5t=s(eU);DTr=r(D5t,"TFEncoderDecoderModel"),D5t.forEach(t),GTr=r(_Be," (Encoder decoder model)"),_Be.forEach(t),OTr=i(Be),y4=n(Be,"LI",{});var uBe=s(y4);nFe=n(uBe,"STRONG",{});var G5t=s(nFe);VTr=r(G5t,"led"),G5t.forEach(t),XTr=r(uBe," \u2014 "),oU=n(uBe,"A",{href:!0});var O5t=s(oU);zTr=r(O5t,"TFLEDForConditionalGeneration"),O5t.forEach(t),WTr=r(uBe," (LED model)"),uBe.forEach(t),QTr=i(Be),x4=n(Be,"LI",{});var bBe=s(x4);sFe=n(bBe,"STRONG",{});var V5t=s(sFe);HTr=r(V5t,"marian"),V5t.forEach(t),UTr=r(bBe," \u2014 "),rU=n(bBe,"A",{href:!0});var X5t=s(rU);JTr=r(X5t,"TFMarianMTModel"),X5t.forEach(t),YTr=r(bBe," (Marian model)"),bBe.forEach(t),KTr=i(Be),$4=n(Be,"LI",{});var vBe=s($4);lFe=n(vBe,"STRONG",{});var z5t=s(lFe);ZTr=r(z5t,"mbart"),z5t.forEach(t),e7r=r(vBe," \u2014 "),tU=n(vBe,"A",{href:!0});var W5t=s(tU);o7r=r(W5t,"TFMBartForConditionalGeneration"),W5t.forEach(t),r7r=r(vBe," (mBART model)"),vBe.forEach(t),t7r=i(Be),k4=n(Be,"LI",{});var FBe=s(k4);iFe=n(FBe,"STRONG",{});var Q5t=s(iFe);a7r=r(Q5t,"mt5"),Q5t.forEach(t),n7r=r(FBe," \u2014 "),aU=n(FBe,"A",{href:!0});var H5t=s(aU);s7r=r(H5t,"TFMT5ForConditionalGeneration"),H5t.forEach(t),l7r=r(FBe," (MT5 model)"),FBe.forEach(t),i7r=i(Be),S4=n(Be,"LI",{});var TBe=s(S4);dFe=n(TBe,"STRONG",{});var U5t=s(dFe);d7r=r(U5t,"pegasus"),U5t.forEach(t),c7r=r(TBe," \u2014 "),nU=n(TBe,"A",{href:!0});var J5t=s(nU);f7r=r(J5t,"TFPegasusForConditionalGeneration"),J5t.forEach(t),m7r=r(TBe," (Pegasus model)"),TBe.forEach(t),g7r=i(Be),R4=n(Be,"LI",{});var MBe=s(R4);cFe=n(MBe,"STRONG",{});var Y5t=s(cFe);h7r=r(Y5t,"t5"),Y5t.forEach(t),p7r=r(MBe," \u2014 "),sU=n(MBe,"A",{href:!0});var K5t=s(sU);_7r=r(K5t,"TFT5ForConditionalGeneration"),K5t.forEach(t),u7r=r(MBe," (T5 model)"),MBe.forEach(t),Be.forEach(t),b7r=i(Al),T(P4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),vDe=i(f),lc=n(f,"H2",{class:!0});var wOe=s(lc);B4=n(wOe,"A",{id:!0,class:!0,href:!0});var Z5t=s(B4);fFe=n(Z5t,"SPAN",{});var e0t=s(fFe);T(K8.$$.fragment,e0t),e0t.forEach(t),Z5t.forEach(t),v7r=i(wOe),mFe=n(wOe,"SPAN",{});var o0t=s(mFe);F7r=r(o0t,"TFAutoModelForSequenceClassification"),o0t.forEach(t),wOe.forEach(t),FDe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(Z8.$$.fragment,Ll),T7r=i(Ll),ic=n(Ll,"P",{});var Kee=s(ic);M7r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lU=n(Kee,"A",{href:!0});var r0t=s(lU);E7r=r(r0t,"from_pretrained()"),r0t.forEach(t),C7r=r(Kee," class method or the "),iU=n(Kee,"A",{href:!0});var t0t=s(iU);w7r=r(t0t,"from_config()"),t0t.forEach(t),A7r=r(Kee,` class
method.`),Kee.forEach(t),L7r=i(Ll),e9=n(Ll,"P",{});var AOe=s(e9);y7r=r(AOe,"This class cannot be instantiated directly using "),gFe=n(AOe,"CODE",{});var a0t=s(gFe);x7r=r(a0t,"__init__()"),a0t.forEach(t),$7r=r(AOe," (throws an error)."),AOe.forEach(t),k7r=i(Ll),Rt=n(Ll,"DIV",{class:!0});var YA=s(Rt);T(o9.$$.fragment,YA),S7r=i(YA),hFe=n(YA,"P",{});var n0t=s(hFe);R7r=r(n0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n0t.forEach(t),P7r=i(YA),dc=n(YA,"P",{});var Zee=s(dc);B7r=r(Zee,`Note:
Loading a model from its configuration file does `),pFe=n(Zee,"STRONG",{});var s0t=s(pFe);I7r=r(s0t,"not"),s0t.forEach(t),N7r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Zee,"A",{href:!0});var l0t=s(dU);q7r=r(l0t,"from_pretrained()"),l0t.forEach(t),j7r=r(Zee," to load the model weights."),Zee.forEach(t),D7r=i(YA),T(I4.$$.fragment,YA),YA.forEach(t),G7r=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(r9.$$.fragment,yl),O7r=i(yl),_Fe=n(yl,"P",{});var i0t=s(_Fe);V7r=r(i0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i0t.forEach(t),X7r=i(yl),nn=n(yl,"P",{});var KA=s(nn);z7r=r(KA,"The model class to instantiate is selected based on the "),uFe=n(KA,"CODE",{});var d0t=s(uFe);W7r=r(d0t,"model_type"),d0t.forEach(t),Q7r=r(KA,` property of the config object (either
passed as an argument or loaded from `),bFe=n(KA,"CODE",{});var c0t=s(bFe);H7r=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),U7r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(KA,"CODE",{});var f0t=s(vFe);J7r=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),Y7r=r(KA,":"),KA.forEach(t),K7r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);N4=n(ae,"LI",{});var EBe=s(N4);FFe=n(EBe,"STRONG",{});var m0t=s(FFe);Z7r=r(m0t,"albert"),m0t.forEach(t),eMr=r(EBe," \u2014 "),cU=n(EBe,"A",{href:!0});var g0t=s(cU);oMr=r(g0t,"TFAlbertForSequenceClassification"),g0t.forEach(t),rMr=r(EBe," (ALBERT model)"),EBe.forEach(t),tMr=i(ae),q4=n(ae,"LI",{});var CBe=s(q4);TFe=n(CBe,"STRONG",{});var h0t=s(TFe);aMr=r(h0t,"bert"),h0t.forEach(t),nMr=r(CBe," \u2014 "),fU=n(CBe,"A",{href:!0});var p0t=s(fU);sMr=r(p0t,"TFBertForSequenceClassification"),p0t.forEach(t),lMr=r(CBe," (BERT model)"),CBe.forEach(t),iMr=i(ae),j4=n(ae,"LI",{});var wBe=s(j4);MFe=n(wBe,"STRONG",{});var _0t=s(MFe);dMr=r(_0t,"camembert"),_0t.forEach(t),cMr=r(wBe," \u2014 "),mU=n(wBe,"A",{href:!0});var u0t=s(mU);fMr=r(u0t,"TFCamembertForSequenceClassification"),u0t.forEach(t),mMr=r(wBe," (CamemBERT model)"),wBe.forEach(t),gMr=i(ae),D4=n(ae,"LI",{});var ABe=s(D4);EFe=n(ABe,"STRONG",{});var b0t=s(EFe);hMr=r(b0t,"convbert"),b0t.forEach(t),pMr=r(ABe," \u2014 "),gU=n(ABe,"A",{href:!0});var v0t=s(gU);_Mr=r(v0t,"TFConvBertForSequenceClassification"),v0t.forEach(t),uMr=r(ABe," (ConvBERT model)"),ABe.forEach(t),bMr=i(ae),G4=n(ae,"LI",{});var LBe=s(G4);CFe=n(LBe,"STRONG",{});var F0t=s(CFe);vMr=r(F0t,"ctrl"),F0t.forEach(t),FMr=r(LBe," \u2014 "),hU=n(LBe,"A",{href:!0});var T0t=s(hU);TMr=r(T0t,"TFCTRLForSequenceClassification"),T0t.forEach(t),MMr=r(LBe," (CTRL model)"),LBe.forEach(t),EMr=i(ae),O4=n(ae,"LI",{});var yBe=s(O4);wFe=n(yBe,"STRONG",{});var M0t=s(wFe);CMr=r(M0t,"deberta"),M0t.forEach(t),wMr=r(yBe," \u2014 "),pU=n(yBe,"A",{href:!0});var E0t=s(pU);AMr=r(E0t,"TFDebertaForSequenceClassification"),E0t.forEach(t),LMr=r(yBe," (DeBERTa model)"),yBe.forEach(t),yMr=i(ae),V4=n(ae,"LI",{});var xBe=s(V4);AFe=n(xBe,"STRONG",{});var C0t=s(AFe);xMr=r(C0t,"deberta-v2"),C0t.forEach(t),$Mr=r(xBe," \u2014 "),_U=n(xBe,"A",{href:!0});var w0t=s(_U);kMr=r(w0t,"TFDebertaV2ForSequenceClassification"),w0t.forEach(t),SMr=r(xBe," (DeBERTa-v2 model)"),xBe.forEach(t),RMr=i(ae),X4=n(ae,"LI",{});var $Be=s(X4);LFe=n($Be,"STRONG",{});var A0t=s(LFe);PMr=r(A0t,"distilbert"),A0t.forEach(t),BMr=r($Be," \u2014 "),uU=n($Be,"A",{href:!0});var L0t=s(uU);IMr=r(L0t,"TFDistilBertForSequenceClassification"),L0t.forEach(t),NMr=r($Be," (DistilBERT model)"),$Be.forEach(t),qMr=i(ae),z4=n(ae,"LI",{});var kBe=s(z4);yFe=n(kBe,"STRONG",{});var y0t=s(yFe);jMr=r(y0t,"electra"),y0t.forEach(t),DMr=r(kBe," \u2014 "),bU=n(kBe,"A",{href:!0});var x0t=s(bU);GMr=r(x0t,"TFElectraForSequenceClassification"),x0t.forEach(t),OMr=r(kBe," (ELECTRA model)"),kBe.forEach(t),VMr=i(ae),W4=n(ae,"LI",{});var SBe=s(W4);xFe=n(SBe,"STRONG",{});var $0t=s(xFe);XMr=r($0t,"flaubert"),$0t.forEach(t),zMr=r(SBe," \u2014 "),vU=n(SBe,"A",{href:!0});var k0t=s(vU);WMr=r(k0t,"TFFlaubertForSequenceClassification"),k0t.forEach(t),QMr=r(SBe," (FlauBERT model)"),SBe.forEach(t),HMr=i(ae),Q4=n(ae,"LI",{});var RBe=s(Q4);$Fe=n(RBe,"STRONG",{});var S0t=s($Fe);UMr=r(S0t,"funnel"),S0t.forEach(t),JMr=r(RBe," \u2014 "),FU=n(RBe,"A",{href:!0});var R0t=s(FU);YMr=r(R0t,"TFFunnelForSequenceClassification"),R0t.forEach(t),KMr=r(RBe," (Funnel Transformer model)"),RBe.forEach(t),ZMr=i(ae),H4=n(ae,"LI",{});var PBe=s(H4);kFe=n(PBe,"STRONG",{});var P0t=s(kFe);e4r=r(P0t,"gpt2"),P0t.forEach(t),o4r=r(PBe," \u2014 "),TU=n(PBe,"A",{href:!0});var B0t=s(TU);r4r=r(B0t,"TFGPT2ForSequenceClassification"),B0t.forEach(t),t4r=r(PBe," (OpenAI GPT-2 model)"),PBe.forEach(t),a4r=i(ae),U4=n(ae,"LI",{});var BBe=s(U4);SFe=n(BBe,"STRONG",{});var I0t=s(SFe);n4r=r(I0t,"gptj"),I0t.forEach(t),s4r=r(BBe," \u2014 "),MU=n(BBe,"A",{href:!0});var N0t=s(MU);l4r=r(N0t,"TFGPTJForSequenceClassification"),N0t.forEach(t),i4r=r(BBe," (GPT-J model)"),BBe.forEach(t),d4r=i(ae),J4=n(ae,"LI",{});var IBe=s(J4);RFe=n(IBe,"STRONG",{});var q0t=s(RFe);c4r=r(q0t,"layoutlm"),q0t.forEach(t),f4r=r(IBe," \u2014 "),EU=n(IBe,"A",{href:!0});var j0t=s(EU);m4r=r(j0t,"TFLayoutLMForSequenceClassification"),j0t.forEach(t),g4r=r(IBe," (LayoutLM model)"),IBe.forEach(t),h4r=i(ae),Y4=n(ae,"LI",{});var NBe=s(Y4);PFe=n(NBe,"STRONG",{});var D0t=s(PFe);p4r=r(D0t,"longformer"),D0t.forEach(t),_4r=r(NBe," \u2014 "),CU=n(NBe,"A",{href:!0});var G0t=s(CU);u4r=r(G0t,"TFLongformerForSequenceClassification"),G0t.forEach(t),b4r=r(NBe," (Longformer model)"),NBe.forEach(t),v4r=i(ae),K4=n(ae,"LI",{});var qBe=s(K4);BFe=n(qBe,"STRONG",{});var O0t=s(BFe);F4r=r(O0t,"mobilebert"),O0t.forEach(t),T4r=r(qBe," \u2014 "),wU=n(qBe,"A",{href:!0});var V0t=s(wU);M4r=r(V0t,"TFMobileBertForSequenceClassification"),V0t.forEach(t),E4r=r(qBe," (MobileBERT model)"),qBe.forEach(t),C4r=i(ae),Z4=n(ae,"LI",{});var jBe=s(Z4);IFe=n(jBe,"STRONG",{});var X0t=s(IFe);w4r=r(X0t,"mpnet"),X0t.forEach(t),A4r=r(jBe," \u2014 "),AU=n(jBe,"A",{href:!0});var z0t=s(AU);L4r=r(z0t,"TFMPNetForSequenceClassification"),z0t.forEach(t),y4r=r(jBe," (MPNet model)"),jBe.forEach(t),x4r=i(ae),eE=n(ae,"LI",{});var DBe=s(eE);NFe=n(DBe,"STRONG",{});var W0t=s(NFe);$4r=r(W0t,"openai-gpt"),W0t.forEach(t),k4r=r(DBe," \u2014 "),LU=n(DBe,"A",{href:!0});var Q0t=s(LU);S4r=r(Q0t,"TFOpenAIGPTForSequenceClassification"),Q0t.forEach(t),R4r=r(DBe," (OpenAI GPT model)"),DBe.forEach(t),P4r=i(ae),oE=n(ae,"LI",{});var GBe=s(oE);qFe=n(GBe,"STRONG",{});var H0t=s(qFe);B4r=r(H0t,"rembert"),H0t.forEach(t),I4r=r(GBe," \u2014 "),yU=n(GBe,"A",{href:!0});var U0t=s(yU);N4r=r(U0t,"TFRemBertForSequenceClassification"),U0t.forEach(t),q4r=r(GBe," (RemBERT model)"),GBe.forEach(t),j4r=i(ae),rE=n(ae,"LI",{});var OBe=s(rE);jFe=n(OBe,"STRONG",{});var J0t=s(jFe);D4r=r(J0t,"roberta"),J0t.forEach(t),G4r=r(OBe," \u2014 "),xU=n(OBe,"A",{href:!0});var Y0t=s(xU);O4r=r(Y0t,"TFRobertaForSequenceClassification"),Y0t.forEach(t),V4r=r(OBe," (RoBERTa model)"),OBe.forEach(t),X4r=i(ae),tE=n(ae,"LI",{});var VBe=s(tE);DFe=n(VBe,"STRONG",{});var K0t=s(DFe);z4r=r(K0t,"roformer"),K0t.forEach(t),W4r=r(VBe," \u2014 "),$U=n(VBe,"A",{href:!0});var Z0t=s($U);Q4r=r(Z0t,"TFRoFormerForSequenceClassification"),Z0t.forEach(t),H4r=r(VBe," (RoFormer model)"),VBe.forEach(t),U4r=i(ae),aE=n(ae,"LI",{});var XBe=s(aE);GFe=n(XBe,"STRONG",{});var ewt=s(GFe);J4r=r(ewt,"tapas"),ewt.forEach(t),Y4r=r(XBe," \u2014 "),kU=n(XBe,"A",{href:!0});var owt=s(kU);K4r=r(owt,"TFTapasForSequenceClassification"),owt.forEach(t),Z4r=r(XBe," (TAPAS model)"),XBe.forEach(t),eEr=i(ae),nE=n(ae,"LI",{});var zBe=s(nE);OFe=n(zBe,"STRONG",{});var rwt=s(OFe);oEr=r(rwt,"transfo-xl"),rwt.forEach(t),rEr=r(zBe," \u2014 "),SU=n(zBe,"A",{href:!0});var twt=s(SU);tEr=r(twt,"TFTransfoXLForSequenceClassification"),twt.forEach(t),aEr=r(zBe," (Transformer-XL model)"),zBe.forEach(t),nEr=i(ae),sE=n(ae,"LI",{});var WBe=s(sE);VFe=n(WBe,"STRONG",{});var awt=s(VFe);sEr=r(awt,"xlm"),awt.forEach(t),lEr=r(WBe," \u2014 "),RU=n(WBe,"A",{href:!0});var nwt=s(RU);iEr=r(nwt,"TFXLMForSequenceClassification"),nwt.forEach(t),dEr=r(WBe," (XLM model)"),WBe.forEach(t),cEr=i(ae),lE=n(ae,"LI",{});var QBe=s(lE);XFe=n(QBe,"STRONG",{});var swt=s(XFe);fEr=r(swt,"xlm-roberta"),swt.forEach(t),mEr=r(QBe," \u2014 "),PU=n(QBe,"A",{href:!0});var lwt=s(PU);gEr=r(lwt,"TFXLMRobertaForSequenceClassification"),lwt.forEach(t),hEr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),pEr=i(ae),iE=n(ae,"LI",{});var HBe=s(iE);zFe=n(HBe,"STRONG",{});var iwt=s(zFe);_Er=r(iwt,"xlnet"),iwt.forEach(t),uEr=r(HBe," \u2014 "),BU=n(HBe,"A",{href:!0});var dwt=s(BU);bEr=r(dwt,"TFXLNetForSequenceClassification"),dwt.forEach(t),vEr=r(HBe," (XLNet model)"),HBe.forEach(t),ae.forEach(t),FEr=i(yl),T(dE.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),TDe=i(f),cc=n(f,"H2",{class:!0});var LOe=s(cc);cE=n(LOe,"A",{id:!0,class:!0,href:!0});var cwt=s(cE);WFe=n(cwt,"SPAN",{});var fwt=s(WFe);T(t9.$$.fragment,fwt),fwt.forEach(t),cwt.forEach(t),TEr=i(LOe),QFe=n(LOe,"SPAN",{});var mwt=s(QFe);MEr=r(mwt,"TFAutoModelForMultipleChoice"),mwt.forEach(t),LOe.forEach(t),MDe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(a9.$$.fragment,xl),EEr=i(xl),fc=n(xl,"P",{});var eoe=s(fc);CEr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IU=n(eoe,"A",{href:!0});var gwt=s(IU);wEr=r(gwt,"from_pretrained()"),gwt.forEach(t),AEr=r(eoe," class method or the "),NU=n(eoe,"A",{href:!0});var hwt=s(NU);LEr=r(hwt,"from_config()"),hwt.forEach(t),yEr=r(eoe,` class
method.`),eoe.forEach(t),xEr=i(xl),n9=n(xl,"P",{});var yOe=s(n9);$Er=r(yOe,"This class cannot be instantiated directly using "),HFe=n(yOe,"CODE",{});var pwt=s(HFe);kEr=r(pwt,"__init__()"),pwt.forEach(t),SEr=r(yOe," (throws an error)."),yOe.forEach(t),REr=i(xl),Pt=n(xl,"DIV",{class:!0});var ZA=s(Pt);T(s9.$$.fragment,ZA),PEr=i(ZA),UFe=n(ZA,"P",{});var _wt=s(UFe);BEr=r(_wt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_wt.forEach(t),IEr=i(ZA),mc=n(ZA,"P",{});var ooe=s(mc);NEr=r(ooe,`Note:
Loading a model from its configuration file does `),JFe=n(ooe,"STRONG",{});var uwt=s(JFe);qEr=r(uwt,"not"),uwt.forEach(t),jEr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(ooe,"A",{href:!0});var bwt=s(qU);DEr=r(bwt,"from_pretrained()"),bwt.forEach(t),GEr=r(ooe," to load the model weights."),ooe.forEach(t),OEr=i(ZA),T(fE.$$.fragment,ZA),ZA.forEach(t),VEr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(l9.$$.fragment,$l),XEr=i($l),YFe=n($l,"P",{});var vwt=s(YFe);zEr=r(vwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vwt.forEach(t),WEr=i($l),sn=n($l,"P",{});var e6=s(sn);QEr=r(e6,"The model class to instantiate is selected based on the "),KFe=n(e6,"CODE",{});var Fwt=s(KFe);HEr=r(Fwt,"model_type"),Fwt.forEach(t),UEr=r(e6,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(e6,"CODE",{});var Twt=s(ZFe);JEr=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),YEr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(e6,"CODE",{});var Mwt=s(eTe);KEr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),ZEr=r(e6,":"),e6.forEach(t),eCr=i($l),pe=n($l,"UL",{});var be=s(pe);mE=n(be,"LI",{});var UBe=s(mE);oTe=n(UBe,"STRONG",{});var Ewt=s(oTe);oCr=r(Ewt,"albert"),Ewt.forEach(t),rCr=r(UBe," \u2014 "),jU=n(UBe,"A",{href:!0});var Cwt=s(jU);tCr=r(Cwt,"TFAlbertForMultipleChoice"),Cwt.forEach(t),aCr=r(UBe," (ALBERT model)"),UBe.forEach(t),nCr=i(be),gE=n(be,"LI",{});var JBe=s(gE);rTe=n(JBe,"STRONG",{});var wwt=s(rTe);sCr=r(wwt,"bert"),wwt.forEach(t),lCr=r(JBe," \u2014 "),DU=n(JBe,"A",{href:!0});var Awt=s(DU);iCr=r(Awt,"TFBertForMultipleChoice"),Awt.forEach(t),dCr=r(JBe," (BERT model)"),JBe.forEach(t),cCr=i(be),hE=n(be,"LI",{});var YBe=s(hE);tTe=n(YBe,"STRONG",{});var Lwt=s(tTe);fCr=r(Lwt,"camembert"),Lwt.forEach(t),mCr=r(YBe," \u2014 "),GU=n(YBe,"A",{href:!0});var ywt=s(GU);gCr=r(ywt,"TFCamembertForMultipleChoice"),ywt.forEach(t),hCr=r(YBe," (CamemBERT model)"),YBe.forEach(t),pCr=i(be),pE=n(be,"LI",{});var KBe=s(pE);aTe=n(KBe,"STRONG",{});var xwt=s(aTe);_Cr=r(xwt,"convbert"),xwt.forEach(t),uCr=r(KBe," \u2014 "),OU=n(KBe,"A",{href:!0});var $wt=s(OU);bCr=r($wt,"TFConvBertForMultipleChoice"),$wt.forEach(t),vCr=r(KBe," (ConvBERT model)"),KBe.forEach(t),FCr=i(be),_E=n(be,"LI",{});var ZBe=s(_E);nTe=n(ZBe,"STRONG",{});var kwt=s(nTe);TCr=r(kwt,"distilbert"),kwt.forEach(t),MCr=r(ZBe," \u2014 "),VU=n(ZBe,"A",{href:!0});var Swt=s(VU);ECr=r(Swt,"TFDistilBertForMultipleChoice"),Swt.forEach(t),CCr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),wCr=i(be),uE=n(be,"LI",{});var eIe=s(uE);sTe=n(eIe,"STRONG",{});var Rwt=s(sTe);ACr=r(Rwt,"electra"),Rwt.forEach(t),LCr=r(eIe," \u2014 "),XU=n(eIe,"A",{href:!0});var Pwt=s(XU);yCr=r(Pwt,"TFElectraForMultipleChoice"),Pwt.forEach(t),xCr=r(eIe," (ELECTRA model)"),eIe.forEach(t),$Cr=i(be),bE=n(be,"LI",{});var oIe=s(bE);lTe=n(oIe,"STRONG",{});var Bwt=s(lTe);kCr=r(Bwt,"flaubert"),Bwt.forEach(t),SCr=r(oIe," \u2014 "),zU=n(oIe,"A",{href:!0});var Iwt=s(zU);RCr=r(Iwt,"TFFlaubertForMultipleChoice"),Iwt.forEach(t),PCr=r(oIe," (FlauBERT model)"),oIe.forEach(t),BCr=i(be),vE=n(be,"LI",{});var rIe=s(vE);iTe=n(rIe,"STRONG",{});var Nwt=s(iTe);ICr=r(Nwt,"funnel"),Nwt.forEach(t),NCr=r(rIe," \u2014 "),WU=n(rIe,"A",{href:!0});var qwt=s(WU);qCr=r(qwt,"TFFunnelForMultipleChoice"),qwt.forEach(t),jCr=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),DCr=i(be),FE=n(be,"LI",{});var tIe=s(FE);dTe=n(tIe,"STRONG",{});var jwt=s(dTe);GCr=r(jwt,"longformer"),jwt.forEach(t),OCr=r(tIe," \u2014 "),QU=n(tIe,"A",{href:!0});var Dwt=s(QU);VCr=r(Dwt,"TFLongformerForMultipleChoice"),Dwt.forEach(t),XCr=r(tIe," (Longformer model)"),tIe.forEach(t),zCr=i(be),TE=n(be,"LI",{});var aIe=s(TE);cTe=n(aIe,"STRONG",{});var Gwt=s(cTe);WCr=r(Gwt,"mobilebert"),Gwt.forEach(t),QCr=r(aIe," \u2014 "),HU=n(aIe,"A",{href:!0});var Owt=s(HU);HCr=r(Owt,"TFMobileBertForMultipleChoice"),Owt.forEach(t),UCr=r(aIe," (MobileBERT model)"),aIe.forEach(t),JCr=i(be),ME=n(be,"LI",{});var nIe=s(ME);fTe=n(nIe,"STRONG",{});var Vwt=s(fTe);YCr=r(Vwt,"mpnet"),Vwt.forEach(t),KCr=r(nIe," \u2014 "),UU=n(nIe,"A",{href:!0});var Xwt=s(UU);ZCr=r(Xwt,"TFMPNetForMultipleChoice"),Xwt.forEach(t),e5r=r(nIe," (MPNet model)"),nIe.forEach(t),o5r=i(be),EE=n(be,"LI",{});var sIe=s(EE);mTe=n(sIe,"STRONG",{});var zwt=s(mTe);r5r=r(zwt,"rembert"),zwt.forEach(t),t5r=r(sIe," \u2014 "),JU=n(sIe,"A",{href:!0});var Wwt=s(JU);a5r=r(Wwt,"TFRemBertForMultipleChoice"),Wwt.forEach(t),n5r=r(sIe," (RemBERT model)"),sIe.forEach(t),s5r=i(be),CE=n(be,"LI",{});var lIe=s(CE);gTe=n(lIe,"STRONG",{});var Qwt=s(gTe);l5r=r(Qwt,"roberta"),Qwt.forEach(t),i5r=r(lIe," \u2014 "),YU=n(lIe,"A",{href:!0});var Hwt=s(YU);d5r=r(Hwt,"TFRobertaForMultipleChoice"),Hwt.forEach(t),c5r=r(lIe," (RoBERTa model)"),lIe.forEach(t),f5r=i(be),wE=n(be,"LI",{});var iIe=s(wE);hTe=n(iIe,"STRONG",{});var Uwt=s(hTe);m5r=r(Uwt,"roformer"),Uwt.forEach(t),g5r=r(iIe," \u2014 "),KU=n(iIe,"A",{href:!0});var Jwt=s(KU);h5r=r(Jwt,"TFRoFormerForMultipleChoice"),Jwt.forEach(t),p5r=r(iIe," (RoFormer model)"),iIe.forEach(t),_5r=i(be),AE=n(be,"LI",{});var dIe=s(AE);pTe=n(dIe,"STRONG",{});var Ywt=s(pTe);u5r=r(Ywt,"xlm"),Ywt.forEach(t),b5r=r(dIe," \u2014 "),ZU=n(dIe,"A",{href:!0});var Kwt=s(ZU);v5r=r(Kwt,"TFXLMForMultipleChoice"),Kwt.forEach(t),F5r=r(dIe," (XLM model)"),dIe.forEach(t),T5r=i(be),LE=n(be,"LI",{});var cIe=s(LE);_Te=n(cIe,"STRONG",{});var Zwt=s(_Te);M5r=r(Zwt,"xlm-roberta"),Zwt.forEach(t),E5r=r(cIe," \u2014 "),eJ=n(cIe,"A",{href:!0});var eAt=s(eJ);C5r=r(eAt,"TFXLMRobertaForMultipleChoice"),eAt.forEach(t),w5r=r(cIe," (XLM-RoBERTa model)"),cIe.forEach(t),A5r=i(be),yE=n(be,"LI",{});var fIe=s(yE);uTe=n(fIe,"STRONG",{});var oAt=s(uTe);L5r=r(oAt,"xlnet"),oAt.forEach(t),y5r=r(fIe," \u2014 "),oJ=n(fIe,"A",{href:!0});var rAt=s(oJ);x5r=r(rAt,"TFXLNetForMultipleChoice"),rAt.forEach(t),$5r=r(fIe," (XLNet model)"),fIe.forEach(t),be.forEach(t),k5r=i($l),T(xE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),EDe=i(f),gc=n(f,"H2",{class:!0});var xOe=s(gc);$E=n(xOe,"A",{id:!0,class:!0,href:!0});var tAt=s($E);bTe=n(tAt,"SPAN",{});var aAt=s(bTe);T(i9.$$.fragment,aAt),aAt.forEach(t),tAt.forEach(t),S5r=i(xOe),vTe=n(xOe,"SPAN",{});var nAt=s(vTe);R5r=r(nAt,"TFAutoModelForNextSentencePrediction"),nAt.forEach(t),xOe.forEach(t),CDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(d9.$$.fragment,kl),P5r=i(kl),hc=n(kl,"P",{});var roe=s(hc);B5r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rJ=n(roe,"A",{href:!0});var sAt=s(rJ);I5r=r(sAt,"from_pretrained()"),sAt.forEach(t),N5r=r(roe," class method or the "),tJ=n(roe,"A",{href:!0});var lAt=s(tJ);q5r=r(lAt,"from_config()"),lAt.forEach(t),j5r=r(roe,` class
method.`),roe.forEach(t),D5r=i(kl),c9=n(kl,"P",{});var $Oe=s(c9);G5r=r($Oe,"This class cannot be instantiated directly using "),FTe=n($Oe,"CODE",{});var iAt=s(FTe);O5r=r(iAt,"__init__()"),iAt.forEach(t),V5r=r($Oe," (throws an error)."),$Oe.forEach(t),X5r=i(kl),Bt=n(kl,"DIV",{class:!0});var o6=s(Bt);T(f9.$$.fragment,o6),z5r=i(o6),TTe=n(o6,"P",{});var dAt=s(TTe);W5r=r(dAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dAt.forEach(t),Q5r=i(o6),pc=n(o6,"P",{});var toe=s(pc);H5r=r(toe,`Note:
Loading a model from its configuration file does `),MTe=n(toe,"STRONG",{});var cAt=s(MTe);U5r=r(cAt,"not"),cAt.forEach(t),J5r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(toe,"A",{href:!0});var fAt=s(aJ);Y5r=r(fAt,"from_pretrained()"),fAt.forEach(t),K5r=r(toe," to load the model weights."),toe.forEach(t),Z5r=i(o6),T(kE.$$.fragment,o6),o6.forEach(t),e0r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(m9.$$.fragment,Sl),o0r=i(Sl),ETe=n(Sl,"P",{});var mAt=s(ETe);r0r=r(mAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mAt.forEach(t),t0r=i(Sl),ln=n(Sl,"P",{});var r6=s(ln);a0r=r(r6,"The model class to instantiate is selected based on the "),CTe=n(r6,"CODE",{});var gAt=s(CTe);n0r=r(gAt,"model_type"),gAt.forEach(t),s0r=r(r6,` property of the config object (either
passed as an argument or loaded from `),wTe=n(r6,"CODE",{});var hAt=s(wTe);l0r=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),i0r=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(r6,"CODE",{});var pAt=s(ATe);d0r=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),c0r=r(r6,":"),r6.forEach(t),f0r=i(Sl),g9=n(Sl,"UL",{});var kOe=s(g9);SE=n(kOe,"LI",{});var mIe=s(SE);LTe=n(mIe,"STRONG",{});var _At=s(LTe);m0r=r(_At,"bert"),_At.forEach(t),g0r=r(mIe," \u2014 "),nJ=n(mIe,"A",{href:!0});var uAt=s(nJ);h0r=r(uAt,"TFBertForNextSentencePrediction"),uAt.forEach(t),p0r=r(mIe," (BERT model)"),mIe.forEach(t),_0r=i(kOe),RE=n(kOe,"LI",{});var gIe=s(RE);yTe=n(gIe,"STRONG",{});var bAt=s(yTe);u0r=r(bAt,"mobilebert"),bAt.forEach(t),b0r=r(gIe," \u2014 "),sJ=n(gIe,"A",{href:!0});var vAt=s(sJ);v0r=r(vAt,"TFMobileBertForNextSentencePrediction"),vAt.forEach(t),F0r=r(gIe," (MobileBERT model)"),gIe.forEach(t),kOe.forEach(t),T0r=i(Sl),T(PE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),wDe=i(f),_c=n(f,"H2",{class:!0});var SOe=s(_c);BE=n(SOe,"A",{id:!0,class:!0,href:!0});var FAt=s(BE);xTe=n(FAt,"SPAN",{});var TAt=s(xTe);T(h9.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),M0r=i(SOe),$Te=n(SOe,"SPAN",{});var MAt=s($Te);E0r=r(MAt,"TFAutoModelForTableQuestionAnswering"),MAt.forEach(t),SOe.forEach(t),ADe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(p9.$$.fragment,Rl),C0r=i(Rl),uc=n(Rl,"P",{});var aoe=s(uc);w0r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lJ=n(aoe,"A",{href:!0});var EAt=s(lJ);A0r=r(EAt,"from_pretrained()"),EAt.forEach(t),L0r=r(aoe," class method or the "),iJ=n(aoe,"A",{href:!0});var CAt=s(iJ);y0r=r(CAt,"from_config()"),CAt.forEach(t),x0r=r(aoe,` class
method.`),aoe.forEach(t),$0r=i(Rl),_9=n(Rl,"P",{});var ROe=s(_9);k0r=r(ROe,"This class cannot be instantiated directly using "),kTe=n(ROe,"CODE",{});var wAt=s(kTe);S0r=r(wAt,"__init__()"),wAt.forEach(t),R0r=r(ROe," (throws an error)."),ROe.forEach(t),P0r=i(Rl),It=n(Rl,"DIV",{class:!0});var t6=s(It);T(u9.$$.fragment,t6),B0r=i(t6),STe=n(t6,"P",{});var AAt=s(STe);I0r=r(AAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),AAt.forEach(t),N0r=i(t6),bc=n(t6,"P",{});var noe=s(bc);q0r=r(noe,`Note:
Loading a model from its configuration file does `),RTe=n(noe,"STRONG",{});var LAt=s(RTe);j0r=r(LAt,"not"),LAt.forEach(t),D0r=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(noe,"A",{href:!0});var yAt=s(dJ);G0r=r(yAt,"from_pretrained()"),yAt.forEach(t),O0r=r(noe," to load the model weights."),noe.forEach(t),V0r=i(t6),T(IE.$$.fragment,t6),t6.forEach(t),X0r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(b9.$$.fragment,Pl),z0r=i(Pl),PTe=n(Pl,"P",{});var xAt=s(PTe);W0r=r(xAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xAt.forEach(t),Q0r=i(Pl),dn=n(Pl,"P",{});var a6=s(dn);H0r=r(a6,"The model class to instantiate is selected based on the "),BTe=n(a6,"CODE",{});var $At=s(BTe);U0r=r($At,"model_type"),$At.forEach(t),J0r=r(a6,` property of the config object (either
passed as an argument or loaded from `),ITe=n(a6,"CODE",{});var kAt=s(ITe);Y0r=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),K0r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(a6,"CODE",{});var SAt=s(NTe);Z0r=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),ewr=r(a6,":"),a6.forEach(t),owr=i(Pl),qTe=n(Pl,"UL",{});var RAt=s(qTe);NE=n(RAt,"LI",{});var hIe=s(NE);jTe=n(hIe,"STRONG",{});var PAt=s(jTe);rwr=r(PAt,"tapas"),PAt.forEach(t),twr=r(hIe," \u2014 "),cJ=n(hIe,"A",{href:!0});var BAt=s(cJ);awr=r(BAt,"TFTapasForQuestionAnswering"),BAt.forEach(t),nwr=r(hIe," (TAPAS model)"),hIe.forEach(t),RAt.forEach(t),swr=i(Pl),T(qE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),LDe=i(f),vc=n(f,"H2",{class:!0});var POe=s(vc);jE=n(POe,"A",{id:!0,class:!0,href:!0});var IAt=s(jE);DTe=n(IAt,"SPAN",{});var NAt=s(DTe);T(v9.$$.fragment,NAt),NAt.forEach(t),IAt.forEach(t),lwr=i(POe),GTe=n(POe,"SPAN",{});var qAt=s(GTe);iwr=r(qAt,"TFAutoModelForTokenClassification"),qAt.forEach(t),POe.forEach(t),yDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(F9.$$.fragment,Bl),dwr=i(Bl),Fc=n(Bl,"P",{});var soe=s(Fc);cwr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fJ=n(soe,"A",{href:!0});var jAt=s(fJ);fwr=r(jAt,"from_pretrained()"),jAt.forEach(t),mwr=r(soe," class method or the "),mJ=n(soe,"A",{href:!0});var DAt=s(mJ);gwr=r(DAt,"from_config()"),DAt.forEach(t),hwr=r(soe,` class
method.`),soe.forEach(t),pwr=i(Bl),T9=n(Bl,"P",{});var BOe=s(T9);_wr=r(BOe,"This class cannot be instantiated directly using "),OTe=n(BOe,"CODE",{});var GAt=s(OTe);uwr=r(GAt,"__init__()"),GAt.forEach(t),bwr=r(BOe," (throws an error)."),BOe.forEach(t),vwr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var n6=s(Nt);T(M9.$$.fragment,n6),Fwr=i(n6),VTe=n(n6,"P",{});var OAt=s(VTe);Twr=r(OAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OAt.forEach(t),Mwr=i(n6),Tc=n(n6,"P",{});var loe=s(Tc);Ewr=r(loe,`Note:
Loading a model from its configuration file does `),XTe=n(loe,"STRONG",{});var VAt=s(XTe);Cwr=r(VAt,"not"),VAt.forEach(t),wwr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(loe,"A",{href:!0});var XAt=s(gJ);Awr=r(XAt,"from_pretrained()"),XAt.forEach(t),Lwr=r(loe," to load the model weights."),loe.forEach(t),ywr=i(n6),T(DE.$$.fragment,n6),n6.forEach(t),xwr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(E9.$$.fragment,Il),$wr=i(Il),zTe=n(Il,"P",{});var zAt=s(zTe);kwr=r(zAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zAt.forEach(t),Swr=i(Il),cn=n(Il,"P",{});var s6=s(cn);Rwr=r(s6,"The model class to instantiate is selected based on the "),WTe=n(s6,"CODE",{});var WAt=s(WTe);Pwr=r(WAt,"model_type"),WAt.forEach(t),Bwr=r(s6,` property of the config object (either
passed as an argument or loaded from `),QTe=n(s6,"CODE",{});var QAt=s(QTe);Iwr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),Nwr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(s6,"CODE",{});var HAt=s(HTe);qwr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),jwr=r(s6,":"),s6.forEach(t),Dwr=i(Il),de=n(Il,"UL",{});var me=s(de);GE=n(me,"LI",{});var pIe=s(GE);UTe=n(pIe,"STRONG",{});var UAt=s(UTe);Gwr=r(UAt,"albert"),UAt.forEach(t),Owr=r(pIe," \u2014 "),hJ=n(pIe,"A",{href:!0});var JAt=s(hJ);Vwr=r(JAt,"TFAlbertForTokenClassification"),JAt.forEach(t),Xwr=r(pIe," (ALBERT model)"),pIe.forEach(t),zwr=i(me),OE=n(me,"LI",{});var _Ie=s(OE);JTe=n(_Ie,"STRONG",{});var YAt=s(JTe);Wwr=r(YAt,"bert"),YAt.forEach(t),Qwr=r(_Ie," \u2014 "),pJ=n(_Ie,"A",{href:!0});var KAt=s(pJ);Hwr=r(KAt,"TFBertForTokenClassification"),KAt.forEach(t),Uwr=r(_Ie," (BERT model)"),_Ie.forEach(t),Jwr=i(me),VE=n(me,"LI",{});var uIe=s(VE);YTe=n(uIe,"STRONG",{});var ZAt=s(YTe);Ywr=r(ZAt,"camembert"),ZAt.forEach(t),Kwr=r(uIe," \u2014 "),_J=n(uIe,"A",{href:!0});var e6t=s(_J);Zwr=r(e6t,"TFCamembertForTokenClassification"),e6t.forEach(t),eAr=r(uIe," (CamemBERT model)"),uIe.forEach(t),oAr=i(me),XE=n(me,"LI",{});var bIe=s(XE);KTe=n(bIe,"STRONG",{});var o6t=s(KTe);rAr=r(o6t,"convbert"),o6t.forEach(t),tAr=r(bIe," \u2014 "),uJ=n(bIe,"A",{href:!0});var r6t=s(uJ);aAr=r(r6t,"TFConvBertForTokenClassification"),r6t.forEach(t),nAr=r(bIe," (ConvBERT model)"),bIe.forEach(t),sAr=i(me),zE=n(me,"LI",{});var vIe=s(zE);ZTe=n(vIe,"STRONG",{});var t6t=s(ZTe);lAr=r(t6t,"deberta"),t6t.forEach(t),iAr=r(vIe," \u2014 "),bJ=n(vIe,"A",{href:!0});var a6t=s(bJ);dAr=r(a6t,"TFDebertaForTokenClassification"),a6t.forEach(t),cAr=r(vIe," (DeBERTa model)"),vIe.forEach(t),fAr=i(me),WE=n(me,"LI",{});var FIe=s(WE);e7e=n(FIe,"STRONG",{});var n6t=s(e7e);mAr=r(n6t,"deberta-v2"),n6t.forEach(t),gAr=r(FIe," \u2014 "),vJ=n(FIe,"A",{href:!0});var s6t=s(vJ);hAr=r(s6t,"TFDebertaV2ForTokenClassification"),s6t.forEach(t),pAr=r(FIe," (DeBERTa-v2 model)"),FIe.forEach(t),_Ar=i(me),QE=n(me,"LI",{});var TIe=s(QE);o7e=n(TIe,"STRONG",{});var l6t=s(o7e);uAr=r(l6t,"distilbert"),l6t.forEach(t),bAr=r(TIe," \u2014 "),FJ=n(TIe,"A",{href:!0});var i6t=s(FJ);vAr=r(i6t,"TFDistilBertForTokenClassification"),i6t.forEach(t),FAr=r(TIe," (DistilBERT model)"),TIe.forEach(t),TAr=i(me),HE=n(me,"LI",{});var MIe=s(HE);r7e=n(MIe,"STRONG",{});var d6t=s(r7e);MAr=r(d6t,"electra"),d6t.forEach(t),EAr=r(MIe," \u2014 "),TJ=n(MIe,"A",{href:!0});var c6t=s(TJ);CAr=r(c6t,"TFElectraForTokenClassification"),c6t.forEach(t),wAr=r(MIe," (ELECTRA model)"),MIe.forEach(t),AAr=i(me),UE=n(me,"LI",{});var EIe=s(UE);t7e=n(EIe,"STRONG",{});var f6t=s(t7e);LAr=r(f6t,"flaubert"),f6t.forEach(t),yAr=r(EIe," \u2014 "),MJ=n(EIe,"A",{href:!0});var m6t=s(MJ);xAr=r(m6t,"TFFlaubertForTokenClassification"),m6t.forEach(t),$Ar=r(EIe," (FlauBERT model)"),EIe.forEach(t),kAr=i(me),JE=n(me,"LI",{});var CIe=s(JE);a7e=n(CIe,"STRONG",{});var g6t=s(a7e);SAr=r(g6t,"funnel"),g6t.forEach(t),RAr=r(CIe," \u2014 "),EJ=n(CIe,"A",{href:!0});var h6t=s(EJ);PAr=r(h6t,"TFFunnelForTokenClassification"),h6t.forEach(t),BAr=r(CIe," (Funnel Transformer model)"),CIe.forEach(t),IAr=i(me),YE=n(me,"LI",{});var wIe=s(YE);n7e=n(wIe,"STRONG",{});var p6t=s(n7e);NAr=r(p6t,"layoutlm"),p6t.forEach(t),qAr=r(wIe," \u2014 "),CJ=n(wIe,"A",{href:!0});var _6t=s(CJ);jAr=r(_6t,"TFLayoutLMForTokenClassification"),_6t.forEach(t),DAr=r(wIe," (LayoutLM model)"),wIe.forEach(t),GAr=i(me),KE=n(me,"LI",{});var AIe=s(KE);s7e=n(AIe,"STRONG",{});var u6t=s(s7e);OAr=r(u6t,"longformer"),u6t.forEach(t),VAr=r(AIe," \u2014 "),wJ=n(AIe,"A",{href:!0});var b6t=s(wJ);XAr=r(b6t,"TFLongformerForTokenClassification"),b6t.forEach(t),zAr=r(AIe," (Longformer model)"),AIe.forEach(t),WAr=i(me),ZE=n(me,"LI",{});var LIe=s(ZE);l7e=n(LIe,"STRONG",{});var v6t=s(l7e);QAr=r(v6t,"mobilebert"),v6t.forEach(t),HAr=r(LIe," \u2014 "),AJ=n(LIe,"A",{href:!0});var F6t=s(AJ);UAr=r(F6t,"TFMobileBertForTokenClassification"),F6t.forEach(t),JAr=r(LIe," (MobileBERT model)"),LIe.forEach(t),YAr=i(me),eC=n(me,"LI",{});var yIe=s(eC);i7e=n(yIe,"STRONG",{});var T6t=s(i7e);KAr=r(T6t,"mpnet"),T6t.forEach(t),ZAr=r(yIe," \u2014 "),LJ=n(yIe,"A",{href:!0});var M6t=s(LJ);e6r=r(M6t,"TFMPNetForTokenClassification"),M6t.forEach(t),o6r=r(yIe," (MPNet model)"),yIe.forEach(t),r6r=i(me),oC=n(me,"LI",{});var xIe=s(oC);d7e=n(xIe,"STRONG",{});var E6t=s(d7e);t6r=r(E6t,"rembert"),E6t.forEach(t),a6r=r(xIe," \u2014 "),yJ=n(xIe,"A",{href:!0});var C6t=s(yJ);n6r=r(C6t,"TFRemBertForTokenClassification"),C6t.forEach(t),s6r=r(xIe," (RemBERT model)"),xIe.forEach(t),l6r=i(me),rC=n(me,"LI",{});var $Ie=s(rC);c7e=n($Ie,"STRONG",{});var w6t=s(c7e);i6r=r(w6t,"roberta"),w6t.forEach(t),d6r=r($Ie," \u2014 "),xJ=n($Ie,"A",{href:!0});var A6t=s(xJ);c6r=r(A6t,"TFRobertaForTokenClassification"),A6t.forEach(t),f6r=r($Ie," (RoBERTa model)"),$Ie.forEach(t),m6r=i(me),tC=n(me,"LI",{});var kIe=s(tC);f7e=n(kIe,"STRONG",{});var L6t=s(f7e);g6r=r(L6t,"roformer"),L6t.forEach(t),h6r=r(kIe," \u2014 "),$J=n(kIe,"A",{href:!0});var y6t=s($J);p6r=r(y6t,"TFRoFormerForTokenClassification"),y6t.forEach(t),_6r=r(kIe," (RoFormer model)"),kIe.forEach(t),u6r=i(me),aC=n(me,"LI",{});var SIe=s(aC);m7e=n(SIe,"STRONG",{});var x6t=s(m7e);b6r=r(x6t,"xlm"),x6t.forEach(t),v6r=r(SIe," \u2014 "),kJ=n(SIe,"A",{href:!0});var $6t=s(kJ);F6r=r($6t,"TFXLMForTokenClassification"),$6t.forEach(t),T6r=r(SIe," (XLM model)"),SIe.forEach(t),M6r=i(me),nC=n(me,"LI",{});var RIe=s(nC);g7e=n(RIe,"STRONG",{});var k6t=s(g7e);E6r=r(k6t,"xlm-roberta"),k6t.forEach(t),C6r=r(RIe," \u2014 "),SJ=n(RIe,"A",{href:!0});var S6t=s(SJ);w6r=r(S6t,"TFXLMRobertaForTokenClassification"),S6t.forEach(t),A6r=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),L6r=i(me),sC=n(me,"LI",{});var PIe=s(sC);h7e=n(PIe,"STRONG",{});var R6t=s(h7e);y6r=r(R6t,"xlnet"),R6t.forEach(t),x6r=r(PIe," \u2014 "),RJ=n(PIe,"A",{href:!0});var P6t=s(RJ);$6r=r(P6t,"TFXLNetForTokenClassification"),P6t.forEach(t),k6r=r(PIe," (XLNet model)"),PIe.forEach(t),me.forEach(t),S6r=i(Il),T(lC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),xDe=i(f),Mc=n(f,"H2",{class:!0});var IOe=s(Mc);iC=n(IOe,"A",{id:!0,class:!0,href:!0});var B6t=s(iC);p7e=n(B6t,"SPAN",{});var I6t=s(p7e);T(C9.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),R6r=i(IOe),_7e=n(IOe,"SPAN",{});var N6t=s(_7e);P6r=r(N6t,"TFAutoModelForQuestionAnswering"),N6t.forEach(t),IOe.forEach(t),$De=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(w9.$$.fragment,Nl),B6r=i(Nl),Ec=n(Nl,"P",{});var ioe=s(Ec);I6r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PJ=n(ioe,"A",{href:!0});var q6t=s(PJ);N6r=r(q6t,"from_pretrained()"),q6t.forEach(t),q6r=r(ioe," class method or the "),BJ=n(ioe,"A",{href:!0});var j6t=s(BJ);j6r=r(j6t,"from_config()"),j6t.forEach(t),D6r=r(ioe,` class
method.`),ioe.forEach(t),G6r=i(Nl),A9=n(Nl,"P",{});var NOe=s(A9);O6r=r(NOe,"This class cannot be instantiated directly using "),u7e=n(NOe,"CODE",{});var D6t=s(u7e);V6r=r(D6t,"__init__()"),D6t.forEach(t),X6r=r(NOe," (throws an error)."),NOe.forEach(t),z6r=i(Nl),qt=n(Nl,"DIV",{class:!0});var l6=s(qt);T(L9.$$.fragment,l6),W6r=i(l6),b7e=n(l6,"P",{});var G6t=s(b7e);Q6r=r(G6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),G6t.forEach(t),H6r=i(l6),Cc=n(l6,"P",{});var doe=s(Cc);U6r=r(doe,`Note:
Loading a model from its configuration file does `),v7e=n(doe,"STRONG",{});var O6t=s(v7e);J6r=r(O6t,"not"),O6t.forEach(t),Y6r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(doe,"A",{href:!0});var V6t=s(IJ);K6r=r(V6t,"from_pretrained()"),V6t.forEach(t),Z6r=r(doe," to load the model weights."),doe.forEach(t),eLr=i(l6),T(dC.$$.fragment,l6),l6.forEach(t),oLr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(y9.$$.fragment,ql),rLr=i(ql),F7e=n(ql,"P",{});var X6t=s(F7e);tLr=r(X6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X6t.forEach(t),aLr=i(ql),fn=n(ql,"P",{});var i6=s(fn);nLr=r(i6,"The model class to instantiate is selected based on the "),T7e=n(i6,"CODE",{});var z6t=s(T7e);sLr=r(z6t,"model_type"),z6t.forEach(t),lLr=r(i6,` property of the config object (either
passed as an argument or loaded from `),M7e=n(i6,"CODE",{});var W6t=s(M7e);iLr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),dLr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(i6,"CODE",{});var Q6t=s(E7e);cLr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),fLr=r(i6,":"),i6.forEach(t),mLr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);cC=n(ge,"LI",{});var BIe=s(cC);C7e=n(BIe,"STRONG",{});var H6t=s(C7e);gLr=r(H6t,"albert"),H6t.forEach(t),hLr=r(BIe," \u2014 "),NJ=n(BIe,"A",{href:!0});var U6t=s(NJ);pLr=r(U6t,"TFAlbertForQuestionAnswering"),U6t.forEach(t),_Lr=r(BIe," (ALBERT model)"),BIe.forEach(t),uLr=i(ge),fC=n(ge,"LI",{});var IIe=s(fC);w7e=n(IIe,"STRONG",{});var J6t=s(w7e);bLr=r(J6t,"bert"),J6t.forEach(t),vLr=r(IIe," \u2014 "),qJ=n(IIe,"A",{href:!0});var Y6t=s(qJ);FLr=r(Y6t,"TFBertForQuestionAnswering"),Y6t.forEach(t),TLr=r(IIe," (BERT model)"),IIe.forEach(t),MLr=i(ge),mC=n(ge,"LI",{});var NIe=s(mC);A7e=n(NIe,"STRONG",{});var K6t=s(A7e);ELr=r(K6t,"camembert"),K6t.forEach(t),CLr=r(NIe," \u2014 "),jJ=n(NIe,"A",{href:!0});var Z6t=s(jJ);wLr=r(Z6t,"TFCamembertForQuestionAnswering"),Z6t.forEach(t),ALr=r(NIe," (CamemBERT model)"),NIe.forEach(t),LLr=i(ge),gC=n(ge,"LI",{});var qIe=s(gC);L7e=n(qIe,"STRONG",{});var eLt=s(L7e);yLr=r(eLt,"convbert"),eLt.forEach(t),xLr=r(qIe," \u2014 "),DJ=n(qIe,"A",{href:!0});var oLt=s(DJ);$Lr=r(oLt,"TFConvBertForQuestionAnswering"),oLt.forEach(t),kLr=r(qIe," (ConvBERT model)"),qIe.forEach(t),SLr=i(ge),hC=n(ge,"LI",{});var jIe=s(hC);y7e=n(jIe,"STRONG",{});var rLt=s(y7e);RLr=r(rLt,"deberta"),rLt.forEach(t),PLr=r(jIe," \u2014 "),GJ=n(jIe,"A",{href:!0});var tLt=s(GJ);BLr=r(tLt,"TFDebertaForQuestionAnswering"),tLt.forEach(t),ILr=r(jIe," (DeBERTa model)"),jIe.forEach(t),NLr=i(ge),pC=n(ge,"LI",{});var DIe=s(pC);x7e=n(DIe,"STRONG",{});var aLt=s(x7e);qLr=r(aLt,"deberta-v2"),aLt.forEach(t),jLr=r(DIe," \u2014 "),OJ=n(DIe,"A",{href:!0});var nLt=s(OJ);DLr=r(nLt,"TFDebertaV2ForQuestionAnswering"),nLt.forEach(t),GLr=r(DIe," (DeBERTa-v2 model)"),DIe.forEach(t),OLr=i(ge),_C=n(ge,"LI",{});var GIe=s(_C);$7e=n(GIe,"STRONG",{});var sLt=s($7e);VLr=r(sLt,"distilbert"),sLt.forEach(t),XLr=r(GIe," \u2014 "),VJ=n(GIe,"A",{href:!0});var lLt=s(VJ);zLr=r(lLt,"TFDistilBertForQuestionAnswering"),lLt.forEach(t),WLr=r(GIe," (DistilBERT model)"),GIe.forEach(t),QLr=i(ge),uC=n(ge,"LI",{});var OIe=s(uC);k7e=n(OIe,"STRONG",{});var iLt=s(k7e);HLr=r(iLt,"electra"),iLt.forEach(t),ULr=r(OIe," \u2014 "),XJ=n(OIe,"A",{href:!0});var dLt=s(XJ);JLr=r(dLt,"TFElectraForQuestionAnswering"),dLt.forEach(t),YLr=r(OIe," (ELECTRA model)"),OIe.forEach(t),KLr=i(ge),bC=n(ge,"LI",{});var VIe=s(bC);S7e=n(VIe,"STRONG",{});var cLt=s(S7e);ZLr=r(cLt,"flaubert"),cLt.forEach(t),eyr=r(VIe," \u2014 "),zJ=n(VIe,"A",{href:!0});var fLt=s(zJ);oyr=r(fLt,"TFFlaubertForQuestionAnsweringSimple"),fLt.forEach(t),ryr=r(VIe," (FlauBERT model)"),VIe.forEach(t),tyr=i(ge),vC=n(ge,"LI",{});var XIe=s(vC);R7e=n(XIe,"STRONG",{});var mLt=s(R7e);ayr=r(mLt,"funnel"),mLt.forEach(t),nyr=r(XIe," \u2014 "),WJ=n(XIe,"A",{href:!0});var gLt=s(WJ);syr=r(gLt,"TFFunnelForQuestionAnswering"),gLt.forEach(t),lyr=r(XIe," (Funnel Transformer model)"),XIe.forEach(t),iyr=i(ge),FC=n(ge,"LI",{});var zIe=s(FC);P7e=n(zIe,"STRONG",{});var hLt=s(P7e);dyr=r(hLt,"gptj"),hLt.forEach(t),cyr=r(zIe," \u2014 "),QJ=n(zIe,"A",{href:!0});var pLt=s(QJ);fyr=r(pLt,"TFGPTJForQuestionAnswering"),pLt.forEach(t),myr=r(zIe," (GPT-J model)"),zIe.forEach(t),gyr=i(ge),TC=n(ge,"LI",{});var WIe=s(TC);B7e=n(WIe,"STRONG",{});var _Lt=s(B7e);hyr=r(_Lt,"longformer"),_Lt.forEach(t),pyr=r(WIe," \u2014 "),HJ=n(WIe,"A",{href:!0});var uLt=s(HJ);_yr=r(uLt,"TFLongformerForQuestionAnswering"),uLt.forEach(t),uyr=r(WIe," (Longformer model)"),WIe.forEach(t),byr=i(ge),MC=n(ge,"LI",{});var QIe=s(MC);I7e=n(QIe,"STRONG",{});var bLt=s(I7e);vyr=r(bLt,"mobilebert"),bLt.forEach(t),Fyr=r(QIe," \u2014 "),UJ=n(QIe,"A",{href:!0});var vLt=s(UJ);Tyr=r(vLt,"TFMobileBertForQuestionAnswering"),vLt.forEach(t),Myr=r(QIe," (MobileBERT model)"),QIe.forEach(t),Eyr=i(ge),EC=n(ge,"LI",{});var HIe=s(EC);N7e=n(HIe,"STRONG",{});var FLt=s(N7e);Cyr=r(FLt,"mpnet"),FLt.forEach(t),wyr=r(HIe," \u2014 "),JJ=n(HIe,"A",{href:!0});var TLt=s(JJ);Ayr=r(TLt,"TFMPNetForQuestionAnswering"),TLt.forEach(t),Lyr=r(HIe," (MPNet model)"),HIe.forEach(t),yyr=i(ge),CC=n(ge,"LI",{});var UIe=s(CC);q7e=n(UIe,"STRONG",{});var MLt=s(q7e);xyr=r(MLt,"rembert"),MLt.forEach(t),$yr=r(UIe," \u2014 "),YJ=n(UIe,"A",{href:!0});var ELt=s(YJ);kyr=r(ELt,"TFRemBertForQuestionAnswering"),ELt.forEach(t),Syr=r(UIe," (RemBERT model)"),UIe.forEach(t),Ryr=i(ge),wC=n(ge,"LI",{});var JIe=s(wC);j7e=n(JIe,"STRONG",{});var CLt=s(j7e);Pyr=r(CLt,"roberta"),CLt.forEach(t),Byr=r(JIe," \u2014 "),KJ=n(JIe,"A",{href:!0});var wLt=s(KJ);Iyr=r(wLt,"TFRobertaForQuestionAnswering"),wLt.forEach(t),Nyr=r(JIe," (RoBERTa model)"),JIe.forEach(t),qyr=i(ge),AC=n(ge,"LI",{});var YIe=s(AC);D7e=n(YIe,"STRONG",{});var ALt=s(D7e);jyr=r(ALt,"roformer"),ALt.forEach(t),Dyr=r(YIe," \u2014 "),ZJ=n(YIe,"A",{href:!0});var LLt=s(ZJ);Gyr=r(LLt,"TFRoFormerForQuestionAnswering"),LLt.forEach(t),Oyr=r(YIe," (RoFormer model)"),YIe.forEach(t),Vyr=i(ge),LC=n(ge,"LI",{});var KIe=s(LC);G7e=n(KIe,"STRONG",{});var yLt=s(G7e);Xyr=r(yLt,"xlm"),yLt.forEach(t),zyr=r(KIe," \u2014 "),eY=n(KIe,"A",{href:!0});var xLt=s(eY);Wyr=r(xLt,"TFXLMForQuestionAnsweringSimple"),xLt.forEach(t),Qyr=r(KIe," (XLM model)"),KIe.forEach(t),Hyr=i(ge),yC=n(ge,"LI",{});var ZIe=s(yC);O7e=n(ZIe,"STRONG",{});var $Lt=s(O7e);Uyr=r($Lt,"xlm-roberta"),$Lt.forEach(t),Jyr=r(ZIe," \u2014 "),oY=n(ZIe,"A",{href:!0});var kLt=s(oY);Yyr=r(kLt,"TFXLMRobertaForQuestionAnswering"),kLt.forEach(t),Kyr=r(ZIe," (XLM-RoBERTa model)"),ZIe.forEach(t),Zyr=i(ge),xC=n(ge,"LI",{});var eNe=s(xC);V7e=n(eNe,"STRONG",{});var SLt=s(V7e);e8r=r(SLt,"xlnet"),SLt.forEach(t),o8r=r(eNe," \u2014 "),rY=n(eNe,"A",{href:!0});var RLt=s(rY);r8r=r(RLt,"TFXLNetForQuestionAnsweringSimple"),RLt.forEach(t),t8r=r(eNe," (XLNet model)"),eNe.forEach(t),ge.forEach(t),a8r=i(ql),T($C.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),kDe=i(f),wc=n(f,"H2",{class:!0});var qOe=s(wc);kC=n(qOe,"A",{id:!0,class:!0,href:!0});var PLt=s(kC);X7e=n(PLt,"SPAN",{});var BLt=s(X7e);T(x9.$$.fragment,BLt),BLt.forEach(t),PLt.forEach(t),n8r=i(qOe),z7e=n(qOe,"SPAN",{});var ILt=s(z7e);s8r=r(ILt,"TFAutoModelForVision2Seq"),ILt.forEach(t),qOe.forEach(t),SDe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T($9.$$.fragment,jl),l8r=i(jl),Ac=n(jl,"P",{});var coe=s(Ac);i8r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tY=n(coe,"A",{href:!0});var NLt=s(tY);d8r=r(NLt,"from_pretrained()"),NLt.forEach(t),c8r=r(coe," class method or the "),aY=n(coe,"A",{href:!0});var qLt=s(aY);f8r=r(qLt,"from_config()"),qLt.forEach(t),m8r=r(coe,` class
method.`),coe.forEach(t),g8r=i(jl),k9=n(jl,"P",{});var jOe=s(k9);h8r=r(jOe,"This class cannot be instantiated directly using "),W7e=n(jOe,"CODE",{});var jLt=s(W7e);p8r=r(jLt,"__init__()"),jLt.forEach(t),_8r=r(jOe," (throws an error)."),jOe.forEach(t),u8r=i(jl),jt=n(jl,"DIV",{class:!0});var d6=s(jt);T(S9.$$.fragment,d6),b8r=i(d6),Q7e=n(d6,"P",{});var DLt=s(Q7e);v8r=r(DLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DLt.forEach(t),F8r=i(d6),Lc=n(d6,"P",{});var foe=s(Lc);T8r=r(foe,`Note:
Loading a model from its configuration file does `),H7e=n(foe,"STRONG",{});var GLt=s(H7e);M8r=r(GLt,"not"),GLt.forEach(t),E8r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(foe,"A",{href:!0});var OLt=s(nY);C8r=r(OLt,"from_pretrained()"),OLt.forEach(t),w8r=r(foe," to load the model weights."),foe.forEach(t),A8r=i(d6),T(SC.$$.fragment,d6),d6.forEach(t),L8r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(R9.$$.fragment,Dl),y8r=i(Dl),U7e=n(Dl,"P",{});var VLt=s(U7e);x8r=r(VLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VLt.forEach(t),$8r=i(Dl),mn=n(Dl,"P",{});var c6=s(mn);k8r=r(c6,"The model class to instantiate is selected based on the "),J7e=n(c6,"CODE",{});var XLt=s(J7e);S8r=r(XLt,"model_type"),XLt.forEach(t),R8r=r(c6,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(c6,"CODE",{});var zLt=s(Y7e);P8r=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),B8r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(c6,"CODE",{});var WLt=s(K7e);I8r=r(WLt,"pretrained_model_name_or_path"),WLt.forEach(t),N8r=r(c6,":"),c6.forEach(t),q8r=i(Dl),Z7e=n(Dl,"UL",{});var QLt=s(Z7e);RC=n(QLt,"LI",{});var oNe=s(RC);eMe=n(oNe,"STRONG",{});var HLt=s(eMe);j8r=r(HLt,"vision-encoder-decoder"),HLt.forEach(t),D8r=r(oNe," \u2014 "),sY=n(oNe,"A",{href:!0});var ULt=s(sY);G8r=r(ULt,"TFVisionEncoderDecoderModel"),ULt.forEach(t),O8r=r(oNe," (Vision Encoder decoder model)"),oNe.forEach(t),QLt.forEach(t),V8r=i(Dl),T(PC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),RDe=i(f),yc=n(f,"H2",{class:!0});var DOe=s(yc);BC=n(DOe,"A",{id:!0,class:!0,href:!0});var JLt=s(BC);oMe=n(JLt,"SPAN",{});var YLt=s(oMe);T(P9.$$.fragment,YLt),YLt.forEach(t),JLt.forEach(t),X8r=i(DOe),rMe=n(DOe,"SPAN",{});var KLt=s(rMe);z8r=r(KLt,"TFAutoModelForSpeechSeq2Seq"),KLt.forEach(t),DOe.forEach(t),PDe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(B9.$$.fragment,Gl),W8r=i(Gl),xc=n(Gl,"P",{});var moe=s(xc);Q8r=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lY=n(moe,"A",{href:!0});var ZLt=s(lY);H8r=r(ZLt,"from_pretrained()"),ZLt.forEach(t),U8r=r(moe," class method or the "),iY=n(moe,"A",{href:!0});var eyt=s(iY);J8r=r(eyt,"from_config()"),eyt.forEach(t),Y8r=r(moe,` class
method.`),moe.forEach(t),K8r=i(Gl),I9=n(Gl,"P",{});var GOe=s(I9);Z8r=r(GOe,"This class cannot be instantiated directly using "),tMe=n(GOe,"CODE",{});var oyt=s(tMe);e9r=r(oyt,"__init__()"),oyt.forEach(t),o9r=r(GOe," (throws an error)."),GOe.forEach(t),r9r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var f6=s(Dt);T(N9.$$.fragment,f6),t9r=i(f6),aMe=n(f6,"P",{});var ryt=s(aMe);a9r=r(ryt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ryt.forEach(t),n9r=i(f6),$c=n(f6,"P",{});var goe=s($c);s9r=r(goe,`Note:
Loading a model from its configuration file does `),nMe=n(goe,"STRONG",{});var tyt=s(nMe);l9r=r(tyt,"not"),tyt.forEach(t),i9r=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(goe,"A",{href:!0});var ayt=s(dY);d9r=r(ayt,"from_pretrained()"),ayt.forEach(t),c9r=r(goe," to load the model weights."),goe.forEach(t),f9r=i(f6),T(IC.$$.fragment,f6),f6.forEach(t),m9r=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(q9.$$.fragment,Ol),g9r=i(Ol),sMe=n(Ol,"P",{});var nyt=s(sMe);h9r=r(nyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nyt.forEach(t),p9r=i(Ol),gn=n(Ol,"P",{});var m6=s(gn);_9r=r(m6,"The model class to instantiate is selected based on the "),lMe=n(m6,"CODE",{});var syt=s(lMe);u9r=r(syt,"model_type"),syt.forEach(t),b9r=r(m6,` property of the config object (either
passed as an argument or loaded from `),iMe=n(m6,"CODE",{});var lyt=s(iMe);v9r=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),F9r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(m6,"CODE",{});var iyt=s(dMe);T9r=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),M9r=r(m6,":"),m6.forEach(t),E9r=i(Ol),cMe=n(Ol,"UL",{});var dyt=s(cMe);NC=n(dyt,"LI",{});var rNe=s(NC);fMe=n(rNe,"STRONG",{});var cyt=s(fMe);C9r=r(cyt,"speech_to_text"),cyt.forEach(t),w9r=r(rNe," \u2014 "),cY=n(rNe,"A",{href:!0});var fyt=s(cY);A9r=r(fyt,"TFSpeech2TextForConditionalGeneration"),fyt.forEach(t),L9r=r(rNe," (Speech2Text model)"),rNe.forEach(t),dyt.forEach(t),y9r=i(Ol),T(qC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),BDe=i(f),kc=n(f,"H2",{class:!0});var OOe=s(kc);jC=n(OOe,"A",{id:!0,class:!0,href:!0});var myt=s(jC);mMe=n(myt,"SPAN",{});var gyt=s(mMe);T(j9.$$.fragment,gyt),gyt.forEach(t),myt.forEach(t),x9r=i(OOe),gMe=n(OOe,"SPAN",{});var hyt=s(gMe);$9r=r(hyt,"FlaxAutoModel"),hyt.forEach(t),OOe.forEach(t),IDe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(D9.$$.fragment,Vl),k9r=i(Vl),Sc=n(Vl,"P",{});var hoe=s(Sc);S9r=r(hoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fY=n(hoe,"A",{href:!0});var pyt=s(fY);R9r=r(pyt,"from_pretrained()"),pyt.forEach(t),P9r=r(hoe," class method or the "),mY=n(hoe,"A",{href:!0});var _yt=s(mY);B9r=r(_yt,"from_config()"),_yt.forEach(t),I9r=r(hoe,` class
method.`),hoe.forEach(t),N9r=i(Vl),G9=n(Vl,"P",{});var VOe=s(G9);q9r=r(VOe,"This class cannot be instantiated directly using "),hMe=n(VOe,"CODE",{});var uyt=s(hMe);j9r=r(uyt,"__init__()"),uyt.forEach(t),D9r=r(VOe," (throws an error)."),VOe.forEach(t),G9r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var g6=s(Gt);T(O9.$$.fragment,g6),O9r=i(g6),pMe=n(g6,"P",{});var byt=s(pMe);V9r=r(byt,"Instantiates one of the base model classes of the library from a configuration."),byt.forEach(t),X9r=i(g6),Rc=n(g6,"P",{});var poe=s(Rc);z9r=r(poe,`Note:
Loading a model from its configuration file does `),_Me=n(poe,"STRONG",{});var vyt=s(_Me);W9r=r(vyt,"not"),vyt.forEach(t),Q9r=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(poe,"A",{href:!0});var Fyt=s(gY);H9r=r(Fyt,"from_pretrained()"),Fyt.forEach(t),U9r=r(poe," to load the model weights."),poe.forEach(t),J9r=i(g6),T(DC.$$.fragment,g6),g6.forEach(t),Y9r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(V9.$$.fragment,Xl),K9r=i(Xl),uMe=n(Xl,"P",{});var Tyt=s(uMe);Z9r=r(Tyt,"Instantiate one of the base model classes of the library from a pretrained model."),Tyt.forEach(t),exr=i(Xl),hn=n(Xl,"P",{});var h6=s(hn);oxr=r(h6,"The model class to instantiate is selected based on the "),bMe=n(h6,"CODE",{});var Myt=s(bMe);rxr=r(Myt,"model_type"),Myt.forEach(t),txr=r(h6,` property of the config object (either
passed as an argument or loaded from `),vMe=n(h6,"CODE",{});var Eyt=s(vMe);axr=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),nxr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(h6,"CODE",{});var Cyt=s(FMe);sxr=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),lxr=r(h6,":"),h6.forEach(t),ixr=i(Xl),re=n(Xl,"UL",{});var ne=s(re);GC=n(ne,"LI",{});var tNe=s(GC);TMe=n(tNe,"STRONG",{});var wyt=s(TMe);dxr=r(wyt,"albert"),wyt.forEach(t),cxr=r(tNe," \u2014 "),hY=n(tNe,"A",{href:!0});var Ayt=s(hY);fxr=r(Ayt,"FlaxAlbertModel"),Ayt.forEach(t),mxr=r(tNe," (ALBERT model)"),tNe.forEach(t),gxr=i(ne),OC=n(ne,"LI",{});var aNe=s(OC);MMe=n(aNe,"STRONG",{});var Lyt=s(MMe);hxr=r(Lyt,"bart"),Lyt.forEach(t),pxr=r(aNe," \u2014 "),pY=n(aNe,"A",{href:!0});var yyt=s(pY);_xr=r(yyt,"FlaxBartModel"),yyt.forEach(t),uxr=r(aNe," (BART model)"),aNe.forEach(t),bxr=i(ne),VC=n(ne,"LI",{});var nNe=s(VC);EMe=n(nNe,"STRONG",{});var xyt=s(EMe);vxr=r(xyt,"beit"),xyt.forEach(t),Fxr=r(nNe," \u2014 "),_Y=n(nNe,"A",{href:!0});var $yt=s(_Y);Txr=r($yt,"FlaxBeitModel"),$yt.forEach(t),Mxr=r(nNe," (BEiT model)"),nNe.forEach(t),Exr=i(ne),XC=n(ne,"LI",{});var sNe=s(XC);CMe=n(sNe,"STRONG",{});var kyt=s(CMe);Cxr=r(kyt,"bert"),kyt.forEach(t),wxr=r(sNe," \u2014 "),uY=n(sNe,"A",{href:!0});var Syt=s(uY);Axr=r(Syt,"FlaxBertModel"),Syt.forEach(t),Lxr=r(sNe," (BERT model)"),sNe.forEach(t),yxr=i(ne),zC=n(ne,"LI",{});var lNe=s(zC);wMe=n(lNe,"STRONG",{});var Ryt=s(wMe);xxr=r(Ryt,"big_bird"),Ryt.forEach(t),$xr=r(lNe," \u2014 "),bY=n(lNe,"A",{href:!0});var Pyt=s(bY);kxr=r(Pyt,"FlaxBigBirdModel"),Pyt.forEach(t),Sxr=r(lNe," (BigBird model)"),lNe.forEach(t),Rxr=i(ne),WC=n(ne,"LI",{});var iNe=s(WC);AMe=n(iNe,"STRONG",{});var Byt=s(AMe);Pxr=r(Byt,"blenderbot"),Byt.forEach(t),Bxr=r(iNe," \u2014 "),vY=n(iNe,"A",{href:!0});var Iyt=s(vY);Ixr=r(Iyt,"FlaxBlenderbotModel"),Iyt.forEach(t),Nxr=r(iNe," (Blenderbot model)"),iNe.forEach(t),qxr=i(ne),QC=n(ne,"LI",{});var dNe=s(QC);LMe=n(dNe,"STRONG",{});var Nyt=s(LMe);jxr=r(Nyt,"blenderbot-small"),Nyt.forEach(t),Dxr=r(dNe," \u2014 "),FY=n(dNe,"A",{href:!0});var qyt=s(FY);Gxr=r(qyt,"FlaxBlenderbotSmallModel"),qyt.forEach(t),Oxr=r(dNe," (BlenderbotSmall model)"),dNe.forEach(t),Vxr=i(ne),HC=n(ne,"LI",{});var cNe=s(HC);yMe=n(cNe,"STRONG",{});var jyt=s(yMe);Xxr=r(jyt,"clip"),jyt.forEach(t),zxr=r(cNe," \u2014 "),TY=n(cNe,"A",{href:!0});var Dyt=s(TY);Wxr=r(Dyt,"FlaxCLIPModel"),Dyt.forEach(t),Qxr=r(cNe," (CLIP model)"),cNe.forEach(t),Hxr=i(ne),UC=n(ne,"LI",{});var fNe=s(UC);xMe=n(fNe,"STRONG",{});var Gyt=s(xMe);Uxr=r(Gyt,"distilbert"),Gyt.forEach(t),Jxr=r(fNe," \u2014 "),MY=n(fNe,"A",{href:!0});var Oyt=s(MY);Yxr=r(Oyt,"FlaxDistilBertModel"),Oyt.forEach(t),Kxr=r(fNe," (DistilBERT model)"),fNe.forEach(t),Zxr=i(ne),JC=n(ne,"LI",{});var mNe=s(JC);$Me=n(mNe,"STRONG",{});var Vyt=s($Me);e$r=r(Vyt,"electra"),Vyt.forEach(t),o$r=r(mNe," \u2014 "),EY=n(mNe,"A",{href:!0});var Xyt=s(EY);r$r=r(Xyt,"FlaxElectraModel"),Xyt.forEach(t),t$r=r(mNe," (ELECTRA model)"),mNe.forEach(t),a$r=i(ne),YC=n(ne,"LI",{});var gNe=s(YC);kMe=n(gNe,"STRONG",{});var zyt=s(kMe);n$r=r(zyt,"gpt2"),zyt.forEach(t),s$r=r(gNe," \u2014 "),CY=n(gNe,"A",{href:!0});var Wyt=s(CY);l$r=r(Wyt,"FlaxGPT2Model"),Wyt.forEach(t),i$r=r(gNe," (OpenAI GPT-2 model)"),gNe.forEach(t),d$r=i(ne),KC=n(ne,"LI",{});var hNe=s(KC);SMe=n(hNe,"STRONG",{});var Qyt=s(SMe);c$r=r(Qyt,"gpt_neo"),Qyt.forEach(t),f$r=r(hNe," \u2014 "),wY=n(hNe,"A",{href:!0});var Hyt=s(wY);m$r=r(Hyt,"FlaxGPTNeoModel"),Hyt.forEach(t),g$r=r(hNe," (GPT Neo model)"),hNe.forEach(t),h$r=i(ne),ZC=n(ne,"LI",{});var pNe=s(ZC);RMe=n(pNe,"STRONG",{});var Uyt=s(RMe);p$r=r(Uyt,"gptj"),Uyt.forEach(t),_$r=r(pNe," \u2014 "),AY=n(pNe,"A",{href:!0});var Jyt=s(AY);u$r=r(Jyt,"FlaxGPTJModel"),Jyt.forEach(t),b$r=r(pNe," (GPT-J model)"),pNe.forEach(t),v$r=i(ne),e5=n(ne,"LI",{});var _Ne=s(e5);PMe=n(_Ne,"STRONG",{});var Yyt=s(PMe);F$r=r(Yyt,"marian"),Yyt.forEach(t),T$r=r(_Ne," \u2014 "),LY=n(_Ne,"A",{href:!0});var Kyt=s(LY);M$r=r(Kyt,"FlaxMarianModel"),Kyt.forEach(t),E$r=r(_Ne," (Marian model)"),_Ne.forEach(t),C$r=i(ne),o5=n(ne,"LI",{});var uNe=s(o5);BMe=n(uNe,"STRONG",{});var Zyt=s(BMe);w$r=r(Zyt,"mbart"),Zyt.forEach(t),A$r=r(uNe," \u2014 "),yY=n(uNe,"A",{href:!0});var e8t=s(yY);L$r=r(e8t,"FlaxMBartModel"),e8t.forEach(t),y$r=r(uNe," (mBART model)"),uNe.forEach(t),x$r=i(ne),r5=n(ne,"LI",{});var bNe=s(r5);IMe=n(bNe,"STRONG",{});var o8t=s(IMe);$$r=r(o8t,"mt5"),o8t.forEach(t),k$r=r(bNe," \u2014 "),xY=n(bNe,"A",{href:!0});var r8t=s(xY);S$r=r(r8t,"FlaxMT5Model"),r8t.forEach(t),R$r=r(bNe," (MT5 model)"),bNe.forEach(t),P$r=i(ne),t5=n(ne,"LI",{});var vNe=s(t5);NMe=n(vNe,"STRONG",{});var t8t=s(NMe);B$r=r(t8t,"opt"),t8t.forEach(t),I$r=r(vNe," \u2014 "),$Y=n(vNe,"A",{href:!0});var a8t=s($Y);N$r=r(a8t,"FlaxOPTModel"),a8t.forEach(t),q$r=r(vNe," (OPT model)"),vNe.forEach(t),j$r=i(ne),a5=n(ne,"LI",{});var FNe=s(a5);qMe=n(FNe,"STRONG",{});var n8t=s(qMe);D$r=r(n8t,"pegasus"),n8t.forEach(t),G$r=r(FNe," \u2014 "),kY=n(FNe,"A",{href:!0});var s8t=s(kY);O$r=r(s8t,"FlaxPegasusModel"),s8t.forEach(t),V$r=r(FNe," (Pegasus model)"),FNe.forEach(t),X$r=i(ne),n5=n(ne,"LI",{});var TNe=s(n5);jMe=n(TNe,"STRONG",{});var l8t=s(jMe);z$r=r(l8t,"roberta"),l8t.forEach(t),W$r=r(TNe," \u2014 "),SY=n(TNe,"A",{href:!0});var i8t=s(SY);Q$r=r(i8t,"FlaxRobertaModel"),i8t.forEach(t),H$r=r(TNe," (RoBERTa model)"),TNe.forEach(t),U$r=i(ne),s5=n(ne,"LI",{});var MNe=s(s5);DMe=n(MNe,"STRONG",{});var d8t=s(DMe);J$r=r(d8t,"roformer"),d8t.forEach(t),Y$r=r(MNe," \u2014 "),RY=n(MNe,"A",{href:!0});var c8t=s(RY);K$r=r(c8t,"FlaxRoFormerModel"),c8t.forEach(t),Z$r=r(MNe," (RoFormer model)"),MNe.forEach(t),ekr=i(ne),l5=n(ne,"LI",{});var ENe=s(l5);GMe=n(ENe,"STRONG",{});var f8t=s(GMe);okr=r(f8t,"t5"),f8t.forEach(t),rkr=r(ENe," \u2014 "),PY=n(ENe,"A",{href:!0});var m8t=s(PY);tkr=r(m8t,"FlaxT5Model"),m8t.forEach(t),akr=r(ENe," (T5 model)"),ENe.forEach(t),nkr=i(ne),i5=n(ne,"LI",{});var CNe=s(i5);OMe=n(CNe,"STRONG",{});var g8t=s(OMe);skr=r(g8t,"vision-text-dual-encoder"),g8t.forEach(t),lkr=r(CNe," \u2014 "),BY=n(CNe,"A",{href:!0});var h8t=s(BY);ikr=r(h8t,"FlaxVisionTextDualEncoderModel"),h8t.forEach(t),dkr=r(CNe," (VisionTextDualEncoder model)"),CNe.forEach(t),ckr=i(ne),d5=n(ne,"LI",{});var wNe=s(d5);VMe=n(wNe,"STRONG",{});var p8t=s(VMe);fkr=r(p8t,"vit"),p8t.forEach(t),mkr=r(wNe," \u2014 "),IY=n(wNe,"A",{href:!0});var _8t=s(IY);gkr=r(_8t,"FlaxViTModel"),_8t.forEach(t),hkr=r(wNe," (ViT model)"),wNe.forEach(t),pkr=i(ne),c5=n(ne,"LI",{});var ANe=s(c5);XMe=n(ANe,"STRONG",{});var u8t=s(XMe);_kr=r(u8t,"wav2vec2"),u8t.forEach(t),ukr=r(ANe," \u2014 "),NY=n(ANe,"A",{href:!0});var b8t=s(NY);bkr=r(b8t,"FlaxWav2Vec2Model"),b8t.forEach(t),vkr=r(ANe," (Wav2Vec2 model)"),ANe.forEach(t),Fkr=i(ne),f5=n(ne,"LI",{});var LNe=s(f5);zMe=n(LNe,"STRONG",{});var v8t=s(zMe);Tkr=r(v8t,"xglm"),v8t.forEach(t),Mkr=r(LNe," \u2014 "),qY=n(LNe,"A",{href:!0});var F8t=s(qY);Ekr=r(F8t,"FlaxXGLMModel"),F8t.forEach(t),Ckr=r(LNe," (XGLM model)"),LNe.forEach(t),wkr=i(ne),m5=n(ne,"LI",{});var yNe=s(m5);WMe=n(yNe,"STRONG",{});var T8t=s(WMe);Akr=r(T8t,"xlm-roberta"),T8t.forEach(t),Lkr=r(yNe," \u2014 "),jY=n(yNe,"A",{href:!0});var M8t=s(jY);ykr=r(M8t,"FlaxXLMRobertaModel"),M8t.forEach(t),xkr=r(yNe," (XLM-RoBERTa model)"),yNe.forEach(t),ne.forEach(t),$kr=i(Xl),T(g5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),NDe=i(f),Pc=n(f,"H2",{class:!0});var XOe=s(Pc);h5=n(XOe,"A",{id:!0,class:!0,href:!0});var E8t=s(h5);QMe=n(E8t,"SPAN",{});var C8t=s(QMe);T(X9.$$.fragment,C8t),C8t.forEach(t),E8t.forEach(t),kkr=i(XOe),HMe=n(XOe,"SPAN",{});var w8t=s(HMe);Skr=r(w8t,"FlaxAutoModelForCausalLM"),w8t.forEach(t),XOe.forEach(t),qDe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(z9.$$.fragment,zl),Rkr=i(zl),Bc=n(zl,"P",{});var _oe=s(Bc);Pkr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DY=n(_oe,"A",{href:!0});var A8t=s(DY);Bkr=r(A8t,"from_pretrained()"),A8t.forEach(t),Ikr=r(_oe," class method or the "),GY=n(_oe,"A",{href:!0});var L8t=s(GY);Nkr=r(L8t,"from_config()"),L8t.forEach(t),qkr=r(_oe,` class
method.`),_oe.forEach(t),jkr=i(zl),W9=n(zl,"P",{});var zOe=s(W9);Dkr=r(zOe,"This class cannot be instantiated directly using "),UMe=n(zOe,"CODE",{});var y8t=s(UMe);Gkr=r(y8t,"__init__()"),y8t.forEach(t),Okr=r(zOe," (throws an error)."),zOe.forEach(t),Vkr=i(zl),Ot=n(zl,"DIV",{class:!0});var p6=s(Ot);T(Q9.$$.fragment,p6),Xkr=i(p6),JMe=n(p6,"P",{});var x8t=s(JMe);zkr=r(x8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x8t.forEach(t),Wkr=i(p6),Ic=n(p6,"P",{});var uoe=s(Ic);Qkr=r(uoe,`Note:
Loading a model from its configuration file does `),YMe=n(uoe,"STRONG",{});var $8t=s(YMe);Hkr=r($8t,"not"),$8t.forEach(t),Ukr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(uoe,"A",{href:!0});var k8t=s(OY);Jkr=r(k8t,"from_pretrained()"),k8t.forEach(t),Ykr=r(uoe," to load the model weights."),uoe.forEach(t),Kkr=i(p6),T(p5.$$.fragment,p6),p6.forEach(t),Zkr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(H9.$$.fragment,Wl),eSr=i(Wl),KMe=n(Wl,"P",{});var S8t=s(KMe);oSr=r(S8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S8t.forEach(t),rSr=i(Wl),pn=n(Wl,"P",{});var _6=s(pn);tSr=r(_6,"The model class to instantiate is selected based on the "),ZMe=n(_6,"CODE",{});var R8t=s(ZMe);aSr=r(R8t,"model_type"),R8t.forEach(t),nSr=r(_6,` property of the config object (either
passed as an argument or loaded from `),e4e=n(_6,"CODE",{});var P8t=s(e4e);sSr=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),lSr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(_6,"CODE",{});var B8t=s(o4e);iSr=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),dSr=r(_6,":"),_6.forEach(t),cSr=i(Wl),ye=n(Wl,"UL",{});var Ie=s(ye);_5=n(Ie,"LI",{});var xNe=s(_5);r4e=n(xNe,"STRONG",{});var I8t=s(r4e);fSr=r(I8t,"bart"),I8t.forEach(t),mSr=r(xNe," \u2014 "),VY=n(xNe,"A",{href:!0});var N8t=s(VY);gSr=r(N8t,"FlaxBartForCausalLM"),N8t.forEach(t),hSr=r(xNe," (BART model)"),xNe.forEach(t),pSr=i(Ie),u5=n(Ie,"LI",{});var $Ne=s(u5);t4e=n($Ne,"STRONG",{});var q8t=s(t4e);_Sr=r(q8t,"bert"),q8t.forEach(t),uSr=r($Ne," \u2014 "),XY=n($Ne,"A",{href:!0});var j8t=s(XY);bSr=r(j8t,"FlaxBertForCausalLM"),j8t.forEach(t),vSr=r($Ne," (BERT model)"),$Ne.forEach(t),FSr=i(Ie),b5=n(Ie,"LI",{});var kNe=s(b5);a4e=n(kNe,"STRONG",{});var D8t=s(a4e);TSr=r(D8t,"big_bird"),D8t.forEach(t),MSr=r(kNe," \u2014 "),zY=n(kNe,"A",{href:!0});var G8t=s(zY);ESr=r(G8t,"FlaxBigBirdForCausalLM"),G8t.forEach(t),CSr=r(kNe," (BigBird model)"),kNe.forEach(t),wSr=i(Ie),v5=n(Ie,"LI",{});var SNe=s(v5);n4e=n(SNe,"STRONG",{});var O8t=s(n4e);ASr=r(O8t,"electra"),O8t.forEach(t),LSr=r(SNe," \u2014 "),WY=n(SNe,"A",{href:!0});var V8t=s(WY);ySr=r(V8t,"FlaxElectraForCausalLM"),V8t.forEach(t),xSr=r(SNe," (ELECTRA model)"),SNe.forEach(t),$Sr=i(Ie),F5=n(Ie,"LI",{});var RNe=s(F5);s4e=n(RNe,"STRONG",{});var X8t=s(s4e);kSr=r(X8t,"gpt2"),X8t.forEach(t),SSr=r(RNe," \u2014 "),QY=n(RNe,"A",{href:!0});var z8t=s(QY);RSr=r(z8t,"FlaxGPT2LMHeadModel"),z8t.forEach(t),PSr=r(RNe," (OpenAI GPT-2 model)"),RNe.forEach(t),BSr=i(Ie),T5=n(Ie,"LI",{});var PNe=s(T5);l4e=n(PNe,"STRONG",{});var W8t=s(l4e);ISr=r(W8t,"gpt_neo"),W8t.forEach(t),NSr=r(PNe," \u2014 "),HY=n(PNe,"A",{href:!0});var Q8t=s(HY);qSr=r(Q8t,"FlaxGPTNeoForCausalLM"),Q8t.forEach(t),jSr=r(PNe," (GPT Neo model)"),PNe.forEach(t),DSr=i(Ie),M5=n(Ie,"LI",{});var BNe=s(M5);i4e=n(BNe,"STRONG",{});var H8t=s(i4e);GSr=r(H8t,"gptj"),H8t.forEach(t),OSr=r(BNe," \u2014 "),UY=n(BNe,"A",{href:!0});var U8t=s(UY);VSr=r(U8t,"FlaxGPTJForCausalLM"),U8t.forEach(t),XSr=r(BNe," (GPT-J model)"),BNe.forEach(t),zSr=i(Ie),E5=n(Ie,"LI",{});var INe=s(E5);d4e=n(INe,"STRONG",{});var J8t=s(d4e);WSr=r(J8t,"opt"),J8t.forEach(t),QSr=r(INe," \u2014 "),JY=n(INe,"A",{href:!0});var Y8t=s(JY);HSr=r(Y8t,"FlaxOPTForCausalLM"),Y8t.forEach(t),USr=r(INe," (OPT model)"),INe.forEach(t),JSr=i(Ie),C5=n(Ie,"LI",{});var NNe=s(C5);c4e=n(NNe,"STRONG",{});var K8t=s(c4e);YSr=r(K8t,"roberta"),K8t.forEach(t),KSr=r(NNe," \u2014 "),YY=n(NNe,"A",{href:!0});var Z8t=s(YY);ZSr=r(Z8t,"FlaxRobertaForCausalLM"),Z8t.forEach(t),eRr=r(NNe," (RoBERTa model)"),NNe.forEach(t),oRr=i(Ie),w5=n(Ie,"LI",{});var qNe=s(w5);f4e=n(qNe,"STRONG",{});var e9t=s(f4e);rRr=r(e9t,"xglm"),e9t.forEach(t),tRr=r(qNe," \u2014 "),KY=n(qNe,"A",{href:!0});var o9t=s(KY);aRr=r(o9t,"FlaxXGLMForCausalLM"),o9t.forEach(t),nRr=r(qNe," (XGLM model)"),qNe.forEach(t),Ie.forEach(t),sRr=i(Wl),T(A5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),jDe=i(f),Nc=n(f,"H2",{class:!0});var WOe=s(Nc);L5=n(WOe,"A",{id:!0,class:!0,href:!0});var r9t=s(L5);m4e=n(r9t,"SPAN",{});var t9t=s(m4e);T(U9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),lRr=i(WOe),g4e=n(WOe,"SPAN",{});var a9t=s(g4e);iRr=r(a9t,"FlaxAutoModelForPreTraining"),a9t.forEach(t),WOe.forEach(t),DDe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(J9.$$.fragment,Ql),dRr=i(Ql),qc=n(Ql,"P",{});var boe=s(qc);cRr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZY=n(boe,"A",{href:!0});var n9t=s(ZY);fRr=r(n9t,"from_pretrained()"),n9t.forEach(t),mRr=r(boe," class method or the "),eK=n(boe,"A",{href:!0});var s9t=s(eK);gRr=r(s9t,"from_config()"),s9t.forEach(t),hRr=r(boe,` class
method.`),boe.forEach(t),pRr=i(Ql),Y9=n(Ql,"P",{});var QOe=s(Y9);_Rr=r(QOe,"This class cannot be instantiated directly using "),h4e=n(QOe,"CODE",{});var l9t=s(h4e);uRr=r(l9t,"__init__()"),l9t.forEach(t),bRr=r(QOe," (throws an error)."),QOe.forEach(t),vRr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var u6=s(Vt);T(K9.$$.fragment,u6),FRr=i(u6),p4e=n(u6,"P",{});var i9t=s(p4e);TRr=r(i9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),i9t.forEach(t),MRr=i(u6),jc=n(u6,"P",{});var voe=s(jc);ERr=r(voe,`Note:
Loading a model from its configuration file does `),_4e=n(voe,"STRONG",{});var d9t=s(_4e);CRr=r(d9t,"not"),d9t.forEach(t),wRr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(voe,"A",{href:!0});var c9t=s(oK);ARr=r(c9t,"from_pretrained()"),c9t.forEach(t),LRr=r(voe," to load the model weights."),voe.forEach(t),yRr=i(u6),T(y5.$$.fragment,u6),u6.forEach(t),xRr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(Z9.$$.fragment,Hl),$Rr=i(Hl),u4e=n(Hl,"P",{});var f9t=s(u4e);kRr=r(f9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f9t.forEach(t),SRr=i(Hl),_n=n(Hl,"P",{});var b6=s(_n);RRr=r(b6,"The model class to instantiate is selected based on the "),b4e=n(b6,"CODE",{});var m9t=s(b4e);PRr=r(m9t,"model_type"),m9t.forEach(t),BRr=r(b6,` property of the config object (either
passed as an argument or loaded from `),v4e=n(b6,"CODE",{});var g9t=s(v4e);IRr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),NRr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(b6,"CODE",{});var h9t=s(F4e);qRr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),jRr=r(b6,":"),b6.forEach(t),DRr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);x5=n(we,"LI",{});var jNe=s(x5);T4e=n(jNe,"STRONG",{});var p9t=s(T4e);GRr=r(p9t,"albert"),p9t.forEach(t),ORr=r(jNe," \u2014 "),rK=n(jNe,"A",{href:!0});var _9t=s(rK);VRr=r(_9t,"FlaxAlbertForPreTraining"),_9t.forEach(t),XRr=r(jNe," (ALBERT model)"),jNe.forEach(t),zRr=i(we),$5=n(we,"LI",{});var DNe=s($5);M4e=n(DNe,"STRONG",{});var u9t=s(M4e);WRr=r(u9t,"bart"),u9t.forEach(t),QRr=r(DNe," \u2014 "),tK=n(DNe,"A",{href:!0});var b9t=s(tK);HRr=r(b9t,"FlaxBartForConditionalGeneration"),b9t.forEach(t),URr=r(DNe," (BART model)"),DNe.forEach(t),JRr=i(we),k5=n(we,"LI",{});var GNe=s(k5);E4e=n(GNe,"STRONG",{});var v9t=s(E4e);YRr=r(v9t,"bert"),v9t.forEach(t),KRr=r(GNe," \u2014 "),aK=n(GNe,"A",{href:!0});var F9t=s(aK);ZRr=r(F9t,"FlaxBertForPreTraining"),F9t.forEach(t),ePr=r(GNe," (BERT model)"),GNe.forEach(t),oPr=i(we),S5=n(we,"LI",{});var ONe=s(S5);C4e=n(ONe,"STRONG",{});var T9t=s(C4e);rPr=r(T9t,"big_bird"),T9t.forEach(t),tPr=r(ONe," \u2014 "),nK=n(ONe,"A",{href:!0});var M9t=s(nK);aPr=r(M9t,"FlaxBigBirdForPreTraining"),M9t.forEach(t),nPr=r(ONe," (BigBird model)"),ONe.forEach(t),sPr=i(we),R5=n(we,"LI",{});var VNe=s(R5);w4e=n(VNe,"STRONG",{});var E9t=s(w4e);lPr=r(E9t,"electra"),E9t.forEach(t),iPr=r(VNe," \u2014 "),sK=n(VNe,"A",{href:!0});var C9t=s(sK);dPr=r(C9t,"FlaxElectraForPreTraining"),C9t.forEach(t),cPr=r(VNe," (ELECTRA model)"),VNe.forEach(t),fPr=i(we),P5=n(we,"LI",{});var XNe=s(P5);A4e=n(XNe,"STRONG",{});var w9t=s(A4e);mPr=r(w9t,"mbart"),w9t.forEach(t),gPr=r(XNe," \u2014 "),lK=n(XNe,"A",{href:!0});var A9t=s(lK);hPr=r(A9t,"FlaxMBartForConditionalGeneration"),A9t.forEach(t),pPr=r(XNe," (mBART model)"),XNe.forEach(t),_Pr=i(we),B5=n(we,"LI",{});var zNe=s(B5);L4e=n(zNe,"STRONG",{});var L9t=s(L4e);uPr=r(L9t,"mt5"),L9t.forEach(t),bPr=r(zNe," \u2014 "),iK=n(zNe,"A",{href:!0});var y9t=s(iK);vPr=r(y9t,"FlaxMT5ForConditionalGeneration"),y9t.forEach(t),FPr=r(zNe," (MT5 model)"),zNe.forEach(t),TPr=i(we),I5=n(we,"LI",{});var WNe=s(I5);y4e=n(WNe,"STRONG",{});var x9t=s(y4e);MPr=r(x9t,"roberta"),x9t.forEach(t),EPr=r(WNe," \u2014 "),dK=n(WNe,"A",{href:!0});var $9t=s(dK);CPr=r($9t,"FlaxRobertaForMaskedLM"),$9t.forEach(t),wPr=r(WNe," (RoBERTa model)"),WNe.forEach(t),APr=i(we),N5=n(we,"LI",{});var QNe=s(N5);x4e=n(QNe,"STRONG",{});var k9t=s(x4e);LPr=r(k9t,"roformer"),k9t.forEach(t),yPr=r(QNe," \u2014 "),cK=n(QNe,"A",{href:!0});var S9t=s(cK);xPr=r(S9t,"FlaxRoFormerForMaskedLM"),S9t.forEach(t),$Pr=r(QNe," (RoFormer model)"),QNe.forEach(t),kPr=i(we),q5=n(we,"LI",{});var HNe=s(q5);$4e=n(HNe,"STRONG",{});var R9t=s($4e);SPr=r(R9t,"t5"),R9t.forEach(t),RPr=r(HNe," \u2014 "),fK=n(HNe,"A",{href:!0});var P9t=s(fK);PPr=r(P9t,"FlaxT5ForConditionalGeneration"),P9t.forEach(t),BPr=r(HNe," (T5 model)"),HNe.forEach(t),IPr=i(we),j5=n(we,"LI",{});var UNe=s(j5);k4e=n(UNe,"STRONG",{});var B9t=s(k4e);NPr=r(B9t,"wav2vec2"),B9t.forEach(t),qPr=r(UNe," \u2014 "),mK=n(UNe,"A",{href:!0});var I9t=s(mK);jPr=r(I9t,"FlaxWav2Vec2ForPreTraining"),I9t.forEach(t),DPr=r(UNe," (Wav2Vec2 model)"),UNe.forEach(t),GPr=i(we),D5=n(we,"LI",{});var JNe=s(D5);S4e=n(JNe,"STRONG",{});var N9t=s(S4e);OPr=r(N9t,"xlm-roberta"),N9t.forEach(t),VPr=r(JNe," \u2014 "),gK=n(JNe,"A",{href:!0});var q9t=s(gK);XPr=r(q9t,"FlaxXLMRobertaForMaskedLM"),q9t.forEach(t),zPr=r(JNe," (XLM-RoBERTa model)"),JNe.forEach(t),we.forEach(t),WPr=i(Hl),T(G5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),GDe=i(f),Dc=n(f,"H2",{class:!0});var HOe=s(Dc);O5=n(HOe,"A",{id:!0,class:!0,href:!0});var j9t=s(O5);R4e=n(j9t,"SPAN",{});var D9t=s(R4e);T(ex.$$.fragment,D9t),D9t.forEach(t),j9t.forEach(t),QPr=i(HOe),P4e=n(HOe,"SPAN",{});var G9t=s(P4e);HPr=r(G9t,"FlaxAutoModelForMaskedLM"),G9t.forEach(t),HOe.forEach(t),ODe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(ox.$$.fragment,Ul),UPr=i(Ul),Gc=n(Ul,"P",{});var Foe=s(Gc);JPr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hK=n(Foe,"A",{href:!0});var O9t=s(hK);YPr=r(O9t,"from_pretrained()"),O9t.forEach(t),KPr=r(Foe," class method or the "),pK=n(Foe,"A",{href:!0});var V9t=s(pK);ZPr=r(V9t,"from_config()"),V9t.forEach(t),eBr=r(Foe,` class
method.`),Foe.forEach(t),oBr=i(Ul),rx=n(Ul,"P",{});var UOe=s(rx);rBr=r(UOe,"This class cannot be instantiated directly using "),B4e=n(UOe,"CODE",{});var X9t=s(B4e);tBr=r(X9t,"__init__()"),X9t.forEach(t),aBr=r(UOe," (throws an error)."),UOe.forEach(t),nBr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var v6=s(Xt);T(tx.$$.fragment,v6),sBr=i(v6),I4e=n(v6,"P",{});var z9t=s(I4e);lBr=r(z9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),z9t.forEach(t),iBr=i(v6),Oc=n(v6,"P",{});var Toe=s(Oc);dBr=r(Toe,`Note:
Loading a model from its configuration file does `),N4e=n(Toe,"STRONG",{});var W9t=s(N4e);cBr=r(W9t,"not"),W9t.forEach(t),fBr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(Toe,"A",{href:!0});var Q9t=s(_K);mBr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),gBr=r(Toe," to load the model weights."),Toe.forEach(t),hBr=i(v6),T(V5.$$.fragment,v6),v6.forEach(t),pBr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(ax.$$.fragment,Jl),_Br=i(Jl),q4e=n(Jl,"P",{});var H9t=s(q4e);uBr=r(H9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H9t.forEach(t),bBr=i(Jl),un=n(Jl,"P",{});var F6=s(un);vBr=r(F6,"The model class to instantiate is selected based on the "),j4e=n(F6,"CODE",{});var U9t=s(j4e);FBr=r(U9t,"model_type"),U9t.forEach(t),TBr=r(F6,` property of the config object (either
passed as an argument or loaded from `),D4e=n(F6,"CODE",{});var J9t=s(D4e);MBr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),EBr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(F6,"CODE",{});var Y9t=s(G4e);CBr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),wBr=r(F6,":"),F6.forEach(t),ABr=i(Jl),xe=n(Jl,"UL",{});var Ne=s(xe);X5=n(Ne,"LI",{});var YNe=s(X5);O4e=n(YNe,"STRONG",{});var K9t=s(O4e);LBr=r(K9t,"albert"),K9t.forEach(t),yBr=r(YNe," \u2014 "),uK=n(YNe,"A",{href:!0});var Z9t=s(uK);xBr=r(Z9t,"FlaxAlbertForMaskedLM"),Z9t.forEach(t),$Br=r(YNe," (ALBERT model)"),YNe.forEach(t),kBr=i(Ne),z5=n(Ne,"LI",{});var KNe=s(z5);V4e=n(KNe,"STRONG",{});var ext=s(V4e);SBr=r(ext,"bart"),ext.forEach(t),RBr=r(KNe," \u2014 "),bK=n(KNe,"A",{href:!0});var oxt=s(bK);PBr=r(oxt,"FlaxBartForConditionalGeneration"),oxt.forEach(t),BBr=r(KNe," (BART model)"),KNe.forEach(t),IBr=i(Ne),W5=n(Ne,"LI",{});var ZNe=s(W5);X4e=n(ZNe,"STRONG",{});var rxt=s(X4e);NBr=r(rxt,"bert"),rxt.forEach(t),qBr=r(ZNe," \u2014 "),vK=n(ZNe,"A",{href:!0});var txt=s(vK);jBr=r(txt,"FlaxBertForMaskedLM"),txt.forEach(t),DBr=r(ZNe," (BERT model)"),ZNe.forEach(t),GBr=i(Ne),Q5=n(Ne,"LI",{});var eqe=s(Q5);z4e=n(eqe,"STRONG",{});var axt=s(z4e);OBr=r(axt,"big_bird"),axt.forEach(t),VBr=r(eqe," \u2014 "),FK=n(eqe,"A",{href:!0});var nxt=s(FK);XBr=r(nxt,"FlaxBigBirdForMaskedLM"),nxt.forEach(t),zBr=r(eqe," (BigBird model)"),eqe.forEach(t),WBr=i(Ne),H5=n(Ne,"LI",{});var oqe=s(H5);W4e=n(oqe,"STRONG",{});var sxt=s(W4e);QBr=r(sxt,"distilbert"),sxt.forEach(t),HBr=r(oqe," \u2014 "),TK=n(oqe,"A",{href:!0});var lxt=s(TK);UBr=r(lxt,"FlaxDistilBertForMaskedLM"),lxt.forEach(t),JBr=r(oqe," (DistilBERT model)"),oqe.forEach(t),YBr=i(Ne),U5=n(Ne,"LI",{});var rqe=s(U5);Q4e=n(rqe,"STRONG",{});var ixt=s(Q4e);KBr=r(ixt,"electra"),ixt.forEach(t),ZBr=r(rqe," \u2014 "),MK=n(rqe,"A",{href:!0});var dxt=s(MK);eIr=r(dxt,"FlaxElectraForMaskedLM"),dxt.forEach(t),oIr=r(rqe," (ELECTRA model)"),rqe.forEach(t),rIr=i(Ne),J5=n(Ne,"LI",{});var tqe=s(J5);H4e=n(tqe,"STRONG",{});var cxt=s(H4e);tIr=r(cxt,"mbart"),cxt.forEach(t),aIr=r(tqe," \u2014 "),EK=n(tqe,"A",{href:!0});var fxt=s(EK);nIr=r(fxt,"FlaxMBartForConditionalGeneration"),fxt.forEach(t),sIr=r(tqe," (mBART model)"),tqe.forEach(t),lIr=i(Ne),Y5=n(Ne,"LI",{});var aqe=s(Y5);U4e=n(aqe,"STRONG",{});var mxt=s(U4e);iIr=r(mxt,"roberta"),mxt.forEach(t),dIr=r(aqe," \u2014 "),CK=n(aqe,"A",{href:!0});var gxt=s(CK);cIr=r(gxt,"FlaxRobertaForMaskedLM"),gxt.forEach(t),fIr=r(aqe," (RoBERTa model)"),aqe.forEach(t),mIr=i(Ne),K5=n(Ne,"LI",{});var nqe=s(K5);J4e=n(nqe,"STRONG",{});var hxt=s(J4e);gIr=r(hxt,"roformer"),hxt.forEach(t),hIr=r(nqe," \u2014 "),wK=n(nqe,"A",{href:!0});var pxt=s(wK);pIr=r(pxt,"FlaxRoFormerForMaskedLM"),pxt.forEach(t),_Ir=r(nqe," (RoFormer model)"),nqe.forEach(t),uIr=i(Ne),Z5=n(Ne,"LI",{});var sqe=s(Z5);Y4e=n(sqe,"STRONG",{});var _xt=s(Y4e);bIr=r(_xt,"xlm-roberta"),_xt.forEach(t),vIr=r(sqe," \u2014 "),AK=n(sqe,"A",{href:!0});var uxt=s(AK);FIr=r(uxt,"FlaxXLMRobertaForMaskedLM"),uxt.forEach(t),TIr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),Ne.forEach(t),MIr=i(Jl),T(e0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),VDe=i(f),Vc=n(f,"H2",{class:!0});var JOe=s(Vc);o0=n(JOe,"A",{id:!0,class:!0,href:!0});var bxt=s(o0);K4e=n(bxt,"SPAN",{});var vxt=s(K4e);T(nx.$$.fragment,vxt),vxt.forEach(t),bxt.forEach(t),EIr=i(JOe),Z4e=n(JOe,"SPAN",{});var Fxt=s(Z4e);CIr=r(Fxt,"FlaxAutoModelForSeq2SeqLM"),Fxt.forEach(t),JOe.forEach(t),XDe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(sx.$$.fragment,Yl),wIr=i(Yl),Xc=n(Yl,"P",{});var Moe=s(Xc);AIr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LK=n(Moe,"A",{href:!0});var Txt=s(LK);LIr=r(Txt,"from_pretrained()"),Txt.forEach(t),yIr=r(Moe," class method or the "),yK=n(Moe,"A",{href:!0});var Mxt=s(yK);xIr=r(Mxt,"from_config()"),Mxt.forEach(t),$Ir=r(Moe,` class
method.`),Moe.forEach(t),kIr=i(Yl),lx=n(Yl,"P",{});var YOe=s(lx);SIr=r(YOe,"This class cannot be instantiated directly using "),eEe=n(YOe,"CODE",{});var Ext=s(eEe);RIr=r(Ext,"__init__()"),Ext.forEach(t),PIr=r(YOe," (throws an error)."),YOe.forEach(t),BIr=i(Yl),zt=n(Yl,"DIV",{class:!0});var T6=s(zt);T(ix.$$.fragment,T6),IIr=i(T6),oEe=n(T6,"P",{});var Cxt=s(oEe);NIr=r(Cxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cxt.forEach(t),qIr=i(T6),zc=n(T6,"P",{});var Eoe=s(zc);jIr=r(Eoe,`Note:
Loading a model from its configuration file does `),rEe=n(Eoe,"STRONG",{});var wxt=s(rEe);DIr=r(wxt,"not"),wxt.forEach(t),GIr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Eoe,"A",{href:!0});var Axt=s(xK);OIr=r(Axt,"from_pretrained()"),Axt.forEach(t),VIr=r(Eoe," to load the model weights."),Eoe.forEach(t),XIr=i(T6),T(r0.$$.fragment,T6),T6.forEach(t),zIr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(dx.$$.fragment,Kl),WIr=i(Kl),tEe=n(Kl,"P",{});var Lxt=s(tEe);QIr=r(Lxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lxt.forEach(t),HIr=i(Kl),bn=n(Kl,"P",{});var M6=s(bn);UIr=r(M6,"The model class to instantiate is selected based on the "),aEe=n(M6,"CODE",{});var yxt=s(aEe);JIr=r(yxt,"model_type"),yxt.forEach(t),YIr=r(M6,` property of the config object (either
passed as an argument or loaded from `),nEe=n(M6,"CODE",{});var xxt=s(nEe);KIr=r(xxt,"pretrained_model_name_or_path"),xxt.forEach(t),ZIr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(M6,"CODE",{});var $xt=s(sEe);eNr=r($xt,"pretrained_model_name_or_path"),$xt.forEach(t),oNr=r(M6,":"),M6.forEach(t),rNr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);t0=n(ze,"LI",{});var lqe=s(t0);lEe=n(lqe,"STRONG",{});var kxt=s(lEe);tNr=r(kxt,"bart"),kxt.forEach(t),aNr=r(lqe," \u2014 "),$K=n(lqe,"A",{href:!0});var Sxt=s($K);nNr=r(Sxt,"FlaxBartForConditionalGeneration"),Sxt.forEach(t),sNr=r(lqe," (BART model)"),lqe.forEach(t),lNr=i(ze),a0=n(ze,"LI",{});var iqe=s(a0);iEe=n(iqe,"STRONG",{});var Rxt=s(iEe);iNr=r(Rxt,"blenderbot"),Rxt.forEach(t),dNr=r(iqe," \u2014 "),kK=n(iqe,"A",{href:!0});var Pxt=s(kK);cNr=r(Pxt,"FlaxBlenderbotForConditionalGeneration"),Pxt.forEach(t),fNr=r(iqe," (Blenderbot model)"),iqe.forEach(t),mNr=i(ze),n0=n(ze,"LI",{});var dqe=s(n0);dEe=n(dqe,"STRONG",{});var Bxt=s(dEe);gNr=r(Bxt,"blenderbot-small"),Bxt.forEach(t),hNr=r(dqe," \u2014 "),SK=n(dqe,"A",{href:!0});var Ixt=s(SK);pNr=r(Ixt,"FlaxBlenderbotSmallForConditionalGeneration"),Ixt.forEach(t),_Nr=r(dqe," (BlenderbotSmall model)"),dqe.forEach(t),uNr=i(ze),s0=n(ze,"LI",{});var cqe=s(s0);cEe=n(cqe,"STRONG",{});var Nxt=s(cEe);bNr=r(Nxt,"encoder-decoder"),Nxt.forEach(t),vNr=r(cqe," \u2014 "),RK=n(cqe,"A",{href:!0});var qxt=s(RK);FNr=r(qxt,"FlaxEncoderDecoderModel"),qxt.forEach(t),TNr=r(cqe," (Encoder decoder model)"),cqe.forEach(t),MNr=i(ze),l0=n(ze,"LI",{});var fqe=s(l0);fEe=n(fqe,"STRONG",{});var jxt=s(fEe);ENr=r(jxt,"marian"),jxt.forEach(t),CNr=r(fqe," \u2014 "),PK=n(fqe,"A",{href:!0});var Dxt=s(PK);wNr=r(Dxt,"FlaxMarianMTModel"),Dxt.forEach(t),ANr=r(fqe," (Marian model)"),fqe.forEach(t),LNr=i(ze),i0=n(ze,"LI",{});var mqe=s(i0);mEe=n(mqe,"STRONG",{});var Gxt=s(mEe);yNr=r(Gxt,"mbart"),Gxt.forEach(t),xNr=r(mqe," \u2014 "),BK=n(mqe,"A",{href:!0});var Oxt=s(BK);$Nr=r(Oxt,"FlaxMBartForConditionalGeneration"),Oxt.forEach(t),kNr=r(mqe," (mBART model)"),mqe.forEach(t),SNr=i(ze),d0=n(ze,"LI",{});var gqe=s(d0);gEe=n(gqe,"STRONG",{});var Vxt=s(gEe);RNr=r(Vxt,"mt5"),Vxt.forEach(t),PNr=r(gqe," \u2014 "),IK=n(gqe,"A",{href:!0});var Xxt=s(IK);BNr=r(Xxt,"FlaxMT5ForConditionalGeneration"),Xxt.forEach(t),INr=r(gqe," (MT5 model)"),gqe.forEach(t),NNr=i(ze),c0=n(ze,"LI",{});var hqe=s(c0);hEe=n(hqe,"STRONG",{});var zxt=s(hEe);qNr=r(zxt,"pegasus"),zxt.forEach(t),jNr=r(hqe," \u2014 "),NK=n(hqe,"A",{href:!0});var Wxt=s(NK);DNr=r(Wxt,"FlaxPegasusForConditionalGeneration"),Wxt.forEach(t),GNr=r(hqe," (Pegasus model)"),hqe.forEach(t),ONr=i(ze),f0=n(ze,"LI",{});var pqe=s(f0);pEe=n(pqe,"STRONG",{});var Qxt=s(pEe);VNr=r(Qxt,"t5"),Qxt.forEach(t),XNr=r(pqe," \u2014 "),qK=n(pqe,"A",{href:!0});var Hxt=s(qK);zNr=r(Hxt,"FlaxT5ForConditionalGeneration"),Hxt.forEach(t),WNr=r(pqe," (T5 model)"),pqe.forEach(t),ze.forEach(t),QNr=i(Kl),T(m0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),zDe=i(f),Wc=n(f,"H2",{class:!0});var KOe=s(Wc);g0=n(KOe,"A",{id:!0,class:!0,href:!0});var Uxt=s(g0);_Ee=n(Uxt,"SPAN",{});var Jxt=s(_Ee);T(cx.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),HNr=i(KOe),uEe=n(KOe,"SPAN",{});var Yxt=s(uEe);UNr=r(Yxt,"FlaxAutoModelForSequenceClassification"),Yxt.forEach(t),KOe.forEach(t),WDe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(fx.$$.fragment,Zl),JNr=i(Zl),Qc=n(Zl,"P",{});var Coe=s(Qc);YNr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jK=n(Coe,"A",{href:!0});var Kxt=s(jK);KNr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),ZNr=r(Coe," class method or the "),DK=n(Coe,"A",{href:!0});var Zxt=s(DK);eqr=r(Zxt,"from_config()"),Zxt.forEach(t),oqr=r(Coe,` class
method.`),Coe.forEach(t),rqr=i(Zl),mx=n(Zl,"P",{});var ZOe=s(mx);tqr=r(ZOe,"This class cannot be instantiated directly using "),bEe=n(ZOe,"CODE",{});var e$t=s(bEe);aqr=r(e$t,"__init__()"),e$t.forEach(t),nqr=r(ZOe," (throws an error)."),ZOe.forEach(t),sqr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var E6=s(Wt);T(gx.$$.fragment,E6),lqr=i(E6),vEe=n(E6,"P",{});var o$t=s(vEe);iqr=r(o$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o$t.forEach(t),dqr=i(E6),Hc=n(E6,"P",{});var woe=s(Hc);cqr=r(woe,`Note:
Loading a model from its configuration file does `),FEe=n(woe,"STRONG",{});var r$t=s(FEe);fqr=r(r$t,"not"),r$t.forEach(t),mqr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(woe,"A",{href:!0});var t$t=s(GK);gqr=r(t$t,"from_pretrained()"),t$t.forEach(t),hqr=r(woe," to load the model weights."),woe.forEach(t),pqr=i(E6),T(h0.$$.fragment,E6),E6.forEach(t),_qr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(hx.$$.fragment,ei),uqr=i(ei),TEe=n(ei,"P",{});var a$t=s(TEe);bqr=r(a$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a$t.forEach(t),vqr=i(ei),vn=n(ei,"P",{});var C6=s(vn);Fqr=r(C6,"The model class to instantiate is selected based on the "),MEe=n(C6,"CODE",{});var n$t=s(MEe);Tqr=r(n$t,"model_type"),n$t.forEach(t),Mqr=r(C6,` property of the config object (either
passed as an argument or loaded from `),EEe=n(C6,"CODE",{});var s$t=s(EEe);Eqr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),Cqr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(C6,"CODE",{});var l$t=s(CEe);wqr=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),Aqr=r(C6,":"),C6.forEach(t),Lqr=i(ei),$e=n(ei,"UL",{});var qe=s($e);p0=n(qe,"LI",{});var _qe=s(p0);wEe=n(_qe,"STRONG",{});var i$t=s(wEe);yqr=r(i$t,"albert"),i$t.forEach(t),xqr=r(_qe," \u2014 "),OK=n(_qe,"A",{href:!0});var d$t=s(OK);$qr=r(d$t,"FlaxAlbertForSequenceClassification"),d$t.forEach(t),kqr=r(_qe," (ALBERT model)"),_qe.forEach(t),Sqr=i(qe),_0=n(qe,"LI",{});var uqe=s(_0);AEe=n(uqe,"STRONG",{});var c$t=s(AEe);Rqr=r(c$t,"bart"),c$t.forEach(t),Pqr=r(uqe," \u2014 "),VK=n(uqe,"A",{href:!0});var f$t=s(VK);Bqr=r(f$t,"FlaxBartForSequenceClassification"),f$t.forEach(t),Iqr=r(uqe," (BART model)"),uqe.forEach(t),Nqr=i(qe),u0=n(qe,"LI",{});var bqe=s(u0);LEe=n(bqe,"STRONG",{});var m$t=s(LEe);qqr=r(m$t,"bert"),m$t.forEach(t),jqr=r(bqe," \u2014 "),XK=n(bqe,"A",{href:!0});var g$t=s(XK);Dqr=r(g$t,"FlaxBertForSequenceClassification"),g$t.forEach(t),Gqr=r(bqe," (BERT model)"),bqe.forEach(t),Oqr=i(qe),b0=n(qe,"LI",{});var vqe=s(b0);yEe=n(vqe,"STRONG",{});var h$t=s(yEe);Vqr=r(h$t,"big_bird"),h$t.forEach(t),Xqr=r(vqe," \u2014 "),zK=n(vqe,"A",{href:!0});var p$t=s(zK);zqr=r(p$t,"FlaxBigBirdForSequenceClassification"),p$t.forEach(t),Wqr=r(vqe," (BigBird model)"),vqe.forEach(t),Qqr=i(qe),v0=n(qe,"LI",{});var Fqe=s(v0);xEe=n(Fqe,"STRONG",{});var _$t=s(xEe);Hqr=r(_$t,"distilbert"),_$t.forEach(t),Uqr=r(Fqe," \u2014 "),WK=n(Fqe,"A",{href:!0});var u$t=s(WK);Jqr=r(u$t,"FlaxDistilBertForSequenceClassification"),u$t.forEach(t),Yqr=r(Fqe," (DistilBERT model)"),Fqe.forEach(t),Kqr=i(qe),F0=n(qe,"LI",{});var Tqe=s(F0);$Ee=n(Tqe,"STRONG",{});var b$t=s($Ee);Zqr=r(b$t,"electra"),b$t.forEach(t),ejr=r(Tqe," \u2014 "),QK=n(Tqe,"A",{href:!0});var v$t=s(QK);ojr=r(v$t,"FlaxElectraForSequenceClassification"),v$t.forEach(t),rjr=r(Tqe," (ELECTRA model)"),Tqe.forEach(t),tjr=i(qe),T0=n(qe,"LI",{});var Mqe=s(T0);kEe=n(Mqe,"STRONG",{});var F$t=s(kEe);ajr=r(F$t,"mbart"),F$t.forEach(t),njr=r(Mqe," \u2014 "),HK=n(Mqe,"A",{href:!0});var T$t=s(HK);sjr=r(T$t,"FlaxMBartForSequenceClassification"),T$t.forEach(t),ljr=r(Mqe," (mBART model)"),Mqe.forEach(t),ijr=i(qe),M0=n(qe,"LI",{});var Eqe=s(M0);SEe=n(Eqe,"STRONG",{});var M$t=s(SEe);djr=r(M$t,"roberta"),M$t.forEach(t),cjr=r(Eqe," \u2014 "),UK=n(Eqe,"A",{href:!0});var E$t=s(UK);fjr=r(E$t,"FlaxRobertaForSequenceClassification"),E$t.forEach(t),mjr=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),gjr=i(qe),E0=n(qe,"LI",{});var Cqe=s(E0);REe=n(Cqe,"STRONG",{});var C$t=s(REe);hjr=r(C$t,"roformer"),C$t.forEach(t),pjr=r(Cqe," \u2014 "),JK=n(Cqe,"A",{href:!0});var w$t=s(JK);_jr=r(w$t,"FlaxRoFormerForSequenceClassification"),w$t.forEach(t),ujr=r(Cqe," (RoFormer model)"),Cqe.forEach(t),bjr=i(qe),C0=n(qe,"LI",{});var wqe=s(C0);PEe=n(wqe,"STRONG",{});var A$t=s(PEe);vjr=r(A$t,"xlm-roberta"),A$t.forEach(t),Fjr=r(wqe," \u2014 "),YK=n(wqe,"A",{href:!0});var L$t=s(YK);Tjr=r(L$t,"FlaxXLMRobertaForSequenceClassification"),L$t.forEach(t),Mjr=r(wqe," (XLM-RoBERTa model)"),wqe.forEach(t),qe.forEach(t),Ejr=i(ei),T(w0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),QDe=i(f),Uc=n(f,"H2",{class:!0});var eVe=s(Uc);A0=n(eVe,"A",{id:!0,class:!0,href:!0});var y$t=s(A0);BEe=n(y$t,"SPAN",{});var x$t=s(BEe);T(px.$$.fragment,x$t),x$t.forEach(t),y$t.forEach(t),Cjr=i(eVe),IEe=n(eVe,"SPAN",{});var $$t=s(IEe);wjr=r($$t,"FlaxAutoModelForQuestionAnswering"),$$t.forEach(t),eVe.forEach(t),HDe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(_x.$$.fragment,oi),Ajr=i(oi),Jc=n(oi,"P",{});var Aoe=s(Jc);Ljr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KK=n(Aoe,"A",{href:!0});var k$t=s(KK);yjr=r(k$t,"from_pretrained()"),k$t.forEach(t),xjr=r(Aoe," class method or the "),ZK=n(Aoe,"A",{href:!0});var S$t=s(ZK);$jr=r(S$t,"from_config()"),S$t.forEach(t),kjr=r(Aoe,` class
method.`),Aoe.forEach(t),Sjr=i(oi),ux=n(oi,"P",{});var oVe=s(ux);Rjr=r(oVe,"This class cannot be instantiated directly using "),NEe=n(oVe,"CODE",{});var R$t=s(NEe);Pjr=r(R$t,"__init__()"),R$t.forEach(t),Bjr=r(oVe," (throws an error)."),oVe.forEach(t),Ijr=i(oi),Qt=n(oi,"DIV",{class:!0});var w6=s(Qt);T(bx.$$.fragment,w6),Njr=i(w6),qEe=n(w6,"P",{});var P$t=s(qEe);qjr=r(P$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P$t.forEach(t),jjr=i(w6),Yc=n(w6,"P",{});var Loe=s(Yc);Djr=r(Loe,`Note:
Loading a model from its configuration file does `),jEe=n(Loe,"STRONG",{});var B$t=s(jEe);Gjr=r(B$t,"not"),B$t.forEach(t),Ojr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(Loe,"A",{href:!0});var I$t=s(eZ);Vjr=r(I$t,"from_pretrained()"),I$t.forEach(t),Xjr=r(Loe," to load the model weights."),Loe.forEach(t),zjr=i(w6),T(L0.$$.fragment,w6),w6.forEach(t),Wjr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(vx.$$.fragment,ri),Qjr=i(ri),DEe=n(ri,"P",{});var N$t=s(DEe);Hjr=r(N$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N$t.forEach(t),Ujr=i(ri),Fn=n(ri,"P",{});var A6=s(Fn);Jjr=r(A6,"The model class to instantiate is selected based on the "),GEe=n(A6,"CODE",{});var q$t=s(GEe);Yjr=r(q$t,"model_type"),q$t.forEach(t),Kjr=r(A6,` property of the config object (either
passed as an argument or loaded from `),OEe=n(A6,"CODE",{});var j$t=s(OEe);Zjr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),eDr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(A6,"CODE",{});var D$t=s(VEe);oDr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),rDr=r(A6,":"),A6.forEach(t),tDr=i(ri),ke=n(ri,"UL",{});var je=s(ke);y0=n(je,"LI",{});var Aqe=s(y0);XEe=n(Aqe,"STRONG",{});var G$t=s(XEe);aDr=r(G$t,"albert"),G$t.forEach(t),nDr=r(Aqe," \u2014 "),oZ=n(Aqe,"A",{href:!0});var O$t=s(oZ);sDr=r(O$t,"FlaxAlbertForQuestionAnswering"),O$t.forEach(t),lDr=r(Aqe," (ALBERT model)"),Aqe.forEach(t),iDr=i(je),x0=n(je,"LI",{});var Lqe=s(x0);zEe=n(Lqe,"STRONG",{});var V$t=s(zEe);dDr=r(V$t,"bart"),V$t.forEach(t),cDr=r(Lqe," \u2014 "),rZ=n(Lqe,"A",{href:!0});var X$t=s(rZ);fDr=r(X$t,"FlaxBartForQuestionAnswering"),X$t.forEach(t),mDr=r(Lqe," (BART model)"),Lqe.forEach(t),gDr=i(je),$0=n(je,"LI",{});var yqe=s($0);WEe=n(yqe,"STRONG",{});var z$t=s(WEe);hDr=r(z$t,"bert"),z$t.forEach(t),pDr=r(yqe," \u2014 "),tZ=n(yqe,"A",{href:!0});var W$t=s(tZ);_Dr=r(W$t,"FlaxBertForQuestionAnswering"),W$t.forEach(t),uDr=r(yqe," (BERT model)"),yqe.forEach(t),bDr=i(je),k0=n(je,"LI",{});var xqe=s(k0);QEe=n(xqe,"STRONG",{});var Q$t=s(QEe);vDr=r(Q$t,"big_bird"),Q$t.forEach(t),FDr=r(xqe," \u2014 "),aZ=n(xqe,"A",{href:!0});var H$t=s(aZ);TDr=r(H$t,"FlaxBigBirdForQuestionAnswering"),H$t.forEach(t),MDr=r(xqe," (BigBird model)"),xqe.forEach(t),EDr=i(je),S0=n(je,"LI",{});var $qe=s(S0);HEe=n($qe,"STRONG",{});var U$t=s(HEe);CDr=r(U$t,"distilbert"),U$t.forEach(t),wDr=r($qe," \u2014 "),nZ=n($qe,"A",{href:!0});var J$t=s(nZ);ADr=r(J$t,"FlaxDistilBertForQuestionAnswering"),J$t.forEach(t),LDr=r($qe," (DistilBERT model)"),$qe.forEach(t),yDr=i(je),R0=n(je,"LI",{});var kqe=s(R0);UEe=n(kqe,"STRONG",{});var Y$t=s(UEe);xDr=r(Y$t,"electra"),Y$t.forEach(t),$Dr=r(kqe," \u2014 "),sZ=n(kqe,"A",{href:!0});var K$t=s(sZ);kDr=r(K$t,"FlaxElectraForQuestionAnswering"),K$t.forEach(t),SDr=r(kqe," (ELECTRA model)"),kqe.forEach(t),RDr=i(je),P0=n(je,"LI",{});var Sqe=s(P0);JEe=n(Sqe,"STRONG",{});var Z$t=s(JEe);PDr=r(Z$t,"mbart"),Z$t.forEach(t),BDr=r(Sqe," \u2014 "),lZ=n(Sqe,"A",{href:!0});var ekt=s(lZ);IDr=r(ekt,"FlaxMBartForQuestionAnswering"),ekt.forEach(t),NDr=r(Sqe," (mBART model)"),Sqe.forEach(t),qDr=i(je),B0=n(je,"LI",{});var Rqe=s(B0);YEe=n(Rqe,"STRONG",{});var okt=s(YEe);jDr=r(okt,"roberta"),okt.forEach(t),DDr=r(Rqe," \u2014 "),iZ=n(Rqe,"A",{href:!0});var rkt=s(iZ);GDr=r(rkt,"FlaxRobertaForQuestionAnswering"),rkt.forEach(t),ODr=r(Rqe," (RoBERTa model)"),Rqe.forEach(t),VDr=i(je),I0=n(je,"LI",{});var Pqe=s(I0);KEe=n(Pqe,"STRONG",{});var tkt=s(KEe);XDr=r(tkt,"roformer"),tkt.forEach(t),zDr=r(Pqe," \u2014 "),dZ=n(Pqe,"A",{href:!0});var akt=s(dZ);WDr=r(akt,"FlaxRoFormerForQuestionAnswering"),akt.forEach(t),QDr=r(Pqe," (RoFormer model)"),Pqe.forEach(t),HDr=i(je),N0=n(je,"LI",{});var Bqe=s(N0);ZEe=n(Bqe,"STRONG",{});var nkt=s(ZEe);UDr=r(nkt,"xlm-roberta"),nkt.forEach(t),JDr=r(Bqe," \u2014 "),cZ=n(Bqe,"A",{href:!0});var skt=s(cZ);YDr=r(skt,"FlaxXLMRobertaForQuestionAnswering"),skt.forEach(t),KDr=r(Bqe," (XLM-RoBERTa model)"),Bqe.forEach(t),je.forEach(t),ZDr=i(ri),T(q0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),UDe=i(f),Kc=n(f,"H2",{class:!0});var rVe=s(Kc);j0=n(rVe,"A",{id:!0,class:!0,href:!0});var lkt=s(j0);eCe=n(lkt,"SPAN",{});var ikt=s(eCe);T(Fx.$$.fragment,ikt),ikt.forEach(t),lkt.forEach(t),eGr=i(rVe),oCe=n(rVe,"SPAN",{});var dkt=s(oCe);oGr=r(dkt,"FlaxAutoModelForTokenClassification"),dkt.forEach(t),rVe.forEach(t),JDe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(Tx.$$.fragment,ti),rGr=i(ti),Zc=n(ti,"P",{});var yoe=s(Zc);tGr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fZ=n(yoe,"A",{href:!0});var ckt=s(fZ);aGr=r(ckt,"from_pretrained()"),ckt.forEach(t),nGr=r(yoe," class method or the "),mZ=n(yoe,"A",{href:!0});var fkt=s(mZ);sGr=r(fkt,"from_config()"),fkt.forEach(t),lGr=r(yoe,` class
method.`),yoe.forEach(t),iGr=i(ti),Mx=n(ti,"P",{});var tVe=s(Mx);dGr=r(tVe,"This class cannot be instantiated directly using "),rCe=n(tVe,"CODE",{});var mkt=s(rCe);cGr=r(mkt,"__init__()"),mkt.forEach(t),fGr=r(tVe," (throws an error)."),tVe.forEach(t),mGr=i(ti),Ht=n(ti,"DIV",{class:!0});var L6=s(Ht);T(Ex.$$.fragment,L6),gGr=i(L6),tCe=n(L6,"P",{});var gkt=s(tCe);hGr=r(gkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gkt.forEach(t),pGr=i(L6),ef=n(L6,"P",{});var xoe=s(ef);_Gr=r(xoe,`Note:
Loading a model from its configuration file does `),aCe=n(xoe,"STRONG",{});var hkt=s(aCe);uGr=r(hkt,"not"),hkt.forEach(t),bGr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(xoe,"A",{href:!0});var pkt=s(gZ);vGr=r(pkt,"from_pretrained()"),pkt.forEach(t),FGr=r(xoe," to load the model weights."),xoe.forEach(t),TGr=i(L6),T(D0.$$.fragment,L6),L6.forEach(t),MGr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Cx.$$.fragment,ai),EGr=i(ai),nCe=n(ai,"P",{});var _kt=s(nCe);CGr=r(_kt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_kt.forEach(t),wGr=i(ai),Tn=n(ai,"P",{});var y6=s(Tn);AGr=r(y6,"The model class to instantiate is selected based on the "),sCe=n(y6,"CODE",{});var ukt=s(sCe);LGr=r(ukt,"model_type"),ukt.forEach(t),yGr=r(y6,` property of the config object (either
passed as an argument or loaded from `),lCe=n(y6,"CODE",{});var bkt=s(lCe);xGr=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),$Gr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=n(y6,"CODE",{});var vkt=s(iCe);kGr=r(vkt,"pretrained_model_name_or_path"),vkt.forEach(t),SGr=r(y6,":"),y6.forEach(t),RGr=i(ai),Ge=n(ai,"UL",{});var Fo=s(Ge);G0=n(Fo,"LI",{});var Iqe=s(G0);dCe=n(Iqe,"STRONG",{});var Fkt=s(dCe);PGr=r(Fkt,"albert"),Fkt.forEach(t),BGr=r(Iqe," \u2014 "),hZ=n(Iqe,"A",{href:!0});var Tkt=s(hZ);IGr=r(Tkt,"FlaxAlbertForTokenClassification"),Tkt.forEach(t),NGr=r(Iqe," (ALBERT model)"),Iqe.forEach(t),qGr=i(Fo),O0=n(Fo,"LI",{});var Nqe=s(O0);cCe=n(Nqe,"STRONG",{});var Mkt=s(cCe);jGr=r(Mkt,"bert"),Mkt.forEach(t),DGr=r(Nqe," \u2014 "),pZ=n(Nqe,"A",{href:!0});var Ekt=s(pZ);GGr=r(Ekt,"FlaxBertForTokenClassification"),Ekt.forEach(t),OGr=r(Nqe," (BERT model)"),Nqe.forEach(t),VGr=i(Fo),V0=n(Fo,"LI",{});var qqe=s(V0);fCe=n(qqe,"STRONG",{});var Ckt=s(fCe);XGr=r(Ckt,"big_bird"),Ckt.forEach(t),zGr=r(qqe," \u2014 "),_Z=n(qqe,"A",{href:!0});var wkt=s(_Z);WGr=r(wkt,"FlaxBigBirdForTokenClassification"),wkt.forEach(t),QGr=r(qqe," (BigBird model)"),qqe.forEach(t),HGr=i(Fo),X0=n(Fo,"LI",{});var jqe=s(X0);mCe=n(jqe,"STRONG",{});var Akt=s(mCe);UGr=r(Akt,"distilbert"),Akt.forEach(t),JGr=r(jqe," \u2014 "),uZ=n(jqe,"A",{href:!0});var Lkt=s(uZ);YGr=r(Lkt,"FlaxDistilBertForTokenClassification"),Lkt.forEach(t),KGr=r(jqe," (DistilBERT model)"),jqe.forEach(t),ZGr=i(Fo),z0=n(Fo,"LI",{});var Dqe=s(z0);gCe=n(Dqe,"STRONG",{});var ykt=s(gCe);eOr=r(ykt,"electra"),ykt.forEach(t),oOr=r(Dqe," \u2014 "),bZ=n(Dqe,"A",{href:!0});var xkt=s(bZ);rOr=r(xkt,"FlaxElectraForTokenClassification"),xkt.forEach(t),tOr=r(Dqe," (ELECTRA model)"),Dqe.forEach(t),aOr=i(Fo),W0=n(Fo,"LI",{});var Gqe=s(W0);hCe=n(Gqe,"STRONG",{});var $kt=s(hCe);nOr=r($kt,"roberta"),$kt.forEach(t),sOr=r(Gqe," \u2014 "),vZ=n(Gqe,"A",{href:!0});var kkt=s(vZ);lOr=r(kkt,"FlaxRobertaForTokenClassification"),kkt.forEach(t),iOr=r(Gqe," (RoBERTa model)"),Gqe.forEach(t),dOr=i(Fo),Q0=n(Fo,"LI",{});var Oqe=s(Q0);pCe=n(Oqe,"STRONG",{});var Skt=s(pCe);cOr=r(Skt,"roformer"),Skt.forEach(t),fOr=r(Oqe," \u2014 "),FZ=n(Oqe,"A",{href:!0});var Rkt=s(FZ);mOr=r(Rkt,"FlaxRoFormerForTokenClassification"),Rkt.forEach(t),gOr=r(Oqe," (RoFormer model)"),Oqe.forEach(t),hOr=i(Fo),H0=n(Fo,"LI",{});var Vqe=s(H0);_Ce=n(Vqe,"STRONG",{});var Pkt=s(_Ce);pOr=r(Pkt,"xlm-roberta"),Pkt.forEach(t),_Or=r(Vqe," \u2014 "),TZ=n(Vqe,"A",{href:!0});var Bkt=s(TZ);uOr=r(Bkt,"FlaxXLMRobertaForTokenClassification"),Bkt.forEach(t),bOr=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),Fo.forEach(t),vOr=i(ai),T(U0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),YDe=i(f),of=n(f,"H2",{class:!0});var aVe=s(of);J0=n(aVe,"A",{id:!0,class:!0,href:!0});var Ikt=s(J0);uCe=n(Ikt,"SPAN",{});var Nkt=s(uCe);T(wx.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),FOr=i(aVe),bCe=n(aVe,"SPAN",{});var qkt=s(bCe);TOr=r(qkt,"FlaxAutoModelForMultipleChoice"),qkt.forEach(t),aVe.forEach(t),KDe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Ax.$$.fragment,ni),MOr=i(ni),rf=n(ni,"P",{});var $oe=s(rf);EOr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MZ=n($oe,"A",{href:!0});var jkt=s(MZ);COr=r(jkt,"from_pretrained()"),jkt.forEach(t),wOr=r($oe," class method or the "),EZ=n($oe,"A",{href:!0});var Dkt=s(EZ);AOr=r(Dkt,"from_config()"),Dkt.forEach(t),LOr=r($oe,` class
method.`),$oe.forEach(t),yOr=i(ni),Lx=n(ni,"P",{});var nVe=s(Lx);xOr=r(nVe,"This class cannot be instantiated directly using "),vCe=n(nVe,"CODE",{});var Gkt=s(vCe);$Or=r(Gkt,"__init__()"),Gkt.forEach(t),kOr=r(nVe," (throws an error)."),nVe.forEach(t),SOr=i(ni),Ut=n(ni,"DIV",{class:!0});var x6=s(Ut);T(yx.$$.fragment,x6),ROr=i(x6),FCe=n(x6,"P",{});var Okt=s(FCe);POr=r(Okt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Okt.forEach(t),BOr=i(x6),tf=n(x6,"P",{});var koe=s(tf);IOr=r(koe,`Note:
Loading a model from its configuration file does `),TCe=n(koe,"STRONG",{});var Vkt=s(TCe);NOr=r(Vkt,"not"),Vkt.forEach(t),qOr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(koe,"A",{href:!0});var Xkt=s(CZ);jOr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),DOr=r(koe," to load the model weights."),koe.forEach(t),GOr=i(x6),T(Y0.$$.fragment,x6),x6.forEach(t),OOr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(xx.$$.fragment,si),VOr=i(si),MCe=n(si,"P",{});var zkt=s(MCe);XOr=r(zkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zkt.forEach(t),zOr=i(si),Mn=n(si,"P",{});var $6=s(Mn);WOr=r($6,"The model class to instantiate is selected based on the "),ECe=n($6,"CODE",{});var Wkt=s(ECe);QOr=r(Wkt,"model_type"),Wkt.forEach(t),HOr=r($6,` property of the config object (either
passed as an argument or loaded from `),CCe=n($6,"CODE",{});var Qkt=s(CCe);UOr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),JOr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n($6,"CODE",{});var Hkt=s(wCe);YOr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),KOr=r($6,":"),$6.forEach(t),ZOr=i(si),Oe=n(si,"UL",{});var To=s(Oe);K0=n(To,"LI",{});var Xqe=s(K0);ACe=n(Xqe,"STRONG",{});var Ukt=s(ACe);eVr=r(Ukt,"albert"),Ukt.forEach(t),oVr=r(Xqe," \u2014 "),wZ=n(Xqe,"A",{href:!0});var Jkt=s(wZ);rVr=r(Jkt,"FlaxAlbertForMultipleChoice"),Jkt.forEach(t),tVr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),aVr=i(To),Z0=n(To,"LI",{});var zqe=s(Z0);LCe=n(zqe,"STRONG",{});var Ykt=s(LCe);nVr=r(Ykt,"bert"),Ykt.forEach(t),sVr=r(zqe," \u2014 "),AZ=n(zqe,"A",{href:!0});var Kkt=s(AZ);lVr=r(Kkt,"FlaxBertForMultipleChoice"),Kkt.forEach(t),iVr=r(zqe," (BERT model)"),zqe.forEach(t),dVr=i(To),ew=n(To,"LI",{});var Wqe=s(ew);yCe=n(Wqe,"STRONG",{});var Zkt=s(yCe);cVr=r(Zkt,"big_bird"),Zkt.forEach(t),fVr=r(Wqe," \u2014 "),LZ=n(Wqe,"A",{href:!0});var eSt=s(LZ);mVr=r(eSt,"FlaxBigBirdForMultipleChoice"),eSt.forEach(t),gVr=r(Wqe," (BigBird model)"),Wqe.forEach(t),hVr=i(To),ow=n(To,"LI",{});var Qqe=s(ow);xCe=n(Qqe,"STRONG",{});var oSt=s(xCe);pVr=r(oSt,"distilbert"),oSt.forEach(t),_Vr=r(Qqe," \u2014 "),yZ=n(Qqe,"A",{href:!0});var rSt=s(yZ);uVr=r(rSt,"FlaxDistilBertForMultipleChoice"),rSt.forEach(t),bVr=r(Qqe," (DistilBERT model)"),Qqe.forEach(t),vVr=i(To),rw=n(To,"LI",{});var Hqe=s(rw);$Ce=n(Hqe,"STRONG",{});var tSt=s($Ce);FVr=r(tSt,"electra"),tSt.forEach(t),TVr=r(Hqe," \u2014 "),xZ=n(Hqe,"A",{href:!0});var aSt=s(xZ);MVr=r(aSt,"FlaxElectraForMultipleChoice"),aSt.forEach(t),EVr=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),CVr=i(To),tw=n(To,"LI",{});var Uqe=s(tw);kCe=n(Uqe,"STRONG",{});var nSt=s(kCe);wVr=r(nSt,"roberta"),nSt.forEach(t),AVr=r(Uqe," \u2014 "),$Z=n(Uqe,"A",{href:!0});var sSt=s($Z);LVr=r(sSt,"FlaxRobertaForMultipleChoice"),sSt.forEach(t),yVr=r(Uqe," (RoBERTa model)"),Uqe.forEach(t),xVr=i(To),aw=n(To,"LI",{});var Jqe=s(aw);SCe=n(Jqe,"STRONG",{});var lSt=s(SCe);$Vr=r(lSt,"roformer"),lSt.forEach(t),kVr=r(Jqe," \u2014 "),kZ=n(Jqe,"A",{href:!0});var iSt=s(kZ);SVr=r(iSt,"FlaxRoFormerForMultipleChoice"),iSt.forEach(t),RVr=r(Jqe," (RoFormer model)"),Jqe.forEach(t),PVr=i(To),nw=n(To,"LI",{});var Yqe=s(nw);RCe=n(Yqe,"STRONG",{});var dSt=s(RCe);BVr=r(dSt,"xlm-roberta"),dSt.forEach(t),IVr=r(Yqe," \u2014 "),SZ=n(Yqe,"A",{href:!0});var cSt=s(SZ);NVr=r(cSt,"FlaxXLMRobertaForMultipleChoice"),cSt.forEach(t),qVr=r(Yqe," (XLM-RoBERTa model)"),Yqe.forEach(t),To.forEach(t),jVr=i(si),T(sw.$$.fragment,si),si.forEach(t),ni.forEach(t),ZDe=i(f),af=n(f,"H2",{class:!0});var sVe=s(af);lw=n(sVe,"A",{id:!0,class:!0,href:!0});var fSt=s(lw);PCe=n(fSt,"SPAN",{});var mSt=s(PCe);T($x.$$.fragment,mSt),mSt.forEach(t),fSt.forEach(t),DVr=i(sVe),BCe=n(sVe,"SPAN",{});var gSt=s(BCe);GVr=r(gSt,"FlaxAutoModelForNextSentencePrediction"),gSt.forEach(t),sVe.forEach(t),eGe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(kx.$$.fragment,li),OVr=i(li),nf=n(li,"P",{});var Soe=s(nf);VVr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RZ=n(Soe,"A",{href:!0});var hSt=s(RZ);XVr=r(hSt,"from_pretrained()"),hSt.forEach(t),zVr=r(Soe," class method or the "),PZ=n(Soe,"A",{href:!0});var pSt=s(PZ);WVr=r(pSt,"from_config()"),pSt.forEach(t),QVr=r(Soe,` class
method.`),Soe.forEach(t),HVr=i(li),Sx=n(li,"P",{});var lVe=s(Sx);UVr=r(lVe,"This class cannot be instantiated directly using "),ICe=n(lVe,"CODE",{});var _St=s(ICe);JVr=r(_St,"__init__()"),_St.forEach(t),YVr=r(lVe," (throws an error)."),lVe.forEach(t),KVr=i(li),Jt=n(li,"DIV",{class:!0});var k6=s(Jt);T(Rx.$$.fragment,k6),ZVr=i(k6),NCe=n(k6,"P",{});var uSt=s(NCe);eXr=r(uSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uSt.forEach(t),oXr=i(k6),sf=n(k6,"P",{});var Roe=s(sf);rXr=r(Roe,`Note:
Loading a model from its configuration file does `),qCe=n(Roe,"STRONG",{});var bSt=s(qCe);tXr=r(bSt,"not"),bSt.forEach(t),aXr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(Roe,"A",{href:!0});var vSt=s(BZ);nXr=r(vSt,"from_pretrained()"),vSt.forEach(t),sXr=r(Roe," to load the model weights."),Roe.forEach(t),lXr=i(k6),T(iw.$$.fragment,k6),k6.forEach(t),iXr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Px.$$.fragment,ii),dXr=i(ii),jCe=n(ii,"P",{});var FSt=s(jCe);cXr=r(FSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FSt.forEach(t),fXr=i(ii),En=n(ii,"P",{});var S6=s(En);mXr=r(S6,"The model class to instantiate is selected based on the "),DCe=n(S6,"CODE",{});var TSt=s(DCe);gXr=r(TSt,"model_type"),TSt.forEach(t),hXr=r(S6,` property of the config object (either
passed as an argument or loaded from `),GCe=n(S6,"CODE",{});var MSt=s(GCe);pXr=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),_Xr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(S6,"CODE",{});var ESt=s(OCe);uXr=r(ESt,"pretrained_model_name_or_path"),ESt.forEach(t),bXr=r(S6,":"),S6.forEach(t),vXr=i(ii),VCe=n(ii,"UL",{});var CSt=s(VCe);dw=n(CSt,"LI",{});var Kqe=s(dw);XCe=n(Kqe,"STRONG",{});var wSt=s(XCe);FXr=r(wSt,"bert"),wSt.forEach(t),TXr=r(Kqe," \u2014 "),IZ=n(Kqe,"A",{href:!0});var ASt=s(IZ);MXr=r(ASt,"FlaxBertForNextSentencePrediction"),ASt.forEach(t),EXr=r(Kqe," (BERT model)"),Kqe.forEach(t),CSt.forEach(t),CXr=i(ii),T(cw.$$.fragment,ii),ii.forEach(t),li.forEach(t),oGe=i(f),lf=n(f,"H2",{class:!0});var iVe=s(lf);fw=n(iVe,"A",{id:!0,class:!0,href:!0});var LSt=s(fw);zCe=n(LSt,"SPAN",{});var ySt=s(zCe);T(Bx.$$.fragment,ySt),ySt.forEach(t),LSt.forEach(t),wXr=i(iVe),WCe=n(iVe,"SPAN",{});var xSt=s(WCe);AXr=r(xSt,"FlaxAutoModelForImageClassification"),xSt.forEach(t),iVe.forEach(t),rGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Ix.$$.fragment,di),LXr=i(di),df=n(di,"P",{});var Poe=s(df);yXr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NZ=n(Poe,"A",{href:!0});var $St=s(NZ);xXr=r($St,"from_pretrained()"),$St.forEach(t),$Xr=r(Poe," class method or the "),qZ=n(Poe,"A",{href:!0});var kSt=s(qZ);kXr=r(kSt,"from_config()"),kSt.forEach(t),SXr=r(Poe,` class
method.`),Poe.forEach(t),RXr=i(di),Nx=n(di,"P",{});var dVe=s(Nx);PXr=r(dVe,"This class cannot be instantiated directly using "),QCe=n(dVe,"CODE",{});var SSt=s(QCe);BXr=r(SSt,"__init__()"),SSt.forEach(t),IXr=r(dVe," (throws an error)."),dVe.forEach(t),NXr=i(di),Yt=n(di,"DIV",{class:!0});var R6=s(Yt);T(qx.$$.fragment,R6),qXr=i(R6),HCe=n(R6,"P",{});var RSt=s(HCe);jXr=r(RSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),RSt.forEach(t),DXr=i(R6),cf=n(R6,"P",{});var Boe=s(cf);GXr=r(Boe,`Note:
Loading a model from its configuration file does `),UCe=n(Boe,"STRONG",{});var PSt=s(UCe);OXr=r(PSt,"not"),PSt.forEach(t),VXr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(Boe,"A",{href:!0});var BSt=s(jZ);XXr=r(BSt,"from_pretrained()"),BSt.forEach(t),zXr=r(Boe," to load the model weights."),Boe.forEach(t),WXr=i(R6),T(mw.$$.fragment,R6),R6.forEach(t),QXr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(jx.$$.fragment,ci),HXr=i(ci),JCe=n(ci,"P",{});var ISt=s(JCe);UXr=r(ISt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ISt.forEach(t),JXr=i(ci),Cn=n(ci,"P",{});var P6=s(Cn);YXr=r(P6,"The model class to instantiate is selected based on the "),YCe=n(P6,"CODE",{});var NSt=s(YCe);KXr=r(NSt,"model_type"),NSt.forEach(t),ZXr=r(P6,` property of the config object (either
passed as an argument or loaded from `),KCe=n(P6,"CODE",{});var qSt=s(KCe);ezr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),ozr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(P6,"CODE",{});var jSt=s(ZCe);rzr=r(jSt,"pretrained_model_name_or_path"),jSt.forEach(t),tzr=r(P6,":"),P6.forEach(t),azr=i(ci),Dx=n(ci,"UL",{});var cVe=s(Dx);gw=n(cVe,"LI",{});var Zqe=s(gw);e5e=n(Zqe,"STRONG",{});var DSt=s(e5e);nzr=r(DSt,"beit"),DSt.forEach(t),szr=r(Zqe," \u2014 "),DZ=n(Zqe,"A",{href:!0});var GSt=s(DZ);lzr=r(GSt,"FlaxBeitForImageClassification"),GSt.forEach(t),izr=r(Zqe," (BEiT model)"),Zqe.forEach(t),dzr=i(cVe),hw=n(cVe,"LI",{});var eje=s(hw);o5e=n(eje,"STRONG",{});var OSt=s(o5e);czr=r(OSt,"vit"),OSt.forEach(t),fzr=r(eje," \u2014 "),GZ=n(eje,"A",{href:!0});var VSt=s(GZ);mzr=r(VSt,"FlaxViTForImageClassification"),VSt.forEach(t),gzr=r(eje," (ViT model)"),eje.forEach(t),cVe.forEach(t),hzr=i(ci),T(pw.$$.fragment,ci),ci.forEach(t),di.forEach(t),tGe=i(f),ff=n(f,"H2",{class:!0});var fVe=s(ff);_w=n(fVe,"A",{id:!0,class:!0,href:!0});var XSt=s(_w);r5e=n(XSt,"SPAN",{});var zSt=s(r5e);T(Gx.$$.fragment,zSt),zSt.forEach(t),XSt.forEach(t),pzr=i(fVe),t5e=n(fVe,"SPAN",{});var WSt=s(t5e);_zr=r(WSt,"FlaxAutoModelForVision2Seq"),WSt.forEach(t),fVe.forEach(t),aGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Ox.$$.fragment,fi),uzr=i(fi),mf=n(fi,"P",{});var Ioe=s(mf);bzr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OZ=n(Ioe,"A",{href:!0});var QSt=s(OZ);vzr=r(QSt,"from_pretrained()"),QSt.forEach(t),Fzr=r(Ioe," class method or the "),VZ=n(Ioe,"A",{href:!0});var HSt=s(VZ);Tzr=r(HSt,"from_config()"),HSt.forEach(t),Mzr=r(Ioe,` class
method.`),Ioe.forEach(t),Ezr=i(fi),Vx=n(fi,"P",{});var mVe=s(Vx);Czr=r(mVe,"This class cannot be instantiated directly using "),a5e=n(mVe,"CODE",{});var USt=s(a5e);wzr=r(USt,"__init__()"),USt.forEach(t),Azr=r(mVe," (throws an error)."),mVe.forEach(t),Lzr=i(fi),Kt=n(fi,"DIV",{class:!0});var B6=s(Kt);T(Xx.$$.fragment,B6),yzr=i(B6),n5e=n(B6,"P",{});var JSt=s(n5e);xzr=r(JSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JSt.forEach(t),$zr=i(B6),gf=n(B6,"P",{});var Noe=s(gf);kzr=r(Noe,`Note:
Loading a model from its configuration file does `),s5e=n(Noe,"STRONG",{});var YSt=s(s5e);Szr=r(YSt,"not"),YSt.forEach(t),Rzr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Noe,"A",{href:!0});var KSt=s(XZ);Pzr=r(KSt,"from_pretrained()"),KSt.forEach(t),Bzr=r(Noe," to load the model weights."),Noe.forEach(t),Izr=i(B6),T(uw.$$.fragment,B6),B6.forEach(t),Nzr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(zx.$$.fragment,mi),qzr=i(mi),l5e=n(mi,"P",{});var ZSt=s(l5e);jzr=r(ZSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZSt.forEach(t),Dzr=i(mi),wn=n(mi,"P",{});var I6=s(wn);Gzr=r(I6,"The model class to instantiate is selected based on the "),i5e=n(I6,"CODE",{});var eRt=s(i5e);Ozr=r(eRt,"model_type"),eRt.forEach(t),Vzr=r(I6,` property of the config object (either
passed as an argument or loaded from `),d5e=n(I6,"CODE",{});var oRt=s(d5e);Xzr=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),zzr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(I6,"CODE",{});var rRt=s(c5e);Wzr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),Qzr=r(I6,":"),I6.forEach(t),Hzr=i(mi),f5e=n(mi,"UL",{});var tRt=s(f5e);bw=n(tRt,"LI",{});var oje=s(bw);m5e=n(oje,"STRONG",{});var aRt=s(m5e);Uzr=r(aRt,"vision-encoder-decoder"),aRt.forEach(t),Jzr=r(oje," \u2014 "),zZ=n(oje,"A",{href:!0});var nRt=s(zZ);Yzr=r(nRt,"FlaxVisionEncoderDecoderModel"),nRt.forEach(t),Kzr=r(oje," (Vision Encoder decoder model)"),oje.forEach(t),tRt.forEach(t),Zzr=i(mi),T(vw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dBt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(gk,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(hk,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig"),c(pk,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig"),c(_k,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig"),c(uk,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig"),c(bk,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(vk,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Fk,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Tk,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Mk,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Ek,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig"),c(Ck,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig"),c(wk,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig"),c(Ak,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig"),c(Lk,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig"),c(yk,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig"),c(xk,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig"),c($k,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(kk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Sk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Rk,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig"),c(Pk,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Bk,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ik,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig"),c(Nk,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig"),c(qk,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig"),c(jk,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig"),c(Dk,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig"),c(Gk,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig"),c(Ok,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Vk,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Xk,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig"),c(zk,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig"),c(Wk,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig"),c(Qk,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig"),c(Hk,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig"),c(Uk,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config"),c(Jk,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Yk,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Kk,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig"),c(Zk,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig"),c(eS,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig"),c(oS,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig"),c(rS,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(tS,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(aS,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(nS,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(sS,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig"),c(lS,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitConfig"),c(iS,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig"),c(dS,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig"),c(cS,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig"),c(fS,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config"),c(mS,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig"),c(gS,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(hS,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig"),c(pS,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(_S,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(uS,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig"),c(bS,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config"),c(vS,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(FS,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(TS,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig"),c(MS,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig"),c(ES,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig"),c(CS,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig"),c(wS,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(AS,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(LS,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(yS,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagConfig"),c(xS,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmConfig"),c($S,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig"),c(kS,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig"),c(SS,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig"),c(RS,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig"),c(PS,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig"),c(BS,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig"),c(IS,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig"),c(NS,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig"),c(qS,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig"),c(jS,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig"),c(DS,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(GS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(OS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(VS,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig"),c(XS,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(zS,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig"),c(WS,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config"),c(QS,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig"),c(HS,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(US,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(JS,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig"),c(YS,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(KS,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(ZS,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig"),c(eR,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig"),c(oR,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(rR,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(tR,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(aR,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig"),c(nR,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(sR,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(lR,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(iR,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig"),c(dR,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig"),c(cR,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig"),c(fR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(mR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(gR,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(hR,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig"),c(pR,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig"),c(_R,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(uR,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(bR,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(vR,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizer"),c(TR,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizerFast"),c(MR,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ER,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(CR,"href","/docs/transformers/pr_17313/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(wR,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(AR,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(LR,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(yR,"href","/docs/transformers/pr_17313/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(xR,"href","/docs/transformers/pr_17313/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($R,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(kR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(SR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(PR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(BR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(IR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(NR,"href","/docs/transformers/pr_17313/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(qR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineTokenizer"),c(GR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(OR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizer"),c(WR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(QR,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JR,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YR,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eP,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oP,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tP,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aP,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizer"),c(nP,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sP,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lP,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizer"),c(iP,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dP,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cP,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fP,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_P,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(uP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(FP,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TP,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizer"),c(MP,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(yP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($P,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(kP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(SP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(RP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(PP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizer"),c(BP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizerFast"),c(IP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizer"),c(NP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qP,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeTokenizer"),c(jP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(DP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(OP,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianTokenizer"),c(VP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizer"),c(XP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(zP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(WP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(QP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17313/en/model_doc/mluke#transformers.MLukeTokenizer"),c(JP,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(YP,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ZP,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(eB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(oB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(rB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(tB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nB,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sB,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lB,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iB,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dB,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(cB,"href","/docs/transformers/pr_17313/en/model_doc/phobert#transformers.PhobertTokenizer"),c(fB,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mB,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagTokenizer"),c(_B,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizer"),c(uB,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bB,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vB,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(FB,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizer"),c(TB,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(EB,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AB,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(LB,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yB,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(xB,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c($B,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(SB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(RB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(BB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(IB,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasTokenizer"),c(NB,"href","/docs/transformers/pr_17313/en/model_doc/tapex#transformers.TapexTokenizer"),c(qB,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(DB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(XB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizer"),c(zB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(WB,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMTokenizer"),c(QB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(HB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(UB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(JB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KB,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ZB,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(eI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(oI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoFeatureExtractor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(rI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(tI,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_I,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(bI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(vI,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($I,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RI,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"id","transformers.AutoProcessor"),c(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(PI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(BI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(II,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(NI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(qI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(jI,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(DI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(VI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(XI,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRProcessor"),c(zI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QI,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltProcessor"),c(HI,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(UI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"id","transformers.AutoModel"),c(gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(KI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oN,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel"),c(rN,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel"),c(tN,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel"),c(aN,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(nN,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(sN,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel"),c(lN,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(iN,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(dN,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(cN,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel"),c(fN,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel"),c(mN,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel"),c(gN,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel"),c(hN,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel"),c(pN,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel"),c(_N,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel"),c(uN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(FN,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel"),c(TN,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MN,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(EN,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel"),c(CN,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel"),c(wN,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel"),c(AN,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(LN,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel"),c(yN,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel"),c(xN,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel"),c($N,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel"),c(kN,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel"),c(SN,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel"),c(RN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel"),c(PN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BN,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel"),c(IN,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model"),c(NN,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qN,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(jN,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel"),c(DN,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel"),c(GN,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel"),c(ON,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel"),c(VN,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(XN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(zN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(WN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(QN,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel"),c(HN,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitModel"),c(UN,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel"),c(JN,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel"),c(YN,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel"),c(KN,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZN,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel"),c(eq,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oq,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel"),c(rq,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tq,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aq,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel"),c(nq,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model"),c(sq,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lq,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iq,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel"),c(dq,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel"),c(cq,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel"),c(fq,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel"),c(mq,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel"),c(gq,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(hq,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel"),c(pq,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel"),c(_q,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel"),c(uq,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel"),c(bq,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel"),c(vq,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(Fq,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel"),c(Tq,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel"),c(Mq,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel"),c(Eq,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel"),c(Cq,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel"),c(wq,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Aq,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel"),c(Lq,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(yq,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel"),c(xq,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model"),c($q,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel"),c(kq,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Sq,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Bq,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel"),c(Iq,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel"),c(Nq,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(qq,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jq,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel"),c(Dq,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Gq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oq,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vq,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel"),c(Xq,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel"),c(zq,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel"),c(Wq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Qq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Hq,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Uq,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel"),c(Jq,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel"),c(Yq,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mu,"id","transformers.AutoModelForPreTraining"),c(mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(Kq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zq,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ej,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oj,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining"),c(aj,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nj,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lj,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ij,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dj,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cj,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mj,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gj,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hj,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pj,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uj,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bj,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Mj,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Ej,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wj,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Aj,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(Lj,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yj,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xj,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Rj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Pj,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Bj,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Ij,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Nj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jj,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Dj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a1,"id","transformers.AutoModelForCausalLM"),c(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a1,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Vj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM"),c(Qj,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel"),c(Hj,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Uj,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Jj,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Yj,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Kj,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Zj,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(eD,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(rD,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM"),c(tD,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aD,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nD,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(sD,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(lD,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM"),c(iD,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM"),c(dD,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(cD,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fD,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM"),c(mD,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(gD,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(hD,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(pD,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(_D,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(uD,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(bD,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(vD,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(FD,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(TD,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MD,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ED,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(CD,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(AD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(LD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(yD,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForMaskedLM"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(xD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($D,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SD,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ID,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jD,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(DD,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(GD,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(VD,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XD,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(zD,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(WD,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HD,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(UD,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeForMaskedLM"),c(JD,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(KD,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eG,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oG,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rG,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tG,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(aG,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sG,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lG,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iG,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dG,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mG,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.AutoModelForSeq2SeqLM"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(gG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(TG,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel"),c(wG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.AutoModelForSequenceClassification"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(SG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForMultipleChoice"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(yO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForNextSentencePrediction"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(sV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(cV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(fV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(mV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(gV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForTokenClassification"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(hV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(FV,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification"),c(MV,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(CV,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(wV,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(AV,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(yV,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(xV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification"),c($V,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(kV,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(SV,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(RV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(PV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(BV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(IV,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(NV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(qV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(jV,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(DV,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(GV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(OV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(VV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(XV,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(zV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(WV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(QV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(HV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(UV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(JV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForQuestionAnswering"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(YV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(hX,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(IX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(jX,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForTableQuestionAnswering"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(DX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForImageClassification"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification"),c(HX,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(UX,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification"),c(JX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(YX,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification"),c(KX,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(ZX,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(ez,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassification"),c(oz,"href","/docs/transformers/pr_17313/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(rz,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tz,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(az,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nz,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sz,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(lz,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(iz,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(dz,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification"),c(cz,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification"),c(fz,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForVision2Seq"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForAudioClassification"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(_z,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Az,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForAudioFrameClassification"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Sz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Rz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Pz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Bz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForCTC"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Dz,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC"),c(Gz,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC"),c(Oz,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Vz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Xz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(zz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Wz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Qz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Kz,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForAudioXVector"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(tW,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(aW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(nW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(sW,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForMaskedImageModeling"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(lW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(fW,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mW,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForObjectDetection"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uW,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForImageSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(bW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForSemanticSegmentation"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(MW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(AW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(LW,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(yW,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.AutoModelForInstanceSegmentation"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(xW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d7,"id","transformers.TFAutoModel"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(RW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel"),c(NW,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel"),c(qW,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel"),c(jW,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(DW,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(GW,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel"),c(OW,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel"),c(VW,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel"),c(XW,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel"),c(zW,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel"),c(WW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(QW,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel"),c(HW,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(UW,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(JW,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(YW,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel"),c(KW,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(ZW,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel"),c(eQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(oQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model"),c(rQ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel"),c(tQ,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel"),c(aQ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(nQ,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel"),c(sQ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel"),c(lQ,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel"),c(iQ,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel"),c(dQ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel"),c(cQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(fQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel"),c(mQ,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model"),c(gQ,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(hQ,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTModel"),c(pQ,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_Q,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel"),c(uQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel"),c(bQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel"),c(vQ,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(FQ,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel"),c(TQ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model"),c(MQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel"),c(EQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(CQ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel"),c(wQ,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(AQ,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(LQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel"),c(yQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(xQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModelForPreTraining"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(PQ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining"),c(IQ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(DQ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(OQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VQ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(zQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(WQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KQ,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(ZQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eH,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(oH,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForCausalLM"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(rH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(sH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(lH,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iH,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dH,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(cH,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fH,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(mH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(gH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(hH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(pH,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_H,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uH,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForImageClassification"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(bH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(MH,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(EH,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(CH,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForMaskedLM"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(wH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM"),c($H,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(SH,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(RH,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(PH,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BH,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(IH,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(NH,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(qH,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jH,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(DH,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(VH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(zH,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(WH,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QH,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(HH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(ZH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(oU,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(rU,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel"),c(tU,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(aU,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(nU,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(sU,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.TFAutoModelForSequenceClassification"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($U,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForMultipleChoice"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(XU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(zU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(eJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(oJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForNextSentencePrediction"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(rJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(sJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForTokenClassification"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(_J,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c($J,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(SJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForQuestionAnswering"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(WJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(oY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.TFAutoModelForVision2Seq"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModel"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel"),c(pY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel"),c(_Y,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel"),c(uY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel"),c(bY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(vY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(FY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(TY,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel"),c(MY,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(EY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel"),c(CY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(wY,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(AY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(LY,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel"),c(yY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xY,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model"),c($Y,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTModel"),c(kY,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(SY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(RY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(PY,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model"),c(BY,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(IY,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel"),c(NY,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(qY,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(jY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForCausalLM"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(XY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(zY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(WY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(QY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(HY,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(UY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(JY,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(YY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(KY,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForPreTraining"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(tK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(nK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(sK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(lK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fK,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(gK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForMaskedLM"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(hK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(FK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(TK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(MK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(EK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(AK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(LK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kK,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(SK,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(RK,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(PK,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(BK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NK,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(qK,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(jK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(VK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(XK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(zK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(WK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(QK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(HK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(UK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(JK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(YK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(lZ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j0,"id","transformers.FlaxAutoModelForTokenClassification"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(AZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(LZ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(yZ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(xZ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c($Z,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(kZ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(SZ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(RZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForImageClassification"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(NZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(GZ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForVision2Seq"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(OZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,N6),e(rt,bf),b(f,De,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,q6),e(We,yn),e(We,xn),e(xn,j6),e(We,ui),e(We,$n),e($n,D6),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,lk),e(Ae,vi),e(vi,ik),e(Ae,dk),b(f,Eo,u),b(f,wa,u),e(wa,ck),e(wa,Ff),e(Ff,fk),e(wa,gVe),b(f,rje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,qoe),M(G6,qoe,null),e(Fi,hVe),e(Fi,joe),e(joe,pVe),b(f,tje,u),b(f,kn,u),e(kn,_Ve),e(kn,Doe),e(Doe,uVe),e(kn,bVe),e(kn,Goe),e(Goe,vVe),e(kn,FVe),b(f,aje,u),M(O6,f,u),b(f,nje,u),b(f,mk,u),e(mk,TVe),b(f,sje,u),M(Mf,f,u),b(f,lje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Ooe),M(V6,Ooe,null),e(Ti,MVe),e(Ti,Voe),e(Voe,EVe),b(f,ije,u),b(f,Co,u),M(X6,Co,null),e(Co,CVe),e(Co,z6),e(z6,wVe),e(z6,gk),e(gk,AVe),e(z6,LVe),e(Co,yVe),e(Co,W6),e(W6,xVe),e(W6,Xoe),e(Xoe,$Ve),e(W6,kVe),e(Co,SVe),e(Co,Er),M(Q6,Er,null),e(Er,RVe),e(Er,zoe),e(zoe,PVe),e(Er,BVe),e(Er,Mi),e(Mi,IVe),e(Mi,Woe),e(Woe,NVe),e(Mi,qVe),e(Mi,Qoe),e(Qoe,jVe),e(Mi,DVe),e(Er,GVe),e(Er,A),e(A,Cf),e(Cf,Hoe),e(Hoe,OVe),e(Cf,VVe),e(Cf,hk),e(hk,XVe),e(Cf,zVe),e(A,WVe),e(A,wf),e(wf,Uoe),e(Uoe,QVe),e(wf,HVe),e(wf,pk),e(pk,UVe),e(wf,JVe),e(A,YVe),e(A,Af),e(Af,Joe),e(Joe,KVe),e(Af,ZVe),e(Af,_k),e(_k,eXe),e(Af,oXe),e(A,rXe),e(A,Lf),e(Lf,Yoe),e(Yoe,tXe),e(Lf,aXe),e(Lf,uk),e(uk,nXe),e(Lf,sXe),e(A,lXe),e(A,yf),e(yf,Koe),e(Koe,iXe),e(yf,dXe),e(yf,bk),e(bk,cXe),e(yf,fXe),e(A,mXe),e(A,xf),e(xf,Zoe),e(Zoe,gXe),e(xf,hXe),e(xf,vk),e(vk,pXe),e(xf,_Xe),e(A,uXe),e(A,$f),e($f,ere),e(ere,bXe),e($f,vXe),e($f,Fk),e(Fk,FXe),e($f,TXe),e(A,MXe),e(A,kf),e(kf,ore),e(ore,EXe),e(kf,CXe),e(kf,Tk),e(Tk,wXe),e(kf,AXe),e(A,LXe),e(A,Sf),e(Sf,rre),e(rre,yXe),e(Sf,xXe),e(Sf,Mk),e(Mk,$Xe),e(Sf,kXe),e(A,SXe),e(A,Rf),e(Rf,tre),e(tre,RXe),e(Rf,PXe),e(Rf,Ek),e(Ek,BXe),e(Rf,IXe),e(A,NXe),e(A,Pf),e(Pf,are),e(are,qXe),e(Pf,jXe),e(Pf,Ck),e(Ck,DXe),e(Pf,GXe),e(A,OXe),e(A,Bf),e(Bf,nre),e(nre,VXe),e(Bf,XXe),e(Bf,wk),e(wk,zXe),e(Bf,WXe),e(A,QXe),e(A,If),e(If,sre),e(sre,HXe),e(If,UXe),e(If,Ak),e(Ak,JXe),e(If,YXe),e(A,KXe),e(A,Nf),e(Nf,lre),e(lre,ZXe),e(Nf,eze),e(Nf,Lk),e(Lk,oze),e(Nf,rze),e(A,tze),e(A,qf),e(qf,ire),e(ire,aze),e(qf,nze),e(qf,yk),e(yk,sze),e(qf,lze),e(A,ize),e(A,jf),e(jf,dre),e(dre,dze),e(jf,cze),e(jf,xk),e(xk,fze),e(jf,mze),e(A,gze),e(A,Df),e(Df,cre),e(cre,hze),e(Df,pze),e(Df,$k),e($k,_ze),e(Df,uze),e(A,bze),e(A,Gf),e(Gf,fre),e(fre,vze),e(Gf,Fze),e(Gf,kk),e(kk,Tze),e(Gf,Mze),e(A,Eze),e(A,Of),e(Of,mre),e(mre,Cze),e(Of,wze),e(Of,Sk),e(Sk,Aze),e(Of,Lze),e(A,yze),e(A,Vf),e(Vf,gre),e(gre,xze),e(Vf,$ze),e(Vf,Rk),e(Rk,kze),e(Vf,Sze),e(A,Rze),e(A,Xf),e(Xf,hre),e(hre,Pze),e(Xf,Bze),e(Xf,Pk),e(Pk,Ize),e(Xf,Nze),e(A,qze),e(A,zf),e(zf,pre),e(pre,jze),e(zf,Dze),e(zf,Bk),e(Bk,Gze),e(zf,Oze),e(A,Vze),e(A,Wf),e(Wf,_re),e(_re,Xze),e(Wf,zze),e(Wf,Ik),e(Ik,Wze),e(Wf,Qze),e(A,Hze),e(A,Qf),e(Qf,ure),e(ure,Uze),e(Qf,Jze),e(Qf,Nk),e(Nk,Yze),e(Qf,Kze),e(A,Zze),e(A,Hf),e(Hf,bre),e(bre,eWe),e(Hf,oWe),e(Hf,qk),e(qk,rWe),e(Hf,tWe),e(A,aWe),e(A,Uf),e(Uf,vre),e(vre,nWe),e(Uf,sWe),e(Uf,jk),e(jk,lWe),e(Uf,iWe),e(A,dWe),e(A,Jf),e(Jf,Fre),e(Fre,cWe),e(Jf,fWe),e(Jf,Dk),e(Dk,mWe),e(Jf,gWe),e(A,hWe),e(A,Yf),e(Yf,Tre),e(Tre,pWe),e(Yf,_We),e(Yf,Gk),e(Gk,uWe),e(Yf,bWe),e(A,vWe),e(A,Kf),e(Kf,Mre),e(Mre,FWe),e(Kf,TWe),e(Kf,Ok),e(Ok,MWe),e(Kf,EWe),e(A,CWe),e(A,Zf),e(Zf,Ere),e(Ere,wWe),e(Zf,AWe),e(Zf,Vk),e(Vk,LWe),e(Zf,yWe),e(A,xWe),e(A,em),e(em,Cre),e(Cre,$We),e(em,kWe),e(em,Xk),e(Xk,SWe),e(em,RWe),e(A,PWe),e(A,om),e(om,wre),e(wre,BWe),e(om,IWe),e(om,zk),e(zk,NWe),e(om,qWe),e(A,jWe),e(A,rm),e(rm,Are),e(Are,DWe),e(rm,GWe),e(rm,Wk),e(Wk,OWe),e(rm,VWe),e(A,XWe),e(A,tm),e(tm,Lre),e(Lre,zWe),e(tm,WWe),e(tm,Qk),e(Qk,QWe),e(tm,HWe),e(A,UWe),e(A,am),e(am,yre),e(yre,JWe),e(am,YWe),e(am,Hk),e(Hk,KWe),e(am,ZWe),e(A,eQe),e(A,nm),e(nm,xre),e(xre,oQe),e(nm,rQe),e(nm,Uk),e(Uk,tQe),e(nm,aQe),e(A,nQe),e(A,sm),e(sm,$re),e($re,sQe),e(sm,lQe),e(sm,Jk),e(Jk,iQe),e(sm,dQe),e(A,cQe),e(A,lm),e(lm,kre),e(kre,fQe),e(lm,mQe),e(lm,Yk),e(Yk,gQe),e(lm,hQe),e(A,pQe),e(A,im),e(im,Sre),e(Sre,_Qe),e(im,uQe),e(im,Kk),e(Kk,bQe),e(im,vQe),e(A,FQe),e(A,dm),e(dm,Rre),e(Rre,TQe),e(dm,MQe),e(dm,Zk),e(Zk,EQe),e(dm,CQe),e(A,wQe),e(A,cm),e(cm,Pre),e(Pre,AQe),e(cm,LQe),e(cm,eS),e(eS,yQe),e(cm,xQe),e(A,$Qe),e(A,fm),e(fm,Bre),e(Bre,kQe),e(fm,SQe),e(fm,oS),e(oS,RQe),e(fm,PQe),e(A,BQe),e(A,mm),e(mm,Ire),e(Ire,IQe),e(mm,NQe),e(mm,rS),e(rS,qQe),e(mm,jQe),e(A,DQe),e(A,gm),e(gm,Nre),e(Nre,GQe),e(gm,OQe),e(gm,tS),e(tS,VQe),e(gm,XQe),e(A,zQe),e(A,hm),e(hm,qre),e(qre,WQe),e(hm,QQe),e(hm,aS),e(aS,HQe),e(hm,UQe),e(A,JQe),e(A,pm),e(pm,jre),e(jre,YQe),e(pm,KQe),e(pm,nS),e(nS,ZQe),e(pm,eHe),e(A,oHe),e(A,_m),e(_m,Dre),e(Dre,rHe),e(_m,tHe),e(_m,sS),e(sS,aHe),e(_m,nHe),e(A,sHe),e(A,um),e(um,Gre),e(Gre,lHe),e(um,iHe),e(um,lS),e(lS,dHe),e(um,cHe),e(A,fHe),e(A,bm),e(bm,Ore),e(Ore,mHe),e(bm,gHe),e(bm,iS),e(iS,hHe),e(bm,pHe),e(A,_He),e(A,vm),e(vm,Vre),e(Vre,uHe),e(vm,bHe),e(vm,dS),e(dS,vHe),e(vm,FHe),e(A,THe),e(A,Fm),e(Fm,Xre),e(Xre,MHe),e(Fm,EHe),e(Fm,cS),e(cS,CHe),e(Fm,wHe),e(A,AHe),e(A,Tm),e(Tm,zre),e(zre,LHe),e(Tm,yHe),e(Tm,fS),e(fS,xHe),e(Tm,$He),e(A,kHe),e(A,Mm),e(Mm,Wre),e(Wre,SHe),e(Mm,RHe),e(Mm,mS),e(mS,PHe),e(Mm,BHe),e(A,IHe),e(A,Em),e(Em,Qre),e(Qre,NHe),e(Em,qHe),e(Em,gS),e(gS,jHe),e(Em,DHe),e(A,GHe),e(A,Cm),e(Cm,Hre),e(Hre,OHe),e(Cm,VHe),e(Cm,hS),e(hS,XHe),e(Cm,zHe),e(A,WHe),e(A,wm),e(wm,Ure),e(Ure,QHe),e(wm,HHe),e(wm,pS),e(pS,UHe),e(wm,JHe),e(A,YHe),e(A,Am),e(Am,Jre),e(Jre,KHe),e(Am,ZHe),e(Am,_S),e(_S,eUe),e(Am,oUe),e(A,rUe),e(A,Lm),e(Lm,Yre),e(Yre,tUe),e(Lm,aUe),e(Lm,uS),e(uS,nUe),e(Lm,sUe),e(A,lUe),e(A,ym),e(ym,Kre),e(Kre,iUe),e(ym,dUe),e(ym,bS),e(bS,cUe),e(ym,fUe),e(A,mUe),e(A,xm),e(xm,Zre),e(Zre,gUe),e(xm,hUe),e(xm,vS),e(vS,pUe),e(xm,_Ue),e(A,uUe),e(A,$m),e($m,ete),e(ete,bUe),e($m,vUe),e($m,FS),e(FS,FUe),e($m,TUe),e(A,MUe),e(A,km),e(km,ote),e(ote,EUe),e(km,CUe),e(km,TS),e(TS,wUe),e(km,AUe),e(A,LUe),e(A,Sm),e(Sm,rte),e(rte,yUe),e(Sm,xUe),e(Sm,MS),e(MS,$Ue),e(Sm,kUe),e(A,SUe),e(A,Rm),e(Rm,tte),e(tte,RUe),e(Rm,PUe),e(Rm,ES),e(ES,BUe),e(Rm,IUe),e(A,NUe),e(A,Pm),e(Pm,ate),e(ate,qUe),e(Pm,jUe),e(Pm,CS),e(CS,DUe),e(Pm,GUe),e(A,OUe),e(A,Bm),e(Bm,nte),e(nte,VUe),e(Bm,XUe),e(Bm,wS),e(wS,zUe),e(Bm,WUe),e(A,QUe),e(A,Im),e(Im,ste),e(ste,HUe),e(Im,UUe),e(Im,AS),e(AS,JUe),e(Im,YUe),e(A,KUe),e(A,Nm),e(Nm,lte),e(lte,ZUe),e(Nm,eJe),e(Nm,LS),e(LS,oJe),e(Nm,rJe),e(A,tJe),e(A,qm),e(qm,ite),e(ite,aJe),e(qm,nJe),e(qm,yS),e(yS,sJe),e(qm,lJe),e(A,iJe),e(A,jm),e(jm,dte),e(dte,dJe),e(jm,cJe),e(jm,xS),e(xS,fJe),e(jm,mJe),e(A,gJe),e(A,Dm),e(Dm,cte),e(cte,hJe),e(Dm,pJe),e(Dm,$S),e($S,_Je),e(Dm,uJe),e(A,bJe),e(A,Gm),e(Gm,fte),e(fte,vJe),e(Gm,FJe),e(Gm,kS),e(kS,TJe),e(Gm,MJe),e(A,EJe),e(A,Om),e(Om,mte),e(mte,CJe),e(Om,wJe),e(Om,SS),e(SS,AJe),e(Om,LJe),e(A,yJe),e(A,Vm),e(Vm,gte),e(gte,xJe),e(Vm,$Je),e(Vm,RS),e(RS,kJe),e(Vm,SJe),e(A,RJe),e(A,Xm),e(Xm,hte),e(hte,PJe),e(Xm,BJe),e(Xm,PS),e(PS,IJe),e(Xm,NJe),e(A,qJe),e(A,zm),e(zm,pte),e(pte,jJe),e(zm,DJe),e(zm,BS),e(BS,GJe),e(zm,OJe),e(A,VJe),e(A,Wm),e(Wm,_te),e(_te,XJe),e(Wm,zJe),e(Wm,IS),e(IS,WJe),e(Wm,QJe),e(A,HJe),e(A,Qm),e(Qm,ute),e(ute,UJe),e(Qm,JJe),e(Qm,NS),e(NS,YJe),e(Qm,KJe),e(A,ZJe),e(A,Hm),e(Hm,bte),e(bte,eYe),e(Hm,oYe),e(Hm,qS),e(qS,rYe),e(Hm,tYe),e(A,aYe),e(A,Um),e(Um,vte),e(vte,nYe),e(Um,sYe),e(Um,jS),e(jS,lYe),e(Um,iYe),e(A,dYe),e(A,Jm),e(Jm,Fte),e(Fte,cYe),e(Jm,fYe),e(Jm,DS),e(DS,mYe),e(Jm,gYe),e(A,hYe),e(A,Ym),e(Ym,Tte),e(Tte,pYe),e(Ym,_Ye),e(Ym,GS),e(GS,uYe),e(Ym,bYe),e(A,vYe),e(A,Km),e(Km,Mte),e(Mte,FYe),e(Km,TYe),e(Km,OS),e(OS,MYe),e(Km,EYe),e(A,CYe),e(A,Zm),e(Zm,Ete),e(Ete,wYe),e(Zm,AYe),e(Zm,VS),e(VS,LYe),e(Zm,yYe),e(A,xYe),e(A,eg),e(eg,Cte),e(Cte,$Ye),e(eg,kYe),e(eg,XS),e(XS,SYe),e(eg,RYe),e(A,PYe),e(A,og),e(og,wte),e(wte,BYe),e(og,IYe),e(og,zS),e(zS,NYe),e(og,qYe),e(A,jYe),e(A,rg),e(rg,Ate),e(Ate,DYe),e(rg,GYe),e(rg,WS),e(WS,OYe),e(rg,VYe),e(A,XYe),e(A,tg),e(tg,Lte),e(Lte,zYe),e(tg,WYe),e(tg,QS),e(QS,QYe),e(tg,HYe),e(A,UYe),e(A,ag),e(ag,yte),e(yte,JYe),e(ag,YYe),e(ag,HS),e(HS,KYe),e(ag,ZYe),e(A,eKe),e(A,ng),e(ng,xte),e(xte,oKe),e(ng,rKe),e(ng,US),e(US,tKe),e(ng,aKe),e(A,nKe),e(A,sg),e(sg,$te),e($te,sKe),e(sg,lKe),e(sg,JS),e(JS,iKe),e(sg,dKe),e(A,cKe),e(A,lg),e(lg,kte),e(kte,fKe),e(lg,mKe),e(lg,YS),e(YS,gKe),e(lg,hKe),e(A,pKe),e(A,ig),e(ig,Ste),e(Ste,_Ke),e(ig,uKe),e(ig,KS),e(KS,bKe),e(ig,vKe),e(A,FKe),e(A,dg),e(dg,Rte),e(Rte,TKe),e(dg,MKe),e(dg,ZS),e(ZS,EKe),e(dg,CKe),e(A,wKe),e(A,cg),e(cg,Pte),e(Pte,AKe),e(cg,LKe),e(cg,eR),e(eR,yKe),e(cg,xKe),e(A,$Ke),e(A,fg),e(fg,Bte),e(Bte,kKe),e(fg,SKe),e(fg,oR),e(oR,RKe),e(fg,PKe),e(A,BKe),e(A,mg),e(mg,Ite),e(Ite,IKe),e(mg,NKe),e(mg,rR),e(rR,qKe),e(mg,jKe),e(A,DKe),e(A,gg),e(gg,Nte),e(Nte,GKe),e(gg,OKe),e(gg,tR),e(tR,VKe),e(gg,XKe),e(A,zKe),e(A,hg),e(hg,qte),e(qte,WKe),e(hg,QKe),e(hg,aR),e(aR,HKe),e(hg,UKe),e(A,JKe),e(A,pg),e(pg,jte),e(jte,YKe),e(pg,KKe),e(pg,nR),e(nR,ZKe),e(pg,eZe),e(A,oZe),e(A,_g),e(_g,Dte),e(Dte,rZe),e(_g,tZe),e(_g,sR),e(sR,aZe),e(_g,nZe),e(A,sZe),e(A,ug),e(ug,Gte),e(Gte,lZe),e(ug,iZe),e(ug,lR),e(lR,dZe),e(ug,cZe),e(A,fZe),e(A,bg),e(bg,Ote),e(Ote,mZe),e(bg,gZe),e(bg,iR),e(iR,hZe),e(bg,pZe),e(A,_Ze),e(A,vg),e(vg,Vte),e(Vte,uZe),e(vg,bZe),e(vg,dR),e(dR,vZe),e(vg,FZe),e(A,TZe),e(A,Fg),e(Fg,Xte),e(Xte,MZe),e(Fg,EZe),e(Fg,cR),e(cR,CZe),e(Fg,wZe),e(A,AZe),e(A,Tg),e(Tg,zte),e(zte,LZe),e(Tg,yZe),e(Tg,fR),e(fR,xZe),e(Tg,$Ze),e(A,kZe),e(A,Mg),e(Mg,Wte),e(Wte,SZe),e(Mg,RZe),e(Mg,mR),e(mR,PZe),e(Mg,BZe),e(A,IZe),e(A,Eg),e(Eg,Qte),e(Qte,NZe),e(Eg,qZe),e(Eg,gR),e(gR,jZe),e(Eg,DZe),e(A,GZe),e(A,Cg),e(Cg,Hte),e(Hte,OZe),e(Cg,VZe),e(Cg,hR),e(hR,XZe),e(Cg,zZe),e(A,WZe),e(A,wg),e(wg,Ute),e(Ute,QZe),e(wg,HZe),e(wg,pR),e(pR,UZe),e(wg,JZe),e(A,YZe),e(A,Ag),e(Ag,Jte),e(Jte,KZe),e(Ag,ZZe),e(Ag,_R),e(_R,eeo),e(Ag,oeo),e(Er,reo),M(Lg,Er,null),e(Co,teo),e(Co,yg),M(H6,yg,null),e(yg,aeo),e(yg,Yte),e(Yte,neo),b(f,dje,u),b(f,Ei,u),e(Ei,xg),e(xg,Kte),M(U6,Kte,null),e(Ei,seo),e(Ei,Zte),e(Zte,leo),b(f,cje,u),b(f,wo,u),M(J6,wo,null),e(wo,ieo),e(wo,Y6),e(Y6,deo),e(Y6,uR),e(uR,ceo),e(Y6,feo),e(wo,meo),e(wo,K6),e(K6,geo),e(K6,eae),e(eae,heo),e(K6,peo),e(wo,_eo),e(wo,Cr),M(Z6,Cr,null),e(Cr,ueo),e(Cr,oae),e(oae,beo),e(Cr,veo),e(Cr,Aa),e(Aa,Feo),e(Aa,rae),e(rae,Teo),e(Aa,Meo),e(Aa,tae),e(tae,Eeo),e(Aa,Ceo),e(Aa,aae),e(aae,weo),e(Aa,Aeo),e(Cr,Leo),e(Cr,k),e(k,Sn),e(Sn,nae),e(nae,yeo),e(Sn,xeo),e(Sn,bR),e(bR,$eo),e(Sn,keo),e(Sn,vR),e(vR,Seo),e(Sn,Reo),e(k,Peo),e(k,Rn),e(Rn,sae),e(sae,Beo),e(Rn,Ieo),e(Rn,FR),e(FR,Neo),e(Rn,qeo),e(Rn,TR),e(TR,jeo),e(Rn,Deo),e(k,Geo),e(k,Pn),e(Pn,lae),e(lae,Oeo),e(Pn,Veo),e(Pn,MR),e(MR,Xeo),e(Pn,zeo),e(Pn,ER),e(ER,Weo),e(Pn,Qeo),e(k,Heo),e(k,$g),e($g,iae),e(iae,Ueo),e($g,Jeo),e($g,CR),e(CR,Yeo),e($g,Keo),e(k,Zeo),e(k,Bn),e(Bn,dae),e(dae,eoo),e(Bn,ooo),e(Bn,wR),e(wR,roo),e(Bn,too),e(Bn,AR),e(AR,aoo),e(Bn,noo),e(k,soo),e(k,kg),e(kg,cae),e(cae,loo),e(kg,ioo),e(kg,LR),e(LR,doo),e(kg,coo),e(k,foo),e(k,Sg),e(Sg,fae),e(fae,moo),e(Sg,goo),e(Sg,yR),e(yR,hoo),e(Sg,poo),e(k,_oo),e(k,Rg),e(Rg,mae),e(mae,uoo),e(Rg,boo),e(Rg,xR),e(xR,voo),e(Rg,Foo),e(k,Too),e(k,In),e(In,gae),e(gae,Moo),e(In,Eoo),e(In,$R),e($R,Coo),e(In,woo),e(In,kR),e(kR,Aoo),e(In,Loo),e(k,yoo),e(k,Nn),e(Nn,hae),e(hae,xoo),e(Nn,$oo),e(Nn,SR),e(SR,koo),e(Nn,Soo),e(Nn,RR),e(RR,Roo),e(Nn,Poo),e(k,Boo),e(k,qn),e(qn,pae),e(pae,Ioo),e(qn,Noo),e(qn,PR),e(PR,qoo),e(qn,joo),e(qn,BR),e(BR,Doo),e(qn,Goo),e(k,Ooo),e(k,Pg),e(Pg,_ae),e(_ae,Voo),e(Pg,Xoo),e(Pg,IR),e(IR,zoo),e(Pg,Woo),e(k,Qoo),e(k,Bg),e(Bg,uae),e(uae,Hoo),e(Bg,Uoo),e(Bg,NR),e(NR,Joo),e(Bg,Yoo),e(k,Koo),e(k,jn),e(jn,bae),e(bae,Zoo),e(jn,ero),e(jn,qR),e(qR,oro),e(jn,rro),e(jn,jR),e(jR,tro),e(jn,aro),e(k,nro),e(k,Ig),e(Ig,vae),e(vae,sro),e(Ig,lro),e(Ig,DR),e(DR,iro),e(Ig,dro),e(k,cro),e(k,Dn),e(Dn,Fae),e(Fae,fro),e(Dn,mro),e(Dn,GR),e(GR,gro),e(Dn,hro),e(Dn,OR),e(OR,pro),e(Dn,_ro),e(k,uro),e(k,Gn),e(Gn,Tae),e(Tae,bro),e(Gn,vro),e(Gn,VR),e(VR,Fro),e(Gn,Tro),e(Gn,XR),e(XR,Mro),e(Gn,Ero),e(k,Cro),e(k,On),e(On,Mae),e(Mae,wro),e(On,Aro),e(On,zR),e(zR,Lro),e(On,yro),e(On,WR),e(WR,xro),e(On,$ro),e(k,kro),e(k,Ng),e(Ng,Eae),e(Eae,Sro),e(Ng,Rro),e(Ng,QR),e(QR,Pro),e(Ng,Bro),e(k,Iro),e(k,Vn),e(Vn,Cae),e(Cae,Nro),e(Vn,qro),e(Vn,HR),e(HR,jro),e(Vn,Dro),e(Vn,UR),e(UR,Gro),e(Vn,Oro),e(k,Vro),e(k,Xn),e(Xn,wae),e(wae,Xro),e(Xn,zro),e(Xn,JR),e(JR,Wro),e(Xn,Qro),e(Xn,YR),e(YR,Hro),e(Xn,Uro),e(k,Jro),e(k,zn),e(zn,Aae),e(Aae,Yro),e(zn,Kro),e(zn,KR),e(KR,Zro),e(zn,eto),e(zn,ZR),e(ZR,oto),e(zn,rto),e(k,tto),e(k,Wn),e(Wn,Lae),e(Lae,ato),e(Wn,nto),e(Wn,eP),e(eP,sto),e(Wn,lto),e(Wn,oP),e(oP,ito),e(Wn,dto),e(k,cto),e(k,Qn),e(Qn,yae),e(yae,fto),e(Qn,mto),e(Qn,rP),e(rP,gto),e(Qn,hto),e(Qn,tP),e(tP,pto),e(Qn,_to),e(k,uto),e(k,Hn),e(Hn,xae),e(xae,bto),e(Hn,vto),e(Hn,aP),e(aP,Fto),e(Hn,Tto),e(Hn,nP),e(nP,Mto),e(Hn,Eto),e(k,Cto),e(k,qg),e(qg,$ae),e($ae,wto),e(qg,Ato),e(qg,sP),e(sP,Lto),e(qg,yto),e(k,xto),e(k,Un),e(Un,kae),e(kae,$to),e(Un,kto),e(Un,lP),e(lP,Sto),e(Un,Rto),e(Un,iP),e(iP,Pto),e(Un,Bto),e(k,Ito),e(k,jg),e(jg,Sae),e(Sae,Nto),e(jg,qto),e(jg,dP),e(dP,jto),e(jg,Dto),e(k,Gto),e(k,Jn),e(Jn,Rae),e(Rae,Oto),e(Jn,Vto),e(Jn,cP),e(cP,Xto),e(Jn,zto),e(Jn,fP),e(fP,Wto),e(Jn,Qto),e(k,Hto),e(k,Yn),e(Yn,Pae),e(Pae,Uto),e(Yn,Jto),e(Yn,mP),e(mP,Yto),e(Yn,Kto),e(Yn,gP),e(gP,Zto),e(Yn,eao),e(k,oao),e(k,Kn),e(Kn,Bae),e(Bae,rao),e(Kn,tao),e(Kn,hP),e(hP,aao),e(Kn,nao),e(Kn,pP),e(pP,sao),e(Kn,lao),e(k,iao),e(k,Dg),e(Dg,Iae),e(Iae,dao),e(Dg,cao),e(Dg,_P),e(_P,fao),e(Dg,mao),e(k,gao),e(k,Zn),e(Zn,Nae),e(Nae,hao),e(Zn,pao),e(Zn,uP),e(uP,_ao),e(Zn,uao),e(Zn,bP),e(bP,bao),e(Zn,vao),e(k,Fao),e(k,es),e(es,qae),e(qae,Tao),e(es,Mao),e(es,vP),e(vP,Eao),e(es,Cao),e(es,FP),e(FP,wao),e(es,Aao),e(k,Lao),e(k,os),e(os,jae),e(jae,yao),e(os,xao),e(os,TP),e(TP,$ao),e(os,kao),e(os,MP),e(MP,Sao),e(os,Rao),e(k,Pao),e(k,Gg),e(Gg,Dae),e(Dae,Bao),e(Gg,Iao),e(Gg,EP),e(EP,Nao),e(Gg,qao),e(k,jao),e(k,rs),e(rs,Gae),e(Gae,Dao),e(rs,Gao),e(rs,CP),e(CP,Oao),e(rs,Vao),e(rs,wP),e(wP,Xao),e(rs,zao),e(k,Wao),e(k,ts),e(ts,Oae),e(Oae,Qao),e(ts,Hao),e(ts,AP),e(AP,Uao),e(ts,Jao),e(ts,LP),e(LP,Yao),e(ts,Kao),e(k,Zao),e(k,as),e(as,Vae),e(Vae,eno),e(as,ono),e(as,yP),e(yP,rno),e(as,tno),e(as,xP),e(xP,ano),e(as,nno),e(k,sno),e(k,ns),e(ns,Xae),e(Xae,lno),e(ns,ino),e(ns,$P),e($P,dno),e(ns,cno),e(ns,kP),e(kP,fno),e(ns,mno),e(k,gno),e(k,ss),e(ss,zae),e(zae,hno),e(ss,pno),e(ss,SP),e(SP,_no),e(ss,uno),e(ss,RP),e(RP,bno),e(ss,vno),e(k,Fno),e(k,ls),e(ls,Wae),e(Wae,Tno),e(ls,Mno),e(ls,PP),e(PP,Eno),e(ls,Cno),e(ls,BP),e(BP,wno),e(ls,Ano),e(k,Lno),e(k,is),e(is,Qae),e(Qae,yno),e(is,xno),e(is,IP),e(IP,$no),e(is,kno),e(is,NP),e(NP,Sno),e(is,Rno),e(k,Pno),e(k,Og),e(Og,Hae),e(Hae,Bno),e(Og,Ino),e(Og,qP),e(qP,Nno),e(Og,qno),e(k,jno),e(k,ds),e(ds,Uae),e(Uae,Dno),e(ds,Gno),e(ds,jP),e(jP,Ono),e(ds,Vno),e(ds,DP),e(DP,Xno),e(ds,zno),e(k,Wno),e(k,Vg),e(Vg,Jae),e(Jae,Qno),e(Vg,Hno),e(Vg,GP),e(GP,Uno),e(Vg,Jno),e(k,Yno),e(k,Xg),e(Xg,Yae),e(Yae,Kno),e(Xg,Zno),e(Xg,OP),e(OP,eso),e(Xg,oso),e(k,rso),e(k,cs),e(cs,Kae),e(Kae,tso),e(cs,aso),e(cs,VP),e(VP,nso),e(cs,sso),e(cs,XP),e(XP,lso),e(cs,iso),e(k,dso),e(k,fs),e(fs,Zae),e(Zae,cso),e(fs,fso),e(fs,zP),e(zP,mso),e(fs,gso),e(fs,WP),e(WP,hso),e(fs,pso),e(k,_so),e(k,ms),e(ms,ene),e(ene,uso),e(ms,bso),e(ms,QP),e(QP,vso),e(ms,Fso),e(ms,HP),e(HP,Tso),e(ms,Mso),e(k,Eso),e(k,zg),e(zg,one),e(one,Cso),e(zg,wso),e(zg,UP),e(UP,Aso),e(zg,Lso),e(k,yso),e(k,gs),e(gs,rne),e(rne,xso),e(gs,$so),e(gs,JP),e(JP,kso),e(gs,Sso),e(gs,YP),e(YP,Rso),e(gs,Pso),e(k,Bso),e(k,hs),e(hs,tne),e(tne,Iso),e(hs,Nso),e(hs,KP),e(KP,qso),e(hs,jso),e(hs,ZP),e(ZP,Dso),e(hs,Gso),e(k,Oso),e(k,ps),e(ps,ane),e(ane,Vso),e(ps,Xso),e(ps,eB),e(eB,zso),e(ps,Wso),e(ps,oB),e(oB,Qso),e(ps,Hso),e(k,Uso),e(k,_s),e(_s,nne),e(nne,Jso),e(_s,Yso),e(_s,rB),e(rB,Kso),e(_s,Zso),e(_s,tB),e(tB,elo),e(_s,olo),e(k,rlo),e(k,us),e(us,sne),e(sne,tlo),e(us,alo),e(us,aB),e(aB,nlo),e(us,slo),e(us,nB),e(nB,llo),e(us,ilo),e(k,dlo),e(k,Wg),e(Wg,lne),e(lne,clo),e(Wg,flo),e(Wg,sB),e(sB,mlo),e(Wg,glo),e(k,hlo),e(k,bs),e(bs,ine),e(ine,plo),e(bs,_lo),e(bs,lB),e(lB,ulo),e(bs,blo),e(bs,iB),e(iB,vlo),e(bs,Flo),e(k,Tlo),e(k,Qg),e(Qg,dne),e(dne,Mlo),e(Qg,Elo),e(Qg,dB),e(dB,Clo),e(Qg,wlo),e(k,Alo),e(k,Hg),e(Hg,cne),e(cne,Llo),e(Hg,ylo),e(Hg,cB),e(cB,xlo),e(Hg,$lo),e(k,klo),e(k,Ug),e(Ug,fne),e(fne,Slo),e(Ug,Rlo),e(Ug,fB),e(fB,Plo),e(Ug,Blo),e(k,Ilo),e(k,Jg),e(Jg,mne),e(mne,Nlo),e(Jg,qlo),e(Jg,mB),e(mB,jlo),e(Jg,Dlo),e(k,Glo),e(k,vs),e(vs,gne),e(gne,Olo),e(vs,Vlo),e(vs,gB),e(gB,Xlo),e(vs,zlo),e(vs,hB),e(hB,Wlo),e(vs,Qlo),e(k,Hlo),e(k,Yg),e(Yg,hne),e(hne,Ulo),e(Yg,Jlo),e(Yg,pB),e(pB,Ylo),e(Yg,Klo),e(k,Zlo),e(k,Fs),e(Fs,pne),e(pne,eio),e(Fs,oio),e(Fs,_B),e(_B,rio),e(Fs,tio),e(Fs,uB),e(uB,aio),e(Fs,nio),e(k,sio),e(k,Ts),e(Ts,_ne),e(_ne,lio),e(Ts,iio),e(Ts,bB),e(bB,dio),e(Ts,cio),e(Ts,vB),e(vB,fio),e(Ts,mio),e(k,gio),e(k,Ms),e(Ms,une),e(une,hio),e(Ms,pio),e(Ms,FB),e(FB,_io),e(Ms,uio),e(Ms,TB),e(TB,bio),e(Ms,vio),e(k,Fio),e(k,Es),e(Es,bne),e(bne,Tio),e(Es,Mio),e(Es,MB),e(MB,Eio),e(Es,Cio),e(Es,EB),e(EB,wio),e(Es,Aio),e(k,Lio),e(k,Cs),e(Cs,vne),e(vne,yio),e(Cs,xio),e(Cs,CB),e(CB,$io),e(Cs,kio),e(Cs,wB),e(wB,Sio),e(Cs,Rio),e(k,Pio),e(k,ws),e(ws,Fne),e(Fne,Bio),e(ws,Iio),e(ws,AB),e(AB,Nio),e(ws,qio),e(ws,LB),e(LB,jio),e(ws,Dio),e(k,Gio),e(k,Kg),e(Kg,Tne),e(Tne,Oio),e(Kg,Vio),e(Kg,yB),e(yB,Xio),e(Kg,zio),e(k,Wio),e(k,Zg),e(Zg,Mne),e(Mne,Qio),e(Zg,Hio),e(Zg,xB),e(xB,Uio),e(Zg,Jio),e(k,Yio),e(k,As),e(As,Ene),e(Ene,Kio),e(As,Zio),e(As,$B),e($B,edo),e(As,odo),e(As,kB),e(kB,rdo),e(As,tdo),e(k,ado),e(k,Ls),e(Ls,Cne),e(Cne,ndo),e(Ls,sdo),e(Ls,SB),e(SB,ldo),e(Ls,ido),e(Ls,RB),e(RB,ddo),e(Ls,cdo),e(k,fdo),e(k,ys),e(ys,wne),e(wne,mdo),e(ys,gdo),e(ys,PB),e(PB,hdo),e(ys,pdo),e(ys,BB),e(BB,_do),e(ys,udo),e(k,bdo),e(k,eh),e(eh,Ane),e(Ane,vdo),e(eh,Fdo),e(eh,IB),e(IB,Tdo),e(eh,Mdo),e(k,Edo),e(k,oh),e(oh,Lne),e(Lne,Cdo),e(oh,wdo),e(oh,NB),e(NB,Ado),e(oh,Ldo),e(k,ydo),e(k,rh),e(rh,yne),e(yne,xdo),e(rh,$do),e(rh,qB),e(qB,kdo),e(rh,Sdo),e(k,Rdo),e(k,xs),e(xs,xne),e(xne,Pdo),e(xs,Bdo),e(xs,jB),e(jB,Ido),e(xs,Ndo),e(xs,DB),e(DB,qdo),e(xs,jdo),e(k,Ddo),e(k,th),e(th,$ne),e($ne,Gdo),e(th,Odo),e(th,GB),e(GB,Vdo),e(th,Xdo),e(k,zdo),e(k,ah),e(ah,kne),e(kne,Wdo),e(ah,Qdo),e(ah,OB),e(OB,Hdo),e(ah,Udo),e(k,Jdo),e(k,nh),e(nh,Sne),e(Sne,Ydo),e(nh,Kdo),e(nh,VB),e(VB,Zdo),e(nh,eco),e(k,oco),e(k,$s),e($s,Rne),e(Rne,rco),e($s,tco),e($s,XB),e(XB,aco),e($s,nco),e($s,zB),e(zB,sco),e($s,lco),e(k,ico),e(k,sh),e(sh,Pne),e(Pne,dco),e(sh,cco),e(sh,WB),e(WB,fco),e(sh,mco),e(k,gco),e(k,lh),e(lh,Bne),e(Bne,hco),e(lh,pco),e(lh,QB),e(QB,_co),e(lh,uco),e(k,bco),e(k,ks),e(ks,Ine),e(Ine,vco),e(ks,Fco),e(ks,HB),e(HB,Tco),e(ks,Mco),e(ks,UB),e(UB,Eco),e(ks,Cco),e(k,wco),e(k,Ss),e(Ss,Nne),e(Nne,Aco),e(Ss,Lco),e(Ss,JB),e(JB,yco),e(Ss,xco),e(Ss,YB),e(YB,$co),e(Ss,kco),e(k,Sco),e(k,Rs),e(Rs,qne),e(qne,Rco),e(Rs,Pco),e(Rs,KB),e(KB,Bco),e(Rs,Ico),e(Rs,ZB),e(ZB,Nco),e(Rs,qco),e(k,jco),e(k,Ps),e(Ps,jne),e(jne,Dco),e(Ps,Gco),e(Ps,eI),e(eI,Oco),e(Ps,Vco),e(Ps,oI),e(oI,Xco),e(Ps,zco),e(Cr,Wco),M(ih,Cr,null),e(wo,Qco),e(wo,dh),M(eL,dh,null),e(dh,Hco),e(dh,Dne),e(Dne,Uco),b(f,fje,u),b(f,Ci,u),e(Ci,ch),e(ch,Gne),M(oL,Gne,null),e(Ci,Jco),e(Ci,One),e(One,Yco),b(f,mje,u),b(f,Ao,u),M(rL,Ao,null),e(Ao,Kco),e(Ao,tL),e(tL,Zco),e(tL,rI),e(rI,efo),e(tL,ofo),e(Ao,rfo),e(Ao,aL),e(aL,tfo),e(aL,Vne),e(Vne,afo),e(aL,nfo),e(Ao,sfo),e(Ao,He),M(nL,He,null),e(He,lfo),e(He,Xne),e(Xne,ifo),e(He,dfo),e(He,La),e(La,cfo),e(La,zne),e(zne,ffo),e(La,mfo),e(La,Wne),e(Wne,gfo),e(La,hfo),e(La,Qne),e(Qne,pfo),e(La,_fo),e(He,ufo),e(He,Y),e(Y,fh),e(fh,Hne),e(Hne,bfo),e(fh,vfo),e(fh,tI),e(tI,Ffo),e(fh,Tfo),e(Y,Mfo),e(Y,mh),e(mh,Une),e(Une,Efo),e(mh,Cfo),e(mh,aI),e(aI,wfo),e(mh,Afo),e(Y,Lfo),e(Y,gh),e(gh,Jne),e(Jne,yfo),e(gh,xfo),e(gh,nI),e(nI,$fo),e(gh,kfo),e(Y,Sfo),e(Y,hh),e(hh,Yne),e(Yne,Rfo),e(hh,Pfo),e(hh,sI),e(sI,Bfo),e(hh,Ifo),e(Y,Nfo),e(Y,ph),e(ph,Kne),e(Kne,qfo),e(ph,jfo),e(ph,lI),e(lI,Dfo),e(ph,Gfo),e(Y,Ofo),e(Y,_h),e(_h,Zne),e(Zne,Vfo),e(_h,Xfo),e(_h,iI),e(iI,zfo),e(_h,Wfo),e(Y,Qfo),e(Y,uh),e(uh,ese),e(ese,Hfo),e(uh,Ufo),e(uh,dI),e(dI,Jfo),e(uh,Yfo),e(Y,Kfo),e(Y,bh),e(bh,ose),e(ose,Zfo),e(bh,emo),e(bh,cI),e(cI,omo),e(bh,rmo),e(Y,tmo),e(Y,vh),e(vh,rse),e(rse,amo),e(vh,nmo),e(vh,fI),e(fI,smo),e(vh,lmo),e(Y,imo),e(Y,Fh),e(Fh,tse),e(tse,dmo),e(Fh,cmo),e(Fh,mI),e(mI,fmo),e(Fh,mmo),e(Y,gmo),e(Y,Th),e(Th,ase),e(ase,hmo),e(Th,pmo),e(Th,gI),e(gI,_mo),e(Th,umo),e(Y,bmo),e(Y,Mh),e(Mh,nse),e(nse,vmo),e(Mh,Fmo),e(Mh,hI),e(hI,Tmo),e(Mh,Mmo),e(Y,Emo),e(Y,Eh),e(Eh,sse),e(sse,Cmo),e(Eh,wmo),e(Eh,pI),e(pI,Amo),e(Eh,Lmo),e(Y,ymo),e(Y,Ch),e(Ch,lse),e(lse,xmo),e(Ch,$mo),e(Ch,_I),e(_I,kmo),e(Ch,Smo),e(Y,Rmo),e(Y,wh),e(wh,ise),e(ise,Pmo),e(wh,Bmo),e(wh,uI),e(uI,Imo),e(wh,Nmo),e(Y,qmo),e(Y,Ah),e(Ah,dse),e(dse,jmo),e(Ah,Dmo),e(Ah,bI),e(bI,Gmo),e(Ah,Omo),e(Y,Vmo),e(Y,Lh),e(Lh,cse),e(cse,Xmo),e(Lh,zmo),e(Lh,vI),e(vI,Wmo),e(Lh,Qmo),e(Y,Hmo),e(Y,yh),e(yh,fse),e(fse,Umo),e(yh,Jmo),e(yh,FI),e(FI,Ymo),e(yh,Kmo),e(Y,Zmo),e(Y,xh),e(xh,mse),e(mse,ego),e(xh,ogo),e(xh,TI),e(TI,rgo),e(xh,tgo),e(Y,ago),e(Y,$h),e($h,gse),e(gse,ngo),e($h,sgo),e($h,MI),e(MI,lgo),e($h,igo),e(Y,dgo),e(Y,kh),e(kh,hse),e(hse,cgo),e(kh,fgo),e(kh,EI),e(EI,mgo),e(kh,ggo),e(Y,hgo),e(Y,Sh),e(Sh,pse),e(pse,pgo),e(Sh,_go),e(Sh,CI),e(CI,ugo),e(Sh,bgo),e(Y,vgo),e(Y,Rh),e(Rh,_se),e(_se,Fgo),e(Rh,Tgo),e(Rh,wI),e(wI,Mgo),e(Rh,Ego),e(Y,Cgo),e(Y,Ph),e(Ph,use),e(use,wgo),e(Ph,Ago),e(Ph,AI),e(AI,Lgo),e(Ph,ygo),e(Y,xgo),e(Y,Bh),e(Bh,bse),e(bse,$go),e(Bh,kgo),e(Bh,LI),e(LI,Sgo),e(Bh,Rgo),e(Y,Pgo),e(Y,Ih),e(Ih,vse),e(vse,Bgo),e(Ih,Igo),e(Ih,yI),e(yI,Ngo),e(Ih,qgo),e(Y,jgo),e(Y,Nh),e(Nh,Fse),e(Fse,Dgo),e(Nh,Ggo),e(Nh,xI),e(xI,Ogo),e(Nh,Vgo),e(Y,Xgo),e(Y,qh),e(qh,Tse),e(Tse,zgo),e(qh,Wgo),e(qh,$I),e($I,Qgo),e(qh,Hgo),e(Y,Ugo),e(Y,jh),e(jh,Mse),e(Mse,Jgo),e(jh,Ygo),e(jh,kI),e(kI,Kgo),e(jh,Zgo),e(Y,eho),e(Y,Dh),e(Dh,Ese),e(Ese,oho),e(Dh,rho),e(Dh,SI),e(SI,tho),e(Dh,aho),e(Y,nho),e(Y,Gh),e(Gh,Cse),e(Cse,sho),e(Gh,lho),e(Gh,RI),e(RI,iho),e(Gh,dho),e(He,cho),M(Oh,He,null),e(He,fho),M(Vh,He,null),e(Ao,mho),e(Ao,Xh),M(sL,Xh,null),e(Xh,gho),e(Xh,wse),e(wse,hho),b(f,gje,u),b(f,wi,u),e(wi,zh),e(zh,Ase),M(lL,Ase,null),e(wi,pho),e(wi,Lse),e(Lse,_ho),b(f,hje,u),b(f,Lo,u),M(iL,Lo,null),e(Lo,uho),e(Lo,dL),e(dL,bho),e(dL,PI),e(PI,vho),e(dL,Fho),e(Lo,Tho),e(Lo,cL),e(cL,Mho),e(cL,yse),e(yse,Eho),e(cL,Cho),e(Lo,who),e(Lo,Ue),M(fL,Ue,null),e(Ue,Aho),e(Ue,xse),e(xse,Lho),e(Ue,yho),e(Ue,Ai),e(Ai,xho),e(Ai,$se),e($se,$ho),e(Ai,kho),e(Ai,kse),e(kse,Sho),e(Ai,Rho),e(Ue,Pho),e(Ue,he),e(he,Wh),e(Wh,Sse),e(Sse,Bho),e(Wh,Iho),e(Wh,BI),e(BI,Nho),e(Wh,qho),e(he,jho),e(he,Qh),e(Qh,Rse),e(Rse,Dho),e(Qh,Gho),e(Qh,Pse),e(Pse,Oho),e(Qh,Vho),e(he,Xho),e(he,Hh),e(Hh,Bse),e(Bse,zho),e(Hh,Who),e(Hh,II),e(II,Qho),e(Hh,Hho),e(he,Uho),e(he,Uh),e(Uh,Ise),e(Ise,Jho),e(Uh,Yho),e(Uh,NI),e(NI,Kho),e(Uh,Zho),e(he,epo),e(he,Jh),e(Jh,Nse),e(Nse,opo),e(Jh,rpo),e(Jh,qI),e(qI,tpo),e(Jh,apo),e(he,npo),e(he,Yh),e(Yh,qse),e(qse,spo),e(Yh,lpo),e(Yh,jI),e(jI,ipo),e(Yh,dpo),e(he,cpo),e(he,Kh),e(Kh,jse),e(jse,fpo),e(Kh,mpo),e(Kh,DI),e(DI,gpo),e(Kh,hpo),e(he,ppo),e(he,Zh),e(Zh,Dse),e(Dse,_po),e(Zh,upo),e(Zh,GI),e(GI,bpo),e(Zh,vpo),e(he,Fpo),e(he,ep),e(ep,Gse),e(Gse,Tpo),e(ep,Mpo),e(ep,OI),e(OI,Epo),e(ep,Cpo),e(he,wpo),e(he,op),e(op,Ose),e(Ose,Apo),e(op,Lpo),e(op,VI),e(VI,ypo),e(op,xpo),e(he,$po),e(he,rp),e(rp,Vse),e(Vse,kpo),e(rp,Spo),e(rp,XI),e(XI,Rpo),e(rp,Ppo),e(he,Bpo),e(he,tp),e(tp,Xse),e(Xse,Ipo),e(tp,Npo),e(tp,zI),e(zI,qpo),e(tp,jpo),e(he,Dpo),e(he,ap),e(ap,zse),e(zse,Gpo),e(ap,Opo),e(ap,WI),e(WI,Vpo),e(ap,Xpo),e(he,zpo),e(he,np),e(np,Wse),e(Wse,Wpo),e(np,Qpo),e(np,QI),e(QI,Hpo),e(np,Upo),e(he,Jpo),e(he,sp),e(sp,Qse),e(Qse,Ypo),e(sp,Kpo),e(sp,HI),e(HI,Zpo),e(sp,e_o),e(he,o_o),e(he,lp),e(lp,Hse),e(Hse,r_o),e(lp,t_o),e(lp,UI),e(UI,a_o),e(lp,n_o),e(he,s_o),e(he,ip),e(ip,Use),e(Use,l_o),e(ip,i_o),e(ip,JI),e(JI,d_o),e(ip,c_o),e(he,f_o),e(he,dp),e(dp,Jse),e(Jse,m_o),e(dp,g_o),e(dp,YI),e(YI,h_o),e(dp,p_o),e(Ue,__o),M(cp,Ue,null),e(Ue,u_o),M(fp,Ue,null),e(Lo,b_o),e(Lo,mp),M(mL,mp,null),e(mp,v_o),e(mp,Yse),e(Yse,F_o),b(f,pje,u),b(f,Li,u),e(Li,gp),e(gp,Kse),M(gL,Kse,null),e(Li,T_o),e(Li,Zse),e(Zse,M_o),b(f,_je,u),b(f,yo,u),M(hL,yo,null),e(yo,E_o),e(yo,yi),e(yi,C_o),e(yi,KI),e(KI,w_o),e(yi,A_o),e(yi,ZI),e(ZI,L_o),e(yi,y_o),e(yo,x_o),e(yo,pL),e(pL,$_o),e(pL,ele),e(ele,k_o),e(pL,S_o),e(yo,R_o),e(yo,tt),M(_L,tt,null),e(tt,P_o),e(tt,ole),e(ole,B_o),e(tt,I_o),e(tt,xi),e(xi,N_o),e(xi,rle),e(rle,q_o),e(xi,j_o),e(xi,eN),e(eN,D_o),e(xi,G_o),e(tt,O_o),M(hp,tt,null),e(yo,V_o),e(yo,Je),M(uL,Je,null),e(Je,X_o),e(Je,tle),e(tle,z_o),e(Je,W_o),e(Je,ya),e(ya,Q_o),e(ya,ale),e(ale,H_o),e(ya,U_o),e(ya,nle),e(nle,J_o),e(ya,Y_o),e(ya,sle),e(sle,K_o),e(ya,Z_o),e(Je,euo),e(Je,x),e(x,pp),e(pp,lle),e(lle,ouo),e(pp,ruo),e(pp,oN),e(oN,tuo),e(pp,auo),e(x,nuo),e(x,_p),e(_p,ile),e(ile,suo),e(_p,luo),e(_p,rN),e(rN,iuo),e(_p,duo),e(x,cuo),e(x,up),e(up,dle),e(dle,fuo),e(up,muo),e(up,tN),e(tN,guo),e(up,huo),e(x,puo),e(x,bp),e(bp,cle),e(cle,_uo),e(bp,uuo),e(bp,aN),e(aN,buo),e(bp,vuo),e(x,Fuo),e(x,vp),e(vp,fle),e(fle,Tuo),e(vp,Muo),e(vp,nN),e(nN,Euo),e(vp,Cuo),e(x,wuo),e(x,Fp),e(Fp,mle),e(mle,Auo),e(Fp,Luo),e(Fp,sN),e(sN,yuo),e(Fp,xuo),e(x,$uo),e(x,Tp),e(Tp,gle),e(gle,kuo),e(Tp,Suo),e(Tp,lN),e(lN,Ruo),e(Tp,Puo),e(x,Buo),e(x,Mp),e(Mp,hle),e(hle,Iuo),e(Mp,Nuo),e(Mp,iN),e(iN,quo),e(Mp,juo),e(x,Duo),e(x,Ep),e(Ep,ple),e(ple,Guo),e(Ep,Ouo),e(Ep,dN),e(dN,Vuo),e(Ep,Xuo),e(x,zuo),e(x,Cp),e(Cp,_le),e(_le,Wuo),e(Cp,Quo),e(Cp,cN),e(cN,Huo),e(Cp,Uuo),e(x,Juo),e(x,wp),e(wp,ule),e(ule,Yuo),e(wp,Kuo),e(wp,fN),e(fN,Zuo),e(wp,e1o),e(x,o1o),e(x,Ap),e(Ap,ble),e(ble,r1o),e(Ap,t1o),e(Ap,mN),e(mN,a1o),e(Ap,n1o),e(x,s1o),e(x,Lp),e(Lp,vle),e(vle,l1o),e(Lp,i1o),e(Lp,gN),e(gN,d1o),e(Lp,c1o),e(x,f1o),e(x,yp),e(yp,Fle),e(Fle,m1o),e(yp,g1o),e(yp,hN),e(hN,h1o),e(yp,p1o),e(x,_1o),e(x,xp),e(xp,Tle),e(Tle,u1o),e(xp,b1o),e(xp,pN),e(pN,v1o),e(xp,F1o),e(x,T1o),e(x,$p),e($p,Mle),e(Mle,M1o),e($p,E1o),e($p,_N),e(_N,C1o),e($p,w1o),e(x,A1o),e(x,kp),e(kp,Ele),e(Ele,L1o),e(kp,y1o),e(kp,uN),e(uN,x1o),e(kp,$1o),e(x,k1o),e(x,Sp),e(Sp,Cle),e(Cle,S1o),e(Sp,R1o),e(Sp,bN),e(bN,P1o),e(Sp,B1o),e(x,I1o),e(x,Rp),e(Rp,wle),e(wle,N1o),e(Rp,q1o),e(Rp,vN),e(vN,j1o),e(Rp,D1o),e(x,G1o),e(x,Pp),e(Pp,Ale),e(Ale,O1o),e(Pp,V1o),e(Pp,FN),e(FN,X1o),e(Pp,z1o),e(x,W1o),e(x,Bp),e(Bp,Lle),e(Lle,Q1o),e(Bp,H1o),e(Bp,TN),e(TN,U1o),e(Bp,J1o),e(x,Y1o),e(x,Ip),e(Ip,yle),e(yle,K1o),e(Ip,Z1o),e(Ip,MN),e(MN,e3o),e(Ip,o3o),e(x,r3o),e(x,Np),e(Np,xle),e(xle,t3o),e(Np,a3o),e(Np,EN),e(EN,n3o),e(Np,s3o),e(x,l3o),e(x,qp),e(qp,$le),e($le,i3o),e(qp,d3o),e(qp,CN),e(CN,c3o),e(qp,f3o),e(x,m3o),e(x,jp),e(jp,kle),e(kle,g3o),e(jp,h3o),e(jp,wN),e(wN,p3o),e(jp,_3o),e(x,u3o),e(x,Dp),e(Dp,Sle),e(Sle,b3o),e(Dp,v3o),e(Dp,AN),e(AN,F3o),e(Dp,T3o),e(x,M3o),e(x,Gp),e(Gp,Rle),e(Rle,E3o),e(Gp,C3o),e(Gp,LN),e(LN,w3o),e(Gp,A3o),e(x,L3o),e(x,Op),e(Op,Ple),e(Ple,y3o),e(Op,x3o),e(Op,yN),e(yN,$3o),e(Op,k3o),e(x,S3o),e(x,Vp),e(Vp,Ble),e(Ble,R3o),e(Vp,P3o),e(Vp,xN),e(xN,B3o),e(Vp,I3o),e(x,N3o),e(x,Xp),e(Xp,Ile),e(Ile,q3o),e(Xp,j3o),e(Xp,$N),e($N,D3o),e(Xp,G3o),e(x,O3o),e(x,zp),e(zp,Nle),e(Nle,V3o),e(zp,X3o),e(zp,kN),e(kN,z3o),e(zp,W3o),e(x,Q3o),e(x,Wp),e(Wp,qle),e(qle,H3o),e(Wp,U3o),e(Wp,SN),e(SN,J3o),e(Wp,Y3o),e(x,K3o),e(x,Bs),e(Bs,jle),e(jle,Z3o),e(Bs,ebo),e(Bs,RN),e(RN,obo),e(Bs,rbo),e(Bs,PN),e(PN,tbo),e(Bs,abo),e(x,nbo),e(x,Qp),e(Qp,Dle),e(Dle,sbo),e(Qp,lbo),e(Qp,BN),e(BN,ibo),e(Qp,dbo),e(x,cbo),e(x,Hp),e(Hp,Gle),e(Gle,fbo),e(Hp,mbo),e(Hp,IN),e(IN,gbo),e(Hp,hbo),e(x,pbo),e(x,Up),e(Up,Ole),e(Ole,_bo),e(Up,ubo),e(Up,NN),e(NN,bbo),e(Up,vbo),e(x,Fbo),e(x,Jp),e(Jp,Vle),e(Vle,Tbo),e(Jp,Mbo),e(Jp,qN),e(qN,Ebo),e(Jp,Cbo),e(x,wbo),e(x,Yp),e(Yp,Xle),e(Xle,Abo),e(Yp,Lbo),e(Yp,jN),e(jN,ybo),e(Yp,xbo),e(x,$bo),e(x,Kp),e(Kp,zle),e(zle,kbo),e(Kp,Sbo),e(Kp,DN),e(DN,Rbo),e(Kp,Pbo),e(x,Bbo),e(x,Zp),e(Zp,Wle),e(Wle,Ibo),e(Zp,Nbo),e(Zp,GN),e(GN,qbo),e(Zp,jbo),e(x,Dbo),e(x,e_),e(e_,Qle),e(Qle,Gbo),e(e_,Obo),e(e_,ON),e(ON,Vbo),e(e_,Xbo),e(x,zbo),e(x,o_),e(o_,Hle),e(Hle,Wbo),e(o_,Qbo),e(o_,VN),e(VN,Hbo),e(o_,Ubo),e(x,Jbo),e(x,r_),e(r_,Ule),e(Ule,Ybo),e(r_,Kbo),e(r_,XN),e(XN,Zbo),e(r_,e2o),e(x,o2o),e(x,t_),e(t_,Jle),e(Jle,r2o),e(t_,t2o),e(t_,zN),e(zN,a2o),e(t_,n2o),e(x,s2o),e(x,a_),e(a_,Yle),e(Yle,l2o),e(a_,i2o),e(a_,WN),e(WN,d2o),e(a_,c2o),e(x,f2o),e(x,n_),e(n_,Kle),e(Kle,m2o),e(n_,g2o),e(n_,QN),e(QN,h2o),e(n_,p2o),e(x,_2o),e(x,s_),e(s_,Zle),e(Zle,u2o),e(s_,b2o),e(s_,HN),e(HN,v2o),e(s_,F2o),e(x,T2o),e(x,l_),e(l_,eie),e(eie,M2o),e(l_,E2o),e(l_,UN),e(UN,C2o),e(l_,w2o),e(x,A2o),e(x,i_),e(i_,oie),e(oie,L2o),e(i_,y2o),e(i_,JN),e(JN,x2o),e(i_,$2o),e(x,k2o),e(x,d_),e(d_,rie),e(rie,S2o),e(d_,R2o),e(d_,YN),e(YN,P2o),e(d_,B2o),e(x,I2o),e(x,c_),e(c_,tie),e(tie,N2o),e(c_,q2o),e(c_,KN),e(KN,j2o),e(c_,D2o),e(x,G2o),e(x,f_),e(f_,aie),e(aie,O2o),e(f_,V2o),e(f_,ZN),e(ZN,X2o),e(f_,z2o),e(x,W2o),e(x,m_),e(m_,nie),e(nie,Q2o),e(m_,H2o),e(m_,eq),e(eq,U2o),e(m_,J2o),e(x,Y2o),e(x,g_),e(g_,sie),e(sie,K2o),e(g_,Z2o),e(g_,oq),e(oq,evo),e(g_,ovo),e(x,rvo),e(x,h_),e(h_,lie),e(lie,tvo),e(h_,avo),e(h_,rq),e(rq,nvo),e(h_,svo),e(x,lvo),e(x,p_),e(p_,iie),e(iie,ivo),e(p_,dvo),e(p_,tq),e(tq,cvo),e(p_,fvo),e(x,mvo),e(x,__),e(__,die),e(die,gvo),e(__,hvo),e(__,aq),e(aq,pvo),e(__,_vo),e(x,uvo),e(x,u_),e(u_,cie),e(cie,bvo),e(u_,vvo),e(u_,nq),e(nq,Fvo),e(u_,Tvo),e(x,Mvo),e(x,b_),e(b_,fie),e(fie,Evo),e(b_,Cvo),e(b_,sq),e(sq,wvo),e(b_,Avo),e(x,Lvo),e(x,v_),e(v_,mie),e(mie,yvo),e(v_,xvo),e(v_,lq),e(lq,$vo),e(v_,kvo),e(x,Svo),e(x,F_),e(F_,gie),e(gie,Rvo),e(F_,Pvo),e(F_,iq),e(iq,Bvo),e(F_,Ivo),e(x,Nvo),e(x,T_),e(T_,hie),e(hie,qvo),e(T_,jvo),e(T_,dq),e(dq,Dvo),e(T_,Gvo),e(x,Ovo),e(x,M_),e(M_,pie),e(pie,Vvo),e(M_,Xvo),e(M_,cq),e(cq,zvo),e(M_,Wvo),e(x,Qvo),e(x,E_),e(E_,_ie),e(_ie,Hvo),e(E_,Uvo),e(E_,fq),e(fq,Jvo),e(E_,Yvo),e(x,Kvo),e(x,C_),e(C_,uie),e(uie,Zvo),e(C_,eFo),e(C_,mq),e(mq,oFo),e(C_,rFo),e(x,tFo),e(x,w_),e(w_,bie),e(bie,aFo),e(w_,nFo),e(w_,gq),e(gq,sFo),e(w_,lFo),e(x,iFo),e(x,A_),e(A_,vie),e(vie,dFo),e(A_,cFo),e(A_,hq),e(hq,fFo),e(A_,mFo),e(x,gFo),e(x,L_),e(L_,Fie),e(Fie,hFo),e(L_,pFo),e(L_,pq),e(pq,_Fo),e(L_,uFo),e(x,bFo),e(x,y_),e(y_,Tie),e(Tie,vFo),e(y_,FFo),e(y_,_q),e(_q,TFo),e(y_,MFo),e(x,EFo),e(x,x_),e(x_,Mie),e(Mie,CFo),e(x_,wFo),e(x_,uq),e(uq,AFo),e(x_,LFo),e(x,yFo),e(x,$_),e($_,Eie),e(Eie,xFo),e($_,$Fo),e($_,bq),e(bq,kFo),e($_,SFo),e(x,RFo),e(x,k_),e(k_,Cie),e(Cie,PFo),e(k_,BFo),e(k_,vq),e(vq,IFo),e(k_,NFo),e(x,qFo),e(x,S_),e(S_,wie),e(wie,jFo),e(S_,DFo),e(S_,Fq),e(Fq,GFo),e(S_,OFo),e(x,VFo),e(x,R_),e(R_,Aie),e(Aie,XFo),e(R_,zFo),e(R_,Tq),e(Tq,WFo),e(R_,QFo),e(x,HFo),e(x,P_),e(P_,Lie),e(Lie,UFo),e(P_,JFo),e(P_,Mq),e(Mq,YFo),e(P_,KFo),e(x,ZFo),e(x,B_),e(B_,yie),e(yie,eTo),e(B_,oTo),e(B_,Eq),e(Eq,rTo),e(B_,tTo),e(x,aTo),e(x,I_),e(I_,xie),e(xie,nTo),e(I_,sTo),e(I_,Cq),e(Cq,lTo),e(I_,iTo),e(x,dTo),e(x,N_),e(N_,$ie),e($ie,cTo),e(N_,fTo),e(N_,wq),e(wq,mTo),e(N_,gTo),e(x,hTo),e(x,q_),e(q_,kie),e(kie,pTo),e(q_,_To),e(q_,Aq),e(Aq,uTo),e(q_,bTo),e(x,vTo),e(x,j_),e(j_,Sie),e(Sie,FTo),e(j_,TTo),e(j_,Lq),e(Lq,MTo),e(j_,ETo),e(x,CTo),e(x,D_),e(D_,Rie),e(Rie,wTo),e(D_,ATo),e(D_,yq),e(yq,LTo),e(D_,yTo),e(x,xTo),e(x,G_),e(G_,Pie),e(Pie,$To),e(G_,kTo),e(G_,xq),e(xq,STo),e(G_,RTo),e(x,PTo),e(x,O_),e(O_,Bie),e(Bie,BTo),e(O_,ITo),e(O_,$q),e($q,NTo),e(O_,qTo),e(x,jTo),e(x,V_),e(V_,Iie),e(Iie,DTo),e(V_,GTo),e(V_,kq),e(kq,OTo),e(V_,VTo),e(x,XTo),e(x,X_),e(X_,Nie),e(Nie,zTo),e(X_,WTo),e(X_,Sq),e(Sq,QTo),e(X_,HTo),e(x,UTo),e(x,z_),e(z_,qie),e(qie,JTo),e(z_,YTo),e(z_,Rq),e(Rq,KTo),e(z_,ZTo),e(x,e7o),e(x,W_),e(W_,jie),e(jie,o7o),e(W_,r7o),e(W_,Pq),e(Pq,t7o),e(W_,a7o),e(x,n7o),e(x,Q_),e(Q_,Die),e(Die,s7o),e(Q_,l7o),e(Q_,Bq),e(Bq,i7o),e(Q_,d7o),e(x,c7o),e(x,H_),e(H_,Gie),e(Gie,f7o),e(H_,m7o),e(H_,Iq),e(Iq,g7o),e(H_,h7o),e(x,p7o),e(x,U_),e(U_,Oie),e(Oie,_7o),e(U_,u7o),e(U_,Nq),e(Nq,b7o),e(U_,v7o),e(x,F7o),e(x,J_),e(J_,Vie),e(Vie,T7o),e(J_,M7o),e(J_,qq),e(qq,E7o),e(J_,C7o),e(x,w7o),e(x,Y_),e(Y_,Xie),e(Xie,A7o),e(Y_,L7o),e(Y_,jq),e(jq,y7o),e(Y_,x7o),e(x,$7o),e(x,K_),e(K_,zie),e(zie,k7o),e(K_,S7o),e(K_,Dq),e(Dq,R7o),e(K_,P7o),e(x,B7o),e(x,Z_),e(Z_,Wie),e(Wie,I7o),e(Z_,N7o),e(Z_,Gq),e(Gq,q7o),e(Z_,j7o),e(x,D7o),e(x,eu),e(eu,Qie),e(Qie,G7o),e(eu,O7o),e(eu,Oq),e(Oq,V7o),e(eu,X7o),e(x,z7o),e(x,ou),e(ou,Hie),e(Hie,W7o),e(ou,Q7o),e(ou,Vq),e(Vq,H7o),e(ou,U7o),e(x,J7o),e(x,ru),e(ru,Uie),e(Uie,Y7o),e(ru,K7o),e(ru,Xq),e(Xq,Z7o),e(ru,eMo),e(x,oMo),e(x,tu),e(tu,Jie),e(Jie,rMo),e(tu,tMo),e(tu,zq),e(zq,aMo),e(tu,nMo),e(x,sMo),e(x,au),e(au,Yie),e(Yie,lMo),e(au,iMo),e(au,Wq),e(Wq,dMo),e(au,cMo),e(x,fMo),e(x,nu),e(nu,Kie),e(Kie,mMo),e(nu,gMo),e(nu,Qq),e(Qq,hMo),e(nu,pMo),e(x,_Mo),e(x,su),e(su,Zie),e(Zie,uMo),e(su,bMo),e(su,Hq),e(Hq,vMo),e(su,FMo),e(x,TMo),e(x,lu),e(lu,ede),e(ede,MMo),e(lu,EMo),e(lu,Uq),e(Uq,CMo),e(lu,wMo),e(x,AMo),e(x,iu),e(iu,ode),e(ode,LMo),e(iu,yMo),e(iu,Jq),e(Jq,xMo),e(iu,$Mo),e(x,kMo),e(x,du),e(du,rde),e(rde,SMo),e(du,RMo),e(du,Yq),e(Yq,PMo),e(du,BMo),e(Je,IMo),e(Je,cu),e(cu,NMo),e(cu,tde),e(tde,qMo),e(cu,jMo),e(cu,ade),e(ade,DMo),e(Je,GMo),M(fu,Je,null),b(f,uje,u),b(f,$i,u),e($i,mu),e(mu,nde),M(bL,nde,null),e($i,OMo),e($i,sde),e(sde,VMo),b(f,bje,u),b(f,xo,u),M(vL,xo,null),e(xo,XMo),e(xo,ki),e(ki,zMo),e(ki,Kq),e(Kq,WMo),e(ki,QMo),e(ki,Zq),e(Zq,HMo),e(ki,UMo),e(xo,JMo),e(xo,FL),e(FL,YMo),e(FL,lde),e(lde,KMo),e(FL,ZMo),e(xo,e4o),e(xo,at),M(TL,at,null),e(at,o4o),e(at,ide),e(ide,r4o),e(at,t4o),e(at,Si),e(Si,a4o),e(Si,dde),e(dde,n4o),e(Si,s4o),e(Si,ej),e(ej,l4o),e(Si,i4o),e(at,d4o),M(gu,at,null),e(xo,c4o),e(xo,Ye),M(ML,Ye,null),e(Ye,f4o),e(Ye,cde),e(cde,m4o),e(Ye,g4o),e(Ye,xa),e(xa,h4o),e(xa,fde),e(fde,p4o),e(xa,_4o),e(xa,mde),e(mde,u4o),e(xa,b4o),e(xa,gde),e(gde,v4o),e(xa,F4o),e(Ye,T4o),e(Ye,G),e(G,hu),e(hu,hde),e(hde,M4o),e(hu,E4o),e(hu,oj),e(oj,C4o),e(hu,w4o),e(G,A4o),e(G,pu),e(pu,pde),e(pde,L4o),e(pu,y4o),e(pu,rj),e(rj,x4o),e(pu,$4o),e(G,k4o),e(G,_u),e(_u,_de),e(_de,S4o),e(_u,R4o),e(_u,tj),e(tj,P4o),e(_u,B4o),e(G,I4o),e(G,uu),e(uu,ude),e(ude,N4o),e(uu,q4o),e(uu,aj),e(aj,j4o),e(uu,D4o),e(G,G4o),e(G,bu),e(bu,bde),e(bde,O4o),e(bu,V4o),e(bu,nj),e(nj,X4o),e(bu,z4o),e(G,W4o),e(G,vu),e(vu,vde),e(vde,Q4o),e(vu,H4o),e(vu,sj),e(sj,U4o),e(vu,J4o),e(G,Y4o),e(G,Fu),e(Fu,Fde),e(Fde,K4o),e(Fu,Z4o),e(Fu,lj),e(lj,eEo),e(Fu,oEo),e(G,rEo),e(G,Tu),e(Tu,Tde),e(Tde,tEo),e(Tu,aEo),e(Tu,ij),e(ij,nEo),e(Tu,sEo),e(G,lEo),e(G,Mu),e(Mu,Mde),e(Mde,iEo),e(Mu,dEo),e(Mu,dj),e(dj,cEo),e(Mu,fEo),e(G,mEo),e(G,Eu),e(Eu,Ede),e(Ede,gEo),e(Eu,hEo),e(Eu,cj),e(cj,pEo),e(Eu,_Eo),e(G,uEo),e(G,Cu),e(Cu,Cde),e(Cde,bEo),e(Cu,vEo),e(Cu,fj),e(fj,FEo),e(Cu,TEo),e(G,MEo),e(G,wu),e(wu,wde),e(wde,EEo),e(wu,CEo),e(wu,mj),e(mj,wEo),e(wu,AEo),e(G,LEo),e(G,Au),e(Au,Ade),e(Ade,yEo),e(Au,xEo),e(Au,gj),e(gj,$Eo),e(Au,kEo),e(G,SEo),e(G,Lu),e(Lu,Lde),e(Lde,REo),e(Lu,PEo),e(Lu,hj),e(hj,BEo),e(Lu,IEo),e(G,NEo),e(G,yu),e(yu,yde),e(yde,qEo),e(yu,jEo),e(yu,pj),e(pj,DEo),e(yu,GEo),e(G,OEo),e(G,xu),e(xu,xde),e(xde,VEo),e(xu,XEo),e(xu,_j),e(_j,zEo),e(xu,WEo),e(G,QEo),e(G,$u),e($u,$de),e($de,HEo),e($u,UEo),e($u,uj),e(uj,JEo),e($u,YEo),e(G,KEo),e(G,ku),e(ku,kde),e(kde,ZEo),e(ku,eCo),e(ku,bj),e(bj,oCo),e(ku,rCo),e(G,tCo),e(G,Su),e(Su,Sde),e(Sde,aCo),e(Su,nCo),e(Su,vj),e(vj,sCo),e(Su,lCo),e(G,iCo),e(G,Ru),e(Ru,Rde),e(Rde,dCo),e(Ru,cCo),e(Ru,Fj),e(Fj,fCo),e(Ru,mCo),e(G,gCo),e(G,Pu),e(Pu,Pde),e(Pde,hCo),e(Pu,pCo),e(Pu,Tj),e(Tj,_Co),e(Pu,uCo),e(G,bCo),e(G,Bu),e(Bu,Bde),e(Bde,vCo),e(Bu,FCo),e(Bu,Mj),e(Mj,TCo),e(Bu,MCo),e(G,ECo),e(G,Iu),e(Iu,Ide),e(Ide,CCo),e(Iu,wCo),e(Iu,Ej),e(Ej,ACo),e(Iu,LCo),e(G,yCo),e(G,Nu),e(Nu,Nde),e(Nde,xCo),e(Nu,$Co),e(Nu,Cj),e(Cj,kCo),e(Nu,SCo),e(G,RCo),e(G,qu),e(qu,qde),e(qde,PCo),e(qu,BCo),e(qu,wj),e(wj,ICo),e(qu,NCo),e(G,qCo),e(G,ju),e(ju,jde),e(jde,jCo),e(ju,DCo),e(ju,Aj),e(Aj,GCo),e(ju,OCo),e(G,VCo),e(G,Du),e(Du,Dde),e(Dde,XCo),e(Du,zCo),e(Du,Lj),e(Lj,WCo),e(Du,QCo),e(G,HCo),e(G,Gu),e(Gu,Gde),e(Gde,UCo),e(Gu,JCo),e(Gu,yj),e(yj,YCo),e(Gu,KCo),e(G,ZCo),e(G,Ou),e(Ou,Ode),e(Ode,e5o),e(Ou,o5o),e(Ou,xj),e(xj,r5o),e(Ou,t5o),e(G,a5o),e(G,Vu),e(Vu,Vde),e(Vde,n5o),e(Vu,s5o),e(Vu,$j),e($j,l5o),e(Vu,i5o),e(G,d5o),e(G,Xu),e(Xu,Xde),e(Xde,c5o),e(Xu,f5o),e(Xu,kj),e(kj,m5o),e(Xu,g5o),e(G,h5o),e(G,zu),e(zu,zde),e(zde,p5o),e(zu,_5o),e(zu,Sj),e(Sj,u5o),e(zu,b5o),e(G,v5o),e(G,Wu),e(Wu,Wde),e(Wde,F5o),e(Wu,T5o),e(Wu,Rj),e(Rj,M5o),e(Wu,E5o),e(G,C5o),e(G,Qu),e(Qu,Qde),e(Qde,w5o),e(Qu,A5o),e(Qu,Pj),e(Pj,L5o),e(Qu,y5o),e(G,x5o),e(G,Hu),e(Hu,Hde),e(Hde,$5o),e(Hu,k5o),e(Hu,Bj),e(Bj,S5o),e(Hu,R5o),e(G,P5o),e(G,Uu),e(Uu,Ude),e(Ude,B5o),e(Uu,I5o),e(Uu,Ij),e(Ij,N5o),e(Uu,q5o),e(G,j5o),e(G,Ju),e(Ju,Jde),e(Jde,D5o),e(Ju,G5o),e(Ju,Nj),e(Nj,O5o),e(Ju,V5o),e(G,X5o),e(G,Yu),e(Yu,Yde),e(Yde,z5o),e(Yu,W5o),e(Yu,qj),e(qj,Q5o),e(Yu,H5o),e(G,U5o),e(G,Ku),e(Ku,Kde),e(Kde,J5o),e(Ku,Y5o),e(Ku,jj),e(jj,K5o),e(Ku,Z5o),e(G,e0o),e(G,Zu),e(Zu,Zde),e(Zde,o0o),e(Zu,r0o),e(Zu,Dj),e(Dj,t0o),e(Zu,a0o),e(G,n0o),e(G,e1),e(e1,ece),e(ece,s0o),e(e1,l0o),e(e1,Gj),e(Gj,i0o),e(e1,d0o),e(G,c0o),e(G,o1),e(o1,oce),e(oce,f0o),e(o1,m0o),e(o1,Oj),e(Oj,g0o),e(o1,h0o),e(Ye,p0o),e(Ye,r1),e(r1,_0o),e(r1,rce),e(rce,u0o),e(r1,b0o),e(r1,tce),e(tce,v0o),e(Ye,F0o),M(t1,Ye,null),b(f,vje,u),b(f,Ri,u),e(Ri,a1),e(a1,ace),M(EL,ace,null),e(Ri,T0o),e(Ri,nce),e(nce,M0o),b(f,Fje,u),b(f,$o,u),M(CL,$o,null),e($o,E0o),e($o,Pi),e(Pi,C0o),e(Pi,Vj),e(Vj,w0o),e(Pi,A0o),e(Pi,Xj),e(Xj,L0o),e(Pi,y0o),e($o,x0o),e($o,wL),e(wL,$0o),e(wL,sce),e(sce,k0o),e(wL,S0o),e($o,R0o),e($o,nt),M(AL,nt,null),e(nt,P0o),e(nt,lce),e(lce,B0o),e(nt,I0o),e(nt,Bi),e(Bi,N0o),e(Bi,ice),e(ice,q0o),e(Bi,j0o),e(Bi,zj),e(zj,D0o),e(Bi,G0o),e(nt,O0o),M(n1,nt,null),e($o,V0o),e($o,Ke),M(LL,Ke,null),e(Ke,X0o),e(Ke,dce),e(dce,z0o),e(Ke,W0o),e(Ke,$a),e($a,Q0o),e($a,cce),e(cce,H0o),e($a,U0o),e($a,fce),e(fce,J0o),e($a,Y0o),e($a,mce),e(mce,K0o),e($a,Z0o),e(Ke,ewo),e(Ke,z),e(z,s1),e(s1,gce),e(gce,owo),e(s1,rwo),e(s1,Wj),e(Wj,two),e(s1,awo),e(z,nwo),e(z,l1),e(l1,hce),e(hce,swo),e(l1,lwo),e(l1,Qj),e(Qj,iwo),e(l1,dwo),e(z,cwo),e(z,i1),e(i1,pce),e(pce,fwo),e(i1,mwo),e(i1,Hj),e(Hj,gwo),e(i1,hwo),e(z,pwo),e(z,d1),e(d1,_ce),e(_ce,_wo),e(d1,uwo),e(d1,Uj),e(Uj,bwo),e(d1,vwo),e(z,Fwo),e(z,c1),e(c1,uce),e(uce,Two),e(c1,Mwo),e(c1,Jj),e(Jj,Ewo),e(c1,Cwo),e(z,wwo),e(z,f1),e(f1,bce),e(bce,Awo),e(f1,Lwo),e(f1,Yj),e(Yj,ywo),e(f1,xwo),e(z,$wo),e(z,m1),e(m1,vce),e(vce,kwo),e(m1,Swo),e(m1,Kj),e(Kj,Rwo),e(m1,Pwo),e(z,Bwo),e(z,g1),e(g1,Fce),e(Fce,Iwo),e(g1,Nwo),e(g1,Zj),e(Zj,qwo),e(g1,jwo),e(z,Dwo),e(z,h1),e(h1,Tce),e(Tce,Gwo),e(h1,Owo),e(h1,eD),e(eD,Vwo),e(h1,Xwo),e(z,zwo),e(z,p1),e(p1,Mce),e(Mce,Wwo),e(p1,Qwo),e(p1,oD),e(oD,Hwo),e(p1,Uwo),e(z,Jwo),e(z,_1),e(_1,Ece),e(Ece,Ywo),e(_1,Kwo),e(_1,rD),e(rD,Zwo),e(_1,eAo),e(z,oAo),e(z,u1),e(u1,Cce),e(Cce,rAo),e(u1,tAo),e(u1,tD),e(tD,aAo),e(u1,nAo),e(z,sAo),e(z,b1),e(b1,wce),e(wce,lAo),e(b1,iAo),e(b1,aD),e(aD,dAo),e(b1,cAo),e(z,fAo),e(z,v1),e(v1,Ace),e(Ace,mAo),e(v1,gAo),e(v1,nD),e(nD,hAo),e(v1,pAo),e(z,_Ao),e(z,F1),e(F1,Lce),e(Lce,uAo),e(F1,bAo),e(F1,sD),e(sD,vAo),e(F1,FAo),e(z,TAo),e(z,T1),e(T1,yce),e(yce,MAo),e(T1,EAo),e(T1,lD),e(lD,CAo),e(T1,wAo),e(z,AAo),e(z,M1),e(M1,xce),e(xce,LAo),e(M1,yAo),e(M1,iD),e(iD,xAo),e(M1,$Ao),e(z,kAo),e(z,E1),e(E1,$ce),e($ce,SAo),e(E1,RAo),e(E1,dD),e(dD,PAo),e(E1,BAo),e(z,IAo),e(z,C1),e(C1,kce),e(kce,NAo),e(C1,qAo),e(C1,cD),e(cD,jAo),e(C1,DAo),e(z,GAo),e(z,w1),e(w1,Sce),e(Sce,OAo),e(w1,VAo),e(w1,fD),e(fD,XAo),e(w1,zAo),e(z,WAo),e(z,A1),e(A1,Rce),e(Rce,QAo),e(A1,HAo),e(A1,mD),e(mD,UAo),e(A1,JAo),e(z,YAo),e(z,L1),e(L1,Pce),e(Pce,KAo),e(L1,ZAo),e(L1,gD),e(gD,e6o),e(L1,o6o),e(z,r6o),e(z,y1),e(y1,Bce),e(Bce,t6o),e(y1,a6o),e(y1,hD),e(hD,n6o),e(y1,s6o),e(z,l6o),e(z,x1),e(x1,Ice),e(Ice,i6o),e(x1,d6o),e(x1,pD),e(pD,c6o),e(x1,f6o),e(z,m6o),e(z,$1),e($1,Nce),e(Nce,g6o),e($1,h6o),e($1,_D),e(_D,p6o),e($1,_6o),e(z,u6o),e(z,k1),e(k1,qce),e(qce,b6o),e(k1,v6o),e(k1,uD),e(uD,F6o),e(k1,T6o),e(z,M6o),e(z,S1),e(S1,jce),e(jce,E6o),e(S1,C6o),e(S1,bD),e(bD,w6o),e(S1,A6o),e(z,L6o),e(z,R1),e(R1,Dce),e(Dce,y6o),e(R1,x6o),e(R1,vD),e(vD,$6o),e(R1,k6o),e(z,S6o),e(z,P1),e(P1,Gce),e(Gce,R6o),e(P1,P6o),e(P1,FD),e(FD,B6o),e(P1,I6o),e(z,N6o),e(z,B1),e(B1,Oce),e(Oce,q6o),e(B1,j6o),e(B1,TD),e(TD,D6o),e(B1,G6o),e(z,O6o),e(z,I1),e(I1,Vce),e(Vce,V6o),e(I1,X6o),e(I1,MD),e(MD,z6o),e(I1,W6o),e(z,Q6o),e(z,N1),e(N1,Xce),e(Xce,H6o),e(N1,U6o),e(N1,ED),e(ED,J6o),e(N1,Y6o),e(z,K6o),e(z,q1),e(q1,zce),e(zce,Z6o),e(q1,eLo),e(q1,CD),e(CD,oLo),e(q1,rLo),e(z,tLo),e(z,j1),e(j1,Wce),e(Wce,aLo),e(j1,nLo),e(j1,wD),e(wD,sLo),e(j1,lLo),e(z,iLo),e(z,D1),e(D1,Qce),e(Qce,dLo),e(D1,cLo),e(D1,AD),e(AD,fLo),e(D1,mLo),e(z,gLo),e(z,G1),e(G1,Hce),e(Hce,hLo),e(G1,pLo),e(G1,LD),e(LD,_Lo),e(G1,uLo),e(z,bLo),e(z,O1),e(O1,Uce),e(Uce,vLo),e(O1,FLo),e(O1,yD),e(yD,TLo),e(O1,MLo),e(Ke,ELo),e(Ke,V1),e(V1,CLo),e(V1,Jce),e(Jce,wLo),e(V1,ALo),e(V1,Yce),e(Yce,LLo),e(Ke,yLo),M(X1,Ke,null),b(f,Tje,u),b(f,Ii,u),e(Ii,z1),e(z1,Kce),M(yL,Kce,null),e(Ii,xLo),e(Ii,Zce),e(Zce,$Lo),b(f,Mje,u),b(f,ko,u),M(xL,ko,null),e(ko,kLo),e(ko,Ni),e(Ni,SLo),e(Ni,xD),e(xD,RLo),e(Ni,PLo),e(Ni,$D),e($D,BLo),e(Ni,ILo),e(ko,NLo),e(ko,$L),e($L,qLo),e($L,efe),e(efe,jLo),e($L,DLo),e(ko,GLo),e(ko,st),M(kL,st,null),e(st,OLo),e(st,ofe),e(ofe,VLo),e(st,XLo),e(st,qi),e(qi,zLo),e(qi,rfe),e(rfe,WLo),e(qi,QLo),e(qi,kD),e(kD,HLo),e(qi,ULo),e(st,JLo),M(W1,st,null),e(ko,YLo),e(ko,Ze),M(SL,Ze,null),e(Ze,KLo),e(Ze,tfe),e(tfe,ZLo),e(Ze,eyo),e(Ze,ka),e(ka,oyo),e(ka,afe),e(afe,ryo),e(ka,tyo),e(ka,nfe),e(nfe,ayo),e(ka,nyo),e(ka,sfe),e(sfe,syo),e(ka,lyo),e(Ze,iyo),e(Ze,W),e(W,Q1),e(Q1,lfe),e(lfe,dyo),e(Q1,cyo),e(Q1,SD),e(SD,fyo),e(Q1,myo),e(W,gyo),e(W,H1),e(H1,ife),e(ife,hyo),e(H1,pyo),e(H1,RD),e(RD,_yo),e(H1,uyo),e(W,byo),e(W,U1),e(U1,dfe),e(dfe,vyo),e(U1,Fyo),e(U1,PD),e(PD,Tyo),e(U1,Myo),e(W,Eyo),e(W,J1),e(J1,cfe),e(cfe,Cyo),e(J1,wyo),e(J1,BD),e(BD,Ayo),e(J1,Lyo),e(W,yyo),e(W,Y1),e(Y1,ffe),e(ffe,xyo),e(Y1,$yo),e(Y1,ID),e(ID,kyo),e(Y1,Syo),e(W,Ryo),e(W,K1),e(K1,mfe),e(mfe,Pyo),e(K1,Byo),e(K1,ND),e(ND,Iyo),e(K1,Nyo),e(W,qyo),e(W,Z1),e(Z1,gfe),e(gfe,jyo),e(Z1,Dyo),e(Z1,qD),e(qD,Gyo),e(Z1,Oyo),e(W,Vyo),e(W,e3),e(e3,hfe),e(hfe,Xyo),e(e3,zyo),e(e3,jD),e(jD,Wyo),e(e3,Qyo),e(W,Hyo),e(W,o3),e(o3,pfe),e(pfe,Uyo),e(o3,Jyo),e(o3,DD),e(DD,Yyo),e(o3,Kyo),e(W,Zyo),e(W,r3),e(r3,_fe),e(_fe,e8o),e(r3,o8o),e(r3,GD),e(GD,r8o),e(r3,t8o),e(W,a8o),e(W,t3),e(t3,ufe),e(ufe,n8o),e(t3,s8o),e(t3,OD),e(OD,l8o),e(t3,i8o),e(W,d8o),e(W,a3),e(a3,bfe),e(bfe,c8o),e(a3,f8o),e(a3,VD),e(VD,m8o),e(a3,g8o),e(W,h8o),e(W,n3),e(n3,vfe),e(vfe,p8o),e(n3,_8o),e(n3,XD),e(XD,u8o),e(n3,b8o),e(W,v8o),e(W,s3),e(s3,Ffe),e(Ffe,F8o),e(s3,T8o),e(s3,zD),e(zD,M8o),e(s3,E8o),e(W,C8o),e(W,l3),e(l3,Tfe),e(Tfe,w8o),e(l3,A8o),e(l3,WD),e(WD,L8o),e(l3,y8o),e(W,x8o),e(W,i3),e(i3,Mfe),e(Mfe,$8o),e(i3,k8o),e(i3,QD),e(QD,S8o),e(i3,R8o),e(W,P8o),e(W,d3),e(d3,Efe),e(Efe,B8o),e(d3,I8o),e(d3,HD),e(HD,N8o),e(d3,q8o),e(W,j8o),e(W,c3),e(c3,Cfe),e(Cfe,D8o),e(c3,G8o),e(c3,UD),e(UD,O8o),e(c3,V8o),e(W,X8o),e(W,f3),e(f3,wfe),e(wfe,z8o),e(f3,W8o),e(f3,JD),e(JD,Q8o),e(f3,H8o),e(W,U8o),e(W,m3),e(m3,Afe),e(Afe,J8o),e(m3,Y8o),e(m3,YD),e(YD,K8o),e(m3,Z8o),e(W,e9o),e(W,g3),e(g3,Lfe),e(Lfe,o9o),e(g3,r9o),e(g3,KD),e(KD,t9o),e(g3,a9o),e(W,n9o),e(W,h3),e(h3,yfe),e(yfe,s9o),e(h3,l9o),e(h3,ZD),e(ZD,i9o),e(h3,d9o),e(W,c9o),e(W,p3),e(p3,xfe),e(xfe,f9o),e(p3,m9o),e(p3,eG),e(eG,g9o),e(p3,h9o),e(W,p9o),e(W,_3),e(_3,$fe),e($fe,_9o),e(_3,u9o),e(_3,oG),e(oG,b9o),e(_3,v9o),e(W,F9o),e(W,u3),e(u3,kfe),e(kfe,T9o),e(u3,M9o),e(u3,rG),e(rG,E9o),e(u3,C9o),e(W,w9o),e(W,b3),e(b3,Sfe),e(Sfe,A9o),e(b3,L9o),e(b3,tG),e(tG,y9o),e(b3,x9o),e(W,$9o),e(W,v3),e(v3,Rfe),e(Rfe,k9o),e(v3,S9o),e(v3,aG),e(aG,R9o),e(v3,P9o),e(W,B9o),e(W,F3),e(F3,Pfe),e(Pfe,I9o),e(F3,N9o),e(F3,nG),e(nG,q9o),e(F3,j9o),e(W,D9o),e(W,T3),e(T3,Bfe),e(Bfe,G9o),e(T3,O9o),e(T3,sG),e(sG,V9o),e(T3,X9o),e(W,z9o),e(W,M3),e(M3,Ife),e(Ife,W9o),e(M3,Q9o),e(M3,lG),e(lG,H9o),e(M3,U9o),e(W,J9o),e(W,E3),e(E3,Nfe),e(Nfe,Y9o),e(E3,K9o),e(E3,iG),e(iG,Z9o),e(E3,exo),e(W,oxo),e(W,C3),e(C3,qfe),e(qfe,rxo),e(C3,txo),e(C3,jfe),e(jfe,axo),e(C3,nxo),e(W,sxo),e(W,w3),e(w3,Dfe),e(Dfe,lxo),e(w3,ixo),e(w3,dG),e(dG,dxo),e(w3,cxo),e(W,fxo),e(W,A3),e(A3,Gfe),e(Gfe,mxo),e(A3,gxo),e(A3,cG),e(cG,hxo),e(A3,pxo),e(W,_xo),e(W,L3),e(L3,Ofe),e(Ofe,uxo),e(L3,bxo),e(L3,fG),e(fG,vxo),e(L3,Fxo),e(W,Txo),e(W,y3),e(y3,Vfe),e(Vfe,Mxo),e(y3,Exo),e(y3,mG),e(mG,Cxo),e(y3,wxo),e(Ze,Axo),e(Ze,x3),e(x3,Lxo),e(x3,Xfe),e(Xfe,yxo),e(x3,xxo),e(x3,zfe),e(zfe,$xo),e(Ze,kxo),M($3,Ze,null),b(f,Eje,u),b(f,ji,u),e(ji,k3),e(k3,Wfe),M(RL,Wfe,null),e(ji,Sxo),e(ji,Qfe),e(Qfe,Rxo),b(f,Cje,u),b(f,So,u),M(PL,So,null),e(So,Pxo),e(So,Di),e(Di,Bxo),e(Di,gG),e(gG,Ixo),e(Di,Nxo),e(Di,hG),e(hG,qxo),e(Di,jxo),e(So,Dxo),e(So,BL),e(BL,Gxo),e(BL,Hfe),e(Hfe,Oxo),e(BL,Vxo),e(So,Xxo),e(So,lt),M(IL,lt,null),e(lt,zxo),e(lt,Ufe),e(Ufe,Wxo),e(lt,Qxo),e(lt,Gi),e(Gi,Hxo),e(Gi,Jfe),e(Jfe,Uxo),e(Gi,Jxo),e(Gi,pG),e(pG,Yxo),e(Gi,Kxo),e(lt,Zxo),M(S3,lt,null),e(So,e$o),e(So,eo),M(NL,eo,null),e(eo,o$o),e(eo,Yfe),e(Yfe,r$o),e(eo,t$o),e(eo,Sa),e(Sa,a$o),e(Sa,Kfe),e(Kfe,n$o),e(Sa,s$o),e(Sa,Zfe),e(Zfe,l$o),e(Sa,i$o),e(Sa,eme),e(eme,d$o),e(Sa,c$o),e(eo,f$o),e(eo,ue),e(ue,R3),e(R3,ome),e(ome,m$o),e(R3,g$o),e(R3,_G),e(_G,h$o),e(R3,p$o),e(ue,_$o),e(ue,P3),e(P3,rme),e(rme,u$o),e(P3,b$o),e(P3,uG),e(uG,v$o),e(P3,F$o),e(ue,T$o),e(ue,B3),e(B3,tme),e(tme,M$o),e(B3,E$o),e(B3,bG),e(bG,C$o),e(B3,w$o),e(ue,A$o),e(ue,I3),e(I3,ame),e(ame,L$o),e(I3,y$o),e(I3,vG),e(vG,x$o),e(I3,$$o),e(ue,k$o),e(ue,N3),e(N3,nme),e(nme,S$o),e(N3,R$o),e(N3,FG),e(FG,P$o),e(N3,B$o),e(ue,I$o),e(ue,q3),e(q3,sme),e(sme,N$o),e(q3,q$o),e(q3,TG),e(TG,j$o),e(q3,D$o),e(ue,G$o),e(ue,j3),e(j3,lme),e(lme,O$o),e(j3,V$o),e(j3,MG),e(MG,X$o),e(j3,z$o),e(ue,W$o),e(ue,D3),e(D3,ime),e(ime,Q$o),e(D3,H$o),e(D3,EG),e(EG,U$o),e(D3,J$o),e(ue,Y$o),e(ue,G3),e(G3,dme),e(dme,K$o),e(G3,Z$o),e(G3,CG),e(CG,eko),e(G3,oko),e(ue,rko),e(ue,O3),e(O3,cme),e(cme,tko),e(O3,ako),e(O3,wG),e(wG,nko),e(O3,sko),e(ue,lko),e(ue,V3),e(V3,fme),e(fme,iko),e(V3,dko),e(V3,AG),e(AG,cko),e(V3,fko),e(ue,mko),e(ue,X3),e(X3,mme),e(mme,gko),e(X3,hko),e(X3,LG),e(LG,pko),e(X3,_ko),e(ue,uko),e(ue,z3),e(z3,gme),e(gme,bko),e(z3,vko),e(z3,yG),e(yG,Fko),e(z3,Tko),e(ue,Mko),e(ue,W3),e(W3,hme),e(hme,Eko),e(W3,Cko),e(W3,xG),e(xG,wko),e(W3,Ako),e(ue,Lko),e(ue,Q3),e(Q3,pme),e(pme,yko),e(Q3,xko),e(Q3,$G),e($G,$ko),e(Q3,kko),e(ue,Sko),e(ue,H3),e(H3,_me),e(_me,Rko),e(H3,Pko),e(H3,kG),e(kG,Bko),e(H3,Iko),e(eo,Nko),e(eo,U3),e(U3,qko),e(U3,ume),e(ume,jko),e(U3,Dko),e(U3,bme),e(bme,Gko),e(eo,Oko),M(J3,eo,null),b(f,wje,u),b(f,Oi,u),e(Oi,Y3),e(Y3,vme),M(qL,vme,null),e(Oi,Vko),e(Oi,Fme),e(Fme,Xko),b(f,Aje,u),b(f,Ro,u),M(jL,Ro,null),e(Ro,zko),e(Ro,Vi),e(Vi,Wko),e(Vi,SG),e(SG,Qko),e(Vi,Hko),e(Vi,RG),e(RG,Uko),e(Vi,Jko),e(Ro,Yko),e(Ro,DL),e(DL,Kko),e(DL,Tme),e(Tme,Zko),e(DL,eSo),e(Ro,oSo),e(Ro,it),M(GL,it,null),e(it,rSo),e(it,Mme),e(Mme,tSo),e(it,aSo),e(it,Xi),e(Xi,nSo),e(Xi,Eme),e(Eme,sSo),e(Xi,lSo),e(Xi,PG),e(PG,iSo),e(Xi,dSo),e(it,cSo),M(K3,it,null),e(Ro,fSo),e(Ro,oo),M(OL,oo,null),e(oo,mSo),e(oo,Cme),e(Cme,gSo),e(oo,hSo),e(oo,Ra),e(Ra,pSo),e(Ra,wme),e(wme,_So),e(Ra,uSo),e(Ra,Ame),e(Ame,bSo),e(Ra,vSo),e(Ra,Lme),e(Lme,FSo),e(Ra,TSo),e(oo,MSo),e(oo,N),e(N,Z3),e(Z3,yme),e(yme,ESo),e(Z3,CSo),e(Z3,BG),e(BG,wSo),e(Z3,ASo),e(N,LSo),e(N,eb),e(eb,xme),e(xme,ySo),e(eb,xSo),e(eb,IG),e(IG,$So),e(eb,kSo),e(N,SSo),e(N,ob),e(ob,$me),e($me,RSo),e(ob,PSo),e(ob,NG),e(NG,BSo),e(ob,ISo),e(N,NSo),e(N,rb),e(rb,kme),e(kme,qSo),e(rb,jSo),e(rb,qG),e(qG,DSo),e(rb,GSo),e(N,OSo),e(N,tb),e(tb,Sme),e(Sme,VSo),e(tb,XSo),e(tb,jG),e(jG,zSo),e(tb,WSo),e(N,QSo),e(N,ab),e(ab,Rme),e(Rme,HSo),e(ab,USo),e(ab,DG),e(DG,JSo),e(ab,YSo),e(N,KSo),e(N,nb),e(nb,Pme),e(Pme,ZSo),e(nb,eRo),e(nb,GG),e(GG,oRo),e(nb,rRo),e(N,tRo),e(N,sb),e(sb,Bme),e(Bme,aRo),e(sb,nRo),e(sb,OG),e(OG,sRo),e(sb,lRo),e(N,iRo),e(N,lb),e(lb,Ime),e(Ime,dRo),e(lb,cRo),e(lb,VG),e(VG,fRo),e(lb,mRo),e(N,gRo),e(N,ib),e(ib,Nme),e(Nme,hRo),e(ib,pRo),e(ib,XG),e(XG,_Ro),e(ib,uRo),e(N,bRo),e(N,db),e(db,qme),e(qme,vRo),e(db,FRo),e(db,zG),e(zG,TRo),e(db,MRo),e(N,ERo),e(N,cb),e(cb,jme),e(jme,CRo),e(cb,wRo),e(cb,WG),e(WG,ARo),e(cb,LRo),e(N,yRo),e(N,fb),e(fb,Dme),e(Dme,xRo),e(fb,$Ro),e(fb,QG),e(QG,kRo),e(fb,SRo),e(N,RRo),e(N,mb),e(mb,Gme),e(Gme,PRo),e(mb,BRo),e(mb,HG),e(HG,IRo),e(mb,NRo),e(N,qRo),e(N,gb),e(gb,Ome),e(Ome,jRo),e(gb,DRo),e(gb,UG),e(UG,GRo),e(gb,ORo),e(N,VRo),e(N,hb),e(hb,Vme),e(Vme,XRo),e(hb,zRo),e(hb,JG),e(JG,WRo),e(hb,QRo),e(N,HRo),e(N,pb),e(pb,Xme),e(Xme,URo),e(pb,JRo),e(pb,YG),e(YG,YRo),e(pb,KRo),e(N,ZRo),e(N,_b),e(_b,zme),e(zme,ePo),e(_b,oPo),e(_b,KG),e(KG,rPo),e(_b,tPo),e(N,aPo),e(N,ub),e(ub,Wme),e(Wme,nPo),e(ub,sPo),e(ub,ZG),e(ZG,lPo),e(ub,iPo),e(N,dPo),e(N,bb),e(bb,Qme),e(Qme,cPo),e(bb,fPo),e(bb,eO),e(eO,mPo),e(bb,gPo),e(N,hPo),e(N,vb),e(vb,Hme),e(Hme,pPo),e(vb,_Po),e(vb,oO),e(oO,uPo),e(vb,bPo),e(N,vPo),e(N,Fb),e(Fb,Ume),e(Ume,FPo),e(Fb,TPo),e(Fb,rO),e(rO,MPo),e(Fb,EPo),e(N,CPo),e(N,Tb),e(Tb,Jme),e(Jme,wPo),e(Tb,APo),e(Tb,tO),e(tO,LPo),e(Tb,yPo),e(N,xPo),e(N,Mb),e(Mb,Yme),e(Yme,$Po),e(Mb,kPo),e(Mb,aO),e(aO,SPo),e(Mb,RPo),e(N,PPo),e(N,Eb),e(Eb,Kme),e(Kme,BPo),e(Eb,IPo),e(Eb,nO),e(nO,NPo),e(Eb,qPo),e(N,jPo),e(N,Cb),e(Cb,Zme),e(Zme,DPo),e(Cb,GPo),e(Cb,sO),e(sO,OPo),e(Cb,VPo),e(N,XPo),e(N,wb),e(wb,ege),e(ege,zPo),e(wb,WPo),e(wb,lO),e(lO,QPo),e(wb,HPo),e(N,UPo),e(N,Ab),e(Ab,oge),e(oge,JPo),e(Ab,YPo),e(Ab,iO),e(iO,KPo),e(Ab,ZPo),e(N,eBo),e(N,Lb),e(Lb,rge),e(rge,oBo),e(Lb,rBo),e(Lb,dO),e(dO,tBo),e(Lb,aBo),e(N,nBo),e(N,yb),e(yb,tge),e(tge,sBo),e(yb,lBo),e(yb,cO),e(cO,iBo),e(yb,dBo),e(N,cBo),e(N,xb),e(xb,age),e(age,fBo),e(xb,mBo),e(xb,fO),e(fO,gBo),e(xb,hBo),e(N,pBo),e(N,$b),e($b,nge),e(nge,_Bo),e($b,uBo),e($b,mO),e(mO,bBo),e($b,vBo),e(N,FBo),e(N,kb),e(kb,sge),e(sge,TBo),e(kb,MBo),e(kb,gO),e(gO,EBo),e(kb,CBo),e(N,wBo),e(N,Sb),e(Sb,lge),e(lge,ABo),e(Sb,LBo),e(Sb,hO),e(hO,yBo),e(Sb,xBo),e(N,$Bo),e(N,Rb),e(Rb,ige),e(ige,kBo),e(Rb,SBo),e(Rb,pO),e(pO,RBo),e(Rb,PBo),e(N,BBo),e(N,Pb),e(Pb,dge),e(dge,IBo),e(Pb,NBo),e(Pb,_O),e(_O,qBo),e(Pb,jBo),e(N,DBo),e(N,Bb),e(Bb,cge),e(cge,GBo),e(Bb,OBo),e(Bb,uO),e(uO,VBo),e(Bb,XBo),e(N,zBo),e(N,Ib),e(Ib,fge),e(fge,WBo),e(Ib,QBo),e(Ib,bO),e(bO,HBo),e(Ib,UBo),e(N,JBo),e(N,Nb),e(Nb,mge),e(mge,YBo),e(Nb,KBo),e(Nb,vO),e(vO,ZBo),e(Nb,eIo),e(N,oIo),e(N,qb),e(qb,gge),e(gge,rIo),e(qb,tIo),e(qb,FO),e(FO,aIo),e(qb,nIo),e(N,sIo),e(N,jb),e(jb,hge),e(hge,lIo),e(jb,iIo),e(jb,TO),e(TO,dIo),e(jb,cIo),e(N,fIo),e(N,Db),e(Db,pge),e(pge,mIo),e(Db,gIo),e(Db,MO),e(MO,hIo),e(Db,pIo),e(N,_Io),e(N,Gb),e(Gb,_ge),e(_ge,uIo),e(Gb,bIo),e(Gb,EO),e(EO,vIo),e(Gb,FIo),e(N,TIo),e(N,Ob),e(Ob,uge),e(uge,MIo),e(Ob,EIo),e(Ob,CO),e(CO,CIo),e(Ob,wIo),e(N,AIo),e(N,Vb),e(Vb,bge),e(bge,LIo),e(Vb,yIo),e(Vb,wO),e(wO,xIo),e(Vb,$Io),e(N,kIo),e(N,Xb),e(Xb,vge),e(vge,SIo),e(Xb,RIo),e(Xb,AO),e(AO,PIo),e(Xb,BIo),e(N,IIo),e(N,zb),e(zb,Fge),e(Fge,NIo),e(zb,qIo),e(zb,LO),e(LO,jIo),e(zb,DIo),e(oo,GIo),e(oo,Wb),e(Wb,OIo),e(Wb,Tge),e(Tge,VIo),e(Wb,XIo),e(Wb,Mge),e(Mge,zIo),e(oo,WIo),M(Qb,oo,null),b(f,Lje,u),b(f,zi,u),e(zi,Hb),e(Hb,Ege),M(VL,Ege,null),e(zi,QIo),e(zi,Cge),e(Cge,HIo),b(f,yje,u),b(f,Po,u),M(XL,Po,null),e(Po,UIo),e(Po,Wi),e(Wi,JIo),e(Wi,yO),e(yO,YIo),e(Wi,KIo),e(Wi,xO),e(xO,ZIo),e(Wi,eNo),e(Po,oNo),e(Po,zL),e(zL,rNo),e(zL,wge),e(wge,tNo),e(zL,aNo),e(Po,nNo),e(Po,dt),M(WL,dt,null),e(dt,sNo),e(dt,Age),e(Age,lNo),e(dt,iNo),e(dt,Qi),e(Qi,dNo),e(Qi,Lge),e(Lge,cNo),e(Qi,fNo),e(Qi,$O),e($O,mNo),e(Qi,gNo),e(dt,hNo),M(Ub,dt,null),e(Po,pNo),e(Po,ro),M(QL,ro,null),e(ro,_No),e(ro,yge),e(yge,uNo),e(ro,bNo),e(ro,Pa),e(Pa,vNo),e(Pa,xge),e(xge,FNo),e(Pa,TNo),e(Pa,$ge),e($ge,MNo),e(Pa,ENo),e(Pa,kge),e(kge,CNo),e(Pa,wNo),e(ro,ANo),e(ro,Z),e(Z,Jb),e(Jb,Sge),e(Sge,LNo),e(Jb,yNo),e(Jb,kO),e(kO,xNo),e(Jb,$No),e(Z,kNo),e(Z,Yb),e(Yb,Rge),e(Rge,SNo),e(Yb,RNo),e(Yb,SO),e(SO,PNo),e(Yb,BNo),e(Z,INo),e(Z,Kb),e(Kb,Pge),e(Pge,NNo),e(Kb,qNo),e(Kb,RO),e(RO,jNo),e(Kb,DNo),e(Z,GNo),e(Z,Zb),e(Zb,Bge),e(Bge,ONo),e(Zb,VNo),e(Zb,PO),e(PO,XNo),e(Zb,zNo),e(Z,WNo),e(Z,e2),e(e2,Ige),e(Ige,QNo),e(e2,HNo),e(e2,BO),e(BO,UNo),e(e2,JNo),e(Z,YNo),e(Z,o2),e(o2,Nge),e(Nge,KNo),e(o2,ZNo),e(o2,IO),e(IO,eqo),e(o2,oqo),e(Z,rqo),e(Z,r2),e(r2,qge),e(qge,tqo),e(r2,aqo),e(r2,NO),e(NO,nqo),e(r2,sqo),e(Z,lqo),e(Z,t2),e(t2,jge),e(jge,iqo),e(t2,dqo),e(t2,qO),e(qO,cqo),e(t2,fqo),e(Z,mqo),e(Z,a2),e(a2,Dge),e(Dge,gqo),e(a2,hqo),e(a2,jO),e(jO,pqo),e(a2,_qo),e(Z,uqo),e(Z,n2),e(n2,Gge),e(Gge,bqo),e(n2,vqo),e(n2,DO),e(DO,Fqo),e(n2,Tqo),e(Z,Mqo),e(Z,s2),e(s2,Oge),e(Oge,Eqo),e(s2,Cqo),e(s2,GO),e(GO,wqo),e(s2,Aqo),e(Z,Lqo),e(Z,l2),e(l2,Vge),e(Vge,yqo),e(l2,xqo),e(l2,OO),e(OO,$qo),e(l2,kqo),e(Z,Sqo),e(Z,i2),e(i2,Xge),e(Xge,Rqo),e(i2,Pqo),e(i2,VO),e(VO,Bqo),e(i2,Iqo),e(Z,Nqo),e(Z,d2),e(d2,zge),e(zge,qqo),e(d2,jqo),e(d2,XO),e(XO,Dqo),e(d2,Gqo),e(Z,Oqo),e(Z,c2),e(c2,Wge),e(Wge,Vqo),e(c2,Xqo),e(c2,zO),e(zO,zqo),e(c2,Wqo),e(Z,Qqo),e(Z,f2),e(f2,Qge),e(Qge,Hqo),e(f2,Uqo),e(f2,WO),e(WO,Jqo),e(f2,Yqo),e(Z,Kqo),e(Z,m2),e(m2,Hge),e(Hge,Zqo),e(m2,ejo),e(m2,QO),e(QO,ojo),e(m2,rjo),e(Z,tjo),e(Z,g2),e(g2,Uge),e(Uge,ajo),e(g2,njo),e(g2,HO),e(HO,sjo),e(g2,ljo),e(Z,ijo),e(Z,h2),e(h2,Jge),e(Jge,djo),e(h2,cjo),e(h2,UO),e(UO,fjo),e(h2,mjo),e(Z,gjo),e(Z,p2),e(p2,Yge),e(Yge,hjo),e(p2,pjo),e(p2,JO),e(JO,_jo),e(p2,ujo),e(Z,bjo),e(Z,_2),e(_2,Kge),e(Kge,vjo),e(_2,Fjo),e(_2,YO),e(YO,Tjo),e(_2,Mjo),e(Z,Ejo),e(Z,u2),e(u2,Zge),e(Zge,Cjo),e(u2,wjo),e(u2,KO),e(KO,Ajo),e(u2,Ljo),e(Z,yjo),e(Z,b2),e(b2,ehe),e(ehe,xjo),e(b2,$jo),e(b2,ZO),e(ZO,kjo),e(b2,Sjo),e(Z,Rjo),e(Z,v2),e(v2,ohe),e(ohe,Pjo),e(v2,Bjo),e(v2,eV),e(eV,Ijo),e(v2,Njo),e(Z,qjo),e(Z,F2),e(F2,rhe),e(rhe,jjo),e(F2,Djo),e(F2,oV),e(oV,Gjo),e(F2,Ojo),e(Z,Vjo),e(Z,T2),e(T2,the),e(the,Xjo),e(T2,zjo),e(T2,rV),e(rV,Wjo),e(T2,Qjo),e(Z,Hjo),e(Z,M2),e(M2,ahe),e(ahe,Ujo),e(M2,Jjo),e(M2,tV),e(tV,Yjo),e(M2,Kjo),e(Z,Zjo),e(Z,E2),e(E2,nhe),e(nhe,eDo),e(E2,oDo),e(E2,aV),e(aV,rDo),e(E2,tDo),e(Z,aDo),e(Z,C2),e(C2,she),e(she,nDo),e(C2,sDo),e(C2,nV),e(nV,lDo),e(C2,iDo),e(ro,dDo),e(ro,w2),e(w2,cDo),e(w2,lhe),e(lhe,fDo),e(w2,mDo),e(w2,ihe),e(ihe,gDo),e(ro,hDo),M(A2,ro,null),b(f,xje,u),b(f,Hi,u),e(Hi,L2),e(L2,dhe),M(HL,dhe,null),e(Hi,pDo),e(Hi,che),e(che,_Do),b(f,$je,u),b(f,Bo,u),M(UL,Bo,null),e(Bo,uDo),e(Bo,Ui),e(Ui,bDo),e(Ui,sV),e(sV,vDo),e(Ui,FDo),e(Ui,lV),e(lV,TDo),e(Ui,MDo),e(Bo,EDo),e(Bo,JL),e(JL,CDo),e(JL,fhe),e(fhe,wDo),e(JL,ADo),e(Bo,LDo),e(Bo,ct),M(YL,ct,null),e(ct,yDo),e(ct,mhe),e(mhe,xDo),e(ct,$Do),e(ct,Ji),e(Ji,kDo),e(Ji,ghe),e(ghe,SDo),e(Ji,RDo),e(Ji,iV),e(iV,PDo),e(Ji,BDo),e(ct,IDo),M(y2,ct,null),e(Bo,NDo),e(Bo,to),M(KL,to,null),e(to,qDo),e(to,hhe),e(hhe,jDo),e(to,DDo),e(to,Ba),e(Ba,GDo),e(Ba,phe),e(phe,ODo),e(Ba,VDo),e(Ba,_he),e(_he,XDo),e(Ba,zDo),e(Ba,uhe),e(uhe,WDo),e(Ba,QDo),e(to,HDo),e(to,Yr),e(Yr,x2),e(x2,bhe),e(bhe,UDo),e(x2,JDo),e(x2,dV),e(dV,YDo),e(x2,KDo),e(Yr,ZDo),e(Yr,$2),e($2,vhe),e(vhe,eGo),e($2,oGo),e($2,cV),e(cV,rGo),e($2,tGo),e(Yr,aGo),e(Yr,k2),e(k2,Fhe),e(Fhe,nGo),e(k2,sGo),e(k2,fV),e(fV,lGo),e(k2,iGo),e(Yr,dGo),e(Yr,S2),e(S2,The),e(The,cGo),e(S2,fGo),e(S2,mV),e(mV,mGo),e(S2,gGo),e(Yr,hGo),e(Yr,R2),e(R2,Mhe),e(Mhe,pGo),e(R2,_Go),e(R2,gV),e(gV,uGo),e(R2,bGo),e(to,vGo),e(to,P2),e(P2,FGo),e(P2,Ehe),e(Ehe,TGo),e(P2,MGo),e(P2,Che),e(Che,EGo),e(to,CGo),M(B2,to,null),b(f,kje,u),b(f,Yi,u),e(Yi,I2),e(I2,whe),M(ZL,whe,null),e(Yi,wGo),e(Yi,Ahe),e(Ahe,AGo),b(f,Sje,u),b(f,Io,u),M(ey,Io,null),e(Io,LGo),e(Io,Ki),e(Ki,yGo),e(Ki,hV),e(hV,xGo),e(Ki,$Go),e(Ki,pV),e(pV,kGo),e(Ki,SGo),e(Io,RGo),e(Io,oy),e(oy,PGo),e(oy,Lhe),e(Lhe,BGo),e(oy,IGo),e(Io,NGo),e(Io,ft),M(ry,ft,null),e(ft,qGo),e(ft,yhe),e(yhe,jGo),e(ft,DGo),e(ft,Zi),e(Zi,GGo),e(Zi,xhe),e(xhe,OGo),e(Zi,VGo),e(Zi,_V),e(_V,XGo),e(Zi,zGo),e(ft,WGo),M(N2,ft,null),e(Io,QGo),e(Io,ao),M(ty,ao,null),e(ao,HGo),e(ao,$he),e($he,UGo),e(ao,JGo),e(ao,Ia),e(Ia,YGo),e(Ia,khe),e(khe,KGo),e(Ia,ZGo),e(Ia,She),e(She,eOo),e(Ia,oOo),e(Ia,Rhe),e(Rhe,rOo),e(Ia,tOo),e(ao,aOo),e(ao,U),e(U,q2),e(q2,Phe),e(Phe,nOo),e(q2,sOo),e(q2,uV),e(uV,lOo),e(q2,iOo),e(U,dOo),e(U,j2),e(j2,Bhe),e(Bhe,cOo),e(j2,fOo),e(j2,bV),e(bV,mOo),e(j2,gOo),e(U,hOo),e(U,D2),e(D2,Ihe),e(Ihe,pOo),e(D2,_Oo),e(D2,vV),e(vV,uOo),e(D2,bOo),e(U,vOo),e(U,G2),e(G2,Nhe),e(Nhe,FOo),e(G2,TOo),e(G2,FV),e(FV,MOo),e(G2,EOo),e(U,COo),e(U,O2),e(O2,qhe),e(qhe,wOo),e(O2,AOo),e(O2,TV),e(TV,LOo),e(O2,yOo),e(U,xOo),e(U,V2),e(V2,jhe),e(jhe,$Oo),e(V2,kOo),e(V2,MV),e(MV,SOo),e(V2,ROo),e(U,POo),e(U,X2),e(X2,Dhe),e(Dhe,BOo),e(X2,IOo),e(X2,EV),e(EV,NOo),e(X2,qOo),e(U,jOo),e(U,z2),e(z2,Ghe),e(Ghe,DOo),e(z2,GOo),e(z2,CV),e(CV,OOo),e(z2,VOo),e(U,XOo),e(U,W2),e(W2,Ohe),e(Ohe,zOo),e(W2,WOo),e(W2,wV),e(wV,QOo),e(W2,HOo),e(U,UOo),e(U,Q2),e(Q2,Vhe),e(Vhe,JOo),e(Q2,YOo),e(Q2,AV),e(AV,KOo),e(Q2,ZOo),e(U,eVo),e(U,H2),e(H2,Xhe),e(Xhe,oVo),e(H2,rVo),e(H2,LV),e(LV,tVo),e(H2,aVo),e(U,nVo),e(U,U2),e(U2,zhe),e(zhe,sVo),e(U2,lVo),e(U2,yV),e(yV,iVo),e(U2,dVo),e(U,cVo),e(U,J2),e(J2,Whe),e(Whe,fVo),e(J2,mVo),e(J2,xV),e(xV,gVo),e(J2,hVo),e(U,pVo),e(U,Y2),e(Y2,Qhe),e(Qhe,_Vo),e(Y2,uVo),e(Y2,$V),e($V,bVo),e(Y2,vVo),e(U,FVo),e(U,K2),e(K2,Hhe),e(Hhe,TVo),e(K2,MVo),e(K2,kV),e(kV,EVo),e(K2,CVo),e(U,wVo),e(U,Z2),e(Z2,Uhe),e(Uhe,AVo),e(Z2,LVo),e(Z2,SV),e(SV,yVo),e(Z2,xVo),e(U,$Vo),e(U,ev),e(ev,Jhe),e(Jhe,kVo),e(ev,SVo),e(ev,RV),e(RV,RVo),e(ev,PVo),e(U,BVo),e(U,ov),e(ov,Yhe),e(Yhe,IVo),e(ov,NVo),e(ov,PV),e(PV,qVo),e(ov,jVo),e(U,DVo),e(U,rv),e(rv,Khe),e(Khe,GVo),e(rv,OVo),e(rv,BV),e(BV,VVo),e(rv,XVo),e(U,zVo),e(U,tv),e(tv,Zhe),e(Zhe,WVo),e(tv,QVo),e(tv,IV),e(IV,HVo),e(tv,UVo),e(U,JVo),e(U,av),e(av,epe),e(epe,YVo),e(av,KVo),e(av,NV),e(NV,ZVo),e(av,eXo),e(U,oXo),e(U,nv),e(nv,ope),e(ope,rXo),e(nv,tXo),e(nv,qV),e(qV,aXo),e(nv,nXo),e(U,sXo),e(U,sv),e(sv,rpe),e(rpe,lXo),e(sv,iXo),e(sv,jV),e(jV,dXo),e(sv,cXo),e(U,fXo),e(U,lv),e(lv,tpe),e(tpe,mXo),e(lv,gXo),e(lv,DV),e(DV,hXo),e(lv,pXo),e(U,_Xo),e(U,iv),e(iv,ape),e(ape,uXo),e(iv,bXo),e(iv,GV),e(GV,vXo),e(iv,FXo),e(U,TXo),e(U,dv),e(dv,npe),e(npe,MXo),e(dv,EXo),e(dv,OV),e(OV,CXo),e(dv,wXo),e(U,AXo),e(U,cv),e(cv,spe),e(spe,LXo),e(cv,yXo),e(cv,VV),e(VV,xXo),e(cv,$Xo),e(U,kXo),e(U,fv),e(fv,lpe),e(lpe,SXo),e(fv,RXo),e(fv,XV),e(XV,PXo),e(fv,BXo),e(U,IXo),e(U,mv),e(mv,ipe),e(ipe,NXo),e(mv,qXo),e(mv,zV),e(zV,jXo),e(mv,DXo),e(U,GXo),e(U,gv),e(gv,dpe),e(dpe,OXo),e(gv,VXo),e(gv,WV),e(WV,XXo),e(gv,zXo),e(U,WXo),e(U,hv),e(hv,cpe),e(cpe,QXo),e(hv,HXo),e(hv,QV),e(QV,UXo),e(hv,JXo),e(U,YXo),e(U,pv),e(pv,fpe),e(fpe,KXo),e(pv,ZXo),e(pv,HV),e(HV,ezo),e(pv,ozo),e(U,rzo),e(U,_v),e(_v,mpe),e(mpe,tzo),e(_v,azo),e(_v,UV),e(UV,nzo),e(_v,szo),e(U,lzo),e(U,uv),e(uv,gpe),e(gpe,izo),e(uv,dzo),e(uv,JV),e(JV,czo),e(uv,fzo),e(ao,mzo),e(ao,bv),e(bv,gzo),e(bv,hpe),e(hpe,hzo),e(bv,pzo),e(bv,ppe),e(ppe,_zo),e(ao,uzo),M(vv,ao,null),b(f,Rje,u),b(f,ed,u),e(ed,Fv),e(Fv,_pe),M(ay,_pe,null),e(ed,bzo),e(ed,upe),e(upe,vzo),b(f,Pje,u),b(f,No,u),M(ny,No,null),e(No,Fzo),e(No,od),e(od,Tzo),e(od,YV),e(YV,Mzo),e(od,Ezo),e(od,KV),e(KV,Czo),e(od,wzo),e(No,Azo),e(No,sy),e(sy,Lzo),e(sy,bpe),e(bpe,yzo),e(sy,xzo),e(No,$zo),e(No,mt),M(ly,mt,null),e(mt,kzo),e(mt,vpe),e(vpe,Szo),e(mt,Rzo),e(mt,rd),e(rd,Pzo),e(rd,Fpe),e(Fpe,Bzo),e(rd,Izo),e(rd,ZV),e(ZV,Nzo),e(rd,qzo),e(mt,jzo),M(Tv,mt,null),e(No,Dzo),e(No,no),M(iy,no,null),e(no,Gzo),e(no,Tpe),e(Tpe,Ozo),e(no,Vzo),e(no,Na),e(Na,Xzo),e(Na,Mpe),e(Mpe,zzo),e(Na,Wzo),e(Na,Epe),e(Epe,Qzo),e(Na,Hzo),e(Na,Cpe),e(Cpe,Uzo),e(Na,Jzo),e(no,Yzo),e(no,V),e(V,Mv),e(Mv,wpe),e(wpe,Kzo),e(Mv,Zzo),e(Mv,eX),e(eX,eWo),e(Mv,oWo),e(V,rWo),e(V,Ev),e(Ev,Ape),e(Ape,tWo),e(Ev,aWo),e(Ev,oX),e(oX,nWo),e(Ev,sWo),e(V,lWo),e(V,Cv),e(Cv,Lpe),e(Lpe,iWo),e(Cv,dWo),e(Cv,rX),e(rX,cWo),e(Cv,fWo),e(V,mWo),e(V,wv),e(wv,ype),e(ype,gWo),e(wv,hWo),e(wv,tX),e(tX,pWo),e(wv,_Wo),e(V,uWo),e(V,Av),e(Av,xpe),e(xpe,bWo),e(Av,vWo),e(Av,aX),e(aX,FWo),e(Av,TWo),e(V,MWo),e(V,Lv),e(Lv,$pe),e($pe,EWo),e(Lv,CWo),e(Lv,nX),e(nX,wWo),e(Lv,AWo),e(V,LWo),e(V,yv),e(yv,kpe),e(kpe,yWo),e(yv,xWo),e(yv,sX),e(sX,$Wo),e(yv,kWo),e(V,SWo),e(V,xv),e(xv,Spe),e(Spe,RWo),e(xv,PWo),e(xv,lX),e(lX,BWo),e(xv,IWo),e(V,NWo),e(V,$v),e($v,Rpe),e(Rpe,qWo),e($v,jWo),e($v,iX),e(iX,DWo),e($v,GWo),e(V,OWo),e(V,kv),e(kv,Ppe),e(Ppe,VWo),e(kv,XWo),e(kv,dX),e(dX,zWo),e(kv,WWo),e(V,QWo),e(V,Sv),e(Sv,Bpe),e(Bpe,HWo),e(Sv,UWo),e(Sv,cX),e(cX,JWo),e(Sv,YWo),e(V,KWo),e(V,Rv),e(Rv,Ipe),e(Ipe,ZWo),e(Rv,eQo),e(Rv,fX),e(fX,oQo),e(Rv,rQo),e(V,tQo),e(V,Pv),e(Pv,Npe),e(Npe,aQo),e(Pv,nQo),e(Pv,mX),e(mX,sQo),e(Pv,lQo),e(V,iQo),e(V,Bv),e(Bv,qpe),e(qpe,dQo),e(Bv,cQo),e(Bv,gX),e(gX,fQo),e(Bv,mQo),e(V,gQo),e(V,Iv),e(Iv,jpe),e(jpe,hQo),e(Iv,pQo),e(Iv,hX),e(hX,_Qo),e(Iv,uQo),e(V,bQo),e(V,Nv),e(Nv,Dpe),e(Dpe,vQo),e(Nv,FQo),e(Nv,pX),e(pX,TQo),e(Nv,MQo),e(V,EQo),e(V,qv),e(qv,Gpe),e(Gpe,CQo),e(qv,wQo),e(qv,_X),e(_X,AQo),e(qv,LQo),e(V,yQo),e(V,jv),e(jv,Ope),e(Ope,xQo),e(jv,$Qo),e(jv,uX),e(uX,kQo),e(jv,SQo),e(V,RQo),e(V,Dv),e(Dv,Vpe),e(Vpe,PQo),e(Dv,BQo),e(Dv,bX),e(bX,IQo),e(Dv,NQo),e(V,qQo),e(V,Gv),e(Gv,Xpe),e(Xpe,jQo),e(Gv,DQo),e(Gv,vX),e(vX,GQo),e(Gv,OQo),e(V,VQo),e(V,Ov),e(Ov,zpe),e(zpe,XQo),e(Ov,zQo),e(Ov,FX),e(FX,WQo),e(Ov,QQo),e(V,HQo),e(V,Vv),e(Vv,Wpe),e(Wpe,UQo),e(Vv,JQo),e(Vv,TX),e(TX,YQo),e(Vv,KQo),e(V,ZQo),e(V,Xv),e(Xv,Qpe),e(Qpe,eHo),e(Xv,oHo),e(Xv,MX),e(MX,rHo),e(Xv,tHo),e(V,aHo),e(V,zv),e(zv,Hpe),e(Hpe,nHo),e(zv,sHo),e(zv,EX),e(EX,lHo),e(zv,iHo),e(V,dHo),e(V,Wv),e(Wv,Upe),e(Upe,cHo),e(Wv,fHo),e(Wv,CX),e(CX,mHo),e(Wv,gHo),e(V,hHo),e(V,Qv),e(Qv,Jpe),e(Jpe,pHo),e(Qv,_Ho),e(Qv,wX),e(wX,uHo),e(Qv,bHo),e(V,vHo),e(V,Hv),e(Hv,Ype),e(Ype,FHo),e(Hv,THo),e(Hv,AX),e(AX,MHo),e(Hv,EHo),e(V,CHo),e(V,Uv),e(Uv,Kpe),e(Kpe,wHo),e(Uv,AHo),e(Uv,LX),e(LX,LHo),e(Uv,yHo),e(V,xHo),e(V,Jv),e(Jv,Zpe),e(Zpe,$Ho),e(Jv,kHo),e(Jv,yX),e(yX,SHo),e(Jv,RHo),e(V,PHo),e(V,Yv),e(Yv,e_e),e(e_e,BHo),e(Yv,IHo),e(Yv,xX),e(xX,NHo),e(Yv,qHo),e(V,jHo),e(V,Kv),e(Kv,o_e),e(o_e,DHo),e(Kv,GHo),e(Kv,$X),e($X,OHo),e(Kv,VHo),e(V,XHo),e(V,Zv),e(Zv,r_e),e(r_e,zHo),e(Zv,WHo),e(Zv,kX),e(kX,QHo),e(Zv,HHo),e(V,UHo),e(V,eF),e(eF,t_e),e(t_e,JHo),e(eF,YHo),e(eF,SX),e(SX,KHo),e(eF,ZHo),e(V,eUo),e(V,oF),e(oF,a_e),e(a_e,oUo),e(oF,rUo),e(oF,RX),e(RX,tUo),e(oF,aUo),e(V,nUo),e(V,rF),e(rF,n_e),e(n_e,sUo),e(rF,lUo),e(rF,PX),e(PX,iUo),e(rF,dUo),e(V,cUo),e(V,tF),e(tF,s_e),e(s_e,fUo),e(tF,mUo),e(tF,BX),e(BX,gUo),e(tF,hUo),e(V,pUo),e(V,aF),e(aF,l_e),e(l_e,_Uo),e(aF,uUo),e(aF,IX),e(IX,bUo),e(aF,vUo),e(V,FUo),e(V,nF),e(nF,i_e),e(i_e,TUo),e(nF,MUo),e(nF,NX),e(NX,EUo),e(nF,CUo),e(V,wUo),e(V,sF),e(sF,d_e),e(d_e,AUo),e(sF,LUo),e(sF,qX),e(qX,yUo),e(sF,xUo),e(V,$Uo),e(V,lF),e(lF,c_e),e(c_e,kUo),e(lF,SUo),e(lF,jX),e(jX,RUo),e(lF,PUo),e(no,BUo),e(no,iF),e(iF,IUo),e(iF,f_e),e(f_e,NUo),e(iF,qUo),e(iF,m_e),e(m_e,jUo),e(no,DUo),M(dF,no,null),b(f,Bje,u),b(f,td,u),e(td,cF),e(cF,g_e),M(dy,g_e,null),e(td,GUo),e(td,h_e),e(h_e,OUo),b(f,Ije,u),b(f,qo,u),M(cy,qo,null),e(qo,VUo),e(qo,ad),e(ad,XUo),e(ad,DX),e(DX,zUo),e(ad,WUo),e(ad,GX),e(GX,QUo),e(ad,HUo),e(qo,UUo),e(qo,fy),e(fy,JUo),e(fy,p_e),e(p_e,YUo),e(fy,KUo),e(qo,ZUo),e(qo,gt),M(my,gt,null),e(gt,eJo),e(gt,__e),e(__e,oJo),e(gt,rJo),e(gt,nd),e(nd,tJo),e(nd,u_e),e(u_e,aJo),e(nd,nJo),e(nd,OX),e(OX,sJo),e(nd,lJo),e(gt,iJo),M(fF,gt,null),e(qo,dJo),e(qo,so),M(gy,so,null),e(so,cJo),e(so,b_e),e(b_e,fJo),e(so,mJo),e(so,qa),e(qa,gJo),e(qa,v_e),e(v_e,hJo),e(qa,pJo),e(qa,F_e),e(F_e,_Jo),e(qa,uJo),e(qa,T_e),e(T_e,bJo),e(qa,vJo),e(so,FJo),e(so,M_e),e(M_e,mF),e(mF,E_e),e(E_e,TJo),e(mF,MJo),e(mF,VX),e(VX,EJo),e(mF,CJo),e(so,wJo),e(so,gF),e(gF,AJo),e(gF,C_e),e(C_e,LJo),e(gF,yJo),e(gF,w_e),e(w_e,xJo),e(so,$Jo),M(hF,so,null),b(f,Nje,u),b(f,sd,u),e(sd,pF),e(pF,A_e),M(hy,A_e,null),e(sd,kJo),e(sd,L_e),e(L_e,SJo),b(f,qje,u),b(f,jo,u),M(py,jo,null),e(jo,RJo),e(jo,ld),e(ld,PJo),e(ld,XX),e(XX,BJo),e(ld,IJo),e(ld,zX),e(zX,NJo),e(ld,qJo),e(jo,jJo),e(jo,_y),e(_y,DJo),e(_y,y_e),e(y_e,GJo),e(_y,OJo),e(jo,VJo),e(jo,ht),M(uy,ht,null),e(ht,XJo),e(ht,x_e),e(x_e,zJo),e(ht,WJo),e(ht,id),e(id,QJo),e(id,$_e),e($_e,HJo),e(id,UJo),e(id,WX),e(WX,JJo),e(id,YJo),e(ht,KJo),M(_F,ht,null),e(jo,ZJo),e(jo,lo),M(by,lo,null),e(lo,eYo),e(lo,k_e),e(k_e,oYo),e(lo,rYo),e(lo,ja),e(ja,tYo),e(ja,S_e),e(S_e,aYo),e(ja,nYo),e(ja,R_e),e(R_e,sYo),e(ja,lYo),e(ja,P_e),e(P_e,iYo),e(ja,dYo),e(lo,cYo),e(lo,ve),e(ve,uF),e(uF,B_e),e(B_e,fYo),e(uF,mYo),e(uF,QX),e(QX,gYo),e(uF,hYo),e(ve,pYo),e(ve,bF),e(bF,I_e),e(I_e,_Yo),e(bF,uYo),e(bF,HX),e(HX,bYo),e(bF,vYo),e(ve,FYo),e(ve,vF),e(vF,N_e),e(N_e,TYo),e(vF,MYo),e(vF,UX),e(UX,EYo),e(vF,CYo),e(ve,wYo),e(ve,FF),e(FF,q_e),e(q_e,AYo),e(FF,LYo),e(FF,JX),e(JX,yYo),e(FF,xYo),e(ve,$Yo),e(ve,Is),e(Is,j_e),e(j_e,kYo),e(Is,SYo),e(Is,YX),e(YX,RYo),e(Is,PYo),e(Is,KX),e(KX,BYo),e(Is,IYo),e(ve,NYo),e(ve,TF),e(TF,D_e),e(D_e,qYo),e(TF,jYo),e(TF,ZX),e(ZX,DYo),e(TF,GYo),e(ve,OYo),e(ve,Ns),e(Ns,G_e),e(G_e,VYo),e(Ns,XYo),e(Ns,ez),e(ez,zYo),e(Ns,WYo),e(Ns,oz),e(oz,QYo),e(Ns,HYo),e(ve,UYo),e(ve,pt),e(pt,O_e),e(O_e,JYo),e(pt,YYo),e(pt,rz),e(rz,KYo),e(pt,ZYo),e(pt,tz),e(tz,eKo),e(pt,oKo),e(pt,az),e(az,rKo),e(pt,tKo),e(ve,aKo),e(ve,MF),e(MF,V_e),e(V_e,nKo),e(MF,sKo),e(MF,nz),e(nz,lKo),e(MF,iKo),e(ve,dKo),e(ve,EF),e(EF,X_e),e(X_e,cKo),e(EF,fKo),e(EF,sz),e(sz,mKo),e(EF,gKo),e(ve,hKo),e(ve,CF),e(CF,z_e),e(z_e,pKo),e(CF,_Ko),e(CF,lz),e(lz,uKo),e(CF,bKo),e(ve,vKo),e(ve,wF),e(wF,W_e),e(W_e,FKo),e(wF,TKo),e(wF,iz),e(iz,MKo),e(wF,EKo),e(ve,CKo),e(ve,AF),e(AF,Q_e),e(Q_e,wKo),e(AF,AKo),e(AF,dz),e(dz,LKo),e(AF,yKo),e(ve,xKo),e(ve,LF),e(LF,H_e),e(H_e,$Ko),e(LF,kKo),e(LF,cz),e(cz,SKo),e(LF,RKo),e(ve,PKo),e(ve,yF),e(yF,U_e),e(U_e,BKo),e(yF,IKo),e(yF,fz),e(fz,NKo),e(yF,qKo),e(lo,jKo),e(lo,xF),e(xF,DKo),e(xF,J_e),e(J_e,GKo),e(xF,OKo),e(xF,Y_e),e(Y_e,VKo),e(lo,XKo),M($F,lo,null),b(f,jje,u),b(f,dd,u),e(dd,kF),e(kF,K_e),M(vy,K_e,null),e(dd,zKo),e(dd,Z_e),e(Z_e,WKo),b(f,Dje,u),b(f,Do,u),M(Fy,Do,null),e(Do,QKo),e(Do,cd),e(cd,HKo),e(cd,mz),e(mz,UKo),e(cd,JKo),e(cd,gz),e(gz,YKo),e(cd,KKo),e(Do,ZKo),e(Do,Ty),e(Ty,eZo),e(Ty,eue),e(eue,oZo),e(Ty,rZo),e(Do,tZo),e(Do,_t),M(My,_t,null),e(_t,aZo),e(_t,oue),e(oue,nZo),e(_t,sZo),e(_t,fd),e(fd,lZo),e(fd,rue),e(rue,iZo),e(fd,dZo),e(fd,hz),e(hz,cZo),e(fd,fZo),e(_t,mZo),M(SF,_t,null),e(Do,gZo),e(Do,io),M(Ey,io,null),e(io,hZo),e(io,tue),e(tue,pZo),e(io,_Zo),e(io,Da),e(Da,uZo),e(Da,aue),e(aue,bZo),e(Da,vZo),e(Da,nue),e(nue,FZo),e(Da,TZo),e(Da,sue),e(sue,MZo),e(Da,EZo),e(io,CZo),e(io,lue),e(lue,RF),e(RF,iue),e(iue,wZo),e(RF,AZo),e(RF,pz),e(pz,LZo),e(RF,yZo),e(io,xZo),e(io,PF),e(PF,$Zo),e(PF,due),e(due,kZo),e(PF,SZo),e(PF,cue),e(cue,RZo),e(io,PZo),M(BF,io,null),b(f,Gje,u),b(f,md,u),e(md,IF),e(IF,fue),M(Cy,fue,null),e(md,BZo),e(md,mue),e(mue,IZo),b(f,Oje,u),b(f,Go,u),M(wy,Go,null),e(Go,NZo),e(Go,gd),e(gd,qZo),e(gd,_z),e(_z,jZo),e(gd,DZo),e(gd,uz),e(uz,GZo),e(gd,OZo),e(Go,VZo),e(Go,Ay),e(Ay,XZo),e(Ay,gue),e(gue,zZo),e(Ay,WZo),e(Go,QZo),e(Go,ut),M(Ly,ut,null),e(ut,HZo),e(ut,hue),e(hue,UZo),e(ut,JZo),e(ut,hd),e(hd,YZo),e(hd,pue),e(pue,KZo),e(hd,ZZo),e(hd,bz),e(bz,eer),e(hd,oer),e(ut,rer),M(NF,ut,null),e(Go,ter),e(Go,co),M(yy,co,null),e(co,aer),e(co,_ue),e(_ue,ner),e(co,ser),e(co,Ga),e(Ga,ler),e(Ga,uue),e(uue,ier),e(Ga,der),e(Ga,bue),e(bue,cer),e(Ga,fer),e(Ga,vue),e(vue,mer),e(Ga,ger),e(co,her),e(co,Se),e(Se,qF),e(qF,Fue),e(Fue,per),e(qF,_er),e(qF,vz),e(vz,uer),e(qF,ber),e(Se,ver),e(Se,jF),e(jF,Tue),e(Tue,Fer),e(jF,Ter),e(jF,Fz),e(Fz,Mer),e(jF,Eer),e(Se,Cer),e(Se,DF),e(DF,Mue),e(Mue,wer),e(DF,Aer),e(DF,Tz),e(Tz,Ler),e(DF,yer),e(Se,xer),e(Se,GF),e(GF,Eue),e(Eue,$er),e(GF,ker),e(GF,Mz),e(Mz,Ser),e(GF,Rer),e(Se,Per),e(Se,OF),e(OF,Cue),e(Cue,Ber),e(OF,Ier),e(OF,Ez),e(Ez,Ner),e(OF,qer),e(Se,jer),e(Se,VF),e(VF,wue),e(wue,Der),e(VF,Ger),e(VF,Cz),e(Cz,Oer),e(VF,Ver),e(Se,Xer),e(Se,XF),e(XF,Aue),e(Aue,zer),e(XF,Wer),e(XF,wz),e(wz,Qer),e(XF,Her),e(Se,Uer),e(Se,zF),e(zF,Lue),e(Lue,Jer),e(zF,Yer),e(zF,Az),e(Az,Ker),e(zF,Zer),e(Se,eor),e(Se,WF),e(WF,yue),e(yue,oor),e(WF,ror),e(WF,Lz),e(Lz,tor),e(WF,aor),e(co,nor),e(co,QF),e(QF,sor),e(QF,xue),e(xue,lor),e(QF,ior),e(QF,$ue),e($ue,dor),e(co,cor),M(HF,co,null),b(f,Vje,u),b(f,pd,u),e(pd,UF),e(UF,kue),M(xy,kue,null),e(pd,mor),e(pd,Sue),e(Sue,gor),b(f,Xje,u),b(f,Oo,u),M($y,Oo,null),e(Oo,hor),e(Oo,_d),e(_d,por),e(_d,yz),e(yz,_or),e(_d,uor),e(_d,xz),e(xz,bor),e(_d,vor),e(Oo,For),e(Oo,ky),e(ky,Tor),e(ky,Rue),e(Rue,Mor),e(ky,Eor),e(Oo,Cor),e(Oo,bt),M(Sy,bt,null),e(bt,wor),e(bt,Pue),e(Pue,Aor),e(bt,Lor),e(bt,ud),e(ud,yor),e(ud,Bue),e(Bue,xor),e(ud,$or),e(ud,$z),e($z,kor),e(ud,Sor),e(bt,Ror),M(JF,bt,null),e(Oo,Por),e(Oo,fo),M(Ry,fo,null),e(fo,Bor),e(fo,Iue),e(Iue,Ior),e(fo,Nor),e(fo,Oa),e(Oa,qor),e(Oa,Nue),e(Nue,jor),e(Oa,Dor),e(Oa,que),e(que,Gor),e(Oa,Oor),e(Oa,jue),e(jue,Vor),e(Oa,Xor),e(fo,zor),e(fo,Kr),e(Kr,YF),e(YF,Due),e(Due,Wor),e(YF,Qor),e(YF,kz),e(kz,Hor),e(YF,Uor),e(Kr,Jor),e(Kr,KF),e(KF,Gue),e(Gue,Yor),e(KF,Kor),e(KF,Sz),e(Sz,Zor),e(KF,err),e(Kr,orr),e(Kr,ZF),e(ZF,Oue),e(Oue,rrr),e(ZF,trr),e(ZF,Rz),e(Rz,arr),e(ZF,nrr),e(Kr,srr),e(Kr,eT),e(eT,Vue),e(Vue,lrr),e(eT,irr),e(eT,Pz),e(Pz,drr),e(eT,crr),e(Kr,frr),e(Kr,oT),e(oT,Xue),e(Xue,mrr),e(oT,grr),e(oT,Bz),e(Bz,hrr),e(oT,prr),e(fo,_rr),e(fo,rT),e(rT,urr),e(rT,zue),e(zue,brr),e(rT,vrr),e(rT,Wue),e(Wue,Frr),e(fo,Trr),M(tT,fo,null),b(f,zje,u),b(f,bd,u),e(bd,aT),e(aT,Que),M(Py,Que,null),e(bd,Mrr),e(bd,Hue),e(Hue,Err),b(f,Wje,u),b(f,Vo,u),M(By,Vo,null),e(Vo,Crr),e(Vo,vd),e(vd,wrr),e(vd,Iz),e(Iz,Arr),e(vd,Lrr),e(vd,Nz),e(Nz,yrr),e(vd,xrr),e(Vo,$rr),e(Vo,Iy),e(Iy,krr),e(Iy,Uue),e(Uue,Srr),e(Iy,Rrr),e(Vo,Prr),e(Vo,vt),M(Ny,vt,null),e(vt,Brr),e(vt,Jue),e(Jue,Irr),e(vt,Nrr),e(vt,Fd),e(Fd,qrr),e(Fd,Yue),e(Yue,jrr),e(Fd,Drr),e(Fd,qz),e(qz,Grr),e(Fd,Orr),e(vt,Vrr),M(nT,vt,null),e(Vo,Xrr),e(Vo,mo),M(qy,mo,null),e(mo,zrr),e(mo,Kue),e(Kue,Wrr),e(mo,Qrr),e(mo,Va),e(Va,Hrr),e(Va,Zue),e(Zue,Urr),e(Va,Jrr),e(Va,e1e),e(e1e,Yrr),e(Va,Krr),e(Va,o1e),e(o1e,Zrr),e(Va,etr),e(mo,otr),e(mo,Re),e(Re,sT),e(sT,r1e),e(r1e,rtr),e(sT,ttr),e(sT,jz),e(jz,atr),e(sT,ntr),e(Re,str),e(Re,lT),e(lT,t1e),e(t1e,ltr),e(lT,itr),e(lT,Dz),e(Dz,dtr),e(lT,ctr),e(Re,ftr),e(Re,iT),e(iT,a1e),e(a1e,mtr),e(iT,gtr),e(iT,Gz),e(Gz,htr),e(iT,ptr),e(Re,_tr),e(Re,dT),e(dT,n1e),e(n1e,utr),e(dT,btr),e(dT,Oz),e(Oz,vtr),e(dT,Ftr),e(Re,Ttr),e(Re,cT),e(cT,s1e),e(s1e,Mtr),e(cT,Etr),e(cT,Vz),e(Vz,Ctr),e(cT,wtr),e(Re,Atr),e(Re,fT),e(fT,l1e),e(l1e,Ltr),e(fT,ytr),e(fT,Xz),e(Xz,xtr),e(fT,$tr),e(Re,ktr),e(Re,mT),e(mT,i1e),e(i1e,Str),e(mT,Rtr),e(mT,zz),e(zz,Ptr),e(mT,Btr),e(Re,Itr),e(Re,gT),e(gT,d1e),e(d1e,Ntr),e(gT,qtr),e(gT,Wz),e(Wz,jtr),e(gT,Dtr),e(Re,Gtr),e(Re,hT),e(hT,c1e),e(c1e,Otr),e(hT,Vtr),e(hT,Qz),e(Qz,Xtr),e(hT,ztr),e(mo,Wtr),e(mo,pT),e(pT,Qtr),e(pT,f1e),e(f1e,Htr),e(pT,Utr),e(pT,m1e),e(m1e,Jtr),e(mo,Ytr),M(_T,mo,null),b(f,Qje,u),b(f,Td,u),e(Td,uT),e(uT,g1e),M(jy,g1e,null),e(Td,Ktr),e(Td,h1e),e(h1e,Ztr),b(f,Hje,u),b(f,Xo,u),M(Dy,Xo,null),e(Xo,ear),e(Xo,Md),e(Md,oar),e(Md,Hz),e(Hz,rar),e(Md,tar),e(Md,Uz),e(Uz,aar),e(Md,nar),e(Xo,sar),e(Xo,Gy),e(Gy,lar),e(Gy,p1e),e(p1e,iar),e(Gy,dar),e(Xo,car),e(Xo,Ft),M(Oy,Ft,null),e(Ft,far),e(Ft,_1e),e(_1e,mar),e(Ft,gar),e(Ft,Ed),e(Ed,har),e(Ed,u1e),e(u1e,par),e(Ed,_ar),e(Ed,Jz),e(Jz,uar),e(Ed,bar),e(Ft,Far),M(bT,Ft,null),e(Xo,Tar),e(Xo,go),M(Vy,go,null),e(go,Mar),e(go,b1e),e(b1e,Ear),e(go,Car),e(go,Xa),e(Xa,war),e(Xa,v1e),e(v1e,Aar),e(Xa,Lar),e(Xa,F1e),e(F1e,yar),e(Xa,xar),e(Xa,T1e),e(T1e,$ar),e(Xa,kar),e(go,Sar),e(go,Xy),e(Xy,vT),e(vT,M1e),e(M1e,Rar),e(vT,Par),e(vT,Yz),e(Yz,Bar),e(vT,Iar),e(Xy,Nar),e(Xy,FT),e(FT,E1e),e(E1e,qar),e(FT,jar),e(FT,Kz),e(Kz,Dar),e(FT,Gar),e(go,Oar),e(go,TT),e(TT,Var),e(TT,C1e),e(C1e,Xar),e(TT,zar),e(TT,w1e),e(w1e,War),e(go,Qar),M(MT,go,null),b(f,Uje,u),b(f,Cd,u),e(Cd,ET),e(ET,A1e),M(zy,A1e,null),e(Cd,Har),e(Cd,L1e),e(L1e,Uar),b(f,Jje,u),b(f,zo,u),M(Wy,zo,null),e(zo,Jar),e(zo,wd),e(wd,Yar),e(wd,Zz),e(Zz,Kar),e(wd,Zar),e(wd,eW),e(eW,enr),e(wd,onr),e(zo,rnr),e(zo,Qy),e(Qy,tnr),e(Qy,y1e),e(y1e,anr),e(Qy,nnr),e(zo,snr),e(zo,Tt),M(Hy,Tt,null),e(Tt,lnr),e(Tt,x1e),e(x1e,inr),e(Tt,dnr),e(Tt,Ad),e(Ad,cnr),e(Ad,$1e),e($1e,fnr),e(Ad,mnr),e(Ad,oW),e(oW,gnr),e(Ad,hnr),e(Tt,pnr),M(CT,Tt,null),e(zo,_nr),e(zo,ho),M(Uy,ho,null),e(ho,unr),e(ho,k1e),e(k1e,bnr),e(ho,vnr),e(ho,za),e(za,Fnr),e(za,S1e),e(S1e,Tnr),e(za,Mnr),e(za,R1e),e(R1e,Enr),e(za,Cnr),e(za,P1e),e(P1e,wnr),e(za,Anr),e(ho,Lnr),e(ho,Zr),e(Zr,wT),e(wT,B1e),e(B1e,ynr),e(wT,xnr),e(wT,rW),e(rW,$nr),e(wT,knr),e(Zr,Snr),e(Zr,AT),e(AT,I1e),e(I1e,Rnr),e(AT,Pnr),e(AT,tW),e(tW,Bnr),e(AT,Inr),e(Zr,Nnr),e(Zr,LT),e(LT,N1e),e(N1e,qnr),e(LT,jnr),e(LT,aW),e(aW,Dnr),e(LT,Gnr),e(Zr,Onr),e(Zr,yT),e(yT,q1e),e(q1e,Vnr),e(yT,Xnr),e(yT,nW),e(nW,znr),e(yT,Wnr),e(Zr,Qnr),e(Zr,xT),e(xT,j1e),e(j1e,Hnr),e(xT,Unr),e(xT,sW),e(sW,Jnr),e(xT,Ynr),e(ho,Knr),e(ho,$T),e($T,Znr),e($T,D1e),e(D1e,esr),e($T,osr),e($T,G1e),e(G1e,rsr),e(ho,tsr),M(kT,ho,null),b(f,Yje,u),b(f,Ld,u),e(Ld,ST),e(ST,O1e),M(Jy,O1e,null),e(Ld,asr),e(Ld,V1e),e(V1e,nsr),b(f,Kje,u),b(f,Wo,u),M(Yy,Wo,null),e(Wo,ssr),e(Wo,yd),e(yd,lsr),e(yd,lW),e(lW,isr),e(yd,dsr),e(yd,iW),e(iW,csr),e(yd,fsr),e(Wo,msr),e(Wo,Ky),e(Ky,gsr),e(Ky,X1e),e(X1e,hsr),e(Ky,psr),e(Wo,_sr),e(Wo,Mt),M(Zy,Mt,null),e(Mt,usr),e(Mt,z1e),e(z1e,bsr),e(Mt,vsr),e(Mt,xd),e(xd,Fsr),e(xd,W1e),e(W1e,Tsr),e(xd,Msr),e(xd,dW),e(dW,Esr),e(xd,Csr),e(Mt,wsr),M(RT,Mt,null),e(Wo,Asr),e(Wo,po),M(e8,po,null),e(po,Lsr),e(po,Q1e),e(Q1e,ysr),e(po,xsr),e(po,Wa),e(Wa,$sr),e(Wa,H1e),e(H1e,ksr),e(Wa,Ssr),e(Wa,U1e),e(U1e,Rsr),e(Wa,Psr),e(Wa,J1e),e(J1e,Bsr),e(Wa,Isr),e(po,Nsr),e(po,$d),e($d,PT),e(PT,Y1e),e(Y1e,qsr),e(PT,jsr),e(PT,cW),e(cW,Dsr),e(PT,Gsr),e($d,Osr),e($d,BT),e(BT,K1e),e(K1e,Vsr),e(BT,Xsr),e(BT,fW),e(fW,zsr),e(BT,Wsr),e($d,Qsr),e($d,IT),e(IT,Z1e),e(Z1e,Hsr),e(IT,Usr),e(IT,mW),e(mW,Jsr),e(IT,Ysr),e(po,Ksr),e(po,NT),e(NT,Zsr),e(NT,e3e),e(e3e,elr),e(NT,olr),e(NT,o3e),e(o3e,rlr),e(po,tlr),M(qT,po,null),b(f,Zje,u),b(f,kd,u),e(kd,jT),e(jT,r3e),M(o8,r3e,null),e(kd,alr),e(kd,t3e),e(t3e,nlr),b(f,eDe,u),b(f,Qo,u),M(r8,Qo,null),e(Qo,slr),e(Qo,Sd),e(Sd,llr),e(Sd,gW),e(gW,ilr),e(Sd,dlr),e(Sd,hW),e(hW,clr),e(Sd,flr),e(Qo,mlr),e(Qo,t8),e(t8,glr),e(t8,a3e),e(a3e,hlr),e(t8,plr),e(Qo,_lr),e(Qo,Et),M(a8,Et,null),e(Et,ulr),e(Et,n3e),e(n3e,blr),e(Et,vlr),e(Et,Rd),e(Rd,Flr),e(Rd,s3e),e(s3e,Tlr),e(Rd,Mlr),e(Rd,pW),e(pW,Elr),e(Rd,Clr),e(Et,wlr),M(DT,Et,null),e(Qo,Alr),e(Qo,_o),M(n8,_o,null),e(_o,Llr),e(_o,l3e),e(l3e,ylr),e(_o,xlr),e(_o,Qa),e(Qa,$lr),e(Qa,i3e),e(i3e,klr),e(Qa,Slr),e(Qa,d3e),e(d3e,Rlr),e(Qa,Plr),e(Qa,c3e),e(c3e,Blr),e(Qa,Ilr),e(_o,Nlr),e(_o,s8),e(s8,GT),e(GT,f3e),e(f3e,qlr),e(GT,jlr),e(GT,_W),e(_W,Dlr),e(GT,Glr),e(s8,Olr),e(s8,OT),e(OT,m3e),e(m3e,Vlr),e(OT,Xlr),e(OT,uW),e(uW,zlr),e(OT,Wlr),e(_o,Qlr),e(_o,VT),e(VT,Hlr),e(VT,g3e),e(g3e,Ulr),e(VT,Jlr),e(VT,h3e),e(h3e,Ylr),e(_o,Klr),M(XT,_o,null),b(f,oDe,u),b(f,Pd,u),e(Pd,zT),e(zT,p3e),M(l8,p3e,null),e(Pd,Zlr),e(Pd,_3e),e(_3e,eir),b(f,rDe,u),b(f,Ho,u),M(i8,Ho,null),e(Ho,oir),e(Ho,Bd),e(Bd,rir),e(Bd,bW),e(bW,tir),e(Bd,air),e(Bd,vW),e(vW,nir),e(Bd,sir),e(Ho,lir),e(Ho,d8),e(d8,iir),e(d8,u3e),e(u3e,dir),e(d8,cir),e(Ho,fir),e(Ho,Ct),M(c8,Ct,null),e(Ct,mir),e(Ct,b3e),e(b3e,gir),e(Ct,hir),e(Ct,Id),e(Id,pir),e(Id,v3e),e(v3e,_ir),e(Id,uir),e(Id,FW),e(FW,bir),e(Id,vir),e(Ct,Fir),M(WT,Ct,null),e(Ho,Tir),e(Ho,uo),M(f8,uo,null),e(uo,Mir),e(uo,F3e),e(F3e,Eir),e(uo,Cir),e(uo,Ha),e(Ha,wir),e(Ha,T3e),e(T3e,Air),e(Ha,Lir),e(Ha,M3e),e(M3e,yir),e(Ha,xir),e(Ha,E3e),e(E3e,$ir),e(Ha,kir),e(uo,Sir),e(uo,C3e),e(C3e,QT),e(QT,w3e),e(w3e,Rir),e(QT,Pir),e(QT,TW),e(TW,Bir),e(QT,Iir),e(uo,Nir),e(uo,HT),e(HT,qir),e(HT,A3e),e(A3e,jir),e(HT,Dir),e(HT,L3e),e(L3e,Gir),e(uo,Oir),M(UT,uo,null),b(f,tDe,u),b(f,Nd,u),e(Nd,JT),e(JT,y3e),M(m8,y3e,null),e(Nd,Vir),e(Nd,x3e),e(x3e,Xir),b(f,aDe,u),b(f,Uo,u),M(g8,Uo,null),e(Uo,zir),e(Uo,qd),e(qd,Wir),e(qd,MW),e(MW,Qir),e(qd,Hir),e(qd,EW),e(EW,Uir),e(qd,Jir),e(Uo,Yir),e(Uo,h8),e(h8,Kir),e(h8,$3e),e($3e,Zir),e(h8,edr),e(Uo,odr),e(Uo,wt),M(p8,wt,null),e(wt,rdr),e(wt,k3e),e(k3e,tdr),e(wt,adr),e(wt,jd),e(jd,ndr),e(jd,S3e),e(S3e,sdr),e(jd,ldr),e(jd,CW),e(CW,idr),e(jd,ddr),e(wt,cdr),M(YT,wt,null),e(Uo,fdr),e(Uo,bo),M(_8,bo,null),e(bo,mdr),e(bo,R3e),e(R3e,gdr),e(bo,hdr),e(bo,Ua),e(Ua,pdr),e(Ua,P3e),e(P3e,_dr),e(Ua,udr),e(Ua,B3e),e(B3e,bdr),e(Ua,vdr),e(Ua,I3e),e(I3e,Fdr),e(Ua,Tdr),e(bo,Mdr),e(bo,Ja),e(Ja,KT),e(KT,N3e),e(N3e,Edr),e(KT,Cdr),e(KT,wW),e(wW,wdr),e(KT,Adr),e(Ja,Ldr),e(Ja,ZT),e(ZT,q3e),e(q3e,ydr),e(ZT,xdr),e(ZT,AW),e(AW,$dr),e(ZT,kdr),e(Ja,Sdr),e(Ja,e7),e(e7,j3e),e(j3e,Rdr),e(e7,Pdr),e(e7,LW),e(LW,Bdr),e(e7,Idr),e(Ja,Ndr),e(Ja,o7),e(o7,D3e),e(D3e,qdr),e(o7,jdr),e(o7,yW),e(yW,Ddr),e(o7,Gdr),e(bo,Odr),e(bo,r7),e(r7,Vdr),e(r7,G3e),e(G3e,Xdr),e(r7,zdr),e(r7,O3e),e(O3e,Wdr),e(bo,Qdr),M(t7,bo,null),b(f,nDe,u),b(f,Dd,u),e(Dd,a7),e(a7,V3e),M(u8,V3e,null),e(Dd,Hdr),e(Dd,X3e),e(X3e,Udr),b(f,sDe,u),b(f,Jo,u),M(b8,Jo,null),e(Jo,Jdr),e(Jo,Gd),e(Gd,Ydr),e(Gd,xW),e(xW,Kdr),e(Gd,Zdr),e(Gd,$W),e($W,ecr),e(Gd,ocr),e(Jo,rcr),e(Jo,v8),e(v8,tcr),e(v8,z3e),e(z3e,acr),e(v8,ncr),e(Jo,scr),e(Jo,At),M(F8,At,null),e(At,lcr),e(At,W3e),e(W3e,icr),e(At,dcr),e(At,Od),e(Od,ccr),e(Od,Q3e),e(Q3e,fcr),e(Od,mcr),e(Od,kW),e(kW,gcr),e(Od,hcr),e(At,pcr),M(n7,At,null),e(Jo,_cr),e(Jo,vo),M(T8,vo,null),e(vo,ucr),e(vo,H3e),e(H3e,bcr),e(vo,vcr),e(vo,Ya),e(Ya,Fcr),e(Ya,U3e),e(U3e,Tcr),e(Ya,Mcr),e(Ya,J3e),e(J3e,Ecr),e(Ya,Ccr),e(Ya,Y3e),e(Y3e,wcr),e(Ya,Acr),e(vo,Lcr),e(vo,K3e),e(K3e,s7),e(s7,Z3e),e(Z3e,ycr),e(s7,xcr),e(s7,SW),e(SW,$cr),e(s7,kcr),e(vo,Scr),e(vo,l7),e(l7,Rcr),e(l7,ebe),e(ebe,Pcr),e(l7,Bcr),e(l7,obe),e(obe,Icr),e(vo,Ncr),M(i7,vo,null),b(f,lDe,u),b(f,Vd,u),e(Vd,d7),e(d7,rbe),M(M8,rbe,null),e(Vd,qcr),e(Vd,tbe),e(tbe,jcr),b(f,iDe,u),b(f,Yo,u),M(E8,Yo,null),e(Yo,Dcr),e(Yo,Xd),e(Xd,Gcr),e(Xd,RW),e(RW,Ocr),e(Xd,Vcr),e(Xd,PW),e(PW,Xcr),e(Xd,zcr),e(Yo,Wcr),e(Yo,C8),e(C8,Qcr),e(C8,abe),e(abe,Hcr),e(C8,Ucr),e(Yo,Jcr),e(Yo,Lt),M(w8,Lt,null),e(Lt,Ycr),e(Lt,nbe),e(nbe,Kcr),e(Lt,Zcr),e(Lt,zd),e(zd,efr),e(zd,sbe),e(sbe,ofr),e(zd,rfr),e(zd,BW),e(BW,tfr),e(zd,afr),e(Lt,nfr),M(c7,Lt,null),e(Yo,sfr),e(Yo,wr),M(A8,wr,null),e(wr,lfr),e(wr,lbe),e(lbe,ifr),e(wr,dfr),e(wr,Ka),e(Ka,cfr),e(Ka,ibe),e(ibe,ffr),e(Ka,mfr),e(Ka,dbe),e(dbe,gfr),e(Ka,hfr),e(Ka,cbe),e(cbe,pfr),e(Ka,_fr),e(wr,ufr),e(wr,q),e(q,f7),e(f7,fbe),e(fbe,bfr),e(f7,vfr),e(f7,IW),e(IW,Ffr),e(f7,Tfr),e(q,Mfr),e(q,m7),e(m7,mbe),e(mbe,Efr),e(m7,Cfr),e(m7,NW),e(NW,wfr),e(m7,Afr),e(q,Lfr),e(q,g7),e(g7,gbe),e(gbe,yfr),e(g7,xfr),e(g7,qW),e(qW,$fr),e(g7,kfr),e(q,Sfr),e(q,h7),e(h7,hbe),e(hbe,Rfr),e(h7,Pfr),e(h7,jW),e(jW,Bfr),e(h7,Ifr),e(q,Nfr),e(q,p7),e(p7,pbe),e(pbe,qfr),e(p7,jfr),e(p7,DW),e(DW,Dfr),e(p7,Gfr),e(q,Ofr),e(q,_7),e(_7,_be),e(_be,Vfr),e(_7,Xfr),e(_7,GW),e(GW,zfr),e(_7,Wfr),e(q,Qfr),e(q,u7),e(u7,ube),e(ube,Hfr),e(u7,Ufr),e(u7,OW),e(OW,Jfr),e(u7,Yfr),e(q,Kfr),e(q,b7),e(b7,bbe),e(bbe,Zfr),e(b7,emr),e(b7,VW),e(VW,omr),e(b7,rmr),e(q,tmr),e(q,v7),e(v7,vbe),e(vbe,amr),e(v7,nmr),e(v7,XW),e(XW,smr),e(v7,lmr),e(q,imr),e(q,F7),e(F7,Fbe),e(Fbe,dmr),e(F7,cmr),e(F7,zW),e(zW,fmr),e(F7,mmr),e(q,gmr),e(q,T7),e(T7,Tbe),e(Tbe,hmr),e(T7,pmr),e(T7,WW),e(WW,_mr),e(T7,umr),e(q,bmr),e(q,M7),e(M7,Mbe),e(Mbe,vmr),e(M7,Fmr),e(M7,QW),e(QW,Tmr),e(M7,Mmr),e(q,Emr),e(q,E7),e(E7,Ebe),e(Ebe,Cmr),e(E7,wmr),e(E7,HW),e(HW,Amr),e(E7,Lmr),e(q,ymr),e(q,C7),e(C7,Cbe),e(Cbe,xmr),e(C7,$mr),e(C7,UW),e(UW,kmr),e(C7,Smr),e(q,Rmr),e(q,w7),e(w7,wbe),e(wbe,Pmr),e(w7,Bmr),e(w7,JW),e(JW,Imr),e(w7,Nmr),e(q,qmr),e(q,A7),e(A7,Abe),e(Abe,jmr),e(A7,Dmr),e(A7,YW),e(YW,Gmr),e(A7,Omr),e(q,Vmr),e(q,L7),e(L7,Lbe),e(Lbe,Xmr),e(L7,zmr),e(L7,KW),e(KW,Wmr),e(L7,Qmr),e(q,Hmr),e(q,qs),e(qs,ybe),e(ybe,Umr),e(qs,Jmr),e(qs,ZW),e(ZW,Ymr),e(qs,Kmr),e(qs,eQ),e(eQ,Zmr),e(qs,egr),e(q,ogr),e(q,y7),e(y7,xbe),e(xbe,rgr),e(y7,tgr),e(y7,oQ),e(oQ,agr),e(y7,ngr),e(q,sgr),e(q,x7),e(x7,$be),e($be,lgr),e(x7,igr),e(x7,rQ),e(rQ,dgr),e(x7,cgr),e(q,fgr),e(q,$7),e($7,kbe),e(kbe,mgr),e($7,ggr),e($7,tQ),e(tQ,hgr),e($7,pgr),e(q,_gr),e(q,k7),e(k7,Sbe),e(Sbe,ugr),e(k7,bgr),e(k7,aQ),e(aQ,vgr),e(k7,Fgr),e(q,Tgr),e(q,S7),e(S7,Rbe),e(Rbe,Mgr),e(S7,Egr),e(S7,nQ),e(nQ,Cgr),e(S7,wgr),e(q,Agr),e(q,R7),e(R7,Pbe),e(Pbe,Lgr),e(R7,ygr),e(R7,sQ),e(sQ,xgr),e(R7,$gr),e(q,kgr),e(q,P7),e(P7,Bbe),e(Bbe,Sgr),e(P7,Rgr),e(P7,lQ),e(lQ,Pgr),e(P7,Bgr),e(q,Igr),e(q,B7),e(B7,Ibe),e(Ibe,Ngr),e(B7,qgr),e(B7,iQ),e(iQ,jgr),e(B7,Dgr),e(q,Ggr),e(q,I7),e(I7,Nbe),e(Nbe,Ogr),e(I7,Vgr),e(I7,dQ),e(dQ,Xgr),e(I7,zgr),e(q,Wgr),e(q,N7),e(N7,qbe),e(qbe,Qgr),e(N7,Hgr),e(N7,cQ),e(cQ,Ugr),e(N7,Jgr),e(q,Ygr),e(q,q7),e(q7,jbe),e(jbe,Kgr),e(q7,Zgr),e(q7,fQ),e(fQ,ehr),e(q7,ohr),e(q,rhr),e(q,j7),e(j7,Dbe),e(Dbe,thr),e(j7,ahr),e(j7,mQ),e(mQ,nhr),e(j7,shr),e(q,lhr),e(q,D7),e(D7,Gbe),e(Gbe,ihr),e(D7,dhr),e(D7,gQ),e(gQ,chr),e(D7,fhr),e(q,mhr),e(q,G7),e(G7,Obe),e(Obe,ghr),e(G7,hhr),e(G7,hQ),e(hQ,phr),e(G7,_hr),e(q,uhr),e(q,O7),e(O7,Vbe),e(Vbe,bhr),e(O7,vhr),e(O7,pQ),e(pQ,Fhr),e(O7,Thr),e(q,Mhr),e(q,V7),e(V7,Xbe),e(Xbe,Ehr),e(V7,Chr),e(V7,_Q),e(_Q,whr),e(V7,Ahr),e(q,Lhr),e(q,X7),e(X7,zbe),e(zbe,yhr),e(X7,xhr),e(X7,uQ),e(uQ,$hr),e(X7,khr),e(q,Shr),e(q,z7),e(z7,Wbe),e(Wbe,Rhr),e(z7,Phr),e(z7,bQ),e(bQ,Bhr),e(z7,Ihr),e(q,Nhr),e(q,W7),e(W7,Qbe),e(Qbe,qhr),e(W7,jhr),e(W7,vQ),e(vQ,Dhr),e(W7,Ghr),e(q,Ohr),e(q,Q7),e(Q7,Hbe),e(Hbe,Vhr),e(Q7,Xhr),e(Q7,FQ),e(FQ,zhr),e(Q7,Whr),e(q,Qhr),e(q,H7),e(H7,Ube),e(Ube,Hhr),e(H7,Uhr),e(H7,TQ),e(TQ,Jhr),e(H7,Yhr),e(q,Khr),e(q,U7),e(U7,Jbe),e(Jbe,Zhr),e(U7,epr),e(U7,MQ),e(MQ,opr),e(U7,rpr),e(q,tpr),e(q,J7),e(J7,Ybe),e(Ybe,apr),e(J7,npr),e(J7,EQ),e(EQ,spr),e(J7,lpr),e(q,ipr),e(q,Y7),e(Y7,Kbe),e(Kbe,dpr),e(Y7,cpr),e(Y7,CQ),e(CQ,fpr),e(Y7,mpr),e(q,gpr),e(q,K7),e(K7,Zbe),e(Zbe,hpr),e(K7,ppr),e(K7,wQ),e(wQ,_pr),e(K7,upr),e(q,bpr),e(q,Z7),e(Z7,e2e),e(e2e,vpr),e(Z7,Fpr),e(Z7,AQ),e(AQ,Tpr),e(Z7,Mpr),e(q,Epr),e(q,eM),e(eM,o2e),e(o2e,Cpr),e(eM,wpr),e(eM,LQ),e(LQ,Apr),e(eM,Lpr),e(q,ypr),e(q,oM),e(oM,r2e),e(r2e,xpr),e(oM,$pr),e(oM,yQ),e(yQ,kpr),e(oM,Spr),e(q,Rpr),e(q,rM),e(rM,t2e),e(t2e,Ppr),e(rM,Bpr),e(rM,xQ),e(xQ,Ipr),e(rM,Npr),e(wr,qpr),M(tM,wr,null),b(f,dDe,u),b(f,Wd,u),e(Wd,aM),e(aM,a2e),M(L8,a2e,null),e(Wd,jpr),e(Wd,n2e),e(n2e,Dpr),b(f,cDe,u),b(f,Ko,u),M(y8,Ko,null),e(Ko,Gpr),e(Ko,Qd),e(Qd,Opr),e(Qd,$Q),e($Q,Vpr),e(Qd,Xpr),e(Qd,kQ),e(kQ,zpr),e(Qd,Wpr),e(Ko,Qpr),e(Ko,x8),e(x8,Hpr),e(x8,s2e),e(s2e,Upr),e(x8,Jpr),e(Ko,Ypr),e(Ko,yt),M($8,yt,null),e(yt,Kpr),e(yt,l2e),e(l2e,Zpr),e(yt,e_r),e(yt,Hd),e(Hd,o_r),e(Hd,i2e),e(i2e,r_r),e(Hd,t_r),e(Hd,SQ),e(SQ,a_r),e(Hd,n_r),e(yt,s_r),M(nM,yt,null),e(Ko,l_r),e(Ko,Ar),M(k8,Ar,null),e(Ar,i_r),e(Ar,d2e),e(d2e,d_r),e(Ar,c_r),e(Ar,Za),e(Za,f_r),e(Za,c2e),e(c2e,m_r),e(Za,g_r),e(Za,f2e),e(f2e,h_r),e(Za,p_r),e(Za,m2e),e(m2e,__r),e(Za,u_r),e(Ar,b_r),e(Ar,se),e(se,sM),e(sM,g2e),e(g2e,v_r),e(sM,F_r),e(sM,RQ),e(RQ,T_r),e(sM,M_r),e(se,E_r),e(se,lM),e(lM,h2e),e(h2e,C_r),e(lM,w_r),e(lM,PQ),e(PQ,A_r),e(lM,L_r),e(se,y_r),e(se,iM),e(iM,p2e),e(p2e,x_r),e(iM,$_r),e(iM,BQ),e(BQ,k_r),e(iM,S_r),e(se,R_r),e(se,dM),e(dM,_2e),e(_2e,P_r),e(dM,B_r),e(dM,IQ),e(IQ,I_r),e(dM,N_r),e(se,q_r),e(se,cM),e(cM,u2e),e(u2e,j_r),e(cM,D_r),e(cM,NQ),e(NQ,G_r),e(cM,O_r),e(se,V_r),e(se,fM),e(fM,b2e),e(b2e,X_r),e(fM,z_r),e(fM,qQ),e(qQ,W_r),e(fM,Q_r),e(se,H_r),e(se,mM),e(mM,v2e),e(v2e,U_r),e(mM,J_r),e(mM,jQ),e(jQ,Y_r),e(mM,K_r),e(se,Z_r),e(se,gM),e(gM,F2e),e(F2e,eur),e(gM,our),e(gM,DQ),e(DQ,rur),e(gM,tur),e(se,aur),e(se,hM),e(hM,T2e),e(T2e,nur),e(hM,sur),e(hM,GQ),e(GQ,lur),e(hM,iur),e(se,dur),e(se,pM),e(pM,M2e),e(M2e,cur),e(pM,fur),e(pM,OQ),e(OQ,mur),e(pM,gur),e(se,hur),e(se,_M),e(_M,E2e),e(E2e,pur),e(_M,_ur),e(_M,VQ),e(VQ,uur),e(_M,bur),e(se,vur),e(se,uM),e(uM,C2e),e(C2e,Fur),e(uM,Tur),e(uM,XQ),e(XQ,Mur),e(uM,Eur),e(se,Cur),e(se,bM),e(bM,w2e),e(w2e,wur),e(bM,Aur),e(bM,zQ),e(zQ,Lur),e(bM,yur),e(se,xur),e(se,vM),e(vM,A2e),e(A2e,$ur),e(vM,kur),e(vM,WQ),e(WQ,Sur),e(vM,Rur),e(se,Pur),e(se,FM),e(FM,L2e),e(L2e,Bur),e(FM,Iur),e(FM,QQ),e(QQ,Nur),e(FM,qur),e(se,jur),e(se,TM),e(TM,y2e),e(y2e,Dur),e(TM,Gur),e(TM,HQ),e(HQ,Our),e(TM,Vur),e(se,Xur),e(se,MM),e(MM,x2e),e(x2e,zur),e(MM,Wur),e(MM,UQ),e(UQ,Qur),e(MM,Hur),e(se,Uur),e(se,EM),e(EM,$2e),e($2e,Jur),e(EM,Yur),e(EM,JQ),e(JQ,Kur),e(EM,Zur),e(se,e1r),e(se,CM),e(CM,k2e),e(k2e,o1r),e(CM,r1r),e(CM,YQ),e(YQ,t1r),e(CM,a1r),e(se,n1r),e(se,wM),e(wM,S2e),e(S2e,s1r),e(wM,l1r),e(wM,KQ),e(KQ,i1r),e(wM,d1r),e(se,c1r),e(se,AM),e(AM,R2e),e(R2e,f1r),e(AM,m1r),e(AM,ZQ),e(ZQ,g1r),e(AM,h1r),e(se,p1r),e(se,LM),e(LM,P2e),e(P2e,_1r),e(LM,u1r),e(LM,eH),e(eH,b1r),e(LM,v1r),e(se,F1r),e(se,yM),e(yM,B2e),e(B2e,T1r),e(yM,M1r),e(yM,oH),e(oH,E1r),e(yM,C1r),e(Ar,w1r),M(xM,Ar,null),b(f,fDe,u),b(f,Ud,u),e(Ud,$M),e($M,I2e),M(S8,I2e,null),e(Ud,A1r),e(Ud,N2e),e(N2e,L1r),b(f,mDe,u),b(f,Zo,u),M(R8,Zo,null),e(Zo,y1r),e(Zo,Jd),e(Jd,x1r),e(Jd,rH),e(rH,$1r),e(Jd,k1r),e(Jd,tH),e(tH,S1r),e(Jd,R1r),e(Zo,P1r),e(Zo,P8),e(P8,B1r),e(P8,q2e),e(q2e,I1r),e(P8,N1r),e(Zo,q1r),e(Zo,xt),M(B8,xt,null),e(xt,j1r),e(xt,j2e),e(j2e,D1r),e(xt,G1r),e(xt,Yd),e(Yd,O1r),e(Yd,D2e),e(D2e,V1r),e(Yd,X1r),e(Yd,aH),e(aH,z1r),e(Yd,W1r),e(xt,Q1r),M(kM,xt,null),e(Zo,H1r),e(Zo,Lr),M(I8,Lr,null),e(Lr,U1r),e(Lr,G2e),e(G2e,J1r),e(Lr,Y1r),e(Lr,en),e(en,K1r),e(en,O2e),e(O2e,Z1r),e(en,e3r),e(en,V2e),e(V2e,o3r),e(en,r3r),e(en,X2e),e(X2e,t3r),e(en,a3r),e(Lr,n3r),e(Lr,Me),e(Me,SM),e(SM,z2e),e(z2e,s3r),e(SM,l3r),e(SM,nH),e(nH,i3r),e(SM,d3r),e(Me,c3r),e(Me,RM),e(RM,W2e),e(W2e,f3r),e(RM,m3r),e(RM,sH),e(sH,g3r),e(RM,h3r),e(Me,p3r),e(Me,PM),e(PM,Q2e),e(Q2e,_3r),e(PM,u3r),e(PM,lH),e(lH,b3r),e(PM,v3r),e(Me,F3r),e(Me,BM),e(BM,H2e),e(H2e,T3r),e(BM,M3r),e(BM,iH),e(iH,E3r),e(BM,C3r),e(Me,w3r),e(Me,IM),e(IM,U2e),e(U2e,A3r),e(IM,L3r),e(IM,dH),e(dH,y3r),e(IM,x3r),e(Me,$3r),e(Me,NM),e(NM,J2e),e(J2e,k3r),e(NM,S3r),e(NM,cH),e(cH,R3r),e(NM,P3r),e(Me,B3r),e(Me,qM),e(qM,Y2e),e(Y2e,I3r),e(qM,N3r),e(qM,fH),e(fH,q3r),e(qM,j3r),e(Me,D3r),e(Me,jM),e(jM,K2e),e(K2e,G3r),e(jM,O3r),e(jM,mH),e(mH,V3r),e(jM,X3r),e(Me,z3r),e(Me,DM),e(DM,Z2e),e(Z2e,W3r),e(DM,Q3r),e(DM,gH),e(gH,H3r),e(DM,U3r),e(Me,J3r),e(Me,GM),e(GM,eve),e(eve,Y3r),e(GM,K3r),e(GM,hH),e(hH,Z3r),e(GM,ebr),e(Me,obr),e(Me,OM),e(OM,ove),e(ove,rbr),e(OM,tbr),e(OM,pH),e(pH,abr),e(OM,nbr),e(Me,sbr),e(Me,VM),e(VM,rve),e(rve,lbr),e(VM,ibr),e(VM,_H),e(_H,dbr),e(VM,cbr),e(Me,fbr),e(Me,XM),e(XM,tve),e(tve,mbr),e(XM,gbr),e(XM,uH),e(uH,hbr),e(XM,pbr),e(Lr,_br),M(zM,Lr,null),b(f,gDe,u),b(f,Kd,u),e(Kd,WM),e(WM,ave),M(N8,ave,null),e(Kd,ubr),e(Kd,nve),e(nve,bbr),b(f,hDe,u),b(f,er,u),M(q8,er,null),e(er,vbr),e(er,Zd),e(Zd,Fbr),e(Zd,bH),e(bH,Tbr),e(Zd,Mbr),e(Zd,vH),e(vH,Ebr),e(Zd,Cbr),e(er,wbr),e(er,j8),e(j8,Abr),e(j8,sve),e(sve,Lbr),e(j8,ybr),e(er,xbr),e(er,$t),M(D8,$t,null),e($t,$br),e($t,lve),e(lve,kbr),e($t,Sbr),e($t,ec),e(ec,Rbr),e(ec,ive),e(ive,Pbr),e(ec,Bbr),e(ec,FH),e(FH,Ibr),e(ec,Nbr),e($t,qbr),M(QM,$t,null),e(er,jbr),e(er,yr),M(G8,yr,null),e(yr,Dbr),e(yr,dve),e(dve,Gbr),e(yr,Obr),e(yr,on),e(on,Vbr),e(on,cve),e(cve,Xbr),e(on,zbr),e(on,fve),e(fve,Wbr),e(on,Qbr),e(on,mve),e(mve,Hbr),e(on,Ubr),e(yr,Jbr),e(yr,rn),e(rn,HM),e(HM,gve),e(gve,Ybr),e(HM,Kbr),e(HM,TH),e(TH,Zbr),e(HM,e2r),e(rn,o2r),e(rn,UM),e(UM,hve),e(hve,r2r),e(UM,t2r),e(UM,MH),e(MH,a2r),e(UM,n2r),e(rn,s2r),e(rn,JM),e(JM,pve),e(pve,l2r),e(JM,i2r),e(JM,EH),e(EH,d2r),e(JM,c2r),e(rn,f2r),e(rn,YM),e(YM,_ve),e(_ve,m2r),e(YM,g2r),e(YM,CH),e(CH,h2r),e(YM,p2r),e(yr,_2r),M(KM,yr,null),b(f,pDe,u),b(f,oc,u),e(oc,ZM),e(ZM,uve),M(O8,uve,null),e(oc,u2r),e(oc,bve),e(bve,b2r),b(f,_De,u),b(f,or,u),M(V8,or,null),e(or,v2r),e(or,rc),e(rc,F2r),e(rc,wH),e(wH,T2r),e(rc,M2r),e(rc,AH),e(AH,E2r),e(rc,C2r),e(or,w2r),e(or,X8),e(X8,A2r),e(X8,vve),e(vve,L2r),e(X8,y2r),e(or,x2r),e(or,kt),M(z8,kt,null),e(kt,$2r),e(kt,Fve),e(Fve,k2r),e(kt,S2r),e(kt,tc),e(tc,R2r),e(tc,Tve),e(Tve,P2r),e(tc,B2r),e(tc,LH),e(LH,I2r),e(tc,N2r),e(kt,q2r),M(e4,kt,null),e(or,j2r),e(or,xr),M(W8,xr,null),e(xr,D2r),e(xr,Mve),e(Mve,G2r),e(xr,O2r),e(xr,tn),e(tn,V2r),e(tn,Eve),e(Eve,X2r),e(tn,z2r),e(tn,Cve),e(Cve,W2r),e(tn,Q2r),e(tn,wve),e(wve,H2r),e(tn,U2r),e(xr,J2r),e(xr,ie),e(ie,o4),e(o4,Ave),e(Ave,Y2r),e(o4,K2r),e(o4,yH),e(yH,Z2r),e(o4,evr),e(ie,ovr),e(ie,r4),e(r4,Lve),e(Lve,rvr),e(r4,tvr),e(r4,xH),e(xH,avr),e(r4,nvr),e(ie,svr),e(ie,t4),e(t4,yve),e(yve,lvr),e(t4,ivr),e(t4,$H),e($H,dvr),e(t4,cvr),e(ie,fvr),e(ie,a4),e(a4,xve),e(xve,mvr),e(a4,gvr),e(a4,kH),e(kH,hvr),e(a4,pvr),e(ie,_vr),e(ie,n4),e(n4,$ve),e($ve,uvr),e(n4,bvr),e(n4,SH),e(SH,vvr),e(n4,Fvr),e(ie,Tvr),e(ie,s4),e(s4,kve),e(kve,Mvr),e(s4,Evr),e(s4,RH),e(RH,Cvr),e(s4,wvr),e(ie,Avr),e(ie,l4),e(l4,Sve),e(Sve,Lvr),e(l4,yvr),e(l4,PH),e(PH,xvr),e(l4,$vr),e(ie,kvr),e(ie,i4),e(i4,Rve),e(Rve,Svr),e(i4,Rvr),e(i4,BH),e(BH,Pvr),e(i4,Bvr),e(ie,Ivr),e(ie,d4),e(d4,Pve),e(Pve,Nvr),e(d4,qvr),e(d4,IH),e(IH,jvr),e(d4,Dvr),e(ie,Gvr),e(ie,c4),e(c4,Bve),e(Bve,Ovr),e(c4,Vvr),e(c4,NH),e(NH,Xvr),e(c4,zvr),e(ie,Wvr),e(ie,f4),e(f4,Ive),e(Ive,Qvr),e(f4,Hvr),e(f4,qH),e(qH,Uvr),e(f4,Jvr),e(ie,Yvr),e(ie,m4),e(m4,Nve),e(Nve,Kvr),e(m4,Zvr),e(m4,jH),e(jH,eFr),e(m4,oFr),e(ie,rFr),e(ie,g4),e(g4,qve),e(qve,tFr),e(g4,aFr),e(g4,DH),e(DH,nFr),e(g4,sFr),e(ie,lFr),e(ie,h4),e(h4,jve),e(jve,iFr),e(h4,dFr),e(h4,GH),e(GH,cFr),e(h4,fFr),e(ie,mFr),e(ie,p4),e(p4,Dve),e(Dve,gFr),e(p4,hFr),e(p4,OH),e(OH,pFr),e(p4,_Fr),e(ie,uFr),e(ie,_4),e(_4,Gve),e(Gve,bFr),e(_4,vFr),e(_4,VH),e(VH,FFr),e(_4,TFr),e(ie,MFr),e(ie,u4),e(u4,Ove),e(Ove,EFr),e(u4,CFr),e(u4,XH),e(XH,wFr),e(u4,AFr),e(ie,LFr),e(ie,b4),e(b4,Vve),e(Vve,yFr),e(b4,xFr),e(b4,zH),e(zH,$Fr),e(b4,kFr),e(ie,SFr),e(ie,v4),e(v4,Xve),e(Xve,RFr),e(v4,PFr),e(v4,WH),e(WH,BFr),e(v4,IFr),e(ie,NFr),e(ie,F4),e(F4,zve),e(zve,qFr),e(F4,jFr),e(F4,QH),e(QH,DFr),e(F4,GFr),e(xr,OFr),M(T4,xr,null),b(f,uDe,u),b(f,ac,u),e(ac,M4),e(M4,Wve),M(Q8,Wve,null),e(ac,VFr),e(ac,Qve),e(Qve,XFr),b(f,bDe,u),b(f,rr,u),M(H8,rr,null),e(rr,zFr),e(rr,nc),e(nc,WFr),e(nc,HH),e(HH,QFr),e(nc,HFr),e(nc,UH),e(UH,UFr),e(nc,JFr),e(rr,YFr),e(rr,U8),e(U8,KFr),e(U8,Hve),e(Hve,ZFr),e(U8,eTr),e(rr,oTr),e(rr,St),M(J8,St,null),e(St,rTr),e(St,Uve),e(Uve,tTr),e(St,aTr),e(St,sc),e(sc,nTr),e(sc,Jve),e(Jve,sTr),e(sc,lTr),e(sc,JH),e(JH,iTr),e(sc,dTr),e(St,cTr),M(E4,St,null),e(rr,fTr),e(rr,$r),M(Y8,$r,null),e($r,mTr),e($r,Yve),e(Yve,gTr),e($r,hTr),e($r,an),e(an,pTr),e(an,Kve),e(Kve,_Tr),e(an,uTr),e(an,Zve),e(Zve,bTr),e(an,vTr),e(an,eFe),e(eFe,FTr),e(an,TTr),e($r,MTr),e($r,Le),e(Le,C4),e(C4,oFe),e(oFe,ETr),e(C4,CTr),e(C4,YH),e(YH,wTr),e(C4,ATr),e(Le,LTr),e(Le,w4),e(w4,rFe),e(rFe,yTr),e(w4,xTr),e(w4,KH),e(KH,$Tr),e(w4,kTr),e(Le,STr),e(Le,A4),e(A4,tFe),e(tFe,RTr),e(A4,PTr),e(A4,ZH),e(ZH,BTr),e(A4,ITr),e(Le,NTr),e(Le,L4),e(L4,aFe),e(aFe,qTr),e(L4,jTr),e(L4,eU),e(eU,DTr),e(L4,GTr),e(Le,OTr),e(Le,y4),e(y4,nFe),e(nFe,VTr),e(y4,XTr),e(y4,oU),e(oU,zTr),e(y4,WTr),e(Le,QTr),e(Le,x4),e(x4,sFe),e(sFe,HTr),e(x4,UTr),e(x4,rU),e(rU,JTr),e(x4,YTr),e(Le,KTr),e(Le,$4),e($4,lFe),e(lFe,ZTr),e($4,e7r),e($4,tU),e(tU,o7r),e($4,r7r),e(Le,t7r),e(Le,k4),e(k4,iFe),e(iFe,a7r),e(k4,n7r),e(k4,aU),e(aU,s7r),e(k4,l7r),e(Le,i7r),e(Le,S4),e(S4,dFe),e(dFe,d7r),e(S4,c7r),e(S4,nU),e(nU,f7r),e(S4,m7r),e(Le,g7r),e(Le,R4),e(R4,cFe),e(cFe,h7r),e(R4,p7r),e(R4,sU),e(sU,_7r),e(R4,u7r),e($r,b7r),M(P4,$r,null),b(f,vDe,u),b(f,lc,u),e(lc,B4),e(B4,fFe),M(K8,fFe,null),e(lc,v7r),e(lc,mFe),e(mFe,F7r),b(f,FDe,u),b(f,tr,u),M(Z8,tr,null),e(tr,T7r),e(tr,ic),e(ic,M7r),e(ic,lU),e(lU,E7r),e(ic,C7r),e(ic,iU),e(iU,w7r),e(ic,A7r),e(tr,L7r),e(tr,e9),e(e9,y7r),e(e9,gFe),e(gFe,x7r),e(e9,$7r),e(tr,k7r),e(tr,Rt),M(o9,Rt,null),e(Rt,S7r),e(Rt,hFe),e(hFe,R7r),e(Rt,P7r),e(Rt,dc),e(dc,B7r),e(dc,pFe),e(pFe,I7r),e(dc,N7r),e(dc,dU),e(dU,q7r),e(dc,j7r),e(Rt,D7r),M(I4,Rt,null),e(tr,G7r),e(tr,kr),M(r9,kr,null),e(kr,O7r),e(kr,_Fe),e(_Fe,V7r),e(kr,X7r),e(kr,nn),e(nn,z7r),e(nn,uFe),e(uFe,W7r),e(nn,Q7r),e(nn,bFe),e(bFe,H7r),e(nn,U7r),e(nn,vFe),e(vFe,J7r),e(nn,Y7r),e(kr,K7r),e(kr,oe),e(oe,N4),e(N4,FFe),e(FFe,Z7r),e(N4,eMr),e(N4,cU),e(cU,oMr),e(N4,rMr),e(oe,tMr),e(oe,q4),e(q4,TFe),e(TFe,aMr),e(q4,nMr),e(q4,fU),e(fU,sMr),e(q4,lMr),e(oe,iMr),e(oe,j4),e(j4,MFe),e(MFe,dMr),e(j4,cMr),e(j4,mU),e(mU,fMr),e(j4,mMr),e(oe,gMr),e(oe,D4),e(D4,EFe),e(EFe,hMr),e(D4,pMr),e(D4,gU),e(gU,_Mr),e(D4,uMr),e(oe,bMr),e(oe,G4),e(G4,CFe),e(CFe,vMr),e(G4,FMr),e(G4,hU),e(hU,TMr),e(G4,MMr),e(oe,EMr),e(oe,O4),e(O4,wFe),e(wFe,CMr),e(O4,wMr),e(O4,pU),e(pU,AMr),e(O4,LMr),e(oe,yMr),e(oe,V4),e(V4,AFe),e(AFe,xMr),e(V4,$Mr),e(V4,_U),e(_U,kMr),e(V4,SMr),e(oe,RMr),e(oe,X4),e(X4,LFe),e(LFe,PMr),e(X4,BMr),e(X4,uU),e(uU,IMr),e(X4,NMr),e(oe,qMr),e(oe,z4),e(z4,yFe),e(yFe,jMr),e(z4,DMr),e(z4,bU),e(bU,GMr),e(z4,OMr),e(oe,VMr),e(oe,W4),e(W4,xFe),e(xFe,XMr),e(W4,zMr),e(W4,vU),e(vU,WMr),e(W4,QMr),e(oe,HMr),e(oe,Q4),e(Q4,$Fe),e($Fe,UMr),e(Q4,JMr),e(Q4,FU),e(FU,YMr),e(Q4,KMr),e(oe,ZMr),e(oe,H4),e(H4,kFe),e(kFe,e4r),e(H4,o4r),e(H4,TU),e(TU,r4r),e(H4,t4r),e(oe,a4r),e(oe,U4),e(U4,SFe),e(SFe,n4r),e(U4,s4r),e(U4,MU),e(MU,l4r),e(U4,i4r),e(oe,d4r),e(oe,J4),e(J4,RFe),e(RFe,c4r),e(J4,f4r),e(J4,EU),e(EU,m4r),e(J4,g4r),e(oe,h4r),e(oe,Y4),e(Y4,PFe),e(PFe,p4r),e(Y4,_4r),e(Y4,CU),e(CU,u4r),e(Y4,b4r),e(oe,v4r),e(oe,K4),e(K4,BFe),e(BFe,F4r),e(K4,T4r),e(K4,wU),e(wU,M4r),e(K4,E4r),e(oe,C4r),e(oe,Z4),e(Z4,IFe),e(IFe,w4r),e(Z4,A4r),e(Z4,AU),e(AU,L4r),e(Z4,y4r),e(oe,x4r),e(oe,eE),e(eE,NFe),e(NFe,$4r),e(eE,k4r),e(eE,LU),e(LU,S4r),e(eE,R4r),e(oe,P4r),e(oe,oE),e(oE,qFe),e(qFe,B4r),e(oE,I4r),e(oE,yU),e(yU,N4r),e(oE,q4r),e(oe,j4r),e(oe,rE),e(rE,jFe),e(jFe,D4r),e(rE,G4r),e(rE,xU),e(xU,O4r),e(rE,V4r),e(oe,X4r),e(oe,tE),e(tE,DFe),e(DFe,z4r),e(tE,W4r),e(tE,$U),e($U,Q4r),e(tE,H4r),e(oe,U4r),e(oe,aE),e(aE,GFe),e(GFe,J4r),e(aE,Y4r),e(aE,kU),e(kU,K4r),e(aE,Z4r),e(oe,eEr),e(oe,nE),e(nE,OFe),e(OFe,oEr),e(nE,rEr),e(nE,SU),e(SU,tEr),e(nE,aEr),e(oe,nEr),e(oe,sE),e(sE,VFe),e(VFe,sEr),e(sE,lEr),e(sE,RU),e(RU,iEr),e(sE,dEr),e(oe,cEr),e(oe,lE),e(lE,XFe),e(XFe,fEr),e(lE,mEr),e(lE,PU),e(PU,gEr),e(lE,hEr),e(oe,pEr),e(oe,iE),e(iE,zFe),e(zFe,_Er),e(iE,uEr),e(iE,BU),e(BU,bEr),e(iE,vEr),e(kr,FEr),M(dE,kr,null),b(f,TDe,u),b(f,cc,u),e(cc,cE),e(cE,WFe),M(t9,WFe,null),e(cc,TEr),e(cc,QFe),e(QFe,MEr),b(f,MDe,u),b(f,ar,u),M(a9,ar,null),e(ar,EEr),e(ar,fc),e(fc,CEr),e(fc,IU),e(IU,wEr),e(fc,AEr),e(fc,NU),e(NU,LEr),e(fc,yEr),e(ar,xEr),e(ar,n9),e(n9,$Er),e(n9,HFe),e(HFe,kEr),e(n9,SEr),e(ar,REr),e(ar,Pt),M(s9,Pt,null),e(Pt,PEr),e(Pt,UFe),e(UFe,BEr),e(Pt,IEr),e(Pt,mc),e(mc,NEr),e(mc,JFe),e(JFe,qEr),e(mc,jEr),e(mc,qU),e(qU,DEr),e(mc,GEr),e(Pt,OEr),M(fE,Pt,null),e(ar,VEr),e(ar,Sr),M(l9,Sr,null),e(Sr,XEr),e(Sr,YFe),e(YFe,zEr),e(Sr,WEr),e(Sr,sn),e(sn,QEr),e(sn,KFe),e(KFe,HEr),e(sn,UEr),e(sn,ZFe),e(ZFe,JEr),e(sn,YEr),e(sn,eTe),e(eTe,KEr),e(sn,ZEr),e(Sr,eCr),e(Sr,pe),e(pe,mE),e(mE,oTe),e(oTe,oCr),e(mE,rCr),e(mE,jU),e(jU,tCr),e(mE,aCr),e(pe,nCr),e(pe,gE),e(gE,rTe),e(rTe,sCr),e(gE,lCr),e(gE,DU),e(DU,iCr),e(gE,dCr),e(pe,cCr),e(pe,hE),e(hE,tTe),e(tTe,fCr),e(hE,mCr),e(hE,GU),e(GU,gCr),e(hE,hCr),e(pe,pCr),e(pe,pE),e(pE,aTe),e(aTe,_Cr),e(pE,uCr),e(pE,OU),e(OU,bCr),e(pE,vCr),e(pe,FCr),e(pe,_E),e(_E,nTe),e(nTe,TCr),e(_E,MCr),e(_E,VU),e(VU,ECr),e(_E,CCr),e(pe,wCr),e(pe,uE),e(uE,sTe),e(sTe,ACr),e(uE,LCr),e(uE,XU),e(XU,yCr),e(uE,xCr),e(pe,$Cr),e(pe,bE),e(bE,lTe),e(lTe,kCr),e(bE,SCr),e(bE,zU),e(zU,RCr),e(bE,PCr),e(pe,BCr),e(pe,vE),e(vE,iTe),e(iTe,ICr),e(vE,NCr),e(vE,WU),e(WU,qCr),e(vE,jCr),e(pe,DCr),e(pe,FE),e(FE,dTe),e(dTe,GCr),e(FE,OCr),e(FE,QU),e(QU,VCr),e(FE,XCr),e(pe,zCr),e(pe,TE),e(TE,cTe),e(cTe,WCr),e(TE,QCr),e(TE,HU),e(HU,HCr),e(TE,UCr),e(pe,JCr),e(pe,ME),e(ME,fTe),e(fTe,YCr),e(ME,KCr),e(ME,UU),e(UU,ZCr),e(ME,e5r),e(pe,o5r),e(pe,EE),e(EE,mTe),e(mTe,r5r),e(EE,t5r),e(EE,JU),e(JU,a5r),e(EE,n5r),e(pe,s5r),e(pe,CE),e(CE,gTe),e(gTe,l5r),e(CE,i5r),e(CE,YU),e(YU,d5r),e(CE,c5r),e(pe,f5r),e(pe,wE),e(wE,hTe),e(hTe,m5r),e(wE,g5r),e(wE,KU),e(KU,h5r),e(wE,p5r),e(pe,_5r),e(pe,AE),e(AE,pTe),e(pTe,u5r),e(AE,b5r),e(AE,ZU),e(ZU,v5r),e(AE,F5r),e(pe,T5r),e(pe,LE),e(LE,_Te),e(_Te,M5r),e(LE,E5r),e(LE,eJ),e(eJ,C5r),e(LE,w5r),e(pe,A5r),e(pe,yE),e(yE,uTe),e(uTe,L5r),e(yE,y5r),e(yE,oJ),e(oJ,x5r),e(yE,$5r),e(Sr,k5r),M(xE,Sr,null),b(f,EDe,u),b(f,gc,u),e(gc,$E),e($E,bTe),M(i9,bTe,null),e(gc,S5r),e(gc,vTe),e(vTe,R5r),b(f,CDe,u),b(f,nr,u),M(d9,nr,null),e(nr,P5r),e(nr,hc),e(hc,B5r),e(hc,rJ),e(rJ,I5r),e(hc,N5r),e(hc,tJ),e(tJ,q5r),e(hc,j5r),e(nr,D5r),e(nr,c9),e(c9,G5r),e(c9,FTe),e(FTe,O5r),e(c9,V5r),e(nr,X5r),e(nr,Bt),M(f9,Bt,null),e(Bt,z5r),e(Bt,TTe),e(TTe,W5r),e(Bt,Q5r),e(Bt,pc),e(pc,H5r),e(pc,MTe),e(MTe,U5r),e(pc,J5r),e(pc,aJ),e(aJ,Y5r),e(pc,K5r),e(Bt,Z5r),M(kE,Bt,null),e(nr,e0r),e(nr,Rr),M(m9,Rr,null),e(Rr,o0r),e(Rr,ETe),e(ETe,r0r),e(Rr,t0r),e(Rr,ln),e(ln,a0r),e(ln,CTe),e(CTe,n0r),e(ln,s0r),e(ln,wTe),e(wTe,l0r),e(ln,i0r),e(ln,ATe),e(ATe,d0r),e(ln,c0r),e(Rr,f0r),e(Rr,g9),e(g9,SE),e(SE,LTe),e(LTe,m0r),e(SE,g0r),e(SE,nJ),e(nJ,h0r),e(SE,p0r),e(g9,_0r),e(g9,RE),e(RE,yTe),e(yTe,u0r),e(RE,b0r),e(RE,sJ),e(sJ,v0r),e(RE,F0r),e(Rr,T0r),M(PE,Rr,null),b(f,wDe,u),b(f,_c,u),e(_c,BE),e(BE,xTe),M(h9,xTe,null),e(_c,M0r),e(_c,$Te),e($Te,E0r),b(f,ADe,u),b(f,sr,u),M(p9,sr,null),e(sr,C0r),e(sr,uc),e(uc,w0r),e(uc,lJ),e(lJ,A0r),e(uc,L0r),e(uc,iJ),e(iJ,y0r),e(uc,x0r),e(sr,$0r),e(sr,_9),e(_9,k0r),e(_9,kTe),e(kTe,S0r),e(_9,R0r),e(sr,P0r),e(sr,It),M(u9,It,null),e(It,B0r),e(It,STe),e(STe,I0r),e(It,N0r),e(It,bc),e(bc,q0r),e(bc,RTe),e(RTe,j0r),e(bc,D0r),e(bc,dJ),e(dJ,G0r),e(bc,O0r),e(It,V0r),M(IE,It,null),e(sr,X0r),e(sr,Pr),M(b9,Pr,null),e(Pr,z0r),e(Pr,PTe),e(PTe,W0r),e(Pr,Q0r),e(Pr,dn),e(dn,H0r),e(dn,BTe),e(BTe,U0r),e(dn,J0r),e(dn,ITe),e(ITe,Y0r),e(dn,K0r),e(dn,NTe),e(NTe,Z0r),e(dn,ewr),e(Pr,owr),e(Pr,qTe),e(qTe,NE),e(NE,jTe),e(jTe,rwr),e(NE,twr),e(NE,cJ),e(cJ,awr),e(NE,nwr),e(Pr,swr),M(qE,Pr,null),b(f,LDe,u),b(f,vc,u),e(vc,jE),e(jE,DTe),M(v9,DTe,null),e(vc,lwr),e(vc,GTe),e(GTe,iwr),b(f,yDe,u),b(f,lr,u),M(F9,lr,null),e(lr,dwr),e(lr,Fc),e(Fc,cwr),e(Fc,fJ),e(fJ,fwr),e(Fc,mwr),e(Fc,mJ),e(mJ,gwr),e(Fc,hwr),e(lr,pwr),e(lr,T9),e(T9,_wr),e(T9,OTe),e(OTe,uwr),e(T9,bwr),e(lr,vwr),e(lr,Nt),M(M9,Nt,null),e(Nt,Fwr),e(Nt,VTe),e(VTe,Twr),e(Nt,Mwr),e(Nt,Tc),e(Tc,Ewr),e(Tc,XTe),e(XTe,Cwr),e(Tc,wwr),e(Tc,gJ),e(gJ,Awr),e(Tc,Lwr),e(Nt,ywr),M(DE,Nt,null),e(lr,xwr),e(lr,Br),M(E9,Br,null),e(Br,$wr),e(Br,zTe),e(zTe,kwr),e(Br,Swr),e(Br,cn),e(cn,Rwr),e(cn,WTe),e(WTe,Pwr),e(cn,Bwr),e(cn,QTe),e(QTe,Iwr),e(cn,Nwr),e(cn,HTe),e(HTe,qwr),e(cn,jwr),e(Br,Dwr),e(Br,de),e(de,GE),e(GE,UTe),e(UTe,Gwr),e(GE,Owr),e(GE,hJ),e(hJ,Vwr),e(GE,Xwr),e(de,zwr),e(de,OE),e(OE,JTe),e(JTe,Wwr),e(OE,Qwr),e(OE,pJ),e(pJ,Hwr),e(OE,Uwr),e(de,Jwr),e(de,VE),e(VE,YTe),e(YTe,Ywr),e(VE,Kwr),e(VE,_J),e(_J,Zwr),e(VE,eAr),e(de,oAr),e(de,XE),e(XE,KTe),e(KTe,rAr),e(XE,tAr),e(XE,uJ),e(uJ,aAr),e(XE,nAr),e(de,sAr),e(de,zE),e(zE,ZTe),e(ZTe,lAr),e(zE,iAr),e(zE,bJ),e(bJ,dAr),e(zE,cAr),e(de,fAr),e(de,WE),e(WE,e7e),e(e7e,mAr),e(WE,gAr),e(WE,vJ),e(vJ,hAr),e(WE,pAr),e(de,_Ar),e(de,QE),e(QE,o7e),e(o7e,uAr),e(QE,bAr),e(QE,FJ),e(FJ,vAr),e(QE,FAr),e(de,TAr),e(de,HE),e(HE,r7e),e(r7e,MAr),e(HE,EAr),e(HE,TJ),e(TJ,CAr),e(HE,wAr),e(de,AAr),e(de,UE),e(UE,t7e),e(t7e,LAr),e(UE,yAr),e(UE,MJ),e(MJ,xAr),e(UE,$Ar),e(de,kAr),e(de,JE),e(JE,a7e),e(a7e,SAr),e(JE,RAr),e(JE,EJ),e(EJ,PAr),e(JE,BAr),e(de,IAr),e(de,YE),e(YE,n7e),e(n7e,NAr),e(YE,qAr),e(YE,CJ),e(CJ,jAr),e(YE,DAr),e(de,GAr),e(de,KE),e(KE,s7e),e(s7e,OAr),e(KE,VAr),e(KE,wJ),e(wJ,XAr),e(KE,zAr),e(de,WAr),e(de,ZE),e(ZE,l7e),e(l7e,QAr),e(ZE,HAr),e(ZE,AJ),e(AJ,UAr),e(ZE,JAr),e(de,YAr),e(de,eC),e(eC,i7e),e(i7e,KAr),e(eC,ZAr),e(eC,LJ),e(LJ,e6r),e(eC,o6r),e(de,r6r),e(de,oC),e(oC,d7e),e(d7e,t6r),e(oC,a6r),e(oC,yJ),e(yJ,n6r),e(oC,s6r),e(de,l6r),e(de,rC),e(rC,c7e),e(c7e,i6r),e(rC,d6r),e(rC,xJ),e(xJ,c6r),e(rC,f6r),e(de,m6r),e(de,tC),e(tC,f7e),e(f7e,g6r),e(tC,h6r),e(tC,$J),e($J,p6r),e(tC,_6r),e(de,u6r),e(de,aC),e(aC,m7e),e(m7e,b6r),e(aC,v6r),e(aC,kJ),e(kJ,F6r),e(aC,T6r),e(de,M6r),e(de,nC),e(nC,g7e),e(g7e,E6r),e(nC,C6r),e(nC,SJ),e(SJ,w6r),e(nC,A6r),e(de,L6r),e(de,sC),e(sC,h7e),e(h7e,y6r),e(sC,x6r),e(sC,RJ),e(RJ,$6r),e(sC,k6r),e(Br,S6r),M(lC,Br,null),b(f,xDe,u),b(f,Mc,u),e(Mc,iC),e(iC,p7e),M(C9,p7e,null),e(Mc,R6r),e(Mc,_7e),e(_7e,P6r),b(f,$De,u),b(f,ir,u),M(w9,ir,null),e(ir,B6r),e(ir,Ec),e(Ec,I6r),e(Ec,PJ),e(PJ,N6r),e(Ec,q6r),e(Ec,BJ),e(BJ,j6r),e(Ec,D6r),e(ir,G6r),e(ir,A9),e(A9,O6r),e(A9,u7e),e(u7e,V6r),e(A9,X6r),e(ir,z6r),e(ir,qt),M(L9,qt,null),e(qt,W6r),e(qt,b7e),e(b7e,Q6r),e(qt,H6r),e(qt,Cc),e(Cc,U6r),e(Cc,v7e),e(v7e,J6r),e(Cc,Y6r),e(Cc,IJ),e(IJ,K6r),e(Cc,Z6r),e(qt,eLr),M(dC,qt,null),e(ir,oLr),e(ir,Ir),M(y9,Ir,null),e(Ir,rLr),e(Ir,F7e),e(F7e,tLr),e(Ir,aLr),e(Ir,fn),e(fn,nLr),e(fn,T7e),e(T7e,sLr),e(fn,lLr),e(fn,M7e),e(M7e,iLr),e(fn,dLr),e(fn,E7e),e(E7e,cLr),e(fn,fLr),e(Ir,mLr),e(Ir,ce),e(ce,cC),e(cC,C7e),e(C7e,gLr),e(cC,hLr),e(cC,NJ),e(NJ,pLr),e(cC,_Lr),e(ce,uLr),e(ce,fC),e(fC,w7e),e(w7e,bLr),e(fC,vLr),e(fC,qJ),e(qJ,FLr),e(fC,TLr),e(ce,MLr),e(ce,mC),e(mC,A7e),e(A7e,ELr),e(mC,CLr),e(mC,jJ),e(jJ,wLr),e(mC,ALr),e(ce,LLr),e(ce,gC),e(gC,L7e),e(L7e,yLr),e(gC,xLr),e(gC,DJ),e(DJ,$Lr),e(gC,kLr),e(ce,SLr),e(ce,hC),e(hC,y7e),e(y7e,RLr),e(hC,PLr),e(hC,GJ),e(GJ,BLr),e(hC,ILr),e(ce,NLr),e(ce,pC),e(pC,x7e),e(x7e,qLr),e(pC,jLr),e(pC,OJ),e(OJ,DLr),e(pC,GLr),e(ce,OLr),e(ce,_C),e(_C,$7e),e($7e,VLr),e(_C,XLr),e(_C,VJ),e(VJ,zLr),e(_C,WLr),e(ce,QLr),e(ce,uC),e(uC,k7e),e(k7e,HLr),e(uC,ULr),e(uC,XJ),e(XJ,JLr),e(uC,YLr),e(ce,KLr),e(ce,bC),e(bC,S7e),e(S7e,ZLr),e(bC,eyr),e(bC,zJ),e(zJ,oyr),e(bC,ryr),e(ce,tyr),e(ce,vC),e(vC,R7e),e(R7e,ayr),e(vC,nyr),e(vC,WJ),e(WJ,syr),e(vC,lyr),e(ce,iyr),e(ce,FC),e(FC,P7e),e(P7e,dyr),e(FC,cyr),e(FC,QJ),e(QJ,fyr),e(FC,myr),e(ce,gyr),e(ce,TC),e(TC,B7e),e(B7e,hyr),e(TC,pyr),e(TC,HJ),e(HJ,_yr),e(TC,uyr),e(ce,byr),e(ce,MC),e(MC,I7e),e(I7e,vyr),e(MC,Fyr),e(MC,UJ),e(UJ,Tyr),e(MC,Myr),e(ce,Eyr),e(ce,EC),e(EC,N7e),e(N7e,Cyr),e(EC,wyr),e(EC,JJ),e(JJ,Ayr),e(EC,Lyr),e(ce,yyr),e(ce,CC),e(CC,q7e),e(q7e,xyr),e(CC,$yr),e(CC,YJ),e(YJ,kyr),e(CC,Syr),e(ce,Ryr),e(ce,wC),e(wC,j7e),e(j7e,Pyr),e(wC,Byr),e(wC,KJ),e(KJ,Iyr),e(wC,Nyr),e(ce,qyr),e(ce,AC),e(AC,D7e),e(D7e,jyr),e(AC,Dyr),e(AC,ZJ),e(ZJ,Gyr),e(AC,Oyr),e(ce,Vyr),e(ce,LC),e(LC,G7e),e(G7e,Xyr),e(LC,zyr),e(LC,eY),e(eY,Wyr),e(LC,Qyr),e(ce,Hyr),e(ce,yC),e(yC,O7e),e(O7e,Uyr),e(yC,Jyr),e(yC,oY),e(oY,Yyr),e(yC,Kyr),e(ce,Zyr),e(ce,xC),e(xC,V7e),e(V7e,e8r),e(xC,o8r),e(xC,rY),e(rY,r8r),e(xC,t8r),e(Ir,a8r),M($C,Ir,null),b(f,kDe,u),b(f,wc,u),e(wc,kC),e(kC,X7e),M(x9,X7e,null),e(wc,n8r),e(wc,z7e),e(z7e,s8r),b(f,SDe,u),b(f,dr,u),M($9,dr,null),e(dr,l8r),e(dr,Ac),e(Ac,i8r),e(Ac,tY),e(tY,d8r),e(Ac,c8r),e(Ac,aY),e(aY,f8r),e(Ac,m8r),e(dr,g8r),e(dr,k9),e(k9,h8r),e(k9,W7e),e(W7e,p8r),e(k9,_8r),e(dr,u8r),e(dr,jt),M(S9,jt,null),e(jt,b8r),e(jt,Q7e),e(Q7e,v8r),e(jt,F8r),e(jt,Lc),e(Lc,T8r),e(Lc,H7e),e(H7e,M8r),e(Lc,E8r),e(Lc,nY),e(nY,C8r),e(Lc,w8r),e(jt,A8r),M(SC,jt,null),e(dr,L8r),e(dr,Nr),M(R9,Nr,null),e(Nr,y8r),e(Nr,U7e),e(U7e,x8r),e(Nr,$8r),e(Nr,mn),e(mn,k8r),e(mn,J7e),e(J7e,S8r),e(mn,R8r),e(mn,Y7e),e(Y7e,P8r),e(mn,B8r),e(mn,K7e),e(K7e,I8r),e(mn,N8r),e(Nr,q8r),e(Nr,Z7e),e(Z7e,RC),e(RC,eMe),e(eMe,j8r),e(RC,D8r),e(RC,sY),e(sY,G8r),e(RC,O8r),e(Nr,V8r),M(PC,Nr,null),b(f,RDe,u),b(f,yc,u),e(yc,BC),e(BC,oMe),M(P9,oMe,null),e(yc,X8r),e(yc,rMe),e(rMe,z8r),b(f,PDe,u),b(f,cr,u),M(B9,cr,null),e(cr,W8r),e(cr,xc),e(xc,Q8r),e(xc,lY),e(lY,H8r),e(xc,U8r),e(xc,iY),e(iY,J8r),e(xc,Y8r),e(cr,K8r),e(cr,I9),e(I9,Z8r),e(I9,tMe),e(tMe,e9r),e(I9,o9r),e(cr,r9r),e(cr,Dt),M(N9,Dt,null),e(Dt,t9r),e(Dt,aMe),e(aMe,a9r),e(Dt,n9r),e(Dt,$c),e($c,s9r),e($c,nMe),e(nMe,l9r),e($c,i9r),e($c,dY),e(dY,d9r),e($c,c9r),e(Dt,f9r),M(IC,Dt,null),e(cr,m9r),e(cr,qr),M(q9,qr,null),e(qr,g9r),e(qr,sMe),e(sMe,h9r),e(qr,p9r),e(qr,gn),e(gn,_9r),e(gn,lMe),e(lMe,u9r),e(gn,b9r),e(gn,iMe),e(iMe,v9r),e(gn,F9r),e(gn,dMe),e(dMe,T9r),e(gn,M9r),e(qr,E9r),e(qr,cMe),e(cMe,NC),e(NC,fMe),e(fMe,C9r),e(NC,w9r),e(NC,cY),e(cY,A9r),e(NC,L9r),e(qr,y9r),M(qC,qr,null),b(f,BDe,u),b(f,kc,u),e(kc,jC),e(jC,mMe),M(j9,mMe,null),e(kc,x9r),e(kc,gMe),e(gMe,$9r),b(f,IDe,u),b(f,fr,u),M(D9,fr,null),e(fr,k9r),e(fr,Sc),e(Sc,S9r),e(Sc,fY),e(fY,R9r),e(Sc,P9r),e(Sc,mY),e(mY,B9r),e(Sc,I9r),e(fr,N9r),e(fr,G9),e(G9,q9r),e(G9,hMe),e(hMe,j9r),e(G9,D9r),e(fr,G9r),e(fr,Gt),M(O9,Gt,null),e(Gt,O9r),e(Gt,pMe),e(pMe,V9r),e(Gt,X9r),e(Gt,Rc),e(Rc,z9r),e(Rc,_Me),e(_Me,W9r),e(Rc,Q9r),e(Rc,gY),e(gY,H9r),e(Rc,U9r),e(Gt,J9r),M(DC,Gt,null),e(fr,Y9r),e(fr,jr),M(V9,jr,null),e(jr,K9r),e(jr,uMe),e(uMe,Z9r),e(jr,exr),e(jr,hn),e(hn,oxr),e(hn,bMe),e(bMe,rxr),e(hn,txr),e(hn,vMe),e(vMe,axr),e(hn,nxr),e(hn,FMe),e(FMe,sxr),e(hn,lxr),e(jr,ixr),e(jr,re),e(re,GC),e(GC,TMe),e(TMe,dxr),e(GC,cxr),e(GC,hY),e(hY,fxr),e(GC,mxr),e(re,gxr),e(re,OC),e(OC,MMe),e(MMe,hxr),e(OC,pxr),e(OC,pY),e(pY,_xr),e(OC,uxr),e(re,bxr),e(re,VC),e(VC,EMe),e(EMe,vxr),e(VC,Fxr),e(VC,_Y),e(_Y,Txr),e(VC,Mxr),e(re,Exr),e(re,XC),e(XC,CMe),e(CMe,Cxr),e(XC,wxr),e(XC,uY),e(uY,Axr),e(XC,Lxr),e(re,yxr),e(re,zC),e(zC,wMe),e(wMe,xxr),e(zC,$xr),e(zC,bY),e(bY,kxr),e(zC,Sxr),e(re,Rxr),e(re,WC),e(WC,AMe),e(AMe,Pxr),e(WC,Bxr),e(WC,vY),e(vY,Ixr),e(WC,Nxr),e(re,qxr),e(re,QC),e(QC,LMe),e(LMe,jxr),e(QC,Dxr),e(QC,FY),e(FY,Gxr),e(QC,Oxr),e(re,Vxr),e(re,HC),e(HC,yMe),e(yMe,Xxr),e(HC,zxr),e(HC,TY),e(TY,Wxr),e(HC,Qxr),e(re,Hxr),e(re,UC),e(UC,xMe),e(xMe,Uxr),e(UC,Jxr),e(UC,MY),e(MY,Yxr),e(UC,Kxr),e(re,Zxr),e(re,JC),e(JC,$Me),e($Me,e$r),e(JC,o$r),e(JC,EY),e(EY,r$r),e(JC,t$r),e(re,a$r),e(re,YC),e(YC,kMe),e(kMe,n$r),e(YC,s$r),e(YC,CY),e(CY,l$r),e(YC,i$r),e(re,d$r),e(re,KC),e(KC,SMe),e(SMe,c$r),e(KC,f$r),e(KC,wY),e(wY,m$r),e(KC,g$r),e(re,h$r),e(re,ZC),e(ZC,RMe),e(RMe,p$r),e(ZC,_$r),e(ZC,AY),e(AY,u$r),e(ZC,b$r),e(re,v$r),e(re,e5),e(e5,PMe),e(PMe,F$r),e(e5,T$r),e(e5,LY),e(LY,M$r),e(e5,E$r),e(re,C$r),e(re,o5),e(o5,BMe),e(BMe,w$r),e(o5,A$r),e(o5,yY),e(yY,L$r),e(o5,y$r),e(re,x$r),e(re,r5),e(r5,IMe),e(IMe,$$r),e(r5,k$r),e(r5,xY),e(xY,S$r),e(r5,R$r),e(re,P$r),e(re,t5),e(t5,NMe),e(NMe,B$r),e(t5,I$r),e(t5,$Y),e($Y,N$r),e(t5,q$r),e(re,j$r),e(re,a5),e(a5,qMe),e(qMe,D$r),e(a5,G$r),e(a5,kY),e(kY,O$r),e(a5,V$r),e(re,X$r),e(re,n5),e(n5,jMe),e(jMe,z$r),e(n5,W$r),e(n5,SY),e(SY,Q$r),e(n5,H$r),e(re,U$r),e(re,s5),e(s5,DMe),e(DMe,J$r),e(s5,Y$r),e(s5,RY),e(RY,K$r),e(s5,Z$r),e(re,ekr),e(re,l5),e(l5,GMe),e(GMe,okr),e(l5,rkr),e(l5,PY),e(PY,tkr),e(l5,akr),e(re,nkr),e(re,i5),e(i5,OMe),e(OMe,skr),e(i5,lkr),e(i5,BY),e(BY,ikr),e(i5,dkr),e(re,ckr),e(re,d5),e(d5,VMe),e(VMe,fkr),e(d5,mkr),e(d5,IY),e(IY,gkr),e(d5,hkr),e(re,pkr),e(re,c5),e(c5,XMe),e(XMe,_kr),e(c5,ukr),e(c5,NY),e(NY,bkr),e(c5,vkr),e(re,Fkr),e(re,f5),e(f5,zMe),e(zMe,Tkr),e(f5,Mkr),e(f5,qY),e(qY,Ekr),e(f5,Ckr),e(re,wkr),e(re,m5),e(m5,WMe),e(WMe,Akr),e(m5,Lkr),e(m5,jY),e(jY,ykr),e(m5,xkr),e(jr,$kr),M(g5,jr,null),b(f,NDe,u),b(f,Pc,u),e(Pc,h5),e(h5,QMe),M(X9,QMe,null),e(Pc,kkr),e(Pc,HMe),e(HMe,Skr),b(f,qDe,u),b(f,mr,u),M(z9,mr,null),e(mr,Rkr),e(mr,Bc),e(Bc,Pkr),e(Bc,DY),e(DY,Bkr),e(Bc,Ikr),e(Bc,GY),e(GY,Nkr),e(Bc,qkr),e(mr,jkr),e(mr,W9),e(W9,Dkr),e(W9,UMe),e(UMe,Gkr),e(W9,Okr),e(mr,Vkr),e(mr,Ot),M(Q9,Ot,null),e(Ot,Xkr),e(Ot,JMe),e(JMe,zkr),e(Ot,Wkr),e(Ot,Ic),e(Ic,Qkr),e(Ic,YMe),e(YMe,Hkr),e(Ic,Ukr),e(Ic,OY),e(OY,Jkr),e(Ic,Ykr),e(Ot,Kkr),M(p5,Ot,null),e(mr,Zkr),e(mr,Dr),M(H9,Dr,null),e(Dr,eSr),e(Dr,KMe),e(KMe,oSr),e(Dr,rSr),e(Dr,pn),e(pn,tSr),e(pn,ZMe),e(ZMe,aSr),e(pn,nSr),e(pn,e4e),e(e4e,sSr),e(pn,lSr),e(pn,o4e),e(o4e,iSr),e(pn,dSr),e(Dr,cSr),e(Dr,ye),e(ye,_5),e(_5,r4e),e(r4e,fSr),e(_5,mSr),e(_5,VY),e(VY,gSr),e(_5,hSr),e(ye,pSr),e(ye,u5),e(u5,t4e),e(t4e,_Sr),e(u5,uSr),e(u5,XY),e(XY,bSr),e(u5,vSr),e(ye,FSr),e(ye,b5),e(b5,a4e),e(a4e,TSr),e(b5,MSr),e(b5,zY),e(zY,ESr),e(b5,CSr),e(ye,wSr),e(ye,v5),e(v5,n4e),e(n4e,ASr),e(v5,LSr),e(v5,WY),e(WY,ySr),e(v5,xSr),e(ye,$Sr),e(ye,F5),e(F5,s4e),e(s4e,kSr),e(F5,SSr),e(F5,QY),e(QY,RSr),e(F5,PSr),e(ye,BSr),e(ye,T5),e(T5,l4e),e(l4e,ISr),e(T5,NSr),e(T5,HY),e(HY,qSr),e(T5,jSr),e(ye,DSr),e(ye,M5),e(M5,i4e),e(i4e,GSr),e(M5,OSr),e(M5,UY),e(UY,VSr),e(M5,XSr),e(ye,zSr),e(ye,E5),e(E5,d4e),e(d4e,WSr),e(E5,QSr),e(E5,JY),e(JY,HSr),e(E5,USr),e(ye,JSr),e(ye,C5),e(C5,c4e),e(c4e,YSr),e(C5,KSr),e(C5,YY),e(YY,ZSr),e(C5,eRr),e(ye,oRr),e(ye,w5),e(w5,f4e),e(f4e,rRr),e(w5,tRr),e(w5,KY),e(KY,aRr),e(w5,nRr),e(Dr,sRr),M(A5,Dr,null),b(f,jDe,u),b(f,Nc,u),e(Nc,L5),e(L5,m4e),M(U9,m4e,null),e(Nc,lRr),e(Nc,g4e),e(g4e,iRr),b(f,DDe,u),b(f,gr,u),M(J9,gr,null),e(gr,dRr),e(gr,qc),e(qc,cRr),e(qc,ZY),e(ZY,fRr),e(qc,mRr),e(qc,eK),e(eK,gRr),e(qc,hRr),e(gr,pRr),e(gr,Y9),e(Y9,_Rr),e(Y9,h4e),e(h4e,uRr),e(Y9,bRr),e(gr,vRr),e(gr,Vt),M(K9,Vt,null),e(Vt,FRr),e(Vt,p4e),e(p4e,TRr),e(Vt,MRr),e(Vt,jc),e(jc,ERr),e(jc,_4e),e(_4e,CRr),e(jc,wRr),e(jc,oK),e(oK,ARr),e(jc,LRr),e(Vt,yRr),M(y5,Vt,null),e(gr,xRr),e(gr,Gr),M(Z9,Gr,null),e(Gr,$Rr),e(Gr,u4e),e(u4e,kRr),e(Gr,SRr),e(Gr,_n),e(_n,RRr),e(_n,b4e),e(b4e,PRr),e(_n,BRr),e(_n,v4e),e(v4e,IRr),e(_n,NRr),e(_n,F4e),e(F4e,qRr),e(_n,jRr),e(Gr,DRr),e(Gr,Ee),e(Ee,x5),e(x5,T4e),e(T4e,GRr),e(x5,ORr),e(x5,rK),e(rK,VRr),e(x5,XRr),e(Ee,zRr),e(Ee,$5),e($5,M4e),e(M4e,WRr),e($5,QRr),e($5,tK),e(tK,HRr),e($5,URr),e(Ee,JRr),e(Ee,k5),e(k5,E4e),e(E4e,YRr),e(k5,KRr),e(k5,aK),e(aK,ZRr),e(k5,ePr),e(Ee,oPr),e(Ee,S5),e(S5,C4e),e(C4e,rPr),e(S5,tPr),e(S5,nK),e(nK,aPr),e(S5,nPr),e(Ee,sPr),e(Ee,R5),e(R5,w4e),e(w4e,lPr),e(R5,iPr),e(R5,sK),e(sK,dPr),e(R5,cPr),e(Ee,fPr),e(Ee,P5),e(P5,A4e),e(A4e,mPr),e(P5,gPr),e(P5,lK),e(lK,hPr),e(P5,pPr),e(Ee,_Pr),e(Ee,B5),e(B5,L4e),e(L4e,uPr),e(B5,bPr),e(B5,iK),e(iK,vPr),e(B5,FPr),e(Ee,TPr),e(Ee,I5),e(I5,y4e),e(y4e,MPr),e(I5,EPr),e(I5,dK),e(dK,CPr),e(I5,wPr),e(Ee,APr),e(Ee,N5),e(N5,x4e),e(x4e,LPr),e(N5,yPr),e(N5,cK),e(cK,xPr),e(N5,$Pr),e(Ee,kPr),e(Ee,q5),e(q5,$4e),e($4e,SPr),e(q5,RPr),e(q5,fK),e(fK,PPr),e(q5,BPr),e(Ee,IPr),e(Ee,j5),e(j5,k4e),e(k4e,NPr),e(j5,qPr),e(j5,mK),e(mK,jPr),e(j5,DPr),e(Ee,GPr),e(Ee,D5),e(D5,S4e),e(S4e,OPr),e(D5,VPr),e(D5,gK),e(gK,XPr),e(D5,zPr),e(Gr,WPr),M(G5,Gr,null),b(f,GDe,u),b(f,Dc,u),e(Dc,O5),e(O5,R4e),M(ex,R4e,null),e(Dc,QPr),e(Dc,P4e),e(P4e,HPr),b(f,ODe,u),b(f,hr,u),M(ox,hr,null),e(hr,UPr),e(hr,Gc),e(Gc,JPr),e(Gc,hK),e(hK,YPr),e(Gc,KPr),e(Gc,pK),e(pK,ZPr),e(Gc,eBr),e(hr,oBr),e(hr,rx),e(rx,rBr),e(rx,B4e),e(B4e,tBr),e(rx,aBr),e(hr,nBr),e(hr,Xt),M(tx,Xt,null),e(Xt,sBr),e(Xt,I4e),e(I4e,lBr),e(Xt,iBr),e(Xt,Oc),e(Oc,dBr),e(Oc,N4e),e(N4e,cBr),e(Oc,fBr),e(Oc,_K),e(_K,mBr),e(Oc,gBr),e(Xt,hBr),M(V5,Xt,null),e(hr,pBr),e(hr,Or),M(ax,Or,null),e(Or,_Br),e(Or,q4e),e(q4e,uBr),e(Or,bBr),e(Or,un),e(un,vBr),e(un,j4e),e(j4e,FBr),e(un,TBr),e(un,D4e),e(D4e,MBr),e(un,EBr),e(un,G4e),e(G4e,CBr),e(un,wBr),e(Or,ABr),e(Or,xe),e(xe,X5),e(X5,O4e),e(O4e,LBr),e(X5,yBr),e(X5,uK),e(uK,xBr),e(X5,$Br),e(xe,kBr),e(xe,z5),e(z5,V4e),e(V4e,SBr),e(z5,RBr),e(z5,bK),e(bK,PBr),e(z5,BBr),e(xe,IBr),e(xe,W5),e(W5,X4e),e(X4e,NBr),e(W5,qBr),e(W5,vK),e(vK,jBr),e(W5,DBr),e(xe,GBr),e(xe,Q5),e(Q5,z4e),e(z4e,OBr),e(Q5,VBr),e(Q5,FK),e(FK,XBr),e(Q5,zBr),e(xe,WBr),e(xe,H5),e(H5,W4e),e(W4e,QBr),e(H5,HBr),e(H5,TK),e(TK,UBr),e(H5,JBr),e(xe,YBr),e(xe,U5),e(U5,Q4e),e(Q4e,KBr),e(U5,ZBr),e(U5,MK),e(MK,eIr),e(U5,oIr),e(xe,rIr),e(xe,J5),e(J5,H4e),e(H4e,tIr),e(J5,aIr),e(J5,EK),e(EK,nIr),e(J5,sIr),e(xe,lIr),e(xe,Y5),e(Y5,U4e),e(U4e,iIr),e(Y5,dIr),e(Y5,CK),e(CK,cIr),e(Y5,fIr),e(xe,mIr),e(xe,K5),e(K5,J4e),e(J4e,gIr),e(K5,hIr),e(K5,wK),e(wK,pIr),e(K5,_Ir),e(xe,uIr),e(xe,Z5),e(Z5,Y4e),e(Y4e,bIr),e(Z5,vIr),e(Z5,AK),e(AK,FIr),e(Z5,TIr),e(Or,MIr),M(e0,Or,null),b(f,VDe,u),b(f,Vc,u),e(Vc,o0),e(o0,K4e),M(nx,K4e,null),e(Vc,EIr),e(Vc,Z4e),e(Z4e,CIr),b(f,XDe,u),b(f,pr,u),M(sx,pr,null),e(pr,wIr),e(pr,Xc),e(Xc,AIr),e(Xc,LK),e(LK,LIr),e(Xc,yIr),e(Xc,yK),e(yK,xIr),e(Xc,$Ir),e(pr,kIr),e(pr,lx),e(lx,SIr),e(lx,eEe),e(eEe,RIr),e(lx,PIr),e(pr,BIr),e(pr,zt),M(ix,zt,null),e(zt,IIr),e(zt,oEe),e(oEe,NIr),e(zt,qIr),e(zt,zc),e(zc,jIr),e(zc,rEe),e(rEe,DIr),e(zc,GIr),e(zc,xK),e(xK,OIr),e(zc,VIr),e(zt,XIr),M(r0,zt,null),e(pr,zIr),e(pr,Vr),M(dx,Vr,null),e(Vr,WIr),e(Vr,tEe),e(tEe,QIr),e(Vr,HIr),e(Vr,bn),e(bn,UIr),e(bn,aEe),e(aEe,JIr),e(bn,YIr),e(bn,nEe),e(nEe,KIr),e(bn,ZIr),e(bn,sEe),e(sEe,eNr),e(bn,oNr),e(Vr,rNr),e(Vr,Pe),e(Pe,t0),e(t0,lEe),e(lEe,tNr),e(t0,aNr),e(t0,$K),e($K,nNr),e(t0,sNr),e(Pe,lNr),e(Pe,a0),e(a0,iEe),e(iEe,iNr),e(a0,dNr),e(a0,kK),e(kK,cNr),e(a0,fNr),e(Pe,mNr),e(Pe,n0),e(n0,dEe),e(dEe,gNr),e(n0,hNr),e(n0,SK),e(SK,pNr),e(n0,_Nr),e(Pe,uNr),e(Pe,s0),e(s0,cEe),e(cEe,bNr),e(s0,vNr),e(s0,RK),e(RK,FNr),e(s0,TNr),e(Pe,MNr),e(Pe,l0),e(l0,fEe),e(fEe,ENr),e(l0,CNr),e(l0,PK),e(PK,wNr),e(l0,ANr),e(Pe,LNr),e(Pe,i0),e(i0,mEe),e(mEe,yNr),e(i0,xNr),e(i0,BK),e(BK,$Nr),e(i0,kNr),e(Pe,SNr),e(Pe,d0),e(d0,gEe),e(gEe,RNr),e(d0,PNr),e(d0,IK),e(IK,BNr),e(d0,INr),e(Pe,NNr),e(Pe,c0),e(c0,hEe),e(hEe,qNr),e(c0,jNr),e(c0,NK),e(NK,DNr),e(c0,GNr),e(Pe,ONr),e(Pe,f0),e(f0,pEe),e(pEe,VNr),e(f0,XNr),e(f0,qK),e(qK,zNr),e(f0,WNr),e(Vr,QNr),M(m0,Vr,null),b(f,zDe,u),b(f,Wc,u),e(Wc,g0),e(g0,_Ee),M(cx,_Ee,null),e(Wc,HNr),e(Wc,uEe),e(uEe,UNr),b(f,WDe,u),b(f,_r,u),M(fx,_r,null),e(_r,JNr),e(_r,Qc),e(Qc,YNr),e(Qc,jK),e(jK,KNr),e(Qc,ZNr),e(Qc,DK),e(DK,eqr),e(Qc,oqr),e(_r,rqr),e(_r,mx),e(mx,tqr),e(mx,bEe),e(bEe,aqr),e(mx,nqr),e(_r,sqr),e(_r,Wt),M(gx,Wt,null),e(Wt,lqr),e(Wt,vEe),e(vEe,iqr),e(Wt,dqr),e(Wt,Hc),e(Hc,cqr),e(Hc,FEe),e(FEe,fqr),e(Hc,mqr),e(Hc,GK),e(GK,gqr),e(Hc,hqr),e(Wt,pqr),M(h0,Wt,null),e(_r,_qr),e(_r,Xr),M(hx,Xr,null),e(Xr,uqr),e(Xr,TEe),e(TEe,bqr),e(Xr,vqr),e(Xr,vn),e(vn,Fqr),e(vn,MEe),e(MEe,Tqr),e(vn,Mqr),e(vn,EEe),e(EEe,Eqr),e(vn,Cqr),e(vn,CEe),e(CEe,wqr),e(vn,Aqr),e(Xr,Lqr),e(Xr,$e),e($e,p0),e(p0,wEe),e(wEe,yqr),e(p0,xqr),e(p0,OK),e(OK,$qr),e(p0,kqr),e($e,Sqr),e($e,_0),e(_0,AEe),e(AEe,Rqr),e(_0,Pqr),e(_0,VK),e(VK,Bqr),e(_0,Iqr),e($e,Nqr),e($e,u0),e(u0,LEe),e(LEe,qqr),e(u0,jqr),e(u0,XK),e(XK,Dqr),e(u0,Gqr),e($e,Oqr),e($e,b0),e(b0,yEe),e(yEe,Vqr),e(b0,Xqr),e(b0,zK),e(zK,zqr),e(b0,Wqr),e($e,Qqr),e($e,v0),e(v0,xEe),e(xEe,Hqr),e(v0,Uqr),e(v0,WK),e(WK,Jqr),e(v0,Yqr),e($e,Kqr),e($e,F0),e(F0,$Ee),e($Ee,Zqr),e(F0,ejr),e(F0,QK),e(QK,ojr),e(F0,rjr),e($e,tjr),e($e,T0),e(T0,kEe),e(kEe,ajr),e(T0,njr),e(T0,HK),e(HK,sjr),e(T0,ljr),e($e,ijr),e($e,M0),e(M0,SEe),e(SEe,djr),e(M0,cjr),e(M0,UK),e(UK,fjr),e(M0,mjr),e($e,gjr),e($e,E0),e(E0,REe),e(REe,hjr),e(E0,pjr),e(E0,JK),e(JK,_jr),e(E0,ujr),e($e,bjr),e($e,C0),e(C0,PEe),e(PEe,vjr),e(C0,Fjr),e(C0,YK),e(YK,Tjr),e(C0,Mjr),e(Xr,Ejr),M(w0,Xr,null),b(f,QDe,u),b(f,Uc,u),e(Uc,A0),e(A0,BEe),M(px,BEe,null),e(Uc,Cjr),e(Uc,IEe),e(IEe,wjr),b(f,HDe,u),b(f,ur,u),M(_x,ur,null),e(ur,Ajr),e(ur,Jc),e(Jc,Ljr),e(Jc,KK),e(KK,yjr),e(Jc,xjr),e(Jc,ZK),e(ZK,$jr),e(Jc,kjr),e(ur,Sjr),e(ur,ux),e(ux,Rjr),e(ux,NEe),e(NEe,Pjr),e(ux,Bjr),e(ur,Ijr),e(ur,Qt),M(bx,Qt,null),e(Qt,Njr),e(Qt,qEe),e(qEe,qjr),e(Qt,jjr),e(Qt,Yc),e(Yc,Djr),e(Yc,jEe),e(jEe,Gjr),e(Yc,Ojr),e(Yc,eZ),e(eZ,Vjr),e(Yc,Xjr),e(Qt,zjr),M(L0,Qt,null),e(ur,Wjr),e(ur,zr),M(vx,zr,null),e(zr,Qjr),e(zr,DEe),e(DEe,Hjr),e(zr,Ujr),e(zr,Fn),e(Fn,Jjr),e(Fn,GEe),e(GEe,Yjr),e(Fn,Kjr),e(Fn,OEe),e(OEe,Zjr),e(Fn,eDr),e(Fn,VEe),e(VEe,oDr),e(Fn,rDr),e(zr,tDr),e(zr,ke),e(ke,y0),e(y0,XEe),e(XEe,aDr),e(y0,nDr),e(y0,oZ),e(oZ,sDr),e(y0,lDr),e(ke,iDr),e(ke,x0),e(x0,zEe),e(zEe,dDr),e(x0,cDr),e(x0,rZ),e(rZ,fDr),e(x0,mDr),e(ke,gDr),e(ke,$0),e($0,WEe),e(WEe,hDr),e($0,pDr),e($0,tZ),e(tZ,_Dr),e($0,uDr),e(ke,bDr),e(ke,k0),e(k0,QEe),e(QEe,vDr),e(k0,FDr),e(k0,aZ),e(aZ,TDr),e(k0,MDr),e(ke,EDr),e(ke,S0),e(S0,HEe),e(HEe,CDr),e(S0,wDr),e(S0,nZ),e(nZ,ADr),e(S0,LDr),e(ke,yDr),e(ke,R0),e(R0,UEe),e(UEe,xDr),e(R0,$Dr),e(R0,sZ),e(sZ,kDr),e(R0,SDr),e(ke,RDr),e(ke,P0),e(P0,JEe),e(JEe,PDr),e(P0,BDr),e(P0,lZ),e(lZ,IDr),e(P0,NDr),e(ke,qDr),e(ke,B0),e(B0,YEe),e(YEe,jDr),e(B0,DDr),e(B0,iZ),e(iZ,GDr),e(B0,ODr),e(ke,VDr),e(ke,I0),e(I0,KEe),e(KEe,XDr),e(I0,zDr),e(I0,dZ),e(dZ,WDr),e(I0,QDr),e(ke,HDr),e(ke,N0),e(N0,ZEe),e(ZEe,UDr),e(N0,JDr),e(N0,cZ),e(cZ,YDr),e(N0,KDr),e(zr,ZDr),M(q0,zr,null),b(f,UDe,u),b(f,Kc,u),e(Kc,j0),e(j0,eCe),M(Fx,eCe,null),e(Kc,eGr),e(Kc,oCe),e(oCe,oGr),b(f,JDe,u),b(f,br,u),M(Tx,br,null),e(br,rGr),e(br,Zc),e(Zc,tGr),e(Zc,fZ),e(fZ,aGr),e(Zc,nGr),e(Zc,mZ),e(mZ,sGr),e(Zc,lGr),e(br,iGr),e(br,Mx),e(Mx,dGr),e(Mx,rCe),e(rCe,cGr),e(Mx,fGr),e(br,mGr),e(br,Ht),M(Ex,Ht,null),e(Ht,gGr),e(Ht,tCe),e(tCe,hGr),e(Ht,pGr),e(Ht,ef),e(ef,_Gr),e(ef,aCe),e(aCe,uGr),e(ef,bGr),e(ef,gZ),e(gZ,vGr),e(ef,FGr),e(Ht,TGr),M(D0,Ht,null),e(br,MGr),e(br,Wr),M(Cx,Wr,null),e(Wr,EGr),e(Wr,nCe),e(nCe,CGr),e(Wr,wGr),e(Wr,Tn),e(Tn,AGr),e(Tn,sCe),e(sCe,LGr),e(Tn,yGr),e(Tn,lCe),e(lCe,xGr),e(Tn,$Gr),e(Tn,iCe),e(iCe,kGr),e(Tn,SGr),e(Wr,RGr),e(Wr,Ge),e(Ge,G0),e(G0,dCe),e(dCe,PGr),e(G0,BGr),e(G0,hZ),e(hZ,IGr),e(G0,NGr),e(Ge,qGr),e(Ge,O0),e(O0,cCe),e(cCe,jGr),e(O0,DGr),e(O0,pZ),e(pZ,GGr),e(O0,OGr),e(Ge,VGr),e(Ge,V0),e(V0,fCe),e(fCe,XGr),e(V0,zGr),e(V0,_Z),e(_Z,WGr),e(V0,QGr),e(Ge,HGr),e(Ge,X0),e(X0,mCe),e(mCe,UGr),e(X0,JGr),e(X0,uZ),e(uZ,YGr),e(X0,KGr),e(Ge,ZGr),e(Ge,z0),e(z0,gCe),e(gCe,eOr),e(z0,oOr),e(z0,bZ),e(bZ,rOr),e(z0,tOr),e(Ge,aOr),e(Ge,W0),e(W0,hCe),e(hCe,nOr),e(W0,sOr),e(W0,vZ),e(vZ,lOr),e(W0,iOr),e(Ge,dOr),e(Ge,Q0),e(Q0,pCe),e(pCe,cOr),e(Q0,fOr),e(Q0,FZ),e(FZ,mOr),e(Q0,gOr),e(Ge,hOr),e(Ge,H0),e(H0,_Ce),e(_Ce,pOr),e(H0,_Or),e(H0,TZ),e(TZ,uOr),e(H0,bOr),e(Wr,vOr),M(U0,Wr,null),b(f,YDe,u),b(f,of,u),e(of,J0),e(J0,uCe),M(wx,uCe,null),e(of,FOr),e(of,bCe),e(bCe,TOr),b(f,KDe,u),b(f,vr,u),M(Ax,vr,null),e(vr,MOr),e(vr,rf),e(rf,EOr),e(rf,MZ),e(MZ,COr),e(rf,wOr),e(rf,EZ),e(EZ,AOr),e(rf,LOr),e(vr,yOr),e(vr,Lx),e(Lx,xOr),e(Lx,vCe),e(vCe,$Or),e(Lx,kOr),e(vr,SOr),e(vr,Ut),M(yx,Ut,null),e(Ut,ROr),e(Ut,FCe),e(FCe,POr),e(Ut,BOr),e(Ut,tf),e(tf,IOr),e(tf,TCe),e(TCe,NOr),e(tf,qOr),e(tf,CZ),e(CZ,jOr),e(tf,DOr),e(Ut,GOr),M(Y0,Ut,null),e(vr,OOr),e(vr,Qr),M(xx,Qr,null),e(Qr,VOr),e(Qr,MCe),e(MCe,XOr),e(Qr,zOr),e(Qr,Mn),e(Mn,WOr),e(Mn,ECe),e(ECe,QOr),e(Mn,HOr),e(Mn,CCe),e(CCe,UOr),e(Mn,JOr),e(Mn,wCe),e(wCe,YOr),e(Mn,KOr),e(Qr,ZOr),e(Qr,Oe),e(Oe,K0),e(K0,ACe),e(ACe,eVr),e(K0,oVr),e(K0,wZ),e(wZ,rVr),e(K0,tVr),e(Oe,aVr),e(Oe,Z0),e(Z0,LCe),e(LCe,nVr),e(Z0,sVr),e(Z0,AZ),e(AZ,lVr),e(Z0,iVr),e(Oe,dVr),e(Oe,ew),e(ew,yCe),e(yCe,cVr),e(ew,fVr),e(ew,LZ),e(LZ,mVr),e(ew,gVr),e(Oe,hVr),e(Oe,ow),e(ow,xCe),e(xCe,pVr),e(ow,_Vr),e(ow,yZ),e(yZ,uVr),e(ow,bVr),e(Oe,vVr),e(Oe,rw),e(rw,$Ce),e($Ce,FVr),e(rw,TVr),e(rw,xZ),e(xZ,MVr),e(rw,EVr),e(Oe,CVr),e(Oe,tw),e(tw,kCe),e(kCe,wVr),e(tw,AVr),e(tw,$Z),e($Z,LVr),e(tw,yVr),e(Oe,xVr),e(Oe,aw),e(aw,SCe),e(SCe,$Vr),e(aw,kVr),e(aw,kZ),e(kZ,SVr),e(aw,RVr),e(Oe,PVr),e(Oe,nw),e(nw,RCe),e(RCe,BVr),e(nw,IVr),e(nw,SZ),e(SZ,NVr),e(nw,qVr),e(Qr,jVr),M(sw,Qr,null),b(f,ZDe,u),b(f,af,u),e(af,lw),e(lw,PCe),M($x,PCe,null),e(af,DVr),e(af,BCe),e(BCe,GVr),b(f,eGe,u),b(f,Fr,u),M(kx,Fr,null),e(Fr,OVr),e(Fr,nf),e(nf,VVr),e(nf,RZ),e(RZ,XVr),e(nf,zVr),e(nf,PZ),e(PZ,WVr),e(nf,QVr),e(Fr,HVr),e(Fr,Sx),e(Sx,UVr),e(Sx,ICe),e(ICe,JVr),e(Sx,YVr),e(Fr,KVr),e(Fr,Jt),M(Rx,Jt,null),e(Jt,ZVr),e(Jt,NCe),e(NCe,eXr),e(Jt,oXr),e(Jt,sf),e(sf,rXr),e(sf,qCe),e(qCe,tXr),e(sf,aXr),e(sf,BZ),e(BZ,nXr),e(sf,sXr),e(Jt,lXr),M(iw,Jt,null),e(Fr,iXr),e(Fr,Hr),M(Px,Hr,null),e(Hr,dXr),e(Hr,jCe),e(jCe,cXr),e(Hr,fXr),e(Hr,En),e(En,mXr),e(En,DCe),e(DCe,gXr),e(En,hXr),e(En,GCe),e(GCe,pXr),e(En,_Xr),e(En,OCe),e(OCe,uXr),e(En,bXr),e(Hr,vXr),e(Hr,VCe),e(VCe,dw),e(dw,XCe),e(XCe,FXr),e(dw,TXr),e(dw,IZ),e(IZ,MXr),e(dw,EXr),e(Hr,CXr),M(cw,Hr,null),b(f,oGe,u),b(f,lf,u),e(lf,fw),e(fw,zCe),M(Bx,zCe,null),e(lf,wXr),e(lf,WCe),e(WCe,AXr),b(f,rGe,u),b(f,Tr,u),M(Ix,Tr,null),e(Tr,LXr),e(Tr,df),e(df,yXr),e(df,NZ),e(NZ,xXr),e(df,$Xr),e(df,qZ),e(qZ,kXr),e(df,SXr),e(Tr,RXr),e(Tr,Nx),e(Nx,PXr),e(Nx,QCe),e(QCe,BXr),e(Nx,IXr),e(Tr,NXr),e(Tr,Yt),M(qx,Yt,null),e(Yt,qXr),e(Yt,HCe),e(HCe,jXr),e(Yt,DXr),e(Yt,cf),e(cf,GXr),e(cf,UCe),e(UCe,OXr),e(cf,VXr),e(cf,jZ),e(jZ,XXr),e(cf,zXr),e(Yt,WXr),M(mw,Yt,null),e(Tr,QXr),e(Tr,Ur),M(jx,Ur,null),e(Ur,HXr),e(Ur,JCe),e(JCe,UXr),e(Ur,JXr),e(Ur,Cn),e(Cn,YXr),e(Cn,YCe),e(YCe,KXr),e(Cn,ZXr),e(Cn,KCe),e(KCe,ezr),e(Cn,ozr),e(Cn,ZCe),e(ZCe,rzr),e(Cn,tzr),e(Ur,azr),e(Ur,Dx),e(Dx,gw),e(gw,e5e),e(e5e,nzr),e(gw,szr),e(gw,DZ),e(DZ,lzr),e(gw,izr),e(Dx,dzr),e(Dx,hw),e(hw,o5e),e(o5e,czr),e(hw,fzr),e(hw,GZ),e(GZ,mzr),e(hw,gzr),e(Ur,hzr),M(pw,Ur,null),b(f,tGe,u),b(f,ff,u),e(ff,_w),e(_w,r5e),M(Gx,r5e,null),e(ff,pzr),e(ff,t5e),e(t5e,_zr),b(f,aGe,u),b(f,Mr,u),M(Ox,Mr,null),e(Mr,uzr),e(Mr,mf),e(mf,bzr),e(mf,OZ),e(OZ,vzr),e(mf,Fzr),e(mf,VZ),e(VZ,Tzr),e(mf,Mzr),e(Mr,Ezr),e(Mr,Vx),e(Vx,Czr),e(Vx,a5e),e(a5e,wzr),e(Vx,Azr),e(Mr,Lzr),e(Mr,Kt),M(Xx,Kt,null),e(Kt,yzr),e(Kt,n5e),e(n5e,xzr),e(Kt,$zr),e(Kt,gf),e(gf,kzr),e(gf,s5e),e(s5e,Szr),e(gf,Rzr),e(gf,XZ),e(XZ,Pzr),e(gf,Bzr),e(Kt,Izr),M(uw,Kt,null),e(Mr,Nzr),e(Mr,Jr),M(zx,Jr,null),e(Jr,qzr),e(Jr,l5e),e(l5e,jzr),e(Jr,Dzr),e(Jr,wn),e(wn,Gzr),e(wn,i5e),e(i5e,Ozr),e(wn,Vzr),e(wn,d5e),e(d5e,Xzr),e(wn,zzr),e(wn,c5e),e(c5e,Wzr),e(wn,Qzr),e(Jr,Hzr),e(Jr,f5e),e(f5e,bw),e(bw,m5e),e(m5e,Uzr),e(bw,Jzr),e(bw,zZ),e(zZ,Yzr),e(bw,Kzr),e(Jr,Zzr),M(vw,Jr,null),nGe=!0},p(f,[u]){const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),Mf.$set(Wx);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),Lg.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),ih.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),Oh.$set(p5e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),Vh.$set(Qx);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),cp.$set(_5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),fp.$set(An);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),hp.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),fu.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),gu.$set(v5e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),t1.$set(Hx);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),n1.$set(F5e);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),X1.$set(Ux);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),W1.$set(T5e);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),$3.$set(Jx);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),S3.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),J3.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),K3.$set(C5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Qb.$set(hf);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),Ub.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),A2.$set(A5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),y2.$set(L5e);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),B2.$set(Yx);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),N2.$set(y5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),vv.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),Tv.$set($5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),dF.$set(et);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),fF.$set(Kx);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),hF.$set(k5e);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),_F.$set(Zx);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),$F.$set(S5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),SF.$set(ot);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),BF.$set(R5e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),NF.$set(pf);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),HF.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),JF.$set(B5e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),tT.$set(L);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),nT.$set(Fw);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),_T.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),bT.$set(N5e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),MT.$set(Tw);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),CT.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),kT.$set(j5e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),RT.$set(Mw);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),qT.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),DT.$set(G5e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),XT.$set(Ew);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),WT.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),UT.$set(V5e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),YT.$set(Cw);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),t7.$set(X5e);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),n7.$set(z5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),i7.$set(ww);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),c7.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),tM.$set(Q5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),nM.$set(Aw);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),xM.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),kM.$set(U5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),zM.$set(Lw);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),QM.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),KM.$set(Y5e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),e4.$set(yw);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),T4.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),E4.$set(Z5e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),P4.$set(xw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),I4.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),dE.$set(o0e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),fE.$set($w);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),xE.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),kE.$set(t0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),PE.$set(kw);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),IE.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),qE.$set(n0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),DE.$set(Sw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),lC.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),dC.$set(l0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),$C.$set(Rw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),SC.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),PC.$set(d0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),IC.$set(Pw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),qC.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),DC.$set(f0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),g5.$set(Bw);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),p5.$set(m0e);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),A5.$set(g0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),y5.$set(Iw);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),G5.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),V5.$set(p0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),e0.$set(Nw);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),r0.$set(_0e);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),m0.$set(u0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),h0.$set(qw);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),w0.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),L0.$set(v0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),q0.$set(jw);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),D0.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),U0.$set(T0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),Y0.$set(Dw);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),sw.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),iw.$set(E0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),cw.$set(Gw);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),mw.$set(C0e);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),pw.$set(w0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),uw.$set(Ow);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),vw.$set(A0e)},i(f){nGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(Mf.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(Lg.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(Z6.$$.fragment,f),E(ih.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(nL.$$.fragment,f),E(Oh.$$.fragment,f),E(Vh.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(cp.$$.fragment,f),E(fp.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(hp.$$.fragment,f),E(uL.$$.fragment,f),E(fu.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(gu.$$.fragment,f),E(ML.$$.fragment,f),E(t1.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(n1.$$.fragment,f),E(LL.$$.fragment,f),E(X1.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(W1.$$.fragment,f),E(SL.$$.fragment,f),E($3.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(S3.$$.fragment,f),E(NL.$$.fragment,f),E(J3.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(K3.$$.fragment,f),E(OL.$$.fragment,f),E(Qb.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(Ub.$$.fragment,f),E(QL.$$.fragment,f),E(A2.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(y2.$$.fragment,f),E(KL.$$.fragment,f),E(B2.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(N2.$$.fragment,f),E(ty.$$.fragment,f),E(vv.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Tv.$$.fragment,f),E(iy.$$.fragment,f),E(dF.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(fF.$$.fragment,f),E(gy.$$.fragment,f),E(hF.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(_F.$$.fragment,f),E(by.$$.fragment,f),E($F.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(SF.$$.fragment,f),E(Ey.$$.fragment,f),E(BF.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(NF.$$.fragment,f),E(yy.$$.fragment,f),E(HF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(JF.$$.fragment,f),E(Ry.$$.fragment,f),E(tT.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(nT.$$.fragment,f),E(qy.$$.fragment,f),E(_T.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(bT.$$.fragment,f),E(Vy.$$.fragment,f),E(MT.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(CT.$$.fragment,f),E(Uy.$$.fragment,f),E(kT.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(RT.$$.fragment,f),E(e8.$$.fragment,f),E(qT.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(DT.$$.fragment,f),E(n8.$$.fragment,f),E(XT.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(WT.$$.fragment,f),E(f8.$$.fragment,f),E(UT.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(YT.$$.fragment,f),E(_8.$$.fragment,f),E(t7.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(n7.$$.fragment,f),E(T8.$$.fragment,f),E(i7.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(c7.$$.fragment,f),E(A8.$$.fragment,f),E(tM.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(nM.$$.fragment,f),E(k8.$$.fragment,f),E(xM.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(kM.$$.fragment,f),E(I8.$$.fragment,f),E(zM.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(QM.$$.fragment,f),E(G8.$$.fragment,f),E(KM.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(e4.$$.fragment,f),E(W8.$$.fragment,f),E(T4.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(E4.$$.fragment,f),E(Y8.$$.fragment,f),E(P4.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(I4.$$.fragment,f),E(r9.$$.fragment,f),E(dE.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(fE.$$.fragment,f),E(l9.$$.fragment,f),E(xE.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(kE.$$.fragment,f),E(m9.$$.fragment,f),E(PE.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(IE.$$.fragment,f),E(b9.$$.fragment,f),E(qE.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(DE.$$.fragment,f),E(E9.$$.fragment,f),E(lC.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(dC.$$.fragment,f),E(y9.$$.fragment,f),E($C.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(SC.$$.fragment,f),E(R9.$$.fragment,f),E(PC.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(IC.$$.fragment,f),E(q9.$$.fragment,f),E(qC.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(DC.$$.fragment,f),E(V9.$$.fragment,f),E(g5.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(p5.$$.fragment,f),E(H9.$$.fragment,f),E(A5.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(y5.$$.fragment,f),E(Z9.$$.fragment,f),E(G5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(V5.$$.fragment,f),E(ax.$$.fragment,f),E(e0.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(r0.$$.fragment,f),E(dx.$$.fragment,f),E(m0.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(h0.$$.fragment,f),E(hx.$$.fragment,f),E(w0.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(L0.$$.fragment,f),E(vx.$$.fragment,f),E(q0.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(D0.$$.fragment,f),E(Cx.$$.fragment,f),E(U0.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(Y0.$$.fragment,f),E(xx.$$.fragment,f),E(sw.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(iw.$$.fragment,f),E(Px.$$.fragment,f),E(cw.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(mw.$$.fragment,f),E(jx.$$.fragment,f),E(pw.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(uw.$$.fragment,f),E(zx.$$.fragment,f),E(vw.$$.fragment,f),nGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(Mf.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(Lg.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(Z6.$$.fragment,f),C(ih.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(nL.$$.fragment,f),C(Oh.$$.fragment,f),C(Vh.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(cp.$$.fragment,f),C(fp.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(hp.$$.fragment,f),C(uL.$$.fragment,f),C(fu.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(gu.$$.fragment,f),C(ML.$$.fragment,f),C(t1.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(n1.$$.fragment,f),C(LL.$$.fragment,f),C(X1.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(W1.$$.fragment,f),C(SL.$$.fragment,f),C($3.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(S3.$$.fragment,f),C(NL.$$.fragment,f),C(J3.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(K3.$$.fragment,f),C(OL.$$.fragment,f),C(Qb.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(Ub.$$.fragment,f),C(QL.$$.fragment,f),C(A2.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(y2.$$.fragment,f),C(KL.$$.fragment,f),C(B2.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(N2.$$.fragment,f),C(ty.$$.fragment,f),C(vv.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Tv.$$.fragment,f),C(iy.$$.fragment,f),C(dF.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(fF.$$.fragment,f),C(gy.$$.fragment,f),C(hF.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(_F.$$.fragment,f),C(by.$$.fragment,f),C($F.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(SF.$$.fragment,f),C(Ey.$$.fragment,f),C(BF.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(NF.$$.fragment,f),C(yy.$$.fragment,f),C(HF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(JF.$$.fragment,f),C(Ry.$$.fragment,f),C(tT.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(nT.$$.fragment,f),C(qy.$$.fragment,f),C(_T.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(bT.$$.fragment,f),C(Vy.$$.fragment,f),C(MT.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(CT.$$.fragment,f),C(Uy.$$.fragment,f),C(kT.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(RT.$$.fragment,f),C(e8.$$.fragment,f),C(qT.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(DT.$$.fragment,f),C(n8.$$.fragment,f),C(XT.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(WT.$$.fragment,f),C(f8.$$.fragment,f),C(UT.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(YT.$$.fragment,f),C(_8.$$.fragment,f),C(t7.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(n7.$$.fragment,f),C(T8.$$.fragment,f),C(i7.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(c7.$$.fragment,f),C(A8.$$.fragment,f),C(tM.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(nM.$$.fragment,f),C(k8.$$.fragment,f),C(xM.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(kM.$$.fragment,f),C(I8.$$.fragment,f),C(zM.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(QM.$$.fragment,f),C(G8.$$.fragment,f),C(KM.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(e4.$$.fragment,f),C(W8.$$.fragment,f),C(T4.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(E4.$$.fragment,f),C(Y8.$$.fragment,f),C(P4.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(I4.$$.fragment,f),C(r9.$$.fragment,f),C(dE.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(fE.$$.fragment,f),C(l9.$$.fragment,f),C(xE.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(kE.$$.fragment,f),C(m9.$$.fragment,f),C(PE.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(IE.$$.fragment,f),C(b9.$$.fragment,f),C(qE.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(DE.$$.fragment,f),C(E9.$$.fragment,f),C(lC.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(dC.$$.fragment,f),C(y9.$$.fragment,f),C($C.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(SC.$$.fragment,f),C(R9.$$.fragment,f),C(PC.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(IC.$$.fragment,f),C(q9.$$.fragment,f),C(qC.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(DC.$$.fragment,f),C(V9.$$.fragment,f),C(g5.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(p5.$$.fragment,f),C(H9.$$.fragment,f),C(A5.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(y5.$$.fragment,f),C(Z9.$$.fragment,f),C(G5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(V5.$$.fragment,f),C(ax.$$.fragment,f),C(e0.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(r0.$$.fragment,f),C(dx.$$.fragment,f),C(m0.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(h0.$$.fragment,f),C(hx.$$.fragment,f),C(w0.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(L0.$$.fragment,f),C(vx.$$.fragment,f),C(q0.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(D0.$$.fragment,f),C(Cx.$$.fragment,f),C(U0.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(Y0.$$.fragment,f),C(xx.$$.fragment,f),C(sw.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(iw.$$.fragment,f),C(Px.$$.fragment,f),C(cw.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(mw.$$.fragment,f),C(jx.$$.fragment,f),C(pw.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(uw.$$.fragment,f),C(zx.$$.fragment,f),C(vw.$$.fragment,f),nGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(De),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(rje),f&&t(Fi),w(G6),f&&t(tje),f&&t(kn),f&&t(aje),w(O6,f),f&&t(nje),f&&t(mk),f&&t(sje),w(Mf,f),f&&t(lje),f&&t(Ti),w(V6),f&&t(ije),f&&t(Co),w(X6),w(Q6),w(Lg),w(H6),f&&t(dje),f&&t(Ei),w(U6),f&&t(cje),f&&t(wo),w(J6),w(Z6),w(ih),w(eL),f&&t(fje),f&&t(Ci),w(oL),f&&t(mje),f&&t(Ao),w(rL),w(nL),w(Oh),w(Vh),w(sL),f&&t(gje),f&&t(wi),w(lL),f&&t(hje),f&&t(Lo),w(iL),w(fL),w(cp),w(fp),w(mL),f&&t(pje),f&&t(Li),w(gL),f&&t(_je),f&&t(yo),w(hL),w(_L),w(hp),w(uL),w(fu),f&&t(uje),f&&t($i),w(bL),f&&t(bje),f&&t(xo),w(vL),w(TL),w(gu),w(ML),w(t1),f&&t(vje),f&&t(Ri),w(EL),f&&t(Fje),f&&t($o),w(CL),w(AL),w(n1),w(LL),w(X1),f&&t(Tje),f&&t(Ii),w(yL),f&&t(Mje),f&&t(ko),w(xL),w(kL),w(W1),w(SL),w($3),f&&t(Eje),f&&t(ji),w(RL),f&&t(Cje),f&&t(So),w(PL),w(IL),w(S3),w(NL),w(J3),f&&t(wje),f&&t(Oi),w(qL),f&&t(Aje),f&&t(Ro),w(jL),w(GL),w(K3),w(OL),w(Qb),f&&t(Lje),f&&t(zi),w(VL),f&&t(yje),f&&t(Po),w(XL),w(WL),w(Ub),w(QL),w(A2),f&&t(xje),f&&t(Hi),w(HL),f&&t($je),f&&t(Bo),w(UL),w(YL),w(y2),w(KL),w(B2),f&&t(kje),f&&t(Yi),w(ZL),f&&t(Sje),f&&t(Io),w(ey),w(ry),w(N2),w(ty),w(vv),f&&t(Rje),f&&t(ed),w(ay),f&&t(Pje),f&&t(No),w(ny),w(ly),w(Tv),w(iy),w(dF),f&&t(Bje),f&&t(td),w(dy),f&&t(Ije),f&&t(qo),w(cy),w(my),w(fF),w(gy),w(hF),f&&t(Nje),f&&t(sd),w(hy),f&&t(qje),f&&t(jo),w(py),w(uy),w(_F),w(by),w($F),f&&t(jje),f&&t(dd),w(vy),f&&t(Dje),f&&t(Do),w(Fy),w(My),w(SF),w(Ey),w(BF),f&&t(Gje),f&&t(md),w(Cy),f&&t(Oje),f&&t(Go),w(wy),w(Ly),w(NF),w(yy),w(HF),f&&t(Vje),f&&t(pd),w(xy),f&&t(Xje),f&&t(Oo),w($y),w(Sy),w(JF),w(Ry),w(tT),f&&t(zje),f&&t(bd),w(Py),f&&t(Wje),f&&t(Vo),w(By),w(Ny),w(nT),w(qy),w(_T),f&&t(Qje),f&&t(Td),w(jy),f&&t(Hje),f&&t(Xo),w(Dy),w(Oy),w(bT),w(Vy),w(MT),f&&t(Uje),f&&t(Cd),w(zy),f&&t(Jje),f&&t(zo),w(Wy),w(Hy),w(CT),w(Uy),w(kT),f&&t(Yje),f&&t(Ld),w(Jy),f&&t(Kje),f&&t(Wo),w(Yy),w(Zy),w(RT),w(e8),w(qT),f&&t(Zje),f&&t(kd),w(o8),f&&t(eDe),f&&t(Qo),w(r8),w(a8),w(DT),w(n8),w(XT),f&&t(oDe),f&&t(Pd),w(l8),f&&t(rDe),f&&t(Ho),w(i8),w(c8),w(WT),w(f8),w(UT),f&&t(tDe),f&&t(Nd),w(m8),f&&t(aDe),f&&t(Uo),w(g8),w(p8),w(YT),w(_8),w(t7),f&&t(nDe),f&&t(Dd),w(u8),f&&t(sDe),f&&t(Jo),w(b8),w(F8),w(n7),w(T8),w(i7),f&&t(lDe),f&&t(Vd),w(M8),f&&t(iDe),f&&t(Yo),w(E8),w(w8),w(c7),w(A8),w(tM),f&&t(dDe),f&&t(Wd),w(L8),f&&t(cDe),f&&t(Ko),w(y8),w($8),w(nM),w(k8),w(xM),f&&t(fDe),f&&t(Ud),w(S8),f&&t(mDe),f&&t(Zo),w(R8),w(B8),w(kM),w(I8),w(zM),f&&t(gDe),f&&t(Kd),w(N8),f&&t(hDe),f&&t(er),w(q8),w(D8),w(QM),w(G8),w(KM),f&&t(pDe),f&&t(oc),w(O8),f&&t(_De),f&&t(or),w(V8),w(z8),w(e4),w(W8),w(T4),f&&t(uDe),f&&t(ac),w(Q8),f&&t(bDe),f&&t(rr),w(H8),w(J8),w(E4),w(Y8),w(P4),f&&t(vDe),f&&t(lc),w(K8),f&&t(FDe),f&&t(tr),w(Z8),w(o9),w(I4),w(r9),w(dE),f&&t(TDe),f&&t(cc),w(t9),f&&t(MDe),f&&t(ar),w(a9),w(s9),w(fE),w(l9),w(xE),f&&t(EDe),f&&t(gc),w(i9),f&&t(CDe),f&&t(nr),w(d9),w(f9),w(kE),w(m9),w(PE),f&&t(wDe),f&&t(_c),w(h9),f&&t(ADe),f&&t(sr),w(p9),w(u9),w(IE),w(b9),w(qE),f&&t(LDe),f&&t(vc),w(v9),f&&t(yDe),f&&t(lr),w(F9),w(M9),w(DE),w(E9),w(lC),f&&t(xDe),f&&t(Mc),w(C9),f&&t($De),f&&t(ir),w(w9),w(L9),w(dC),w(y9),w($C),f&&t(kDe),f&&t(wc),w(x9),f&&t(SDe),f&&t(dr),w($9),w(S9),w(SC),w(R9),w(PC),f&&t(RDe),f&&t(yc),w(P9),f&&t(PDe),f&&t(cr),w(B9),w(N9),w(IC),w(q9),w(qC),f&&t(BDe),f&&t(kc),w(j9),f&&t(IDe),f&&t(fr),w(D9),w(O9),w(DC),w(V9),w(g5),f&&t(NDe),f&&t(Pc),w(X9),f&&t(qDe),f&&t(mr),w(z9),w(Q9),w(p5),w(H9),w(A5),f&&t(jDe),f&&t(Nc),w(U9),f&&t(DDe),f&&t(gr),w(J9),w(K9),w(y5),w(Z9),w(G5),f&&t(GDe),f&&t(Dc),w(ex),f&&t(ODe),f&&t(hr),w(ox),w(tx),w(V5),w(ax),w(e0),f&&t(VDe),f&&t(Vc),w(nx),f&&t(XDe),f&&t(pr),w(sx),w(ix),w(r0),w(dx),w(m0),f&&t(zDe),f&&t(Wc),w(cx),f&&t(WDe),f&&t(_r),w(fx),w(gx),w(h0),w(hx),w(w0),f&&t(QDe),f&&t(Uc),w(px),f&&t(HDe),f&&t(ur),w(_x),w(bx),w(L0),w(vx),w(q0),f&&t(UDe),f&&t(Kc),w(Fx),f&&t(JDe),f&&t(br),w(Tx),w(Ex),w(D0),w(Cx),w(U0),f&&t(YDe),f&&t(of),w(wx),f&&t(KDe),f&&t(vr),w(Ax),w(yx),w(Y0),w(xx),w(sw),f&&t(ZDe),f&&t(af),w($x),f&&t(eGe),f&&t(Fr),w(kx),w(Rx),w(iw),w(Px),w(cw),f&&t(oGe),f&&t(lf),w(Bx),f&&t(rGe),f&&t(Tr),w(Ix),w(qx),w(mw),w(jx),w(pw),f&&t(tGe),f&&t(ff),w(Gx),f&&t(aGe),f&&t(Mr),w(Ox),w(Xx),w(uw),w(zx),w(vw)}}}const dBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cBt(y){return cRt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class uBt extends sRt{constructor(g){super();lRt(this,g,cBt,iBt,iRt,{})}}export{uBt as default,dBt as metadata};
