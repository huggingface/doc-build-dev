import{S as A9t,i as y9t,s as L9t,e as a,k as l,w as F,t as o,M as x9t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as $9t,L as I}from"../../chunks/vendor-316217a5.js";import{T as mOr}from"../../chunks/Tip-27e9fea0.js";import{D as R}from"../../chunks/Docstring-1fe4a33a.js";import{C as P}from"../../chunks/CodeBlock-8418a95e.js";import{I as re}from"../../chunks/IconCopyLink-40460835.js";import{E as B}from"../../chunks/ExampleCodeBlock-32fc0037.js";function k9t(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,p6,_f,je,We,hi,yn,_6,Ln,xn,u6,pi,$n,b6,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),p6=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),_6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),u6=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),b6=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var q$=s(p);m=r(q$,"NewModelConfig"),q$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var N$=s(fi);pf=r(N$,"model_type"),N$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var j$=s(mi);gi=r(j$,'"new-model"'),j$.forEach(t),p6=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),_6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var D$=s(Ln);xn=r(D$,"PreTrainedModel"),D$.forEach(t),u6=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),b6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var G$=s(_i);uf=r(G$,"NewModelConfig"),G$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,p6),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,_6),e(je,Ln),e(Ln,xn),e(je,u6),e(je,pi),e(pi,$n),e(je,b6),e(je,_i),e(_i,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,p6,_f,je,We,hi,yn,_6,Ln,xn,u6,pi,$n,b6,_i,uf,Ca,Qe,Ae,q$,ui,N$,j$,Eo,wa,D$,bf,G$,kGe,Fqe,bi,vf,Xee,v6,SGe,zee,RGe,Tqe,kn,PGe,Wee,BGe,IGe,Qee,qGe,NGe,Mqe,F6,Eqe,O$,jGe,Cqe,Ff,wqe,vi,Tf,Hee,T6,DGe,Uee,GGe,Aqe,Co,M6,OGe,E6,VGe,V$,XGe,zGe,WGe,C6,QGe,Jee,HGe,UGe,JGe,Er,w6,YGe,Yee,KGe,ZGe,Fi,eOe,Kee,oOe,rOe,Zee,tOe,aOe,nOe,A,Mf,eoe,sOe,lOe,X$,iOe,dOe,cOe,Ef,ooe,fOe,mOe,z$,gOe,hOe,pOe,Cf,roe,_Oe,uOe,W$,bOe,vOe,FOe,wf,toe,TOe,MOe,Q$,EOe,COe,wOe,Af,aoe,AOe,yOe,H$,LOe,xOe,$Oe,yf,noe,kOe,SOe,U$,ROe,POe,BOe,Lf,soe,IOe,qOe,J$,NOe,jOe,DOe,xf,loe,GOe,OOe,Y$,VOe,XOe,zOe,$f,ioe,WOe,QOe,K$,HOe,UOe,JOe,kf,doe,YOe,KOe,Z$,ZOe,eVe,oVe,Sf,coe,rVe,tVe,ek,aVe,nVe,sVe,Rf,foe,lVe,iVe,ok,dVe,cVe,fVe,Pf,moe,mVe,gVe,rk,hVe,pVe,_Ve,Bf,goe,uVe,bVe,tk,vVe,FVe,TVe,If,hoe,MVe,EVe,ak,CVe,wVe,AVe,qf,poe,yVe,LVe,nk,xVe,$Ve,kVe,Nf,_oe,SVe,RVe,sk,PVe,BVe,IVe,jf,uoe,qVe,NVe,lk,jVe,DVe,GVe,Df,boe,OVe,VVe,ik,XVe,zVe,WVe,Gf,voe,QVe,HVe,dk,UVe,JVe,YVe,Of,Foe,KVe,ZVe,ck,eXe,oXe,rXe,Vf,Toe,tXe,aXe,fk,nXe,sXe,lXe,Xf,Moe,iXe,dXe,mk,cXe,fXe,mXe,zf,Eoe,gXe,hXe,gk,pXe,_Xe,uXe,Wf,Coe,bXe,vXe,hk,FXe,TXe,MXe,Qf,woe,EXe,CXe,pk,wXe,AXe,yXe,Hf,Aoe,LXe,xXe,_k,$Xe,kXe,SXe,Uf,yoe,RXe,PXe,uk,BXe,IXe,qXe,Jf,Loe,NXe,jXe,bk,DXe,GXe,OXe,Yf,xoe,VXe,XXe,vk,zXe,WXe,QXe,Kf,$oe,HXe,UXe,Fk,JXe,YXe,KXe,Zf,koe,ZXe,eze,Tk,oze,rze,tze,em,Soe,aze,nze,Mk,sze,lze,ize,om,Roe,dze,cze,Ek,fze,mze,gze,rm,Poe,hze,pze,Ck,_ze,uze,bze,tm,Boe,vze,Fze,wk,Tze,Mze,Eze,am,Ioe,Cze,wze,Ak,Aze,yze,Lze,nm,qoe,xze,$ze,yk,kze,Sze,Rze,sm,Noe,Pze,Bze,Lk,Ize,qze,Nze,lm,joe,jze,Dze,xk,Gze,Oze,Vze,im,Doe,Xze,zze,$k,Wze,Qze,Hze,dm,Goe,Uze,Jze,kk,Yze,Kze,Zze,cm,Ooe,eWe,oWe,Sk,rWe,tWe,aWe,fm,Voe,nWe,sWe,Rk,lWe,iWe,dWe,mm,Xoe,cWe,fWe,Pk,mWe,gWe,hWe,gm,zoe,pWe,_We,Bk,uWe,bWe,vWe,hm,Woe,FWe,TWe,Ik,MWe,EWe,CWe,pm,Qoe,wWe,AWe,qk,yWe,LWe,xWe,_m,Hoe,$We,kWe,Nk,SWe,RWe,PWe,um,Uoe,BWe,IWe,jk,qWe,NWe,jWe,bm,Joe,DWe,GWe,Dk,OWe,VWe,XWe,vm,Yoe,zWe,WWe,Gk,QWe,HWe,UWe,Fm,Koe,JWe,YWe,Ok,KWe,ZWe,eQe,Tm,Zoe,oQe,rQe,Vk,tQe,aQe,nQe,Mm,ere,sQe,lQe,Xk,iQe,dQe,cQe,Em,ore,fQe,mQe,zk,gQe,hQe,pQe,Cm,rre,_Qe,uQe,Wk,bQe,vQe,FQe,wm,tre,TQe,MQe,Qk,EQe,CQe,wQe,Am,are,AQe,yQe,Hk,LQe,xQe,$Qe,ym,nre,kQe,SQe,Uk,RQe,PQe,BQe,Lm,sre,IQe,qQe,Jk,NQe,jQe,DQe,xm,lre,GQe,OQe,Yk,VQe,XQe,zQe,$m,ire,WQe,QQe,Kk,HQe,UQe,JQe,km,dre,YQe,KQe,Zk,ZQe,eHe,oHe,Sm,cre,rHe,tHe,eS,aHe,nHe,sHe,Rm,fre,lHe,iHe,oS,dHe,cHe,fHe,Pm,mre,mHe,gHe,rS,hHe,pHe,_He,Bm,gre,uHe,bHe,tS,vHe,FHe,THe,Im,hre,MHe,EHe,aS,CHe,wHe,AHe,qm,pre,yHe,LHe,nS,xHe,$He,kHe,Nm,_re,SHe,RHe,sS,PHe,BHe,IHe,jm,ure,qHe,NHe,lS,jHe,DHe,GHe,Dm,bre,OHe,VHe,iS,XHe,zHe,WHe,Gm,vre,QHe,HHe,dS,UHe,JHe,YHe,Om,Fre,KHe,ZHe,cS,eUe,oUe,rUe,Vm,Tre,tUe,aUe,fS,nUe,sUe,lUe,Xm,Mre,iUe,dUe,mS,cUe,fUe,mUe,zm,Ere,gUe,hUe,gS,pUe,_Ue,uUe,Wm,Cre,bUe,vUe,hS,FUe,TUe,MUe,Qm,wre,EUe,CUe,pS,wUe,AUe,yUe,Hm,Are,LUe,xUe,_S,$Ue,kUe,SUe,Um,yre,RUe,PUe,uS,BUe,IUe,qUe,Jm,Lre,NUe,jUe,bS,DUe,GUe,OUe,Ym,xre,VUe,XUe,vS,zUe,WUe,QUe,Km,$re,HUe,UUe,FS,JUe,YUe,KUe,Zm,kre,ZUe,eJe,TS,oJe,rJe,tJe,eg,Sre,aJe,nJe,MS,sJe,lJe,iJe,og,Rre,dJe,cJe,ES,fJe,mJe,gJe,rg,Pre,hJe,pJe,CS,_Je,uJe,bJe,tg,Bre,vJe,FJe,wS,TJe,MJe,EJe,ag,Ire,CJe,wJe,AS,AJe,yJe,LJe,ng,qre,xJe,$Je,yS,kJe,SJe,RJe,sg,Nre,PJe,BJe,LS,IJe,qJe,NJe,lg,jre,jJe,DJe,xS,GJe,OJe,VJe,ig,Dre,XJe,zJe,$S,WJe,QJe,HJe,dg,Gre,UJe,JJe,kS,YJe,KJe,ZJe,cg,Ore,eYe,oYe,SS,rYe,tYe,aYe,fg,Vre,nYe,sYe,RS,lYe,iYe,dYe,mg,Xre,cYe,fYe,PS,mYe,gYe,hYe,gg,zre,pYe,_Ye,BS,uYe,bYe,vYe,hg,Wre,FYe,TYe,IS,MYe,EYe,CYe,pg,Qre,wYe,AYe,qS,yYe,LYe,xYe,_g,Hre,$Ye,kYe,NS,SYe,RYe,PYe,ug,Ure,BYe,IYe,jS,qYe,NYe,jYe,bg,Jre,DYe,GYe,DS,OYe,VYe,XYe,vg,Yre,zYe,WYe,GS,QYe,HYe,UYe,Fg,Kre,JYe,YYe,OS,KYe,ZYe,eKe,Tg,Zre,oKe,rKe,VS,tKe,aKe,nKe,Mg,sKe,Eg,A6,lKe,ete,iKe,yqe,Ti,Cg,ote,y6,dKe,rte,cKe,Lqe,wo,L6,fKe,x6,mKe,XS,gKe,hKe,pKe,$6,_Ke,tte,uKe,bKe,vKe,Cr,k6,FKe,ate,TKe,MKe,Aa,EKe,nte,CKe,wKe,ste,AKe,yKe,lte,LKe,xKe,$Ke,k,Sn,ite,kKe,SKe,zS,RKe,PKe,WS,BKe,IKe,qKe,Rn,dte,NKe,jKe,QS,DKe,GKe,HS,OKe,VKe,XKe,Pn,cte,zKe,WKe,US,QKe,HKe,JS,UKe,JKe,YKe,wg,fte,KKe,ZKe,YS,eZe,oZe,rZe,Bn,mte,tZe,aZe,KS,nZe,sZe,ZS,lZe,iZe,dZe,Ag,gte,cZe,fZe,eR,mZe,gZe,hZe,yg,hte,pZe,_Ze,oR,uZe,bZe,vZe,Lg,pte,FZe,TZe,rR,MZe,EZe,CZe,In,_te,wZe,AZe,tR,yZe,LZe,aR,xZe,$Ze,kZe,qn,ute,SZe,RZe,nR,PZe,BZe,sR,IZe,qZe,NZe,Nn,bte,jZe,DZe,lR,GZe,OZe,iR,VZe,XZe,zZe,xg,vte,WZe,QZe,dR,HZe,UZe,JZe,$g,Fte,YZe,KZe,cR,ZZe,eeo,oeo,jn,Tte,reo,teo,fR,aeo,neo,mR,seo,leo,ieo,kg,Mte,deo,ceo,gR,feo,meo,geo,Dn,Ete,heo,peo,hR,_eo,ueo,pR,beo,veo,Feo,Gn,Cte,Teo,Meo,_R,Eeo,Ceo,uR,weo,Aeo,yeo,On,wte,Leo,xeo,bR,$eo,keo,vR,Seo,Reo,Peo,Sg,Ate,Beo,Ieo,FR,qeo,Neo,jeo,Vn,yte,Deo,Geo,TR,Oeo,Veo,MR,Xeo,zeo,Weo,Xn,Lte,Qeo,Heo,ER,Ueo,Jeo,CR,Yeo,Keo,Zeo,zn,xte,eoo,ooo,wR,roo,too,AR,aoo,noo,soo,Wn,$te,loo,ioo,yR,doo,coo,LR,foo,moo,goo,Qn,kte,hoo,poo,xR,_oo,uoo,$R,boo,voo,Foo,Hn,Ste,Too,Moo,kR,Eoo,Coo,SR,woo,Aoo,yoo,Rg,Rte,Loo,xoo,RR,$oo,koo,Soo,Un,Pte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Pg,Bte,Doo,Goo,IR,Ooo,Voo,Xoo,Jn,Ite,zoo,Woo,qR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Yn,qte,Koo,Zoo,jR,ero,oro,DR,rro,tro,aro,Kn,Nte,nro,sro,GR,lro,iro,OR,dro,cro,fro,Zn,jte,mro,gro,VR,hro,pro,XR,_ro,uro,bro,es,Dte,vro,Fro,zR,Tro,Mro,WR,Ero,Cro,wro,os,Gte,Aro,yro,QR,Lro,xro,HR,$ro,kro,Sro,Bg,Ote,Rro,Pro,UR,Bro,Iro,qro,rs,Vte,Nro,jro,JR,Dro,Gro,YR,Oro,Vro,Xro,ts,Xte,zro,Wro,KR,Qro,Hro,ZR,Uro,Jro,Yro,as,zte,Kro,Zro,eP,eto,oto,oP,rto,tto,ato,ns,Wte,nto,sto,rP,lto,ito,tP,dto,cto,fto,ss,Qte,mto,gto,aP,hto,pto,nP,_to,uto,bto,ls,Hte,vto,Fto,sP,Tto,Mto,lP,Eto,Cto,wto,Ig,Ute,Ato,yto,iP,Lto,xto,$to,is,Jte,kto,Sto,dP,Rto,Pto,cP,Bto,Ito,qto,qg,Yte,Nto,jto,fP,Dto,Gto,Oto,Ng,Kte,Vto,Xto,mP,zto,Wto,Qto,ds,Zte,Hto,Uto,gP,Jto,Yto,hP,Kto,Zto,eao,cs,eae,oao,rao,pP,tao,aao,_P,nao,sao,lao,fs,oae,iao,dao,uP,cao,fao,bP,mao,gao,hao,jg,rae,pao,_ao,vP,uao,bao,vao,ms,tae,Fao,Tao,FP,Mao,Eao,TP,Cao,wao,Aao,gs,aae,yao,Lao,MP,xao,$ao,EP,kao,Sao,Rao,hs,nae,Pao,Bao,CP,Iao,qao,wP,Nao,jao,Dao,ps,sae,Gao,Oao,AP,Vao,Xao,yP,zao,Wao,Qao,_s,lae,Hao,Uao,LP,Jao,Yao,xP,Kao,Zao,eno,Dg,iae,ono,rno,$P,tno,ano,nno,us,dae,sno,lno,kP,ino,dno,SP,cno,fno,mno,Gg,cae,gno,hno,RP,pno,_no,uno,Og,fae,bno,vno,PP,Fno,Tno,Mno,Vg,mae,Eno,Cno,BP,wno,Ano,yno,Xg,gae,Lno,xno,IP,$no,kno,Sno,bs,hae,Rno,Pno,qP,Bno,Ino,NP,qno,Nno,jno,zg,pae,Dno,Gno,jP,Ono,Vno,Xno,vs,_ae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,Fs,uae,Kno,Zno,OP,eso,oso,VP,rso,tso,aso,Ts,bae,nso,sso,XP,lso,iso,zP,dso,cso,fso,Ms,vae,mso,gso,WP,hso,pso,QP,_so,uso,bso,Es,Fae,vso,Fso,HP,Tso,Mso,UP,Eso,Cso,wso,Cs,Tae,Aso,yso,JP,Lso,xso,YP,$so,kso,Sso,Wg,Mae,Rso,Pso,KP,Bso,Iso,qso,Qg,Eae,Nso,jso,ZP,Dso,Gso,Oso,ws,Cae,Vso,Xso,eB,zso,Wso,oB,Qso,Hso,Uso,As,wae,Jso,Yso,rB,Kso,Zso,tB,elo,olo,rlo,ys,Aae,tlo,alo,aB,nlo,slo,nB,llo,ilo,dlo,Hg,yae,clo,flo,sB,mlo,glo,hlo,Ug,Lae,plo,_lo,lB,ulo,blo,vlo,Jg,xae,Flo,Tlo,iB,Mlo,Elo,Clo,Ls,$ae,wlo,Alo,dB,ylo,Llo,cB,xlo,$lo,klo,Yg,kae,Slo,Rlo,fB,Plo,Blo,Ilo,Kg,Sae,qlo,Nlo,mB,jlo,Dlo,Glo,Zg,Rae,Olo,Vlo,gB,Xlo,zlo,Wlo,xs,Pae,Qlo,Hlo,hB,Ulo,Jlo,pB,Ylo,Klo,Zlo,eh,Bae,eio,oio,_B,rio,tio,aio,oh,Iae,nio,sio,uB,lio,iio,dio,$s,qae,cio,fio,bB,mio,gio,vB,hio,pio,_io,ks,Nae,uio,bio,FB,vio,Fio,TB,Tio,Mio,Eio,Ss,jae,Cio,wio,MB,Aio,yio,EB,Lio,xio,$io,Rs,Dae,kio,Sio,CB,Rio,Pio,wB,Bio,Iio,qio,rh,Nio,th,S6,jio,Gae,Dio,xqe,Mi,ah,Oae,R6,Gio,Vae,Oio,$qe,Ao,P6,Vio,B6,Xio,AB,zio,Wio,Qio,I6,Hio,Xae,Uio,Jio,Yio,He,q6,Kio,zae,Zio,edo,ya,odo,Wae,rdo,tdo,Qae,ado,ndo,Hae,sdo,ldo,ido,K,nh,Uae,ddo,cdo,yB,fdo,mdo,gdo,sh,Jae,hdo,pdo,LB,_do,udo,bdo,lh,Yae,vdo,Fdo,xB,Tdo,Mdo,Edo,ih,Kae,Cdo,wdo,$B,Ado,ydo,Ldo,dh,Zae,xdo,$do,kB,kdo,Sdo,Rdo,ch,ene,Pdo,Bdo,SB,Ido,qdo,Ndo,fh,one,jdo,Ddo,RB,Gdo,Odo,Vdo,mh,rne,Xdo,zdo,PB,Wdo,Qdo,Hdo,gh,tne,Udo,Jdo,BB,Ydo,Kdo,Zdo,hh,ane,eco,oco,IB,rco,tco,aco,ph,nne,nco,sco,qB,lco,ico,dco,_h,sne,cco,fco,NB,mco,gco,hco,uh,lne,pco,_co,jB,uco,bco,vco,bh,ine,Fco,Tco,DB,Mco,Eco,Cco,vh,dne,wco,Aco,GB,yco,Lco,xco,Fh,cne,$co,kco,OB,Sco,Rco,Pco,Th,fne,Bco,Ico,VB,qco,Nco,jco,Mh,mne,Dco,Gco,XB,Oco,Vco,Xco,Eh,gne,zco,Wco,zB,Qco,Hco,Uco,Ch,hne,Jco,Yco,WB,Kco,Zco,efo,wh,pne,ofo,rfo,QB,tfo,afo,nfo,Ah,_ne,sfo,lfo,HB,ifo,dfo,cfo,yh,une,ffo,mfo,UB,gfo,hfo,pfo,Lh,bne,_fo,ufo,JB,bfo,vfo,Ffo,xh,vne,Tfo,Mfo,YB,Efo,Cfo,wfo,$h,Fne,Afo,yfo,KB,Lfo,xfo,$fo,kh,Tne,kfo,Sfo,ZB,Rfo,Pfo,Bfo,Sh,Mne,Ifo,qfo,eI,Nfo,jfo,Dfo,Rh,Gfo,Ph,Ofo,Bh,N6,Vfo,Ene,Xfo,kqe,Ei,Ih,Cne,j6,zfo,wne,Wfo,Sqe,yo,D6,Qfo,G6,Hfo,oI,Ufo,Jfo,Yfo,O6,Kfo,Ane,Zfo,emo,omo,Ue,V6,rmo,yne,tmo,amo,Ci,nmo,Lne,smo,lmo,xne,imo,dmo,cmo,he,qh,$ne,fmo,mmo,rI,gmo,hmo,pmo,Nh,kne,_mo,umo,Sne,bmo,vmo,Fmo,jh,Rne,Tmo,Mmo,tI,Emo,Cmo,wmo,Dh,Pne,Amo,ymo,aI,Lmo,xmo,$mo,Gh,Bne,kmo,Smo,nI,Rmo,Pmo,Bmo,Oh,Ine,Imo,qmo,sI,Nmo,jmo,Dmo,Vh,qne,Gmo,Omo,lI,Vmo,Xmo,zmo,Xh,Nne,Wmo,Qmo,iI,Hmo,Umo,Jmo,zh,jne,Ymo,Kmo,dI,Zmo,ego,ogo,Wh,Dne,rgo,tgo,cI,ago,ngo,sgo,Qh,Gne,lgo,igo,fI,dgo,cgo,fgo,Hh,One,mgo,ggo,mI,hgo,pgo,_go,Uh,Vne,ugo,bgo,gI,vgo,Fgo,Tgo,Jh,Xne,Mgo,Ego,hI,Cgo,wgo,Ago,Yh,zne,ygo,Lgo,pI,xgo,$go,kgo,Kh,Wne,Sgo,Rgo,_I,Pgo,Bgo,Igo,Zh,Qne,qgo,Ngo,uI,jgo,Dgo,Ggo,ep,Ogo,op,Vgo,rp,X6,Xgo,Hne,zgo,Rqe,wi,tp,Une,z6,Wgo,Jne,Qgo,Pqe,Lo,W6,Hgo,Ai,Ugo,bI,Jgo,Ygo,vI,Kgo,Zgo,eho,Q6,oho,Yne,rho,tho,aho,tt,H6,nho,Kne,sho,lho,yi,iho,Zne,dho,cho,FI,fho,mho,gho,ap,hho,Je,U6,pho,ese,_ho,uho,La,bho,ose,vho,Fho,rse,Tho,Mho,tse,Eho,Cho,who,x,np,ase,Aho,yho,TI,Lho,xho,$ho,sp,nse,kho,Sho,MI,Rho,Pho,Bho,lp,sse,Iho,qho,EI,Nho,jho,Dho,ip,lse,Gho,Oho,CI,Vho,Xho,zho,dp,ise,Who,Qho,wI,Hho,Uho,Jho,cp,dse,Yho,Kho,AI,Zho,epo,opo,fp,cse,rpo,tpo,yI,apo,npo,spo,mp,fse,lpo,ipo,LI,dpo,cpo,fpo,gp,mse,mpo,gpo,xI,hpo,ppo,_po,hp,gse,upo,bpo,$I,vpo,Fpo,Tpo,pp,hse,Mpo,Epo,kI,Cpo,wpo,Apo,_p,pse,ypo,Lpo,SI,xpo,$po,kpo,up,_se,Spo,Rpo,RI,Ppo,Bpo,Ipo,bp,use,qpo,Npo,PI,jpo,Dpo,Gpo,vp,bse,Opo,Vpo,BI,Xpo,zpo,Wpo,Fp,vse,Qpo,Hpo,II,Upo,Jpo,Ypo,Tp,Fse,Kpo,Zpo,qI,e_o,o_o,r_o,Mp,Tse,t_o,a_o,NI,n_o,s_o,l_o,Ep,Mse,i_o,d_o,jI,c_o,f_o,m_o,Cp,Ese,g_o,h_o,DI,p_o,__o,u_o,wp,Cse,b_o,v_o,GI,F_o,T_o,M_o,Ap,wse,E_o,C_o,OI,w_o,A_o,y_o,yp,Ase,L_o,x_o,VI,$_o,k_o,S_o,Lp,yse,R_o,P_o,XI,B_o,I_o,q_o,xp,Lse,N_o,j_o,zI,D_o,G_o,O_o,$p,xse,V_o,X_o,WI,z_o,W_o,Q_o,kp,$se,H_o,U_o,QI,J_o,Y_o,K_o,Sp,kse,Z_o,euo,HI,ouo,ruo,tuo,Rp,Sse,auo,nuo,UI,suo,luo,iuo,Pp,Rse,duo,cuo,JI,fuo,muo,guo,Bp,Pse,huo,puo,YI,_uo,uuo,buo,Ip,Bse,vuo,Fuo,KI,Tuo,Muo,Euo,Ps,Ise,Cuo,wuo,ZI,Auo,yuo,eq,Luo,xuo,$uo,qp,qse,kuo,Suo,oq,Ruo,Puo,Buo,Np,Nse,Iuo,quo,rq,Nuo,juo,Duo,jp,jse,Guo,Ouo,tq,Vuo,Xuo,zuo,Dp,Dse,Wuo,Quo,aq,Huo,Uuo,Juo,Gp,Gse,Yuo,Kuo,nq,Zuo,e1o,o1o,Op,Ose,r1o,t1o,sq,a1o,n1o,s1o,Vp,Vse,l1o,i1o,lq,d1o,c1o,f1o,Xp,Xse,m1o,g1o,iq,h1o,p1o,_1o,zp,zse,u1o,b1o,dq,v1o,F1o,T1o,Wp,Wse,M1o,E1o,cq,C1o,w1o,A1o,Qp,Qse,y1o,L1o,fq,x1o,$1o,k1o,Hp,Hse,S1o,R1o,mq,P1o,B1o,I1o,Up,Use,q1o,N1o,gq,j1o,D1o,G1o,Jp,Jse,O1o,V1o,hq,X1o,z1o,W1o,Yp,Yse,Q1o,H1o,pq,U1o,J1o,Y1o,Kp,Kse,K1o,Z1o,_q,e3o,o3o,r3o,Zp,Zse,t3o,a3o,uq,n3o,s3o,l3o,e_,ele,i3o,d3o,bq,c3o,f3o,m3o,o_,ole,g3o,h3o,vq,p3o,_3o,u3o,r_,rle,b3o,v3o,Fq,F3o,T3o,M3o,t_,tle,E3o,C3o,Tq,w3o,A3o,y3o,a_,ale,L3o,x3o,Mq,$3o,k3o,S3o,n_,nle,R3o,P3o,Eq,B3o,I3o,q3o,s_,sle,N3o,j3o,Cq,D3o,G3o,O3o,l_,lle,V3o,X3o,wq,z3o,W3o,Q3o,i_,ile,H3o,U3o,Aq,J3o,Y3o,K3o,d_,dle,Z3o,ebo,yq,obo,rbo,tbo,c_,cle,abo,nbo,Lq,sbo,lbo,ibo,f_,fle,dbo,cbo,xq,fbo,mbo,gbo,m_,mle,hbo,pbo,$q,_bo,ubo,bbo,g_,gle,vbo,Fbo,kq,Tbo,Mbo,Ebo,h_,hle,Cbo,wbo,Sq,Abo,ybo,Lbo,p_,ple,xbo,$bo,Rq,kbo,Sbo,Rbo,__,_le,Pbo,Bbo,Pq,Ibo,qbo,Nbo,u_,ule,jbo,Dbo,Bq,Gbo,Obo,Vbo,b_,ble,Xbo,zbo,Iq,Wbo,Qbo,Hbo,v_,vle,Ubo,Jbo,qq,Ybo,Kbo,Zbo,F_,Fle,e2o,o2o,Nq,r2o,t2o,a2o,T_,Tle,n2o,s2o,jq,l2o,i2o,d2o,M_,Mle,c2o,f2o,Dq,m2o,g2o,h2o,E_,Ele,p2o,_2o,Gq,u2o,b2o,v2o,C_,Cle,F2o,T2o,Oq,M2o,E2o,C2o,w_,wle,w2o,A2o,Vq,y2o,L2o,x2o,A_,Ale,$2o,k2o,Xq,S2o,R2o,P2o,y_,yle,B2o,I2o,zq,q2o,N2o,j2o,L_,Lle,D2o,G2o,Wq,O2o,V2o,X2o,x_,xle,z2o,W2o,Qq,Q2o,H2o,U2o,$_,$le,J2o,Y2o,Hq,K2o,Z2o,evo,k_,kle,ovo,rvo,Uq,tvo,avo,nvo,S_,Sle,svo,lvo,Jq,ivo,dvo,cvo,R_,Rle,fvo,mvo,Yq,gvo,hvo,pvo,P_,Ple,_vo,uvo,Kq,bvo,vvo,Fvo,B_,Ble,Tvo,Mvo,Zq,Evo,Cvo,wvo,I_,Ile,Avo,yvo,eN,Lvo,xvo,$vo,q_,qle,kvo,Svo,oN,Rvo,Pvo,Bvo,N_,Nle,Ivo,qvo,rN,Nvo,jvo,Dvo,j_,jle,Gvo,Ovo,tN,Vvo,Xvo,zvo,D_,Dle,Wvo,Qvo,aN,Hvo,Uvo,Jvo,G_,Gle,Yvo,Kvo,nN,Zvo,eFo,oFo,O_,Ole,rFo,tFo,sN,aFo,nFo,sFo,V_,Vle,lFo,iFo,lN,dFo,cFo,fFo,X_,Xle,mFo,gFo,iN,hFo,pFo,_Fo,z_,zle,uFo,bFo,dN,vFo,FFo,TFo,W_,Wle,MFo,EFo,cN,CFo,wFo,AFo,Q_,Qle,yFo,LFo,fN,xFo,$Fo,kFo,H_,Hle,SFo,RFo,mN,PFo,BFo,IFo,U_,Ule,qFo,NFo,gN,jFo,DFo,GFo,J_,Jle,OFo,VFo,hN,XFo,zFo,WFo,Y_,QFo,Yle,HFo,UFo,Kle,JFo,YFo,K_,Bqe,Li,Z_,Zle,J6,KFo,eie,ZFo,Iqe,xo,Y6,eTo,xi,oTo,pN,rTo,tTo,_N,aTo,nTo,sTo,K6,lTo,oie,iTo,dTo,cTo,at,Z6,fTo,rie,mTo,gTo,$i,hTo,tie,pTo,_To,uN,uTo,bTo,vTo,eu,FTo,Ye,ey,TTo,aie,MTo,ETo,xa,CTo,nie,wTo,ATo,sie,yTo,LTo,lie,xTo,$To,kTo,G,ou,iie,STo,RTo,bN,PTo,BTo,ITo,ru,die,qTo,NTo,vN,jTo,DTo,GTo,tu,cie,OTo,VTo,FN,XTo,zTo,WTo,au,fie,QTo,HTo,TN,UTo,JTo,YTo,nu,mie,KTo,ZTo,MN,e7o,o7o,r7o,su,gie,t7o,a7o,EN,n7o,s7o,l7o,lu,hie,i7o,d7o,CN,c7o,f7o,m7o,iu,pie,g7o,h7o,wN,p7o,_7o,u7o,du,_ie,b7o,v7o,AN,F7o,T7o,M7o,cu,uie,E7o,C7o,yN,w7o,A7o,y7o,fu,bie,L7o,x7o,LN,$7o,k7o,S7o,mu,vie,R7o,P7o,xN,B7o,I7o,q7o,gu,Fie,N7o,j7o,$N,D7o,G7o,O7o,hu,Tie,V7o,X7o,kN,z7o,W7o,Q7o,pu,Mie,H7o,U7o,SN,J7o,Y7o,K7o,_u,Eie,Z7o,eMo,RN,oMo,rMo,tMo,uu,Cie,aMo,nMo,PN,sMo,lMo,iMo,bu,wie,dMo,cMo,BN,fMo,mMo,gMo,vu,Aie,hMo,pMo,IN,_Mo,uMo,bMo,Fu,yie,vMo,FMo,qN,TMo,MMo,EMo,Tu,Lie,CMo,wMo,NN,AMo,yMo,LMo,Mu,xie,xMo,$Mo,jN,kMo,SMo,RMo,Eu,$ie,PMo,BMo,DN,IMo,qMo,NMo,Cu,kie,jMo,DMo,GN,GMo,OMo,VMo,wu,Sie,XMo,zMo,ON,WMo,QMo,HMo,Au,Rie,UMo,JMo,VN,YMo,KMo,ZMo,yu,Pie,e4o,o4o,XN,r4o,t4o,a4o,Lu,Bie,n4o,s4o,zN,l4o,i4o,d4o,xu,Iie,c4o,f4o,WN,m4o,g4o,h4o,$u,qie,p4o,_4o,QN,u4o,b4o,v4o,ku,Nie,F4o,T4o,HN,M4o,E4o,C4o,Su,jie,w4o,A4o,UN,y4o,L4o,x4o,Ru,Die,$4o,k4o,JN,S4o,R4o,P4o,Pu,Gie,B4o,I4o,YN,q4o,N4o,j4o,Bu,Oie,D4o,G4o,KN,O4o,V4o,X4o,Iu,Vie,z4o,W4o,ZN,Q4o,H4o,U4o,qu,Xie,J4o,Y4o,ej,K4o,Z4o,eEo,Nu,zie,oEo,rEo,oj,tEo,aEo,nEo,ju,Wie,sEo,lEo,rj,iEo,dEo,cEo,Du,Qie,fEo,mEo,tj,gEo,hEo,pEo,Gu,Hie,_Eo,uEo,aj,bEo,vEo,FEo,Ou,Uie,TEo,MEo,nj,EEo,CEo,wEo,Vu,AEo,Jie,yEo,LEo,Yie,xEo,$Eo,Xu,qqe,ki,zu,Kie,oy,kEo,Zie,SEo,Nqe,$o,ry,REo,Si,PEo,sj,BEo,IEo,lj,qEo,NEo,jEo,ty,DEo,ede,GEo,OEo,VEo,nt,ay,XEo,ode,zEo,WEo,Ri,QEo,rde,HEo,UEo,ij,JEo,YEo,KEo,Wu,ZEo,Ke,ny,eCo,tde,oCo,rCo,$a,tCo,ade,aCo,nCo,nde,sCo,lCo,sde,iCo,dCo,cCo,z,Qu,lde,fCo,mCo,dj,gCo,hCo,pCo,Hu,ide,_Co,uCo,cj,bCo,vCo,FCo,Uu,dde,TCo,MCo,fj,ECo,CCo,wCo,Ju,cde,ACo,yCo,mj,LCo,xCo,$Co,Yu,fde,kCo,SCo,gj,RCo,PCo,BCo,Ku,mde,ICo,qCo,hj,NCo,jCo,DCo,Zu,gde,GCo,OCo,pj,VCo,XCo,zCo,e1,hde,WCo,QCo,_j,HCo,UCo,JCo,o1,pde,YCo,KCo,uj,ZCo,e5o,o5o,r1,_de,r5o,t5o,bj,a5o,n5o,s5o,t1,ude,l5o,i5o,vj,d5o,c5o,f5o,a1,bde,m5o,g5o,Fj,h5o,p5o,_5o,n1,vde,u5o,b5o,Tj,v5o,F5o,T5o,s1,Fde,M5o,E5o,Mj,C5o,w5o,A5o,l1,Tde,y5o,L5o,Ej,x5o,$5o,k5o,i1,Mde,S5o,R5o,Cj,P5o,B5o,I5o,d1,Ede,q5o,N5o,wj,j5o,D5o,G5o,c1,Cde,O5o,V5o,Aj,X5o,z5o,W5o,f1,wde,Q5o,H5o,yj,U5o,J5o,Y5o,m1,Ade,K5o,Z5o,Lj,ewo,owo,rwo,g1,yde,two,awo,xj,nwo,swo,lwo,h1,Lde,iwo,dwo,$j,cwo,fwo,mwo,p1,xde,gwo,hwo,kj,pwo,_wo,uwo,_1,$de,bwo,vwo,Sj,Fwo,Two,Mwo,u1,kde,Ewo,Cwo,Rj,wwo,Awo,ywo,b1,Sde,Lwo,xwo,Pj,$wo,kwo,Swo,v1,Rde,Rwo,Pwo,Bj,Bwo,Iwo,qwo,F1,Pde,Nwo,jwo,Ij,Dwo,Gwo,Owo,T1,Bde,Vwo,Xwo,qj,zwo,Wwo,Qwo,M1,Ide,Hwo,Uwo,Nj,Jwo,Ywo,Kwo,E1,qde,Zwo,e0o,jj,o0o,r0o,t0o,C1,Nde,a0o,n0o,Dj,s0o,l0o,i0o,w1,jde,d0o,c0o,Gj,f0o,m0o,g0o,A1,Dde,h0o,p0o,Oj,_0o,u0o,b0o,y1,Gde,v0o,F0o,Vj,T0o,M0o,E0o,L1,Ode,C0o,w0o,Xj,A0o,y0o,L0o,x1,x0o,Vde,$0o,k0o,Xde,S0o,R0o,$1,jqe,Pi,k1,zde,sy,P0o,Wde,B0o,Dqe,ko,ly,I0o,Bi,q0o,zj,N0o,j0o,Wj,D0o,G0o,O0o,iy,V0o,Qde,X0o,z0o,W0o,st,dy,Q0o,Hde,H0o,U0o,Ii,J0o,Ude,Y0o,K0o,Qj,Z0o,eAo,oAo,S1,rAo,Ze,cy,tAo,Jde,aAo,nAo,ka,sAo,Yde,lAo,iAo,Kde,dAo,cAo,Zde,fAo,mAo,gAo,W,R1,ece,hAo,pAo,Hj,_Ao,uAo,bAo,P1,oce,vAo,FAo,Uj,TAo,MAo,EAo,B1,rce,CAo,wAo,Jj,AAo,yAo,LAo,I1,tce,xAo,$Ao,Yj,kAo,SAo,RAo,q1,ace,PAo,BAo,Kj,IAo,qAo,NAo,N1,nce,jAo,DAo,Zj,GAo,OAo,VAo,j1,sce,XAo,zAo,eD,WAo,QAo,HAo,D1,lce,UAo,JAo,oD,YAo,KAo,ZAo,G1,ice,e6o,o6o,rD,r6o,t6o,a6o,O1,dce,n6o,s6o,tD,l6o,i6o,d6o,V1,cce,c6o,f6o,aD,m6o,g6o,h6o,X1,fce,p6o,_6o,nD,u6o,b6o,v6o,z1,mce,F6o,T6o,sD,M6o,E6o,C6o,W1,gce,w6o,A6o,lD,y6o,L6o,x6o,Q1,hce,$6o,k6o,iD,S6o,R6o,P6o,H1,pce,B6o,I6o,dD,q6o,N6o,j6o,U1,_ce,D6o,G6o,cD,O6o,V6o,X6o,J1,uce,z6o,W6o,fD,Q6o,H6o,U6o,Y1,bce,J6o,Y6o,mD,K6o,Z6o,eyo,K1,vce,oyo,ryo,gD,tyo,ayo,nyo,Z1,Fce,syo,lyo,hD,iyo,dyo,cyo,e3,Tce,fyo,myo,pD,gyo,hyo,pyo,o3,Mce,_yo,uyo,_D,byo,vyo,Fyo,r3,Ece,Tyo,Myo,uD,Eyo,Cyo,wyo,t3,Cce,Ayo,yyo,bD,Lyo,xyo,$yo,a3,wce,kyo,Syo,vD,Ryo,Pyo,Byo,n3,Ace,Iyo,qyo,FD,Nyo,jyo,Dyo,s3,yce,Gyo,Oyo,TD,Vyo,Xyo,zyo,l3,Lce,Wyo,Qyo,MD,Hyo,Uyo,Jyo,i3,xce,Yyo,Kyo,ED,Zyo,eLo,oLo,d3,$ce,rLo,tLo,kce,aLo,nLo,sLo,c3,Sce,lLo,iLo,CD,dLo,cLo,fLo,f3,Rce,mLo,gLo,wD,hLo,pLo,_Lo,m3,Pce,uLo,bLo,AD,vLo,FLo,TLo,g3,Bce,MLo,ELo,yD,CLo,wLo,ALo,h3,yLo,Ice,LLo,xLo,qce,$Lo,kLo,p3,Gqe,qi,_3,Nce,fy,SLo,jce,RLo,Oqe,So,my,PLo,Ni,BLo,LD,ILo,qLo,xD,NLo,jLo,DLo,gy,GLo,Dce,OLo,VLo,XLo,lt,hy,zLo,Gce,WLo,QLo,ji,HLo,Oce,ULo,JLo,$D,YLo,KLo,ZLo,u3,e8o,eo,py,o8o,Vce,r8o,t8o,Sa,a8o,Xce,n8o,s8o,zce,l8o,i8o,Wce,d8o,c8o,f8o,_e,b3,Qce,m8o,g8o,kD,h8o,p8o,_8o,v3,Hce,u8o,b8o,SD,v8o,F8o,T8o,F3,Uce,M8o,E8o,RD,C8o,w8o,A8o,T3,Jce,y8o,L8o,PD,x8o,$8o,k8o,M3,Yce,S8o,R8o,BD,P8o,B8o,I8o,E3,Kce,q8o,N8o,ID,j8o,D8o,G8o,C3,Zce,O8o,V8o,qD,X8o,z8o,W8o,w3,efe,Q8o,H8o,ND,U8o,J8o,Y8o,A3,ofe,K8o,Z8o,jD,e9o,o9o,r9o,y3,rfe,t9o,a9o,DD,n9o,s9o,l9o,L3,tfe,i9o,d9o,GD,c9o,f9o,m9o,x3,afe,g9o,h9o,OD,p9o,_9o,u9o,$3,nfe,b9o,v9o,VD,F9o,T9o,M9o,k3,sfe,E9o,C9o,XD,w9o,A9o,y9o,S3,lfe,L9o,x9o,zD,$9o,k9o,S9o,R3,ife,R9o,P9o,WD,B9o,I9o,q9o,P3,N9o,dfe,j9o,D9o,cfe,G9o,O9o,B3,Vqe,Di,I3,ffe,_y,V9o,mfe,X9o,Xqe,Ro,uy,z9o,Gi,W9o,QD,Q9o,H9o,HD,U9o,J9o,Y9o,by,K9o,gfe,Z9o,exo,oxo,it,vy,rxo,hfe,txo,axo,Oi,nxo,pfe,sxo,lxo,UD,ixo,dxo,cxo,q3,fxo,oo,Fy,mxo,_fe,gxo,hxo,Ra,pxo,ufe,_xo,uxo,bfe,bxo,vxo,vfe,Fxo,Txo,Mxo,q,N3,Ffe,Exo,Cxo,JD,wxo,Axo,yxo,j3,Tfe,Lxo,xxo,YD,$xo,kxo,Sxo,D3,Mfe,Rxo,Pxo,KD,Bxo,Ixo,qxo,G3,Efe,Nxo,jxo,ZD,Dxo,Gxo,Oxo,O3,Cfe,Vxo,Xxo,eG,zxo,Wxo,Qxo,V3,wfe,Hxo,Uxo,oG,Jxo,Yxo,Kxo,X3,Afe,Zxo,e$o,rG,o$o,r$o,t$o,z3,yfe,a$o,n$o,tG,s$o,l$o,i$o,W3,Lfe,d$o,c$o,aG,f$o,m$o,g$o,Q3,xfe,h$o,p$o,nG,_$o,u$o,b$o,H3,$fe,v$o,F$o,sG,T$o,M$o,E$o,U3,kfe,C$o,w$o,lG,A$o,y$o,L$o,J3,Sfe,x$o,$$o,iG,k$o,S$o,R$o,Y3,Rfe,P$o,B$o,dG,I$o,q$o,N$o,K3,Pfe,j$o,D$o,cG,G$o,O$o,V$o,Z3,Bfe,X$o,z$o,fG,W$o,Q$o,H$o,eb,Ife,U$o,J$o,mG,Y$o,K$o,Z$o,ob,qfe,eko,oko,gG,rko,tko,ako,rb,Nfe,nko,sko,hG,lko,iko,dko,tb,jfe,cko,fko,pG,mko,gko,hko,ab,Dfe,pko,_ko,_G,uko,bko,vko,nb,Gfe,Fko,Tko,uG,Mko,Eko,Cko,sb,Ofe,wko,Ako,bG,yko,Lko,xko,lb,Vfe,$ko,kko,vG,Sko,Rko,Pko,ib,Xfe,Bko,Iko,FG,qko,Nko,jko,db,zfe,Dko,Gko,TG,Oko,Vko,Xko,cb,Wfe,zko,Wko,MG,Qko,Hko,Uko,fb,Qfe,Jko,Yko,EG,Kko,Zko,eSo,mb,Hfe,oSo,rSo,CG,tSo,aSo,nSo,gb,Ufe,sSo,lSo,wG,iSo,dSo,cSo,hb,Jfe,fSo,mSo,AG,gSo,hSo,pSo,pb,Yfe,_So,uSo,yG,bSo,vSo,FSo,_b,Kfe,TSo,MSo,LG,ESo,CSo,wSo,ub,Zfe,ASo,ySo,xG,LSo,xSo,$So,bb,eme,kSo,SSo,$G,RSo,PSo,BSo,vb,ome,ISo,qSo,kG,NSo,jSo,DSo,Fb,rme,GSo,OSo,SG,VSo,XSo,zSo,Tb,tme,WSo,QSo,RG,HSo,USo,JSo,Mb,ame,YSo,KSo,PG,ZSo,eRo,oRo,Eb,nme,rRo,tRo,BG,aRo,nRo,sRo,Cb,sme,lRo,iRo,IG,dRo,cRo,fRo,wb,lme,mRo,gRo,qG,hRo,pRo,_Ro,Ab,ime,uRo,bRo,NG,vRo,FRo,TRo,yb,dme,MRo,ERo,jG,CRo,wRo,ARo,Lb,cme,yRo,LRo,DG,xRo,$Ro,kRo,xb,fme,SRo,RRo,GG,PRo,BRo,IRo,$b,qRo,mme,NRo,jRo,gme,DRo,GRo,kb,zqe,Vi,Sb,hme,Ty,ORo,pme,VRo,Wqe,Po,My,XRo,Xi,zRo,OG,WRo,QRo,VG,HRo,URo,JRo,Ey,YRo,_me,KRo,ZRo,ePo,dt,Cy,oPo,ume,rPo,tPo,zi,aPo,bme,nPo,sPo,XG,lPo,iPo,dPo,Rb,cPo,ro,wy,fPo,vme,mPo,gPo,Pa,hPo,Fme,pPo,_Po,Tme,uPo,bPo,Mme,vPo,FPo,TPo,Y,Pb,Eme,MPo,EPo,zG,CPo,wPo,APo,Bb,Cme,yPo,LPo,WG,xPo,$Po,kPo,Ib,wme,SPo,RPo,QG,PPo,BPo,IPo,qb,Ame,qPo,NPo,HG,jPo,DPo,GPo,Nb,yme,OPo,VPo,UG,XPo,zPo,WPo,jb,Lme,QPo,HPo,JG,UPo,JPo,YPo,Db,xme,KPo,ZPo,YG,eBo,oBo,rBo,Gb,$me,tBo,aBo,KG,nBo,sBo,lBo,Ob,kme,iBo,dBo,ZG,cBo,fBo,mBo,Vb,Sme,gBo,hBo,eO,pBo,_Bo,uBo,Xb,Rme,bBo,vBo,oO,FBo,TBo,MBo,zb,Pme,EBo,CBo,rO,wBo,ABo,yBo,Wb,Bme,LBo,xBo,tO,$Bo,kBo,SBo,Qb,Ime,RBo,PBo,aO,BBo,IBo,qBo,Hb,qme,NBo,jBo,nO,DBo,GBo,OBo,Ub,Nme,VBo,XBo,sO,zBo,WBo,QBo,Jb,jme,HBo,UBo,lO,JBo,YBo,KBo,Yb,Dme,ZBo,eIo,iO,oIo,rIo,tIo,Kb,Gme,aIo,nIo,dO,sIo,lIo,iIo,Zb,Ome,dIo,cIo,cO,fIo,mIo,gIo,e2,Vme,hIo,pIo,fO,_Io,uIo,bIo,o2,Xme,vIo,FIo,mO,TIo,MIo,EIo,r2,zme,CIo,wIo,gO,AIo,yIo,LIo,t2,Wme,xIo,$Io,hO,kIo,SIo,RIo,a2,Qme,PIo,BIo,pO,IIo,qIo,NIo,n2,Hme,jIo,DIo,_O,GIo,OIo,VIo,s2,Ume,XIo,zIo,uO,WIo,QIo,HIo,l2,Jme,UIo,JIo,bO,YIo,KIo,ZIo,i2,Yme,eqo,oqo,vO,rqo,tqo,aqo,d2,nqo,Kme,sqo,lqo,Zme,iqo,dqo,c2,Qqe,Wi,f2,ege,Ay,cqo,oge,fqo,Hqe,Bo,yy,mqo,Qi,gqo,FO,hqo,pqo,TO,_qo,uqo,bqo,Ly,vqo,rge,Fqo,Tqo,Mqo,ct,xy,Eqo,tge,Cqo,wqo,Hi,Aqo,age,yqo,Lqo,MO,xqo,$qo,kqo,m2,Sqo,to,$y,Rqo,nge,Pqo,Bqo,Ba,Iqo,sge,qqo,Nqo,lge,jqo,Dqo,ige,Gqo,Oqo,Vqo,Yr,g2,dge,Xqo,zqo,EO,Wqo,Qqo,Hqo,h2,cge,Uqo,Jqo,CO,Yqo,Kqo,Zqo,p2,fge,eNo,oNo,wO,rNo,tNo,aNo,_2,mge,nNo,sNo,AO,lNo,iNo,dNo,u2,gge,cNo,fNo,yO,mNo,gNo,hNo,b2,pNo,hge,_No,uNo,pge,bNo,vNo,v2,Uqe,Ui,F2,_ge,ky,FNo,uge,TNo,Jqe,Io,Sy,MNo,Ji,ENo,LO,CNo,wNo,xO,ANo,yNo,LNo,Ry,xNo,bge,$No,kNo,SNo,ft,Py,RNo,vge,PNo,BNo,Yi,INo,Fge,qNo,NNo,$O,jNo,DNo,GNo,T2,ONo,ao,By,VNo,Tge,XNo,zNo,Ia,WNo,Mge,QNo,HNo,Ege,UNo,JNo,Cge,YNo,KNo,ZNo,U,M2,wge,ejo,ojo,kO,rjo,tjo,ajo,E2,Age,njo,sjo,SO,ljo,ijo,djo,C2,yge,cjo,fjo,RO,mjo,gjo,hjo,w2,Lge,pjo,_jo,PO,ujo,bjo,vjo,A2,xge,Fjo,Tjo,BO,Mjo,Ejo,Cjo,y2,$ge,wjo,Ajo,IO,yjo,Ljo,xjo,L2,kge,$jo,kjo,qO,Sjo,Rjo,Pjo,x2,Sge,Bjo,Ijo,NO,qjo,Njo,jjo,$2,Rge,Djo,Gjo,jO,Ojo,Vjo,Xjo,k2,Pge,zjo,Wjo,DO,Qjo,Hjo,Ujo,S2,Bge,Jjo,Yjo,GO,Kjo,Zjo,eDo,R2,Ige,oDo,rDo,OO,tDo,aDo,nDo,P2,qge,sDo,lDo,VO,iDo,dDo,cDo,B2,Nge,fDo,mDo,XO,gDo,hDo,pDo,I2,jge,_Do,uDo,zO,bDo,vDo,FDo,q2,Dge,TDo,MDo,WO,EDo,CDo,wDo,N2,Gge,ADo,yDo,QO,LDo,xDo,$Do,j2,Oge,kDo,SDo,HO,RDo,PDo,BDo,D2,Vge,IDo,qDo,UO,NDo,jDo,DDo,G2,Xge,GDo,ODo,JO,VDo,XDo,zDo,O2,zge,WDo,QDo,YO,HDo,UDo,JDo,V2,Wge,YDo,KDo,KO,ZDo,eGo,oGo,X2,Qge,rGo,tGo,ZO,aGo,nGo,sGo,z2,Hge,lGo,iGo,eV,dGo,cGo,fGo,W2,Uge,mGo,gGo,oV,hGo,pGo,_Go,Q2,Jge,uGo,bGo,rV,vGo,FGo,TGo,H2,Yge,MGo,EGo,tV,CGo,wGo,AGo,U2,Kge,yGo,LGo,aV,xGo,$Go,kGo,J2,Zge,SGo,RGo,nV,PGo,BGo,IGo,Y2,ehe,qGo,NGo,sV,jGo,DGo,GGo,K2,ohe,OGo,VGo,lV,XGo,zGo,WGo,Z2,rhe,QGo,HGo,iV,UGo,JGo,YGo,ev,the,KGo,ZGo,dV,eOo,oOo,rOo,ov,tOo,ahe,aOo,nOo,nhe,sOo,lOo,rv,Yqe,Ki,tv,she,Iy,iOo,lhe,dOo,Kqe,qo,qy,cOo,Zi,fOo,cV,mOo,gOo,fV,hOo,pOo,_Oo,Ny,uOo,ihe,bOo,vOo,FOo,mt,jy,TOo,dhe,MOo,EOo,ed,COo,che,wOo,AOo,mV,yOo,LOo,xOo,av,$Oo,no,Dy,kOo,fhe,SOo,ROo,qa,POo,mhe,BOo,IOo,ghe,qOo,NOo,hhe,jOo,DOo,GOo,V,nv,phe,OOo,VOo,gV,XOo,zOo,WOo,sv,_he,QOo,HOo,hV,UOo,JOo,YOo,lv,uhe,KOo,ZOo,pV,eVo,oVo,rVo,iv,bhe,tVo,aVo,_V,nVo,sVo,lVo,dv,vhe,iVo,dVo,uV,cVo,fVo,mVo,cv,Fhe,gVo,hVo,bV,pVo,_Vo,uVo,fv,The,bVo,vVo,vV,FVo,TVo,MVo,mv,Mhe,EVo,CVo,FV,wVo,AVo,yVo,gv,Ehe,LVo,xVo,TV,$Vo,kVo,SVo,hv,Che,RVo,PVo,MV,BVo,IVo,qVo,pv,whe,NVo,jVo,EV,DVo,GVo,OVo,_v,Ahe,VVo,XVo,CV,zVo,WVo,QVo,uv,yhe,HVo,UVo,wV,JVo,YVo,KVo,bv,Lhe,ZVo,eXo,AV,oXo,rXo,tXo,vv,xhe,aXo,nXo,yV,sXo,lXo,iXo,Fv,$he,dXo,cXo,LV,fXo,mXo,gXo,Tv,khe,hXo,pXo,xV,_Xo,uXo,bXo,Mv,She,vXo,FXo,$V,TXo,MXo,EXo,Ev,Rhe,CXo,wXo,kV,AXo,yXo,LXo,Cv,Phe,xXo,$Xo,SV,kXo,SXo,RXo,wv,Bhe,PXo,BXo,RV,IXo,qXo,NXo,Av,Ihe,jXo,DXo,PV,GXo,OXo,VXo,yv,qhe,XXo,zXo,BV,WXo,QXo,HXo,Lv,Nhe,UXo,JXo,IV,YXo,KXo,ZXo,xv,jhe,ezo,ozo,qV,rzo,tzo,azo,$v,Dhe,nzo,szo,NV,lzo,izo,dzo,kv,Ghe,czo,fzo,jV,mzo,gzo,hzo,Sv,Ohe,pzo,_zo,DV,uzo,bzo,vzo,Rv,Vhe,Fzo,Tzo,GV,Mzo,Ezo,Czo,Pv,Xhe,wzo,Azo,OV,yzo,Lzo,xzo,Bv,zhe,$zo,kzo,VV,Szo,Rzo,Pzo,Iv,Whe,Bzo,Izo,XV,qzo,Nzo,jzo,qv,Qhe,Dzo,Gzo,zV,Ozo,Vzo,Xzo,Nv,Hhe,zzo,Wzo,WV,Qzo,Hzo,Uzo,jv,Uhe,Jzo,Yzo,QV,Kzo,Zzo,eWo,Dv,Jhe,oWo,rWo,HV,tWo,aWo,nWo,Gv,Yhe,sWo,lWo,UV,iWo,dWo,cWo,Ov,Khe,fWo,mWo,JV,gWo,hWo,pWo,Vv,Zhe,_Wo,uWo,YV,bWo,vWo,FWo,Xv,TWo,epe,MWo,EWo,ope,CWo,wWo,zv,Zqe,od,Wv,rpe,Gy,AWo,tpe,yWo,eNe,No,Oy,LWo,rd,xWo,KV,$Wo,kWo,ZV,SWo,RWo,PWo,Vy,BWo,ape,IWo,qWo,NWo,gt,Xy,jWo,npe,DWo,GWo,td,OWo,spe,VWo,XWo,eX,zWo,WWo,QWo,Qv,HWo,so,zy,UWo,lpe,JWo,YWo,Na,KWo,ipe,ZWo,eQo,dpe,oQo,rQo,cpe,tQo,aQo,nQo,fpe,Hv,mpe,sQo,lQo,oX,iQo,dQo,cQo,Uv,fQo,gpe,mQo,gQo,hpe,hQo,pQo,Jv,oNe,ad,Yv,ppe,Wy,_Qo,_pe,uQo,rNe,jo,Qy,bQo,nd,vQo,rX,FQo,TQo,tX,MQo,EQo,CQo,Hy,wQo,upe,AQo,yQo,LQo,ht,Uy,xQo,bpe,$Qo,kQo,sd,SQo,vpe,RQo,PQo,aX,BQo,IQo,qQo,Kv,NQo,lo,Jy,jQo,Fpe,DQo,GQo,ja,OQo,Tpe,VQo,XQo,Mpe,zQo,WQo,Epe,QQo,HQo,UQo,Fe,Zv,Cpe,JQo,YQo,nX,KQo,ZQo,eHo,eF,wpe,oHo,rHo,sX,tHo,aHo,nHo,oF,Ape,sHo,lHo,lX,iHo,dHo,cHo,rF,ype,fHo,mHo,iX,gHo,hHo,pHo,Bs,Lpe,_Ho,uHo,dX,bHo,vHo,cX,FHo,THo,MHo,tF,xpe,EHo,CHo,fX,wHo,AHo,yHo,pt,$pe,LHo,xHo,mX,$Ho,kHo,gX,SHo,RHo,hX,PHo,BHo,IHo,aF,kpe,qHo,NHo,pX,jHo,DHo,GHo,nF,Spe,OHo,VHo,_X,XHo,zHo,WHo,sF,Rpe,QHo,HHo,uX,UHo,JHo,YHo,lF,Ppe,KHo,ZHo,bX,eUo,oUo,rUo,iF,Bpe,tUo,aUo,vX,nUo,sUo,lUo,dF,Ipe,iUo,dUo,FX,cUo,fUo,mUo,cF,qpe,gUo,hUo,TX,pUo,_Uo,uUo,fF,bUo,Npe,vUo,FUo,jpe,TUo,MUo,mF,tNe,ld,gF,Dpe,Yy,EUo,Gpe,CUo,aNe,Do,Ky,wUo,id,AUo,MX,yUo,LUo,EX,xUo,$Uo,kUo,Zy,SUo,Ope,RUo,PUo,BUo,_t,eL,IUo,Vpe,qUo,NUo,dd,jUo,Xpe,DUo,GUo,CX,OUo,VUo,XUo,hF,zUo,io,oL,WUo,zpe,QUo,HUo,Da,UUo,Wpe,JUo,YUo,Qpe,KUo,ZUo,Hpe,eJo,oJo,rJo,Upe,pF,Jpe,tJo,aJo,wX,nJo,sJo,lJo,_F,iJo,Ype,dJo,cJo,Kpe,fJo,mJo,uF,nNe,cd,bF,Zpe,rL,gJo,e_e,hJo,sNe,Go,tL,pJo,fd,_Jo,AX,uJo,bJo,yX,vJo,FJo,TJo,aL,MJo,o_e,EJo,CJo,wJo,ut,nL,AJo,r_e,yJo,LJo,md,xJo,t_e,$Jo,kJo,LX,SJo,RJo,PJo,vF,BJo,co,sL,IJo,a_e,qJo,NJo,Ga,jJo,n_e,DJo,GJo,s_e,OJo,VJo,l_e,XJo,zJo,WJo,ke,FF,i_e,QJo,HJo,xX,UJo,JJo,YJo,TF,d_e,KJo,ZJo,$X,eYo,oYo,rYo,MF,c_e,tYo,aYo,kX,nYo,sYo,lYo,EF,f_e,iYo,dYo,SX,cYo,fYo,mYo,CF,m_e,gYo,hYo,RX,pYo,_Yo,uYo,wF,g_e,bYo,vYo,PX,FYo,TYo,MYo,AF,h_e,EYo,CYo,BX,wYo,AYo,yYo,yF,p_e,LYo,xYo,IX,$Yo,kYo,SYo,LF,__e,RYo,PYo,qX,BYo,IYo,qYo,xF,NYo,u_e,jYo,DYo,b_e,GYo,OYo,$F,lNe,gd,kF,v_e,lL,VYo,F_e,XYo,iNe,Oo,iL,zYo,hd,WYo,NX,QYo,HYo,jX,UYo,JYo,YYo,dL,KYo,T_e,ZYo,eKo,oKo,bt,cL,rKo,M_e,tKo,aKo,pd,nKo,E_e,sKo,lKo,DX,iKo,dKo,cKo,SF,fKo,fo,fL,mKo,C_e,gKo,hKo,Oa,pKo,w_e,_Ko,uKo,A_e,bKo,vKo,y_e,FKo,TKo,MKo,Kr,RF,L_e,EKo,CKo,GX,wKo,AKo,yKo,PF,x_e,LKo,xKo,OX,$Ko,kKo,SKo,BF,$_e,RKo,PKo,VX,BKo,IKo,qKo,IF,k_e,NKo,jKo,XX,DKo,GKo,OKo,qF,S_e,VKo,XKo,zX,zKo,WKo,QKo,NF,HKo,R_e,UKo,JKo,P_e,YKo,KKo,jF,dNe,_d,DF,B_e,mL,ZKo,I_e,eZo,cNe,Vo,gL,oZo,ud,rZo,WX,tZo,aZo,QX,nZo,sZo,lZo,hL,iZo,q_e,dZo,cZo,fZo,vt,pL,mZo,N_e,gZo,hZo,bd,pZo,j_e,_Zo,uZo,HX,bZo,vZo,FZo,GF,TZo,mo,_L,MZo,D_e,EZo,CZo,Va,wZo,G_e,AZo,yZo,O_e,LZo,xZo,V_e,$Zo,kZo,SZo,Se,OF,X_e,RZo,PZo,UX,BZo,IZo,qZo,VF,z_e,NZo,jZo,JX,DZo,GZo,OZo,XF,W_e,VZo,XZo,YX,zZo,WZo,QZo,zF,Q_e,HZo,UZo,KX,JZo,YZo,KZo,WF,H_e,ZZo,eer,ZX,oer,rer,ter,QF,U_e,aer,ner,ez,ser,ler,ier,HF,J_e,der,cer,oz,fer,mer,ger,UF,Y_e,her,per,rz,_er,uer,ber,JF,K_e,ver,Fer,tz,Ter,Mer,Eer,YF,Cer,Z_e,wer,Aer,eue,yer,Ler,KF,fNe,vd,ZF,oue,uL,xer,rue,$er,mNe,Xo,bL,ker,Fd,Ser,az,Rer,Per,nz,Ber,Ier,qer,vL,Ner,tue,jer,Der,Ger,Ft,FL,Oer,aue,Ver,Xer,Td,zer,nue,Wer,Qer,sz,Her,Uer,Jer,eT,Yer,go,TL,Ker,sue,Zer,eor,Xa,oor,lue,ror,tor,iue,aor,nor,due,sor,lor,ior,ML,oT,cue,dor,cor,lz,mor,gor,hor,rT,fue,por,_or,iz,uor,bor,vor,tT,For,mue,Tor,Mor,gue,Eor,Cor,aT,gNe,Md,nT,hue,EL,wor,pue,Aor,hNe,zo,CL,yor,Ed,Lor,dz,xor,$or,cz,kor,Sor,Ror,wL,Por,_ue,Bor,Ior,qor,Tt,AL,Nor,uue,jor,Dor,Cd,Gor,bue,Oor,Vor,fz,Xor,zor,Wor,sT,Qor,ho,yL,Hor,vue,Uor,Jor,za,Yor,Fue,Kor,Zor,Tue,err,orr,Mue,rrr,trr,arr,Zr,lT,Eue,nrr,srr,mz,lrr,irr,drr,iT,Cue,crr,frr,gz,mrr,grr,hrr,dT,wue,prr,_rr,hz,urr,brr,vrr,cT,Aue,Frr,Trr,pz,Mrr,Err,Crr,fT,yue,wrr,Arr,_z,yrr,Lrr,xrr,mT,$rr,Lue,krr,Srr,xue,Rrr,Prr,gT,pNe,wd,hT,$ue,LL,Brr,kue,Irr,_Ne,Wo,xL,qrr,Ad,Nrr,uz,jrr,Drr,bz,Grr,Orr,Vrr,$L,Xrr,Sue,zrr,Wrr,Qrr,Mt,kL,Hrr,Rue,Urr,Jrr,yd,Yrr,Pue,Krr,Zrr,vz,etr,otr,rtr,pT,ttr,po,SL,atr,Bue,ntr,str,Wa,ltr,Iue,itr,dtr,que,ctr,ftr,Nue,mtr,gtr,htr,Ld,_T,jue,ptr,_tr,Fz,utr,btr,vtr,uT,Due,Ftr,Ttr,Tz,Mtr,Etr,Ctr,bT,Gue,wtr,Atr,Mz,ytr,Ltr,xtr,vT,$tr,Oue,ktr,Str,Vue,Rtr,Ptr,FT,uNe,xd,TT,Xue,RL,Btr,zue,Itr,bNe,Qo,PL,qtr,$d,Ntr,Ez,jtr,Dtr,Cz,Gtr,Otr,Vtr,BL,Xtr,Wue,ztr,Wtr,Qtr,Et,IL,Htr,Que,Utr,Jtr,kd,Ytr,Hue,Ktr,Ztr,wz,ear,oar,rar,MT,tar,_o,qL,aar,Uue,nar,sar,Qa,lar,Jue,iar,dar,Yue,car,far,Kue,mar,gar,har,NL,ET,Zue,par,_ar,Az,uar,bar,Far,CT,e1e,Tar,Mar,yz,Ear,Car,war,wT,Aar,o1e,yar,Lar,r1e,xar,$ar,AT,vNe,Sd,yT,t1e,jL,kar,a1e,Sar,FNe,Ho,DL,Rar,Rd,Par,Lz,Bar,Iar,xz,qar,Nar,jar,GL,Dar,n1e,Gar,Oar,Var,Ct,OL,Xar,s1e,zar,War,Pd,Qar,l1e,Har,Uar,$z,Jar,Yar,Kar,LT,Zar,uo,VL,enr,i1e,onr,rnr,Ha,tnr,d1e,anr,nnr,c1e,snr,lnr,f1e,inr,dnr,cnr,m1e,xT,g1e,fnr,mnr,kz,gnr,hnr,pnr,$T,_nr,h1e,unr,bnr,p1e,vnr,Fnr,kT,TNe,Bd,ST,_1e,XL,Tnr,u1e,Mnr,MNe,Uo,zL,Enr,Id,Cnr,Sz,wnr,Anr,Rz,ynr,Lnr,xnr,WL,$nr,b1e,knr,Snr,Rnr,wt,QL,Pnr,v1e,Bnr,Inr,qd,qnr,F1e,Nnr,jnr,Pz,Dnr,Gnr,Onr,RT,Vnr,bo,HL,Xnr,T1e,znr,Wnr,Ua,Qnr,M1e,Hnr,Unr,E1e,Jnr,Ynr,C1e,Knr,Znr,esr,Ja,PT,w1e,osr,rsr,Bz,tsr,asr,nsr,BT,A1e,ssr,lsr,Iz,isr,dsr,csr,IT,y1e,fsr,msr,qz,gsr,hsr,psr,qT,L1e,_sr,usr,Nz,bsr,vsr,Fsr,NT,Tsr,x1e,Msr,Esr,$1e,Csr,wsr,jT,ENe,Nd,DT,k1e,UL,Asr,S1e,ysr,CNe,Jo,JL,Lsr,jd,xsr,jz,$sr,ksr,Dz,Ssr,Rsr,Psr,YL,Bsr,R1e,Isr,qsr,Nsr,At,KL,jsr,P1e,Dsr,Gsr,Dd,Osr,B1e,Vsr,Xsr,Gz,zsr,Wsr,Qsr,GT,Hsr,vo,ZL,Usr,I1e,Jsr,Ysr,Ya,Ksr,q1e,Zsr,elr,N1e,olr,rlr,j1e,tlr,alr,nlr,D1e,OT,G1e,slr,llr,Oz,ilr,dlr,clr,VT,flr,O1e,mlr,glr,V1e,hlr,plr,XT,wNe,Gd,zT,X1e,e8,_lr,z1e,ulr,ANe,Yo,o8,blr,Od,vlr,Vz,Flr,Tlr,Xz,Mlr,Elr,Clr,r8,wlr,W1e,Alr,ylr,Llr,yt,t8,xlr,Q1e,$lr,klr,Vd,Slr,H1e,Rlr,Plr,zz,Blr,Ilr,qlr,WT,Nlr,wr,a8,jlr,U1e,Dlr,Glr,Ka,Olr,J1e,Vlr,Xlr,Y1e,zlr,Wlr,K1e,Qlr,Hlr,Ulr,N,QT,Z1e,Jlr,Ylr,Wz,Klr,Zlr,eir,HT,e3e,oir,rir,Qz,tir,air,nir,UT,o3e,sir,lir,Hz,iir,dir,cir,JT,r3e,fir,mir,Uz,gir,hir,pir,YT,t3e,_ir,uir,Jz,bir,vir,Fir,KT,a3e,Tir,Mir,Yz,Eir,Cir,wir,ZT,n3e,Air,yir,Kz,Lir,xir,$ir,e7,s3e,kir,Sir,Zz,Rir,Pir,Bir,o7,l3e,Iir,qir,eW,Nir,jir,Dir,r7,i3e,Gir,Oir,oW,Vir,Xir,zir,t7,d3e,Wir,Qir,rW,Hir,Uir,Jir,a7,c3e,Yir,Kir,tW,Zir,edr,odr,n7,f3e,rdr,tdr,aW,adr,ndr,sdr,s7,m3e,ldr,idr,nW,ddr,cdr,fdr,l7,g3e,mdr,gdr,sW,hdr,pdr,_dr,i7,h3e,udr,bdr,lW,vdr,Fdr,Tdr,d7,p3e,Mdr,Edr,iW,Cdr,wdr,Adr,Is,_3e,ydr,Ldr,dW,xdr,$dr,cW,kdr,Sdr,Rdr,c7,u3e,Pdr,Bdr,fW,Idr,qdr,Ndr,f7,b3e,jdr,Ddr,mW,Gdr,Odr,Vdr,m7,v3e,Xdr,zdr,gW,Wdr,Qdr,Hdr,g7,F3e,Udr,Jdr,hW,Ydr,Kdr,Zdr,h7,T3e,ecr,ocr,pW,rcr,tcr,acr,p7,M3e,ncr,scr,_W,lcr,icr,dcr,_7,E3e,ccr,fcr,uW,mcr,gcr,hcr,u7,C3e,pcr,_cr,bW,ucr,bcr,vcr,b7,w3e,Fcr,Tcr,vW,Mcr,Ecr,Ccr,v7,A3e,wcr,Acr,FW,ycr,Lcr,xcr,F7,y3e,$cr,kcr,TW,Scr,Rcr,Pcr,T7,L3e,Bcr,Icr,MW,qcr,Ncr,jcr,M7,x3e,Dcr,Gcr,EW,Ocr,Vcr,Xcr,E7,$3e,zcr,Wcr,CW,Qcr,Hcr,Ucr,C7,k3e,Jcr,Ycr,wW,Kcr,Zcr,efr,w7,S3e,ofr,rfr,AW,tfr,afr,nfr,A7,R3e,sfr,lfr,yW,ifr,dfr,cfr,y7,P3e,ffr,mfr,LW,gfr,hfr,pfr,L7,B3e,_fr,ufr,xW,bfr,vfr,Ffr,x7,I3e,Tfr,Mfr,$W,Efr,Cfr,wfr,$7,q3e,Afr,yfr,kW,Lfr,xfr,$fr,k7,N3e,kfr,Sfr,SW,Rfr,Pfr,Bfr,S7,j3e,Ifr,qfr,RW,Nfr,jfr,Dfr,R7,D3e,Gfr,Ofr,PW,Vfr,Xfr,zfr,P7,G3e,Wfr,Qfr,BW,Hfr,Ufr,Jfr,B7,O3e,Yfr,Kfr,IW,Zfr,emr,omr,I7,V3e,rmr,tmr,qW,amr,nmr,smr,q7,X3e,lmr,imr,NW,dmr,cmr,fmr,N7,yNe,Xd,j7,z3e,n8,mmr,W3e,gmr,LNe,Ko,s8,hmr,zd,pmr,jW,_mr,umr,DW,bmr,vmr,Fmr,l8,Tmr,Q3e,Mmr,Emr,Cmr,Lt,i8,wmr,H3e,Amr,ymr,Wd,Lmr,U3e,xmr,$mr,GW,kmr,Smr,Rmr,D7,Pmr,Ar,d8,Bmr,J3e,Imr,qmr,Za,Nmr,Y3e,jmr,Dmr,K3e,Gmr,Omr,Z3e,Vmr,Xmr,zmr,se,G7,ebe,Wmr,Qmr,OW,Hmr,Umr,Jmr,O7,obe,Ymr,Kmr,VW,Zmr,egr,ogr,V7,rbe,rgr,tgr,XW,agr,ngr,sgr,X7,tbe,lgr,igr,zW,dgr,cgr,fgr,z7,abe,mgr,ggr,WW,hgr,pgr,_gr,W7,nbe,ugr,bgr,QW,vgr,Fgr,Tgr,Q7,sbe,Mgr,Egr,HW,Cgr,wgr,Agr,H7,lbe,ygr,Lgr,UW,xgr,$gr,kgr,U7,ibe,Sgr,Rgr,JW,Pgr,Bgr,Igr,J7,dbe,qgr,Ngr,YW,jgr,Dgr,Ggr,Y7,cbe,Ogr,Vgr,KW,Xgr,zgr,Wgr,K7,fbe,Qgr,Hgr,ZW,Ugr,Jgr,Ygr,Z7,mbe,Kgr,Zgr,eQ,ehr,ohr,rhr,eM,gbe,thr,ahr,oQ,nhr,shr,lhr,oM,hbe,ihr,dhr,rQ,chr,fhr,mhr,rM,pbe,ghr,hhr,tQ,phr,_hr,uhr,tM,_be,bhr,vhr,aQ,Fhr,Thr,Mhr,aM,ube,Ehr,Chr,nQ,whr,Ahr,yhr,nM,bbe,Lhr,xhr,sQ,$hr,khr,Shr,sM,vbe,Rhr,Phr,lQ,Bhr,Ihr,qhr,lM,Fbe,Nhr,jhr,iQ,Dhr,Ghr,Ohr,iM,Tbe,Vhr,Xhr,dQ,zhr,Whr,Qhr,dM,Mbe,Hhr,Uhr,cQ,Jhr,Yhr,Khr,cM,xNe,Qd,fM,Ebe,c8,Zhr,Cbe,epr,$Ne,Zo,f8,opr,Hd,rpr,fQ,tpr,apr,mQ,npr,spr,lpr,m8,ipr,wbe,dpr,cpr,fpr,xt,g8,mpr,Abe,gpr,hpr,Ud,ppr,ybe,_pr,upr,gQ,bpr,vpr,Fpr,mM,Tpr,yr,h8,Mpr,Lbe,Epr,Cpr,en,wpr,xbe,Apr,ypr,$be,Lpr,xpr,kbe,$pr,kpr,Spr,Me,gM,Sbe,Rpr,Ppr,hQ,Bpr,Ipr,qpr,hM,Rbe,Npr,jpr,pQ,Dpr,Gpr,Opr,pM,Pbe,Vpr,Xpr,_Q,zpr,Wpr,Qpr,_M,Bbe,Hpr,Upr,uQ,Jpr,Ypr,Kpr,uM,Ibe,Zpr,e_r,bQ,o_r,r_r,t_r,bM,qbe,a_r,n_r,vQ,s_r,l_r,i_r,vM,Nbe,d_r,c_r,FQ,f_r,m_r,g_r,FM,jbe,h_r,p_r,TQ,__r,u_r,b_r,TM,Dbe,v_r,F_r,MQ,T_r,M_r,E_r,MM,Gbe,C_r,w_r,EQ,A_r,y_r,L_r,EM,Obe,x_r,$_r,CQ,k_r,S_r,R_r,CM,Vbe,P_r,B_r,wQ,I_r,q_r,N_r,wM,kNe,Jd,AM,Xbe,p8,j_r,zbe,D_r,SNe,er,_8,G_r,Yd,O_r,AQ,V_r,X_r,yQ,z_r,W_r,Q_r,u8,H_r,Wbe,U_r,J_r,Y_r,$t,b8,K_r,Qbe,Z_r,eur,Kd,our,Hbe,rur,tur,LQ,aur,nur,sur,yM,lur,Lr,v8,iur,Ube,dur,cur,on,fur,Jbe,mur,gur,Ybe,hur,pur,Kbe,_ur,uur,bur,rn,LM,Zbe,vur,Fur,xQ,Tur,Mur,Eur,xM,e2e,Cur,wur,$Q,Aur,yur,Lur,$M,o2e,xur,$ur,kQ,kur,Sur,Rur,kM,r2e,Pur,Bur,SQ,Iur,qur,Nur,SM,RNe,Zd,RM,t2e,F8,jur,a2e,Dur,PNe,or,T8,Gur,ec,Our,RQ,Vur,Xur,PQ,zur,Wur,Qur,M8,Hur,n2e,Uur,Jur,Yur,kt,E8,Kur,s2e,Zur,e1r,oc,o1r,l2e,r1r,t1r,BQ,a1r,n1r,s1r,PM,l1r,xr,C8,i1r,i2e,d1r,c1r,tn,f1r,d2e,m1r,g1r,c2e,h1r,p1r,f2e,_1r,u1r,b1r,ie,BM,m2e,v1r,F1r,IQ,T1r,M1r,E1r,IM,g2e,C1r,w1r,qQ,A1r,y1r,L1r,qM,h2e,x1r,$1r,NQ,k1r,S1r,R1r,NM,p2e,P1r,B1r,jQ,I1r,q1r,N1r,jM,_2e,j1r,D1r,DQ,G1r,O1r,V1r,DM,u2e,X1r,z1r,GQ,W1r,Q1r,H1r,GM,b2e,U1r,J1r,OQ,Y1r,K1r,Z1r,OM,v2e,e3r,o3r,VQ,r3r,t3r,a3r,VM,F2e,n3r,s3r,XQ,l3r,i3r,d3r,XM,T2e,c3r,f3r,zQ,m3r,g3r,h3r,zM,M2e,p3r,_3r,WQ,u3r,b3r,v3r,WM,E2e,F3r,T3r,QQ,M3r,E3r,C3r,QM,C2e,w3r,A3r,HQ,y3r,L3r,x3r,HM,w2e,$3r,k3r,UQ,S3r,R3r,P3r,UM,A2e,B3r,I3r,JQ,q3r,N3r,j3r,JM,y2e,D3r,G3r,YQ,O3r,V3r,X3r,YM,L2e,z3r,W3r,KQ,Q3r,H3r,U3r,KM,x2e,J3r,Y3r,ZQ,K3r,Z3r,ebr,ZM,$2e,obr,rbr,eH,tbr,abr,nbr,e4,k2e,sbr,lbr,oH,ibr,dbr,cbr,o4,BNe,rc,r4,S2e,w8,fbr,R2e,mbr,INe,rr,A8,gbr,tc,hbr,rH,pbr,_br,tH,ubr,bbr,vbr,y8,Fbr,P2e,Tbr,Mbr,Ebr,St,L8,Cbr,B2e,wbr,Abr,ac,ybr,I2e,Lbr,xbr,aH,$br,kbr,Sbr,t4,Rbr,$r,x8,Pbr,q2e,Bbr,Ibr,an,qbr,N2e,Nbr,jbr,j2e,Dbr,Gbr,D2e,Obr,Vbr,Xbr,ye,a4,G2e,zbr,Wbr,nH,Qbr,Hbr,Ubr,n4,O2e,Jbr,Ybr,sH,Kbr,Zbr,e2r,s4,V2e,o2r,r2r,lH,t2r,a2r,n2r,l4,X2e,s2r,l2r,iH,i2r,d2r,c2r,i4,z2e,f2r,m2r,dH,g2r,h2r,p2r,d4,W2e,_2r,u2r,cH,b2r,v2r,F2r,c4,Q2e,T2r,M2r,fH,E2r,C2r,w2r,f4,H2e,A2r,y2r,mH,L2r,x2r,$2r,m4,U2e,k2r,S2r,gH,R2r,P2r,B2r,g4,J2e,I2r,q2r,hH,N2r,j2r,D2r,h4,qNe,nc,p4,Y2e,$8,G2r,K2e,O2r,NNe,tr,k8,V2r,sc,X2r,pH,z2r,W2r,_H,Q2r,H2r,U2r,S8,J2r,Z2e,Y2r,K2r,Z2r,Rt,R8,evr,eve,ovr,rvr,lc,tvr,ove,avr,nvr,uH,svr,lvr,ivr,_4,dvr,kr,P8,cvr,rve,fvr,mvr,nn,gvr,tve,hvr,pvr,ave,_vr,uvr,nve,bvr,vvr,Fvr,oe,u4,sve,Tvr,Mvr,bH,Evr,Cvr,wvr,b4,lve,Avr,yvr,vH,Lvr,xvr,$vr,v4,ive,kvr,Svr,FH,Rvr,Pvr,Bvr,F4,dve,Ivr,qvr,TH,Nvr,jvr,Dvr,T4,cve,Gvr,Ovr,MH,Vvr,Xvr,zvr,M4,fve,Wvr,Qvr,EH,Hvr,Uvr,Jvr,E4,mve,Yvr,Kvr,CH,Zvr,eFr,oFr,C4,gve,rFr,tFr,wH,aFr,nFr,sFr,w4,hve,lFr,iFr,AH,dFr,cFr,fFr,A4,pve,mFr,gFr,yH,hFr,pFr,_Fr,y4,_ve,uFr,bFr,LH,vFr,FFr,TFr,L4,uve,MFr,EFr,xH,CFr,wFr,AFr,x4,bve,yFr,LFr,$H,xFr,$Fr,kFr,$4,vve,SFr,RFr,kH,PFr,BFr,IFr,k4,Fve,qFr,NFr,SH,jFr,DFr,GFr,S4,Tve,OFr,VFr,RH,XFr,zFr,WFr,R4,Mve,QFr,HFr,PH,UFr,JFr,YFr,P4,Eve,KFr,ZFr,BH,eTr,oTr,rTr,B4,Cve,tTr,aTr,IH,nTr,sTr,lTr,I4,wve,iTr,dTr,qH,cTr,fTr,mTr,q4,Ave,gTr,hTr,NH,pTr,_Tr,uTr,N4,yve,bTr,vTr,jH,FTr,TTr,MTr,j4,Lve,ETr,CTr,DH,wTr,ATr,yTr,D4,xve,LTr,xTr,GH,$Tr,kTr,STr,G4,$ve,RTr,PTr,OH,BTr,ITr,qTr,O4,kve,NTr,jTr,VH,DTr,GTr,OTr,V4,jNe,ic,X4,Sve,B8,VTr,Rve,XTr,DNe,ar,I8,zTr,dc,WTr,XH,QTr,HTr,zH,UTr,JTr,YTr,q8,KTr,Pve,ZTr,e7r,o7r,Pt,N8,r7r,Bve,t7r,a7r,cc,n7r,Ive,s7r,l7r,WH,i7r,d7r,c7r,z4,f7r,Sr,j8,m7r,qve,g7r,h7r,sn,p7r,Nve,_7r,u7r,jve,b7r,v7r,Dve,F7r,T7r,M7r,pe,W4,Gve,E7r,C7r,QH,w7r,A7r,y7r,Q4,Ove,L7r,x7r,HH,$7r,k7r,S7r,H4,Vve,R7r,P7r,UH,B7r,I7r,q7r,U4,Xve,N7r,j7r,JH,D7r,G7r,O7r,J4,zve,V7r,X7r,YH,z7r,W7r,Q7r,Y4,Wve,H7r,U7r,KH,J7r,Y7r,K7r,K4,Qve,Z7r,eMr,ZH,oMr,rMr,tMr,Z4,Hve,aMr,nMr,eU,sMr,lMr,iMr,eE,Uve,dMr,cMr,oU,fMr,mMr,gMr,oE,Jve,hMr,pMr,rU,_Mr,uMr,bMr,rE,Yve,vMr,FMr,tU,TMr,MMr,EMr,tE,Kve,CMr,wMr,aU,AMr,yMr,LMr,aE,Zve,xMr,$Mr,nU,kMr,SMr,RMr,nE,eFe,PMr,BMr,sU,IMr,qMr,NMr,sE,oFe,jMr,DMr,lU,GMr,OMr,VMr,lE,rFe,XMr,zMr,iU,WMr,QMr,HMr,iE,tFe,UMr,JMr,dU,YMr,KMr,ZMr,dE,GNe,fc,cE,aFe,D8,e4r,nFe,o4r,ONe,nr,G8,r4r,mc,t4r,cU,a4r,n4r,fU,s4r,l4r,i4r,O8,d4r,sFe,c4r,f4r,m4r,Bt,V8,g4r,lFe,h4r,p4r,gc,_4r,iFe,u4r,b4r,mU,v4r,F4r,T4r,fE,M4r,Rr,X8,E4r,dFe,C4r,w4r,ln,A4r,cFe,y4r,L4r,fFe,x4r,$4r,mFe,k4r,S4r,R4r,z8,mE,gFe,P4r,B4r,gU,I4r,q4r,N4r,gE,hFe,j4r,D4r,hU,G4r,O4r,V4r,hE,VNe,hc,pE,pFe,W8,X4r,_Fe,z4r,XNe,sr,Q8,W4r,pc,Q4r,pU,H4r,U4r,_U,J4r,Y4r,K4r,H8,Z4r,uFe,eEr,oEr,rEr,It,U8,tEr,bFe,aEr,nEr,_c,sEr,vFe,lEr,iEr,uU,dEr,cEr,fEr,_E,mEr,Pr,J8,gEr,FFe,hEr,pEr,dn,_Er,TFe,uEr,bEr,MFe,vEr,FEr,EFe,TEr,MEr,EEr,CFe,uE,wFe,CEr,wEr,bU,AEr,yEr,LEr,bE,zNe,uc,vE,AFe,Y8,xEr,yFe,$Er,WNe,lr,K8,kEr,bc,SEr,vU,REr,PEr,FU,BEr,IEr,qEr,Z8,NEr,LFe,jEr,DEr,GEr,qt,e9,OEr,xFe,VEr,XEr,vc,zEr,$Fe,WEr,QEr,TU,HEr,UEr,JEr,FE,YEr,Br,o9,KEr,kFe,ZEr,eCr,cn,oCr,SFe,rCr,tCr,RFe,aCr,nCr,PFe,sCr,lCr,iCr,de,TE,BFe,dCr,cCr,MU,fCr,mCr,gCr,ME,IFe,hCr,pCr,EU,_Cr,uCr,bCr,EE,qFe,vCr,FCr,CU,TCr,MCr,ECr,CE,NFe,CCr,wCr,wU,ACr,yCr,LCr,wE,jFe,xCr,$Cr,AU,kCr,SCr,RCr,AE,DFe,PCr,BCr,yU,ICr,qCr,NCr,yE,GFe,jCr,DCr,LU,GCr,OCr,VCr,LE,OFe,XCr,zCr,xU,WCr,QCr,HCr,xE,VFe,UCr,JCr,$U,YCr,KCr,ZCr,$E,XFe,e5r,o5r,kU,r5r,t5r,a5r,kE,zFe,n5r,s5r,SU,l5r,i5r,d5r,SE,WFe,c5r,f5r,RU,m5r,g5r,h5r,RE,QFe,p5r,_5r,PU,u5r,b5r,v5r,PE,HFe,F5r,T5r,BU,M5r,E5r,C5r,BE,UFe,w5r,A5r,IU,y5r,L5r,x5r,IE,JFe,$5r,k5r,qU,S5r,R5r,P5r,qE,YFe,B5r,I5r,NU,q5r,N5r,j5r,NE,KFe,D5r,G5r,jU,O5r,V5r,X5r,jE,ZFe,z5r,W5r,DU,Q5r,H5r,U5r,DE,eTe,J5r,Y5r,GU,K5r,Z5r,ewr,GE,QNe,Fc,OE,oTe,r9,owr,rTe,rwr,HNe,ir,t9,twr,Tc,awr,OU,nwr,swr,VU,lwr,iwr,dwr,a9,cwr,tTe,fwr,mwr,gwr,Nt,n9,hwr,aTe,pwr,_wr,Mc,uwr,nTe,bwr,vwr,XU,Fwr,Twr,Mwr,VE,Ewr,Ir,s9,Cwr,sTe,wwr,Awr,fn,ywr,lTe,Lwr,xwr,iTe,$wr,kwr,dTe,Swr,Rwr,Pwr,ce,XE,cTe,Bwr,Iwr,zU,qwr,Nwr,jwr,zE,fTe,Dwr,Gwr,WU,Owr,Vwr,Xwr,WE,mTe,zwr,Wwr,QU,Qwr,Hwr,Uwr,QE,gTe,Jwr,Ywr,HU,Kwr,Zwr,e0r,HE,hTe,o0r,r0r,UU,t0r,a0r,n0r,UE,pTe,s0r,l0r,JU,i0r,d0r,c0r,JE,_Te,f0r,m0r,YU,g0r,h0r,p0r,YE,uTe,_0r,u0r,KU,b0r,v0r,F0r,KE,bTe,T0r,M0r,ZU,E0r,C0r,w0r,ZE,vTe,A0r,y0r,eJ,L0r,x0r,$0r,eC,FTe,k0r,S0r,oJ,R0r,P0r,B0r,oC,TTe,I0r,q0r,rJ,N0r,j0r,D0r,rC,MTe,G0r,O0r,tJ,V0r,X0r,z0r,tC,ETe,W0r,Q0r,aJ,H0r,U0r,J0r,aC,CTe,Y0r,K0r,nJ,Z0r,eAr,oAr,nC,wTe,rAr,tAr,sJ,aAr,nAr,sAr,sC,ATe,lAr,iAr,lJ,dAr,cAr,fAr,lC,yTe,mAr,gAr,iJ,hAr,pAr,_Ar,iC,LTe,uAr,bAr,dJ,vAr,FAr,TAr,dC,xTe,MAr,EAr,cJ,CAr,wAr,AAr,cC,UNe,Ec,fC,$Te,l9,yAr,kTe,LAr,JNe,dr,i9,xAr,Cc,$Ar,fJ,kAr,SAr,mJ,RAr,PAr,BAr,d9,IAr,STe,qAr,NAr,jAr,jt,c9,DAr,RTe,GAr,OAr,wc,VAr,PTe,XAr,zAr,gJ,WAr,QAr,HAr,mC,UAr,qr,f9,JAr,BTe,YAr,KAr,mn,ZAr,ITe,e6r,o6r,qTe,r6r,t6r,NTe,a6r,n6r,s6r,jTe,gC,DTe,l6r,i6r,hJ,d6r,c6r,f6r,hC,YNe,Ac,pC,GTe,m9,m6r,OTe,g6r,KNe,cr,g9,h6r,yc,p6r,pJ,_6r,u6r,_J,b6r,v6r,F6r,h9,T6r,VTe,M6r,E6r,C6r,Dt,p9,w6r,XTe,A6r,y6r,Lc,L6r,zTe,x6r,$6r,uJ,k6r,S6r,R6r,_C,P6r,Nr,_9,B6r,WTe,I6r,q6r,gn,N6r,QTe,j6r,D6r,HTe,G6r,O6r,UTe,V6r,X6r,z6r,JTe,uC,YTe,W6r,Q6r,bJ,H6r,U6r,J6r,bC,ZNe,xc,vC,KTe,u9,Y6r,ZTe,K6r,eje,fr,b9,Z6r,$c,eyr,vJ,oyr,ryr,FJ,tyr,ayr,nyr,v9,syr,e7e,lyr,iyr,dyr,Gt,F9,cyr,o7e,fyr,myr,kc,gyr,r7e,hyr,pyr,TJ,_yr,uyr,byr,FC,vyr,jr,T9,Fyr,t7e,Tyr,Myr,hn,Eyr,a7e,Cyr,wyr,n7e,Ayr,yyr,s7e,Lyr,xyr,$yr,te,TC,l7e,kyr,Syr,MJ,Ryr,Pyr,Byr,MC,i7e,Iyr,qyr,EJ,Nyr,jyr,Dyr,EC,d7e,Gyr,Oyr,CJ,Vyr,Xyr,zyr,CC,c7e,Wyr,Qyr,wJ,Hyr,Uyr,Jyr,wC,f7e,Yyr,Kyr,AJ,Zyr,eLr,oLr,AC,m7e,rLr,tLr,yJ,aLr,nLr,sLr,yC,g7e,lLr,iLr,LJ,dLr,cLr,fLr,LC,h7e,mLr,gLr,xJ,hLr,pLr,_Lr,xC,p7e,uLr,bLr,$J,vLr,FLr,TLr,$C,_7e,MLr,ELr,kJ,CLr,wLr,ALr,kC,u7e,yLr,LLr,SJ,xLr,$Lr,kLr,SC,b7e,SLr,RLr,RJ,PLr,BLr,ILr,RC,v7e,qLr,NLr,PJ,jLr,DLr,GLr,PC,F7e,OLr,VLr,BJ,XLr,zLr,WLr,BC,T7e,QLr,HLr,IJ,ULr,JLr,YLr,IC,M7e,KLr,ZLr,qJ,e8r,o8r,r8r,qC,E7e,t8r,a8r,NJ,n8r,s8r,l8r,NC,C7e,i8r,d8r,jJ,c8r,f8r,m8r,jC,w7e,g8r,h8r,DJ,p8r,_8r,u8r,DC,A7e,b8r,v8r,GJ,F8r,T8r,M8r,GC,y7e,E8r,C8r,OJ,w8r,A8r,y8r,OC,L7e,L8r,x8r,VJ,$8r,k8r,S8r,VC,x7e,R8r,P8r,XJ,B8r,I8r,q8r,XC,$7e,N8r,j8r,zJ,D8r,G8r,O8r,zC,k7e,V8r,X8r,WJ,z8r,W8r,Q8r,WC,oje,Sc,QC,S7e,M9,H8r,R7e,U8r,rje,mr,E9,J8r,Rc,Y8r,QJ,K8r,Z8r,HJ,e9r,o9r,r9r,C9,t9r,P7e,a9r,n9r,s9r,Ot,w9,l9r,B7e,i9r,d9r,Pc,c9r,I7e,f9r,m9r,UJ,g9r,h9r,p9r,HC,_9r,Dr,A9,u9r,q7e,b9r,v9r,pn,F9r,N7e,T9r,M9r,j7e,E9r,C9r,D7e,w9r,A9r,y9r,Re,UC,G7e,L9r,x9r,JJ,$9r,k9r,S9r,JC,O7e,R9r,P9r,YJ,B9r,I9r,q9r,YC,V7e,N9r,j9r,KJ,D9r,G9r,O9r,KC,X7e,V9r,X9r,ZJ,z9r,W9r,Q9r,ZC,z7e,H9r,U9r,eY,J9r,Y9r,K9r,e5,W7e,Z9r,exr,oY,oxr,rxr,txr,o5,Q7e,axr,nxr,rY,sxr,lxr,ixr,r5,H7e,dxr,cxr,tY,fxr,mxr,gxr,t5,U7e,hxr,pxr,aY,_xr,uxr,bxr,a5,tje,Bc,n5,J7e,y9,vxr,Y7e,Fxr,aje,gr,L9,Txr,Ic,Mxr,nY,Exr,Cxr,sY,wxr,Axr,yxr,x9,Lxr,K7e,xxr,$xr,kxr,Vt,$9,Sxr,Z7e,Rxr,Pxr,qc,Bxr,eMe,Ixr,qxr,lY,Nxr,jxr,Dxr,s5,Gxr,Gr,k9,Oxr,oMe,Vxr,Xxr,_n,zxr,rMe,Wxr,Qxr,tMe,Hxr,Uxr,aMe,Jxr,Yxr,Kxr,Ee,l5,nMe,Zxr,e$r,iY,o$r,r$r,t$r,i5,sMe,a$r,n$r,dY,s$r,l$r,i$r,d5,lMe,d$r,c$r,cY,f$r,m$r,g$r,c5,iMe,h$r,p$r,fY,_$r,u$r,b$r,f5,dMe,v$r,F$r,mY,T$r,M$r,E$r,m5,cMe,C$r,w$r,gY,A$r,y$r,L$r,g5,fMe,x$r,$$r,hY,k$r,S$r,R$r,h5,mMe,P$r,B$r,pY,I$r,q$r,N$r,p5,gMe,j$r,D$r,_Y,G$r,O$r,V$r,_5,hMe,X$r,z$r,uY,W$r,Q$r,H$r,u5,pMe,U$r,J$r,bY,Y$r,K$r,Z$r,b5,_Me,ekr,okr,vY,rkr,tkr,akr,v5,nje,Nc,F5,uMe,S9,nkr,bMe,skr,sje,hr,R9,lkr,jc,ikr,FY,dkr,ckr,TY,fkr,mkr,gkr,P9,hkr,vMe,pkr,_kr,ukr,Xt,B9,bkr,FMe,vkr,Fkr,Dc,Tkr,TMe,Mkr,Ekr,MY,Ckr,wkr,Akr,T5,ykr,Or,I9,Lkr,MMe,xkr,$kr,un,kkr,EMe,Skr,Rkr,CMe,Pkr,Bkr,wMe,Ikr,qkr,Nkr,Le,M5,AMe,jkr,Dkr,EY,Gkr,Okr,Vkr,E5,yMe,Xkr,zkr,CY,Wkr,Qkr,Hkr,C5,LMe,Ukr,Jkr,wY,Ykr,Kkr,Zkr,w5,xMe,eSr,oSr,AY,rSr,tSr,aSr,A5,$Me,nSr,sSr,yY,lSr,iSr,dSr,y5,kMe,cSr,fSr,LY,mSr,gSr,hSr,L5,SMe,pSr,_Sr,xY,uSr,bSr,vSr,x5,RMe,FSr,TSr,$Y,MSr,ESr,CSr,$5,PMe,wSr,ASr,kY,ySr,LSr,xSr,k5,BMe,$Sr,kSr,SY,SSr,RSr,PSr,S5,lje,Gc,R5,IMe,q9,BSr,qMe,ISr,ije,pr,N9,qSr,Oc,NSr,RY,jSr,DSr,PY,GSr,OSr,VSr,j9,XSr,NMe,zSr,WSr,QSr,zt,D9,HSr,jMe,USr,JSr,Vc,YSr,DMe,KSr,ZSr,BY,eRr,oRr,rRr,P5,tRr,Vr,G9,aRr,GMe,nRr,sRr,bn,lRr,OMe,iRr,dRr,VMe,cRr,fRr,XMe,mRr,gRr,hRr,Pe,B5,zMe,pRr,_Rr,IY,uRr,bRr,vRr,I5,WMe,FRr,TRr,qY,MRr,ERr,CRr,q5,QMe,wRr,ARr,NY,yRr,LRr,xRr,N5,HMe,$Rr,kRr,jY,SRr,RRr,PRr,j5,UMe,BRr,IRr,DY,qRr,NRr,jRr,D5,JMe,DRr,GRr,GY,ORr,VRr,XRr,G5,YMe,zRr,WRr,OY,QRr,HRr,URr,O5,KMe,JRr,YRr,VY,KRr,ZRr,ePr,V5,ZMe,oPr,rPr,XY,tPr,aPr,nPr,X5,dje,Xc,z5,e4e,O9,sPr,o4e,lPr,cje,_r,V9,iPr,zc,dPr,zY,cPr,fPr,WY,mPr,gPr,hPr,X9,pPr,r4e,_Pr,uPr,bPr,Wt,z9,vPr,t4e,FPr,TPr,Wc,MPr,a4e,EPr,CPr,QY,wPr,APr,yPr,W5,LPr,Xr,W9,xPr,n4e,$Pr,kPr,vn,SPr,s4e,RPr,PPr,l4e,BPr,IPr,i4e,qPr,NPr,jPr,xe,Q5,d4e,DPr,GPr,HY,OPr,VPr,XPr,H5,c4e,zPr,WPr,UY,QPr,HPr,UPr,U5,f4e,JPr,YPr,JY,KPr,ZPr,eBr,J5,m4e,oBr,rBr,YY,tBr,aBr,nBr,Y5,g4e,sBr,lBr,KY,iBr,dBr,cBr,K5,h4e,fBr,mBr,ZY,gBr,hBr,pBr,Z5,p4e,_Br,uBr,eK,bBr,vBr,FBr,ew,_4e,TBr,MBr,oK,EBr,CBr,wBr,ow,u4e,ABr,yBr,rK,LBr,xBr,$Br,rw,b4e,kBr,SBr,tK,RBr,PBr,BBr,tw,fje,Qc,aw,v4e,Q9,IBr,F4e,qBr,mje,ur,H9,NBr,Hc,jBr,aK,DBr,GBr,nK,OBr,VBr,XBr,U9,zBr,T4e,WBr,QBr,HBr,Qt,J9,UBr,M4e,JBr,YBr,Uc,KBr,E4e,ZBr,eIr,sK,oIr,rIr,tIr,nw,aIr,zr,Y9,nIr,C4e,sIr,lIr,Fn,iIr,w4e,dIr,cIr,A4e,fIr,mIr,y4e,gIr,hIr,pIr,$e,sw,L4e,_Ir,uIr,lK,bIr,vIr,FIr,lw,x4e,TIr,MIr,iK,EIr,CIr,wIr,iw,$4e,AIr,yIr,dK,LIr,xIr,$Ir,dw,k4e,kIr,SIr,cK,RIr,PIr,BIr,cw,S4e,IIr,qIr,fK,NIr,jIr,DIr,fw,R4e,GIr,OIr,mK,VIr,XIr,zIr,mw,P4e,WIr,QIr,gK,HIr,UIr,JIr,gw,B4e,YIr,KIr,hK,ZIr,eqr,oqr,hw,I4e,rqr,tqr,pK,aqr,nqr,sqr,pw,q4e,lqr,iqr,_K,dqr,cqr,fqr,_w,gje,Jc,uw,N4e,K9,mqr,j4e,gqr,hje,br,Z9,hqr,Yc,pqr,uK,_qr,uqr,bK,bqr,vqr,Fqr,ex,Tqr,D4e,Mqr,Eqr,Cqr,Ht,ox,wqr,G4e,Aqr,yqr,Kc,Lqr,O4e,xqr,$qr,vK,kqr,Sqr,Rqr,bw,Pqr,Wr,rx,Bqr,V4e,Iqr,qqr,Tn,Nqr,X4e,jqr,Dqr,z4e,Gqr,Oqr,W4e,Vqr,Xqr,zqr,De,vw,Q4e,Wqr,Qqr,FK,Hqr,Uqr,Jqr,Fw,H4e,Yqr,Kqr,TK,Zqr,eNr,oNr,Tw,U4e,rNr,tNr,MK,aNr,nNr,sNr,Mw,J4e,lNr,iNr,EK,dNr,cNr,fNr,Ew,Y4e,mNr,gNr,CK,hNr,pNr,_Nr,Cw,K4e,uNr,bNr,wK,vNr,FNr,TNr,ww,Z4e,MNr,ENr,AK,CNr,wNr,ANr,Aw,eEe,yNr,LNr,yK,xNr,$Nr,kNr,yw,pje,Zc,Lw,oEe,tx,SNr,rEe,RNr,_je,vr,ax,PNr,ef,BNr,LK,INr,qNr,xK,NNr,jNr,DNr,nx,GNr,tEe,ONr,VNr,XNr,Ut,sx,zNr,aEe,WNr,QNr,of,HNr,nEe,UNr,JNr,$K,YNr,KNr,ZNr,xw,ejr,Qr,lx,ojr,sEe,rjr,tjr,Mn,ajr,lEe,njr,sjr,iEe,ljr,ijr,dEe,djr,cjr,fjr,Ge,$w,cEe,mjr,gjr,kK,hjr,pjr,_jr,kw,fEe,ujr,bjr,SK,vjr,Fjr,Tjr,Sw,mEe,Mjr,Ejr,RK,Cjr,wjr,Ajr,Rw,gEe,yjr,Ljr,PK,xjr,$jr,kjr,Pw,hEe,Sjr,Rjr,BK,Pjr,Bjr,Ijr,Bw,pEe,qjr,Njr,IK,jjr,Djr,Gjr,Iw,_Ee,Ojr,Vjr,qK,Xjr,zjr,Wjr,qw,uEe,Qjr,Hjr,NK,Ujr,Jjr,Yjr,Nw,uje,rf,jw,bEe,ix,Kjr,vEe,Zjr,bje,Fr,dx,eDr,tf,oDr,jK,rDr,tDr,DK,aDr,nDr,sDr,cx,lDr,FEe,iDr,dDr,cDr,Jt,fx,fDr,TEe,mDr,gDr,af,hDr,MEe,pDr,_Dr,GK,uDr,bDr,vDr,Dw,FDr,Hr,mx,TDr,EEe,MDr,EDr,En,CDr,CEe,wDr,ADr,wEe,yDr,LDr,AEe,xDr,$Dr,kDr,yEe,Gw,LEe,SDr,RDr,OK,PDr,BDr,IDr,Ow,vje,nf,Vw,xEe,gx,qDr,$Ee,NDr,Fje,Tr,hx,jDr,sf,DDr,VK,GDr,ODr,XK,VDr,XDr,zDr,px,WDr,kEe,QDr,HDr,UDr,Yt,_x,JDr,SEe,YDr,KDr,lf,ZDr,REe,eGr,oGr,zK,rGr,tGr,aGr,Xw,nGr,Ur,ux,sGr,PEe,lGr,iGr,Cn,dGr,BEe,cGr,fGr,IEe,mGr,gGr,qEe,hGr,pGr,_Gr,bx,zw,NEe,uGr,bGr,WK,vGr,FGr,TGr,Ww,jEe,MGr,EGr,QK,CGr,wGr,AGr,Qw,Tje,df,Hw,DEe,vx,yGr,GEe,LGr,Mje,Mr,Fx,xGr,cf,$Gr,HK,kGr,SGr,UK,RGr,PGr,BGr,Tx,IGr,OEe,qGr,NGr,jGr,Kt,Mx,DGr,VEe,GGr,OGr,ff,VGr,XEe,XGr,zGr,JK,WGr,QGr,HGr,Uw,UGr,Jr,Ex,JGr,zEe,YGr,KGr,wn,ZGr,WEe,eOr,oOr,QEe,rOr,tOr,HEe,aOr,nOr,sOr,UEe,Jw,JEe,lOr,iOr,YK,dOr,cOr,fOr,Yw,Eje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),v6=new re({}),F6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new mOr({props:{warning:!0,$$slots:{default:[k9t]},$$scope:{ctx:L}}}),T6=new re({}),M6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L581"}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),A6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/configuration_auto.py#L727"}}),y6=new re({}),L6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L395"}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17313/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L409"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),S6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/tokenization_auto.py#L605"}}),R6=new re({}),P6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17313/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Rh=new mOr({props:{$$slots:{default:[P9t]},$$scope:{ctx:L}}}),Ph=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),N6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),j6=new re({}),D6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L88"}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L102"}}),ep=new mOr({props:{$$slots:{default:[I9t]},$$scope:{ctx:L}}}),op=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),X6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/processing_auto.py#L255"}}),z6=new re({}),W6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L730"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),ap=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),K_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),J6=new re({}),Y6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L737"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),eu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L752"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Wu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L759"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L766"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L775"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L809"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),c2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L816"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),m2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L802"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L784"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L791"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L825"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L864"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L871"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L894"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L878"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),uL=new re({}),bL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L885"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L903"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),LL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L910"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L857"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L832"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L839"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_auto.py#L848"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),c8=new re({}),f8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),p8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),$8=new re({}),k8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),B8=new re({}),I8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),D8=new re({}),G8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),W8=new re({}),Q8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),r9=new re({}),t9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),u9=new re({}),b9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),M9=new re({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),y9=new re({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),S9=new re({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),q9=new re({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),O9=new re({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),tx=new re({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),ix=new re({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),gx=new re({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17313/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17313/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17313/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),p6=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),_6=o("AutoConfig"),Ln=o(", "),xn=a("a"),u6=o("AutoModel"),pi=o(`, and
`),$n=a("a"),b6=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),q$=o("will create a model that is an instance of "),ui=a("a"),N$=o("BertModel"),j$=o("."),Eo=l(),wa=a("p"),D$=o("There is one class of "),bf=a("code"),G$=o("AutoModel"),kGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Fqe=l(),bi=a("h2"),vf=a("a"),Xee=a("span"),F(v6.$$.fragment),SGe=l(),zee=a("span"),RGe=o("Extending the Auto Classes"),Tqe=l(),kn=a("p"),PGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wee=a("code"),BGe=o("NewModel"),IGe=o(", make sure you have a "),Qee=a("code"),qGe=o("NewModelConfig"),NGe=o(` then you can add those to the auto
classes like this:`),Mqe=l(),F(F6.$$.fragment),Eqe=l(),O$=a("p"),jGe=o("You will then be able to use the auto classes like you would usually do!"),Cqe=l(),F(Ff.$$.fragment),wqe=l(),vi=a("h2"),Tf=a("a"),Hee=a("span"),F(T6.$$.fragment),DGe=l(),Uee=a("span"),GGe=o("AutoConfig"),Aqe=l(),Co=a("div"),F(M6.$$.fragment),OGe=l(),E6=a("p"),VGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V$=a("a"),XGe=o("from_pretrained()"),zGe=o(" class method."),WGe=l(),C6=a("p"),QGe=o("This class cannot be instantiated directly using "),Jee=a("code"),HGe=o("__init__()"),UGe=o(" (throws an error)."),JGe=l(),Er=a("div"),F(w6.$$.fragment),YGe=l(),Yee=a("p"),KGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZGe=l(),Fi=a("p"),eOe=o("The configuration class to instantiate is selected based on the "),Kee=a("code"),oOe=o("model_type"),rOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zee=a("code"),tOe=o("pretrained_model_name_or_path"),aOe=o(":"),nOe=l(),A=a("ul"),Mf=a("li"),eoe=a("strong"),sOe=o("albert"),lOe=o(" \u2014 "),X$=a("a"),iOe=o("AlbertConfig"),dOe=o(" (ALBERT model)"),cOe=l(),Ef=a("li"),ooe=a("strong"),fOe=o("bart"),mOe=o(" \u2014 "),z$=a("a"),gOe=o("BartConfig"),hOe=o(" (BART model)"),pOe=l(),Cf=a("li"),roe=a("strong"),_Oe=o("beit"),uOe=o(" \u2014 "),W$=a("a"),bOe=o("BeitConfig"),vOe=o(" (BEiT model)"),FOe=l(),wf=a("li"),toe=a("strong"),TOe=o("bert"),MOe=o(" \u2014 "),Q$=a("a"),EOe=o("BertConfig"),COe=o(" (BERT model)"),wOe=l(),Af=a("li"),aoe=a("strong"),AOe=o("bert-generation"),yOe=o(" \u2014 "),H$=a("a"),LOe=o("BertGenerationConfig"),xOe=o(" (Bert Generation model)"),$Oe=l(),yf=a("li"),noe=a("strong"),kOe=o("big_bird"),SOe=o(" \u2014 "),U$=a("a"),ROe=o("BigBirdConfig"),POe=o(" (BigBird model)"),BOe=l(),Lf=a("li"),soe=a("strong"),IOe=o("bigbird_pegasus"),qOe=o(" \u2014 "),J$=a("a"),NOe=o("BigBirdPegasusConfig"),jOe=o(" (BigBirdPegasus model)"),DOe=l(),xf=a("li"),loe=a("strong"),GOe=o("blenderbot"),OOe=o(" \u2014 "),Y$=a("a"),VOe=o("BlenderbotConfig"),XOe=o(" (Blenderbot model)"),zOe=l(),$f=a("li"),ioe=a("strong"),WOe=o("blenderbot-small"),QOe=o(" \u2014 "),K$=a("a"),HOe=o("BlenderbotSmallConfig"),UOe=o(" (BlenderbotSmall model)"),JOe=l(),kf=a("li"),doe=a("strong"),YOe=o("camembert"),KOe=o(" \u2014 "),Z$=a("a"),ZOe=o("CamembertConfig"),eVe=o(" (CamemBERT model)"),oVe=l(),Sf=a("li"),coe=a("strong"),rVe=o("canine"),tVe=o(" \u2014 "),ek=a("a"),aVe=o("CanineConfig"),nVe=o(" (Canine model)"),sVe=l(),Rf=a("li"),foe=a("strong"),lVe=o("clip"),iVe=o(" \u2014 "),ok=a("a"),dVe=o("CLIPConfig"),cVe=o(" (CLIP model)"),fVe=l(),Pf=a("li"),moe=a("strong"),mVe=o("convbert"),gVe=o(" \u2014 "),rk=a("a"),hVe=o("ConvBertConfig"),pVe=o(" (ConvBERT model)"),_Ve=l(),Bf=a("li"),goe=a("strong"),uVe=o("convnext"),bVe=o(" \u2014 "),tk=a("a"),vVe=o("ConvNextConfig"),FVe=o(" (ConvNext model)"),TVe=l(),If=a("li"),hoe=a("strong"),MVe=o("ctrl"),EVe=o(" \u2014 "),ak=a("a"),CVe=o("CTRLConfig"),wVe=o(" (CTRL model)"),AVe=l(),qf=a("li"),poe=a("strong"),yVe=o("cvt"),LVe=o(" \u2014 "),nk=a("a"),xVe=o("CvtConfig"),$Ve=o(" (CvT model)"),kVe=l(),Nf=a("li"),_oe=a("strong"),SVe=o("data2vec-audio"),RVe=o(" \u2014 "),sk=a("a"),PVe=o("Data2VecAudioConfig"),BVe=o(" (Data2VecAudio model)"),IVe=l(),jf=a("li"),uoe=a("strong"),qVe=o("data2vec-text"),NVe=o(" \u2014 "),lk=a("a"),jVe=o("Data2VecTextConfig"),DVe=o(" (Data2VecText model)"),GVe=l(),Df=a("li"),boe=a("strong"),OVe=o("data2vec-vision"),VVe=o(" \u2014 "),ik=a("a"),XVe=o("Data2VecVisionConfig"),zVe=o(" (Data2VecVision model)"),WVe=l(),Gf=a("li"),voe=a("strong"),QVe=o("deberta"),HVe=o(" \u2014 "),dk=a("a"),UVe=o("DebertaConfig"),JVe=o(" (DeBERTa model)"),YVe=l(),Of=a("li"),Foe=a("strong"),KVe=o("deberta-v2"),ZVe=o(" \u2014 "),ck=a("a"),eXe=o("DebertaV2Config"),oXe=o(" (DeBERTa-v2 model)"),rXe=l(),Vf=a("li"),Toe=a("strong"),tXe=o("decision_transformer"),aXe=o(" \u2014 "),fk=a("a"),nXe=o("DecisionTransformerConfig"),sXe=o(" (Decision Transformer model)"),lXe=l(),Xf=a("li"),Moe=a("strong"),iXe=o("deit"),dXe=o(" \u2014 "),mk=a("a"),cXe=o("DeiTConfig"),fXe=o(" (DeiT model)"),mXe=l(),zf=a("li"),Eoe=a("strong"),gXe=o("detr"),hXe=o(" \u2014 "),gk=a("a"),pXe=o("DetrConfig"),_Xe=o(" (DETR model)"),uXe=l(),Wf=a("li"),Coe=a("strong"),bXe=o("distilbert"),vXe=o(" \u2014 "),hk=a("a"),FXe=o("DistilBertConfig"),TXe=o(" (DistilBERT model)"),MXe=l(),Qf=a("li"),woe=a("strong"),EXe=o("dpr"),CXe=o(" \u2014 "),pk=a("a"),wXe=o("DPRConfig"),AXe=o(" (DPR model)"),yXe=l(),Hf=a("li"),Aoe=a("strong"),LXe=o("dpt"),xXe=o(" \u2014 "),_k=a("a"),$Xe=o("DPTConfig"),kXe=o(" (DPT model)"),SXe=l(),Uf=a("li"),yoe=a("strong"),RXe=o("electra"),PXe=o(" \u2014 "),uk=a("a"),BXe=o("ElectraConfig"),IXe=o(" (ELECTRA model)"),qXe=l(),Jf=a("li"),Loe=a("strong"),NXe=o("encoder-decoder"),jXe=o(" \u2014 "),bk=a("a"),DXe=o("EncoderDecoderConfig"),GXe=o(" (Encoder decoder model)"),OXe=l(),Yf=a("li"),xoe=a("strong"),VXe=o("flaubert"),XXe=o(" \u2014 "),vk=a("a"),zXe=o("FlaubertConfig"),WXe=o(" (FlauBERT model)"),QXe=l(),Kf=a("li"),$oe=a("strong"),HXe=o("flava"),UXe=o(" \u2014 "),Fk=a("a"),JXe=o("FlavaConfig"),YXe=o(" (Flava model)"),KXe=l(),Zf=a("li"),koe=a("strong"),ZXe=o("fnet"),eze=o(" \u2014 "),Tk=a("a"),oze=o("FNetConfig"),rze=o(" (FNet model)"),tze=l(),em=a("li"),Soe=a("strong"),aze=o("fsmt"),nze=o(" \u2014 "),Mk=a("a"),sze=o("FSMTConfig"),lze=o(" (FairSeq Machine-Translation model)"),ize=l(),om=a("li"),Roe=a("strong"),dze=o("funnel"),cze=o(" \u2014 "),Ek=a("a"),fze=o("FunnelConfig"),mze=o(" (Funnel Transformer model)"),gze=l(),rm=a("li"),Poe=a("strong"),hze=o("glpn"),pze=o(" \u2014 "),Ck=a("a"),_ze=o("GLPNConfig"),uze=o(" (GLPN model)"),bze=l(),tm=a("li"),Boe=a("strong"),vze=o("gpt2"),Fze=o(" \u2014 "),wk=a("a"),Tze=o("GPT2Config"),Mze=o(" (OpenAI GPT-2 model)"),Eze=l(),am=a("li"),Ioe=a("strong"),Cze=o("gpt_neo"),wze=o(" \u2014 "),Ak=a("a"),Aze=o("GPTNeoConfig"),yze=o(" (GPT Neo model)"),Lze=l(),nm=a("li"),qoe=a("strong"),xze=o("gptj"),$ze=o(" \u2014 "),yk=a("a"),kze=o("GPTJConfig"),Sze=o(" (GPT-J model)"),Rze=l(),sm=a("li"),Noe=a("strong"),Pze=o("groupvit"),Bze=o(" \u2014 "),Lk=a("a"),Ize=o("GroupViTConfig"),qze=o(" (GroupViT model)"),Nze=l(),lm=a("li"),joe=a("strong"),jze=o("hubert"),Dze=o(" \u2014 "),xk=a("a"),Gze=o("HubertConfig"),Oze=o(" (Hubert model)"),Vze=l(),im=a("li"),Doe=a("strong"),Xze=o("ibert"),zze=o(" \u2014 "),$k=a("a"),Wze=o("IBertConfig"),Qze=o(" (I-BERT model)"),Hze=l(),dm=a("li"),Goe=a("strong"),Uze=o("imagegpt"),Jze=o(" \u2014 "),kk=a("a"),Yze=o("ImageGPTConfig"),Kze=o(" (ImageGPT model)"),Zze=l(),cm=a("li"),Ooe=a("strong"),eWe=o("layoutlm"),oWe=o(" \u2014 "),Sk=a("a"),rWe=o("LayoutLMConfig"),tWe=o(" (LayoutLM model)"),aWe=l(),fm=a("li"),Voe=a("strong"),nWe=o("layoutlmv2"),sWe=o(" \u2014 "),Rk=a("a"),lWe=o("LayoutLMv2Config"),iWe=o(" (LayoutLMv2 model)"),dWe=l(),mm=a("li"),Xoe=a("strong"),cWe=o("led"),fWe=o(" \u2014 "),Pk=a("a"),mWe=o("LEDConfig"),gWe=o(" (LED model)"),hWe=l(),gm=a("li"),zoe=a("strong"),pWe=o("longformer"),_We=o(" \u2014 "),Bk=a("a"),uWe=o("LongformerConfig"),bWe=o(" (Longformer model)"),vWe=l(),hm=a("li"),Woe=a("strong"),FWe=o("luke"),TWe=o(" \u2014 "),Ik=a("a"),MWe=o("LukeConfig"),EWe=o(" (LUKE model)"),CWe=l(),pm=a("li"),Qoe=a("strong"),wWe=o("lxmert"),AWe=o(" \u2014 "),qk=a("a"),yWe=o("LxmertConfig"),LWe=o(" (LXMERT model)"),xWe=l(),_m=a("li"),Hoe=a("strong"),$We=o("m2m_100"),kWe=o(" \u2014 "),Nk=a("a"),SWe=o("M2M100Config"),RWe=o(" (M2M100 model)"),PWe=l(),um=a("li"),Uoe=a("strong"),BWe=o("marian"),IWe=o(" \u2014 "),jk=a("a"),qWe=o("MarianConfig"),NWe=o(" (Marian model)"),jWe=l(),bm=a("li"),Joe=a("strong"),DWe=o("maskformer"),GWe=o(" \u2014 "),Dk=a("a"),OWe=o("MaskFormerConfig"),VWe=o(" (MaskFormer model)"),XWe=l(),vm=a("li"),Yoe=a("strong"),zWe=o("mbart"),WWe=o(" \u2014 "),Gk=a("a"),QWe=o("MBartConfig"),HWe=o(" (mBART model)"),UWe=l(),Fm=a("li"),Koe=a("strong"),JWe=o("megatron-bert"),YWe=o(" \u2014 "),Ok=a("a"),KWe=o("MegatronBertConfig"),ZWe=o(" (MegatronBert model)"),eQe=l(),Tm=a("li"),Zoe=a("strong"),oQe=o("mobilebert"),rQe=o(" \u2014 "),Vk=a("a"),tQe=o("MobileBertConfig"),aQe=o(" (MobileBERT model)"),nQe=l(),Mm=a("li"),ere=a("strong"),sQe=o("mpnet"),lQe=o(" \u2014 "),Xk=a("a"),iQe=o("MPNetConfig"),dQe=o(" (MPNet model)"),cQe=l(),Em=a("li"),ore=a("strong"),fQe=o("mt5"),mQe=o(" \u2014 "),zk=a("a"),gQe=o("MT5Config"),hQe=o(" (mT5 model)"),pQe=l(),Cm=a("li"),rre=a("strong"),_Qe=o("nystromformer"),uQe=o(" \u2014 "),Wk=a("a"),bQe=o("NystromformerConfig"),vQe=o(" (Nystromformer model)"),FQe=l(),wm=a("li"),tre=a("strong"),TQe=o("openai-gpt"),MQe=o(" \u2014 "),Qk=a("a"),EQe=o("OpenAIGPTConfig"),CQe=o(" (OpenAI GPT model)"),wQe=l(),Am=a("li"),are=a("strong"),AQe=o("opt"),yQe=o(" \u2014 "),Hk=a("a"),LQe=o("OPTConfig"),xQe=o(" (OPT model)"),$Qe=l(),ym=a("li"),nre=a("strong"),kQe=o("pegasus"),SQe=o(" \u2014 "),Uk=a("a"),RQe=o("PegasusConfig"),PQe=o(" (Pegasus model)"),BQe=l(),Lm=a("li"),sre=a("strong"),IQe=o("perceiver"),qQe=o(" \u2014 "),Jk=a("a"),NQe=o("PerceiverConfig"),jQe=o(" (Perceiver model)"),DQe=l(),xm=a("li"),lre=a("strong"),GQe=o("plbart"),OQe=o(" \u2014 "),Yk=a("a"),VQe=o("PLBartConfig"),XQe=o(" (PLBart model)"),zQe=l(),$m=a("li"),ire=a("strong"),WQe=o("poolformer"),QQe=o(" \u2014 "),Kk=a("a"),HQe=o("PoolFormerConfig"),UQe=o(" (PoolFormer model)"),JQe=l(),km=a("li"),dre=a("strong"),YQe=o("prophetnet"),KQe=o(" \u2014 "),Zk=a("a"),ZQe=o("ProphetNetConfig"),eHe=o(" (ProphetNet model)"),oHe=l(),Sm=a("li"),cre=a("strong"),rHe=o("qdqbert"),tHe=o(" \u2014 "),eS=a("a"),aHe=o("QDQBertConfig"),nHe=o(" (QDQBert model)"),sHe=l(),Rm=a("li"),fre=a("strong"),lHe=o("rag"),iHe=o(" \u2014 "),oS=a("a"),dHe=o("RagConfig"),cHe=o(" (RAG model)"),fHe=l(),Pm=a("li"),mre=a("strong"),mHe=o("realm"),gHe=o(" \u2014 "),rS=a("a"),hHe=o("RealmConfig"),pHe=o(" (Realm model)"),_He=l(),Bm=a("li"),gre=a("strong"),uHe=o("reformer"),bHe=o(" \u2014 "),tS=a("a"),vHe=o("ReformerConfig"),FHe=o(" (Reformer model)"),THe=l(),Im=a("li"),hre=a("strong"),MHe=o("regnet"),EHe=o(" \u2014 "),aS=a("a"),CHe=o("RegNetConfig"),wHe=o(" (RegNet model)"),AHe=l(),qm=a("li"),pre=a("strong"),yHe=o("rembert"),LHe=o(" \u2014 "),nS=a("a"),xHe=o("RemBertConfig"),$He=o(" (RemBERT model)"),kHe=l(),Nm=a("li"),_re=a("strong"),SHe=o("resnet"),RHe=o(" \u2014 "),sS=a("a"),PHe=o("ResNetConfig"),BHe=o(" (ResNet model)"),IHe=l(),jm=a("li"),ure=a("strong"),qHe=o("retribert"),NHe=o(" \u2014 "),lS=a("a"),jHe=o("RetriBertConfig"),DHe=o(" (RetriBERT model)"),GHe=l(),Dm=a("li"),bre=a("strong"),OHe=o("roberta"),VHe=o(" \u2014 "),iS=a("a"),XHe=o("RobertaConfig"),zHe=o(" (RoBERTa model)"),WHe=l(),Gm=a("li"),vre=a("strong"),QHe=o("roformer"),HHe=o(" \u2014 "),dS=a("a"),UHe=o("RoFormerConfig"),JHe=o(" (RoFormer model)"),YHe=l(),Om=a("li"),Fre=a("strong"),KHe=o("segformer"),ZHe=o(" \u2014 "),cS=a("a"),eUe=o("SegformerConfig"),oUe=o(" (SegFormer model)"),rUe=l(),Vm=a("li"),Tre=a("strong"),tUe=o("sew"),aUe=o(" \u2014 "),fS=a("a"),nUe=o("SEWConfig"),sUe=o(" (SEW model)"),lUe=l(),Xm=a("li"),Mre=a("strong"),iUe=o("sew-d"),dUe=o(" \u2014 "),mS=a("a"),cUe=o("SEWDConfig"),fUe=o(" (SEW-D model)"),mUe=l(),zm=a("li"),Ere=a("strong"),gUe=o("speech-encoder-decoder"),hUe=o(" \u2014 "),gS=a("a"),pUe=o("SpeechEncoderDecoderConfig"),_Ue=o(" (Speech Encoder decoder model)"),uUe=l(),Wm=a("li"),Cre=a("strong"),bUe=o("speech_to_text"),vUe=o(" \u2014 "),hS=a("a"),FUe=o("Speech2TextConfig"),TUe=o(" (Speech2Text model)"),MUe=l(),Qm=a("li"),wre=a("strong"),EUe=o("speech_to_text_2"),CUe=o(" \u2014 "),pS=a("a"),wUe=o("Speech2Text2Config"),AUe=o(" (Speech2Text2 model)"),yUe=l(),Hm=a("li"),Are=a("strong"),LUe=o("splinter"),xUe=o(" \u2014 "),_S=a("a"),$Ue=o("SplinterConfig"),kUe=o(" (Splinter model)"),SUe=l(),Um=a("li"),yre=a("strong"),RUe=o("squeezebert"),PUe=o(" \u2014 "),uS=a("a"),BUe=o("SqueezeBertConfig"),IUe=o(" (SqueezeBERT model)"),qUe=l(),Jm=a("li"),Lre=a("strong"),NUe=o("swin"),jUe=o(" \u2014 "),bS=a("a"),DUe=o("SwinConfig"),GUe=o(" (Swin model)"),OUe=l(),Ym=a("li"),xre=a("strong"),VUe=o("t5"),XUe=o(" \u2014 "),vS=a("a"),zUe=o("T5Config"),WUe=o(" (T5 model)"),QUe=l(),Km=a("li"),$re=a("strong"),HUe=o("tapas"),UUe=o(" \u2014 "),FS=a("a"),JUe=o("TapasConfig"),YUe=o(" (TAPAS model)"),KUe=l(),Zm=a("li"),kre=a("strong"),ZUe=o("trajectory_transformer"),eJe=o(" \u2014 "),TS=a("a"),oJe=o("TrajectoryTransformerConfig"),rJe=o(" (Trajectory Transformer model)"),tJe=l(),eg=a("li"),Sre=a("strong"),aJe=o("transfo-xl"),nJe=o(" \u2014 "),MS=a("a"),sJe=o("TransfoXLConfig"),lJe=o(" (Transformer-XL model)"),iJe=l(),og=a("li"),Rre=a("strong"),dJe=o("trocr"),cJe=o(" \u2014 "),ES=a("a"),fJe=o("TrOCRConfig"),mJe=o(" (TrOCR model)"),gJe=l(),rg=a("li"),Pre=a("strong"),hJe=o("unispeech"),pJe=o(" \u2014 "),CS=a("a"),_Je=o("UniSpeechConfig"),uJe=o(" (UniSpeech model)"),bJe=l(),tg=a("li"),Bre=a("strong"),vJe=o("unispeech-sat"),FJe=o(" \u2014 "),wS=a("a"),TJe=o("UniSpeechSatConfig"),MJe=o(" (UniSpeechSat model)"),EJe=l(),ag=a("li"),Ire=a("strong"),CJe=o("van"),wJe=o(" \u2014 "),AS=a("a"),AJe=o("VanConfig"),yJe=o(" (VAN model)"),LJe=l(),ng=a("li"),qre=a("strong"),xJe=o("vilt"),$Je=o(" \u2014 "),yS=a("a"),kJe=o("ViltConfig"),SJe=o(" (ViLT model)"),RJe=l(),sg=a("li"),Nre=a("strong"),PJe=o("vision-encoder-decoder"),BJe=o(" \u2014 "),LS=a("a"),IJe=o("VisionEncoderDecoderConfig"),qJe=o(" (Vision Encoder decoder model)"),NJe=l(),lg=a("li"),jre=a("strong"),jJe=o("vision-text-dual-encoder"),DJe=o(" \u2014 "),xS=a("a"),GJe=o("VisionTextDualEncoderConfig"),OJe=o(" (VisionTextDualEncoder model)"),VJe=l(),ig=a("li"),Dre=a("strong"),XJe=o("visual_bert"),zJe=o(" \u2014 "),$S=a("a"),WJe=o("VisualBertConfig"),QJe=o(" (VisualBert model)"),HJe=l(),dg=a("li"),Gre=a("strong"),UJe=o("vit"),JJe=o(" \u2014 "),kS=a("a"),YJe=o("ViTConfig"),KJe=o(" (ViT model)"),ZJe=l(),cg=a("li"),Ore=a("strong"),eYe=o("vit_mae"),oYe=o(" \u2014 "),SS=a("a"),rYe=o("ViTMAEConfig"),tYe=o(" (ViTMAE model)"),aYe=l(),fg=a("li"),Vre=a("strong"),nYe=o("wav2vec2"),sYe=o(" \u2014 "),RS=a("a"),lYe=o("Wav2Vec2Config"),iYe=o(" (Wav2Vec2 model)"),dYe=l(),mg=a("li"),Xre=a("strong"),cYe=o("wav2vec2-conformer"),fYe=o(" \u2014 "),PS=a("a"),mYe=o("Wav2Vec2ConformerConfig"),gYe=o(" (Wav2Vec2-Conformer model)"),hYe=l(),gg=a("li"),zre=a("strong"),pYe=o("wavlm"),_Ye=o(" \u2014 "),BS=a("a"),uYe=o("WavLMConfig"),bYe=o(" (WavLM model)"),vYe=l(),hg=a("li"),Wre=a("strong"),FYe=o("xglm"),TYe=o(" \u2014 "),IS=a("a"),MYe=o("XGLMConfig"),EYe=o(" (XGLM model)"),CYe=l(),pg=a("li"),Qre=a("strong"),wYe=o("xlm"),AYe=o(" \u2014 "),qS=a("a"),yYe=o("XLMConfig"),LYe=o(" (XLM model)"),xYe=l(),_g=a("li"),Hre=a("strong"),$Ye=o("xlm-prophetnet"),kYe=o(" \u2014 "),NS=a("a"),SYe=o("XLMProphetNetConfig"),RYe=o(" (XLMProphetNet model)"),PYe=l(),ug=a("li"),Ure=a("strong"),BYe=o("xlm-roberta"),IYe=o(" \u2014 "),jS=a("a"),qYe=o("XLMRobertaConfig"),NYe=o(" (XLM-RoBERTa model)"),jYe=l(),bg=a("li"),Jre=a("strong"),DYe=o("xlm-roberta-xl"),GYe=o(" \u2014 "),DS=a("a"),OYe=o("XLMRobertaXLConfig"),VYe=o(" (XLM-RoBERTa-XL model)"),XYe=l(),vg=a("li"),Yre=a("strong"),zYe=o("xlnet"),WYe=o(" \u2014 "),GS=a("a"),QYe=o("XLNetConfig"),HYe=o(" (XLNet model)"),UYe=l(),Fg=a("li"),Kre=a("strong"),JYe=o("yolos"),YYe=o(" \u2014 "),OS=a("a"),KYe=o("YolosConfig"),ZYe=o(" (YOLOS model)"),eKe=l(),Tg=a("li"),Zre=a("strong"),oKe=o("yoso"),rKe=o(" \u2014 "),VS=a("a"),tKe=o("YosoConfig"),aKe=o(" (YOSO model)"),nKe=l(),F(Mg.$$.fragment),sKe=l(),Eg=a("div"),F(A6.$$.fragment),lKe=l(),ete=a("p"),iKe=o("Register a new configuration for this class."),yqe=l(),Ti=a("h2"),Cg=a("a"),ote=a("span"),F(y6.$$.fragment),dKe=l(),rte=a("span"),cKe=o("AutoTokenizer"),Lqe=l(),wo=a("div"),F(L6.$$.fragment),fKe=l(),x6=a("p"),mKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),XS=a("a"),gKe=o("AutoTokenizer.from_pretrained()"),hKe=o(" class method."),pKe=l(),$6=a("p"),_Ke=o("This class cannot be instantiated directly using "),tte=a("code"),uKe=o("__init__()"),bKe=o(" (throws an error)."),vKe=l(),Cr=a("div"),F(k6.$$.fragment),FKe=l(),ate=a("p"),TKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),MKe=l(),Aa=a("p"),EKe=o("The tokenizer class to instantiate is selected based on the "),nte=a("code"),CKe=o("model_type"),wKe=o(` property of the config object (either
passed as an argument or loaded from `),ste=a("code"),AKe=o("pretrained_model_name_or_path"),yKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lte=a("code"),LKe=o("pretrained_model_name_or_path"),xKe=o(":"),$Ke=l(),k=a("ul"),Sn=a("li"),ite=a("strong"),kKe=o("albert"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("AlbertTokenizer"),PKe=o(" or "),WS=a("a"),BKe=o("AlbertTokenizerFast"),IKe=o(" (ALBERT model)"),qKe=l(),Rn=a("li"),dte=a("strong"),NKe=o("bart"),jKe=o(" \u2014 "),QS=a("a"),DKe=o("BartTokenizer"),GKe=o(" or "),HS=a("a"),OKe=o("BartTokenizerFast"),VKe=o(" (BART model)"),XKe=l(),Pn=a("li"),cte=a("strong"),zKe=o("barthez"),WKe=o(" \u2014 "),US=a("a"),QKe=o("BarthezTokenizer"),HKe=o(" or "),JS=a("a"),UKe=o("BarthezTokenizerFast"),JKe=o(" (BARThez model)"),YKe=l(),wg=a("li"),fte=a("strong"),KKe=o("bartpho"),ZKe=o(" \u2014 "),YS=a("a"),eZe=o("BartphoTokenizer"),oZe=o(" (BARTpho model)"),rZe=l(),Bn=a("li"),mte=a("strong"),tZe=o("bert"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("BertTokenizer"),sZe=o(" or "),ZS=a("a"),lZe=o("BertTokenizerFast"),iZe=o(" (BERT model)"),dZe=l(),Ag=a("li"),gte=a("strong"),cZe=o("bert-generation"),fZe=o(" \u2014 "),eR=a("a"),mZe=o("BertGenerationTokenizer"),gZe=o(" (Bert Generation model)"),hZe=l(),yg=a("li"),hte=a("strong"),pZe=o("bert-japanese"),_Ze=o(" \u2014 "),oR=a("a"),uZe=o("BertJapaneseTokenizer"),bZe=o(" (BertJapanese model)"),vZe=l(),Lg=a("li"),pte=a("strong"),FZe=o("bertweet"),TZe=o(" \u2014 "),rR=a("a"),MZe=o("BertweetTokenizer"),EZe=o(" (Bertweet model)"),CZe=l(),In=a("li"),_te=a("strong"),wZe=o("big_bird"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("BigBirdTokenizer"),LZe=o(" or "),aR=a("a"),xZe=o("BigBirdTokenizerFast"),$Ze=o(" (BigBird model)"),kZe=l(),qn=a("li"),ute=a("strong"),SZe=o("bigbird_pegasus"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("PegasusTokenizer"),BZe=o(" or "),sR=a("a"),IZe=o("PegasusTokenizerFast"),qZe=o(" (BigBirdPegasus model)"),NZe=l(),Nn=a("li"),bte=a("strong"),jZe=o("blenderbot"),DZe=o(" \u2014 "),lR=a("a"),GZe=o("BlenderbotTokenizer"),OZe=o(" or "),iR=a("a"),VZe=o("BlenderbotTokenizerFast"),XZe=o(" (Blenderbot model)"),zZe=l(),xg=a("li"),vte=a("strong"),WZe=o("blenderbot-small"),QZe=o(" \u2014 "),dR=a("a"),HZe=o("BlenderbotSmallTokenizer"),UZe=o(" (BlenderbotSmall model)"),JZe=l(),$g=a("li"),Fte=a("strong"),YZe=o("byt5"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("ByT5Tokenizer"),eeo=o(" (ByT5 model)"),oeo=l(),jn=a("li"),Tte=a("strong"),reo=o("camembert"),teo=o(" \u2014 "),fR=a("a"),aeo=o("CamembertTokenizer"),neo=o(" or "),mR=a("a"),seo=o("CamembertTokenizerFast"),leo=o(" (CamemBERT model)"),ieo=l(),kg=a("li"),Mte=a("strong"),deo=o("canine"),ceo=o(" \u2014 "),gR=a("a"),feo=o("CanineTokenizer"),meo=o(" (Canine model)"),geo=l(),Dn=a("li"),Ete=a("strong"),heo=o("clip"),peo=o(" \u2014 "),hR=a("a"),_eo=o("CLIPTokenizer"),ueo=o(" or "),pR=a("a"),beo=o("CLIPTokenizerFast"),veo=o(" (CLIP model)"),Feo=l(),Gn=a("li"),Cte=a("strong"),Teo=o("convbert"),Meo=o(" \u2014 "),_R=a("a"),Eeo=o("ConvBertTokenizer"),Ceo=o(" or "),uR=a("a"),weo=o("ConvBertTokenizerFast"),Aeo=o(" (ConvBERT model)"),yeo=l(),On=a("li"),wte=a("strong"),Leo=o("cpm"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("CpmTokenizer"),keo=o(" or "),vR=a("a"),Seo=o("CpmTokenizerFast"),Reo=o(" (CPM model)"),Peo=l(),Sg=a("li"),Ate=a("strong"),Beo=o("ctrl"),Ieo=o(" \u2014 "),FR=a("a"),qeo=o("CTRLTokenizer"),Neo=o(" (CTRL model)"),jeo=l(),Vn=a("li"),yte=a("strong"),Deo=o("data2vec-text"),Geo=o(" \u2014 "),TR=a("a"),Oeo=o("RobertaTokenizer"),Veo=o(" or "),MR=a("a"),Xeo=o("RobertaTokenizerFast"),zeo=o(" (Data2VecText model)"),Weo=l(),Xn=a("li"),Lte=a("strong"),Qeo=o("deberta"),Heo=o(" \u2014 "),ER=a("a"),Ueo=o("DebertaTokenizer"),Jeo=o(" or "),CR=a("a"),Yeo=o("DebertaTokenizerFast"),Keo=o(" (DeBERTa model)"),Zeo=l(),zn=a("li"),xte=a("strong"),eoo=o("deberta-v2"),ooo=o(" \u2014 "),wR=a("a"),roo=o("DebertaV2Tokenizer"),too=o(" or "),AR=a("a"),aoo=o("DebertaV2TokenizerFast"),noo=o(" (DeBERTa-v2 model)"),soo=l(),Wn=a("li"),$te=a("strong"),loo=o("distilbert"),ioo=o(" \u2014 "),yR=a("a"),doo=o("DistilBertTokenizer"),coo=o(" or "),LR=a("a"),foo=o("DistilBertTokenizerFast"),moo=o(" (DistilBERT model)"),goo=l(),Qn=a("li"),kte=a("strong"),hoo=o("dpr"),poo=o(" \u2014 "),xR=a("a"),_oo=o("DPRQuestionEncoderTokenizer"),uoo=o(" or "),$R=a("a"),boo=o("DPRQuestionEncoderTokenizerFast"),voo=o(" (DPR model)"),Foo=l(),Hn=a("li"),Ste=a("strong"),Too=o("electra"),Moo=o(" \u2014 "),kR=a("a"),Eoo=o("ElectraTokenizer"),Coo=o(" or "),SR=a("a"),woo=o("ElectraTokenizerFast"),Aoo=o(" (ELECTRA model)"),yoo=l(),Rg=a("li"),Rte=a("strong"),Loo=o("flaubert"),xoo=o(" \u2014 "),RR=a("a"),$oo=o("FlaubertTokenizer"),koo=o(" (FlauBERT model)"),Soo=l(),Un=a("li"),Pte=a("strong"),Roo=o("fnet"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("FNetTokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("FNetTokenizerFast"),Noo=o(" (FNet model)"),joo=l(),Pg=a("li"),Bte=a("strong"),Doo=o("fsmt"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("FSMTTokenizer"),Voo=o(" (FairSeq Machine-Translation model)"),Xoo=l(),Jn=a("li"),Ite=a("strong"),zoo=o("funnel"),Woo=o(" \u2014 "),qR=a("a"),Qoo=o("FunnelTokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("FunnelTokenizerFast"),Joo=o(" (Funnel Transformer model)"),Yoo=l(),Yn=a("li"),qte=a("strong"),Koo=o("gpt2"),Zoo=o(" \u2014 "),jR=a("a"),ero=o("GPT2Tokenizer"),oro=o(" or "),DR=a("a"),rro=o("GPT2TokenizerFast"),tro=o(" (OpenAI GPT-2 model)"),aro=l(),Kn=a("li"),Nte=a("strong"),nro=o("gpt_neo"),sro=o(" \u2014 "),GR=a("a"),lro=o("GPT2Tokenizer"),iro=o(" or "),OR=a("a"),dro=o("GPT2TokenizerFast"),cro=o(" (GPT Neo model)"),fro=l(),Zn=a("li"),jte=a("strong"),mro=o("gptj"),gro=o(" \u2014 "),VR=a("a"),hro=o("GPT2Tokenizer"),pro=o(" or "),XR=a("a"),_ro=o("GPT2TokenizerFast"),uro=o(" (GPT-J model)"),bro=l(),es=a("li"),Dte=a("strong"),vro=o("groupvit"),Fro=o(" \u2014 "),zR=a("a"),Tro=o("CLIPTokenizer"),Mro=o(" or "),WR=a("a"),Ero=o("CLIPTokenizerFast"),Cro=o(" (GroupViT model)"),wro=l(),os=a("li"),Gte=a("strong"),Aro=o("herbert"),yro=o(" \u2014 "),QR=a("a"),Lro=o("HerbertTokenizer"),xro=o(" or "),HR=a("a"),$ro=o("HerbertTokenizerFast"),kro=o(" (HerBERT model)"),Sro=l(),Bg=a("li"),Ote=a("strong"),Rro=o("hubert"),Pro=o(" \u2014 "),UR=a("a"),Bro=o("Wav2Vec2CTCTokenizer"),Iro=o(" (Hubert model)"),qro=l(),rs=a("li"),Vte=a("strong"),Nro=o("ibert"),jro=o(" \u2014 "),JR=a("a"),Dro=o("RobertaTokenizer"),Gro=o(" or "),YR=a("a"),Oro=o("RobertaTokenizerFast"),Vro=o(" (I-BERT model)"),Xro=l(),ts=a("li"),Xte=a("strong"),zro=o("layoutlm"),Wro=o(" \u2014 "),KR=a("a"),Qro=o("LayoutLMTokenizer"),Hro=o(" or "),ZR=a("a"),Uro=o("LayoutLMTokenizerFast"),Jro=o(" (LayoutLM model)"),Yro=l(),as=a("li"),zte=a("strong"),Kro=o("layoutlmv2"),Zro=o(" \u2014 "),eP=a("a"),eto=o("LayoutLMv2Tokenizer"),oto=o(" or "),oP=a("a"),rto=o("LayoutLMv2TokenizerFast"),tto=o(" (LayoutLMv2 model)"),ato=l(),ns=a("li"),Wte=a("strong"),nto=o("layoutxlm"),sto=o(" \u2014 "),rP=a("a"),lto=o("LayoutXLMTokenizer"),ito=o(" or "),tP=a("a"),dto=o("LayoutXLMTokenizerFast"),cto=o(" (LayoutXLM model)"),fto=l(),ss=a("li"),Qte=a("strong"),mto=o("led"),gto=o(" \u2014 "),aP=a("a"),hto=o("LEDTokenizer"),pto=o(" or "),nP=a("a"),_to=o("LEDTokenizerFast"),uto=o(" (LED model)"),bto=l(),ls=a("li"),Hte=a("strong"),vto=o("longformer"),Fto=o(" \u2014 "),sP=a("a"),Tto=o("LongformerTokenizer"),Mto=o(" or "),lP=a("a"),Eto=o("LongformerTokenizerFast"),Cto=o(" (Longformer model)"),wto=l(),Ig=a("li"),Ute=a("strong"),Ato=o("luke"),yto=o(" \u2014 "),iP=a("a"),Lto=o("LukeTokenizer"),xto=o(" (LUKE model)"),$to=l(),is=a("li"),Jte=a("strong"),kto=o("lxmert"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("LxmertTokenizer"),Pto=o(" or "),cP=a("a"),Bto=o("LxmertTokenizerFast"),Ito=o(" (LXMERT model)"),qto=l(),qg=a("li"),Yte=a("strong"),Nto=o("m2m_100"),jto=o(" \u2014 "),fP=a("a"),Dto=o("M2M100Tokenizer"),Gto=o(" (M2M100 model)"),Oto=l(),Ng=a("li"),Kte=a("strong"),Vto=o("marian"),Xto=o(" \u2014 "),mP=a("a"),zto=o("MarianTokenizer"),Wto=o(" (Marian model)"),Qto=l(),ds=a("li"),Zte=a("strong"),Hto=o("mbart"),Uto=o(" \u2014 "),gP=a("a"),Jto=o("MBartTokenizer"),Yto=o(" or "),hP=a("a"),Kto=o("MBartTokenizerFast"),Zto=o(" (mBART model)"),eao=l(),cs=a("li"),eae=a("strong"),oao=o("mbart50"),rao=o(" \u2014 "),pP=a("a"),tao=o("MBart50Tokenizer"),aao=o(" or "),_P=a("a"),nao=o("MBart50TokenizerFast"),sao=o(" (mBART-50 model)"),lao=l(),fs=a("li"),oae=a("strong"),iao=o("megatron-bert"),dao=o(" \u2014 "),uP=a("a"),cao=o("BertTokenizer"),fao=o(" or "),bP=a("a"),mao=o("BertTokenizerFast"),gao=o(" (MegatronBert model)"),hao=l(),jg=a("li"),rae=a("strong"),pao=o("mluke"),_ao=o(" \u2014 "),vP=a("a"),uao=o("MLukeTokenizer"),bao=o(" (mLUKE model)"),vao=l(),ms=a("li"),tae=a("strong"),Fao=o("mobilebert"),Tao=o(" \u2014 "),FP=a("a"),Mao=o("MobileBertTokenizer"),Eao=o(" or "),TP=a("a"),Cao=o("MobileBertTokenizerFast"),wao=o(" (MobileBERT model)"),Aao=l(),gs=a("li"),aae=a("strong"),yao=o("mpnet"),Lao=o(" \u2014 "),MP=a("a"),xao=o("MPNetTokenizer"),$ao=o(" or "),EP=a("a"),kao=o("MPNetTokenizerFast"),Sao=o(" (MPNet model)"),Rao=l(),hs=a("li"),nae=a("strong"),Pao=o("mt5"),Bao=o(" \u2014 "),CP=a("a"),Iao=o("MT5Tokenizer"),qao=o(" or "),wP=a("a"),Nao=o("MT5TokenizerFast"),jao=o(" (mT5 model)"),Dao=l(),ps=a("li"),sae=a("strong"),Gao=o("nystromformer"),Oao=o(" \u2014 "),AP=a("a"),Vao=o("AlbertTokenizer"),Xao=o(" or "),yP=a("a"),zao=o("AlbertTokenizerFast"),Wao=o(" (Nystromformer model)"),Qao=l(),_s=a("li"),lae=a("strong"),Hao=o("openai-gpt"),Uao=o(" \u2014 "),LP=a("a"),Jao=o("OpenAIGPTTokenizer"),Yao=o(" or "),xP=a("a"),Kao=o("OpenAIGPTTokenizerFast"),Zao=o(" (OpenAI GPT model)"),eno=l(),Dg=a("li"),iae=a("strong"),ono=o("opt"),rno=o(" \u2014 "),$P=a("a"),tno=o("GPT2Tokenizer"),ano=o(" (OPT model)"),nno=l(),us=a("li"),dae=a("strong"),sno=o("pegasus"),lno=o(" \u2014 "),kP=a("a"),ino=o("PegasusTokenizer"),dno=o(" or "),SP=a("a"),cno=o("PegasusTokenizerFast"),fno=o(" (Pegasus model)"),mno=l(),Gg=a("li"),cae=a("strong"),gno=o("perceiver"),hno=o(" \u2014 "),RP=a("a"),pno=o("PerceiverTokenizer"),_no=o(" (Perceiver model)"),uno=l(),Og=a("li"),fae=a("strong"),bno=o("phobert"),vno=o(" \u2014 "),PP=a("a"),Fno=o("PhobertTokenizer"),Tno=o(" (PhoBERT model)"),Mno=l(),Vg=a("li"),mae=a("strong"),Eno=o("plbart"),Cno=o(" \u2014 "),BP=a("a"),wno=o("PLBartTokenizer"),Ano=o(" (PLBart model)"),yno=l(),Xg=a("li"),gae=a("strong"),Lno=o("prophetnet"),xno=o(" \u2014 "),IP=a("a"),$no=o("ProphetNetTokenizer"),kno=o(" (ProphetNet model)"),Sno=l(),bs=a("li"),hae=a("strong"),Rno=o("qdqbert"),Pno=o(" \u2014 "),qP=a("a"),Bno=o("BertTokenizer"),Ino=o(" or "),NP=a("a"),qno=o("BertTokenizerFast"),Nno=o(" (QDQBert model)"),jno=l(),zg=a("li"),pae=a("strong"),Dno=o("rag"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("RagTokenizer"),Vno=o(" (RAG model)"),Xno=l(),vs=a("li"),_ae=a("strong"),zno=o("realm"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("RealmTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("RealmTokenizerFast"),Jno=o(" (Realm model)"),Yno=l(),Fs=a("li"),uae=a("strong"),Kno=o("reformer"),Zno=o(" \u2014 "),OP=a("a"),eso=o("ReformerTokenizer"),oso=o(" or "),VP=a("a"),rso=o("ReformerTokenizerFast"),tso=o(" (Reformer model)"),aso=l(),Ts=a("li"),bae=a("strong"),nso=o("rembert"),sso=o(" \u2014 "),XP=a("a"),lso=o("RemBertTokenizer"),iso=o(" or "),zP=a("a"),dso=o("RemBertTokenizerFast"),cso=o(" (RemBERT model)"),fso=l(),Ms=a("li"),vae=a("strong"),mso=o("retribert"),gso=o(" \u2014 "),WP=a("a"),hso=o("RetriBertTokenizer"),pso=o(" or "),QP=a("a"),_so=o("RetriBertTokenizerFast"),uso=o(" (RetriBERT model)"),bso=l(),Es=a("li"),Fae=a("strong"),vso=o("roberta"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("RobertaTokenizer"),Mso=o(" or "),UP=a("a"),Eso=o("RobertaTokenizerFast"),Cso=o(" (RoBERTa model)"),wso=l(),Cs=a("li"),Tae=a("strong"),Aso=o("roformer"),yso=o(" \u2014 "),JP=a("a"),Lso=o("RoFormerTokenizer"),xso=o(" or "),YP=a("a"),$so=o("RoFormerTokenizerFast"),kso=o(" (RoFormer model)"),Sso=l(),Wg=a("li"),Mae=a("strong"),Rso=o("speech_to_text"),Pso=o(" \u2014 "),KP=a("a"),Bso=o("Speech2TextTokenizer"),Iso=o(" (Speech2Text model)"),qso=l(),Qg=a("li"),Eae=a("strong"),Nso=o("speech_to_text_2"),jso=o(" \u2014 "),ZP=a("a"),Dso=o("Speech2Text2Tokenizer"),Gso=o(" (Speech2Text2 model)"),Oso=l(),ws=a("li"),Cae=a("strong"),Vso=o("splinter"),Xso=o(" \u2014 "),eB=a("a"),zso=o("SplinterTokenizer"),Wso=o(" or "),oB=a("a"),Qso=o("SplinterTokenizerFast"),Hso=o(" (Splinter model)"),Uso=l(),As=a("li"),wae=a("strong"),Jso=o("squeezebert"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("SqueezeBertTokenizer"),Zso=o(" or "),tB=a("a"),elo=o("SqueezeBertTokenizerFast"),olo=o(" (SqueezeBERT model)"),rlo=l(),ys=a("li"),Aae=a("strong"),tlo=o("t5"),alo=o(" \u2014 "),aB=a("a"),nlo=o("T5Tokenizer"),slo=o(" or "),nB=a("a"),llo=o("T5TokenizerFast"),ilo=o(" (T5 model)"),dlo=l(),Hg=a("li"),yae=a("strong"),clo=o("tapas"),flo=o(" \u2014 "),sB=a("a"),mlo=o("TapasTokenizer"),glo=o(" (TAPAS model)"),hlo=l(),Ug=a("li"),Lae=a("strong"),plo=o("tapex"),_lo=o(" \u2014 "),lB=a("a"),ulo=o("TapexTokenizer"),blo=o(" (TAPEX model)"),vlo=l(),Jg=a("li"),xae=a("strong"),Flo=o("transfo-xl"),Tlo=o(" \u2014 "),iB=a("a"),Mlo=o("TransfoXLTokenizer"),Elo=o(" (Transformer-XL model)"),Clo=l(),Ls=a("li"),$ae=a("strong"),wlo=o("visual_bert"),Alo=o(" \u2014 "),dB=a("a"),ylo=o("BertTokenizer"),Llo=o(" or "),cB=a("a"),xlo=o("BertTokenizerFast"),$lo=o(" (VisualBert model)"),klo=l(),Yg=a("li"),kae=a("strong"),Slo=o("wav2vec2"),Rlo=o(" \u2014 "),fB=a("a"),Plo=o("Wav2Vec2CTCTokenizer"),Blo=o(" (Wav2Vec2 model)"),Ilo=l(),Kg=a("li"),Sae=a("strong"),qlo=o("wav2vec2-conformer"),Nlo=o(" \u2014 "),mB=a("a"),jlo=o("Wav2Vec2CTCTokenizer"),Dlo=o(" (Wav2Vec2-Conformer model)"),Glo=l(),Zg=a("li"),Rae=a("strong"),Olo=o("wav2vec2_phoneme"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("Wav2Vec2PhonemeCTCTokenizer"),zlo=o(" (Wav2Vec2Phoneme model)"),Wlo=l(),xs=a("li"),Pae=a("strong"),Qlo=o("xglm"),Hlo=o(" \u2014 "),hB=a("a"),Ulo=o("XGLMTokenizer"),Jlo=o(" or "),pB=a("a"),Ylo=o("XGLMTokenizerFast"),Klo=o(" (XGLM model)"),Zlo=l(),eh=a("li"),Bae=a("strong"),eio=o("xlm"),oio=o(" \u2014 "),_B=a("a"),rio=o("XLMTokenizer"),tio=o(" (XLM model)"),aio=l(),oh=a("li"),Iae=a("strong"),nio=o("xlm-prophetnet"),sio=o(" \u2014 "),uB=a("a"),lio=o("XLMProphetNetTokenizer"),iio=o(" (XLMProphetNet model)"),dio=l(),$s=a("li"),qae=a("strong"),cio=o("xlm-roberta"),fio=o(" \u2014 "),bB=a("a"),mio=o("XLMRobertaTokenizer"),gio=o(" or "),vB=a("a"),hio=o("XLMRobertaTokenizerFast"),pio=o(" (XLM-RoBERTa model)"),_io=l(),ks=a("li"),Nae=a("strong"),uio=o("xlm-roberta-xl"),bio=o(" \u2014 "),FB=a("a"),vio=o("RobertaTokenizer"),Fio=o(" or "),TB=a("a"),Tio=o("RobertaTokenizerFast"),Mio=o(" (XLM-RoBERTa-XL model)"),Eio=l(),Ss=a("li"),jae=a("strong"),Cio=o("xlnet"),wio=o(" \u2014 "),MB=a("a"),Aio=o("XLNetTokenizer"),yio=o(" or "),EB=a("a"),Lio=o("XLNetTokenizerFast"),xio=o(" (XLNet model)"),$io=l(),Rs=a("li"),Dae=a("strong"),kio=o("yoso"),Sio=o(" \u2014 "),CB=a("a"),Rio=o("AlbertTokenizer"),Pio=o(" or "),wB=a("a"),Bio=o("AlbertTokenizerFast"),Iio=o(" (YOSO model)"),qio=l(),F(rh.$$.fragment),Nio=l(),th=a("div"),F(S6.$$.fragment),jio=l(),Gae=a("p"),Dio=o("Register a new tokenizer in this mapping."),xqe=l(),Mi=a("h2"),ah=a("a"),Oae=a("span"),F(R6.$$.fragment),Gio=l(),Vae=a("span"),Oio=o("AutoFeatureExtractor"),$qe=l(),Ao=a("div"),F(P6.$$.fragment),Vio=l(),B6=a("p"),Xio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AB=a("a"),zio=o("AutoFeatureExtractor.from_pretrained()"),Wio=o(" class method."),Qio=l(),I6=a("p"),Hio=o("This class cannot be instantiated directly using "),Xae=a("code"),Uio=o("__init__()"),Jio=o(" (throws an error)."),Yio=l(),He=a("div"),F(q6.$$.fragment),Kio=l(),zae=a("p"),Zio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),edo=l(),ya=a("p"),odo=o("The feature extractor class to instantiate is selected based on the "),Wae=a("code"),rdo=o("model_type"),tdo=o(` property of the config object
(either passed as an argument or loaded from `),Qae=a("code"),ado=o("pretrained_model_name_or_path"),ndo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hae=a("code"),sdo=o("pretrained_model_name_or_path"),ldo=o(":"),ido=l(),K=a("ul"),nh=a("li"),Uae=a("strong"),ddo=o("beit"),cdo=o(" \u2014 "),yB=a("a"),fdo=o("BeitFeatureExtractor"),mdo=o(" (BEiT model)"),gdo=l(),sh=a("li"),Jae=a("strong"),hdo=o("clip"),pdo=o(" \u2014 "),LB=a("a"),_do=o("CLIPFeatureExtractor"),udo=o(" (CLIP model)"),bdo=l(),lh=a("li"),Yae=a("strong"),vdo=o("convnext"),Fdo=o(" \u2014 "),xB=a("a"),Tdo=o("ConvNextFeatureExtractor"),Mdo=o(" (ConvNext model)"),Edo=l(),ih=a("li"),Kae=a("strong"),Cdo=o("cvt"),wdo=o(" \u2014 "),$B=a("a"),Ado=o("ConvNextFeatureExtractor"),ydo=o(" (CvT model)"),Ldo=l(),dh=a("li"),Zae=a("strong"),xdo=o("data2vec-audio"),$do=o(" \u2014 "),kB=a("a"),kdo=o("Wav2Vec2FeatureExtractor"),Sdo=o(" (Data2VecAudio model)"),Rdo=l(),ch=a("li"),ene=a("strong"),Pdo=o("data2vec-vision"),Bdo=o(" \u2014 "),SB=a("a"),Ido=o("BeitFeatureExtractor"),qdo=o(" (Data2VecVision model)"),Ndo=l(),fh=a("li"),one=a("strong"),jdo=o("deit"),Ddo=o(" \u2014 "),RB=a("a"),Gdo=o("DeiTFeatureExtractor"),Odo=o(" (DeiT model)"),Vdo=l(),mh=a("li"),rne=a("strong"),Xdo=o("detr"),zdo=o(" \u2014 "),PB=a("a"),Wdo=o("DetrFeatureExtractor"),Qdo=o(" (DETR model)"),Hdo=l(),gh=a("li"),tne=a("strong"),Udo=o("dpt"),Jdo=o(" \u2014 "),BB=a("a"),Ydo=o("DPTFeatureExtractor"),Kdo=o(" (DPT model)"),Zdo=l(),hh=a("li"),ane=a("strong"),eco=o("flava"),oco=o(" \u2014 "),IB=a("a"),rco=o("FlavaFeatureExtractor"),tco=o(" (Flava model)"),aco=l(),ph=a("li"),nne=a("strong"),nco=o("glpn"),sco=o(" \u2014 "),qB=a("a"),lco=o("GLPNFeatureExtractor"),ico=o(" (GLPN model)"),dco=l(),_h=a("li"),sne=a("strong"),cco=o("groupvit"),fco=o(" \u2014 "),NB=a("a"),mco=o("CLIPFeatureExtractor"),gco=o(" (GroupViT model)"),hco=l(),uh=a("li"),lne=a("strong"),pco=o("hubert"),_co=o(" \u2014 "),jB=a("a"),uco=o("Wav2Vec2FeatureExtractor"),bco=o(" (Hubert model)"),vco=l(),bh=a("li"),ine=a("strong"),Fco=o("layoutlmv2"),Tco=o(" \u2014 "),DB=a("a"),Mco=o("LayoutLMv2FeatureExtractor"),Eco=o(" (LayoutLMv2 model)"),Cco=l(),vh=a("li"),dne=a("strong"),wco=o("maskformer"),Aco=o(" \u2014 "),GB=a("a"),yco=o("MaskFormerFeatureExtractor"),Lco=o(" (MaskFormer model)"),xco=l(),Fh=a("li"),cne=a("strong"),$co=o("perceiver"),kco=o(" \u2014 "),OB=a("a"),Sco=o("PerceiverFeatureExtractor"),Rco=o(" (Perceiver model)"),Pco=l(),Th=a("li"),fne=a("strong"),Bco=o("poolformer"),Ico=o(" \u2014 "),VB=a("a"),qco=o("PoolFormerFeatureExtractor"),Nco=o(" (PoolFormer model)"),jco=l(),Mh=a("li"),mne=a("strong"),Dco=o("regnet"),Gco=o(" \u2014 "),XB=a("a"),Oco=o("ConvNextFeatureExtractor"),Vco=o(" (RegNet model)"),Xco=l(),Eh=a("li"),gne=a("strong"),zco=o("resnet"),Wco=o(" \u2014 "),zB=a("a"),Qco=o("ConvNextFeatureExtractor"),Hco=o(" (ResNet model)"),Uco=l(),Ch=a("li"),hne=a("strong"),Jco=o("segformer"),Yco=o(" \u2014 "),WB=a("a"),Kco=o("SegformerFeatureExtractor"),Zco=o(" (SegFormer model)"),efo=l(),wh=a("li"),pne=a("strong"),ofo=o("speech_to_text"),rfo=o(" \u2014 "),QB=a("a"),tfo=o("Speech2TextFeatureExtractor"),afo=o(" (Speech2Text model)"),nfo=l(),Ah=a("li"),_ne=a("strong"),sfo=o("swin"),lfo=o(" \u2014 "),HB=a("a"),ifo=o("ViTFeatureExtractor"),dfo=o(" (Swin model)"),cfo=l(),yh=a("li"),une=a("strong"),ffo=o("van"),mfo=o(" \u2014 "),UB=a("a"),gfo=o("ConvNextFeatureExtractor"),hfo=o(" (VAN model)"),pfo=l(),Lh=a("li"),bne=a("strong"),_fo=o("vit"),ufo=o(" \u2014 "),JB=a("a"),bfo=o("ViTFeatureExtractor"),vfo=o(" (ViT model)"),Ffo=l(),xh=a("li"),vne=a("strong"),Tfo=o("vit_mae"),Mfo=o(" \u2014 "),YB=a("a"),Efo=o("ViTFeatureExtractor"),Cfo=o(" (ViTMAE model)"),wfo=l(),$h=a("li"),Fne=a("strong"),Afo=o("wav2vec2"),yfo=o(" \u2014 "),KB=a("a"),Lfo=o("Wav2Vec2FeatureExtractor"),xfo=o(" (Wav2Vec2 model)"),$fo=l(),kh=a("li"),Tne=a("strong"),kfo=o("wav2vec2-conformer"),Sfo=o(" \u2014 "),ZB=a("a"),Rfo=o("Wav2Vec2FeatureExtractor"),Pfo=o(" (Wav2Vec2-Conformer model)"),Bfo=l(),Sh=a("li"),Mne=a("strong"),Ifo=o("yolos"),qfo=o(" \u2014 "),eI=a("a"),Nfo=o("YolosFeatureExtractor"),jfo=o(" (YOLOS model)"),Dfo=l(),F(Rh.$$.fragment),Gfo=l(),F(Ph.$$.fragment),Ofo=l(),Bh=a("div"),F(N6.$$.fragment),Vfo=l(),Ene=a("p"),Xfo=o("Register a new feature extractor for this class."),kqe=l(),Ei=a("h2"),Ih=a("a"),Cne=a("span"),F(j6.$$.fragment),zfo=l(),wne=a("span"),Wfo=o("AutoProcessor"),Sqe=l(),yo=a("div"),F(D6.$$.fragment),Qfo=l(),G6=a("p"),Hfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),oI=a("a"),Ufo=o("AutoProcessor.from_pretrained()"),Jfo=o(" class method."),Yfo=l(),O6=a("p"),Kfo=o("This class cannot be instantiated directly using "),Ane=a("code"),Zfo=o("__init__()"),emo=o(" (throws an error)."),omo=l(),Ue=a("div"),F(V6.$$.fragment),rmo=l(),yne=a("p"),tmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),amo=l(),Ci=a("p"),nmo=o("The processor class to instantiate is selected based on the "),Lne=a("code"),smo=o("model_type"),lmo=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),imo=o("pretrained_model_name_or_path"),dmo=o(" if possible):"),cmo=l(),he=a("ul"),qh=a("li"),$ne=a("strong"),fmo=o("clip"),mmo=o(" \u2014 "),rI=a("a"),gmo=o("CLIPProcessor"),hmo=o(" (CLIP model)"),pmo=l(),Nh=a("li"),kne=a("strong"),_mo=o("flava"),umo=o(" \u2014 "),Sne=a("code"),bmo=o("FLAVAProcessor"),vmo=o(" (Flava model)"),Fmo=l(),jh=a("li"),Rne=a("strong"),Tmo=o("groupvit"),Mmo=o(" \u2014 "),tI=a("a"),Emo=o("CLIPProcessor"),Cmo=o(" (GroupViT model)"),wmo=l(),Dh=a("li"),Pne=a("strong"),Amo=o("layoutlmv2"),ymo=o(" \u2014 "),aI=a("a"),Lmo=o("LayoutLMv2Processor"),xmo=o(" (LayoutLMv2 model)"),$mo=l(),Gh=a("li"),Bne=a("strong"),kmo=o("layoutxlm"),Smo=o(" \u2014 "),nI=a("a"),Rmo=o("LayoutXLMProcessor"),Pmo=o(" (LayoutXLM model)"),Bmo=l(),Oh=a("li"),Ine=a("strong"),Imo=o("sew"),qmo=o(" \u2014 "),sI=a("a"),Nmo=o("Wav2Vec2Processor"),jmo=o(" (SEW model)"),Dmo=l(),Vh=a("li"),qne=a("strong"),Gmo=o("sew-d"),Omo=o(" \u2014 "),lI=a("a"),Vmo=o("Wav2Vec2Processor"),Xmo=o(" (SEW-D model)"),zmo=l(),Xh=a("li"),Nne=a("strong"),Wmo=o("speech_to_text"),Qmo=o(" \u2014 "),iI=a("a"),Hmo=o("Speech2TextProcessor"),Umo=o(" (Speech2Text model)"),Jmo=l(),zh=a("li"),jne=a("strong"),Ymo=o("speech_to_text_2"),Kmo=o(" \u2014 "),dI=a("a"),Zmo=o("Speech2Text2Processor"),ego=o(" (Speech2Text2 model)"),ogo=l(),Wh=a("li"),Dne=a("strong"),rgo=o("trocr"),tgo=o(" \u2014 "),cI=a("a"),ago=o("TrOCRProcessor"),ngo=o(" (TrOCR model)"),sgo=l(),Qh=a("li"),Gne=a("strong"),lgo=o("unispeech"),igo=o(" \u2014 "),fI=a("a"),dgo=o("Wav2Vec2Processor"),cgo=o(" (UniSpeech model)"),fgo=l(),Hh=a("li"),One=a("strong"),mgo=o("unispeech-sat"),ggo=o(" \u2014 "),mI=a("a"),hgo=o("Wav2Vec2Processor"),pgo=o(" (UniSpeechSat model)"),_go=l(),Uh=a("li"),Vne=a("strong"),ugo=o("vilt"),bgo=o(" \u2014 "),gI=a("a"),vgo=o("ViltProcessor"),Fgo=o(" (ViLT model)"),Tgo=l(),Jh=a("li"),Xne=a("strong"),Mgo=o("vision-text-dual-encoder"),Ego=o(" \u2014 "),hI=a("a"),Cgo=o("VisionTextDualEncoderProcessor"),wgo=o(" (VisionTextDualEncoder model)"),Ago=l(),Yh=a("li"),zne=a("strong"),ygo=o("wav2vec2"),Lgo=o(" \u2014 "),pI=a("a"),xgo=o("Wav2Vec2Processor"),$go=o(" (Wav2Vec2 model)"),kgo=l(),Kh=a("li"),Wne=a("strong"),Sgo=o("wav2vec2-conformer"),Rgo=o(" \u2014 "),_I=a("a"),Pgo=o("Wav2Vec2Processor"),Bgo=o(" (Wav2Vec2-Conformer model)"),Igo=l(),Zh=a("li"),Qne=a("strong"),qgo=o("wavlm"),Ngo=o(" \u2014 "),uI=a("a"),jgo=o("Wav2Vec2Processor"),Dgo=o(" (WavLM model)"),Ggo=l(),F(ep.$$.fragment),Ogo=l(),F(op.$$.fragment),Vgo=l(),rp=a("div"),F(X6.$$.fragment),Xgo=l(),Hne=a("p"),zgo=o("Register a new processor for this class."),Rqe=l(),wi=a("h2"),tp=a("a"),Une=a("span"),F(z6.$$.fragment),Wgo=l(),Jne=a("span"),Qgo=o("AutoModel"),Pqe=l(),Lo=a("div"),F(W6.$$.fragment),Hgo=l(),Ai=a("p"),Ugo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bI=a("a"),Jgo=o("from_pretrained()"),Ygo=o(" class method or the "),vI=a("a"),Kgo=o("from_config()"),Zgo=o(` class
method.`),eho=l(),Q6=a("p"),oho=o("This class cannot be instantiated directly using "),Yne=a("code"),rho=o("__init__()"),tho=o(" (throws an error)."),aho=l(),tt=a("div"),F(H6.$$.fragment),nho=l(),Kne=a("p"),sho=o("Instantiates one of the base model classes of the library from a configuration."),lho=l(),yi=a("p"),iho=o(`Note:
Loading a model from its configuration file does `),Zne=a("strong"),dho=o("not"),cho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FI=a("a"),fho=o("from_pretrained()"),mho=o(" to load the model weights."),gho=l(),F(ap.$$.fragment),hho=l(),Je=a("div"),F(U6.$$.fragment),pho=l(),ese=a("p"),_ho=o("Instantiate one of the base model classes of the library from a pretrained model."),uho=l(),La=a("p"),bho=o("The model class to instantiate is selected based on the "),ose=a("code"),vho=o("model_type"),Fho=o(` property of the config object (either
passed as an argument or loaded from `),rse=a("code"),Tho=o("pretrained_model_name_or_path"),Mho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=a("code"),Eho=o("pretrained_model_name_or_path"),Cho=o(":"),who=l(),x=a("ul"),np=a("li"),ase=a("strong"),Aho=o("albert"),yho=o(" \u2014 "),TI=a("a"),Lho=o("AlbertModel"),xho=o(" (ALBERT model)"),$ho=l(),sp=a("li"),nse=a("strong"),kho=o("bart"),Sho=o(" \u2014 "),MI=a("a"),Rho=o("BartModel"),Pho=o(" (BART model)"),Bho=l(),lp=a("li"),sse=a("strong"),Iho=o("beit"),qho=o(" \u2014 "),EI=a("a"),Nho=o("BeitModel"),jho=o(" (BEiT model)"),Dho=l(),ip=a("li"),lse=a("strong"),Gho=o("bert"),Oho=o(" \u2014 "),CI=a("a"),Vho=o("BertModel"),Xho=o(" (BERT model)"),zho=l(),dp=a("li"),ise=a("strong"),Who=o("bert-generation"),Qho=o(" \u2014 "),wI=a("a"),Hho=o("BertGenerationEncoder"),Uho=o(" (Bert Generation model)"),Jho=l(),cp=a("li"),dse=a("strong"),Yho=o("big_bird"),Kho=o(" \u2014 "),AI=a("a"),Zho=o("BigBirdModel"),epo=o(" (BigBird model)"),opo=l(),fp=a("li"),cse=a("strong"),rpo=o("bigbird_pegasus"),tpo=o(" \u2014 "),yI=a("a"),apo=o("BigBirdPegasusModel"),npo=o(" (BigBirdPegasus model)"),spo=l(),mp=a("li"),fse=a("strong"),lpo=o("blenderbot"),ipo=o(" \u2014 "),LI=a("a"),dpo=o("BlenderbotModel"),cpo=o(" (Blenderbot model)"),fpo=l(),gp=a("li"),mse=a("strong"),mpo=o("blenderbot-small"),gpo=o(" \u2014 "),xI=a("a"),hpo=o("BlenderbotSmallModel"),ppo=o(" (BlenderbotSmall model)"),_po=l(),hp=a("li"),gse=a("strong"),upo=o("camembert"),bpo=o(" \u2014 "),$I=a("a"),vpo=o("CamembertModel"),Fpo=o(" (CamemBERT model)"),Tpo=l(),pp=a("li"),hse=a("strong"),Mpo=o("canine"),Epo=o(" \u2014 "),kI=a("a"),Cpo=o("CanineModel"),wpo=o(" (Canine model)"),Apo=l(),_p=a("li"),pse=a("strong"),ypo=o("clip"),Lpo=o(" \u2014 "),SI=a("a"),xpo=o("CLIPModel"),$po=o(" (CLIP model)"),kpo=l(),up=a("li"),_se=a("strong"),Spo=o("convbert"),Rpo=o(" \u2014 "),RI=a("a"),Ppo=o("ConvBertModel"),Bpo=o(" (ConvBERT model)"),Ipo=l(),bp=a("li"),use=a("strong"),qpo=o("convnext"),Npo=o(" \u2014 "),PI=a("a"),jpo=o("ConvNextModel"),Dpo=o(" (ConvNext model)"),Gpo=l(),vp=a("li"),bse=a("strong"),Opo=o("ctrl"),Vpo=o(" \u2014 "),BI=a("a"),Xpo=o("CTRLModel"),zpo=o(" (CTRL model)"),Wpo=l(),Fp=a("li"),vse=a("strong"),Qpo=o("cvt"),Hpo=o(" \u2014 "),II=a("a"),Upo=o("CvtModel"),Jpo=o(" (CvT model)"),Ypo=l(),Tp=a("li"),Fse=a("strong"),Kpo=o("data2vec-audio"),Zpo=o(" \u2014 "),qI=a("a"),e_o=o("Data2VecAudioModel"),o_o=o(" (Data2VecAudio model)"),r_o=l(),Mp=a("li"),Tse=a("strong"),t_o=o("data2vec-text"),a_o=o(" \u2014 "),NI=a("a"),n_o=o("Data2VecTextModel"),s_o=o(" (Data2VecText model)"),l_o=l(),Ep=a("li"),Mse=a("strong"),i_o=o("data2vec-vision"),d_o=o(" \u2014 "),jI=a("a"),c_o=o("Data2VecVisionModel"),f_o=o(" (Data2VecVision model)"),m_o=l(),Cp=a("li"),Ese=a("strong"),g_o=o("deberta"),h_o=o(" \u2014 "),DI=a("a"),p_o=o("DebertaModel"),__o=o(" (DeBERTa model)"),u_o=l(),wp=a("li"),Cse=a("strong"),b_o=o("deberta-v2"),v_o=o(" \u2014 "),GI=a("a"),F_o=o("DebertaV2Model"),T_o=o(" (DeBERTa-v2 model)"),M_o=l(),Ap=a("li"),wse=a("strong"),E_o=o("decision_transformer"),C_o=o(" \u2014 "),OI=a("a"),w_o=o("DecisionTransformerModel"),A_o=o(" (Decision Transformer model)"),y_o=l(),yp=a("li"),Ase=a("strong"),L_o=o("deit"),x_o=o(" \u2014 "),VI=a("a"),$_o=o("DeiTModel"),k_o=o(" (DeiT model)"),S_o=l(),Lp=a("li"),yse=a("strong"),R_o=o("detr"),P_o=o(" \u2014 "),XI=a("a"),B_o=o("DetrModel"),I_o=o(" (DETR model)"),q_o=l(),xp=a("li"),Lse=a("strong"),N_o=o("distilbert"),j_o=o(" \u2014 "),zI=a("a"),D_o=o("DistilBertModel"),G_o=o(" (DistilBERT model)"),O_o=l(),$p=a("li"),xse=a("strong"),V_o=o("dpr"),X_o=o(" \u2014 "),WI=a("a"),z_o=o("DPRQuestionEncoder"),W_o=o(" (DPR model)"),Q_o=l(),kp=a("li"),$se=a("strong"),H_o=o("dpt"),U_o=o(" \u2014 "),QI=a("a"),J_o=o("DPTModel"),Y_o=o(" (DPT model)"),K_o=l(),Sp=a("li"),kse=a("strong"),Z_o=o("electra"),euo=o(" \u2014 "),HI=a("a"),ouo=o("ElectraModel"),ruo=o(" (ELECTRA model)"),tuo=l(),Rp=a("li"),Sse=a("strong"),auo=o("flaubert"),nuo=o(" \u2014 "),UI=a("a"),suo=o("FlaubertModel"),luo=o(" (FlauBERT model)"),iuo=l(),Pp=a("li"),Rse=a("strong"),duo=o("flava"),cuo=o(" \u2014 "),JI=a("a"),fuo=o("FlavaModel"),muo=o(" (Flava model)"),guo=l(),Bp=a("li"),Pse=a("strong"),huo=o("fnet"),puo=o(" \u2014 "),YI=a("a"),_uo=o("FNetModel"),uuo=o(" (FNet model)"),buo=l(),Ip=a("li"),Bse=a("strong"),vuo=o("fsmt"),Fuo=o(" \u2014 "),KI=a("a"),Tuo=o("FSMTModel"),Muo=o(" (FairSeq Machine-Translation model)"),Euo=l(),Ps=a("li"),Ise=a("strong"),Cuo=o("funnel"),wuo=o(" \u2014 "),ZI=a("a"),Auo=o("FunnelModel"),yuo=o(" or "),eq=a("a"),Luo=o("FunnelBaseModel"),xuo=o(" (Funnel Transformer model)"),$uo=l(),qp=a("li"),qse=a("strong"),kuo=o("glpn"),Suo=o(" \u2014 "),oq=a("a"),Ruo=o("GLPNModel"),Puo=o(" (GLPN model)"),Buo=l(),Np=a("li"),Nse=a("strong"),Iuo=o("gpt2"),quo=o(" \u2014 "),rq=a("a"),Nuo=o("GPT2Model"),juo=o(" (OpenAI GPT-2 model)"),Duo=l(),jp=a("li"),jse=a("strong"),Guo=o("gpt_neo"),Ouo=o(" \u2014 "),tq=a("a"),Vuo=o("GPTNeoModel"),Xuo=o(" (GPT Neo model)"),zuo=l(),Dp=a("li"),Dse=a("strong"),Wuo=o("gptj"),Quo=o(" \u2014 "),aq=a("a"),Huo=o("GPTJModel"),Uuo=o(" (GPT-J model)"),Juo=l(),Gp=a("li"),Gse=a("strong"),Yuo=o("groupvit"),Kuo=o(" \u2014 "),nq=a("a"),Zuo=o("GroupViTModel"),e1o=o(" (GroupViT model)"),o1o=l(),Op=a("li"),Ose=a("strong"),r1o=o("hubert"),t1o=o(" \u2014 "),sq=a("a"),a1o=o("HubertModel"),n1o=o(" (Hubert model)"),s1o=l(),Vp=a("li"),Vse=a("strong"),l1o=o("ibert"),i1o=o(" \u2014 "),lq=a("a"),d1o=o("IBertModel"),c1o=o(" (I-BERT model)"),f1o=l(),Xp=a("li"),Xse=a("strong"),m1o=o("imagegpt"),g1o=o(" \u2014 "),iq=a("a"),h1o=o("ImageGPTModel"),p1o=o(" (ImageGPT model)"),_1o=l(),zp=a("li"),zse=a("strong"),u1o=o("layoutlm"),b1o=o(" \u2014 "),dq=a("a"),v1o=o("LayoutLMModel"),F1o=o(" (LayoutLM model)"),T1o=l(),Wp=a("li"),Wse=a("strong"),M1o=o("layoutlmv2"),E1o=o(" \u2014 "),cq=a("a"),C1o=o("LayoutLMv2Model"),w1o=o(" (LayoutLMv2 model)"),A1o=l(),Qp=a("li"),Qse=a("strong"),y1o=o("led"),L1o=o(" \u2014 "),fq=a("a"),x1o=o("LEDModel"),$1o=o(" (LED model)"),k1o=l(),Hp=a("li"),Hse=a("strong"),S1o=o("longformer"),R1o=o(" \u2014 "),mq=a("a"),P1o=o("LongformerModel"),B1o=o(" (Longformer model)"),I1o=l(),Up=a("li"),Use=a("strong"),q1o=o("luke"),N1o=o(" \u2014 "),gq=a("a"),j1o=o("LukeModel"),D1o=o(" (LUKE model)"),G1o=l(),Jp=a("li"),Jse=a("strong"),O1o=o("lxmert"),V1o=o(" \u2014 "),hq=a("a"),X1o=o("LxmertModel"),z1o=o(" (LXMERT model)"),W1o=l(),Yp=a("li"),Yse=a("strong"),Q1o=o("m2m_100"),H1o=o(" \u2014 "),pq=a("a"),U1o=o("M2M100Model"),J1o=o(" (M2M100 model)"),Y1o=l(),Kp=a("li"),Kse=a("strong"),K1o=o("marian"),Z1o=o(" \u2014 "),_q=a("a"),e3o=o("MarianModel"),o3o=o(" (Marian model)"),r3o=l(),Zp=a("li"),Zse=a("strong"),t3o=o("maskformer"),a3o=o(" \u2014 "),uq=a("a"),n3o=o("MaskFormerModel"),s3o=o(" (MaskFormer model)"),l3o=l(),e_=a("li"),ele=a("strong"),i3o=o("mbart"),d3o=o(" \u2014 "),bq=a("a"),c3o=o("MBartModel"),f3o=o(" (mBART model)"),m3o=l(),o_=a("li"),ole=a("strong"),g3o=o("megatron-bert"),h3o=o(" \u2014 "),vq=a("a"),p3o=o("MegatronBertModel"),_3o=o(" (MegatronBert model)"),u3o=l(),r_=a("li"),rle=a("strong"),b3o=o("mobilebert"),v3o=o(" \u2014 "),Fq=a("a"),F3o=o("MobileBertModel"),T3o=o(" (MobileBERT model)"),M3o=l(),t_=a("li"),tle=a("strong"),E3o=o("mpnet"),C3o=o(" \u2014 "),Tq=a("a"),w3o=o("MPNetModel"),A3o=o(" (MPNet model)"),y3o=l(),a_=a("li"),ale=a("strong"),L3o=o("mt5"),x3o=o(" \u2014 "),Mq=a("a"),$3o=o("MT5Model"),k3o=o(" (mT5 model)"),S3o=l(),n_=a("li"),nle=a("strong"),R3o=o("nystromformer"),P3o=o(" \u2014 "),Eq=a("a"),B3o=o("NystromformerModel"),I3o=o(" (Nystromformer model)"),q3o=l(),s_=a("li"),sle=a("strong"),N3o=o("openai-gpt"),j3o=o(" \u2014 "),Cq=a("a"),D3o=o("OpenAIGPTModel"),G3o=o(" (OpenAI GPT model)"),O3o=l(),l_=a("li"),lle=a("strong"),V3o=o("opt"),X3o=o(" \u2014 "),wq=a("a"),z3o=o("OPTModel"),W3o=o(" (OPT model)"),Q3o=l(),i_=a("li"),ile=a("strong"),H3o=o("pegasus"),U3o=o(" \u2014 "),Aq=a("a"),J3o=o("PegasusModel"),Y3o=o(" (Pegasus model)"),K3o=l(),d_=a("li"),dle=a("strong"),Z3o=o("perceiver"),ebo=o(" \u2014 "),yq=a("a"),obo=o("PerceiverModel"),rbo=o(" (Perceiver model)"),tbo=l(),c_=a("li"),cle=a("strong"),abo=o("plbart"),nbo=o(" \u2014 "),Lq=a("a"),sbo=o("PLBartModel"),lbo=o(" (PLBart model)"),ibo=l(),f_=a("li"),fle=a("strong"),dbo=o("poolformer"),cbo=o(" \u2014 "),xq=a("a"),fbo=o("PoolFormerModel"),mbo=o(" (PoolFormer model)"),gbo=l(),m_=a("li"),mle=a("strong"),hbo=o("prophetnet"),pbo=o(" \u2014 "),$q=a("a"),_bo=o("ProphetNetModel"),ubo=o(" (ProphetNet model)"),bbo=l(),g_=a("li"),gle=a("strong"),vbo=o("qdqbert"),Fbo=o(" \u2014 "),kq=a("a"),Tbo=o("QDQBertModel"),Mbo=o(" (QDQBert model)"),Ebo=l(),h_=a("li"),hle=a("strong"),Cbo=o("reformer"),wbo=o(" \u2014 "),Sq=a("a"),Abo=o("ReformerModel"),ybo=o(" (Reformer model)"),Lbo=l(),p_=a("li"),ple=a("strong"),xbo=o("regnet"),$bo=o(" \u2014 "),Rq=a("a"),kbo=o("RegNetModel"),Sbo=o(" (RegNet model)"),Rbo=l(),__=a("li"),_le=a("strong"),Pbo=o("rembert"),Bbo=o(" \u2014 "),Pq=a("a"),Ibo=o("RemBertModel"),qbo=o(" (RemBERT model)"),Nbo=l(),u_=a("li"),ule=a("strong"),jbo=o("resnet"),Dbo=o(" \u2014 "),Bq=a("a"),Gbo=o("ResNetModel"),Obo=o(" (ResNet model)"),Vbo=l(),b_=a("li"),ble=a("strong"),Xbo=o("retribert"),zbo=o(" \u2014 "),Iq=a("a"),Wbo=o("RetriBertModel"),Qbo=o(" (RetriBERT model)"),Hbo=l(),v_=a("li"),vle=a("strong"),Ubo=o("roberta"),Jbo=o(" \u2014 "),qq=a("a"),Ybo=o("RobertaModel"),Kbo=o(" (RoBERTa model)"),Zbo=l(),F_=a("li"),Fle=a("strong"),e2o=o("roformer"),o2o=o(" \u2014 "),Nq=a("a"),r2o=o("RoFormerModel"),t2o=o(" (RoFormer model)"),a2o=l(),T_=a("li"),Tle=a("strong"),n2o=o("segformer"),s2o=o(" \u2014 "),jq=a("a"),l2o=o("SegformerModel"),i2o=o(" (SegFormer model)"),d2o=l(),M_=a("li"),Mle=a("strong"),c2o=o("sew"),f2o=o(" \u2014 "),Dq=a("a"),m2o=o("SEWModel"),g2o=o(" (SEW model)"),h2o=l(),E_=a("li"),Ele=a("strong"),p2o=o("sew-d"),_2o=o(" \u2014 "),Gq=a("a"),u2o=o("SEWDModel"),b2o=o(" (SEW-D model)"),v2o=l(),C_=a("li"),Cle=a("strong"),F2o=o("speech_to_text"),T2o=o(" \u2014 "),Oq=a("a"),M2o=o("Speech2TextModel"),E2o=o(" (Speech2Text model)"),C2o=l(),w_=a("li"),wle=a("strong"),w2o=o("splinter"),A2o=o(" \u2014 "),Vq=a("a"),y2o=o("SplinterModel"),L2o=o(" (Splinter model)"),x2o=l(),A_=a("li"),Ale=a("strong"),$2o=o("squeezebert"),k2o=o(" \u2014 "),Xq=a("a"),S2o=o("SqueezeBertModel"),R2o=o(" (SqueezeBERT model)"),P2o=l(),y_=a("li"),yle=a("strong"),B2o=o("swin"),I2o=o(" \u2014 "),zq=a("a"),q2o=o("SwinModel"),N2o=o(" (Swin model)"),j2o=l(),L_=a("li"),Lle=a("strong"),D2o=o("t5"),G2o=o(" \u2014 "),Wq=a("a"),O2o=o("T5Model"),V2o=o(" (T5 model)"),X2o=l(),x_=a("li"),xle=a("strong"),z2o=o("tapas"),W2o=o(" \u2014 "),Qq=a("a"),Q2o=o("TapasModel"),H2o=o(" (TAPAS model)"),U2o=l(),$_=a("li"),$le=a("strong"),J2o=o("trajectory_transformer"),Y2o=o(" \u2014 "),Hq=a("a"),K2o=o("TrajectoryTransformerModel"),Z2o=o(" (Trajectory Transformer model)"),evo=l(),k_=a("li"),kle=a("strong"),ovo=o("transfo-xl"),rvo=o(" \u2014 "),Uq=a("a"),tvo=o("TransfoXLModel"),avo=o(" (Transformer-XL model)"),nvo=l(),S_=a("li"),Sle=a("strong"),svo=o("unispeech"),lvo=o(" \u2014 "),Jq=a("a"),ivo=o("UniSpeechModel"),dvo=o(" (UniSpeech model)"),cvo=l(),R_=a("li"),Rle=a("strong"),fvo=o("unispeech-sat"),mvo=o(" \u2014 "),Yq=a("a"),gvo=o("UniSpeechSatModel"),hvo=o(" (UniSpeechSat model)"),pvo=l(),P_=a("li"),Ple=a("strong"),_vo=o("van"),uvo=o(" \u2014 "),Kq=a("a"),bvo=o("VanModel"),vvo=o(" (VAN model)"),Fvo=l(),B_=a("li"),Ble=a("strong"),Tvo=o("vilt"),Mvo=o(" \u2014 "),Zq=a("a"),Evo=o("ViltModel"),Cvo=o(" (ViLT model)"),wvo=l(),I_=a("li"),Ile=a("strong"),Avo=o("vision-text-dual-encoder"),yvo=o(" \u2014 "),eN=a("a"),Lvo=o("VisionTextDualEncoderModel"),xvo=o(" (VisionTextDualEncoder model)"),$vo=l(),q_=a("li"),qle=a("strong"),kvo=o("visual_bert"),Svo=o(" \u2014 "),oN=a("a"),Rvo=o("VisualBertModel"),Pvo=o(" (VisualBert model)"),Bvo=l(),N_=a("li"),Nle=a("strong"),Ivo=o("vit"),qvo=o(" \u2014 "),rN=a("a"),Nvo=o("ViTModel"),jvo=o(" (ViT model)"),Dvo=l(),j_=a("li"),jle=a("strong"),Gvo=o("vit_mae"),Ovo=o(" \u2014 "),tN=a("a"),Vvo=o("ViTMAEModel"),Xvo=o(" (ViTMAE model)"),zvo=l(),D_=a("li"),Dle=a("strong"),Wvo=o("wav2vec2"),Qvo=o(" \u2014 "),aN=a("a"),Hvo=o("Wav2Vec2Model"),Uvo=o(" (Wav2Vec2 model)"),Jvo=l(),G_=a("li"),Gle=a("strong"),Yvo=o("wav2vec2-conformer"),Kvo=o(" \u2014 "),nN=a("a"),Zvo=o("Wav2Vec2ConformerModel"),eFo=o(" (Wav2Vec2-Conformer model)"),oFo=l(),O_=a("li"),Ole=a("strong"),rFo=o("wavlm"),tFo=o(" \u2014 "),sN=a("a"),aFo=o("WavLMModel"),nFo=o(" (WavLM model)"),sFo=l(),V_=a("li"),Vle=a("strong"),lFo=o("xglm"),iFo=o(" \u2014 "),lN=a("a"),dFo=o("XGLMModel"),cFo=o(" (XGLM model)"),fFo=l(),X_=a("li"),Xle=a("strong"),mFo=o("xlm"),gFo=o(" \u2014 "),iN=a("a"),hFo=o("XLMModel"),pFo=o(" (XLM model)"),_Fo=l(),z_=a("li"),zle=a("strong"),uFo=o("xlm-prophetnet"),bFo=o(" \u2014 "),dN=a("a"),vFo=o("XLMProphetNetModel"),FFo=o(" (XLMProphetNet model)"),TFo=l(),W_=a("li"),Wle=a("strong"),MFo=o("xlm-roberta"),EFo=o(" \u2014 "),cN=a("a"),CFo=o("XLMRobertaModel"),wFo=o(" (XLM-RoBERTa model)"),AFo=l(),Q_=a("li"),Qle=a("strong"),yFo=o("xlm-roberta-xl"),LFo=o(" \u2014 "),fN=a("a"),xFo=o("XLMRobertaXLModel"),$Fo=o(" (XLM-RoBERTa-XL model)"),kFo=l(),H_=a("li"),Hle=a("strong"),SFo=o("xlnet"),RFo=o(" \u2014 "),mN=a("a"),PFo=o("XLNetModel"),BFo=o(" (XLNet model)"),IFo=l(),U_=a("li"),Ule=a("strong"),qFo=o("yolos"),NFo=o(" \u2014 "),gN=a("a"),jFo=o("YolosModel"),DFo=o(" (YOLOS model)"),GFo=l(),J_=a("li"),Jle=a("strong"),OFo=o("yoso"),VFo=o(" \u2014 "),hN=a("a"),XFo=o("YosoModel"),zFo=o(" (YOSO model)"),WFo=l(),Y_=a("p"),QFo=o("The model is set in evaluation mode by default using "),Yle=a("code"),HFo=o("model.eval()"),UFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),JFo=o("model.train()"),YFo=l(),F(K_.$$.fragment),Bqe=l(),Li=a("h2"),Z_=a("a"),Zle=a("span"),F(J6.$$.fragment),KFo=l(),eie=a("span"),ZFo=o("AutoModelForPreTraining"),Iqe=l(),xo=a("div"),F(Y6.$$.fragment),eTo=l(),xi=a("p"),oTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pN=a("a"),rTo=o("from_pretrained()"),tTo=o(" class method or the "),_N=a("a"),aTo=o("from_config()"),nTo=o(` class
method.`),sTo=l(),K6=a("p"),lTo=o("This class cannot be instantiated directly using "),oie=a("code"),iTo=o("__init__()"),dTo=o(" (throws an error)."),cTo=l(),at=a("div"),F(Z6.$$.fragment),fTo=l(),rie=a("p"),mTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gTo=l(),$i=a("p"),hTo=o(`Note:
Loading a model from its configuration file does `),tie=a("strong"),pTo=o("not"),_To=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uN=a("a"),uTo=o("from_pretrained()"),bTo=o(" to load the model weights."),vTo=l(),F(eu.$$.fragment),FTo=l(),Ye=a("div"),F(ey.$$.fragment),TTo=l(),aie=a("p"),MTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ETo=l(),xa=a("p"),CTo=o("The model class to instantiate is selected based on the "),nie=a("code"),wTo=o("model_type"),ATo=o(` property of the config object (either
passed as an argument or loaded from `),sie=a("code"),yTo=o("pretrained_model_name_or_path"),LTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=a("code"),xTo=o("pretrained_model_name_or_path"),$To=o(":"),kTo=l(),G=a("ul"),ou=a("li"),iie=a("strong"),STo=o("albert"),RTo=o(" \u2014 "),bN=a("a"),PTo=o("AlbertForPreTraining"),BTo=o(" (ALBERT model)"),ITo=l(),ru=a("li"),die=a("strong"),qTo=o("bart"),NTo=o(" \u2014 "),vN=a("a"),jTo=o("BartForConditionalGeneration"),DTo=o(" (BART model)"),GTo=l(),tu=a("li"),cie=a("strong"),OTo=o("bert"),VTo=o(" \u2014 "),FN=a("a"),XTo=o("BertForPreTraining"),zTo=o(" (BERT model)"),WTo=l(),au=a("li"),fie=a("strong"),QTo=o("big_bird"),HTo=o(" \u2014 "),TN=a("a"),UTo=o("BigBirdForPreTraining"),JTo=o(" (BigBird model)"),YTo=l(),nu=a("li"),mie=a("strong"),KTo=o("camembert"),ZTo=o(" \u2014 "),MN=a("a"),e7o=o("CamembertForMaskedLM"),o7o=o(" (CamemBERT model)"),r7o=l(),su=a("li"),gie=a("strong"),t7o=o("ctrl"),a7o=o(" \u2014 "),EN=a("a"),n7o=o("CTRLLMHeadModel"),s7o=o(" (CTRL model)"),l7o=l(),lu=a("li"),hie=a("strong"),i7o=o("data2vec-text"),d7o=o(" \u2014 "),CN=a("a"),c7o=o("Data2VecTextForMaskedLM"),f7o=o(" (Data2VecText model)"),m7o=l(),iu=a("li"),pie=a("strong"),g7o=o("deberta"),h7o=o(" \u2014 "),wN=a("a"),p7o=o("DebertaForMaskedLM"),_7o=o(" (DeBERTa model)"),u7o=l(),du=a("li"),_ie=a("strong"),b7o=o("deberta-v2"),v7o=o(" \u2014 "),AN=a("a"),F7o=o("DebertaV2ForMaskedLM"),T7o=o(" (DeBERTa-v2 model)"),M7o=l(),cu=a("li"),uie=a("strong"),E7o=o("distilbert"),C7o=o(" \u2014 "),yN=a("a"),w7o=o("DistilBertForMaskedLM"),A7o=o(" (DistilBERT model)"),y7o=l(),fu=a("li"),bie=a("strong"),L7o=o("electra"),x7o=o(" \u2014 "),LN=a("a"),$7o=o("ElectraForPreTraining"),k7o=o(" (ELECTRA model)"),S7o=l(),mu=a("li"),vie=a("strong"),R7o=o("flaubert"),P7o=o(" \u2014 "),xN=a("a"),B7o=o("FlaubertWithLMHeadModel"),I7o=o(" (FlauBERT model)"),q7o=l(),gu=a("li"),Fie=a("strong"),N7o=o("flava"),j7o=o(" \u2014 "),$N=a("a"),D7o=o("FlavaForPreTraining"),G7o=o(" (Flava model)"),O7o=l(),hu=a("li"),Tie=a("strong"),V7o=o("fnet"),X7o=o(" \u2014 "),kN=a("a"),z7o=o("FNetForPreTraining"),W7o=o(" (FNet model)"),Q7o=l(),pu=a("li"),Mie=a("strong"),H7o=o("fsmt"),U7o=o(" \u2014 "),SN=a("a"),J7o=o("FSMTForConditionalGeneration"),Y7o=o(" (FairSeq Machine-Translation model)"),K7o=l(),_u=a("li"),Eie=a("strong"),Z7o=o("funnel"),eMo=o(" \u2014 "),RN=a("a"),oMo=o("FunnelForPreTraining"),rMo=o(" (Funnel Transformer model)"),tMo=l(),uu=a("li"),Cie=a("strong"),aMo=o("gpt2"),nMo=o(" \u2014 "),PN=a("a"),sMo=o("GPT2LMHeadModel"),lMo=o(" (OpenAI GPT-2 model)"),iMo=l(),bu=a("li"),wie=a("strong"),dMo=o("ibert"),cMo=o(" \u2014 "),BN=a("a"),fMo=o("IBertForMaskedLM"),mMo=o(" (I-BERT model)"),gMo=l(),vu=a("li"),Aie=a("strong"),hMo=o("layoutlm"),pMo=o(" \u2014 "),IN=a("a"),_Mo=o("LayoutLMForMaskedLM"),uMo=o(" (LayoutLM model)"),bMo=l(),Fu=a("li"),yie=a("strong"),vMo=o("longformer"),FMo=o(" \u2014 "),qN=a("a"),TMo=o("LongformerForMaskedLM"),MMo=o(" (Longformer model)"),EMo=l(),Tu=a("li"),Lie=a("strong"),CMo=o("lxmert"),wMo=o(" \u2014 "),NN=a("a"),AMo=o("LxmertForPreTraining"),yMo=o(" (LXMERT model)"),LMo=l(),Mu=a("li"),xie=a("strong"),xMo=o("megatron-bert"),$Mo=o(" \u2014 "),jN=a("a"),kMo=o("MegatronBertForPreTraining"),SMo=o(" (MegatronBert model)"),RMo=l(),Eu=a("li"),$ie=a("strong"),PMo=o("mobilebert"),BMo=o(" \u2014 "),DN=a("a"),IMo=o("MobileBertForPreTraining"),qMo=o(" (MobileBERT model)"),NMo=l(),Cu=a("li"),kie=a("strong"),jMo=o("mpnet"),DMo=o(" \u2014 "),GN=a("a"),GMo=o("MPNetForMaskedLM"),OMo=o(" (MPNet model)"),VMo=l(),wu=a("li"),Sie=a("strong"),XMo=o("openai-gpt"),zMo=o(" \u2014 "),ON=a("a"),WMo=o("OpenAIGPTLMHeadModel"),QMo=o(" (OpenAI GPT model)"),HMo=l(),Au=a("li"),Rie=a("strong"),UMo=o("retribert"),JMo=o(" \u2014 "),VN=a("a"),YMo=o("RetriBertModel"),KMo=o(" (RetriBERT model)"),ZMo=l(),yu=a("li"),Pie=a("strong"),e4o=o("roberta"),o4o=o(" \u2014 "),XN=a("a"),r4o=o("RobertaForMaskedLM"),t4o=o(" (RoBERTa model)"),a4o=l(),Lu=a("li"),Bie=a("strong"),n4o=o("splinter"),s4o=o(" \u2014 "),zN=a("a"),l4o=o("SplinterForPreTraining"),i4o=o(" (Splinter model)"),d4o=l(),xu=a("li"),Iie=a("strong"),c4o=o("squeezebert"),f4o=o(" \u2014 "),WN=a("a"),m4o=o("SqueezeBertForMaskedLM"),g4o=o(" (SqueezeBERT model)"),h4o=l(),$u=a("li"),qie=a("strong"),p4o=o("t5"),_4o=o(" \u2014 "),QN=a("a"),u4o=o("T5ForConditionalGeneration"),b4o=o(" (T5 model)"),v4o=l(),ku=a("li"),Nie=a("strong"),F4o=o("tapas"),T4o=o(" \u2014 "),HN=a("a"),M4o=o("TapasForMaskedLM"),E4o=o(" (TAPAS model)"),C4o=l(),Su=a("li"),jie=a("strong"),w4o=o("transfo-xl"),A4o=o(" \u2014 "),UN=a("a"),y4o=o("TransfoXLLMHeadModel"),L4o=o(" (Transformer-XL model)"),x4o=l(),Ru=a("li"),Die=a("strong"),$4o=o("unispeech"),k4o=o(" \u2014 "),JN=a("a"),S4o=o("UniSpeechForPreTraining"),R4o=o(" (UniSpeech model)"),P4o=l(),Pu=a("li"),Gie=a("strong"),B4o=o("unispeech-sat"),I4o=o(" \u2014 "),YN=a("a"),q4o=o("UniSpeechSatForPreTraining"),N4o=o(" (UniSpeechSat model)"),j4o=l(),Bu=a("li"),Oie=a("strong"),D4o=o("visual_bert"),G4o=o(" \u2014 "),KN=a("a"),O4o=o("VisualBertForPreTraining"),V4o=o(" (VisualBert model)"),X4o=l(),Iu=a("li"),Vie=a("strong"),z4o=o("vit_mae"),W4o=o(" \u2014 "),ZN=a("a"),Q4o=o("ViTMAEForPreTraining"),H4o=o(" (ViTMAE model)"),U4o=l(),qu=a("li"),Xie=a("strong"),J4o=o("wav2vec2"),Y4o=o(" \u2014 "),ej=a("a"),K4o=o("Wav2Vec2ForPreTraining"),Z4o=o(" (Wav2Vec2 model)"),eEo=l(),Nu=a("li"),zie=a("strong"),oEo=o("wav2vec2-conformer"),rEo=o(" \u2014 "),oj=a("a"),tEo=o("Wav2Vec2ConformerForPreTraining"),aEo=o(" (Wav2Vec2-Conformer model)"),nEo=l(),ju=a("li"),Wie=a("strong"),sEo=o("xlm"),lEo=o(" \u2014 "),rj=a("a"),iEo=o("XLMWithLMHeadModel"),dEo=o(" (XLM model)"),cEo=l(),Du=a("li"),Qie=a("strong"),fEo=o("xlm-roberta"),mEo=o(" \u2014 "),tj=a("a"),gEo=o("XLMRobertaForMaskedLM"),hEo=o(" (XLM-RoBERTa model)"),pEo=l(),Gu=a("li"),Hie=a("strong"),_Eo=o("xlm-roberta-xl"),uEo=o(" \u2014 "),aj=a("a"),bEo=o("XLMRobertaXLForMaskedLM"),vEo=o(" (XLM-RoBERTa-XL model)"),FEo=l(),Ou=a("li"),Uie=a("strong"),TEo=o("xlnet"),MEo=o(" \u2014 "),nj=a("a"),EEo=o("XLNetLMHeadModel"),CEo=o(" (XLNet model)"),wEo=l(),Vu=a("p"),AEo=o("The model is set in evaluation mode by default using "),Jie=a("code"),yEo=o("model.eval()"),LEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yie=a("code"),xEo=o("model.train()"),$Eo=l(),F(Xu.$$.fragment),qqe=l(),ki=a("h2"),zu=a("a"),Kie=a("span"),F(oy.$$.fragment),kEo=l(),Zie=a("span"),SEo=o("AutoModelForCausalLM"),Nqe=l(),$o=a("div"),F(ry.$$.fragment),REo=l(),Si=a("p"),PEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sj=a("a"),BEo=o("from_pretrained()"),IEo=o(" class method or the "),lj=a("a"),qEo=o("from_config()"),NEo=o(` class
method.`),jEo=l(),ty=a("p"),DEo=o("This class cannot be instantiated directly using "),ede=a("code"),GEo=o("__init__()"),OEo=o(" (throws an error)."),VEo=l(),nt=a("div"),F(ay.$$.fragment),XEo=l(),ode=a("p"),zEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),WEo=l(),Ri=a("p"),QEo=o(`Note:
Loading a model from its configuration file does `),rde=a("strong"),HEo=o("not"),UEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=a("a"),JEo=o("from_pretrained()"),YEo=o(" to load the model weights."),KEo=l(),F(Wu.$$.fragment),ZEo=l(),Ke=a("div"),F(ny.$$.fragment),eCo=l(),tde=a("p"),oCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rCo=l(),$a=a("p"),tCo=o("The model class to instantiate is selected based on the "),ade=a("code"),aCo=o("model_type"),nCo=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),sCo=o("pretrained_model_name_or_path"),lCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),iCo=o("pretrained_model_name_or_path"),dCo=o(":"),cCo=l(),z=a("ul"),Qu=a("li"),lde=a("strong"),fCo=o("bart"),mCo=o(" \u2014 "),dj=a("a"),gCo=o("BartForCausalLM"),hCo=o(" (BART model)"),pCo=l(),Hu=a("li"),ide=a("strong"),_Co=o("bert"),uCo=o(" \u2014 "),cj=a("a"),bCo=o("BertLMHeadModel"),vCo=o(" (BERT model)"),FCo=l(),Uu=a("li"),dde=a("strong"),TCo=o("bert-generation"),MCo=o(" \u2014 "),fj=a("a"),ECo=o("BertGenerationDecoder"),CCo=o(" (Bert Generation model)"),wCo=l(),Ju=a("li"),cde=a("strong"),ACo=o("big_bird"),yCo=o(" \u2014 "),mj=a("a"),LCo=o("BigBirdForCausalLM"),xCo=o(" (BigBird model)"),$Co=l(),Yu=a("li"),fde=a("strong"),kCo=o("bigbird_pegasus"),SCo=o(" \u2014 "),gj=a("a"),RCo=o("BigBirdPegasusForCausalLM"),PCo=o(" (BigBirdPegasus model)"),BCo=l(),Ku=a("li"),mde=a("strong"),ICo=o("blenderbot"),qCo=o(" \u2014 "),hj=a("a"),NCo=o("BlenderbotForCausalLM"),jCo=o(" (Blenderbot model)"),DCo=l(),Zu=a("li"),gde=a("strong"),GCo=o("blenderbot-small"),OCo=o(" \u2014 "),pj=a("a"),VCo=o("BlenderbotSmallForCausalLM"),XCo=o(" (BlenderbotSmall model)"),zCo=l(),e1=a("li"),hde=a("strong"),WCo=o("camembert"),QCo=o(" \u2014 "),_j=a("a"),HCo=o("CamembertForCausalLM"),UCo=o(" (CamemBERT model)"),JCo=l(),o1=a("li"),pde=a("strong"),YCo=o("ctrl"),KCo=o(" \u2014 "),uj=a("a"),ZCo=o("CTRLLMHeadModel"),e5o=o(" (CTRL model)"),o5o=l(),r1=a("li"),_de=a("strong"),r5o=o("data2vec-text"),t5o=o(" \u2014 "),bj=a("a"),a5o=o("Data2VecTextForCausalLM"),n5o=o(" (Data2VecText model)"),s5o=l(),t1=a("li"),ude=a("strong"),l5o=o("electra"),i5o=o(" \u2014 "),vj=a("a"),d5o=o("ElectraForCausalLM"),c5o=o(" (ELECTRA model)"),f5o=l(),a1=a("li"),bde=a("strong"),m5o=o("gpt2"),g5o=o(" \u2014 "),Fj=a("a"),h5o=o("GPT2LMHeadModel"),p5o=o(" (OpenAI GPT-2 model)"),_5o=l(),n1=a("li"),vde=a("strong"),u5o=o("gpt_neo"),b5o=o(" \u2014 "),Tj=a("a"),v5o=o("GPTNeoForCausalLM"),F5o=o(" (GPT Neo model)"),T5o=l(),s1=a("li"),Fde=a("strong"),M5o=o("gptj"),E5o=o(" \u2014 "),Mj=a("a"),C5o=o("GPTJForCausalLM"),w5o=o(" (GPT-J model)"),A5o=l(),l1=a("li"),Tde=a("strong"),y5o=o("marian"),L5o=o(" \u2014 "),Ej=a("a"),x5o=o("MarianForCausalLM"),$5o=o(" (Marian model)"),k5o=l(),i1=a("li"),Mde=a("strong"),S5o=o("mbart"),R5o=o(" \u2014 "),Cj=a("a"),P5o=o("MBartForCausalLM"),B5o=o(" (mBART model)"),I5o=l(),d1=a("li"),Ede=a("strong"),q5o=o("megatron-bert"),N5o=o(" \u2014 "),wj=a("a"),j5o=o("MegatronBertForCausalLM"),D5o=o(" (MegatronBert model)"),G5o=l(),c1=a("li"),Cde=a("strong"),O5o=o("openai-gpt"),V5o=o(" \u2014 "),Aj=a("a"),X5o=o("OpenAIGPTLMHeadModel"),z5o=o(" (OpenAI GPT model)"),W5o=l(),f1=a("li"),wde=a("strong"),Q5o=o("opt"),H5o=o(" \u2014 "),yj=a("a"),U5o=o("OPTForCausalLM"),J5o=o(" (OPT model)"),Y5o=l(),m1=a("li"),Ade=a("strong"),K5o=o("pegasus"),Z5o=o(" \u2014 "),Lj=a("a"),ewo=o("PegasusForCausalLM"),owo=o(" (Pegasus model)"),rwo=l(),g1=a("li"),yde=a("strong"),two=o("plbart"),awo=o(" \u2014 "),xj=a("a"),nwo=o("PLBartForCausalLM"),swo=o(" (PLBart model)"),lwo=l(),h1=a("li"),Lde=a("strong"),iwo=o("prophetnet"),dwo=o(" \u2014 "),$j=a("a"),cwo=o("ProphetNetForCausalLM"),fwo=o(" (ProphetNet model)"),mwo=l(),p1=a("li"),xde=a("strong"),gwo=o("qdqbert"),hwo=o(" \u2014 "),kj=a("a"),pwo=o("QDQBertLMHeadModel"),_wo=o(" (QDQBert model)"),uwo=l(),_1=a("li"),$de=a("strong"),bwo=o("reformer"),vwo=o(" \u2014 "),Sj=a("a"),Fwo=o("ReformerModelWithLMHead"),Two=o(" (Reformer model)"),Mwo=l(),u1=a("li"),kde=a("strong"),Ewo=o("rembert"),Cwo=o(" \u2014 "),Rj=a("a"),wwo=o("RemBertForCausalLM"),Awo=o(" (RemBERT model)"),ywo=l(),b1=a("li"),Sde=a("strong"),Lwo=o("roberta"),xwo=o(" \u2014 "),Pj=a("a"),$wo=o("RobertaForCausalLM"),kwo=o(" (RoBERTa model)"),Swo=l(),v1=a("li"),Rde=a("strong"),Rwo=o("roformer"),Pwo=o(" \u2014 "),Bj=a("a"),Bwo=o("RoFormerForCausalLM"),Iwo=o(" (RoFormer model)"),qwo=l(),F1=a("li"),Pde=a("strong"),Nwo=o("speech_to_text_2"),jwo=o(" \u2014 "),Ij=a("a"),Dwo=o("Speech2Text2ForCausalLM"),Gwo=o(" (Speech2Text2 model)"),Owo=l(),T1=a("li"),Bde=a("strong"),Vwo=o("transfo-xl"),Xwo=o(" \u2014 "),qj=a("a"),zwo=o("TransfoXLLMHeadModel"),Wwo=o(" (Transformer-XL model)"),Qwo=l(),M1=a("li"),Ide=a("strong"),Hwo=o("trocr"),Uwo=o(" \u2014 "),Nj=a("a"),Jwo=o("TrOCRForCausalLM"),Ywo=o(" (TrOCR model)"),Kwo=l(),E1=a("li"),qde=a("strong"),Zwo=o("xglm"),e0o=o(" \u2014 "),jj=a("a"),o0o=o("XGLMForCausalLM"),r0o=o(" (XGLM model)"),t0o=l(),C1=a("li"),Nde=a("strong"),a0o=o("xlm"),n0o=o(" \u2014 "),Dj=a("a"),s0o=o("XLMWithLMHeadModel"),l0o=o(" (XLM model)"),i0o=l(),w1=a("li"),jde=a("strong"),d0o=o("xlm-prophetnet"),c0o=o(" \u2014 "),Gj=a("a"),f0o=o("XLMProphetNetForCausalLM"),m0o=o(" (XLMProphetNet model)"),g0o=l(),A1=a("li"),Dde=a("strong"),h0o=o("xlm-roberta"),p0o=o(" \u2014 "),Oj=a("a"),_0o=o("XLMRobertaForCausalLM"),u0o=o(" (XLM-RoBERTa model)"),b0o=l(),y1=a("li"),Gde=a("strong"),v0o=o("xlm-roberta-xl"),F0o=o(" \u2014 "),Vj=a("a"),T0o=o("XLMRobertaXLForCausalLM"),M0o=o(" (XLM-RoBERTa-XL model)"),E0o=l(),L1=a("li"),Ode=a("strong"),C0o=o("xlnet"),w0o=o(" \u2014 "),Xj=a("a"),A0o=o("XLNetLMHeadModel"),y0o=o(" (XLNet model)"),L0o=l(),x1=a("p"),x0o=o("The model is set in evaluation mode by default using "),Vde=a("code"),$0o=o("model.eval()"),k0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),S0o=o("model.train()"),R0o=l(),F($1.$$.fragment),jqe=l(),Pi=a("h2"),k1=a("a"),zde=a("span"),F(sy.$$.fragment),P0o=l(),Wde=a("span"),B0o=o("AutoModelForMaskedLM"),Dqe=l(),ko=a("div"),F(ly.$$.fragment),I0o=l(),Bi=a("p"),q0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zj=a("a"),N0o=o("from_pretrained()"),j0o=o(" class method or the "),Wj=a("a"),D0o=o("from_config()"),G0o=o(` class
method.`),O0o=l(),iy=a("p"),V0o=o("This class cannot be instantiated directly using "),Qde=a("code"),X0o=o("__init__()"),z0o=o(" (throws an error)."),W0o=l(),st=a("div"),F(dy.$$.fragment),Q0o=l(),Hde=a("p"),H0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),U0o=l(),Ii=a("p"),J0o=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),Y0o=o("not"),K0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=a("a"),Z0o=o("from_pretrained()"),eAo=o(" to load the model weights."),oAo=l(),F(S1.$$.fragment),rAo=l(),Ze=a("div"),F(cy.$$.fragment),tAo=l(),Jde=a("p"),aAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nAo=l(),ka=a("p"),sAo=o("The model class to instantiate is selected based on the "),Yde=a("code"),lAo=o("model_type"),iAo=o(` property of the config object (either
passed as an argument or loaded from `),Kde=a("code"),dAo=o("pretrained_model_name_or_path"),cAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=a("code"),fAo=o("pretrained_model_name_or_path"),mAo=o(":"),gAo=l(),W=a("ul"),R1=a("li"),ece=a("strong"),hAo=o("albert"),pAo=o(" \u2014 "),Hj=a("a"),_Ao=o("AlbertForMaskedLM"),uAo=o(" (ALBERT model)"),bAo=l(),P1=a("li"),oce=a("strong"),vAo=o("bart"),FAo=o(" \u2014 "),Uj=a("a"),TAo=o("BartForConditionalGeneration"),MAo=o(" (BART model)"),EAo=l(),B1=a("li"),rce=a("strong"),CAo=o("bert"),wAo=o(" \u2014 "),Jj=a("a"),AAo=o("BertForMaskedLM"),yAo=o(" (BERT model)"),LAo=l(),I1=a("li"),tce=a("strong"),xAo=o("big_bird"),$Ao=o(" \u2014 "),Yj=a("a"),kAo=o("BigBirdForMaskedLM"),SAo=o(" (BigBird model)"),RAo=l(),q1=a("li"),ace=a("strong"),PAo=o("camembert"),BAo=o(" \u2014 "),Kj=a("a"),IAo=o("CamembertForMaskedLM"),qAo=o(" (CamemBERT model)"),NAo=l(),N1=a("li"),nce=a("strong"),jAo=o("convbert"),DAo=o(" \u2014 "),Zj=a("a"),GAo=o("ConvBertForMaskedLM"),OAo=o(" (ConvBERT model)"),VAo=l(),j1=a("li"),sce=a("strong"),XAo=o("data2vec-text"),zAo=o(" \u2014 "),eD=a("a"),WAo=o("Data2VecTextForMaskedLM"),QAo=o(" (Data2VecText model)"),HAo=l(),D1=a("li"),lce=a("strong"),UAo=o("deberta"),JAo=o(" \u2014 "),oD=a("a"),YAo=o("DebertaForMaskedLM"),KAo=o(" (DeBERTa model)"),ZAo=l(),G1=a("li"),ice=a("strong"),e6o=o("deberta-v2"),o6o=o(" \u2014 "),rD=a("a"),r6o=o("DebertaV2ForMaskedLM"),t6o=o(" (DeBERTa-v2 model)"),a6o=l(),O1=a("li"),dce=a("strong"),n6o=o("distilbert"),s6o=o(" \u2014 "),tD=a("a"),l6o=o("DistilBertForMaskedLM"),i6o=o(" (DistilBERT model)"),d6o=l(),V1=a("li"),cce=a("strong"),c6o=o("electra"),f6o=o(" \u2014 "),aD=a("a"),m6o=o("ElectraForMaskedLM"),g6o=o(" (ELECTRA model)"),h6o=l(),X1=a("li"),fce=a("strong"),p6o=o("flaubert"),_6o=o(" \u2014 "),nD=a("a"),u6o=o("FlaubertWithLMHeadModel"),b6o=o(" (FlauBERT model)"),v6o=l(),z1=a("li"),mce=a("strong"),F6o=o("fnet"),T6o=o(" \u2014 "),sD=a("a"),M6o=o("FNetForMaskedLM"),E6o=o(" (FNet model)"),C6o=l(),W1=a("li"),gce=a("strong"),w6o=o("funnel"),A6o=o(" \u2014 "),lD=a("a"),y6o=o("FunnelForMaskedLM"),L6o=o(" (Funnel Transformer model)"),x6o=l(),Q1=a("li"),hce=a("strong"),$6o=o("ibert"),k6o=o(" \u2014 "),iD=a("a"),S6o=o("IBertForMaskedLM"),R6o=o(" (I-BERT model)"),P6o=l(),H1=a("li"),pce=a("strong"),B6o=o("layoutlm"),I6o=o(" \u2014 "),dD=a("a"),q6o=o("LayoutLMForMaskedLM"),N6o=o(" (LayoutLM model)"),j6o=l(),U1=a("li"),_ce=a("strong"),D6o=o("longformer"),G6o=o(" \u2014 "),cD=a("a"),O6o=o("LongformerForMaskedLM"),V6o=o(" (Longformer model)"),X6o=l(),J1=a("li"),uce=a("strong"),z6o=o("mbart"),W6o=o(" \u2014 "),fD=a("a"),Q6o=o("MBartForConditionalGeneration"),H6o=o(" (mBART model)"),U6o=l(),Y1=a("li"),bce=a("strong"),J6o=o("megatron-bert"),Y6o=o(" \u2014 "),mD=a("a"),K6o=o("MegatronBertForMaskedLM"),Z6o=o(" (MegatronBert model)"),eyo=l(),K1=a("li"),vce=a("strong"),oyo=o("mobilebert"),ryo=o(" \u2014 "),gD=a("a"),tyo=o("MobileBertForMaskedLM"),ayo=o(" (MobileBERT model)"),nyo=l(),Z1=a("li"),Fce=a("strong"),syo=o("mpnet"),lyo=o(" \u2014 "),hD=a("a"),iyo=o("MPNetForMaskedLM"),dyo=o(" (MPNet model)"),cyo=l(),e3=a("li"),Tce=a("strong"),fyo=o("nystromformer"),myo=o(" \u2014 "),pD=a("a"),gyo=o("NystromformerForMaskedLM"),hyo=o(" (Nystromformer model)"),pyo=l(),o3=a("li"),Mce=a("strong"),_yo=o("perceiver"),uyo=o(" \u2014 "),_D=a("a"),byo=o("PerceiverForMaskedLM"),vyo=o(" (Perceiver model)"),Fyo=l(),r3=a("li"),Ece=a("strong"),Tyo=o("qdqbert"),Myo=o(" \u2014 "),uD=a("a"),Eyo=o("QDQBertForMaskedLM"),Cyo=o(" (QDQBert model)"),wyo=l(),t3=a("li"),Cce=a("strong"),Ayo=o("reformer"),yyo=o(" \u2014 "),bD=a("a"),Lyo=o("ReformerForMaskedLM"),xyo=o(" (Reformer model)"),$yo=l(),a3=a("li"),wce=a("strong"),kyo=o("rembert"),Syo=o(" \u2014 "),vD=a("a"),Ryo=o("RemBertForMaskedLM"),Pyo=o(" (RemBERT model)"),Byo=l(),n3=a("li"),Ace=a("strong"),Iyo=o("roberta"),qyo=o(" \u2014 "),FD=a("a"),Nyo=o("RobertaForMaskedLM"),jyo=o(" (RoBERTa model)"),Dyo=l(),s3=a("li"),yce=a("strong"),Gyo=o("roformer"),Oyo=o(" \u2014 "),TD=a("a"),Vyo=o("RoFormerForMaskedLM"),Xyo=o(" (RoFormer model)"),zyo=l(),l3=a("li"),Lce=a("strong"),Wyo=o("squeezebert"),Qyo=o(" \u2014 "),MD=a("a"),Hyo=o("SqueezeBertForMaskedLM"),Uyo=o(" (SqueezeBERT model)"),Jyo=l(),i3=a("li"),xce=a("strong"),Yyo=o("tapas"),Kyo=o(" \u2014 "),ED=a("a"),Zyo=o("TapasForMaskedLM"),eLo=o(" (TAPAS model)"),oLo=l(),d3=a("li"),$ce=a("strong"),rLo=o("wav2vec2"),tLo=o(" \u2014 "),kce=a("code"),aLo=o("Wav2Vec2ForMaskedLM"),nLo=o(" (Wav2Vec2 model)"),sLo=l(),c3=a("li"),Sce=a("strong"),lLo=o("xlm"),iLo=o(" \u2014 "),CD=a("a"),dLo=o("XLMWithLMHeadModel"),cLo=o(" (XLM model)"),fLo=l(),f3=a("li"),Rce=a("strong"),mLo=o("xlm-roberta"),gLo=o(" \u2014 "),wD=a("a"),hLo=o("XLMRobertaForMaskedLM"),pLo=o(" (XLM-RoBERTa model)"),_Lo=l(),m3=a("li"),Pce=a("strong"),uLo=o("xlm-roberta-xl"),bLo=o(" \u2014 "),AD=a("a"),vLo=o("XLMRobertaXLForMaskedLM"),FLo=o(" (XLM-RoBERTa-XL model)"),TLo=l(),g3=a("li"),Bce=a("strong"),MLo=o("yoso"),ELo=o(" \u2014 "),yD=a("a"),CLo=o("YosoForMaskedLM"),wLo=o(" (YOSO model)"),ALo=l(),h3=a("p"),yLo=o("The model is set in evaluation mode by default using "),Ice=a("code"),LLo=o("model.eval()"),xLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qce=a("code"),$Lo=o("model.train()"),kLo=l(),F(p3.$$.fragment),Gqe=l(),qi=a("h2"),_3=a("a"),Nce=a("span"),F(fy.$$.fragment),SLo=l(),jce=a("span"),RLo=o("AutoModelForSeq2SeqLM"),Oqe=l(),So=a("div"),F(my.$$.fragment),PLo=l(),Ni=a("p"),BLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LD=a("a"),ILo=o("from_pretrained()"),qLo=o(" class method or the "),xD=a("a"),NLo=o("from_config()"),jLo=o(` class
method.`),DLo=l(),gy=a("p"),GLo=o("This class cannot be instantiated directly using "),Dce=a("code"),OLo=o("__init__()"),VLo=o(" (throws an error)."),XLo=l(),lt=a("div"),F(hy.$$.fragment),zLo=l(),Gce=a("p"),WLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QLo=l(),ji=a("p"),HLo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),ULo=o("not"),JLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),YLo=o("from_pretrained()"),KLo=o(" to load the model weights."),ZLo=l(),F(u3.$$.fragment),e8o=l(),eo=a("div"),F(py.$$.fragment),o8o=l(),Vce=a("p"),r8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t8o=l(),Sa=a("p"),a8o=o("The model class to instantiate is selected based on the "),Xce=a("code"),n8o=o("model_type"),s8o=o(` property of the config object (either
passed as an argument or loaded from `),zce=a("code"),l8o=o("pretrained_model_name_or_path"),i8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=a("code"),d8o=o("pretrained_model_name_or_path"),c8o=o(":"),f8o=l(),_e=a("ul"),b3=a("li"),Qce=a("strong"),m8o=o("bart"),g8o=o(" \u2014 "),kD=a("a"),h8o=o("BartForConditionalGeneration"),p8o=o(" (BART model)"),_8o=l(),v3=a("li"),Hce=a("strong"),u8o=o("bigbird_pegasus"),b8o=o(" \u2014 "),SD=a("a"),v8o=o("BigBirdPegasusForConditionalGeneration"),F8o=o(" (BigBirdPegasus model)"),T8o=l(),F3=a("li"),Uce=a("strong"),M8o=o("blenderbot"),E8o=o(" \u2014 "),RD=a("a"),C8o=o("BlenderbotForConditionalGeneration"),w8o=o(" (Blenderbot model)"),A8o=l(),T3=a("li"),Jce=a("strong"),y8o=o("blenderbot-small"),L8o=o(" \u2014 "),PD=a("a"),x8o=o("BlenderbotSmallForConditionalGeneration"),$8o=o(" (BlenderbotSmall model)"),k8o=l(),M3=a("li"),Yce=a("strong"),S8o=o("encoder-decoder"),R8o=o(" \u2014 "),BD=a("a"),P8o=o("EncoderDecoderModel"),B8o=o(" (Encoder decoder model)"),I8o=l(),E3=a("li"),Kce=a("strong"),q8o=o("fsmt"),N8o=o(" \u2014 "),ID=a("a"),j8o=o("FSMTForConditionalGeneration"),D8o=o(" (FairSeq Machine-Translation model)"),G8o=l(),C3=a("li"),Zce=a("strong"),O8o=o("led"),V8o=o(" \u2014 "),qD=a("a"),X8o=o("LEDForConditionalGeneration"),z8o=o(" (LED model)"),W8o=l(),w3=a("li"),efe=a("strong"),Q8o=o("m2m_100"),H8o=o(" \u2014 "),ND=a("a"),U8o=o("M2M100ForConditionalGeneration"),J8o=o(" (M2M100 model)"),Y8o=l(),A3=a("li"),ofe=a("strong"),K8o=o("marian"),Z8o=o(" \u2014 "),jD=a("a"),e9o=o("MarianMTModel"),o9o=o(" (Marian model)"),r9o=l(),y3=a("li"),rfe=a("strong"),t9o=o("mbart"),a9o=o(" \u2014 "),DD=a("a"),n9o=o("MBartForConditionalGeneration"),s9o=o(" (mBART model)"),l9o=l(),L3=a("li"),tfe=a("strong"),i9o=o("mt5"),d9o=o(" \u2014 "),GD=a("a"),c9o=o("MT5ForConditionalGeneration"),f9o=o(" (mT5 model)"),m9o=l(),x3=a("li"),afe=a("strong"),g9o=o("pegasus"),h9o=o(" \u2014 "),OD=a("a"),p9o=o("PegasusForConditionalGeneration"),_9o=o(" (Pegasus model)"),u9o=l(),$3=a("li"),nfe=a("strong"),b9o=o("plbart"),v9o=o(" \u2014 "),VD=a("a"),F9o=o("PLBartForConditionalGeneration"),T9o=o(" (PLBart model)"),M9o=l(),k3=a("li"),sfe=a("strong"),E9o=o("prophetnet"),C9o=o(" \u2014 "),XD=a("a"),w9o=o("ProphetNetForConditionalGeneration"),A9o=o(" (ProphetNet model)"),y9o=l(),S3=a("li"),lfe=a("strong"),L9o=o("t5"),x9o=o(" \u2014 "),zD=a("a"),$9o=o("T5ForConditionalGeneration"),k9o=o(" (T5 model)"),S9o=l(),R3=a("li"),ife=a("strong"),R9o=o("xlm-prophetnet"),P9o=o(" \u2014 "),WD=a("a"),B9o=o("XLMProphetNetForConditionalGeneration"),I9o=o(" (XLMProphetNet model)"),q9o=l(),P3=a("p"),N9o=o("The model is set in evaluation mode by default using "),dfe=a("code"),j9o=o("model.eval()"),D9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=a("code"),G9o=o("model.train()"),O9o=l(),F(B3.$$.fragment),Vqe=l(),Di=a("h2"),I3=a("a"),ffe=a("span"),F(_y.$$.fragment),V9o=l(),mfe=a("span"),X9o=o("AutoModelForSequenceClassification"),Xqe=l(),Ro=a("div"),F(uy.$$.fragment),z9o=l(),Gi=a("p"),W9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QD=a("a"),Q9o=o("from_pretrained()"),H9o=o(" class method or the "),HD=a("a"),U9o=o("from_config()"),J9o=o(` class
method.`),Y9o=l(),by=a("p"),K9o=o("This class cannot be instantiated directly using "),gfe=a("code"),Z9o=o("__init__()"),exo=o(" (throws an error)."),oxo=l(),it=a("div"),F(vy.$$.fragment),rxo=l(),hfe=a("p"),txo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),axo=l(),Oi=a("p"),nxo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),sxo=o("not"),lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),ixo=o("from_pretrained()"),dxo=o(" to load the model weights."),cxo=l(),F(q3.$$.fragment),fxo=l(),oo=a("div"),F(Fy.$$.fragment),mxo=l(),_fe=a("p"),gxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hxo=l(),Ra=a("p"),pxo=o("The model class to instantiate is selected based on the "),ufe=a("code"),_xo=o("model_type"),uxo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),bxo=o("pretrained_model_name_or_path"),vxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),Fxo=o("pretrained_model_name_or_path"),Txo=o(":"),Mxo=l(),q=a("ul"),N3=a("li"),Ffe=a("strong"),Exo=o("albert"),Cxo=o(" \u2014 "),JD=a("a"),wxo=o("AlbertForSequenceClassification"),Axo=o(" (ALBERT model)"),yxo=l(),j3=a("li"),Tfe=a("strong"),Lxo=o("bart"),xxo=o(" \u2014 "),YD=a("a"),$xo=o("BartForSequenceClassification"),kxo=o(" (BART model)"),Sxo=l(),D3=a("li"),Mfe=a("strong"),Rxo=o("bert"),Pxo=o(" \u2014 "),KD=a("a"),Bxo=o("BertForSequenceClassification"),Ixo=o(" (BERT model)"),qxo=l(),G3=a("li"),Efe=a("strong"),Nxo=o("big_bird"),jxo=o(" \u2014 "),ZD=a("a"),Dxo=o("BigBirdForSequenceClassification"),Gxo=o(" (BigBird model)"),Oxo=l(),O3=a("li"),Cfe=a("strong"),Vxo=o("bigbird_pegasus"),Xxo=o(" \u2014 "),eG=a("a"),zxo=o("BigBirdPegasusForSequenceClassification"),Wxo=o(" (BigBirdPegasus model)"),Qxo=l(),V3=a("li"),wfe=a("strong"),Hxo=o("camembert"),Uxo=o(" \u2014 "),oG=a("a"),Jxo=o("CamembertForSequenceClassification"),Yxo=o(" (CamemBERT model)"),Kxo=l(),X3=a("li"),Afe=a("strong"),Zxo=o("canine"),e$o=o(" \u2014 "),rG=a("a"),o$o=o("CanineForSequenceClassification"),r$o=o(" (Canine model)"),t$o=l(),z3=a("li"),yfe=a("strong"),a$o=o("convbert"),n$o=o(" \u2014 "),tG=a("a"),s$o=o("ConvBertForSequenceClassification"),l$o=o(" (ConvBERT model)"),i$o=l(),W3=a("li"),Lfe=a("strong"),d$o=o("ctrl"),c$o=o(" \u2014 "),aG=a("a"),f$o=o("CTRLForSequenceClassification"),m$o=o(" (CTRL model)"),g$o=l(),Q3=a("li"),xfe=a("strong"),h$o=o("data2vec-text"),p$o=o(" \u2014 "),nG=a("a"),_$o=o("Data2VecTextForSequenceClassification"),u$o=o(" (Data2VecText model)"),b$o=l(),H3=a("li"),$fe=a("strong"),v$o=o("deberta"),F$o=o(" \u2014 "),sG=a("a"),T$o=o("DebertaForSequenceClassification"),M$o=o(" (DeBERTa model)"),E$o=l(),U3=a("li"),kfe=a("strong"),C$o=o("deberta-v2"),w$o=o(" \u2014 "),lG=a("a"),A$o=o("DebertaV2ForSequenceClassification"),y$o=o(" (DeBERTa-v2 model)"),L$o=l(),J3=a("li"),Sfe=a("strong"),x$o=o("distilbert"),$$o=o(" \u2014 "),iG=a("a"),k$o=o("DistilBertForSequenceClassification"),S$o=o(" (DistilBERT model)"),R$o=l(),Y3=a("li"),Rfe=a("strong"),P$o=o("electra"),B$o=o(" \u2014 "),dG=a("a"),I$o=o("ElectraForSequenceClassification"),q$o=o(" (ELECTRA model)"),N$o=l(),K3=a("li"),Pfe=a("strong"),j$o=o("flaubert"),D$o=o(" \u2014 "),cG=a("a"),G$o=o("FlaubertForSequenceClassification"),O$o=o(" (FlauBERT model)"),V$o=l(),Z3=a("li"),Bfe=a("strong"),X$o=o("fnet"),z$o=o(" \u2014 "),fG=a("a"),W$o=o("FNetForSequenceClassification"),Q$o=o(" (FNet model)"),H$o=l(),eb=a("li"),Ife=a("strong"),U$o=o("funnel"),J$o=o(" \u2014 "),mG=a("a"),Y$o=o("FunnelForSequenceClassification"),K$o=o(" (Funnel Transformer model)"),Z$o=l(),ob=a("li"),qfe=a("strong"),eko=o("gpt2"),oko=o(" \u2014 "),gG=a("a"),rko=o("GPT2ForSequenceClassification"),tko=o(" (OpenAI GPT-2 model)"),ako=l(),rb=a("li"),Nfe=a("strong"),nko=o("gpt_neo"),sko=o(" \u2014 "),hG=a("a"),lko=o("GPTNeoForSequenceClassification"),iko=o(" (GPT Neo model)"),dko=l(),tb=a("li"),jfe=a("strong"),cko=o("gptj"),fko=o(" \u2014 "),pG=a("a"),mko=o("GPTJForSequenceClassification"),gko=o(" (GPT-J model)"),hko=l(),ab=a("li"),Dfe=a("strong"),pko=o("ibert"),_ko=o(" \u2014 "),_G=a("a"),uko=o("IBertForSequenceClassification"),bko=o(" (I-BERT model)"),vko=l(),nb=a("li"),Gfe=a("strong"),Fko=o("layoutlm"),Tko=o(" \u2014 "),uG=a("a"),Mko=o("LayoutLMForSequenceClassification"),Eko=o(" (LayoutLM model)"),Cko=l(),sb=a("li"),Ofe=a("strong"),wko=o("layoutlmv2"),Ako=o(" \u2014 "),bG=a("a"),yko=o("LayoutLMv2ForSequenceClassification"),Lko=o(" (LayoutLMv2 model)"),xko=l(),lb=a("li"),Vfe=a("strong"),$ko=o("led"),kko=o(" \u2014 "),vG=a("a"),Sko=o("LEDForSequenceClassification"),Rko=o(" (LED model)"),Pko=l(),ib=a("li"),Xfe=a("strong"),Bko=o("longformer"),Iko=o(" \u2014 "),FG=a("a"),qko=o("LongformerForSequenceClassification"),Nko=o(" (Longformer model)"),jko=l(),db=a("li"),zfe=a("strong"),Dko=o("mbart"),Gko=o(" \u2014 "),TG=a("a"),Oko=o("MBartForSequenceClassification"),Vko=o(" (mBART model)"),Xko=l(),cb=a("li"),Wfe=a("strong"),zko=o("megatron-bert"),Wko=o(" \u2014 "),MG=a("a"),Qko=o("MegatronBertForSequenceClassification"),Hko=o(" (MegatronBert model)"),Uko=l(),fb=a("li"),Qfe=a("strong"),Jko=o("mobilebert"),Yko=o(" \u2014 "),EG=a("a"),Kko=o("MobileBertForSequenceClassification"),Zko=o(" (MobileBERT model)"),eSo=l(),mb=a("li"),Hfe=a("strong"),oSo=o("mpnet"),rSo=o(" \u2014 "),CG=a("a"),tSo=o("MPNetForSequenceClassification"),aSo=o(" (MPNet model)"),nSo=l(),gb=a("li"),Ufe=a("strong"),sSo=o("nystromformer"),lSo=o(" \u2014 "),wG=a("a"),iSo=o("NystromformerForSequenceClassification"),dSo=o(" (Nystromformer model)"),cSo=l(),hb=a("li"),Jfe=a("strong"),fSo=o("openai-gpt"),mSo=o(" \u2014 "),AG=a("a"),gSo=o("OpenAIGPTForSequenceClassification"),hSo=o(" (OpenAI GPT model)"),pSo=l(),pb=a("li"),Yfe=a("strong"),_So=o("perceiver"),uSo=o(" \u2014 "),yG=a("a"),bSo=o("PerceiverForSequenceClassification"),vSo=o(" (Perceiver model)"),FSo=l(),_b=a("li"),Kfe=a("strong"),TSo=o("plbart"),MSo=o(" \u2014 "),LG=a("a"),ESo=o("PLBartForSequenceClassification"),CSo=o(" (PLBart model)"),wSo=l(),ub=a("li"),Zfe=a("strong"),ASo=o("qdqbert"),ySo=o(" \u2014 "),xG=a("a"),LSo=o("QDQBertForSequenceClassification"),xSo=o(" (QDQBert model)"),$So=l(),bb=a("li"),eme=a("strong"),kSo=o("reformer"),SSo=o(" \u2014 "),$G=a("a"),RSo=o("ReformerForSequenceClassification"),PSo=o(" (Reformer model)"),BSo=l(),vb=a("li"),ome=a("strong"),ISo=o("rembert"),qSo=o(" \u2014 "),kG=a("a"),NSo=o("RemBertForSequenceClassification"),jSo=o(" (RemBERT model)"),DSo=l(),Fb=a("li"),rme=a("strong"),GSo=o("roberta"),OSo=o(" \u2014 "),SG=a("a"),VSo=o("RobertaForSequenceClassification"),XSo=o(" (RoBERTa model)"),zSo=l(),Tb=a("li"),tme=a("strong"),WSo=o("roformer"),QSo=o(" \u2014 "),RG=a("a"),HSo=o("RoFormerForSequenceClassification"),USo=o(" (RoFormer model)"),JSo=l(),Mb=a("li"),ame=a("strong"),YSo=o("squeezebert"),KSo=o(" \u2014 "),PG=a("a"),ZSo=o("SqueezeBertForSequenceClassification"),eRo=o(" (SqueezeBERT model)"),oRo=l(),Eb=a("li"),nme=a("strong"),rRo=o("tapas"),tRo=o(" \u2014 "),BG=a("a"),aRo=o("TapasForSequenceClassification"),nRo=o(" (TAPAS model)"),sRo=l(),Cb=a("li"),sme=a("strong"),lRo=o("transfo-xl"),iRo=o(" \u2014 "),IG=a("a"),dRo=o("TransfoXLForSequenceClassification"),cRo=o(" (Transformer-XL model)"),fRo=l(),wb=a("li"),lme=a("strong"),mRo=o("xlm"),gRo=o(" \u2014 "),qG=a("a"),hRo=o("XLMForSequenceClassification"),pRo=o(" (XLM model)"),_Ro=l(),Ab=a("li"),ime=a("strong"),uRo=o("xlm-roberta"),bRo=o(" \u2014 "),NG=a("a"),vRo=o("XLMRobertaForSequenceClassification"),FRo=o(" (XLM-RoBERTa model)"),TRo=l(),yb=a("li"),dme=a("strong"),MRo=o("xlm-roberta-xl"),ERo=o(" \u2014 "),jG=a("a"),CRo=o("XLMRobertaXLForSequenceClassification"),wRo=o(" (XLM-RoBERTa-XL model)"),ARo=l(),Lb=a("li"),cme=a("strong"),yRo=o("xlnet"),LRo=o(" \u2014 "),DG=a("a"),xRo=o("XLNetForSequenceClassification"),$Ro=o(" (XLNet model)"),kRo=l(),xb=a("li"),fme=a("strong"),SRo=o("yoso"),RRo=o(" \u2014 "),GG=a("a"),PRo=o("YosoForSequenceClassification"),BRo=o(" (YOSO model)"),IRo=l(),$b=a("p"),qRo=o("The model is set in evaluation mode by default using "),mme=a("code"),NRo=o("model.eval()"),jRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),DRo=o("model.train()"),GRo=l(),F(kb.$$.fragment),zqe=l(),Vi=a("h2"),Sb=a("a"),hme=a("span"),F(Ty.$$.fragment),ORo=l(),pme=a("span"),VRo=o("AutoModelForMultipleChoice"),Wqe=l(),Po=a("div"),F(My.$$.fragment),XRo=l(),Xi=a("p"),zRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OG=a("a"),WRo=o("from_pretrained()"),QRo=o(" class method or the "),VG=a("a"),HRo=o("from_config()"),URo=o(` class
method.`),JRo=l(),Ey=a("p"),YRo=o("This class cannot be instantiated directly using "),_me=a("code"),KRo=o("__init__()"),ZRo=o(" (throws an error)."),ePo=l(),dt=a("div"),F(Cy.$$.fragment),oPo=l(),ume=a("p"),rPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tPo=l(),zi=a("p"),aPo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),nPo=o("not"),sPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),lPo=o("from_pretrained()"),iPo=o(" to load the model weights."),dPo=l(),F(Rb.$$.fragment),cPo=l(),ro=a("div"),F(wy.$$.fragment),fPo=l(),vme=a("p"),mPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gPo=l(),Pa=a("p"),hPo=o("The model class to instantiate is selected based on the "),Fme=a("code"),pPo=o("model_type"),_Po=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),uPo=o("pretrained_model_name_or_path"),bPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),vPo=o("pretrained_model_name_or_path"),FPo=o(":"),TPo=l(),Y=a("ul"),Pb=a("li"),Eme=a("strong"),MPo=o("albert"),EPo=o(" \u2014 "),zG=a("a"),CPo=o("AlbertForMultipleChoice"),wPo=o(" (ALBERT model)"),APo=l(),Bb=a("li"),Cme=a("strong"),yPo=o("bert"),LPo=o(" \u2014 "),WG=a("a"),xPo=o("BertForMultipleChoice"),$Po=o(" (BERT model)"),kPo=l(),Ib=a("li"),wme=a("strong"),SPo=o("big_bird"),RPo=o(" \u2014 "),QG=a("a"),PPo=o("BigBirdForMultipleChoice"),BPo=o(" (BigBird model)"),IPo=l(),qb=a("li"),Ame=a("strong"),qPo=o("camembert"),NPo=o(" \u2014 "),HG=a("a"),jPo=o("CamembertForMultipleChoice"),DPo=o(" (CamemBERT model)"),GPo=l(),Nb=a("li"),yme=a("strong"),OPo=o("canine"),VPo=o(" \u2014 "),UG=a("a"),XPo=o("CanineForMultipleChoice"),zPo=o(" (Canine model)"),WPo=l(),jb=a("li"),Lme=a("strong"),QPo=o("convbert"),HPo=o(" \u2014 "),JG=a("a"),UPo=o("ConvBertForMultipleChoice"),JPo=o(" (ConvBERT model)"),YPo=l(),Db=a("li"),xme=a("strong"),KPo=o("data2vec-text"),ZPo=o(" \u2014 "),YG=a("a"),eBo=o("Data2VecTextForMultipleChoice"),oBo=o(" (Data2VecText model)"),rBo=l(),Gb=a("li"),$me=a("strong"),tBo=o("deberta-v2"),aBo=o(" \u2014 "),KG=a("a"),nBo=o("DebertaV2ForMultipleChoice"),sBo=o(" (DeBERTa-v2 model)"),lBo=l(),Ob=a("li"),kme=a("strong"),iBo=o("distilbert"),dBo=o(" \u2014 "),ZG=a("a"),cBo=o("DistilBertForMultipleChoice"),fBo=o(" (DistilBERT model)"),mBo=l(),Vb=a("li"),Sme=a("strong"),gBo=o("electra"),hBo=o(" \u2014 "),eO=a("a"),pBo=o("ElectraForMultipleChoice"),_Bo=o(" (ELECTRA model)"),uBo=l(),Xb=a("li"),Rme=a("strong"),bBo=o("flaubert"),vBo=o(" \u2014 "),oO=a("a"),FBo=o("FlaubertForMultipleChoice"),TBo=o(" (FlauBERT model)"),MBo=l(),zb=a("li"),Pme=a("strong"),EBo=o("fnet"),CBo=o(" \u2014 "),rO=a("a"),wBo=o("FNetForMultipleChoice"),ABo=o(" (FNet model)"),yBo=l(),Wb=a("li"),Bme=a("strong"),LBo=o("funnel"),xBo=o(" \u2014 "),tO=a("a"),$Bo=o("FunnelForMultipleChoice"),kBo=o(" (Funnel Transformer model)"),SBo=l(),Qb=a("li"),Ime=a("strong"),RBo=o("ibert"),PBo=o(" \u2014 "),aO=a("a"),BBo=o("IBertForMultipleChoice"),IBo=o(" (I-BERT model)"),qBo=l(),Hb=a("li"),qme=a("strong"),NBo=o("longformer"),jBo=o(" \u2014 "),nO=a("a"),DBo=o("LongformerForMultipleChoice"),GBo=o(" (Longformer model)"),OBo=l(),Ub=a("li"),Nme=a("strong"),VBo=o("megatron-bert"),XBo=o(" \u2014 "),sO=a("a"),zBo=o("MegatronBertForMultipleChoice"),WBo=o(" (MegatronBert model)"),QBo=l(),Jb=a("li"),jme=a("strong"),HBo=o("mobilebert"),UBo=o(" \u2014 "),lO=a("a"),JBo=o("MobileBertForMultipleChoice"),YBo=o(" (MobileBERT model)"),KBo=l(),Yb=a("li"),Dme=a("strong"),ZBo=o("mpnet"),eIo=o(" \u2014 "),iO=a("a"),oIo=o("MPNetForMultipleChoice"),rIo=o(" (MPNet model)"),tIo=l(),Kb=a("li"),Gme=a("strong"),aIo=o("nystromformer"),nIo=o(" \u2014 "),dO=a("a"),sIo=o("NystromformerForMultipleChoice"),lIo=o(" (Nystromformer model)"),iIo=l(),Zb=a("li"),Ome=a("strong"),dIo=o("qdqbert"),cIo=o(" \u2014 "),cO=a("a"),fIo=o("QDQBertForMultipleChoice"),mIo=o(" (QDQBert model)"),gIo=l(),e2=a("li"),Vme=a("strong"),hIo=o("rembert"),pIo=o(" \u2014 "),fO=a("a"),_Io=o("RemBertForMultipleChoice"),uIo=o(" (RemBERT model)"),bIo=l(),o2=a("li"),Xme=a("strong"),vIo=o("roberta"),FIo=o(" \u2014 "),mO=a("a"),TIo=o("RobertaForMultipleChoice"),MIo=o(" (RoBERTa model)"),EIo=l(),r2=a("li"),zme=a("strong"),CIo=o("roformer"),wIo=o(" \u2014 "),gO=a("a"),AIo=o("RoFormerForMultipleChoice"),yIo=o(" (RoFormer model)"),LIo=l(),t2=a("li"),Wme=a("strong"),xIo=o("squeezebert"),$Io=o(" \u2014 "),hO=a("a"),kIo=o("SqueezeBertForMultipleChoice"),SIo=o(" (SqueezeBERT model)"),RIo=l(),a2=a("li"),Qme=a("strong"),PIo=o("xlm"),BIo=o(" \u2014 "),pO=a("a"),IIo=o("XLMForMultipleChoice"),qIo=o(" (XLM model)"),NIo=l(),n2=a("li"),Hme=a("strong"),jIo=o("xlm-roberta"),DIo=o(" \u2014 "),_O=a("a"),GIo=o("XLMRobertaForMultipleChoice"),OIo=o(" (XLM-RoBERTa model)"),VIo=l(),s2=a("li"),Ume=a("strong"),XIo=o("xlm-roberta-xl"),zIo=o(" \u2014 "),uO=a("a"),WIo=o("XLMRobertaXLForMultipleChoice"),QIo=o(" (XLM-RoBERTa-XL model)"),HIo=l(),l2=a("li"),Jme=a("strong"),UIo=o("xlnet"),JIo=o(" \u2014 "),bO=a("a"),YIo=o("XLNetForMultipleChoice"),KIo=o(" (XLNet model)"),ZIo=l(),i2=a("li"),Yme=a("strong"),eqo=o("yoso"),oqo=o(" \u2014 "),vO=a("a"),rqo=o("YosoForMultipleChoice"),tqo=o(" (YOSO model)"),aqo=l(),d2=a("p"),nqo=o("The model is set in evaluation mode by default using "),Kme=a("code"),sqo=o("model.eval()"),lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),iqo=o("model.train()"),dqo=l(),F(c2.$$.fragment),Qqe=l(),Wi=a("h2"),f2=a("a"),ege=a("span"),F(Ay.$$.fragment),cqo=l(),oge=a("span"),fqo=o("AutoModelForNextSentencePrediction"),Hqe=l(),Bo=a("div"),F(yy.$$.fragment),mqo=l(),Qi=a("p"),gqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FO=a("a"),hqo=o("from_pretrained()"),pqo=o(" class method or the "),TO=a("a"),_qo=o("from_config()"),uqo=o(` class
method.`),bqo=l(),Ly=a("p"),vqo=o("This class cannot be instantiated directly using "),rge=a("code"),Fqo=o("__init__()"),Tqo=o(" (throws an error)."),Mqo=l(),ct=a("div"),F(xy.$$.fragment),Eqo=l(),tge=a("p"),Cqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wqo=l(),Hi=a("p"),Aqo=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),yqo=o("not"),Lqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),xqo=o("from_pretrained()"),$qo=o(" to load the model weights."),kqo=l(),F(m2.$$.fragment),Sqo=l(),to=a("div"),F($y.$$.fragment),Rqo=l(),nge=a("p"),Pqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Bqo=l(),Ba=a("p"),Iqo=o("The model class to instantiate is selected based on the "),sge=a("code"),qqo=o("model_type"),Nqo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),jqo=o("pretrained_model_name_or_path"),Dqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Gqo=o("pretrained_model_name_or_path"),Oqo=o(":"),Vqo=l(),Yr=a("ul"),g2=a("li"),dge=a("strong"),Xqo=o("bert"),zqo=o(" \u2014 "),EO=a("a"),Wqo=o("BertForNextSentencePrediction"),Qqo=o(" (BERT model)"),Hqo=l(),h2=a("li"),cge=a("strong"),Uqo=o("fnet"),Jqo=o(" \u2014 "),CO=a("a"),Yqo=o("FNetForNextSentencePrediction"),Kqo=o(" (FNet model)"),Zqo=l(),p2=a("li"),fge=a("strong"),eNo=o("megatron-bert"),oNo=o(" \u2014 "),wO=a("a"),rNo=o("MegatronBertForNextSentencePrediction"),tNo=o(" (MegatronBert model)"),aNo=l(),_2=a("li"),mge=a("strong"),nNo=o("mobilebert"),sNo=o(" \u2014 "),AO=a("a"),lNo=o("MobileBertForNextSentencePrediction"),iNo=o(" (MobileBERT model)"),dNo=l(),u2=a("li"),gge=a("strong"),cNo=o("qdqbert"),fNo=o(" \u2014 "),yO=a("a"),mNo=o("QDQBertForNextSentencePrediction"),gNo=o(" (QDQBert model)"),hNo=l(),b2=a("p"),pNo=o("The model is set in evaluation mode by default using "),hge=a("code"),_No=o("model.eval()"),uNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),bNo=o("model.train()"),vNo=l(),F(v2.$$.fragment),Uqe=l(),Ui=a("h2"),F2=a("a"),_ge=a("span"),F(ky.$$.fragment),FNo=l(),uge=a("span"),TNo=o("AutoModelForTokenClassification"),Jqe=l(),Io=a("div"),F(Sy.$$.fragment),MNo=l(),Ji=a("p"),ENo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LO=a("a"),CNo=o("from_pretrained()"),wNo=o(" class method or the "),xO=a("a"),ANo=o("from_config()"),yNo=o(` class
method.`),LNo=l(),Ry=a("p"),xNo=o("This class cannot be instantiated directly using "),bge=a("code"),$No=o("__init__()"),kNo=o(" (throws an error)."),SNo=l(),ft=a("div"),F(Py.$$.fragment),RNo=l(),vge=a("p"),PNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BNo=l(),Yi=a("p"),INo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),qNo=o("not"),NNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),jNo=o("from_pretrained()"),DNo=o(" to load the model weights."),GNo=l(),F(T2.$$.fragment),ONo=l(),ao=a("div"),F(By.$$.fragment),VNo=l(),Tge=a("p"),XNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zNo=l(),Ia=a("p"),WNo=o("The model class to instantiate is selected based on the "),Mge=a("code"),QNo=o("model_type"),HNo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),UNo=o("pretrained_model_name_or_path"),JNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),YNo=o("pretrained_model_name_or_path"),KNo=o(":"),ZNo=l(),U=a("ul"),M2=a("li"),wge=a("strong"),ejo=o("albert"),ojo=o(" \u2014 "),kO=a("a"),rjo=o("AlbertForTokenClassification"),tjo=o(" (ALBERT model)"),ajo=l(),E2=a("li"),Age=a("strong"),njo=o("bert"),sjo=o(" \u2014 "),SO=a("a"),ljo=o("BertForTokenClassification"),ijo=o(" (BERT model)"),djo=l(),C2=a("li"),yge=a("strong"),cjo=o("big_bird"),fjo=o(" \u2014 "),RO=a("a"),mjo=o("BigBirdForTokenClassification"),gjo=o(" (BigBird model)"),hjo=l(),w2=a("li"),Lge=a("strong"),pjo=o("camembert"),_jo=o(" \u2014 "),PO=a("a"),ujo=o("CamembertForTokenClassification"),bjo=o(" (CamemBERT model)"),vjo=l(),A2=a("li"),xge=a("strong"),Fjo=o("canine"),Tjo=o(" \u2014 "),BO=a("a"),Mjo=o("CanineForTokenClassification"),Ejo=o(" (Canine model)"),Cjo=l(),y2=a("li"),$ge=a("strong"),wjo=o("convbert"),Ajo=o(" \u2014 "),IO=a("a"),yjo=o("ConvBertForTokenClassification"),Ljo=o(" (ConvBERT model)"),xjo=l(),L2=a("li"),kge=a("strong"),$jo=o("data2vec-text"),kjo=o(" \u2014 "),qO=a("a"),Sjo=o("Data2VecTextForTokenClassification"),Rjo=o(" (Data2VecText model)"),Pjo=l(),x2=a("li"),Sge=a("strong"),Bjo=o("deberta"),Ijo=o(" \u2014 "),NO=a("a"),qjo=o("DebertaForTokenClassification"),Njo=o(" (DeBERTa model)"),jjo=l(),$2=a("li"),Rge=a("strong"),Djo=o("deberta-v2"),Gjo=o(" \u2014 "),jO=a("a"),Ojo=o("DebertaV2ForTokenClassification"),Vjo=o(" (DeBERTa-v2 model)"),Xjo=l(),k2=a("li"),Pge=a("strong"),zjo=o("distilbert"),Wjo=o(" \u2014 "),DO=a("a"),Qjo=o("DistilBertForTokenClassification"),Hjo=o(" (DistilBERT model)"),Ujo=l(),S2=a("li"),Bge=a("strong"),Jjo=o("electra"),Yjo=o(" \u2014 "),GO=a("a"),Kjo=o("ElectraForTokenClassification"),Zjo=o(" (ELECTRA model)"),eDo=l(),R2=a("li"),Ige=a("strong"),oDo=o("flaubert"),rDo=o(" \u2014 "),OO=a("a"),tDo=o("FlaubertForTokenClassification"),aDo=o(" (FlauBERT model)"),nDo=l(),P2=a("li"),qge=a("strong"),sDo=o("fnet"),lDo=o(" \u2014 "),VO=a("a"),iDo=o("FNetForTokenClassification"),dDo=o(" (FNet model)"),cDo=l(),B2=a("li"),Nge=a("strong"),fDo=o("funnel"),mDo=o(" \u2014 "),XO=a("a"),gDo=o("FunnelForTokenClassification"),hDo=o(" (Funnel Transformer model)"),pDo=l(),I2=a("li"),jge=a("strong"),_Do=o("gpt2"),uDo=o(" \u2014 "),zO=a("a"),bDo=o("GPT2ForTokenClassification"),vDo=o(" (OpenAI GPT-2 model)"),FDo=l(),q2=a("li"),Dge=a("strong"),TDo=o("ibert"),MDo=o(" \u2014 "),WO=a("a"),EDo=o("IBertForTokenClassification"),CDo=o(" (I-BERT model)"),wDo=l(),N2=a("li"),Gge=a("strong"),ADo=o("layoutlm"),yDo=o(" \u2014 "),QO=a("a"),LDo=o("LayoutLMForTokenClassification"),xDo=o(" (LayoutLM model)"),$Do=l(),j2=a("li"),Oge=a("strong"),kDo=o("layoutlmv2"),SDo=o(" \u2014 "),HO=a("a"),RDo=o("LayoutLMv2ForTokenClassification"),PDo=o(" (LayoutLMv2 model)"),BDo=l(),D2=a("li"),Vge=a("strong"),IDo=o("longformer"),qDo=o(" \u2014 "),UO=a("a"),NDo=o("LongformerForTokenClassification"),jDo=o(" (Longformer model)"),DDo=l(),G2=a("li"),Xge=a("strong"),GDo=o("megatron-bert"),ODo=o(" \u2014 "),JO=a("a"),VDo=o("MegatronBertForTokenClassification"),XDo=o(" (MegatronBert model)"),zDo=l(),O2=a("li"),zge=a("strong"),WDo=o("mobilebert"),QDo=o(" \u2014 "),YO=a("a"),HDo=o("MobileBertForTokenClassification"),UDo=o(" (MobileBERT model)"),JDo=l(),V2=a("li"),Wge=a("strong"),YDo=o("mpnet"),KDo=o(" \u2014 "),KO=a("a"),ZDo=o("MPNetForTokenClassification"),eGo=o(" (MPNet model)"),oGo=l(),X2=a("li"),Qge=a("strong"),rGo=o("nystromformer"),tGo=o(" \u2014 "),ZO=a("a"),aGo=o("NystromformerForTokenClassification"),nGo=o(" (Nystromformer model)"),sGo=l(),z2=a("li"),Hge=a("strong"),lGo=o("qdqbert"),iGo=o(" \u2014 "),eV=a("a"),dGo=o("QDQBertForTokenClassification"),cGo=o(" (QDQBert model)"),fGo=l(),W2=a("li"),Uge=a("strong"),mGo=o("rembert"),gGo=o(" \u2014 "),oV=a("a"),hGo=o("RemBertForTokenClassification"),pGo=o(" (RemBERT model)"),_Go=l(),Q2=a("li"),Jge=a("strong"),uGo=o("roberta"),bGo=o(" \u2014 "),rV=a("a"),vGo=o("RobertaForTokenClassification"),FGo=o(" (RoBERTa model)"),TGo=l(),H2=a("li"),Yge=a("strong"),MGo=o("roformer"),EGo=o(" \u2014 "),tV=a("a"),CGo=o("RoFormerForTokenClassification"),wGo=o(" (RoFormer model)"),AGo=l(),U2=a("li"),Kge=a("strong"),yGo=o("squeezebert"),LGo=o(" \u2014 "),aV=a("a"),xGo=o("SqueezeBertForTokenClassification"),$Go=o(" (SqueezeBERT model)"),kGo=l(),J2=a("li"),Zge=a("strong"),SGo=o("xlm"),RGo=o(" \u2014 "),nV=a("a"),PGo=o("XLMForTokenClassification"),BGo=o(" (XLM model)"),IGo=l(),Y2=a("li"),ehe=a("strong"),qGo=o("xlm-roberta"),NGo=o(" \u2014 "),sV=a("a"),jGo=o("XLMRobertaForTokenClassification"),DGo=o(" (XLM-RoBERTa model)"),GGo=l(),K2=a("li"),ohe=a("strong"),OGo=o("xlm-roberta-xl"),VGo=o(" \u2014 "),lV=a("a"),XGo=o("XLMRobertaXLForTokenClassification"),zGo=o(" (XLM-RoBERTa-XL model)"),WGo=l(),Z2=a("li"),rhe=a("strong"),QGo=o("xlnet"),HGo=o(" \u2014 "),iV=a("a"),UGo=o("XLNetForTokenClassification"),JGo=o(" (XLNet model)"),YGo=l(),ev=a("li"),the=a("strong"),KGo=o("yoso"),ZGo=o(" \u2014 "),dV=a("a"),eOo=o("YosoForTokenClassification"),oOo=o(" (YOSO model)"),rOo=l(),ov=a("p"),tOo=o("The model is set in evaluation mode by default using "),ahe=a("code"),aOo=o("model.eval()"),nOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),sOo=o("model.train()"),lOo=l(),F(rv.$$.fragment),Yqe=l(),Ki=a("h2"),tv=a("a"),she=a("span"),F(Iy.$$.fragment),iOo=l(),lhe=a("span"),dOo=o("AutoModelForQuestionAnswering"),Kqe=l(),qo=a("div"),F(qy.$$.fragment),cOo=l(),Zi=a("p"),fOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cV=a("a"),mOo=o("from_pretrained()"),gOo=o(" class method or the "),fV=a("a"),hOo=o("from_config()"),pOo=o(` class
method.`),_Oo=l(),Ny=a("p"),uOo=o("This class cannot be instantiated directly using "),ihe=a("code"),bOo=o("__init__()"),vOo=o(" (throws an error)."),FOo=l(),mt=a("div"),F(jy.$$.fragment),TOo=l(),dhe=a("p"),MOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),EOo=l(),ed=a("p"),COo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),wOo=o("not"),AOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),yOo=o("from_pretrained()"),LOo=o(" to load the model weights."),xOo=l(),F(av.$$.fragment),$Oo=l(),no=a("div"),F(Dy.$$.fragment),kOo=l(),fhe=a("p"),SOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ROo=l(),qa=a("p"),POo=o("The model class to instantiate is selected based on the "),mhe=a("code"),BOo=o("model_type"),IOo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),qOo=o("pretrained_model_name_or_path"),NOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),jOo=o("pretrained_model_name_or_path"),DOo=o(":"),GOo=l(),V=a("ul"),nv=a("li"),phe=a("strong"),OOo=o("albert"),VOo=o(" \u2014 "),gV=a("a"),XOo=o("AlbertForQuestionAnswering"),zOo=o(" (ALBERT model)"),WOo=l(),sv=a("li"),_he=a("strong"),QOo=o("bart"),HOo=o(" \u2014 "),hV=a("a"),UOo=o("BartForQuestionAnswering"),JOo=o(" (BART model)"),YOo=l(),lv=a("li"),uhe=a("strong"),KOo=o("bert"),ZOo=o(" \u2014 "),pV=a("a"),eVo=o("BertForQuestionAnswering"),oVo=o(" (BERT model)"),rVo=l(),iv=a("li"),bhe=a("strong"),tVo=o("big_bird"),aVo=o(" \u2014 "),_V=a("a"),nVo=o("BigBirdForQuestionAnswering"),sVo=o(" (BigBird model)"),lVo=l(),dv=a("li"),vhe=a("strong"),iVo=o("bigbird_pegasus"),dVo=o(" \u2014 "),uV=a("a"),cVo=o("BigBirdPegasusForQuestionAnswering"),fVo=o(" (BigBirdPegasus model)"),mVo=l(),cv=a("li"),Fhe=a("strong"),gVo=o("camembert"),hVo=o(" \u2014 "),bV=a("a"),pVo=o("CamembertForQuestionAnswering"),_Vo=o(" (CamemBERT model)"),uVo=l(),fv=a("li"),The=a("strong"),bVo=o("canine"),vVo=o(" \u2014 "),vV=a("a"),FVo=o("CanineForQuestionAnswering"),TVo=o(" (Canine model)"),MVo=l(),mv=a("li"),Mhe=a("strong"),EVo=o("convbert"),CVo=o(" \u2014 "),FV=a("a"),wVo=o("ConvBertForQuestionAnswering"),AVo=o(" (ConvBERT model)"),yVo=l(),gv=a("li"),Ehe=a("strong"),LVo=o("data2vec-text"),xVo=o(" \u2014 "),TV=a("a"),$Vo=o("Data2VecTextForQuestionAnswering"),kVo=o(" (Data2VecText model)"),SVo=l(),hv=a("li"),Che=a("strong"),RVo=o("deberta"),PVo=o(" \u2014 "),MV=a("a"),BVo=o("DebertaForQuestionAnswering"),IVo=o(" (DeBERTa model)"),qVo=l(),pv=a("li"),whe=a("strong"),NVo=o("deberta-v2"),jVo=o(" \u2014 "),EV=a("a"),DVo=o("DebertaV2ForQuestionAnswering"),GVo=o(" (DeBERTa-v2 model)"),OVo=l(),_v=a("li"),Ahe=a("strong"),VVo=o("distilbert"),XVo=o(" \u2014 "),CV=a("a"),zVo=o("DistilBertForQuestionAnswering"),WVo=o(" (DistilBERT model)"),QVo=l(),uv=a("li"),yhe=a("strong"),HVo=o("electra"),UVo=o(" \u2014 "),wV=a("a"),JVo=o("ElectraForQuestionAnswering"),YVo=o(" (ELECTRA model)"),KVo=l(),bv=a("li"),Lhe=a("strong"),ZVo=o("flaubert"),eXo=o(" \u2014 "),AV=a("a"),oXo=o("FlaubertForQuestionAnsweringSimple"),rXo=o(" (FlauBERT model)"),tXo=l(),vv=a("li"),xhe=a("strong"),aXo=o("fnet"),nXo=o(" \u2014 "),yV=a("a"),sXo=o("FNetForQuestionAnswering"),lXo=o(" (FNet model)"),iXo=l(),Fv=a("li"),$he=a("strong"),dXo=o("funnel"),cXo=o(" \u2014 "),LV=a("a"),fXo=o("FunnelForQuestionAnswering"),mXo=o(" (Funnel Transformer model)"),gXo=l(),Tv=a("li"),khe=a("strong"),hXo=o("gptj"),pXo=o(" \u2014 "),xV=a("a"),_Xo=o("GPTJForQuestionAnswering"),uXo=o(" (GPT-J model)"),bXo=l(),Mv=a("li"),She=a("strong"),vXo=o("ibert"),FXo=o(" \u2014 "),$V=a("a"),TXo=o("IBertForQuestionAnswering"),MXo=o(" (I-BERT model)"),EXo=l(),Ev=a("li"),Rhe=a("strong"),CXo=o("layoutlmv2"),wXo=o(" \u2014 "),kV=a("a"),AXo=o("LayoutLMv2ForQuestionAnswering"),yXo=o(" (LayoutLMv2 model)"),LXo=l(),Cv=a("li"),Phe=a("strong"),xXo=o("led"),$Xo=o(" \u2014 "),SV=a("a"),kXo=o("LEDForQuestionAnswering"),SXo=o(" (LED model)"),RXo=l(),wv=a("li"),Bhe=a("strong"),PXo=o("longformer"),BXo=o(" \u2014 "),RV=a("a"),IXo=o("LongformerForQuestionAnswering"),qXo=o(" (Longformer model)"),NXo=l(),Av=a("li"),Ihe=a("strong"),jXo=o("lxmert"),DXo=o(" \u2014 "),PV=a("a"),GXo=o("LxmertForQuestionAnswering"),OXo=o(" (LXMERT model)"),VXo=l(),yv=a("li"),qhe=a("strong"),XXo=o("mbart"),zXo=o(" \u2014 "),BV=a("a"),WXo=o("MBartForQuestionAnswering"),QXo=o(" (mBART model)"),HXo=l(),Lv=a("li"),Nhe=a("strong"),UXo=o("megatron-bert"),JXo=o(" \u2014 "),IV=a("a"),YXo=o("MegatronBertForQuestionAnswering"),KXo=o(" (MegatronBert model)"),ZXo=l(),xv=a("li"),jhe=a("strong"),ezo=o("mobilebert"),ozo=o(" \u2014 "),qV=a("a"),rzo=o("MobileBertForQuestionAnswering"),tzo=o(" (MobileBERT model)"),azo=l(),$v=a("li"),Dhe=a("strong"),nzo=o("mpnet"),szo=o(" \u2014 "),NV=a("a"),lzo=o("MPNetForQuestionAnswering"),izo=o(" (MPNet model)"),dzo=l(),kv=a("li"),Ghe=a("strong"),czo=o("nystromformer"),fzo=o(" \u2014 "),jV=a("a"),mzo=o("NystromformerForQuestionAnswering"),gzo=o(" (Nystromformer model)"),hzo=l(),Sv=a("li"),Ohe=a("strong"),pzo=o("qdqbert"),_zo=o(" \u2014 "),DV=a("a"),uzo=o("QDQBertForQuestionAnswering"),bzo=o(" (QDQBert model)"),vzo=l(),Rv=a("li"),Vhe=a("strong"),Fzo=o("reformer"),Tzo=o(" \u2014 "),GV=a("a"),Mzo=o("ReformerForQuestionAnswering"),Ezo=o(" (Reformer model)"),Czo=l(),Pv=a("li"),Xhe=a("strong"),wzo=o("rembert"),Azo=o(" \u2014 "),OV=a("a"),yzo=o("RemBertForQuestionAnswering"),Lzo=o(" (RemBERT model)"),xzo=l(),Bv=a("li"),zhe=a("strong"),$zo=o("roberta"),kzo=o(" \u2014 "),VV=a("a"),Szo=o("RobertaForQuestionAnswering"),Rzo=o(" (RoBERTa model)"),Pzo=l(),Iv=a("li"),Whe=a("strong"),Bzo=o("roformer"),Izo=o(" \u2014 "),XV=a("a"),qzo=o("RoFormerForQuestionAnswering"),Nzo=o(" (RoFormer model)"),jzo=l(),qv=a("li"),Qhe=a("strong"),Dzo=o("splinter"),Gzo=o(" \u2014 "),zV=a("a"),Ozo=o("SplinterForQuestionAnswering"),Vzo=o(" (Splinter model)"),Xzo=l(),Nv=a("li"),Hhe=a("strong"),zzo=o("squeezebert"),Wzo=o(" \u2014 "),WV=a("a"),Qzo=o("SqueezeBertForQuestionAnswering"),Hzo=o(" (SqueezeBERT model)"),Uzo=l(),jv=a("li"),Uhe=a("strong"),Jzo=o("xlm"),Yzo=o(" \u2014 "),QV=a("a"),Kzo=o("XLMForQuestionAnsweringSimple"),Zzo=o(" (XLM model)"),eWo=l(),Dv=a("li"),Jhe=a("strong"),oWo=o("xlm-roberta"),rWo=o(" \u2014 "),HV=a("a"),tWo=o("XLMRobertaForQuestionAnswering"),aWo=o(" (XLM-RoBERTa model)"),nWo=l(),Gv=a("li"),Yhe=a("strong"),sWo=o("xlm-roberta-xl"),lWo=o(" \u2014 "),UV=a("a"),iWo=o("XLMRobertaXLForQuestionAnswering"),dWo=o(" (XLM-RoBERTa-XL model)"),cWo=l(),Ov=a("li"),Khe=a("strong"),fWo=o("xlnet"),mWo=o(" \u2014 "),JV=a("a"),gWo=o("XLNetForQuestionAnsweringSimple"),hWo=o(" (XLNet model)"),pWo=l(),Vv=a("li"),Zhe=a("strong"),_Wo=o("yoso"),uWo=o(" \u2014 "),YV=a("a"),bWo=o("YosoForQuestionAnswering"),vWo=o(" (YOSO model)"),FWo=l(),Xv=a("p"),TWo=o("The model is set in evaluation mode by default using "),epe=a("code"),MWo=o("model.eval()"),EWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),CWo=o("model.train()"),wWo=l(),F(zv.$$.fragment),Zqe=l(),od=a("h2"),Wv=a("a"),rpe=a("span"),F(Gy.$$.fragment),AWo=l(),tpe=a("span"),yWo=o("AutoModelForTableQuestionAnswering"),eNe=l(),No=a("div"),F(Oy.$$.fragment),LWo=l(),rd=a("p"),xWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KV=a("a"),$Wo=o("from_pretrained()"),kWo=o(" class method or the "),ZV=a("a"),SWo=o("from_config()"),RWo=o(` class
method.`),PWo=l(),Vy=a("p"),BWo=o("This class cannot be instantiated directly using "),ape=a("code"),IWo=o("__init__()"),qWo=o(" (throws an error)."),NWo=l(),gt=a("div"),F(Xy.$$.fragment),jWo=l(),npe=a("p"),DWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GWo=l(),td=a("p"),OWo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),VWo=o("not"),XWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),zWo=o("from_pretrained()"),WWo=o(" to load the model weights."),QWo=l(),F(Qv.$$.fragment),HWo=l(),so=a("div"),F(zy.$$.fragment),UWo=l(),lpe=a("p"),JWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YWo=l(),Na=a("p"),KWo=o("The model class to instantiate is selected based on the "),ipe=a("code"),ZWo=o("model_type"),eQo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(":"),nQo=l(),fpe=a("ul"),Hv=a("li"),mpe=a("strong"),sQo=o("tapas"),lQo=o(" \u2014 "),oX=a("a"),iQo=o("TapasForQuestionAnswering"),dQo=o(" (TAPAS model)"),cQo=l(),Uv=a("p"),fQo=o("The model is set in evaluation mode by default using "),gpe=a("code"),mQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),hQo=o("model.train()"),pQo=l(),F(Jv.$$.fragment),oNe=l(),ad=a("h2"),Yv=a("a"),ppe=a("span"),F(Wy.$$.fragment),_Qo=l(),_pe=a("span"),uQo=o("AutoModelForImageClassification"),rNe=l(),jo=a("div"),F(Qy.$$.fragment),bQo=l(),nd=a("p"),vQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rX=a("a"),FQo=o("from_pretrained()"),TQo=o(" class method or the "),tX=a("a"),MQo=o("from_config()"),EQo=o(` class
method.`),CQo=l(),Hy=a("p"),wQo=o("This class cannot be instantiated directly using "),upe=a("code"),AQo=o("__init__()"),yQo=o(" (throws an error)."),LQo=l(),ht=a("div"),F(Uy.$$.fragment),xQo=l(),bpe=a("p"),$Qo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kQo=l(),sd=a("p"),SQo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),RQo=o("not"),PQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),BQo=o("from_pretrained()"),IQo=o(" to load the model weights."),qQo=l(),F(Kv.$$.fragment),NQo=l(),lo=a("div"),F(Jy.$$.fragment),jQo=l(),Fpe=a("p"),DQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GQo=l(),ja=a("p"),OQo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),VQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),zQo=o("pretrained_model_name_or_path"),WQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),QQo=o("pretrained_model_name_or_path"),HQo=o(":"),UQo=l(),Fe=a("ul"),Zv=a("li"),Cpe=a("strong"),JQo=o("beit"),YQo=o(" \u2014 "),nX=a("a"),KQo=o("BeitForImageClassification"),ZQo=o(" (BEiT model)"),eHo=l(),eF=a("li"),wpe=a("strong"),oHo=o("convnext"),rHo=o(" \u2014 "),sX=a("a"),tHo=o("ConvNextForImageClassification"),aHo=o(" (ConvNext model)"),nHo=l(),oF=a("li"),Ape=a("strong"),sHo=o("cvt"),lHo=o(" \u2014 "),lX=a("a"),iHo=o("CvtForImageClassification"),dHo=o(" (CvT model)"),cHo=l(),rF=a("li"),ype=a("strong"),fHo=o("data2vec-vision"),mHo=o(" \u2014 "),iX=a("a"),gHo=o("Data2VecVisionForImageClassification"),hHo=o(" (Data2VecVision model)"),pHo=l(),Bs=a("li"),Lpe=a("strong"),_Ho=o("deit"),uHo=o(" \u2014 "),dX=a("a"),bHo=o("DeiTForImageClassification"),vHo=o(" or "),cX=a("a"),FHo=o("DeiTForImageClassificationWithTeacher"),THo=o(" (DeiT model)"),MHo=l(),tF=a("li"),xpe=a("strong"),EHo=o("imagegpt"),CHo=o(" \u2014 "),fX=a("a"),wHo=o("ImageGPTForImageClassification"),AHo=o(" (ImageGPT model)"),yHo=l(),pt=a("li"),$pe=a("strong"),LHo=o("perceiver"),xHo=o(" \u2014 "),mX=a("a"),$Ho=o("PerceiverForImageClassificationLearned"),kHo=o(" or "),gX=a("a"),SHo=o("PerceiverForImageClassificationFourier"),RHo=o(" or "),hX=a("a"),PHo=o("PerceiverForImageClassificationConvProcessing"),BHo=o(" (Perceiver model)"),IHo=l(),aF=a("li"),kpe=a("strong"),qHo=o("poolformer"),NHo=o(" \u2014 "),pX=a("a"),jHo=o("PoolFormerForImageClassification"),DHo=o(" (PoolFormer model)"),GHo=l(),nF=a("li"),Spe=a("strong"),OHo=o("regnet"),VHo=o(" \u2014 "),_X=a("a"),XHo=o("RegNetForImageClassification"),zHo=o(" (RegNet model)"),WHo=l(),sF=a("li"),Rpe=a("strong"),QHo=o("resnet"),HHo=o(" \u2014 "),uX=a("a"),UHo=o("ResNetForImageClassification"),JHo=o(" (ResNet model)"),YHo=l(),lF=a("li"),Ppe=a("strong"),KHo=o("segformer"),ZHo=o(" \u2014 "),bX=a("a"),eUo=o("SegformerForImageClassification"),oUo=o(" (SegFormer model)"),rUo=l(),iF=a("li"),Bpe=a("strong"),tUo=o("swin"),aUo=o(" \u2014 "),vX=a("a"),nUo=o("SwinForImageClassification"),sUo=o(" (Swin model)"),lUo=l(),dF=a("li"),Ipe=a("strong"),iUo=o("van"),dUo=o(" \u2014 "),FX=a("a"),cUo=o("VanForImageClassification"),fUo=o(" (VAN model)"),mUo=l(),cF=a("li"),qpe=a("strong"),gUo=o("vit"),hUo=o(" \u2014 "),TX=a("a"),pUo=o("ViTForImageClassification"),_Uo=o(" (ViT model)"),uUo=l(),fF=a("p"),bUo=o("The model is set in evaluation mode by default using "),Npe=a("code"),vUo=o("model.eval()"),FUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),TUo=o("model.train()"),MUo=l(),F(mF.$$.fragment),tNe=l(),ld=a("h2"),gF=a("a"),Dpe=a("span"),F(Yy.$$.fragment),EUo=l(),Gpe=a("span"),CUo=o("AutoModelForVision2Seq"),aNe=l(),Do=a("div"),F(Ky.$$.fragment),wUo=l(),id=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MX=a("a"),yUo=o("from_pretrained()"),LUo=o(" class method or the "),EX=a("a"),xUo=o("from_config()"),$Uo=o(` class
method.`),kUo=l(),Zy=a("p"),SUo=o("This class cannot be instantiated directly using "),Ope=a("code"),RUo=o("__init__()"),PUo=o(" (throws an error)."),BUo=l(),_t=a("div"),F(eL.$$.fragment),IUo=l(),Vpe=a("p"),qUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NUo=l(),dd=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),DUo=o("not"),GUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),OUo=o("from_pretrained()"),VUo=o(" to load the model weights."),XUo=l(),F(hF.$$.fragment),zUo=l(),io=a("div"),F(oL.$$.fragment),WUo=l(),zpe=a("p"),QUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HUo=l(),Da=a("p"),UUo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),JUo=o("model_type"),YUo=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),KUo=o("pretrained_model_name_or_path"),ZUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(":"),rJo=l(),Upe=a("ul"),pF=a("li"),Jpe=a("strong"),tJo=o("vision-encoder-decoder"),aJo=o(" \u2014 "),wX=a("a"),nJo=o("VisionEncoderDecoderModel"),sJo=o(" (Vision Encoder decoder model)"),lJo=l(),_F=a("p"),iJo=o("The model is set in evaluation mode by default using "),Ype=a("code"),dJo=o("model.eval()"),cJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),fJo=o("model.train()"),mJo=l(),F(uF.$$.fragment),nNe=l(),cd=a("h2"),bF=a("a"),Zpe=a("span"),F(rL.$$.fragment),gJo=l(),e_e=a("span"),hJo=o("AutoModelForAudioClassification"),sNe=l(),Go=a("div"),F(tL.$$.fragment),pJo=l(),fd=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),AX=a("a"),uJo=o("from_pretrained()"),bJo=o(" class method or the "),yX=a("a"),vJo=o("from_config()"),FJo=o(` class
method.`),TJo=l(),aL=a("p"),MJo=o("This class cannot be instantiated directly using "),o_e=a("code"),EJo=o("__init__()"),CJo=o(" (throws an error)."),wJo=l(),ut=a("div"),F(nL.$$.fragment),AJo=l(),r_e=a("p"),yJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LJo=l(),md=a("p"),xJo=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),$Jo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),SJo=o("from_pretrained()"),RJo=o(" to load the model weights."),PJo=l(),F(vF.$$.fragment),BJo=l(),co=a("div"),F(sL.$$.fragment),IJo=l(),a_e=a("p"),qJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NJo=l(),Ga=a("p"),jJo=o("The model class to instantiate is selected based on the "),n_e=a("code"),DJo=o("model_type"),GJo=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),OJo=o("pretrained_model_name_or_path"),VJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(":"),WJo=l(),ke=a("ul"),FF=a("li"),i_e=a("strong"),QJo=o("data2vec-audio"),HJo=o(" \u2014 "),xX=a("a"),UJo=o("Data2VecAudioForSequenceClassification"),JJo=o(" (Data2VecAudio model)"),YJo=l(),TF=a("li"),d_e=a("strong"),KJo=o("hubert"),ZJo=o(" \u2014 "),$X=a("a"),eYo=o("HubertForSequenceClassification"),oYo=o(" (Hubert model)"),rYo=l(),MF=a("li"),c_e=a("strong"),tYo=o("sew"),aYo=o(" \u2014 "),kX=a("a"),nYo=o("SEWForSequenceClassification"),sYo=o(" (SEW model)"),lYo=l(),EF=a("li"),f_e=a("strong"),iYo=o("sew-d"),dYo=o(" \u2014 "),SX=a("a"),cYo=o("SEWDForSequenceClassification"),fYo=o(" (SEW-D model)"),mYo=l(),CF=a("li"),m_e=a("strong"),gYo=o("unispeech"),hYo=o(" \u2014 "),RX=a("a"),pYo=o("UniSpeechForSequenceClassification"),_Yo=o(" (UniSpeech model)"),uYo=l(),wF=a("li"),g_e=a("strong"),bYo=o("unispeech-sat"),vYo=o(" \u2014 "),PX=a("a"),FYo=o("UniSpeechSatForSequenceClassification"),TYo=o(" (UniSpeechSat model)"),MYo=l(),AF=a("li"),h_e=a("strong"),EYo=o("wav2vec2"),CYo=o(" \u2014 "),BX=a("a"),wYo=o("Wav2Vec2ForSequenceClassification"),AYo=o(" (Wav2Vec2 model)"),yYo=l(),yF=a("li"),p_e=a("strong"),LYo=o("wav2vec2-conformer"),xYo=o(" \u2014 "),IX=a("a"),$Yo=o("Wav2Vec2ConformerForSequenceClassification"),kYo=o(" (Wav2Vec2-Conformer model)"),SYo=l(),LF=a("li"),__e=a("strong"),RYo=o("wavlm"),PYo=o(" \u2014 "),qX=a("a"),BYo=o("WavLMForSequenceClassification"),IYo=o(" (WavLM model)"),qYo=l(),xF=a("p"),NYo=o("The model is set in evaluation mode by default using "),u_e=a("code"),jYo=o("model.eval()"),DYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=a("code"),GYo=o("model.train()"),OYo=l(),F($F.$$.fragment),lNe=l(),gd=a("h2"),kF=a("a"),v_e=a("span"),F(lL.$$.fragment),VYo=l(),F_e=a("span"),XYo=o("AutoModelForAudioFrameClassification"),iNe=l(),Oo=a("div"),F(iL.$$.fragment),zYo=l(),hd=a("p"),WYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NX=a("a"),QYo=o("from_pretrained()"),HYo=o(" class method or the "),jX=a("a"),UYo=o("from_config()"),JYo=o(` class
method.`),YYo=l(),dL=a("p"),KYo=o("This class cannot be instantiated directly using "),T_e=a("code"),ZYo=o("__init__()"),eKo=o(" (throws an error)."),oKo=l(),bt=a("div"),F(cL.$$.fragment),rKo=l(),M_e=a("p"),tKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),aKo=l(),pd=a("p"),nKo=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),sKo=o("not"),lKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),iKo=o("from_pretrained()"),dKo=o(" to load the model weights."),cKo=l(),F(SF.$$.fragment),fKo=l(),fo=a("div"),F(fL.$$.fragment),mKo=l(),C_e=a("p"),gKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hKo=l(),Oa=a("p"),pKo=o("The model class to instantiate is selected based on the "),w_e=a("code"),_Ko=o("model_type"),uKo=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),FKo=o("pretrained_model_name_or_path"),TKo=o(":"),MKo=l(),Kr=a("ul"),RF=a("li"),L_e=a("strong"),EKo=o("data2vec-audio"),CKo=o(" \u2014 "),GX=a("a"),wKo=o("Data2VecAudioForAudioFrameClassification"),AKo=o(" (Data2VecAudio model)"),yKo=l(),PF=a("li"),x_e=a("strong"),LKo=o("unispeech-sat"),xKo=o(" \u2014 "),OX=a("a"),$Ko=o("UniSpeechSatForAudioFrameClassification"),kKo=o(" (UniSpeechSat model)"),SKo=l(),BF=a("li"),$_e=a("strong"),RKo=o("wav2vec2"),PKo=o(" \u2014 "),VX=a("a"),BKo=o("Wav2Vec2ForAudioFrameClassification"),IKo=o(" (Wav2Vec2 model)"),qKo=l(),IF=a("li"),k_e=a("strong"),NKo=o("wav2vec2-conformer"),jKo=o(" \u2014 "),XX=a("a"),DKo=o("Wav2Vec2ConformerForAudioFrameClassification"),GKo=o(" (Wav2Vec2-Conformer model)"),OKo=l(),qF=a("li"),S_e=a("strong"),VKo=o("wavlm"),XKo=o(" \u2014 "),zX=a("a"),zKo=o("WavLMForAudioFrameClassification"),WKo=o(" (WavLM model)"),QKo=l(),NF=a("p"),HKo=o("The model is set in evaluation mode by default using "),R_e=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),YKo=o("model.train()"),KKo=l(),F(jF.$$.fragment),dNe=l(),_d=a("h2"),DF=a("a"),B_e=a("span"),F(mL.$$.fragment),ZKo=l(),I_e=a("span"),eZo=o("AutoModelForCTC"),cNe=l(),Vo=a("div"),F(gL.$$.fragment),oZo=l(),ud=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),WX=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),QX=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),hL=a("p"),iZo=o("This class cannot be instantiated directly using "),q_e=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),vt=a("div"),F(pL.$$.fragment),mZo=l(),N_e=a("p"),gZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),hZo=l(),bd=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),_Zo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),F(GF.$$.fragment),TZo=l(),mo=a("div"),F(_L.$$.fragment),MZo=l(),D_e=a("p"),EZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CZo=l(),Va=a("p"),wZo=o("The model class to instantiate is selected based on the "),G_e=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),Se=a("ul"),OF=a("li"),X_e=a("strong"),RZo=o("data2vec-audio"),PZo=o(" \u2014 "),UX=a("a"),BZo=o("Data2VecAudioForCTC"),IZo=o(" (Data2VecAudio model)"),qZo=l(),VF=a("li"),z_e=a("strong"),NZo=o("hubert"),jZo=o(" \u2014 "),JX=a("a"),DZo=o("HubertForCTC"),GZo=o(" (Hubert model)"),OZo=l(),XF=a("li"),W_e=a("strong"),VZo=o("sew"),XZo=o(" \u2014 "),YX=a("a"),zZo=o("SEWForCTC"),WZo=o(" (SEW model)"),QZo=l(),zF=a("li"),Q_e=a("strong"),HZo=o("sew-d"),UZo=o(" \u2014 "),KX=a("a"),JZo=o("SEWDForCTC"),YZo=o(" (SEW-D model)"),KZo=l(),WF=a("li"),H_e=a("strong"),ZZo=o("unispeech"),eer=o(" \u2014 "),ZX=a("a"),oer=o("UniSpeechForCTC"),rer=o(" (UniSpeech model)"),ter=l(),QF=a("li"),U_e=a("strong"),aer=o("unispeech-sat"),ner=o(" \u2014 "),ez=a("a"),ser=o("UniSpeechSatForCTC"),ler=o(" (UniSpeechSat model)"),ier=l(),HF=a("li"),J_e=a("strong"),der=o("wav2vec2"),cer=o(" \u2014 "),oz=a("a"),fer=o("Wav2Vec2ForCTC"),mer=o(" (Wav2Vec2 model)"),ger=l(),UF=a("li"),Y_e=a("strong"),her=o("wav2vec2-conformer"),per=o(" \u2014 "),rz=a("a"),_er=o("Wav2Vec2ConformerForCTC"),uer=o(" (Wav2Vec2-Conformer model)"),ber=l(),JF=a("li"),K_e=a("strong"),ver=o("wavlm"),Fer=o(" \u2014 "),tz=a("a"),Ter=o("WavLMForCTC"),Mer=o(" (WavLM model)"),Eer=l(),YF=a("p"),Cer=o("The model is set in evaluation mode by default using "),Z_e=a("code"),wer=o("model.eval()"),Aer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),yer=o("model.train()"),Ler=l(),F(KF.$$.fragment),fNe=l(),vd=a("h2"),ZF=a("a"),oue=a("span"),F(uL.$$.fragment),xer=l(),rue=a("span"),$er=o("AutoModelForSpeechSeq2Seq"),mNe=l(),Xo=a("div"),F(bL.$$.fragment),ker=l(),Fd=a("p"),Ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),az=a("a"),Rer=o("from_pretrained()"),Per=o(" class method or the "),nz=a("a"),Ber=o("from_config()"),Ier=o(` class
method.`),qer=l(),vL=a("p"),Ner=o("This class cannot be instantiated directly using "),tue=a("code"),jer=o("__init__()"),Der=o(" (throws an error)."),Ger=l(),Ft=a("div"),F(FL.$$.fragment),Oer=l(),aue=a("p"),Ver=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xer=l(),Td=a("p"),zer=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),Wer=o("not"),Qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),Her=o("from_pretrained()"),Uer=o(" to load the model weights."),Jer=l(),F(eT.$$.fragment),Yer=l(),go=a("div"),F(TL.$$.fragment),Ker=l(),sue=a("p"),Zer=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eor=l(),Xa=a("p"),oor=o("The model class to instantiate is selected based on the "),lue=a("code"),ror=o("model_type"),tor=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(":"),ior=l(),ML=a("ul"),oT=a("li"),cue=a("strong"),dor=o("speech-encoder-decoder"),cor=o(" \u2014 "),lz=a("a"),mor=o("SpeechEncoderDecoderModel"),gor=o(" (Speech Encoder decoder model)"),hor=l(),rT=a("li"),fue=a("strong"),por=o("speech_to_text"),_or=o(" \u2014 "),iz=a("a"),uor=o("Speech2TextForConditionalGeneration"),bor=o(" (Speech2Text model)"),vor=l(),tT=a("p"),For=o("The model is set in evaluation mode by default using "),mue=a("code"),Tor=o("model.eval()"),Mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),Eor=o("model.train()"),Cor=l(),F(aT.$$.fragment),gNe=l(),Md=a("h2"),nT=a("a"),hue=a("span"),F(EL.$$.fragment),wor=l(),pue=a("span"),Aor=o("AutoModelForAudioXVector"),hNe=l(),zo=a("div"),F(CL.$$.fragment),yor=l(),Ed=a("p"),Lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dz=a("a"),xor=o("from_pretrained()"),$or=o(" class method or the "),cz=a("a"),kor=o("from_config()"),Sor=o(` class
method.`),Ror=l(),wL=a("p"),Por=o("This class cannot be instantiated directly using "),_ue=a("code"),Bor=o("__init__()"),Ior=o(" (throws an error)."),qor=l(),Tt=a("div"),F(AL.$$.fragment),Nor=l(),uue=a("p"),jor=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dor=l(),Cd=a("p"),Gor=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),Oor=o("not"),Vor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),Xor=o("from_pretrained()"),zor=o(" to load the model weights."),Wor=l(),F(sT.$$.fragment),Qor=l(),ho=a("div"),F(yL.$$.fragment),Hor=l(),vue=a("p"),Uor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jor=l(),za=a("p"),Yor=o("The model class to instantiate is selected based on the "),Fue=a("code"),Kor=o("model_type"),Zor=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),err=o("pretrained_model_name_or_path"),orr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),rrr=o("pretrained_model_name_or_path"),trr=o(":"),arr=l(),Zr=a("ul"),lT=a("li"),Eue=a("strong"),nrr=o("data2vec-audio"),srr=o(" \u2014 "),mz=a("a"),lrr=o("Data2VecAudioForXVector"),irr=o(" (Data2VecAudio model)"),drr=l(),iT=a("li"),Cue=a("strong"),crr=o("unispeech-sat"),frr=o(" \u2014 "),gz=a("a"),mrr=o("UniSpeechSatForXVector"),grr=o(" (UniSpeechSat model)"),hrr=l(),dT=a("li"),wue=a("strong"),prr=o("wav2vec2"),_rr=o(" \u2014 "),hz=a("a"),urr=o("Wav2Vec2ForXVector"),brr=o(" (Wav2Vec2 model)"),vrr=l(),cT=a("li"),Aue=a("strong"),Frr=o("wav2vec2-conformer"),Trr=o(" \u2014 "),pz=a("a"),Mrr=o("Wav2Vec2ConformerForXVector"),Err=o(" (Wav2Vec2-Conformer model)"),Crr=l(),fT=a("li"),yue=a("strong"),wrr=o("wavlm"),Arr=o(" \u2014 "),_z=a("a"),yrr=o("WavLMForXVector"),Lrr=o(" (WavLM model)"),xrr=l(),mT=a("p"),$rr=o("The model is set in evaluation mode by default using "),Lue=a("code"),krr=o("model.eval()"),Srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),Rrr=o("model.train()"),Prr=l(),F(gT.$$.fragment),pNe=l(),wd=a("h2"),hT=a("a"),$ue=a("span"),F(LL.$$.fragment),Brr=l(),kue=a("span"),Irr=o("AutoModelForMaskedImageModeling"),_Ne=l(),Wo=a("div"),F(xL.$$.fragment),qrr=l(),Ad=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uz=a("a"),jrr=o("from_pretrained()"),Drr=o(" class method or the "),bz=a("a"),Grr=o("from_config()"),Orr=o(` class
method.`),Vrr=l(),$L=a("p"),Xrr=o("This class cannot be instantiated directly using "),Sue=a("code"),zrr=o("__init__()"),Wrr=o(" (throws an error)."),Qrr=l(),Mt=a("div"),F(kL.$$.fragment),Hrr=l(),Rue=a("p"),Urr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Jrr=l(),yd=a("p"),Yrr=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),Krr=o("not"),Zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),etr=o("from_pretrained()"),otr=o(" to load the model weights."),rtr=l(),F(pT.$$.fragment),ttr=l(),po=a("div"),F(SL.$$.fragment),atr=l(),Bue=a("p"),ntr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),str=l(),Wa=a("p"),ltr=o("The model class to instantiate is selected based on the "),Iue=a("code"),itr=o("model_type"),dtr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),ctr=o("pretrained_model_name_or_path"),ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),mtr=o("pretrained_model_name_or_path"),gtr=o(":"),htr=l(),Ld=a("ul"),_T=a("li"),jue=a("strong"),ptr=o("deit"),_tr=o(" \u2014 "),Fz=a("a"),utr=o("DeiTForMaskedImageModeling"),btr=o(" (DeiT model)"),vtr=l(),uT=a("li"),Due=a("strong"),Ftr=o("swin"),Ttr=o(" \u2014 "),Tz=a("a"),Mtr=o("SwinForMaskedImageModeling"),Etr=o(" (Swin model)"),Ctr=l(),bT=a("li"),Gue=a("strong"),wtr=o("vit"),Atr=o(" \u2014 "),Mz=a("a"),ytr=o("ViTForMaskedImageModeling"),Ltr=o(" (ViT model)"),xtr=l(),vT=a("p"),$tr=o("The model is set in evaluation mode by default using "),Oue=a("code"),ktr=o("model.eval()"),Str=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),Rtr=o("model.train()"),Ptr=l(),F(FT.$$.fragment),uNe=l(),xd=a("h2"),TT=a("a"),Xue=a("span"),F(RL.$$.fragment),Btr=l(),zue=a("span"),Itr=o("AutoModelForObjectDetection"),bNe=l(),Qo=a("div"),F(PL.$$.fragment),qtr=l(),$d=a("p"),Ntr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Ez=a("a"),jtr=o("from_pretrained()"),Dtr=o(" class method or the "),Cz=a("a"),Gtr=o("from_config()"),Otr=o(` class
method.`),Vtr=l(),BL=a("p"),Xtr=o("This class cannot be instantiated directly using "),Wue=a("code"),ztr=o("__init__()"),Wtr=o(" (throws an error)."),Qtr=l(),Et=a("div"),F(IL.$$.fragment),Htr=l(),Que=a("p"),Utr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Jtr=l(),kd=a("p"),Ytr=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),Ktr=o("not"),Ztr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),ear=o("from_pretrained()"),oar=o(" to load the model weights."),rar=l(),F(MT.$$.fragment),tar=l(),_o=a("div"),F(qL.$$.fragment),aar=l(),Uue=a("p"),nar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sar=l(),Qa=a("p"),lar=o("The model class to instantiate is selected based on the "),Jue=a("code"),iar=o("model_type"),dar=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),car=o("pretrained_model_name_or_path"),far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),mar=o("pretrained_model_name_or_path"),gar=o(":"),har=l(),NL=a("ul"),ET=a("li"),Zue=a("strong"),par=o("detr"),_ar=o(" \u2014 "),Az=a("a"),uar=o("DetrForObjectDetection"),bar=o(" (DETR model)"),Far=l(),CT=a("li"),e1e=a("strong"),Tar=o("yolos"),Mar=o(" \u2014 "),yz=a("a"),Ear=o("YolosForObjectDetection"),Car=o(" (YOLOS model)"),war=l(),wT=a("p"),Aar=o("The model is set in evaluation mode by default using "),o1e=a("code"),yar=o("model.eval()"),Lar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),xar=o("model.train()"),$ar=l(),F(AT.$$.fragment),vNe=l(),Sd=a("h2"),yT=a("a"),t1e=a("span"),F(jL.$$.fragment),kar=l(),a1e=a("span"),Sar=o("AutoModelForImageSegmentation"),FNe=l(),Ho=a("div"),F(DL.$$.fragment),Rar=l(),Rd=a("p"),Par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Lz=a("a"),Bar=o("from_pretrained()"),Iar=o(" class method or the "),xz=a("a"),qar=o("from_config()"),Nar=o(` class
method.`),jar=l(),GL=a("p"),Dar=o("This class cannot be instantiated directly using "),n1e=a("code"),Gar=o("__init__()"),Oar=o(" (throws an error)."),Var=l(),Ct=a("div"),F(OL.$$.fragment),Xar=l(),s1e=a("p"),zar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),War=l(),Pd=a("p"),Qar=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),Har=o("not"),Uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),Jar=o("from_pretrained()"),Yar=o(" to load the model weights."),Kar=l(),F(LT.$$.fragment),Zar=l(),uo=a("div"),F(VL.$$.fragment),enr=l(),i1e=a("p"),onr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rnr=l(),Ha=a("p"),tnr=o("The model class to instantiate is selected based on the "),d1e=a("code"),anr=o("model_type"),nnr=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),snr=o("pretrained_model_name_or_path"),lnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),inr=o("pretrained_model_name_or_path"),dnr=o(":"),cnr=l(),m1e=a("ul"),xT=a("li"),g1e=a("strong"),fnr=o("detr"),mnr=o(" \u2014 "),kz=a("a"),gnr=o("DetrForSegmentation"),hnr=o(" (DETR model)"),pnr=l(),$T=a("p"),_nr=o("The model is set in evaluation mode by default using "),h1e=a("code"),unr=o("model.eval()"),bnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),vnr=o("model.train()"),Fnr=l(),F(kT.$$.fragment),TNe=l(),Bd=a("h2"),ST=a("a"),_1e=a("span"),F(XL.$$.fragment),Tnr=l(),u1e=a("span"),Mnr=o("AutoModelForSemanticSegmentation"),MNe=l(),Uo=a("div"),F(zL.$$.fragment),Enr=l(),Id=a("p"),Cnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Sz=a("a"),wnr=o("from_pretrained()"),Anr=o(" class method or the "),Rz=a("a"),ynr=o("from_config()"),Lnr=o(` class
method.`),xnr=l(),WL=a("p"),$nr=o("This class cannot be instantiated directly using "),b1e=a("code"),knr=o("__init__()"),Snr=o(" (throws an error)."),Rnr=l(),wt=a("div"),F(QL.$$.fragment),Pnr=l(),v1e=a("p"),Bnr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Inr=l(),qd=a("p"),qnr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Nnr=o("not"),jnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" to load the model weights."),Onr=l(),F(RT.$$.fragment),Vnr=l(),bo=a("div"),F(HL.$$.fragment),Xnr=l(),T1e=a("p"),znr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wnr=l(),Ua=a("p"),Qnr=o("The model class to instantiate is selected based on the "),M1e=a("code"),Hnr=o("model_type"),Unr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Knr=o("pretrained_model_name_or_path"),Znr=o(":"),esr=l(),Ja=a("ul"),PT=a("li"),w1e=a("strong"),osr=o("beit"),rsr=o(" \u2014 "),Bz=a("a"),tsr=o("BeitForSemanticSegmentation"),asr=o(" (BEiT model)"),nsr=l(),BT=a("li"),A1e=a("strong"),ssr=o("data2vec-vision"),lsr=o(" \u2014 "),Iz=a("a"),isr=o("Data2VecVisionForSemanticSegmentation"),dsr=o(" (Data2VecVision model)"),csr=l(),IT=a("li"),y1e=a("strong"),fsr=o("dpt"),msr=o(" \u2014 "),qz=a("a"),gsr=o("DPTForSemanticSegmentation"),hsr=o(" (DPT model)"),psr=l(),qT=a("li"),L1e=a("strong"),_sr=o("segformer"),usr=o(" \u2014 "),Nz=a("a"),bsr=o("SegformerForSemanticSegmentation"),vsr=o(" (SegFormer model)"),Fsr=l(),NT=a("p"),Tsr=o("The model is set in evaluation mode by default using "),x1e=a("code"),Msr=o("model.eval()"),Esr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=a("code"),Csr=o("model.train()"),wsr=l(),F(jT.$$.fragment),ENe=l(),Nd=a("h2"),DT=a("a"),k1e=a("span"),F(UL.$$.fragment),Asr=l(),S1e=a("span"),ysr=o("AutoModelForInstanceSegmentation"),CNe=l(),Jo=a("div"),F(JL.$$.fragment),Lsr=l(),jd=a("p"),xsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jz=a("a"),$sr=o("from_pretrained()"),ksr=o(" class method or the "),Dz=a("a"),Ssr=o("from_config()"),Rsr=o(` class
method.`),Psr=l(),YL=a("p"),Bsr=o("This class cannot be instantiated directly using "),R1e=a("code"),Isr=o("__init__()"),qsr=o(" (throws an error)."),Nsr=l(),At=a("div"),F(KL.$$.fragment),jsr=l(),P1e=a("p"),Dsr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Gsr=l(),Dd=a("p"),Osr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),Vsr=o("not"),Xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),zsr=o("from_pretrained()"),Wsr=o(" to load the model weights."),Qsr=l(),F(GT.$$.fragment),Hsr=l(),vo=a("div"),F(ZL.$$.fragment),Usr=l(),I1e=a("p"),Jsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ysr=l(),Ya=a("p"),Ksr=o("The model class to instantiate is selected based on the "),q1e=a("code"),Zsr=o("model_type"),elr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),olr=o("pretrained_model_name_or_path"),rlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),tlr=o("pretrained_model_name_or_path"),alr=o(":"),nlr=l(),D1e=a("ul"),OT=a("li"),G1e=a("strong"),slr=o("maskformer"),llr=o(" \u2014 "),Oz=a("a"),ilr=o("MaskFormerForInstanceSegmentation"),dlr=o(" (MaskFormer model)"),clr=l(),VT=a("p"),flr=o("The model is set in evaluation mode by default using "),O1e=a("code"),mlr=o("model.eval()"),glr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=a("code"),hlr=o("model.train()"),plr=l(),F(XT.$$.fragment),wNe=l(),Gd=a("h2"),zT=a("a"),X1e=a("span"),F(e8.$$.fragment),_lr=l(),z1e=a("span"),ulr=o("TFAutoModel"),ANe=l(),Yo=a("div"),F(o8.$$.fragment),blr=l(),Od=a("p"),vlr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Vz=a("a"),Flr=o("from_pretrained()"),Tlr=o(" class method or the "),Xz=a("a"),Mlr=o("from_config()"),Elr=o(` class
method.`),Clr=l(),r8=a("p"),wlr=o("This class cannot be instantiated directly using "),W1e=a("code"),Alr=o("__init__()"),ylr=o(" (throws an error)."),Llr=l(),yt=a("div"),F(t8.$$.fragment),xlr=l(),Q1e=a("p"),$lr=o("Instantiates one of the base model classes of the library from a configuration."),klr=l(),Vd=a("p"),Slr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),Rlr=o("not"),Plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Blr=o("from_pretrained()"),Ilr=o(" to load the model weights."),qlr=l(),F(WT.$$.fragment),Nlr=l(),wr=a("div"),F(a8.$$.fragment),jlr=l(),U1e=a("p"),Dlr=o("Instantiate one of the base model classes of the library from a pretrained model."),Glr=l(),Ka=a("p"),Olr=o("The model class to instantiate is selected based on the "),J1e=a("code"),Vlr=o("model_type"),Xlr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),zlr=o("pretrained_model_name_or_path"),Wlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),Qlr=o("pretrained_model_name_or_path"),Hlr=o(":"),Ulr=l(),N=a("ul"),QT=a("li"),Z1e=a("strong"),Jlr=o("albert"),Ylr=o(" \u2014 "),Wz=a("a"),Klr=o("TFAlbertModel"),Zlr=o(" (ALBERT model)"),eir=l(),HT=a("li"),e3e=a("strong"),oir=o("bart"),rir=o(" \u2014 "),Qz=a("a"),tir=o("TFBartModel"),air=o(" (BART model)"),nir=l(),UT=a("li"),o3e=a("strong"),sir=o("bert"),lir=o(" \u2014 "),Hz=a("a"),iir=o("TFBertModel"),dir=o(" (BERT model)"),cir=l(),JT=a("li"),r3e=a("strong"),fir=o("blenderbot"),mir=o(" \u2014 "),Uz=a("a"),gir=o("TFBlenderbotModel"),hir=o(" (Blenderbot model)"),pir=l(),YT=a("li"),t3e=a("strong"),_ir=o("blenderbot-small"),uir=o(" \u2014 "),Jz=a("a"),bir=o("TFBlenderbotSmallModel"),vir=o(" (BlenderbotSmall model)"),Fir=l(),KT=a("li"),a3e=a("strong"),Tir=o("camembert"),Mir=o(" \u2014 "),Yz=a("a"),Eir=o("TFCamembertModel"),Cir=o(" (CamemBERT model)"),wir=l(),ZT=a("li"),n3e=a("strong"),Air=o("clip"),yir=o(" \u2014 "),Kz=a("a"),Lir=o("TFCLIPModel"),xir=o(" (CLIP model)"),$ir=l(),e7=a("li"),s3e=a("strong"),kir=o("convbert"),Sir=o(" \u2014 "),Zz=a("a"),Rir=o("TFConvBertModel"),Pir=o(" (ConvBERT model)"),Bir=l(),o7=a("li"),l3e=a("strong"),Iir=o("convnext"),qir=o(" \u2014 "),eW=a("a"),Nir=o("TFConvNextModel"),jir=o(" (ConvNext model)"),Dir=l(),r7=a("li"),i3e=a("strong"),Gir=o("ctrl"),Oir=o(" \u2014 "),oW=a("a"),Vir=o("TFCTRLModel"),Xir=o(" (CTRL model)"),zir=l(),t7=a("li"),d3e=a("strong"),Wir=o("data2vec-vision"),Qir=o(" \u2014 "),rW=a("a"),Hir=o("TFData2VecVisionModel"),Uir=o(" (Data2VecVision model)"),Jir=l(),a7=a("li"),c3e=a("strong"),Yir=o("deberta"),Kir=o(" \u2014 "),tW=a("a"),Zir=o("TFDebertaModel"),edr=o(" (DeBERTa model)"),odr=l(),n7=a("li"),f3e=a("strong"),rdr=o("deberta-v2"),tdr=o(" \u2014 "),aW=a("a"),adr=o("TFDebertaV2Model"),ndr=o(" (DeBERTa-v2 model)"),sdr=l(),s7=a("li"),m3e=a("strong"),ldr=o("distilbert"),idr=o(" \u2014 "),nW=a("a"),ddr=o("TFDistilBertModel"),cdr=o(" (DistilBERT model)"),fdr=l(),l7=a("li"),g3e=a("strong"),mdr=o("dpr"),gdr=o(" \u2014 "),sW=a("a"),hdr=o("TFDPRQuestionEncoder"),pdr=o(" (DPR model)"),_dr=l(),i7=a("li"),h3e=a("strong"),udr=o("electra"),bdr=o(" \u2014 "),lW=a("a"),vdr=o("TFElectraModel"),Fdr=o(" (ELECTRA model)"),Tdr=l(),d7=a("li"),p3e=a("strong"),Mdr=o("flaubert"),Edr=o(" \u2014 "),iW=a("a"),Cdr=o("TFFlaubertModel"),wdr=o(" (FlauBERT model)"),Adr=l(),Is=a("li"),_3e=a("strong"),ydr=o("funnel"),Ldr=o(" \u2014 "),dW=a("a"),xdr=o("TFFunnelModel"),$dr=o(" or "),cW=a("a"),kdr=o("TFFunnelBaseModel"),Sdr=o(" (Funnel Transformer model)"),Rdr=l(),c7=a("li"),u3e=a("strong"),Pdr=o("gpt2"),Bdr=o(" \u2014 "),fW=a("a"),Idr=o("TFGPT2Model"),qdr=o(" (OpenAI GPT-2 model)"),Ndr=l(),f7=a("li"),b3e=a("strong"),jdr=o("gptj"),Ddr=o(" \u2014 "),mW=a("a"),Gdr=o("TFGPTJModel"),Odr=o(" (GPT-J model)"),Vdr=l(),m7=a("li"),v3e=a("strong"),Xdr=o("hubert"),zdr=o(" \u2014 "),gW=a("a"),Wdr=o("TFHubertModel"),Qdr=o(" (Hubert model)"),Hdr=l(),g7=a("li"),F3e=a("strong"),Udr=o("layoutlm"),Jdr=o(" \u2014 "),hW=a("a"),Ydr=o("TFLayoutLMModel"),Kdr=o(" (LayoutLM model)"),Zdr=l(),h7=a("li"),T3e=a("strong"),ecr=o("led"),ocr=o(" \u2014 "),pW=a("a"),rcr=o("TFLEDModel"),tcr=o(" (LED model)"),acr=l(),p7=a("li"),M3e=a("strong"),ncr=o("longformer"),scr=o(" \u2014 "),_W=a("a"),lcr=o("TFLongformerModel"),icr=o(" (Longformer model)"),dcr=l(),_7=a("li"),E3e=a("strong"),ccr=o("lxmert"),fcr=o(" \u2014 "),uW=a("a"),mcr=o("TFLxmertModel"),gcr=o(" (LXMERT model)"),hcr=l(),u7=a("li"),C3e=a("strong"),pcr=o("marian"),_cr=o(" \u2014 "),bW=a("a"),ucr=o("TFMarianModel"),bcr=o(" (Marian model)"),vcr=l(),b7=a("li"),w3e=a("strong"),Fcr=o("mbart"),Tcr=o(" \u2014 "),vW=a("a"),Mcr=o("TFMBartModel"),Ecr=o(" (mBART model)"),Ccr=l(),v7=a("li"),A3e=a("strong"),wcr=o("mobilebert"),Acr=o(" \u2014 "),FW=a("a"),ycr=o("TFMobileBertModel"),Lcr=o(" (MobileBERT model)"),xcr=l(),F7=a("li"),y3e=a("strong"),$cr=o("mpnet"),kcr=o(" \u2014 "),TW=a("a"),Scr=o("TFMPNetModel"),Rcr=o(" (MPNet model)"),Pcr=l(),T7=a("li"),L3e=a("strong"),Bcr=o("mt5"),Icr=o(" \u2014 "),MW=a("a"),qcr=o("TFMT5Model"),Ncr=o(" (mT5 model)"),jcr=l(),M7=a("li"),x3e=a("strong"),Dcr=o("openai-gpt"),Gcr=o(" \u2014 "),EW=a("a"),Ocr=o("TFOpenAIGPTModel"),Vcr=o(" (OpenAI GPT model)"),Xcr=l(),E7=a("li"),$3e=a("strong"),zcr=o("pegasus"),Wcr=o(" \u2014 "),CW=a("a"),Qcr=o("TFPegasusModel"),Hcr=o(" (Pegasus model)"),Ucr=l(),C7=a("li"),k3e=a("strong"),Jcr=o("rembert"),Ycr=o(" \u2014 "),wW=a("a"),Kcr=o("TFRemBertModel"),Zcr=o(" (RemBERT model)"),efr=l(),w7=a("li"),S3e=a("strong"),ofr=o("roberta"),rfr=o(" \u2014 "),AW=a("a"),tfr=o("TFRobertaModel"),afr=o(" (RoBERTa model)"),nfr=l(),A7=a("li"),R3e=a("strong"),sfr=o("roformer"),lfr=o(" \u2014 "),yW=a("a"),ifr=o("TFRoFormerModel"),dfr=o(" (RoFormer model)"),cfr=l(),y7=a("li"),P3e=a("strong"),ffr=o("speech_to_text"),mfr=o(" \u2014 "),LW=a("a"),gfr=o("TFSpeech2TextModel"),hfr=o(" (Speech2Text model)"),pfr=l(),L7=a("li"),B3e=a("strong"),_fr=o("swin"),ufr=o(" \u2014 "),xW=a("a"),bfr=o("TFSwinModel"),vfr=o(" (Swin model)"),Ffr=l(),x7=a("li"),I3e=a("strong"),Tfr=o("t5"),Mfr=o(" \u2014 "),$W=a("a"),Efr=o("TFT5Model"),Cfr=o(" (T5 model)"),wfr=l(),$7=a("li"),q3e=a("strong"),Afr=o("tapas"),yfr=o(" \u2014 "),kW=a("a"),Lfr=o("TFTapasModel"),xfr=o(" (TAPAS model)"),$fr=l(),k7=a("li"),N3e=a("strong"),kfr=o("transfo-xl"),Sfr=o(" \u2014 "),SW=a("a"),Rfr=o("TFTransfoXLModel"),Pfr=o(" (Transformer-XL model)"),Bfr=l(),S7=a("li"),j3e=a("strong"),Ifr=o("vit"),qfr=o(" \u2014 "),RW=a("a"),Nfr=o("TFViTModel"),jfr=o(" (ViT model)"),Dfr=l(),R7=a("li"),D3e=a("strong"),Gfr=o("vit_mae"),Ofr=o(" \u2014 "),PW=a("a"),Vfr=o("TFViTMAEModel"),Xfr=o(" (ViTMAE model)"),zfr=l(),P7=a("li"),G3e=a("strong"),Wfr=o("wav2vec2"),Qfr=o(" \u2014 "),BW=a("a"),Hfr=o("TFWav2Vec2Model"),Ufr=o(" (Wav2Vec2 model)"),Jfr=l(),B7=a("li"),O3e=a("strong"),Yfr=o("xlm"),Kfr=o(" \u2014 "),IW=a("a"),Zfr=o("TFXLMModel"),emr=o(" (XLM model)"),omr=l(),I7=a("li"),V3e=a("strong"),rmr=o("xlm-roberta"),tmr=o(" \u2014 "),qW=a("a"),amr=o("TFXLMRobertaModel"),nmr=o(" (XLM-RoBERTa model)"),smr=l(),q7=a("li"),X3e=a("strong"),lmr=o("xlnet"),imr=o(" \u2014 "),NW=a("a"),dmr=o("TFXLNetModel"),cmr=o(" (XLNet model)"),fmr=l(),F(N7.$$.fragment),yNe=l(),Xd=a("h2"),j7=a("a"),z3e=a("span"),F(n8.$$.fragment),mmr=l(),W3e=a("span"),gmr=o("TFAutoModelForPreTraining"),LNe=l(),Ko=a("div"),F(s8.$$.fragment),hmr=l(),zd=a("p"),pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jW=a("a"),_mr=o("from_pretrained()"),umr=o(" class method or the "),DW=a("a"),bmr=o("from_config()"),vmr=o(` class
method.`),Fmr=l(),l8=a("p"),Tmr=o("This class cannot be instantiated directly using "),Q3e=a("code"),Mmr=o("__init__()"),Emr=o(" (throws an error)."),Cmr=l(),Lt=a("div"),F(i8.$$.fragment),wmr=l(),H3e=a("p"),Amr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ymr=l(),Wd=a("p"),Lmr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),xmr=o("not"),$mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),kmr=o("from_pretrained()"),Smr=o(" to load the model weights."),Rmr=l(),F(D7.$$.fragment),Pmr=l(),Ar=a("div"),F(d8.$$.fragment),Bmr=l(),J3e=a("p"),Imr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qmr=l(),Za=a("p"),Nmr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),jmr=o("model_type"),Dmr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(":"),zmr=l(),se=a("ul"),G7=a("li"),ebe=a("strong"),Wmr=o("albert"),Qmr=o(" \u2014 "),OW=a("a"),Hmr=o("TFAlbertForPreTraining"),Umr=o(" (ALBERT model)"),Jmr=l(),O7=a("li"),obe=a("strong"),Ymr=o("bart"),Kmr=o(" \u2014 "),VW=a("a"),Zmr=o("TFBartForConditionalGeneration"),egr=o(" (BART model)"),ogr=l(),V7=a("li"),rbe=a("strong"),rgr=o("bert"),tgr=o(" \u2014 "),XW=a("a"),agr=o("TFBertForPreTraining"),ngr=o(" (BERT model)"),sgr=l(),X7=a("li"),tbe=a("strong"),lgr=o("camembert"),igr=o(" \u2014 "),zW=a("a"),dgr=o("TFCamembertForMaskedLM"),cgr=o(" (CamemBERT model)"),fgr=l(),z7=a("li"),abe=a("strong"),mgr=o("ctrl"),ggr=o(" \u2014 "),WW=a("a"),hgr=o("TFCTRLLMHeadModel"),pgr=o(" (CTRL model)"),_gr=l(),W7=a("li"),nbe=a("strong"),ugr=o("distilbert"),bgr=o(" \u2014 "),QW=a("a"),vgr=o("TFDistilBertForMaskedLM"),Fgr=o(" (DistilBERT model)"),Tgr=l(),Q7=a("li"),sbe=a("strong"),Mgr=o("electra"),Egr=o(" \u2014 "),HW=a("a"),Cgr=o("TFElectraForPreTraining"),wgr=o(" (ELECTRA model)"),Agr=l(),H7=a("li"),lbe=a("strong"),ygr=o("flaubert"),Lgr=o(" \u2014 "),UW=a("a"),xgr=o("TFFlaubertWithLMHeadModel"),$gr=o(" (FlauBERT model)"),kgr=l(),U7=a("li"),ibe=a("strong"),Sgr=o("funnel"),Rgr=o(" \u2014 "),JW=a("a"),Pgr=o("TFFunnelForPreTraining"),Bgr=o(" (Funnel Transformer model)"),Igr=l(),J7=a("li"),dbe=a("strong"),qgr=o("gpt2"),Ngr=o(" \u2014 "),YW=a("a"),jgr=o("TFGPT2LMHeadModel"),Dgr=o(" (OpenAI GPT-2 model)"),Ggr=l(),Y7=a("li"),cbe=a("strong"),Ogr=o("layoutlm"),Vgr=o(" \u2014 "),KW=a("a"),Xgr=o("TFLayoutLMForMaskedLM"),zgr=o(" (LayoutLM model)"),Wgr=l(),K7=a("li"),fbe=a("strong"),Qgr=o("lxmert"),Hgr=o(" \u2014 "),ZW=a("a"),Ugr=o("TFLxmertForPreTraining"),Jgr=o(" (LXMERT model)"),Ygr=l(),Z7=a("li"),mbe=a("strong"),Kgr=o("mobilebert"),Zgr=o(" \u2014 "),eQ=a("a"),ehr=o("TFMobileBertForPreTraining"),ohr=o(" (MobileBERT model)"),rhr=l(),eM=a("li"),gbe=a("strong"),thr=o("mpnet"),ahr=o(" \u2014 "),oQ=a("a"),nhr=o("TFMPNetForMaskedLM"),shr=o(" (MPNet model)"),lhr=l(),oM=a("li"),hbe=a("strong"),ihr=o("openai-gpt"),dhr=o(" \u2014 "),rQ=a("a"),chr=o("TFOpenAIGPTLMHeadModel"),fhr=o(" (OpenAI GPT model)"),mhr=l(),rM=a("li"),pbe=a("strong"),ghr=o("roberta"),hhr=o(" \u2014 "),tQ=a("a"),phr=o("TFRobertaForMaskedLM"),_hr=o(" (RoBERTa model)"),uhr=l(),tM=a("li"),_be=a("strong"),bhr=o("t5"),vhr=o(" \u2014 "),aQ=a("a"),Fhr=o("TFT5ForConditionalGeneration"),Thr=o(" (T5 model)"),Mhr=l(),aM=a("li"),ube=a("strong"),Ehr=o("tapas"),Chr=o(" \u2014 "),nQ=a("a"),whr=o("TFTapasForMaskedLM"),Ahr=o(" (TAPAS model)"),yhr=l(),nM=a("li"),bbe=a("strong"),Lhr=o("transfo-xl"),xhr=o(" \u2014 "),sQ=a("a"),$hr=o("TFTransfoXLLMHeadModel"),khr=o(" (Transformer-XL model)"),Shr=l(),sM=a("li"),vbe=a("strong"),Rhr=o("vit_mae"),Phr=o(" \u2014 "),lQ=a("a"),Bhr=o("TFViTMAEForPreTraining"),Ihr=o(" (ViTMAE model)"),qhr=l(),lM=a("li"),Fbe=a("strong"),Nhr=o("xlm"),jhr=o(" \u2014 "),iQ=a("a"),Dhr=o("TFXLMWithLMHeadModel"),Ghr=o(" (XLM model)"),Ohr=l(),iM=a("li"),Tbe=a("strong"),Vhr=o("xlm-roberta"),Xhr=o(" \u2014 "),dQ=a("a"),zhr=o("TFXLMRobertaForMaskedLM"),Whr=o(" (XLM-RoBERTa model)"),Qhr=l(),dM=a("li"),Mbe=a("strong"),Hhr=o("xlnet"),Uhr=o(" \u2014 "),cQ=a("a"),Jhr=o("TFXLNetLMHeadModel"),Yhr=o(" (XLNet model)"),Khr=l(),F(cM.$$.fragment),xNe=l(),Qd=a("h2"),fM=a("a"),Ebe=a("span"),F(c8.$$.fragment),Zhr=l(),Cbe=a("span"),epr=o("TFAutoModelForCausalLM"),$Ne=l(),Zo=a("div"),F(f8.$$.fragment),opr=l(),Hd=a("p"),rpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fQ=a("a"),tpr=o("from_pretrained()"),apr=o(" class method or the "),mQ=a("a"),npr=o("from_config()"),spr=o(` class
method.`),lpr=l(),m8=a("p"),ipr=o("This class cannot be instantiated directly using "),wbe=a("code"),dpr=o("__init__()"),cpr=o(" (throws an error)."),fpr=l(),xt=a("div"),F(g8.$$.fragment),mpr=l(),Abe=a("p"),gpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hpr=l(),Ud=a("p"),ppr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),_pr=o("not"),upr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),bpr=o("from_pretrained()"),vpr=o(" to load the model weights."),Fpr=l(),F(mM.$$.fragment),Tpr=l(),yr=a("div"),F(h8.$$.fragment),Mpr=l(),Lbe=a("p"),Epr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cpr=l(),en=a("p"),wpr=o("The model class to instantiate is selected based on the "),xbe=a("code"),Apr=o("model_type"),ypr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),Lpr=o("pretrained_model_name_or_path"),xpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),$pr=o("pretrained_model_name_or_path"),kpr=o(":"),Spr=l(),Me=a("ul"),gM=a("li"),Sbe=a("strong"),Rpr=o("bert"),Ppr=o(" \u2014 "),hQ=a("a"),Bpr=o("TFBertLMHeadModel"),Ipr=o(" (BERT model)"),qpr=l(),hM=a("li"),Rbe=a("strong"),Npr=o("camembert"),jpr=o(" \u2014 "),pQ=a("a"),Dpr=o("TFCamembertForCausalLM"),Gpr=o(" (CamemBERT model)"),Opr=l(),pM=a("li"),Pbe=a("strong"),Vpr=o("ctrl"),Xpr=o(" \u2014 "),_Q=a("a"),zpr=o("TFCTRLLMHeadModel"),Wpr=o(" (CTRL model)"),Qpr=l(),_M=a("li"),Bbe=a("strong"),Hpr=o("gpt2"),Upr=o(" \u2014 "),uQ=a("a"),Jpr=o("TFGPT2LMHeadModel"),Ypr=o(" (OpenAI GPT-2 model)"),Kpr=l(),uM=a("li"),Ibe=a("strong"),Zpr=o("gptj"),e_r=o(" \u2014 "),bQ=a("a"),o_r=o("TFGPTJForCausalLM"),r_r=o(" (GPT-J model)"),t_r=l(),bM=a("li"),qbe=a("strong"),a_r=o("openai-gpt"),n_r=o(" \u2014 "),vQ=a("a"),s_r=o("TFOpenAIGPTLMHeadModel"),l_r=o(" (OpenAI GPT model)"),i_r=l(),vM=a("li"),Nbe=a("strong"),d_r=o("rembert"),c_r=o(" \u2014 "),FQ=a("a"),f_r=o("TFRemBertForCausalLM"),m_r=o(" (RemBERT model)"),g_r=l(),FM=a("li"),jbe=a("strong"),h_r=o("roberta"),p_r=o(" \u2014 "),TQ=a("a"),__r=o("TFRobertaForCausalLM"),u_r=o(" (RoBERTa model)"),b_r=l(),TM=a("li"),Dbe=a("strong"),v_r=o("roformer"),F_r=o(" \u2014 "),MQ=a("a"),T_r=o("TFRoFormerForCausalLM"),M_r=o(" (RoFormer model)"),E_r=l(),MM=a("li"),Gbe=a("strong"),C_r=o("transfo-xl"),w_r=o(" \u2014 "),EQ=a("a"),A_r=o("TFTransfoXLLMHeadModel"),y_r=o(" (Transformer-XL model)"),L_r=l(),EM=a("li"),Obe=a("strong"),x_r=o("xlm"),$_r=o(" \u2014 "),CQ=a("a"),k_r=o("TFXLMWithLMHeadModel"),S_r=o(" (XLM model)"),R_r=l(),CM=a("li"),Vbe=a("strong"),P_r=o("xlnet"),B_r=o(" \u2014 "),wQ=a("a"),I_r=o("TFXLNetLMHeadModel"),q_r=o(" (XLNet model)"),N_r=l(),F(wM.$$.fragment),kNe=l(),Jd=a("h2"),AM=a("a"),Xbe=a("span"),F(p8.$$.fragment),j_r=l(),zbe=a("span"),D_r=o("TFAutoModelForImageClassification"),SNe=l(),er=a("div"),F(_8.$$.fragment),G_r=l(),Yd=a("p"),O_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AQ=a("a"),V_r=o("from_pretrained()"),X_r=o(" class method or the "),yQ=a("a"),z_r=o("from_config()"),W_r=o(` class
method.`),Q_r=l(),u8=a("p"),H_r=o("This class cannot be instantiated directly using "),Wbe=a("code"),U_r=o("__init__()"),J_r=o(" (throws an error)."),Y_r=l(),$t=a("div"),F(b8.$$.fragment),K_r=l(),Qbe=a("p"),Z_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eur=l(),Kd=a("p"),our=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),rur=o("not"),tur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),aur=o("from_pretrained()"),nur=o(" to load the model weights."),sur=l(),F(yM.$$.fragment),lur=l(),Lr=a("div"),F(v8.$$.fragment),iur=l(),Ube=a("p"),dur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cur=l(),on=a("p"),fur=o("The model class to instantiate is selected based on the "),Jbe=a("code"),mur=o("model_type"),gur=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),hur=o("pretrained_model_name_or_path"),pur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),_ur=o("pretrained_model_name_or_path"),uur=o(":"),bur=l(),rn=a("ul"),LM=a("li"),Zbe=a("strong"),vur=o("convnext"),Fur=o(" \u2014 "),xQ=a("a"),Tur=o("TFConvNextForImageClassification"),Mur=o(" (ConvNext model)"),Eur=l(),xM=a("li"),e2e=a("strong"),Cur=o("data2vec-vision"),wur=o(" \u2014 "),$Q=a("a"),Aur=o("TFData2VecVisionForImageClassification"),yur=o(" (Data2VecVision model)"),Lur=l(),$M=a("li"),o2e=a("strong"),xur=o("swin"),$ur=o(" \u2014 "),kQ=a("a"),kur=o("TFSwinForImageClassification"),Sur=o(" (Swin model)"),Rur=l(),kM=a("li"),r2e=a("strong"),Pur=o("vit"),Bur=o(" \u2014 "),SQ=a("a"),Iur=o("TFViTForImageClassification"),qur=o(" (ViT model)"),Nur=l(),F(SM.$$.fragment),RNe=l(),Zd=a("h2"),RM=a("a"),t2e=a("span"),F(F8.$$.fragment),jur=l(),a2e=a("span"),Dur=o("TFAutoModelForMaskedLM"),PNe=l(),or=a("div"),F(T8.$$.fragment),Gur=l(),ec=a("p"),Our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RQ=a("a"),Vur=o("from_pretrained()"),Xur=o(" class method or the "),PQ=a("a"),zur=o("from_config()"),Wur=o(` class
method.`),Qur=l(),M8=a("p"),Hur=o("This class cannot be instantiated directly using "),n2e=a("code"),Uur=o("__init__()"),Jur=o(" (throws an error)."),Yur=l(),kt=a("div"),F(E8.$$.fragment),Kur=l(),s2e=a("p"),Zur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e1r=l(),oc=a("p"),o1r=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),r1r=o("not"),t1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),a1r=o("from_pretrained()"),n1r=o(" to load the model weights."),s1r=l(),F(PM.$$.fragment),l1r=l(),xr=a("div"),F(C8.$$.fragment),i1r=l(),i2e=a("p"),d1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c1r=l(),tn=a("p"),f1r=o("The model class to instantiate is selected based on the "),d2e=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),ie=a("ul"),BM=a("li"),m2e=a("strong"),v1r=o("albert"),F1r=o(" \u2014 "),IQ=a("a"),T1r=o("TFAlbertForMaskedLM"),M1r=o(" (ALBERT model)"),E1r=l(),IM=a("li"),g2e=a("strong"),C1r=o("bert"),w1r=o(" \u2014 "),qQ=a("a"),A1r=o("TFBertForMaskedLM"),y1r=o(" (BERT model)"),L1r=l(),qM=a("li"),h2e=a("strong"),x1r=o("camembert"),$1r=o(" \u2014 "),NQ=a("a"),k1r=o("TFCamembertForMaskedLM"),S1r=o(" (CamemBERT model)"),R1r=l(),NM=a("li"),p2e=a("strong"),P1r=o("convbert"),B1r=o(" \u2014 "),jQ=a("a"),I1r=o("TFConvBertForMaskedLM"),q1r=o(" (ConvBERT model)"),N1r=l(),jM=a("li"),_2e=a("strong"),j1r=o("deberta"),D1r=o(" \u2014 "),DQ=a("a"),G1r=o("TFDebertaForMaskedLM"),O1r=o(" (DeBERTa model)"),V1r=l(),DM=a("li"),u2e=a("strong"),X1r=o("deberta-v2"),z1r=o(" \u2014 "),GQ=a("a"),W1r=o("TFDebertaV2ForMaskedLM"),Q1r=o(" (DeBERTa-v2 model)"),H1r=l(),GM=a("li"),b2e=a("strong"),U1r=o("distilbert"),J1r=o(" \u2014 "),OQ=a("a"),Y1r=o("TFDistilBertForMaskedLM"),K1r=o(" (DistilBERT model)"),Z1r=l(),OM=a("li"),v2e=a("strong"),e3r=o("electra"),o3r=o(" \u2014 "),VQ=a("a"),r3r=o("TFElectraForMaskedLM"),t3r=o(" (ELECTRA model)"),a3r=l(),VM=a("li"),F2e=a("strong"),n3r=o("flaubert"),s3r=o(" \u2014 "),XQ=a("a"),l3r=o("TFFlaubertWithLMHeadModel"),i3r=o(" (FlauBERT model)"),d3r=l(),XM=a("li"),T2e=a("strong"),c3r=o("funnel"),f3r=o(" \u2014 "),zQ=a("a"),m3r=o("TFFunnelForMaskedLM"),g3r=o(" (Funnel Transformer model)"),h3r=l(),zM=a("li"),M2e=a("strong"),p3r=o("layoutlm"),_3r=o(" \u2014 "),WQ=a("a"),u3r=o("TFLayoutLMForMaskedLM"),b3r=o(" (LayoutLM model)"),v3r=l(),WM=a("li"),E2e=a("strong"),F3r=o("longformer"),T3r=o(" \u2014 "),QQ=a("a"),M3r=o("TFLongformerForMaskedLM"),E3r=o(" (Longformer model)"),C3r=l(),QM=a("li"),C2e=a("strong"),w3r=o("mobilebert"),A3r=o(" \u2014 "),HQ=a("a"),y3r=o("TFMobileBertForMaskedLM"),L3r=o(" (MobileBERT model)"),x3r=l(),HM=a("li"),w2e=a("strong"),$3r=o("mpnet"),k3r=o(" \u2014 "),UQ=a("a"),S3r=o("TFMPNetForMaskedLM"),R3r=o(" (MPNet model)"),P3r=l(),UM=a("li"),A2e=a("strong"),B3r=o("rembert"),I3r=o(" \u2014 "),JQ=a("a"),q3r=o("TFRemBertForMaskedLM"),N3r=o(" (RemBERT model)"),j3r=l(),JM=a("li"),y2e=a("strong"),D3r=o("roberta"),G3r=o(" \u2014 "),YQ=a("a"),O3r=o("TFRobertaForMaskedLM"),V3r=o(" (RoBERTa model)"),X3r=l(),YM=a("li"),L2e=a("strong"),z3r=o("roformer"),W3r=o(" \u2014 "),KQ=a("a"),Q3r=o("TFRoFormerForMaskedLM"),H3r=o(" (RoFormer model)"),U3r=l(),KM=a("li"),x2e=a("strong"),J3r=o("tapas"),Y3r=o(" \u2014 "),ZQ=a("a"),K3r=o("TFTapasForMaskedLM"),Z3r=o(" (TAPAS model)"),ebr=l(),ZM=a("li"),$2e=a("strong"),obr=o("xlm"),rbr=o(" \u2014 "),eH=a("a"),tbr=o("TFXLMWithLMHeadModel"),abr=o(" (XLM model)"),nbr=l(),e4=a("li"),k2e=a("strong"),sbr=o("xlm-roberta"),lbr=o(" \u2014 "),oH=a("a"),ibr=o("TFXLMRobertaForMaskedLM"),dbr=o(" (XLM-RoBERTa model)"),cbr=l(),F(o4.$$.fragment),BNe=l(),rc=a("h2"),r4=a("a"),S2e=a("span"),F(w8.$$.fragment),fbr=l(),R2e=a("span"),mbr=o("TFAutoModelForSeq2SeqLM"),INe=l(),rr=a("div"),F(A8.$$.fragment),gbr=l(),tc=a("p"),hbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rH=a("a"),pbr=o("from_pretrained()"),_br=o(" class method or the "),tH=a("a"),ubr=o("from_config()"),bbr=o(` class
method.`),vbr=l(),y8=a("p"),Fbr=o("This class cannot be instantiated directly using "),P2e=a("code"),Tbr=o("__init__()"),Mbr=o(" (throws an error)."),Ebr=l(),St=a("div"),F(L8.$$.fragment),Cbr=l(),B2e=a("p"),wbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Abr=l(),ac=a("p"),ybr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),Lbr=o("not"),xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),$br=o("from_pretrained()"),kbr=o(" to load the model weights."),Sbr=l(),F(t4.$$.fragment),Rbr=l(),$r=a("div"),F(x8.$$.fragment),Pbr=l(),q2e=a("p"),Bbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ibr=l(),an=a("p"),qbr=o("The model class to instantiate is selected based on the "),N2e=a("code"),Nbr=o("model_type"),jbr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),Dbr=o("pretrained_model_name_or_path"),Gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(":"),Xbr=l(),ye=a("ul"),a4=a("li"),G2e=a("strong"),zbr=o("bart"),Wbr=o(" \u2014 "),nH=a("a"),Qbr=o("TFBartForConditionalGeneration"),Hbr=o(" (BART model)"),Ubr=l(),n4=a("li"),O2e=a("strong"),Jbr=o("blenderbot"),Ybr=o(" \u2014 "),sH=a("a"),Kbr=o("TFBlenderbotForConditionalGeneration"),Zbr=o(" (Blenderbot model)"),e2r=l(),s4=a("li"),V2e=a("strong"),o2r=o("blenderbot-small"),r2r=o(" \u2014 "),lH=a("a"),t2r=o("TFBlenderbotSmallForConditionalGeneration"),a2r=o(" (BlenderbotSmall model)"),n2r=l(),l4=a("li"),X2e=a("strong"),s2r=o("encoder-decoder"),l2r=o(" \u2014 "),iH=a("a"),i2r=o("TFEncoderDecoderModel"),d2r=o(" (Encoder decoder model)"),c2r=l(),i4=a("li"),z2e=a("strong"),f2r=o("led"),m2r=o(" \u2014 "),dH=a("a"),g2r=o("TFLEDForConditionalGeneration"),h2r=o(" (LED model)"),p2r=l(),d4=a("li"),W2e=a("strong"),_2r=o("marian"),u2r=o(" \u2014 "),cH=a("a"),b2r=o("TFMarianMTModel"),v2r=o(" (Marian model)"),F2r=l(),c4=a("li"),Q2e=a("strong"),T2r=o("mbart"),M2r=o(" \u2014 "),fH=a("a"),E2r=o("TFMBartForConditionalGeneration"),C2r=o(" (mBART model)"),w2r=l(),f4=a("li"),H2e=a("strong"),A2r=o("mt5"),y2r=o(" \u2014 "),mH=a("a"),L2r=o("TFMT5ForConditionalGeneration"),x2r=o(" (mT5 model)"),$2r=l(),m4=a("li"),U2e=a("strong"),k2r=o("pegasus"),S2r=o(" \u2014 "),gH=a("a"),R2r=o("TFPegasusForConditionalGeneration"),P2r=o(" (Pegasus model)"),B2r=l(),g4=a("li"),J2e=a("strong"),I2r=o("t5"),q2r=o(" \u2014 "),hH=a("a"),N2r=o("TFT5ForConditionalGeneration"),j2r=o(" (T5 model)"),D2r=l(),F(h4.$$.fragment),qNe=l(),nc=a("h2"),p4=a("a"),Y2e=a("span"),F($8.$$.fragment),G2r=l(),K2e=a("span"),O2r=o("TFAutoModelForSequenceClassification"),NNe=l(),tr=a("div"),F(k8.$$.fragment),V2r=l(),sc=a("p"),X2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pH=a("a"),z2r=o("from_pretrained()"),W2r=o(" class method or the "),_H=a("a"),Q2r=o("from_config()"),H2r=o(` class
method.`),U2r=l(),S8=a("p"),J2r=o("This class cannot be instantiated directly using "),Z2e=a("code"),Y2r=o("__init__()"),K2r=o(" (throws an error)."),Z2r=l(),Rt=a("div"),F(R8.$$.fragment),evr=l(),eve=a("p"),ovr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rvr=l(),lc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),svr=o("from_pretrained()"),lvr=o(" to load the model weights."),ivr=l(),F(_4.$$.fragment),dvr=l(),kr=a("div"),F(P8.$$.fragment),cvr=l(),rve=a("p"),fvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mvr=l(),nn=a("p"),gvr=o("The model class to instantiate is selected based on the "),tve=a("code"),hvr=o("model_type"),pvr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),_vr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(":"),Fvr=l(),oe=a("ul"),u4=a("li"),sve=a("strong"),Tvr=o("albert"),Mvr=o(" \u2014 "),bH=a("a"),Evr=o("TFAlbertForSequenceClassification"),Cvr=o(" (ALBERT model)"),wvr=l(),b4=a("li"),lve=a("strong"),Avr=o("bert"),yvr=o(" \u2014 "),vH=a("a"),Lvr=o("TFBertForSequenceClassification"),xvr=o(" (BERT model)"),$vr=l(),v4=a("li"),ive=a("strong"),kvr=o("camembert"),Svr=o(" \u2014 "),FH=a("a"),Rvr=o("TFCamembertForSequenceClassification"),Pvr=o(" (CamemBERT model)"),Bvr=l(),F4=a("li"),dve=a("strong"),Ivr=o("convbert"),qvr=o(" \u2014 "),TH=a("a"),Nvr=o("TFConvBertForSequenceClassification"),jvr=o(" (ConvBERT model)"),Dvr=l(),T4=a("li"),cve=a("strong"),Gvr=o("ctrl"),Ovr=o(" \u2014 "),MH=a("a"),Vvr=o("TFCTRLForSequenceClassification"),Xvr=o(" (CTRL model)"),zvr=l(),M4=a("li"),fve=a("strong"),Wvr=o("deberta"),Qvr=o(" \u2014 "),EH=a("a"),Hvr=o("TFDebertaForSequenceClassification"),Uvr=o(" (DeBERTa model)"),Jvr=l(),E4=a("li"),mve=a("strong"),Yvr=o("deberta-v2"),Kvr=o(" \u2014 "),CH=a("a"),Zvr=o("TFDebertaV2ForSequenceClassification"),eFr=o(" (DeBERTa-v2 model)"),oFr=l(),C4=a("li"),gve=a("strong"),rFr=o("distilbert"),tFr=o(" \u2014 "),wH=a("a"),aFr=o("TFDistilBertForSequenceClassification"),nFr=o(" (DistilBERT model)"),sFr=l(),w4=a("li"),hve=a("strong"),lFr=o("electra"),iFr=o(" \u2014 "),AH=a("a"),dFr=o("TFElectraForSequenceClassification"),cFr=o(" (ELECTRA model)"),fFr=l(),A4=a("li"),pve=a("strong"),mFr=o("flaubert"),gFr=o(" \u2014 "),yH=a("a"),hFr=o("TFFlaubertForSequenceClassification"),pFr=o(" (FlauBERT model)"),_Fr=l(),y4=a("li"),_ve=a("strong"),uFr=o("funnel"),bFr=o(" \u2014 "),LH=a("a"),vFr=o("TFFunnelForSequenceClassification"),FFr=o(" (Funnel Transformer model)"),TFr=l(),L4=a("li"),uve=a("strong"),MFr=o("gpt2"),EFr=o(" \u2014 "),xH=a("a"),CFr=o("TFGPT2ForSequenceClassification"),wFr=o(" (OpenAI GPT-2 model)"),AFr=l(),x4=a("li"),bve=a("strong"),yFr=o("gptj"),LFr=o(" \u2014 "),$H=a("a"),xFr=o("TFGPTJForSequenceClassification"),$Fr=o(" (GPT-J model)"),kFr=l(),$4=a("li"),vve=a("strong"),SFr=o("layoutlm"),RFr=o(" \u2014 "),kH=a("a"),PFr=o("TFLayoutLMForSequenceClassification"),BFr=o(" (LayoutLM model)"),IFr=l(),k4=a("li"),Fve=a("strong"),qFr=o("longformer"),NFr=o(" \u2014 "),SH=a("a"),jFr=o("TFLongformerForSequenceClassification"),DFr=o(" (Longformer model)"),GFr=l(),S4=a("li"),Tve=a("strong"),OFr=o("mobilebert"),VFr=o(" \u2014 "),RH=a("a"),XFr=o("TFMobileBertForSequenceClassification"),zFr=o(" (MobileBERT model)"),WFr=l(),R4=a("li"),Mve=a("strong"),QFr=o("mpnet"),HFr=o(" \u2014 "),PH=a("a"),UFr=o("TFMPNetForSequenceClassification"),JFr=o(" (MPNet model)"),YFr=l(),P4=a("li"),Eve=a("strong"),KFr=o("openai-gpt"),ZFr=o(" \u2014 "),BH=a("a"),eTr=o("TFOpenAIGPTForSequenceClassification"),oTr=o(" (OpenAI GPT model)"),rTr=l(),B4=a("li"),Cve=a("strong"),tTr=o("rembert"),aTr=o(" \u2014 "),IH=a("a"),nTr=o("TFRemBertForSequenceClassification"),sTr=o(" (RemBERT model)"),lTr=l(),I4=a("li"),wve=a("strong"),iTr=o("roberta"),dTr=o(" \u2014 "),qH=a("a"),cTr=o("TFRobertaForSequenceClassification"),fTr=o(" (RoBERTa model)"),mTr=l(),q4=a("li"),Ave=a("strong"),gTr=o("roformer"),hTr=o(" \u2014 "),NH=a("a"),pTr=o("TFRoFormerForSequenceClassification"),_Tr=o(" (RoFormer model)"),uTr=l(),N4=a("li"),yve=a("strong"),bTr=o("tapas"),vTr=o(" \u2014 "),jH=a("a"),FTr=o("TFTapasForSequenceClassification"),TTr=o(" (TAPAS model)"),MTr=l(),j4=a("li"),Lve=a("strong"),ETr=o("transfo-xl"),CTr=o(" \u2014 "),DH=a("a"),wTr=o("TFTransfoXLForSequenceClassification"),ATr=o(" (Transformer-XL model)"),yTr=l(),D4=a("li"),xve=a("strong"),LTr=o("xlm"),xTr=o(" \u2014 "),GH=a("a"),$Tr=o("TFXLMForSequenceClassification"),kTr=o(" (XLM model)"),STr=l(),G4=a("li"),$ve=a("strong"),RTr=o("xlm-roberta"),PTr=o(" \u2014 "),OH=a("a"),BTr=o("TFXLMRobertaForSequenceClassification"),ITr=o(" (XLM-RoBERTa model)"),qTr=l(),O4=a("li"),kve=a("strong"),NTr=o("xlnet"),jTr=o(" \u2014 "),VH=a("a"),DTr=o("TFXLNetForSequenceClassification"),GTr=o(" (XLNet model)"),OTr=l(),F(V4.$$.fragment),jNe=l(),ic=a("h2"),X4=a("a"),Sve=a("span"),F(B8.$$.fragment),VTr=l(),Rve=a("span"),XTr=o("TFAutoModelForMultipleChoice"),DNe=l(),ar=a("div"),F(I8.$$.fragment),zTr=l(),dc=a("p"),WTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XH=a("a"),QTr=o("from_pretrained()"),HTr=o(" class method or the "),zH=a("a"),UTr=o("from_config()"),JTr=o(` class
method.`),YTr=l(),q8=a("p"),KTr=o("This class cannot be instantiated directly using "),Pve=a("code"),ZTr=o("__init__()"),e7r=o(" (throws an error)."),o7r=l(),Pt=a("div"),F(N8.$$.fragment),r7r=l(),Bve=a("p"),t7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a7r=l(),cc=a("p"),n7r=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),s7r=o("not"),l7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),i7r=o("from_pretrained()"),d7r=o(" to load the model weights."),c7r=l(),F(z4.$$.fragment),f7r=l(),Sr=a("div"),F(j8.$$.fragment),m7r=l(),qve=a("p"),g7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h7r=l(),sn=a("p"),p7r=o("The model class to instantiate is selected based on the "),Nve=a("code"),_7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(":"),M7r=l(),pe=a("ul"),W4=a("li"),Gve=a("strong"),E7r=o("albert"),C7r=o(" \u2014 "),QH=a("a"),w7r=o("TFAlbertForMultipleChoice"),A7r=o(" (ALBERT model)"),y7r=l(),Q4=a("li"),Ove=a("strong"),L7r=o("bert"),x7r=o(" \u2014 "),HH=a("a"),$7r=o("TFBertForMultipleChoice"),k7r=o(" (BERT model)"),S7r=l(),H4=a("li"),Vve=a("strong"),R7r=o("camembert"),P7r=o(" \u2014 "),UH=a("a"),B7r=o("TFCamembertForMultipleChoice"),I7r=o(" (CamemBERT model)"),q7r=l(),U4=a("li"),Xve=a("strong"),N7r=o("convbert"),j7r=o(" \u2014 "),JH=a("a"),D7r=o("TFConvBertForMultipleChoice"),G7r=o(" (ConvBERT model)"),O7r=l(),J4=a("li"),zve=a("strong"),V7r=o("distilbert"),X7r=o(" \u2014 "),YH=a("a"),z7r=o("TFDistilBertForMultipleChoice"),W7r=o(" (DistilBERT model)"),Q7r=l(),Y4=a("li"),Wve=a("strong"),H7r=o("electra"),U7r=o(" \u2014 "),KH=a("a"),J7r=o("TFElectraForMultipleChoice"),Y7r=o(" (ELECTRA model)"),K7r=l(),K4=a("li"),Qve=a("strong"),Z7r=o("flaubert"),eMr=o(" \u2014 "),ZH=a("a"),oMr=o("TFFlaubertForMultipleChoice"),rMr=o(" (FlauBERT model)"),tMr=l(),Z4=a("li"),Hve=a("strong"),aMr=o("funnel"),nMr=o(" \u2014 "),eU=a("a"),sMr=o("TFFunnelForMultipleChoice"),lMr=o(" (Funnel Transformer model)"),iMr=l(),eE=a("li"),Uve=a("strong"),dMr=o("longformer"),cMr=o(" \u2014 "),oU=a("a"),fMr=o("TFLongformerForMultipleChoice"),mMr=o(" (Longformer model)"),gMr=l(),oE=a("li"),Jve=a("strong"),hMr=o("mobilebert"),pMr=o(" \u2014 "),rU=a("a"),_Mr=o("TFMobileBertForMultipleChoice"),uMr=o(" (MobileBERT model)"),bMr=l(),rE=a("li"),Yve=a("strong"),vMr=o("mpnet"),FMr=o(" \u2014 "),tU=a("a"),TMr=o("TFMPNetForMultipleChoice"),MMr=o(" (MPNet model)"),EMr=l(),tE=a("li"),Kve=a("strong"),CMr=o("rembert"),wMr=o(" \u2014 "),aU=a("a"),AMr=o("TFRemBertForMultipleChoice"),yMr=o(" (RemBERT model)"),LMr=l(),aE=a("li"),Zve=a("strong"),xMr=o("roberta"),$Mr=o(" \u2014 "),nU=a("a"),kMr=o("TFRobertaForMultipleChoice"),SMr=o(" (RoBERTa model)"),RMr=l(),nE=a("li"),eFe=a("strong"),PMr=o("roformer"),BMr=o(" \u2014 "),sU=a("a"),IMr=o("TFRoFormerForMultipleChoice"),qMr=o(" (RoFormer model)"),NMr=l(),sE=a("li"),oFe=a("strong"),jMr=o("xlm"),DMr=o(" \u2014 "),lU=a("a"),GMr=o("TFXLMForMultipleChoice"),OMr=o(" (XLM model)"),VMr=l(),lE=a("li"),rFe=a("strong"),XMr=o("xlm-roberta"),zMr=o(" \u2014 "),iU=a("a"),WMr=o("TFXLMRobertaForMultipleChoice"),QMr=o(" (XLM-RoBERTa model)"),HMr=l(),iE=a("li"),tFe=a("strong"),UMr=o("xlnet"),JMr=o(" \u2014 "),dU=a("a"),YMr=o("TFXLNetForMultipleChoice"),KMr=o(" (XLNet model)"),ZMr=l(),F(dE.$$.fragment),GNe=l(),fc=a("h2"),cE=a("a"),aFe=a("span"),F(D8.$$.fragment),e4r=l(),nFe=a("span"),o4r=o("TFAutoModelForNextSentencePrediction"),ONe=l(),nr=a("div"),F(G8.$$.fragment),r4r=l(),mc=a("p"),t4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=a("a"),a4r=o("from_pretrained()"),n4r=o(" class method or the "),fU=a("a"),s4r=o("from_config()"),l4r=o(` class
method.`),i4r=l(),O8=a("p"),d4r=o("This class cannot be instantiated directly using "),sFe=a("code"),c4r=o("__init__()"),f4r=o(" (throws an error)."),m4r=l(),Bt=a("div"),F(V8.$$.fragment),g4r=l(),lFe=a("p"),h4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p4r=l(),gc=a("p"),_4r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),u4r=o("not"),b4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),v4r=o("from_pretrained()"),F4r=o(" to load the model weights."),T4r=l(),F(fE.$$.fragment),M4r=l(),Rr=a("div"),F(X8.$$.fragment),E4r=l(),dFe=a("p"),C4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w4r=l(),ln=a("p"),A4r=o("The model class to instantiate is selected based on the "),cFe=a("code"),y4r=o("model_type"),L4r=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),k4r=o("pretrained_model_name_or_path"),S4r=o(":"),R4r=l(),z8=a("ul"),mE=a("li"),gFe=a("strong"),P4r=o("bert"),B4r=o(" \u2014 "),gU=a("a"),I4r=o("TFBertForNextSentencePrediction"),q4r=o(" (BERT model)"),N4r=l(),gE=a("li"),hFe=a("strong"),j4r=o("mobilebert"),D4r=o(" \u2014 "),hU=a("a"),G4r=o("TFMobileBertForNextSentencePrediction"),O4r=o(" (MobileBERT model)"),V4r=l(),F(hE.$$.fragment),VNe=l(),hc=a("h2"),pE=a("a"),pFe=a("span"),F(W8.$$.fragment),X4r=l(),_Fe=a("span"),z4r=o("TFAutoModelForTableQuestionAnswering"),XNe=l(),sr=a("div"),F(Q8.$$.fragment),W4r=l(),pc=a("p"),Q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pU=a("a"),H4r=o("from_pretrained()"),U4r=o(" class method or the "),_U=a("a"),J4r=o("from_config()"),Y4r=o(` class
method.`),K4r=l(),H8=a("p"),Z4r=o("This class cannot be instantiated directly using "),uFe=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),It=a("div"),F(U8.$$.fragment),tEr=l(),bFe=a("p"),aEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nEr=l(),_c=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),dEr=o("from_pretrained()"),cEr=o(" to load the model weights."),fEr=l(),F(_E.$$.fragment),mEr=l(),Pr=a("div"),F(J8.$$.fragment),gEr=l(),FFe=a("p"),hEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pEr=l(),dn=a("p"),_Er=o("The model class to instantiate is selected based on the "),TFe=a("code"),uEr=o("model_type"),bEr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(":"),EEr=l(),CFe=a("ul"),uE=a("li"),wFe=a("strong"),CEr=o("tapas"),wEr=o(" \u2014 "),bU=a("a"),AEr=o("TFTapasForQuestionAnswering"),yEr=o(" (TAPAS model)"),LEr=l(),F(bE.$$.fragment),zNe=l(),uc=a("h2"),vE=a("a"),AFe=a("span"),F(Y8.$$.fragment),xEr=l(),yFe=a("span"),$Er=o("TFAutoModelForTokenClassification"),WNe=l(),lr=a("div"),F(K8.$$.fragment),kEr=l(),bc=a("p"),SEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vU=a("a"),REr=o("from_pretrained()"),PEr=o(" class method or the "),FU=a("a"),BEr=o("from_config()"),IEr=o(` class
method.`),qEr=l(),Z8=a("p"),NEr=o("This class cannot be instantiated directly using "),LFe=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),qt=a("div"),F(e9.$$.fragment),OEr=l(),xFe=a("p"),VEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XEr=l(),vc=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),WEr=o("not"),QEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),HEr=o("from_pretrained()"),UEr=o(" to load the model weights."),JEr=l(),F(FE.$$.fragment),YEr=l(),Br=a("div"),F(o9.$$.fragment),KEr=l(),kFe=a("p"),ZEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eCr=l(),cn=a("p"),oCr=o("The model class to instantiate is selected based on the "),SFe=a("code"),rCr=o("model_type"),tCr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(":"),iCr=l(),de=a("ul"),TE=a("li"),BFe=a("strong"),dCr=o("albert"),cCr=o(" \u2014 "),MU=a("a"),fCr=o("TFAlbertForTokenClassification"),mCr=o(" (ALBERT model)"),gCr=l(),ME=a("li"),IFe=a("strong"),hCr=o("bert"),pCr=o(" \u2014 "),EU=a("a"),_Cr=o("TFBertForTokenClassification"),uCr=o(" (BERT model)"),bCr=l(),EE=a("li"),qFe=a("strong"),vCr=o("camembert"),FCr=o(" \u2014 "),CU=a("a"),TCr=o("TFCamembertForTokenClassification"),MCr=o(" (CamemBERT model)"),ECr=l(),CE=a("li"),NFe=a("strong"),CCr=o("convbert"),wCr=o(" \u2014 "),wU=a("a"),ACr=o("TFConvBertForTokenClassification"),yCr=o(" (ConvBERT model)"),LCr=l(),wE=a("li"),jFe=a("strong"),xCr=o("deberta"),$Cr=o(" \u2014 "),AU=a("a"),kCr=o("TFDebertaForTokenClassification"),SCr=o(" (DeBERTa model)"),RCr=l(),AE=a("li"),DFe=a("strong"),PCr=o("deberta-v2"),BCr=o(" \u2014 "),yU=a("a"),ICr=o("TFDebertaV2ForTokenClassification"),qCr=o(" (DeBERTa-v2 model)"),NCr=l(),yE=a("li"),GFe=a("strong"),jCr=o("distilbert"),DCr=o(" \u2014 "),LU=a("a"),GCr=o("TFDistilBertForTokenClassification"),OCr=o(" (DistilBERT model)"),VCr=l(),LE=a("li"),OFe=a("strong"),XCr=o("electra"),zCr=o(" \u2014 "),xU=a("a"),WCr=o("TFElectraForTokenClassification"),QCr=o(" (ELECTRA model)"),HCr=l(),xE=a("li"),VFe=a("strong"),UCr=o("flaubert"),JCr=o(" \u2014 "),$U=a("a"),YCr=o("TFFlaubertForTokenClassification"),KCr=o(" (FlauBERT model)"),ZCr=l(),$E=a("li"),XFe=a("strong"),e5r=o("funnel"),o5r=o(" \u2014 "),kU=a("a"),r5r=o("TFFunnelForTokenClassification"),t5r=o(" (Funnel Transformer model)"),a5r=l(),kE=a("li"),zFe=a("strong"),n5r=o("layoutlm"),s5r=o(" \u2014 "),SU=a("a"),l5r=o("TFLayoutLMForTokenClassification"),i5r=o(" (LayoutLM model)"),d5r=l(),SE=a("li"),WFe=a("strong"),c5r=o("longformer"),f5r=o(" \u2014 "),RU=a("a"),m5r=o("TFLongformerForTokenClassification"),g5r=o(" (Longformer model)"),h5r=l(),RE=a("li"),QFe=a("strong"),p5r=o("mobilebert"),_5r=o(" \u2014 "),PU=a("a"),u5r=o("TFMobileBertForTokenClassification"),b5r=o(" (MobileBERT model)"),v5r=l(),PE=a("li"),HFe=a("strong"),F5r=o("mpnet"),T5r=o(" \u2014 "),BU=a("a"),M5r=o("TFMPNetForTokenClassification"),E5r=o(" (MPNet model)"),C5r=l(),BE=a("li"),UFe=a("strong"),w5r=o("rembert"),A5r=o(" \u2014 "),IU=a("a"),y5r=o("TFRemBertForTokenClassification"),L5r=o(" (RemBERT model)"),x5r=l(),IE=a("li"),JFe=a("strong"),$5r=o("roberta"),k5r=o(" \u2014 "),qU=a("a"),S5r=o("TFRobertaForTokenClassification"),R5r=o(" (RoBERTa model)"),P5r=l(),qE=a("li"),YFe=a("strong"),B5r=o("roformer"),I5r=o(" \u2014 "),NU=a("a"),q5r=o("TFRoFormerForTokenClassification"),N5r=o(" (RoFormer model)"),j5r=l(),NE=a("li"),KFe=a("strong"),D5r=o("xlm"),G5r=o(" \u2014 "),jU=a("a"),O5r=o("TFXLMForTokenClassification"),V5r=o(" (XLM model)"),X5r=l(),jE=a("li"),ZFe=a("strong"),z5r=o("xlm-roberta"),W5r=o(" \u2014 "),DU=a("a"),Q5r=o("TFXLMRobertaForTokenClassification"),H5r=o(" (XLM-RoBERTa model)"),U5r=l(),DE=a("li"),eTe=a("strong"),J5r=o("xlnet"),Y5r=o(" \u2014 "),GU=a("a"),K5r=o("TFXLNetForTokenClassification"),Z5r=o(" (XLNet model)"),ewr=l(),F(GE.$$.fragment),QNe=l(),Fc=a("h2"),OE=a("a"),oTe=a("span"),F(r9.$$.fragment),owr=l(),rTe=a("span"),rwr=o("TFAutoModelForQuestionAnswering"),HNe=l(),ir=a("div"),F(t9.$$.fragment),twr=l(),Tc=a("p"),awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OU=a("a"),nwr=o("from_pretrained()"),swr=o(" class method or the "),VU=a("a"),lwr=o("from_config()"),iwr=o(` class
method.`),dwr=l(),a9=a("p"),cwr=o("This class cannot be instantiated directly using "),tTe=a("code"),fwr=o("__init__()"),mwr=o(" (throws an error)."),gwr=l(),Nt=a("div"),F(n9.$$.fragment),hwr=l(),aTe=a("p"),pwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_wr=l(),Mc=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),bwr=o("not"),vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),Fwr=o("from_pretrained()"),Twr=o(" to load the model weights."),Mwr=l(),F(VE.$$.fragment),Ewr=l(),Ir=a("div"),F(s9.$$.fragment),Cwr=l(),sTe=a("p"),wwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Awr=l(),fn=a("p"),ywr=o("The model class to instantiate is selected based on the "),lTe=a("code"),Lwr=o("model_type"),xwr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),Swr=o("pretrained_model_name_or_path"),Rwr=o(":"),Pwr=l(),ce=a("ul"),XE=a("li"),cTe=a("strong"),Bwr=o("albert"),Iwr=o(" \u2014 "),zU=a("a"),qwr=o("TFAlbertForQuestionAnswering"),Nwr=o(" (ALBERT model)"),jwr=l(),zE=a("li"),fTe=a("strong"),Dwr=o("bert"),Gwr=o(" \u2014 "),WU=a("a"),Owr=o("TFBertForQuestionAnswering"),Vwr=o(" (BERT model)"),Xwr=l(),WE=a("li"),mTe=a("strong"),zwr=o("camembert"),Wwr=o(" \u2014 "),QU=a("a"),Qwr=o("TFCamembertForQuestionAnswering"),Hwr=o(" (CamemBERT model)"),Uwr=l(),QE=a("li"),gTe=a("strong"),Jwr=o("convbert"),Ywr=o(" \u2014 "),HU=a("a"),Kwr=o("TFConvBertForQuestionAnswering"),Zwr=o(" (ConvBERT model)"),e0r=l(),HE=a("li"),hTe=a("strong"),o0r=o("deberta"),r0r=o(" \u2014 "),UU=a("a"),t0r=o("TFDebertaForQuestionAnswering"),a0r=o(" (DeBERTa model)"),n0r=l(),UE=a("li"),pTe=a("strong"),s0r=o("deberta-v2"),l0r=o(" \u2014 "),JU=a("a"),i0r=o("TFDebertaV2ForQuestionAnswering"),d0r=o(" (DeBERTa-v2 model)"),c0r=l(),JE=a("li"),_Te=a("strong"),f0r=o("distilbert"),m0r=o(" \u2014 "),YU=a("a"),g0r=o("TFDistilBertForQuestionAnswering"),h0r=o(" (DistilBERT model)"),p0r=l(),YE=a("li"),uTe=a("strong"),_0r=o("electra"),u0r=o(" \u2014 "),KU=a("a"),b0r=o("TFElectraForQuestionAnswering"),v0r=o(" (ELECTRA model)"),F0r=l(),KE=a("li"),bTe=a("strong"),T0r=o("flaubert"),M0r=o(" \u2014 "),ZU=a("a"),E0r=o("TFFlaubertForQuestionAnsweringSimple"),C0r=o(" (FlauBERT model)"),w0r=l(),ZE=a("li"),vTe=a("strong"),A0r=o("funnel"),y0r=o(" \u2014 "),eJ=a("a"),L0r=o("TFFunnelForQuestionAnswering"),x0r=o(" (Funnel Transformer model)"),$0r=l(),eC=a("li"),FTe=a("strong"),k0r=o("gptj"),S0r=o(" \u2014 "),oJ=a("a"),R0r=o("TFGPTJForQuestionAnswering"),P0r=o(" (GPT-J model)"),B0r=l(),oC=a("li"),TTe=a("strong"),I0r=o("longformer"),q0r=o(" \u2014 "),rJ=a("a"),N0r=o("TFLongformerForQuestionAnswering"),j0r=o(" (Longformer model)"),D0r=l(),rC=a("li"),MTe=a("strong"),G0r=o("mobilebert"),O0r=o(" \u2014 "),tJ=a("a"),V0r=o("TFMobileBertForQuestionAnswering"),X0r=o(" (MobileBERT model)"),z0r=l(),tC=a("li"),ETe=a("strong"),W0r=o("mpnet"),Q0r=o(" \u2014 "),aJ=a("a"),H0r=o("TFMPNetForQuestionAnswering"),U0r=o(" (MPNet model)"),J0r=l(),aC=a("li"),CTe=a("strong"),Y0r=o("rembert"),K0r=o(" \u2014 "),nJ=a("a"),Z0r=o("TFRemBertForQuestionAnswering"),eAr=o(" (RemBERT model)"),oAr=l(),nC=a("li"),wTe=a("strong"),rAr=o("roberta"),tAr=o(" \u2014 "),sJ=a("a"),aAr=o("TFRobertaForQuestionAnswering"),nAr=o(" (RoBERTa model)"),sAr=l(),sC=a("li"),ATe=a("strong"),lAr=o("roformer"),iAr=o(" \u2014 "),lJ=a("a"),dAr=o("TFRoFormerForQuestionAnswering"),cAr=o(" (RoFormer model)"),fAr=l(),lC=a("li"),yTe=a("strong"),mAr=o("xlm"),gAr=o(" \u2014 "),iJ=a("a"),hAr=o("TFXLMForQuestionAnsweringSimple"),pAr=o(" (XLM model)"),_Ar=l(),iC=a("li"),LTe=a("strong"),uAr=o("xlm-roberta"),bAr=o(" \u2014 "),dJ=a("a"),vAr=o("TFXLMRobertaForQuestionAnswering"),FAr=o(" (XLM-RoBERTa model)"),TAr=l(),dC=a("li"),xTe=a("strong"),MAr=o("xlnet"),EAr=o(" \u2014 "),cJ=a("a"),CAr=o("TFXLNetForQuestionAnsweringSimple"),wAr=o(" (XLNet model)"),AAr=l(),F(cC.$$.fragment),UNe=l(),Ec=a("h2"),fC=a("a"),$Te=a("span"),F(l9.$$.fragment),yAr=l(),kTe=a("span"),LAr=o("TFAutoModelForVision2Seq"),JNe=l(),dr=a("div"),F(i9.$$.fragment),xAr=l(),Cc=a("p"),$Ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fJ=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),mJ=a("a"),RAr=o("from_config()"),PAr=o(` class
method.`),BAr=l(),d9=a("p"),IAr=o("This class cannot be instantiated directly using "),STe=a("code"),qAr=o("__init__()"),NAr=o(" (throws an error)."),jAr=l(),jt=a("div"),F(c9.$$.fragment),DAr=l(),RTe=a("p"),GAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OAr=l(),wc=a("p"),VAr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),XAr=o("not"),zAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),WAr=o("from_pretrained()"),QAr=o(" to load the model weights."),HAr=l(),F(mC.$$.fragment),UAr=l(),qr=a("div"),F(f9.$$.fragment),JAr=l(),BTe=a("p"),YAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KAr=l(),mn=a("p"),ZAr=o("The model class to instantiate is selected based on the "),ITe=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),jTe=a("ul"),gC=a("li"),DTe=a("strong"),l6r=o("vision-encoder-decoder"),i6r=o(" \u2014 "),hJ=a("a"),d6r=o("TFVisionEncoderDecoderModel"),c6r=o(" (Vision Encoder decoder model)"),f6r=l(),F(hC.$$.fragment),YNe=l(),Ac=a("h2"),pC=a("a"),GTe=a("span"),F(m9.$$.fragment),m6r=l(),OTe=a("span"),g6r=o("TFAutoModelForSpeechSeq2Seq"),KNe=l(),cr=a("div"),F(g9.$$.fragment),h6r=l(),yc=a("p"),p6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pJ=a("a"),_6r=o("from_pretrained()"),u6r=o(" class method or the "),_J=a("a"),b6r=o("from_config()"),v6r=o(` class
method.`),F6r=l(),h9=a("p"),T6r=o("This class cannot be instantiated directly using "),VTe=a("code"),M6r=o("__init__()"),E6r=o(" (throws an error)."),C6r=l(),Dt=a("div"),F(p9.$$.fragment),w6r=l(),XTe=a("p"),A6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),y6r=l(),Lc=a("p"),L6r=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),x6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),k6r=o("from_pretrained()"),S6r=o(" to load the model weights."),R6r=l(),F(_C.$$.fragment),P6r=l(),Nr=a("div"),F(_9.$$.fragment),B6r=l(),WTe=a("p"),I6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),q6r=l(),gn=a("p"),N6r=o("The model class to instantiate is selected based on the "),QTe=a("code"),j6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),V6r=o("pretrained_model_name_or_path"),X6r=o(":"),z6r=l(),JTe=a("ul"),uC=a("li"),YTe=a("strong"),W6r=o("speech_to_text"),Q6r=o(" \u2014 "),bJ=a("a"),H6r=o("TFSpeech2TextForConditionalGeneration"),U6r=o(" (Speech2Text model)"),J6r=l(),F(bC.$$.fragment),ZNe=l(),xc=a("h2"),vC=a("a"),KTe=a("span"),F(u9.$$.fragment),Y6r=l(),ZTe=a("span"),K6r=o("FlaxAutoModel"),eje=l(),fr=a("div"),F(b9.$$.fragment),Z6r=l(),$c=a("p"),eyr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vJ=a("a"),oyr=o("from_pretrained()"),ryr=o(" class method or the "),FJ=a("a"),tyr=o("from_config()"),ayr=o(` class
method.`),nyr=l(),v9=a("p"),syr=o("This class cannot be instantiated directly using "),e7e=a("code"),lyr=o("__init__()"),iyr=o(" (throws an error)."),dyr=l(),Gt=a("div"),F(F9.$$.fragment),cyr=l(),o7e=a("p"),fyr=o("Instantiates one of the base model classes of the library from a configuration."),myr=l(),kc=a("p"),gyr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),hyr=o("not"),pyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),_yr=o("from_pretrained()"),uyr=o(" to load the model weights."),byr=l(),F(FC.$$.fragment),vyr=l(),jr=a("div"),F(T9.$$.fragment),Fyr=l(),t7e=a("p"),Tyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Myr=l(),hn=a("p"),Eyr=o("The model class to instantiate is selected based on the "),a7e=a("code"),Cyr=o("model_type"),wyr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),Ayr=o("pretrained_model_name_or_path"),yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),Lyr=o("pretrained_model_name_or_path"),xyr=o(":"),$yr=l(),te=a("ul"),TC=a("li"),l7e=a("strong"),kyr=o("albert"),Syr=o(" \u2014 "),MJ=a("a"),Ryr=o("FlaxAlbertModel"),Pyr=o(" (ALBERT model)"),Byr=l(),MC=a("li"),i7e=a("strong"),Iyr=o("bart"),qyr=o(" \u2014 "),EJ=a("a"),Nyr=o("FlaxBartModel"),jyr=o(" (BART model)"),Dyr=l(),EC=a("li"),d7e=a("strong"),Gyr=o("beit"),Oyr=o(" \u2014 "),CJ=a("a"),Vyr=o("FlaxBeitModel"),Xyr=o(" (BEiT model)"),zyr=l(),CC=a("li"),c7e=a("strong"),Wyr=o("bert"),Qyr=o(" \u2014 "),wJ=a("a"),Hyr=o("FlaxBertModel"),Uyr=o(" (BERT model)"),Jyr=l(),wC=a("li"),f7e=a("strong"),Yyr=o("big_bird"),Kyr=o(" \u2014 "),AJ=a("a"),Zyr=o("FlaxBigBirdModel"),eLr=o(" (BigBird model)"),oLr=l(),AC=a("li"),m7e=a("strong"),rLr=o("blenderbot"),tLr=o(" \u2014 "),yJ=a("a"),aLr=o("FlaxBlenderbotModel"),nLr=o(" (Blenderbot model)"),sLr=l(),yC=a("li"),g7e=a("strong"),lLr=o("blenderbot-small"),iLr=o(" \u2014 "),LJ=a("a"),dLr=o("FlaxBlenderbotSmallModel"),cLr=o(" (BlenderbotSmall model)"),fLr=l(),LC=a("li"),h7e=a("strong"),mLr=o("clip"),gLr=o(" \u2014 "),xJ=a("a"),hLr=o("FlaxCLIPModel"),pLr=o(" (CLIP model)"),_Lr=l(),xC=a("li"),p7e=a("strong"),uLr=o("distilbert"),bLr=o(" \u2014 "),$J=a("a"),vLr=o("FlaxDistilBertModel"),FLr=o(" (DistilBERT model)"),TLr=l(),$C=a("li"),_7e=a("strong"),MLr=o("electra"),ELr=o(" \u2014 "),kJ=a("a"),CLr=o("FlaxElectraModel"),wLr=o(" (ELECTRA model)"),ALr=l(),kC=a("li"),u7e=a("strong"),yLr=o("gpt2"),LLr=o(" \u2014 "),SJ=a("a"),xLr=o("FlaxGPT2Model"),$Lr=o(" (OpenAI GPT-2 model)"),kLr=l(),SC=a("li"),b7e=a("strong"),SLr=o("gpt_neo"),RLr=o(" \u2014 "),RJ=a("a"),PLr=o("FlaxGPTNeoModel"),BLr=o(" (GPT Neo model)"),ILr=l(),RC=a("li"),v7e=a("strong"),qLr=o("gptj"),NLr=o(" \u2014 "),PJ=a("a"),jLr=o("FlaxGPTJModel"),DLr=o(" (GPT-J model)"),GLr=l(),PC=a("li"),F7e=a("strong"),OLr=o("marian"),VLr=o(" \u2014 "),BJ=a("a"),XLr=o("FlaxMarianModel"),zLr=o(" (Marian model)"),WLr=l(),BC=a("li"),T7e=a("strong"),QLr=o("mbart"),HLr=o(" \u2014 "),IJ=a("a"),ULr=o("FlaxMBartModel"),JLr=o(" (mBART model)"),YLr=l(),IC=a("li"),M7e=a("strong"),KLr=o("mt5"),ZLr=o(" \u2014 "),qJ=a("a"),e8r=o("FlaxMT5Model"),o8r=o(" (mT5 model)"),r8r=l(),qC=a("li"),E7e=a("strong"),t8r=o("pegasus"),a8r=o(" \u2014 "),NJ=a("a"),n8r=o("FlaxPegasusModel"),s8r=o(" (Pegasus model)"),l8r=l(),NC=a("li"),C7e=a("strong"),i8r=o("roberta"),d8r=o(" \u2014 "),jJ=a("a"),c8r=o("FlaxRobertaModel"),f8r=o(" (RoBERTa model)"),m8r=l(),jC=a("li"),w7e=a("strong"),g8r=o("roformer"),h8r=o(" \u2014 "),DJ=a("a"),p8r=o("FlaxRoFormerModel"),_8r=o(" (RoFormer model)"),u8r=l(),DC=a("li"),A7e=a("strong"),b8r=o("t5"),v8r=o(" \u2014 "),GJ=a("a"),F8r=o("FlaxT5Model"),T8r=o(" (T5 model)"),M8r=l(),GC=a("li"),y7e=a("strong"),E8r=o("vision-text-dual-encoder"),C8r=o(" \u2014 "),OJ=a("a"),w8r=o("FlaxVisionTextDualEncoderModel"),A8r=o(" (VisionTextDualEncoder model)"),y8r=l(),OC=a("li"),L7e=a("strong"),L8r=o("vit"),x8r=o(" \u2014 "),VJ=a("a"),$8r=o("FlaxViTModel"),k8r=o(" (ViT model)"),S8r=l(),VC=a("li"),x7e=a("strong"),R8r=o("wav2vec2"),P8r=o(" \u2014 "),XJ=a("a"),B8r=o("FlaxWav2Vec2Model"),I8r=o(" (Wav2Vec2 model)"),q8r=l(),XC=a("li"),$7e=a("strong"),N8r=o("xglm"),j8r=o(" \u2014 "),zJ=a("a"),D8r=o("FlaxXGLMModel"),G8r=o(" (XGLM model)"),O8r=l(),zC=a("li"),k7e=a("strong"),V8r=o("xlm-roberta"),X8r=o(" \u2014 "),WJ=a("a"),z8r=o("FlaxXLMRobertaModel"),W8r=o(" (XLM-RoBERTa model)"),Q8r=l(),F(WC.$$.fragment),oje=l(),Sc=a("h2"),QC=a("a"),S7e=a("span"),F(M9.$$.fragment),H8r=l(),R7e=a("span"),U8r=o("FlaxAutoModelForCausalLM"),rje=l(),mr=a("div"),F(E9.$$.fragment),J8r=l(),Rc=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QJ=a("a"),K8r=o("from_pretrained()"),Z8r=o(" class method or the "),HJ=a("a"),e9r=o("from_config()"),o9r=o(` class
method.`),r9r=l(),C9=a("p"),t9r=o("This class cannot be instantiated directly using "),P7e=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Ot=a("div"),F(w9.$$.fragment),l9r=l(),B7e=a("p"),i9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),d9r=l(),Pc=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),f9r=o("not"),m9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),g9r=o("from_pretrained()"),h9r=o(" to load the model weights."),p9r=l(),F(HC.$$.fragment),_9r=l(),Dr=a("div"),F(A9.$$.fragment),u9r=l(),q7e=a("p"),b9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v9r=l(),pn=a("p"),F9r=o("The model class to instantiate is selected based on the "),N7e=a("code"),T9r=o("model_type"),M9r=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),E9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(":"),y9r=l(),Re=a("ul"),UC=a("li"),G7e=a("strong"),L9r=o("bart"),x9r=o(" \u2014 "),JJ=a("a"),$9r=o("FlaxBartForCausalLM"),k9r=o(" (BART model)"),S9r=l(),JC=a("li"),O7e=a("strong"),R9r=o("bert"),P9r=o(" \u2014 "),YJ=a("a"),B9r=o("FlaxBertForCausalLM"),I9r=o(" (BERT model)"),q9r=l(),YC=a("li"),V7e=a("strong"),N9r=o("big_bird"),j9r=o(" \u2014 "),KJ=a("a"),D9r=o("FlaxBigBirdForCausalLM"),G9r=o(" (BigBird model)"),O9r=l(),KC=a("li"),X7e=a("strong"),V9r=o("electra"),X9r=o(" \u2014 "),ZJ=a("a"),z9r=o("FlaxElectraForCausalLM"),W9r=o(" (ELECTRA model)"),Q9r=l(),ZC=a("li"),z7e=a("strong"),H9r=o("gpt2"),U9r=o(" \u2014 "),eY=a("a"),J9r=o("FlaxGPT2LMHeadModel"),Y9r=o(" (OpenAI GPT-2 model)"),K9r=l(),e5=a("li"),W7e=a("strong"),Z9r=o("gpt_neo"),exr=o(" \u2014 "),oY=a("a"),oxr=o("FlaxGPTNeoForCausalLM"),rxr=o(" (GPT Neo model)"),txr=l(),o5=a("li"),Q7e=a("strong"),axr=o("gptj"),nxr=o(" \u2014 "),rY=a("a"),sxr=o("FlaxGPTJForCausalLM"),lxr=o(" (GPT-J model)"),ixr=l(),r5=a("li"),H7e=a("strong"),dxr=o("roberta"),cxr=o(" \u2014 "),tY=a("a"),fxr=o("FlaxRobertaForCausalLM"),mxr=o(" (RoBERTa model)"),gxr=l(),t5=a("li"),U7e=a("strong"),hxr=o("xglm"),pxr=o(" \u2014 "),aY=a("a"),_xr=o("FlaxXGLMForCausalLM"),uxr=o(" (XGLM model)"),bxr=l(),F(a5.$$.fragment),tje=l(),Bc=a("h2"),n5=a("a"),J7e=a("span"),F(y9.$$.fragment),vxr=l(),Y7e=a("span"),Fxr=o("FlaxAutoModelForPreTraining"),aje=l(),gr=a("div"),F(L9.$$.fragment),Txr=l(),Ic=a("p"),Mxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nY=a("a"),Exr=o("from_pretrained()"),Cxr=o(" class method or the "),sY=a("a"),wxr=o("from_config()"),Axr=o(` class
method.`),yxr=l(),x9=a("p"),Lxr=o("This class cannot be instantiated directly using "),K7e=a("code"),xxr=o("__init__()"),$xr=o(" (throws an error)."),kxr=l(),Vt=a("div"),F($9.$$.fragment),Sxr=l(),Z7e=a("p"),Rxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pxr=l(),qc=a("p"),Bxr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),Ixr=o("not"),qxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),Nxr=o("from_pretrained()"),jxr=o(" to load the model weights."),Dxr=l(),F(s5.$$.fragment),Gxr=l(),Gr=a("div"),F(k9.$$.fragment),Oxr=l(),oMe=a("p"),Vxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xxr=l(),_n=a("p"),zxr=o("The model class to instantiate is selected based on the "),rMe=a("code"),Wxr=o("model_type"),Qxr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),Jxr=o("pretrained_model_name_or_path"),Yxr=o(":"),Kxr=l(),Ee=a("ul"),l5=a("li"),nMe=a("strong"),Zxr=o("albert"),e$r=o(" \u2014 "),iY=a("a"),o$r=o("FlaxAlbertForPreTraining"),r$r=o(" (ALBERT model)"),t$r=l(),i5=a("li"),sMe=a("strong"),a$r=o("bart"),n$r=o(" \u2014 "),dY=a("a"),s$r=o("FlaxBartForConditionalGeneration"),l$r=o(" (BART model)"),i$r=l(),d5=a("li"),lMe=a("strong"),d$r=o("bert"),c$r=o(" \u2014 "),cY=a("a"),f$r=o("FlaxBertForPreTraining"),m$r=o(" (BERT model)"),g$r=l(),c5=a("li"),iMe=a("strong"),h$r=o("big_bird"),p$r=o(" \u2014 "),fY=a("a"),_$r=o("FlaxBigBirdForPreTraining"),u$r=o(" (BigBird model)"),b$r=l(),f5=a("li"),dMe=a("strong"),v$r=o("electra"),F$r=o(" \u2014 "),mY=a("a"),T$r=o("FlaxElectraForPreTraining"),M$r=o(" (ELECTRA model)"),E$r=l(),m5=a("li"),cMe=a("strong"),C$r=o("mbart"),w$r=o(" \u2014 "),gY=a("a"),A$r=o("FlaxMBartForConditionalGeneration"),y$r=o(" (mBART model)"),L$r=l(),g5=a("li"),fMe=a("strong"),x$r=o("mt5"),$$r=o(" \u2014 "),hY=a("a"),k$r=o("FlaxMT5ForConditionalGeneration"),S$r=o(" (mT5 model)"),R$r=l(),h5=a("li"),mMe=a("strong"),P$r=o("roberta"),B$r=o(" \u2014 "),pY=a("a"),I$r=o("FlaxRobertaForMaskedLM"),q$r=o(" (RoBERTa model)"),N$r=l(),p5=a("li"),gMe=a("strong"),j$r=o("roformer"),D$r=o(" \u2014 "),_Y=a("a"),G$r=o("FlaxRoFormerForMaskedLM"),O$r=o(" (RoFormer model)"),V$r=l(),_5=a("li"),hMe=a("strong"),X$r=o("t5"),z$r=o(" \u2014 "),uY=a("a"),W$r=o("FlaxT5ForConditionalGeneration"),Q$r=o(" (T5 model)"),H$r=l(),u5=a("li"),pMe=a("strong"),U$r=o("wav2vec2"),J$r=o(" \u2014 "),bY=a("a"),Y$r=o("FlaxWav2Vec2ForPreTraining"),K$r=o(" (Wav2Vec2 model)"),Z$r=l(),b5=a("li"),_Me=a("strong"),ekr=o("xlm-roberta"),okr=o(" \u2014 "),vY=a("a"),rkr=o("FlaxXLMRobertaForMaskedLM"),tkr=o(" (XLM-RoBERTa model)"),akr=l(),F(v5.$$.fragment),nje=l(),Nc=a("h2"),F5=a("a"),uMe=a("span"),F(S9.$$.fragment),nkr=l(),bMe=a("span"),skr=o("FlaxAutoModelForMaskedLM"),sje=l(),hr=a("div"),F(R9.$$.fragment),lkr=l(),jc=a("p"),ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FY=a("a"),dkr=o("from_pretrained()"),ckr=o(" class method or the "),TY=a("a"),fkr=o("from_config()"),mkr=o(` class
method.`),gkr=l(),P9=a("p"),hkr=o("This class cannot be instantiated directly using "),vMe=a("code"),pkr=o("__init__()"),_kr=o(" (throws an error)."),ukr=l(),Xt=a("div"),F(B9.$$.fragment),bkr=l(),FMe=a("p"),vkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fkr=l(),Dc=a("p"),Tkr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),Mkr=o("not"),Ekr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),Ckr=o("from_pretrained()"),wkr=o(" to load the model weights."),Akr=l(),F(T5.$$.fragment),ykr=l(),Or=a("div"),F(I9.$$.fragment),Lkr=l(),MMe=a("p"),xkr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$kr=l(),un=a("p"),kkr=o("The model class to instantiate is selected based on the "),EMe=a("code"),Skr=o("model_type"),Rkr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(":"),Nkr=l(),Le=a("ul"),M5=a("li"),AMe=a("strong"),jkr=o("albert"),Dkr=o(" \u2014 "),EY=a("a"),Gkr=o("FlaxAlbertForMaskedLM"),Okr=o(" (ALBERT model)"),Vkr=l(),E5=a("li"),yMe=a("strong"),Xkr=o("bart"),zkr=o(" \u2014 "),CY=a("a"),Wkr=o("FlaxBartForConditionalGeneration"),Qkr=o(" (BART model)"),Hkr=l(),C5=a("li"),LMe=a("strong"),Ukr=o("bert"),Jkr=o(" \u2014 "),wY=a("a"),Ykr=o("FlaxBertForMaskedLM"),Kkr=o(" (BERT model)"),Zkr=l(),w5=a("li"),xMe=a("strong"),eSr=o("big_bird"),oSr=o(" \u2014 "),AY=a("a"),rSr=o("FlaxBigBirdForMaskedLM"),tSr=o(" (BigBird model)"),aSr=l(),A5=a("li"),$Me=a("strong"),nSr=o("distilbert"),sSr=o(" \u2014 "),yY=a("a"),lSr=o("FlaxDistilBertForMaskedLM"),iSr=o(" (DistilBERT model)"),dSr=l(),y5=a("li"),kMe=a("strong"),cSr=o("electra"),fSr=o(" \u2014 "),LY=a("a"),mSr=o("FlaxElectraForMaskedLM"),gSr=o(" (ELECTRA model)"),hSr=l(),L5=a("li"),SMe=a("strong"),pSr=o("mbart"),_Sr=o(" \u2014 "),xY=a("a"),uSr=o("FlaxMBartForConditionalGeneration"),bSr=o(" (mBART model)"),vSr=l(),x5=a("li"),RMe=a("strong"),FSr=o("roberta"),TSr=o(" \u2014 "),$Y=a("a"),MSr=o("FlaxRobertaForMaskedLM"),ESr=o(" (RoBERTa model)"),CSr=l(),$5=a("li"),PMe=a("strong"),wSr=o("roformer"),ASr=o(" \u2014 "),kY=a("a"),ySr=o("FlaxRoFormerForMaskedLM"),LSr=o(" (RoFormer model)"),xSr=l(),k5=a("li"),BMe=a("strong"),$Sr=o("xlm-roberta"),kSr=o(" \u2014 "),SY=a("a"),SSr=o("FlaxXLMRobertaForMaskedLM"),RSr=o(" (XLM-RoBERTa model)"),PSr=l(),F(S5.$$.fragment),lje=l(),Gc=a("h2"),R5=a("a"),IMe=a("span"),F(q9.$$.fragment),BSr=l(),qMe=a("span"),ISr=o("FlaxAutoModelForSeq2SeqLM"),ije=l(),pr=a("div"),F(N9.$$.fragment),qSr=l(),Oc=a("p"),NSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RY=a("a"),jSr=o("from_pretrained()"),DSr=o(" class method or the "),PY=a("a"),GSr=o("from_config()"),OSr=o(` class
method.`),VSr=l(),j9=a("p"),XSr=o("This class cannot be instantiated directly using "),NMe=a("code"),zSr=o("__init__()"),WSr=o(" (throws an error)."),QSr=l(),zt=a("div"),F(D9.$$.fragment),HSr=l(),jMe=a("p"),USr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JSr=l(),Vc=a("p"),YSr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),KSr=o("not"),ZSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),eRr=o("from_pretrained()"),oRr=o(" to load the model weights."),rRr=l(),F(P5.$$.fragment),tRr=l(),Vr=a("div"),F(G9.$$.fragment),aRr=l(),GMe=a("p"),nRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sRr=l(),bn=a("p"),lRr=o("The model class to instantiate is selected based on the "),OMe=a("code"),iRr=o("model_type"),dRr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),mRr=o("pretrained_model_name_or_path"),gRr=o(":"),hRr=l(),Pe=a("ul"),B5=a("li"),zMe=a("strong"),pRr=o("bart"),_Rr=o(" \u2014 "),IY=a("a"),uRr=o("FlaxBartForConditionalGeneration"),bRr=o(" (BART model)"),vRr=l(),I5=a("li"),WMe=a("strong"),FRr=o("blenderbot"),TRr=o(" \u2014 "),qY=a("a"),MRr=o("FlaxBlenderbotForConditionalGeneration"),ERr=o(" (Blenderbot model)"),CRr=l(),q5=a("li"),QMe=a("strong"),wRr=o("blenderbot-small"),ARr=o(" \u2014 "),NY=a("a"),yRr=o("FlaxBlenderbotSmallForConditionalGeneration"),LRr=o(" (BlenderbotSmall model)"),xRr=l(),N5=a("li"),HMe=a("strong"),$Rr=o("encoder-decoder"),kRr=o(" \u2014 "),jY=a("a"),SRr=o("FlaxEncoderDecoderModel"),RRr=o(" (Encoder decoder model)"),PRr=l(),j5=a("li"),UMe=a("strong"),BRr=o("marian"),IRr=o(" \u2014 "),DY=a("a"),qRr=o("FlaxMarianMTModel"),NRr=o(" (Marian model)"),jRr=l(),D5=a("li"),JMe=a("strong"),DRr=o("mbart"),GRr=o(" \u2014 "),GY=a("a"),ORr=o("FlaxMBartForConditionalGeneration"),VRr=o(" (mBART model)"),XRr=l(),G5=a("li"),YMe=a("strong"),zRr=o("mt5"),WRr=o(" \u2014 "),OY=a("a"),QRr=o("FlaxMT5ForConditionalGeneration"),HRr=o(" (mT5 model)"),URr=l(),O5=a("li"),KMe=a("strong"),JRr=o("pegasus"),YRr=o(" \u2014 "),VY=a("a"),KRr=o("FlaxPegasusForConditionalGeneration"),ZRr=o(" (Pegasus model)"),ePr=l(),V5=a("li"),ZMe=a("strong"),oPr=o("t5"),rPr=o(" \u2014 "),XY=a("a"),tPr=o("FlaxT5ForConditionalGeneration"),aPr=o(" (T5 model)"),nPr=l(),F(X5.$$.fragment),dje=l(),Xc=a("h2"),z5=a("a"),e4e=a("span"),F(O9.$$.fragment),sPr=l(),o4e=a("span"),lPr=o("FlaxAutoModelForSequenceClassification"),cje=l(),_r=a("div"),F(V9.$$.fragment),iPr=l(),zc=a("p"),dPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zY=a("a"),cPr=o("from_pretrained()"),fPr=o(" class method or the "),WY=a("a"),mPr=o("from_config()"),gPr=o(` class
method.`),hPr=l(),X9=a("p"),pPr=o("This class cannot be instantiated directly using "),r4e=a("code"),_Pr=o("__init__()"),uPr=o(" (throws an error)."),bPr=l(),Wt=a("div"),F(z9.$$.fragment),vPr=l(),t4e=a("p"),FPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TPr=l(),Wc=a("p"),MPr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),EPr=o("not"),CPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),wPr=o("from_pretrained()"),APr=o(" to load the model weights."),yPr=l(),F(W5.$$.fragment),LPr=l(),Xr=a("div"),F(W9.$$.fragment),xPr=l(),n4e=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kPr=l(),vn=a("p"),SPr=o("The model class to instantiate is selected based on the "),s4e=a("code"),RPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(":"),jPr=l(),xe=a("ul"),Q5=a("li"),d4e=a("strong"),DPr=o("albert"),GPr=o(" \u2014 "),HY=a("a"),OPr=o("FlaxAlbertForSequenceClassification"),VPr=o(" (ALBERT model)"),XPr=l(),H5=a("li"),c4e=a("strong"),zPr=o("bart"),WPr=o(" \u2014 "),UY=a("a"),QPr=o("FlaxBartForSequenceClassification"),HPr=o(" (BART model)"),UPr=l(),U5=a("li"),f4e=a("strong"),JPr=o("bert"),YPr=o(" \u2014 "),JY=a("a"),KPr=o("FlaxBertForSequenceClassification"),ZPr=o(" (BERT model)"),eBr=l(),J5=a("li"),m4e=a("strong"),oBr=o("big_bird"),rBr=o(" \u2014 "),YY=a("a"),tBr=o("FlaxBigBirdForSequenceClassification"),aBr=o(" (BigBird model)"),nBr=l(),Y5=a("li"),g4e=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),KY=a("a"),iBr=o("FlaxDistilBertForSequenceClassification"),dBr=o(" (DistilBERT model)"),cBr=l(),K5=a("li"),h4e=a("strong"),fBr=o("electra"),mBr=o(" \u2014 "),ZY=a("a"),gBr=o("FlaxElectraForSequenceClassification"),hBr=o(" (ELECTRA model)"),pBr=l(),Z5=a("li"),p4e=a("strong"),_Br=o("mbart"),uBr=o(" \u2014 "),eK=a("a"),bBr=o("FlaxMBartForSequenceClassification"),vBr=o(" (mBART model)"),FBr=l(),ew=a("li"),_4e=a("strong"),TBr=o("roberta"),MBr=o(" \u2014 "),oK=a("a"),EBr=o("FlaxRobertaForSequenceClassification"),CBr=o(" (RoBERTa model)"),wBr=l(),ow=a("li"),u4e=a("strong"),ABr=o("roformer"),yBr=o(" \u2014 "),rK=a("a"),LBr=o("FlaxRoFormerForSequenceClassification"),xBr=o(" (RoFormer model)"),$Br=l(),rw=a("li"),b4e=a("strong"),kBr=o("xlm-roberta"),SBr=o(" \u2014 "),tK=a("a"),RBr=o("FlaxXLMRobertaForSequenceClassification"),PBr=o(" (XLM-RoBERTa model)"),BBr=l(),F(tw.$$.fragment),fje=l(),Qc=a("h2"),aw=a("a"),v4e=a("span"),F(Q9.$$.fragment),IBr=l(),F4e=a("span"),qBr=o("FlaxAutoModelForQuestionAnswering"),mje=l(),ur=a("div"),F(H9.$$.fragment),NBr=l(),Hc=a("p"),jBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aK=a("a"),DBr=o("from_pretrained()"),GBr=o(" class method or the "),nK=a("a"),OBr=o("from_config()"),VBr=o(` class
method.`),XBr=l(),U9=a("p"),zBr=o("This class cannot be instantiated directly using "),T4e=a("code"),WBr=o("__init__()"),QBr=o(" (throws an error)."),HBr=l(),Qt=a("div"),F(J9.$$.fragment),UBr=l(),M4e=a("p"),JBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YBr=l(),Uc=a("p"),KBr=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),ZBr=o("not"),eIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),oIr=o("from_pretrained()"),rIr=o(" to load the model weights."),tIr=l(),F(nw.$$.fragment),aIr=l(),zr=a("div"),F(Y9.$$.fragment),nIr=l(),C4e=a("p"),sIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lIr=l(),Fn=a("p"),iIr=o("The model class to instantiate is selected based on the "),w4e=a("code"),dIr=o("model_type"),cIr=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),gIr=o("pretrained_model_name_or_path"),hIr=o(":"),pIr=l(),$e=a("ul"),sw=a("li"),L4e=a("strong"),_Ir=o("albert"),uIr=o(" \u2014 "),lK=a("a"),bIr=o("FlaxAlbertForQuestionAnswering"),vIr=o(" (ALBERT model)"),FIr=l(),lw=a("li"),x4e=a("strong"),TIr=o("bart"),MIr=o(" \u2014 "),iK=a("a"),EIr=o("FlaxBartForQuestionAnswering"),CIr=o(" (BART model)"),wIr=l(),iw=a("li"),$4e=a("strong"),AIr=o("bert"),yIr=o(" \u2014 "),dK=a("a"),LIr=o("FlaxBertForQuestionAnswering"),xIr=o(" (BERT model)"),$Ir=l(),dw=a("li"),k4e=a("strong"),kIr=o("big_bird"),SIr=o(" \u2014 "),cK=a("a"),RIr=o("FlaxBigBirdForQuestionAnswering"),PIr=o(" (BigBird model)"),BIr=l(),cw=a("li"),S4e=a("strong"),IIr=o("distilbert"),qIr=o(" \u2014 "),fK=a("a"),NIr=o("FlaxDistilBertForQuestionAnswering"),jIr=o(" (DistilBERT model)"),DIr=l(),fw=a("li"),R4e=a("strong"),GIr=o("electra"),OIr=o(" \u2014 "),mK=a("a"),VIr=o("FlaxElectraForQuestionAnswering"),XIr=o(" (ELECTRA model)"),zIr=l(),mw=a("li"),P4e=a("strong"),WIr=o("mbart"),QIr=o(" \u2014 "),gK=a("a"),HIr=o("FlaxMBartForQuestionAnswering"),UIr=o(" (mBART model)"),JIr=l(),gw=a("li"),B4e=a("strong"),YIr=o("roberta"),KIr=o(" \u2014 "),hK=a("a"),ZIr=o("FlaxRobertaForQuestionAnswering"),eqr=o(" (RoBERTa model)"),oqr=l(),hw=a("li"),I4e=a("strong"),rqr=o("roformer"),tqr=o(" \u2014 "),pK=a("a"),aqr=o("FlaxRoFormerForQuestionAnswering"),nqr=o(" (RoFormer model)"),sqr=l(),pw=a("li"),q4e=a("strong"),lqr=o("xlm-roberta"),iqr=o(" \u2014 "),_K=a("a"),dqr=o("FlaxXLMRobertaForQuestionAnswering"),cqr=o(" (XLM-RoBERTa model)"),fqr=l(),F(_w.$$.fragment),gje=l(),Jc=a("h2"),uw=a("a"),N4e=a("span"),F(K9.$$.fragment),mqr=l(),j4e=a("span"),gqr=o("FlaxAutoModelForTokenClassification"),hje=l(),br=a("div"),F(Z9.$$.fragment),hqr=l(),Yc=a("p"),pqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uK=a("a"),_qr=o("from_pretrained()"),uqr=o(" class method or the "),bK=a("a"),bqr=o("from_config()"),vqr=o(` class
method.`),Fqr=l(),ex=a("p"),Tqr=o("This class cannot be instantiated directly using "),D4e=a("code"),Mqr=o("__init__()"),Eqr=o(" (throws an error)."),Cqr=l(),Ht=a("div"),F(ox.$$.fragment),wqr=l(),G4e=a("p"),Aqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yqr=l(),Kc=a("p"),Lqr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),xqr=o("not"),$qr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" to load the model weights."),Rqr=l(),F(bw.$$.fragment),Pqr=l(),Wr=a("div"),F(rx.$$.fragment),Bqr=l(),V4e=a("p"),Iqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qqr=l(),Tn=a("p"),Nqr=o("The model class to instantiate is selected based on the "),X4e=a("code"),jqr=o("model_type"),Dqr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),Gqr=o("pretrained_model_name_or_path"),Oqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),Vqr=o("pretrained_model_name_or_path"),Xqr=o(":"),zqr=l(),De=a("ul"),vw=a("li"),Q4e=a("strong"),Wqr=o("albert"),Qqr=o(" \u2014 "),FK=a("a"),Hqr=o("FlaxAlbertForTokenClassification"),Uqr=o(" (ALBERT model)"),Jqr=l(),Fw=a("li"),H4e=a("strong"),Yqr=o("bert"),Kqr=o(" \u2014 "),TK=a("a"),Zqr=o("FlaxBertForTokenClassification"),eNr=o(" (BERT model)"),oNr=l(),Tw=a("li"),U4e=a("strong"),rNr=o("big_bird"),tNr=o(" \u2014 "),MK=a("a"),aNr=o("FlaxBigBirdForTokenClassification"),nNr=o(" (BigBird model)"),sNr=l(),Mw=a("li"),J4e=a("strong"),lNr=o("distilbert"),iNr=o(" \u2014 "),EK=a("a"),dNr=o("FlaxDistilBertForTokenClassification"),cNr=o(" (DistilBERT model)"),fNr=l(),Ew=a("li"),Y4e=a("strong"),mNr=o("electra"),gNr=o(" \u2014 "),CK=a("a"),hNr=o("FlaxElectraForTokenClassification"),pNr=o(" (ELECTRA model)"),_Nr=l(),Cw=a("li"),K4e=a("strong"),uNr=o("roberta"),bNr=o(" \u2014 "),wK=a("a"),vNr=o("FlaxRobertaForTokenClassification"),FNr=o(" (RoBERTa model)"),TNr=l(),ww=a("li"),Z4e=a("strong"),MNr=o("roformer"),ENr=o(" \u2014 "),AK=a("a"),CNr=o("FlaxRoFormerForTokenClassification"),wNr=o(" (RoFormer model)"),ANr=l(),Aw=a("li"),eEe=a("strong"),yNr=o("xlm-roberta"),LNr=o(" \u2014 "),yK=a("a"),xNr=o("FlaxXLMRobertaForTokenClassification"),$Nr=o(" (XLM-RoBERTa model)"),kNr=l(),F(yw.$$.fragment),pje=l(),Zc=a("h2"),Lw=a("a"),oEe=a("span"),F(tx.$$.fragment),SNr=l(),rEe=a("span"),RNr=o("FlaxAutoModelForMultipleChoice"),_je=l(),vr=a("div"),F(ax.$$.fragment),PNr=l(),ef=a("p"),BNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=a("a"),INr=o("from_pretrained()"),qNr=o(" class method or the "),xK=a("a"),NNr=o("from_config()"),jNr=o(` class
method.`),DNr=l(),nx=a("p"),GNr=o("This class cannot be instantiated directly using "),tEe=a("code"),ONr=o("__init__()"),VNr=o(" (throws an error)."),XNr=l(),Ut=a("div"),F(sx.$$.fragment),zNr=l(),aEe=a("p"),WNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QNr=l(),of=a("p"),HNr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),UNr=o("not"),JNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),YNr=o("from_pretrained()"),KNr=o(" to load the model weights."),ZNr=l(),F(xw.$$.fragment),ejr=l(),Qr=a("div"),F(lx.$$.fragment),ojr=l(),sEe=a("p"),rjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tjr=l(),Mn=a("p"),ajr=o("The model class to instantiate is selected based on the "),lEe=a("code"),njr=o("model_type"),sjr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),djr=o("pretrained_model_name_or_path"),cjr=o(":"),fjr=l(),Ge=a("ul"),$w=a("li"),cEe=a("strong"),mjr=o("albert"),gjr=o(" \u2014 "),kK=a("a"),hjr=o("FlaxAlbertForMultipleChoice"),pjr=o(" (ALBERT model)"),_jr=l(),kw=a("li"),fEe=a("strong"),ujr=o("bert"),bjr=o(" \u2014 "),SK=a("a"),vjr=o("FlaxBertForMultipleChoice"),Fjr=o(" (BERT model)"),Tjr=l(),Sw=a("li"),mEe=a("strong"),Mjr=o("big_bird"),Ejr=o(" \u2014 "),RK=a("a"),Cjr=o("FlaxBigBirdForMultipleChoice"),wjr=o(" (BigBird model)"),Ajr=l(),Rw=a("li"),gEe=a("strong"),yjr=o("distilbert"),Ljr=o(" \u2014 "),PK=a("a"),xjr=o("FlaxDistilBertForMultipleChoice"),$jr=o(" (DistilBERT model)"),kjr=l(),Pw=a("li"),hEe=a("strong"),Sjr=o("electra"),Rjr=o(" \u2014 "),BK=a("a"),Pjr=o("FlaxElectraForMultipleChoice"),Bjr=o(" (ELECTRA model)"),Ijr=l(),Bw=a("li"),pEe=a("strong"),qjr=o("roberta"),Njr=o(" \u2014 "),IK=a("a"),jjr=o("FlaxRobertaForMultipleChoice"),Djr=o(" (RoBERTa model)"),Gjr=l(),Iw=a("li"),_Ee=a("strong"),Ojr=o("roformer"),Vjr=o(" \u2014 "),qK=a("a"),Xjr=o("FlaxRoFormerForMultipleChoice"),zjr=o(" (RoFormer model)"),Wjr=l(),qw=a("li"),uEe=a("strong"),Qjr=o("xlm-roberta"),Hjr=o(" \u2014 "),NK=a("a"),Ujr=o("FlaxXLMRobertaForMultipleChoice"),Jjr=o(" (XLM-RoBERTa model)"),Yjr=l(),F(Nw.$$.fragment),uje=l(),rf=a("h2"),jw=a("a"),bEe=a("span"),F(ix.$$.fragment),Kjr=l(),vEe=a("span"),Zjr=o("FlaxAutoModelForNextSentencePrediction"),bje=l(),Fr=a("div"),F(dx.$$.fragment),eDr=l(),tf=a("p"),oDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=a("a"),rDr=o("from_pretrained()"),tDr=o(" class method or the "),DK=a("a"),aDr=o("from_config()"),nDr=o(` class
method.`),sDr=l(),cx=a("p"),lDr=o("This class cannot be instantiated directly using "),FEe=a("code"),iDr=o("__init__()"),dDr=o(" (throws an error)."),cDr=l(),Jt=a("div"),F(fx.$$.fragment),fDr=l(),TEe=a("p"),mDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gDr=l(),af=a("p"),hDr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),pDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),uDr=o("from_pretrained()"),bDr=o(" to load the model weights."),vDr=l(),F(Dw.$$.fragment),FDr=l(),Hr=a("div"),F(mx.$$.fragment),TDr=l(),EEe=a("p"),MDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EDr=l(),En=a("p"),CDr=o("The model class to instantiate is selected based on the "),CEe=a("code"),wDr=o("model_type"),ADr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(":"),kDr=l(),yEe=a("ul"),Gw=a("li"),LEe=a("strong"),SDr=o("bert"),RDr=o(" \u2014 "),OK=a("a"),PDr=o("FlaxBertForNextSentencePrediction"),BDr=o(" (BERT model)"),IDr=l(),F(Ow.$$.fragment),vje=l(),nf=a("h2"),Vw=a("a"),xEe=a("span"),F(gx.$$.fragment),qDr=l(),$Ee=a("span"),NDr=o("FlaxAutoModelForImageClassification"),Fje=l(),Tr=a("div"),F(hx.$$.fragment),jDr=l(),sf=a("p"),DDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VK=a("a"),GDr=o("from_pretrained()"),ODr=o(" class method or the "),XK=a("a"),VDr=o("from_config()"),XDr=o(` class
method.`),zDr=l(),px=a("p"),WDr=o("This class cannot be instantiated directly using "),kEe=a("code"),QDr=o("__init__()"),HDr=o(" (throws an error)."),UDr=l(),Yt=a("div"),F(_x.$$.fragment),JDr=l(),SEe=a("p"),YDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KDr=l(),lf=a("p"),ZDr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),eGr=o("not"),oGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),rGr=o("from_pretrained()"),tGr=o(" to load the model weights."),aGr=l(),F(Xw.$$.fragment),nGr=l(),Ur=a("div"),F(ux.$$.fragment),sGr=l(),PEe=a("p"),lGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iGr=l(),Cn=a("p"),dGr=o("The model class to instantiate is selected based on the "),BEe=a("code"),cGr=o("model_type"),fGr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),mGr=o("pretrained_model_name_or_path"),gGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),hGr=o("pretrained_model_name_or_path"),pGr=o(":"),_Gr=l(),bx=a("ul"),zw=a("li"),NEe=a("strong"),uGr=o("beit"),bGr=o(" \u2014 "),WK=a("a"),vGr=o("FlaxBeitForImageClassification"),FGr=o(" (BEiT model)"),TGr=l(),Ww=a("li"),jEe=a("strong"),MGr=o("vit"),EGr=o(" \u2014 "),QK=a("a"),CGr=o("FlaxViTForImageClassification"),wGr=o(" (ViT model)"),AGr=l(),F(Qw.$$.fragment),Tje=l(),df=a("h2"),Hw=a("a"),DEe=a("span"),F(vx.$$.fragment),yGr=l(),GEe=a("span"),LGr=o("FlaxAutoModelForVision2Seq"),Mje=l(),Mr=a("div"),F(Fx.$$.fragment),xGr=l(),cf=a("p"),$Gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HK=a("a"),kGr=o("from_pretrained()"),SGr=o(" class method or the "),UK=a("a"),RGr=o("from_config()"),PGr=o(` class
method.`),BGr=l(),Tx=a("p"),IGr=o("This class cannot be instantiated directly using "),OEe=a("code"),qGr=o("__init__()"),NGr=o(" (throws an error)."),jGr=l(),Kt=a("div"),F(Mx.$$.fragment),DGr=l(),VEe=a("p"),GGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OGr=l(),ff=a("p"),VGr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),XGr=o("not"),zGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),WGr=o("from_pretrained()"),QGr=o(" to load the model weights."),HGr=l(),F(Uw.$$.fragment),UGr=l(),Jr=a("div"),F(Ex.$$.fragment),JGr=l(),zEe=a("p"),YGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KGr=l(),wn=a("p"),ZGr=o("The model class to instantiate is selected based on the "),WEe=a("code"),eOr=o("model_type"),oOr=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),rOr=o("pretrained_model_name_or_path"),tOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),aOr=o("pretrained_model_name_or_path"),nOr=o(":"),sOr=l(),UEe=a("ul"),Jw=a("li"),JEe=a("strong"),lOr=o("vision-encoder-decoder"),iOr=o(" \u2014 "),YK=a("a"),dOr=o("FlaxVisionEncoderDecoderModel"),cOr=o(" (Vision Encoder decoder model)"),fOr=l(),F(Yw.$$.fragment),this.h()},l(f){const u=x9t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Cx=s(p);m=n(Cx,"A",{id:!0,class:!0,href:!0});var YEe=s(m);_=n(YEe,"SPAN",{});var KEe=s(_);T(d.$$.fragment,KEe),KEe.forEach(t),YEe.forEach(t),h=i(Cx),Mo=n(Cx,"SPAN",{});var ZEe=s(Mo);fi=r(ZEe,"Auto Classes"),ZEe.forEach(t),Cx.forEach(t),pf=i(f),rt=n(f,"P",{});var wx=s(rt);mi=r(wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(wx,"CODE",{});var eCe=s(gi);p6=r(eCe,"from_pretrained()"),eCe.forEach(t),_f=r(wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var oCe=s(yn);_6=r(oCe,"AutoConfig"),oCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var rCe=s(xn);u6=r(rCe,"AutoModel"),rCe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var tCe=s($n);b6=r(tCe,"AutoTokenizer"),tCe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ax=s(Ae);q$=r(Ax,"will create a model that is an instance of "),ui=n(Ax,"A",{href:!0});var aCe=s(ui);N$=r(aCe,"BertModel"),aCe.forEach(t),j$=r(Ax,"."),Ax.forEach(t),Eo=i(f),wa=n(f,"P",{});var yx=s(wa);D$=r(yx,"There is one class of "),bf=n(yx,"CODE",{});var nCe=s(bf);G$=r(nCe,"AutoModel"),nCe.forEach(t),kGe=r(yx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yx.forEach(t),Fqe=i(f),bi=n(f,"H2",{class:!0});var Lx=s(bi);vf=n(Lx,"A",{id:!0,class:!0,href:!0});var sCe=s(vf);Xee=n(sCe,"SPAN",{});var lCe=s(Xee);T(v6.$$.fragment,lCe),lCe.forEach(t),sCe.forEach(t),SGe=i(Lx),zee=n(Lx,"SPAN",{});var iCe=s(zee);RGe=r(iCe,"Extending the Auto Classes"),iCe.forEach(t),Lx.forEach(t),Tqe=i(f),kn=n(f,"P",{});var mf=s(kn);PGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wee=n(mf,"CODE",{});var dCe=s(Wee);BGe=r(dCe,"NewModel"),dCe.forEach(t),IGe=r(mf,", make sure you have a "),Qee=n(mf,"CODE",{});var cCe=s(Qee);qGe=r(cCe,"NewModelConfig"),cCe.forEach(t),NGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Mqe=i(f),T(F6.$$.fragment,f),Eqe=i(f),O$=n(f,"P",{});var fCe=s(O$);jGe=r(fCe,"You will then be able to use the auto classes like you would usually do!"),fCe.forEach(t),Cqe=i(f),T(Ff.$$.fragment,f),wqe=i(f),vi=n(f,"H2",{class:!0});var xx=s(vi);Tf=n(xx,"A",{id:!0,class:!0,href:!0});var mCe=s(Tf);Hee=n(mCe,"SPAN",{});var gCe=s(Hee);T(T6.$$.fragment,gCe),gCe.forEach(t),mCe.forEach(t),DGe=i(xx),Uee=n(xx,"SPAN",{});var hCe=s(Uee);GGe=r(hCe,"AutoConfig"),hCe.forEach(t),xx.forEach(t),Aqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(M6.$$.fragment,et),OGe=i(et),E6=n(et,"P",{});var $x=s(E6);VGe=r($x,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V$=n($x,"A",{href:!0});var pCe=s(V$);XGe=r(pCe,"from_pretrained()"),pCe.forEach(t),zGe=r($x," class method."),$x.forEach(t),WGe=i(et),C6=n(et,"P",{});var kx=s(C6);QGe=r(kx,"This class cannot be instantiated directly using "),Jee=n(kx,"CODE",{});var _Ce=s(Jee);HGe=r(_Ce,"__init__()"),_Ce.forEach(t),UGe=r(kx," (throws an error)."),kx.forEach(t),JGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(w6.$$.fragment,ot),YGe=i(ot),Yee=n(ot,"P",{});var uCe=s(Yee);KGe=r(uCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),uCe.forEach(t),ZGe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);eOe=r(gf,"The configuration class to instantiate is selected based on the "),Kee=n(gf,"CODE",{});var bCe=s(Kee);oOe=r(bCe,"model_type"),bCe.forEach(t),rOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zee=n(gf,"CODE",{});var vCe=s(Zee);tOe=r(vCe,"pretrained_model_name_or_path"),vCe.forEach(t),aOe=r(gf,":"),gf.forEach(t),nOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var Kw=s(Mf);eoe=n(Kw,"STRONG",{});var FCe=s(eoe);sOe=r(FCe,"albert"),FCe.forEach(t),lOe=r(Kw," \u2014 "),X$=n(Kw,"A",{href:!0});var TCe=s(X$);iOe=r(TCe,"AlbertConfig"),TCe.forEach(t),dOe=r(Kw," (ALBERT model)"),Kw.forEach(t),cOe=i(y),Ef=n(y,"LI",{});var Zw=s(Ef);ooe=n(Zw,"STRONG",{});var MCe=s(ooe);fOe=r(MCe,"bart"),MCe.forEach(t),mOe=r(Zw," \u2014 "),z$=n(Zw,"A",{href:!0});var ECe=s(z$);gOe=r(ECe,"BartConfig"),ECe.forEach(t),hOe=r(Zw," (BART model)"),Zw.forEach(t),pOe=i(y),Cf=n(y,"LI",{});var e0=s(Cf);roe=n(e0,"STRONG",{});var CCe=s(roe);_Oe=r(CCe,"beit"),CCe.forEach(t),uOe=r(e0," \u2014 "),W$=n(e0,"A",{href:!0});var wCe=s(W$);bOe=r(wCe,"BeitConfig"),wCe.forEach(t),vOe=r(e0," (BEiT model)"),e0.forEach(t),FOe=i(y),wf=n(y,"LI",{});var o0=s(wf);toe=n(o0,"STRONG",{});var ACe=s(toe);TOe=r(ACe,"bert"),ACe.forEach(t),MOe=r(o0," \u2014 "),Q$=n(o0,"A",{href:!0});var yCe=s(Q$);EOe=r(yCe,"BertConfig"),yCe.forEach(t),COe=r(o0," (BERT model)"),o0.forEach(t),wOe=i(y),Af=n(y,"LI",{});var r0=s(Af);aoe=n(r0,"STRONG",{});var LCe=s(aoe);AOe=r(LCe,"bert-generation"),LCe.forEach(t),yOe=r(r0," \u2014 "),H$=n(r0,"A",{href:!0});var xCe=s(H$);LOe=r(xCe,"BertGenerationConfig"),xCe.forEach(t),xOe=r(r0," (Bert Generation model)"),r0.forEach(t),$Oe=i(y),yf=n(y,"LI",{});var t0=s(yf);noe=n(t0,"STRONG",{});var $Ce=s(noe);kOe=r($Ce,"big_bird"),$Ce.forEach(t),SOe=r(t0," \u2014 "),U$=n(t0,"A",{href:!0});var kCe=s(U$);ROe=r(kCe,"BigBirdConfig"),kCe.forEach(t),POe=r(t0," (BigBird model)"),t0.forEach(t),BOe=i(y),Lf=n(y,"LI",{});var a0=s(Lf);soe=n(a0,"STRONG",{});var SCe=s(soe);IOe=r(SCe,"bigbird_pegasus"),SCe.forEach(t),qOe=r(a0," \u2014 "),J$=n(a0,"A",{href:!0});var RCe=s(J$);NOe=r(RCe,"BigBirdPegasusConfig"),RCe.forEach(t),jOe=r(a0," (BigBirdPegasus model)"),a0.forEach(t),DOe=i(y),xf=n(y,"LI",{});var n0=s(xf);loe=n(n0,"STRONG",{});var PCe=s(loe);GOe=r(PCe,"blenderbot"),PCe.forEach(t),OOe=r(n0," \u2014 "),Y$=n(n0,"A",{href:!0});var BCe=s(Y$);VOe=r(BCe,"BlenderbotConfig"),BCe.forEach(t),XOe=r(n0," (Blenderbot model)"),n0.forEach(t),zOe=i(y),$f=n(y,"LI",{});var s0=s($f);ioe=n(s0,"STRONG",{});var ICe=s(ioe);WOe=r(ICe,"blenderbot-small"),ICe.forEach(t),QOe=r(s0," \u2014 "),K$=n(s0,"A",{href:!0});var qCe=s(K$);HOe=r(qCe,"BlenderbotSmallConfig"),qCe.forEach(t),UOe=r(s0," (BlenderbotSmall model)"),s0.forEach(t),JOe=i(y),kf=n(y,"LI",{});var l0=s(kf);doe=n(l0,"STRONG",{});var NCe=s(doe);YOe=r(NCe,"camembert"),NCe.forEach(t),KOe=r(l0," \u2014 "),Z$=n(l0,"A",{href:!0});var jCe=s(Z$);ZOe=r(jCe,"CamembertConfig"),jCe.forEach(t),eVe=r(l0," (CamemBERT model)"),l0.forEach(t),oVe=i(y),Sf=n(y,"LI",{});var i0=s(Sf);coe=n(i0,"STRONG",{});var DCe=s(coe);rVe=r(DCe,"canine"),DCe.forEach(t),tVe=r(i0," \u2014 "),ek=n(i0,"A",{href:!0});var GCe=s(ek);aVe=r(GCe,"CanineConfig"),GCe.forEach(t),nVe=r(i0," (Canine model)"),i0.forEach(t),sVe=i(y),Rf=n(y,"LI",{});var d0=s(Rf);foe=n(d0,"STRONG",{});var OCe=s(foe);lVe=r(OCe,"clip"),OCe.forEach(t),iVe=r(d0," \u2014 "),ok=n(d0,"A",{href:!0});var VCe=s(ok);dVe=r(VCe,"CLIPConfig"),VCe.forEach(t),cVe=r(d0," (CLIP model)"),d0.forEach(t),fVe=i(y),Pf=n(y,"LI",{});var c0=s(Pf);moe=n(c0,"STRONG",{});var XCe=s(moe);mVe=r(XCe,"convbert"),XCe.forEach(t),gVe=r(c0," \u2014 "),rk=n(c0,"A",{href:!0});var zCe=s(rk);hVe=r(zCe,"ConvBertConfig"),zCe.forEach(t),pVe=r(c0," (ConvBERT model)"),c0.forEach(t),_Ve=i(y),Bf=n(y,"LI",{});var f0=s(Bf);goe=n(f0,"STRONG",{});var WCe=s(goe);uVe=r(WCe,"convnext"),WCe.forEach(t),bVe=r(f0," \u2014 "),tk=n(f0,"A",{href:!0});var QCe=s(tk);vVe=r(QCe,"ConvNextConfig"),QCe.forEach(t),FVe=r(f0," (ConvNext model)"),f0.forEach(t),TVe=i(y),If=n(y,"LI",{});var m0=s(If);hoe=n(m0,"STRONG",{});var HCe=s(hoe);MVe=r(HCe,"ctrl"),HCe.forEach(t),EVe=r(m0," \u2014 "),ak=n(m0,"A",{href:!0});var UCe=s(ak);CVe=r(UCe,"CTRLConfig"),UCe.forEach(t),wVe=r(m0," (CTRL model)"),m0.forEach(t),AVe=i(y),qf=n(y,"LI",{});var g0=s(qf);poe=n(g0,"STRONG",{});var JCe=s(poe);yVe=r(JCe,"cvt"),JCe.forEach(t),LVe=r(g0," \u2014 "),nk=n(g0,"A",{href:!0});var YCe=s(nk);xVe=r(YCe,"CvtConfig"),YCe.forEach(t),$Ve=r(g0," (CvT model)"),g0.forEach(t),kVe=i(y),Nf=n(y,"LI",{});var h0=s(Nf);_oe=n(h0,"STRONG",{});var KCe=s(_oe);SVe=r(KCe,"data2vec-audio"),KCe.forEach(t),RVe=r(h0," \u2014 "),sk=n(h0,"A",{href:!0});var ZCe=s(sk);PVe=r(ZCe,"Data2VecAudioConfig"),ZCe.forEach(t),BVe=r(h0," (Data2VecAudio model)"),h0.forEach(t),IVe=i(y),jf=n(y,"LI",{});var p0=s(jf);uoe=n(p0,"STRONG",{});var e5e=s(uoe);qVe=r(e5e,"data2vec-text"),e5e.forEach(t),NVe=r(p0," \u2014 "),lk=n(p0,"A",{href:!0});var o5e=s(lk);jVe=r(o5e,"Data2VecTextConfig"),o5e.forEach(t),DVe=r(p0," (Data2VecText model)"),p0.forEach(t),GVe=i(y),Df=n(y,"LI",{});var _0=s(Df);boe=n(_0,"STRONG",{});var r5e=s(boe);OVe=r(r5e,"data2vec-vision"),r5e.forEach(t),VVe=r(_0," \u2014 "),ik=n(_0,"A",{href:!0});var t5e=s(ik);XVe=r(t5e,"Data2VecVisionConfig"),t5e.forEach(t),zVe=r(_0," (Data2VecVision model)"),_0.forEach(t),WVe=i(y),Gf=n(y,"LI",{});var u0=s(Gf);voe=n(u0,"STRONG",{});var a5e=s(voe);QVe=r(a5e,"deberta"),a5e.forEach(t),HVe=r(u0," \u2014 "),dk=n(u0,"A",{href:!0});var n5e=s(dk);UVe=r(n5e,"DebertaConfig"),n5e.forEach(t),JVe=r(u0," (DeBERTa model)"),u0.forEach(t),YVe=i(y),Of=n(y,"LI",{});var b0=s(Of);Foe=n(b0,"STRONG",{});var s5e=s(Foe);KVe=r(s5e,"deberta-v2"),s5e.forEach(t),ZVe=r(b0," \u2014 "),ck=n(b0,"A",{href:!0});var l5e=s(ck);eXe=r(l5e,"DebertaV2Config"),l5e.forEach(t),oXe=r(b0," (DeBERTa-v2 model)"),b0.forEach(t),rXe=i(y),Vf=n(y,"LI",{});var v0=s(Vf);Toe=n(v0,"STRONG",{});var i5e=s(Toe);tXe=r(i5e,"decision_transformer"),i5e.forEach(t),aXe=r(v0," \u2014 "),fk=n(v0,"A",{href:!0});var d5e=s(fk);nXe=r(d5e,"DecisionTransformerConfig"),d5e.forEach(t),sXe=r(v0," (Decision Transformer model)"),v0.forEach(t),lXe=i(y),Xf=n(y,"LI",{});var F0=s(Xf);Moe=n(F0,"STRONG",{});var c5e=s(Moe);iXe=r(c5e,"deit"),c5e.forEach(t),dXe=r(F0," \u2014 "),mk=n(F0,"A",{href:!0});var gOr=s(mk);cXe=r(gOr,"DeiTConfig"),gOr.forEach(t),fXe=r(F0," (DeiT model)"),F0.forEach(t),mXe=i(y),zf=n(y,"LI",{});var f5e=s(zf);Eoe=n(f5e,"STRONG",{});var hOr=s(Eoe);gXe=r(hOr,"detr"),hOr.forEach(t),hXe=r(f5e," \u2014 "),gk=n(f5e,"A",{href:!0});var pOr=s(gk);pXe=r(pOr,"DetrConfig"),pOr.forEach(t),_Xe=r(f5e," (DETR model)"),f5e.forEach(t),uXe=i(y),Wf=n(y,"LI",{});var m5e=s(Wf);Coe=n(m5e,"STRONG",{});var _Or=s(Coe);bXe=r(_Or,"distilbert"),_Or.forEach(t),vXe=r(m5e," \u2014 "),hk=n(m5e,"A",{href:!0});var uOr=s(hk);FXe=r(uOr,"DistilBertConfig"),uOr.forEach(t),TXe=r(m5e," (DistilBERT model)"),m5e.forEach(t),MXe=i(y),Qf=n(y,"LI",{});var g5e=s(Qf);woe=n(g5e,"STRONG",{});var bOr=s(woe);EXe=r(bOr,"dpr"),bOr.forEach(t),CXe=r(g5e," \u2014 "),pk=n(g5e,"A",{href:!0});var vOr=s(pk);wXe=r(vOr,"DPRConfig"),vOr.forEach(t),AXe=r(g5e," (DPR model)"),g5e.forEach(t),yXe=i(y),Hf=n(y,"LI",{});var h5e=s(Hf);Aoe=n(h5e,"STRONG",{});var FOr=s(Aoe);LXe=r(FOr,"dpt"),FOr.forEach(t),xXe=r(h5e," \u2014 "),_k=n(h5e,"A",{href:!0});var TOr=s(_k);$Xe=r(TOr,"DPTConfig"),TOr.forEach(t),kXe=r(h5e," (DPT model)"),h5e.forEach(t),SXe=i(y),Uf=n(y,"LI",{});var p5e=s(Uf);yoe=n(p5e,"STRONG",{});var MOr=s(yoe);RXe=r(MOr,"electra"),MOr.forEach(t),PXe=r(p5e," \u2014 "),uk=n(p5e,"A",{href:!0});var EOr=s(uk);BXe=r(EOr,"ElectraConfig"),EOr.forEach(t),IXe=r(p5e," (ELECTRA model)"),p5e.forEach(t),qXe=i(y),Jf=n(y,"LI",{});var _5e=s(Jf);Loe=n(_5e,"STRONG",{});var COr=s(Loe);NXe=r(COr,"encoder-decoder"),COr.forEach(t),jXe=r(_5e," \u2014 "),bk=n(_5e,"A",{href:!0});var wOr=s(bk);DXe=r(wOr,"EncoderDecoderConfig"),wOr.forEach(t),GXe=r(_5e," (Encoder decoder model)"),_5e.forEach(t),OXe=i(y),Yf=n(y,"LI",{});var u5e=s(Yf);xoe=n(u5e,"STRONG",{});var AOr=s(xoe);VXe=r(AOr,"flaubert"),AOr.forEach(t),XXe=r(u5e," \u2014 "),vk=n(u5e,"A",{href:!0});var yOr=s(vk);zXe=r(yOr,"FlaubertConfig"),yOr.forEach(t),WXe=r(u5e," (FlauBERT model)"),u5e.forEach(t),QXe=i(y),Kf=n(y,"LI",{});var b5e=s(Kf);$oe=n(b5e,"STRONG",{});var LOr=s($oe);HXe=r(LOr,"flava"),LOr.forEach(t),UXe=r(b5e," \u2014 "),Fk=n(b5e,"A",{href:!0});var xOr=s(Fk);JXe=r(xOr,"FlavaConfig"),xOr.forEach(t),YXe=r(b5e," (Flava model)"),b5e.forEach(t),KXe=i(y),Zf=n(y,"LI",{});var v5e=s(Zf);koe=n(v5e,"STRONG",{});var $Or=s(koe);ZXe=r($Or,"fnet"),$Or.forEach(t),eze=r(v5e," \u2014 "),Tk=n(v5e,"A",{href:!0});var kOr=s(Tk);oze=r(kOr,"FNetConfig"),kOr.forEach(t),rze=r(v5e," (FNet model)"),v5e.forEach(t),tze=i(y),em=n(y,"LI",{});var F5e=s(em);Soe=n(F5e,"STRONG",{});var SOr=s(Soe);aze=r(SOr,"fsmt"),SOr.forEach(t),nze=r(F5e," \u2014 "),Mk=n(F5e,"A",{href:!0});var ROr=s(Mk);sze=r(ROr,"FSMTConfig"),ROr.forEach(t),lze=r(F5e," (FairSeq Machine-Translation model)"),F5e.forEach(t),ize=i(y),om=n(y,"LI",{});var T5e=s(om);Roe=n(T5e,"STRONG",{});var POr=s(Roe);dze=r(POr,"funnel"),POr.forEach(t),cze=r(T5e," \u2014 "),Ek=n(T5e,"A",{href:!0});var BOr=s(Ek);fze=r(BOr,"FunnelConfig"),BOr.forEach(t),mze=r(T5e," (Funnel Transformer model)"),T5e.forEach(t),gze=i(y),rm=n(y,"LI",{});var M5e=s(rm);Poe=n(M5e,"STRONG",{});var IOr=s(Poe);hze=r(IOr,"glpn"),IOr.forEach(t),pze=r(M5e," \u2014 "),Ck=n(M5e,"A",{href:!0});var qOr=s(Ck);_ze=r(qOr,"GLPNConfig"),qOr.forEach(t),uze=r(M5e," (GLPN model)"),M5e.forEach(t),bze=i(y),tm=n(y,"LI",{});var E5e=s(tm);Boe=n(E5e,"STRONG",{});var NOr=s(Boe);vze=r(NOr,"gpt2"),NOr.forEach(t),Fze=r(E5e," \u2014 "),wk=n(E5e,"A",{href:!0});var jOr=s(wk);Tze=r(jOr,"GPT2Config"),jOr.forEach(t),Mze=r(E5e," (OpenAI GPT-2 model)"),E5e.forEach(t),Eze=i(y),am=n(y,"LI",{});var C5e=s(am);Ioe=n(C5e,"STRONG",{});var DOr=s(Ioe);Cze=r(DOr,"gpt_neo"),DOr.forEach(t),wze=r(C5e," \u2014 "),Ak=n(C5e,"A",{href:!0});var GOr=s(Ak);Aze=r(GOr,"GPTNeoConfig"),GOr.forEach(t),yze=r(C5e," (GPT Neo model)"),C5e.forEach(t),Lze=i(y),nm=n(y,"LI",{});var w5e=s(nm);qoe=n(w5e,"STRONG",{});var OOr=s(qoe);xze=r(OOr,"gptj"),OOr.forEach(t),$ze=r(w5e," \u2014 "),yk=n(w5e,"A",{href:!0});var VOr=s(yk);kze=r(VOr,"GPTJConfig"),VOr.forEach(t),Sze=r(w5e," (GPT-J model)"),w5e.forEach(t),Rze=i(y),sm=n(y,"LI",{});var A5e=s(sm);Noe=n(A5e,"STRONG",{});var XOr=s(Noe);Pze=r(XOr,"groupvit"),XOr.forEach(t),Bze=r(A5e," \u2014 "),Lk=n(A5e,"A",{href:!0});var zOr=s(Lk);Ize=r(zOr,"GroupViTConfig"),zOr.forEach(t),qze=r(A5e," (GroupViT model)"),A5e.forEach(t),Nze=i(y),lm=n(y,"LI",{});var y5e=s(lm);joe=n(y5e,"STRONG",{});var WOr=s(joe);jze=r(WOr,"hubert"),WOr.forEach(t),Dze=r(y5e," \u2014 "),xk=n(y5e,"A",{href:!0});var QOr=s(xk);Gze=r(QOr,"HubertConfig"),QOr.forEach(t),Oze=r(y5e," (Hubert model)"),y5e.forEach(t),Vze=i(y),im=n(y,"LI",{});var L5e=s(im);Doe=n(L5e,"STRONG",{});var HOr=s(Doe);Xze=r(HOr,"ibert"),HOr.forEach(t),zze=r(L5e," \u2014 "),$k=n(L5e,"A",{href:!0});var UOr=s($k);Wze=r(UOr,"IBertConfig"),UOr.forEach(t),Qze=r(L5e," (I-BERT model)"),L5e.forEach(t),Hze=i(y),dm=n(y,"LI",{});var x5e=s(dm);Goe=n(x5e,"STRONG",{});var JOr=s(Goe);Uze=r(JOr,"imagegpt"),JOr.forEach(t),Jze=r(x5e," \u2014 "),kk=n(x5e,"A",{href:!0});var YOr=s(kk);Yze=r(YOr,"ImageGPTConfig"),YOr.forEach(t),Kze=r(x5e," (ImageGPT model)"),x5e.forEach(t),Zze=i(y),cm=n(y,"LI",{});var $5e=s(cm);Ooe=n($5e,"STRONG",{});var KOr=s(Ooe);eWe=r(KOr,"layoutlm"),KOr.forEach(t),oWe=r($5e," \u2014 "),Sk=n($5e,"A",{href:!0});var ZOr=s(Sk);rWe=r(ZOr,"LayoutLMConfig"),ZOr.forEach(t),tWe=r($5e," (LayoutLM model)"),$5e.forEach(t),aWe=i(y),fm=n(y,"LI",{});var k5e=s(fm);Voe=n(k5e,"STRONG",{});var eVr=s(Voe);nWe=r(eVr,"layoutlmv2"),eVr.forEach(t),sWe=r(k5e," \u2014 "),Rk=n(k5e,"A",{href:!0});var oVr=s(Rk);lWe=r(oVr,"LayoutLMv2Config"),oVr.forEach(t),iWe=r(k5e," (LayoutLMv2 model)"),k5e.forEach(t),dWe=i(y),mm=n(y,"LI",{});var S5e=s(mm);Xoe=n(S5e,"STRONG",{});var rVr=s(Xoe);cWe=r(rVr,"led"),rVr.forEach(t),fWe=r(S5e," \u2014 "),Pk=n(S5e,"A",{href:!0});var tVr=s(Pk);mWe=r(tVr,"LEDConfig"),tVr.forEach(t),gWe=r(S5e," (LED model)"),S5e.forEach(t),hWe=i(y),gm=n(y,"LI",{});var R5e=s(gm);zoe=n(R5e,"STRONG",{});var aVr=s(zoe);pWe=r(aVr,"longformer"),aVr.forEach(t),_We=r(R5e," \u2014 "),Bk=n(R5e,"A",{href:!0});var nVr=s(Bk);uWe=r(nVr,"LongformerConfig"),nVr.forEach(t),bWe=r(R5e," (Longformer model)"),R5e.forEach(t),vWe=i(y),hm=n(y,"LI",{});var P5e=s(hm);Woe=n(P5e,"STRONG",{});var sVr=s(Woe);FWe=r(sVr,"luke"),sVr.forEach(t),TWe=r(P5e," \u2014 "),Ik=n(P5e,"A",{href:!0});var lVr=s(Ik);MWe=r(lVr,"LukeConfig"),lVr.forEach(t),EWe=r(P5e," (LUKE model)"),P5e.forEach(t),CWe=i(y),pm=n(y,"LI",{});var B5e=s(pm);Qoe=n(B5e,"STRONG",{});var iVr=s(Qoe);wWe=r(iVr,"lxmert"),iVr.forEach(t),AWe=r(B5e," \u2014 "),qk=n(B5e,"A",{href:!0});var dVr=s(qk);yWe=r(dVr,"LxmertConfig"),dVr.forEach(t),LWe=r(B5e," (LXMERT model)"),B5e.forEach(t),xWe=i(y),_m=n(y,"LI",{});var I5e=s(_m);Hoe=n(I5e,"STRONG",{});var cVr=s(Hoe);$We=r(cVr,"m2m_100"),cVr.forEach(t),kWe=r(I5e," \u2014 "),Nk=n(I5e,"A",{href:!0});var fVr=s(Nk);SWe=r(fVr,"M2M100Config"),fVr.forEach(t),RWe=r(I5e," (M2M100 model)"),I5e.forEach(t),PWe=i(y),um=n(y,"LI",{});var q5e=s(um);Uoe=n(q5e,"STRONG",{});var mVr=s(Uoe);BWe=r(mVr,"marian"),mVr.forEach(t),IWe=r(q5e," \u2014 "),jk=n(q5e,"A",{href:!0});var gVr=s(jk);qWe=r(gVr,"MarianConfig"),gVr.forEach(t),NWe=r(q5e," (Marian model)"),q5e.forEach(t),jWe=i(y),bm=n(y,"LI",{});var N5e=s(bm);Joe=n(N5e,"STRONG",{});var hVr=s(Joe);DWe=r(hVr,"maskformer"),hVr.forEach(t),GWe=r(N5e," \u2014 "),Dk=n(N5e,"A",{href:!0});var pVr=s(Dk);OWe=r(pVr,"MaskFormerConfig"),pVr.forEach(t),VWe=r(N5e," (MaskFormer model)"),N5e.forEach(t),XWe=i(y),vm=n(y,"LI",{});var j5e=s(vm);Yoe=n(j5e,"STRONG",{});var _Vr=s(Yoe);zWe=r(_Vr,"mbart"),_Vr.forEach(t),WWe=r(j5e," \u2014 "),Gk=n(j5e,"A",{href:!0});var uVr=s(Gk);QWe=r(uVr,"MBartConfig"),uVr.forEach(t),HWe=r(j5e," (mBART model)"),j5e.forEach(t),UWe=i(y),Fm=n(y,"LI",{});var D5e=s(Fm);Koe=n(D5e,"STRONG",{});var bVr=s(Koe);JWe=r(bVr,"megatron-bert"),bVr.forEach(t),YWe=r(D5e," \u2014 "),Ok=n(D5e,"A",{href:!0});var vVr=s(Ok);KWe=r(vVr,"MegatronBertConfig"),vVr.forEach(t),ZWe=r(D5e," (MegatronBert model)"),D5e.forEach(t),eQe=i(y),Tm=n(y,"LI",{});var G5e=s(Tm);Zoe=n(G5e,"STRONG",{});var FVr=s(Zoe);oQe=r(FVr,"mobilebert"),FVr.forEach(t),rQe=r(G5e," \u2014 "),Vk=n(G5e,"A",{href:!0});var TVr=s(Vk);tQe=r(TVr,"MobileBertConfig"),TVr.forEach(t),aQe=r(G5e," (MobileBERT model)"),G5e.forEach(t),nQe=i(y),Mm=n(y,"LI",{});var O5e=s(Mm);ere=n(O5e,"STRONG",{});var MVr=s(ere);sQe=r(MVr,"mpnet"),MVr.forEach(t),lQe=r(O5e," \u2014 "),Xk=n(O5e,"A",{href:!0});var EVr=s(Xk);iQe=r(EVr,"MPNetConfig"),EVr.forEach(t),dQe=r(O5e," (MPNet model)"),O5e.forEach(t),cQe=i(y),Em=n(y,"LI",{});var V5e=s(Em);ore=n(V5e,"STRONG",{});var CVr=s(ore);fQe=r(CVr,"mt5"),CVr.forEach(t),mQe=r(V5e," \u2014 "),zk=n(V5e,"A",{href:!0});var wVr=s(zk);gQe=r(wVr,"MT5Config"),wVr.forEach(t),hQe=r(V5e," (mT5 model)"),V5e.forEach(t),pQe=i(y),Cm=n(y,"LI",{});var X5e=s(Cm);rre=n(X5e,"STRONG",{});var AVr=s(rre);_Qe=r(AVr,"nystromformer"),AVr.forEach(t),uQe=r(X5e," \u2014 "),Wk=n(X5e,"A",{href:!0});var yVr=s(Wk);bQe=r(yVr,"NystromformerConfig"),yVr.forEach(t),vQe=r(X5e," (Nystromformer model)"),X5e.forEach(t),FQe=i(y),wm=n(y,"LI",{});var z5e=s(wm);tre=n(z5e,"STRONG",{});var LVr=s(tre);TQe=r(LVr,"openai-gpt"),LVr.forEach(t),MQe=r(z5e," \u2014 "),Qk=n(z5e,"A",{href:!0});var xVr=s(Qk);EQe=r(xVr,"OpenAIGPTConfig"),xVr.forEach(t),CQe=r(z5e," (OpenAI GPT model)"),z5e.forEach(t),wQe=i(y),Am=n(y,"LI",{});var W5e=s(Am);are=n(W5e,"STRONG",{});var $Vr=s(are);AQe=r($Vr,"opt"),$Vr.forEach(t),yQe=r(W5e," \u2014 "),Hk=n(W5e,"A",{href:!0});var kVr=s(Hk);LQe=r(kVr,"OPTConfig"),kVr.forEach(t),xQe=r(W5e," (OPT model)"),W5e.forEach(t),$Qe=i(y),ym=n(y,"LI",{});var Q5e=s(ym);nre=n(Q5e,"STRONG",{});var SVr=s(nre);kQe=r(SVr,"pegasus"),SVr.forEach(t),SQe=r(Q5e," \u2014 "),Uk=n(Q5e,"A",{href:!0});var RVr=s(Uk);RQe=r(RVr,"PegasusConfig"),RVr.forEach(t),PQe=r(Q5e," (Pegasus model)"),Q5e.forEach(t),BQe=i(y),Lm=n(y,"LI",{});var H5e=s(Lm);sre=n(H5e,"STRONG",{});var PVr=s(sre);IQe=r(PVr,"perceiver"),PVr.forEach(t),qQe=r(H5e," \u2014 "),Jk=n(H5e,"A",{href:!0});var BVr=s(Jk);NQe=r(BVr,"PerceiverConfig"),BVr.forEach(t),jQe=r(H5e," (Perceiver model)"),H5e.forEach(t),DQe=i(y),xm=n(y,"LI",{});var U5e=s(xm);lre=n(U5e,"STRONG",{});var IVr=s(lre);GQe=r(IVr,"plbart"),IVr.forEach(t),OQe=r(U5e," \u2014 "),Yk=n(U5e,"A",{href:!0});var qVr=s(Yk);VQe=r(qVr,"PLBartConfig"),qVr.forEach(t),XQe=r(U5e," (PLBart model)"),U5e.forEach(t),zQe=i(y),$m=n(y,"LI",{});var J5e=s($m);ire=n(J5e,"STRONG",{});var NVr=s(ire);WQe=r(NVr,"poolformer"),NVr.forEach(t),QQe=r(J5e," \u2014 "),Kk=n(J5e,"A",{href:!0});var jVr=s(Kk);HQe=r(jVr,"PoolFormerConfig"),jVr.forEach(t),UQe=r(J5e," (PoolFormer model)"),J5e.forEach(t),JQe=i(y),km=n(y,"LI",{});var Y5e=s(km);dre=n(Y5e,"STRONG",{});var DVr=s(dre);YQe=r(DVr,"prophetnet"),DVr.forEach(t),KQe=r(Y5e," \u2014 "),Zk=n(Y5e,"A",{href:!0});var GVr=s(Zk);ZQe=r(GVr,"ProphetNetConfig"),GVr.forEach(t),eHe=r(Y5e," (ProphetNet model)"),Y5e.forEach(t),oHe=i(y),Sm=n(y,"LI",{});var K5e=s(Sm);cre=n(K5e,"STRONG",{});var OVr=s(cre);rHe=r(OVr,"qdqbert"),OVr.forEach(t),tHe=r(K5e," \u2014 "),eS=n(K5e,"A",{href:!0});var VVr=s(eS);aHe=r(VVr,"QDQBertConfig"),VVr.forEach(t),nHe=r(K5e," (QDQBert model)"),K5e.forEach(t),sHe=i(y),Rm=n(y,"LI",{});var Z5e=s(Rm);fre=n(Z5e,"STRONG",{});var XVr=s(fre);lHe=r(XVr,"rag"),XVr.forEach(t),iHe=r(Z5e," \u2014 "),oS=n(Z5e,"A",{href:!0});var zVr=s(oS);dHe=r(zVr,"RagConfig"),zVr.forEach(t),cHe=r(Z5e," (RAG model)"),Z5e.forEach(t),fHe=i(y),Pm=n(y,"LI",{});var ewe=s(Pm);mre=n(ewe,"STRONG",{});var WVr=s(mre);mHe=r(WVr,"realm"),WVr.forEach(t),gHe=r(ewe," \u2014 "),rS=n(ewe,"A",{href:!0});var QVr=s(rS);hHe=r(QVr,"RealmConfig"),QVr.forEach(t),pHe=r(ewe," (Realm model)"),ewe.forEach(t),_He=i(y),Bm=n(y,"LI",{});var owe=s(Bm);gre=n(owe,"STRONG",{});var HVr=s(gre);uHe=r(HVr,"reformer"),HVr.forEach(t),bHe=r(owe," \u2014 "),tS=n(owe,"A",{href:!0});var UVr=s(tS);vHe=r(UVr,"ReformerConfig"),UVr.forEach(t),FHe=r(owe," (Reformer model)"),owe.forEach(t),THe=i(y),Im=n(y,"LI",{});var rwe=s(Im);hre=n(rwe,"STRONG",{});var JVr=s(hre);MHe=r(JVr,"regnet"),JVr.forEach(t),EHe=r(rwe," \u2014 "),aS=n(rwe,"A",{href:!0});var YVr=s(aS);CHe=r(YVr,"RegNetConfig"),YVr.forEach(t),wHe=r(rwe," (RegNet model)"),rwe.forEach(t),AHe=i(y),qm=n(y,"LI",{});var twe=s(qm);pre=n(twe,"STRONG",{});var KVr=s(pre);yHe=r(KVr,"rembert"),KVr.forEach(t),LHe=r(twe," \u2014 "),nS=n(twe,"A",{href:!0});var ZVr=s(nS);xHe=r(ZVr,"RemBertConfig"),ZVr.forEach(t),$He=r(twe," (RemBERT model)"),twe.forEach(t),kHe=i(y),Nm=n(y,"LI",{});var awe=s(Nm);_re=n(awe,"STRONG",{});var eXr=s(_re);SHe=r(eXr,"resnet"),eXr.forEach(t),RHe=r(awe," \u2014 "),sS=n(awe,"A",{href:!0});var oXr=s(sS);PHe=r(oXr,"ResNetConfig"),oXr.forEach(t),BHe=r(awe," (ResNet model)"),awe.forEach(t),IHe=i(y),jm=n(y,"LI",{});var nwe=s(jm);ure=n(nwe,"STRONG",{});var rXr=s(ure);qHe=r(rXr,"retribert"),rXr.forEach(t),NHe=r(nwe," \u2014 "),lS=n(nwe,"A",{href:!0});var tXr=s(lS);jHe=r(tXr,"RetriBertConfig"),tXr.forEach(t),DHe=r(nwe," (RetriBERT model)"),nwe.forEach(t),GHe=i(y),Dm=n(y,"LI",{});var swe=s(Dm);bre=n(swe,"STRONG",{});var aXr=s(bre);OHe=r(aXr,"roberta"),aXr.forEach(t),VHe=r(swe," \u2014 "),iS=n(swe,"A",{href:!0});var nXr=s(iS);XHe=r(nXr,"RobertaConfig"),nXr.forEach(t),zHe=r(swe," (RoBERTa model)"),swe.forEach(t),WHe=i(y),Gm=n(y,"LI",{});var lwe=s(Gm);vre=n(lwe,"STRONG",{});var sXr=s(vre);QHe=r(sXr,"roformer"),sXr.forEach(t),HHe=r(lwe," \u2014 "),dS=n(lwe,"A",{href:!0});var lXr=s(dS);UHe=r(lXr,"RoFormerConfig"),lXr.forEach(t),JHe=r(lwe," (RoFormer model)"),lwe.forEach(t),YHe=i(y),Om=n(y,"LI",{});var iwe=s(Om);Fre=n(iwe,"STRONG",{});var iXr=s(Fre);KHe=r(iXr,"segformer"),iXr.forEach(t),ZHe=r(iwe," \u2014 "),cS=n(iwe,"A",{href:!0});var dXr=s(cS);eUe=r(dXr,"SegformerConfig"),dXr.forEach(t),oUe=r(iwe," (SegFormer model)"),iwe.forEach(t),rUe=i(y),Vm=n(y,"LI",{});var dwe=s(Vm);Tre=n(dwe,"STRONG",{});var cXr=s(Tre);tUe=r(cXr,"sew"),cXr.forEach(t),aUe=r(dwe," \u2014 "),fS=n(dwe,"A",{href:!0});var fXr=s(fS);nUe=r(fXr,"SEWConfig"),fXr.forEach(t),sUe=r(dwe," (SEW model)"),dwe.forEach(t),lUe=i(y),Xm=n(y,"LI",{});var cwe=s(Xm);Mre=n(cwe,"STRONG",{});var mXr=s(Mre);iUe=r(mXr,"sew-d"),mXr.forEach(t),dUe=r(cwe," \u2014 "),mS=n(cwe,"A",{href:!0});var gXr=s(mS);cUe=r(gXr,"SEWDConfig"),gXr.forEach(t),fUe=r(cwe," (SEW-D model)"),cwe.forEach(t),mUe=i(y),zm=n(y,"LI",{});var fwe=s(zm);Ere=n(fwe,"STRONG",{});var hXr=s(Ere);gUe=r(hXr,"speech-encoder-decoder"),hXr.forEach(t),hUe=r(fwe," \u2014 "),gS=n(fwe,"A",{href:!0});var pXr=s(gS);pUe=r(pXr,"SpeechEncoderDecoderConfig"),pXr.forEach(t),_Ue=r(fwe," (Speech Encoder decoder model)"),fwe.forEach(t),uUe=i(y),Wm=n(y,"LI",{});var mwe=s(Wm);Cre=n(mwe,"STRONG",{});var _Xr=s(Cre);bUe=r(_Xr,"speech_to_text"),_Xr.forEach(t),vUe=r(mwe," \u2014 "),hS=n(mwe,"A",{href:!0});var uXr=s(hS);FUe=r(uXr,"Speech2TextConfig"),uXr.forEach(t),TUe=r(mwe," (Speech2Text model)"),mwe.forEach(t),MUe=i(y),Qm=n(y,"LI",{});var gwe=s(Qm);wre=n(gwe,"STRONG",{});var bXr=s(wre);EUe=r(bXr,"speech_to_text_2"),bXr.forEach(t),CUe=r(gwe," \u2014 "),pS=n(gwe,"A",{href:!0});var vXr=s(pS);wUe=r(vXr,"Speech2Text2Config"),vXr.forEach(t),AUe=r(gwe," (Speech2Text2 model)"),gwe.forEach(t),yUe=i(y),Hm=n(y,"LI",{});var hwe=s(Hm);Are=n(hwe,"STRONG",{});var FXr=s(Are);LUe=r(FXr,"splinter"),FXr.forEach(t),xUe=r(hwe," \u2014 "),_S=n(hwe,"A",{href:!0});var TXr=s(_S);$Ue=r(TXr,"SplinterConfig"),TXr.forEach(t),kUe=r(hwe," (Splinter model)"),hwe.forEach(t),SUe=i(y),Um=n(y,"LI",{});var pwe=s(Um);yre=n(pwe,"STRONG",{});var MXr=s(yre);RUe=r(MXr,"squeezebert"),MXr.forEach(t),PUe=r(pwe," \u2014 "),uS=n(pwe,"A",{href:!0});var EXr=s(uS);BUe=r(EXr,"SqueezeBertConfig"),EXr.forEach(t),IUe=r(pwe," (SqueezeBERT model)"),pwe.forEach(t),qUe=i(y),Jm=n(y,"LI",{});var _we=s(Jm);Lre=n(_we,"STRONG",{});var CXr=s(Lre);NUe=r(CXr,"swin"),CXr.forEach(t),jUe=r(_we," \u2014 "),bS=n(_we,"A",{href:!0});var wXr=s(bS);DUe=r(wXr,"SwinConfig"),wXr.forEach(t),GUe=r(_we," (Swin model)"),_we.forEach(t),OUe=i(y),Ym=n(y,"LI",{});var uwe=s(Ym);xre=n(uwe,"STRONG",{});var AXr=s(xre);VUe=r(AXr,"t5"),AXr.forEach(t),XUe=r(uwe," \u2014 "),vS=n(uwe,"A",{href:!0});var yXr=s(vS);zUe=r(yXr,"T5Config"),yXr.forEach(t),WUe=r(uwe," (T5 model)"),uwe.forEach(t),QUe=i(y),Km=n(y,"LI",{});var bwe=s(Km);$re=n(bwe,"STRONG",{});var LXr=s($re);HUe=r(LXr,"tapas"),LXr.forEach(t),UUe=r(bwe," \u2014 "),FS=n(bwe,"A",{href:!0});var xXr=s(FS);JUe=r(xXr,"TapasConfig"),xXr.forEach(t),YUe=r(bwe," (TAPAS model)"),bwe.forEach(t),KUe=i(y),Zm=n(y,"LI",{});var vwe=s(Zm);kre=n(vwe,"STRONG",{});var $Xr=s(kre);ZUe=r($Xr,"trajectory_transformer"),$Xr.forEach(t),eJe=r(vwe," \u2014 "),TS=n(vwe,"A",{href:!0});var kXr=s(TS);oJe=r(kXr,"TrajectoryTransformerConfig"),kXr.forEach(t),rJe=r(vwe," (Trajectory Transformer model)"),vwe.forEach(t),tJe=i(y),eg=n(y,"LI",{});var Fwe=s(eg);Sre=n(Fwe,"STRONG",{});var SXr=s(Sre);aJe=r(SXr,"transfo-xl"),SXr.forEach(t),nJe=r(Fwe," \u2014 "),MS=n(Fwe,"A",{href:!0});var RXr=s(MS);sJe=r(RXr,"TransfoXLConfig"),RXr.forEach(t),lJe=r(Fwe," (Transformer-XL model)"),Fwe.forEach(t),iJe=i(y),og=n(y,"LI",{});var Twe=s(og);Rre=n(Twe,"STRONG",{});var PXr=s(Rre);dJe=r(PXr,"trocr"),PXr.forEach(t),cJe=r(Twe," \u2014 "),ES=n(Twe,"A",{href:!0});var BXr=s(ES);fJe=r(BXr,"TrOCRConfig"),BXr.forEach(t),mJe=r(Twe," (TrOCR model)"),Twe.forEach(t),gJe=i(y),rg=n(y,"LI",{});var Mwe=s(rg);Pre=n(Mwe,"STRONG",{});var IXr=s(Pre);hJe=r(IXr,"unispeech"),IXr.forEach(t),pJe=r(Mwe," \u2014 "),CS=n(Mwe,"A",{href:!0});var qXr=s(CS);_Je=r(qXr,"UniSpeechConfig"),qXr.forEach(t),uJe=r(Mwe," (UniSpeech model)"),Mwe.forEach(t),bJe=i(y),tg=n(y,"LI",{});var Ewe=s(tg);Bre=n(Ewe,"STRONG",{});var NXr=s(Bre);vJe=r(NXr,"unispeech-sat"),NXr.forEach(t),FJe=r(Ewe," \u2014 "),wS=n(Ewe,"A",{href:!0});var jXr=s(wS);TJe=r(jXr,"UniSpeechSatConfig"),jXr.forEach(t),MJe=r(Ewe," (UniSpeechSat model)"),Ewe.forEach(t),EJe=i(y),ag=n(y,"LI",{});var Cwe=s(ag);Ire=n(Cwe,"STRONG",{});var DXr=s(Ire);CJe=r(DXr,"van"),DXr.forEach(t),wJe=r(Cwe," \u2014 "),AS=n(Cwe,"A",{href:!0});var GXr=s(AS);AJe=r(GXr,"VanConfig"),GXr.forEach(t),yJe=r(Cwe," (VAN model)"),Cwe.forEach(t),LJe=i(y),ng=n(y,"LI",{});var wwe=s(ng);qre=n(wwe,"STRONG",{});var OXr=s(qre);xJe=r(OXr,"vilt"),OXr.forEach(t),$Je=r(wwe," \u2014 "),yS=n(wwe,"A",{href:!0});var VXr=s(yS);kJe=r(VXr,"ViltConfig"),VXr.forEach(t),SJe=r(wwe," (ViLT model)"),wwe.forEach(t),RJe=i(y),sg=n(y,"LI",{});var Awe=s(sg);Nre=n(Awe,"STRONG",{});var XXr=s(Nre);PJe=r(XXr,"vision-encoder-decoder"),XXr.forEach(t),BJe=r(Awe," \u2014 "),LS=n(Awe,"A",{href:!0});var zXr=s(LS);IJe=r(zXr,"VisionEncoderDecoderConfig"),zXr.forEach(t),qJe=r(Awe," (Vision Encoder decoder model)"),Awe.forEach(t),NJe=i(y),lg=n(y,"LI",{});var ywe=s(lg);jre=n(ywe,"STRONG",{});var WXr=s(jre);jJe=r(WXr,"vision-text-dual-encoder"),WXr.forEach(t),DJe=r(ywe," \u2014 "),xS=n(ywe,"A",{href:!0});var QXr=s(xS);GJe=r(QXr,"VisionTextDualEncoderConfig"),QXr.forEach(t),OJe=r(ywe," (VisionTextDualEncoder model)"),ywe.forEach(t),VJe=i(y),ig=n(y,"LI",{});var Lwe=s(ig);Dre=n(Lwe,"STRONG",{});var HXr=s(Dre);XJe=r(HXr,"visual_bert"),HXr.forEach(t),zJe=r(Lwe," \u2014 "),$S=n(Lwe,"A",{href:!0});var UXr=s($S);WJe=r(UXr,"VisualBertConfig"),UXr.forEach(t),QJe=r(Lwe," (VisualBert model)"),Lwe.forEach(t),HJe=i(y),dg=n(y,"LI",{});var xwe=s(dg);Gre=n(xwe,"STRONG",{});var JXr=s(Gre);UJe=r(JXr,"vit"),JXr.forEach(t),JJe=r(xwe," \u2014 "),kS=n(xwe,"A",{href:!0});var YXr=s(kS);YJe=r(YXr,"ViTConfig"),YXr.forEach(t),KJe=r(xwe," (ViT model)"),xwe.forEach(t),ZJe=i(y),cg=n(y,"LI",{});var $we=s(cg);Ore=n($we,"STRONG",{});var KXr=s(Ore);eYe=r(KXr,"vit_mae"),KXr.forEach(t),oYe=r($we," \u2014 "),SS=n($we,"A",{href:!0});var ZXr=s(SS);rYe=r(ZXr,"ViTMAEConfig"),ZXr.forEach(t),tYe=r($we," (ViTMAE model)"),$we.forEach(t),aYe=i(y),fg=n(y,"LI",{});var kwe=s(fg);Vre=n(kwe,"STRONG",{});var ezr=s(Vre);nYe=r(ezr,"wav2vec2"),ezr.forEach(t),sYe=r(kwe," \u2014 "),RS=n(kwe,"A",{href:!0});var ozr=s(RS);lYe=r(ozr,"Wav2Vec2Config"),ozr.forEach(t),iYe=r(kwe," (Wav2Vec2 model)"),kwe.forEach(t),dYe=i(y),mg=n(y,"LI",{});var Swe=s(mg);Xre=n(Swe,"STRONG",{});var rzr=s(Xre);cYe=r(rzr,"wav2vec2-conformer"),rzr.forEach(t),fYe=r(Swe," \u2014 "),PS=n(Swe,"A",{href:!0});var tzr=s(PS);mYe=r(tzr,"Wav2Vec2ConformerConfig"),tzr.forEach(t),gYe=r(Swe," (Wav2Vec2-Conformer model)"),Swe.forEach(t),hYe=i(y),gg=n(y,"LI",{});var Rwe=s(gg);zre=n(Rwe,"STRONG",{});var azr=s(zre);pYe=r(azr,"wavlm"),azr.forEach(t),_Ye=r(Rwe," \u2014 "),BS=n(Rwe,"A",{href:!0});var nzr=s(BS);uYe=r(nzr,"WavLMConfig"),nzr.forEach(t),bYe=r(Rwe," (WavLM model)"),Rwe.forEach(t),vYe=i(y),hg=n(y,"LI",{});var Pwe=s(hg);Wre=n(Pwe,"STRONG",{});var szr=s(Wre);FYe=r(szr,"xglm"),szr.forEach(t),TYe=r(Pwe," \u2014 "),IS=n(Pwe,"A",{href:!0});var lzr=s(IS);MYe=r(lzr,"XGLMConfig"),lzr.forEach(t),EYe=r(Pwe," (XGLM model)"),Pwe.forEach(t),CYe=i(y),pg=n(y,"LI",{});var Bwe=s(pg);Qre=n(Bwe,"STRONG",{});var izr=s(Qre);wYe=r(izr,"xlm"),izr.forEach(t),AYe=r(Bwe," \u2014 "),qS=n(Bwe,"A",{href:!0});var dzr=s(qS);yYe=r(dzr,"XLMConfig"),dzr.forEach(t),LYe=r(Bwe," (XLM model)"),Bwe.forEach(t),xYe=i(y),_g=n(y,"LI",{});var Iwe=s(_g);Hre=n(Iwe,"STRONG",{});var czr=s(Hre);$Ye=r(czr,"xlm-prophetnet"),czr.forEach(t),kYe=r(Iwe," \u2014 "),NS=n(Iwe,"A",{href:!0});var fzr=s(NS);SYe=r(fzr,"XLMProphetNetConfig"),fzr.forEach(t),RYe=r(Iwe," (XLMProphetNet model)"),Iwe.forEach(t),PYe=i(y),ug=n(y,"LI",{});var qwe=s(ug);Ure=n(qwe,"STRONG",{});var mzr=s(Ure);BYe=r(mzr,"xlm-roberta"),mzr.forEach(t),IYe=r(qwe," \u2014 "),jS=n(qwe,"A",{href:!0});var gzr=s(jS);qYe=r(gzr,"XLMRobertaConfig"),gzr.forEach(t),NYe=r(qwe," (XLM-RoBERTa model)"),qwe.forEach(t),jYe=i(y),bg=n(y,"LI",{});var Nwe=s(bg);Jre=n(Nwe,"STRONG",{});var hzr=s(Jre);DYe=r(hzr,"xlm-roberta-xl"),hzr.forEach(t),GYe=r(Nwe," \u2014 "),DS=n(Nwe,"A",{href:!0});var pzr=s(DS);OYe=r(pzr,"XLMRobertaXLConfig"),pzr.forEach(t),VYe=r(Nwe," (XLM-RoBERTa-XL model)"),Nwe.forEach(t),XYe=i(y),vg=n(y,"LI",{});var jwe=s(vg);Yre=n(jwe,"STRONG",{});var _zr=s(Yre);zYe=r(_zr,"xlnet"),_zr.forEach(t),WYe=r(jwe," \u2014 "),GS=n(jwe,"A",{href:!0});var uzr=s(GS);QYe=r(uzr,"XLNetConfig"),uzr.forEach(t),HYe=r(jwe," (XLNet model)"),jwe.forEach(t),UYe=i(y),Fg=n(y,"LI",{});var Dwe=s(Fg);Kre=n(Dwe,"STRONG",{});var bzr=s(Kre);JYe=r(bzr,"yolos"),bzr.forEach(t),YYe=r(Dwe," \u2014 "),OS=n(Dwe,"A",{href:!0});var vzr=s(OS);KYe=r(vzr,"YolosConfig"),vzr.forEach(t),ZYe=r(Dwe," (YOLOS model)"),Dwe.forEach(t),eKe=i(y),Tg=n(y,"LI",{});var Gwe=s(Tg);Zre=n(Gwe,"STRONG",{});var Fzr=s(Zre);oKe=r(Fzr,"yoso"),Fzr.forEach(t),rKe=r(Gwe," \u2014 "),VS=n(Gwe,"A",{href:!0});var Tzr=s(VS);tKe=r(Tzr,"YosoConfig"),Tzr.forEach(t),aKe=r(Gwe," (YOSO model)"),Gwe.forEach(t),y.forEach(t),nKe=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),sKe=i(et),Eg=n(et,"DIV",{class:!0});var Cje=s(Eg);T(A6.$$.fragment,Cje),lKe=i(Cje),ete=n(Cje,"P",{});var Mzr=s(ete);iKe=r(Mzr,"Register a new configuration for this class."),Mzr.forEach(t),Cje.forEach(t),et.forEach(t),yqe=i(f),Ti=n(f,"H2",{class:!0});var wje=s(Ti);Cg=n(wje,"A",{id:!0,class:!0,href:!0});var Ezr=s(Cg);ote=n(Ezr,"SPAN",{});var Czr=s(ote);T(y6.$$.fragment,Czr),Czr.forEach(t),Ezr.forEach(t),dKe=i(wje),rte=n(wje,"SPAN",{});var wzr=s(rte);cKe=r(wzr,"AutoTokenizer"),wzr.forEach(t),wje.forEach(t),Lqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(L6.$$.fragment,qs),fKe=i(qs),x6=n(qs,"P",{});var Aje=s(x6);mKe=r(Aje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),XS=n(Aje,"A",{href:!0});var Azr=s(XS);gKe=r(Azr,"AutoTokenizer.from_pretrained()"),Azr.forEach(t),hKe=r(Aje," class method."),Aje.forEach(t),pKe=i(qs),$6=n(qs,"P",{});var yje=s($6);_Ke=r(yje,"This class cannot be instantiated directly using "),tte=n(yje,"CODE",{});var yzr=s(tte);uKe=r(yzr,"__init__()"),yzr.forEach(t),bKe=r(yje," (throws an error)."),yje.forEach(t),vKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(k6.$$.fragment,Ns),FKe=i(Ns),ate=n(Ns,"P",{});var Lzr=s(ate);TKe=r(Lzr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Lzr.forEach(t),MKe=i(Ns),Aa=n(Ns,"P",{});var T0=s(Aa);EKe=r(T0,"The tokenizer class to instantiate is selected based on the "),nte=n(T0,"CODE",{});var xzr=s(nte);CKe=r(xzr,"model_type"),xzr.forEach(t),wKe=r(T0,` property of the config object (either
passed as an argument or loaded from `),ste=n(T0,"CODE",{});var $zr=s(ste);AKe=r($zr,"pretrained_model_name_or_path"),$zr.forEach(t),yKe=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lte=n(T0,"CODE",{});var kzr=s(lte);LKe=r(kzr,"pretrained_model_name_or_path"),kzr.forEach(t),xKe=r(T0,":"),T0.forEach(t),$Ke=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Sx=s(Sn);ite=n(Sx,"STRONG",{});var Szr=s(ite);kKe=r(Szr,"albert"),Szr.forEach(t),SKe=r(Sx," \u2014 "),zS=n(Sx,"A",{href:!0});var Rzr=s(zS);RKe=r(Rzr,"AlbertTokenizer"),Rzr.forEach(t),PKe=r(Sx," or "),WS=n(Sx,"A",{href:!0});var Pzr=s(WS);BKe=r(Pzr,"AlbertTokenizerFast"),Pzr.forEach(t),IKe=r(Sx," (ALBERT model)"),Sx.forEach(t),qKe=i(S),Rn=n(S,"LI",{});var Rx=s(Rn);dte=n(Rx,"STRONG",{});var Bzr=s(dte);NKe=r(Bzr,"bart"),Bzr.forEach(t),jKe=r(Rx," \u2014 "),QS=n(Rx,"A",{href:!0});var Izr=s(QS);DKe=r(Izr,"BartTokenizer"),Izr.forEach(t),GKe=r(Rx," or "),HS=n(Rx,"A",{href:!0});var qzr=s(HS);OKe=r(qzr,"BartTokenizerFast"),qzr.forEach(t),VKe=r(Rx," (BART model)"),Rx.forEach(t),XKe=i(S),Pn=n(S,"LI",{});var Px=s(Pn);cte=n(Px,"STRONG",{});var Nzr=s(cte);zKe=r(Nzr,"barthez"),Nzr.forEach(t),WKe=r(Px," \u2014 "),US=n(Px,"A",{href:!0});var jzr=s(US);QKe=r(jzr,"BarthezTokenizer"),jzr.forEach(t),HKe=r(Px," or "),JS=n(Px,"A",{href:!0});var Dzr=s(JS);UKe=r(Dzr,"BarthezTokenizerFast"),Dzr.forEach(t),JKe=r(Px," (BARThez model)"),Px.forEach(t),YKe=i(S),wg=n(S,"LI",{});var Owe=s(wg);fte=n(Owe,"STRONG",{});var Gzr=s(fte);KKe=r(Gzr,"bartpho"),Gzr.forEach(t),ZKe=r(Owe," \u2014 "),YS=n(Owe,"A",{href:!0});var Ozr=s(YS);eZe=r(Ozr,"BartphoTokenizer"),Ozr.forEach(t),oZe=r(Owe," (BARTpho model)"),Owe.forEach(t),rZe=i(S),Bn=n(S,"LI",{});var Bx=s(Bn);mte=n(Bx,"STRONG",{});var Vzr=s(mte);tZe=r(Vzr,"bert"),Vzr.forEach(t),aZe=r(Bx," \u2014 "),KS=n(Bx,"A",{href:!0});var Xzr=s(KS);nZe=r(Xzr,"BertTokenizer"),Xzr.forEach(t),sZe=r(Bx," or "),ZS=n(Bx,"A",{href:!0});var zzr=s(ZS);lZe=r(zzr,"BertTokenizerFast"),zzr.forEach(t),iZe=r(Bx," (BERT model)"),Bx.forEach(t),dZe=i(S),Ag=n(S,"LI",{});var Vwe=s(Ag);gte=n(Vwe,"STRONG",{});var Wzr=s(gte);cZe=r(Wzr,"bert-generation"),Wzr.forEach(t),fZe=r(Vwe," \u2014 "),eR=n(Vwe,"A",{href:!0});var Qzr=s(eR);mZe=r(Qzr,"BertGenerationTokenizer"),Qzr.forEach(t),gZe=r(Vwe," (Bert Generation model)"),Vwe.forEach(t),hZe=i(S),yg=n(S,"LI",{});var Xwe=s(yg);hte=n(Xwe,"STRONG",{});var Hzr=s(hte);pZe=r(Hzr,"bert-japanese"),Hzr.forEach(t),_Ze=r(Xwe," \u2014 "),oR=n(Xwe,"A",{href:!0});var Uzr=s(oR);uZe=r(Uzr,"BertJapaneseTokenizer"),Uzr.forEach(t),bZe=r(Xwe," (BertJapanese model)"),Xwe.forEach(t),vZe=i(S),Lg=n(S,"LI",{});var zwe=s(Lg);pte=n(zwe,"STRONG",{});var Jzr=s(pte);FZe=r(Jzr,"bertweet"),Jzr.forEach(t),TZe=r(zwe," \u2014 "),rR=n(zwe,"A",{href:!0});var Yzr=s(rR);MZe=r(Yzr,"BertweetTokenizer"),Yzr.forEach(t),EZe=r(zwe," (Bertweet model)"),zwe.forEach(t),CZe=i(S),In=n(S,"LI",{});var Ix=s(In);_te=n(Ix,"STRONG",{});var Kzr=s(_te);wZe=r(Kzr,"big_bird"),Kzr.forEach(t),AZe=r(Ix," \u2014 "),tR=n(Ix,"A",{href:!0});var Zzr=s(tR);yZe=r(Zzr,"BigBirdTokenizer"),Zzr.forEach(t),LZe=r(Ix," or "),aR=n(Ix,"A",{href:!0});var eWr=s(aR);xZe=r(eWr,"BigBirdTokenizerFast"),eWr.forEach(t),$Ze=r(Ix," (BigBird model)"),Ix.forEach(t),kZe=i(S),qn=n(S,"LI",{});var qx=s(qn);ute=n(qx,"STRONG",{});var oWr=s(ute);SZe=r(oWr,"bigbird_pegasus"),oWr.forEach(t),RZe=r(qx," \u2014 "),nR=n(qx,"A",{href:!0});var rWr=s(nR);PZe=r(rWr,"PegasusTokenizer"),rWr.forEach(t),BZe=r(qx," or "),sR=n(qx,"A",{href:!0});var tWr=s(sR);IZe=r(tWr,"PegasusTokenizerFast"),tWr.forEach(t),qZe=r(qx," (BigBirdPegasus model)"),qx.forEach(t),NZe=i(S),Nn=n(S,"LI",{});var Nx=s(Nn);bte=n(Nx,"STRONG",{});var aWr=s(bte);jZe=r(aWr,"blenderbot"),aWr.forEach(t),DZe=r(Nx," \u2014 "),lR=n(Nx,"A",{href:!0});var nWr=s(lR);GZe=r(nWr,"BlenderbotTokenizer"),nWr.forEach(t),OZe=r(Nx," or "),iR=n(Nx,"A",{href:!0});var sWr=s(iR);VZe=r(sWr,"BlenderbotTokenizerFast"),sWr.forEach(t),XZe=r(Nx," (Blenderbot model)"),Nx.forEach(t),zZe=i(S),xg=n(S,"LI",{});var Wwe=s(xg);vte=n(Wwe,"STRONG",{});var lWr=s(vte);WZe=r(lWr,"blenderbot-small"),lWr.forEach(t),QZe=r(Wwe," \u2014 "),dR=n(Wwe,"A",{href:!0});var iWr=s(dR);HZe=r(iWr,"BlenderbotSmallTokenizer"),iWr.forEach(t),UZe=r(Wwe," (BlenderbotSmall model)"),Wwe.forEach(t),JZe=i(S),$g=n(S,"LI",{});var Qwe=s($g);Fte=n(Qwe,"STRONG",{});var dWr=s(Fte);YZe=r(dWr,"byt5"),dWr.forEach(t),KZe=r(Qwe," \u2014 "),cR=n(Qwe,"A",{href:!0});var cWr=s(cR);ZZe=r(cWr,"ByT5Tokenizer"),cWr.forEach(t),eeo=r(Qwe," (ByT5 model)"),Qwe.forEach(t),oeo=i(S),jn=n(S,"LI",{});var jx=s(jn);Tte=n(jx,"STRONG",{});var fWr=s(Tte);reo=r(fWr,"camembert"),fWr.forEach(t),teo=r(jx," \u2014 "),fR=n(jx,"A",{href:!0});var mWr=s(fR);aeo=r(mWr,"CamembertTokenizer"),mWr.forEach(t),neo=r(jx," or "),mR=n(jx,"A",{href:!0});var gWr=s(mR);seo=r(gWr,"CamembertTokenizerFast"),gWr.forEach(t),leo=r(jx," (CamemBERT model)"),jx.forEach(t),ieo=i(S),kg=n(S,"LI",{});var Hwe=s(kg);Mte=n(Hwe,"STRONG",{});var hWr=s(Mte);deo=r(hWr,"canine"),hWr.forEach(t),ceo=r(Hwe," \u2014 "),gR=n(Hwe,"A",{href:!0});var pWr=s(gR);feo=r(pWr,"CanineTokenizer"),pWr.forEach(t),meo=r(Hwe," (Canine model)"),Hwe.forEach(t),geo=i(S),Dn=n(S,"LI",{});var Dx=s(Dn);Ete=n(Dx,"STRONG",{});var _Wr=s(Ete);heo=r(_Wr,"clip"),_Wr.forEach(t),peo=r(Dx," \u2014 "),hR=n(Dx,"A",{href:!0});var uWr=s(hR);_eo=r(uWr,"CLIPTokenizer"),uWr.forEach(t),ueo=r(Dx," or "),pR=n(Dx,"A",{href:!0});var bWr=s(pR);beo=r(bWr,"CLIPTokenizerFast"),bWr.forEach(t),veo=r(Dx," (CLIP model)"),Dx.forEach(t),Feo=i(S),Gn=n(S,"LI",{});var Gx=s(Gn);Cte=n(Gx,"STRONG",{});var vWr=s(Cte);Teo=r(vWr,"convbert"),vWr.forEach(t),Meo=r(Gx," \u2014 "),_R=n(Gx,"A",{href:!0});var FWr=s(_R);Eeo=r(FWr,"ConvBertTokenizer"),FWr.forEach(t),Ceo=r(Gx," or "),uR=n(Gx,"A",{href:!0});var TWr=s(uR);weo=r(TWr,"ConvBertTokenizerFast"),TWr.forEach(t),Aeo=r(Gx," (ConvBERT model)"),Gx.forEach(t),yeo=i(S),On=n(S,"LI",{});var Ox=s(On);wte=n(Ox,"STRONG",{});var MWr=s(wte);Leo=r(MWr,"cpm"),MWr.forEach(t),xeo=r(Ox," \u2014 "),bR=n(Ox,"A",{href:!0});var EWr=s(bR);$eo=r(EWr,"CpmTokenizer"),EWr.forEach(t),keo=r(Ox," or "),vR=n(Ox,"A",{href:!0});var CWr=s(vR);Seo=r(CWr,"CpmTokenizerFast"),CWr.forEach(t),Reo=r(Ox," (CPM model)"),Ox.forEach(t),Peo=i(S),Sg=n(S,"LI",{});var Uwe=s(Sg);Ate=n(Uwe,"STRONG",{});var wWr=s(Ate);Beo=r(wWr,"ctrl"),wWr.forEach(t),Ieo=r(Uwe," \u2014 "),FR=n(Uwe,"A",{href:!0});var AWr=s(FR);qeo=r(AWr,"CTRLTokenizer"),AWr.forEach(t),Neo=r(Uwe," (CTRL model)"),Uwe.forEach(t),jeo=i(S),Vn=n(S,"LI",{});var Vx=s(Vn);yte=n(Vx,"STRONG",{});var yWr=s(yte);Deo=r(yWr,"data2vec-text"),yWr.forEach(t),Geo=r(Vx," \u2014 "),TR=n(Vx,"A",{href:!0});var LWr=s(TR);Oeo=r(LWr,"RobertaTokenizer"),LWr.forEach(t),Veo=r(Vx," or "),MR=n(Vx,"A",{href:!0});var xWr=s(MR);Xeo=r(xWr,"RobertaTokenizerFast"),xWr.forEach(t),zeo=r(Vx," (Data2VecText model)"),Vx.forEach(t),Weo=i(S),Xn=n(S,"LI",{});var Xx=s(Xn);Lte=n(Xx,"STRONG",{});var $Wr=s(Lte);Qeo=r($Wr,"deberta"),$Wr.forEach(t),Heo=r(Xx," \u2014 "),ER=n(Xx,"A",{href:!0});var kWr=s(ER);Ueo=r(kWr,"DebertaTokenizer"),kWr.forEach(t),Jeo=r(Xx," or "),CR=n(Xx,"A",{href:!0});var SWr=s(CR);Yeo=r(SWr,"DebertaTokenizerFast"),SWr.forEach(t),Keo=r(Xx," (DeBERTa model)"),Xx.forEach(t),Zeo=i(S),zn=n(S,"LI",{});var zx=s(zn);xte=n(zx,"STRONG",{});var RWr=s(xte);eoo=r(RWr,"deberta-v2"),RWr.forEach(t),ooo=r(zx," \u2014 "),wR=n(zx,"A",{href:!0});var PWr=s(wR);roo=r(PWr,"DebertaV2Tokenizer"),PWr.forEach(t),too=r(zx," or "),AR=n(zx,"A",{href:!0});var BWr=s(AR);aoo=r(BWr,"DebertaV2TokenizerFast"),BWr.forEach(t),noo=r(zx," (DeBERTa-v2 model)"),zx.forEach(t),soo=i(S),Wn=n(S,"LI",{});var Wx=s(Wn);$te=n(Wx,"STRONG",{});var IWr=s($te);loo=r(IWr,"distilbert"),IWr.forEach(t),ioo=r(Wx," \u2014 "),yR=n(Wx,"A",{href:!0});var qWr=s(yR);doo=r(qWr,"DistilBertTokenizer"),qWr.forEach(t),coo=r(Wx," or "),LR=n(Wx,"A",{href:!0});var NWr=s(LR);foo=r(NWr,"DistilBertTokenizerFast"),NWr.forEach(t),moo=r(Wx," (DistilBERT model)"),Wx.forEach(t),goo=i(S),Qn=n(S,"LI",{});var Qx=s(Qn);kte=n(Qx,"STRONG",{});var jWr=s(kte);hoo=r(jWr,"dpr"),jWr.forEach(t),poo=r(Qx," \u2014 "),xR=n(Qx,"A",{href:!0});var DWr=s(xR);_oo=r(DWr,"DPRQuestionEncoderTokenizer"),DWr.forEach(t),uoo=r(Qx," or "),$R=n(Qx,"A",{href:!0});var GWr=s($R);boo=r(GWr,"DPRQuestionEncoderTokenizerFast"),GWr.forEach(t),voo=r(Qx," (DPR model)"),Qx.forEach(t),Foo=i(S),Hn=n(S,"LI",{});var Hx=s(Hn);Ste=n(Hx,"STRONG",{});var OWr=s(Ste);Too=r(OWr,"electra"),OWr.forEach(t),Moo=r(Hx," \u2014 "),kR=n(Hx,"A",{href:!0});var VWr=s(kR);Eoo=r(VWr,"ElectraTokenizer"),VWr.forEach(t),Coo=r(Hx," or "),SR=n(Hx,"A",{href:!0});var XWr=s(SR);woo=r(XWr,"ElectraTokenizerFast"),XWr.forEach(t),Aoo=r(Hx," (ELECTRA model)"),Hx.forEach(t),yoo=i(S),Rg=n(S,"LI",{});var Jwe=s(Rg);Rte=n(Jwe,"STRONG",{});var zWr=s(Rte);Loo=r(zWr,"flaubert"),zWr.forEach(t),xoo=r(Jwe," \u2014 "),RR=n(Jwe,"A",{href:!0});var WWr=s(RR);$oo=r(WWr,"FlaubertTokenizer"),WWr.forEach(t),koo=r(Jwe," (FlauBERT model)"),Jwe.forEach(t),Soo=i(S),Un=n(S,"LI",{});var Ux=s(Un);Pte=n(Ux,"STRONG",{});var QWr=s(Pte);Roo=r(QWr,"fnet"),QWr.forEach(t),Poo=r(Ux," \u2014 "),PR=n(Ux,"A",{href:!0});var HWr=s(PR);Boo=r(HWr,"FNetTokenizer"),HWr.forEach(t),Ioo=r(Ux," or "),BR=n(Ux,"A",{href:!0});var UWr=s(BR);qoo=r(UWr,"FNetTokenizerFast"),UWr.forEach(t),Noo=r(Ux," (FNet model)"),Ux.forEach(t),joo=i(S),Pg=n(S,"LI",{});var Ywe=s(Pg);Bte=n(Ywe,"STRONG",{});var JWr=s(Bte);Doo=r(JWr,"fsmt"),JWr.forEach(t),Goo=r(Ywe," \u2014 "),IR=n(Ywe,"A",{href:!0});var YWr=s(IR);Ooo=r(YWr,"FSMTTokenizer"),YWr.forEach(t),Voo=r(Ywe," (FairSeq Machine-Translation model)"),Ywe.forEach(t),Xoo=i(S),Jn=n(S,"LI",{});var Jx=s(Jn);Ite=n(Jx,"STRONG",{});var KWr=s(Ite);zoo=r(KWr,"funnel"),KWr.forEach(t),Woo=r(Jx," \u2014 "),qR=n(Jx,"A",{href:!0});var ZWr=s(qR);Qoo=r(ZWr,"FunnelTokenizer"),ZWr.forEach(t),Hoo=r(Jx," or "),NR=n(Jx,"A",{href:!0});var eQr=s(NR);Uoo=r(eQr,"FunnelTokenizerFast"),eQr.forEach(t),Joo=r(Jx," (Funnel Transformer model)"),Jx.forEach(t),Yoo=i(S),Yn=n(S,"LI",{});var Yx=s(Yn);qte=n(Yx,"STRONG",{});var oQr=s(qte);Koo=r(oQr,"gpt2"),oQr.forEach(t),Zoo=r(Yx," \u2014 "),jR=n(Yx,"A",{href:!0});var rQr=s(jR);ero=r(rQr,"GPT2Tokenizer"),rQr.forEach(t),oro=r(Yx," or "),DR=n(Yx,"A",{href:!0});var tQr=s(DR);rro=r(tQr,"GPT2TokenizerFast"),tQr.forEach(t),tro=r(Yx," (OpenAI GPT-2 model)"),Yx.forEach(t),aro=i(S),Kn=n(S,"LI",{});var Kx=s(Kn);Nte=n(Kx,"STRONG",{});var aQr=s(Nte);nro=r(aQr,"gpt_neo"),aQr.forEach(t),sro=r(Kx," \u2014 "),GR=n(Kx,"A",{href:!0});var nQr=s(GR);lro=r(nQr,"GPT2Tokenizer"),nQr.forEach(t),iro=r(Kx," or "),OR=n(Kx,"A",{href:!0});var sQr=s(OR);dro=r(sQr,"GPT2TokenizerFast"),sQr.forEach(t),cro=r(Kx," (GPT Neo model)"),Kx.forEach(t),fro=i(S),Zn=n(S,"LI",{});var Zx=s(Zn);jte=n(Zx,"STRONG",{});var lQr=s(jte);mro=r(lQr,"gptj"),lQr.forEach(t),gro=r(Zx," \u2014 "),VR=n(Zx,"A",{href:!0});var iQr=s(VR);hro=r(iQr,"GPT2Tokenizer"),iQr.forEach(t),pro=r(Zx," or "),XR=n(Zx,"A",{href:!0});var dQr=s(XR);_ro=r(dQr,"GPT2TokenizerFast"),dQr.forEach(t),uro=r(Zx," (GPT-J model)"),Zx.forEach(t),bro=i(S),es=n(S,"LI",{});var e$=s(es);Dte=n(e$,"STRONG",{});var cQr=s(Dte);vro=r(cQr,"groupvit"),cQr.forEach(t),Fro=r(e$," \u2014 "),zR=n(e$,"A",{href:!0});var fQr=s(zR);Tro=r(fQr,"CLIPTokenizer"),fQr.forEach(t),Mro=r(e$," or "),WR=n(e$,"A",{href:!0});var mQr=s(WR);Ero=r(mQr,"CLIPTokenizerFast"),mQr.forEach(t),Cro=r(e$," (GroupViT model)"),e$.forEach(t),wro=i(S),os=n(S,"LI",{});var o$=s(os);Gte=n(o$,"STRONG",{});var gQr=s(Gte);Aro=r(gQr,"herbert"),gQr.forEach(t),yro=r(o$," \u2014 "),QR=n(o$,"A",{href:!0});var hQr=s(QR);Lro=r(hQr,"HerbertTokenizer"),hQr.forEach(t),xro=r(o$," or "),HR=n(o$,"A",{href:!0});var pQr=s(HR);$ro=r(pQr,"HerbertTokenizerFast"),pQr.forEach(t),kro=r(o$," (HerBERT model)"),o$.forEach(t),Sro=i(S),Bg=n(S,"LI",{});var Kwe=s(Bg);Ote=n(Kwe,"STRONG",{});var _Qr=s(Ote);Rro=r(_Qr,"hubert"),_Qr.forEach(t),Pro=r(Kwe," \u2014 "),UR=n(Kwe,"A",{href:!0});var uQr=s(UR);Bro=r(uQr,"Wav2Vec2CTCTokenizer"),uQr.forEach(t),Iro=r(Kwe," (Hubert model)"),Kwe.forEach(t),qro=i(S),rs=n(S,"LI",{});var r$=s(rs);Vte=n(r$,"STRONG",{});var bQr=s(Vte);Nro=r(bQr,"ibert"),bQr.forEach(t),jro=r(r$," \u2014 "),JR=n(r$,"A",{href:!0});var vQr=s(JR);Dro=r(vQr,"RobertaTokenizer"),vQr.forEach(t),Gro=r(r$," or "),YR=n(r$,"A",{href:!0});var FQr=s(YR);Oro=r(FQr,"RobertaTokenizerFast"),FQr.forEach(t),Vro=r(r$," (I-BERT model)"),r$.forEach(t),Xro=i(S),ts=n(S,"LI",{});var t$=s(ts);Xte=n(t$,"STRONG",{});var TQr=s(Xte);zro=r(TQr,"layoutlm"),TQr.forEach(t),Wro=r(t$," \u2014 "),KR=n(t$,"A",{href:!0});var MQr=s(KR);Qro=r(MQr,"LayoutLMTokenizer"),MQr.forEach(t),Hro=r(t$," or "),ZR=n(t$,"A",{href:!0});var EQr=s(ZR);Uro=r(EQr,"LayoutLMTokenizerFast"),EQr.forEach(t),Jro=r(t$," (LayoutLM model)"),t$.forEach(t),Yro=i(S),as=n(S,"LI",{});var a$=s(as);zte=n(a$,"STRONG",{});var CQr=s(zte);Kro=r(CQr,"layoutlmv2"),CQr.forEach(t),Zro=r(a$," \u2014 "),eP=n(a$,"A",{href:!0});var wQr=s(eP);eto=r(wQr,"LayoutLMv2Tokenizer"),wQr.forEach(t),oto=r(a$," or "),oP=n(a$,"A",{href:!0});var AQr=s(oP);rto=r(AQr,"LayoutLMv2TokenizerFast"),AQr.forEach(t),tto=r(a$," (LayoutLMv2 model)"),a$.forEach(t),ato=i(S),ns=n(S,"LI",{});var n$=s(ns);Wte=n(n$,"STRONG",{});var yQr=s(Wte);nto=r(yQr,"layoutxlm"),yQr.forEach(t),sto=r(n$," \u2014 "),rP=n(n$,"A",{href:!0});var LQr=s(rP);lto=r(LQr,"LayoutXLMTokenizer"),LQr.forEach(t),ito=r(n$," or "),tP=n(n$,"A",{href:!0});var xQr=s(tP);dto=r(xQr,"LayoutXLMTokenizerFast"),xQr.forEach(t),cto=r(n$," (LayoutXLM model)"),n$.forEach(t),fto=i(S),ss=n(S,"LI",{});var s$=s(ss);Qte=n(s$,"STRONG",{});var $Qr=s(Qte);mto=r($Qr,"led"),$Qr.forEach(t),gto=r(s$," \u2014 "),aP=n(s$,"A",{href:!0});var kQr=s(aP);hto=r(kQr,"LEDTokenizer"),kQr.forEach(t),pto=r(s$," or "),nP=n(s$,"A",{href:!0});var SQr=s(nP);_to=r(SQr,"LEDTokenizerFast"),SQr.forEach(t),uto=r(s$," (LED model)"),s$.forEach(t),bto=i(S),ls=n(S,"LI",{});var l$=s(ls);Hte=n(l$,"STRONG",{});var RQr=s(Hte);vto=r(RQr,"longformer"),RQr.forEach(t),Fto=r(l$," \u2014 "),sP=n(l$,"A",{href:!0});var PQr=s(sP);Tto=r(PQr,"LongformerTokenizer"),PQr.forEach(t),Mto=r(l$," or "),lP=n(l$,"A",{href:!0});var BQr=s(lP);Eto=r(BQr,"LongformerTokenizerFast"),BQr.forEach(t),Cto=r(l$," (Longformer model)"),l$.forEach(t),wto=i(S),Ig=n(S,"LI",{});var Zwe=s(Ig);Ute=n(Zwe,"STRONG",{});var IQr=s(Ute);Ato=r(IQr,"luke"),IQr.forEach(t),yto=r(Zwe," \u2014 "),iP=n(Zwe,"A",{href:!0});var qQr=s(iP);Lto=r(qQr,"LukeTokenizer"),qQr.forEach(t),xto=r(Zwe," (LUKE model)"),Zwe.forEach(t),$to=i(S),is=n(S,"LI",{});var i$=s(is);Jte=n(i$,"STRONG",{});var NQr=s(Jte);kto=r(NQr,"lxmert"),NQr.forEach(t),Sto=r(i$," \u2014 "),dP=n(i$,"A",{href:!0});var jQr=s(dP);Rto=r(jQr,"LxmertTokenizer"),jQr.forEach(t),Pto=r(i$," or "),cP=n(i$,"A",{href:!0});var DQr=s(cP);Bto=r(DQr,"LxmertTokenizerFast"),DQr.forEach(t),Ito=r(i$," (LXMERT model)"),i$.forEach(t),qto=i(S),qg=n(S,"LI",{});var e0e=s(qg);Yte=n(e0e,"STRONG",{});var GQr=s(Yte);Nto=r(GQr,"m2m_100"),GQr.forEach(t),jto=r(e0e," \u2014 "),fP=n(e0e,"A",{href:!0});var OQr=s(fP);Dto=r(OQr,"M2M100Tokenizer"),OQr.forEach(t),Gto=r(e0e," (M2M100 model)"),e0e.forEach(t),Oto=i(S),Ng=n(S,"LI",{});var o0e=s(Ng);Kte=n(o0e,"STRONG",{});var VQr=s(Kte);Vto=r(VQr,"marian"),VQr.forEach(t),Xto=r(o0e," \u2014 "),mP=n(o0e,"A",{href:!0});var XQr=s(mP);zto=r(XQr,"MarianTokenizer"),XQr.forEach(t),Wto=r(o0e," (Marian model)"),o0e.forEach(t),Qto=i(S),ds=n(S,"LI",{});var d$=s(ds);Zte=n(d$,"STRONG",{});var zQr=s(Zte);Hto=r(zQr,"mbart"),zQr.forEach(t),Uto=r(d$," \u2014 "),gP=n(d$,"A",{href:!0});var WQr=s(gP);Jto=r(WQr,"MBartTokenizer"),WQr.forEach(t),Yto=r(d$," or "),hP=n(d$,"A",{href:!0});var QQr=s(hP);Kto=r(QQr,"MBartTokenizerFast"),QQr.forEach(t),Zto=r(d$," (mBART model)"),d$.forEach(t),eao=i(S),cs=n(S,"LI",{});var c$=s(cs);eae=n(c$,"STRONG",{});var HQr=s(eae);oao=r(HQr,"mbart50"),HQr.forEach(t),rao=r(c$," \u2014 "),pP=n(c$,"A",{href:!0});var UQr=s(pP);tao=r(UQr,"MBart50Tokenizer"),UQr.forEach(t),aao=r(c$," or "),_P=n(c$,"A",{href:!0});var JQr=s(_P);nao=r(JQr,"MBart50TokenizerFast"),JQr.forEach(t),sao=r(c$," (mBART-50 model)"),c$.forEach(t),lao=i(S),fs=n(S,"LI",{});var f$=s(fs);oae=n(f$,"STRONG",{});var YQr=s(oae);iao=r(YQr,"megatron-bert"),YQr.forEach(t),dao=r(f$," \u2014 "),uP=n(f$,"A",{href:!0});var KQr=s(uP);cao=r(KQr,"BertTokenizer"),KQr.forEach(t),fao=r(f$," or "),bP=n(f$,"A",{href:!0});var ZQr=s(bP);mao=r(ZQr,"BertTokenizerFast"),ZQr.forEach(t),gao=r(f$," (MegatronBert model)"),f$.forEach(t),hao=i(S),jg=n(S,"LI",{});var r0e=s(jg);rae=n(r0e,"STRONG",{});var eHr=s(rae);pao=r(eHr,"mluke"),eHr.forEach(t),_ao=r(r0e," \u2014 "),vP=n(r0e,"A",{href:!0});var oHr=s(vP);uao=r(oHr,"MLukeTokenizer"),oHr.forEach(t),bao=r(r0e," (mLUKE model)"),r0e.forEach(t),vao=i(S),ms=n(S,"LI",{});var m$=s(ms);tae=n(m$,"STRONG",{});var rHr=s(tae);Fao=r(rHr,"mobilebert"),rHr.forEach(t),Tao=r(m$," \u2014 "),FP=n(m$,"A",{href:!0});var tHr=s(FP);Mao=r(tHr,"MobileBertTokenizer"),tHr.forEach(t),Eao=r(m$," or "),TP=n(m$,"A",{href:!0});var aHr=s(TP);Cao=r(aHr,"MobileBertTokenizerFast"),aHr.forEach(t),wao=r(m$," (MobileBERT model)"),m$.forEach(t),Aao=i(S),gs=n(S,"LI",{});var g$=s(gs);aae=n(g$,"STRONG",{});var nHr=s(aae);yao=r(nHr,"mpnet"),nHr.forEach(t),Lao=r(g$," \u2014 "),MP=n(g$,"A",{href:!0});var sHr=s(MP);xao=r(sHr,"MPNetTokenizer"),sHr.forEach(t),$ao=r(g$," or "),EP=n(g$,"A",{href:!0});var lHr=s(EP);kao=r(lHr,"MPNetTokenizerFast"),lHr.forEach(t),Sao=r(g$," (MPNet model)"),g$.forEach(t),Rao=i(S),hs=n(S,"LI",{});var h$=s(hs);nae=n(h$,"STRONG",{});var iHr=s(nae);Pao=r(iHr,"mt5"),iHr.forEach(t),Bao=r(h$," \u2014 "),CP=n(h$,"A",{href:!0});var dHr=s(CP);Iao=r(dHr,"MT5Tokenizer"),dHr.forEach(t),qao=r(h$," or "),wP=n(h$,"A",{href:!0});var cHr=s(wP);Nao=r(cHr,"MT5TokenizerFast"),cHr.forEach(t),jao=r(h$," (mT5 model)"),h$.forEach(t),Dao=i(S),ps=n(S,"LI",{});var p$=s(ps);sae=n(p$,"STRONG",{});var fHr=s(sae);Gao=r(fHr,"nystromformer"),fHr.forEach(t),Oao=r(p$," \u2014 "),AP=n(p$,"A",{href:!0});var mHr=s(AP);Vao=r(mHr,"AlbertTokenizer"),mHr.forEach(t),Xao=r(p$," or "),yP=n(p$,"A",{href:!0});var gHr=s(yP);zao=r(gHr,"AlbertTokenizerFast"),gHr.forEach(t),Wao=r(p$," (Nystromformer model)"),p$.forEach(t),Qao=i(S),_s=n(S,"LI",{});var _$=s(_s);lae=n(_$,"STRONG",{});var hHr=s(lae);Hao=r(hHr,"openai-gpt"),hHr.forEach(t),Uao=r(_$," \u2014 "),LP=n(_$,"A",{href:!0});var pHr=s(LP);Jao=r(pHr,"OpenAIGPTTokenizer"),pHr.forEach(t),Yao=r(_$," or "),xP=n(_$,"A",{href:!0});var _Hr=s(xP);Kao=r(_Hr,"OpenAIGPTTokenizerFast"),_Hr.forEach(t),Zao=r(_$," (OpenAI GPT model)"),_$.forEach(t),eno=i(S),Dg=n(S,"LI",{});var t0e=s(Dg);iae=n(t0e,"STRONG",{});var uHr=s(iae);ono=r(uHr,"opt"),uHr.forEach(t),rno=r(t0e," \u2014 "),$P=n(t0e,"A",{href:!0});var bHr=s($P);tno=r(bHr,"GPT2Tokenizer"),bHr.forEach(t),ano=r(t0e," (OPT model)"),t0e.forEach(t),nno=i(S),us=n(S,"LI",{});var u$=s(us);dae=n(u$,"STRONG",{});var vHr=s(dae);sno=r(vHr,"pegasus"),vHr.forEach(t),lno=r(u$," \u2014 "),kP=n(u$,"A",{href:!0});var FHr=s(kP);ino=r(FHr,"PegasusTokenizer"),FHr.forEach(t),dno=r(u$," or "),SP=n(u$,"A",{href:!0});var THr=s(SP);cno=r(THr,"PegasusTokenizerFast"),THr.forEach(t),fno=r(u$," (Pegasus model)"),u$.forEach(t),mno=i(S),Gg=n(S,"LI",{});var a0e=s(Gg);cae=n(a0e,"STRONG",{});var MHr=s(cae);gno=r(MHr,"perceiver"),MHr.forEach(t),hno=r(a0e," \u2014 "),RP=n(a0e,"A",{href:!0});var EHr=s(RP);pno=r(EHr,"PerceiverTokenizer"),EHr.forEach(t),_no=r(a0e," (Perceiver model)"),a0e.forEach(t),uno=i(S),Og=n(S,"LI",{});var n0e=s(Og);fae=n(n0e,"STRONG",{});var CHr=s(fae);bno=r(CHr,"phobert"),CHr.forEach(t),vno=r(n0e," \u2014 "),PP=n(n0e,"A",{href:!0});var wHr=s(PP);Fno=r(wHr,"PhobertTokenizer"),wHr.forEach(t),Tno=r(n0e," (PhoBERT model)"),n0e.forEach(t),Mno=i(S),Vg=n(S,"LI",{});var s0e=s(Vg);mae=n(s0e,"STRONG",{});var AHr=s(mae);Eno=r(AHr,"plbart"),AHr.forEach(t),Cno=r(s0e," \u2014 "),BP=n(s0e,"A",{href:!0});var yHr=s(BP);wno=r(yHr,"PLBartTokenizer"),yHr.forEach(t),Ano=r(s0e," (PLBart model)"),s0e.forEach(t),yno=i(S),Xg=n(S,"LI",{});var l0e=s(Xg);gae=n(l0e,"STRONG",{});var LHr=s(gae);Lno=r(LHr,"prophetnet"),LHr.forEach(t),xno=r(l0e," \u2014 "),IP=n(l0e,"A",{href:!0});var xHr=s(IP);$no=r(xHr,"ProphetNetTokenizer"),xHr.forEach(t),kno=r(l0e," (ProphetNet model)"),l0e.forEach(t),Sno=i(S),bs=n(S,"LI",{});var b$=s(bs);hae=n(b$,"STRONG",{});var $Hr=s(hae);Rno=r($Hr,"qdqbert"),$Hr.forEach(t),Pno=r(b$," \u2014 "),qP=n(b$,"A",{href:!0});var kHr=s(qP);Bno=r(kHr,"BertTokenizer"),kHr.forEach(t),Ino=r(b$," or "),NP=n(b$,"A",{href:!0});var SHr=s(NP);qno=r(SHr,"BertTokenizerFast"),SHr.forEach(t),Nno=r(b$," (QDQBert model)"),b$.forEach(t),jno=i(S),zg=n(S,"LI",{});var i0e=s(zg);pae=n(i0e,"STRONG",{});var RHr=s(pae);Dno=r(RHr,"rag"),RHr.forEach(t),Gno=r(i0e," \u2014 "),jP=n(i0e,"A",{href:!0});var PHr=s(jP);Ono=r(PHr,"RagTokenizer"),PHr.forEach(t),Vno=r(i0e," (RAG model)"),i0e.forEach(t),Xno=i(S),vs=n(S,"LI",{});var v$=s(vs);_ae=n(v$,"STRONG",{});var BHr=s(_ae);zno=r(BHr,"realm"),BHr.forEach(t),Wno=r(v$," \u2014 "),DP=n(v$,"A",{href:!0});var IHr=s(DP);Qno=r(IHr,"RealmTokenizer"),IHr.forEach(t),Hno=r(v$," or "),GP=n(v$,"A",{href:!0});var qHr=s(GP);Uno=r(qHr,"RealmTokenizerFast"),qHr.forEach(t),Jno=r(v$," (Realm model)"),v$.forEach(t),Yno=i(S),Fs=n(S,"LI",{});var F$=s(Fs);uae=n(F$,"STRONG",{});var NHr=s(uae);Kno=r(NHr,"reformer"),NHr.forEach(t),Zno=r(F$," \u2014 "),OP=n(F$,"A",{href:!0});var jHr=s(OP);eso=r(jHr,"ReformerTokenizer"),jHr.forEach(t),oso=r(F$," or "),VP=n(F$,"A",{href:!0});var DHr=s(VP);rso=r(DHr,"ReformerTokenizerFast"),DHr.forEach(t),tso=r(F$," (Reformer model)"),F$.forEach(t),aso=i(S),Ts=n(S,"LI",{});var T$=s(Ts);bae=n(T$,"STRONG",{});var GHr=s(bae);nso=r(GHr,"rembert"),GHr.forEach(t),sso=r(T$," \u2014 "),XP=n(T$,"A",{href:!0});var OHr=s(XP);lso=r(OHr,"RemBertTokenizer"),OHr.forEach(t),iso=r(T$," or "),zP=n(T$,"A",{href:!0});var VHr=s(zP);dso=r(VHr,"RemBertTokenizerFast"),VHr.forEach(t),cso=r(T$," (RemBERT model)"),T$.forEach(t),fso=i(S),Ms=n(S,"LI",{});var M$=s(Ms);vae=n(M$,"STRONG",{});var XHr=s(vae);mso=r(XHr,"retribert"),XHr.forEach(t),gso=r(M$," \u2014 "),WP=n(M$,"A",{href:!0});var zHr=s(WP);hso=r(zHr,"RetriBertTokenizer"),zHr.forEach(t),pso=r(M$," or "),QP=n(M$,"A",{href:!0});var WHr=s(QP);_so=r(WHr,"RetriBertTokenizerFast"),WHr.forEach(t),uso=r(M$," (RetriBERT model)"),M$.forEach(t),bso=i(S),Es=n(S,"LI",{});var E$=s(Es);Fae=n(E$,"STRONG",{});var QHr=s(Fae);vso=r(QHr,"roberta"),QHr.forEach(t),Fso=r(E$," \u2014 "),HP=n(E$,"A",{href:!0});var HHr=s(HP);Tso=r(HHr,"RobertaTokenizer"),HHr.forEach(t),Mso=r(E$," or "),UP=n(E$,"A",{href:!0});var UHr=s(UP);Eso=r(UHr,"RobertaTokenizerFast"),UHr.forEach(t),Cso=r(E$," (RoBERTa model)"),E$.forEach(t),wso=i(S),Cs=n(S,"LI",{});var C$=s(Cs);Tae=n(C$,"STRONG",{});var JHr=s(Tae);Aso=r(JHr,"roformer"),JHr.forEach(t),yso=r(C$," \u2014 "),JP=n(C$,"A",{href:!0});var YHr=s(JP);Lso=r(YHr,"RoFormerTokenizer"),YHr.forEach(t),xso=r(C$," or "),YP=n(C$,"A",{href:!0});var KHr=s(YP);$so=r(KHr,"RoFormerTokenizerFast"),KHr.forEach(t),kso=r(C$," (RoFormer model)"),C$.forEach(t),Sso=i(S),Wg=n(S,"LI",{});var d0e=s(Wg);Mae=n(d0e,"STRONG",{});var ZHr=s(Mae);Rso=r(ZHr,"speech_to_text"),ZHr.forEach(t),Pso=r(d0e," \u2014 "),KP=n(d0e,"A",{href:!0});var eUr=s(KP);Bso=r(eUr,"Speech2TextTokenizer"),eUr.forEach(t),Iso=r(d0e," (Speech2Text model)"),d0e.forEach(t),qso=i(S),Qg=n(S,"LI",{});var c0e=s(Qg);Eae=n(c0e,"STRONG",{});var oUr=s(Eae);Nso=r(oUr,"speech_to_text_2"),oUr.forEach(t),jso=r(c0e," \u2014 "),ZP=n(c0e,"A",{href:!0});var rUr=s(ZP);Dso=r(rUr,"Speech2Text2Tokenizer"),rUr.forEach(t),Gso=r(c0e," (Speech2Text2 model)"),c0e.forEach(t),Oso=i(S),ws=n(S,"LI",{});var w$=s(ws);Cae=n(w$,"STRONG",{});var tUr=s(Cae);Vso=r(tUr,"splinter"),tUr.forEach(t),Xso=r(w$," \u2014 "),eB=n(w$,"A",{href:!0});var aUr=s(eB);zso=r(aUr,"SplinterTokenizer"),aUr.forEach(t),Wso=r(w$," or "),oB=n(w$,"A",{href:!0});var nUr=s(oB);Qso=r(nUr,"SplinterTokenizerFast"),nUr.forEach(t),Hso=r(w$," (Splinter model)"),w$.forEach(t),Uso=i(S),As=n(S,"LI",{});var A$=s(As);wae=n(A$,"STRONG",{});var sUr=s(wae);Jso=r(sUr,"squeezebert"),sUr.forEach(t),Yso=r(A$," \u2014 "),rB=n(A$,"A",{href:!0});var lUr=s(rB);Kso=r(lUr,"SqueezeBertTokenizer"),lUr.forEach(t),Zso=r(A$," or "),tB=n(A$,"A",{href:!0});var iUr=s(tB);elo=r(iUr,"SqueezeBertTokenizerFast"),iUr.forEach(t),olo=r(A$," (SqueezeBERT model)"),A$.forEach(t),rlo=i(S),ys=n(S,"LI",{});var y$=s(ys);Aae=n(y$,"STRONG",{});var dUr=s(Aae);tlo=r(dUr,"t5"),dUr.forEach(t),alo=r(y$," \u2014 "),aB=n(y$,"A",{href:!0});var cUr=s(aB);nlo=r(cUr,"T5Tokenizer"),cUr.forEach(t),slo=r(y$," or "),nB=n(y$,"A",{href:!0});var fUr=s(nB);llo=r(fUr,"T5TokenizerFast"),fUr.forEach(t),ilo=r(y$," (T5 model)"),y$.forEach(t),dlo=i(S),Hg=n(S,"LI",{});var f0e=s(Hg);yae=n(f0e,"STRONG",{});var mUr=s(yae);clo=r(mUr,"tapas"),mUr.forEach(t),flo=r(f0e," \u2014 "),sB=n(f0e,"A",{href:!0});var gUr=s(sB);mlo=r(gUr,"TapasTokenizer"),gUr.forEach(t),glo=r(f0e," (TAPAS model)"),f0e.forEach(t),hlo=i(S),Ug=n(S,"LI",{});var m0e=s(Ug);Lae=n(m0e,"STRONG",{});var hUr=s(Lae);plo=r(hUr,"tapex"),hUr.forEach(t),_lo=r(m0e," \u2014 "),lB=n(m0e,"A",{href:!0});var pUr=s(lB);ulo=r(pUr,"TapexTokenizer"),pUr.forEach(t),blo=r(m0e," (TAPEX model)"),m0e.forEach(t),vlo=i(S),Jg=n(S,"LI",{});var g0e=s(Jg);xae=n(g0e,"STRONG",{});var _Ur=s(xae);Flo=r(_Ur,"transfo-xl"),_Ur.forEach(t),Tlo=r(g0e," \u2014 "),iB=n(g0e,"A",{href:!0});var uUr=s(iB);Mlo=r(uUr,"TransfoXLTokenizer"),uUr.forEach(t),Elo=r(g0e," (Transformer-XL model)"),g0e.forEach(t),Clo=i(S),Ls=n(S,"LI",{});var L$=s(Ls);$ae=n(L$,"STRONG",{});var bUr=s($ae);wlo=r(bUr,"visual_bert"),bUr.forEach(t),Alo=r(L$," \u2014 "),dB=n(L$,"A",{href:!0});var vUr=s(dB);ylo=r(vUr,"BertTokenizer"),vUr.forEach(t),Llo=r(L$," or "),cB=n(L$,"A",{href:!0});var FUr=s(cB);xlo=r(FUr,"BertTokenizerFast"),FUr.forEach(t),$lo=r(L$," (VisualBert model)"),L$.forEach(t),klo=i(S),Yg=n(S,"LI",{});var h0e=s(Yg);kae=n(h0e,"STRONG",{});var TUr=s(kae);Slo=r(TUr,"wav2vec2"),TUr.forEach(t),Rlo=r(h0e," \u2014 "),fB=n(h0e,"A",{href:!0});var MUr=s(fB);Plo=r(MUr,"Wav2Vec2CTCTokenizer"),MUr.forEach(t),Blo=r(h0e," (Wav2Vec2 model)"),h0e.forEach(t),Ilo=i(S),Kg=n(S,"LI",{});var p0e=s(Kg);Sae=n(p0e,"STRONG",{});var EUr=s(Sae);qlo=r(EUr,"wav2vec2-conformer"),EUr.forEach(t),Nlo=r(p0e," \u2014 "),mB=n(p0e,"A",{href:!0});var CUr=s(mB);jlo=r(CUr,"Wav2Vec2CTCTokenizer"),CUr.forEach(t),Dlo=r(p0e," (Wav2Vec2-Conformer model)"),p0e.forEach(t),Glo=i(S),Zg=n(S,"LI",{});var _0e=s(Zg);Rae=n(_0e,"STRONG",{});var wUr=s(Rae);Olo=r(wUr,"wav2vec2_phoneme"),wUr.forEach(t),Vlo=r(_0e," \u2014 "),gB=n(_0e,"A",{href:!0});var AUr=s(gB);Xlo=r(AUr,"Wav2Vec2PhonemeCTCTokenizer"),AUr.forEach(t),zlo=r(_0e," (Wav2Vec2Phoneme model)"),_0e.forEach(t),Wlo=i(S),xs=n(S,"LI",{});var x$=s(xs);Pae=n(x$,"STRONG",{});var yUr=s(Pae);Qlo=r(yUr,"xglm"),yUr.forEach(t),Hlo=r(x$," \u2014 "),hB=n(x$,"A",{href:!0});var LUr=s(hB);Ulo=r(LUr,"XGLMTokenizer"),LUr.forEach(t),Jlo=r(x$," or "),pB=n(x$,"A",{href:!0});var xUr=s(pB);Ylo=r(xUr,"XGLMTokenizerFast"),xUr.forEach(t),Klo=r(x$," (XGLM model)"),x$.forEach(t),Zlo=i(S),eh=n(S,"LI",{});var u0e=s(eh);Bae=n(u0e,"STRONG",{});var $Ur=s(Bae);eio=r($Ur,"xlm"),$Ur.forEach(t),oio=r(u0e," \u2014 "),_B=n(u0e,"A",{href:!0});var kUr=s(_B);rio=r(kUr,"XLMTokenizer"),kUr.forEach(t),tio=r(u0e," (XLM model)"),u0e.forEach(t),aio=i(S),oh=n(S,"LI",{});var b0e=s(oh);Iae=n(b0e,"STRONG",{});var SUr=s(Iae);nio=r(SUr,"xlm-prophetnet"),SUr.forEach(t),sio=r(b0e," \u2014 "),uB=n(b0e,"A",{href:!0});var RUr=s(uB);lio=r(RUr,"XLMProphetNetTokenizer"),RUr.forEach(t),iio=r(b0e," (XLMProphetNet model)"),b0e.forEach(t),dio=i(S),$s=n(S,"LI",{});var $$=s($s);qae=n($$,"STRONG",{});var PUr=s(qae);cio=r(PUr,"xlm-roberta"),PUr.forEach(t),fio=r($$," \u2014 "),bB=n($$,"A",{href:!0});var BUr=s(bB);mio=r(BUr,"XLMRobertaTokenizer"),BUr.forEach(t),gio=r($$," or "),vB=n($$,"A",{href:!0});var IUr=s(vB);hio=r(IUr,"XLMRobertaTokenizerFast"),IUr.forEach(t),pio=r($$," (XLM-RoBERTa model)"),$$.forEach(t),_io=i(S),ks=n(S,"LI",{});var k$=s(ks);Nae=n(k$,"STRONG",{});var qUr=s(Nae);uio=r(qUr,"xlm-roberta-xl"),qUr.forEach(t),bio=r(k$," \u2014 "),FB=n(k$,"A",{href:!0});var NUr=s(FB);vio=r(NUr,"RobertaTokenizer"),NUr.forEach(t),Fio=r(k$," or "),TB=n(k$,"A",{href:!0});var jUr=s(TB);Tio=r(jUr,"RobertaTokenizerFast"),jUr.forEach(t),Mio=r(k$," (XLM-RoBERTa-XL model)"),k$.forEach(t),Eio=i(S),Ss=n(S,"LI",{});var S$=s(Ss);jae=n(S$,"STRONG",{});var DUr=s(jae);Cio=r(DUr,"xlnet"),DUr.forEach(t),wio=r(S$," \u2014 "),MB=n(S$,"A",{href:!0});var GUr=s(MB);Aio=r(GUr,"XLNetTokenizer"),GUr.forEach(t),yio=r(S$," or "),EB=n(S$,"A",{href:!0});var OUr=s(EB);Lio=r(OUr,"XLNetTokenizerFast"),OUr.forEach(t),xio=r(S$," (XLNet model)"),S$.forEach(t),$io=i(S),Rs=n(S,"LI",{});var R$=s(Rs);Dae=n(R$,"STRONG",{});var VUr=s(Dae);kio=r(VUr,"yoso"),VUr.forEach(t),Sio=r(R$," \u2014 "),CB=n(R$,"A",{href:!0});var XUr=s(CB);Rio=r(XUr,"AlbertTokenizer"),XUr.forEach(t),Pio=r(R$," or "),wB=n(R$,"A",{href:!0});var zUr=s(wB);Bio=r(zUr,"AlbertTokenizerFast"),zUr.forEach(t),Iio=r(R$," (YOSO model)"),R$.forEach(t),S.forEach(t),qio=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),Nio=i(qs),th=n(qs,"DIV",{class:!0});var Lje=s(th);T(S6.$$.fragment,Lje),jio=i(Lje),Gae=n(Lje,"P",{});var WUr=s(Gae);Dio=r(WUr,"Register a new tokenizer in this mapping."),WUr.forEach(t),Lje.forEach(t),qs.forEach(t),xqe=i(f),Mi=n(f,"H2",{class:!0});var xje=s(Mi);ah=n(xje,"A",{id:!0,class:!0,href:!0});var QUr=s(ah);Oae=n(QUr,"SPAN",{});var HUr=s(Oae);T(R6.$$.fragment,HUr),HUr.forEach(t),QUr.forEach(t),Gio=i(xje),Vae=n(xje,"SPAN",{});var UUr=s(Vae);Oio=r(UUr,"AutoFeatureExtractor"),UUr.forEach(t),xje.forEach(t),$qe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(P6.$$.fragment,js),Vio=i(js),B6=n(js,"P",{});var $je=s(B6);Xio=r($je,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AB=n($je,"A",{href:!0});var JUr=s(AB);zio=r(JUr,"AutoFeatureExtractor.from_pretrained()"),JUr.forEach(t),Wio=r($je," class method."),$je.forEach(t),Qio=i(js),I6=n(js,"P",{});var kje=s(I6);Hio=r(kje,"This class cannot be instantiated directly using "),Xae=n(kje,"CODE",{});var YUr=s(Xae);Uio=r(YUr,"__init__()"),YUr.forEach(t),Jio=r(kje," (throws an error)."),kje.forEach(t),Yio=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(q6.$$.fragment,Zt),Kio=i(Zt),zae=n(Zt,"P",{});var KUr=s(zae);Zio=r(KUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KUr.forEach(t),edo=i(Zt),ya=n(Zt,"P",{});var M0=s(ya);odo=r(M0,"The feature extractor class to instantiate is selected based on the "),Wae=n(M0,"CODE",{});var ZUr=s(Wae);rdo=r(ZUr,"model_type"),ZUr.forEach(t),tdo=r(M0,` property of the config object
(either passed as an argument or loaded from `),Qae=n(M0,"CODE",{});var eJr=s(Qae);ado=r(eJr,"pretrained_model_name_or_path"),eJr.forEach(t),ndo=r(M0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hae=n(M0,"CODE",{});var oJr=s(Hae);sdo=r(oJr,"pretrained_model_name_or_path"),oJr.forEach(t),ldo=r(M0,":"),M0.forEach(t),ido=i(Zt),K=n(Zt,"UL",{});var ee=s(K);nh=n(ee,"LI",{});var v0e=s(nh);Uae=n(v0e,"STRONG",{});var rJr=s(Uae);ddo=r(rJr,"beit"),rJr.forEach(t),cdo=r(v0e," \u2014 "),yB=n(v0e,"A",{href:!0});var tJr=s(yB);fdo=r(tJr,"BeitFeatureExtractor"),tJr.forEach(t),mdo=r(v0e," (BEiT model)"),v0e.forEach(t),gdo=i(ee),sh=n(ee,"LI",{});var F0e=s(sh);Jae=n(F0e,"STRONG",{});var aJr=s(Jae);hdo=r(aJr,"clip"),aJr.forEach(t),pdo=r(F0e," \u2014 "),LB=n(F0e,"A",{href:!0});var nJr=s(LB);_do=r(nJr,"CLIPFeatureExtractor"),nJr.forEach(t),udo=r(F0e," (CLIP model)"),F0e.forEach(t),bdo=i(ee),lh=n(ee,"LI",{});var T0e=s(lh);Yae=n(T0e,"STRONG",{});var sJr=s(Yae);vdo=r(sJr,"convnext"),sJr.forEach(t),Fdo=r(T0e," \u2014 "),xB=n(T0e,"A",{href:!0});var lJr=s(xB);Tdo=r(lJr,"ConvNextFeatureExtractor"),lJr.forEach(t),Mdo=r(T0e," (ConvNext model)"),T0e.forEach(t),Edo=i(ee),ih=n(ee,"LI",{});var M0e=s(ih);Kae=n(M0e,"STRONG",{});var iJr=s(Kae);Cdo=r(iJr,"cvt"),iJr.forEach(t),wdo=r(M0e," \u2014 "),$B=n(M0e,"A",{href:!0});var dJr=s($B);Ado=r(dJr,"ConvNextFeatureExtractor"),dJr.forEach(t),ydo=r(M0e," (CvT model)"),M0e.forEach(t),Ldo=i(ee),dh=n(ee,"LI",{});var E0e=s(dh);Zae=n(E0e,"STRONG",{});var cJr=s(Zae);xdo=r(cJr,"data2vec-audio"),cJr.forEach(t),$do=r(E0e," \u2014 "),kB=n(E0e,"A",{href:!0});var fJr=s(kB);kdo=r(fJr,"Wav2Vec2FeatureExtractor"),fJr.forEach(t),Sdo=r(E0e," (Data2VecAudio model)"),E0e.forEach(t),Rdo=i(ee),ch=n(ee,"LI",{});var C0e=s(ch);ene=n(C0e,"STRONG",{});var mJr=s(ene);Pdo=r(mJr,"data2vec-vision"),mJr.forEach(t),Bdo=r(C0e," \u2014 "),SB=n(C0e,"A",{href:!0});var gJr=s(SB);Ido=r(gJr,"BeitFeatureExtractor"),gJr.forEach(t),qdo=r(C0e," (Data2VecVision model)"),C0e.forEach(t),Ndo=i(ee),fh=n(ee,"LI",{});var w0e=s(fh);one=n(w0e,"STRONG",{});var hJr=s(one);jdo=r(hJr,"deit"),hJr.forEach(t),Ddo=r(w0e," \u2014 "),RB=n(w0e,"A",{href:!0});var pJr=s(RB);Gdo=r(pJr,"DeiTFeatureExtractor"),pJr.forEach(t),Odo=r(w0e," (DeiT model)"),w0e.forEach(t),Vdo=i(ee),mh=n(ee,"LI",{});var A0e=s(mh);rne=n(A0e,"STRONG",{});var _Jr=s(rne);Xdo=r(_Jr,"detr"),_Jr.forEach(t),zdo=r(A0e," \u2014 "),PB=n(A0e,"A",{href:!0});var uJr=s(PB);Wdo=r(uJr,"DetrFeatureExtractor"),uJr.forEach(t),Qdo=r(A0e," (DETR model)"),A0e.forEach(t),Hdo=i(ee),gh=n(ee,"LI",{});var y0e=s(gh);tne=n(y0e,"STRONG",{});var bJr=s(tne);Udo=r(bJr,"dpt"),bJr.forEach(t),Jdo=r(y0e," \u2014 "),BB=n(y0e,"A",{href:!0});var vJr=s(BB);Ydo=r(vJr,"DPTFeatureExtractor"),vJr.forEach(t),Kdo=r(y0e," (DPT model)"),y0e.forEach(t),Zdo=i(ee),hh=n(ee,"LI",{});var L0e=s(hh);ane=n(L0e,"STRONG",{});var FJr=s(ane);eco=r(FJr,"flava"),FJr.forEach(t),oco=r(L0e," \u2014 "),IB=n(L0e,"A",{href:!0});var TJr=s(IB);rco=r(TJr,"FlavaFeatureExtractor"),TJr.forEach(t),tco=r(L0e," (Flava model)"),L0e.forEach(t),aco=i(ee),ph=n(ee,"LI",{});var x0e=s(ph);nne=n(x0e,"STRONG",{});var MJr=s(nne);nco=r(MJr,"glpn"),MJr.forEach(t),sco=r(x0e," \u2014 "),qB=n(x0e,"A",{href:!0});var EJr=s(qB);lco=r(EJr,"GLPNFeatureExtractor"),EJr.forEach(t),ico=r(x0e," (GLPN model)"),x0e.forEach(t),dco=i(ee),_h=n(ee,"LI",{});var $0e=s(_h);sne=n($0e,"STRONG",{});var CJr=s(sne);cco=r(CJr,"groupvit"),CJr.forEach(t),fco=r($0e," \u2014 "),NB=n($0e,"A",{href:!0});var wJr=s(NB);mco=r(wJr,"CLIPFeatureExtractor"),wJr.forEach(t),gco=r($0e," (GroupViT model)"),$0e.forEach(t),hco=i(ee),uh=n(ee,"LI",{});var k0e=s(uh);lne=n(k0e,"STRONG",{});var AJr=s(lne);pco=r(AJr,"hubert"),AJr.forEach(t),_co=r(k0e," \u2014 "),jB=n(k0e,"A",{href:!0});var yJr=s(jB);uco=r(yJr,"Wav2Vec2FeatureExtractor"),yJr.forEach(t),bco=r(k0e," (Hubert model)"),k0e.forEach(t),vco=i(ee),bh=n(ee,"LI",{});var S0e=s(bh);ine=n(S0e,"STRONG",{});var LJr=s(ine);Fco=r(LJr,"layoutlmv2"),LJr.forEach(t),Tco=r(S0e," \u2014 "),DB=n(S0e,"A",{href:!0});var xJr=s(DB);Mco=r(xJr,"LayoutLMv2FeatureExtractor"),xJr.forEach(t),Eco=r(S0e," (LayoutLMv2 model)"),S0e.forEach(t),Cco=i(ee),vh=n(ee,"LI",{});var R0e=s(vh);dne=n(R0e,"STRONG",{});var $Jr=s(dne);wco=r($Jr,"maskformer"),$Jr.forEach(t),Aco=r(R0e," \u2014 "),GB=n(R0e,"A",{href:!0});var kJr=s(GB);yco=r(kJr,"MaskFormerFeatureExtractor"),kJr.forEach(t),Lco=r(R0e," (MaskFormer model)"),R0e.forEach(t),xco=i(ee),Fh=n(ee,"LI",{});var P0e=s(Fh);cne=n(P0e,"STRONG",{});var SJr=s(cne);$co=r(SJr,"perceiver"),SJr.forEach(t),kco=r(P0e," \u2014 "),OB=n(P0e,"A",{href:!0});var RJr=s(OB);Sco=r(RJr,"PerceiverFeatureExtractor"),RJr.forEach(t),Rco=r(P0e," (Perceiver model)"),P0e.forEach(t),Pco=i(ee),Th=n(ee,"LI",{});var B0e=s(Th);fne=n(B0e,"STRONG",{});var PJr=s(fne);Bco=r(PJr,"poolformer"),PJr.forEach(t),Ico=r(B0e," \u2014 "),VB=n(B0e,"A",{href:!0});var BJr=s(VB);qco=r(BJr,"PoolFormerFeatureExtractor"),BJr.forEach(t),Nco=r(B0e," (PoolFormer model)"),B0e.forEach(t),jco=i(ee),Mh=n(ee,"LI",{});var I0e=s(Mh);mne=n(I0e,"STRONG",{});var IJr=s(mne);Dco=r(IJr,"regnet"),IJr.forEach(t),Gco=r(I0e," \u2014 "),XB=n(I0e,"A",{href:!0});var qJr=s(XB);Oco=r(qJr,"ConvNextFeatureExtractor"),qJr.forEach(t),Vco=r(I0e," (RegNet model)"),I0e.forEach(t),Xco=i(ee),Eh=n(ee,"LI",{});var q0e=s(Eh);gne=n(q0e,"STRONG",{});var NJr=s(gne);zco=r(NJr,"resnet"),NJr.forEach(t),Wco=r(q0e," \u2014 "),zB=n(q0e,"A",{href:!0});var jJr=s(zB);Qco=r(jJr,"ConvNextFeatureExtractor"),jJr.forEach(t),Hco=r(q0e," (ResNet model)"),q0e.forEach(t),Uco=i(ee),Ch=n(ee,"LI",{});var N0e=s(Ch);hne=n(N0e,"STRONG",{});var DJr=s(hne);Jco=r(DJr,"segformer"),DJr.forEach(t),Yco=r(N0e," \u2014 "),WB=n(N0e,"A",{href:!0});var GJr=s(WB);Kco=r(GJr,"SegformerFeatureExtractor"),GJr.forEach(t),Zco=r(N0e," (SegFormer model)"),N0e.forEach(t),efo=i(ee),wh=n(ee,"LI",{});var j0e=s(wh);pne=n(j0e,"STRONG",{});var OJr=s(pne);ofo=r(OJr,"speech_to_text"),OJr.forEach(t),rfo=r(j0e," \u2014 "),QB=n(j0e,"A",{href:!0});var VJr=s(QB);tfo=r(VJr,"Speech2TextFeatureExtractor"),VJr.forEach(t),afo=r(j0e," (Speech2Text model)"),j0e.forEach(t),nfo=i(ee),Ah=n(ee,"LI",{});var D0e=s(Ah);_ne=n(D0e,"STRONG",{});var XJr=s(_ne);sfo=r(XJr,"swin"),XJr.forEach(t),lfo=r(D0e," \u2014 "),HB=n(D0e,"A",{href:!0});var zJr=s(HB);ifo=r(zJr,"ViTFeatureExtractor"),zJr.forEach(t),dfo=r(D0e," (Swin model)"),D0e.forEach(t),cfo=i(ee),yh=n(ee,"LI",{});var G0e=s(yh);une=n(G0e,"STRONG",{});var WJr=s(une);ffo=r(WJr,"van"),WJr.forEach(t),mfo=r(G0e," \u2014 "),UB=n(G0e,"A",{href:!0});var QJr=s(UB);gfo=r(QJr,"ConvNextFeatureExtractor"),QJr.forEach(t),hfo=r(G0e," (VAN model)"),G0e.forEach(t),pfo=i(ee),Lh=n(ee,"LI",{});var O0e=s(Lh);bne=n(O0e,"STRONG",{});var HJr=s(bne);_fo=r(HJr,"vit"),HJr.forEach(t),ufo=r(O0e," \u2014 "),JB=n(O0e,"A",{href:!0});var UJr=s(JB);bfo=r(UJr,"ViTFeatureExtractor"),UJr.forEach(t),vfo=r(O0e," (ViT model)"),O0e.forEach(t),Ffo=i(ee),xh=n(ee,"LI",{});var V0e=s(xh);vne=n(V0e,"STRONG",{});var JJr=s(vne);Tfo=r(JJr,"vit_mae"),JJr.forEach(t),Mfo=r(V0e," \u2014 "),YB=n(V0e,"A",{href:!0});var YJr=s(YB);Efo=r(YJr,"ViTFeatureExtractor"),YJr.forEach(t),Cfo=r(V0e," (ViTMAE model)"),V0e.forEach(t),wfo=i(ee),$h=n(ee,"LI",{});var X0e=s($h);Fne=n(X0e,"STRONG",{});var KJr=s(Fne);Afo=r(KJr,"wav2vec2"),KJr.forEach(t),yfo=r(X0e," \u2014 "),KB=n(X0e,"A",{href:!0});var ZJr=s(KB);Lfo=r(ZJr,"Wav2Vec2FeatureExtractor"),ZJr.forEach(t),xfo=r(X0e," (Wav2Vec2 model)"),X0e.forEach(t),$fo=i(ee),kh=n(ee,"LI",{});var z0e=s(kh);Tne=n(z0e,"STRONG",{});var eYr=s(Tne);kfo=r(eYr,"wav2vec2-conformer"),eYr.forEach(t),Sfo=r(z0e," \u2014 "),ZB=n(z0e,"A",{href:!0});var oYr=s(ZB);Rfo=r(oYr,"Wav2Vec2FeatureExtractor"),oYr.forEach(t),Pfo=r(z0e," (Wav2Vec2-Conformer model)"),z0e.forEach(t),Bfo=i(ee),Sh=n(ee,"LI",{});var W0e=s(Sh);Mne=n(W0e,"STRONG",{});var rYr=s(Mne);Ifo=r(rYr,"yolos"),rYr.forEach(t),qfo=r(W0e," \u2014 "),eI=n(W0e,"A",{href:!0});var tYr=s(eI);Nfo=r(tYr,"YolosFeatureExtractor"),tYr.forEach(t),jfo=r(W0e," (YOLOS model)"),W0e.forEach(t),ee.forEach(t),Dfo=i(Zt),T(Rh.$$.fragment,Zt),Gfo=i(Zt),T(Ph.$$.fragment,Zt),Zt.forEach(t),Ofo=i(js),Bh=n(js,"DIV",{class:!0});var Sje=s(Bh);T(N6.$$.fragment,Sje),Vfo=i(Sje),Ene=n(Sje,"P",{});var aYr=s(Ene);Xfo=r(aYr,"Register a new feature extractor for this class."),aYr.forEach(t),Sje.forEach(t),js.forEach(t),kqe=i(f),Ei=n(f,"H2",{class:!0});var Rje=s(Ei);Ih=n(Rje,"A",{id:!0,class:!0,href:!0});var nYr=s(Ih);Cne=n(nYr,"SPAN",{});var sYr=s(Cne);T(j6.$$.fragment,sYr),sYr.forEach(t),nYr.forEach(t),zfo=i(Rje),wne=n(Rje,"SPAN",{});var lYr=s(wne);Wfo=r(lYr,"AutoProcessor"),lYr.forEach(t),Rje.forEach(t),Sqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(D6.$$.fragment,Ds),Qfo=i(Ds),G6=n(Ds,"P",{});var Pje=s(G6);Hfo=r(Pje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),oI=n(Pje,"A",{href:!0});var iYr=s(oI);Ufo=r(iYr,"AutoProcessor.from_pretrained()"),iYr.forEach(t),Jfo=r(Pje," class method."),Pje.forEach(t),Yfo=i(Ds),O6=n(Ds,"P",{});var Bje=s(O6);Kfo=r(Bje,"This class cannot be instantiated directly using "),Ane=n(Bje,"CODE",{});var dYr=s(Ane);Zfo=r(dYr,"__init__()"),dYr.forEach(t),emo=r(Bje," (throws an error)."),Bje.forEach(t),omo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(V6.$$.fragment,ea),rmo=i(ea),yne=n(ea,"P",{});var cYr=s(yne);tmo=r(cYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cYr.forEach(t),amo=i(ea),Ci=n(ea,"P",{});var KK=s(Ci);nmo=r(KK,"The processor class to instantiate is selected based on the "),Lne=n(KK,"CODE",{});var fYr=s(Lne);smo=r(fYr,"model_type"),fYr.forEach(t),lmo=r(KK,` property of the config object (either
passed as an argument or loaded from `),xne=n(KK,"CODE",{});var mYr=s(xne);imo=r(mYr,"pretrained_model_name_or_path"),mYr.forEach(t),dmo=r(KK," if possible):"),KK.forEach(t),cmo=i(ea),he=n(ea,"UL",{});var ue=s(he);qh=n(ue,"LI",{});var Q0e=s(qh);$ne=n(Q0e,"STRONG",{});var gYr=s($ne);fmo=r(gYr,"clip"),gYr.forEach(t),mmo=r(Q0e," \u2014 "),rI=n(Q0e,"A",{href:!0});var hYr=s(rI);gmo=r(hYr,"CLIPProcessor"),hYr.forEach(t),hmo=r(Q0e," (CLIP model)"),Q0e.forEach(t),pmo=i(ue),Nh=n(ue,"LI",{});var H0e=s(Nh);kne=n(H0e,"STRONG",{});var pYr=s(kne);_mo=r(pYr,"flava"),pYr.forEach(t),umo=r(H0e," \u2014 "),Sne=n(H0e,"CODE",{});var _Yr=s(Sne);bmo=r(_Yr,"FLAVAProcessor"),_Yr.forEach(t),vmo=r(H0e," (Flava model)"),H0e.forEach(t),Fmo=i(ue),jh=n(ue,"LI",{});var U0e=s(jh);Rne=n(U0e,"STRONG",{});var uYr=s(Rne);Tmo=r(uYr,"groupvit"),uYr.forEach(t),Mmo=r(U0e," \u2014 "),tI=n(U0e,"A",{href:!0});var bYr=s(tI);Emo=r(bYr,"CLIPProcessor"),bYr.forEach(t),Cmo=r(U0e," (GroupViT model)"),U0e.forEach(t),wmo=i(ue),Dh=n(ue,"LI",{});var J0e=s(Dh);Pne=n(J0e,"STRONG",{});var vYr=s(Pne);Amo=r(vYr,"layoutlmv2"),vYr.forEach(t),ymo=r(J0e," \u2014 "),aI=n(J0e,"A",{href:!0});var FYr=s(aI);Lmo=r(FYr,"LayoutLMv2Processor"),FYr.forEach(t),xmo=r(J0e," (LayoutLMv2 model)"),J0e.forEach(t),$mo=i(ue),Gh=n(ue,"LI",{});var Y0e=s(Gh);Bne=n(Y0e,"STRONG",{});var TYr=s(Bne);kmo=r(TYr,"layoutxlm"),TYr.forEach(t),Smo=r(Y0e," \u2014 "),nI=n(Y0e,"A",{href:!0});var MYr=s(nI);Rmo=r(MYr,"LayoutXLMProcessor"),MYr.forEach(t),Pmo=r(Y0e," (LayoutXLM model)"),Y0e.forEach(t),Bmo=i(ue),Oh=n(ue,"LI",{});var K0e=s(Oh);Ine=n(K0e,"STRONG",{});var EYr=s(Ine);Imo=r(EYr,"sew"),EYr.forEach(t),qmo=r(K0e," \u2014 "),sI=n(K0e,"A",{href:!0});var CYr=s(sI);Nmo=r(CYr,"Wav2Vec2Processor"),CYr.forEach(t),jmo=r(K0e," (SEW model)"),K0e.forEach(t),Dmo=i(ue),Vh=n(ue,"LI",{});var Z0e=s(Vh);qne=n(Z0e,"STRONG",{});var wYr=s(qne);Gmo=r(wYr,"sew-d"),wYr.forEach(t),Omo=r(Z0e," \u2014 "),lI=n(Z0e,"A",{href:!0});var AYr=s(lI);Vmo=r(AYr,"Wav2Vec2Processor"),AYr.forEach(t),Xmo=r(Z0e," (SEW-D model)"),Z0e.forEach(t),zmo=i(ue),Xh=n(ue,"LI",{});var eAe=s(Xh);Nne=n(eAe,"STRONG",{});var yYr=s(Nne);Wmo=r(yYr,"speech_to_text"),yYr.forEach(t),Qmo=r(eAe," \u2014 "),iI=n(eAe,"A",{href:!0});var LYr=s(iI);Hmo=r(LYr,"Speech2TextProcessor"),LYr.forEach(t),Umo=r(eAe," (Speech2Text model)"),eAe.forEach(t),Jmo=i(ue),zh=n(ue,"LI",{});var oAe=s(zh);jne=n(oAe,"STRONG",{});var xYr=s(jne);Ymo=r(xYr,"speech_to_text_2"),xYr.forEach(t),Kmo=r(oAe," \u2014 "),dI=n(oAe,"A",{href:!0});var $Yr=s(dI);Zmo=r($Yr,"Speech2Text2Processor"),$Yr.forEach(t),ego=r(oAe," (Speech2Text2 model)"),oAe.forEach(t),ogo=i(ue),Wh=n(ue,"LI",{});var rAe=s(Wh);Dne=n(rAe,"STRONG",{});var kYr=s(Dne);rgo=r(kYr,"trocr"),kYr.forEach(t),tgo=r(rAe," \u2014 "),cI=n(rAe,"A",{href:!0});var SYr=s(cI);ago=r(SYr,"TrOCRProcessor"),SYr.forEach(t),ngo=r(rAe," (TrOCR model)"),rAe.forEach(t),sgo=i(ue),Qh=n(ue,"LI",{});var tAe=s(Qh);Gne=n(tAe,"STRONG",{});var RYr=s(Gne);lgo=r(RYr,"unispeech"),RYr.forEach(t),igo=r(tAe," \u2014 "),fI=n(tAe,"A",{href:!0});var PYr=s(fI);dgo=r(PYr,"Wav2Vec2Processor"),PYr.forEach(t),cgo=r(tAe," (UniSpeech model)"),tAe.forEach(t),fgo=i(ue),Hh=n(ue,"LI",{});var aAe=s(Hh);One=n(aAe,"STRONG",{});var BYr=s(One);mgo=r(BYr,"unispeech-sat"),BYr.forEach(t),ggo=r(aAe," \u2014 "),mI=n(aAe,"A",{href:!0});var IYr=s(mI);hgo=r(IYr,"Wav2Vec2Processor"),IYr.forEach(t),pgo=r(aAe," (UniSpeechSat model)"),aAe.forEach(t),_go=i(ue),Uh=n(ue,"LI",{});var nAe=s(Uh);Vne=n(nAe,"STRONG",{});var qYr=s(Vne);ugo=r(qYr,"vilt"),qYr.forEach(t),bgo=r(nAe," \u2014 "),gI=n(nAe,"A",{href:!0});var NYr=s(gI);vgo=r(NYr,"ViltProcessor"),NYr.forEach(t),Fgo=r(nAe," (ViLT model)"),nAe.forEach(t),Tgo=i(ue),Jh=n(ue,"LI",{});var sAe=s(Jh);Xne=n(sAe,"STRONG",{});var jYr=s(Xne);Mgo=r(jYr,"vision-text-dual-encoder"),jYr.forEach(t),Ego=r(sAe," \u2014 "),hI=n(sAe,"A",{href:!0});var DYr=s(hI);Cgo=r(DYr,"VisionTextDualEncoderProcessor"),DYr.forEach(t),wgo=r(sAe," (VisionTextDualEncoder model)"),sAe.forEach(t),Ago=i(ue),Yh=n(ue,"LI",{});var lAe=s(Yh);zne=n(lAe,"STRONG",{});var GYr=s(zne);ygo=r(GYr,"wav2vec2"),GYr.forEach(t),Lgo=r(lAe," \u2014 "),pI=n(lAe,"A",{href:!0});var OYr=s(pI);xgo=r(OYr,"Wav2Vec2Processor"),OYr.forEach(t),$go=r(lAe," (Wav2Vec2 model)"),lAe.forEach(t),kgo=i(ue),Kh=n(ue,"LI",{});var iAe=s(Kh);Wne=n(iAe,"STRONG",{});var VYr=s(Wne);Sgo=r(VYr,"wav2vec2-conformer"),VYr.forEach(t),Rgo=r(iAe," \u2014 "),_I=n(iAe,"A",{href:!0});var XYr=s(_I);Pgo=r(XYr,"Wav2Vec2Processor"),XYr.forEach(t),Bgo=r(iAe," (Wav2Vec2-Conformer model)"),iAe.forEach(t),Igo=i(ue),Zh=n(ue,"LI",{});var dAe=s(Zh);Qne=n(dAe,"STRONG",{});var zYr=s(Qne);qgo=r(zYr,"wavlm"),zYr.forEach(t),Ngo=r(dAe," \u2014 "),uI=n(dAe,"A",{href:!0});var WYr=s(uI);jgo=r(WYr,"Wav2Vec2Processor"),WYr.forEach(t),Dgo=r(dAe," (WavLM model)"),dAe.forEach(t),ue.forEach(t),Ggo=i(ea),T(ep.$$.fragment,ea),Ogo=i(ea),T(op.$$.fragment,ea),ea.forEach(t),Vgo=i(Ds),rp=n(Ds,"DIV",{class:!0});var Ije=s(rp);T(X6.$$.fragment,Ije),Xgo=i(Ije),Hne=n(Ije,"P",{});var QYr=s(Hne);zgo=r(QYr,"Register a new processor for this class."),QYr.forEach(t),Ije.forEach(t),Ds.forEach(t),Rqe=i(f),wi=n(f,"H2",{class:!0});var qje=s(wi);tp=n(qje,"A",{id:!0,class:!0,href:!0});var HYr=s(tp);Une=n(HYr,"SPAN",{});var UYr=s(Une);T(z6.$$.fragment,UYr),UYr.forEach(t),HYr.forEach(t),Wgo=i(qje),Jne=n(qje,"SPAN",{});var JYr=s(Jne);Qgo=r(JYr,"AutoModel"),JYr.forEach(t),qje.forEach(t),Pqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(W6.$$.fragment,Gs),Hgo=i(Gs),Ai=n(Gs,"P",{});var ZK=s(Ai);Ugo=r(ZK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bI=n(ZK,"A",{href:!0});var YYr=s(bI);Jgo=r(YYr,"from_pretrained()"),YYr.forEach(t),Ygo=r(ZK," class method or the "),vI=n(ZK,"A",{href:!0});var KYr=s(vI);Kgo=r(KYr,"from_config()"),KYr.forEach(t),Zgo=r(ZK,` class
method.`),ZK.forEach(t),eho=i(Gs),Q6=n(Gs,"P",{});var Nje=s(Q6);oho=r(Nje,"This class cannot be instantiated directly using "),Yne=n(Nje,"CODE",{});var ZYr=s(Yne);rho=r(ZYr,"__init__()"),ZYr.forEach(t),tho=r(Nje," (throws an error)."),Nje.forEach(t),aho=i(Gs),tt=n(Gs,"DIV",{class:!0});var E0=s(tt);T(H6.$$.fragment,E0),nho=i(E0),Kne=n(E0,"P",{});var eKr=s(Kne);sho=r(eKr,"Instantiates one of the base model classes of the library from a configuration."),eKr.forEach(t),lho=i(E0),yi=n(E0,"P",{});var eZ=s(yi);iho=r(eZ,`Note:
Loading a model from its configuration file does `),Zne=n(eZ,"STRONG",{});var oKr=s(Zne);dho=r(oKr,"not"),oKr.forEach(t),cho=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FI=n(eZ,"A",{href:!0});var rKr=s(FI);fho=r(rKr,"from_pretrained()"),rKr.forEach(t),mho=r(eZ," to load the model weights."),eZ.forEach(t),gho=i(E0),T(ap.$$.fragment,E0),E0.forEach(t),hho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(U6.$$.fragment,oa),pho=i(oa),ese=n(oa,"P",{});var tKr=s(ese);_ho=r(tKr,"Instantiate one of the base model classes of the library from a pretrained model."),tKr.forEach(t),uho=i(oa),La=n(oa,"P",{});var C0=s(La);bho=r(C0,"The model class to instantiate is selected based on the "),ose=n(C0,"CODE",{});var aKr=s(ose);vho=r(aKr,"model_type"),aKr.forEach(t),Fho=r(C0,` property of the config object (either
passed as an argument or loaded from `),rse=n(C0,"CODE",{});var nKr=s(rse);Tho=r(nKr,"pretrained_model_name_or_path"),nKr.forEach(t),Mho=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=n(C0,"CODE",{});var sKr=s(tse);Eho=r(sKr,"pretrained_model_name_or_path"),sKr.forEach(t),Cho=r(C0,":"),C0.forEach(t),who=i(oa),x=n(oa,"UL",{});var $=s(x);np=n($,"LI",{});var cAe=s(np);ase=n(cAe,"STRONG",{});var lKr=s(ase);Aho=r(lKr,"albert"),lKr.forEach(t),yho=r(cAe," \u2014 "),TI=n(cAe,"A",{href:!0});var iKr=s(TI);Lho=r(iKr,"AlbertModel"),iKr.forEach(t),xho=r(cAe," (ALBERT model)"),cAe.forEach(t),$ho=i($),sp=n($,"LI",{});var fAe=s(sp);nse=n(fAe,"STRONG",{});var dKr=s(nse);kho=r(dKr,"bart"),dKr.forEach(t),Sho=r(fAe," \u2014 "),MI=n(fAe,"A",{href:!0});var cKr=s(MI);Rho=r(cKr,"BartModel"),cKr.forEach(t),Pho=r(fAe," (BART model)"),fAe.forEach(t),Bho=i($),lp=n($,"LI",{});var mAe=s(lp);sse=n(mAe,"STRONG",{});var fKr=s(sse);Iho=r(fKr,"beit"),fKr.forEach(t),qho=r(mAe," \u2014 "),EI=n(mAe,"A",{href:!0});var mKr=s(EI);Nho=r(mKr,"BeitModel"),mKr.forEach(t),jho=r(mAe," (BEiT model)"),mAe.forEach(t),Dho=i($),ip=n($,"LI",{});var gAe=s(ip);lse=n(gAe,"STRONG",{});var gKr=s(lse);Gho=r(gKr,"bert"),gKr.forEach(t),Oho=r(gAe," \u2014 "),CI=n(gAe,"A",{href:!0});var hKr=s(CI);Vho=r(hKr,"BertModel"),hKr.forEach(t),Xho=r(gAe," (BERT model)"),gAe.forEach(t),zho=i($),dp=n($,"LI",{});var hAe=s(dp);ise=n(hAe,"STRONG",{});var pKr=s(ise);Who=r(pKr,"bert-generation"),pKr.forEach(t),Qho=r(hAe," \u2014 "),wI=n(hAe,"A",{href:!0});var _Kr=s(wI);Hho=r(_Kr,"BertGenerationEncoder"),_Kr.forEach(t),Uho=r(hAe," (Bert Generation model)"),hAe.forEach(t),Jho=i($),cp=n($,"LI",{});var pAe=s(cp);dse=n(pAe,"STRONG",{});var uKr=s(dse);Yho=r(uKr,"big_bird"),uKr.forEach(t),Kho=r(pAe," \u2014 "),AI=n(pAe,"A",{href:!0});var bKr=s(AI);Zho=r(bKr,"BigBirdModel"),bKr.forEach(t),epo=r(pAe," (BigBird model)"),pAe.forEach(t),opo=i($),fp=n($,"LI",{});var _Ae=s(fp);cse=n(_Ae,"STRONG",{});var vKr=s(cse);rpo=r(vKr,"bigbird_pegasus"),vKr.forEach(t),tpo=r(_Ae," \u2014 "),yI=n(_Ae,"A",{href:!0});var FKr=s(yI);apo=r(FKr,"BigBirdPegasusModel"),FKr.forEach(t),npo=r(_Ae," (BigBirdPegasus model)"),_Ae.forEach(t),spo=i($),mp=n($,"LI",{});var uAe=s(mp);fse=n(uAe,"STRONG",{});var TKr=s(fse);lpo=r(TKr,"blenderbot"),TKr.forEach(t),ipo=r(uAe," \u2014 "),LI=n(uAe,"A",{href:!0});var MKr=s(LI);dpo=r(MKr,"BlenderbotModel"),MKr.forEach(t),cpo=r(uAe," (Blenderbot model)"),uAe.forEach(t),fpo=i($),gp=n($,"LI",{});var bAe=s(gp);mse=n(bAe,"STRONG",{});var EKr=s(mse);mpo=r(EKr,"blenderbot-small"),EKr.forEach(t),gpo=r(bAe," \u2014 "),xI=n(bAe,"A",{href:!0});var CKr=s(xI);hpo=r(CKr,"BlenderbotSmallModel"),CKr.forEach(t),ppo=r(bAe," (BlenderbotSmall model)"),bAe.forEach(t),_po=i($),hp=n($,"LI",{});var vAe=s(hp);gse=n(vAe,"STRONG",{});var wKr=s(gse);upo=r(wKr,"camembert"),wKr.forEach(t),bpo=r(vAe," \u2014 "),$I=n(vAe,"A",{href:!0});var AKr=s($I);vpo=r(AKr,"CamembertModel"),AKr.forEach(t),Fpo=r(vAe," (CamemBERT model)"),vAe.forEach(t),Tpo=i($),pp=n($,"LI",{});var FAe=s(pp);hse=n(FAe,"STRONG",{});var yKr=s(hse);Mpo=r(yKr,"canine"),yKr.forEach(t),Epo=r(FAe," \u2014 "),kI=n(FAe,"A",{href:!0});var LKr=s(kI);Cpo=r(LKr,"CanineModel"),LKr.forEach(t),wpo=r(FAe," (Canine model)"),FAe.forEach(t),Apo=i($),_p=n($,"LI",{});var TAe=s(_p);pse=n(TAe,"STRONG",{});var xKr=s(pse);ypo=r(xKr,"clip"),xKr.forEach(t),Lpo=r(TAe," \u2014 "),SI=n(TAe,"A",{href:!0});var $Kr=s(SI);xpo=r($Kr,"CLIPModel"),$Kr.forEach(t),$po=r(TAe," (CLIP model)"),TAe.forEach(t),kpo=i($),up=n($,"LI",{});var MAe=s(up);_se=n(MAe,"STRONG",{});var kKr=s(_se);Spo=r(kKr,"convbert"),kKr.forEach(t),Rpo=r(MAe," \u2014 "),RI=n(MAe,"A",{href:!0});var SKr=s(RI);Ppo=r(SKr,"ConvBertModel"),SKr.forEach(t),Bpo=r(MAe," (ConvBERT model)"),MAe.forEach(t),Ipo=i($),bp=n($,"LI",{});var EAe=s(bp);use=n(EAe,"STRONG",{});var RKr=s(use);qpo=r(RKr,"convnext"),RKr.forEach(t),Npo=r(EAe," \u2014 "),PI=n(EAe,"A",{href:!0});var PKr=s(PI);jpo=r(PKr,"ConvNextModel"),PKr.forEach(t),Dpo=r(EAe," (ConvNext model)"),EAe.forEach(t),Gpo=i($),vp=n($,"LI",{});var CAe=s(vp);bse=n(CAe,"STRONG",{});var BKr=s(bse);Opo=r(BKr,"ctrl"),BKr.forEach(t),Vpo=r(CAe," \u2014 "),BI=n(CAe,"A",{href:!0});var IKr=s(BI);Xpo=r(IKr,"CTRLModel"),IKr.forEach(t),zpo=r(CAe," (CTRL model)"),CAe.forEach(t),Wpo=i($),Fp=n($,"LI",{});var wAe=s(Fp);vse=n(wAe,"STRONG",{});var qKr=s(vse);Qpo=r(qKr,"cvt"),qKr.forEach(t),Hpo=r(wAe," \u2014 "),II=n(wAe,"A",{href:!0});var NKr=s(II);Upo=r(NKr,"CvtModel"),NKr.forEach(t),Jpo=r(wAe," (CvT model)"),wAe.forEach(t),Ypo=i($),Tp=n($,"LI",{});var AAe=s(Tp);Fse=n(AAe,"STRONG",{});var jKr=s(Fse);Kpo=r(jKr,"data2vec-audio"),jKr.forEach(t),Zpo=r(AAe," \u2014 "),qI=n(AAe,"A",{href:!0});var DKr=s(qI);e_o=r(DKr,"Data2VecAudioModel"),DKr.forEach(t),o_o=r(AAe," (Data2VecAudio model)"),AAe.forEach(t),r_o=i($),Mp=n($,"LI",{});var yAe=s(Mp);Tse=n(yAe,"STRONG",{});var GKr=s(Tse);t_o=r(GKr,"data2vec-text"),GKr.forEach(t),a_o=r(yAe," \u2014 "),NI=n(yAe,"A",{href:!0});var OKr=s(NI);n_o=r(OKr,"Data2VecTextModel"),OKr.forEach(t),s_o=r(yAe," (Data2VecText model)"),yAe.forEach(t),l_o=i($),Ep=n($,"LI",{});var LAe=s(Ep);Mse=n(LAe,"STRONG",{});var VKr=s(Mse);i_o=r(VKr,"data2vec-vision"),VKr.forEach(t),d_o=r(LAe," \u2014 "),jI=n(LAe,"A",{href:!0});var XKr=s(jI);c_o=r(XKr,"Data2VecVisionModel"),XKr.forEach(t),f_o=r(LAe," (Data2VecVision model)"),LAe.forEach(t),m_o=i($),Cp=n($,"LI",{});var xAe=s(Cp);Ese=n(xAe,"STRONG",{});var zKr=s(Ese);g_o=r(zKr,"deberta"),zKr.forEach(t),h_o=r(xAe," \u2014 "),DI=n(xAe,"A",{href:!0});var WKr=s(DI);p_o=r(WKr,"DebertaModel"),WKr.forEach(t),__o=r(xAe," (DeBERTa model)"),xAe.forEach(t),u_o=i($),wp=n($,"LI",{});var $Ae=s(wp);Cse=n($Ae,"STRONG",{});var QKr=s(Cse);b_o=r(QKr,"deberta-v2"),QKr.forEach(t),v_o=r($Ae," \u2014 "),GI=n($Ae,"A",{href:!0});var HKr=s(GI);F_o=r(HKr,"DebertaV2Model"),HKr.forEach(t),T_o=r($Ae," (DeBERTa-v2 model)"),$Ae.forEach(t),M_o=i($),Ap=n($,"LI",{});var kAe=s(Ap);wse=n(kAe,"STRONG",{});var UKr=s(wse);E_o=r(UKr,"decision_transformer"),UKr.forEach(t),C_o=r(kAe," \u2014 "),OI=n(kAe,"A",{href:!0});var JKr=s(OI);w_o=r(JKr,"DecisionTransformerModel"),JKr.forEach(t),A_o=r(kAe," (Decision Transformer model)"),kAe.forEach(t),y_o=i($),yp=n($,"LI",{});var SAe=s(yp);Ase=n(SAe,"STRONG",{});var YKr=s(Ase);L_o=r(YKr,"deit"),YKr.forEach(t),x_o=r(SAe," \u2014 "),VI=n(SAe,"A",{href:!0});var KKr=s(VI);$_o=r(KKr,"DeiTModel"),KKr.forEach(t),k_o=r(SAe," (DeiT model)"),SAe.forEach(t),S_o=i($),Lp=n($,"LI",{});var RAe=s(Lp);yse=n(RAe,"STRONG",{});var ZKr=s(yse);R_o=r(ZKr,"detr"),ZKr.forEach(t),P_o=r(RAe," \u2014 "),XI=n(RAe,"A",{href:!0});var eZr=s(XI);B_o=r(eZr,"DetrModel"),eZr.forEach(t),I_o=r(RAe," (DETR model)"),RAe.forEach(t),q_o=i($),xp=n($,"LI",{});var PAe=s(xp);Lse=n(PAe,"STRONG",{});var oZr=s(Lse);N_o=r(oZr,"distilbert"),oZr.forEach(t),j_o=r(PAe," \u2014 "),zI=n(PAe,"A",{href:!0});var rZr=s(zI);D_o=r(rZr,"DistilBertModel"),rZr.forEach(t),G_o=r(PAe," (DistilBERT model)"),PAe.forEach(t),O_o=i($),$p=n($,"LI",{});var BAe=s($p);xse=n(BAe,"STRONG",{});var tZr=s(xse);V_o=r(tZr,"dpr"),tZr.forEach(t),X_o=r(BAe," \u2014 "),WI=n(BAe,"A",{href:!0});var aZr=s(WI);z_o=r(aZr,"DPRQuestionEncoder"),aZr.forEach(t),W_o=r(BAe," (DPR model)"),BAe.forEach(t),Q_o=i($),kp=n($,"LI",{});var IAe=s(kp);$se=n(IAe,"STRONG",{});var nZr=s($se);H_o=r(nZr,"dpt"),nZr.forEach(t),U_o=r(IAe," \u2014 "),QI=n(IAe,"A",{href:!0});var sZr=s(QI);J_o=r(sZr,"DPTModel"),sZr.forEach(t),Y_o=r(IAe," (DPT model)"),IAe.forEach(t),K_o=i($),Sp=n($,"LI",{});var qAe=s(Sp);kse=n(qAe,"STRONG",{});var lZr=s(kse);Z_o=r(lZr,"electra"),lZr.forEach(t),euo=r(qAe," \u2014 "),HI=n(qAe,"A",{href:!0});var iZr=s(HI);ouo=r(iZr,"ElectraModel"),iZr.forEach(t),ruo=r(qAe," (ELECTRA model)"),qAe.forEach(t),tuo=i($),Rp=n($,"LI",{});var NAe=s(Rp);Sse=n(NAe,"STRONG",{});var dZr=s(Sse);auo=r(dZr,"flaubert"),dZr.forEach(t),nuo=r(NAe," \u2014 "),UI=n(NAe,"A",{href:!0});var cZr=s(UI);suo=r(cZr,"FlaubertModel"),cZr.forEach(t),luo=r(NAe," (FlauBERT model)"),NAe.forEach(t),iuo=i($),Pp=n($,"LI",{});var jAe=s(Pp);Rse=n(jAe,"STRONG",{});var fZr=s(Rse);duo=r(fZr,"flava"),fZr.forEach(t),cuo=r(jAe," \u2014 "),JI=n(jAe,"A",{href:!0});var mZr=s(JI);fuo=r(mZr,"FlavaModel"),mZr.forEach(t),muo=r(jAe," (Flava model)"),jAe.forEach(t),guo=i($),Bp=n($,"LI",{});var DAe=s(Bp);Pse=n(DAe,"STRONG",{});var gZr=s(Pse);huo=r(gZr,"fnet"),gZr.forEach(t),puo=r(DAe," \u2014 "),YI=n(DAe,"A",{href:!0});var hZr=s(YI);_uo=r(hZr,"FNetModel"),hZr.forEach(t),uuo=r(DAe," (FNet model)"),DAe.forEach(t),buo=i($),Ip=n($,"LI",{});var GAe=s(Ip);Bse=n(GAe,"STRONG",{});var pZr=s(Bse);vuo=r(pZr,"fsmt"),pZr.forEach(t),Fuo=r(GAe," \u2014 "),KI=n(GAe,"A",{href:!0});var _Zr=s(KI);Tuo=r(_Zr,"FSMTModel"),_Zr.forEach(t),Muo=r(GAe," (FairSeq Machine-Translation model)"),GAe.forEach(t),Euo=i($),Ps=n($,"LI",{});var P$=s(Ps);Ise=n(P$,"STRONG",{});var uZr=s(Ise);Cuo=r(uZr,"funnel"),uZr.forEach(t),wuo=r(P$," \u2014 "),ZI=n(P$,"A",{href:!0});var bZr=s(ZI);Auo=r(bZr,"FunnelModel"),bZr.forEach(t),yuo=r(P$," or "),eq=n(P$,"A",{href:!0});var vZr=s(eq);Luo=r(vZr,"FunnelBaseModel"),vZr.forEach(t),xuo=r(P$," (Funnel Transformer model)"),P$.forEach(t),$uo=i($),qp=n($,"LI",{});var OAe=s(qp);qse=n(OAe,"STRONG",{});var FZr=s(qse);kuo=r(FZr,"glpn"),FZr.forEach(t),Suo=r(OAe," \u2014 "),oq=n(OAe,"A",{href:!0});var TZr=s(oq);Ruo=r(TZr,"GLPNModel"),TZr.forEach(t),Puo=r(OAe," (GLPN model)"),OAe.forEach(t),Buo=i($),Np=n($,"LI",{});var VAe=s(Np);Nse=n(VAe,"STRONG",{});var MZr=s(Nse);Iuo=r(MZr,"gpt2"),MZr.forEach(t),quo=r(VAe," \u2014 "),rq=n(VAe,"A",{href:!0});var EZr=s(rq);Nuo=r(EZr,"GPT2Model"),EZr.forEach(t),juo=r(VAe," (OpenAI GPT-2 model)"),VAe.forEach(t),Duo=i($),jp=n($,"LI",{});var XAe=s(jp);jse=n(XAe,"STRONG",{});var CZr=s(jse);Guo=r(CZr,"gpt_neo"),CZr.forEach(t),Ouo=r(XAe," \u2014 "),tq=n(XAe,"A",{href:!0});var wZr=s(tq);Vuo=r(wZr,"GPTNeoModel"),wZr.forEach(t),Xuo=r(XAe," (GPT Neo model)"),XAe.forEach(t),zuo=i($),Dp=n($,"LI",{});var zAe=s(Dp);Dse=n(zAe,"STRONG",{});var AZr=s(Dse);Wuo=r(AZr,"gptj"),AZr.forEach(t),Quo=r(zAe," \u2014 "),aq=n(zAe,"A",{href:!0});var yZr=s(aq);Huo=r(yZr,"GPTJModel"),yZr.forEach(t),Uuo=r(zAe," (GPT-J model)"),zAe.forEach(t),Juo=i($),Gp=n($,"LI",{});var WAe=s(Gp);Gse=n(WAe,"STRONG",{});var LZr=s(Gse);Yuo=r(LZr,"groupvit"),LZr.forEach(t),Kuo=r(WAe," \u2014 "),nq=n(WAe,"A",{href:!0});var xZr=s(nq);Zuo=r(xZr,"GroupViTModel"),xZr.forEach(t),e1o=r(WAe," (GroupViT model)"),WAe.forEach(t),o1o=i($),Op=n($,"LI",{});var QAe=s(Op);Ose=n(QAe,"STRONG",{});var $Zr=s(Ose);r1o=r($Zr,"hubert"),$Zr.forEach(t),t1o=r(QAe," \u2014 "),sq=n(QAe,"A",{href:!0});var kZr=s(sq);a1o=r(kZr,"HubertModel"),kZr.forEach(t),n1o=r(QAe," (Hubert model)"),QAe.forEach(t),s1o=i($),Vp=n($,"LI",{});var HAe=s(Vp);Vse=n(HAe,"STRONG",{});var SZr=s(Vse);l1o=r(SZr,"ibert"),SZr.forEach(t),i1o=r(HAe," \u2014 "),lq=n(HAe,"A",{href:!0});var RZr=s(lq);d1o=r(RZr,"IBertModel"),RZr.forEach(t),c1o=r(HAe," (I-BERT model)"),HAe.forEach(t),f1o=i($),Xp=n($,"LI",{});var UAe=s(Xp);Xse=n(UAe,"STRONG",{});var PZr=s(Xse);m1o=r(PZr,"imagegpt"),PZr.forEach(t),g1o=r(UAe," \u2014 "),iq=n(UAe,"A",{href:!0});var BZr=s(iq);h1o=r(BZr,"ImageGPTModel"),BZr.forEach(t),p1o=r(UAe," (ImageGPT model)"),UAe.forEach(t),_1o=i($),zp=n($,"LI",{});var JAe=s(zp);zse=n(JAe,"STRONG",{});var IZr=s(zse);u1o=r(IZr,"layoutlm"),IZr.forEach(t),b1o=r(JAe," \u2014 "),dq=n(JAe,"A",{href:!0});var qZr=s(dq);v1o=r(qZr,"LayoutLMModel"),qZr.forEach(t),F1o=r(JAe," (LayoutLM model)"),JAe.forEach(t),T1o=i($),Wp=n($,"LI",{});var YAe=s(Wp);Wse=n(YAe,"STRONG",{});var NZr=s(Wse);M1o=r(NZr,"layoutlmv2"),NZr.forEach(t),E1o=r(YAe," \u2014 "),cq=n(YAe,"A",{href:!0});var jZr=s(cq);C1o=r(jZr,"LayoutLMv2Model"),jZr.forEach(t),w1o=r(YAe," (LayoutLMv2 model)"),YAe.forEach(t),A1o=i($),Qp=n($,"LI",{});var KAe=s(Qp);Qse=n(KAe,"STRONG",{});var DZr=s(Qse);y1o=r(DZr,"led"),DZr.forEach(t),L1o=r(KAe," \u2014 "),fq=n(KAe,"A",{href:!0});var GZr=s(fq);x1o=r(GZr,"LEDModel"),GZr.forEach(t),$1o=r(KAe," (LED model)"),KAe.forEach(t),k1o=i($),Hp=n($,"LI",{});var ZAe=s(Hp);Hse=n(ZAe,"STRONG",{});var OZr=s(Hse);S1o=r(OZr,"longformer"),OZr.forEach(t),R1o=r(ZAe," \u2014 "),mq=n(ZAe,"A",{href:!0});var VZr=s(mq);P1o=r(VZr,"LongformerModel"),VZr.forEach(t),B1o=r(ZAe," (Longformer model)"),ZAe.forEach(t),I1o=i($),Up=n($,"LI",{});var e6e=s(Up);Use=n(e6e,"STRONG",{});var XZr=s(Use);q1o=r(XZr,"luke"),XZr.forEach(t),N1o=r(e6e," \u2014 "),gq=n(e6e,"A",{href:!0});var zZr=s(gq);j1o=r(zZr,"LukeModel"),zZr.forEach(t),D1o=r(e6e," (LUKE model)"),e6e.forEach(t),G1o=i($),Jp=n($,"LI",{});var o6e=s(Jp);Jse=n(o6e,"STRONG",{});var WZr=s(Jse);O1o=r(WZr,"lxmert"),WZr.forEach(t),V1o=r(o6e," \u2014 "),hq=n(o6e,"A",{href:!0});var QZr=s(hq);X1o=r(QZr,"LxmertModel"),QZr.forEach(t),z1o=r(o6e," (LXMERT model)"),o6e.forEach(t),W1o=i($),Yp=n($,"LI",{});var r6e=s(Yp);Yse=n(r6e,"STRONG",{});var HZr=s(Yse);Q1o=r(HZr,"m2m_100"),HZr.forEach(t),H1o=r(r6e," \u2014 "),pq=n(r6e,"A",{href:!0});var UZr=s(pq);U1o=r(UZr,"M2M100Model"),UZr.forEach(t),J1o=r(r6e," (M2M100 model)"),r6e.forEach(t),Y1o=i($),Kp=n($,"LI",{});var t6e=s(Kp);Kse=n(t6e,"STRONG",{});var JZr=s(Kse);K1o=r(JZr,"marian"),JZr.forEach(t),Z1o=r(t6e," \u2014 "),_q=n(t6e,"A",{href:!0});var YZr=s(_q);e3o=r(YZr,"MarianModel"),YZr.forEach(t),o3o=r(t6e," (Marian model)"),t6e.forEach(t),r3o=i($),Zp=n($,"LI",{});var a6e=s(Zp);Zse=n(a6e,"STRONG",{});var KZr=s(Zse);t3o=r(KZr,"maskformer"),KZr.forEach(t),a3o=r(a6e," \u2014 "),uq=n(a6e,"A",{href:!0});var ZZr=s(uq);n3o=r(ZZr,"MaskFormerModel"),ZZr.forEach(t),s3o=r(a6e," (MaskFormer model)"),a6e.forEach(t),l3o=i($),e_=n($,"LI",{});var n6e=s(e_);ele=n(n6e,"STRONG",{});var eet=s(ele);i3o=r(eet,"mbart"),eet.forEach(t),d3o=r(n6e," \u2014 "),bq=n(n6e,"A",{href:!0});var oet=s(bq);c3o=r(oet,"MBartModel"),oet.forEach(t),f3o=r(n6e," (mBART model)"),n6e.forEach(t),m3o=i($),o_=n($,"LI",{});var s6e=s(o_);ole=n(s6e,"STRONG",{});var ret=s(ole);g3o=r(ret,"megatron-bert"),ret.forEach(t),h3o=r(s6e," \u2014 "),vq=n(s6e,"A",{href:!0});var tet=s(vq);p3o=r(tet,"MegatronBertModel"),tet.forEach(t),_3o=r(s6e," (MegatronBert model)"),s6e.forEach(t),u3o=i($),r_=n($,"LI",{});var l6e=s(r_);rle=n(l6e,"STRONG",{});var aet=s(rle);b3o=r(aet,"mobilebert"),aet.forEach(t),v3o=r(l6e," \u2014 "),Fq=n(l6e,"A",{href:!0});var net=s(Fq);F3o=r(net,"MobileBertModel"),net.forEach(t),T3o=r(l6e," (MobileBERT model)"),l6e.forEach(t),M3o=i($),t_=n($,"LI",{});var i6e=s(t_);tle=n(i6e,"STRONG",{});var set=s(tle);E3o=r(set,"mpnet"),set.forEach(t),C3o=r(i6e," \u2014 "),Tq=n(i6e,"A",{href:!0});var iet=s(Tq);w3o=r(iet,"MPNetModel"),iet.forEach(t),A3o=r(i6e," (MPNet model)"),i6e.forEach(t),y3o=i($),a_=n($,"LI",{});var d6e=s(a_);ale=n(d6e,"STRONG",{});var det=s(ale);L3o=r(det,"mt5"),det.forEach(t),x3o=r(d6e," \u2014 "),Mq=n(d6e,"A",{href:!0});var cet=s(Mq);$3o=r(cet,"MT5Model"),cet.forEach(t),k3o=r(d6e," (mT5 model)"),d6e.forEach(t),S3o=i($),n_=n($,"LI",{});var c6e=s(n_);nle=n(c6e,"STRONG",{});var fet=s(nle);R3o=r(fet,"nystromformer"),fet.forEach(t),P3o=r(c6e," \u2014 "),Eq=n(c6e,"A",{href:!0});var met=s(Eq);B3o=r(met,"NystromformerModel"),met.forEach(t),I3o=r(c6e," (Nystromformer model)"),c6e.forEach(t),q3o=i($),s_=n($,"LI",{});var f6e=s(s_);sle=n(f6e,"STRONG",{});var get=s(sle);N3o=r(get,"openai-gpt"),get.forEach(t),j3o=r(f6e," \u2014 "),Cq=n(f6e,"A",{href:!0});var het=s(Cq);D3o=r(het,"OpenAIGPTModel"),het.forEach(t),G3o=r(f6e," (OpenAI GPT model)"),f6e.forEach(t),O3o=i($),l_=n($,"LI",{});var m6e=s(l_);lle=n(m6e,"STRONG",{});var pet=s(lle);V3o=r(pet,"opt"),pet.forEach(t),X3o=r(m6e," \u2014 "),wq=n(m6e,"A",{href:!0});var _et=s(wq);z3o=r(_et,"OPTModel"),_et.forEach(t),W3o=r(m6e," (OPT model)"),m6e.forEach(t),Q3o=i($),i_=n($,"LI",{});var g6e=s(i_);ile=n(g6e,"STRONG",{});var uet=s(ile);H3o=r(uet,"pegasus"),uet.forEach(t),U3o=r(g6e," \u2014 "),Aq=n(g6e,"A",{href:!0});var bet=s(Aq);J3o=r(bet,"PegasusModel"),bet.forEach(t),Y3o=r(g6e," (Pegasus model)"),g6e.forEach(t),K3o=i($),d_=n($,"LI",{});var h6e=s(d_);dle=n(h6e,"STRONG",{});var vet=s(dle);Z3o=r(vet,"perceiver"),vet.forEach(t),ebo=r(h6e," \u2014 "),yq=n(h6e,"A",{href:!0});var Fet=s(yq);obo=r(Fet,"PerceiverModel"),Fet.forEach(t),rbo=r(h6e," (Perceiver model)"),h6e.forEach(t),tbo=i($),c_=n($,"LI",{});var p6e=s(c_);cle=n(p6e,"STRONG",{});var Tet=s(cle);abo=r(Tet,"plbart"),Tet.forEach(t),nbo=r(p6e," \u2014 "),Lq=n(p6e,"A",{href:!0});var Met=s(Lq);sbo=r(Met,"PLBartModel"),Met.forEach(t),lbo=r(p6e," (PLBart model)"),p6e.forEach(t),ibo=i($),f_=n($,"LI",{});var _6e=s(f_);fle=n(_6e,"STRONG",{});var Eet=s(fle);dbo=r(Eet,"poolformer"),Eet.forEach(t),cbo=r(_6e," \u2014 "),xq=n(_6e,"A",{href:!0});var Cet=s(xq);fbo=r(Cet,"PoolFormerModel"),Cet.forEach(t),mbo=r(_6e," (PoolFormer model)"),_6e.forEach(t),gbo=i($),m_=n($,"LI",{});var u6e=s(m_);mle=n(u6e,"STRONG",{});var wet=s(mle);hbo=r(wet,"prophetnet"),wet.forEach(t),pbo=r(u6e," \u2014 "),$q=n(u6e,"A",{href:!0});var Aet=s($q);_bo=r(Aet,"ProphetNetModel"),Aet.forEach(t),ubo=r(u6e," (ProphetNet model)"),u6e.forEach(t),bbo=i($),g_=n($,"LI",{});var b6e=s(g_);gle=n(b6e,"STRONG",{});var yet=s(gle);vbo=r(yet,"qdqbert"),yet.forEach(t),Fbo=r(b6e," \u2014 "),kq=n(b6e,"A",{href:!0});var Let=s(kq);Tbo=r(Let,"QDQBertModel"),Let.forEach(t),Mbo=r(b6e," (QDQBert model)"),b6e.forEach(t),Ebo=i($),h_=n($,"LI",{});var v6e=s(h_);hle=n(v6e,"STRONG",{});var xet=s(hle);Cbo=r(xet,"reformer"),xet.forEach(t),wbo=r(v6e," \u2014 "),Sq=n(v6e,"A",{href:!0});var $et=s(Sq);Abo=r($et,"ReformerModel"),$et.forEach(t),ybo=r(v6e," (Reformer model)"),v6e.forEach(t),Lbo=i($),p_=n($,"LI",{});var F6e=s(p_);ple=n(F6e,"STRONG",{});var ket=s(ple);xbo=r(ket,"regnet"),ket.forEach(t),$bo=r(F6e," \u2014 "),Rq=n(F6e,"A",{href:!0});var Set=s(Rq);kbo=r(Set,"RegNetModel"),Set.forEach(t),Sbo=r(F6e," (RegNet model)"),F6e.forEach(t),Rbo=i($),__=n($,"LI",{});var T6e=s(__);_le=n(T6e,"STRONG",{});var Ret=s(_le);Pbo=r(Ret,"rembert"),Ret.forEach(t),Bbo=r(T6e," \u2014 "),Pq=n(T6e,"A",{href:!0});var Pet=s(Pq);Ibo=r(Pet,"RemBertModel"),Pet.forEach(t),qbo=r(T6e," (RemBERT model)"),T6e.forEach(t),Nbo=i($),u_=n($,"LI",{});var M6e=s(u_);ule=n(M6e,"STRONG",{});var Bet=s(ule);jbo=r(Bet,"resnet"),Bet.forEach(t),Dbo=r(M6e," \u2014 "),Bq=n(M6e,"A",{href:!0});var Iet=s(Bq);Gbo=r(Iet,"ResNetModel"),Iet.forEach(t),Obo=r(M6e," (ResNet model)"),M6e.forEach(t),Vbo=i($),b_=n($,"LI",{});var E6e=s(b_);ble=n(E6e,"STRONG",{});var qet=s(ble);Xbo=r(qet,"retribert"),qet.forEach(t),zbo=r(E6e," \u2014 "),Iq=n(E6e,"A",{href:!0});var Net=s(Iq);Wbo=r(Net,"RetriBertModel"),Net.forEach(t),Qbo=r(E6e," (RetriBERT model)"),E6e.forEach(t),Hbo=i($),v_=n($,"LI",{});var C6e=s(v_);vle=n(C6e,"STRONG",{});var jet=s(vle);Ubo=r(jet,"roberta"),jet.forEach(t),Jbo=r(C6e," \u2014 "),qq=n(C6e,"A",{href:!0});var Det=s(qq);Ybo=r(Det,"RobertaModel"),Det.forEach(t),Kbo=r(C6e," (RoBERTa model)"),C6e.forEach(t),Zbo=i($),F_=n($,"LI",{});var w6e=s(F_);Fle=n(w6e,"STRONG",{});var Get=s(Fle);e2o=r(Get,"roformer"),Get.forEach(t),o2o=r(w6e," \u2014 "),Nq=n(w6e,"A",{href:!0});var Oet=s(Nq);r2o=r(Oet,"RoFormerModel"),Oet.forEach(t),t2o=r(w6e," (RoFormer model)"),w6e.forEach(t),a2o=i($),T_=n($,"LI",{});var A6e=s(T_);Tle=n(A6e,"STRONG",{});var Vet=s(Tle);n2o=r(Vet,"segformer"),Vet.forEach(t),s2o=r(A6e," \u2014 "),jq=n(A6e,"A",{href:!0});var Xet=s(jq);l2o=r(Xet,"SegformerModel"),Xet.forEach(t),i2o=r(A6e," (SegFormer model)"),A6e.forEach(t),d2o=i($),M_=n($,"LI",{});var y6e=s(M_);Mle=n(y6e,"STRONG",{});var zet=s(Mle);c2o=r(zet,"sew"),zet.forEach(t),f2o=r(y6e," \u2014 "),Dq=n(y6e,"A",{href:!0});var Wet=s(Dq);m2o=r(Wet,"SEWModel"),Wet.forEach(t),g2o=r(y6e," (SEW model)"),y6e.forEach(t),h2o=i($),E_=n($,"LI",{});var L6e=s(E_);Ele=n(L6e,"STRONG",{});var Qet=s(Ele);p2o=r(Qet,"sew-d"),Qet.forEach(t),_2o=r(L6e," \u2014 "),Gq=n(L6e,"A",{href:!0});var Het=s(Gq);u2o=r(Het,"SEWDModel"),Het.forEach(t),b2o=r(L6e," (SEW-D model)"),L6e.forEach(t),v2o=i($),C_=n($,"LI",{});var x6e=s(C_);Cle=n(x6e,"STRONG",{});var Uet=s(Cle);F2o=r(Uet,"speech_to_text"),Uet.forEach(t),T2o=r(x6e," \u2014 "),Oq=n(x6e,"A",{href:!0});var Jet=s(Oq);M2o=r(Jet,"Speech2TextModel"),Jet.forEach(t),E2o=r(x6e," (Speech2Text model)"),x6e.forEach(t),C2o=i($),w_=n($,"LI",{});var $6e=s(w_);wle=n($6e,"STRONG",{});var Yet=s(wle);w2o=r(Yet,"splinter"),Yet.forEach(t),A2o=r($6e," \u2014 "),Vq=n($6e,"A",{href:!0});var Ket=s(Vq);y2o=r(Ket,"SplinterModel"),Ket.forEach(t),L2o=r($6e," (Splinter model)"),$6e.forEach(t),x2o=i($),A_=n($,"LI",{});var k6e=s(A_);Ale=n(k6e,"STRONG",{});var Zet=s(Ale);$2o=r(Zet,"squeezebert"),Zet.forEach(t),k2o=r(k6e," \u2014 "),Xq=n(k6e,"A",{href:!0});var eot=s(Xq);S2o=r(eot,"SqueezeBertModel"),eot.forEach(t),R2o=r(k6e," (SqueezeBERT model)"),k6e.forEach(t),P2o=i($),y_=n($,"LI",{});var S6e=s(y_);yle=n(S6e,"STRONG",{});var oot=s(yle);B2o=r(oot,"swin"),oot.forEach(t),I2o=r(S6e," \u2014 "),zq=n(S6e,"A",{href:!0});var rot=s(zq);q2o=r(rot,"SwinModel"),rot.forEach(t),N2o=r(S6e," (Swin model)"),S6e.forEach(t),j2o=i($),L_=n($,"LI",{});var R6e=s(L_);Lle=n(R6e,"STRONG",{});var tot=s(Lle);D2o=r(tot,"t5"),tot.forEach(t),G2o=r(R6e," \u2014 "),Wq=n(R6e,"A",{href:!0});var aot=s(Wq);O2o=r(aot,"T5Model"),aot.forEach(t),V2o=r(R6e," (T5 model)"),R6e.forEach(t),X2o=i($),x_=n($,"LI",{});var P6e=s(x_);xle=n(P6e,"STRONG",{});var not=s(xle);z2o=r(not,"tapas"),not.forEach(t),W2o=r(P6e," \u2014 "),Qq=n(P6e,"A",{href:!0});var sot=s(Qq);Q2o=r(sot,"TapasModel"),sot.forEach(t),H2o=r(P6e," (TAPAS model)"),P6e.forEach(t),U2o=i($),$_=n($,"LI",{});var B6e=s($_);$le=n(B6e,"STRONG",{});var lot=s($le);J2o=r(lot,"trajectory_transformer"),lot.forEach(t),Y2o=r(B6e," \u2014 "),Hq=n(B6e,"A",{href:!0});var iot=s(Hq);K2o=r(iot,"TrajectoryTransformerModel"),iot.forEach(t),Z2o=r(B6e," (Trajectory Transformer model)"),B6e.forEach(t),evo=i($),k_=n($,"LI",{});var I6e=s(k_);kle=n(I6e,"STRONG",{});var dot=s(kle);ovo=r(dot,"transfo-xl"),dot.forEach(t),rvo=r(I6e," \u2014 "),Uq=n(I6e,"A",{href:!0});var cot=s(Uq);tvo=r(cot,"TransfoXLModel"),cot.forEach(t),avo=r(I6e," (Transformer-XL model)"),I6e.forEach(t),nvo=i($),S_=n($,"LI",{});var q6e=s(S_);Sle=n(q6e,"STRONG",{});var fot=s(Sle);svo=r(fot,"unispeech"),fot.forEach(t),lvo=r(q6e," \u2014 "),Jq=n(q6e,"A",{href:!0});var mot=s(Jq);ivo=r(mot,"UniSpeechModel"),mot.forEach(t),dvo=r(q6e," (UniSpeech model)"),q6e.forEach(t),cvo=i($),R_=n($,"LI",{});var N6e=s(R_);Rle=n(N6e,"STRONG",{});var got=s(Rle);fvo=r(got,"unispeech-sat"),got.forEach(t),mvo=r(N6e," \u2014 "),Yq=n(N6e,"A",{href:!0});var hot=s(Yq);gvo=r(hot,"UniSpeechSatModel"),hot.forEach(t),hvo=r(N6e," (UniSpeechSat model)"),N6e.forEach(t),pvo=i($),P_=n($,"LI",{});var j6e=s(P_);Ple=n(j6e,"STRONG",{});var pot=s(Ple);_vo=r(pot,"van"),pot.forEach(t),uvo=r(j6e," \u2014 "),Kq=n(j6e,"A",{href:!0});var _ot=s(Kq);bvo=r(_ot,"VanModel"),_ot.forEach(t),vvo=r(j6e," (VAN model)"),j6e.forEach(t),Fvo=i($),B_=n($,"LI",{});var D6e=s(B_);Ble=n(D6e,"STRONG",{});var uot=s(Ble);Tvo=r(uot,"vilt"),uot.forEach(t),Mvo=r(D6e," \u2014 "),Zq=n(D6e,"A",{href:!0});var bot=s(Zq);Evo=r(bot,"ViltModel"),bot.forEach(t),Cvo=r(D6e," (ViLT model)"),D6e.forEach(t),wvo=i($),I_=n($,"LI",{});var G6e=s(I_);Ile=n(G6e,"STRONG",{});var vot=s(Ile);Avo=r(vot,"vision-text-dual-encoder"),vot.forEach(t),yvo=r(G6e," \u2014 "),eN=n(G6e,"A",{href:!0});var Fot=s(eN);Lvo=r(Fot,"VisionTextDualEncoderModel"),Fot.forEach(t),xvo=r(G6e," (VisionTextDualEncoder model)"),G6e.forEach(t),$vo=i($),q_=n($,"LI",{});var O6e=s(q_);qle=n(O6e,"STRONG",{});var Tot=s(qle);kvo=r(Tot,"visual_bert"),Tot.forEach(t),Svo=r(O6e," \u2014 "),oN=n(O6e,"A",{href:!0});var Mot=s(oN);Rvo=r(Mot,"VisualBertModel"),Mot.forEach(t),Pvo=r(O6e," (VisualBert model)"),O6e.forEach(t),Bvo=i($),N_=n($,"LI",{});var V6e=s(N_);Nle=n(V6e,"STRONG",{});var Eot=s(Nle);Ivo=r(Eot,"vit"),Eot.forEach(t),qvo=r(V6e," \u2014 "),rN=n(V6e,"A",{href:!0});var Cot=s(rN);Nvo=r(Cot,"ViTModel"),Cot.forEach(t),jvo=r(V6e," (ViT model)"),V6e.forEach(t),Dvo=i($),j_=n($,"LI",{});var X6e=s(j_);jle=n(X6e,"STRONG",{});var wot=s(jle);Gvo=r(wot,"vit_mae"),wot.forEach(t),Ovo=r(X6e," \u2014 "),tN=n(X6e,"A",{href:!0});var Aot=s(tN);Vvo=r(Aot,"ViTMAEModel"),Aot.forEach(t),Xvo=r(X6e," (ViTMAE model)"),X6e.forEach(t),zvo=i($),D_=n($,"LI",{});var z6e=s(D_);Dle=n(z6e,"STRONG",{});var yot=s(Dle);Wvo=r(yot,"wav2vec2"),yot.forEach(t),Qvo=r(z6e," \u2014 "),aN=n(z6e,"A",{href:!0});var Lot=s(aN);Hvo=r(Lot,"Wav2Vec2Model"),Lot.forEach(t),Uvo=r(z6e," (Wav2Vec2 model)"),z6e.forEach(t),Jvo=i($),G_=n($,"LI",{});var W6e=s(G_);Gle=n(W6e,"STRONG",{});var xot=s(Gle);Yvo=r(xot,"wav2vec2-conformer"),xot.forEach(t),Kvo=r(W6e," \u2014 "),nN=n(W6e,"A",{href:!0});var $ot=s(nN);Zvo=r($ot,"Wav2Vec2ConformerModel"),$ot.forEach(t),eFo=r(W6e," (Wav2Vec2-Conformer model)"),W6e.forEach(t),oFo=i($),O_=n($,"LI",{});var Q6e=s(O_);Ole=n(Q6e,"STRONG",{});var kot=s(Ole);rFo=r(kot,"wavlm"),kot.forEach(t),tFo=r(Q6e," \u2014 "),sN=n(Q6e,"A",{href:!0});var Sot=s(sN);aFo=r(Sot,"WavLMModel"),Sot.forEach(t),nFo=r(Q6e," (WavLM model)"),Q6e.forEach(t),sFo=i($),V_=n($,"LI",{});var H6e=s(V_);Vle=n(H6e,"STRONG",{});var Rot=s(Vle);lFo=r(Rot,"xglm"),Rot.forEach(t),iFo=r(H6e," \u2014 "),lN=n(H6e,"A",{href:!0});var Pot=s(lN);dFo=r(Pot,"XGLMModel"),Pot.forEach(t),cFo=r(H6e," (XGLM model)"),H6e.forEach(t),fFo=i($),X_=n($,"LI",{});var U6e=s(X_);Xle=n(U6e,"STRONG",{});var Bot=s(Xle);mFo=r(Bot,"xlm"),Bot.forEach(t),gFo=r(U6e," \u2014 "),iN=n(U6e,"A",{href:!0});var Iot=s(iN);hFo=r(Iot,"XLMModel"),Iot.forEach(t),pFo=r(U6e," (XLM model)"),U6e.forEach(t),_Fo=i($),z_=n($,"LI",{});var J6e=s(z_);zle=n(J6e,"STRONG",{});var qot=s(zle);uFo=r(qot,"xlm-prophetnet"),qot.forEach(t),bFo=r(J6e," \u2014 "),dN=n(J6e,"A",{href:!0});var Not=s(dN);vFo=r(Not,"XLMProphetNetModel"),Not.forEach(t),FFo=r(J6e," (XLMProphetNet model)"),J6e.forEach(t),TFo=i($),W_=n($,"LI",{});var Y6e=s(W_);Wle=n(Y6e,"STRONG",{});var jot=s(Wle);MFo=r(jot,"xlm-roberta"),jot.forEach(t),EFo=r(Y6e," \u2014 "),cN=n(Y6e,"A",{href:!0});var Dot=s(cN);CFo=r(Dot,"XLMRobertaModel"),Dot.forEach(t),wFo=r(Y6e," (XLM-RoBERTa model)"),Y6e.forEach(t),AFo=i($),Q_=n($,"LI",{});var K6e=s(Q_);Qle=n(K6e,"STRONG",{});var Got=s(Qle);yFo=r(Got,"xlm-roberta-xl"),Got.forEach(t),LFo=r(K6e," \u2014 "),fN=n(K6e,"A",{href:!0});var Oot=s(fN);xFo=r(Oot,"XLMRobertaXLModel"),Oot.forEach(t),$Fo=r(K6e," (XLM-RoBERTa-XL model)"),K6e.forEach(t),kFo=i($),H_=n($,"LI",{});var Z6e=s(H_);Hle=n(Z6e,"STRONG",{});var Vot=s(Hle);SFo=r(Vot,"xlnet"),Vot.forEach(t),RFo=r(Z6e," \u2014 "),mN=n(Z6e,"A",{href:!0});var Xot=s(mN);PFo=r(Xot,"XLNetModel"),Xot.forEach(t),BFo=r(Z6e," (XLNet model)"),Z6e.forEach(t),IFo=i($),U_=n($,"LI",{});var eye=s(U_);Ule=n(eye,"STRONG",{});var zot=s(Ule);qFo=r(zot,"yolos"),zot.forEach(t),NFo=r(eye," \u2014 "),gN=n(eye,"A",{href:!0});var Wot=s(gN);jFo=r(Wot,"YolosModel"),Wot.forEach(t),DFo=r(eye," (YOLOS model)"),eye.forEach(t),GFo=i($),J_=n($,"LI",{});var oye=s(J_);Jle=n(oye,"STRONG",{});var Qot=s(Jle);OFo=r(Qot,"yoso"),Qot.forEach(t),VFo=r(oye," \u2014 "),hN=n(oye,"A",{href:!0});var Hot=s(hN);XFo=r(Hot,"YosoModel"),Hot.forEach(t),zFo=r(oye," (YOSO model)"),oye.forEach(t),$.forEach(t),WFo=i(oa),Y_=n(oa,"P",{});var rye=s(Y_);QFo=r(rye,"The model is set in evaluation mode by default using "),Yle=n(rye,"CODE",{});var Uot=s(Yle);HFo=r(Uot,"model.eval()"),Uot.forEach(t),UFo=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=n(rye,"CODE",{});var Jot=s(Kle);JFo=r(Jot,"model.train()"),Jot.forEach(t),rye.forEach(t),YFo=i(oa),T(K_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Bqe=i(f),Li=n(f,"H2",{class:!0});var jje=s(Li);Z_=n(jje,"A",{id:!0,class:!0,href:!0});var Yot=s(Z_);Zle=n(Yot,"SPAN",{});var Kot=s(Zle);T(J6.$$.fragment,Kot),Kot.forEach(t),Yot.forEach(t),KFo=i(jje),eie=n(jje,"SPAN",{});var Zot=s(eie);ZFo=r(Zot,"AutoModelForPreTraining"),Zot.forEach(t),jje.forEach(t),Iqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(Y6.$$.fragment,Os),eTo=i(Os),xi=n(Os,"P",{});var oZ=s(xi);oTo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pN=n(oZ,"A",{href:!0});var ert=s(pN);rTo=r(ert,"from_pretrained()"),ert.forEach(t),tTo=r(oZ," class method or the "),_N=n(oZ,"A",{href:!0});var ort=s(_N);aTo=r(ort,"from_config()"),ort.forEach(t),nTo=r(oZ,` class
method.`),oZ.forEach(t),sTo=i(Os),K6=n(Os,"P",{});var Dje=s(K6);lTo=r(Dje,"This class cannot be instantiated directly using "),oie=n(Dje,"CODE",{});var rrt=s(oie);iTo=r(rrt,"__init__()"),rrt.forEach(t),dTo=r(Dje," (throws an error)."),Dje.forEach(t),cTo=i(Os),at=n(Os,"DIV",{class:!0});var w0=s(at);T(Z6.$$.fragment,w0),fTo=i(w0),rie=n(w0,"P",{});var trt=s(rie);mTo=r(trt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),trt.forEach(t),gTo=i(w0),$i=n(w0,"P",{});var rZ=s($i);hTo=r(rZ,`Note:
Loading a model from its configuration file does `),tie=n(rZ,"STRONG",{});var art=s(tie);pTo=r(art,"not"),art.forEach(t),_To=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uN=n(rZ,"A",{href:!0});var nrt=s(uN);uTo=r(nrt,"from_pretrained()"),nrt.forEach(t),bTo=r(rZ," to load the model weights."),rZ.forEach(t),vTo=i(w0),T(eu.$$.fragment,w0),w0.forEach(t),FTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(ey.$$.fragment,ra),TTo=i(ra),aie=n(ra,"P",{});var srt=s(aie);MTo=r(srt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),srt.forEach(t),ETo=i(ra),xa=n(ra,"P",{});var A0=s(xa);CTo=r(A0,"The model class to instantiate is selected based on the "),nie=n(A0,"CODE",{});var lrt=s(nie);wTo=r(lrt,"model_type"),lrt.forEach(t),ATo=r(A0,` property of the config object (either
passed as an argument or loaded from `),sie=n(A0,"CODE",{});var irt=s(sie);yTo=r(irt,"pretrained_model_name_or_path"),irt.forEach(t),LTo=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=n(A0,"CODE",{});var drt=s(lie);xTo=r(drt,"pretrained_model_name_or_path"),drt.forEach(t),$To=r(A0,":"),A0.forEach(t),kTo=i(ra),G=n(ra,"UL",{});var O=s(G);ou=n(O,"LI",{});var tye=s(ou);iie=n(tye,"STRONG",{});var crt=s(iie);STo=r(crt,"albert"),crt.forEach(t),RTo=r(tye," \u2014 "),bN=n(tye,"A",{href:!0});var frt=s(bN);PTo=r(frt,"AlbertForPreTraining"),frt.forEach(t),BTo=r(tye," (ALBERT model)"),tye.forEach(t),ITo=i(O),ru=n(O,"LI",{});var aye=s(ru);die=n(aye,"STRONG",{});var mrt=s(die);qTo=r(mrt,"bart"),mrt.forEach(t),NTo=r(aye," \u2014 "),vN=n(aye,"A",{href:!0});var grt=s(vN);jTo=r(grt,"BartForConditionalGeneration"),grt.forEach(t),DTo=r(aye," (BART model)"),aye.forEach(t),GTo=i(O),tu=n(O,"LI",{});var nye=s(tu);cie=n(nye,"STRONG",{});var hrt=s(cie);OTo=r(hrt,"bert"),hrt.forEach(t),VTo=r(nye," \u2014 "),FN=n(nye,"A",{href:!0});var prt=s(FN);XTo=r(prt,"BertForPreTraining"),prt.forEach(t),zTo=r(nye," (BERT model)"),nye.forEach(t),WTo=i(O),au=n(O,"LI",{});var sye=s(au);fie=n(sye,"STRONG",{});var _rt=s(fie);QTo=r(_rt,"big_bird"),_rt.forEach(t),HTo=r(sye," \u2014 "),TN=n(sye,"A",{href:!0});var urt=s(TN);UTo=r(urt,"BigBirdForPreTraining"),urt.forEach(t),JTo=r(sye," (BigBird model)"),sye.forEach(t),YTo=i(O),nu=n(O,"LI",{});var lye=s(nu);mie=n(lye,"STRONG",{});var brt=s(mie);KTo=r(brt,"camembert"),brt.forEach(t),ZTo=r(lye," \u2014 "),MN=n(lye,"A",{href:!0});var vrt=s(MN);e7o=r(vrt,"CamembertForMaskedLM"),vrt.forEach(t),o7o=r(lye," (CamemBERT model)"),lye.forEach(t),r7o=i(O),su=n(O,"LI",{});var iye=s(su);gie=n(iye,"STRONG",{});var Frt=s(gie);t7o=r(Frt,"ctrl"),Frt.forEach(t),a7o=r(iye," \u2014 "),EN=n(iye,"A",{href:!0});var Trt=s(EN);n7o=r(Trt,"CTRLLMHeadModel"),Trt.forEach(t),s7o=r(iye," (CTRL model)"),iye.forEach(t),l7o=i(O),lu=n(O,"LI",{});var dye=s(lu);hie=n(dye,"STRONG",{});var Mrt=s(hie);i7o=r(Mrt,"data2vec-text"),Mrt.forEach(t),d7o=r(dye," \u2014 "),CN=n(dye,"A",{href:!0});var Ert=s(CN);c7o=r(Ert,"Data2VecTextForMaskedLM"),Ert.forEach(t),f7o=r(dye," (Data2VecText model)"),dye.forEach(t),m7o=i(O),iu=n(O,"LI",{});var cye=s(iu);pie=n(cye,"STRONG",{});var Crt=s(pie);g7o=r(Crt,"deberta"),Crt.forEach(t),h7o=r(cye," \u2014 "),wN=n(cye,"A",{href:!0});var wrt=s(wN);p7o=r(wrt,"DebertaForMaskedLM"),wrt.forEach(t),_7o=r(cye," (DeBERTa model)"),cye.forEach(t),u7o=i(O),du=n(O,"LI",{});var fye=s(du);_ie=n(fye,"STRONG",{});var Art=s(_ie);b7o=r(Art,"deberta-v2"),Art.forEach(t),v7o=r(fye," \u2014 "),AN=n(fye,"A",{href:!0});var yrt=s(AN);F7o=r(yrt,"DebertaV2ForMaskedLM"),yrt.forEach(t),T7o=r(fye," (DeBERTa-v2 model)"),fye.forEach(t),M7o=i(O),cu=n(O,"LI",{});var mye=s(cu);uie=n(mye,"STRONG",{});var Lrt=s(uie);E7o=r(Lrt,"distilbert"),Lrt.forEach(t),C7o=r(mye," \u2014 "),yN=n(mye,"A",{href:!0});var xrt=s(yN);w7o=r(xrt,"DistilBertForMaskedLM"),xrt.forEach(t),A7o=r(mye," (DistilBERT model)"),mye.forEach(t),y7o=i(O),fu=n(O,"LI",{});var gye=s(fu);bie=n(gye,"STRONG",{});var $rt=s(bie);L7o=r($rt,"electra"),$rt.forEach(t),x7o=r(gye," \u2014 "),LN=n(gye,"A",{href:!0});var krt=s(LN);$7o=r(krt,"ElectraForPreTraining"),krt.forEach(t),k7o=r(gye," (ELECTRA model)"),gye.forEach(t),S7o=i(O),mu=n(O,"LI",{});var hye=s(mu);vie=n(hye,"STRONG",{});var Srt=s(vie);R7o=r(Srt,"flaubert"),Srt.forEach(t),P7o=r(hye," \u2014 "),xN=n(hye,"A",{href:!0});var Rrt=s(xN);B7o=r(Rrt,"FlaubertWithLMHeadModel"),Rrt.forEach(t),I7o=r(hye," (FlauBERT model)"),hye.forEach(t),q7o=i(O),gu=n(O,"LI",{});var pye=s(gu);Fie=n(pye,"STRONG",{});var Prt=s(Fie);N7o=r(Prt,"flava"),Prt.forEach(t),j7o=r(pye," \u2014 "),$N=n(pye,"A",{href:!0});var Brt=s($N);D7o=r(Brt,"FlavaForPreTraining"),Brt.forEach(t),G7o=r(pye," (Flava model)"),pye.forEach(t),O7o=i(O),hu=n(O,"LI",{});var _ye=s(hu);Tie=n(_ye,"STRONG",{});var Irt=s(Tie);V7o=r(Irt,"fnet"),Irt.forEach(t),X7o=r(_ye," \u2014 "),kN=n(_ye,"A",{href:!0});var qrt=s(kN);z7o=r(qrt,"FNetForPreTraining"),qrt.forEach(t),W7o=r(_ye," (FNet model)"),_ye.forEach(t),Q7o=i(O),pu=n(O,"LI",{});var uye=s(pu);Mie=n(uye,"STRONG",{});var Nrt=s(Mie);H7o=r(Nrt,"fsmt"),Nrt.forEach(t),U7o=r(uye," \u2014 "),SN=n(uye,"A",{href:!0});var jrt=s(SN);J7o=r(jrt,"FSMTForConditionalGeneration"),jrt.forEach(t),Y7o=r(uye," (FairSeq Machine-Translation model)"),uye.forEach(t),K7o=i(O),_u=n(O,"LI",{});var bye=s(_u);Eie=n(bye,"STRONG",{});var Drt=s(Eie);Z7o=r(Drt,"funnel"),Drt.forEach(t),eMo=r(bye," \u2014 "),RN=n(bye,"A",{href:!0});var Grt=s(RN);oMo=r(Grt,"FunnelForPreTraining"),Grt.forEach(t),rMo=r(bye," (Funnel Transformer model)"),bye.forEach(t),tMo=i(O),uu=n(O,"LI",{});var vye=s(uu);Cie=n(vye,"STRONG",{});var Ort=s(Cie);aMo=r(Ort,"gpt2"),Ort.forEach(t),nMo=r(vye," \u2014 "),PN=n(vye,"A",{href:!0});var Vrt=s(PN);sMo=r(Vrt,"GPT2LMHeadModel"),Vrt.forEach(t),lMo=r(vye," (OpenAI GPT-2 model)"),vye.forEach(t),iMo=i(O),bu=n(O,"LI",{});var Fye=s(bu);wie=n(Fye,"STRONG",{});var Xrt=s(wie);dMo=r(Xrt,"ibert"),Xrt.forEach(t),cMo=r(Fye," \u2014 "),BN=n(Fye,"A",{href:!0});var zrt=s(BN);fMo=r(zrt,"IBertForMaskedLM"),zrt.forEach(t),mMo=r(Fye," (I-BERT model)"),Fye.forEach(t),gMo=i(O),vu=n(O,"LI",{});var Tye=s(vu);Aie=n(Tye,"STRONG",{});var Wrt=s(Aie);hMo=r(Wrt,"layoutlm"),Wrt.forEach(t),pMo=r(Tye," \u2014 "),IN=n(Tye,"A",{href:!0});var Qrt=s(IN);_Mo=r(Qrt,"LayoutLMForMaskedLM"),Qrt.forEach(t),uMo=r(Tye," (LayoutLM model)"),Tye.forEach(t),bMo=i(O),Fu=n(O,"LI",{});var Mye=s(Fu);yie=n(Mye,"STRONG",{});var Hrt=s(yie);vMo=r(Hrt,"longformer"),Hrt.forEach(t),FMo=r(Mye," \u2014 "),qN=n(Mye,"A",{href:!0});var Urt=s(qN);TMo=r(Urt,"LongformerForMaskedLM"),Urt.forEach(t),MMo=r(Mye," (Longformer model)"),Mye.forEach(t),EMo=i(O),Tu=n(O,"LI",{});var Eye=s(Tu);Lie=n(Eye,"STRONG",{});var Jrt=s(Lie);CMo=r(Jrt,"lxmert"),Jrt.forEach(t),wMo=r(Eye," \u2014 "),NN=n(Eye,"A",{href:!0});var Yrt=s(NN);AMo=r(Yrt,"LxmertForPreTraining"),Yrt.forEach(t),yMo=r(Eye," (LXMERT model)"),Eye.forEach(t),LMo=i(O),Mu=n(O,"LI",{});var Cye=s(Mu);xie=n(Cye,"STRONG",{});var Krt=s(xie);xMo=r(Krt,"megatron-bert"),Krt.forEach(t),$Mo=r(Cye," \u2014 "),jN=n(Cye,"A",{href:!0});var Zrt=s(jN);kMo=r(Zrt,"MegatronBertForPreTraining"),Zrt.forEach(t),SMo=r(Cye," (MegatronBert model)"),Cye.forEach(t),RMo=i(O),Eu=n(O,"LI",{});var wye=s(Eu);$ie=n(wye,"STRONG",{});var ett=s($ie);PMo=r(ett,"mobilebert"),ett.forEach(t),BMo=r(wye," \u2014 "),DN=n(wye,"A",{href:!0});var ott=s(DN);IMo=r(ott,"MobileBertForPreTraining"),ott.forEach(t),qMo=r(wye," (MobileBERT model)"),wye.forEach(t),NMo=i(O),Cu=n(O,"LI",{});var Aye=s(Cu);kie=n(Aye,"STRONG",{});var rtt=s(kie);jMo=r(rtt,"mpnet"),rtt.forEach(t),DMo=r(Aye," \u2014 "),GN=n(Aye,"A",{href:!0});var ttt=s(GN);GMo=r(ttt,"MPNetForMaskedLM"),ttt.forEach(t),OMo=r(Aye," (MPNet model)"),Aye.forEach(t),VMo=i(O),wu=n(O,"LI",{});var yye=s(wu);Sie=n(yye,"STRONG",{});var att=s(Sie);XMo=r(att,"openai-gpt"),att.forEach(t),zMo=r(yye," \u2014 "),ON=n(yye,"A",{href:!0});var ntt=s(ON);WMo=r(ntt,"OpenAIGPTLMHeadModel"),ntt.forEach(t),QMo=r(yye," (OpenAI GPT model)"),yye.forEach(t),HMo=i(O),Au=n(O,"LI",{});var Lye=s(Au);Rie=n(Lye,"STRONG",{});var stt=s(Rie);UMo=r(stt,"retribert"),stt.forEach(t),JMo=r(Lye," \u2014 "),VN=n(Lye,"A",{href:!0});var ltt=s(VN);YMo=r(ltt,"RetriBertModel"),ltt.forEach(t),KMo=r(Lye," (RetriBERT model)"),Lye.forEach(t),ZMo=i(O),yu=n(O,"LI",{});var xye=s(yu);Pie=n(xye,"STRONG",{});var itt=s(Pie);e4o=r(itt,"roberta"),itt.forEach(t),o4o=r(xye," \u2014 "),XN=n(xye,"A",{href:!0});var dtt=s(XN);r4o=r(dtt,"RobertaForMaskedLM"),dtt.forEach(t),t4o=r(xye," (RoBERTa model)"),xye.forEach(t),a4o=i(O),Lu=n(O,"LI",{});var $ye=s(Lu);Bie=n($ye,"STRONG",{});var ctt=s(Bie);n4o=r(ctt,"splinter"),ctt.forEach(t),s4o=r($ye," \u2014 "),zN=n($ye,"A",{href:!0});var ftt=s(zN);l4o=r(ftt,"SplinterForPreTraining"),ftt.forEach(t),i4o=r($ye," (Splinter model)"),$ye.forEach(t),d4o=i(O),xu=n(O,"LI",{});var kye=s(xu);Iie=n(kye,"STRONG",{});var mtt=s(Iie);c4o=r(mtt,"squeezebert"),mtt.forEach(t),f4o=r(kye," \u2014 "),WN=n(kye,"A",{href:!0});var gtt=s(WN);m4o=r(gtt,"SqueezeBertForMaskedLM"),gtt.forEach(t),g4o=r(kye," (SqueezeBERT model)"),kye.forEach(t),h4o=i(O),$u=n(O,"LI",{});var Sye=s($u);qie=n(Sye,"STRONG",{});var htt=s(qie);p4o=r(htt,"t5"),htt.forEach(t),_4o=r(Sye," \u2014 "),QN=n(Sye,"A",{href:!0});var ptt=s(QN);u4o=r(ptt,"T5ForConditionalGeneration"),ptt.forEach(t),b4o=r(Sye," (T5 model)"),Sye.forEach(t),v4o=i(O),ku=n(O,"LI",{});var Rye=s(ku);Nie=n(Rye,"STRONG",{});var _tt=s(Nie);F4o=r(_tt,"tapas"),_tt.forEach(t),T4o=r(Rye," \u2014 "),HN=n(Rye,"A",{href:!0});var utt=s(HN);M4o=r(utt,"TapasForMaskedLM"),utt.forEach(t),E4o=r(Rye," (TAPAS model)"),Rye.forEach(t),C4o=i(O),Su=n(O,"LI",{});var Pye=s(Su);jie=n(Pye,"STRONG",{});var btt=s(jie);w4o=r(btt,"transfo-xl"),btt.forEach(t),A4o=r(Pye," \u2014 "),UN=n(Pye,"A",{href:!0});var vtt=s(UN);y4o=r(vtt,"TransfoXLLMHeadModel"),vtt.forEach(t),L4o=r(Pye," (Transformer-XL model)"),Pye.forEach(t),x4o=i(O),Ru=n(O,"LI",{});var Bye=s(Ru);Die=n(Bye,"STRONG",{});var Ftt=s(Die);$4o=r(Ftt,"unispeech"),Ftt.forEach(t),k4o=r(Bye," \u2014 "),JN=n(Bye,"A",{href:!0});var Ttt=s(JN);S4o=r(Ttt,"UniSpeechForPreTraining"),Ttt.forEach(t),R4o=r(Bye," (UniSpeech model)"),Bye.forEach(t),P4o=i(O),Pu=n(O,"LI",{});var Iye=s(Pu);Gie=n(Iye,"STRONG",{});var Mtt=s(Gie);B4o=r(Mtt,"unispeech-sat"),Mtt.forEach(t),I4o=r(Iye," \u2014 "),YN=n(Iye,"A",{href:!0});var Ett=s(YN);q4o=r(Ett,"UniSpeechSatForPreTraining"),Ett.forEach(t),N4o=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),j4o=i(O),Bu=n(O,"LI",{});var qye=s(Bu);Oie=n(qye,"STRONG",{});var Ctt=s(Oie);D4o=r(Ctt,"visual_bert"),Ctt.forEach(t),G4o=r(qye," \u2014 "),KN=n(qye,"A",{href:!0});var wtt=s(KN);O4o=r(wtt,"VisualBertForPreTraining"),wtt.forEach(t),V4o=r(qye," (VisualBert model)"),qye.forEach(t),X4o=i(O),Iu=n(O,"LI",{});var Nye=s(Iu);Vie=n(Nye,"STRONG",{});var Att=s(Vie);z4o=r(Att,"vit_mae"),Att.forEach(t),W4o=r(Nye," \u2014 "),ZN=n(Nye,"A",{href:!0});var ytt=s(ZN);Q4o=r(ytt,"ViTMAEForPreTraining"),ytt.forEach(t),H4o=r(Nye," (ViTMAE model)"),Nye.forEach(t),U4o=i(O),qu=n(O,"LI",{});var jye=s(qu);Xie=n(jye,"STRONG",{});var Ltt=s(Xie);J4o=r(Ltt,"wav2vec2"),Ltt.forEach(t),Y4o=r(jye," \u2014 "),ej=n(jye,"A",{href:!0});var xtt=s(ej);K4o=r(xtt,"Wav2Vec2ForPreTraining"),xtt.forEach(t),Z4o=r(jye," (Wav2Vec2 model)"),jye.forEach(t),eEo=i(O),Nu=n(O,"LI",{});var Dye=s(Nu);zie=n(Dye,"STRONG",{});var $tt=s(zie);oEo=r($tt,"wav2vec2-conformer"),$tt.forEach(t),rEo=r(Dye," \u2014 "),oj=n(Dye,"A",{href:!0});var ktt=s(oj);tEo=r(ktt,"Wav2Vec2ConformerForPreTraining"),ktt.forEach(t),aEo=r(Dye," (Wav2Vec2-Conformer model)"),Dye.forEach(t),nEo=i(O),ju=n(O,"LI",{});var Gye=s(ju);Wie=n(Gye,"STRONG",{});var Stt=s(Wie);sEo=r(Stt,"xlm"),Stt.forEach(t),lEo=r(Gye," \u2014 "),rj=n(Gye,"A",{href:!0});var Rtt=s(rj);iEo=r(Rtt,"XLMWithLMHeadModel"),Rtt.forEach(t),dEo=r(Gye," (XLM model)"),Gye.forEach(t),cEo=i(O),Du=n(O,"LI",{});var Oye=s(Du);Qie=n(Oye,"STRONG",{});var Ptt=s(Qie);fEo=r(Ptt,"xlm-roberta"),Ptt.forEach(t),mEo=r(Oye," \u2014 "),tj=n(Oye,"A",{href:!0});var Btt=s(tj);gEo=r(Btt,"XLMRobertaForMaskedLM"),Btt.forEach(t),hEo=r(Oye," (XLM-RoBERTa model)"),Oye.forEach(t),pEo=i(O),Gu=n(O,"LI",{});var Vye=s(Gu);Hie=n(Vye,"STRONG",{});var Itt=s(Hie);_Eo=r(Itt,"xlm-roberta-xl"),Itt.forEach(t),uEo=r(Vye," \u2014 "),aj=n(Vye,"A",{href:!0});var qtt=s(aj);bEo=r(qtt,"XLMRobertaXLForMaskedLM"),qtt.forEach(t),vEo=r(Vye," (XLM-RoBERTa-XL model)"),Vye.forEach(t),FEo=i(O),Ou=n(O,"LI",{});var Xye=s(Ou);Uie=n(Xye,"STRONG",{});var Ntt=s(Uie);TEo=r(Ntt,"xlnet"),Ntt.forEach(t),MEo=r(Xye," \u2014 "),nj=n(Xye,"A",{href:!0});var jtt=s(nj);EEo=r(jtt,"XLNetLMHeadModel"),jtt.forEach(t),CEo=r(Xye," (XLNet model)"),Xye.forEach(t),O.forEach(t),wEo=i(ra),Vu=n(ra,"P",{});var zye=s(Vu);AEo=r(zye,"The model is set in evaluation mode by default using "),Jie=n(zye,"CODE",{});var Dtt=s(Jie);yEo=r(Dtt,"model.eval()"),Dtt.forEach(t),LEo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yie=n(zye,"CODE",{});var Gtt=s(Yie);xEo=r(Gtt,"model.train()"),Gtt.forEach(t),zye.forEach(t),$Eo=i(ra),T(Xu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),qqe=i(f),ki=n(f,"H2",{class:!0});var Gje=s(ki);zu=n(Gje,"A",{id:!0,class:!0,href:!0});var Ott=s(zu);Kie=n(Ott,"SPAN",{});var Vtt=s(Kie);T(oy.$$.fragment,Vtt),Vtt.forEach(t),Ott.forEach(t),kEo=i(Gje),Zie=n(Gje,"SPAN",{});var Xtt=s(Zie);SEo=r(Xtt,"AutoModelForCausalLM"),Xtt.forEach(t),Gje.forEach(t),Nqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(ry.$$.fragment,Vs),REo=i(Vs),Si=n(Vs,"P",{});var tZ=s(Si);PEo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sj=n(tZ,"A",{href:!0});var ztt=s(sj);BEo=r(ztt,"from_pretrained()"),ztt.forEach(t),IEo=r(tZ," class method or the "),lj=n(tZ,"A",{href:!0});var Wtt=s(lj);qEo=r(Wtt,"from_config()"),Wtt.forEach(t),NEo=r(tZ,` class
method.`),tZ.forEach(t),jEo=i(Vs),ty=n(Vs,"P",{});var Oje=s(ty);DEo=r(Oje,"This class cannot be instantiated directly using "),ede=n(Oje,"CODE",{});var Qtt=s(ede);GEo=r(Qtt,"__init__()"),Qtt.forEach(t),OEo=r(Oje," (throws an error)."),Oje.forEach(t),VEo=i(Vs),nt=n(Vs,"DIV",{class:!0});var y0=s(nt);T(ay.$$.fragment,y0),XEo=i(y0),ode=n(y0,"P",{});var Htt=s(ode);zEo=r(Htt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Htt.forEach(t),WEo=i(y0),Ri=n(y0,"P",{});var aZ=s(Ri);QEo=r(aZ,`Note:
Loading a model from its configuration file does `),rde=n(aZ,"STRONG",{});var Utt=s(rde);HEo=r(Utt,"not"),Utt.forEach(t),UEo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=n(aZ,"A",{href:!0});var Jtt=s(ij);JEo=r(Jtt,"from_pretrained()"),Jtt.forEach(t),YEo=r(aZ," to load the model weights."),aZ.forEach(t),KEo=i(y0),T(Wu.$$.fragment,y0),y0.forEach(t),ZEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(ny.$$.fragment,ta),eCo=i(ta),tde=n(ta,"P",{});var Ytt=s(tde);oCo=r(Ytt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ytt.forEach(t),rCo=i(ta),$a=n(ta,"P",{});var L0=s($a);tCo=r(L0,"The model class to instantiate is selected based on the "),ade=n(L0,"CODE",{});var Ktt=s(ade);aCo=r(Ktt,"model_type"),Ktt.forEach(t),nCo=r(L0,` property of the config object (either
passed as an argument or loaded from `),nde=n(L0,"CODE",{});var Ztt=s(nde);sCo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),lCo=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(L0,"CODE",{});var eat=s(sde);iCo=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),dCo=r(L0,":"),L0.forEach(t),cCo=i(ta),z=n(ta,"UL",{});var Q=s(z);Qu=n(Q,"LI",{});var Wye=s(Qu);lde=n(Wye,"STRONG",{});var oat=s(lde);fCo=r(oat,"bart"),oat.forEach(t),mCo=r(Wye," \u2014 "),dj=n(Wye,"A",{href:!0});var rat=s(dj);gCo=r(rat,"BartForCausalLM"),rat.forEach(t),hCo=r(Wye," (BART model)"),Wye.forEach(t),pCo=i(Q),Hu=n(Q,"LI",{});var Qye=s(Hu);ide=n(Qye,"STRONG",{});var tat=s(ide);_Co=r(tat,"bert"),tat.forEach(t),uCo=r(Qye," \u2014 "),cj=n(Qye,"A",{href:!0});var aat=s(cj);bCo=r(aat,"BertLMHeadModel"),aat.forEach(t),vCo=r(Qye," (BERT model)"),Qye.forEach(t),FCo=i(Q),Uu=n(Q,"LI",{});var Hye=s(Uu);dde=n(Hye,"STRONG",{});var nat=s(dde);TCo=r(nat,"bert-generation"),nat.forEach(t),MCo=r(Hye," \u2014 "),fj=n(Hye,"A",{href:!0});var sat=s(fj);ECo=r(sat,"BertGenerationDecoder"),sat.forEach(t),CCo=r(Hye," (Bert Generation model)"),Hye.forEach(t),wCo=i(Q),Ju=n(Q,"LI",{});var Uye=s(Ju);cde=n(Uye,"STRONG",{});var lat=s(cde);ACo=r(lat,"big_bird"),lat.forEach(t),yCo=r(Uye," \u2014 "),mj=n(Uye,"A",{href:!0});var iat=s(mj);LCo=r(iat,"BigBirdForCausalLM"),iat.forEach(t),xCo=r(Uye," (BigBird model)"),Uye.forEach(t),$Co=i(Q),Yu=n(Q,"LI",{});var Jye=s(Yu);fde=n(Jye,"STRONG",{});var dat=s(fde);kCo=r(dat,"bigbird_pegasus"),dat.forEach(t),SCo=r(Jye," \u2014 "),gj=n(Jye,"A",{href:!0});var cat=s(gj);RCo=r(cat,"BigBirdPegasusForCausalLM"),cat.forEach(t),PCo=r(Jye," (BigBirdPegasus model)"),Jye.forEach(t),BCo=i(Q),Ku=n(Q,"LI",{});var Yye=s(Ku);mde=n(Yye,"STRONG",{});var fat=s(mde);ICo=r(fat,"blenderbot"),fat.forEach(t),qCo=r(Yye," \u2014 "),hj=n(Yye,"A",{href:!0});var mat=s(hj);NCo=r(mat,"BlenderbotForCausalLM"),mat.forEach(t),jCo=r(Yye," (Blenderbot model)"),Yye.forEach(t),DCo=i(Q),Zu=n(Q,"LI",{});var Kye=s(Zu);gde=n(Kye,"STRONG",{});var gat=s(gde);GCo=r(gat,"blenderbot-small"),gat.forEach(t),OCo=r(Kye," \u2014 "),pj=n(Kye,"A",{href:!0});var hat=s(pj);VCo=r(hat,"BlenderbotSmallForCausalLM"),hat.forEach(t),XCo=r(Kye," (BlenderbotSmall model)"),Kye.forEach(t),zCo=i(Q),e1=n(Q,"LI",{});var Zye=s(e1);hde=n(Zye,"STRONG",{});var pat=s(hde);WCo=r(pat,"camembert"),pat.forEach(t),QCo=r(Zye," \u2014 "),_j=n(Zye,"A",{href:!0});var _at=s(_j);HCo=r(_at,"CamembertForCausalLM"),_at.forEach(t),UCo=r(Zye," (CamemBERT model)"),Zye.forEach(t),JCo=i(Q),o1=n(Q,"LI",{});var eLe=s(o1);pde=n(eLe,"STRONG",{});var uat=s(pde);YCo=r(uat,"ctrl"),uat.forEach(t),KCo=r(eLe," \u2014 "),uj=n(eLe,"A",{href:!0});var bat=s(uj);ZCo=r(bat,"CTRLLMHeadModel"),bat.forEach(t),e5o=r(eLe," (CTRL model)"),eLe.forEach(t),o5o=i(Q),r1=n(Q,"LI",{});var oLe=s(r1);_de=n(oLe,"STRONG",{});var vat=s(_de);r5o=r(vat,"data2vec-text"),vat.forEach(t),t5o=r(oLe," \u2014 "),bj=n(oLe,"A",{href:!0});var Fat=s(bj);a5o=r(Fat,"Data2VecTextForCausalLM"),Fat.forEach(t),n5o=r(oLe," (Data2VecText model)"),oLe.forEach(t),s5o=i(Q),t1=n(Q,"LI",{});var rLe=s(t1);ude=n(rLe,"STRONG",{});var Tat=s(ude);l5o=r(Tat,"electra"),Tat.forEach(t),i5o=r(rLe," \u2014 "),vj=n(rLe,"A",{href:!0});var Mat=s(vj);d5o=r(Mat,"ElectraForCausalLM"),Mat.forEach(t),c5o=r(rLe," (ELECTRA model)"),rLe.forEach(t),f5o=i(Q),a1=n(Q,"LI",{});var tLe=s(a1);bde=n(tLe,"STRONG",{});var Eat=s(bde);m5o=r(Eat,"gpt2"),Eat.forEach(t),g5o=r(tLe," \u2014 "),Fj=n(tLe,"A",{href:!0});var Cat=s(Fj);h5o=r(Cat,"GPT2LMHeadModel"),Cat.forEach(t),p5o=r(tLe," (OpenAI GPT-2 model)"),tLe.forEach(t),_5o=i(Q),n1=n(Q,"LI",{});var aLe=s(n1);vde=n(aLe,"STRONG",{});var wat=s(vde);u5o=r(wat,"gpt_neo"),wat.forEach(t),b5o=r(aLe," \u2014 "),Tj=n(aLe,"A",{href:!0});var Aat=s(Tj);v5o=r(Aat,"GPTNeoForCausalLM"),Aat.forEach(t),F5o=r(aLe," (GPT Neo model)"),aLe.forEach(t),T5o=i(Q),s1=n(Q,"LI",{});var nLe=s(s1);Fde=n(nLe,"STRONG",{});var yat=s(Fde);M5o=r(yat,"gptj"),yat.forEach(t),E5o=r(nLe," \u2014 "),Mj=n(nLe,"A",{href:!0});var Lat=s(Mj);C5o=r(Lat,"GPTJForCausalLM"),Lat.forEach(t),w5o=r(nLe," (GPT-J model)"),nLe.forEach(t),A5o=i(Q),l1=n(Q,"LI",{});var sLe=s(l1);Tde=n(sLe,"STRONG",{});var xat=s(Tde);y5o=r(xat,"marian"),xat.forEach(t),L5o=r(sLe," \u2014 "),Ej=n(sLe,"A",{href:!0});var $at=s(Ej);x5o=r($at,"MarianForCausalLM"),$at.forEach(t),$5o=r(sLe," (Marian model)"),sLe.forEach(t),k5o=i(Q),i1=n(Q,"LI",{});var lLe=s(i1);Mde=n(lLe,"STRONG",{});var kat=s(Mde);S5o=r(kat,"mbart"),kat.forEach(t),R5o=r(lLe," \u2014 "),Cj=n(lLe,"A",{href:!0});var Sat=s(Cj);P5o=r(Sat,"MBartForCausalLM"),Sat.forEach(t),B5o=r(lLe," (mBART model)"),lLe.forEach(t),I5o=i(Q),d1=n(Q,"LI",{});var iLe=s(d1);Ede=n(iLe,"STRONG",{});var Rat=s(Ede);q5o=r(Rat,"megatron-bert"),Rat.forEach(t),N5o=r(iLe," \u2014 "),wj=n(iLe,"A",{href:!0});var Pat=s(wj);j5o=r(Pat,"MegatronBertForCausalLM"),Pat.forEach(t),D5o=r(iLe," (MegatronBert model)"),iLe.forEach(t),G5o=i(Q),c1=n(Q,"LI",{});var dLe=s(c1);Cde=n(dLe,"STRONG",{});var Bat=s(Cde);O5o=r(Bat,"openai-gpt"),Bat.forEach(t),V5o=r(dLe," \u2014 "),Aj=n(dLe,"A",{href:!0});var Iat=s(Aj);X5o=r(Iat,"OpenAIGPTLMHeadModel"),Iat.forEach(t),z5o=r(dLe," (OpenAI GPT model)"),dLe.forEach(t),W5o=i(Q),f1=n(Q,"LI",{});var cLe=s(f1);wde=n(cLe,"STRONG",{});var qat=s(wde);Q5o=r(qat,"opt"),qat.forEach(t),H5o=r(cLe," \u2014 "),yj=n(cLe,"A",{href:!0});var Nat=s(yj);U5o=r(Nat,"OPTForCausalLM"),Nat.forEach(t),J5o=r(cLe," (OPT model)"),cLe.forEach(t),Y5o=i(Q),m1=n(Q,"LI",{});var fLe=s(m1);Ade=n(fLe,"STRONG",{});var jat=s(Ade);K5o=r(jat,"pegasus"),jat.forEach(t),Z5o=r(fLe," \u2014 "),Lj=n(fLe,"A",{href:!0});var Dat=s(Lj);ewo=r(Dat,"PegasusForCausalLM"),Dat.forEach(t),owo=r(fLe," (Pegasus model)"),fLe.forEach(t),rwo=i(Q),g1=n(Q,"LI",{});var mLe=s(g1);yde=n(mLe,"STRONG",{});var Gat=s(yde);two=r(Gat,"plbart"),Gat.forEach(t),awo=r(mLe," \u2014 "),xj=n(mLe,"A",{href:!0});var Oat=s(xj);nwo=r(Oat,"PLBartForCausalLM"),Oat.forEach(t),swo=r(mLe," (PLBart model)"),mLe.forEach(t),lwo=i(Q),h1=n(Q,"LI",{});var gLe=s(h1);Lde=n(gLe,"STRONG",{});var Vat=s(Lde);iwo=r(Vat,"prophetnet"),Vat.forEach(t),dwo=r(gLe," \u2014 "),$j=n(gLe,"A",{href:!0});var Xat=s($j);cwo=r(Xat,"ProphetNetForCausalLM"),Xat.forEach(t),fwo=r(gLe," (ProphetNet model)"),gLe.forEach(t),mwo=i(Q),p1=n(Q,"LI",{});var hLe=s(p1);xde=n(hLe,"STRONG",{});var zat=s(xde);gwo=r(zat,"qdqbert"),zat.forEach(t),hwo=r(hLe," \u2014 "),kj=n(hLe,"A",{href:!0});var Wat=s(kj);pwo=r(Wat,"QDQBertLMHeadModel"),Wat.forEach(t),_wo=r(hLe," (QDQBert model)"),hLe.forEach(t),uwo=i(Q),_1=n(Q,"LI",{});var pLe=s(_1);$de=n(pLe,"STRONG",{});var Qat=s($de);bwo=r(Qat,"reformer"),Qat.forEach(t),vwo=r(pLe," \u2014 "),Sj=n(pLe,"A",{href:!0});var Hat=s(Sj);Fwo=r(Hat,"ReformerModelWithLMHead"),Hat.forEach(t),Two=r(pLe," (Reformer model)"),pLe.forEach(t),Mwo=i(Q),u1=n(Q,"LI",{});var _Le=s(u1);kde=n(_Le,"STRONG",{});var Uat=s(kde);Ewo=r(Uat,"rembert"),Uat.forEach(t),Cwo=r(_Le," \u2014 "),Rj=n(_Le,"A",{href:!0});var Jat=s(Rj);wwo=r(Jat,"RemBertForCausalLM"),Jat.forEach(t),Awo=r(_Le," (RemBERT model)"),_Le.forEach(t),ywo=i(Q),b1=n(Q,"LI",{});var uLe=s(b1);Sde=n(uLe,"STRONG",{});var Yat=s(Sde);Lwo=r(Yat,"roberta"),Yat.forEach(t),xwo=r(uLe," \u2014 "),Pj=n(uLe,"A",{href:!0});var Kat=s(Pj);$wo=r(Kat,"RobertaForCausalLM"),Kat.forEach(t),kwo=r(uLe," (RoBERTa model)"),uLe.forEach(t),Swo=i(Q),v1=n(Q,"LI",{});var bLe=s(v1);Rde=n(bLe,"STRONG",{});var Zat=s(Rde);Rwo=r(Zat,"roformer"),Zat.forEach(t),Pwo=r(bLe," \u2014 "),Bj=n(bLe,"A",{href:!0});var ent=s(Bj);Bwo=r(ent,"RoFormerForCausalLM"),ent.forEach(t),Iwo=r(bLe," (RoFormer model)"),bLe.forEach(t),qwo=i(Q),F1=n(Q,"LI",{});var vLe=s(F1);Pde=n(vLe,"STRONG",{});var ont=s(Pde);Nwo=r(ont,"speech_to_text_2"),ont.forEach(t),jwo=r(vLe," \u2014 "),Ij=n(vLe,"A",{href:!0});var rnt=s(Ij);Dwo=r(rnt,"Speech2Text2ForCausalLM"),rnt.forEach(t),Gwo=r(vLe," (Speech2Text2 model)"),vLe.forEach(t),Owo=i(Q),T1=n(Q,"LI",{});var FLe=s(T1);Bde=n(FLe,"STRONG",{});var tnt=s(Bde);Vwo=r(tnt,"transfo-xl"),tnt.forEach(t),Xwo=r(FLe," \u2014 "),qj=n(FLe,"A",{href:!0});var ant=s(qj);zwo=r(ant,"TransfoXLLMHeadModel"),ant.forEach(t),Wwo=r(FLe," (Transformer-XL model)"),FLe.forEach(t),Qwo=i(Q),M1=n(Q,"LI",{});var TLe=s(M1);Ide=n(TLe,"STRONG",{});var nnt=s(Ide);Hwo=r(nnt,"trocr"),nnt.forEach(t),Uwo=r(TLe," \u2014 "),Nj=n(TLe,"A",{href:!0});var snt=s(Nj);Jwo=r(snt,"TrOCRForCausalLM"),snt.forEach(t),Ywo=r(TLe," (TrOCR model)"),TLe.forEach(t),Kwo=i(Q),E1=n(Q,"LI",{});var MLe=s(E1);qde=n(MLe,"STRONG",{});var lnt=s(qde);Zwo=r(lnt,"xglm"),lnt.forEach(t),e0o=r(MLe," \u2014 "),jj=n(MLe,"A",{href:!0});var int=s(jj);o0o=r(int,"XGLMForCausalLM"),int.forEach(t),r0o=r(MLe," (XGLM model)"),MLe.forEach(t),t0o=i(Q),C1=n(Q,"LI",{});var ELe=s(C1);Nde=n(ELe,"STRONG",{});var dnt=s(Nde);a0o=r(dnt,"xlm"),dnt.forEach(t),n0o=r(ELe," \u2014 "),Dj=n(ELe,"A",{href:!0});var cnt=s(Dj);s0o=r(cnt,"XLMWithLMHeadModel"),cnt.forEach(t),l0o=r(ELe," (XLM model)"),ELe.forEach(t),i0o=i(Q),w1=n(Q,"LI",{});var CLe=s(w1);jde=n(CLe,"STRONG",{});var fnt=s(jde);d0o=r(fnt,"xlm-prophetnet"),fnt.forEach(t),c0o=r(CLe," \u2014 "),Gj=n(CLe,"A",{href:!0});var mnt=s(Gj);f0o=r(mnt,"XLMProphetNetForCausalLM"),mnt.forEach(t),m0o=r(CLe," (XLMProphetNet model)"),CLe.forEach(t),g0o=i(Q),A1=n(Q,"LI",{});var wLe=s(A1);Dde=n(wLe,"STRONG",{});var gnt=s(Dde);h0o=r(gnt,"xlm-roberta"),gnt.forEach(t),p0o=r(wLe," \u2014 "),Oj=n(wLe,"A",{href:!0});var hnt=s(Oj);_0o=r(hnt,"XLMRobertaForCausalLM"),hnt.forEach(t),u0o=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),b0o=i(Q),y1=n(Q,"LI",{});var ALe=s(y1);Gde=n(ALe,"STRONG",{});var pnt=s(Gde);v0o=r(pnt,"xlm-roberta-xl"),pnt.forEach(t),F0o=r(ALe," \u2014 "),Vj=n(ALe,"A",{href:!0});var _nt=s(Vj);T0o=r(_nt,"XLMRobertaXLForCausalLM"),_nt.forEach(t),M0o=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),E0o=i(Q),L1=n(Q,"LI",{});var yLe=s(L1);Ode=n(yLe,"STRONG",{});var unt=s(Ode);C0o=r(unt,"xlnet"),unt.forEach(t),w0o=r(yLe," \u2014 "),Xj=n(yLe,"A",{href:!0});var bnt=s(Xj);A0o=r(bnt,"XLNetLMHeadModel"),bnt.forEach(t),y0o=r(yLe," (XLNet model)"),yLe.forEach(t),Q.forEach(t),L0o=i(ta),x1=n(ta,"P",{});var LLe=s(x1);x0o=r(LLe,"The model is set in evaluation mode by default using "),Vde=n(LLe,"CODE",{});var vnt=s(Vde);$0o=r(vnt,"model.eval()"),vnt.forEach(t),k0o=r(LLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(LLe,"CODE",{});var Fnt=s(Xde);S0o=r(Fnt,"model.train()"),Fnt.forEach(t),LLe.forEach(t),R0o=i(ta),T($1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),jqe=i(f),Pi=n(f,"H2",{class:!0});var Vje=s(Pi);k1=n(Vje,"A",{id:!0,class:!0,href:!0});var Tnt=s(k1);zde=n(Tnt,"SPAN",{});var Mnt=s(zde);T(sy.$$.fragment,Mnt),Mnt.forEach(t),Tnt.forEach(t),P0o=i(Vje),Wde=n(Vje,"SPAN",{});var Ent=s(Wde);B0o=r(Ent,"AutoModelForMaskedLM"),Ent.forEach(t),Vje.forEach(t),Dqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(ly.$$.fragment,Xs),I0o=i(Xs),Bi=n(Xs,"P",{});var nZ=s(Bi);q0o=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zj=n(nZ,"A",{href:!0});var Cnt=s(zj);N0o=r(Cnt,"from_pretrained()"),Cnt.forEach(t),j0o=r(nZ," class method or the "),Wj=n(nZ,"A",{href:!0});var wnt=s(Wj);D0o=r(wnt,"from_config()"),wnt.forEach(t),G0o=r(nZ,` class
method.`),nZ.forEach(t),O0o=i(Xs),iy=n(Xs,"P",{});var Xje=s(iy);V0o=r(Xje,"This class cannot be instantiated directly using "),Qde=n(Xje,"CODE",{});var Ant=s(Qde);X0o=r(Ant,"__init__()"),Ant.forEach(t),z0o=r(Xje," (throws an error)."),Xje.forEach(t),W0o=i(Xs),st=n(Xs,"DIV",{class:!0});var x0=s(st);T(dy.$$.fragment,x0),Q0o=i(x0),Hde=n(x0,"P",{});var ynt=s(Hde);H0o=r(ynt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ynt.forEach(t),U0o=i(x0),Ii=n(x0,"P",{});var sZ=s(Ii);J0o=r(sZ,`Note:
Loading a model from its configuration file does `),Ude=n(sZ,"STRONG",{});var Lnt=s(Ude);Y0o=r(Lnt,"not"),Lnt.forEach(t),K0o=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=n(sZ,"A",{href:!0});var xnt=s(Qj);Z0o=r(xnt,"from_pretrained()"),xnt.forEach(t),eAo=r(sZ," to load the model weights."),sZ.forEach(t),oAo=i(x0),T(S1.$$.fragment,x0),x0.forEach(t),rAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(cy.$$.fragment,aa),tAo=i(aa),Jde=n(aa,"P",{});var $nt=s(Jde);aAo=r($nt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$nt.forEach(t),nAo=i(aa),ka=n(aa,"P",{});var $0=s(ka);sAo=r($0,"The model class to instantiate is selected based on the "),Yde=n($0,"CODE",{});var knt=s(Yde);lAo=r(knt,"model_type"),knt.forEach(t),iAo=r($0,` property of the config object (either
passed as an argument or loaded from `),Kde=n($0,"CODE",{});var Snt=s(Kde);dAo=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),cAo=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=n($0,"CODE",{});var Rnt=s(Zde);fAo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),mAo=r($0,":"),$0.forEach(t),gAo=i(aa),W=n(aa,"UL",{});var H=s(W);R1=n(H,"LI",{});var xLe=s(R1);ece=n(xLe,"STRONG",{});var Pnt=s(ece);hAo=r(Pnt,"albert"),Pnt.forEach(t),pAo=r(xLe," \u2014 "),Hj=n(xLe,"A",{href:!0});var Bnt=s(Hj);_Ao=r(Bnt,"AlbertForMaskedLM"),Bnt.forEach(t),uAo=r(xLe," (ALBERT model)"),xLe.forEach(t),bAo=i(H),P1=n(H,"LI",{});var $Le=s(P1);oce=n($Le,"STRONG",{});var Int=s(oce);vAo=r(Int,"bart"),Int.forEach(t),FAo=r($Le," \u2014 "),Uj=n($Le,"A",{href:!0});var qnt=s(Uj);TAo=r(qnt,"BartForConditionalGeneration"),qnt.forEach(t),MAo=r($Le," (BART model)"),$Le.forEach(t),EAo=i(H),B1=n(H,"LI",{});var kLe=s(B1);rce=n(kLe,"STRONG",{});var Nnt=s(rce);CAo=r(Nnt,"bert"),Nnt.forEach(t),wAo=r(kLe," \u2014 "),Jj=n(kLe,"A",{href:!0});var jnt=s(Jj);AAo=r(jnt,"BertForMaskedLM"),jnt.forEach(t),yAo=r(kLe," (BERT model)"),kLe.forEach(t),LAo=i(H),I1=n(H,"LI",{});var SLe=s(I1);tce=n(SLe,"STRONG",{});var Dnt=s(tce);xAo=r(Dnt,"big_bird"),Dnt.forEach(t),$Ao=r(SLe," \u2014 "),Yj=n(SLe,"A",{href:!0});var Gnt=s(Yj);kAo=r(Gnt,"BigBirdForMaskedLM"),Gnt.forEach(t),SAo=r(SLe," (BigBird model)"),SLe.forEach(t),RAo=i(H),q1=n(H,"LI",{});var RLe=s(q1);ace=n(RLe,"STRONG",{});var Ont=s(ace);PAo=r(Ont,"camembert"),Ont.forEach(t),BAo=r(RLe," \u2014 "),Kj=n(RLe,"A",{href:!0});var Vnt=s(Kj);IAo=r(Vnt,"CamembertForMaskedLM"),Vnt.forEach(t),qAo=r(RLe," (CamemBERT model)"),RLe.forEach(t),NAo=i(H),N1=n(H,"LI",{});var PLe=s(N1);nce=n(PLe,"STRONG",{});var Xnt=s(nce);jAo=r(Xnt,"convbert"),Xnt.forEach(t),DAo=r(PLe," \u2014 "),Zj=n(PLe,"A",{href:!0});var znt=s(Zj);GAo=r(znt,"ConvBertForMaskedLM"),znt.forEach(t),OAo=r(PLe," (ConvBERT model)"),PLe.forEach(t),VAo=i(H),j1=n(H,"LI",{});var BLe=s(j1);sce=n(BLe,"STRONG",{});var Wnt=s(sce);XAo=r(Wnt,"data2vec-text"),Wnt.forEach(t),zAo=r(BLe," \u2014 "),eD=n(BLe,"A",{href:!0});var Qnt=s(eD);WAo=r(Qnt,"Data2VecTextForMaskedLM"),Qnt.forEach(t),QAo=r(BLe," (Data2VecText model)"),BLe.forEach(t),HAo=i(H),D1=n(H,"LI",{});var ILe=s(D1);lce=n(ILe,"STRONG",{});var Hnt=s(lce);UAo=r(Hnt,"deberta"),Hnt.forEach(t),JAo=r(ILe," \u2014 "),oD=n(ILe,"A",{href:!0});var Unt=s(oD);YAo=r(Unt,"DebertaForMaskedLM"),Unt.forEach(t),KAo=r(ILe," (DeBERTa model)"),ILe.forEach(t),ZAo=i(H),G1=n(H,"LI",{});var qLe=s(G1);ice=n(qLe,"STRONG",{});var Jnt=s(ice);e6o=r(Jnt,"deberta-v2"),Jnt.forEach(t),o6o=r(qLe," \u2014 "),rD=n(qLe,"A",{href:!0});var Ynt=s(rD);r6o=r(Ynt,"DebertaV2ForMaskedLM"),Ynt.forEach(t),t6o=r(qLe," (DeBERTa-v2 model)"),qLe.forEach(t),a6o=i(H),O1=n(H,"LI",{});var NLe=s(O1);dce=n(NLe,"STRONG",{});var Knt=s(dce);n6o=r(Knt,"distilbert"),Knt.forEach(t),s6o=r(NLe," \u2014 "),tD=n(NLe,"A",{href:!0});var Znt=s(tD);l6o=r(Znt,"DistilBertForMaskedLM"),Znt.forEach(t),i6o=r(NLe," (DistilBERT model)"),NLe.forEach(t),d6o=i(H),V1=n(H,"LI",{});var jLe=s(V1);cce=n(jLe,"STRONG",{});var est=s(cce);c6o=r(est,"electra"),est.forEach(t),f6o=r(jLe," \u2014 "),aD=n(jLe,"A",{href:!0});var ost=s(aD);m6o=r(ost,"ElectraForMaskedLM"),ost.forEach(t),g6o=r(jLe," (ELECTRA model)"),jLe.forEach(t),h6o=i(H),X1=n(H,"LI",{});var DLe=s(X1);fce=n(DLe,"STRONG",{});var rst=s(fce);p6o=r(rst,"flaubert"),rst.forEach(t),_6o=r(DLe," \u2014 "),nD=n(DLe,"A",{href:!0});var tst=s(nD);u6o=r(tst,"FlaubertWithLMHeadModel"),tst.forEach(t),b6o=r(DLe," (FlauBERT model)"),DLe.forEach(t),v6o=i(H),z1=n(H,"LI",{});var GLe=s(z1);mce=n(GLe,"STRONG",{});var ast=s(mce);F6o=r(ast,"fnet"),ast.forEach(t),T6o=r(GLe," \u2014 "),sD=n(GLe,"A",{href:!0});var nst=s(sD);M6o=r(nst,"FNetForMaskedLM"),nst.forEach(t),E6o=r(GLe," (FNet model)"),GLe.forEach(t),C6o=i(H),W1=n(H,"LI",{});var OLe=s(W1);gce=n(OLe,"STRONG",{});var sst=s(gce);w6o=r(sst,"funnel"),sst.forEach(t),A6o=r(OLe," \u2014 "),lD=n(OLe,"A",{href:!0});var lst=s(lD);y6o=r(lst,"FunnelForMaskedLM"),lst.forEach(t),L6o=r(OLe," (Funnel Transformer model)"),OLe.forEach(t),x6o=i(H),Q1=n(H,"LI",{});var VLe=s(Q1);hce=n(VLe,"STRONG",{});var ist=s(hce);$6o=r(ist,"ibert"),ist.forEach(t),k6o=r(VLe," \u2014 "),iD=n(VLe,"A",{href:!0});var dst=s(iD);S6o=r(dst,"IBertForMaskedLM"),dst.forEach(t),R6o=r(VLe," (I-BERT model)"),VLe.forEach(t),P6o=i(H),H1=n(H,"LI",{});var XLe=s(H1);pce=n(XLe,"STRONG",{});var cst=s(pce);B6o=r(cst,"layoutlm"),cst.forEach(t),I6o=r(XLe," \u2014 "),dD=n(XLe,"A",{href:!0});var fst=s(dD);q6o=r(fst,"LayoutLMForMaskedLM"),fst.forEach(t),N6o=r(XLe," (LayoutLM model)"),XLe.forEach(t),j6o=i(H),U1=n(H,"LI",{});var zLe=s(U1);_ce=n(zLe,"STRONG",{});var mst=s(_ce);D6o=r(mst,"longformer"),mst.forEach(t),G6o=r(zLe," \u2014 "),cD=n(zLe,"A",{href:!0});var gst=s(cD);O6o=r(gst,"LongformerForMaskedLM"),gst.forEach(t),V6o=r(zLe," (Longformer model)"),zLe.forEach(t),X6o=i(H),J1=n(H,"LI",{});var WLe=s(J1);uce=n(WLe,"STRONG",{});var hst=s(uce);z6o=r(hst,"mbart"),hst.forEach(t),W6o=r(WLe," \u2014 "),fD=n(WLe,"A",{href:!0});var pst=s(fD);Q6o=r(pst,"MBartForConditionalGeneration"),pst.forEach(t),H6o=r(WLe," (mBART model)"),WLe.forEach(t),U6o=i(H),Y1=n(H,"LI",{});var QLe=s(Y1);bce=n(QLe,"STRONG",{});var _st=s(bce);J6o=r(_st,"megatron-bert"),_st.forEach(t),Y6o=r(QLe," \u2014 "),mD=n(QLe,"A",{href:!0});var ust=s(mD);K6o=r(ust,"MegatronBertForMaskedLM"),ust.forEach(t),Z6o=r(QLe," (MegatronBert model)"),QLe.forEach(t),eyo=i(H),K1=n(H,"LI",{});var HLe=s(K1);vce=n(HLe,"STRONG",{});var bst=s(vce);oyo=r(bst,"mobilebert"),bst.forEach(t),ryo=r(HLe," \u2014 "),gD=n(HLe,"A",{href:!0});var vst=s(gD);tyo=r(vst,"MobileBertForMaskedLM"),vst.forEach(t),ayo=r(HLe," (MobileBERT model)"),HLe.forEach(t),nyo=i(H),Z1=n(H,"LI",{});var ULe=s(Z1);Fce=n(ULe,"STRONG",{});var Fst=s(Fce);syo=r(Fst,"mpnet"),Fst.forEach(t),lyo=r(ULe," \u2014 "),hD=n(ULe,"A",{href:!0});var Tst=s(hD);iyo=r(Tst,"MPNetForMaskedLM"),Tst.forEach(t),dyo=r(ULe," (MPNet model)"),ULe.forEach(t),cyo=i(H),e3=n(H,"LI",{});var JLe=s(e3);Tce=n(JLe,"STRONG",{});var Mst=s(Tce);fyo=r(Mst,"nystromformer"),Mst.forEach(t),myo=r(JLe," \u2014 "),pD=n(JLe,"A",{href:!0});var Est=s(pD);gyo=r(Est,"NystromformerForMaskedLM"),Est.forEach(t),hyo=r(JLe," (Nystromformer model)"),JLe.forEach(t),pyo=i(H),o3=n(H,"LI",{});var YLe=s(o3);Mce=n(YLe,"STRONG",{});var Cst=s(Mce);_yo=r(Cst,"perceiver"),Cst.forEach(t),uyo=r(YLe," \u2014 "),_D=n(YLe,"A",{href:!0});var wst=s(_D);byo=r(wst,"PerceiverForMaskedLM"),wst.forEach(t),vyo=r(YLe," (Perceiver model)"),YLe.forEach(t),Fyo=i(H),r3=n(H,"LI",{});var KLe=s(r3);Ece=n(KLe,"STRONG",{});var Ast=s(Ece);Tyo=r(Ast,"qdqbert"),Ast.forEach(t),Myo=r(KLe," \u2014 "),uD=n(KLe,"A",{href:!0});var yst=s(uD);Eyo=r(yst,"QDQBertForMaskedLM"),yst.forEach(t),Cyo=r(KLe," (QDQBert model)"),KLe.forEach(t),wyo=i(H),t3=n(H,"LI",{});var ZLe=s(t3);Cce=n(ZLe,"STRONG",{});var Lst=s(Cce);Ayo=r(Lst,"reformer"),Lst.forEach(t),yyo=r(ZLe," \u2014 "),bD=n(ZLe,"A",{href:!0});var xst=s(bD);Lyo=r(xst,"ReformerForMaskedLM"),xst.forEach(t),xyo=r(ZLe," (Reformer model)"),ZLe.forEach(t),$yo=i(H),a3=n(H,"LI",{});var e8e=s(a3);wce=n(e8e,"STRONG",{});var $st=s(wce);kyo=r($st,"rembert"),$st.forEach(t),Syo=r(e8e," \u2014 "),vD=n(e8e,"A",{href:!0});var kst=s(vD);Ryo=r(kst,"RemBertForMaskedLM"),kst.forEach(t),Pyo=r(e8e," (RemBERT model)"),e8e.forEach(t),Byo=i(H),n3=n(H,"LI",{});var o8e=s(n3);Ace=n(o8e,"STRONG",{});var Sst=s(Ace);Iyo=r(Sst,"roberta"),Sst.forEach(t),qyo=r(o8e," \u2014 "),FD=n(o8e,"A",{href:!0});var Rst=s(FD);Nyo=r(Rst,"RobertaForMaskedLM"),Rst.forEach(t),jyo=r(o8e," (RoBERTa model)"),o8e.forEach(t),Dyo=i(H),s3=n(H,"LI",{});var r8e=s(s3);yce=n(r8e,"STRONG",{});var Pst=s(yce);Gyo=r(Pst,"roformer"),Pst.forEach(t),Oyo=r(r8e," \u2014 "),TD=n(r8e,"A",{href:!0});var Bst=s(TD);Vyo=r(Bst,"RoFormerForMaskedLM"),Bst.forEach(t),Xyo=r(r8e," (RoFormer model)"),r8e.forEach(t),zyo=i(H),l3=n(H,"LI",{});var t8e=s(l3);Lce=n(t8e,"STRONG",{});var Ist=s(Lce);Wyo=r(Ist,"squeezebert"),Ist.forEach(t),Qyo=r(t8e," \u2014 "),MD=n(t8e,"A",{href:!0});var qst=s(MD);Hyo=r(qst,"SqueezeBertForMaskedLM"),qst.forEach(t),Uyo=r(t8e," (SqueezeBERT model)"),t8e.forEach(t),Jyo=i(H),i3=n(H,"LI",{});var a8e=s(i3);xce=n(a8e,"STRONG",{});var Nst=s(xce);Yyo=r(Nst,"tapas"),Nst.forEach(t),Kyo=r(a8e," \u2014 "),ED=n(a8e,"A",{href:!0});var jst=s(ED);Zyo=r(jst,"TapasForMaskedLM"),jst.forEach(t),eLo=r(a8e," (TAPAS model)"),a8e.forEach(t),oLo=i(H),d3=n(H,"LI",{});var n8e=s(d3);$ce=n(n8e,"STRONG",{});var Dst=s($ce);rLo=r(Dst,"wav2vec2"),Dst.forEach(t),tLo=r(n8e," \u2014 "),kce=n(n8e,"CODE",{});var Gst=s(kce);aLo=r(Gst,"Wav2Vec2ForMaskedLM"),Gst.forEach(t),nLo=r(n8e," (Wav2Vec2 model)"),n8e.forEach(t),sLo=i(H),c3=n(H,"LI",{});var s8e=s(c3);Sce=n(s8e,"STRONG",{});var Ost=s(Sce);lLo=r(Ost,"xlm"),Ost.forEach(t),iLo=r(s8e," \u2014 "),CD=n(s8e,"A",{href:!0});var Vst=s(CD);dLo=r(Vst,"XLMWithLMHeadModel"),Vst.forEach(t),cLo=r(s8e," (XLM model)"),s8e.forEach(t),fLo=i(H),f3=n(H,"LI",{});var l8e=s(f3);Rce=n(l8e,"STRONG",{});var Xst=s(Rce);mLo=r(Xst,"xlm-roberta"),Xst.forEach(t),gLo=r(l8e," \u2014 "),wD=n(l8e,"A",{href:!0});var zst=s(wD);hLo=r(zst,"XLMRobertaForMaskedLM"),zst.forEach(t),pLo=r(l8e," (XLM-RoBERTa model)"),l8e.forEach(t),_Lo=i(H),m3=n(H,"LI",{});var i8e=s(m3);Pce=n(i8e,"STRONG",{});var Wst=s(Pce);uLo=r(Wst,"xlm-roberta-xl"),Wst.forEach(t),bLo=r(i8e," \u2014 "),AD=n(i8e,"A",{href:!0});var Qst=s(AD);vLo=r(Qst,"XLMRobertaXLForMaskedLM"),Qst.forEach(t),FLo=r(i8e," (XLM-RoBERTa-XL model)"),i8e.forEach(t),TLo=i(H),g3=n(H,"LI",{});var d8e=s(g3);Bce=n(d8e,"STRONG",{});var Hst=s(Bce);MLo=r(Hst,"yoso"),Hst.forEach(t),ELo=r(d8e," \u2014 "),yD=n(d8e,"A",{href:!0});var Ust=s(yD);CLo=r(Ust,"YosoForMaskedLM"),Ust.forEach(t),wLo=r(d8e," (YOSO model)"),d8e.forEach(t),H.forEach(t),ALo=i(aa),h3=n(aa,"P",{});var c8e=s(h3);yLo=r(c8e,"The model is set in evaluation mode by default using "),Ice=n(c8e,"CODE",{});var Jst=s(Ice);LLo=r(Jst,"model.eval()"),Jst.forEach(t),xLo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qce=n(c8e,"CODE",{});var Yst=s(qce);$Lo=r(Yst,"model.train()"),Yst.forEach(t),c8e.forEach(t),kLo=i(aa),T(p3.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Gqe=i(f),qi=n(f,"H2",{class:!0});var zje=s(qi);_3=n(zje,"A",{id:!0,class:!0,href:!0});var Kst=s(_3);Nce=n(Kst,"SPAN",{});var Zst=s(Nce);T(fy.$$.fragment,Zst),Zst.forEach(t),Kst.forEach(t),SLo=i(zje),jce=n(zje,"SPAN",{});var elt=s(jce);RLo=r(elt,"AutoModelForSeq2SeqLM"),elt.forEach(t),zje.forEach(t),Oqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(my.$$.fragment,zs),PLo=i(zs),Ni=n(zs,"P",{});var lZ=s(Ni);BLo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LD=n(lZ,"A",{href:!0});var olt=s(LD);ILo=r(olt,"from_pretrained()"),olt.forEach(t),qLo=r(lZ," class method or the "),xD=n(lZ,"A",{href:!0});var rlt=s(xD);NLo=r(rlt,"from_config()"),rlt.forEach(t),jLo=r(lZ,` class
method.`),lZ.forEach(t),DLo=i(zs),gy=n(zs,"P",{});var Wje=s(gy);GLo=r(Wje,"This class cannot be instantiated directly using "),Dce=n(Wje,"CODE",{});var tlt=s(Dce);OLo=r(tlt,"__init__()"),tlt.forEach(t),VLo=r(Wje," (throws an error)."),Wje.forEach(t),XLo=i(zs),lt=n(zs,"DIV",{class:!0});var k0=s(lt);T(hy.$$.fragment,k0),zLo=i(k0),Gce=n(k0,"P",{});var alt=s(Gce);WLo=r(alt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),alt.forEach(t),QLo=i(k0),ji=n(k0,"P",{});var iZ=s(ji);HLo=r(iZ,`Note:
Loading a model from its configuration file does `),Oce=n(iZ,"STRONG",{});var nlt=s(Oce);ULo=r(nlt,"not"),nlt.forEach(t),JLo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(iZ,"A",{href:!0});var slt=s($D);YLo=r(slt,"from_pretrained()"),slt.forEach(t),KLo=r(iZ," to load the model weights."),iZ.forEach(t),ZLo=i(k0),T(u3.$$.fragment,k0),k0.forEach(t),e8o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(py.$$.fragment,na),o8o=i(na),Vce=n(na,"P",{});var llt=s(Vce);r8o=r(llt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),llt.forEach(t),t8o=i(na),Sa=n(na,"P",{});var S0=s(Sa);a8o=r(S0,"The model class to instantiate is selected based on the "),Xce=n(S0,"CODE",{});var ilt=s(Xce);n8o=r(ilt,"model_type"),ilt.forEach(t),s8o=r(S0,` property of the config object (either
passed as an argument or loaded from `),zce=n(S0,"CODE",{});var dlt=s(zce);l8o=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),i8o=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=n(S0,"CODE",{});var clt=s(Wce);d8o=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),c8o=r(S0,":"),S0.forEach(t),f8o=i(na),_e=n(na,"UL",{});var ve=s(_e);b3=n(ve,"LI",{});var f8e=s(b3);Qce=n(f8e,"STRONG",{});var flt=s(Qce);m8o=r(flt,"bart"),flt.forEach(t),g8o=r(f8e," \u2014 "),kD=n(f8e,"A",{href:!0});var mlt=s(kD);h8o=r(mlt,"BartForConditionalGeneration"),mlt.forEach(t),p8o=r(f8e," (BART model)"),f8e.forEach(t),_8o=i(ve),v3=n(ve,"LI",{});var m8e=s(v3);Hce=n(m8e,"STRONG",{});var glt=s(Hce);u8o=r(glt,"bigbird_pegasus"),glt.forEach(t),b8o=r(m8e," \u2014 "),SD=n(m8e,"A",{href:!0});var hlt=s(SD);v8o=r(hlt,"BigBirdPegasusForConditionalGeneration"),hlt.forEach(t),F8o=r(m8e," (BigBirdPegasus model)"),m8e.forEach(t),T8o=i(ve),F3=n(ve,"LI",{});var g8e=s(F3);Uce=n(g8e,"STRONG",{});var plt=s(Uce);M8o=r(plt,"blenderbot"),plt.forEach(t),E8o=r(g8e," \u2014 "),RD=n(g8e,"A",{href:!0});var _lt=s(RD);C8o=r(_lt,"BlenderbotForConditionalGeneration"),_lt.forEach(t),w8o=r(g8e," (Blenderbot model)"),g8e.forEach(t),A8o=i(ve),T3=n(ve,"LI",{});var h8e=s(T3);Jce=n(h8e,"STRONG",{});var ult=s(Jce);y8o=r(ult,"blenderbot-small"),ult.forEach(t),L8o=r(h8e," \u2014 "),PD=n(h8e,"A",{href:!0});var blt=s(PD);x8o=r(blt,"BlenderbotSmallForConditionalGeneration"),blt.forEach(t),$8o=r(h8e," (BlenderbotSmall model)"),h8e.forEach(t),k8o=i(ve),M3=n(ve,"LI",{});var p8e=s(M3);Yce=n(p8e,"STRONG",{});var vlt=s(Yce);S8o=r(vlt,"encoder-decoder"),vlt.forEach(t),R8o=r(p8e," \u2014 "),BD=n(p8e,"A",{href:!0});var Flt=s(BD);P8o=r(Flt,"EncoderDecoderModel"),Flt.forEach(t),B8o=r(p8e," (Encoder decoder model)"),p8e.forEach(t),I8o=i(ve),E3=n(ve,"LI",{});var _8e=s(E3);Kce=n(_8e,"STRONG",{});var Tlt=s(Kce);q8o=r(Tlt,"fsmt"),Tlt.forEach(t),N8o=r(_8e," \u2014 "),ID=n(_8e,"A",{href:!0});var Mlt=s(ID);j8o=r(Mlt,"FSMTForConditionalGeneration"),Mlt.forEach(t),D8o=r(_8e," (FairSeq Machine-Translation model)"),_8e.forEach(t),G8o=i(ve),C3=n(ve,"LI",{});var u8e=s(C3);Zce=n(u8e,"STRONG",{});var Elt=s(Zce);O8o=r(Elt,"led"),Elt.forEach(t),V8o=r(u8e," \u2014 "),qD=n(u8e,"A",{href:!0});var Clt=s(qD);X8o=r(Clt,"LEDForConditionalGeneration"),Clt.forEach(t),z8o=r(u8e," (LED model)"),u8e.forEach(t),W8o=i(ve),w3=n(ve,"LI",{});var b8e=s(w3);efe=n(b8e,"STRONG",{});var wlt=s(efe);Q8o=r(wlt,"m2m_100"),wlt.forEach(t),H8o=r(b8e," \u2014 "),ND=n(b8e,"A",{href:!0});var Alt=s(ND);U8o=r(Alt,"M2M100ForConditionalGeneration"),Alt.forEach(t),J8o=r(b8e," (M2M100 model)"),b8e.forEach(t),Y8o=i(ve),A3=n(ve,"LI",{});var v8e=s(A3);ofe=n(v8e,"STRONG",{});var ylt=s(ofe);K8o=r(ylt,"marian"),ylt.forEach(t),Z8o=r(v8e," \u2014 "),jD=n(v8e,"A",{href:!0});var Llt=s(jD);e9o=r(Llt,"MarianMTModel"),Llt.forEach(t),o9o=r(v8e," (Marian model)"),v8e.forEach(t),r9o=i(ve),y3=n(ve,"LI",{});var F8e=s(y3);rfe=n(F8e,"STRONG",{});var xlt=s(rfe);t9o=r(xlt,"mbart"),xlt.forEach(t),a9o=r(F8e," \u2014 "),DD=n(F8e,"A",{href:!0});var $lt=s(DD);n9o=r($lt,"MBartForConditionalGeneration"),$lt.forEach(t),s9o=r(F8e," (mBART model)"),F8e.forEach(t),l9o=i(ve),L3=n(ve,"LI",{});var T8e=s(L3);tfe=n(T8e,"STRONG",{});var klt=s(tfe);i9o=r(klt,"mt5"),klt.forEach(t),d9o=r(T8e," \u2014 "),GD=n(T8e,"A",{href:!0});var Slt=s(GD);c9o=r(Slt,"MT5ForConditionalGeneration"),Slt.forEach(t),f9o=r(T8e," (mT5 model)"),T8e.forEach(t),m9o=i(ve),x3=n(ve,"LI",{});var M8e=s(x3);afe=n(M8e,"STRONG",{});var Rlt=s(afe);g9o=r(Rlt,"pegasus"),Rlt.forEach(t),h9o=r(M8e," \u2014 "),OD=n(M8e,"A",{href:!0});var Plt=s(OD);p9o=r(Plt,"PegasusForConditionalGeneration"),Plt.forEach(t),_9o=r(M8e," (Pegasus model)"),M8e.forEach(t),u9o=i(ve),$3=n(ve,"LI",{});var E8e=s($3);nfe=n(E8e,"STRONG",{});var Blt=s(nfe);b9o=r(Blt,"plbart"),Blt.forEach(t),v9o=r(E8e," \u2014 "),VD=n(E8e,"A",{href:!0});var Ilt=s(VD);F9o=r(Ilt,"PLBartForConditionalGeneration"),Ilt.forEach(t),T9o=r(E8e," (PLBart model)"),E8e.forEach(t),M9o=i(ve),k3=n(ve,"LI",{});var C8e=s(k3);sfe=n(C8e,"STRONG",{});var qlt=s(sfe);E9o=r(qlt,"prophetnet"),qlt.forEach(t),C9o=r(C8e," \u2014 "),XD=n(C8e,"A",{href:!0});var Nlt=s(XD);w9o=r(Nlt,"ProphetNetForConditionalGeneration"),Nlt.forEach(t),A9o=r(C8e," (ProphetNet model)"),C8e.forEach(t),y9o=i(ve),S3=n(ve,"LI",{});var w8e=s(S3);lfe=n(w8e,"STRONG",{});var jlt=s(lfe);L9o=r(jlt,"t5"),jlt.forEach(t),x9o=r(w8e," \u2014 "),zD=n(w8e,"A",{href:!0});var Dlt=s(zD);$9o=r(Dlt,"T5ForConditionalGeneration"),Dlt.forEach(t),k9o=r(w8e," (T5 model)"),w8e.forEach(t),S9o=i(ve),R3=n(ve,"LI",{});var A8e=s(R3);ife=n(A8e,"STRONG",{});var Glt=s(ife);R9o=r(Glt,"xlm-prophetnet"),Glt.forEach(t),P9o=r(A8e," \u2014 "),WD=n(A8e,"A",{href:!0});var Olt=s(WD);B9o=r(Olt,"XLMProphetNetForConditionalGeneration"),Olt.forEach(t),I9o=r(A8e," (XLMProphetNet model)"),A8e.forEach(t),ve.forEach(t),q9o=i(na),P3=n(na,"P",{});var y8e=s(P3);N9o=r(y8e,"The model is set in evaluation mode by default using "),dfe=n(y8e,"CODE",{});var Vlt=s(dfe);j9o=r(Vlt,"model.eval()"),Vlt.forEach(t),D9o=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=n(y8e,"CODE",{});var Xlt=s(cfe);G9o=r(Xlt,"model.train()"),Xlt.forEach(t),y8e.forEach(t),O9o=i(na),T(B3.$$.fragment,na),na.forEach(t),zs.forEach(t),Vqe=i(f),Di=n(f,"H2",{class:!0});var Qje=s(Di);I3=n(Qje,"A",{id:!0,class:!0,href:!0});var zlt=s(I3);ffe=n(zlt,"SPAN",{});var Wlt=s(ffe);T(_y.$$.fragment,Wlt),Wlt.forEach(t),zlt.forEach(t),V9o=i(Qje),mfe=n(Qje,"SPAN",{});var Qlt=s(mfe);X9o=r(Qlt,"AutoModelForSequenceClassification"),Qlt.forEach(t),Qje.forEach(t),Xqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(uy.$$.fragment,Ws),z9o=i(Ws),Gi=n(Ws,"P",{});var dZ=s(Gi);W9o=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QD=n(dZ,"A",{href:!0});var Hlt=s(QD);Q9o=r(Hlt,"from_pretrained()"),Hlt.forEach(t),H9o=r(dZ," class method or the "),HD=n(dZ,"A",{href:!0});var Ult=s(HD);U9o=r(Ult,"from_config()"),Ult.forEach(t),J9o=r(dZ,` class
method.`),dZ.forEach(t),Y9o=i(Ws),by=n(Ws,"P",{});var Hje=s(by);K9o=r(Hje,"This class cannot be instantiated directly using "),gfe=n(Hje,"CODE",{});var Jlt=s(gfe);Z9o=r(Jlt,"__init__()"),Jlt.forEach(t),exo=r(Hje," (throws an error)."),Hje.forEach(t),oxo=i(Ws),it=n(Ws,"DIV",{class:!0});var R0=s(it);T(vy.$$.fragment,R0),rxo=i(R0),hfe=n(R0,"P",{});var Ylt=s(hfe);txo=r(Ylt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ylt.forEach(t),axo=i(R0),Oi=n(R0,"P",{});var cZ=s(Oi);nxo=r(cZ,`Note:
Loading a model from its configuration file does `),pfe=n(cZ,"STRONG",{});var Klt=s(pfe);sxo=r(Klt,"not"),Klt.forEach(t),lxo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(cZ,"A",{href:!0});var Zlt=s(UD);ixo=r(Zlt,"from_pretrained()"),Zlt.forEach(t),dxo=r(cZ," to load the model weights."),cZ.forEach(t),cxo=i(R0),T(q3.$$.fragment,R0),R0.forEach(t),fxo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Fy.$$.fragment,sa),mxo=i(sa),_fe=n(sa,"P",{});var eit=s(_fe);gxo=r(eit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eit.forEach(t),hxo=i(sa),Ra=n(sa,"P",{});var P0=s(Ra);pxo=r(P0,"The model class to instantiate is selected based on the "),ufe=n(P0,"CODE",{});var oit=s(ufe);_xo=r(oit,"model_type"),oit.forEach(t),uxo=r(P0,` property of the config object (either
passed as an argument or loaded from `),bfe=n(P0,"CODE",{});var rit=s(bfe);bxo=r(rit,"pretrained_model_name_or_path"),rit.forEach(t),vxo=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(P0,"CODE",{});var tit=s(vfe);Fxo=r(tit,"pretrained_model_name_or_path"),tit.forEach(t),Txo=r(P0,":"),P0.forEach(t),Mxo=i(sa),q=n(sa,"UL",{});var j=s(q);N3=n(j,"LI",{});var L8e=s(N3);Ffe=n(L8e,"STRONG",{});var ait=s(Ffe);Exo=r(ait,"albert"),ait.forEach(t),Cxo=r(L8e," \u2014 "),JD=n(L8e,"A",{href:!0});var nit=s(JD);wxo=r(nit,"AlbertForSequenceClassification"),nit.forEach(t),Axo=r(L8e," (ALBERT model)"),L8e.forEach(t),yxo=i(j),j3=n(j,"LI",{});var x8e=s(j3);Tfe=n(x8e,"STRONG",{});var sit=s(Tfe);Lxo=r(sit,"bart"),sit.forEach(t),xxo=r(x8e," \u2014 "),YD=n(x8e,"A",{href:!0});var lit=s(YD);$xo=r(lit,"BartForSequenceClassification"),lit.forEach(t),kxo=r(x8e," (BART model)"),x8e.forEach(t),Sxo=i(j),D3=n(j,"LI",{});var $8e=s(D3);Mfe=n($8e,"STRONG",{});var iit=s(Mfe);Rxo=r(iit,"bert"),iit.forEach(t),Pxo=r($8e," \u2014 "),KD=n($8e,"A",{href:!0});var dit=s(KD);Bxo=r(dit,"BertForSequenceClassification"),dit.forEach(t),Ixo=r($8e," (BERT model)"),$8e.forEach(t),qxo=i(j),G3=n(j,"LI",{});var k8e=s(G3);Efe=n(k8e,"STRONG",{});var cit=s(Efe);Nxo=r(cit,"big_bird"),cit.forEach(t),jxo=r(k8e," \u2014 "),ZD=n(k8e,"A",{href:!0});var fit=s(ZD);Dxo=r(fit,"BigBirdForSequenceClassification"),fit.forEach(t),Gxo=r(k8e," (BigBird model)"),k8e.forEach(t),Oxo=i(j),O3=n(j,"LI",{});var S8e=s(O3);Cfe=n(S8e,"STRONG",{});var mit=s(Cfe);Vxo=r(mit,"bigbird_pegasus"),mit.forEach(t),Xxo=r(S8e," \u2014 "),eG=n(S8e,"A",{href:!0});var git=s(eG);zxo=r(git,"BigBirdPegasusForSequenceClassification"),git.forEach(t),Wxo=r(S8e," (BigBirdPegasus model)"),S8e.forEach(t),Qxo=i(j),V3=n(j,"LI",{});var R8e=s(V3);wfe=n(R8e,"STRONG",{});var hit=s(wfe);Hxo=r(hit,"camembert"),hit.forEach(t),Uxo=r(R8e," \u2014 "),oG=n(R8e,"A",{href:!0});var pit=s(oG);Jxo=r(pit,"CamembertForSequenceClassification"),pit.forEach(t),Yxo=r(R8e," (CamemBERT model)"),R8e.forEach(t),Kxo=i(j),X3=n(j,"LI",{});var P8e=s(X3);Afe=n(P8e,"STRONG",{});var _it=s(Afe);Zxo=r(_it,"canine"),_it.forEach(t),e$o=r(P8e," \u2014 "),rG=n(P8e,"A",{href:!0});var uit=s(rG);o$o=r(uit,"CanineForSequenceClassification"),uit.forEach(t),r$o=r(P8e," (Canine model)"),P8e.forEach(t),t$o=i(j),z3=n(j,"LI",{});var B8e=s(z3);yfe=n(B8e,"STRONG",{});var bit=s(yfe);a$o=r(bit,"convbert"),bit.forEach(t),n$o=r(B8e," \u2014 "),tG=n(B8e,"A",{href:!0});var vit=s(tG);s$o=r(vit,"ConvBertForSequenceClassification"),vit.forEach(t),l$o=r(B8e," (ConvBERT model)"),B8e.forEach(t),i$o=i(j),W3=n(j,"LI",{});var I8e=s(W3);Lfe=n(I8e,"STRONG",{});var Fit=s(Lfe);d$o=r(Fit,"ctrl"),Fit.forEach(t),c$o=r(I8e," \u2014 "),aG=n(I8e,"A",{href:!0});var Tit=s(aG);f$o=r(Tit,"CTRLForSequenceClassification"),Tit.forEach(t),m$o=r(I8e," (CTRL model)"),I8e.forEach(t),g$o=i(j),Q3=n(j,"LI",{});var q8e=s(Q3);xfe=n(q8e,"STRONG",{});var Mit=s(xfe);h$o=r(Mit,"data2vec-text"),Mit.forEach(t),p$o=r(q8e," \u2014 "),nG=n(q8e,"A",{href:!0});var Eit=s(nG);_$o=r(Eit,"Data2VecTextForSequenceClassification"),Eit.forEach(t),u$o=r(q8e," (Data2VecText model)"),q8e.forEach(t),b$o=i(j),H3=n(j,"LI",{});var N8e=s(H3);$fe=n(N8e,"STRONG",{});var Cit=s($fe);v$o=r(Cit,"deberta"),Cit.forEach(t),F$o=r(N8e," \u2014 "),sG=n(N8e,"A",{href:!0});var wit=s(sG);T$o=r(wit,"DebertaForSequenceClassification"),wit.forEach(t),M$o=r(N8e," (DeBERTa model)"),N8e.forEach(t),E$o=i(j),U3=n(j,"LI",{});var j8e=s(U3);kfe=n(j8e,"STRONG",{});var Ait=s(kfe);C$o=r(Ait,"deberta-v2"),Ait.forEach(t),w$o=r(j8e," \u2014 "),lG=n(j8e,"A",{href:!0});var yit=s(lG);A$o=r(yit,"DebertaV2ForSequenceClassification"),yit.forEach(t),y$o=r(j8e," (DeBERTa-v2 model)"),j8e.forEach(t),L$o=i(j),J3=n(j,"LI",{});var D8e=s(J3);Sfe=n(D8e,"STRONG",{});var Lit=s(Sfe);x$o=r(Lit,"distilbert"),Lit.forEach(t),$$o=r(D8e," \u2014 "),iG=n(D8e,"A",{href:!0});var xit=s(iG);k$o=r(xit,"DistilBertForSequenceClassification"),xit.forEach(t),S$o=r(D8e," (DistilBERT model)"),D8e.forEach(t),R$o=i(j),Y3=n(j,"LI",{});var G8e=s(Y3);Rfe=n(G8e,"STRONG",{});var $it=s(Rfe);P$o=r($it,"electra"),$it.forEach(t),B$o=r(G8e," \u2014 "),dG=n(G8e,"A",{href:!0});var kit=s(dG);I$o=r(kit,"ElectraForSequenceClassification"),kit.forEach(t),q$o=r(G8e," (ELECTRA model)"),G8e.forEach(t),N$o=i(j),K3=n(j,"LI",{});var O8e=s(K3);Pfe=n(O8e,"STRONG",{});var Sit=s(Pfe);j$o=r(Sit,"flaubert"),Sit.forEach(t),D$o=r(O8e," \u2014 "),cG=n(O8e,"A",{href:!0});var Rit=s(cG);G$o=r(Rit,"FlaubertForSequenceClassification"),Rit.forEach(t),O$o=r(O8e," (FlauBERT model)"),O8e.forEach(t),V$o=i(j),Z3=n(j,"LI",{});var V8e=s(Z3);Bfe=n(V8e,"STRONG",{});var Pit=s(Bfe);X$o=r(Pit,"fnet"),Pit.forEach(t),z$o=r(V8e," \u2014 "),fG=n(V8e,"A",{href:!0});var Bit=s(fG);W$o=r(Bit,"FNetForSequenceClassification"),Bit.forEach(t),Q$o=r(V8e," (FNet model)"),V8e.forEach(t),H$o=i(j),eb=n(j,"LI",{});var X8e=s(eb);Ife=n(X8e,"STRONG",{});var Iit=s(Ife);U$o=r(Iit,"funnel"),Iit.forEach(t),J$o=r(X8e," \u2014 "),mG=n(X8e,"A",{href:!0});var qit=s(mG);Y$o=r(qit,"FunnelForSequenceClassification"),qit.forEach(t),K$o=r(X8e," (Funnel Transformer model)"),X8e.forEach(t),Z$o=i(j),ob=n(j,"LI",{});var z8e=s(ob);qfe=n(z8e,"STRONG",{});var Nit=s(qfe);eko=r(Nit,"gpt2"),Nit.forEach(t),oko=r(z8e," \u2014 "),gG=n(z8e,"A",{href:!0});var jit=s(gG);rko=r(jit,"GPT2ForSequenceClassification"),jit.forEach(t),tko=r(z8e," (OpenAI GPT-2 model)"),z8e.forEach(t),ako=i(j),rb=n(j,"LI",{});var W8e=s(rb);Nfe=n(W8e,"STRONG",{});var Dit=s(Nfe);nko=r(Dit,"gpt_neo"),Dit.forEach(t),sko=r(W8e," \u2014 "),hG=n(W8e,"A",{href:!0});var Git=s(hG);lko=r(Git,"GPTNeoForSequenceClassification"),Git.forEach(t),iko=r(W8e," (GPT Neo model)"),W8e.forEach(t),dko=i(j),tb=n(j,"LI",{});var Q8e=s(tb);jfe=n(Q8e,"STRONG",{});var Oit=s(jfe);cko=r(Oit,"gptj"),Oit.forEach(t),fko=r(Q8e," \u2014 "),pG=n(Q8e,"A",{href:!0});var Vit=s(pG);mko=r(Vit,"GPTJForSequenceClassification"),Vit.forEach(t),gko=r(Q8e," (GPT-J model)"),Q8e.forEach(t),hko=i(j),ab=n(j,"LI",{});var H8e=s(ab);Dfe=n(H8e,"STRONG",{});var Xit=s(Dfe);pko=r(Xit,"ibert"),Xit.forEach(t),_ko=r(H8e," \u2014 "),_G=n(H8e,"A",{href:!0});var zit=s(_G);uko=r(zit,"IBertForSequenceClassification"),zit.forEach(t),bko=r(H8e," (I-BERT model)"),H8e.forEach(t),vko=i(j),nb=n(j,"LI",{});var U8e=s(nb);Gfe=n(U8e,"STRONG",{});var Wit=s(Gfe);Fko=r(Wit,"layoutlm"),Wit.forEach(t),Tko=r(U8e," \u2014 "),uG=n(U8e,"A",{href:!0});var Qit=s(uG);Mko=r(Qit,"LayoutLMForSequenceClassification"),Qit.forEach(t),Eko=r(U8e," (LayoutLM model)"),U8e.forEach(t),Cko=i(j),sb=n(j,"LI",{});var J8e=s(sb);Ofe=n(J8e,"STRONG",{});var Hit=s(Ofe);wko=r(Hit,"layoutlmv2"),Hit.forEach(t),Ako=r(J8e," \u2014 "),bG=n(J8e,"A",{href:!0});var Uit=s(bG);yko=r(Uit,"LayoutLMv2ForSequenceClassification"),Uit.forEach(t),Lko=r(J8e," (LayoutLMv2 model)"),J8e.forEach(t),xko=i(j),lb=n(j,"LI",{});var Y8e=s(lb);Vfe=n(Y8e,"STRONG",{});var Jit=s(Vfe);$ko=r(Jit,"led"),Jit.forEach(t),kko=r(Y8e," \u2014 "),vG=n(Y8e,"A",{href:!0});var Yit=s(vG);Sko=r(Yit,"LEDForSequenceClassification"),Yit.forEach(t),Rko=r(Y8e," (LED model)"),Y8e.forEach(t),Pko=i(j),ib=n(j,"LI",{});var K8e=s(ib);Xfe=n(K8e,"STRONG",{});var Kit=s(Xfe);Bko=r(Kit,"longformer"),Kit.forEach(t),Iko=r(K8e," \u2014 "),FG=n(K8e,"A",{href:!0});var Zit=s(FG);qko=r(Zit,"LongformerForSequenceClassification"),Zit.forEach(t),Nko=r(K8e," (Longformer model)"),K8e.forEach(t),jko=i(j),db=n(j,"LI",{});var Z8e=s(db);zfe=n(Z8e,"STRONG",{});var edt=s(zfe);Dko=r(edt,"mbart"),edt.forEach(t),Gko=r(Z8e," \u2014 "),TG=n(Z8e,"A",{href:!0});var odt=s(TG);Oko=r(odt,"MBartForSequenceClassification"),odt.forEach(t),Vko=r(Z8e," (mBART model)"),Z8e.forEach(t),Xko=i(j),cb=n(j,"LI",{});var e9e=s(cb);Wfe=n(e9e,"STRONG",{});var rdt=s(Wfe);zko=r(rdt,"megatron-bert"),rdt.forEach(t),Wko=r(e9e," \u2014 "),MG=n(e9e,"A",{href:!0});var tdt=s(MG);Qko=r(tdt,"MegatronBertForSequenceClassification"),tdt.forEach(t),Hko=r(e9e," (MegatronBert model)"),e9e.forEach(t),Uko=i(j),fb=n(j,"LI",{});var o9e=s(fb);Qfe=n(o9e,"STRONG",{});var adt=s(Qfe);Jko=r(adt,"mobilebert"),adt.forEach(t),Yko=r(o9e," \u2014 "),EG=n(o9e,"A",{href:!0});var ndt=s(EG);Kko=r(ndt,"MobileBertForSequenceClassification"),ndt.forEach(t),Zko=r(o9e," (MobileBERT model)"),o9e.forEach(t),eSo=i(j),mb=n(j,"LI",{});var r9e=s(mb);Hfe=n(r9e,"STRONG",{});var sdt=s(Hfe);oSo=r(sdt,"mpnet"),sdt.forEach(t),rSo=r(r9e," \u2014 "),CG=n(r9e,"A",{href:!0});var ldt=s(CG);tSo=r(ldt,"MPNetForSequenceClassification"),ldt.forEach(t),aSo=r(r9e," (MPNet model)"),r9e.forEach(t),nSo=i(j),gb=n(j,"LI",{});var t9e=s(gb);Ufe=n(t9e,"STRONG",{});var idt=s(Ufe);sSo=r(idt,"nystromformer"),idt.forEach(t),lSo=r(t9e," \u2014 "),wG=n(t9e,"A",{href:!0});var ddt=s(wG);iSo=r(ddt,"NystromformerForSequenceClassification"),ddt.forEach(t),dSo=r(t9e," (Nystromformer model)"),t9e.forEach(t),cSo=i(j),hb=n(j,"LI",{});var a9e=s(hb);Jfe=n(a9e,"STRONG",{});var cdt=s(Jfe);fSo=r(cdt,"openai-gpt"),cdt.forEach(t),mSo=r(a9e," \u2014 "),AG=n(a9e,"A",{href:!0});var fdt=s(AG);gSo=r(fdt,"OpenAIGPTForSequenceClassification"),fdt.forEach(t),hSo=r(a9e," (OpenAI GPT model)"),a9e.forEach(t),pSo=i(j),pb=n(j,"LI",{});var n9e=s(pb);Yfe=n(n9e,"STRONG",{});var mdt=s(Yfe);_So=r(mdt,"perceiver"),mdt.forEach(t),uSo=r(n9e," \u2014 "),yG=n(n9e,"A",{href:!0});var gdt=s(yG);bSo=r(gdt,"PerceiverForSequenceClassification"),gdt.forEach(t),vSo=r(n9e," (Perceiver model)"),n9e.forEach(t),FSo=i(j),_b=n(j,"LI",{});var s9e=s(_b);Kfe=n(s9e,"STRONG",{});var hdt=s(Kfe);TSo=r(hdt,"plbart"),hdt.forEach(t),MSo=r(s9e," \u2014 "),LG=n(s9e,"A",{href:!0});var pdt=s(LG);ESo=r(pdt,"PLBartForSequenceClassification"),pdt.forEach(t),CSo=r(s9e," (PLBart model)"),s9e.forEach(t),wSo=i(j),ub=n(j,"LI",{});var l9e=s(ub);Zfe=n(l9e,"STRONG",{});var _dt=s(Zfe);ASo=r(_dt,"qdqbert"),_dt.forEach(t),ySo=r(l9e," \u2014 "),xG=n(l9e,"A",{href:!0});var udt=s(xG);LSo=r(udt,"QDQBertForSequenceClassification"),udt.forEach(t),xSo=r(l9e," (QDQBert model)"),l9e.forEach(t),$So=i(j),bb=n(j,"LI",{});var i9e=s(bb);eme=n(i9e,"STRONG",{});var bdt=s(eme);kSo=r(bdt,"reformer"),bdt.forEach(t),SSo=r(i9e," \u2014 "),$G=n(i9e,"A",{href:!0});var vdt=s($G);RSo=r(vdt,"ReformerForSequenceClassification"),vdt.forEach(t),PSo=r(i9e," (Reformer model)"),i9e.forEach(t),BSo=i(j),vb=n(j,"LI",{});var d9e=s(vb);ome=n(d9e,"STRONG",{});var Fdt=s(ome);ISo=r(Fdt,"rembert"),Fdt.forEach(t),qSo=r(d9e," \u2014 "),kG=n(d9e,"A",{href:!0});var Tdt=s(kG);NSo=r(Tdt,"RemBertForSequenceClassification"),Tdt.forEach(t),jSo=r(d9e," (RemBERT model)"),d9e.forEach(t),DSo=i(j),Fb=n(j,"LI",{});var c9e=s(Fb);rme=n(c9e,"STRONG",{});var Mdt=s(rme);GSo=r(Mdt,"roberta"),Mdt.forEach(t),OSo=r(c9e," \u2014 "),SG=n(c9e,"A",{href:!0});var Edt=s(SG);VSo=r(Edt,"RobertaForSequenceClassification"),Edt.forEach(t),XSo=r(c9e," (RoBERTa model)"),c9e.forEach(t),zSo=i(j),Tb=n(j,"LI",{});var f9e=s(Tb);tme=n(f9e,"STRONG",{});var Cdt=s(tme);WSo=r(Cdt,"roformer"),Cdt.forEach(t),QSo=r(f9e," \u2014 "),RG=n(f9e,"A",{href:!0});var wdt=s(RG);HSo=r(wdt,"RoFormerForSequenceClassification"),wdt.forEach(t),USo=r(f9e," (RoFormer model)"),f9e.forEach(t),JSo=i(j),Mb=n(j,"LI",{});var m9e=s(Mb);ame=n(m9e,"STRONG",{});var Adt=s(ame);YSo=r(Adt,"squeezebert"),Adt.forEach(t),KSo=r(m9e," \u2014 "),PG=n(m9e,"A",{href:!0});var ydt=s(PG);ZSo=r(ydt,"SqueezeBertForSequenceClassification"),ydt.forEach(t),eRo=r(m9e," (SqueezeBERT model)"),m9e.forEach(t),oRo=i(j),Eb=n(j,"LI",{});var g9e=s(Eb);nme=n(g9e,"STRONG",{});var Ldt=s(nme);rRo=r(Ldt,"tapas"),Ldt.forEach(t),tRo=r(g9e," \u2014 "),BG=n(g9e,"A",{href:!0});var xdt=s(BG);aRo=r(xdt,"TapasForSequenceClassification"),xdt.forEach(t),nRo=r(g9e," (TAPAS model)"),g9e.forEach(t),sRo=i(j),Cb=n(j,"LI",{});var h9e=s(Cb);sme=n(h9e,"STRONG",{});var $dt=s(sme);lRo=r($dt,"transfo-xl"),$dt.forEach(t),iRo=r(h9e," \u2014 "),IG=n(h9e,"A",{href:!0});var kdt=s(IG);dRo=r(kdt,"TransfoXLForSequenceClassification"),kdt.forEach(t),cRo=r(h9e," (Transformer-XL model)"),h9e.forEach(t),fRo=i(j),wb=n(j,"LI",{});var p9e=s(wb);lme=n(p9e,"STRONG",{});var Sdt=s(lme);mRo=r(Sdt,"xlm"),Sdt.forEach(t),gRo=r(p9e," \u2014 "),qG=n(p9e,"A",{href:!0});var Rdt=s(qG);hRo=r(Rdt,"XLMForSequenceClassification"),Rdt.forEach(t),pRo=r(p9e," (XLM model)"),p9e.forEach(t),_Ro=i(j),Ab=n(j,"LI",{});var _9e=s(Ab);ime=n(_9e,"STRONG",{});var Pdt=s(ime);uRo=r(Pdt,"xlm-roberta"),Pdt.forEach(t),bRo=r(_9e," \u2014 "),NG=n(_9e,"A",{href:!0});var Bdt=s(NG);vRo=r(Bdt,"XLMRobertaForSequenceClassification"),Bdt.forEach(t),FRo=r(_9e," (XLM-RoBERTa model)"),_9e.forEach(t),TRo=i(j),yb=n(j,"LI",{});var u9e=s(yb);dme=n(u9e,"STRONG",{});var Idt=s(dme);MRo=r(Idt,"xlm-roberta-xl"),Idt.forEach(t),ERo=r(u9e," \u2014 "),jG=n(u9e,"A",{href:!0});var qdt=s(jG);CRo=r(qdt,"XLMRobertaXLForSequenceClassification"),qdt.forEach(t),wRo=r(u9e," (XLM-RoBERTa-XL model)"),u9e.forEach(t),ARo=i(j),Lb=n(j,"LI",{});var b9e=s(Lb);cme=n(b9e,"STRONG",{});var Ndt=s(cme);yRo=r(Ndt,"xlnet"),Ndt.forEach(t),LRo=r(b9e," \u2014 "),DG=n(b9e,"A",{href:!0});var jdt=s(DG);xRo=r(jdt,"XLNetForSequenceClassification"),jdt.forEach(t),$Ro=r(b9e," (XLNet model)"),b9e.forEach(t),kRo=i(j),xb=n(j,"LI",{});var v9e=s(xb);fme=n(v9e,"STRONG",{});var Ddt=s(fme);SRo=r(Ddt,"yoso"),Ddt.forEach(t),RRo=r(v9e," \u2014 "),GG=n(v9e,"A",{href:!0});var Gdt=s(GG);PRo=r(Gdt,"YosoForSequenceClassification"),Gdt.forEach(t),BRo=r(v9e," (YOSO model)"),v9e.forEach(t),j.forEach(t),IRo=i(sa),$b=n(sa,"P",{});var F9e=s($b);qRo=r(F9e,"The model is set in evaluation mode by default using "),mme=n(F9e,"CODE",{});var Odt=s(mme);NRo=r(Odt,"model.eval()"),Odt.forEach(t),jRo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(F9e,"CODE",{});var Vdt=s(gme);DRo=r(Vdt,"model.train()"),Vdt.forEach(t),F9e.forEach(t),GRo=i(sa),T(kb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),zqe=i(f),Vi=n(f,"H2",{class:!0});var Uje=s(Vi);Sb=n(Uje,"A",{id:!0,class:!0,href:!0});var Xdt=s(Sb);hme=n(Xdt,"SPAN",{});var zdt=s(hme);T(Ty.$$.fragment,zdt),zdt.forEach(t),Xdt.forEach(t),ORo=i(Uje),pme=n(Uje,"SPAN",{});var Wdt=s(pme);VRo=r(Wdt,"AutoModelForMultipleChoice"),Wdt.forEach(t),Uje.forEach(t),Wqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(My.$$.fragment,Qs),XRo=i(Qs),Xi=n(Qs,"P",{});var fZ=s(Xi);zRo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OG=n(fZ,"A",{href:!0});var Qdt=s(OG);WRo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),QRo=r(fZ," class method or the "),VG=n(fZ,"A",{href:!0});var Hdt=s(VG);HRo=r(Hdt,"from_config()"),Hdt.forEach(t),URo=r(fZ,` class
method.`),fZ.forEach(t),JRo=i(Qs),Ey=n(Qs,"P",{});var Jje=s(Ey);YRo=r(Jje,"This class cannot be instantiated directly using "),_me=n(Jje,"CODE",{});var Udt=s(_me);KRo=r(Udt,"__init__()"),Udt.forEach(t),ZRo=r(Jje," (throws an error)."),Jje.forEach(t),ePo=i(Qs),dt=n(Qs,"DIV",{class:!0});var B0=s(dt);T(Cy.$$.fragment,B0),oPo=i(B0),ume=n(B0,"P",{});var Jdt=s(ume);rPo=r(Jdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jdt.forEach(t),tPo=i(B0),zi=n(B0,"P",{});var mZ=s(zi);aPo=r(mZ,`Note:
Loading a model from its configuration file does `),bme=n(mZ,"STRONG",{});var Ydt=s(bme);nPo=r(Ydt,"not"),Ydt.forEach(t),sPo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(mZ,"A",{href:!0});var Kdt=s(XG);lPo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),iPo=r(mZ," to load the model weights."),mZ.forEach(t),dPo=i(B0),T(Rb.$$.fragment,B0),B0.forEach(t),cPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(wy.$$.fragment,la),fPo=i(la),vme=n(la,"P",{});var Zdt=s(vme);mPo=r(Zdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zdt.forEach(t),gPo=i(la),Pa=n(la,"P",{});var I0=s(Pa);hPo=r(I0,"The model class to instantiate is selected based on the "),Fme=n(I0,"CODE",{});var ect=s(Fme);pPo=r(ect,"model_type"),ect.forEach(t),_Po=r(I0,` property of the config object (either
passed as an argument or loaded from `),Tme=n(I0,"CODE",{});var oct=s(Tme);uPo=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),bPo=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(I0,"CODE",{});var rct=s(Mme);vPo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),FPo=r(I0,":"),I0.forEach(t),TPo=i(la),Y=n(la,"UL",{});var Z=s(Y);Pb=n(Z,"LI",{});var T9e=s(Pb);Eme=n(T9e,"STRONG",{});var tct=s(Eme);MPo=r(tct,"albert"),tct.forEach(t),EPo=r(T9e," \u2014 "),zG=n(T9e,"A",{href:!0});var act=s(zG);CPo=r(act,"AlbertForMultipleChoice"),act.forEach(t),wPo=r(T9e," (ALBERT model)"),T9e.forEach(t),APo=i(Z),Bb=n(Z,"LI",{});var M9e=s(Bb);Cme=n(M9e,"STRONG",{});var nct=s(Cme);yPo=r(nct,"bert"),nct.forEach(t),LPo=r(M9e," \u2014 "),WG=n(M9e,"A",{href:!0});var sct=s(WG);xPo=r(sct,"BertForMultipleChoice"),sct.forEach(t),$Po=r(M9e," (BERT model)"),M9e.forEach(t),kPo=i(Z),Ib=n(Z,"LI",{});var E9e=s(Ib);wme=n(E9e,"STRONG",{});var lct=s(wme);SPo=r(lct,"big_bird"),lct.forEach(t),RPo=r(E9e," \u2014 "),QG=n(E9e,"A",{href:!0});var ict=s(QG);PPo=r(ict,"BigBirdForMultipleChoice"),ict.forEach(t),BPo=r(E9e," (BigBird model)"),E9e.forEach(t),IPo=i(Z),qb=n(Z,"LI",{});var C9e=s(qb);Ame=n(C9e,"STRONG",{});var dct=s(Ame);qPo=r(dct,"camembert"),dct.forEach(t),NPo=r(C9e," \u2014 "),HG=n(C9e,"A",{href:!0});var cct=s(HG);jPo=r(cct,"CamembertForMultipleChoice"),cct.forEach(t),DPo=r(C9e," (CamemBERT model)"),C9e.forEach(t),GPo=i(Z),Nb=n(Z,"LI",{});var w9e=s(Nb);yme=n(w9e,"STRONG",{});var fct=s(yme);OPo=r(fct,"canine"),fct.forEach(t),VPo=r(w9e," \u2014 "),UG=n(w9e,"A",{href:!0});var mct=s(UG);XPo=r(mct,"CanineForMultipleChoice"),mct.forEach(t),zPo=r(w9e," (Canine model)"),w9e.forEach(t),WPo=i(Z),jb=n(Z,"LI",{});var A9e=s(jb);Lme=n(A9e,"STRONG",{});var gct=s(Lme);QPo=r(gct,"convbert"),gct.forEach(t),HPo=r(A9e," \u2014 "),JG=n(A9e,"A",{href:!0});var hct=s(JG);UPo=r(hct,"ConvBertForMultipleChoice"),hct.forEach(t),JPo=r(A9e," (ConvBERT model)"),A9e.forEach(t),YPo=i(Z),Db=n(Z,"LI",{});var y9e=s(Db);xme=n(y9e,"STRONG",{});var pct=s(xme);KPo=r(pct,"data2vec-text"),pct.forEach(t),ZPo=r(y9e," \u2014 "),YG=n(y9e,"A",{href:!0});var _ct=s(YG);eBo=r(_ct,"Data2VecTextForMultipleChoice"),_ct.forEach(t),oBo=r(y9e," (Data2VecText model)"),y9e.forEach(t),rBo=i(Z),Gb=n(Z,"LI",{});var L9e=s(Gb);$me=n(L9e,"STRONG",{});var uct=s($me);tBo=r(uct,"deberta-v2"),uct.forEach(t),aBo=r(L9e," \u2014 "),KG=n(L9e,"A",{href:!0});var bct=s(KG);nBo=r(bct,"DebertaV2ForMultipleChoice"),bct.forEach(t),sBo=r(L9e," (DeBERTa-v2 model)"),L9e.forEach(t),lBo=i(Z),Ob=n(Z,"LI",{});var x9e=s(Ob);kme=n(x9e,"STRONG",{});var vct=s(kme);iBo=r(vct,"distilbert"),vct.forEach(t),dBo=r(x9e," \u2014 "),ZG=n(x9e,"A",{href:!0});var Fct=s(ZG);cBo=r(Fct,"DistilBertForMultipleChoice"),Fct.forEach(t),fBo=r(x9e," (DistilBERT model)"),x9e.forEach(t),mBo=i(Z),Vb=n(Z,"LI",{});var $9e=s(Vb);Sme=n($9e,"STRONG",{});var Tct=s(Sme);gBo=r(Tct,"electra"),Tct.forEach(t),hBo=r($9e," \u2014 "),eO=n($9e,"A",{href:!0});var Mct=s(eO);pBo=r(Mct,"ElectraForMultipleChoice"),Mct.forEach(t),_Bo=r($9e," (ELECTRA model)"),$9e.forEach(t),uBo=i(Z),Xb=n(Z,"LI",{});var k9e=s(Xb);Rme=n(k9e,"STRONG",{});var Ect=s(Rme);bBo=r(Ect,"flaubert"),Ect.forEach(t),vBo=r(k9e," \u2014 "),oO=n(k9e,"A",{href:!0});var Cct=s(oO);FBo=r(Cct,"FlaubertForMultipleChoice"),Cct.forEach(t),TBo=r(k9e," (FlauBERT model)"),k9e.forEach(t),MBo=i(Z),zb=n(Z,"LI",{});var S9e=s(zb);Pme=n(S9e,"STRONG",{});var wct=s(Pme);EBo=r(wct,"fnet"),wct.forEach(t),CBo=r(S9e," \u2014 "),rO=n(S9e,"A",{href:!0});var Act=s(rO);wBo=r(Act,"FNetForMultipleChoice"),Act.forEach(t),ABo=r(S9e," (FNet model)"),S9e.forEach(t),yBo=i(Z),Wb=n(Z,"LI",{});var R9e=s(Wb);Bme=n(R9e,"STRONG",{});var yct=s(Bme);LBo=r(yct,"funnel"),yct.forEach(t),xBo=r(R9e," \u2014 "),tO=n(R9e,"A",{href:!0});var Lct=s(tO);$Bo=r(Lct,"FunnelForMultipleChoice"),Lct.forEach(t),kBo=r(R9e," (Funnel Transformer model)"),R9e.forEach(t),SBo=i(Z),Qb=n(Z,"LI",{});var P9e=s(Qb);Ime=n(P9e,"STRONG",{});var xct=s(Ime);RBo=r(xct,"ibert"),xct.forEach(t),PBo=r(P9e," \u2014 "),aO=n(P9e,"A",{href:!0});var $ct=s(aO);BBo=r($ct,"IBertForMultipleChoice"),$ct.forEach(t),IBo=r(P9e," (I-BERT model)"),P9e.forEach(t),qBo=i(Z),Hb=n(Z,"LI",{});var B9e=s(Hb);qme=n(B9e,"STRONG",{});var kct=s(qme);NBo=r(kct,"longformer"),kct.forEach(t),jBo=r(B9e," \u2014 "),nO=n(B9e,"A",{href:!0});var Sct=s(nO);DBo=r(Sct,"LongformerForMultipleChoice"),Sct.forEach(t),GBo=r(B9e," (Longformer model)"),B9e.forEach(t),OBo=i(Z),Ub=n(Z,"LI",{});var I9e=s(Ub);Nme=n(I9e,"STRONG",{});var Rct=s(Nme);VBo=r(Rct,"megatron-bert"),Rct.forEach(t),XBo=r(I9e," \u2014 "),sO=n(I9e,"A",{href:!0});var Pct=s(sO);zBo=r(Pct,"MegatronBertForMultipleChoice"),Pct.forEach(t),WBo=r(I9e," (MegatronBert model)"),I9e.forEach(t),QBo=i(Z),Jb=n(Z,"LI",{});var q9e=s(Jb);jme=n(q9e,"STRONG",{});var Bct=s(jme);HBo=r(Bct,"mobilebert"),Bct.forEach(t),UBo=r(q9e," \u2014 "),lO=n(q9e,"A",{href:!0});var Ict=s(lO);JBo=r(Ict,"MobileBertForMultipleChoice"),Ict.forEach(t),YBo=r(q9e," (MobileBERT model)"),q9e.forEach(t),KBo=i(Z),Yb=n(Z,"LI",{});var N9e=s(Yb);Dme=n(N9e,"STRONG",{});var qct=s(Dme);ZBo=r(qct,"mpnet"),qct.forEach(t),eIo=r(N9e," \u2014 "),iO=n(N9e,"A",{href:!0});var Nct=s(iO);oIo=r(Nct,"MPNetForMultipleChoice"),Nct.forEach(t),rIo=r(N9e," (MPNet model)"),N9e.forEach(t),tIo=i(Z),Kb=n(Z,"LI",{});var j9e=s(Kb);Gme=n(j9e,"STRONG",{});var jct=s(Gme);aIo=r(jct,"nystromformer"),jct.forEach(t),nIo=r(j9e," \u2014 "),dO=n(j9e,"A",{href:!0});var Dct=s(dO);sIo=r(Dct,"NystromformerForMultipleChoice"),Dct.forEach(t),lIo=r(j9e," (Nystromformer model)"),j9e.forEach(t),iIo=i(Z),Zb=n(Z,"LI",{});var D9e=s(Zb);Ome=n(D9e,"STRONG",{});var Gct=s(Ome);dIo=r(Gct,"qdqbert"),Gct.forEach(t),cIo=r(D9e," \u2014 "),cO=n(D9e,"A",{href:!0});var Oct=s(cO);fIo=r(Oct,"QDQBertForMultipleChoice"),Oct.forEach(t),mIo=r(D9e," (QDQBert model)"),D9e.forEach(t),gIo=i(Z),e2=n(Z,"LI",{});var G9e=s(e2);Vme=n(G9e,"STRONG",{});var Vct=s(Vme);hIo=r(Vct,"rembert"),Vct.forEach(t),pIo=r(G9e," \u2014 "),fO=n(G9e,"A",{href:!0});var Xct=s(fO);_Io=r(Xct,"RemBertForMultipleChoice"),Xct.forEach(t),uIo=r(G9e," (RemBERT model)"),G9e.forEach(t),bIo=i(Z),o2=n(Z,"LI",{});var O9e=s(o2);Xme=n(O9e,"STRONG",{});var zct=s(Xme);vIo=r(zct,"roberta"),zct.forEach(t),FIo=r(O9e," \u2014 "),mO=n(O9e,"A",{href:!0});var Wct=s(mO);TIo=r(Wct,"RobertaForMultipleChoice"),Wct.forEach(t),MIo=r(O9e," (RoBERTa model)"),O9e.forEach(t),EIo=i(Z),r2=n(Z,"LI",{});var V9e=s(r2);zme=n(V9e,"STRONG",{});var Qct=s(zme);CIo=r(Qct,"roformer"),Qct.forEach(t),wIo=r(V9e," \u2014 "),gO=n(V9e,"A",{href:!0});var Hct=s(gO);AIo=r(Hct,"RoFormerForMultipleChoice"),Hct.forEach(t),yIo=r(V9e," (RoFormer model)"),V9e.forEach(t),LIo=i(Z),t2=n(Z,"LI",{});var X9e=s(t2);Wme=n(X9e,"STRONG",{});var Uct=s(Wme);xIo=r(Uct,"squeezebert"),Uct.forEach(t),$Io=r(X9e," \u2014 "),hO=n(X9e,"A",{href:!0});var Jct=s(hO);kIo=r(Jct,"SqueezeBertForMultipleChoice"),Jct.forEach(t),SIo=r(X9e," (SqueezeBERT model)"),X9e.forEach(t),RIo=i(Z),a2=n(Z,"LI",{});var z9e=s(a2);Qme=n(z9e,"STRONG",{});var Yct=s(Qme);PIo=r(Yct,"xlm"),Yct.forEach(t),BIo=r(z9e," \u2014 "),pO=n(z9e,"A",{href:!0});var Kct=s(pO);IIo=r(Kct,"XLMForMultipleChoice"),Kct.forEach(t),qIo=r(z9e," (XLM model)"),z9e.forEach(t),NIo=i(Z),n2=n(Z,"LI",{});var W9e=s(n2);Hme=n(W9e,"STRONG",{});var Zct=s(Hme);jIo=r(Zct,"xlm-roberta"),Zct.forEach(t),DIo=r(W9e," \u2014 "),_O=n(W9e,"A",{href:!0});var eft=s(_O);GIo=r(eft,"XLMRobertaForMultipleChoice"),eft.forEach(t),OIo=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),VIo=i(Z),s2=n(Z,"LI",{});var Q9e=s(s2);Ume=n(Q9e,"STRONG",{});var oft=s(Ume);XIo=r(oft,"xlm-roberta-xl"),oft.forEach(t),zIo=r(Q9e," \u2014 "),uO=n(Q9e,"A",{href:!0});var rft=s(uO);WIo=r(rft,"XLMRobertaXLForMultipleChoice"),rft.forEach(t),QIo=r(Q9e," (XLM-RoBERTa-XL model)"),Q9e.forEach(t),HIo=i(Z),l2=n(Z,"LI",{});var H9e=s(l2);Jme=n(H9e,"STRONG",{});var tft=s(Jme);UIo=r(tft,"xlnet"),tft.forEach(t),JIo=r(H9e," \u2014 "),bO=n(H9e,"A",{href:!0});var aft=s(bO);YIo=r(aft,"XLNetForMultipleChoice"),aft.forEach(t),KIo=r(H9e," (XLNet model)"),H9e.forEach(t),ZIo=i(Z),i2=n(Z,"LI",{});var U9e=s(i2);Yme=n(U9e,"STRONG",{});var nft=s(Yme);eqo=r(nft,"yoso"),nft.forEach(t),oqo=r(U9e," \u2014 "),vO=n(U9e,"A",{href:!0});var sft=s(vO);rqo=r(sft,"YosoForMultipleChoice"),sft.forEach(t),tqo=r(U9e," (YOSO model)"),U9e.forEach(t),Z.forEach(t),aqo=i(la),d2=n(la,"P",{});var J9e=s(d2);nqo=r(J9e,"The model is set in evaluation mode by default using "),Kme=n(J9e,"CODE",{});var lft=s(Kme);sqo=r(lft,"model.eval()"),lft.forEach(t),lqo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(J9e,"CODE",{});var ift=s(Zme);iqo=r(ift,"model.train()"),ift.forEach(t),J9e.forEach(t),dqo=i(la),T(c2.$$.fragment,la),la.forEach(t),Qs.forEach(t),Qqe=i(f),Wi=n(f,"H2",{class:!0});var Yje=s(Wi);f2=n(Yje,"A",{id:!0,class:!0,href:!0});var dft=s(f2);ege=n(dft,"SPAN",{});var cft=s(ege);T(Ay.$$.fragment,cft),cft.forEach(t),dft.forEach(t),cqo=i(Yje),oge=n(Yje,"SPAN",{});var fft=s(oge);fqo=r(fft,"AutoModelForNextSentencePrediction"),fft.forEach(t),Yje.forEach(t),Hqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(yy.$$.fragment,Hs),mqo=i(Hs),Qi=n(Hs,"P",{});var gZ=s(Qi);gqo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FO=n(gZ,"A",{href:!0});var mft=s(FO);hqo=r(mft,"from_pretrained()"),mft.forEach(t),pqo=r(gZ," class method or the "),TO=n(gZ,"A",{href:!0});var gft=s(TO);_qo=r(gft,"from_config()"),gft.forEach(t),uqo=r(gZ,` class
method.`),gZ.forEach(t),bqo=i(Hs),Ly=n(Hs,"P",{});var Kje=s(Ly);vqo=r(Kje,"This class cannot be instantiated directly using "),rge=n(Kje,"CODE",{});var hft=s(rge);Fqo=r(hft,"__init__()"),hft.forEach(t),Tqo=r(Kje," (throws an error)."),Kje.forEach(t),Mqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var q0=s(ct);T(xy.$$.fragment,q0),Eqo=i(q0),tge=n(q0,"P",{});var pft=s(tge);Cqo=r(pft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pft.forEach(t),wqo=i(q0),Hi=n(q0,"P",{});var hZ=s(Hi);Aqo=r(hZ,`Note:
Loading a model from its configuration file does `),age=n(hZ,"STRONG",{});var _ft=s(age);yqo=r(_ft,"not"),_ft.forEach(t),Lqo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(hZ,"A",{href:!0});var uft=s(MO);xqo=r(uft,"from_pretrained()"),uft.forEach(t),$qo=r(hZ," to load the model weights."),hZ.forEach(t),kqo=i(q0),T(m2.$$.fragment,q0),q0.forEach(t),Sqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T($y.$$.fragment,ia),Rqo=i(ia),nge=n(ia,"P",{});var bft=s(nge);Pqo=r(bft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bft.forEach(t),Bqo=i(ia),Ba=n(ia,"P",{});var N0=s(Ba);Iqo=r(N0,"The model class to instantiate is selected based on the "),sge=n(N0,"CODE",{});var vft=s(sge);qqo=r(vft,"model_type"),vft.forEach(t),Nqo=r(N0,` property of the config object (either
passed as an argument or loaded from `),lge=n(N0,"CODE",{});var Fft=s(lge);jqo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),Dqo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(N0,"CODE",{});var Tft=s(ige);Gqo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),Oqo=r(N0,":"),N0.forEach(t),Vqo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);g2=n(Us,"LI",{});var Y9e=s(g2);dge=n(Y9e,"STRONG",{});var Mft=s(dge);Xqo=r(Mft,"bert"),Mft.forEach(t),zqo=r(Y9e," \u2014 "),EO=n(Y9e,"A",{href:!0});var Eft=s(EO);Wqo=r(Eft,"BertForNextSentencePrediction"),Eft.forEach(t),Qqo=r(Y9e," (BERT model)"),Y9e.forEach(t),Hqo=i(Us),h2=n(Us,"LI",{});var K9e=s(h2);cge=n(K9e,"STRONG",{});var Cft=s(cge);Uqo=r(Cft,"fnet"),Cft.forEach(t),Jqo=r(K9e," \u2014 "),CO=n(K9e,"A",{href:!0});var wft=s(CO);Yqo=r(wft,"FNetForNextSentencePrediction"),wft.forEach(t),Kqo=r(K9e," (FNet model)"),K9e.forEach(t),Zqo=i(Us),p2=n(Us,"LI",{});var Z9e=s(p2);fge=n(Z9e,"STRONG",{});var Aft=s(fge);eNo=r(Aft,"megatron-bert"),Aft.forEach(t),oNo=r(Z9e," \u2014 "),wO=n(Z9e,"A",{href:!0});var yft=s(wO);rNo=r(yft,"MegatronBertForNextSentencePrediction"),yft.forEach(t),tNo=r(Z9e," (MegatronBert model)"),Z9e.forEach(t),aNo=i(Us),_2=n(Us,"LI",{});var exe=s(_2);mge=n(exe,"STRONG",{});var Lft=s(mge);nNo=r(Lft,"mobilebert"),Lft.forEach(t),sNo=r(exe," \u2014 "),AO=n(exe,"A",{href:!0});var xft=s(AO);lNo=r(xft,"MobileBertForNextSentencePrediction"),xft.forEach(t),iNo=r(exe," (MobileBERT model)"),exe.forEach(t),dNo=i(Us),u2=n(Us,"LI",{});var oxe=s(u2);gge=n(oxe,"STRONG",{});var $ft=s(gge);cNo=r($ft,"qdqbert"),$ft.forEach(t),fNo=r(oxe," \u2014 "),yO=n(oxe,"A",{href:!0});var kft=s(yO);mNo=r(kft,"QDQBertForNextSentencePrediction"),kft.forEach(t),gNo=r(oxe," (QDQBert model)"),oxe.forEach(t),Us.forEach(t),hNo=i(ia),b2=n(ia,"P",{});var rxe=s(b2);pNo=r(rxe,"The model is set in evaluation mode by default using "),hge=n(rxe,"CODE",{});var Sft=s(hge);_No=r(Sft,"model.eval()"),Sft.forEach(t),uNo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(rxe,"CODE",{});var Rft=s(pge);bNo=r(Rft,"model.train()"),Rft.forEach(t),rxe.forEach(t),vNo=i(ia),T(v2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Uqe=i(f),Ui=n(f,"H2",{class:!0});var Zje=s(Ui);F2=n(Zje,"A",{id:!0,class:!0,href:!0});var Pft=s(F2);_ge=n(Pft,"SPAN",{});var Bft=s(_ge);T(ky.$$.fragment,Bft),Bft.forEach(t),Pft.forEach(t),FNo=i(Zje),uge=n(Zje,"SPAN",{});var Ift=s(uge);TNo=r(Ift,"AutoModelForTokenClassification"),Ift.forEach(t),Zje.forEach(t),Jqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Sy.$$.fragment,Js),MNo=i(Js),Ji=n(Js,"P",{});var pZ=s(Ji);ENo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LO=n(pZ,"A",{href:!0});var qft=s(LO);CNo=r(qft,"from_pretrained()"),qft.forEach(t),wNo=r(pZ," class method or the "),xO=n(pZ,"A",{href:!0});var Nft=s(xO);ANo=r(Nft,"from_config()"),Nft.forEach(t),yNo=r(pZ,` class
method.`),pZ.forEach(t),LNo=i(Js),Ry=n(Js,"P",{});var eDe=s(Ry);xNo=r(eDe,"This class cannot be instantiated directly using "),bge=n(eDe,"CODE",{});var jft=s(bge);$No=r(jft,"__init__()"),jft.forEach(t),kNo=r(eDe," (throws an error)."),eDe.forEach(t),SNo=i(Js),ft=n(Js,"DIV",{class:!0});var j0=s(ft);T(Py.$$.fragment,j0),RNo=i(j0),vge=n(j0,"P",{});var Dft=s(vge);PNo=r(Dft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dft.forEach(t),BNo=i(j0),Yi=n(j0,"P",{});var _Z=s(Yi);INo=r(_Z,`Note:
Loading a model from its configuration file does `),Fge=n(_Z,"STRONG",{});var Gft=s(Fge);qNo=r(Gft,"not"),Gft.forEach(t),NNo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(_Z,"A",{href:!0});var Oft=s($O);jNo=r(Oft,"from_pretrained()"),Oft.forEach(t),DNo=r(_Z," to load the model weights."),_Z.forEach(t),GNo=i(j0),T(T2.$$.fragment,j0),j0.forEach(t),ONo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(By.$$.fragment,da),VNo=i(da),Tge=n(da,"P",{});var Vft=s(Tge);XNo=r(Vft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vft.forEach(t),zNo=i(da),Ia=n(da,"P",{});var D0=s(Ia);WNo=r(D0,"The model class to instantiate is selected based on the "),Mge=n(D0,"CODE",{});var Xft=s(Mge);QNo=r(Xft,"model_type"),Xft.forEach(t),HNo=r(D0,` property of the config object (either
passed as an argument or loaded from `),Ege=n(D0,"CODE",{});var zft=s(Ege);UNo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),JNo=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(D0,"CODE",{});var Wft=s(Cge);YNo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),KNo=r(D0,":"),D0.forEach(t),ZNo=i(da),U=n(da,"UL",{});var J=s(U);M2=n(J,"LI",{});var txe=s(M2);wge=n(txe,"STRONG",{});var Qft=s(wge);ejo=r(Qft,"albert"),Qft.forEach(t),ojo=r(txe," \u2014 "),kO=n(txe,"A",{href:!0});var Hft=s(kO);rjo=r(Hft,"AlbertForTokenClassification"),Hft.forEach(t),tjo=r(txe," (ALBERT model)"),txe.forEach(t),ajo=i(J),E2=n(J,"LI",{});var axe=s(E2);Age=n(axe,"STRONG",{});var Uft=s(Age);njo=r(Uft,"bert"),Uft.forEach(t),sjo=r(axe," \u2014 "),SO=n(axe,"A",{href:!0});var Jft=s(SO);ljo=r(Jft,"BertForTokenClassification"),Jft.forEach(t),ijo=r(axe," (BERT model)"),axe.forEach(t),djo=i(J),C2=n(J,"LI",{});var nxe=s(C2);yge=n(nxe,"STRONG",{});var Yft=s(yge);cjo=r(Yft,"big_bird"),Yft.forEach(t),fjo=r(nxe," \u2014 "),RO=n(nxe,"A",{href:!0});var Kft=s(RO);mjo=r(Kft,"BigBirdForTokenClassification"),Kft.forEach(t),gjo=r(nxe," (BigBird model)"),nxe.forEach(t),hjo=i(J),w2=n(J,"LI",{});var sxe=s(w2);Lge=n(sxe,"STRONG",{});var Zft=s(Lge);pjo=r(Zft,"camembert"),Zft.forEach(t),_jo=r(sxe," \u2014 "),PO=n(sxe,"A",{href:!0});var emt=s(PO);ujo=r(emt,"CamembertForTokenClassification"),emt.forEach(t),bjo=r(sxe," (CamemBERT model)"),sxe.forEach(t),vjo=i(J),A2=n(J,"LI",{});var lxe=s(A2);xge=n(lxe,"STRONG",{});var omt=s(xge);Fjo=r(omt,"canine"),omt.forEach(t),Tjo=r(lxe," \u2014 "),BO=n(lxe,"A",{href:!0});var rmt=s(BO);Mjo=r(rmt,"CanineForTokenClassification"),rmt.forEach(t),Ejo=r(lxe," (Canine model)"),lxe.forEach(t),Cjo=i(J),y2=n(J,"LI",{});var ixe=s(y2);$ge=n(ixe,"STRONG",{});var tmt=s($ge);wjo=r(tmt,"convbert"),tmt.forEach(t),Ajo=r(ixe," \u2014 "),IO=n(ixe,"A",{href:!0});var amt=s(IO);yjo=r(amt,"ConvBertForTokenClassification"),amt.forEach(t),Ljo=r(ixe," (ConvBERT model)"),ixe.forEach(t),xjo=i(J),L2=n(J,"LI",{});var dxe=s(L2);kge=n(dxe,"STRONG",{});var nmt=s(kge);$jo=r(nmt,"data2vec-text"),nmt.forEach(t),kjo=r(dxe," \u2014 "),qO=n(dxe,"A",{href:!0});var smt=s(qO);Sjo=r(smt,"Data2VecTextForTokenClassification"),smt.forEach(t),Rjo=r(dxe," (Data2VecText model)"),dxe.forEach(t),Pjo=i(J),x2=n(J,"LI",{});var cxe=s(x2);Sge=n(cxe,"STRONG",{});var lmt=s(Sge);Bjo=r(lmt,"deberta"),lmt.forEach(t),Ijo=r(cxe," \u2014 "),NO=n(cxe,"A",{href:!0});var imt=s(NO);qjo=r(imt,"DebertaForTokenClassification"),imt.forEach(t),Njo=r(cxe," (DeBERTa model)"),cxe.forEach(t),jjo=i(J),$2=n(J,"LI",{});var fxe=s($2);Rge=n(fxe,"STRONG",{});var dmt=s(Rge);Djo=r(dmt,"deberta-v2"),dmt.forEach(t),Gjo=r(fxe," \u2014 "),jO=n(fxe,"A",{href:!0});var cmt=s(jO);Ojo=r(cmt,"DebertaV2ForTokenClassification"),cmt.forEach(t),Vjo=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),Xjo=i(J),k2=n(J,"LI",{});var mxe=s(k2);Pge=n(mxe,"STRONG",{});var fmt=s(Pge);zjo=r(fmt,"distilbert"),fmt.forEach(t),Wjo=r(mxe," \u2014 "),DO=n(mxe,"A",{href:!0});var mmt=s(DO);Qjo=r(mmt,"DistilBertForTokenClassification"),mmt.forEach(t),Hjo=r(mxe," (DistilBERT model)"),mxe.forEach(t),Ujo=i(J),S2=n(J,"LI",{});var gxe=s(S2);Bge=n(gxe,"STRONG",{});var gmt=s(Bge);Jjo=r(gmt,"electra"),gmt.forEach(t),Yjo=r(gxe," \u2014 "),GO=n(gxe,"A",{href:!0});var hmt=s(GO);Kjo=r(hmt,"ElectraForTokenClassification"),hmt.forEach(t),Zjo=r(gxe," (ELECTRA model)"),gxe.forEach(t),eDo=i(J),R2=n(J,"LI",{});var hxe=s(R2);Ige=n(hxe,"STRONG",{});var pmt=s(Ige);oDo=r(pmt,"flaubert"),pmt.forEach(t),rDo=r(hxe," \u2014 "),OO=n(hxe,"A",{href:!0});var _mt=s(OO);tDo=r(_mt,"FlaubertForTokenClassification"),_mt.forEach(t),aDo=r(hxe," (FlauBERT model)"),hxe.forEach(t),nDo=i(J),P2=n(J,"LI",{});var pxe=s(P2);qge=n(pxe,"STRONG",{});var umt=s(qge);sDo=r(umt,"fnet"),umt.forEach(t),lDo=r(pxe," \u2014 "),VO=n(pxe,"A",{href:!0});var bmt=s(VO);iDo=r(bmt,"FNetForTokenClassification"),bmt.forEach(t),dDo=r(pxe," (FNet model)"),pxe.forEach(t),cDo=i(J),B2=n(J,"LI",{});var _xe=s(B2);Nge=n(_xe,"STRONG",{});var vmt=s(Nge);fDo=r(vmt,"funnel"),vmt.forEach(t),mDo=r(_xe," \u2014 "),XO=n(_xe,"A",{href:!0});var Fmt=s(XO);gDo=r(Fmt,"FunnelForTokenClassification"),Fmt.forEach(t),hDo=r(_xe," (Funnel Transformer model)"),_xe.forEach(t),pDo=i(J),I2=n(J,"LI",{});var uxe=s(I2);jge=n(uxe,"STRONG",{});var Tmt=s(jge);_Do=r(Tmt,"gpt2"),Tmt.forEach(t),uDo=r(uxe," \u2014 "),zO=n(uxe,"A",{href:!0});var Mmt=s(zO);bDo=r(Mmt,"GPT2ForTokenClassification"),Mmt.forEach(t),vDo=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),FDo=i(J),q2=n(J,"LI",{});var bxe=s(q2);Dge=n(bxe,"STRONG",{});var Emt=s(Dge);TDo=r(Emt,"ibert"),Emt.forEach(t),MDo=r(bxe," \u2014 "),WO=n(bxe,"A",{href:!0});var Cmt=s(WO);EDo=r(Cmt,"IBertForTokenClassification"),Cmt.forEach(t),CDo=r(bxe," (I-BERT model)"),bxe.forEach(t),wDo=i(J),N2=n(J,"LI",{});var vxe=s(N2);Gge=n(vxe,"STRONG",{});var wmt=s(Gge);ADo=r(wmt,"layoutlm"),wmt.forEach(t),yDo=r(vxe," \u2014 "),QO=n(vxe,"A",{href:!0});var Amt=s(QO);LDo=r(Amt,"LayoutLMForTokenClassification"),Amt.forEach(t),xDo=r(vxe," (LayoutLM model)"),vxe.forEach(t),$Do=i(J),j2=n(J,"LI",{});var Fxe=s(j2);Oge=n(Fxe,"STRONG",{});var ymt=s(Oge);kDo=r(ymt,"layoutlmv2"),ymt.forEach(t),SDo=r(Fxe," \u2014 "),HO=n(Fxe,"A",{href:!0});var Lmt=s(HO);RDo=r(Lmt,"LayoutLMv2ForTokenClassification"),Lmt.forEach(t),PDo=r(Fxe," (LayoutLMv2 model)"),Fxe.forEach(t),BDo=i(J),D2=n(J,"LI",{});var Txe=s(D2);Vge=n(Txe,"STRONG",{});var xmt=s(Vge);IDo=r(xmt,"longformer"),xmt.forEach(t),qDo=r(Txe," \u2014 "),UO=n(Txe,"A",{href:!0});var $mt=s(UO);NDo=r($mt,"LongformerForTokenClassification"),$mt.forEach(t),jDo=r(Txe," (Longformer model)"),Txe.forEach(t),DDo=i(J),G2=n(J,"LI",{});var Mxe=s(G2);Xge=n(Mxe,"STRONG",{});var kmt=s(Xge);GDo=r(kmt,"megatron-bert"),kmt.forEach(t),ODo=r(Mxe," \u2014 "),JO=n(Mxe,"A",{href:!0});var Smt=s(JO);VDo=r(Smt,"MegatronBertForTokenClassification"),Smt.forEach(t),XDo=r(Mxe," (MegatronBert model)"),Mxe.forEach(t),zDo=i(J),O2=n(J,"LI",{});var Exe=s(O2);zge=n(Exe,"STRONG",{});var Rmt=s(zge);WDo=r(Rmt,"mobilebert"),Rmt.forEach(t),QDo=r(Exe," \u2014 "),YO=n(Exe,"A",{href:!0});var Pmt=s(YO);HDo=r(Pmt,"MobileBertForTokenClassification"),Pmt.forEach(t),UDo=r(Exe," (MobileBERT model)"),Exe.forEach(t),JDo=i(J),V2=n(J,"LI",{});var Cxe=s(V2);Wge=n(Cxe,"STRONG",{});var Bmt=s(Wge);YDo=r(Bmt,"mpnet"),Bmt.forEach(t),KDo=r(Cxe," \u2014 "),KO=n(Cxe,"A",{href:!0});var Imt=s(KO);ZDo=r(Imt,"MPNetForTokenClassification"),Imt.forEach(t),eGo=r(Cxe," (MPNet model)"),Cxe.forEach(t),oGo=i(J),X2=n(J,"LI",{});var wxe=s(X2);Qge=n(wxe,"STRONG",{});var qmt=s(Qge);rGo=r(qmt,"nystromformer"),qmt.forEach(t),tGo=r(wxe," \u2014 "),ZO=n(wxe,"A",{href:!0});var Nmt=s(ZO);aGo=r(Nmt,"NystromformerForTokenClassification"),Nmt.forEach(t),nGo=r(wxe," (Nystromformer model)"),wxe.forEach(t),sGo=i(J),z2=n(J,"LI",{});var Axe=s(z2);Hge=n(Axe,"STRONG",{});var jmt=s(Hge);lGo=r(jmt,"qdqbert"),jmt.forEach(t),iGo=r(Axe," \u2014 "),eV=n(Axe,"A",{href:!0});var Dmt=s(eV);dGo=r(Dmt,"QDQBertForTokenClassification"),Dmt.forEach(t),cGo=r(Axe," (QDQBert model)"),Axe.forEach(t),fGo=i(J),W2=n(J,"LI",{});var yxe=s(W2);Uge=n(yxe,"STRONG",{});var Gmt=s(Uge);mGo=r(Gmt,"rembert"),Gmt.forEach(t),gGo=r(yxe," \u2014 "),oV=n(yxe,"A",{href:!0});var Omt=s(oV);hGo=r(Omt,"RemBertForTokenClassification"),Omt.forEach(t),pGo=r(yxe," (RemBERT model)"),yxe.forEach(t),_Go=i(J),Q2=n(J,"LI",{});var Lxe=s(Q2);Jge=n(Lxe,"STRONG",{});var Vmt=s(Jge);uGo=r(Vmt,"roberta"),Vmt.forEach(t),bGo=r(Lxe," \u2014 "),rV=n(Lxe,"A",{href:!0});var Xmt=s(rV);vGo=r(Xmt,"RobertaForTokenClassification"),Xmt.forEach(t),FGo=r(Lxe," (RoBERTa model)"),Lxe.forEach(t),TGo=i(J),H2=n(J,"LI",{});var xxe=s(H2);Yge=n(xxe,"STRONG",{});var zmt=s(Yge);MGo=r(zmt,"roformer"),zmt.forEach(t),EGo=r(xxe," \u2014 "),tV=n(xxe,"A",{href:!0});var Wmt=s(tV);CGo=r(Wmt,"RoFormerForTokenClassification"),Wmt.forEach(t),wGo=r(xxe," (RoFormer model)"),xxe.forEach(t),AGo=i(J),U2=n(J,"LI",{});var $xe=s(U2);Kge=n($xe,"STRONG",{});var Qmt=s(Kge);yGo=r(Qmt,"squeezebert"),Qmt.forEach(t),LGo=r($xe," \u2014 "),aV=n($xe,"A",{href:!0});var Hmt=s(aV);xGo=r(Hmt,"SqueezeBertForTokenClassification"),Hmt.forEach(t),$Go=r($xe," (SqueezeBERT model)"),$xe.forEach(t),kGo=i(J),J2=n(J,"LI",{});var kxe=s(J2);Zge=n(kxe,"STRONG",{});var Umt=s(Zge);SGo=r(Umt,"xlm"),Umt.forEach(t),RGo=r(kxe," \u2014 "),nV=n(kxe,"A",{href:!0});var Jmt=s(nV);PGo=r(Jmt,"XLMForTokenClassification"),Jmt.forEach(t),BGo=r(kxe," (XLM model)"),kxe.forEach(t),IGo=i(J),Y2=n(J,"LI",{});var Sxe=s(Y2);ehe=n(Sxe,"STRONG",{});var Ymt=s(ehe);qGo=r(Ymt,"xlm-roberta"),Ymt.forEach(t),NGo=r(Sxe," \u2014 "),sV=n(Sxe,"A",{href:!0});var Kmt=s(sV);jGo=r(Kmt,"XLMRobertaForTokenClassification"),Kmt.forEach(t),DGo=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),GGo=i(J),K2=n(J,"LI",{});var Rxe=s(K2);ohe=n(Rxe,"STRONG",{});var Zmt=s(ohe);OGo=r(Zmt,"xlm-roberta-xl"),Zmt.forEach(t),VGo=r(Rxe," \u2014 "),lV=n(Rxe,"A",{href:!0});var egt=s(lV);XGo=r(egt,"XLMRobertaXLForTokenClassification"),egt.forEach(t),zGo=r(Rxe," (XLM-RoBERTa-XL model)"),Rxe.forEach(t),WGo=i(J),Z2=n(J,"LI",{});var Pxe=s(Z2);rhe=n(Pxe,"STRONG",{});var ogt=s(rhe);QGo=r(ogt,"xlnet"),ogt.forEach(t),HGo=r(Pxe," \u2014 "),iV=n(Pxe,"A",{href:!0});var rgt=s(iV);UGo=r(rgt,"XLNetForTokenClassification"),rgt.forEach(t),JGo=r(Pxe," (XLNet model)"),Pxe.forEach(t),YGo=i(J),ev=n(J,"LI",{});var Bxe=s(ev);the=n(Bxe,"STRONG",{});var tgt=s(the);KGo=r(tgt,"yoso"),tgt.forEach(t),ZGo=r(Bxe," \u2014 "),dV=n(Bxe,"A",{href:!0});var agt=s(dV);eOo=r(agt,"YosoForTokenClassification"),agt.forEach(t),oOo=r(Bxe," (YOSO model)"),Bxe.forEach(t),J.forEach(t),rOo=i(da),ov=n(da,"P",{});var Ixe=s(ov);tOo=r(Ixe,"The model is set in evaluation mode by default using "),ahe=n(Ixe,"CODE",{});var ngt=s(ahe);aOo=r(ngt,"model.eval()"),ngt.forEach(t),nOo=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(Ixe,"CODE",{});var sgt=s(nhe);sOo=r(sgt,"model.train()"),sgt.forEach(t),Ixe.forEach(t),lOo=i(da),T(rv.$$.fragment,da),da.forEach(t),Js.forEach(t),Yqe=i(f),Ki=n(f,"H2",{class:!0});var oDe=s(Ki);tv=n(oDe,"A",{id:!0,class:!0,href:!0});var lgt=s(tv);she=n(lgt,"SPAN",{});var igt=s(she);T(Iy.$$.fragment,igt),igt.forEach(t),lgt.forEach(t),iOo=i(oDe),lhe=n(oDe,"SPAN",{});var dgt=s(lhe);dOo=r(dgt,"AutoModelForQuestionAnswering"),dgt.forEach(t),oDe.forEach(t),Kqe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(qy.$$.fragment,Ys),cOo=i(Ys),Zi=n(Ys,"P",{});var uZ=s(Zi);fOo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cV=n(uZ,"A",{href:!0});var cgt=s(cV);mOo=r(cgt,"from_pretrained()"),cgt.forEach(t),gOo=r(uZ," class method or the "),fV=n(uZ,"A",{href:!0});var fgt=s(fV);hOo=r(fgt,"from_config()"),fgt.forEach(t),pOo=r(uZ,` class
method.`),uZ.forEach(t),_Oo=i(Ys),Ny=n(Ys,"P",{});var rDe=s(Ny);uOo=r(rDe,"This class cannot be instantiated directly using "),ihe=n(rDe,"CODE",{});var mgt=s(ihe);bOo=r(mgt,"__init__()"),mgt.forEach(t),vOo=r(rDe," (throws an error)."),rDe.forEach(t),FOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var G0=s(mt);T(jy.$$.fragment,G0),TOo=i(G0),dhe=n(G0,"P",{});var ggt=s(dhe);MOo=r(ggt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ggt.forEach(t),EOo=i(G0),ed=n(G0,"P",{});var bZ=s(ed);COo=r(bZ,`Note:
Loading a model from its configuration file does `),che=n(bZ,"STRONG",{});var hgt=s(che);wOo=r(hgt,"not"),hgt.forEach(t),AOo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(bZ,"A",{href:!0});var pgt=s(mV);yOo=r(pgt,"from_pretrained()"),pgt.forEach(t),LOo=r(bZ," to load the model weights."),bZ.forEach(t),xOo=i(G0),T(av.$$.fragment,G0),G0.forEach(t),$Oo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Dy.$$.fragment,ca),kOo=i(ca),fhe=n(ca,"P",{});var _gt=s(fhe);SOo=r(_gt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_gt.forEach(t),ROo=i(ca),qa=n(ca,"P",{});var O0=s(qa);POo=r(O0,"The model class to instantiate is selected based on the "),mhe=n(O0,"CODE",{});var ugt=s(mhe);BOo=r(ugt,"model_type"),ugt.forEach(t),IOo=r(O0,` property of the config object (either
passed as an argument or loaded from `),ghe=n(O0,"CODE",{});var bgt=s(ghe);qOo=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),NOo=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(O0,"CODE",{});var vgt=s(hhe);jOo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),DOo=r(O0,":"),O0.forEach(t),GOo=i(ca),V=n(ca,"UL",{});var X=s(V);nv=n(X,"LI",{});var qxe=s(nv);phe=n(qxe,"STRONG",{});var Fgt=s(phe);OOo=r(Fgt,"albert"),Fgt.forEach(t),VOo=r(qxe," \u2014 "),gV=n(qxe,"A",{href:!0});var Tgt=s(gV);XOo=r(Tgt,"AlbertForQuestionAnswering"),Tgt.forEach(t),zOo=r(qxe," (ALBERT model)"),qxe.forEach(t),WOo=i(X),sv=n(X,"LI",{});var Nxe=s(sv);_he=n(Nxe,"STRONG",{});var Mgt=s(_he);QOo=r(Mgt,"bart"),Mgt.forEach(t),HOo=r(Nxe," \u2014 "),hV=n(Nxe,"A",{href:!0});var Egt=s(hV);UOo=r(Egt,"BartForQuestionAnswering"),Egt.forEach(t),JOo=r(Nxe," (BART model)"),Nxe.forEach(t),YOo=i(X),lv=n(X,"LI",{});var jxe=s(lv);uhe=n(jxe,"STRONG",{});var Cgt=s(uhe);KOo=r(Cgt,"bert"),Cgt.forEach(t),ZOo=r(jxe," \u2014 "),pV=n(jxe,"A",{href:!0});var wgt=s(pV);eVo=r(wgt,"BertForQuestionAnswering"),wgt.forEach(t),oVo=r(jxe," (BERT model)"),jxe.forEach(t),rVo=i(X),iv=n(X,"LI",{});var Dxe=s(iv);bhe=n(Dxe,"STRONG",{});var Agt=s(bhe);tVo=r(Agt,"big_bird"),Agt.forEach(t),aVo=r(Dxe," \u2014 "),_V=n(Dxe,"A",{href:!0});var ygt=s(_V);nVo=r(ygt,"BigBirdForQuestionAnswering"),ygt.forEach(t),sVo=r(Dxe," (BigBird model)"),Dxe.forEach(t),lVo=i(X),dv=n(X,"LI",{});var Gxe=s(dv);vhe=n(Gxe,"STRONG",{});var Lgt=s(vhe);iVo=r(Lgt,"bigbird_pegasus"),Lgt.forEach(t),dVo=r(Gxe," \u2014 "),uV=n(Gxe,"A",{href:!0});var xgt=s(uV);cVo=r(xgt,"BigBirdPegasusForQuestionAnswering"),xgt.forEach(t),fVo=r(Gxe," (BigBirdPegasus model)"),Gxe.forEach(t),mVo=i(X),cv=n(X,"LI",{});var Oxe=s(cv);Fhe=n(Oxe,"STRONG",{});var $gt=s(Fhe);gVo=r($gt,"camembert"),$gt.forEach(t),hVo=r(Oxe," \u2014 "),bV=n(Oxe,"A",{href:!0});var kgt=s(bV);pVo=r(kgt,"CamembertForQuestionAnswering"),kgt.forEach(t),_Vo=r(Oxe," (CamemBERT model)"),Oxe.forEach(t),uVo=i(X),fv=n(X,"LI",{});var Vxe=s(fv);The=n(Vxe,"STRONG",{});var Sgt=s(The);bVo=r(Sgt,"canine"),Sgt.forEach(t),vVo=r(Vxe," \u2014 "),vV=n(Vxe,"A",{href:!0});var Rgt=s(vV);FVo=r(Rgt,"CanineForQuestionAnswering"),Rgt.forEach(t),TVo=r(Vxe," (Canine model)"),Vxe.forEach(t),MVo=i(X),mv=n(X,"LI",{});var Xxe=s(mv);Mhe=n(Xxe,"STRONG",{});var Pgt=s(Mhe);EVo=r(Pgt,"convbert"),Pgt.forEach(t),CVo=r(Xxe," \u2014 "),FV=n(Xxe,"A",{href:!0});var Bgt=s(FV);wVo=r(Bgt,"ConvBertForQuestionAnswering"),Bgt.forEach(t),AVo=r(Xxe," (ConvBERT model)"),Xxe.forEach(t),yVo=i(X),gv=n(X,"LI",{});var zxe=s(gv);Ehe=n(zxe,"STRONG",{});var Igt=s(Ehe);LVo=r(Igt,"data2vec-text"),Igt.forEach(t),xVo=r(zxe," \u2014 "),TV=n(zxe,"A",{href:!0});var qgt=s(TV);$Vo=r(qgt,"Data2VecTextForQuestionAnswering"),qgt.forEach(t),kVo=r(zxe," (Data2VecText model)"),zxe.forEach(t),SVo=i(X),hv=n(X,"LI",{});var Wxe=s(hv);Che=n(Wxe,"STRONG",{});var Ngt=s(Che);RVo=r(Ngt,"deberta"),Ngt.forEach(t),PVo=r(Wxe," \u2014 "),MV=n(Wxe,"A",{href:!0});var jgt=s(MV);BVo=r(jgt,"DebertaForQuestionAnswering"),jgt.forEach(t),IVo=r(Wxe," (DeBERTa model)"),Wxe.forEach(t),qVo=i(X),pv=n(X,"LI",{});var Qxe=s(pv);whe=n(Qxe,"STRONG",{});var Dgt=s(whe);NVo=r(Dgt,"deberta-v2"),Dgt.forEach(t),jVo=r(Qxe," \u2014 "),EV=n(Qxe,"A",{href:!0});var Ggt=s(EV);DVo=r(Ggt,"DebertaV2ForQuestionAnswering"),Ggt.forEach(t),GVo=r(Qxe," (DeBERTa-v2 model)"),Qxe.forEach(t),OVo=i(X),_v=n(X,"LI",{});var Hxe=s(_v);Ahe=n(Hxe,"STRONG",{});var Ogt=s(Ahe);VVo=r(Ogt,"distilbert"),Ogt.forEach(t),XVo=r(Hxe," \u2014 "),CV=n(Hxe,"A",{href:!0});var Vgt=s(CV);zVo=r(Vgt,"DistilBertForQuestionAnswering"),Vgt.forEach(t),WVo=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),QVo=i(X),uv=n(X,"LI",{});var Uxe=s(uv);yhe=n(Uxe,"STRONG",{});var Xgt=s(yhe);HVo=r(Xgt,"electra"),Xgt.forEach(t),UVo=r(Uxe," \u2014 "),wV=n(Uxe,"A",{href:!0});var zgt=s(wV);JVo=r(zgt,"ElectraForQuestionAnswering"),zgt.forEach(t),YVo=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),KVo=i(X),bv=n(X,"LI",{});var Jxe=s(bv);Lhe=n(Jxe,"STRONG",{});var Wgt=s(Lhe);ZVo=r(Wgt,"flaubert"),Wgt.forEach(t),eXo=r(Jxe," \u2014 "),AV=n(Jxe,"A",{href:!0});var Qgt=s(AV);oXo=r(Qgt,"FlaubertForQuestionAnsweringSimple"),Qgt.forEach(t),rXo=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),tXo=i(X),vv=n(X,"LI",{});var Yxe=s(vv);xhe=n(Yxe,"STRONG",{});var Hgt=s(xhe);aXo=r(Hgt,"fnet"),Hgt.forEach(t),nXo=r(Yxe," \u2014 "),yV=n(Yxe,"A",{href:!0});var Ugt=s(yV);sXo=r(Ugt,"FNetForQuestionAnswering"),Ugt.forEach(t),lXo=r(Yxe," (FNet model)"),Yxe.forEach(t),iXo=i(X),Fv=n(X,"LI",{});var Kxe=s(Fv);$he=n(Kxe,"STRONG",{});var Jgt=s($he);dXo=r(Jgt,"funnel"),Jgt.forEach(t),cXo=r(Kxe," \u2014 "),LV=n(Kxe,"A",{href:!0});var Ygt=s(LV);fXo=r(Ygt,"FunnelForQuestionAnswering"),Ygt.forEach(t),mXo=r(Kxe," (Funnel Transformer model)"),Kxe.forEach(t),gXo=i(X),Tv=n(X,"LI",{});var Zxe=s(Tv);khe=n(Zxe,"STRONG",{});var Kgt=s(khe);hXo=r(Kgt,"gptj"),Kgt.forEach(t),pXo=r(Zxe," \u2014 "),xV=n(Zxe,"A",{href:!0});var Zgt=s(xV);_Xo=r(Zgt,"GPTJForQuestionAnswering"),Zgt.forEach(t),uXo=r(Zxe," (GPT-J model)"),Zxe.forEach(t),bXo=i(X),Mv=n(X,"LI",{});var e$e=s(Mv);She=n(e$e,"STRONG",{});var eht=s(She);vXo=r(eht,"ibert"),eht.forEach(t),FXo=r(e$e," \u2014 "),$V=n(e$e,"A",{href:!0});var oht=s($V);TXo=r(oht,"IBertForQuestionAnswering"),oht.forEach(t),MXo=r(e$e," (I-BERT model)"),e$e.forEach(t),EXo=i(X),Ev=n(X,"LI",{});var o$e=s(Ev);Rhe=n(o$e,"STRONG",{});var rht=s(Rhe);CXo=r(rht,"layoutlmv2"),rht.forEach(t),wXo=r(o$e," \u2014 "),kV=n(o$e,"A",{href:!0});var tht=s(kV);AXo=r(tht,"LayoutLMv2ForQuestionAnswering"),tht.forEach(t),yXo=r(o$e," (LayoutLMv2 model)"),o$e.forEach(t),LXo=i(X),Cv=n(X,"LI",{});var r$e=s(Cv);Phe=n(r$e,"STRONG",{});var aht=s(Phe);xXo=r(aht,"led"),aht.forEach(t),$Xo=r(r$e," \u2014 "),SV=n(r$e,"A",{href:!0});var nht=s(SV);kXo=r(nht,"LEDForQuestionAnswering"),nht.forEach(t),SXo=r(r$e," (LED model)"),r$e.forEach(t),RXo=i(X),wv=n(X,"LI",{});var t$e=s(wv);Bhe=n(t$e,"STRONG",{});var sht=s(Bhe);PXo=r(sht,"longformer"),sht.forEach(t),BXo=r(t$e," \u2014 "),RV=n(t$e,"A",{href:!0});var lht=s(RV);IXo=r(lht,"LongformerForQuestionAnswering"),lht.forEach(t),qXo=r(t$e," (Longformer model)"),t$e.forEach(t),NXo=i(X),Av=n(X,"LI",{});var a$e=s(Av);Ihe=n(a$e,"STRONG",{});var iht=s(Ihe);jXo=r(iht,"lxmert"),iht.forEach(t),DXo=r(a$e," \u2014 "),PV=n(a$e,"A",{href:!0});var dht=s(PV);GXo=r(dht,"LxmertForQuestionAnswering"),dht.forEach(t),OXo=r(a$e," (LXMERT model)"),a$e.forEach(t),VXo=i(X),yv=n(X,"LI",{});var n$e=s(yv);qhe=n(n$e,"STRONG",{});var cht=s(qhe);XXo=r(cht,"mbart"),cht.forEach(t),zXo=r(n$e," \u2014 "),BV=n(n$e,"A",{href:!0});var fht=s(BV);WXo=r(fht,"MBartForQuestionAnswering"),fht.forEach(t),QXo=r(n$e," (mBART model)"),n$e.forEach(t),HXo=i(X),Lv=n(X,"LI",{});var s$e=s(Lv);Nhe=n(s$e,"STRONG",{});var mht=s(Nhe);UXo=r(mht,"megatron-bert"),mht.forEach(t),JXo=r(s$e," \u2014 "),IV=n(s$e,"A",{href:!0});var ght=s(IV);YXo=r(ght,"MegatronBertForQuestionAnswering"),ght.forEach(t),KXo=r(s$e," (MegatronBert model)"),s$e.forEach(t),ZXo=i(X),xv=n(X,"LI",{});var l$e=s(xv);jhe=n(l$e,"STRONG",{});var hht=s(jhe);ezo=r(hht,"mobilebert"),hht.forEach(t),ozo=r(l$e," \u2014 "),qV=n(l$e,"A",{href:!0});var pht=s(qV);rzo=r(pht,"MobileBertForQuestionAnswering"),pht.forEach(t),tzo=r(l$e," (MobileBERT model)"),l$e.forEach(t),azo=i(X),$v=n(X,"LI",{});var i$e=s($v);Dhe=n(i$e,"STRONG",{});var _ht=s(Dhe);nzo=r(_ht,"mpnet"),_ht.forEach(t),szo=r(i$e," \u2014 "),NV=n(i$e,"A",{href:!0});var uht=s(NV);lzo=r(uht,"MPNetForQuestionAnswering"),uht.forEach(t),izo=r(i$e," (MPNet model)"),i$e.forEach(t),dzo=i(X),kv=n(X,"LI",{});var d$e=s(kv);Ghe=n(d$e,"STRONG",{});var bht=s(Ghe);czo=r(bht,"nystromformer"),bht.forEach(t),fzo=r(d$e," \u2014 "),jV=n(d$e,"A",{href:!0});var vht=s(jV);mzo=r(vht,"NystromformerForQuestionAnswering"),vht.forEach(t),gzo=r(d$e," (Nystromformer model)"),d$e.forEach(t),hzo=i(X),Sv=n(X,"LI",{});var c$e=s(Sv);Ohe=n(c$e,"STRONG",{});var Fht=s(Ohe);pzo=r(Fht,"qdqbert"),Fht.forEach(t),_zo=r(c$e," \u2014 "),DV=n(c$e,"A",{href:!0});var Tht=s(DV);uzo=r(Tht,"QDQBertForQuestionAnswering"),Tht.forEach(t),bzo=r(c$e," (QDQBert model)"),c$e.forEach(t),vzo=i(X),Rv=n(X,"LI",{});var f$e=s(Rv);Vhe=n(f$e,"STRONG",{});var Mht=s(Vhe);Fzo=r(Mht,"reformer"),Mht.forEach(t),Tzo=r(f$e," \u2014 "),GV=n(f$e,"A",{href:!0});var Eht=s(GV);Mzo=r(Eht,"ReformerForQuestionAnswering"),Eht.forEach(t),Ezo=r(f$e," (Reformer model)"),f$e.forEach(t),Czo=i(X),Pv=n(X,"LI",{});var m$e=s(Pv);Xhe=n(m$e,"STRONG",{});var Cht=s(Xhe);wzo=r(Cht,"rembert"),Cht.forEach(t),Azo=r(m$e," \u2014 "),OV=n(m$e,"A",{href:!0});var wht=s(OV);yzo=r(wht,"RemBertForQuestionAnswering"),wht.forEach(t),Lzo=r(m$e," (RemBERT model)"),m$e.forEach(t),xzo=i(X),Bv=n(X,"LI",{});var g$e=s(Bv);zhe=n(g$e,"STRONG",{});var Aht=s(zhe);$zo=r(Aht,"roberta"),Aht.forEach(t),kzo=r(g$e," \u2014 "),VV=n(g$e,"A",{href:!0});var yht=s(VV);Szo=r(yht,"RobertaForQuestionAnswering"),yht.forEach(t),Rzo=r(g$e," (RoBERTa model)"),g$e.forEach(t),Pzo=i(X),Iv=n(X,"LI",{});var h$e=s(Iv);Whe=n(h$e,"STRONG",{});var Lht=s(Whe);Bzo=r(Lht,"roformer"),Lht.forEach(t),Izo=r(h$e," \u2014 "),XV=n(h$e,"A",{href:!0});var xht=s(XV);qzo=r(xht,"RoFormerForQuestionAnswering"),xht.forEach(t),Nzo=r(h$e," (RoFormer model)"),h$e.forEach(t),jzo=i(X),qv=n(X,"LI",{});var p$e=s(qv);Qhe=n(p$e,"STRONG",{});var $ht=s(Qhe);Dzo=r($ht,"splinter"),$ht.forEach(t),Gzo=r(p$e," \u2014 "),zV=n(p$e,"A",{href:!0});var kht=s(zV);Ozo=r(kht,"SplinterForQuestionAnswering"),kht.forEach(t),Vzo=r(p$e," (Splinter model)"),p$e.forEach(t),Xzo=i(X),Nv=n(X,"LI",{});var _$e=s(Nv);Hhe=n(_$e,"STRONG",{});var Sht=s(Hhe);zzo=r(Sht,"squeezebert"),Sht.forEach(t),Wzo=r(_$e," \u2014 "),WV=n(_$e,"A",{href:!0});var Rht=s(WV);Qzo=r(Rht,"SqueezeBertForQuestionAnswering"),Rht.forEach(t),Hzo=r(_$e," (SqueezeBERT model)"),_$e.forEach(t),Uzo=i(X),jv=n(X,"LI",{});var u$e=s(jv);Uhe=n(u$e,"STRONG",{});var Pht=s(Uhe);Jzo=r(Pht,"xlm"),Pht.forEach(t),Yzo=r(u$e," \u2014 "),QV=n(u$e,"A",{href:!0});var Bht=s(QV);Kzo=r(Bht,"XLMForQuestionAnsweringSimple"),Bht.forEach(t),Zzo=r(u$e," (XLM model)"),u$e.forEach(t),eWo=i(X),Dv=n(X,"LI",{});var b$e=s(Dv);Jhe=n(b$e,"STRONG",{});var Iht=s(Jhe);oWo=r(Iht,"xlm-roberta"),Iht.forEach(t),rWo=r(b$e," \u2014 "),HV=n(b$e,"A",{href:!0});var qht=s(HV);tWo=r(qht,"XLMRobertaForQuestionAnswering"),qht.forEach(t),aWo=r(b$e," (XLM-RoBERTa model)"),b$e.forEach(t),nWo=i(X),Gv=n(X,"LI",{});var v$e=s(Gv);Yhe=n(v$e,"STRONG",{});var Nht=s(Yhe);sWo=r(Nht,"xlm-roberta-xl"),Nht.forEach(t),lWo=r(v$e," \u2014 "),UV=n(v$e,"A",{href:!0});var jht=s(UV);iWo=r(jht,"XLMRobertaXLForQuestionAnswering"),jht.forEach(t),dWo=r(v$e," (XLM-RoBERTa-XL model)"),v$e.forEach(t),cWo=i(X),Ov=n(X,"LI",{});var F$e=s(Ov);Khe=n(F$e,"STRONG",{});var Dht=s(Khe);fWo=r(Dht,"xlnet"),Dht.forEach(t),mWo=r(F$e," \u2014 "),JV=n(F$e,"A",{href:!0});var Ght=s(JV);gWo=r(Ght,"XLNetForQuestionAnsweringSimple"),Ght.forEach(t),hWo=r(F$e," (XLNet model)"),F$e.forEach(t),pWo=i(X),Vv=n(X,"LI",{});var T$e=s(Vv);Zhe=n(T$e,"STRONG",{});var Oht=s(Zhe);_Wo=r(Oht,"yoso"),Oht.forEach(t),uWo=r(T$e," \u2014 "),YV=n(T$e,"A",{href:!0});var Vht=s(YV);bWo=r(Vht,"YosoForQuestionAnswering"),Vht.forEach(t),vWo=r(T$e," (YOSO model)"),T$e.forEach(t),X.forEach(t),FWo=i(ca),Xv=n(ca,"P",{});var M$e=s(Xv);TWo=r(M$e,"The model is set in evaluation mode by default using "),epe=n(M$e,"CODE",{});var Xht=s(epe);MWo=r(Xht,"model.eval()"),Xht.forEach(t),EWo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(M$e,"CODE",{});var zht=s(ope);CWo=r(zht,"model.train()"),zht.forEach(t),M$e.forEach(t),wWo=i(ca),T(zv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Zqe=i(f),od=n(f,"H2",{class:!0});var tDe=s(od);Wv=n(tDe,"A",{id:!0,class:!0,href:!0});var Wht=s(Wv);rpe=n(Wht,"SPAN",{});var Qht=s(rpe);T(Gy.$$.fragment,Qht),Qht.forEach(t),Wht.forEach(t),AWo=i(tDe),tpe=n(tDe,"SPAN",{});var Hht=s(tpe);yWo=r(Hht,"AutoModelForTableQuestionAnswering"),Hht.forEach(t),tDe.forEach(t),eNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Oy.$$.fragment,Ks),LWo=i(Ks),rd=n(Ks,"P",{});var vZ=s(rd);xWo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KV=n(vZ,"A",{href:!0});var Uht=s(KV);$Wo=r(Uht,"from_pretrained()"),Uht.forEach(t),kWo=r(vZ," class method or the "),ZV=n(vZ,"A",{href:!0});var Jht=s(ZV);SWo=r(Jht,"from_config()"),Jht.forEach(t),RWo=r(vZ,` class
method.`),vZ.forEach(t),PWo=i(Ks),Vy=n(Ks,"P",{});var aDe=s(Vy);BWo=r(aDe,"This class cannot be instantiated directly using "),ape=n(aDe,"CODE",{});var Yht=s(ape);IWo=r(Yht,"__init__()"),Yht.forEach(t),qWo=r(aDe," (throws an error)."),aDe.forEach(t),NWo=i(Ks),gt=n(Ks,"DIV",{class:!0});var V0=s(gt);T(Xy.$$.fragment,V0),jWo=i(V0),npe=n(V0,"P",{});var Kht=s(npe);DWo=r(Kht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kht.forEach(t),GWo=i(V0),td=n(V0,"P",{});var FZ=s(td);OWo=r(FZ,`Note:
Loading a model from its configuration file does `),spe=n(FZ,"STRONG",{});var Zht=s(spe);VWo=r(Zht,"not"),Zht.forEach(t),XWo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(FZ,"A",{href:!0});var ept=s(eX);zWo=r(ept,"from_pretrained()"),ept.forEach(t),WWo=r(FZ," to load the model weights."),FZ.forEach(t),QWo=i(V0),T(Qv.$$.fragment,V0),V0.forEach(t),HWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(zy.$$.fragment,fa),UWo=i(fa),lpe=n(fa,"P",{});var opt=s(lpe);JWo=r(opt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),opt.forEach(t),YWo=i(fa),Na=n(fa,"P",{});var X0=s(Na);KWo=r(X0,"The model class to instantiate is selected based on the "),ipe=n(X0,"CODE",{});var rpt=s(ipe);ZWo=r(rpt,"model_type"),rpt.forEach(t),eQo=r(X0,` property of the config object (either
passed as an argument or loaded from `),dpe=n(X0,"CODE",{});var tpt=s(dpe);oQo=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),rQo=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(X0,"CODE",{});var apt=s(cpe);tQo=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),aQo=r(X0,":"),X0.forEach(t),nQo=i(fa),fpe=n(fa,"UL",{});var npt=s(fpe);Hv=n(npt,"LI",{});var E$e=s(Hv);mpe=n(E$e,"STRONG",{});var spt=s(mpe);sQo=r(spt,"tapas"),spt.forEach(t),lQo=r(E$e," \u2014 "),oX=n(E$e,"A",{href:!0});var lpt=s(oX);iQo=r(lpt,"TapasForQuestionAnswering"),lpt.forEach(t),dQo=r(E$e," (TAPAS model)"),E$e.forEach(t),npt.forEach(t),cQo=i(fa),Uv=n(fa,"P",{});var C$e=s(Uv);fQo=r(C$e,"The model is set in evaluation mode by default using "),gpe=n(C$e,"CODE",{});var ipt=s(gpe);mQo=r(ipt,"model.eval()"),ipt.forEach(t),gQo=r(C$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(C$e,"CODE",{});var dpt=s(hpe);hQo=r(dpt,"model.train()"),dpt.forEach(t),C$e.forEach(t),pQo=i(fa),T(Jv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),oNe=i(f),ad=n(f,"H2",{class:!0});var nDe=s(ad);Yv=n(nDe,"A",{id:!0,class:!0,href:!0});var cpt=s(Yv);ppe=n(cpt,"SPAN",{});var fpt=s(ppe);T(Wy.$$.fragment,fpt),fpt.forEach(t),cpt.forEach(t),_Qo=i(nDe),_pe=n(nDe,"SPAN",{});var mpt=s(_pe);uQo=r(mpt,"AutoModelForImageClassification"),mpt.forEach(t),nDe.forEach(t),rNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Qy.$$.fragment,Zs),bQo=i(Zs),nd=n(Zs,"P",{});var TZ=s(nd);vQo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rX=n(TZ,"A",{href:!0});var gpt=s(rX);FQo=r(gpt,"from_pretrained()"),gpt.forEach(t),TQo=r(TZ," class method or the "),tX=n(TZ,"A",{href:!0});var hpt=s(tX);MQo=r(hpt,"from_config()"),hpt.forEach(t),EQo=r(TZ,` class
method.`),TZ.forEach(t),CQo=i(Zs),Hy=n(Zs,"P",{});var sDe=s(Hy);wQo=r(sDe,"This class cannot be instantiated directly using "),upe=n(sDe,"CODE",{});var ppt=s(upe);AQo=r(ppt,"__init__()"),ppt.forEach(t),yQo=r(sDe," (throws an error)."),sDe.forEach(t),LQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var z0=s(ht);T(Uy.$$.fragment,z0),xQo=i(z0),bpe=n(z0,"P",{});var _pt=s(bpe);$Qo=r(_pt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_pt.forEach(t),kQo=i(z0),sd=n(z0,"P",{});var MZ=s(sd);SQo=r(MZ,`Note:
Loading a model from its configuration file does `),vpe=n(MZ,"STRONG",{});var upt=s(vpe);RQo=r(upt,"not"),upt.forEach(t),PQo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(MZ,"A",{href:!0});var bpt=s(aX);BQo=r(bpt,"from_pretrained()"),bpt.forEach(t),IQo=r(MZ," to load the model weights."),MZ.forEach(t),qQo=i(z0),T(Kv.$$.fragment,z0),z0.forEach(t),NQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Jy.$$.fragment,ma),jQo=i(ma),Fpe=n(ma,"P",{});var vpt=s(Fpe);DQo=r(vpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vpt.forEach(t),GQo=i(ma),ja=n(ma,"P",{});var W0=s(ja);OQo=r(W0,"The model class to instantiate is selected based on the "),Tpe=n(W0,"CODE",{});var Fpt=s(Tpe);VQo=r(Fpt,"model_type"),Fpt.forEach(t),XQo=r(W0,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(W0,"CODE",{});var Tpt=s(Mpe);zQo=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),WQo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(W0,"CODE",{});var Mpt=s(Epe);QQo=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),HQo=r(W0,":"),W0.forEach(t),UQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);Zv=n(Te,"LI",{});var w$e=s(Zv);Cpe=n(w$e,"STRONG",{});var Ept=s(Cpe);JQo=r(Ept,"beit"),Ept.forEach(t),YQo=r(w$e," \u2014 "),nX=n(w$e,"A",{href:!0});var Cpt=s(nX);KQo=r(Cpt,"BeitForImageClassification"),Cpt.forEach(t),ZQo=r(w$e," (BEiT model)"),w$e.forEach(t),eHo=i(Te),eF=n(Te,"LI",{});var A$e=s(eF);wpe=n(A$e,"STRONG",{});var wpt=s(wpe);oHo=r(wpt,"convnext"),wpt.forEach(t),rHo=r(A$e," \u2014 "),sX=n(A$e,"A",{href:!0});var Apt=s(sX);tHo=r(Apt,"ConvNextForImageClassification"),Apt.forEach(t),aHo=r(A$e," (ConvNext model)"),A$e.forEach(t),nHo=i(Te),oF=n(Te,"LI",{});var y$e=s(oF);Ape=n(y$e,"STRONG",{});var ypt=s(Ape);sHo=r(ypt,"cvt"),ypt.forEach(t),lHo=r(y$e," \u2014 "),lX=n(y$e,"A",{href:!0});var Lpt=s(lX);iHo=r(Lpt,"CvtForImageClassification"),Lpt.forEach(t),dHo=r(y$e," (CvT model)"),y$e.forEach(t),cHo=i(Te),rF=n(Te,"LI",{});var L$e=s(rF);ype=n(L$e,"STRONG",{});var xpt=s(ype);fHo=r(xpt,"data2vec-vision"),xpt.forEach(t),mHo=r(L$e," \u2014 "),iX=n(L$e,"A",{href:!0});var $pt=s(iX);gHo=r($pt,"Data2VecVisionForImageClassification"),$pt.forEach(t),hHo=r(L$e," (Data2VecVision model)"),L$e.forEach(t),pHo=i(Te),Bs=n(Te,"LI",{});var B$=s(Bs);Lpe=n(B$,"STRONG",{});var kpt=s(Lpe);_Ho=r(kpt,"deit"),kpt.forEach(t),uHo=r(B$," \u2014 "),dX=n(B$,"A",{href:!0});var Spt=s(dX);bHo=r(Spt,"DeiTForImageClassification"),Spt.forEach(t),vHo=r(B$," or "),cX=n(B$,"A",{href:!0});var Rpt=s(cX);FHo=r(Rpt,"DeiTForImageClassificationWithTeacher"),Rpt.forEach(t),THo=r(B$," (DeiT model)"),B$.forEach(t),MHo=i(Te),tF=n(Te,"LI",{});var x$e=s(tF);xpe=n(x$e,"STRONG",{});var Ppt=s(xpe);EHo=r(Ppt,"imagegpt"),Ppt.forEach(t),CHo=r(x$e," \u2014 "),fX=n(x$e,"A",{href:!0});var Bpt=s(fX);wHo=r(Bpt,"ImageGPTForImageClassification"),Bpt.forEach(t),AHo=r(x$e," (ImageGPT model)"),x$e.forEach(t),yHo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);$pe=n(hf,"STRONG",{});var Ipt=s($pe);LHo=r(Ipt,"perceiver"),Ipt.forEach(t),xHo=r(hf," \u2014 "),mX=n(hf,"A",{href:!0});var qpt=s(mX);$Ho=r(qpt,"PerceiverForImageClassificationLearned"),qpt.forEach(t),kHo=r(hf," or "),gX=n(hf,"A",{href:!0});var Npt=s(gX);SHo=r(Npt,"PerceiverForImageClassificationFourier"),Npt.forEach(t),RHo=r(hf," or "),hX=n(hf,"A",{href:!0});var jpt=s(hX);PHo=r(jpt,"PerceiverForImageClassificationConvProcessing"),jpt.forEach(t),BHo=r(hf," (Perceiver model)"),hf.forEach(t),IHo=i(Te),aF=n(Te,"LI",{});var $$e=s(aF);kpe=n($$e,"STRONG",{});var Dpt=s(kpe);qHo=r(Dpt,"poolformer"),Dpt.forEach(t),NHo=r($$e," \u2014 "),pX=n($$e,"A",{href:!0});var Gpt=s(pX);jHo=r(Gpt,"PoolFormerForImageClassification"),Gpt.forEach(t),DHo=r($$e," (PoolFormer model)"),$$e.forEach(t),GHo=i(Te),nF=n(Te,"LI",{});var k$e=s(nF);Spe=n(k$e,"STRONG",{});var Opt=s(Spe);OHo=r(Opt,"regnet"),Opt.forEach(t),VHo=r(k$e," \u2014 "),_X=n(k$e,"A",{href:!0});var Vpt=s(_X);XHo=r(Vpt,"RegNetForImageClassification"),Vpt.forEach(t),zHo=r(k$e," (RegNet model)"),k$e.forEach(t),WHo=i(Te),sF=n(Te,"LI",{});var S$e=s(sF);Rpe=n(S$e,"STRONG",{});var Xpt=s(Rpe);QHo=r(Xpt,"resnet"),Xpt.forEach(t),HHo=r(S$e," \u2014 "),uX=n(S$e,"A",{href:!0});var zpt=s(uX);UHo=r(zpt,"ResNetForImageClassification"),zpt.forEach(t),JHo=r(S$e," (ResNet model)"),S$e.forEach(t),YHo=i(Te),lF=n(Te,"LI",{});var R$e=s(lF);Ppe=n(R$e,"STRONG",{});var Wpt=s(Ppe);KHo=r(Wpt,"segformer"),Wpt.forEach(t),ZHo=r(R$e," \u2014 "),bX=n(R$e,"A",{href:!0});var Qpt=s(bX);eUo=r(Qpt,"SegformerForImageClassification"),Qpt.forEach(t),oUo=r(R$e," (SegFormer model)"),R$e.forEach(t),rUo=i(Te),iF=n(Te,"LI",{});var P$e=s(iF);Bpe=n(P$e,"STRONG",{});var Hpt=s(Bpe);tUo=r(Hpt,"swin"),Hpt.forEach(t),aUo=r(P$e," \u2014 "),vX=n(P$e,"A",{href:!0});var Upt=s(vX);nUo=r(Upt,"SwinForImageClassification"),Upt.forEach(t),sUo=r(P$e," (Swin model)"),P$e.forEach(t),lUo=i(Te),dF=n(Te,"LI",{});var B$e=s(dF);Ipe=n(B$e,"STRONG",{});var Jpt=s(Ipe);iUo=r(Jpt,"van"),Jpt.forEach(t),dUo=r(B$e," \u2014 "),FX=n(B$e,"A",{href:!0});var Ypt=s(FX);cUo=r(Ypt,"VanForImageClassification"),Ypt.forEach(t),fUo=r(B$e," (VAN model)"),B$e.forEach(t),mUo=i(Te),cF=n(Te,"LI",{});var I$e=s(cF);qpe=n(I$e,"STRONG",{});var Kpt=s(qpe);gUo=r(Kpt,"vit"),Kpt.forEach(t),hUo=r(I$e," \u2014 "),TX=n(I$e,"A",{href:!0});var Zpt=s(TX);pUo=r(Zpt,"ViTForImageClassification"),Zpt.forEach(t),_Uo=r(I$e," (ViT model)"),I$e.forEach(t),Te.forEach(t),uUo=i(ma),fF=n(ma,"P",{});var q$e=s(fF);bUo=r(q$e,"The model is set in evaluation mode by default using "),Npe=n(q$e,"CODE",{});var e_t=s(Npe);vUo=r(e_t,"model.eval()"),e_t.forEach(t),FUo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(q$e,"CODE",{});var o_t=s(jpe);TUo=r(o_t,"model.train()"),o_t.forEach(t),q$e.forEach(t),MUo=i(ma),T(mF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),tNe=i(f),ld=n(f,"H2",{class:!0});var lDe=s(ld);gF=n(lDe,"A",{id:!0,class:!0,href:!0});var r_t=s(gF);Dpe=n(r_t,"SPAN",{});var t_t=s(Dpe);T(Yy.$$.fragment,t_t),t_t.forEach(t),r_t.forEach(t),EUo=i(lDe),Gpe=n(lDe,"SPAN",{});var a_t=s(Gpe);CUo=r(a_t,"AutoModelForVision2Seq"),a_t.forEach(t),lDe.forEach(t),aNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(Ky.$$.fragment,el),wUo=i(el),id=n(el,"P",{});var EZ=s(id);AUo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MX=n(EZ,"A",{href:!0});var n_t=s(MX);yUo=r(n_t,"from_pretrained()"),n_t.forEach(t),LUo=r(EZ," class method or the "),EX=n(EZ,"A",{href:!0});var s_t=s(EX);xUo=r(s_t,"from_config()"),s_t.forEach(t),$Uo=r(EZ,` class
method.`),EZ.forEach(t),kUo=i(el),Zy=n(el,"P",{});var iDe=s(Zy);SUo=r(iDe,"This class cannot be instantiated directly using "),Ope=n(iDe,"CODE",{});var l_t=s(Ope);RUo=r(l_t,"__init__()"),l_t.forEach(t),PUo=r(iDe," (throws an error)."),iDe.forEach(t),BUo=i(el),_t=n(el,"DIV",{class:!0});var Q0=s(_t);T(eL.$$.fragment,Q0),IUo=i(Q0),Vpe=n(Q0,"P",{});var i_t=s(Vpe);qUo=r(i_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i_t.forEach(t),NUo=i(Q0),dd=n(Q0,"P",{});var CZ=s(dd);jUo=r(CZ,`Note:
Loading a model from its configuration file does `),Xpe=n(CZ,"STRONG",{});var d_t=s(Xpe);DUo=r(d_t,"not"),d_t.forEach(t),GUo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(CZ,"A",{href:!0});var c_t=s(CX);OUo=r(c_t,"from_pretrained()"),c_t.forEach(t),VUo=r(CZ," to load the model weights."),CZ.forEach(t),XUo=i(Q0),T(hF.$$.fragment,Q0),Q0.forEach(t),zUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(oL.$$.fragment,ga),WUo=i(ga),zpe=n(ga,"P",{});var f_t=s(zpe);QUo=r(f_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),f_t.forEach(t),HUo=i(ga),Da=n(ga,"P",{});var H0=s(Da);UUo=r(H0,"The model class to instantiate is selected based on the "),Wpe=n(H0,"CODE",{});var m_t=s(Wpe);JUo=r(m_t,"model_type"),m_t.forEach(t),YUo=r(H0,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(H0,"CODE",{});var g_t=s(Qpe);KUo=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),ZUo=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(H0,"CODE",{});var h_t=s(Hpe);eJo=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),oJo=r(H0,":"),H0.forEach(t),rJo=i(ga),Upe=n(ga,"UL",{});var p_t=s(Upe);pF=n(p_t,"LI",{});var N$e=s(pF);Jpe=n(N$e,"STRONG",{});var __t=s(Jpe);tJo=r(__t,"vision-encoder-decoder"),__t.forEach(t),aJo=r(N$e," \u2014 "),wX=n(N$e,"A",{href:!0});var u_t=s(wX);nJo=r(u_t,"VisionEncoderDecoderModel"),u_t.forEach(t),sJo=r(N$e," (Vision Encoder decoder model)"),N$e.forEach(t),p_t.forEach(t),lJo=i(ga),_F=n(ga,"P",{});var j$e=s(_F);iJo=r(j$e,"The model is set in evaluation mode by default using "),Ype=n(j$e,"CODE",{});var b_t=s(Ype);dJo=r(b_t,"model.eval()"),b_t.forEach(t),cJo=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(j$e,"CODE",{});var v_t=s(Kpe);fJo=r(v_t,"model.train()"),v_t.forEach(t),j$e.forEach(t),mJo=i(ga),T(uF.$$.fragment,ga),ga.forEach(t),el.forEach(t),nNe=i(f),cd=n(f,"H2",{class:!0});var dDe=s(cd);bF=n(dDe,"A",{id:!0,class:!0,href:!0});var F_t=s(bF);Zpe=n(F_t,"SPAN",{});var T_t=s(Zpe);T(rL.$$.fragment,T_t),T_t.forEach(t),F_t.forEach(t),gJo=i(dDe),e_e=n(dDe,"SPAN",{});var M_t=s(e_e);hJo=r(M_t,"AutoModelForAudioClassification"),M_t.forEach(t),dDe.forEach(t),sNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(tL.$$.fragment,ol),pJo=i(ol),fd=n(ol,"P",{});var wZ=s(fd);_Jo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),AX=n(wZ,"A",{href:!0});var E_t=s(AX);uJo=r(E_t,"from_pretrained()"),E_t.forEach(t),bJo=r(wZ," class method or the "),yX=n(wZ,"A",{href:!0});var C_t=s(yX);vJo=r(C_t,"from_config()"),C_t.forEach(t),FJo=r(wZ,` class
method.`),wZ.forEach(t),TJo=i(ol),aL=n(ol,"P",{});var cDe=s(aL);MJo=r(cDe,"This class cannot be instantiated directly using "),o_e=n(cDe,"CODE",{});var w_t=s(o_e);EJo=r(w_t,"__init__()"),w_t.forEach(t),CJo=r(cDe," (throws an error)."),cDe.forEach(t),wJo=i(ol),ut=n(ol,"DIV",{class:!0});var U0=s(ut);T(nL.$$.fragment,U0),AJo=i(U0),r_e=n(U0,"P",{});var A_t=s(r_e);yJo=r(A_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),A_t.forEach(t),LJo=i(U0),md=n(U0,"P",{});var AZ=s(md);xJo=r(AZ,`Note:
Loading a model from its configuration file does `),t_e=n(AZ,"STRONG",{});var y_t=s(t_e);$Jo=r(y_t,"not"),y_t.forEach(t),kJo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(AZ,"A",{href:!0});var L_t=s(LX);SJo=r(L_t,"from_pretrained()"),L_t.forEach(t),RJo=r(AZ," to load the model weights."),AZ.forEach(t),PJo=i(U0),T(vF.$$.fragment,U0),U0.forEach(t),BJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(sL.$$.fragment,ha),IJo=i(ha),a_e=n(ha,"P",{});var x_t=s(a_e);qJo=r(x_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),x_t.forEach(t),NJo=i(ha),Ga=n(ha,"P",{});var J0=s(Ga);jJo=r(J0,"The model class to instantiate is selected based on the "),n_e=n(J0,"CODE",{});var $_t=s(n_e);DJo=r($_t,"model_type"),$_t.forEach(t),GJo=r(J0,` property of the config object (either
passed as an argument or loaded from `),s_e=n(J0,"CODE",{});var k_t=s(s_e);OJo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),VJo=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(J0,"CODE",{});var S_t=s(l_e);XJo=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),zJo=r(J0,":"),J0.forEach(t),WJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);FF=n(Oe,"LI",{});var D$e=s(FF);i_e=n(D$e,"STRONG",{});var R_t=s(i_e);QJo=r(R_t,"data2vec-audio"),R_t.forEach(t),HJo=r(D$e," \u2014 "),xX=n(D$e,"A",{href:!0});var P_t=s(xX);UJo=r(P_t,"Data2VecAudioForSequenceClassification"),P_t.forEach(t),JJo=r(D$e," (Data2VecAudio model)"),D$e.forEach(t),YJo=i(Oe),TF=n(Oe,"LI",{});var G$e=s(TF);d_e=n(G$e,"STRONG",{});var B_t=s(d_e);KJo=r(B_t,"hubert"),B_t.forEach(t),ZJo=r(G$e," \u2014 "),$X=n(G$e,"A",{href:!0});var I_t=s($X);eYo=r(I_t,"HubertForSequenceClassification"),I_t.forEach(t),oYo=r(G$e," (Hubert model)"),G$e.forEach(t),rYo=i(Oe),MF=n(Oe,"LI",{});var O$e=s(MF);c_e=n(O$e,"STRONG",{});var q_t=s(c_e);tYo=r(q_t,"sew"),q_t.forEach(t),aYo=r(O$e," \u2014 "),kX=n(O$e,"A",{href:!0});var N_t=s(kX);nYo=r(N_t,"SEWForSequenceClassification"),N_t.forEach(t),sYo=r(O$e," (SEW model)"),O$e.forEach(t),lYo=i(Oe),EF=n(Oe,"LI",{});var V$e=s(EF);f_e=n(V$e,"STRONG",{});var j_t=s(f_e);iYo=r(j_t,"sew-d"),j_t.forEach(t),dYo=r(V$e," \u2014 "),SX=n(V$e,"A",{href:!0});var D_t=s(SX);cYo=r(D_t,"SEWDForSequenceClassification"),D_t.forEach(t),fYo=r(V$e," (SEW-D model)"),V$e.forEach(t),mYo=i(Oe),CF=n(Oe,"LI",{});var X$e=s(CF);m_e=n(X$e,"STRONG",{});var G_t=s(m_e);gYo=r(G_t,"unispeech"),G_t.forEach(t),hYo=r(X$e," \u2014 "),RX=n(X$e,"A",{href:!0});var O_t=s(RX);pYo=r(O_t,"UniSpeechForSequenceClassification"),O_t.forEach(t),_Yo=r(X$e," (UniSpeech model)"),X$e.forEach(t),uYo=i(Oe),wF=n(Oe,"LI",{});var z$e=s(wF);g_e=n(z$e,"STRONG",{});var V_t=s(g_e);bYo=r(V_t,"unispeech-sat"),V_t.forEach(t),vYo=r(z$e," \u2014 "),PX=n(z$e,"A",{href:!0});var X_t=s(PX);FYo=r(X_t,"UniSpeechSatForSequenceClassification"),X_t.forEach(t),TYo=r(z$e," (UniSpeechSat model)"),z$e.forEach(t),MYo=i(Oe),AF=n(Oe,"LI",{});var W$e=s(AF);h_e=n(W$e,"STRONG",{});var z_t=s(h_e);EYo=r(z_t,"wav2vec2"),z_t.forEach(t),CYo=r(W$e," \u2014 "),BX=n(W$e,"A",{href:!0});var W_t=s(BX);wYo=r(W_t,"Wav2Vec2ForSequenceClassification"),W_t.forEach(t),AYo=r(W$e," (Wav2Vec2 model)"),W$e.forEach(t),yYo=i(Oe),yF=n(Oe,"LI",{});var Q$e=s(yF);p_e=n(Q$e,"STRONG",{});var Q_t=s(p_e);LYo=r(Q_t,"wav2vec2-conformer"),Q_t.forEach(t),xYo=r(Q$e," \u2014 "),IX=n(Q$e,"A",{href:!0});var H_t=s(IX);$Yo=r(H_t,"Wav2Vec2ConformerForSequenceClassification"),H_t.forEach(t),kYo=r(Q$e," (Wav2Vec2-Conformer model)"),Q$e.forEach(t),SYo=i(Oe),LF=n(Oe,"LI",{});var H$e=s(LF);__e=n(H$e,"STRONG",{});var U_t=s(__e);RYo=r(U_t,"wavlm"),U_t.forEach(t),PYo=r(H$e," \u2014 "),qX=n(H$e,"A",{href:!0});var J_t=s(qX);BYo=r(J_t,"WavLMForSequenceClassification"),J_t.forEach(t),IYo=r(H$e," (WavLM model)"),H$e.forEach(t),Oe.forEach(t),qYo=i(ha),xF=n(ha,"P",{});var U$e=s(xF);NYo=r(U$e,"The model is set in evaluation mode by default using "),u_e=n(U$e,"CODE",{});var Y_t=s(u_e);jYo=r(Y_t,"model.eval()"),Y_t.forEach(t),DYo=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=n(U$e,"CODE",{});var K_t=s(b_e);GYo=r(K_t,"model.train()"),K_t.forEach(t),U$e.forEach(t),OYo=i(ha),T($F.$$.fragment,ha),ha.forEach(t),ol.forEach(t),lNe=i(f),gd=n(f,"H2",{class:!0});var fDe=s(gd);kF=n(fDe,"A",{id:!0,class:!0,href:!0});var Z_t=s(kF);v_e=n(Z_t,"SPAN",{});var eut=s(v_e);T(lL.$$.fragment,eut),eut.forEach(t),Z_t.forEach(t),VYo=i(fDe),F_e=n(fDe,"SPAN",{});var out=s(F_e);XYo=r(out,"AutoModelForAudioFrameClassification"),out.forEach(t),fDe.forEach(t),iNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(iL.$$.fragment,rl),zYo=i(rl),hd=n(rl,"P",{});var yZ=s(hd);WYo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NX=n(yZ,"A",{href:!0});var rut=s(NX);QYo=r(rut,"from_pretrained()"),rut.forEach(t),HYo=r(yZ," class method or the "),jX=n(yZ,"A",{href:!0});var tut=s(jX);UYo=r(tut,"from_config()"),tut.forEach(t),JYo=r(yZ,` class
method.`),yZ.forEach(t),YYo=i(rl),dL=n(rl,"P",{});var mDe=s(dL);KYo=r(mDe,"This class cannot be instantiated directly using "),T_e=n(mDe,"CODE",{});var aut=s(T_e);ZYo=r(aut,"__init__()"),aut.forEach(t),eKo=r(mDe," (throws an error)."),mDe.forEach(t),oKo=i(rl),bt=n(rl,"DIV",{class:!0});var Y0=s(bt);T(cL.$$.fragment,Y0),rKo=i(Y0),M_e=n(Y0,"P",{});var nut=s(M_e);tKo=r(nut,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nut.forEach(t),aKo=i(Y0),pd=n(Y0,"P",{});var LZ=s(pd);nKo=r(LZ,`Note:
Loading a model from its configuration file does `),E_e=n(LZ,"STRONG",{});var sut=s(E_e);sKo=r(sut,"not"),sut.forEach(t),lKo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(LZ,"A",{href:!0});var lut=s(DX);iKo=r(lut,"from_pretrained()"),lut.forEach(t),dKo=r(LZ," to load the model weights."),LZ.forEach(t),cKo=i(Y0),T(SF.$$.fragment,Y0),Y0.forEach(t),fKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(fL.$$.fragment,pa),mKo=i(pa),C_e=n(pa,"P",{});var iut=s(C_e);gKo=r(iut,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),iut.forEach(t),hKo=i(pa),Oa=n(pa,"P",{});var K0=s(Oa);pKo=r(K0,"The model class to instantiate is selected based on the "),w_e=n(K0,"CODE",{});var dut=s(w_e);_Ko=r(dut,"model_type"),dut.forEach(t),uKo=r(K0,` property of the config object (either
passed as an argument or loaded from `),A_e=n(K0,"CODE",{});var cut=s(A_e);bKo=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),vKo=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(K0,"CODE",{});var fut=s(y_e);FKo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),TKo=r(K0,":"),K0.forEach(t),MKo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);RF=n(tl,"LI",{});var J$e=s(RF);L_e=n(J$e,"STRONG",{});var mut=s(L_e);EKo=r(mut,"data2vec-audio"),mut.forEach(t),CKo=r(J$e," \u2014 "),GX=n(J$e,"A",{href:!0});var gut=s(GX);wKo=r(gut,"Data2VecAudioForAudioFrameClassification"),gut.forEach(t),AKo=r(J$e," (Data2VecAudio model)"),J$e.forEach(t),yKo=i(tl),PF=n(tl,"LI",{});var Y$e=s(PF);x_e=n(Y$e,"STRONG",{});var hut=s(x_e);LKo=r(hut,"unispeech-sat"),hut.forEach(t),xKo=r(Y$e," \u2014 "),OX=n(Y$e,"A",{href:!0});var put=s(OX);$Ko=r(put,"UniSpeechSatForAudioFrameClassification"),put.forEach(t),kKo=r(Y$e," (UniSpeechSat model)"),Y$e.forEach(t),SKo=i(tl),BF=n(tl,"LI",{});var K$e=s(BF);$_e=n(K$e,"STRONG",{});var _ut=s($_e);RKo=r(_ut,"wav2vec2"),_ut.forEach(t),PKo=r(K$e," \u2014 "),VX=n(K$e,"A",{href:!0});var uut=s(VX);BKo=r(uut,"Wav2Vec2ForAudioFrameClassification"),uut.forEach(t),IKo=r(K$e," (Wav2Vec2 model)"),K$e.forEach(t),qKo=i(tl),IF=n(tl,"LI",{});var Z$e=s(IF);k_e=n(Z$e,"STRONG",{});var but=s(k_e);NKo=r(but,"wav2vec2-conformer"),but.forEach(t),jKo=r(Z$e," \u2014 "),XX=n(Z$e,"A",{href:!0});var vut=s(XX);DKo=r(vut,"Wav2Vec2ConformerForAudioFrameClassification"),vut.forEach(t),GKo=r(Z$e," (Wav2Vec2-Conformer model)"),Z$e.forEach(t),OKo=i(tl),qF=n(tl,"LI",{});var eke=s(qF);S_e=n(eke,"STRONG",{});var Fut=s(S_e);VKo=r(Fut,"wavlm"),Fut.forEach(t),XKo=r(eke," \u2014 "),zX=n(eke,"A",{href:!0});var Tut=s(zX);zKo=r(Tut,"WavLMForAudioFrameClassification"),Tut.forEach(t),WKo=r(eke," (WavLM model)"),eke.forEach(t),tl.forEach(t),QKo=i(pa),NF=n(pa,"P",{});var oke=s(NF);HKo=r(oke,"The model is set in evaluation mode by default using "),R_e=n(oke,"CODE",{});var Mut=s(R_e);UKo=r(Mut,"model.eval()"),Mut.forEach(t),JKo=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(oke,"CODE",{});var Eut=s(P_e);YKo=r(Eut,"model.train()"),Eut.forEach(t),oke.forEach(t),KKo=i(pa),T(jF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),dNe=i(f),_d=n(f,"H2",{class:!0});var gDe=s(_d);DF=n(gDe,"A",{id:!0,class:!0,href:!0});var Cut=s(DF);B_e=n(Cut,"SPAN",{});var wut=s(B_e);T(mL.$$.fragment,wut),wut.forEach(t),Cut.forEach(t),ZKo=i(gDe),I_e=n(gDe,"SPAN",{});var Aut=s(I_e);eZo=r(Aut,"AutoModelForCTC"),Aut.forEach(t),gDe.forEach(t),cNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(gL.$$.fragment,al),oZo=i(al),ud=n(al,"P",{});var xZ=s(ud);rZo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),WX=n(xZ,"A",{href:!0});var yut=s(WX);tZo=r(yut,"from_pretrained()"),yut.forEach(t),aZo=r(xZ," class method or the "),QX=n(xZ,"A",{href:!0});var Lut=s(QX);nZo=r(Lut,"from_config()"),Lut.forEach(t),sZo=r(xZ,` class
method.`),xZ.forEach(t),lZo=i(al),hL=n(al,"P",{});var hDe=s(hL);iZo=r(hDe,"This class cannot be instantiated directly using "),q_e=n(hDe,"CODE",{});var xut=s(q_e);dZo=r(xut,"__init__()"),xut.forEach(t),cZo=r(hDe," (throws an error)."),hDe.forEach(t),fZo=i(al),vt=n(al,"DIV",{class:!0});var Z0=s(vt);T(pL.$$.fragment,Z0),mZo=i(Z0),N_e=n(Z0,"P",{});var $ut=s(N_e);gZo=r($ut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$ut.forEach(t),hZo=i(Z0),bd=n(Z0,"P",{});var $Z=s(bd);pZo=r($Z,`Note:
Loading a model from its configuration file does `),j_e=n($Z,"STRONG",{});var kut=s(j_e);_Zo=r(kut,"not"),kut.forEach(t),uZo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n($Z,"A",{href:!0});var Sut=s(HX);bZo=r(Sut,"from_pretrained()"),Sut.forEach(t),vZo=r($Z," to load the model weights."),$Z.forEach(t),FZo=i(Z0),T(GF.$$.fragment,Z0),Z0.forEach(t),TZo=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(_L.$$.fragment,_a),MZo=i(_a),D_e=n(_a,"P",{});var Rut=s(D_e);EZo=r(Rut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rut.forEach(t),CZo=i(_a),Va=n(_a,"P",{});var eA=s(Va);wZo=r(eA,"The model class to instantiate is selected based on the "),G_e=n(eA,"CODE",{});var Put=s(G_e);AZo=r(Put,"model_type"),Put.forEach(t),yZo=r(eA,` property of the config object (either
passed as an argument or loaded from `),O_e=n(eA,"CODE",{});var But=s(O_e);LZo=r(But,"pretrained_model_name_or_path"),But.forEach(t),xZo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(eA,"CODE",{});var Iut=s(V_e);$Zo=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),kZo=r(eA,":"),eA.forEach(t),SZo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);OF=n(Ve,"LI",{});var rke=s(OF);X_e=n(rke,"STRONG",{});var qut=s(X_e);RZo=r(qut,"data2vec-audio"),qut.forEach(t),PZo=r(rke," \u2014 "),UX=n(rke,"A",{href:!0});var Nut=s(UX);BZo=r(Nut,"Data2VecAudioForCTC"),Nut.forEach(t),IZo=r(rke," (Data2VecAudio model)"),rke.forEach(t),qZo=i(Ve),VF=n(Ve,"LI",{});var tke=s(VF);z_e=n(tke,"STRONG",{});var jut=s(z_e);NZo=r(jut,"hubert"),jut.forEach(t),jZo=r(tke," \u2014 "),JX=n(tke,"A",{href:!0});var Dut=s(JX);DZo=r(Dut,"HubertForCTC"),Dut.forEach(t),GZo=r(tke," (Hubert model)"),tke.forEach(t),OZo=i(Ve),XF=n(Ve,"LI",{});var ake=s(XF);W_e=n(ake,"STRONG",{});var Gut=s(W_e);VZo=r(Gut,"sew"),Gut.forEach(t),XZo=r(ake," \u2014 "),YX=n(ake,"A",{href:!0});var Out=s(YX);zZo=r(Out,"SEWForCTC"),Out.forEach(t),WZo=r(ake," (SEW model)"),ake.forEach(t),QZo=i(Ve),zF=n(Ve,"LI",{});var nke=s(zF);Q_e=n(nke,"STRONG",{});var Vut=s(Q_e);HZo=r(Vut,"sew-d"),Vut.forEach(t),UZo=r(nke," \u2014 "),KX=n(nke,"A",{href:!0});var Xut=s(KX);JZo=r(Xut,"SEWDForCTC"),Xut.forEach(t),YZo=r(nke," (SEW-D model)"),nke.forEach(t),KZo=i(Ve),WF=n(Ve,"LI",{});var ske=s(WF);H_e=n(ske,"STRONG",{});var zut=s(H_e);ZZo=r(zut,"unispeech"),zut.forEach(t),eer=r(ske," \u2014 "),ZX=n(ske,"A",{href:!0});var Wut=s(ZX);oer=r(Wut,"UniSpeechForCTC"),Wut.forEach(t),rer=r(ske," (UniSpeech model)"),ske.forEach(t),ter=i(Ve),QF=n(Ve,"LI",{});var lke=s(QF);U_e=n(lke,"STRONG",{});var Qut=s(U_e);aer=r(Qut,"unispeech-sat"),Qut.forEach(t),ner=r(lke," \u2014 "),ez=n(lke,"A",{href:!0});var Hut=s(ez);ser=r(Hut,"UniSpeechSatForCTC"),Hut.forEach(t),ler=r(lke," (UniSpeechSat model)"),lke.forEach(t),ier=i(Ve),HF=n(Ve,"LI",{});var ike=s(HF);J_e=n(ike,"STRONG",{});var Uut=s(J_e);der=r(Uut,"wav2vec2"),Uut.forEach(t),cer=r(ike," \u2014 "),oz=n(ike,"A",{href:!0});var Jut=s(oz);fer=r(Jut,"Wav2Vec2ForCTC"),Jut.forEach(t),mer=r(ike," (Wav2Vec2 model)"),ike.forEach(t),ger=i(Ve),UF=n(Ve,"LI",{});var dke=s(UF);Y_e=n(dke,"STRONG",{});var Yut=s(Y_e);her=r(Yut,"wav2vec2-conformer"),Yut.forEach(t),per=r(dke," \u2014 "),rz=n(dke,"A",{href:!0});var Kut=s(rz);_er=r(Kut,"Wav2Vec2ConformerForCTC"),Kut.forEach(t),uer=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),ber=i(Ve),JF=n(Ve,"LI",{});var cke=s(JF);K_e=n(cke,"STRONG",{});var Zut=s(K_e);ver=r(Zut,"wavlm"),Zut.forEach(t),Fer=r(cke," \u2014 "),tz=n(cke,"A",{href:!0});var e1t=s(tz);Ter=r(e1t,"WavLMForCTC"),e1t.forEach(t),Mer=r(cke," (WavLM model)"),cke.forEach(t),Ve.forEach(t),Eer=i(_a),YF=n(_a,"P",{});var fke=s(YF);Cer=r(fke,"The model is set in evaluation mode by default using "),Z_e=n(fke,"CODE",{});var o1t=s(Z_e);wer=r(o1t,"model.eval()"),o1t.forEach(t),Aer=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(fke,"CODE",{});var r1t=s(eue);yer=r(r1t,"model.train()"),r1t.forEach(t),fke.forEach(t),Ler=i(_a),T(KF.$$.fragment,_a),_a.forEach(t),al.forEach(t),fNe=i(f),vd=n(f,"H2",{class:!0});var pDe=s(vd);ZF=n(pDe,"A",{id:!0,class:!0,href:!0});var t1t=s(ZF);oue=n(t1t,"SPAN",{});var a1t=s(oue);T(uL.$$.fragment,a1t),a1t.forEach(t),t1t.forEach(t),xer=i(pDe),rue=n(pDe,"SPAN",{});var n1t=s(rue);$er=r(n1t,"AutoModelForSpeechSeq2Seq"),n1t.forEach(t),pDe.forEach(t),mNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(bL.$$.fragment,nl),ker=i(nl),Fd=n(nl,"P",{});var kZ=s(Fd);Ser=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),az=n(kZ,"A",{href:!0});var s1t=s(az);Rer=r(s1t,"from_pretrained()"),s1t.forEach(t),Per=r(kZ," class method or the "),nz=n(kZ,"A",{href:!0});var l1t=s(nz);Ber=r(l1t,"from_config()"),l1t.forEach(t),Ier=r(kZ,` class
method.`),kZ.forEach(t),qer=i(nl),vL=n(nl,"P",{});var _De=s(vL);Ner=r(_De,"This class cannot be instantiated directly using "),tue=n(_De,"CODE",{});var i1t=s(tue);jer=r(i1t,"__init__()"),i1t.forEach(t),Der=r(_De," (throws an error)."),_De.forEach(t),Ger=i(nl),Ft=n(nl,"DIV",{class:!0});var oA=s(Ft);T(FL.$$.fragment,oA),Oer=i(oA),aue=n(oA,"P",{});var d1t=s(aue);Ver=r(d1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d1t.forEach(t),Xer=i(oA),Td=n(oA,"P",{});var SZ=s(Td);zer=r(SZ,`Note:
Loading a model from its configuration file does `),nue=n(SZ,"STRONG",{});var c1t=s(nue);Wer=r(c1t,"not"),c1t.forEach(t),Qer=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(SZ,"A",{href:!0});var f1t=s(sz);Her=r(f1t,"from_pretrained()"),f1t.forEach(t),Uer=r(SZ," to load the model weights."),SZ.forEach(t),Jer=i(oA),T(eT.$$.fragment,oA),oA.forEach(t),Yer=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(TL.$$.fragment,ua),Ker=i(ua),sue=n(ua,"P",{});var m1t=s(sue);Zer=r(m1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m1t.forEach(t),eor=i(ua),Xa=n(ua,"P",{});var rA=s(Xa);oor=r(rA,"The model class to instantiate is selected based on the "),lue=n(rA,"CODE",{});var g1t=s(lue);ror=r(g1t,"model_type"),g1t.forEach(t),tor=r(rA,` property of the config object (either
passed as an argument or loaded from `),iue=n(rA,"CODE",{});var h1t=s(iue);aor=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),nor=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(rA,"CODE",{});var p1t=s(due);sor=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),lor=r(rA,":"),rA.forEach(t),ior=i(ua),ML=n(ua,"UL",{});var uDe=s(ML);oT=n(uDe,"LI",{});var mke=s(oT);cue=n(mke,"STRONG",{});var _1t=s(cue);dor=r(_1t,"speech-encoder-decoder"),_1t.forEach(t),cor=r(mke," \u2014 "),lz=n(mke,"A",{href:!0});var u1t=s(lz);mor=r(u1t,"SpeechEncoderDecoderModel"),u1t.forEach(t),gor=r(mke," (Speech Encoder decoder model)"),mke.forEach(t),hor=i(uDe),rT=n(uDe,"LI",{});var gke=s(rT);fue=n(gke,"STRONG",{});var b1t=s(fue);por=r(b1t,"speech_to_text"),b1t.forEach(t),_or=r(gke," \u2014 "),iz=n(gke,"A",{href:!0});var v1t=s(iz);uor=r(v1t,"Speech2TextForConditionalGeneration"),v1t.forEach(t),bor=r(gke," (Speech2Text model)"),gke.forEach(t),uDe.forEach(t),vor=i(ua),tT=n(ua,"P",{});var hke=s(tT);For=r(hke,"The model is set in evaluation mode by default using "),mue=n(hke,"CODE",{});var F1t=s(mue);Tor=r(F1t,"model.eval()"),F1t.forEach(t),Mor=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(hke,"CODE",{});var T1t=s(gue);Eor=r(T1t,"model.train()"),T1t.forEach(t),hke.forEach(t),Cor=i(ua),T(aT.$$.fragment,ua),ua.forEach(t),nl.forEach(t),gNe=i(f),Md=n(f,"H2",{class:!0});var bDe=s(Md);nT=n(bDe,"A",{id:!0,class:!0,href:!0});var M1t=s(nT);hue=n(M1t,"SPAN",{});var E1t=s(hue);T(EL.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),wor=i(bDe),pue=n(bDe,"SPAN",{});var C1t=s(pue);Aor=r(C1t,"AutoModelForAudioXVector"),C1t.forEach(t),bDe.forEach(t),hNe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(CL.$$.fragment,sl),yor=i(sl),Ed=n(sl,"P",{});var RZ=s(Ed);Lor=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dz=n(RZ,"A",{href:!0});var w1t=s(dz);xor=r(w1t,"from_pretrained()"),w1t.forEach(t),$or=r(RZ," class method or the "),cz=n(RZ,"A",{href:!0});var A1t=s(cz);kor=r(A1t,"from_config()"),A1t.forEach(t),Sor=r(RZ,` class
method.`),RZ.forEach(t),Ror=i(sl),wL=n(sl,"P",{});var vDe=s(wL);Por=r(vDe,"This class cannot be instantiated directly using "),_ue=n(vDe,"CODE",{});var y1t=s(_ue);Bor=r(y1t,"__init__()"),y1t.forEach(t),Ior=r(vDe," (throws an error)."),vDe.forEach(t),qor=i(sl),Tt=n(sl,"DIV",{class:!0});var tA=s(Tt);T(AL.$$.fragment,tA),Nor=i(tA),uue=n(tA,"P",{});var L1t=s(uue);jor=r(L1t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),L1t.forEach(t),Dor=i(tA),Cd=n(tA,"P",{});var PZ=s(Cd);Gor=r(PZ,`Note:
Loading a model from its configuration file does `),bue=n(PZ,"STRONG",{});var x1t=s(bue);Oor=r(x1t,"not"),x1t.forEach(t),Vor=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(PZ,"A",{href:!0});var $1t=s(fz);Xor=r($1t,"from_pretrained()"),$1t.forEach(t),zor=r(PZ," to load the model weights."),PZ.forEach(t),Wor=i(tA),T(sT.$$.fragment,tA),tA.forEach(t),Qor=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(yL.$$.fragment,ba),Hor=i(ba),vue=n(ba,"P",{});var k1t=s(vue);Uor=r(k1t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),k1t.forEach(t),Jor=i(ba),za=n(ba,"P",{});var aA=s(za);Yor=r(aA,"The model class to instantiate is selected based on the "),Fue=n(aA,"CODE",{});var S1t=s(Fue);Kor=r(S1t,"model_type"),S1t.forEach(t),Zor=r(aA,` property of the config object (either
passed as an argument or loaded from `),Tue=n(aA,"CODE",{});var R1t=s(Tue);err=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),orr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(aA,"CODE",{});var P1t=s(Mue);rrr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),trr=r(aA,":"),aA.forEach(t),arr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);lT=n(ll,"LI",{});var pke=s(lT);Eue=n(pke,"STRONG",{});var B1t=s(Eue);nrr=r(B1t,"data2vec-audio"),B1t.forEach(t),srr=r(pke," \u2014 "),mz=n(pke,"A",{href:!0});var I1t=s(mz);lrr=r(I1t,"Data2VecAudioForXVector"),I1t.forEach(t),irr=r(pke," (Data2VecAudio model)"),pke.forEach(t),drr=i(ll),iT=n(ll,"LI",{});var _ke=s(iT);Cue=n(_ke,"STRONG",{});var q1t=s(Cue);crr=r(q1t,"unispeech-sat"),q1t.forEach(t),frr=r(_ke," \u2014 "),gz=n(_ke,"A",{href:!0});var N1t=s(gz);mrr=r(N1t,"UniSpeechSatForXVector"),N1t.forEach(t),grr=r(_ke," (UniSpeechSat model)"),_ke.forEach(t),hrr=i(ll),dT=n(ll,"LI",{});var uke=s(dT);wue=n(uke,"STRONG",{});var j1t=s(wue);prr=r(j1t,"wav2vec2"),j1t.forEach(t),_rr=r(uke," \u2014 "),hz=n(uke,"A",{href:!0});var D1t=s(hz);urr=r(D1t,"Wav2Vec2ForXVector"),D1t.forEach(t),brr=r(uke," (Wav2Vec2 model)"),uke.forEach(t),vrr=i(ll),cT=n(ll,"LI",{});var bke=s(cT);Aue=n(bke,"STRONG",{});var G1t=s(Aue);Frr=r(G1t,"wav2vec2-conformer"),G1t.forEach(t),Trr=r(bke," \u2014 "),pz=n(bke,"A",{href:!0});var O1t=s(pz);Mrr=r(O1t,"Wav2Vec2ConformerForXVector"),O1t.forEach(t),Err=r(bke," (Wav2Vec2-Conformer model)"),bke.forEach(t),Crr=i(ll),fT=n(ll,"LI",{});var vke=s(fT);yue=n(vke,"STRONG",{});var V1t=s(yue);wrr=r(V1t,"wavlm"),V1t.forEach(t),Arr=r(vke," \u2014 "),_z=n(vke,"A",{href:!0});var X1t=s(_z);yrr=r(X1t,"WavLMForXVector"),X1t.forEach(t),Lrr=r(vke," (WavLM model)"),vke.forEach(t),ll.forEach(t),xrr=i(ba),mT=n(ba,"P",{});var Fke=s(mT);$rr=r(Fke,"The model is set in evaluation mode by default using "),Lue=n(Fke,"CODE",{});var z1t=s(Lue);krr=r(z1t,"model.eval()"),z1t.forEach(t),Srr=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(Fke,"CODE",{});var W1t=s(xue);Rrr=r(W1t,"model.train()"),W1t.forEach(t),Fke.forEach(t),Prr=i(ba),T(gT.$$.fragment,ba),ba.forEach(t),sl.forEach(t),pNe=i(f),wd=n(f,"H2",{class:!0});var FDe=s(wd);hT=n(FDe,"A",{id:!0,class:!0,href:!0});var Q1t=s(hT);$ue=n(Q1t,"SPAN",{});var H1t=s($ue);T(LL.$$.fragment,H1t),H1t.forEach(t),Q1t.forEach(t),Brr=i(FDe),kue=n(FDe,"SPAN",{});var U1t=s(kue);Irr=r(U1t,"AutoModelForMaskedImageModeling"),U1t.forEach(t),FDe.forEach(t),_Ne=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(xL.$$.fragment,il),qrr=i(il),Ad=n(il,"P",{});var BZ=s(Ad);Nrr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uz=n(BZ,"A",{href:!0});var J1t=s(uz);jrr=r(J1t,"from_pretrained()"),J1t.forEach(t),Drr=r(BZ," class method or the "),bz=n(BZ,"A",{href:!0});var Y1t=s(bz);Grr=r(Y1t,"from_config()"),Y1t.forEach(t),Orr=r(BZ,` class
method.`),BZ.forEach(t),Vrr=i(il),$L=n(il,"P",{});var TDe=s($L);Xrr=r(TDe,"This class cannot be instantiated directly using "),Sue=n(TDe,"CODE",{});var K1t=s(Sue);zrr=r(K1t,"__init__()"),K1t.forEach(t),Wrr=r(TDe," (throws an error)."),TDe.forEach(t),Qrr=i(il),Mt=n(il,"DIV",{class:!0});var nA=s(Mt);T(kL.$$.fragment,nA),Hrr=i(nA),Rue=n(nA,"P",{});var Z1t=s(Rue);Urr=r(Z1t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Z1t.forEach(t),Jrr=i(nA),yd=n(nA,"P",{});var IZ=s(yd);Yrr=r(IZ,`Note:
Loading a model from its configuration file does `),Pue=n(IZ,"STRONG",{});var e3t=s(Pue);Krr=r(e3t,"not"),e3t.forEach(t),Zrr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(IZ,"A",{href:!0});var o3t=s(vz);etr=r(o3t,"from_pretrained()"),o3t.forEach(t),otr=r(IZ," to load the model weights."),IZ.forEach(t),rtr=i(nA),T(pT.$$.fragment,nA),nA.forEach(t),ttr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(SL.$$.fragment,va),atr=i(va),Bue=n(va,"P",{});var r3t=s(Bue);ntr=r(r3t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),r3t.forEach(t),str=i(va),Wa=n(va,"P",{});var sA=s(Wa);ltr=r(sA,"The model class to instantiate is selected based on the "),Iue=n(sA,"CODE",{});var t3t=s(Iue);itr=r(t3t,"model_type"),t3t.forEach(t),dtr=r(sA,` property of the config object (either
passed as an argument or loaded from `),que=n(sA,"CODE",{});var a3t=s(que);ctr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),ftr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(sA,"CODE",{});var n3t=s(Nue);mtr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),gtr=r(sA,":"),sA.forEach(t),htr=i(va),Ld=n(va,"UL",{});var qZ=s(Ld);_T=n(qZ,"LI",{});var Tke=s(_T);jue=n(Tke,"STRONG",{});var s3t=s(jue);ptr=r(s3t,"deit"),s3t.forEach(t),_tr=r(Tke," \u2014 "),Fz=n(Tke,"A",{href:!0});var l3t=s(Fz);utr=r(l3t,"DeiTForMaskedImageModeling"),l3t.forEach(t),btr=r(Tke," (DeiT model)"),Tke.forEach(t),vtr=i(qZ),uT=n(qZ,"LI",{});var Mke=s(uT);Due=n(Mke,"STRONG",{});var i3t=s(Due);Ftr=r(i3t,"swin"),i3t.forEach(t),Ttr=r(Mke," \u2014 "),Tz=n(Mke,"A",{href:!0});var d3t=s(Tz);Mtr=r(d3t,"SwinForMaskedImageModeling"),d3t.forEach(t),Etr=r(Mke," (Swin model)"),Mke.forEach(t),Ctr=i(qZ),bT=n(qZ,"LI",{});var Eke=s(bT);Gue=n(Eke,"STRONG",{});var c3t=s(Gue);wtr=r(c3t,"vit"),c3t.forEach(t),Atr=r(Eke," \u2014 "),Mz=n(Eke,"A",{href:!0});var f3t=s(Mz);ytr=r(f3t,"ViTForMaskedImageModeling"),f3t.forEach(t),Ltr=r(Eke," (ViT model)"),Eke.forEach(t),qZ.forEach(t),xtr=i(va),vT=n(va,"P",{});var Cke=s(vT);$tr=r(Cke,"The model is set in evaluation mode by default using "),Oue=n(Cke,"CODE",{});var m3t=s(Oue);ktr=r(m3t,"model.eval()"),m3t.forEach(t),Str=r(Cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(Cke,"CODE",{});var g3t=s(Vue);Rtr=r(g3t,"model.train()"),g3t.forEach(t),Cke.forEach(t),Ptr=i(va),T(FT.$$.fragment,va),va.forEach(t),il.forEach(t),uNe=i(f),xd=n(f,"H2",{class:!0});var MDe=s(xd);TT=n(MDe,"A",{id:!0,class:!0,href:!0});var h3t=s(TT);Xue=n(h3t,"SPAN",{});var p3t=s(Xue);T(RL.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),Btr=i(MDe),zue=n(MDe,"SPAN",{});var _3t=s(zue);Itr=r(_3t,"AutoModelForObjectDetection"),_3t.forEach(t),MDe.forEach(t),bNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(PL.$$.fragment,dl),qtr=i(dl),$d=n(dl,"P",{});var NZ=s($d);Ntr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Ez=n(NZ,"A",{href:!0});var u3t=s(Ez);jtr=r(u3t,"from_pretrained()"),u3t.forEach(t),Dtr=r(NZ," class method or the "),Cz=n(NZ,"A",{href:!0});var b3t=s(Cz);Gtr=r(b3t,"from_config()"),b3t.forEach(t),Otr=r(NZ,` class
method.`),NZ.forEach(t),Vtr=i(dl),BL=n(dl,"P",{});var EDe=s(BL);Xtr=r(EDe,"This class cannot be instantiated directly using "),Wue=n(EDe,"CODE",{});var v3t=s(Wue);ztr=r(v3t,"__init__()"),v3t.forEach(t),Wtr=r(EDe," (throws an error)."),EDe.forEach(t),Qtr=i(dl),Et=n(dl,"DIV",{class:!0});var lA=s(Et);T(IL.$$.fragment,lA),Htr=i(lA),Que=n(lA,"P",{});var F3t=s(Que);Utr=r(F3t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),F3t.forEach(t),Jtr=i(lA),kd=n(lA,"P",{});var jZ=s(kd);Ytr=r(jZ,`Note:
Loading a model from its configuration file does `),Hue=n(jZ,"STRONG",{});var T3t=s(Hue);Ktr=r(T3t,"not"),T3t.forEach(t),Ztr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(jZ,"A",{href:!0});var M3t=s(wz);ear=r(M3t,"from_pretrained()"),M3t.forEach(t),oar=r(jZ," to load the model weights."),jZ.forEach(t),rar=i(lA),T(MT.$$.fragment,lA),lA.forEach(t),tar=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(qL.$$.fragment,Fa),aar=i(Fa),Uue=n(Fa,"P",{});var E3t=s(Uue);nar=r(E3t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),E3t.forEach(t),sar=i(Fa),Qa=n(Fa,"P",{});var iA=s(Qa);lar=r(iA,"The model class to instantiate is selected based on the "),Jue=n(iA,"CODE",{});var C3t=s(Jue);iar=r(C3t,"model_type"),C3t.forEach(t),dar=r(iA,` property of the config object (either
passed as an argument or loaded from `),Yue=n(iA,"CODE",{});var w3t=s(Yue);car=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),far=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(iA,"CODE",{});var A3t=s(Kue);mar=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),gar=r(iA,":"),iA.forEach(t),har=i(Fa),NL=n(Fa,"UL",{});var CDe=s(NL);ET=n(CDe,"LI",{});var wke=s(ET);Zue=n(wke,"STRONG",{});var y3t=s(Zue);par=r(y3t,"detr"),y3t.forEach(t),_ar=r(wke," \u2014 "),Az=n(wke,"A",{href:!0});var L3t=s(Az);uar=r(L3t,"DetrForObjectDetection"),L3t.forEach(t),bar=r(wke," (DETR model)"),wke.forEach(t),Far=i(CDe),CT=n(CDe,"LI",{});var Ake=s(CT);e1e=n(Ake,"STRONG",{});var x3t=s(e1e);Tar=r(x3t,"yolos"),x3t.forEach(t),Mar=r(Ake," \u2014 "),yz=n(Ake,"A",{href:!0});var $3t=s(yz);Ear=r($3t,"YolosForObjectDetection"),$3t.forEach(t),Car=r(Ake," (YOLOS model)"),Ake.forEach(t),CDe.forEach(t),war=i(Fa),wT=n(Fa,"P",{});var yke=s(wT);Aar=r(yke,"The model is set in evaluation mode by default using "),o1e=n(yke,"CODE",{});var k3t=s(o1e);yar=r(k3t,"model.eval()"),k3t.forEach(t),Lar=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(yke,"CODE",{});var S3t=s(r1e);xar=r(S3t,"model.train()"),S3t.forEach(t),yke.forEach(t),$ar=i(Fa),T(AT.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),vNe=i(f),Sd=n(f,"H2",{class:!0});var wDe=s(Sd);yT=n(wDe,"A",{id:!0,class:!0,href:!0});var R3t=s(yT);t1e=n(R3t,"SPAN",{});var P3t=s(t1e);T(jL.$$.fragment,P3t),P3t.forEach(t),R3t.forEach(t),kar=i(wDe),a1e=n(wDe,"SPAN",{});var B3t=s(a1e);Sar=r(B3t,"AutoModelForImageSegmentation"),B3t.forEach(t),wDe.forEach(t),FNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(DL.$$.fragment,cl),Rar=i(cl),Rd=n(cl,"P",{});var DZ=s(Rd);Par=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Lz=n(DZ,"A",{href:!0});var I3t=s(Lz);Bar=r(I3t,"from_pretrained()"),I3t.forEach(t),Iar=r(DZ," class method or the "),xz=n(DZ,"A",{href:!0});var q3t=s(xz);qar=r(q3t,"from_config()"),q3t.forEach(t),Nar=r(DZ,` class
method.`),DZ.forEach(t),jar=i(cl),GL=n(cl,"P",{});var ADe=s(GL);Dar=r(ADe,"This class cannot be instantiated directly using "),n1e=n(ADe,"CODE",{});var N3t=s(n1e);Gar=r(N3t,"__init__()"),N3t.forEach(t),Oar=r(ADe," (throws an error)."),ADe.forEach(t),Var=i(cl),Ct=n(cl,"DIV",{class:!0});var dA=s(Ct);T(OL.$$.fragment,dA),Xar=i(dA),s1e=n(dA,"P",{});var j3t=s(s1e);zar=r(j3t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),j3t.forEach(t),War=i(dA),Pd=n(dA,"P",{});var GZ=s(Pd);Qar=r(GZ,`Note:
Loading a model from its configuration file does `),l1e=n(GZ,"STRONG",{});var D3t=s(l1e);Har=r(D3t,"not"),D3t.forEach(t),Uar=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(GZ,"A",{href:!0});var G3t=s($z);Jar=r(G3t,"from_pretrained()"),G3t.forEach(t),Yar=r(GZ," to load the model weights."),GZ.forEach(t),Kar=i(dA),T(LT.$$.fragment,dA),dA.forEach(t),Zar=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(VL.$$.fragment,Ta),enr=i(Ta),i1e=n(Ta,"P",{});var O3t=s(i1e);onr=r(O3t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),O3t.forEach(t),rnr=i(Ta),Ha=n(Ta,"P",{});var cA=s(Ha);tnr=r(cA,"The model class to instantiate is selected based on the "),d1e=n(cA,"CODE",{});var V3t=s(d1e);anr=r(V3t,"model_type"),V3t.forEach(t),nnr=r(cA,` property of the config object (either
passed as an argument or loaded from `),c1e=n(cA,"CODE",{});var X3t=s(c1e);snr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),lnr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(cA,"CODE",{});var z3t=s(f1e);inr=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),dnr=r(cA,":"),cA.forEach(t),cnr=i(Ta),m1e=n(Ta,"UL",{});var W3t=s(m1e);xT=n(W3t,"LI",{});var Lke=s(xT);g1e=n(Lke,"STRONG",{});var Q3t=s(g1e);fnr=r(Q3t,"detr"),Q3t.forEach(t),mnr=r(Lke," \u2014 "),kz=n(Lke,"A",{href:!0});var H3t=s(kz);gnr=r(H3t,"DetrForSegmentation"),H3t.forEach(t),hnr=r(Lke," (DETR model)"),Lke.forEach(t),W3t.forEach(t),pnr=i(Ta),$T=n(Ta,"P",{});var xke=s($T);_nr=r(xke,"The model is set in evaluation mode by default using "),h1e=n(xke,"CODE",{});var U3t=s(h1e);unr=r(U3t,"model.eval()"),U3t.forEach(t),bnr=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(xke,"CODE",{});var J3t=s(p1e);vnr=r(J3t,"model.train()"),J3t.forEach(t),xke.forEach(t),Fnr=i(Ta),T(kT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),TNe=i(f),Bd=n(f,"H2",{class:!0});var yDe=s(Bd);ST=n(yDe,"A",{id:!0,class:!0,href:!0});var Y3t=s(ST);_1e=n(Y3t,"SPAN",{});var K3t=s(_1e);T(XL.$$.fragment,K3t),K3t.forEach(t),Y3t.forEach(t),Tnr=i(yDe),u1e=n(yDe,"SPAN",{});var Z3t=s(u1e);Mnr=r(Z3t,"AutoModelForSemanticSegmentation"),Z3t.forEach(t),yDe.forEach(t),MNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(zL.$$.fragment,fl),Enr=i(fl),Id=n(fl,"P",{});var OZ=s(Id);Cnr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Sz=n(OZ,"A",{href:!0});var ebt=s(Sz);wnr=r(ebt,"from_pretrained()"),ebt.forEach(t),Anr=r(OZ," class method or the "),Rz=n(OZ,"A",{href:!0});var obt=s(Rz);ynr=r(obt,"from_config()"),obt.forEach(t),Lnr=r(OZ,` class
method.`),OZ.forEach(t),xnr=i(fl),WL=n(fl,"P",{});var LDe=s(WL);$nr=r(LDe,"This class cannot be instantiated directly using "),b1e=n(LDe,"CODE",{});var rbt=s(b1e);knr=r(rbt,"__init__()"),rbt.forEach(t),Snr=r(LDe," (throws an error)."),LDe.forEach(t),Rnr=i(fl),wt=n(fl,"DIV",{class:!0});var fA=s(wt);T(QL.$$.fragment,fA),Pnr=i(fA),v1e=n(fA,"P",{});var tbt=s(v1e);Bnr=r(tbt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tbt.forEach(t),Inr=i(fA),qd=n(fA,"P",{});var VZ=s(qd);qnr=r(VZ,`Note:
Loading a model from its configuration file does `),F1e=n(VZ,"STRONG",{});var abt=s(F1e);Nnr=r(abt,"not"),abt.forEach(t),jnr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(VZ,"A",{href:!0});var nbt=s(Pz);Dnr=r(nbt,"from_pretrained()"),nbt.forEach(t),Gnr=r(VZ," to load the model weights."),VZ.forEach(t),Onr=i(fA),T(RT.$$.fragment,fA),fA.forEach(t),Vnr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(HL.$$.fragment,Ma),Xnr=i(Ma),T1e=n(Ma,"P",{});var sbt=s(T1e);znr=r(sbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sbt.forEach(t),Wnr=i(Ma),Ua=n(Ma,"P",{});var mA=s(Ua);Qnr=r(mA,"The model class to instantiate is selected based on the "),M1e=n(mA,"CODE",{});var lbt=s(M1e);Hnr=r(lbt,"model_type"),lbt.forEach(t),Unr=r(mA,` property of the config object (either
passed as an argument or loaded from `),E1e=n(mA,"CODE",{});var ibt=s(E1e);Jnr=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),Ynr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(mA,"CODE",{});var dbt=s(C1e);Knr=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),Znr=r(mA,":"),mA.forEach(t),esr=i(Ma),Ja=n(Ma,"UL",{});var gA=s(Ja);PT=n(gA,"LI",{});var $ke=s(PT);w1e=n($ke,"STRONG",{});var cbt=s(w1e);osr=r(cbt,"beit"),cbt.forEach(t),rsr=r($ke," \u2014 "),Bz=n($ke,"A",{href:!0});var fbt=s(Bz);tsr=r(fbt,"BeitForSemanticSegmentation"),fbt.forEach(t),asr=r($ke," (BEiT model)"),$ke.forEach(t),nsr=i(gA),BT=n(gA,"LI",{});var kke=s(BT);A1e=n(kke,"STRONG",{});var mbt=s(A1e);ssr=r(mbt,"data2vec-vision"),mbt.forEach(t),lsr=r(kke," \u2014 "),Iz=n(kke,"A",{href:!0});var gbt=s(Iz);isr=r(gbt,"Data2VecVisionForSemanticSegmentation"),gbt.forEach(t),dsr=r(kke," (Data2VecVision model)"),kke.forEach(t),csr=i(gA),IT=n(gA,"LI",{});var Ske=s(IT);y1e=n(Ske,"STRONG",{});var hbt=s(y1e);fsr=r(hbt,"dpt"),hbt.forEach(t),msr=r(Ske," \u2014 "),qz=n(Ske,"A",{href:!0});var pbt=s(qz);gsr=r(pbt,"DPTForSemanticSegmentation"),pbt.forEach(t),hsr=r(Ske," (DPT model)"),Ske.forEach(t),psr=i(gA),qT=n(gA,"LI",{});var Rke=s(qT);L1e=n(Rke,"STRONG",{});var _bt=s(L1e);_sr=r(_bt,"segformer"),_bt.forEach(t),usr=r(Rke," \u2014 "),Nz=n(Rke,"A",{href:!0});var ubt=s(Nz);bsr=r(ubt,"SegformerForSemanticSegmentation"),ubt.forEach(t),vsr=r(Rke," (SegFormer model)"),Rke.forEach(t),gA.forEach(t),Fsr=i(Ma),NT=n(Ma,"P",{});var Pke=s(NT);Tsr=r(Pke,"The model is set in evaluation mode by default using "),x1e=n(Pke,"CODE",{});var bbt=s(x1e);Msr=r(bbt,"model.eval()"),bbt.forEach(t),Esr=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=n(Pke,"CODE",{});var vbt=s($1e);Csr=r(vbt,"model.train()"),vbt.forEach(t),Pke.forEach(t),wsr=i(Ma),T(jT.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),ENe=i(f),Nd=n(f,"H2",{class:!0});var xDe=s(Nd);DT=n(xDe,"A",{id:!0,class:!0,href:!0});var Fbt=s(DT);k1e=n(Fbt,"SPAN",{});var Tbt=s(k1e);T(UL.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),Asr=i(xDe),S1e=n(xDe,"SPAN",{});var Mbt=s(S1e);ysr=r(Mbt,"AutoModelForInstanceSegmentation"),Mbt.forEach(t),xDe.forEach(t),CNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(JL.$$.fragment,ml),Lsr=i(ml),jd=n(ml,"P",{});var XZ=s(jd);xsr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jz=n(XZ,"A",{href:!0});var Ebt=s(jz);$sr=r(Ebt,"from_pretrained()"),Ebt.forEach(t),ksr=r(XZ," class method or the "),Dz=n(XZ,"A",{href:!0});var Cbt=s(Dz);Ssr=r(Cbt,"from_config()"),Cbt.forEach(t),Rsr=r(XZ,` class
method.`),XZ.forEach(t),Psr=i(ml),YL=n(ml,"P",{});var $De=s(YL);Bsr=r($De,"This class cannot be instantiated directly using "),R1e=n($De,"CODE",{});var wbt=s(R1e);Isr=r(wbt,"__init__()"),wbt.forEach(t),qsr=r($De," (throws an error)."),$De.forEach(t),Nsr=i(ml),At=n(ml,"DIV",{class:!0});var hA=s(At);T(KL.$$.fragment,hA),jsr=i(hA),P1e=n(hA,"P",{});var Abt=s(P1e);Dsr=r(Abt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Abt.forEach(t),Gsr=i(hA),Dd=n(hA,"P",{});var zZ=s(Dd);Osr=r(zZ,`Note:
Loading a model from its configuration file does `),B1e=n(zZ,"STRONG",{});var ybt=s(B1e);Vsr=r(ybt,"not"),ybt.forEach(t),Xsr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(zZ,"A",{href:!0});var Lbt=s(Gz);zsr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),Wsr=r(zZ," to load the model weights."),zZ.forEach(t),Qsr=i(hA),T(GT.$$.fragment,hA),hA.forEach(t),Hsr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(ZL.$$.fragment,Ea),Usr=i(Ea),I1e=n(Ea,"P",{});var xbt=s(I1e);Jsr=r(xbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xbt.forEach(t),Ysr=i(Ea),Ya=n(Ea,"P",{});var pA=s(Ya);Ksr=r(pA,"The model class to instantiate is selected based on the "),q1e=n(pA,"CODE",{});var $bt=s(q1e);Zsr=r($bt,"model_type"),$bt.forEach(t),elr=r(pA,` property of the config object (either
passed as an argument or loaded from `),N1e=n(pA,"CODE",{});var kbt=s(N1e);olr=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),rlr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(pA,"CODE",{});var Sbt=s(j1e);tlr=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),alr=r(pA,":"),pA.forEach(t),nlr=i(Ea),D1e=n(Ea,"UL",{});var Rbt=s(D1e);OT=n(Rbt,"LI",{});var Bke=s(OT);G1e=n(Bke,"STRONG",{});var Pbt=s(G1e);slr=r(Pbt,"maskformer"),Pbt.forEach(t),llr=r(Bke," \u2014 "),Oz=n(Bke,"A",{href:!0});var Bbt=s(Oz);ilr=r(Bbt,"MaskFormerForInstanceSegmentation"),Bbt.forEach(t),dlr=r(Bke," (MaskFormer model)"),Bke.forEach(t),Rbt.forEach(t),clr=i(Ea),VT=n(Ea,"P",{});var Ike=s(VT);flr=r(Ike,"The model is set in evaluation mode by default using "),O1e=n(Ike,"CODE",{});var Ibt=s(O1e);mlr=r(Ibt,"model.eval()"),Ibt.forEach(t),glr=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=n(Ike,"CODE",{});var qbt=s(V1e);hlr=r(qbt,"model.train()"),qbt.forEach(t),Ike.forEach(t),plr=i(Ea),T(XT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),wNe=i(f),Gd=n(f,"H2",{class:!0});var kDe=s(Gd);zT=n(kDe,"A",{id:!0,class:!0,href:!0});var Nbt=s(zT);X1e=n(Nbt,"SPAN",{});var jbt=s(X1e);T(e8.$$.fragment,jbt),jbt.forEach(t),Nbt.forEach(t),_lr=i(kDe),z1e=n(kDe,"SPAN",{});var Dbt=s(z1e);ulr=r(Dbt,"TFAutoModel"),Dbt.forEach(t),kDe.forEach(t),ANe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(o8.$$.fragment,gl),blr=i(gl),Od=n(gl,"P",{});var WZ=s(Od);vlr=r(WZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Vz=n(WZ,"A",{href:!0});var Gbt=s(Vz);Flr=r(Gbt,"from_pretrained()"),Gbt.forEach(t),Tlr=r(WZ," class method or the "),Xz=n(WZ,"A",{href:!0});var Obt=s(Xz);Mlr=r(Obt,"from_config()"),Obt.forEach(t),Elr=r(WZ,` class
method.`),WZ.forEach(t),Clr=i(gl),r8=n(gl,"P",{});var SDe=s(r8);wlr=r(SDe,"This class cannot be instantiated directly using "),W1e=n(SDe,"CODE",{});var Vbt=s(W1e);Alr=r(Vbt,"__init__()"),Vbt.forEach(t),ylr=r(SDe," (throws an error)."),SDe.forEach(t),Llr=i(gl),yt=n(gl,"DIV",{class:!0});var _A=s(yt);T(t8.$$.fragment,_A),xlr=i(_A),Q1e=n(_A,"P",{});var Xbt=s(Q1e);$lr=r(Xbt,"Instantiates one of the base model classes of the library from a configuration."),Xbt.forEach(t),klr=i(_A),Vd=n(_A,"P",{});var QZ=s(Vd);Slr=r(QZ,`Note:
Loading a model from its configuration file does `),H1e=n(QZ,"STRONG",{});var zbt=s(H1e);Rlr=r(zbt,"not"),zbt.forEach(t),Plr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(QZ,"A",{href:!0});var Wbt=s(zz);Blr=r(Wbt,"from_pretrained()"),Wbt.forEach(t),Ilr=r(QZ," to load the model weights."),QZ.forEach(t),qlr=i(_A),T(WT.$$.fragment,_A),_A.forEach(t),Nlr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(a8.$$.fragment,hl),jlr=i(hl),U1e=n(hl,"P",{});var Qbt=s(U1e);Dlr=r(Qbt,"Instantiate one of the base model classes of the library from a pretrained model."),Qbt.forEach(t),Glr=i(hl),Ka=n(hl,"P",{});var uA=s(Ka);Olr=r(uA,"The model class to instantiate is selected based on the "),J1e=n(uA,"CODE",{});var Hbt=s(J1e);Vlr=r(Hbt,"model_type"),Hbt.forEach(t),Xlr=r(uA,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(uA,"CODE",{});var Ubt=s(Y1e);zlr=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),Wlr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(uA,"CODE",{});var Jbt=s(K1e);Qlr=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),Hlr=r(uA,":"),uA.forEach(t),Ulr=i(hl),N=n(hl,"UL",{});var D=s(N);QT=n(D,"LI",{});var qke=s(QT);Z1e=n(qke,"STRONG",{});var Ybt=s(Z1e);Jlr=r(Ybt,"albert"),Ybt.forEach(t),Ylr=r(qke," \u2014 "),Wz=n(qke,"A",{href:!0});var Kbt=s(Wz);Klr=r(Kbt,"TFAlbertModel"),Kbt.forEach(t),Zlr=r(qke," (ALBERT model)"),qke.forEach(t),eir=i(D),HT=n(D,"LI",{});var Nke=s(HT);e3e=n(Nke,"STRONG",{});var Zbt=s(e3e);oir=r(Zbt,"bart"),Zbt.forEach(t),rir=r(Nke," \u2014 "),Qz=n(Nke,"A",{href:!0});var e2t=s(Qz);tir=r(e2t,"TFBartModel"),e2t.forEach(t),air=r(Nke," (BART model)"),Nke.forEach(t),nir=i(D),UT=n(D,"LI",{});var jke=s(UT);o3e=n(jke,"STRONG",{});var o2t=s(o3e);sir=r(o2t,"bert"),o2t.forEach(t),lir=r(jke," \u2014 "),Hz=n(jke,"A",{href:!0});var r2t=s(Hz);iir=r(r2t,"TFBertModel"),r2t.forEach(t),dir=r(jke," (BERT model)"),jke.forEach(t),cir=i(D),JT=n(D,"LI",{});var Dke=s(JT);r3e=n(Dke,"STRONG",{});var t2t=s(r3e);fir=r(t2t,"blenderbot"),t2t.forEach(t),mir=r(Dke," \u2014 "),Uz=n(Dke,"A",{href:!0});var a2t=s(Uz);gir=r(a2t,"TFBlenderbotModel"),a2t.forEach(t),hir=r(Dke," (Blenderbot model)"),Dke.forEach(t),pir=i(D),YT=n(D,"LI",{});var Gke=s(YT);t3e=n(Gke,"STRONG",{});var n2t=s(t3e);_ir=r(n2t,"blenderbot-small"),n2t.forEach(t),uir=r(Gke," \u2014 "),Jz=n(Gke,"A",{href:!0});var s2t=s(Jz);bir=r(s2t,"TFBlenderbotSmallModel"),s2t.forEach(t),vir=r(Gke," (BlenderbotSmall model)"),Gke.forEach(t),Fir=i(D),KT=n(D,"LI",{});var Oke=s(KT);a3e=n(Oke,"STRONG",{});var l2t=s(a3e);Tir=r(l2t,"camembert"),l2t.forEach(t),Mir=r(Oke," \u2014 "),Yz=n(Oke,"A",{href:!0});var i2t=s(Yz);Eir=r(i2t,"TFCamembertModel"),i2t.forEach(t),Cir=r(Oke," (CamemBERT model)"),Oke.forEach(t),wir=i(D),ZT=n(D,"LI",{});var Vke=s(ZT);n3e=n(Vke,"STRONG",{});var d2t=s(n3e);Air=r(d2t,"clip"),d2t.forEach(t),yir=r(Vke," \u2014 "),Kz=n(Vke,"A",{href:!0});var c2t=s(Kz);Lir=r(c2t,"TFCLIPModel"),c2t.forEach(t),xir=r(Vke," (CLIP model)"),Vke.forEach(t),$ir=i(D),e7=n(D,"LI",{});var Xke=s(e7);s3e=n(Xke,"STRONG",{});var f2t=s(s3e);kir=r(f2t,"convbert"),f2t.forEach(t),Sir=r(Xke," \u2014 "),Zz=n(Xke,"A",{href:!0});var m2t=s(Zz);Rir=r(m2t,"TFConvBertModel"),m2t.forEach(t),Pir=r(Xke," (ConvBERT model)"),Xke.forEach(t),Bir=i(D),o7=n(D,"LI",{});var zke=s(o7);l3e=n(zke,"STRONG",{});var g2t=s(l3e);Iir=r(g2t,"convnext"),g2t.forEach(t),qir=r(zke," \u2014 "),eW=n(zke,"A",{href:!0});var h2t=s(eW);Nir=r(h2t,"TFConvNextModel"),h2t.forEach(t),jir=r(zke," (ConvNext model)"),zke.forEach(t),Dir=i(D),r7=n(D,"LI",{});var Wke=s(r7);i3e=n(Wke,"STRONG",{});var p2t=s(i3e);Gir=r(p2t,"ctrl"),p2t.forEach(t),Oir=r(Wke," \u2014 "),oW=n(Wke,"A",{href:!0});var _2t=s(oW);Vir=r(_2t,"TFCTRLModel"),_2t.forEach(t),Xir=r(Wke," (CTRL model)"),Wke.forEach(t),zir=i(D),t7=n(D,"LI",{});var Qke=s(t7);d3e=n(Qke,"STRONG",{});var u2t=s(d3e);Wir=r(u2t,"data2vec-vision"),u2t.forEach(t),Qir=r(Qke," \u2014 "),rW=n(Qke,"A",{href:!0});var b2t=s(rW);Hir=r(b2t,"TFData2VecVisionModel"),b2t.forEach(t),Uir=r(Qke," (Data2VecVision model)"),Qke.forEach(t),Jir=i(D),a7=n(D,"LI",{});var Hke=s(a7);c3e=n(Hke,"STRONG",{});var v2t=s(c3e);Yir=r(v2t,"deberta"),v2t.forEach(t),Kir=r(Hke," \u2014 "),tW=n(Hke,"A",{href:!0});var F2t=s(tW);Zir=r(F2t,"TFDebertaModel"),F2t.forEach(t),edr=r(Hke," (DeBERTa model)"),Hke.forEach(t),odr=i(D),n7=n(D,"LI",{});var Uke=s(n7);f3e=n(Uke,"STRONG",{});var T2t=s(f3e);rdr=r(T2t,"deberta-v2"),T2t.forEach(t),tdr=r(Uke," \u2014 "),aW=n(Uke,"A",{href:!0});var M2t=s(aW);adr=r(M2t,"TFDebertaV2Model"),M2t.forEach(t),ndr=r(Uke," (DeBERTa-v2 model)"),Uke.forEach(t),sdr=i(D),s7=n(D,"LI",{});var Jke=s(s7);m3e=n(Jke,"STRONG",{});var E2t=s(m3e);ldr=r(E2t,"distilbert"),E2t.forEach(t),idr=r(Jke," \u2014 "),nW=n(Jke,"A",{href:!0});var C2t=s(nW);ddr=r(C2t,"TFDistilBertModel"),C2t.forEach(t),cdr=r(Jke," (DistilBERT model)"),Jke.forEach(t),fdr=i(D),l7=n(D,"LI",{});var Yke=s(l7);g3e=n(Yke,"STRONG",{});var w2t=s(g3e);mdr=r(w2t,"dpr"),w2t.forEach(t),gdr=r(Yke," \u2014 "),sW=n(Yke,"A",{href:!0});var A2t=s(sW);hdr=r(A2t,"TFDPRQuestionEncoder"),A2t.forEach(t),pdr=r(Yke," (DPR model)"),Yke.forEach(t),_dr=i(D),i7=n(D,"LI",{});var Kke=s(i7);h3e=n(Kke,"STRONG",{});var y2t=s(h3e);udr=r(y2t,"electra"),y2t.forEach(t),bdr=r(Kke," \u2014 "),lW=n(Kke,"A",{href:!0});var L2t=s(lW);vdr=r(L2t,"TFElectraModel"),L2t.forEach(t),Fdr=r(Kke," (ELECTRA model)"),Kke.forEach(t),Tdr=i(D),d7=n(D,"LI",{});var Zke=s(d7);p3e=n(Zke,"STRONG",{});var x2t=s(p3e);Mdr=r(x2t,"flaubert"),x2t.forEach(t),Edr=r(Zke," \u2014 "),iW=n(Zke,"A",{href:!0});var $2t=s(iW);Cdr=r($2t,"TFFlaubertModel"),$2t.forEach(t),wdr=r(Zke," (FlauBERT model)"),Zke.forEach(t),Adr=i(D),Is=n(D,"LI",{});var I$=s(Is);_3e=n(I$,"STRONG",{});var k2t=s(_3e);ydr=r(k2t,"funnel"),k2t.forEach(t),Ldr=r(I$," \u2014 "),dW=n(I$,"A",{href:!0});var S2t=s(dW);xdr=r(S2t,"TFFunnelModel"),S2t.forEach(t),$dr=r(I$," or "),cW=n(I$,"A",{href:!0});var R2t=s(cW);kdr=r(R2t,"TFFunnelBaseModel"),R2t.forEach(t),Sdr=r(I$," (Funnel Transformer model)"),I$.forEach(t),Rdr=i(D),c7=n(D,"LI",{});var eSe=s(c7);u3e=n(eSe,"STRONG",{});var P2t=s(u3e);Pdr=r(P2t,"gpt2"),P2t.forEach(t),Bdr=r(eSe," \u2014 "),fW=n(eSe,"A",{href:!0});var B2t=s(fW);Idr=r(B2t,"TFGPT2Model"),B2t.forEach(t),qdr=r(eSe," (OpenAI GPT-2 model)"),eSe.forEach(t),Ndr=i(D),f7=n(D,"LI",{});var oSe=s(f7);b3e=n(oSe,"STRONG",{});var I2t=s(b3e);jdr=r(I2t,"gptj"),I2t.forEach(t),Ddr=r(oSe," \u2014 "),mW=n(oSe,"A",{href:!0});var q2t=s(mW);Gdr=r(q2t,"TFGPTJModel"),q2t.forEach(t),Odr=r(oSe," (GPT-J model)"),oSe.forEach(t),Vdr=i(D),m7=n(D,"LI",{});var rSe=s(m7);v3e=n(rSe,"STRONG",{});var N2t=s(v3e);Xdr=r(N2t,"hubert"),N2t.forEach(t),zdr=r(rSe," \u2014 "),gW=n(rSe,"A",{href:!0});var j2t=s(gW);Wdr=r(j2t,"TFHubertModel"),j2t.forEach(t),Qdr=r(rSe," (Hubert model)"),rSe.forEach(t),Hdr=i(D),g7=n(D,"LI",{});var tSe=s(g7);F3e=n(tSe,"STRONG",{});var D2t=s(F3e);Udr=r(D2t,"layoutlm"),D2t.forEach(t),Jdr=r(tSe," \u2014 "),hW=n(tSe,"A",{href:!0});var G2t=s(hW);Ydr=r(G2t,"TFLayoutLMModel"),G2t.forEach(t),Kdr=r(tSe," (LayoutLM model)"),tSe.forEach(t),Zdr=i(D),h7=n(D,"LI",{});var aSe=s(h7);T3e=n(aSe,"STRONG",{});var O2t=s(T3e);ecr=r(O2t,"led"),O2t.forEach(t),ocr=r(aSe," \u2014 "),pW=n(aSe,"A",{href:!0});var V2t=s(pW);rcr=r(V2t,"TFLEDModel"),V2t.forEach(t),tcr=r(aSe," (LED model)"),aSe.forEach(t),acr=i(D),p7=n(D,"LI",{});var nSe=s(p7);M3e=n(nSe,"STRONG",{});var X2t=s(M3e);ncr=r(X2t,"longformer"),X2t.forEach(t),scr=r(nSe," \u2014 "),_W=n(nSe,"A",{href:!0});var z2t=s(_W);lcr=r(z2t,"TFLongformerModel"),z2t.forEach(t),icr=r(nSe," (Longformer model)"),nSe.forEach(t),dcr=i(D),_7=n(D,"LI",{});var sSe=s(_7);E3e=n(sSe,"STRONG",{});var W2t=s(E3e);ccr=r(W2t,"lxmert"),W2t.forEach(t),fcr=r(sSe," \u2014 "),uW=n(sSe,"A",{href:!0});var Q2t=s(uW);mcr=r(Q2t,"TFLxmertModel"),Q2t.forEach(t),gcr=r(sSe," (LXMERT model)"),sSe.forEach(t),hcr=i(D),u7=n(D,"LI",{});var lSe=s(u7);C3e=n(lSe,"STRONG",{});var H2t=s(C3e);pcr=r(H2t,"marian"),H2t.forEach(t),_cr=r(lSe," \u2014 "),bW=n(lSe,"A",{href:!0});var U2t=s(bW);ucr=r(U2t,"TFMarianModel"),U2t.forEach(t),bcr=r(lSe," (Marian model)"),lSe.forEach(t),vcr=i(D),b7=n(D,"LI",{});var iSe=s(b7);w3e=n(iSe,"STRONG",{});var J2t=s(w3e);Fcr=r(J2t,"mbart"),J2t.forEach(t),Tcr=r(iSe," \u2014 "),vW=n(iSe,"A",{href:!0});var Y2t=s(vW);Mcr=r(Y2t,"TFMBartModel"),Y2t.forEach(t),Ecr=r(iSe," (mBART model)"),iSe.forEach(t),Ccr=i(D),v7=n(D,"LI",{});var dSe=s(v7);A3e=n(dSe,"STRONG",{});var K2t=s(A3e);wcr=r(K2t,"mobilebert"),K2t.forEach(t),Acr=r(dSe," \u2014 "),FW=n(dSe,"A",{href:!0});var Z2t=s(FW);ycr=r(Z2t,"TFMobileBertModel"),Z2t.forEach(t),Lcr=r(dSe," (MobileBERT model)"),dSe.forEach(t),xcr=i(D),F7=n(D,"LI",{});var cSe=s(F7);y3e=n(cSe,"STRONG",{});var evt=s(y3e);$cr=r(evt,"mpnet"),evt.forEach(t),kcr=r(cSe," \u2014 "),TW=n(cSe,"A",{href:!0});var ovt=s(TW);Scr=r(ovt,"TFMPNetModel"),ovt.forEach(t),Rcr=r(cSe," (MPNet model)"),cSe.forEach(t),Pcr=i(D),T7=n(D,"LI",{});var fSe=s(T7);L3e=n(fSe,"STRONG",{});var rvt=s(L3e);Bcr=r(rvt,"mt5"),rvt.forEach(t),Icr=r(fSe," \u2014 "),MW=n(fSe,"A",{href:!0});var tvt=s(MW);qcr=r(tvt,"TFMT5Model"),tvt.forEach(t),Ncr=r(fSe," (mT5 model)"),fSe.forEach(t),jcr=i(D),M7=n(D,"LI",{});var mSe=s(M7);x3e=n(mSe,"STRONG",{});var avt=s(x3e);Dcr=r(avt,"openai-gpt"),avt.forEach(t),Gcr=r(mSe," \u2014 "),EW=n(mSe,"A",{href:!0});var nvt=s(EW);Ocr=r(nvt,"TFOpenAIGPTModel"),nvt.forEach(t),Vcr=r(mSe," (OpenAI GPT model)"),mSe.forEach(t),Xcr=i(D),E7=n(D,"LI",{});var gSe=s(E7);$3e=n(gSe,"STRONG",{});var svt=s($3e);zcr=r(svt,"pegasus"),svt.forEach(t),Wcr=r(gSe," \u2014 "),CW=n(gSe,"A",{href:!0});var lvt=s(CW);Qcr=r(lvt,"TFPegasusModel"),lvt.forEach(t),Hcr=r(gSe," (Pegasus model)"),gSe.forEach(t),Ucr=i(D),C7=n(D,"LI",{});var hSe=s(C7);k3e=n(hSe,"STRONG",{});var ivt=s(k3e);Jcr=r(ivt,"rembert"),ivt.forEach(t),Ycr=r(hSe," \u2014 "),wW=n(hSe,"A",{href:!0});var dvt=s(wW);Kcr=r(dvt,"TFRemBertModel"),dvt.forEach(t),Zcr=r(hSe," (RemBERT model)"),hSe.forEach(t),efr=i(D),w7=n(D,"LI",{});var pSe=s(w7);S3e=n(pSe,"STRONG",{});var cvt=s(S3e);ofr=r(cvt,"roberta"),cvt.forEach(t),rfr=r(pSe," \u2014 "),AW=n(pSe,"A",{href:!0});var fvt=s(AW);tfr=r(fvt,"TFRobertaModel"),fvt.forEach(t),afr=r(pSe," (RoBERTa model)"),pSe.forEach(t),nfr=i(D),A7=n(D,"LI",{});var _Se=s(A7);R3e=n(_Se,"STRONG",{});var mvt=s(R3e);sfr=r(mvt,"roformer"),mvt.forEach(t),lfr=r(_Se," \u2014 "),yW=n(_Se,"A",{href:!0});var gvt=s(yW);ifr=r(gvt,"TFRoFormerModel"),gvt.forEach(t),dfr=r(_Se," (RoFormer model)"),_Se.forEach(t),cfr=i(D),y7=n(D,"LI",{});var uSe=s(y7);P3e=n(uSe,"STRONG",{});var hvt=s(P3e);ffr=r(hvt,"speech_to_text"),hvt.forEach(t),mfr=r(uSe," \u2014 "),LW=n(uSe,"A",{href:!0});var pvt=s(LW);gfr=r(pvt,"TFSpeech2TextModel"),pvt.forEach(t),hfr=r(uSe," (Speech2Text model)"),uSe.forEach(t),pfr=i(D),L7=n(D,"LI",{});var bSe=s(L7);B3e=n(bSe,"STRONG",{});var _vt=s(B3e);_fr=r(_vt,"swin"),_vt.forEach(t),ufr=r(bSe," \u2014 "),xW=n(bSe,"A",{href:!0});var uvt=s(xW);bfr=r(uvt,"TFSwinModel"),uvt.forEach(t),vfr=r(bSe," (Swin model)"),bSe.forEach(t),Ffr=i(D),x7=n(D,"LI",{});var vSe=s(x7);I3e=n(vSe,"STRONG",{});var bvt=s(I3e);Tfr=r(bvt,"t5"),bvt.forEach(t),Mfr=r(vSe," \u2014 "),$W=n(vSe,"A",{href:!0});var vvt=s($W);Efr=r(vvt,"TFT5Model"),vvt.forEach(t),Cfr=r(vSe," (T5 model)"),vSe.forEach(t),wfr=i(D),$7=n(D,"LI",{});var FSe=s($7);q3e=n(FSe,"STRONG",{});var Fvt=s(q3e);Afr=r(Fvt,"tapas"),Fvt.forEach(t),yfr=r(FSe," \u2014 "),kW=n(FSe,"A",{href:!0});var Tvt=s(kW);Lfr=r(Tvt,"TFTapasModel"),Tvt.forEach(t),xfr=r(FSe," (TAPAS model)"),FSe.forEach(t),$fr=i(D),k7=n(D,"LI",{});var TSe=s(k7);N3e=n(TSe,"STRONG",{});var Mvt=s(N3e);kfr=r(Mvt,"transfo-xl"),Mvt.forEach(t),Sfr=r(TSe," \u2014 "),SW=n(TSe,"A",{href:!0});var Evt=s(SW);Rfr=r(Evt,"TFTransfoXLModel"),Evt.forEach(t),Pfr=r(TSe," (Transformer-XL model)"),TSe.forEach(t),Bfr=i(D),S7=n(D,"LI",{});var MSe=s(S7);j3e=n(MSe,"STRONG",{});var Cvt=s(j3e);Ifr=r(Cvt,"vit"),Cvt.forEach(t),qfr=r(MSe," \u2014 "),RW=n(MSe,"A",{href:!0});var wvt=s(RW);Nfr=r(wvt,"TFViTModel"),wvt.forEach(t),jfr=r(MSe," (ViT model)"),MSe.forEach(t),Dfr=i(D),R7=n(D,"LI",{});var ESe=s(R7);D3e=n(ESe,"STRONG",{});var Avt=s(D3e);Gfr=r(Avt,"vit_mae"),Avt.forEach(t),Ofr=r(ESe," \u2014 "),PW=n(ESe,"A",{href:!0});var yvt=s(PW);Vfr=r(yvt,"TFViTMAEModel"),yvt.forEach(t),Xfr=r(ESe," (ViTMAE model)"),ESe.forEach(t),zfr=i(D),P7=n(D,"LI",{});var CSe=s(P7);G3e=n(CSe,"STRONG",{});var Lvt=s(G3e);Wfr=r(Lvt,"wav2vec2"),Lvt.forEach(t),Qfr=r(CSe," \u2014 "),BW=n(CSe,"A",{href:!0});var xvt=s(BW);Hfr=r(xvt,"TFWav2Vec2Model"),xvt.forEach(t),Ufr=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),Jfr=i(D),B7=n(D,"LI",{});var wSe=s(B7);O3e=n(wSe,"STRONG",{});var $vt=s(O3e);Yfr=r($vt,"xlm"),$vt.forEach(t),Kfr=r(wSe," \u2014 "),IW=n(wSe,"A",{href:!0});var kvt=s(IW);Zfr=r(kvt,"TFXLMModel"),kvt.forEach(t),emr=r(wSe," (XLM model)"),wSe.forEach(t),omr=i(D),I7=n(D,"LI",{});var ASe=s(I7);V3e=n(ASe,"STRONG",{});var Svt=s(V3e);rmr=r(Svt,"xlm-roberta"),Svt.forEach(t),tmr=r(ASe," \u2014 "),qW=n(ASe,"A",{href:!0});var Rvt=s(qW);amr=r(Rvt,"TFXLMRobertaModel"),Rvt.forEach(t),nmr=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),smr=i(D),q7=n(D,"LI",{});var ySe=s(q7);X3e=n(ySe,"STRONG",{});var Pvt=s(X3e);lmr=r(Pvt,"xlnet"),Pvt.forEach(t),imr=r(ySe," \u2014 "),NW=n(ySe,"A",{href:!0});var Bvt=s(NW);dmr=r(Bvt,"TFXLNetModel"),Bvt.forEach(t),cmr=r(ySe," (XLNet model)"),ySe.forEach(t),D.forEach(t),fmr=i(hl),T(N7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),yNe=i(f),Xd=n(f,"H2",{class:!0});var RDe=s(Xd);j7=n(RDe,"A",{id:!0,class:!0,href:!0});var Ivt=s(j7);z3e=n(Ivt,"SPAN",{});var qvt=s(z3e);T(n8.$$.fragment,qvt),qvt.forEach(t),Ivt.forEach(t),mmr=i(RDe),W3e=n(RDe,"SPAN",{});var Nvt=s(W3e);gmr=r(Nvt,"TFAutoModelForPreTraining"),Nvt.forEach(t),RDe.forEach(t),LNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(s8.$$.fragment,pl),hmr=i(pl),zd=n(pl,"P",{});var HZ=s(zd);pmr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jW=n(HZ,"A",{href:!0});var jvt=s(jW);_mr=r(jvt,"from_pretrained()"),jvt.forEach(t),umr=r(HZ," class method or the "),DW=n(HZ,"A",{href:!0});var Dvt=s(DW);bmr=r(Dvt,"from_config()"),Dvt.forEach(t),vmr=r(HZ,` class
method.`),HZ.forEach(t),Fmr=i(pl),l8=n(pl,"P",{});var PDe=s(l8);Tmr=r(PDe,"This class cannot be instantiated directly using "),Q3e=n(PDe,"CODE",{});var Gvt=s(Q3e);Mmr=r(Gvt,"__init__()"),Gvt.forEach(t),Emr=r(PDe," (throws an error)."),PDe.forEach(t),Cmr=i(pl),Lt=n(pl,"DIV",{class:!0});var bA=s(Lt);T(i8.$$.fragment,bA),wmr=i(bA),H3e=n(bA,"P",{});var Ovt=s(H3e);Amr=r(Ovt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ovt.forEach(t),ymr=i(bA),Wd=n(bA,"P",{});var UZ=s(Wd);Lmr=r(UZ,`Note:
Loading a model from its configuration file does `),U3e=n(UZ,"STRONG",{});var Vvt=s(U3e);xmr=r(Vvt,"not"),Vvt.forEach(t),$mr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(UZ,"A",{href:!0});var Xvt=s(GW);kmr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Smr=r(UZ," to load the model weights."),UZ.forEach(t),Rmr=i(bA),T(D7.$$.fragment,bA),bA.forEach(t),Pmr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(d8.$$.fragment,_l),Bmr=i(_l),J3e=n(_l,"P",{});var zvt=s(J3e);Imr=r(zvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zvt.forEach(t),qmr=i(_l),Za=n(_l,"P",{});var vA=s(Za);Nmr=r(vA,"The model class to instantiate is selected based on the "),Y3e=n(vA,"CODE",{});var Wvt=s(Y3e);jmr=r(Wvt,"model_type"),Wvt.forEach(t),Dmr=r(vA,` property of the config object (either
passed as an argument or loaded from `),K3e=n(vA,"CODE",{});var Qvt=s(K3e);Gmr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),Omr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(vA,"CODE",{});var Hvt=s(Z3e);Vmr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),Xmr=r(vA,":"),vA.forEach(t),zmr=i(_l),se=n(_l,"UL",{});var le=s(se);G7=n(le,"LI",{});var LSe=s(G7);ebe=n(LSe,"STRONG",{});var Uvt=s(ebe);Wmr=r(Uvt,"albert"),Uvt.forEach(t),Qmr=r(LSe," \u2014 "),OW=n(LSe,"A",{href:!0});var Jvt=s(OW);Hmr=r(Jvt,"TFAlbertForPreTraining"),Jvt.forEach(t),Umr=r(LSe," (ALBERT model)"),LSe.forEach(t),Jmr=i(le),O7=n(le,"LI",{});var xSe=s(O7);obe=n(xSe,"STRONG",{});var Yvt=s(obe);Ymr=r(Yvt,"bart"),Yvt.forEach(t),Kmr=r(xSe," \u2014 "),VW=n(xSe,"A",{href:!0});var Kvt=s(VW);Zmr=r(Kvt,"TFBartForConditionalGeneration"),Kvt.forEach(t),egr=r(xSe," (BART model)"),xSe.forEach(t),ogr=i(le),V7=n(le,"LI",{});var $Se=s(V7);rbe=n($Se,"STRONG",{});var Zvt=s(rbe);rgr=r(Zvt,"bert"),Zvt.forEach(t),tgr=r($Se," \u2014 "),XW=n($Se,"A",{href:!0});var eFt=s(XW);agr=r(eFt,"TFBertForPreTraining"),eFt.forEach(t),ngr=r($Se," (BERT model)"),$Se.forEach(t),sgr=i(le),X7=n(le,"LI",{});var kSe=s(X7);tbe=n(kSe,"STRONG",{});var oFt=s(tbe);lgr=r(oFt,"camembert"),oFt.forEach(t),igr=r(kSe," \u2014 "),zW=n(kSe,"A",{href:!0});var rFt=s(zW);dgr=r(rFt,"TFCamembertForMaskedLM"),rFt.forEach(t),cgr=r(kSe," (CamemBERT model)"),kSe.forEach(t),fgr=i(le),z7=n(le,"LI",{});var SSe=s(z7);abe=n(SSe,"STRONG",{});var tFt=s(abe);mgr=r(tFt,"ctrl"),tFt.forEach(t),ggr=r(SSe," \u2014 "),WW=n(SSe,"A",{href:!0});var aFt=s(WW);hgr=r(aFt,"TFCTRLLMHeadModel"),aFt.forEach(t),pgr=r(SSe," (CTRL model)"),SSe.forEach(t),_gr=i(le),W7=n(le,"LI",{});var RSe=s(W7);nbe=n(RSe,"STRONG",{});var nFt=s(nbe);ugr=r(nFt,"distilbert"),nFt.forEach(t),bgr=r(RSe," \u2014 "),QW=n(RSe,"A",{href:!0});var sFt=s(QW);vgr=r(sFt,"TFDistilBertForMaskedLM"),sFt.forEach(t),Fgr=r(RSe," (DistilBERT model)"),RSe.forEach(t),Tgr=i(le),Q7=n(le,"LI",{});var PSe=s(Q7);sbe=n(PSe,"STRONG",{});var lFt=s(sbe);Mgr=r(lFt,"electra"),lFt.forEach(t),Egr=r(PSe," \u2014 "),HW=n(PSe,"A",{href:!0});var iFt=s(HW);Cgr=r(iFt,"TFElectraForPreTraining"),iFt.forEach(t),wgr=r(PSe," (ELECTRA model)"),PSe.forEach(t),Agr=i(le),H7=n(le,"LI",{});var BSe=s(H7);lbe=n(BSe,"STRONG",{});var dFt=s(lbe);ygr=r(dFt,"flaubert"),dFt.forEach(t),Lgr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var cFt=s(UW);xgr=r(cFt,"TFFlaubertWithLMHeadModel"),cFt.forEach(t),$gr=r(BSe," (FlauBERT model)"),BSe.forEach(t),kgr=i(le),U7=n(le,"LI",{});var ISe=s(U7);ibe=n(ISe,"STRONG",{});var fFt=s(ibe);Sgr=r(fFt,"funnel"),fFt.forEach(t),Rgr=r(ISe," \u2014 "),JW=n(ISe,"A",{href:!0});var mFt=s(JW);Pgr=r(mFt,"TFFunnelForPreTraining"),mFt.forEach(t),Bgr=r(ISe," (Funnel Transformer model)"),ISe.forEach(t),Igr=i(le),J7=n(le,"LI",{});var qSe=s(J7);dbe=n(qSe,"STRONG",{});var gFt=s(dbe);qgr=r(gFt,"gpt2"),gFt.forEach(t),Ngr=r(qSe," \u2014 "),YW=n(qSe,"A",{href:!0});var hFt=s(YW);jgr=r(hFt,"TFGPT2LMHeadModel"),hFt.forEach(t),Dgr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),Ggr=i(le),Y7=n(le,"LI",{});var NSe=s(Y7);cbe=n(NSe,"STRONG",{});var pFt=s(cbe);Ogr=r(pFt,"layoutlm"),pFt.forEach(t),Vgr=r(NSe," \u2014 "),KW=n(NSe,"A",{href:!0});var _Ft=s(KW);Xgr=r(_Ft,"TFLayoutLMForMaskedLM"),_Ft.forEach(t),zgr=r(NSe," (LayoutLM model)"),NSe.forEach(t),Wgr=i(le),K7=n(le,"LI",{});var jSe=s(K7);fbe=n(jSe,"STRONG",{});var uFt=s(fbe);Qgr=r(uFt,"lxmert"),uFt.forEach(t),Hgr=r(jSe," \u2014 "),ZW=n(jSe,"A",{href:!0});var bFt=s(ZW);Ugr=r(bFt,"TFLxmertForPreTraining"),bFt.forEach(t),Jgr=r(jSe," (LXMERT model)"),jSe.forEach(t),Ygr=i(le),Z7=n(le,"LI",{});var DSe=s(Z7);mbe=n(DSe,"STRONG",{});var vFt=s(mbe);Kgr=r(vFt,"mobilebert"),vFt.forEach(t),Zgr=r(DSe," \u2014 "),eQ=n(DSe,"A",{href:!0});var FFt=s(eQ);ehr=r(FFt,"TFMobileBertForPreTraining"),FFt.forEach(t),ohr=r(DSe," (MobileBERT model)"),DSe.forEach(t),rhr=i(le),eM=n(le,"LI",{});var GSe=s(eM);gbe=n(GSe,"STRONG",{});var TFt=s(gbe);thr=r(TFt,"mpnet"),TFt.forEach(t),ahr=r(GSe," \u2014 "),oQ=n(GSe,"A",{href:!0});var MFt=s(oQ);nhr=r(MFt,"TFMPNetForMaskedLM"),MFt.forEach(t),shr=r(GSe," (MPNet model)"),GSe.forEach(t),lhr=i(le),oM=n(le,"LI",{});var OSe=s(oM);hbe=n(OSe,"STRONG",{});var EFt=s(hbe);ihr=r(EFt,"openai-gpt"),EFt.forEach(t),dhr=r(OSe," \u2014 "),rQ=n(OSe,"A",{href:!0});var CFt=s(rQ);chr=r(CFt,"TFOpenAIGPTLMHeadModel"),CFt.forEach(t),fhr=r(OSe," (OpenAI GPT model)"),OSe.forEach(t),mhr=i(le),rM=n(le,"LI",{});var VSe=s(rM);pbe=n(VSe,"STRONG",{});var wFt=s(pbe);ghr=r(wFt,"roberta"),wFt.forEach(t),hhr=r(VSe," \u2014 "),tQ=n(VSe,"A",{href:!0});var AFt=s(tQ);phr=r(AFt,"TFRobertaForMaskedLM"),AFt.forEach(t),_hr=r(VSe," (RoBERTa model)"),VSe.forEach(t),uhr=i(le),tM=n(le,"LI",{});var XSe=s(tM);_be=n(XSe,"STRONG",{});var yFt=s(_be);bhr=r(yFt,"t5"),yFt.forEach(t),vhr=r(XSe," \u2014 "),aQ=n(XSe,"A",{href:!0});var LFt=s(aQ);Fhr=r(LFt,"TFT5ForConditionalGeneration"),LFt.forEach(t),Thr=r(XSe," (T5 model)"),XSe.forEach(t),Mhr=i(le),aM=n(le,"LI",{});var zSe=s(aM);ube=n(zSe,"STRONG",{});var xFt=s(ube);Ehr=r(xFt,"tapas"),xFt.forEach(t),Chr=r(zSe," \u2014 "),nQ=n(zSe,"A",{href:!0});var $Ft=s(nQ);whr=r($Ft,"TFTapasForMaskedLM"),$Ft.forEach(t),Ahr=r(zSe," (TAPAS model)"),zSe.forEach(t),yhr=i(le),nM=n(le,"LI",{});var WSe=s(nM);bbe=n(WSe,"STRONG",{});var kFt=s(bbe);Lhr=r(kFt,"transfo-xl"),kFt.forEach(t),xhr=r(WSe," \u2014 "),sQ=n(WSe,"A",{href:!0});var SFt=s(sQ);$hr=r(SFt,"TFTransfoXLLMHeadModel"),SFt.forEach(t),khr=r(WSe," (Transformer-XL model)"),WSe.forEach(t),Shr=i(le),sM=n(le,"LI",{});var QSe=s(sM);vbe=n(QSe,"STRONG",{});var RFt=s(vbe);Rhr=r(RFt,"vit_mae"),RFt.forEach(t),Phr=r(QSe," \u2014 "),lQ=n(QSe,"A",{href:!0});var PFt=s(lQ);Bhr=r(PFt,"TFViTMAEForPreTraining"),PFt.forEach(t),Ihr=r(QSe," (ViTMAE model)"),QSe.forEach(t),qhr=i(le),lM=n(le,"LI",{});var HSe=s(lM);Fbe=n(HSe,"STRONG",{});var BFt=s(Fbe);Nhr=r(BFt,"xlm"),BFt.forEach(t),jhr=r(HSe," \u2014 "),iQ=n(HSe,"A",{href:!0});var IFt=s(iQ);Dhr=r(IFt,"TFXLMWithLMHeadModel"),IFt.forEach(t),Ghr=r(HSe," (XLM model)"),HSe.forEach(t),Ohr=i(le),iM=n(le,"LI",{});var USe=s(iM);Tbe=n(USe,"STRONG",{});var qFt=s(Tbe);Vhr=r(qFt,"xlm-roberta"),qFt.forEach(t),Xhr=r(USe," \u2014 "),dQ=n(USe,"A",{href:!0});var NFt=s(dQ);zhr=r(NFt,"TFXLMRobertaForMaskedLM"),NFt.forEach(t),Whr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),Qhr=i(le),dM=n(le,"LI",{});var JSe=s(dM);Mbe=n(JSe,"STRONG",{});var jFt=s(Mbe);Hhr=r(jFt,"xlnet"),jFt.forEach(t),Uhr=r(JSe," \u2014 "),cQ=n(JSe,"A",{href:!0});var DFt=s(cQ);Jhr=r(DFt,"TFXLNetLMHeadModel"),DFt.forEach(t),Yhr=r(JSe," (XLNet model)"),JSe.forEach(t),le.forEach(t),Khr=i(_l),T(cM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),xNe=i(f),Qd=n(f,"H2",{class:!0});var BDe=s(Qd);fM=n(BDe,"A",{id:!0,class:!0,href:!0});var GFt=s(fM);Ebe=n(GFt,"SPAN",{});var OFt=s(Ebe);T(c8.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),Zhr=i(BDe),Cbe=n(BDe,"SPAN",{});var VFt=s(Cbe);epr=r(VFt,"TFAutoModelForCausalLM"),VFt.forEach(t),BDe.forEach(t),$Ne=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(f8.$$.fragment,ul),opr=i(ul),Hd=n(ul,"P",{});var JZ=s(Hd);rpr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fQ=n(JZ,"A",{href:!0});var XFt=s(fQ);tpr=r(XFt,"from_pretrained()"),XFt.forEach(t),apr=r(JZ," class method or the "),mQ=n(JZ,"A",{href:!0});var zFt=s(mQ);npr=r(zFt,"from_config()"),zFt.forEach(t),spr=r(JZ,` class
method.`),JZ.forEach(t),lpr=i(ul),m8=n(ul,"P",{});var IDe=s(m8);ipr=r(IDe,"This class cannot be instantiated directly using "),wbe=n(IDe,"CODE",{});var WFt=s(wbe);dpr=r(WFt,"__init__()"),WFt.forEach(t),cpr=r(IDe," (throws an error)."),IDe.forEach(t),fpr=i(ul),xt=n(ul,"DIV",{class:!0});var FA=s(xt);T(g8.$$.fragment,FA),mpr=i(FA),Abe=n(FA,"P",{});var QFt=s(Abe);gpr=r(QFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QFt.forEach(t),hpr=i(FA),Ud=n(FA,"P",{});var YZ=s(Ud);ppr=r(YZ,`Note:
Loading a model from its configuration file does `),ybe=n(YZ,"STRONG",{});var HFt=s(ybe);_pr=r(HFt,"not"),HFt.forEach(t),upr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(YZ,"A",{href:!0});var UFt=s(gQ);bpr=r(UFt,"from_pretrained()"),UFt.forEach(t),vpr=r(YZ," to load the model weights."),YZ.forEach(t),Fpr=i(FA),T(mM.$$.fragment,FA),FA.forEach(t),Tpr=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(h8.$$.fragment,bl),Mpr=i(bl),Lbe=n(bl,"P",{});var JFt=s(Lbe);Epr=r(JFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JFt.forEach(t),Cpr=i(bl),en=n(bl,"P",{});var TA=s(en);wpr=r(TA,"The model class to instantiate is selected based on the "),xbe=n(TA,"CODE",{});var YFt=s(xbe);Apr=r(YFt,"model_type"),YFt.forEach(t),ypr=r(TA,` property of the config object (either
passed as an argument or loaded from `),$be=n(TA,"CODE",{});var KFt=s($be);Lpr=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),xpr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(TA,"CODE",{});var ZFt=s(kbe);$pr=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),kpr=r(TA,":"),TA.forEach(t),Spr=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);gM=n(Ce,"LI",{});var YSe=s(gM);Sbe=n(YSe,"STRONG",{});var eTt=s(Sbe);Rpr=r(eTt,"bert"),eTt.forEach(t),Ppr=r(YSe," \u2014 "),hQ=n(YSe,"A",{href:!0});var oTt=s(hQ);Bpr=r(oTt,"TFBertLMHeadModel"),oTt.forEach(t),Ipr=r(YSe," (BERT model)"),YSe.forEach(t),qpr=i(Ce),hM=n(Ce,"LI",{});var KSe=s(hM);Rbe=n(KSe,"STRONG",{});var rTt=s(Rbe);Npr=r(rTt,"camembert"),rTt.forEach(t),jpr=r(KSe," \u2014 "),pQ=n(KSe,"A",{href:!0});var tTt=s(pQ);Dpr=r(tTt,"TFCamembertForCausalLM"),tTt.forEach(t),Gpr=r(KSe," (CamemBERT model)"),KSe.forEach(t),Opr=i(Ce),pM=n(Ce,"LI",{});var ZSe=s(pM);Pbe=n(ZSe,"STRONG",{});var aTt=s(Pbe);Vpr=r(aTt,"ctrl"),aTt.forEach(t),Xpr=r(ZSe," \u2014 "),_Q=n(ZSe,"A",{href:!0});var nTt=s(_Q);zpr=r(nTt,"TFCTRLLMHeadModel"),nTt.forEach(t),Wpr=r(ZSe," (CTRL model)"),ZSe.forEach(t),Qpr=i(Ce),_M=n(Ce,"LI",{});var eRe=s(_M);Bbe=n(eRe,"STRONG",{});var sTt=s(Bbe);Hpr=r(sTt,"gpt2"),sTt.forEach(t),Upr=r(eRe," \u2014 "),uQ=n(eRe,"A",{href:!0});var lTt=s(uQ);Jpr=r(lTt,"TFGPT2LMHeadModel"),lTt.forEach(t),Ypr=r(eRe," (OpenAI GPT-2 model)"),eRe.forEach(t),Kpr=i(Ce),uM=n(Ce,"LI",{});var oRe=s(uM);Ibe=n(oRe,"STRONG",{});var iTt=s(Ibe);Zpr=r(iTt,"gptj"),iTt.forEach(t),e_r=r(oRe," \u2014 "),bQ=n(oRe,"A",{href:!0});var dTt=s(bQ);o_r=r(dTt,"TFGPTJForCausalLM"),dTt.forEach(t),r_r=r(oRe," (GPT-J model)"),oRe.forEach(t),t_r=i(Ce),bM=n(Ce,"LI",{});var rRe=s(bM);qbe=n(rRe,"STRONG",{});var cTt=s(qbe);a_r=r(cTt,"openai-gpt"),cTt.forEach(t),n_r=r(rRe," \u2014 "),vQ=n(rRe,"A",{href:!0});var fTt=s(vQ);s_r=r(fTt,"TFOpenAIGPTLMHeadModel"),fTt.forEach(t),l_r=r(rRe," (OpenAI GPT model)"),rRe.forEach(t),i_r=i(Ce),vM=n(Ce,"LI",{});var tRe=s(vM);Nbe=n(tRe,"STRONG",{});var mTt=s(Nbe);d_r=r(mTt,"rembert"),mTt.forEach(t),c_r=r(tRe," \u2014 "),FQ=n(tRe,"A",{href:!0});var gTt=s(FQ);f_r=r(gTt,"TFRemBertForCausalLM"),gTt.forEach(t),m_r=r(tRe," (RemBERT model)"),tRe.forEach(t),g_r=i(Ce),FM=n(Ce,"LI",{});var aRe=s(FM);jbe=n(aRe,"STRONG",{});var hTt=s(jbe);h_r=r(hTt,"roberta"),hTt.forEach(t),p_r=r(aRe," \u2014 "),TQ=n(aRe,"A",{href:!0});var pTt=s(TQ);__r=r(pTt,"TFRobertaForCausalLM"),pTt.forEach(t),u_r=r(aRe," (RoBERTa model)"),aRe.forEach(t),b_r=i(Ce),TM=n(Ce,"LI",{});var nRe=s(TM);Dbe=n(nRe,"STRONG",{});var _Tt=s(Dbe);v_r=r(_Tt,"roformer"),_Tt.forEach(t),F_r=r(nRe," \u2014 "),MQ=n(nRe,"A",{href:!0});var uTt=s(MQ);T_r=r(uTt,"TFRoFormerForCausalLM"),uTt.forEach(t),M_r=r(nRe," (RoFormer model)"),nRe.forEach(t),E_r=i(Ce),MM=n(Ce,"LI",{});var sRe=s(MM);Gbe=n(sRe,"STRONG",{});var bTt=s(Gbe);C_r=r(bTt,"transfo-xl"),bTt.forEach(t),w_r=r(sRe," \u2014 "),EQ=n(sRe,"A",{href:!0});var vTt=s(EQ);A_r=r(vTt,"TFTransfoXLLMHeadModel"),vTt.forEach(t),y_r=r(sRe," (Transformer-XL model)"),sRe.forEach(t),L_r=i(Ce),EM=n(Ce,"LI",{});var lRe=s(EM);Obe=n(lRe,"STRONG",{});var FTt=s(Obe);x_r=r(FTt,"xlm"),FTt.forEach(t),$_r=r(lRe," \u2014 "),CQ=n(lRe,"A",{href:!0});var TTt=s(CQ);k_r=r(TTt,"TFXLMWithLMHeadModel"),TTt.forEach(t),S_r=r(lRe," (XLM model)"),lRe.forEach(t),R_r=i(Ce),CM=n(Ce,"LI",{});var iRe=s(CM);Vbe=n(iRe,"STRONG",{});var MTt=s(Vbe);P_r=r(MTt,"xlnet"),MTt.forEach(t),B_r=r(iRe," \u2014 "),wQ=n(iRe,"A",{href:!0});var ETt=s(wQ);I_r=r(ETt,"TFXLNetLMHeadModel"),ETt.forEach(t),q_r=r(iRe," (XLNet model)"),iRe.forEach(t),Ce.forEach(t),N_r=i(bl),T(wM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),kNe=i(f),Jd=n(f,"H2",{class:!0});var qDe=s(Jd);AM=n(qDe,"A",{id:!0,class:!0,href:!0});var CTt=s(AM);Xbe=n(CTt,"SPAN",{});var wTt=s(Xbe);T(p8.$$.fragment,wTt),wTt.forEach(t),CTt.forEach(t),j_r=i(qDe),zbe=n(qDe,"SPAN",{});var ATt=s(zbe);D_r=r(ATt,"TFAutoModelForImageClassification"),ATt.forEach(t),qDe.forEach(t),SNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(_8.$$.fragment,vl),G_r=i(vl),Yd=n(vl,"P",{});var KZ=s(Yd);O_r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AQ=n(KZ,"A",{href:!0});var yTt=s(AQ);V_r=r(yTt,"from_pretrained()"),yTt.forEach(t),X_r=r(KZ," class method or the "),yQ=n(KZ,"A",{href:!0});var LTt=s(yQ);z_r=r(LTt,"from_config()"),LTt.forEach(t),W_r=r(KZ,` class
method.`),KZ.forEach(t),Q_r=i(vl),u8=n(vl,"P",{});var NDe=s(u8);H_r=r(NDe,"This class cannot be instantiated directly using "),Wbe=n(NDe,"CODE",{});var xTt=s(Wbe);U_r=r(xTt,"__init__()"),xTt.forEach(t),J_r=r(NDe," (throws an error)."),NDe.forEach(t),Y_r=i(vl),$t=n(vl,"DIV",{class:!0});var MA=s($t);T(b8.$$.fragment,MA),K_r=i(MA),Qbe=n(MA,"P",{});var $Tt=s(Qbe);Z_r=r($Tt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Tt.forEach(t),eur=i(MA),Kd=n(MA,"P",{});var ZZ=s(Kd);our=r(ZZ,`Note:
Loading a model from its configuration file does `),Hbe=n(ZZ,"STRONG",{});var kTt=s(Hbe);rur=r(kTt,"not"),kTt.forEach(t),tur=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(ZZ,"A",{href:!0});var STt=s(LQ);aur=r(STt,"from_pretrained()"),STt.forEach(t),nur=r(ZZ," to load the model weights."),ZZ.forEach(t),sur=i(MA),T(yM.$$.fragment,MA),MA.forEach(t),lur=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(v8.$$.fragment,Fl),iur=i(Fl),Ube=n(Fl,"P",{});var RTt=s(Ube);dur=r(RTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RTt.forEach(t),cur=i(Fl),on=n(Fl,"P",{});var EA=s(on);fur=r(EA,"The model class to instantiate is selected based on the "),Jbe=n(EA,"CODE",{});var PTt=s(Jbe);mur=r(PTt,"model_type"),PTt.forEach(t),gur=r(EA,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(EA,"CODE",{});var BTt=s(Ybe);hur=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),pur=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(EA,"CODE",{});var ITt=s(Kbe);_ur=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),uur=r(EA,":"),EA.forEach(t),bur=i(Fl),rn=n(Fl,"UL",{});var CA=s(rn);LM=n(CA,"LI",{});var dRe=s(LM);Zbe=n(dRe,"STRONG",{});var qTt=s(Zbe);vur=r(qTt,"convnext"),qTt.forEach(t),Fur=r(dRe," \u2014 "),xQ=n(dRe,"A",{href:!0});var NTt=s(xQ);Tur=r(NTt,"TFConvNextForImageClassification"),NTt.forEach(t),Mur=r(dRe," (ConvNext model)"),dRe.forEach(t),Eur=i(CA),xM=n(CA,"LI",{});var cRe=s(xM);e2e=n(cRe,"STRONG",{});var jTt=s(e2e);Cur=r(jTt,"data2vec-vision"),jTt.forEach(t),wur=r(cRe," \u2014 "),$Q=n(cRe,"A",{href:!0});var DTt=s($Q);Aur=r(DTt,"TFData2VecVisionForImageClassification"),DTt.forEach(t),yur=r(cRe," (Data2VecVision model)"),cRe.forEach(t),Lur=i(CA),$M=n(CA,"LI",{});var fRe=s($M);o2e=n(fRe,"STRONG",{});var GTt=s(o2e);xur=r(GTt,"swin"),GTt.forEach(t),$ur=r(fRe," \u2014 "),kQ=n(fRe,"A",{href:!0});var OTt=s(kQ);kur=r(OTt,"TFSwinForImageClassification"),OTt.forEach(t),Sur=r(fRe," (Swin model)"),fRe.forEach(t),Rur=i(CA),kM=n(CA,"LI",{});var mRe=s(kM);r2e=n(mRe,"STRONG",{});var VTt=s(r2e);Pur=r(VTt,"vit"),VTt.forEach(t),Bur=r(mRe," \u2014 "),SQ=n(mRe,"A",{href:!0});var XTt=s(SQ);Iur=r(XTt,"TFViTForImageClassification"),XTt.forEach(t),qur=r(mRe," (ViT model)"),mRe.forEach(t),CA.forEach(t),Nur=i(Fl),T(SM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),RNe=i(f),Zd=n(f,"H2",{class:!0});var jDe=s(Zd);RM=n(jDe,"A",{id:!0,class:!0,href:!0});var zTt=s(RM);t2e=n(zTt,"SPAN",{});var WTt=s(t2e);T(F8.$$.fragment,WTt),WTt.forEach(t),zTt.forEach(t),jur=i(jDe),a2e=n(jDe,"SPAN",{});var QTt=s(a2e);Dur=r(QTt,"TFAutoModelForMaskedLM"),QTt.forEach(t),jDe.forEach(t),PNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(T8.$$.fragment,Tl),Gur=i(Tl),ec=n(Tl,"P",{});var eee=s(ec);Our=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RQ=n(eee,"A",{href:!0});var HTt=s(RQ);Vur=r(HTt,"from_pretrained()"),HTt.forEach(t),Xur=r(eee," class method or the "),PQ=n(eee,"A",{href:!0});var UTt=s(PQ);zur=r(UTt,"from_config()"),UTt.forEach(t),Wur=r(eee,` class
method.`),eee.forEach(t),Qur=i(Tl),M8=n(Tl,"P",{});var DDe=s(M8);Hur=r(DDe,"This class cannot be instantiated directly using "),n2e=n(DDe,"CODE",{});var JTt=s(n2e);Uur=r(JTt,"__init__()"),JTt.forEach(t),Jur=r(DDe," (throws an error)."),DDe.forEach(t),Yur=i(Tl),kt=n(Tl,"DIV",{class:!0});var wA=s(kt);T(E8.$$.fragment,wA),Kur=i(wA),s2e=n(wA,"P",{});var YTt=s(s2e);Zur=r(YTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YTt.forEach(t),e1r=i(wA),oc=n(wA,"P",{});var oee=s(oc);o1r=r(oee,`Note:
Loading a model from its configuration file does `),l2e=n(oee,"STRONG",{});var KTt=s(l2e);r1r=r(KTt,"not"),KTt.forEach(t),t1r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(oee,"A",{href:!0});var ZTt=s(BQ);a1r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),n1r=r(oee," to load the model weights."),oee.forEach(t),s1r=i(wA),T(PM.$$.fragment,wA),wA.forEach(t),l1r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(C8.$$.fragment,Ml),i1r=i(Ml),i2e=n(Ml,"P",{});var e7t=s(i2e);d1r=r(e7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e7t.forEach(t),c1r=i(Ml),tn=n(Ml,"P",{});var AA=s(tn);f1r=r(AA,"The model class to instantiate is selected based on the "),d2e=n(AA,"CODE",{});var o7t=s(d2e);m1r=r(o7t,"model_type"),o7t.forEach(t),g1r=r(AA,` property of the config object (either
passed as an argument or loaded from `),c2e=n(AA,"CODE",{});var r7t=s(c2e);h1r=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),p1r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(AA,"CODE",{});var t7t=s(f2e);_1r=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),u1r=r(AA,":"),AA.forEach(t),b1r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);BM=n(fe,"LI",{});var gRe=s(BM);m2e=n(gRe,"STRONG",{});var a7t=s(m2e);v1r=r(a7t,"albert"),a7t.forEach(t),F1r=r(gRe," \u2014 "),IQ=n(gRe,"A",{href:!0});var n7t=s(IQ);T1r=r(n7t,"TFAlbertForMaskedLM"),n7t.forEach(t),M1r=r(gRe," (ALBERT model)"),gRe.forEach(t),E1r=i(fe),IM=n(fe,"LI",{});var hRe=s(IM);g2e=n(hRe,"STRONG",{});var s7t=s(g2e);C1r=r(s7t,"bert"),s7t.forEach(t),w1r=r(hRe," \u2014 "),qQ=n(hRe,"A",{href:!0});var l7t=s(qQ);A1r=r(l7t,"TFBertForMaskedLM"),l7t.forEach(t),y1r=r(hRe," (BERT model)"),hRe.forEach(t),L1r=i(fe),qM=n(fe,"LI",{});var pRe=s(qM);h2e=n(pRe,"STRONG",{});var i7t=s(h2e);x1r=r(i7t,"camembert"),i7t.forEach(t),$1r=r(pRe," \u2014 "),NQ=n(pRe,"A",{href:!0});var d7t=s(NQ);k1r=r(d7t,"TFCamembertForMaskedLM"),d7t.forEach(t),S1r=r(pRe," (CamemBERT model)"),pRe.forEach(t),R1r=i(fe),NM=n(fe,"LI",{});var _Re=s(NM);p2e=n(_Re,"STRONG",{});var c7t=s(p2e);P1r=r(c7t,"convbert"),c7t.forEach(t),B1r=r(_Re," \u2014 "),jQ=n(_Re,"A",{href:!0});var f7t=s(jQ);I1r=r(f7t,"TFConvBertForMaskedLM"),f7t.forEach(t),q1r=r(_Re," (ConvBERT model)"),_Re.forEach(t),N1r=i(fe),jM=n(fe,"LI",{});var uRe=s(jM);_2e=n(uRe,"STRONG",{});var m7t=s(_2e);j1r=r(m7t,"deberta"),m7t.forEach(t),D1r=r(uRe," \u2014 "),DQ=n(uRe,"A",{href:!0});var g7t=s(DQ);G1r=r(g7t,"TFDebertaForMaskedLM"),g7t.forEach(t),O1r=r(uRe," (DeBERTa model)"),uRe.forEach(t),V1r=i(fe),DM=n(fe,"LI",{});var bRe=s(DM);u2e=n(bRe,"STRONG",{});var h7t=s(u2e);X1r=r(h7t,"deberta-v2"),h7t.forEach(t),z1r=r(bRe," \u2014 "),GQ=n(bRe,"A",{href:!0});var p7t=s(GQ);W1r=r(p7t,"TFDebertaV2ForMaskedLM"),p7t.forEach(t),Q1r=r(bRe," (DeBERTa-v2 model)"),bRe.forEach(t),H1r=i(fe),GM=n(fe,"LI",{});var vRe=s(GM);b2e=n(vRe,"STRONG",{});var _7t=s(b2e);U1r=r(_7t,"distilbert"),_7t.forEach(t),J1r=r(vRe," \u2014 "),OQ=n(vRe,"A",{href:!0});var u7t=s(OQ);Y1r=r(u7t,"TFDistilBertForMaskedLM"),u7t.forEach(t),K1r=r(vRe," (DistilBERT model)"),vRe.forEach(t),Z1r=i(fe),OM=n(fe,"LI",{});var FRe=s(OM);v2e=n(FRe,"STRONG",{});var b7t=s(v2e);e3r=r(b7t,"electra"),b7t.forEach(t),o3r=r(FRe," \u2014 "),VQ=n(FRe,"A",{href:!0});var v7t=s(VQ);r3r=r(v7t,"TFElectraForMaskedLM"),v7t.forEach(t),t3r=r(FRe," (ELECTRA model)"),FRe.forEach(t),a3r=i(fe),VM=n(fe,"LI",{});var TRe=s(VM);F2e=n(TRe,"STRONG",{});var F7t=s(F2e);n3r=r(F7t,"flaubert"),F7t.forEach(t),s3r=r(TRe," \u2014 "),XQ=n(TRe,"A",{href:!0});var T7t=s(XQ);l3r=r(T7t,"TFFlaubertWithLMHeadModel"),T7t.forEach(t),i3r=r(TRe," (FlauBERT model)"),TRe.forEach(t),d3r=i(fe),XM=n(fe,"LI",{});var MRe=s(XM);T2e=n(MRe,"STRONG",{});var M7t=s(T2e);c3r=r(M7t,"funnel"),M7t.forEach(t),f3r=r(MRe," \u2014 "),zQ=n(MRe,"A",{href:!0});var E7t=s(zQ);m3r=r(E7t,"TFFunnelForMaskedLM"),E7t.forEach(t),g3r=r(MRe," (Funnel Transformer model)"),MRe.forEach(t),h3r=i(fe),zM=n(fe,"LI",{});var ERe=s(zM);M2e=n(ERe,"STRONG",{});var C7t=s(M2e);p3r=r(C7t,"layoutlm"),C7t.forEach(t),_3r=r(ERe," \u2014 "),WQ=n(ERe,"A",{href:!0});var w7t=s(WQ);u3r=r(w7t,"TFLayoutLMForMaskedLM"),w7t.forEach(t),b3r=r(ERe," (LayoutLM model)"),ERe.forEach(t),v3r=i(fe),WM=n(fe,"LI",{});var CRe=s(WM);E2e=n(CRe,"STRONG",{});var A7t=s(E2e);F3r=r(A7t,"longformer"),A7t.forEach(t),T3r=r(CRe," \u2014 "),QQ=n(CRe,"A",{href:!0});var y7t=s(QQ);M3r=r(y7t,"TFLongformerForMaskedLM"),y7t.forEach(t),E3r=r(CRe," (Longformer model)"),CRe.forEach(t),C3r=i(fe),QM=n(fe,"LI",{});var wRe=s(QM);C2e=n(wRe,"STRONG",{});var L7t=s(C2e);w3r=r(L7t,"mobilebert"),L7t.forEach(t),A3r=r(wRe," \u2014 "),HQ=n(wRe,"A",{href:!0});var x7t=s(HQ);y3r=r(x7t,"TFMobileBertForMaskedLM"),x7t.forEach(t),L3r=r(wRe," (MobileBERT model)"),wRe.forEach(t),x3r=i(fe),HM=n(fe,"LI",{});var ARe=s(HM);w2e=n(ARe,"STRONG",{});var $7t=s(w2e);$3r=r($7t,"mpnet"),$7t.forEach(t),k3r=r(ARe," \u2014 "),UQ=n(ARe,"A",{href:!0});var k7t=s(UQ);S3r=r(k7t,"TFMPNetForMaskedLM"),k7t.forEach(t),R3r=r(ARe," (MPNet model)"),ARe.forEach(t),P3r=i(fe),UM=n(fe,"LI",{});var yRe=s(UM);A2e=n(yRe,"STRONG",{});var S7t=s(A2e);B3r=r(S7t,"rembert"),S7t.forEach(t),I3r=r(yRe," \u2014 "),JQ=n(yRe,"A",{href:!0});var R7t=s(JQ);q3r=r(R7t,"TFRemBertForMaskedLM"),R7t.forEach(t),N3r=r(yRe," (RemBERT model)"),yRe.forEach(t),j3r=i(fe),JM=n(fe,"LI",{});var LRe=s(JM);y2e=n(LRe,"STRONG",{});var P7t=s(y2e);D3r=r(P7t,"roberta"),P7t.forEach(t),G3r=r(LRe," \u2014 "),YQ=n(LRe,"A",{href:!0});var B7t=s(YQ);O3r=r(B7t,"TFRobertaForMaskedLM"),B7t.forEach(t),V3r=r(LRe," (RoBERTa model)"),LRe.forEach(t),X3r=i(fe),YM=n(fe,"LI",{});var xRe=s(YM);L2e=n(xRe,"STRONG",{});var I7t=s(L2e);z3r=r(I7t,"roformer"),I7t.forEach(t),W3r=r(xRe," \u2014 "),KQ=n(xRe,"A",{href:!0});var q7t=s(KQ);Q3r=r(q7t,"TFRoFormerForMaskedLM"),q7t.forEach(t),H3r=r(xRe," (RoFormer model)"),xRe.forEach(t),U3r=i(fe),KM=n(fe,"LI",{});var $Re=s(KM);x2e=n($Re,"STRONG",{});var N7t=s(x2e);J3r=r(N7t,"tapas"),N7t.forEach(t),Y3r=r($Re," \u2014 "),ZQ=n($Re,"A",{href:!0});var j7t=s(ZQ);K3r=r(j7t,"TFTapasForMaskedLM"),j7t.forEach(t),Z3r=r($Re," (TAPAS model)"),$Re.forEach(t),ebr=i(fe),ZM=n(fe,"LI",{});var kRe=s(ZM);$2e=n(kRe,"STRONG",{});var D7t=s($2e);obr=r(D7t,"xlm"),D7t.forEach(t),rbr=r(kRe," \u2014 "),eH=n(kRe,"A",{href:!0});var G7t=s(eH);tbr=r(G7t,"TFXLMWithLMHeadModel"),G7t.forEach(t),abr=r(kRe," (XLM model)"),kRe.forEach(t),nbr=i(fe),e4=n(fe,"LI",{});var SRe=s(e4);k2e=n(SRe,"STRONG",{});var O7t=s(k2e);sbr=r(O7t,"xlm-roberta"),O7t.forEach(t),lbr=r(SRe," \u2014 "),oH=n(SRe,"A",{href:!0});var V7t=s(oH);ibr=r(V7t,"TFXLMRobertaForMaskedLM"),V7t.forEach(t),dbr=r(SRe," (XLM-RoBERTa model)"),SRe.forEach(t),fe.forEach(t),cbr=i(Ml),T(o4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),BNe=i(f),rc=n(f,"H2",{class:!0});var GDe=s(rc);r4=n(GDe,"A",{id:!0,class:!0,href:!0});var X7t=s(r4);S2e=n(X7t,"SPAN",{});var z7t=s(S2e);T(w8.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),fbr=i(GDe),R2e=n(GDe,"SPAN",{});var W7t=s(R2e);mbr=r(W7t,"TFAutoModelForSeq2SeqLM"),W7t.forEach(t),GDe.forEach(t),INe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(A8.$$.fragment,El),gbr=i(El),tc=n(El,"P",{});var ree=s(tc);hbr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rH=n(ree,"A",{href:!0});var Q7t=s(rH);pbr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),_br=r(ree," class method or the "),tH=n(ree,"A",{href:!0});var H7t=s(tH);ubr=r(H7t,"from_config()"),H7t.forEach(t),bbr=r(ree,` class
method.`),ree.forEach(t),vbr=i(El),y8=n(El,"P",{});var ODe=s(y8);Fbr=r(ODe,"This class cannot be instantiated directly using "),P2e=n(ODe,"CODE",{});var U7t=s(P2e);Tbr=r(U7t,"__init__()"),U7t.forEach(t),Mbr=r(ODe," (throws an error)."),ODe.forEach(t),Ebr=i(El),St=n(El,"DIV",{class:!0});var yA=s(St);T(L8.$$.fragment,yA),Cbr=i(yA),B2e=n(yA,"P",{});var J7t=s(B2e);wbr=r(J7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J7t.forEach(t),Abr=i(yA),ac=n(yA,"P",{});var tee=s(ac);ybr=r(tee,`Note:
Loading a model from its configuration file does `),I2e=n(tee,"STRONG",{});var Y7t=s(I2e);Lbr=r(Y7t,"not"),Y7t.forEach(t),xbr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(tee,"A",{href:!0});var K7t=s(aH);$br=r(K7t,"from_pretrained()"),K7t.forEach(t),kbr=r(tee," to load the model weights."),tee.forEach(t),Sbr=i(yA),T(t4.$$.fragment,yA),yA.forEach(t),Rbr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(x8.$$.fragment,Cl),Pbr=i(Cl),q2e=n(Cl,"P",{});var Z7t=s(q2e);Bbr=r(Z7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z7t.forEach(t),Ibr=i(Cl),an=n(Cl,"P",{});var LA=s(an);qbr=r(LA,"The model class to instantiate is selected based on the "),N2e=n(LA,"CODE",{});var eMt=s(N2e);Nbr=r(eMt,"model_type"),eMt.forEach(t),jbr=r(LA,` property of the config object (either
passed as an argument or loaded from `),j2e=n(LA,"CODE",{});var oMt=s(j2e);Dbr=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),Gbr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(LA,"CODE",{});var rMt=s(D2e);Obr=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),Vbr=r(LA,":"),LA.forEach(t),Xbr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);a4=n(Be,"LI",{});var RRe=s(a4);G2e=n(RRe,"STRONG",{});var tMt=s(G2e);zbr=r(tMt,"bart"),tMt.forEach(t),Wbr=r(RRe," \u2014 "),nH=n(RRe,"A",{href:!0});var aMt=s(nH);Qbr=r(aMt,"TFBartForConditionalGeneration"),aMt.forEach(t),Hbr=r(RRe," (BART model)"),RRe.forEach(t),Ubr=i(Be),n4=n(Be,"LI",{});var PRe=s(n4);O2e=n(PRe,"STRONG",{});var nMt=s(O2e);Jbr=r(nMt,"blenderbot"),nMt.forEach(t),Ybr=r(PRe," \u2014 "),sH=n(PRe,"A",{href:!0});var sMt=s(sH);Kbr=r(sMt,"TFBlenderbotForConditionalGeneration"),sMt.forEach(t),Zbr=r(PRe," (Blenderbot model)"),PRe.forEach(t),e2r=i(Be),s4=n(Be,"LI",{});var BRe=s(s4);V2e=n(BRe,"STRONG",{});var lMt=s(V2e);o2r=r(lMt,"blenderbot-small"),lMt.forEach(t),r2r=r(BRe," \u2014 "),lH=n(BRe,"A",{href:!0});var iMt=s(lH);t2r=r(iMt,"TFBlenderbotSmallForConditionalGeneration"),iMt.forEach(t),a2r=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),n2r=i(Be),l4=n(Be,"LI",{});var IRe=s(l4);X2e=n(IRe,"STRONG",{});var dMt=s(X2e);s2r=r(dMt,"encoder-decoder"),dMt.forEach(t),l2r=r(IRe," \u2014 "),iH=n(IRe,"A",{href:!0});var cMt=s(iH);i2r=r(cMt,"TFEncoderDecoderModel"),cMt.forEach(t),d2r=r(IRe," (Encoder decoder model)"),IRe.forEach(t),c2r=i(Be),i4=n(Be,"LI",{});var qRe=s(i4);z2e=n(qRe,"STRONG",{});var fMt=s(z2e);f2r=r(fMt,"led"),fMt.forEach(t),m2r=r(qRe," \u2014 "),dH=n(qRe,"A",{href:!0});var mMt=s(dH);g2r=r(mMt,"TFLEDForConditionalGeneration"),mMt.forEach(t),h2r=r(qRe," (LED model)"),qRe.forEach(t),p2r=i(Be),d4=n(Be,"LI",{});var NRe=s(d4);W2e=n(NRe,"STRONG",{});var gMt=s(W2e);_2r=r(gMt,"marian"),gMt.forEach(t),u2r=r(NRe," \u2014 "),cH=n(NRe,"A",{href:!0});var hMt=s(cH);b2r=r(hMt,"TFMarianMTModel"),hMt.forEach(t),v2r=r(NRe," (Marian model)"),NRe.forEach(t),F2r=i(Be),c4=n(Be,"LI",{});var jRe=s(c4);Q2e=n(jRe,"STRONG",{});var pMt=s(Q2e);T2r=r(pMt,"mbart"),pMt.forEach(t),M2r=r(jRe," \u2014 "),fH=n(jRe,"A",{href:!0});var _Mt=s(fH);E2r=r(_Mt,"TFMBartForConditionalGeneration"),_Mt.forEach(t),C2r=r(jRe," (mBART model)"),jRe.forEach(t),w2r=i(Be),f4=n(Be,"LI",{});var DRe=s(f4);H2e=n(DRe,"STRONG",{});var uMt=s(H2e);A2r=r(uMt,"mt5"),uMt.forEach(t),y2r=r(DRe," \u2014 "),mH=n(DRe,"A",{href:!0});var bMt=s(mH);L2r=r(bMt,"TFMT5ForConditionalGeneration"),bMt.forEach(t),x2r=r(DRe," (mT5 model)"),DRe.forEach(t),$2r=i(Be),m4=n(Be,"LI",{});var GRe=s(m4);U2e=n(GRe,"STRONG",{});var vMt=s(U2e);k2r=r(vMt,"pegasus"),vMt.forEach(t),S2r=r(GRe," \u2014 "),gH=n(GRe,"A",{href:!0});var FMt=s(gH);R2r=r(FMt,"TFPegasusForConditionalGeneration"),FMt.forEach(t),P2r=r(GRe," (Pegasus model)"),GRe.forEach(t),B2r=i(Be),g4=n(Be,"LI",{});var ORe=s(g4);J2e=n(ORe,"STRONG",{});var TMt=s(J2e);I2r=r(TMt,"t5"),TMt.forEach(t),q2r=r(ORe," \u2014 "),hH=n(ORe,"A",{href:!0});var MMt=s(hH);N2r=r(MMt,"TFT5ForConditionalGeneration"),MMt.forEach(t),j2r=r(ORe," (T5 model)"),ORe.forEach(t),Be.forEach(t),D2r=i(Cl),T(h4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),qNe=i(f),nc=n(f,"H2",{class:!0});var VDe=s(nc);p4=n(VDe,"A",{id:!0,class:!0,href:!0});var EMt=s(p4);Y2e=n(EMt,"SPAN",{});var CMt=s(Y2e);T($8.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),G2r=i(VDe),K2e=n(VDe,"SPAN",{});var wMt=s(K2e);O2r=r(wMt,"TFAutoModelForSequenceClassification"),wMt.forEach(t),VDe.forEach(t),NNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(k8.$$.fragment,wl),V2r=i(wl),sc=n(wl,"P",{});var aee=s(sc);X2r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pH=n(aee,"A",{href:!0});var AMt=s(pH);z2r=r(AMt,"from_pretrained()"),AMt.forEach(t),W2r=r(aee," class method or the "),_H=n(aee,"A",{href:!0});var yMt=s(_H);Q2r=r(yMt,"from_config()"),yMt.forEach(t),H2r=r(aee,` class
method.`),aee.forEach(t),U2r=i(wl),S8=n(wl,"P",{});var XDe=s(S8);J2r=r(XDe,"This class cannot be instantiated directly using "),Z2e=n(XDe,"CODE",{});var LMt=s(Z2e);Y2r=r(LMt,"__init__()"),LMt.forEach(t),K2r=r(XDe," (throws an error)."),XDe.forEach(t),Z2r=i(wl),Rt=n(wl,"DIV",{class:!0});var xA=s(Rt);T(R8.$$.fragment,xA),evr=i(xA),eve=n(xA,"P",{});var xMt=s(eve);ovr=r(xMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xMt.forEach(t),rvr=i(xA),lc=n(xA,"P",{});var nee=s(lc);tvr=r(nee,`Note:
Loading a model from its configuration file does `),ove=n(nee,"STRONG",{});var $Mt=s(ove);avr=r($Mt,"not"),$Mt.forEach(t),nvr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(nee,"A",{href:!0});var kMt=s(uH);svr=r(kMt,"from_pretrained()"),kMt.forEach(t),lvr=r(nee," to load the model weights."),nee.forEach(t),ivr=i(xA),T(_4.$$.fragment,xA),xA.forEach(t),dvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(P8.$$.fragment,Al),cvr=i(Al),rve=n(Al,"P",{});var SMt=s(rve);fvr=r(SMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SMt.forEach(t),mvr=i(Al),nn=n(Al,"P",{});var $A=s(nn);gvr=r($A,"The model class to instantiate is selected based on the "),tve=n($A,"CODE",{});var RMt=s(tve);hvr=r(RMt,"model_type"),RMt.forEach(t),pvr=r($A,` property of the config object (either
passed as an argument or loaded from `),ave=n($A,"CODE",{});var PMt=s(ave);_vr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),uvr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n($A,"CODE",{});var BMt=s(nve);bvr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),vvr=r($A,":"),$A.forEach(t),Fvr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);u4=n(ae,"LI",{});var VRe=s(u4);sve=n(VRe,"STRONG",{});var IMt=s(sve);Tvr=r(IMt,"albert"),IMt.forEach(t),Mvr=r(VRe," \u2014 "),bH=n(VRe,"A",{href:!0});var qMt=s(bH);Evr=r(qMt,"TFAlbertForSequenceClassification"),qMt.forEach(t),Cvr=r(VRe," (ALBERT model)"),VRe.forEach(t),wvr=i(ae),b4=n(ae,"LI",{});var XRe=s(b4);lve=n(XRe,"STRONG",{});var NMt=s(lve);Avr=r(NMt,"bert"),NMt.forEach(t),yvr=r(XRe," \u2014 "),vH=n(XRe,"A",{href:!0});var jMt=s(vH);Lvr=r(jMt,"TFBertForSequenceClassification"),jMt.forEach(t),xvr=r(XRe," (BERT model)"),XRe.forEach(t),$vr=i(ae),v4=n(ae,"LI",{});var zRe=s(v4);ive=n(zRe,"STRONG",{});var DMt=s(ive);kvr=r(DMt,"camembert"),DMt.forEach(t),Svr=r(zRe," \u2014 "),FH=n(zRe,"A",{href:!0});var GMt=s(FH);Rvr=r(GMt,"TFCamembertForSequenceClassification"),GMt.forEach(t),Pvr=r(zRe," (CamemBERT model)"),zRe.forEach(t),Bvr=i(ae),F4=n(ae,"LI",{});var WRe=s(F4);dve=n(WRe,"STRONG",{});var OMt=s(dve);Ivr=r(OMt,"convbert"),OMt.forEach(t),qvr=r(WRe," \u2014 "),TH=n(WRe,"A",{href:!0});var VMt=s(TH);Nvr=r(VMt,"TFConvBertForSequenceClassification"),VMt.forEach(t),jvr=r(WRe," (ConvBERT model)"),WRe.forEach(t),Dvr=i(ae),T4=n(ae,"LI",{});var QRe=s(T4);cve=n(QRe,"STRONG",{});var XMt=s(cve);Gvr=r(XMt,"ctrl"),XMt.forEach(t),Ovr=r(QRe," \u2014 "),MH=n(QRe,"A",{href:!0});var zMt=s(MH);Vvr=r(zMt,"TFCTRLForSequenceClassification"),zMt.forEach(t),Xvr=r(QRe," (CTRL model)"),QRe.forEach(t),zvr=i(ae),M4=n(ae,"LI",{});var HRe=s(M4);fve=n(HRe,"STRONG",{});var WMt=s(fve);Wvr=r(WMt,"deberta"),WMt.forEach(t),Qvr=r(HRe," \u2014 "),EH=n(HRe,"A",{href:!0});var QMt=s(EH);Hvr=r(QMt,"TFDebertaForSequenceClassification"),QMt.forEach(t),Uvr=r(HRe," (DeBERTa model)"),HRe.forEach(t),Jvr=i(ae),E4=n(ae,"LI",{});var URe=s(E4);mve=n(URe,"STRONG",{});var HMt=s(mve);Yvr=r(HMt,"deberta-v2"),HMt.forEach(t),Kvr=r(URe," \u2014 "),CH=n(URe,"A",{href:!0});var UMt=s(CH);Zvr=r(UMt,"TFDebertaV2ForSequenceClassification"),UMt.forEach(t),eFr=r(URe," (DeBERTa-v2 model)"),URe.forEach(t),oFr=i(ae),C4=n(ae,"LI",{});var JRe=s(C4);gve=n(JRe,"STRONG",{});var JMt=s(gve);rFr=r(JMt,"distilbert"),JMt.forEach(t),tFr=r(JRe," \u2014 "),wH=n(JRe,"A",{href:!0});var YMt=s(wH);aFr=r(YMt,"TFDistilBertForSequenceClassification"),YMt.forEach(t),nFr=r(JRe," (DistilBERT model)"),JRe.forEach(t),sFr=i(ae),w4=n(ae,"LI",{});var YRe=s(w4);hve=n(YRe,"STRONG",{});var KMt=s(hve);lFr=r(KMt,"electra"),KMt.forEach(t),iFr=r(YRe," \u2014 "),AH=n(YRe,"A",{href:!0});var ZMt=s(AH);dFr=r(ZMt,"TFElectraForSequenceClassification"),ZMt.forEach(t),cFr=r(YRe," (ELECTRA model)"),YRe.forEach(t),fFr=i(ae),A4=n(ae,"LI",{});var KRe=s(A4);pve=n(KRe,"STRONG",{});var e4t=s(pve);mFr=r(e4t,"flaubert"),e4t.forEach(t),gFr=r(KRe," \u2014 "),yH=n(KRe,"A",{href:!0});var o4t=s(yH);hFr=r(o4t,"TFFlaubertForSequenceClassification"),o4t.forEach(t),pFr=r(KRe," (FlauBERT model)"),KRe.forEach(t),_Fr=i(ae),y4=n(ae,"LI",{});var ZRe=s(y4);_ve=n(ZRe,"STRONG",{});var r4t=s(_ve);uFr=r(r4t,"funnel"),r4t.forEach(t),bFr=r(ZRe," \u2014 "),LH=n(ZRe,"A",{href:!0});var t4t=s(LH);vFr=r(t4t,"TFFunnelForSequenceClassification"),t4t.forEach(t),FFr=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),TFr=i(ae),L4=n(ae,"LI",{});var ePe=s(L4);uve=n(ePe,"STRONG",{});var a4t=s(uve);MFr=r(a4t,"gpt2"),a4t.forEach(t),EFr=r(ePe," \u2014 "),xH=n(ePe,"A",{href:!0});var n4t=s(xH);CFr=r(n4t,"TFGPT2ForSequenceClassification"),n4t.forEach(t),wFr=r(ePe," (OpenAI GPT-2 model)"),ePe.forEach(t),AFr=i(ae),x4=n(ae,"LI",{});var oPe=s(x4);bve=n(oPe,"STRONG",{});var s4t=s(bve);yFr=r(s4t,"gptj"),s4t.forEach(t),LFr=r(oPe," \u2014 "),$H=n(oPe,"A",{href:!0});var l4t=s($H);xFr=r(l4t,"TFGPTJForSequenceClassification"),l4t.forEach(t),$Fr=r(oPe," (GPT-J model)"),oPe.forEach(t),kFr=i(ae),$4=n(ae,"LI",{});var rPe=s($4);vve=n(rPe,"STRONG",{});var i4t=s(vve);SFr=r(i4t,"layoutlm"),i4t.forEach(t),RFr=r(rPe," \u2014 "),kH=n(rPe,"A",{href:!0});var d4t=s(kH);PFr=r(d4t,"TFLayoutLMForSequenceClassification"),d4t.forEach(t),BFr=r(rPe," (LayoutLM model)"),rPe.forEach(t),IFr=i(ae),k4=n(ae,"LI",{});var tPe=s(k4);Fve=n(tPe,"STRONG",{});var c4t=s(Fve);qFr=r(c4t,"longformer"),c4t.forEach(t),NFr=r(tPe," \u2014 "),SH=n(tPe,"A",{href:!0});var f4t=s(SH);jFr=r(f4t,"TFLongformerForSequenceClassification"),f4t.forEach(t),DFr=r(tPe," (Longformer model)"),tPe.forEach(t),GFr=i(ae),S4=n(ae,"LI",{});var aPe=s(S4);Tve=n(aPe,"STRONG",{});var m4t=s(Tve);OFr=r(m4t,"mobilebert"),m4t.forEach(t),VFr=r(aPe," \u2014 "),RH=n(aPe,"A",{href:!0});var g4t=s(RH);XFr=r(g4t,"TFMobileBertForSequenceClassification"),g4t.forEach(t),zFr=r(aPe," (MobileBERT model)"),aPe.forEach(t),WFr=i(ae),R4=n(ae,"LI",{});var nPe=s(R4);Mve=n(nPe,"STRONG",{});var h4t=s(Mve);QFr=r(h4t,"mpnet"),h4t.forEach(t),HFr=r(nPe," \u2014 "),PH=n(nPe,"A",{href:!0});var p4t=s(PH);UFr=r(p4t,"TFMPNetForSequenceClassification"),p4t.forEach(t),JFr=r(nPe," (MPNet model)"),nPe.forEach(t),YFr=i(ae),P4=n(ae,"LI",{});var sPe=s(P4);Eve=n(sPe,"STRONG",{});var _4t=s(Eve);KFr=r(_4t,"openai-gpt"),_4t.forEach(t),ZFr=r(sPe," \u2014 "),BH=n(sPe,"A",{href:!0});var u4t=s(BH);eTr=r(u4t,"TFOpenAIGPTForSequenceClassification"),u4t.forEach(t),oTr=r(sPe," (OpenAI GPT model)"),sPe.forEach(t),rTr=i(ae),B4=n(ae,"LI",{});var lPe=s(B4);Cve=n(lPe,"STRONG",{});var b4t=s(Cve);tTr=r(b4t,"rembert"),b4t.forEach(t),aTr=r(lPe," \u2014 "),IH=n(lPe,"A",{href:!0});var v4t=s(IH);nTr=r(v4t,"TFRemBertForSequenceClassification"),v4t.forEach(t),sTr=r(lPe," (RemBERT model)"),lPe.forEach(t),lTr=i(ae),I4=n(ae,"LI",{});var iPe=s(I4);wve=n(iPe,"STRONG",{});var F4t=s(wve);iTr=r(F4t,"roberta"),F4t.forEach(t),dTr=r(iPe," \u2014 "),qH=n(iPe,"A",{href:!0});var T4t=s(qH);cTr=r(T4t,"TFRobertaForSequenceClassification"),T4t.forEach(t),fTr=r(iPe," (RoBERTa model)"),iPe.forEach(t),mTr=i(ae),q4=n(ae,"LI",{});var dPe=s(q4);Ave=n(dPe,"STRONG",{});var M4t=s(Ave);gTr=r(M4t,"roformer"),M4t.forEach(t),hTr=r(dPe," \u2014 "),NH=n(dPe,"A",{href:!0});var E4t=s(NH);pTr=r(E4t,"TFRoFormerForSequenceClassification"),E4t.forEach(t),_Tr=r(dPe," (RoFormer model)"),dPe.forEach(t),uTr=i(ae),N4=n(ae,"LI",{});var cPe=s(N4);yve=n(cPe,"STRONG",{});var C4t=s(yve);bTr=r(C4t,"tapas"),C4t.forEach(t),vTr=r(cPe," \u2014 "),jH=n(cPe,"A",{href:!0});var w4t=s(jH);FTr=r(w4t,"TFTapasForSequenceClassification"),w4t.forEach(t),TTr=r(cPe," (TAPAS model)"),cPe.forEach(t),MTr=i(ae),j4=n(ae,"LI",{});var fPe=s(j4);Lve=n(fPe,"STRONG",{});var A4t=s(Lve);ETr=r(A4t,"transfo-xl"),A4t.forEach(t),CTr=r(fPe," \u2014 "),DH=n(fPe,"A",{href:!0});var y4t=s(DH);wTr=r(y4t,"TFTransfoXLForSequenceClassification"),y4t.forEach(t),ATr=r(fPe," (Transformer-XL model)"),fPe.forEach(t),yTr=i(ae),D4=n(ae,"LI",{});var mPe=s(D4);xve=n(mPe,"STRONG",{});var L4t=s(xve);LTr=r(L4t,"xlm"),L4t.forEach(t),xTr=r(mPe," \u2014 "),GH=n(mPe,"A",{href:!0});var x4t=s(GH);$Tr=r(x4t,"TFXLMForSequenceClassification"),x4t.forEach(t),kTr=r(mPe," (XLM model)"),mPe.forEach(t),STr=i(ae),G4=n(ae,"LI",{});var gPe=s(G4);$ve=n(gPe,"STRONG",{});var $4t=s($ve);RTr=r($4t,"xlm-roberta"),$4t.forEach(t),PTr=r(gPe," \u2014 "),OH=n(gPe,"A",{href:!0});var k4t=s(OH);BTr=r(k4t,"TFXLMRobertaForSequenceClassification"),k4t.forEach(t),ITr=r(gPe," (XLM-RoBERTa model)"),gPe.forEach(t),qTr=i(ae),O4=n(ae,"LI",{});var hPe=s(O4);kve=n(hPe,"STRONG",{});var S4t=s(kve);NTr=r(S4t,"xlnet"),S4t.forEach(t),jTr=r(hPe," \u2014 "),VH=n(hPe,"A",{href:!0});var R4t=s(VH);DTr=r(R4t,"TFXLNetForSequenceClassification"),R4t.forEach(t),GTr=r(hPe," (XLNet model)"),hPe.forEach(t),ae.forEach(t),OTr=i(Al),T(V4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),jNe=i(f),ic=n(f,"H2",{class:!0});var zDe=s(ic);X4=n(zDe,"A",{id:!0,class:!0,href:!0});var P4t=s(X4);Sve=n(P4t,"SPAN",{});var B4t=s(Sve);T(B8.$$.fragment,B4t),B4t.forEach(t),P4t.forEach(t),VTr=i(zDe),Rve=n(zDe,"SPAN",{});var I4t=s(Rve);XTr=r(I4t,"TFAutoModelForMultipleChoice"),I4t.forEach(t),zDe.forEach(t),DNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(I8.$$.fragment,yl),zTr=i(yl),dc=n(yl,"P",{});var see=s(dc);WTr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XH=n(see,"A",{href:!0});var q4t=s(XH);QTr=r(q4t,"from_pretrained()"),q4t.forEach(t),HTr=r(see," class method or the "),zH=n(see,"A",{href:!0});var N4t=s(zH);UTr=r(N4t,"from_config()"),N4t.forEach(t),JTr=r(see,` class
method.`),see.forEach(t),YTr=i(yl),q8=n(yl,"P",{});var WDe=s(q8);KTr=r(WDe,"This class cannot be instantiated directly using "),Pve=n(WDe,"CODE",{});var j4t=s(Pve);ZTr=r(j4t,"__init__()"),j4t.forEach(t),e7r=r(WDe," (throws an error)."),WDe.forEach(t),o7r=i(yl),Pt=n(yl,"DIV",{class:!0});var kA=s(Pt);T(N8.$$.fragment,kA),r7r=i(kA),Bve=n(kA,"P",{});var D4t=s(Bve);t7r=r(D4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D4t.forEach(t),a7r=i(kA),cc=n(kA,"P",{});var lee=s(cc);n7r=r(lee,`Note:
Loading a model from its configuration file does `),Ive=n(lee,"STRONG",{});var G4t=s(Ive);s7r=r(G4t,"not"),G4t.forEach(t),l7r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(lee,"A",{href:!0});var O4t=s(WH);i7r=r(O4t,"from_pretrained()"),O4t.forEach(t),d7r=r(lee," to load the model weights."),lee.forEach(t),c7r=i(kA),T(z4.$$.fragment,kA),kA.forEach(t),f7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(j8.$$.fragment,Ll),m7r=i(Ll),qve=n(Ll,"P",{});var V4t=s(qve);g7r=r(V4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V4t.forEach(t),h7r=i(Ll),sn=n(Ll,"P",{});var SA=s(sn);p7r=r(SA,"The model class to instantiate is selected based on the "),Nve=n(SA,"CODE",{});var X4t=s(Nve);_7r=r(X4t,"model_type"),X4t.forEach(t),u7r=r(SA,` property of the config object (either
passed as an argument or loaded from `),jve=n(SA,"CODE",{});var z4t=s(jve);b7r=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),v7r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(SA,"CODE",{});var W4t=s(Dve);F7r=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),T7r=r(SA,":"),SA.forEach(t),M7r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);W4=n(be,"LI",{});var pPe=s(W4);Gve=n(pPe,"STRONG",{});var Q4t=s(Gve);E7r=r(Q4t,"albert"),Q4t.forEach(t),C7r=r(pPe," \u2014 "),QH=n(pPe,"A",{href:!0});var H4t=s(QH);w7r=r(H4t,"TFAlbertForMultipleChoice"),H4t.forEach(t),A7r=r(pPe," (ALBERT model)"),pPe.forEach(t),y7r=i(be),Q4=n(be,"LI",{});var _Pe=s(Q4);Ove=n(_Pe,"STRONG",{});var U4t=s(Ove);L7r=r(U4t,"bert"),U4t.forEach(t),x7r=r(_Pe," \u2014 "),HH=n(_Pe,"A",{href:!0});var J4t=s(HH);$7r=r(J4t,"TFBertForMultipleChoice"),J4t.forEach(t),k7r=r(_Pe," (BERT model)"),_Pe.forEach(t),S7r=i(be),H4=n(be,"LI",{});var uPe=s(H4);Vve=n(uPe,"STRONG",{});var Y4t=s(Vve);R7r=r(Y4t,"camembert"),Y4t.forEach(t),P7r=r(uPe," \u2014 "),UH=n(uPe,"A",{href:!0});var K4t=s(UH);B7r=r(K4t,"TFCamembertForMultipleChoice"),K4t.forEach(t),I7r=r(uPe," (CamemBERT model)"),uPe.forEach(t),q7r=i(be),U4=n(be,"LI",{});var bPe=s(U4);Xve=n(bPe,"STRONG",{});var Z4t=s(Xve);N7r=r(Z4t,"convbert"),Z4t.forEach(t),j7r=r(bPe," \u2014 "),JH=n(bPe,"A",{href:!0});var eEt=s(JH);D7r=r(eEt,"TFConvBertForMultipleChoice"),eEt.forEach(t),G7r=r(bPe," (ConvBERT model)"),bPe.forEach(t),O7r=i(be),J4=n(be,"LI",{});var vPe=s(J4);zve=n(vPe,"STRONG",{});var oEt=s(zve);V7r=r(oEt,"distilbert"),oEt.forEach(t),X7r=r(vPe," \u2014 "),YH=n(vPe,"A",{href:!0});var rEt=s(YH);z7r=r(rEt,"TFDistilBertForMultipleChoice"),rEt.forEach(t),W7r=r(vPe," (DistilBERT model)"),vPe.forEach(t),Q7r=i(be),Y4=n(be,"LI",{});var FPe=s(Y4);Wve=n(FPe,"STRONG",{});var tEt=s(Wve);H7r=r(tEt,"electra"),tEt.forEach(t),U7r=r(FPe," \u2014 "),KH=n(FPe,"A",{href:!0});var aEt=s(KH);J7r=r(aEt,"TFElectraForMultipleChoice"),aEt.forEach(t),Y7r=r(FPe," (ELECTRA model)"),FPe.forEach(t),K7r=i(be),K4=n(be,"LI",{});var TPe=s(K4);Qve=n(TPe,"STRONG",{});var nEt=s(Qve);Z7r=r(nEt,"flaubert"),nEt.forEach(t),eMr=r(TPe," \u2014 "),ZH=n(TPe,"A",{href:!0});var sEt=s(ZH);oMr=r(sEt,"TFFlaubertForMultipleChoice"),sEt.forEach(t),rMr=r(TPe," (FlauBERT model)"),TPe.forEach(t),tMr=i(be),Z4=n(be,"LI",{});var MPe=s(Z4);Hve=n(MPe,"STRONG",{});var lEt=s(Hve);aMr=r(lEt,"funnel"),lEt.forEach(t),nMr=r(MPe," \u2014 "),eU=n(MPe,"A",{href:!0});var iEt=s(eU);sMr=r(iEt,"TFFunnelForMultipleChoice"),iEt.forEach(t),lMr=r(MPe," (Funnel Transformer model)"),MPe.forEach(t),iMr=i(be),eE=n(be,"LI",{});var EPe=s(eE);Uve=n(EPe,"STRONG",{});var dEt=s(Uve);dMr=r(dEt,"longformer"),dEt.forEach(t),cMr=r(EPe," \u2014 "),oU=n(EPe,"A",{href:!0});var cEt=s(oU);fMr=r(cEt,"TFLongformerForMultipleChoice"),cEt.forEach(t),mMr=r(EPe," (Longformer model)"),EPe.forEach(t),gMr=i(be),oE=n(be,"LI",{});var CPe=s(oE);Jve=n(CPe,"STRONG",{});var fEt=s(Jve);hMr=r(fEt,"mobilebert"),fEt.forEach(t),pMr=r(CPe," \u2014 "),rU=n(CPe,"A",{href:!0});var mEt=s(rU);_Mr=r(mEt,"TFMobileBertForMultipleChoice"),mEt.forEach(t),uMr=r(CPe," (MobileBERT model)"),CPe.forEach(t),bMr=i(be),rE=n(be,"LI",{});var wPe=s(rE);Yve=n(wPe,"STRONG",{});var gEt=s(Yve);vMr=r(gEt,"mpnet"),gEt.forEach(t),FMr=r(wPe," \u2014 "),tU=n(wPe,"A",{href:!0});var hEt=s(tU);TMr=r(hEt,"TFMPNetForMultipleChoice"),hEt.forEach(t),MMr=r(wPe," (MPNet model)"),wPe.forEach(t),EMr=i(be),tE=n(be,"LI",{});var APe=s(tE);Kve=n(APe,"STRONG",{});var pEt=s(Kve);CMr=r(pEt,"rembert"),pEt.forEach(t),wMr=r(APe," \u2014 "),aU=n(APe,"A",{href:!0});var _Et=s(aU);AMr=r(_Et,"TFRemBertForMultipleChoice"),_Et.forEach(t),yMr=r(APe," (RemBERT model)"),APe.forEach(t),LMr=i(be),aE=n(be,"LI",{});var yPe=s(aE);Zve=n(yPe,"STRONG",{});var uEt=s(Zve);xMr=r(uEt,"roberta"),uEt.forEach(t),$Mr=r(yPe," \u2014 "),nU=n(yPe,"A",{href:!0});var bEt=s(nU);kMr=r(bEt,"TFRobertaForMultipleChoice"),bEt.forEach(t),SMr=r(yPe," (RoBERTa model)"),yPe.forEach(t),RMr=i(be),nE=n(be,"LI",{});var LPe=s(nE);eFe=n(LPe,"STRONG",{});var vEt=s(eFe);PMr=r(vEt,"roformer"),vEt.forEach(t),BMr=r(LPe," \u2014 "),sU=n(LPe,"A",{href:!0});var FEt=s(sU);IMr=r(FEt,"TFRoFormerForMultipleChoice"),FEt.forEach(t),qMr=r(LPe," (RoFormer model)"),LPe.forEach(t),NMr=i(be),sE=n(be,"LI",{});var xPe=s(sE);oFe=n(xPe,"STRONG",{});var TEt=s(oFe);jMr=r(TEt,"xlm"),TEt.forEach(t),DMr=r(xPe," \u2014 "),lU=n(xPe,"A",{href:!0});var MEt=s(lU);GMr=r(MEt,"TFXLMForMultipleChoice"),MEt.forEach(t),OMr=r(xPe," (XLM model)"),xPe.forEach(t),VMr=i(be),lE=n(be,"LI",{});var $Pe=s(lE);rFe=n($Pe,"STRONG",{});var EEt=s(rFe);XMr=r(EEt,"xlm-roberta"),EEt.forEach(t),zMr=r($Pe," \u2014 "),iU=n($Pe,"A",{href:!0});var CEt=s(iU);WMr=r(CEt,"TFXLMRobertaForMultipleChoice"),CEt.forEach(t),QMr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),HMr=i(be),iE=n(be,"LI",{});var kPe=s(iE);tFe=n(kPe,"STRONG",{});var wEt=s(tFe);UMr=r(wEt,"xlnet"),wEt.forEach(t),JMr=r(kPe," \u2014 "),dU=n(kPe,"A",{href:!0});var AEt=s(dU);YMr=r(AEt,"TFXLNetForMultipleChoice"),AEt.forEach(t),KMr=r(kPe," (XLNet model)"),kPe.forEach(t),be.forEach(t),ZMr=i(Ll),T(dE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),GNe=i(f),fc=n(f,"H2",{class:!0});var QDe=s(fc);cE=n(QDe,"A",{id:!0,class:!0,href:!0});var yEt=s(cE);aFe=n(yEt,"SPAN",{});var LEt=s(aFe);T(D8.$$.fragment,LEt),LEt.forEach(t),yEt.forEach(t),e4r=i(QDe),nFe=n(QDe,"SPAN",{});var xEt=s(nFe);o4r=r(xEt,"TFAutoModelForNextSentencePrediction"),xEt.forEach(t),QDe.forEach(t),ONe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(G8.$$.fragment,xl),r4r=i(xl),mc=n(xl,"P",{});var iee=s(mc);t4r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=n(iee,"A",{href:!0});var $Et=s(cU);a4r=r($Et,"from_pretrained()"),$Et.forEach(t),n4r=r(iee," class method or the "),fU=n(iee,"A",{href:!0});var kEt=s(fU);s4r=r(kEt,"from_config()"),kEt.forEach(t),l4r=r(iee,` class
method.`),iee.forEach(t),i4r=i(xl),O8=n(xl,"P",{});var HDe=s(O8);d4r=r(HDe,"This class cannot be instantiated directly using "),sFe=n(HDe,"CODE",{});var SEt=s(sFe);c4r=r(SEt,"__init__()"),SEt.forEach(t),f4r=r(HDe," (throws an error)."),HDe.forEach(t),m4r=i(xl),Bt=n(xl,"DIV",{class:!0});var RA=s(Bt);T(V8.$$.fragment,RA),g4r=i(RA),lFe=n(RA,"P",{});var REt=s(lFe);h4r=r(REt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),REt.forEach(t),p4r=i(RA),gc=n(RA,"P",{});var dee=s(gc);_4r=r(dee,`Note:
Loading a model from its configuration file does `),iFe=n(dee,"STRONG",{});var PEt=s(iFe);u4r=r(PEt,"not"),PEt.forEach(t),b4r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(dee,"A",{href:!0});var BEt=s(mU);v4r=r(BEt,"from_pretrained()"),BEt.forEach(t),F4r=r(dee," to load the model weights."),dee.forEach(t),T4r=i(RA),T(fE.$$.fragment,RA),RA.forEach(t),M4r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(X8.$$.fragment,$l),E4r=i($l),dFe=n($l,"P",{});var IEt=s(dFe);C4r=r(IEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IEt.forEach(t),w4r=i($l),ln=n($l,"P",{});var PA=s(ln);A4r=r(PA,"The model class to instantiate is selected based on the "),cFe=n(PA,"CODE",{});var qEt=s(cFe);y4r=r(qEt,"model_type"),qEt.forEach(t),L4r=r(PA,` property of the config object (either
passed as an argument or loaded from `),fFe=n(PA,"CODE",{});var NEt=s(fFe);x4r=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),$4r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(PA,"CODE",{});var jEt=s(mFe);k4r=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),S4r=r(PA,":"),PA.forEach(t),R4r=i($l),z8=n($l,"UL",{});var UDe=s(z8);mE=n(UDe,"LI",{});var SPe=s(mE);gFe=n(SPe,"STRONG",{});var DEt=s(gFe);P4r=r(DEt,"bert"),DEt.forEach(t),B4r=r(SPe," \u2014 "),gU=n(SPe,"A",{href:!0});var GEt=s(gU);I4r=r(GEt,"TFBertForNextSentencePrediction"),GEt.forEach(t),q4r=r(SPe," (BERT model)"),SPe.forEach(t),N4r=i(UDe),gE=n(UDe,"LI",{});var RPe=s(gE);hFe=n(RPe,"STRONG",{});var OEt=s(hFe);j4r=r(OEt,"mobilebert"),OEt.forEach(t),D4r=r(RPe," \u2014 "),hU=n(RPe,"A",{href:!0});var VEt=s(hU);G4r=r(VEt,"TFMobileBertForNextSentencePrediction"),VEt.forEach(t),O4r=r(RPe," (MobileBERT model)"),RPe.forEach(t),UDe.forEach(t),V4r=i($l),T(hE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),VNe=i(f),hc=n(f,"H2",{class:!0});var JDe=s(hc);pE=n(JDe,"A",{id:!0,class:!0,href:!0});var XEt=s(pE);pFe=n(XEt,"SPAN",{});var zEt=s(pFe);T(W8.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),X4r=i(JDe),_Fe=n(JDe,"SPAN",{});var WEt=s(_Fe);z4r=r(WEt,"TFAutoModelForTableQuestionAnswering"),WEt.forEach(t),JDe.forEach(t),XNe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(Q8.$$.fragment,kl),W4r=i(kl),pc=n(kl,"P",{});var cee=s(pc);Q4r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pU=n(cee,"A",{href:!0});var QEt=s(pU);H4r=r(QEt,"from_pretrained()"),QEt.forEach(t),U4r=r(cee," class method or the "),_U=n(cee,"A",{href:!0});var HEt=s(_U);J4r=r(HEt,"from_config()"),HEt.forEach(t),Y4r=r(cee,` class
method.`),cee.forEach(t),K4r=i(kl),H8=n(kl,"P",{});var YDe=s(H8);Z4r=r(YDe,"This class cannot be instantiated directly using "),uFe=n(YDe,"CODE",{});var UEt=s(uFe);eEr=r(UEt,"__init__()"),UEt.forEach(t),oEr=r(YDe," (throws an error)."),YDe.forEach(t),rEr=i(kl),It=n(kl,"DIV",{class:!0});var BA=s(It);T(U8.$$.fragment,BA),tEr=i(BA),bFe=n(BA,"P",{});var JEt=s(bFe);aEr=r(JEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JEt.forEach(t),nEr=i(BA),_c=n(BA,"P",{});var fee=s(_c);sEr=r(fee,`Note:
Loading a model from its configuration file does `),vFe=n(fee,"STRONG",{});var YEt=s(vFe);lEr=r(YEt,"not"),YEt.forEach(t),iEr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(fee,"A",{href:!0});var KEt=s(uU);dEr=r(KEt,"from_pretrained()"),KEt.forEach(t),cEr=r(fee," to load the model weights."),fee.forEach(t),fEr=i(BA),T(_E.$$.fragment,BA),BA.forEach(t),mEr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(J8.$$.fragment,Sl),gEr=i(Sl),FFe=n(Sl,"P",{});var ZEt=s(FFe);hEr=r(ZEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZEt.forEach(t),pEr=i(Sl),dn=n(Sl,"P",{});var IA=s(dn);_Er=r(IA,"The model class to instantiate is selected based on the "),TFe=n(IA,"CODE",{});var eCt=s(TFe);uEr=r(eCt,"model_type"),eCt.forEach(t),bEr=r(IA,` property of the config object (either
passed as an argument or loaded from `),MFe=n(IA,"CODE",{});var oCt=s(MFe);vEr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),FEr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(IA,"CODE",{});var rCt=s(EFe);TEr=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),MEr=r(IA,":"),IA.forEach(t),EEr=i(Sl),CFe=n(Sl,"UL",{});var tCt=s(CFe);uE=n(tCt,"LI",{});var PPe=s(uE);wFe=n(PPe,"STRONG",{});var aCt=s(wFe);CEr=r(aCt,"tapas"),aCt.forEach(t),wEr=r(PPe," \u2014 "),bU=n(PPe,"A",{href:!0});var nCt=s(bU);AEr=r(nCt,"TFTapasForQuestionAnswering"),nCt.forEach(t),yEr=r(PPe," (TAPAS model)"),PPe.forEach(t),tCt.forEach(t),LEr=i(Sl),T(bE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),zNe=i(f),uc=n(f,"H2",{class:!0});var KDe=s(uc);vE=n(KDe,"A",{id:!0,class:!0,href:!0});var sCt=s(vE);AFe=n(sCt,"SPAN",{});var lCt=s(AFe);T(Y8.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),xEr=i(KDe),yFe=n(KDe,"SPAN",{});var iCt=s(yFe);$Er=r(iCt,"TFAutoModelForTokenClassification"),iCt.forEach(t),KDe.forEach(t),WNe=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(K8.$$.fragment,Rl),kEr=i(Rl),bc=n(Rl,"P",{});var mee=s(bc);SEr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vU=n(mee,"A",{href:!0});var dCt=s(vU);REr=r(dCt,"from_pretrained()"),dCt.forEach(t),PEr=r(mee," class method or the "),FU=n(mee,"A",{href:!0});var cCt=s(FU);BEr=r(cCt,"from_config()"),cCt.forEach(t),IEr=r(mee,` class
method.`),mee.forEach(t),qEr=i(Rl),Z8=n(Rl,"P",{});var ZDe=s(Z8);NEr=r(ZDe,"This class cannot be instantiated directly using "),LFe=n(ZDe,"CODE",{});var fCt=s(LFe);jEr=r(fCt,"__init__()"),fCt.forEach(t),DEr=r(ZDe," (throws an error)."),ZDe.forEach(t),GEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var qA=s(qt);T(e9.$$.fragment,qA),OEr=i(qA),xFe=n(qA,"P",{});var mCt=s(xFe);VEr=r(mCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mCt.forEach(t),XEr=i(qA),vc=n(qA,"P",{});var gee=s(vc);zEr=r(gee,`Note:
Loading a model from its configuration file does `),$Fe=n(gee,"STRONG",{});var gCt=s($Fe);WEr=r(gCt,"not"),gCt.forEach(t),QEr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(gee,"A",{href:!0});var hCt=s(TU);HEr=r(hCt,"from_pretrained()"),hCt.forEach(t),UEr=r(gee," to load the model weights."),gee.forEach(t),JEr=i(qA),T(FE.$$.fragment,qA),qA.forEach(t),YEr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(o9.$$.fragment,Pl),KEr=i(Pl),kFe=n(Pl,"P",{});var pCt=s(kFe);ZEr=r(pCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pCt.forEach(t),eCr=i(Pl),cn=n(Pl,"P",{});var NA=s(cn);oCr=r(NA,"The model class to instantiate is selected based on the "),SFe=n(NA,"CODE",{});var _Ct=s(SFe);rCr=r(_Ct,"model_type"),_Ct.forEach(t),tCr=r(NA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(NA,"CODE",{});var uCt=s(RFe);aCr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),nCr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(NA,"CODE",{});var bCt=s(PFe);sCr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),lCr=r(NA,":"),NA.forEach(t),iCr=i(Pl),de=n(Pl,"UL",{});var me=s(de);TE=n(me,"LI",{});var BPe=s(TE);BFe=n(BPe,"STRONG",{});var vCt=s(BFe);dCr=r(vCt,"albert"),vCt.forEach(t),cCr=r(BPe," \u2014 "),MU=n(BPe,"A",{href:!0});var FCt=s(MU);fCr=r(FCt,"TFAlbertForTokenClassification"),FCt.forEach(t),mCr=r(BPe," (ALBERT model)"),BPe.forEach(t),gCr=i(me),ME=n(me,"LI",{});var IPe=s(ME);IFe=n(IPe,"STRONG",{});var TCt=s(IFe);hCr=r(TCt,"bert"),TCt.forEach(t),pCr=r(IPe," \u2014 "),EU=n(IPe,"A",{href:!0});var MCt=s(EU);_Cr=r(MCt,"TFBertForTokenClassification"),MCt.forEach(t),uCr=r(IPe," (BERT model)"),IPe.forEach(t),bCr=i(me),EE=n(me,"LI",{});var qPe=s(EE);qFe=n(qPe,"STRONG",{});var ECt=s(qFe);vCr=r(ECt,"camembert"),ECt.forEach(t),FCr=r(qPe," \u2014 "),CU=n(qPe,"A",{href:!0});var CCt=s(CU);TCr=r(CCt,"TFCamembertForTokenClassification"),CCt.forEach(t),MCr=r(qPe," (CamemBERT model)"),qPe.forEach(t),ECr=i(me),CE=n(me,"LI",{});var NPe=s(CE);NFe=n(NPe,"STRONG",{});var wCt=s(NFe);CCr=r(wCt,"convbert"),wCt.forEach(t),wCr=r(NPe," \u2014 "),wU=n(NPe,"A",{href:!0});var ACt=s(wU);ACr=r(ACt,"TFConvBertForTokenClassification"),ACt.forEach(t),yCr=r(NPe," (ConvBERT model)"),NPe.forEach(t),LCr=i(me),wE=n(me,"LI",{});var jPe=s(wE);jFe=n(jPe,"STRONG",{});var yCt=s(jFe);xCr=r(yCt,"deberta"),yCt.forEach(t),$Cr=r(jPe," \u2014 "),AU=n(jPe,"A",{href:!0});var LCt=s(AU);kCr=r(LCt,"TFDebertaForTokenClassification"),LCt.forEach(t),SCr=r(jPe," (DeBERTa model)"),jPe.forEach(t),RCr=i(me),AE=n(me,"LI",{});var DPe=s(AE);DFe=n(DPe,"STRONG",{});var xCt=s(DFe);PCr=r(xCt,"deberta-v2"),xCt.forEach(t),BCr=r(DPe," \u2014 "),yU=n(DPe,"A",{href:!0});var $Ct=s(yU);ICr=r($Ct,"TFDebertaV2ForTokenClassification"),$Ct.forEach(t),qCr=r(DPe," (DeBERTa-v2 model)"),DPe.forEach(t),NCr=i(me),yE=n(me,"LI",{});var GPe=s(yE);GFe=n(GPe,"STRONG",{});var kCt=s(GFe);jCr=r(kCt,"distilbert"),kCt.forEach(t),DCr=r(GPe," \u2014 "),LU=n(GPe,"A",{href:!0});var SCt=s(LU);GCr=r(SCt,"TFDistilBertForTokenClassification"),SCt.forEach(t),OCr=r(GPe," (DistilBERT model)"),GPe.forEach(t),VCr=i(me),LE=n(me,"LI",{});var OPe=s(LE);OFe=n(OPe,"STRONG",{});var RCt=s(OFe);XCr=r(RCt,"electra"),RCt.forEach(t),zCr=r(OPe," \u2014 "),xU=n(OPe,"A",{href:!0});var PCt=s(xU);WCr=r(PCt,"TFElectraForTokenClassification"),PCt.forEach(t),QCr=r(OPe," (ELECTRA model)"),OPe.forEach(t),HCr=i(me),xE=n(me,"LI",{});var VPe=s(xE);VFe=n(VPe,"STRONG",{});var BCt=s(VFe);UCr=r(BCt,"flaubert"),BCt.forEach(t),JCr=r(VPe," \u2014 "),$U=n(VPe,"A",{href:!0});var ICt=s($U);YCr=r(ICt,"TFFlaubertForTokenClassification"),ICt.forEach(t),KCr=r(VPe," (FlauBERT model)"),VPe.forEach(t),ZCr=i(me),$E=n(me,"LI",{});var XPe=s($E);XFe=n(XPe,"STRONG",{});var qCt=s(XFe);e5r=r(qCt,"funnel"),qCt.forEach(t),o5r=r(XPe," \u2014 "),kU=n(XPe,"A",{href:!0});var NCt=s(kU);r5r=r(NCt,"TFFunnelForTokenClassification"),NCt.forEach(t),t5r=r(XPe," (Funnel Transformer model)"),XPe.forEach(t),a5r=i(me),kE=n(me,"LI",{});var zPe=s(kE);zFe=n(zPe,"STRONG",{});var jCt=s(zFe);n5r=r(jCt,"layoutlm"),jCt.forEach(t),s5r=r(zPe," \u2014 "),SU=n(zPe,"A",{href:!0});var DCt=s(SU);l5r=r(DCt,"TFLayoutLMForTokenClassification"),DCt.forEach(t),i5r=r(zPe," (LayoutLM model)"),zPe.forEach(t),d5r=i(me),SE=n(me,"LI",{});var WPe=s(SE);WFe=n(WPe,"STRONG",{});var GCt=s(WFe);c5r=r(GCt,"longformer"),GCt.forEach(t),f5r=r(WPe," \u2014 "),RU=n(WPe,"A",{href:!0});var OCt=s(RU);m5r=r(OCt,"TFLongformerForTokenClassification"),OCt.forEach(t),g5r=r(WPe," (Longformer model)"),WPe.forEach(t),h5r=i(me),RE=n(me,"LI",{});var QPe=s(RE);QFe=n(QPe,"STRONG",{});var VCt=s(QFe);p5r=r(VCt,"mobilebert"),VCt.forEach(t),_5r=r(QPe," \u2014 "),PU=n(QPe,"A",{href:!0});var XCt=s(PU);u5r=r(XCt,"TFMobileBertForTokenClassification"),XCt.forEach(t),b5r=r(QPe," (MobileBERT model)"),QPe.forEach(t),v5r=i(me),PE=n(me,"LI",{});var HPe=s(PE);HFe=n(HPe,"STRONG",{});var zCt=s(HFe);F5r=r(zCt,"mpnet"),zCt.forEach(t),T5r=r(HPe," \u2014 "),BU=n(HPe,"A",{href:!0});var WCt=s(BU);M5r=r(WCt,"TFMPNetForTokenClassification"),WCt.forEach(t),E5r=r(HPe," (MPNet model)"),HPe.forEach(t),C5r=i(me),BE=n(me,"LI",{});var UPe=s(BE);UFe=n(UPe,"STRONG",{});var QCt=s(UFe);w5r=r(QCt,"rembert"),QCt.forEach(t),A5r=r(UPe," \u2014 "),IU=n(UPe,"A",{href:!0});var HCt=s(IU);y5r=r(HCt,"TFRemBertForTokenClassification"),HCt.forEach(t),L5r=r(UPe," (RemBERT model)"),UPe.forEach(t),x5r=i(me),IE=n(me,"LI",{});var JPe=s(IE);JFe=n(JPe,"STRONG",{});var UCt=s(JFe);$5r=r(UCt,"roberta"),UCt.forEach(t),k5r=r(JPe," \u2014 "),qU=n(JPe,"A",{href:!0});var JCt=s(qU);S5r=r(JCt,"TFRobertaForTokenClassification"),JCt.forEach(t),R5r=r(JPe," (RoBERTa model)"),JPe.forEach(t),P5r=i(me),qE=n(me,"LI",{});var YPe=s(qE);YFe=n(YPe,"STRONG",{});var YCt=s(YFe);B5r=r(YCt,"roformer"),YCt.forEach(t),I5r=r(YPe," \u2014 "),NU=n(YPe,"A",{href:!0});var KCt=s(NU);q5r=r(KCt,"TFRoFormerForTokenClassification"),KCt.forEach(t),N5r=r(YPe," (RoFormer model)"),YPe.forEach(t),j5r=i(me),NE=n(me,"LI",{});var KPe=s(NE);KFe=n(KPe,"STRONG",{});var ZCt=s(KFe);D5r=r(ZCt,"xlm"),ZCt.forEach(t),G5r=r(KPe," \u2014 "),jU=n(KPe,"A",{href:!0});var e5t=s(jU);O5r=r(e5t,"TFXLMForTokenClassification"),e5t.forEach(t),V5r=r(KPe," (XLM model)"),KPe.forEach(t),X5r=i(me),jE=n(me,"LI",{});var ZPe=s(jE);ZFe=n(ZPe,"STRONG",{});var o5t=s(ZFe);z5r=r(o5t,"xlm-roberta"),o5t.forEach(t),W5r=r(ZPe," \u2014 "),DU=n(ZPe,"A",{href:!0});var r5t=s(DU);Q5r=r(r5t,"TFXLMRobertaForTokenClassification"),r5t.forEach(t),H5r=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),U5r=i(me),DE=n(me,"LI",{});var eBe=s(DE);eTe=n(eBe,"STRONG",{});var t5t=s(eTe);J5r=r(t5t,"xlnet"),t5t.forEach(t),Y5r=r(eBe," \u2014 "),GU=n(eBe,"A",{href:!0});var a5t=s(GU);K5r=r(a5t,"TFXLNetForTokenClassification"),a5t.forEach(t),Z5r=r(eBe," (XLNet model)"),eBe.forEach(t),me.forEach(t),ewr=i(Pl),T(GE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),QNe=i(f),Fc=n(f,"H2",{class:!0});var eGe=s(Fc);OE=n(eGe,"A",{id:!0,class:!0,href:!0});var n5t=s(OE);oTe=n(n5t,"SPAN",{});var s5t=s(oTe);T(r9.$$.fragment,s5t),s5t.forEach(t),n5t.forEach(t),owr=i(eGe),rTe=n(eGe,"SPAN",{});var l5t=s(rTe);rwr=r(l5t,"TFAutoModelForQuestionAnswering"),l5t.forEach(t),eGe.forEach(t),HNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(t9.$$.fragment,Bl),twr=i(Bl),Tc=n(Bl,"P",{});var hee=s(Tc);awr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OU=n(hee,"A",{href:!0});var i5t=s(OU);nwr=r(i5t,"from_pretrained()"),i5t.forEach(t),swr=r(hee," class method or the "),VU=n(hee,"A",{href:!0});var d5t=s(VU);lwr=r(d5t,"from_config()"),d5t.forEach(t),iwr=r(hee,` class
method.`),hee.forEach(t),dwr=i(Bl),a9=n(Bl,"P",{});var oGe=s(a9);cwr=r(oGe,"This class cannot be instantiated directly using "),tTe=n(oGe,"CODE",{});var c5t=s(tTe);fwr=r(c5t,"__init__()"),c5t.forEach(t),mwr=r(oGe," (throws an error)."),oGe.forEach(t),gwr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var jA=s(Nt);T(n9.$$.fragment,jA),hwr=i(jA),aTe=n(jA,"P",{});var f5t=s(aTe);pwr=r(f5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f5t.forEach(t),_wr=i(jA),Mc=n(jA,"P",{});var pee=s(Mc);uwr=r(pee,`Note:
Loading a model from its configuration file does `),nTe=n(pee,"STRONG",{});var m5t=s(nTe);bwr=r(m5t,"not"),m5t.forEach(t),vwr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(pee,"A",{href:!0});var g5t=s(XU);Fwr=r(g5t,"from_pretrained()"),g5t.forEach(t),Twr=r(pee," to load the model weights."),pee.forEach(t),Mwr=i(jA),T(VE.$$.fragment,jA),jA.forEach(t),Ewr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(s9.$$.fragment,Il),Cwr=i(Il),sTe=n(Il,"P",{});var h5t=s(sTe);wwr=r(h5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h5t.forEach(t),Awr=i(Il),fn=n(Il,"P",{});var DA=s(fn);ywr=r(DA,"The model class to instantiate is selected based on the "),lTe=n(DA,"CODE",{});var p5t=s(lTe);Lwr=r(p5t,"model_type"),p5t.forEach(t),xwr=r(DA,` property of the config object (either
passed as an argument or loaded from `),iTe=n(DA,"CODE",{});var _5t=s(iTe);$wr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),kwr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(DA,"CODE",{});var u5t=s(dTe);Swr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),Rwr=r(DA,":"),DA.forEach(t),Pwr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);XE=n(ge,"LI",{});var oBe=s(XE);cTe=n(oBe,"STRONG",{});var b5t=s(cTe);Bwr=r(b5t,"albert"),b5t.forEach(t),Iwr=r(oBe," \u2014 "),zU=n(oBe,"A",{href:!0});var v5t=s(zU);qwr=r(v5t,"TFAlbertForQuestionAnswering"),v5t.forEach(t),Nwr=r(oBe," (ALBERT model)"),oBe.forEach(t),jwr=i(ge),zE=n(ge,"LI",{});var rBe=s(zE);fTe=n(rBe,"STRONG",{});var F5t=s(fTe);Dwr=r(F5t,"bert"),F5t.forEach(t),Gwr=r(rBe," \u2014 "),WU=n(rBe,"A",{href:!0});var T5t=s(WU);Owr=r(T5t,"TFBertForQuestionAnswering"),T5t.forEach(t),Vwr=r(rBe," (BERT model)"),rBe.forEach(t),Xwr=i(ge),WE=n(ge,"LI",{});var tBe=s(WE);mTe=n(tBe,"STRONG",{});var M5t=s(mTe);zwr=r(M5t,"camembert"),M5t.forEach(t),Wwr=r(tBe," \u2014 "),QU=n(tBe,"A",{href:!0});var E5t=s(QU);Qwr=r(E5t,"TFCamembertForQuestionAnswering"),E5t.forEach(t),Hwr=r(tBe," (CamemBERT model)"),tBe.forEach(t),Uwr=i(ge),QE=n(ge,"LI",{});var aBe=s(QE);gTe=n(aBe,"STRONG",{});var C5t=s(gTe);Jwr=r(C5t,"convbert"),C5t.forEach(t),Ywr=r(aBe," \u2014 "),HU=n(aBe,"A",{href:!0});var w5t=s(HU);Kwr=r(w5t,"TFConvBertForQuestionAnswering"),w5t.forEach(t),Zwr=r(aBe," (ConvBERT model)"),aBe.forEach(t),e0r=i(ge),HE=n(ge,"LI",{});var nBe=s(HE);hTe=n(nBe,"STRONG",{});var A5t=s(hTe);o0r=r(A5t,"deberta"),A5t.forEach(t),r0r=r(nBe," \u2014 "),UU=n(nBe,"A",{href:!0});var y5t=s(UU);t0r=r(y5t,"TFDebertaForQuestionAnswering"),y5t.forEach(t),a0r=r(nBe," (DeBERTa model)"),nBe.forEach(t),n0r=i(ge),UE=n(ge,"LI",{});var sBe=s(UE);pTe=n(sBe,"STRONG",{});var L5t=s(pTe);s0r=r(L5t,"deberta-v2"),L5t.forEach(t),l0r=r(sBe," \u2014 "),JU=n(sBe,"A",{href:!0});var x5t=s(JU);i0r=r(x5t,"TFDebertaV2ForQuestionAnswering"),x5t.forEach(t),d0r=r(sBe," (DeBERTa-v2 model)"),sBe.forEach(t),c0r=i(ge),JE=n(ge,"LI",{});var lBe=s(JE);_Te=n(lBe,"STRONG",{});var $5t=s(_Te);f0r=r($5t,"distilbert"),$5t.forEach(t),m0r=r(lBe," \u2014 "),YU=n(lBe,"A",{href:!0});var k5t=s(YU);g0r=r(k5t,"TFDistilBertForQuestionAnswering"),k5t.forEach(t),h0r=r(lBe," (DistilBERT model)"),lBe.forEach(t),p0r=i(ge),YE=n(ge,"LI",{});var iBe=s(YE);uTe=n(iBe,"STRONG",{});var S5t=s(uTe);_0r=r(S5t,"electra"),S5t.forEach(t),u0r=r(iBe," \u2014 "),KU=n(iBe,"A",{href:!0});var R5t=s(KU);b0r=r(R5t,"TFElectraForQuestionAnswering"),R5t.forEach(t),v0r=r(iBe," (ELECTRA model)"),iBe.forEach(t),F0r=i(ge),KE=n(ge,"LI",{});var dBe=s(KE);bTe=n(dBe,"STRONG",{});var P5t=s(bTe);T0r=r(P5t,"flaubert"),P5t.forEach(t),M0r=r(dBe," \u2014 "),ZU=n(dBe,"A",{href:!0});var B5t=s(ZU);E0r=r(B5t,"TFFlaubertForQuestionAnsweringSimple"),B5t.forEach(t),C0r=r(dBe," (FlauBERT model)"),dBe.forEach(t),w0r=i(ge),ZE=n(ge,"LI",{});var cBe=s(ZE);vTe=n(cBe,"STRONG",{});var I5t=s(vTe);A0r=r(I5t,"funnel"),I5t.forEach(t),y0r=r(cBe," \u2014 "),eJ=n(cBe,"A",{href:!0});var q5t=s(eJ);L0r=r(q5t,"TFFunnelForQuestionAnswering"),q5t.forEach(t),x0r=r(cBe," (Funnel Transformer model)"),cBe.forEach(t),$0r=i(ge),eC=n(ge,"LI",{});var fBe=s(eC);FTe=n(fBe,"STRONG",{});var N5t=s(FTe);k0r=r(N5t,"gptj"),N5t.forEach(t),S0r=r(fBe," \u2014 "),oJ=n(fBe,"A",{href:!0});var j5t=s(oJ);R0r=r(j5t,"TFGPTJForQuestionAnswering"),j5t.forEach(t),P0r=r(fBe," (GPT-J model)"),fBe.forEach(t),B0r=i(ge),oC=n(ge,"LI",{});var mBe=s(oC);TTe=n(mBe,"STRONG",{});var D5t=s(TTe);I0r=r(D5t,"longformer"),D5t.forEach(t),q0r=r(mBe," \u2014 "),rJ=n(mBe,"A",{href:!0});var G5t=s(rJ);N0r=r(G5t,"TFLongformerForQuestionAnswering"),G5t.forEach(t),j0r=r(mBe," (Longformer model)"),mBe.forEach(t),D0r=i(ge),rC=n(ge,"LI",{});var gBe=s(rC);MTe=n(gBe,"STRONG",{});var O5t=s(MTe);G0r=r(O5t,"mobilebert"),O5t.forEach(t),O0r=r(gBe," \u2014 "),tJ=n(gBe,"A",{href:!0});var V5t=s(tJ);V0r=r(V5t,"TFMobileBertForQuestionAnswering"),V5t.forEach(t),X0r=r(gBe," (MobileBERT model)"),gBe.forEach(t),z0r=i(ge),tC=n(ge,"LI",{});var hBe=s(tC);ETe=n(hBe,"STRONG",{});var X5t=s(ETe);W0r=r(X5t,"mpnet"),X5t.forEach(t),Q0r=r(hBe," \u2014 "),aJ=n(hBe,"A",{href:!0});var z5t=s(aJ);H0r=r(z5t,"TFMPNetForQuestionAnswering"),z5t.forEach(t),U0r=r(hBe," (MPNet model)"),hBe.forEach(t),J0r=i(ge),aC=n(ge,"LI",{});var pBe=s(aC);CTe=n(pBe,"STRONG",{});var W5t=s(CTe);Y0r=r(W5t,"rembert"),W5t.forEach(t),K0r=r(pBe," \u2014 "),nJ=n(pBe,"A",{href:!0});var Q5t=s(nJ);Z0r=r(Q5t,"TFRemBertForQuestionAnswering"),Q5t.forEach(t),eAr=r(pBe," (RemBERT model)"),pBe.forEach(t),oAr=i(ge),nC=n(ge,"LI",{});var _Be=s(nC);wTe=n(_Be,"STRONG",{});var H5t=s(wTe);rAr=r(H5t,"roberta"),H5t.forEach(t),tAr=r(_Be," \u2014 "),sJ=n(_Be,"A",{href:!0});var U5t=s(sJ);aAr=r(U5t,"TFRobertaForQuestionAnswering"),U5t.forEach(t),nAr=r(_Be," (RoBERTa model)"),_Be.forEach(t),sAr=i(ge),sC=n(ge,"LI",{});var uBe=s(sC);ATe=n(uBe,"STRONG",{});var J5t=s(ATe);lAr=r(J5t,"roformer"),J5t.forEach(t),iAr=r(uBe," \u2014 "),lJ=n(uBe,"A",{href:!0});var Y5t=s(lJ);dAr=r(Y5t,"TFRoFormerForQuestionAnswering"),Y5t.forEach(t),cAr=r(uBe," (RoFormer model)"),uBe.forEach(t),fAr=i(ge),lC=n(ge,"LI",{});var bBe=s(lC);yTe=n(bBe,"STRONG",{});var K5t=s(yTe);mAr=r(K5t,"xlm"),K5t.forEach(t),gAr=r(bBe," \u2014 "),iJ=n(bBe,"A",{href:!0});var Z5t=s(iJ);hAr=r(Z5t,"TFXLMForQuestionAnsweringSimple"),Z5t.forEach(t),pAr=r(bBe," (XLM model)"),bBe.forEach(t),_Ar=i(ge),iC=n(ge,"LI",{});var vBe=s(iC);LTe=n(vBe,"STRONG",{});var ewt=s(LTe);uAr=r(ewt,"xlm-roberta"),ewt.forEach(t),bAr=r(vBe," \u2014 "),dJ=n(vBe,"A",{href:!0});var owt=s(dJ);vAr=r(owt,"TFXLMRobertaForQuestionAnswering"),owt.forEach(t),FAr=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),TAr=i(ge),dC=n(ge,"LI",{});var FBe=s(dC);xTe=n(FBe,"STRONG",{});var rwt=s(xTe);MAr=r(rwt,"xlnet"),rwt.forEach(t),EAr=r(FBe," \u2014 "),cJ=n(FBe,"A",{href:!0});var twt=s(cJ);CAr=r(twt,"TFXLNetForQuestionAnsweringSimple"),twt.forEach(t),wAr=r(FBe," (XLNet model)"),FBe.forEach(t),ge.forEach(t),AAr=i(Il),T(cC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),UNe=i(f),Ec=n(f,"H2",{class:!0});var rGe=s(Ec);fC=n(rGe,"A",{id:!0,class:!0,href:!0});var awt=s(fC);$Te=n(awt,"SPAN",{});var nwt=s($Te);T(l9.$$.fragment,nwt),nwt.forEach(t),awt.forEach(t),yAr=i(rGe),kTe=n(rGe,"SPAN",{});var swt=s(kTe);LAr=r(swt,"TFAutoModelForVision2Seq"),swt.forEach(t),rGe.forEach(t),JNe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(i9.$$.fragment,ql),xAr=i(ql),Cc=n(ql,"P",{});var _ee=s(Cc);$Ar=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fJ=n(_ee,"A",{href:!0});var lwt=s(fJ);kAr=r(lwt,"from_pretrained()"),lwt.forEach(t),SAr=r(_ee," class method or the "),mJ=n(_ee,"A",{href:!0});var iwt=s(mJ);RAr=r(iwt,"from_config()"),iwt.forEach(t),PAr=r(_ee,` class
method.`),_ee.forEach(t),BAr=i(ql),d9=n(ql,"P",{});var tGe=s(d9);IAr=r(tGe,"This class cannot be instantiated directly using "),STe=n(tGe,"CODE",{});var dwt=s(STe);qAr=r(dwt,"__init__()"),dwt.forEach(t),NAr=r(tGe," (throws an error)."),tGe.forEach(t),jAr=i(ql),jt=n(ql,"DIV",{class:!0});var GA=s(jt);T(c9.$$.fragment,GA),DAr=i(GA),RTe=n(GA,"P",{});var cwt=s(RTe);GAr=r(cwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cwt.forEach(t),OAr=i(GA),wc=n(GA,"P",{});var uee=s(wc);VAr=r(uee,`Note:
Loading a model from its configuration file does `),PTe=n(uee,"STRONG",{});var fwt=s(PTe);XAr=r(fwt,"not"),fwt.forEach(t),zAr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(uee,"A",{href:!0});var mwt=s(gJ);WAr=r(mwt,"from_pretrained()"),mwt.forEach(t),QAr=r(uee," to load the model weights."),uee.forEach(t),HAr=i(GA),T(mC.$$.fragment,GA),GA.forEach(t),UAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(f9.$$.fragment,Nl),JAr=i(Nl),BTe=n(Nl,"P",{});var gwt=s(BTe);YAr=r(gwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gwt.forEach(t),KAr=i(Nl),mn=n(Nl,"P",{});var OA=s(mn);ZAr=r(OA,"The model class to instantiate is selected based on the "),ITe=n(OA,"CODE",{});var hwt=s(ITe);e6r=r(hwt,"model_type"),hwt.forEach(t),o6r=r(OA,` property of the config object (either
passed as an argument or loaded from `),qTe=n(OA,"CODE",{});var pwt=s(qTe);r6r=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),t6r=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(OA,"CODE",{});var _wt=s(NTe);a6r=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),n6r=r(OA,":"),OA.forEach(t),s6r=i(Nl),jTe=n(Nl,"UL",{});var uwt=s(jTe);gC=n(uwt,"LI",{});var TBe=s(gC);DTe=n(TBe,"STRONG",{});var bwt=s(DTe);l6r=r(bwt,"vision-encoder-decoder"),bwt.forEach(t),i6r=r(TBe," \u2014 "),hJ=n(TBe,"A",{href:!0});var vwt=s(hJ);d6r=r(vwt,"TFVisionEncoderDecoderModel"),vwt.forEach(t),c6r=r(TBe," (Vision Encoder decoder model)"),TBe.forEach(t),uwt.forEach(t),f6r=i(Nl),T(hC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),YNe=i(f),Ac=n(f,"H2",{class:!0});var aGe=s(Ac);pC=n(aGe,"A",{id:!0,class:!0,href:!0});var Fwt=s(pC);GTe=n(Fwt,"SPAN",{});var Twt=s(GTe);T(m9.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),m6r=i(aGe),OTe=n(aGe,"SPAN",{});var Mwt=s(OTe);g6r=r(Mwt,"TFAutoModelForSpeechSeq2Seq"),Mwt.forEach(t),aGe.forEach(t),KNe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(g9.$$.fragment,jl),h6r=i(jl),yc=n(jl,"P",{});var bee=s(yc);p6r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pJ=n(bee,"A",{href:!0});var Ewt=s(pJ);_6r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),u6r=r(bee," class method or the "),_J=n(bee,"A",{href:!0});var Cwt=s(_J);b6r=r(Cwt,"from_config()"),Cwt.forEach(t),v6r=r(bee,` class
method.`),bee.forEach(t),F6r=i(jl),h9=n(jl,"P",{});var nGe=s(h9);T6r=r(nGe,"This class cannot be instantiated directly using "),VTe=n(nGe,"CODE",{});var wwt=s(VTe);M6r=r(wwt,"__init__()"),wwt.forEach(t),E6r=r(nGe," (throws an error)."),nGe.forEach(t),C6r=i(jl),Dt=n(jl,"DIV",{class:!0});var VA=s(Dt);T(p9.$$.fragment,VA),w6r=i(VA),XTe=n(VA,"P",{});var Awt=s(XTe);A6r=r(Awt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Awt.forEach(t),y6r=i(VA),Lc=n(VA,"P",{});var vee=s(Lc);L6r=r(vee,`Note:
Loading a model from its configuration file does `),zTe=n(vee,"STRONG",{});var ywt=s(zTe);x6r=r(ywt,"not"),ywt.forEach(t),$6r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(vee,"A",{href:!0});var Lwt=s(uJ);k6r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),S6r=r(vee," to load the model weights."),vee.forEach(t),R6r=i(VA),T(_C.$$.fragment,VA),VA.forEach(t),P6r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(_9.$$.fragment,Dl),B6r=i(Dl),WTe=n(Dl,"P",{});var xwt=s(WTe);I6r=r(xwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xwt.forEach(t),q6r=i(Dl),gn=n(Dl,"P",{});var XA=s(gn);N6r=r(XA,"The model class to instantiate is selected based on the "),QTe=n(XA,"CODE",{});var $wt=s(QTe);j6r=r($wt,"model_type"),$wt.forEach(t),D6r=r(XA,` property of the config object (either
passed as an argument or loaded from `),HTe=n(XA,"CODE",{});var kwt=s(HTe);G6r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),O6r=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(XA,"CODE",{});var Swt=s(UTe);V6r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),X6r=r(XA,":"),XA.forEach(t),z6r=i(Dl),JTe=n(Dl,"UL",{});var Rwt=s(JTe);uC=n(Rwt,"LI",{});var MBe=s(uC);YTe=n(MBe,"STRONG",{});var Pwt=s(YTe);W6r=r(Pwt,"speech_to_text"),Pwt.forEach(t),Q6r=r(MBe," \u2014 "),bJ=n(MBe,"A",{href:!0});var Bwt=s(bJ);H6r=r(Bwt,"TFSpeech2TextForConditionalGeneration"),Bwt.forEach(t),U6r=r(MBe," (Speech2Text model)"),MBe.forEach(t),Rwt.forEach(t),J6r=i(Dl),T(bC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),ZNe=i(f),xc=n(f,"H2",{class:!0});var sGe=s(xc);vC=n(sGe,"A",{id:!0,class:!0,href:!0});var Iwt=s(vC);KTe=n(Iwt,"SPAN",{});var qwt=s(KTe);T(u9.$$.fragment,qwt),qwt.forEach(t),Iwt.forEach(t),Y6r=i(sGe),ZTe=n(sGe,"SPAN",{});var Nwt=s(ZTe);K6r=r(Nwt,"FlaxAutoModel"),Nwt.forEach(t),sGe.forEach(t),eje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(b9.$$.fragment,Gl),Z6r=i(Gl),$c=n(Gl,"P",{});var Fee=s($c);eyr=r(Fee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vJ=n(Fee,"A",{href:!0});var jwt=s(vJ);oyr=r(jwt,"from_pretrained()"),jwt.forEach(t),ryr=r(Fee," class method or the "),FJ=n(Fee,"A",{href:!0});var Dwt=s(FJ);tyr=r(Dwt,"from_config()"),Dwt.forEach(t),ayr=r(Fee,` class
method.`),Fee.forEach(t),nyr=i(Gl),v9=n(Gl,"P",{});var lGe=s(v9);syr=r(lGe,"This class cannot be instantiated directly using "),e7e=n(lGe,"CODE",{});var Gwt=s(e7e);lyr=r(Gwt,"__init__()"),Gwt.forEach(t),iyr=r(lGe," (throws an error)."),lGe.forEach(t),dyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var zA=s(Gt);T(F9.$$.fragment,zA),cyr=i(zA),o7e=n(zA,"P",{});var Owt=s(o7e);fyr=r(Owt,"Instantiates one of the base model classes of the library from a configuration."),Owt.forEach(t),myr=i(zA),kc=n(zA,"P",{});var Tee=s(kc);gyr=r(Tee,`Note:
Loading a model from its configuration file does `),r7e=n(Tee,"STRONG",{});var Vwt=s(r7e);hyr=r(Vwt,"not"),Vwt.forEach(t),pyr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(Tee,"A",{href:!0});var Xwt=s(TJ);_yr=r(Xwt,"from_pretrained()"),Xwt.forEach(t),uyr=r(Tee," to load the model weights."),Tee.forEach(t),byr=i(zA),T(FC.$$.fragment,zA),zA.forEach(t),vyr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(T9.$$.fragment,Ol),Fyr=i(Ol),t7e=n(Ol,"P",{});var zwt=s(t7e);Tyr=r(zwt,"Instantiate one of the base model classes of the library from a pretrained model."),zwt.forEach(t),Myr=i(Ol),hn=n(Ol,"P",{});var WA=s(hn);Eyr=r(WA,"The model class to instantiate is selected based on the "),a7e=n(WA,"CODE",{});var Wwt=s(a7e);Cyr=r(Wwt,"model_type"),Wwt.forEach(t),wyr=r(WA,` property of the config object (either
passed as an argument or loaded from `),n7e=n(WA,"CODE",{});var Qwt=s(n7e);Ayr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),yyr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(WA,"CODE",{});var Hwt=s(s7e);Lyr=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),xyr=r(WA,":"),WA.forEach(t),$yr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);TC=n(ne,"LI",{});var EBe=s(TC);l7e=n(EBe,"STRONG",{});var Uwt=s(l7e);kyr=r(Uwt,"albert"),Uwt.forEach(t),Syr=r(EBe," \u2014 "),MJ=n(EBe,"A",{href:!0});var Jwt=s(MJ);Ryr=r(Jwt,"FlaxAlbertModel"),Jwt.forEach(t),Pyr=r(EBe," (ALBERT model)"),EBe.forEach(t),Byr=i(ne),MC=n(ne,"LI",{});var CBe=s(MC);i7e=n(CBe,"STRONG",{});var Ywt=s(i7e);Iyr=r(Ywt,"bart"),Ywt.forEach(t),qyr=r(CBe," \u2014 "),EJ=n(CBe,"A",{href:!0});var Kwt=s(EJ);Nyr=r(Kwt,"FlaxBartModel"),Kwt.forEach(t),jyr=r(CBe," (BART model)"),CBe.forEach(t),Dyr=i(ne),EC=n(ne,"LI",{});var wBe=s(EC);d7e=n(wBe,"STRONG",{});var Zwt=s(d7e);Gyr=r(Zwt,"beit"),Zwt.forEach(t),Oyr=r(wBe," \u2014 "),CJ=n(wBe,"A",{href:!0});var e0t=s(CJ);Vyr=r(e0t,"FlaxBeitModel"),e0t.forEach(t),Xyr=r(wBe," (BEiT model)"),wBe.forEach(t),zyr=i(ne),CC=n(ne,"LI",{});var ABe=s(CC);c7e=n(ABe,"STRONG",{});var o0t=s(c7e);Wyr=r(o0t,"bert"),o0t.forEach(t),Qyr=r(ABe," \u2014 "),wJ=n(ABe,"A",{href:!0});var r0t=s(wJ);Hyr=r(r0t,"FlaxBertModel"),r0t.forEach(t),Uyr=r(ABe," (BERT model)"),ABe.forEach(t),Jyr=i(ne),wC=n(ne,"LI",{});var yBe=s(wC);f7e=n(yBe,"STRONG",{});var t0t=s(f7e);Yyr=r(t0t,"big_bird"),t0t.forEach(t),Kyr=r(yBe," \u2014 "),AJ=n(yBe,"A",{href:!0});var a0t=s(AJ);Zyr=r(a0t,"FlaxBigBirdModel"),a0t.forEach(t),eLr=r(yBe," (BigBird model)"),yBe.forEach(t),oLr=i(ne),AC=n(ne,"LI",{});var LBe=s(AC);m7e=n(LBe,"STRONG",{});var n0t=s(m7e);rLr=r(n0t,"blenderbot"),n0t.forEach(t),tLr=r(LBe," \u2014 "),yJ=n(LBe,"A",{href:!0});var s0t=s(yJ);aLr=r(s0t,"FlaxBlenderbotModel"),s0t.forEach(t),nLr=r(LBe," (Blenderbot model)"),LBe.forEach(t),sLr=i(ne),yC=n(ne,"LI",{});var xBe=s(yC);g7e=n(xBe,"STRONG",{});var l0t=s(g7e);lLr=r(l0t,"blenderbot-small"),l0t.forEach(t),iLr=r(xBe," \u2014 "),LJ=n(xBe,"A",{href:!0});var i0t=s(LJ);dLr=r(i0t,"FlaxBlenderbotSmallModel"),i0t.forEach(t),cLr=r(xBe," (BlenderbotSmall model)"),xBe.forEach(t),fLr=i(ne),LC=n(ne,"LI",{});var $Be=s(LC);h7e=n($Be,"STRONG",{});var d0t=s(h7e);mLr=r(d0t,"clip"),d0t.forEach(t),gLr=r($Be," \u2014 "),xJ=n($Be,"A",{href:!0});var c0t=s(xJ);hLr=r(c0t,"FlaxCLIPModel"),c0t.forEach(t),pLr=r($Be," (CLIP model)"),$Be.forEach(t),_Lr=i(ne),xC=n(ne,"LI",{});var kBe=s(xC);p7e=n(kBe,"STRONG",{});var f0t=s(p7e);uLr=r(f0t,"distilbert"),f0t.forEach(t),bLr=r(kBe," \u2014 "),$J=n(kBe,"A",{href:!0});var m0t=s($J);vLr=r(m0t,"FlaxDistilBertModel"),m0t.forEach(t),FLr=r(kBe," (DistilBERT model)"),kBe.forEach(t),TLr=i(ne),$C=n(ne,"LI",{});var SBe=s($C);_7e=n(SBe,"STRONG",{});var g0t=s(_7e);MLr=r(g0t,"electra"),g0t.forEach(t),ELr=r(SBe," \u2014 "),kJ=n(SBe,"A",{href:!0});var h0t=s(kJ);CLr=r(h0t,"FlaxElectraModel"),h0t.forEach(t),wLr=r(SBe," (ELECTRA model)"),SBe.forEach(t),ALr=i(ne),kC=n(ne,"LI",{});var RBe=s(kC);u7e=n(RBe,"STRONG",{});var p0t=s(u7e);yLr=r(p0t,"gpt2"),p0t.forEach(t),LLr=r(RBe," \u2014 "),SJ=n(RBe,"A",{href:!0});var _0t=s(SJ);xLr=r(_0t,"FlaxGPT2Model"),_0t.forEach(t),$Lr=r(RBe," (OpenAI GPT-2 model)"),RBe.forEach(t),kLr=i(ne),SC=n(ne,"LI",{});var PBe=s(SC);b7e=n(PBe,"STRONG",{});var u0t=s(b7e);SLr=r(u0t,"gpt_neo"),u0t.forEach(t),RLr=r(PBe," \u2014 "),RJ=n(PBe,"A",{href:!0});var b0t=s(RJ);PLr=r(b0t,"FlaxGPTNeoModel"),b0t.forEach(t),BLr=r(PBe," (GPT Neo model)"),PBe.forEach(t),ILr=i(ne),RC=n(ne,"LI",{});var BBe=s(RC);v7e=n(BBe,"STRONG",{});var v0t=s(v7e);qLr=r(v0t,"gptj"),v0t.forEach(t),NLr=r(BBe," \u2014 "),PJ=n(BBe,"A",{href:!0});var F0t=s(PJ);jLr=r(F0t,"FlaxGPTJModel"),F0t.forEach(t),DLr=r(BBe," (GPT-J model)"),BBe.forEach(t),GLr=i(ne),PC=n(ne,"LI",{});var IBe=s(PC);F7e=n(IBe,"STRONG",{});var T0t=s(F7e);OLr=r(T0t,"marian"),T0t.forEach(t),VLr=r(IBe," \u2014 "),BJ=n(IBe,"A",{href:!0});var M0t=s(BJ);XLr=r(M0t,"FlaxMarianModel"),M0t.forEach(t),zLr=r(IBe," (Marian model)"),IBe.forEach(t),WLr=i(ne),BC=n(ne,"LI",{});var qBe=s(BC);T7e=n(qBe,"STRONG",{});var E0t=s(T7e);QLr=r(E0t,"mbart"),E0t.forEach(t),HLr=r(qBe," \u2014 "),IJ=n(qBe,"A",{href:!0});var C0t=s(IJ);ULr=r(C0t,"FlaxMBartModel"),C0t.forEach(t),JLr=r(qBe," (mBART model)"),qBe.forEach(t),YLr=i(ne),IC=n(ne,"LI",{});var NBe=s(IC);M7e=n(NBe,"STRONG",{});var w0t=s(M7e);KLr=r(w0t,"mt5"),w0t.forEach(t),ZLr=r(NBe," \u2014 "),qJ=n(NBe,"A",{href:!0});var A0t=s(qJ);e8r=r(A0t,"FlaxMT5Model"),A0t.forEach(t),o8r=r(NBe," (mT5 model)"),NBe.forEach(t),r8r=i(ne),qC=n(ne,"LI",{});var jBe=s(qC);E7e=n(jBe,"STRONG",{});var y0t=s(E7e);t8r=r(y0t,"pegasus"),y0t.forEach(t),a8r=r(jBe," \u2014 "),NJ=n(jBe,"A",{href:!0});var L0t=s(NJ);n8r=r(L0t,"FlaxPegasusModel"),L0t.forEach(t),s8r=r(jBe," (Pegasus model)"),jBe.forEach(t),l8r=i(ne),NC=n(ne,"LI",{});var DBe=s(NC);C7e=n(DBe,"STRONG",{});var x0t=s(C7e);i8r=r(x0t,"roberta"),x0t.forEach(t),d8r=r(DBe," \u2014 "),jJ=n(DBe,"A",{href:!0});var $0t=s(jJ);c8r=r($0t,"FlaxRobertaModel"),$0t.forEach(t),f8r=r(DBe," (RoBERTa model)"),DBe.forEach(t),m8r=i(ne),jC=n(ne,"LI",{});var GBe=s(jC);w7e=n(GBe,"STRONG",{});var k0t=s(w7e);g8r=r(k0t,"roformer"),k0t.forEach(t),h8r=r(GBe," \u2014 "),DJ=n(GBe,"A",{href:!0});var S0t=s(DJ);p8r=r(S0t,"FlaxRoFormerModel"),S0t.forEach(t),_8r=r(GBe," (RoFormer model)"),GBe.forEach(t),u8r=i(ne),DC=n(ne,"LI",{});var OBe=s(DC);A7e=n(OBe,"STRONG",{});var R0t=s(A7e);b8r=r(R0t,"t5"),R0t.forEach(t),v8r=r(OBe," \u2014 "),GJ=n(OBe,"A",{href:!0});var P0t=s(GJ);F8r=r(P0t,"FlaxT5Model"),P0t.forEach(t),T8r=r(OBe," (T5 model)"),OBe.forEach(t),M8r=i(ne),GC=n(ne,"LI",{});var VBe=s(GC);y7e=n(VBe,"STRONG",{});var B0t=s(y7e);E8r=r(B0t,"vision-text-dual-encoder"),B0t.forEach(t),C8r=r(VBe," \u2014 "),OJ=n(VBe,"A",{href:!0});var I0t=s(OJ);w8r=r(I0t,"FlaxVisionTextDualEncoderModel"),I0t.forEach(t),A8r=r(VBe," (VisionTextDualEncoder model)"),VBe.forEach(t),y8r=i(ne),OC=n(ne,"LI",{});var XBe=s(OC);L7e=n(XBe,"STRONG",{});var q0t=s(L7e);L8r=r(q0t,"vit"),q0t.forEach(t),x8r=r(XBe," \u2014 "),VJ=n(XBe,"A",{href:!0});var N0t=s(VJ);$8r=r(N0t,"FlaxViTModel"),N0t.forEach(t),k8r=r(XBe," (ViT model)"),XBe.forEach(t),S8r=i(ne),VC=n(ne,"LI",{});var zBe=s(VC);x7e=n(zBe,"STRONG",{});var j0t=s(x7e);R8r=r(j0t,"wav2vec2"),j0t.forEach(t),P8r=r(zBe," \u2014 "),XJ=n(zBe,"A",{href:!0});var D0t=s(XJ);B8r=r(D0t,"FlaxWav2Vec2Model"),D0t.forEach(t),I8r=r(zBe," (Wav2Vec2 model)"),zBe.forEach(t),q8r=i(ne),XC=n(ne,"LI",{});var WBe=s(XC);$7e=n(WBe,"STRONG",{});var G0t=s($7e);N8r=r(G0t,"xglm"),G0t.forEach(t),j8r=r(WBe," \u2014 "),zJ=n(WBe,"A",{href:!0});var O0t=s(zJ);D8r=r(O0t,"FlaxXGLMModel"),O0t.forEach(t),G8r=r(WBe," (XGLM model)"),WBe.forEach(t),O8r=i(ne),zC=n(ne,"LI",{});var QBe=s(zC);k7e=n(QBe,"STRONG",{});var V0t=s(k7e);V8r=r(V0t,"xlm-roberta"),V0t.forEach(t),X8r=r(QBe," \u2014 "),WJ=n(QBe,"A",{href:!0});var X0t=s(WJ);z8r=r(X0t,"FlaxXLMRobertaModel"),X0t.forEach(t),W8r=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),ne.forEach(t),Q8r=i(Ol),T(WC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),oje=i(f),Sc=n(f,"H2",{class:!0});var iGe=s(Sc);QC=n(iGe,"A",{id:!0,class:!0,href:!0});var z0t=s(QC);S7e=n(z0t,"SPAN",{});var W0t=s(S7e);T(M9.$$.fragment,W0t),W0t.forEach(t),z0t.forEach(t),H8r=i(iGe),R7e=n(iGe,"SPAN",{});var Q0t=s(R7e);U8r=r(Q0t,"FlaxAutoModelForCausalLM"),Q0t.forEach(t),iGe.forEach(t),rje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(E9.$$.fragment,Vl),J8r=i(Vl),Rc=n(Vl,"P",{});var Mee=s(Rc);Y8r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QJ=n(Mee,"A",{href:!0});var H0t=s(QJ);K8r=r(H0t,"from_pretrained()"),H0t.forEach(t),Z8r=r(Mee," class method or the "),HJ=n(Mee,"A",{href:!0});var U0t=s(HJ);e9r=r(U0t,"from_config()"),U0t.forEach(t),o9r=r(Mee,` class
method.`),Mee.forEach(t),r9r=i(Vl),C9=n(Vl,"P",{});var dGe=s(C9);t9r=r(dGe,"This class cannot be instantiated directly using "),P7e=n(dGe,"CODE",{});var J0t=s(P7e);a9r=r(J0t,"__init__()"),J0t.forEach(t),n9r=r(dGe," (throws an error)."),dGe.forEach(t),s9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var QA=s(Ot);T(w9.$$.fragment,QA),l9r=i(QA),B7e=n(QA,"P",{});var Y0t=s(B7e);i9r=r(Y0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y0t.forEach(t),d9r=i(QA),Pc=n(QA,"P",{});var Eee=s(Pc);c9r=r(Eee,`Note:
Loading a model from its configuration file does `),I7e=n(Eee,"STRONG",{});var K0t=s(I7e);f9r=r(K0t,"not"),K0t.forEach(t),m9r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Eee,"A",{href:!0});var Z0t=s(UJ);g9r=r(Z0t,"from_pretrained()"),Z0t.forEach(t),h9r=r(Eee," to load the model weights."),Eee.forEach(t),p9r=i(QA),T(HC.$$.fragment,QA),QA.forEach(t),_9r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(A9.$$.fragment,Xl),u9r=i(Xl),q7e=n(Xl,"P",{});var eAt=s(q7e);b9r=r(eAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eAt.forEach(t),v9r=i(Xl),pn=n(Xl,"P",{});var HA=s(pn);F9r=r(HA,"The model class to instantiate is selected based on the "),N7e=n(HA,"CODE",{});var oAt=s(N7e);T9r=r(oAt,"model_type"),oAt.forEach(t),M9r=r(HA,` property of the config object (either
passed as an argument or loaded from `),j7e=n(HA,"CODE",{});var rAt=s(j7e);E9r=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),C9r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(HA,"CODE",{});var tAt=s(D7e);w9r=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),A9r=r(HA,":"),HA.forEach(t),y9r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);UC=n(Xe,"LI",{});var HBe=s(UC);G7e=n(HBe,"STRONG",{});var aAt=s(G7e);L9r=r(aAt,"bart"),aAt.forEach(t),x9r=r(HBe," \u2014 "),JJ=n(HBe,"A",{href:!0});var nAt=s(JJ);$9r=r(nAt,"FlaxBartForCausalLM"),nAt.forEach(t),k9r=r(HBe," (BART model)"),HBe.forEach(t),S9r=i(Xe),JC=n(Xe,"LI",{});var UBe=s(JC);O7e=n(UBe,"STRONG",{});var sAt=s(O7e);R9r=r(sAt,"bert"),sAt.forEach(t),P9r=r(UBe," \u2014 "),YJ=n(UBe,"A",{href:!0});var lAt=s(YJ);B9r=r(lAt,"FlaxBertForCausalLM"),lAt.forEach(t),I9r=r(UBe," (BERT model)"),UBe.forEach(t),q9r=i(Xe),YC=n(Xe,"LI",{});var JBe=s(YC);V7e=n(JBe,"STRONG",{});var iAt=s(V7e);N9r=r(iAt,"big_bird"),iAt.forEach(t),j9r=r(JBe," \u2014 "),KJ=n(JBe,"A",{href:!0});var dAt=s(KJ);D9r=r(dAt,"FlaxBigBirdForCausalLM"),dAt.forEach(t),G9r=r(JBe," (BigBird model)"),JBe.forEach(t),O9r=i(Xe),KC=n(Xe,"LI",{});var YBe=s(KC);X7e=n(YBe,"STRONG",{});var cAt=s(X7e);V9r=r(cAt,"electra"),cAt.forEach(t),X9r=r(YBe," \u2014 "),ZJ=n(YBe,"A",{href:!0});var fAt=s(ZJ);z9r=r(fAt,"FlaxElectraForCausalLM"),fAt.forEach(t),W9r=r(YBe," (ELECTRA model)"),YBe.forEach(t),Q9r=i(Xe),ZC=n(Xe,"LI",{});var KBe=s(ZC);z7e=n(KBe,"STRONG",{});var mAt=s(z7e);H9r=r(mAt,"gpt2"),mAt.forEach(t),U9r=r(KBe," \u2014 "),eY=n(KBe,"A",{href:!0});var gAt=s(eY);J9r=r(gAt,"FlaxGPT2LMHeadModel"),gAt.forEach(t),Y9r=r(KBe," (OpenAI GPT-2 model)"),KBe.forEach(t),K9r=i(Xe),e5=n(Xe,"LI",{});var ZBe=s(e5);W7e=n(ZBe,"STRONG",{});var hAt=s(W7e);Z9r=r(hAt,"gpt_neo"),hAt.forEach(t),exr=r(ZBe," \u2014 "),oY=n(ZBe,"A",{href:!0});var pAt=s(oY);oxr=r(pAt,"FlaxGPTNeoForCausalLM"),pAt.forEach(t),rxr=r(ZBe," (GPT Neo model)"),ZBe.forEach(t),txr=i(Xe),o5=n(Xe,"LI",{});var eIe=s(o5);Q7e=n(eIe,"STRONG",{});var _At=s(Q7e);axr=r(_At,"gptj"),_At.forEach(t),nxr=r(eIe," \u2014 "),rY=n(eIe,"A",{href:!0});var uAt=s(rY);sxr=r(uAt,"FlaxGPTJForCausalLM"),uAt.forEach(t),lxr=r(eIe," (GPT-J model)"),eIe.forEach(t),ixr=i(Xe),r5=n(Xe,"LI",{});var oIe=s(r5);H7e=n(oIe,"STRONG",{});var bAt=s(H7e);dxr=r(bAt,"roberta"),bAt.forEach(t),cxr=r(oIe," \u2014 "),tY=n(oIe,"A",{href:!0});var vAt=s(tY);fxr=r(vAt,"FlaxRobertaForCausalLM"),vAt.forEach(t),mxr=r(oIe," (RoBERTa model)"),oIe.forEach(t),gxr=i(Xe),t5=n(Xe,"LI",{});var rIe=s(t5);U7e=n(rIe,"STRONG",{});var FAt=s(U7e);hxr=r(FAt,"xglm"),FAt.forEach(t),pxr=r(rIe," \u2014 "),aY=n(rIe,"A",{href:!0});var TAt=s(aY);_xr=r(TAt,"FlaxXGLMForCausalLM"),TAt.forEach(t),uxr=r(rIe," (XGLM model)"),rIe.forEach(t),Xe.forEach(t),bxr=i(Xl),T(a5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),tje=i(f),Bc=n(f,"H2",{class:!0});var cGe=s(Bc);n5=n(cGe,"A",{id:!0,class:!0,href:!0});var MAt=s(n5);J7e=n(MAt,"SPAN",{});var EAt=s(J7e);T(y9.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),vxr=i(cGe),Y7e=n(cGe,"SPAN",{});var CAt=s(Y7e);Fxr=r(CAt,"FlaxAutoModelForPreTraining"),CAt.forEach(t),cGe.forEach(t),aje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(L9.$$.fragment,zl),Txr=i(zl),Ic=n(zl,"P",{});var Cee=s(Ic);Mxr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nY=n(Cee,"A",{href:!0});var wAt=s(nY);Exr=r(wAt,"from_pretrained()"),wAt.forEach(t),Cxr=r(Cee," class method or the "),sY=n(Cee,"A",{href:!0});var AAt=s(sY);wxr=r(AAt,"from_config()"),AAt.forEach(t),Axr=r(Cee,` class
method.`),Cee.forEach(t),yxr=i(zl),x9=n(zl,"P",{});var fGe=s(x9);Lxr=r(fGe,"This class cannot be instantiated directly using "),K7e=n(fGe,"CODE",{});var yAt=s(K7e);xxr=r(yAt,"__init__()"),yAt.forEach(t),$xr=r(fGe," (throws an error)."),fGe.forEach(t),kxr=i(zl),Vt=n(zl,"DIV",{class:!0});var UA=s(Vt);T($9.$$.fragment,UA),Sxr=i(UA),Z7e=n(UA,"P",{});var LAt=s(Z7e);Rxr=r(LAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LAt.forEach(t),Pxr=i(UA),qc=n(UA,"P",{});var wee=s(qc);Bxr=r(wee,`Note:
Loading a model from its configuration file does `),eMe=n(wee,"STRONG",{});var xAt=s(eMe);Ixr=r(xAt,"not"),xAt.forEach(t),qxr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(wee,"A",{href:!0});var $At=s(lY);Nxr=r($At,"from_pretrained()"),$At.forEach(t),jxr=r(wee," to load the model weights."),wee.forEach(t),Dxr=i(UA),T(s5.$$.fragment,UA),UA.forEach(t),Gxr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(k9.$$.fragment,Wl),Oxr=i(Wl),oMe=n(Wl,"P",{});var kAt=s(oMe);Vxr=r(kAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kAt.forEach(t),Xxr=i(Wl),_n=n(Wl,"P",{});var JA=s(_n);zxr=r(JA,"The model class to instantiate is selected based on the "),rMe=n(JA,"CODE",{});var SAt=s(rMe);Wxr=r(SAt,"model_type"),SAt.forEach(t),Qxr=r(JA,` property of the config object (either
passed as an argument or loaded from `),tMe=n(JA,"CODE",{});var RAt=s(tMe);Hxr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),Uxr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(JA,"CODE",{});var PAt=s(aMe);Jxr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),Yxr=r(JA,":"),JA.forEach(t),Kxr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);l5=n(we,"LI",{});var tIe=s(l5);nMe=n(tIe,"STRONG",{});var BAt=s(nMe);Zxr=r(BAt,"albert"),BAt.forEach(t),e$r=r(tIe," \u2014 "),iY=n(tIe,"A",{href:!0});var IAt=s(iY);o$r=r(IAt,"FlaxAlbertForPreTraining"),IAt.forEach(t),r$r=r(tIe," (ALBERT model)"),tIe.forEach(t),t$r=i(we),i5=n(we,"LI",{});var aIe=s(i5);sMe=n(aIe,"STRONG",{});var qAt=s(sMe);a$r=r(qAt,"bart"),qAt.forEach(t),n$r=r(aIe," \u2014 "),dY=n(aIe,"A",{href:!0});var NAt=s(dY);s$r=r(NAt,"FlaxBartForConditionalGeneration"),NAt.forEach(t),l$r=r(aIe," (BART model)"),aIe.forEach(t),i$r=i(we),d5=n(we,"LI",{});var nIe=s(d5);lMe=n(nIe,"STRONG",{});var jAt=s(lMe);d$r=r(jAt,"bert"),jAt.forEach(t),c$r=r(nIe," \u2014 "),cY=n(nIe,"A",{href:!0});var DAt=s(cY);f$r=r(DAt,"FlaxBertForPreTraining"),DAt.forEach(t),m$r=r(nIe," (BERT model)"),nIe.forEach(t),g$r=i(we),c5=n(we,"LI",{});var sIe=s(c5);iMe=n(sIe,"STRONG",{});var GAt=s(iMe);h$r=r(GAt,"big_bird"),GAt.forEach(t),p$r=r(sIe," \u2014 "),fY=n(sIe,"A",{href:!0});var OAt=s(fY);_$r=r(OAt,"FlaxBigBirdForPreTraining"),OAt.forEach(t),u$r=r(sIe," (BigBird model)"),sIe.forEach(t),b$r=i(we),f5=n(we,"LI",{});var lIe=s(f5);dMe=n(lIe,"STRONG",{});var VAt=s(dMe);v$r=r(VAt,"electra"),VAt.forEach(t),F$r=r(lIe," \u2014 "),mY=n(lIe,"A",{href:!0});var XAt=s(mY);T$r=r(XAt,"FlaxElectraForPreTraining"),XAt.forEach(t),M$r=r(lIe," (ELECTRA model)"),lIe.forEach(t),E$r=i(we),m5=n(we,"LI",{});var iIe=s(m5);cMe=n(iIe,"STRONG",{});var zAt=s(cMe);C$r=r(zAt,"mbart"),zAt.forEach(t),w$r=r(iIe," \u2014 "),gY=n(iIe,"A",{href:!0});var WAt=s(gY);A$r=r(WAt,"FlaxMBartForConditionalGeneration"),WAt.forEach(t),y$r=r(iIe," (mBART model)"),iIe.forEach(t),L$r=i(we),g5=n(we,"LI",{});var dIe=s(g5);fMe=n(dIe,"STRONG",{});var QAt=s(fMe);x$r=r(QAt,"mt5"),QAt.forEach(t),$$r=r(dIe," \u2014 "),hY=n(dIe,"A",{href:!0});var HAt=s(hY);k$r=r(HAt,"FlaxMT5ForConditionalGeneration"),HAt.forEach(t),S$r=r(dIe," (mT5 model)"),dIe.forEach(t),R$r=i(we),h5=n(we,"LI",{});var cIe=s(h5);mMe=n(cIe,"STRONG",{});var UAt=s(mMe);P$r=r(UAt,"roberta"),UAt.forEach(t),B$r=r(cIe," \u2014 "),pY=n(cIe,"A",{href:!0});var JAt=s(pY);I$r=r(JAt,"FlaxRobertaForMaskedLM"),JAt.forEach(t),q$r=r(cIe," (RoBERTa model)"),cIe.forEach(t),N$r=i(we),p5=n(we,"LI",{});var fIe=s(p5);gMe=n(fIe,"STRONG",{});var YAt=s(gMe);j$r=r(YAt,"roformer"),YAt.forEach(t),D$r=r(fIe," \u2014 "),_Y=n(fIe,"A",{href:!0});var KAt=s(_Y);G$r=r(KAt,"FlaxRoFormerForMaskedLM"),KAt.forEach(t),O$r=r(fIe," (RoFormer model)"),fIe.forEach(t),V$r=i(we),_5=n(we,"LI",{});var mIe=s(_5);hMe=n(mIe,"STRONG",{});var ZAt=s(hMe);X$r=r(ZAt,"t5"),ZAt.forEach(t),z$r=r(mIe," \u2014 "),uY=n(mIe,"A",{href:!0});var e6t=s(uY);W$r=r(e6t,"FlaxT5ForConditionalGeneration"),e6t.forEach(t),Q$r=r(mIe," (T5 model)"),mIe.forEach(t),H$r=i(we),u5=n(we,"LI",{});var gIe=s(u5);pMe=n(gIe,"STRONG",{});var o6t=s(pMe);U$r=r(o6t,"wav2vec2"),o6t.forEach(t),J$r=r(gIe," \u2014 "),bY=n(gIe,"A",{href:!0});var r6t=s(bY);Y$r=r(r6t,"FlaxWav2Vec2ForPreTraining"),r6t.forEach(t),K$r=r(gIe," (Wav2Vec2 model)"),gIe.forEach(t),Z$r=i(we),b5=n(we,"LI",{});var hIe=s(b5);_Me=n(hIe,"STRONG",{});var t6t=s(_Me);ekr=r(t6t,"xlm-roberta"),t6t.forEach(t),okr=r(hIe," \u2014 "),vY=n(hIe,"A",{href:!0});var a6t=s(vY);rkr=r(a6t,"FlaxXLMRobertaForMaskedLM"),a6t.forEach(t),tkr=r(hIe," (XLM-RoBERTa model)"),hIe.forEach(t),we.forEach(t),akr=i(Wl),T(v5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),nje=i(f),Nc=n(f,"H2",{class:!0});var mGe=s(Nc);F5=n(mGe,"A",{id:!0,class:!0,href:!0});var n6t=s(F5);uMe=n(n6t,"SPAN",{});var s6t=s(uMe);T(S9.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),nkr=i(mGe),bMe=n(mGe,"SPAN",{});var l6t=s(bMe);skr=r(l6t,"FlaxAutoModelForMaskedLM"),l6t.forEach(t),mGe.forEach(t),sje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(R9.$$.fragment,Ql),lkr=i(Ql),jc=n(Ql,"P",{});var Aee=s(jc);ikr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FY=n(Aee,"A",{href:!0});var i6t=s(FY);dkr=r(i6t,"from_pretrained()"),i6t.forEach(t),ckr=r(Aee," class method or the "),TY=n(Aee,"A",{href:!0});var d6t=s(TY);fkr=r(d6t,"from_config()"),d6t.forEach(t),mkr=r(Aee,` class
method.`),Aee.forEach(t),gkr=i(Ql),P9=n(Ql,"P",{});var gGe=s(P9);hkr=r(gGe,"This class cannot be instantiated directly using "),vMe=n(gGe,"CODE",{});var c6t=s(vMe);pkr=r(c6t,"__init__()"),c6t.forEach(t),_kr=r(gGe," (throws an error)."),gGe.forEach(t),ukr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var YA=s(Xt);T(B9.$$.fragment,YA),bkr=i(YA),FMe=n(YA,"P",{});var f6t=s(FMe);vkr=r(f6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f6t.forEach(t),Fkr=i(YA),Dc=n(YA,"P",{});var yee=s(Dc);Tkr=r(yee,`Note:
Loading a model from its configuration file does `),TMe=n(yee,"STRONG",{});var m6t=s(TMe);Mkr=r(m6t,"not"),m6t.forEach(t),Ekr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(yee,"A",{href:!0});var g6t=s(MY);Ckr=r(g6t,"from_pretrained()"),g6t.forEach(t),wkr=r(yee," to load the model weights."),yee.forEach(t),Akr=i(YA),T(T5.$$.fragment,YA),YA.forEach(t),ykr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(I9.$$.fragment,Hl),Lkr=i(Hl),MMe=n(Hl,"P",{});var h6t=s(MMe);xkr=r(h6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h6t.forEach(t),$kr=i(Hl),un=n(Hl,"P",{});var KA=s(un);kkr=r(KA,"The model class to instantiate is selected based on the "),EMe=n(KA,"CODE",{});var p6t=s(EMe);Skr=r(p6t,"model_type"),p6t.forEach(t),Rkr=r(KA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(KA,"CODE",{});var _6t=s(CMe);Pkr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),Bkr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(KA,"CODE",{});var u6t=s(wMe);Ikr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),qkr=r(KA,":"),KA.forEach(t),Nkr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);M5=n(Ie,"LI",{});var pIe=s(M5);AMe=n(pIe,"STRONG",{});var b6t=s(AMe);jkr=r(b6t,"albert"),b6t.forEach(t),Dkr=r(pIe," \u2014 "),EY=n(pIe,"A",{href:!0});var v6t=s(EY);Gkr=r(v6t,"FlaxAlbertForMaskedLM"),v6t.forEach(t),Okr=r(pIe," (ALBERT model)"),pIe.forEach(t),Vkr=i(Ie),E5=n(Ie,"LI",{});var _Ie=s(E5);yMe=n(_Ie,"STRONG",{});var F6t=s(yMe);Xkr=r(F6t,"bart"),F6t.forEach(t),zkr=r(_Ie," \u2014 "),CY=n(_Ie,"A",{href:!0});var T6t=s(CY);Wkr=r(T6t,"FlaxBartForConditionalGeneration"),T6t.forEach(t),Qkr=r(_Ie," (BART model)"),_Ie.forEach(t),Hkr=i(Ie),C5=n(Ie,"LI",{});var uIe=s(C5);LMe=n(uIe,"STRONG",{});var M6t=s(LMe);Ukr=r(M6t,"bert"),M6t.forEach(t),Jkr=r(uIe," \u2014 "),wY=n(uIe,"A",{href:!0});var E6t=s(wY);Ykr=r(E6t,"FlaxBertForMaskedLM"),E6t.forEach(t),Kkr=r(uIe," (BERT model)"),uIe.forEach(t),Zkr=i(Ie),w5=n(Ie,"LI",{});var bIe=s(w5);xMe=n(bIe,"STRONG",{});var C6t=s(xMe);eSr=r(C6t,"big_bird"),C6t.forEach(t),oSr=r(bIe," \u2014 "),AY=n(bIe,"A",{href:!0});var w6t=s(AY);rSr=r(w6t,"FlaxBigBirdForMaskedLM"),w6t.forEach(t),tSr=r(bIe," (BigBird model)"),bIe.forEach(t),aSr=i(Ie),A5=n(Ie,"LI",{});var vIe=s(A5);$Me=n(vIe,"STRONG",{});var A6t=s($Me);nSr=r(A6t,"distilbert"),A6t.forEach(t),sSr=r(vIe," \u2014 "),yY=n(vIe,"A",{href:!0});var y6t=s(yY);lSr=r(y6t,"FlaxDistilBertForMaskedLM"),y6t.forEach(t),iSr=r(vIe," (DistilBERT model)"),vIe.forEach(t),dSr=i(Ie),y5=n(Ie,"LI",{});var FIe=s(y5);kMe=n(FIe,"STRONG",{});var L6t=s(kMe);cSr=r(L6t,"electra"),L6t.forEach(t),fSr=r(FIe," \u2014 "),LY=n(FIe,"A",{href:!0});var x6t=s(LY);mSr=r(x6t,"FlaxElectraForMaskedLM"),x6t.forEach(t),gSr=r(FIe," (ELECTRA model)"),FIe.forEach(t),hSr=i(Ie),L5=n(Ie,"LI",{});var TIe=s(L5);SMe=n(TIe,"STRONG",{});var $6t=s(SMe);pSr=r($6t,"mbart"),$6t.forEach(t),_Sr=r(TIe," \u2014 "),xY=n(TIe,"A",{href:!0});var k6t=s(xY);uSr=r(k6t,"FlaxMBartForConditionalGeneration"),k6t.forEach(t),bSr=r(TIe," (mBART model)"),TIe.forEach(t),vSr=i(Ie),x5=n(Ie,"LI",{});var MIe=s(x5);RMe=n(MIe,"STRONG",{});var S6t=s(RMe);FSr=r(S6t,"roberta"),S6t.forEach(t),TSr=r(MIe," \u2014 "),$Y=n(MIe,"A",{href:!0});var R6t=s($Y);MSr=r(R6t,"FlaxRobertaForMaskedLM"),R6t.forEach(t),ESr=r(MIe," (RoBERTa model)"),MIe.forEach(t),CSr=i(Ie),$5=n(Ie,"LI",{});var EIe=s($5);PMe=n(EIe,"STRONG",{});var P6t=s(PMe);wSr=r(P6t,"roformer"),P6t.forEach(t),ASr=r(EIe," \u2014 "),kY=n(EIe,"A",{href:!0});var B6t=s(kY);ySr=r(B6t,"FlaxRoFormerForMaskedLM"),B6t.forEach(t),LSr=r(EIe," (RoFormer model)"),EIe.forEach(t),xSr=i(Ie),k5=n(Ie,"LI",{});var CIe=s(k5);BMe=n(CIe,"STRONG",{});var I6t=s(BMe);$Sr=r(I6t,"xlm-roberta"),I6t.forEach(t),kSr=r(CIe," \u2014 "),SY=n(CIe,"A",{href:!0});var q6t=s(SY);SSr=r(q6t,"FlaxXLMRobertaForMaskedLM"),q6t.forEach(t),RSr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),Ie.forEach(t),PSr=i(Hl),T(S5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),lje=i(f),Gc=n(f,"H2",{class:!0});var hGe=s(Gc);R5=n(hGe,"A",{id:!0,class:!0,href:!0});var N6t=s(R5);IMe=n(N6t,"SPAN",{});var j6t=s(IMe);T(q9.$$.fragment,j6t),j6t.forEach(t),N6t.forEach(t),BSr=i(hGe),qMe=n(hGe,"SPAN",{});var D6t=s(qMe);ISr=r(D6t,"FlaxAutoModelForSeq2SeqLM"),D6t.forEach(t),hGe.forEach(t),ije=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(N9.$$.fragment,Ul),qSr=i(Ul),Oc=n(Ul,"P",{});var Lee=s(Oc);NSr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RY=n(Lee,"A",{href:!0});var G6t=s(RY);jSr=r(G6t,"from_pretrained()"),G6t.forEach(t),DSr=r(Lee," class method or the "),PY=n(Lee,"A",{href:!0});var O6t=s(PY);GSr=r(O6t,"from_config()"),O6t.forEach(t),OSr=r(Lee,` class
method.`),Lee.forEach(t),VSr=i(Ul),j9=n(Ul,"P",{});var pGe=s(j9);XSr=r(pGe,"This class cannot be instantiated directly using "),NMe=n(pGe,"CODE",{});var V6t=s(NMe);zSr=r(V6t,"__init__()"),V6t.forEach(t),WSr=r(pGe," (throws an error)."),pGe.forEach(t),QSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var ZA=s(zt);T(D9.$$.fragment,ZA),HSr=i(ZA),jMe=n(ZA,"P",{});var X6t=s(jMe);USr=r(X6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X6t.forEach(t),JSr=i(ZA),Vc=n(ZA,"P",{});var xee=s(Vc);YSr=r(xee,`Note:
Loading a model from its configuration file does `),DMe=n(xee,"STRONG",{});var z6t=s(DMe);KSr=r(z6t,"not"),z6t.forEach(t),ZSr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(xee,"A",{href:!0});var W6t=s(BY);eRr=r(W6t,"from_pretrained()"),W6t.forEach(t),oRr=r(xee," to load the model weights."),xee.forEach(t),rRr=i(ZA),T(P5.$$.fragment,ZA),ZA.forEach(t),tRr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(G9.$$.fragment,Jl),aRr=i(Jl),GMe=n(Jl,"P",{});var Q6t=s(GMe);nRr=r(Q6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q6t.forEach(t),sRr=i(Jl),bn=n(Jl,"P",{});var e6=s(bn);lRr=r(e6,"The model class to instantiate is selected based on the "),OMe=n(e6,"CODE",{});var H6t=s(OMe);iRr=r(H6t,"model_type"),H6t.forEach(t),dRr=r(e6,` property of the config object (either
passed as an argument or loaded from `),VMe=n(e6,"CODE",{});var U6t=s(VMe);cRr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),fRr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(e6,"CODE",{});var J6t=s(XMe);mRr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),gRr=r(e6,":"),e6.forEach(t),hRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);B5=n(ze,"LI",{});var wIe=s(B5);zMe=n(wIe,"STRONG",{});var Y6t=s(zMe);pRr=r(Y6t,"bart"),Y6t.forEach(t),_Rr=r(wIe," \u2014 "),IY=n(wIe,"A",{href:!0});var K6t=s(IY);uRr=r(K6t,"FlaxBartForConditionalGeneration"),K6t.forEach(t),bRr=r(wIe," (BART model)"),wIe.forEach(t),vRr=i(ze),I5=n(ze,"LI",{});var AIe=s(I5);WMe=n(AIe,"STRONG",{});var Z6t=s(WMe);FRr=r(Z6t,"blenderbot"),Z6t.forEach(t),TRr=r(AIe," \u2014 "),qY=n(AIe,"A",{href:!0});var eyt=s(qY);MRr=r(eyt,"FlaxBlenderbotForConditionalGeneration"),eyt.forEach(t),ERr=r(AIe," (Blenderbot model)"),AIe.forEach(t),CRr=i(ze),q5=n(ze,"LI",{});var yIe=s(q5);QMe=n(yIe,"STRONG",{});var oyt=s(QMe);wRr=r(oyt,"blenderbot-small"),oyt.forEach(t),ARr=r(yIe," \u2014 "),NY=n(yIe,"A",{href:!0});var ryt=s(NY);yRr=r(ryt,"FlaxBlenderbotSmallForConditionalGeneration"),ryt.forEach(t),LRr=r(yIe," (BlenderbotSmall model)"),yIe.forEach(t),xRr=i(ze),N5=n(ze,"LI",{});var LIe=s(N5);HMe=n(LIe,"STRONG",{});var tyt=s(HMe);$Rr=r(tyt,"encoder-decoder"),tyt.forEach(t),kRr=r(LIe," \u2014 "),jY=n(LIe,"A",{href:!0});var ayt=s(jY);SRr=r(ayt,"FlaxEncoderDecoderModel"),ayt.forEach(t),RRr=r(LIe," (Encoder decoder model)"),LIe.forEach(t),PRr=i(ze),j5=n(ze,"LI",{});var xIe=s(j5);UMe=n(xIe,"STRONG",{});var nyt=s(UMe);BRr=r(nyt,"marian"),nyt.forEach(t),IRr=r(xIe," \u2014 "),DY=n(xIe,"A",{href:!0});var syt=s(DY);qRr=r(syt,"FlaxMarianMTModel"),syt.forEach(t),NRr=r(xIe," (Marian model)"),xIe.forEach(t),jRr=i(ze),D5=n(ze,"LI",{});var $Ie=s(D5);JMe=n($Ie,"STRONG",{});var lyt=s(JMe);DRr=r(lyt,"mbart"),lyt.forEach(t),GRr=r($Ie," \u2014 "),GY=n($Ie,"A",{href:!0});var iyt=s(GY);ORr=r(iyt,"FlaxMBartForConditionalGeneration"),iyt.forEach(t),VRr=r($Ie," (mBART model)"),$Ie.forEach(t),XRr=i(ze),G5=n(ze,"LI",{});var kIe=s(G5);YMe=n(kIe,"STRONG",{});var dyt=s(YMe);zRr=r(dyt,"mt5"),dyt.forEach(t),WRr=r(kIe," \u2014 "),OY=n(kIe,"A",{href:!0});var cyt=s(OY);QRr=r(cyt,"FlaxMT5ForConditionalGeneration"),cyt.forEach(t),HRr=r(kIe," (mT5 model)"),kIe.forEach(t),URr=i(ze),O5=n(ze,"LI",{});var SIe=s(O5);KMe=n(SIe,"STRONG",{});var fyt=s(KMe);JRr=r(fyt,"pegasus"),fyt.forEach(t),YRr=r(SIe," \u2014 "),VY=n(SIe,"A",{href:!0});var myt=s(VY);KRr=r(myt,"FlaxPegasusForConditionalGeneration"),myt.forEach(t),ZRr=r(SIe," (Pegasus model)"),SIe.forEach(t),ePr=i(ze),V5=n(ze,"LI",{});var RIe=s(V5);ZMe=n(RIe,"STRONG",{});var gyt=s(ZMe);oPr=r(gyt,"t5"),gyt.forEach(t),rPr=r(RIe," \u2014 "),XY=n(RIe,"A",{href:!0});var hyt=s(XY);tPr=r(hyt,"FlaxT5ForConditionalGeneration"),hyt.forEach(t),aPr=r(RIe," (T5 model)"),RIe.forEach(t),ze.forEach(t),nPr=i(Jl),T(X5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),dje=i(f),Xc=n(f,"H2",{class:!0});var _Ge=s(Xc);z5=n(_Ge,"A",{id:!0,class:!0,href:!0});var pyt=s(z5);e4e=n(pyt,"SPAN",{});var _yt=s(e4e);T(O9.$$.fragment,_yt),_yt.forEach(t),pyt.forEach(t),sPr=i(_Ge),o4e=n(_Ge,"SPAN",{});var uyt=s(o4e);lPr=r(uyt,"FlaxAutoModelForSequenceClassification"),uyt.forEach(t),_Ge.forEach(t),cje=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(V9.$$.fragment,Yl),iPr=i(Yl),zc=n(Yl,"P",{});var $ee=s(zc);dPr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zY=n($ee,"A",{href:!0});var byt=s(zY);cPr=r(byt,"from_pretrained()"),byt.forEach(t),fPr=r($ee," class method or the "),WY=n($ee,"A",{href:!0});var vyt=s(WY);mPr=r(vyt,"from_config()"),vyt.forEach(t),gPr=r($ee,` class
method.`),$ee.forEach(t),hPr=i(Yl),X9=n(Yl,"P",{});var uGe=s(X9);pPr=r(uGe,"This class cannot be instantiated directly using "),r4e=n(uGe,"CODE",{});var Fyt=s(r4e);_Pr=r(Fyt,"__init__()"),Fyt.forEach(t),uPr=r(uGe," (throws an error)."),uGe.forEach(t),bPr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var o6=s(Wt);T(z9.$$.fragment,o6),vPr=i(o6),t4e=n(o6,"P",{});var Tyt=s(t4e);FPr=r(Tyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tyt.forEach(t),TPr=i(o6),Wc=n(o6,"P",{});var kee=s(Wc);MPr=r(kee,`Note:
Loading a model from its configuration file does `),a4e=n(kee,"STRONG",{});var Myt=s(a4e);EPr=r(Myt,"not"),Myt.forEach(t),CPr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(kee,"A",{href:!0});var Eyt=s(QY);wPr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),APr=r(kee," to load the model weights."),kee.forEach(t),yPr=i(o6),T(W5.$$.fragment,o6),o6.forEach(t),LPr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(W9.$$.fragment,Kl),xPr=i(Kl),n4e=n(Kl,"P",{});var Cyt=s(n4e);$Pr=r(Cyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cyt.forEach(t),kPr=i(Kl),vn=n(Kl,"P",{});var r6=s(vn);SPr=r(r6,"The model class to instantiate is selected based on the "),s4e=n(r6,"CODE",{});var wyt=s(s4e);RPr=r(wyt,"model_type"),wyt.forEach(t),PPr=r(r6,` property of the config object (either
passed as an argument or loaded from `),l4e=n(r6,"CODE",{});var Ayt=s(l4e);BPr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),IPr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(r6,"CODE",{});var yyt=s(i4e);qPr=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),NPr=r(r6,":"),r6.forEach(t),jPr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);Q5=n(qe,"LI",{});var PIe=s(Q5);d4e=n(PIe,"STRONG",{});var Lyt=s(d4e);DPr=r(Lyt,"albert"),Lyt.forEach(t),GPr=r(PIe," \u2014 "),HY=n(PIe,"A",{href:!0});var xyt=s(HY);OPr=r(xyt,"FlaxAlbertForSequenceClassification"),xyt.forEach(t),VPr=r(PIe," (ALBERT model)"),PIe.forEach(t),XPr=i(qe),H5=n(qe,"LI",{});var BIe=s(H5);c4e=n(BIe,"STRONG",{});var $yt=s(c4e);zPr=r($yt,"bart"),$yt.forEach(t),WPr=r(BIe," \u2014 "),UY=n(BIe,"A",{href:!0});var kyt=s(UY);QPr=r(kyt,"FlaxBartForSequenceClassification"),kyt.forEach(t),HPr=r(BIe," (BART model)"),BIe.forEach(t),UPr=i(qe),U5=n(qe,"LI",{});var IIe=s(U5);f4e=n(IIe,"STRONG",{});var Syt=s(f4e);JPr=r(Syt,"bert"),Syt.forEach(t),YPr=r(IIe," \u2014 "),JY=n(IIe,"A",{href:!0});var Ryt=s(JY);KPr=r(Ryt,"FlaxBertForSequenceClassification"),Ryt.forEach(t),ZPr=r(IIe," (BERT model)"),IIe.forEach(t),eBr=i(qe),J5=n(qe,"LI",{});var qIe=s(J5);m4e=n(qIe,"STRONG",{});var Pyt=s(m4e);oBr=r(Pyt,"big_bird"),Pyt.forEach(t),rBr=r(qIe," \u2014 "),YY=n(qIe,"A",{href:!0});var Byt=s(YY);tBr=r(Byt,"FlaxBigBirdForSequenceClassification"),Byt.forEach(t),aBr=r(qIe," (BigBird model)"),qIe.forEach(t),nBr=i(qe),Y5=n(qe,"LI",{});var NIe=s(Y5);g4e=n(NIe,"STRONG",{});var Iyt=s(g4e);sBr=r(Iyt,"distilbert"),Iyt.forEach(t),lBr=r(NIe," \u2014 "),KY=n(NIe,"A",{href:!0});var qyt=s(KY);iBr=r(qyt,"FlaxDistilBertForSequenceClassification"),qyt.forEach(t),dBr=r(NIe," (DistilBERT model)"),NIe.forEach(t),cBr=i(qe),K5=n(qe,"LI",{});var jIe=s(K5);h4e=n(jIe,"STRONG",{});var Nyt=s(h4e);fBr=r(Nyt,"electra"),Nyt.forEach(t),mBr=r(jIe," \u2014 "),ZY=n(jIe,"A",{href:!0});var jyt=s(ZY);gBr=r(jyt,"FlaxElectraForSequenceClassification"),jyt.forEach(t),hBr=r(jIe," (ELECTRA model)"),jIe.forEach(t),pBr=i(qe),Z5=n(qe,"LI",{});var DIe=s(Z5);p4e=n(DIe,"STRONG",{});var Dyt=s(p4e);_Br=r(Dyt,"mbart"),Dyt.forEach(t),uBr=r(DIe," \u2014 "),eK=n(DIe,"A",{href:!0});var Gyt=s(eK);bBr=r(Gyt,"FlaxMBartForSequenceClassification"),Gyt.forEach(t),vBr=r(DIe," (mBART model)"),DIe.forEach(t),FBr=i(qe),ew=n(qe,"LI",{});var GIe=s(ew);_4e=n(GIe,"STRONG",{});var Oyt=s(_4e);TBr=r(Oyt,"roberta"),Oyt.forEach(t),MBr=r(GIe," \u2014 "),oK=n(GIe,"A",{href:!0});var Vyt=s(oK);EBr=r(Vyt,"FlaxRobertaForSequenceClassification"),Vyt.forEach(t),CBr=r(GIe," (RoBERTa model)"),GIe.forEach(t),wBr=i(qe),ow=n(qe,"LI",{});var OIe=s(ow);u4e=n(OIe,"STRONG",{});var Xyt=s(u4e);ABr=r(Xyt,"roformer"),Xyt.forEach(t),yBr=r(OIe," \u2014 "),rK=n(OIe,"A",{href:!0});var zyt=s(rK);LBr=r(zyt,"FlaxRoFormerForSequenceClassification"),zyt.forEach(t),xBr=r(OIe," (RoFormer model)"),OIe.forEach(t),$Br=i(qe),rw=n(qe,"LI",{});var VIe=s(rw);b4e=n(VIe,"STRONG",{});var Wyt=s(b4e);kBr=r(Wyt,"xlm-roberta"),Wyt.forEach(t),SBr=r(VIe," \u2014 "),tK=n(VIe,"A",{href:!0});var Qyt=s(tK);RBr=r(Qyt,"FlaxXLMRobertaForSequenceClassification"),Qyt.forEach(t),PBr=r(VIe," (XLM-RoBERTa model)"),VIe.forEach(t),qe.forEach(t),BBr=i(Kl),T(tw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),fje=i(f),Qc=n(f,"H2",{class:!0});var bGe=s(Qc);aw=n(bGe,"A",{id:!0,class:!0,href:!0});var Hyt=s(aw);v4e=n(Hyt,"SPAN",{});var Uyt=s(v4e);T(Q9.$$.fragment,Uyt),Uyt.forEach(t),Hyt.forEach(t),IBr=i(bGe),F4e=n(bGe,"SPAN",{});var Jyt=s(F4e);qBr=r(Jyt,"FlaxAutoModelForQuestionAnswering"),Jyt.forEach(t),bGe.forEach(t),mje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(H9.$$.fragment,Zl),NBr=i(Zl),Hc=n(Zl,"P",{});var See=s(Hc);jBr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aK=n(See,"A",{href:!0});var Yyt=s(aK);DBr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),GBr=r(See," class method or the "),nK=n(See,"A",{href:!0});var Kyt=s(nK);OBr=r(Kyt,"from_config()"),Kyt.forEach(t),VBr=r(See,` class
method.`),See.forEach(t),XBr=i(Zl),U9=n(Zl,"P",{});var vGe=s(U9);zBr=r(vGe,"This class cannot be instantiated directly using "),T4e=n(vGe,"CODE",{});var Zyt=s(T4e);WBr=r(Zyt,"__init__()"),Zyt.forEach(t),QBr=r(vGe," (throws an error)."),vGe.forEach(t),HBr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var t6=s(Qt);T(J9.$$.fragment,t6),UBr=i(t6),M4e=n(t6,"P",{});var eLt=s(M4e);JBr=r(eLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eLt.forEach(t),YBr=i(t6),Uc=n(t6,"P",{});var Ree=s(Uc);KBr=r(Ree,`Note:
Loading a model from its configuration file does `),E4e=n(Ree,"STRONG",{});var oLt=s(E4e);ZBr=r(oLt,"not"),oLt.forEach(t),eIr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(Ree,"A",{href:!0});var rLt=s(sK);oIr=r(rLt,"from_pretrained()"),rLt.forEach(t),rIr=r(Ree," to load the model weights."),Ree.forEach(t),tIr=i(t6),T(nw.$$.fragment,t6),t6.forEach(t),aIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(Y9.$$.fragment,ei),nIr=i(ei),C4e=n(ei,"P",{});var tLt=s(C4e);sIr=r(tLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tLt.forEach(t),lIr=i(ei),Fn=n(ei,"P",{});var a6=s(Fn);iIr=r(a6,"The model class to instantiate is selected based on the "),w4e=n(a6,"CODE",{});var aLt=s(w4e);dIr=r(aLt,"model_type"),aLt.forEach(t),cIr=r(a6,` property of the config object (either
passed as an argument or loaded from `),A4e=n(a6,"CODE",{});var nLt=s(A4e);fIr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),mIr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(a6,"CODE",{});var sLt=s(y4e);gIr=r(sLt,"pretrained_model_name_or_path"),sLt.forEach(t),hIr=r(a6,":"),a6.forEach(t),pIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);sw=n(Ne,"LI",{});var XIe=s(sw);L4e=n(XIe,"STRONG",{});var lLt=s(L4e);_Ir=r(lLt,"albert"),lLt.forEach(t),uIr=r(XIe," \u2014 "),lK=n(XIe,"A",{href:!0});var iLt=s(lK);bIr=r(iLt,"FlaxAlbertForQuestionAnswering"),iLt.forEach(t),vIr=r(XIe," (ALBERT model)"),XIe.forEach(t),FIr=i(Ne),lw=n(Ne,"LI",{});var zIe=s(lw);x4e=n(zIe,"STRONG",{});var dLt=s(x4e);TIr=r(dLt,"bart"),dLt.forEach(t),MIr=r(zIe," \u2014 "),iK=n(zIe,"A",{href:!0});var cLt=s(iK);EIr=r(cLt,"FlaxBartForQuestionAnswering"),cLt.forEach(t),CIr=r(zIe," (BART model)"),zIe.forEach(t),wIr=i(Ne),iw=n(Ne,"LI",{});var WIe=s(iw);$4e=n(WIe,"STRONG",{});var fLt=s($4e);AIr=r(fLt,"bert"),fLt.forEach(t),yIr=r(WIe," \u2014 "),dK=n(WIe,"A",{href:!0});var mLt=s(dK);LIr=r(mLt,"FlaxBertForQuestionAnswering"),mLt.forEach(t),xIr=r(WIe," (BERT model)"),WIe.forEach(t),$Ir=i(Ne),dw=n(Ne,"LI",{});var QIe=s(dw);k4e=n(QIe,"STRONG",{});var gLt=s(k4e);kIr=r(gLt,"big_bird"),gLt.forEach(t),SIr=r(QIe," \u2014 "),cK=n(QIe,"A",{href:!0});var hLt=s(cK);RIr=r(hLt,"FlaxBigBirdForQuestionAnswering"),hLt.forEach(t),PIr=r(QIe," (BigBird model)"),QIe.forEach(t),BIr=i(Ne),cw=n(Ne,"LI",{});var HIe=s(cw);S4e=n(HIe,"STRONG",{});var pLt=s(S4e);IIr=r(pLt,"distilbert"),pLt.forEach(t),qIr=r(HIe," \u2014 "),fK=n(HIe,"A",{href:!0});var _Lt=s(fK);NIr=r(_Lt,"FlaxDistilBertForQuestionAnswering"),_Lt.forEach(t),jIr=r(HIe," (DistilBERT model)"),HIe.forEach(t),DIr=i(Ne),fw=n(Ne,"LI",{});var UIe=s(fw);R4e=n(UIe,"STRONG",{});var uLt=s(R4e);GIr=r(uLt,"electra"),uLt.forEach(t),OIr=r(UIe," \u2014 "),mK=n(UIe,"A",{href:!0});var bLt=s(mK);VIr=r(bLt,"FlaxElectraForQuestionAnswering"),bLt.forEach(t),XIr=r(UIe," (ELECTRA model)"),UIe.forEach(t),zIr=i(Ne),mw=n(Ne,"LI",{});var JIe=s(mw);P4e=n(JIe,"STRONG",{});var vLt=s(P4e);WIr=r(vLt,"mbart"),vLt.forEach(t),QIr=r(JIe," \u2014 "),gK=n(JIe,"A",{href:!0});var FLt=s(gK);HIr=r(FLt,"FlaxMBartForQuestionAnswering"),FLt.forEach(t),UIr=r(JIe," (mBART model)"),JIe.forEach(t),JIr=i(Ne),gw=n(Ne,"LI",{});var YIe=s(gw);B4e=n(YIe,"STRONG",{});var TLt=s(B4e);YIr=r(TLt,"roberta"),TLt.forEach(t),KIr=r(YIe," \u2014 "),hK=n(YIe,"A",{href:!0});var MLt=s(hK);ZIr=r(MLt,"FlaxRobertaForQuestionAnswering"),MLt.forEach(t),eqr=r(YIe," (RoBERTa model)"),YIe.forEach(t),oqr=i(Ne),hw=n(Ne,"LI",{});var KIe=s(hw);I4e=n(KIe,"STRONG",{});var ELt=s(I4e);rqr=r(ELt,"roformer"),ELt.forEach(t),tqr=r(KIe," \u2014 "),pK=n(KIe,"A",{href:!0});var CLt=s(pK);aqr=r(CLt,"FlaxRoFormerForQuestionAnswering"),CLt.forEach(t),nqr=r(KIe," (RoFormer model)"),KIe.forEach(t),sqr=i(Ne),pw=n(Ne,"LI",{});var ZIe=s(pw);q4e=n(ZIe,"STRONG",{});var wLt=s(q4e);lqr=r(wLt,"xlm-roberta"),wLt.forEach(t),iqr=r(ZIe," \u2014 "),_K=n(ZIe,"A",{href:!0});var ALt=s(_K);dqr=r(ALt,"FlaxXLMRobertaForQuestionAnswering"),ALt.forEach(t),cqr=r(ZIe," (XLM-RoBERTa model)"),ZIe.forEach(t),Ne.forEach(t),fqr=i(ei),T(_w.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),gje=i(f),Jc=n(f,"H2",{class:!0});var FGe=s(Jc);uw=n(FGe,"A",{id:!0,class:!0,href:!0});var yLt=s(uw);N4e=n(yLt,"SPAN",{});var LLt=s(N4e);T(K9.$$.fragment,LLt),LLt.forEach(t),yLt.forEach(t),mqr=i(FGe),j4e=n(FGe,"SPAN",{});var xLt=s(j4e);gqr=r(xLt,"FlaxAutoModelForTokenClassification"),xLt.forEach(t),FGe.forEach(t),hje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(Z9.$$.fragment,oi),hqr=i(oi),Yc=n(oi,"P",{});var Pee=s(Yc);pqr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uK=n(Pee,"A",{href:!0});var $Lt=s(uK);_qr=r($Lt,"from_pretrained()"),$Lt.forEach(t),uqr=r(Pee," class method or the "),bK=n(Pee,"A",{href:!0});var kLt=s(bK);bqr=r(kLt,"from_config()"),kLt.forEach(t),vqr=r(Pee,` class
method.`),Pee.forEach(t),Fqr=i(oi),ex=n(oi,"P",{});var TGe=s(ex);Tqr=r(TGe,"This class cannot be instantiated directly using "),D4e=n(TGe,"CODE",{});var SLt=s(D4e);Mqr=r(SLt,"__init__()"),SLt.forEach(t),Eqr=r(TGe," (throws an error)."),TGe.forEach(t),Cqr=i(oi),Ht=n(oi,"DIV",{class:!0});var n6=s(Ht);T(ox.$$.fragment,n6),wqr=i(n6),G4e=n(n6,"P",{});var RLt=s(G4e);Aqr=r(RLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RLt.forEach(t),yqr=i(n6),Kc=n(n6,"P",{});var Bee=s(Kc);Lqr=r(Bee,`Note:
Loading a model from its configuration file does `),O4e=n(Bee,"STRONG",{});var PLt=s(O4e);xqr=r(PLt,"not"),PLt.forEach(t),$qr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Bee,"A",{href:!0});var BLt=s(vK);kqr=r(BLt,"from_pretrained()"),BLt.forEach(t),Sqr=r(Bee," to load the model weights."),Bee.forEach(t),Rqr=i(n6),T(bw.$$.fragment,n6),n6.forEach(t),Pqr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(rx.$$.fragment,ri),Bqr=i(ri),V4e=n(ri,"P",{});var ILt=s(V4e);Iqr=r(ILt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ILt.forEach(t),qqr=i(ri),Tn=n(ri,"P",{});var s6=s(Tn);Nqr=r(s6,"The model class to instantiate is selected based on the "),X4e=n(s6,"CODE",{});var qLt=s(X4e);jqr=r(qLt,"model_type"),qLt.forEach(t),Dqr=r(s6,` property of the config object (either
passed as an argument or loaded from `),z4e=n(s6,"CODE",{});var NLt=s(z4e);Gqr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),Oqr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(s6,"CODE",{});var jLt=s(W4e);Vqr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),Xqr=r(s6,":"),s6.forEach(t),zqr=i(ri),De=n(ri,"UL",{});var Fo=s(De);vw=n(Fo,"LI",{});var eqe=s(vw);Q4e=n(eqe,"STRONG",{});var DLt=s(Q4e);Wqr=r(DLt,"albert"),DLt.forEach(t),Qqr=r(eqe," \u2014 "),FK=n(eqe,"A",{href:!0});var GLt=s(FK);Hqr=r(GLt,"FlaxAlbertForTokenClassification"),GLt.forEach(t),Uqr=r(eqe," (ALBERT model)"),eqe.forEach(t),Jqr=i(Fo),Fw=n(Fo,"LI",{});var oqe=s(Fw);H4e=n(oqe,"STRONG",{});var OLt=s(H4e);Yqr=r(OLt,"bert"),OLt.forEach(t),Kqr=r(oqe," \u2014 "),TK=n(oqe,"A",{href:!0});var VLt=s(TK);Zqr=r(VLt,"FlaxBertForTokenClassification"),VLt.forEach(t),eNr=r(oqe," (BERT model)"),oqe.forEach(t),oNr=i(Fo),Tw=n(Fo,"LI",{});var rqe=s(Tw);U4e=n(rqe,"STRONG",{});var XLt=s(U4e);rNr=r(XLt,"big_bird"),XLt.forEach(t),tNr=r(rqe," \u2014 "),MK=n(rqe,"A",{href:!0});var zLt=s(MK);aNr=r(zLt,"FlaxBigBirdForTokenClassification"),zLt.forEach(t),nNr=r(rqe," (BigBird model)"),rqe.forEach(t),sNr=i(Fo),Mw=n(Fo,"LI",{});var tqe=s(Mw);J4e=n(tqe,"STRONG",{});var WLt=s(J4e);lNr=r(WLt,"distilbert"),WLt.forEach(t),iNr=r(tqe," \u2014 "),EK=n(tqe,"A",{href:!0});var QLt=s(EK);dNr=r(QLt,"FlaxDistilBertForTokenClassification"),QLt.forEach(t),cNr=r(tqe," (DistilBERT model)"),tqe.forEach(t),fNr=i(Fo),Ew=n(Fo,"LI",{});var aqe=s(Ew);Y4e=n(aqe,"STRONG",{});var HLt=s(Y4e);mNr=r(HLt,"electra"),HLt.forEach(t),gNr=r(aqe," \u2014 "),CK=n(aqe,"A",{href:!0});var ULt=s(CK);hNr=r(ULt,"FlaxElectraForTokenClassification"),ULt.forEach(t),pNr=r(aqe," (ELECTRA model)"),aqe.forEach(t),_Nr=i(Fo),Cw=n(Fo,"LI",{});var nqe=s(Cw);K4e=n(nqe,"STRONG",{});var JLt=s(K4e);uNr=r(JLt,"roberta"),JLt.forEach(t),bNr=r(nqe," \u2014 "),wK=n(nqe,"A",{href:!0});var YLt=s(wK);vNr=r(YLt,"FlaxRobertaForTokenClassification"),YLt.forEach(t),FNr=r(nqe," (RoBERTa model)"),nqe.forEach(t),TNr=i(Fo),ww=n(Fo,"LI",{});var sqe=s(ww);Z4e=n(sqe,"STRONG",{});var KLt=s(Z4e);MNr=r(KLt,"roformer"),KLt.forEach(t),ENr=r(sqe," \u2014 "),AK=n(sqe,"A",{href:!0});var ZLt=s(AK);CNr=r(ZLt,"FlaxRoFormerForTokenClassification"),ZLt.forEach(t),wNr=r(sqe," (RoFormer model)"),sqe.forEach(t),ANr=i(Fo),Aw=n(Fo,"LI",{});var lqe=s(Aw);eEe=n(lqe,"STRONG",{});var e8t=s(eEe);yNr=r(e8t,"xlm-roberta"),e8t.forEach(t),LNr=r(lqe," \u2014 "),yK=n(lqe,"A",{href:!0});var o8t=s(yK);xNr=r(o8t,"FlaxXLMRobertaForTokenClassification"),o8t.forEach(t),$Nr=r(lqe," (XLM-RoBERTa model)"),lqe.forEach(t),Fo.forEach(t),kNr=i(ri),T(yw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),pje=i(f),Zc=n(f,"H2",{class:!0});var MGe=s(Zc);Lw=n(MGe,"A",{id:!0,class:!0,href:!0});var r8t=s(Lw);oEe=n(r8t,"SPAN",{});var t8t=s(oEe);T(tx.$$.fragment,t8t),t8t.forEach(t),r8t.forEach(t),SNr=i(MGe),rEe=n(MGe,"SPAN",{});var a8t=s(rEe);RNr=r(a8t,"FlaxAutoModelForMultipleChoice"),a8t.forEach(t),MGe.forEach(t),_je=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ax.$$.fragment,ti),PNr=i(ti),ef=n(ti,"P",{});var Iee=s(ef);BNr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=n(Iee,"A",{href:!0});var n8t=s(LK);INr=r(n8t,"from_pretrained()"),n8t.forEach(t),qNr=r(Iee," class method or the "),xK=n(Iee,"A",{href:!0});var s8t=s(xK);NNr=r(s8t,"from_config()"),s8t.forEach(t),jNr=r(Iee,` class
method.`),Iee.forEach(t),DNr=i(ti),nx=n(ti,"P",{});var EGe=s(nx);GNr=r(EGe,"This class cannot be instantiated directly using "),tEe=n(EGe,"CODE",{});var l8t=s(tEe);ONr=r(l8t,"__init__()"),l8t.forEach(t),VNr=r(EGe," (throws an error)."),EGe.forEach(t),XNr=i(ti),Ut=n(ti,"DIV",{class:!0});var l6=s(Ut);T(sx.$$.fragment,l6),zNr=i(l6),aEe=n(l6,"P",{});var i8t=s(aEe);WNr=r(i8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),i8t.forEach(t),QNr=i(l6),of=n(l6,"P",{});var qee=s(of);HNr=r(qee,`Note:
Loading a model from its configuration file does `),nEe=n(qee,"STRONG",{});var d8t=s(nEe);UNr=r(d8t,"not"),d8t.forEach(t),JNr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(qee,"A",{href:!0});var c8t=s($K);YNr=r(c8t,"from_pretrained()"),c8t.forEach(t),KNr=r(qee," to load the model weights."),qee.forEach(t),ZNr=i(l6),T(xw.$$.fragment,l6),l6.forEach(t),ejr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(lx.$$.fragment,ai),ojr=i(ai),sEe=n(ai,"P",{});var f8t=s(sEe);rjr=r(f8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f8t.forEach(t),tjr=i(ai),Mn=n(ai,"P",{});var i6=s(Mn);ajr=r(i6,"The model class to instantiate is selected based on the "),lEe=n(i6,"CODE",{});var m8t=s(lEe);njr=r(m8t,"model_type"),m8t.forEach(t),sjr=r(i6,` property of the config object (either
passed as an argument or loaded from `),iEe=n(i6,"CODE",{});var g8t=s(iEe);ljr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),ijr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(i6,"CODE",{});var h8t=s(dEe);djr=r(h8t,"pretrained_model_name_or_path"),h8t.forEach(t),cjr=r(i6,":"),i6.forEach(t),fjr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);$w=n(To,"LI",{});var iqe=s($w);cEe=n(iqe,"STRONG",{});var p8t=s(cEe);mjr=r(p8t,"albert"),p8t.forEach(t),gjr=r(iqe," \u2014 "),kK=n(iqe,"A",{href:!0});var _8t=s(kK);hjr=r(_8t,"FlaxAlbertForMultipleChoice"),_8t.forEach(t),pjr=r(iqe," (ALBERT model)"),iqe.forEach(t),_jr=i(To),kw=n(To,"LI",{});var dqe=s(kw);fEe=n(dqe,"STRONG",{});var u8t=s(fEe);ujr=r(u8t,"bert"),u8t.forEach(t),bjr=r(dqe," \u2014 "),SK=n(dqe,"A",{href:!0});var b8t=s(SK);vjr=r(b8t,"FlaxBertForMultipleChoice"),b8t.forEach(t),Fjr=r(dqe," (BERT model)"),dqe.forEach(t),Tjr=i(To),Sw=n(To,"LI",{});var cqe=s(Sw);mEe=n(cqe,"STRONG",{});var v8t=s(mEe);Mjr=r(v8t,"big_bird"),v8t.forEach(t),Ejr=r(cqe," \u2014 "),RK=n(cqe,"A",{href:!0});var F8t=s(RK);Cjr=r(F8t,"FlaxBigBirdForMultipleChoice"),F8t.forEach(t),wjr=r(cqe," (BigBird model)"),cqe.forEach(t),Ajr=i(To),Rw=n(To,"LI",{});var fqe=s(Rw);gEe=n(fqe,"STRONG",{});var T8t=s(gEe);yjr=r(T8t,"distilbert"),T8t.forEach(t),Ljr=r(fqe," \u2014 "),PK=n(fqe,"A",{href:!0});var M8t=s(PK);xjr=r(M8t,"FlaxDistilBertForMultipleChoice"),M8t.forEach(t),$jr=r(fqe," (DistilBERT model)"),fqe.forEach(t),kjr=i(To),Pw=n(To,"LI",{});var mqe=s(Pw);hEe=n(mqe,"STRONG",{});var E8t=s(hEe);Sjr=r(E8t,"electra"),E8t.forEach(t),Rjr=r(mqe," \u2014 "),BK=n(mqe,"A",{href:!0});var C8t=s(BK);Pjr=r(C8t,"FlaxElectraForMultipleChoice"),C8t.forEach(t),Bjr=r(mqe," (ELECTRA model)"),mqe.forEach(t),Ijr=i(To),Bw=n(To,"LI",{});var gqe=s(Bw);pEe=n(gqe,"STRONG",{});var w8t=s(pEe);qjr=r(w8t,"roberta"),w8t.forEach(t),Njr=r(gqe," \u2014 "),IK=n(gqe,"A",{href:!0});var A8t=s(IK);jjr=r(A8t,"FlaxRobertaForMultipleChoice"),A8t.forEach(t),Djr=r(gqe," (RoBERTa model)"),gqe.forEach(t),Gjr=i(To),Iw=n(To,"LI",{});var hqe=s(Iw);_Ee=n(hqe,"STRONG",{});var y8t=s(_Ee);Ojr=r(y8t,"roformer"),y8t.forEach(t),Vjr=r(hqe," \u2014 "),qK=n(hqe,"A",{href:!0});var L8t=s(qK);Xjr=r(L8t,"FlaxRoFormerForMultipleChoice"),L8t.forEach(t),zjr=r(hqe," (RoFormer model)"),hqe.forEach(t),Wjr=i(To),qw=n(To,"LI",{});var pqe=s(qw);uEe=n(pqe,"STRONG",{});var x8t=s(uEe);Qjr=r(x8t,"xlm-roberta"),x8t.forEach(t),Hjr=r(pqe," \u2014 "),NK=n(pqe,"A",{href:!0});var $8t=s(NK);Ujr=r($8t,"FlaxXLMRobertaForMultipleChoice"),$8t.forEach(t),Jjr=r(pqe," (XLM-RoBERTa model)"),pqe.forEach(t),To.forEach(t),Yjr=i(ai),T(Nw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),uje=i(f),rf=n(f,"H2",{class:!0});var CGe=s(rf);jw=n(CGe,"A",{id:!0,class:!0,href:!0});var k8t=s(jw);bEe=n(k8t,"SPAN",{});var S8t=s(bEe);T(ix.$$.fragment,S8t),S8t.forEach(t),k8t.forEach(t),Kjr=i(CGe),vEe=n(CGe,"SPAN",{});var R8t=s(vEe);Zjr=r(R8t,"FlaxAutoModelForNextSentencePrediction"),R8t.forEach(t),CGe.forEach(t),bje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(dx.$$.fragment,ni),eDr=i(ni),tf=n(ni,"P",{});var Nee=s(tf);oDr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=n(Nee,"A",{href:!0});var P8t=s(jK);rDr=r(P8t,"from_pretrained()"),P8t.forEach(t),tDr=r(Nee," class method or the "),DK=n(Nee,"A",{href:!0});var B8t=s(DK);aDr=r(B8t,"from_config()"),B8t.forEach(t),nDr=r(Nee,` class
method.`),Nee.forEach(t),sDr=i(ni),cx=n(ni,"P",{});var wGe=s(cx);lDr=r(wGe,"This class cannot be instantiated directly using "),FEe=n(wGe,"CODE",{});var I8t=s(FEe);iDr=r(I8t,"__init__()"),I8t.forEach(t),dDr=r(wGe," (throws an error)."),wGe.forEach(t),cDr=i(ni),Jt=n(ni,"DIV",{class:!0});var d6=s(Jt);T(fx.$$.fragment,d6),fDr=i(d6),TEe=n(d6,"P",{});var q8t=s(TEe);mDr=r(q8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),q8t.forEach(t),gDr=i(d6),af=n(d6,"P",{});var jee=s(af);hDr=r(jee,`Note:
Loading a model from its configuration file does `),MEe=n(jee,"STRONG",{});var N8t=s(MEe);pDr=r(N8t,"not"),N8t.forEach(t),_Dr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(jee,"A",{href:!0});var j8t=s(GK);uDr=r(j8t,"from_pretrained()"),j8t.forEach(t),bDr=r(jee," to load the model weights."),jee.forEach(t),vDr=i(d6),T(Dw.$$.fragment,d6),d6.forEach(t),FDr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(mx.$$.fragment,si),TDr=i(si),EEe=n(si,"P",{});var D8t=s(EEe);MDr=r(D8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D8t.forEach(t),EDr=i(si),En=n(si,"P",{});var c6=s(En);CDr=r(c6,"The model class to instantiate is selected based on the "),CEe=n(c6,"CODE",{});var G8t=s(CEe);wDr=r(G8t,"model_type"),G8t.forEach(t),ADr=r(c6,` property of the config object (either
passed as an argument or loaded from `),wEe=n(c6,"CODE",{});var O8t=s(wEe);yDr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),LDr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(c6,"CODE",{});var V8t=s(AEe);xDr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),$Dr=r(c6,":"),c6.forEach(t),kDr=i(si),yEe=n(si,"UL",{});var X8t=s(yEe);Gw=n(X8t,"LI",{});var _qe=s(Gw);LEe=n(_qe,"STRONG",{});var z8t=s(LEe);SDr=r(z8t,"bert"),z8t.forEach(t),RDr=r(_qe," \u2014 "),OK=n(_qe,"A",{href:!0});var W8t=s(OK);PDr=r(W8t,"FlaxBertForNextSentencePrediction"),W8t.forEach(t),BDr=r(_qe," (BERT model)"),_qe.forEach(t),X8t.forEach(t),IDr=i(si),T(Ow.$$.fragment,si),si.forEach(t),ni.forEach(t),vje=i(f),nf=n(f,"H2",{class:!0});var AGe=s(nf);Vw=n(AGe,"A",{id:!0,class:!0,href:!0});var Q8t=s(Vw);xEe=n(Q8t,"SPAN",{});var H8t=s(xEe);T(gx.$$.fragment,H8t),H8t.forEach(t),Q8t.forEach(t),qDr=i(AGe),$Ee=n(AGe,"SPAN",{});var U8t=s($Ee);NDr=r(U8t,"FlaxAutoModelForImageClassification"),U8t.forEach(t),AGe.forEach(t),Fje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(hx.$$.fragment,li),jDr=i(li),sf=n(li,"P",{});var Dee=s(sf);DDr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VK=n(Dee,"A",{href:!0});var J8t=s(VK);GDr=r(J8t,"from_pretrained()"),J8t.forEach(t),ODr=r(Dee," class method or the "),XK=n(Dee,"A",{href:!0});var Y8t=s(XK);VDr=r(Y8t,"from_config()"),Y8t.forEach(t),XDr=r(Dee,` class
method.`),Dee.forEach(t),zDr=i(li),px=n(li,"P",{});var yGe=s(px);WDr=r(yGe,"This class cannot be instantiated directly using "),kEe=n(yGe,"CODE",{});var K8t=s(kEe);QDr=r(K8t,"__init__()"),K8t.forEach(t),HDr=r(yGe," (throws an error)."),yGe.forEach(t),UDr=i(li),Yt=n(li,"DIV",{class:!0});var f6=s(Yt);T(_x.$$.fragment,f6),JDr=i(f6),SEe=n(f6,"P",{});var Z8t=s(SEe);YDr=r(Z8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Z8t.forEach(t),KDr=i(f6),lf=n(f6,"P",{});var Gee=s(lf);ZDr=r(Gee,`Note:
Loading a model from its configuration file does `),REe=n(Gee,"STRONG",{});var e9t=s(REe);eGr=r(e9t,"not"),e9t.forEach(t),oGr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(Gee,"A",{href:!0});var o9t=s(zK);rGr=r(o9t,"from_pretrained()"),o9t.forEach(t),tGr=r(Gee," to load the model weights."),Gee.forEach(t),aGr=i(f6),T(Xw.$$.fragment,f6),f6.forEach(t),nGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(ux.$$.fragment,ii),sGr=i(ii),PEe=n(ii,"P",{});var r9t=s(PEe);lGr=r(r9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),r9t.forEach(t),iGr=i(ii),Cn=n(ii,"P",{});var m6=s(Cn);dGr=r(m6,"The model class to instantiate is selected based on the "),BEe=n(m6,"CODE",{});var t9t=s(BEe);cGr=r(t9t,"model_type"),t9t.forEach(t),fGr=r(m6,` property of the config object (either
passed as an argument or loaded from `),IEe=n(m6,"CODE",{});var a9t=s(IEe);mGr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),gGr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(m6,"CODE",{});var n9t=s(qEe);hGr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),pGr=r(m6,":"),m6.forEach(t),_Gr=i(ii),bx=n(ii,"UL",{});var LGe=s(bx);zw=n(LGe,"LI",{});var uqe=s(zw);NEe=n(uqe,"STRONG",{});var s9t=s(NEe);uGr=r(s9t,"beit"),s9t.forEach(t),bGr=r(uqe," \u2014 "),WK=n(uqe,"A",{href:!0});var l9t=s(WK);vGr=r(l9t,"FlaxBeitForImageClassification"),l9t.forEach(t),FGr=r(uqe," (BEiT model)"),uqe.forEach(t),TGr=i(LGe),Ww=n(LGe,"LI",{});var bqe=s(Ww);jEe=n(bqe,"STRONG",{});var i9t=s(jEe);MGr=r(i9t,"vit"),i9t.forEach(t),EGr=r(bqe," \u2014 "),QK=n(bqe,"A",{href:!0});var d9t=s(QK);CGr=r(d9t,"FlaxViTForImageClassification"),d9t.forEach(t),wGr=r(bqe," (ViT model)"),bqe.forEach(t),LGe.forEach(t),AGr=i(ii),T(Qw.$$.fragment,ii),ii.forEach(t),li.forEach(t),Tje=i(f),df=n(f,"H2",{class:!0});var xGe=s(df);Hw=n(xGe,"A",{id:!0,class:!0,href:!0});var c9t=s(Hw);DEe=n(c9t,"SPAN",{});var f9t=s(DEe);T(vx.$$.fragment,f9t),f9t.forEach(t),c9t.forEach(t),yGr=i(xGe),GEe=n(xGe,"SPAN",{});var m9t=s(GEe);LGr=r(m9t,"FlaxAutoModelForVision2Seq"),m9t.forEach(t),xGe.forEach(t),Mje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Fx.$$.fragment,di),xGr=i(di),cf=n(di,"P",{});var Oee=s(cf);$Gr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HK=n(Oee,"A",{href:!0});var g9t=s(HK);kGr=r(g9t,"from_pretrained()"),g9t.forEach(t),SGr=r(Oee," class method or the "),UK=n(Oee,"A",{href:!0});var h9t=s(UK);RGr=r(h9t,"from_config()"),h9t.forEach(t),PGr=r(Oee,` class
method.`),Oee.forEach(t),BGr=i(di),Tx=n(di,"P",{});var $Ge=s(Tx);IGr=r($Ge,"This class cannot be instantiated directly using "),OEe=n($Ge,"CODE",{});var p9t=s(OEe);qGr=r(p9t,"__init__()"),p9t.forEach(t),NGr=r($Ge," (throws an error)."),$Ge.forEach(t),jGr=i(di),Kt=n(di,"DIV",{class:!0});var g6=s(Kt);T(Mx.$$.fragment,g6),DGr=i(g6),VEe=n(g6,"P",{});var _9t=s(VEe);GGr=r(_9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_9t.forEach(t),OGr=i(g6),ff=n(g6,"P",{});var Vee=s(ff);VGr=r(Vee,`Note:
Loading a model from its configuration file does `),XEe=n(Vee,"STRONG",{});var u9t=s(XEe);XGr=r(u9t,"not"),u9t.forEach(t),zGr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Vee,"A",{href:!0});var b9t=s(JK);WGr=r(b9t,"from_pretrained()"),b9t.forEach(t),QGr=r(Vee," to load the model weights."),Vee.forEach(t),HGr=i(g6),T(Uw.$$.fragment,g6),g6.forEach(t),UGr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ex.$$.fragment,ci),JGr=i(ci),zEe=n(ci,"P",{});var v9t=s(zEe);YGr=r(v9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v9t.forEach(t),KGr=i(ci),wn=n(ci,"P",{});var h6=s(wn);ZGr=r(h6,"The model class to instantiate is selected based on the "),WEe=n(h6,"CODE",{});var F9t=s(WEe);eOr=r(F9t,"model_type"),F9t.forEach(t),oOr=r(h6,` property of the config object (either
passed as an argument or loaded from `),QEe=n(h6,"CODE",{});var T9t=s(QEe);rOr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),tOr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(h6,"CODE",{});var M9t=s(HEe);aOr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),nOr=r(h6,":"),h6.forEach(t),sOr=i(ci),UEe=n(ci,"UL",{});var E9t=s(UEe);Jw=n(E9t,"LI",{});var vqe=s(Jw);JEe=n(vqe,"STRONG",{});var C9t=s(JEe);lOr=r(C9t,"vision-encoder-decoder"),C9t.forEach(t),iOr=r(vqe," \u2014 "),YK=n(vqe,"A",{href:!0});var w9t=s(YK);dOr=r(w9t,"FlaxVisionEncoderDecoderModel"),w9t.forEach(t),cOr=r(vqe," (Vision Encoder decoder model)"),vqe.forEach(t),E9t.forEach(t),fOr=i(ci),T(Yw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(x$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(V$,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(X$,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertConfig"),c(z$,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartConfig"),c(W$,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitConfig"),c(Q$,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertConfig"),c(H$,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(U$,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdConfig"),c(J$,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Y$,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(K$,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Z$,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertConfig"),c(ek,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineConfig"),c(ok,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPConfig"),c(rk,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertConfig"),c(tk,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextConfig"),c(ak,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLConfig"),c(nk,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtConfig"),c(sk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(lk,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(ik,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(dk,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaConfig"),c(ck,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(fk,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mk,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTConfig"),c(gk,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrConfig"),c(hk,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pk,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRConfig"),c(_k,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTConfig"),c(uk,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraConfig"),c(bk,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vk,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Fk,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaConfig"),c(Tk,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetConfig"),c(Mk,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ek,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelConfig"),c(Ck,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNConfig"),c(wk,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Config"),c(Ak,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(yk,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJConfig"),c(Lk,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTConfig"),c(xk,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertConfig"),c($k,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertConfig"),c(kk,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Sk,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Rk,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Pk,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDConfig"),c(Bk,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerConfig"),c(Ik,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeConfig"),c(qk,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertConfig"),c(Nk,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Config"),c(jk,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianConfig"),c(Dk,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Gk,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartConfig"),c(Ok,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Vk,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Xk,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetConfig"),c(zk,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Config"),c(Wk,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Qk,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Hk,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTConfig"),c(Uk,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusConfig"),c(Jk,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Yk,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartConfig"),c(Kk,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Zk,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(eS,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(oS,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagConfig"),c(rS,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmConfig"),c(tS,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerConfig"),c(aS,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetConfig"),c(nS,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertConfig"),c(sS,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetConfig"),c(lS,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertConfig"),c(iS,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaConfig"),c(dS,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerConfig"),c(cS,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerConfig"),c(fS,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWConfig"),c(mS,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDConfig"),c(gS,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(hS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(pS,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(_S,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterConfig"),c(uS,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(bS,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinConfig"),c(vS,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Config"),c(FS,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasConfig"),c(TS,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(MS,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(ES,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRConfig"),c(CS,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(wS,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(AS,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanConfig"),c(yS,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltConfig"),c(LS,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(xS,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c($S,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(kS,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTConfig"),c(SS,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(RS,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(PS,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(BS,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMConfig"),c(IS,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMConfig"),c(qS,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMConfig"),c(NS,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(jS,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(DS,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(GS,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetConfig"),c(OS,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosConfig"),c(VS,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(XS,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(zS,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(WS,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(QS,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizer"),c(HS,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartTokenizerFast"),c(US,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizer"),c(JS,"href","/docs/transformers/pr_17313/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(YS,"href","/docs/transformers/pr_17313/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(KS,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(ZS,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(eR,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(oR,"href","/docs/transformers/pr_17313/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(rR,"href","/docs/transformers/pr_17313/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(tR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(aR,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(nR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(sR,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(lR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(iR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(dR,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(cR,"href","/docs/transformers/pr_17313/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(fR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizer"),c(mR,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineTokenizer"),c(hR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(pR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_R,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(uR,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizer"),c(vR,"href","/docs/transformers/pr_17313/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(FR,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(TR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizer"),c(CR,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(wR,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(AR,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(LR,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c($R,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(kR,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizer"),c(SR,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(RR,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(PR,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizer"),c(BR,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(IR,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(qR,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizer"),c(NR,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(jR,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DR,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GR,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OR,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(XR,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(zR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizer"),c(WR,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(QR,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizer"),c(HR,"href","/docs/transformers/pr_17313/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YR,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ZR,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(eP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(oP,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(rP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(tP,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(aP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizer"),c(nP,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDTokenizerFast"),c(sP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizer"),c(lP,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(iP,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeTokenizer"),c(dP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(cP,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(fP,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(mP,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianTokenizer"),c(gP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizer"),c(hP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(pP,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(_P,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(uP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(bP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17313/en/model_doc/mluke#transformers.MLukeTokenizer"),c(FP,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(TP,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(EP,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(CP,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(wP,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(AP,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(yP,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(xP,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c($P,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kP,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(SP,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(RP,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(PP,"href","/docs/transformers/pr_17313/en/model_doc/phobert#transformers.PhobertTokenizer"),c(BP,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartTokenizer"),c(IP,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(qP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(NP,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17313/en/model_doc/rag#transformers.RagTokenizer"),c(DP,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizer"),c(GP,"href","/docs/transformers/pr_17313/en/model_doc/realm#transformers.RealmTokenizerFast"),c(OP,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizer"),c(VP,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(XP,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizer"),c(zP,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(QP,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UP,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JP,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(YP,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(KP,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(ZP,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(eB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizer"),c(oB,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(rB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(tB,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Tokenizer"),c(nB,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5TokenizerFast"),c(sB,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasTokenizer"),c(lB,"href","/docs/transformers/pr_17313/en/model_doc/tapex#transformers.TapexTokenizer"),c(iB,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(dB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizer"),c(cB,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(hB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizer"),c(pB,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(_B,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMTokenizer"),c(uB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(bB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(vB,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(FB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(EB,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(CB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizer"),c(wB,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(AB,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(yB,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DB,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(GB,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eI,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(oI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(rI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(tI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPProcessor"),c(aI,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(nI,"href","/docs/transformers/pr_17313/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(sI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(dI,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(cI,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRProcessor"),c(fI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltProcessor"),c(hI,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(pI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_I,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uI,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"id","transformers.AutoModel"),c(tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(bI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FI,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TI,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertModel"),c(MI,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartModel"),c(EI,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitModel"),c(CI,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertModel"),c(wI,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(AI,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdModel"),c(yI,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(LI,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(xI,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c($I,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertModel"),c(kI,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineModel"),c(SI,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.CLIPModel"),c(RI,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertModel"),c(PI,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextModel"),c(BI,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLModel"),c(II,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtModel"),c(qI,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(NI,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(jI,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(DI,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaModel"),c(GI,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(OI,"href","/docs/transformers/pr_17313/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(VI,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTModel"),c(XI,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrModel"),c(zI,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertModel"),c(WI,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(QI,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTModel"),c(HI,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraModel"),c(UI,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertModel"),c(JI,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaModel"),c(YI,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetModel"),c(KI,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTModel"),c(ZI,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelModel"),c(eq,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelBaseModel"),c(oq,"href","/docs/transformers/pr_17313/en/model_doc/glpn#transformers.GLPNModel"),c(rq,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2Model"),c(tq,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(aq,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJModel"),c(nq,"href","/docs/transformers/pr_17313/en/model_doc/groupvit#transformers.GroupViTModel"),c(sq,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertModel"),c(lq,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertModel"),c(iq,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(dq,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(cq,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(fq,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDModel"),c(mq,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerModel"),c(gq,"href","/docs/transformers/pr_17313/en/model_doc/luke#transformers.LukeModel"),c(hq,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertModel"),c(pq,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100Model"),c(_q,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianModel"),c(uq,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerModel"),c(bq,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartModel"),c(vq,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Fq,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Tq,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetModel"),c(Mq,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5Model"),c(Eq,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Cq,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(wq,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTModel"),c(Aq,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusModel"),c(yq,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverModel"),c(Lq,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartModel"),c(xq,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerModel"),c($q,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(kq,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Sq,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModel"),c(Rq,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetModel"),c(Pq,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertModel"),c(Bq,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetModel"),c(Iq,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(qq,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaModel"),c(Nq,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerModel"),c(jq,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerModel"),c(Dq,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWModel"),c(Gq,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDModel"),c(Oq,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Vq,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterModel"),c(Xq,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(zq,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinModel"),c(Wq,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5Model"),c(Qq,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasModel"),c(Hq,"href","/docs/transformers/pr_17313/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Uq,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Jq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Yq,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Kq,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanModel"),c(Zq,"href","/docs/transformers/pr_17313/en/model_doc/vilt#transformers.ViltModel"),c(eN,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(oN,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertModel"),c(rN,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTModel"),c(tN,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(aN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(nN,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(sN,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMModel"),c(lN,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMModel"),c(iN,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMModel"),c(dN,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(cN,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(fN,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(mN,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetModel"),c(gN,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosModel"),c(hN,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z_,"id","transformers.AutoModelForPreTraining"),c(Z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(pN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uN,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bN,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForPreTraining"),c(vN,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FN,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForPreTraining"),c(TN,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(MN,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(EN,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CN,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wN,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(AN,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(yN,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xN,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($N,"href","/docs/transformers/pr_17313/en/model_doc/flava#transformers.FlavaForPreTraining"),c(kN,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForPreTraining"),c(SN,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RN,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(PN,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BN,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(IN,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qN,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(NN,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jN,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(DN,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(GN,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ON,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VN,"href","/docs/transformers/pr_17313/en/model_doc/retribert#transformers.RetriBertModel"),c(XN,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zN,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(WN,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QN,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HN,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UN,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JN,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YN,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KN,"href","/docs/transformers/pr_17313/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ZN,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ej,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(oj,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(rj,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nj,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zu,"id","transformers.AutoModelForCausalLM"),c(zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(sj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ij,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForCausalLM"),c(cj,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertLMHeadModel"),c(fj,"href","/docs/transformers/pr_17313/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mj,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gj,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hj,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pj,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(_j,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(uj,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bj,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(vj,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Fj,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Tj,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Mj,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Ej,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianForCausalLM"),c(Cj,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForCausalLM"),c(wj,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Aj,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yj,"href","/docs/transformers/pr_17313/en/model_doc/opt#transformers.OPTForCausalLM"),c(Lj,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(xj,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForCausalLM"),c($j,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(kj,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Rj,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Pj,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Bj,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Ij,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(qj,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Nj,"href","/docs/transformers/pr_17313/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(jj,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Dj,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Oj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Vj,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Xj,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForMaskedLM"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(zj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qj,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hj,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oD,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rD,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tD,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(nD,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sD,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(lD,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(iD,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cD,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fD,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pD,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(_D,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(uD,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(vD,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(TD,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(MD,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CD,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(AD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yD,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.AutoModelForSeq2SeqLM"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(LD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($D,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kD,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ID,"href","/docs/transformers/pr_17313/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17313/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.MarianMTModel"),c(DD,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(VD,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17313/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17313/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.AutoModelForSequenceClassification"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(QD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17313/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForMultipleChoice"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(OG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XG,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zG,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f2,"id","transformers.AutoModelForNextSentencePrediction"),c(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(FO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(CO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(yO,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForTokenClassification"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(LO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(PO,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BO,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForTokenClassification"),c(IO,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(NO,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(jO,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(DO,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(OO,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(XO,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(zO,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(WO,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(HO,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(UO,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(JO,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(KO,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(eV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(rV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(tV,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(aV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(sV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(lV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(iV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(dV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForQuestionAnswering"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(cV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17313/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17313/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(yV,"href","/docs/transformers/pr_17313/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17313/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17313/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17313/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17313/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17313/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17313/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17313/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17313/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(HV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(YV,"href","/docs/transformers/pr_17313/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(KV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForImageClassification"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(rX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForImageClassification"),c(sX,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(lX,"href","/docs/transformers/pr_17313/en/model_doc/cvt#transformers.CvtForImageClassification"),c(iX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(dX,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassification"),c(cX,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(fX,"href","/docs/transformers/pr_17313/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(mX,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(gX,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(hX,"href","/docs/transformers/pr_17313/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(pX,"href","/docs/transformers/pr_17313/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(_X,"href","/docs/transformers/pr_17313/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(uX,"href","/docs/transformers/pr_17313/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(bX,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(vX,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForImageClassification"),c(FX,"href","/docs/transformers/pr_17313/en/model_doc/van#transformers.VanForImageClassification"),c(TX,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForVision2Seq"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(MX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForAudioClassification"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c($X,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForAudioFrameClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(NX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(OX,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(VX,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(XX,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(zX,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForCTC"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(WX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(JX,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.HubertForCTC"),c(YX,"href","/docs/transformers/pr_17313/en/model_doc/sew#transformers.SEWForCTC"),c(KX,"href","/docs/transformers/pr_17313/en/model_doc/sew-d#transformers.SEWDForCTC"),c(ZX,"href","/docs/transformers/pr_17313/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(ez,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(oz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(rz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(tz,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(az,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17313/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(iz,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForAudioXVector"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(dz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(gz,"href","/docs/transformers/pr_17313/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(hz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(pz,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(_z,"href","/docs/transformers/pr_17313/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForMaskedImageModeling"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(uz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17313/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Tz,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Mz,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForObjectDetection"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForObjectDetection"),c(yz,"href","/docs/transformers/pr_17313/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForImageSegmentation"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Lz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_17313/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForSemanticSegmentation"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Iz,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(qz,"href","/docs/transformers/pr_17313/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Nz,"href","/docs/transformers/pr_17313/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForInstanceSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17313/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.TFAutoModel"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertModel"),c(Qz,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartModel"),c(Hz,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertModel"),c(Uz,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Jz,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Yz,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertModel"),c(Kz,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.TFCLIPModel"),c(Zz,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertModel"),c(eW,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextModel"),c(oW,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLModel"),c(rW,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(tW,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaModel"),c(aW,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(nW,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(sW,"href","/docs/transformers/pr_17313/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(lW,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraModel"),c(iW,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(dW,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelModel"),c(cW,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(fW,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2Model"),c(mW,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJModel"),c(gW,"href","/docs/transformers/pr_17313/en/model_doc/hubert#transformers.TFHubertModel"),c(hW,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(pW,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDModel"),c(_W,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerModel"),c(uW,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertModel"),c(bW,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianModel"),c(vW,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartModel"),c(FW,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(TW,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetModel"),c(MW,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5Model"),c(EW,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(CW,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusModel"),c(wW,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertModel"),c(AW,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaModel"),c(yW,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerModel"),c(LW,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xW,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinModel"),c($W,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5Model"),c(kW,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasModel"),c(SW,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(RW,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTModel"),c(PW,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(BW,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(IW,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMModel"),c(qW,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(NW,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.TFAutoModelForPreTraining"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(VW,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XW,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zW,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WW,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QW,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HW,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(UW,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JW,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(YW,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KW,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZW,"href","/docs/transformers/pr_17313/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17313/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(iQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForCausalLM"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(_Q,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bQ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(vQ,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FQ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(TQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(MQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(EQ,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForImageClassification"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_17313/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c($Q,"href","/docs/transformers/pr_17313/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(kQ,"href","/docs/transformers/pr_17313/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(SQ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForMaskedLM"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eH,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oH,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(rH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(lH,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(dH,"href","/docs/transformers/pr_17313/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(cH,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.TFMarianMTModel"),c(fH,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(gH,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(hH,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSequenceClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(pH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17313/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c($H,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17313/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17313/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForMultipleChoice"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(XH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(iU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(dU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(cU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(hU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(pU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17313/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForTokenClassification"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(vU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(wU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(AU,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(yU,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c($U,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kU,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(SU,"href","/docs/transformers/pr_17313/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(RU,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PU,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IU,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(qU,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NU,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(jU,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(DU,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GU,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForQuestionAnswering"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(OU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17313/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17313/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17313/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17313/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17313/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(eJ,"href","/docs/transformers/pr_17313/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17313/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17313/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17313/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17313/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(dJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17313/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForVision2Seq"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(fJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17313/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModel"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertModel"),c(EJ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartModel"),c(CJ,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitModel"),c(wJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertModel"),c(AJ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(yJ,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(LJ,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xJ,"href","/docs/transformers/pr_17313/en/model_doc/clip#transformers.FlaxCLIPModel"),c($J,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(kJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraModel"),c(SJ,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(RJ,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(PJ,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(BJ,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianModel"),c(IJ,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartModel"),c(qJ,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5Model"),c(NJ,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(jJ,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(DJ,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(GJ,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5Model"),c(OJ,"href","/docs/transformers/pr_17313/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(VJ,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTModel"),c(XJ,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(zJ,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(WJ,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForCausalLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(YJ,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(KJ,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(eY,"href","/docs/transformers/pr_17313/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(oY,"href","/docs/transformers/pr_17313/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(rY,"href","/docs/transformers/pr_17313/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(tY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aY,"href","/docs/transformers/pr_17313/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForPreTraining"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(nY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(uY,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17313/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(vY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.FlaxAutoModelForMaskedLM"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(FY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yY,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(LY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(xY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kY,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SY,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(RY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17313/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17313/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(DY,"href","/docs/transformers/pr_17313/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(GY,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17313/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17313/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17313/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17313/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17313/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForTokenClassification"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(TK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(EK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(CK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(AK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(yK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(LK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_17313/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17313/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17313/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17313/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17313/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17313/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17313/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(jK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_17313/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForImageClassification"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(VK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17313/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(QK,"href","/docs/transformers/pr_17313/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(HK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17313/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17313/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,p6),e(rt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,_6),e(We,Ln),e(We,xn),e(xn,u6),e(We,pi),e(We,$n),e($n,b6),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,q$),e(Ae,ui),e(ui,N$),e(Ae,j$),b(f,Eo,u),b(f,wa,u),e(wa,D$),e(wa,bf),e(bf,G$),e(wa,kGe),b(f,Fqe,u),b(f,bi,u),e(bi,vf),e(vf,Xee),M(v6,Xee,null),e(bi,SGe),e(bi,zee),e(zee,RGe),b(f,Tqe,u),b(f,kn,u),e(kn,PGe),e(kn,Wee),e(Wee,BGe),e(kn,IGe),e(kn,Qee),e(Qee,qGe),e(kn,NGe),b(f,Mqe,u),M(F6,f,u),b(f,Eqe,u),b(f,O$,u),e(O$,jGe),b(f,Cqe,u),M(Ff,f,u),b(f,wqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Hee),M(T6,Hee,null),e(vi,DGe),e(vi,Uee),e(Uee,GGe),b(f,Aqe,u),b(f,Co,u),M(M6,Co,null),e(Co,OGe),e(Co,E6),e(E6,VGe),e(E6,V$),e(V$,XGe),e(E6,zGe),e(Co,WGe),e(Co,C6),e(C6,QGe),e(C6,Jee),e(Jee,HGe),e(C6,UGe),e(Co,JGe),e(Co,Er),M(w6,Er,null),e(Er,YGe),e(Er,Yee),e(Yee,KGe),e(Er,ZGe),e(Er,Fi),e(Fi,eOe),e(Fi,Kee),e(Kee,oOe),e(Fi,rOe),e(Fi,Zee),e(Zee,tOe),e(Fi,aOe),e(Er,nOe),e(Er,A),e(A,Mf),e(Mf,eoe),e(eoe,sOe),e(Mf,lOe),e(Mf,X$),e(X$,iOe),e(Mf,dOe),e(A,cOe),e(A,Ef),e(Ef,ooe),e(ooe,fOe),e(Ef,mOe),e(Ef,z$),e(z$,gOe),e(Ef,hOe),e(A,pOe),e(A,Cf),e(Cf,roe),e(roe,_Oe),e(Cf,uOe),e(Cf,W$),e(W$,bOe),e(Cf,vOe),e(A,FOe),e(A,wf),e(wf,toe),e(toe,TOe),e(wf,MOe),e(wf,Q$),e(Q$,EOe),e(wf,COe),e(A,wOe),e(A,Af),e(Af,aoe),e(aoe,AOe),e(Af,yOe),e(Af,H$),e(H$,LOe),e(Af,xOe),e(A,$Oe),e(A,yf),e(yf,noe),e(noe,kOe),e(yf,SOe),e(yf,U$),e(U$,ROe),e(yf,POe),e(A,BOe),e(A,Lf),e(Lf,soe),e(soe,IOe),e(Lf,qOe),e(Lf,J$),e(J$,NOe),e(Lf,jOe),e(A,DOe),e(A,xf),e(xf,loe),e(loe,GOe),e(xf,OOe),e(xf,Y$),e(Y$,VOe),e(xf,XOe),e(A,zOe),e(A,$f),e($f,ioe),e(ioe,WOe),e($f,QOe),e($f,K$),e(K$,HOe),e($f,UOe),e(A,JOe),e(A,kf),e(kf,doe),e(doe,YOe),e(kf,KOe),e(kf,Z$),e(Z$,ZOe),e(kf,eVe),e(A,oVe),e(A,Sf),e(Sf,coe),e(coe,rVe),e(Sf,tVe),e(Sf,ek),e(ek,aVe),e(Sf,nVe),e(A,sVe),e(A,Rf),e(Rf,foe),e(foe,lVe),e(Rf,iVe),e(Rf,ok),e(ok,dVe),e(Rf,cVe),e(A,fVe),e(A,Pf),e(Pf,moe),e(moe,mVe),e(Pf,gVe),e(Pf,rk),e(rk,hVe),e(Pf,pVe),e(A,_Ve),e(A,Bf),e(Bf,goe),e(goe,uVe),e(Bf,bVe),e(Bf,tk),e(tk,vVe),e(Bf,FVe),e(A,TVe),e(A,If),e(If,hoe),e(hoe,MVe),e(If,EVe),e(If,ak),e(ak,CVe),e(If,wVe),e(A,AVe),e(A,qf),e(qf,poe),e(poe,yVe),e(qf,LVe),e(qf,nk),e(nk,xVe),e(qf,$Ve),e(A,kVe),e(A,Nf),e(Nf,_oe),e(_oe,SVe),e(Nf,RVe),e(Nf,sk),e(sk,PVe),e(Nf,BVe),e(A,IVe),e(A,jf),e(jf,uoe),e(uoe,qVe),e(jf,NVe),e(jf,lk),e(lk,jVe),e(jf,DVe),e(A,GVe),e(A,Df),e(Df,boe),e(boe,OVe),e(Df,VVe),e(Df,ik),e(ik,XVe),e(Df,zVe),e(A,WVe),e(A,Gf),e(Gf,voe),e(voe,QVe),e(Gf,HVe),e(Gf,dk),e(dk,UVe),e(Gf,JVe),e(A,YVe),e(A,Of),e(Of,Foe),e(Foe,KVe),e(Of,ZVe),e(Of,ck),e(ck,eXe),e(Of,oXe),e(A,rXe),e(A,Vf),e(Vf,Toe),e(Toe,tXe),e(Vf,aXe),e(Vf,fk),e(fk,nXe),e(Vf,sXe),e(A,lXe),e(A,Xf),e(Xf,Moe),e(Moe,iXe),e(Xf,dXe),e(Xf,mk),e(mk,cXe),e(Xf,fXe),e(A,mXe),e(A,zf),e(zf,Eoe),e(Eoe,gXe),e(zf,hXe),e(zf,gk),e(gk,pXe),e(zf,_Xe),e(A,uXe),e(A,Wf),e(Wf,Coe),e(Coe,bXe),e(Wf,vXe),e(Wf,hk),e(hk,FXe),e(Wf,TXe),e(A,MXe),e(A,Qf),e(Qf,woe),e(woe,EXe),e(Qf,CXe),e(Qf,pk),e(pk,wXe),e(Qf,AXe),e(A,yXe),e(A,Hf),e(Hf,Aoe),e(Aoe,LXe),e(Hf,xXe),e(Hf,_k),e(_k,$Xe),e(Hf,kXe),e(A,SXe),e(A,Uf),e(Uf,yoe),e(yoe,RXe),e(Uf,PXe),e(Uf,uk),e(uk,BXe),e(Uf,IXe),e(A,qXe),e(A,Jf),e(Jf,Loe),e(Loe,NXe),e(Jf,jXe),e(Jf,bk),e(bk,DXe),e(Jf,GXe),e(A,OXe),e(A,Yf),e(Yf,xoe),e(xoe,VXe),e(Yf,XXe),e(Yf,vk),e(vk,zXe),e(Yf,WXe),e(A,QXe),e(A,Kf),e(Kf,$oe),e($oe,HXe),e(Kf,UXe),e(Kf,Fk),e(Fk,JXe),e(Kf,YXe),e(A,KXe),e(A,Zf),e(Zf,koe),e(koe,ZXe),e(Zf,eze),e(Zf,Tk),e(Tk,oze),e(Zf,rze),e(A,tze),e(A,em),e(em,Soe),e(Soe,aze),e(em,nze),e(em,Mk),e(Mk,sze),e(em,lze),e(A,ize),e(A,om),e(om,Roe),e(Roe,dze),e(om,cze),e(om,Ek),e(Ek,fze),e(om,mze),e(A,gze),e(A,rm),e(rm,Poe),e(Poe,hze),e(rm,pze),e(rm,Ck),e(Ck,_ze),e(rm,uze),e(A,bze),e(A,tm),e(tm,Boe),e(Boe,vze),e(tm,Fze),e(tm,wk),e(wk,Tze),e(tm,Mze),e(A,Eze),e(A,am),e(am,Ioe),e(Ioe,Cze),e(am,wze),e(am,Ak),e(Ak,Aze),e(am,yze),e(A,Lze),e(A,nm),e(nm,qoe),e(qoe,xze),e(nm,$ze),e(nm,yk),e(yk,kze),e(nm,Sze),e(A,Rze),e(A,sm),e(sm,Noe),e(Noe,Pze),e(sm,Bze),e(sm,Lk),e(Lk,Ize),e(sm,qze),e(A,Nze),e(A,lm),e(lm,joe),e(joe,jze),e(lm,Dze),e(lm,xk),e(xk,Gze),e(lm,Oze),e(A,Vze),e(A,im),e(im,Doe),e(Doe,Xze),e(im,zze),e(im,$k),e($k,Wze),e(im,Qze),e(A,Hze),e(A,dm),e(dm,Goe),e(Goe,Uze),e(dm,Jze),e(dm,kk),e(kk,Yze),e(dm,Kze),e(A,Zze),e(A,cm),e(cm,Ooe),e(Ooe,eWe),e(cm,oWe),e(cm,Sk),e(Sk,rWe),e(cm,tWe),e(A,aWe),e(A,fm),e(fm,Voe),e(Voe,nWe),e(fm,sWe),e(fm,Rk),e(Rk,lWe),e(fm,iWe),e(A,dWe),e(A,mm),e(mm,Xoe),e(Xoe,cWe),e(mm,fWe),e(mm,Pk),e(Pk,mWe),e(mm,gWe),e(A,hWe),e(A,gm),e(gm,zoe),e(zoe,pWe),e(gm,_We),e(gm,Bk),e(Bk,uWe),e(gm,bWe),e(A,vWe),e(A,hm),e(hm,Woe),e(Woe,FWe),e(hm,TWe),e(hm,Ik),e(Ik,MWe),e(hm,EWe),e(A,CWe),e(A,pm),e(pm,Qoe),e(Qoe,wWe),e(pm,AWe),e(pm,qk),e(qk,yWe),e(pm,LWe),e(A,xWe),e(A,_m),e(_m,Hoe),e(Hoe,$We),e(_m,kWe),e(_m,Nk),e(Nk,SWe),e(_m,RWe),e(A,PWe),e(A,um),e(um,Uoe),e(Uoe,BWe),e(um,IWe),e(um,jk),e(jk,qWe),e(um,NWe),e(A,jWe),e(A,bm),e(bm,Joe),e(Joe,DWe),e(bm,GWe),e(bm,Dk),e(Dk,OWe),e(bm,VWe),e(A,XWe),e(A,vm),e(vm,Yoe),e(Yoe,zWe),e(vm,WWe),e(vm,Gk),e(Gk,QWe),e(vm,HWe),e(A,UWe),e(A,Fm),e(Fm,Koe),e(Koe,JWe),e(Fm,YWe),e(Fm,Ok),e(Ok,KWe),e(Fm,ZWe),e(A,eQe),e(A,Tm),e(Tm,Zoe),e(Zoe,oQe),e(Tm,rQe),e(Tm,Vk),e(Vk,tQe),e(Tm,aQe),e(A,nQe),e(A,Mm),e(Mm,ere),e(ere,sQe),e(Mm,lQe),e(Mm,Xk),e(Xk,iQe),e(Mm,dQe),e(A,cQe),e(A,Em),e(Em,ore),e(ore,fQe),e(Em,mQe),e(Em,zk),e(zk,gQe),e(Em,hQe),e(A,pQe),e(A,Cm),e(Cm,rre),e(rre,_Qe),e(Cm,uQe),e(Cm,Wk),e(Wk,bQe),e(Cm,vQe),e(A,FQe),e(A,wm),e(wm,tre),e(tre,TQe),e(wm,MQe),e(wm,Qk),e(Qk,EQe),e(wm,CQe),e(A,wQe),e(A,Am),e(Am,are),e(are,AQe),e(Am,yQe),e(Am,Hk),e(Hk,LQe),e(Am,xQe),e(A,$Qe),e(A,ym),e(ym,nre),e(nre,kQe),e(ym,SQe),e(ym,Uk),e(Uk,RQe),e(ym,PQe),e(A,BQe),e(A,Lm),e(Lm,sre),e(sre,IQe),e(Lm,qQe),e(Lm,Jk),e(Jk,NQe),e(Lm,jQe),e(A,DQe),e(A,xm),e(xm,lre),e(lre,GQe),e(xm,OQe),e(xm,Yk),e(Yk,VQe),e(xm,XQe),e(A,zQe),e(A,$m),e($m,ire),e(ire,WQe),e($m,QQe),e($m,Kk),e(Kk,HQe),e($m,UQe),e(A,JQe),e(A,km),e(km,dre),e(dre,YQe),e(km,KQe),e(km,Zk),e(Zk,ZQe),e(km,eHe),e(A,oHe),e(A,Sm),e(Sm,cre),e(cre,rHe),e(Sm,tHe),e(Sm,eS),e(eS,aHe),e(Sm,nHe),e(A,sHe),e(A,Rm),e(Rm,fre),e(fre,lHe),e(Rm,iHe),e(Rm,oS),e(oS,dHe),e(Rm,cHe),e(A,fHe),e(A,Pm),e(Pm,mre),e(mre,mHe),e(Pm,gHe),e(Pm,rS),e(rS,hHe),e(Pm,pHe),e(A,_He),e(A,Bm),e(Bm,gre),e(gre,uHe),e(Bm,bHe),e(Bm,tS),e(tS,vHe),e(Bm,FHe),e(A,THe),e(A,Im),e(Im,hre),e(hre,MHe),e(Im,EHe),e(Im,aS),e(aS,CHe),e(Im,wHe),e(A,AHe),e(A,qm),e(qm,pre),e(pre,yHe),e(qm,LHe),e(qm,nS),e(nS,xHe),e(qm,$He),e(A,kHe),e(A,Nm),e(Nm,_re),e(_re,SHe),e(Nm,RHe),e(Nm,sS),e(sS,PHe),e(Nm,BHe),e(A,IHe),e(A,jm),e(jm,ure),e(ure,qHe),e(jm,NHe),e(jm,lS),e(lS,jHe),e(jm,DHe),e(A,GHe),e(A,Dm),e(Dm,bre),e(bre,OHe),e(Dm,VHe),e(Dm,iS),e(iS,XHe),e(Dm,zHe),e(A,WHe),e(A,Gm),e(Gm,vre),e(vre,QHe),e(Gm,HHe),e(Gm,dS),e(dS,UHe),e(Gm,JHe),e(A,YHe),e(A,Om),e(Om,Fre),e(Fre,KHe),e(Om,ZHe),e(Om,cS),e(cS,eUe),e(Om,oUe),e(A,rUe),e(A,Vm),e(Vm,Tre),e(Tre,tUe),e(Vm,aUe),e(Vm,fS),e(fS,nUe),e(Vm,sUe),e(A,lUe),e(A,Xm),e(Xm,Mre),e(Mre,iUe),e(Xm,dUe),e(Xm,mS),e(mS,cUe),e(Xm,fUe),e(A,mUe),e(A,zm),e(zm,Ere),e(Ere,gUe),e(zm,hUe),e(zm,gS),e(gS,pUe),e(zm,_Ue),e(A,uUe),e(A,Wm),e(Wm,Cre),e(Cre,bUe),e(Wm,vUe),e(Wm,hS),e(hS,FUe),e(Wm,TUe),e(A,MUe),e(A,Qm),e(Qm,wre),e(wre,EUe),e(Qm,CUe),e(Qm,pS),e(pS,wUe),e(Qm,AUe),e(A,yUe),e(A,Hm),e(Hm,Are),e(Are,LUe),e(Hm,xUe),e(Hm,_S),e(_S,$Ue),e(Hm,kUe),e(A,SUe),e(A,Um),e(Um,yre),e(yre,RUe),e(Um,PUe),e(Um,uS),e(uS,BUe),e(Um,IUe),e(A,qUe),e(A,Jm),e(Jm,Lre),e(Lre,NUe),e(Jm,jUe),e(Jm,bS),e(bS,DUe),e(Jm,GUe),e(A,OUe),e(A,Ym),e(Ym,xre),e(xre,VUe),e(Ym,XUe),e(Ym,vS),e(vS,zUe),e(Ym,WUe),e(A,QUe),e(A,Km),e(Km,$re),e($re,HUe),e(Km,UUe),e(Km,FS),e(FS,JUe),e(Km,YUe),e(A,KUe),e(A,Zm),e(Zm,kre),e(kre,ZUe),e(Zm,eJe),e(Zm,TS),e(TS,oJe),e(Zm,rJe),e(A,tJe),e(A,eg),e(eg,Sre),e(Sre,aJe),e(eg,nJe),e(eg,MS),e(MS,sJe),e(eg,lJe),e(A,iJe),e(A,og),e(og,Rre),e(Rre,dJe),e(og,cJe),e(og,ES),e(ES,fJe),e(og,mJe),e(A,gJe),e(A,rg),e(rg,Pre),e(Pre,hJe),e(rg,pJe),e(rg,CS),e(CS,_Je),e(rg,uJe),e(A,bJe),e(A,tg),e(tg,Bre),e(Bre,vJe),e(tg,FJe),e(tg,wS),e(wS,TJe),e(tg,MJe),e(A,EJe),e(A,ag),e(ag,Ire),e(Ire,CJe),e(ag,wJe),e(ag,AS),e(AS,AJe),e(ag,yJe),e(A,LJe),e(A,ng),e(ng,qre),e(qre,xJe),e(ng,$Je),e(ng,yS),e(yS,kJe),e(ng,SJe),e(A,RJe),e(A,sg),e(sg,Nre),e(Nre,PJe),e(sg,BJe),e(sg,LS),e(LS,IJe),e(sg,qJe),e(A,NJe),e(A,lg),e(lg,jre),e(jre,jJe),e(lg,DJe),e(lg,xS),e(xS,GJe),e(lg,OJe),e(A,VJe),e(A,ig),e(ig,Dre),e(Dre,XJe),e(ig,zJe),e(ig,$S),e($S,WJe),e(ig,QJe),e(A,HJe),e(A,dg),e(dg,Gre),e(Gre,UJe),e(dg,JJe),e(dg,kS),e(kS,YJe),e(dg,KJe),e(A,ZJe),e(A,cg),e(cg,Ore),e(Ore,eYe),e(cg,oYe),e(cg,SS),e(SS,rYe),e(cg,tYe),e(A,aYe),e(A,fg),e(fg,Vre),e(Vre,nYe),e(fg,sYe),e(fg,RS),e(RS,lYe),e(fg,iYe),e(A,dYe),e(A,mg),e(mg,Xre),e(Xre,cYe),e(mg,fYe),e(mg,PS),e(PS,mYe),e(mg,gYe),e(A,hYe),e(A,gg),e(gg,zre),e(zre,pYe),e(gg,_Ye),e(gg,BS),e(BS,uYe),e(gg,bYe),e(A,vYe),e(A,hg),e(hg,Wre),e(Wre,FYe),e(hg,TYe),e(hg,IS),e(IS,MYe),e(hg,EYe),e(A,CYe),e(A,pg),e(pg,Qre),e(Qre,wYe),e(pg,AYe),e(pg,qS),e(qS,yYe),e(pg,LYe),e(A,xYe),e(A,_g),e(_g,Hre),e(Hre,$Ye),e(_g,kYe),e(_g,NS),e(NS,SYe),e(_g,RYe),e(A,PYe),e(A,ug),e(ug,Ure),e(Ure,BYe),e(ug,IYe),e(ug,jS),e(jS,qYe),e(ug,NYe),e(A,jYe),e(A,bg),e(bg,Jre),e(Jre,DYe),e(bg,GYe),e(bg,DS),e(DS,OYe),e(bg,VYe),e(A,XYe),e(A,vg),e(vg,Yre),e(Yre,zYe),e(vg,WYe),e(vg,GS),e(GS,QYe),e(vg,HYe),e(A,UYe),e(A,Fg),e(Fg,Kre),e(Kre,JYe),e(Fg,YYe),e(Fg,OS),e(OS,KYe),e(Fg,ZYe),e(A,eKe),e(A,Tg),e(Tg,Zre),e(Zre,oKe),e(Tg,rKe),e(Tg,VS),e(VS,tKe),e(Tg,aKe),e(Er,nKe),M(Mg,Er,null),e(Co,sKe),e(Co,Eg),M(A6,Eg,null),e(Eg,lKe),e(Eg,ete),e(ete,iKe),b(f,yqe,u),b(f,Ti,u),e(Ti,Cg),e(Cg,ote),M(y6,ote,null),e(Ti,dKe),e(Ti,rte),e(rte,cKe),b(f,Lqe,u),b(f,wo,u),M(L6,wo,null),e(wo,fKe),e(wo,x6),e(x6,mKe),e(x6,XS),e(XS,gKe),e(x6,hKe),e(wo,pKe),e(wo,$6),e($6,_Ke),e($6,tte),e(tte,uKe),e($6,bKe),e(wo,vKe),e(wo,Cr),M(k6,Cr,null),e(Cr,FKe),e(Cr,ate),e(ate,TKe),e(Cr,MKe),e(Cr,Aa),e(Aa,EKe),e(Aa,nte),e(nte,CKe),e(Aa,wKe),e(Aa,ste),e(ste,AKe),e(Aa,yKe),e(Aa,lte),e(lte,LKe),e(Aa,xKe),e(Cr,$Ke),e(Cr,k),e(k,Sn),e(Sn,ite),e(ite,kKe),e(Sn,SKe),e(Sn,zS),e(zS,RKe),e(Sn,PKe),e(Sn,WS),e(WS,BKe),e(Sn,IKe),e(k,qKe),e(k,Rn),e(Rn,dte),e(dte,NKe),e(Rn,jKe),e(Rn,QS),e(QS,DKe),e(Rn,GKe),e(Rn,HS),e(HS,OKe),e(Rn,VKe),e(k,XKe),e(k,Pn),e(Pn,cte),e(cte,zKe),e(Pn,WKe),e(Pn,US),e(US,QKe),e(Pn,HKe),e(Pn,JS),e(JS,UKe),e(Pn,JKe),e(k,YKe),e(k,wg),e(wg,fte),e(fte,KKe),e(wg,ZKe),e(wg,YS),e(YS,eZe),e(wg,oZe),e(k,rZe),e(k,Bn),e(Bn,mte),e(mte,tZe),e(Bn,aZe),e(Bn,KS),e(KS,nZe),e(Bn,sZe),e(Bn,ZS),e(ZS,lZe),e(Bn,iZe),e(k,dZe),e(k,Ag),e(Ag,gte),e(gte,cZe),e(Ag,fZe),e(Ag,eR),e(eR,mZe),e(Ag,gZe),e(k,hZe),e(k,yg),e(yg,hte),e(hte,pZe),e(yg,_Ze),e(yg,oR),e(oR,uZe),e(yg,bZe),e(k,vZe),e(k,Lg),e(Lg,pte),e(pte,FZe),e(Lg,TZe),e(Lg,rR),e(rR,MZe),e(Lg,EZe),e(k,CZe),e(k,In),e(In,_te),e(_te,wZe),e(In,AZe),e(In,tR),e(tR,yZe),e(In,LZe),e(In,aR),e(aR,xZe),e(In,$Ze),e(k,kZe),e(k,qn),e(qn,ute),e(ute,SZe),e(qn,RZe),e(qn,nR),e(nR,PZe),e(qn,BZe),e(qn,sR),e(sR,IZe),e(qn,qZe),e(k,NZe),e(k,Nn),e(Nn,bte),e(bte,jZe),e(Nn,DZe),e(Nn,lR),e(lR,GZe),e(Nn,OZe),e(Nn,iR),e(iR,VZe),e(Nn,XZe),e(k,zZe),e(k,xg),e(xg,vte),e(vte,WZe),e(xg,QZe),e(xg,dR),e(dR,HZe),e(xg,UZe),e(k,JZe),e(k,$g),e($g,Fte),e(Fte,YZe),e($g,KZe),e($g,cR),e(cR,ZZe),e($g,eeo),e(k,oeo),e(k,jn),e(jn,Tte),e(Tte,reo),e(jn,teo),e(jn,fR),e(fR,aeo),e(jn,neo),e(jn,mR),e(mR,seo),e(jn,leo),e(k,ieo),e(k,kg),e(kg,Mte),e(Mte,deo),e(kg,ceo),e(kg,gR),e(gR,feo),e(kg,meo),e(k,geo),e(k,Dn),e(Dn,Ete),e(Ete,heo),e(Dn,peo),e(Dn,hR),e(hR,_eo),e(Dn,ueo),e(Dn,pR),e(pR,beo),e(Dn,veo),e(k,Feo),e(k,Gn),e(Gn,Cte),e(Cte,Teo),e(Gn,Meo),e(Gn,_R),e(_R,Eeo),e(Gn,Ceo),e(Gn,uR),e(uR,weo),e(Gn,Aeo),e(k,yeo),e(k,On),e(On,wte),e(wte,Leo),e(On,xeo),e(On,bR),e(bR,$eo),e(On,keo),e(On,vR),e(vR,Seo),e(On,Reo),e(k,Peo),e(k,Sg),e(Sg,Ate),e(Ate,Beo),e(Sg,Ieo),e(Sg,FR),e(FR,qeo),e(Sg,Neo),e(k,jeo),e(k,Vn),e(Vn,yte),e(yte,Deo),e(Vn,Geo),e(Vn,TR),e(TR,Oeo),e(Vn,Veo),e(Vn,MR),e(MR,Xeo),e(Vn,zeo),e(k,Weo),e(k,Xn),e(Xn,Lte),e(Lte,Qeo),e(Xn,Heo),e(Xn,ER),e(ER,Ueo),e(Xn,Jeo),e(Xn,CR),e(CR,Yeo),e(Xn,Keo),e(k,Zeo),e(k,zn),e(zn,xte),e(xte,eoo),e(zn,ooo),e(zn,wR),e(wR,roo),e(zn,too),e(zn,AR),e(AR,aoo),e(zn,noo),e(k,soo),e(k,Wn),e(Wn,$te),e($te,loo),e(Wn,ioo),e(Wn,yR),e(yR,doo),e(Wn,coo),e(Wn,LR),e(LR,foo),e(Wn,moo),e(k,goo),e(k,Qn),e(Qn,kte),e(kte,hoo),e(Qn,poo),e(Qn,xR),e(xR,_oo),e(Qn,uoo),e(Qn,$R),e($R,boo),e(Qn,voo),e(k,Foo),e(k,Hn),e(Hn,Ste),e(Ste,Too),e(Hn,Moo),e(Hn,kR),e(kR,Eoo),e(Hn,Coo),e(Hn,SR),e(SR,woo),e(Hn,Aoo),e(k,yoo),e(k,Rg),e(Rg,Rte),e(Rte,Loo),e(Rg,xoo),e(Rg,RR),e(RR,$oo),e(Rg,koo),e(k,Soo),e(k,Un),e(Un,Pte),e(Pte,Roo),e(Un,Poo),e(Un,PR),e(PR,Boo),e(Un,Ioo),e(Un,BR),e(BR,qoo),e(Un,Noo),e(k,joo),e(k,Pg),e(Pg,Bte),e(Bte,Doo),e(Pg,Goo),e(Pg,IR),e(IR,Ooo),e(Pg,Voo),e(k,Xoo),e(k,Jn),e(Jn,Ite),e(Ite,zoo),e(Jn,Woo),e(Jn,qR),e(qR,Qoo),e(Jn,Hoo),e(Jn,NR),e(NR,Uoo),e(Jn,Joo),e(k,Yoo),e(k,Yn),e(Yn,qte),e(qte,Koo),e(Yn,Zoo),e(Yn,jR),e(jR,ero),e(Yn,oro),e(Yn,DR),e(DR,rro),e(Yn,tro),e(k,aro),e(k,Kn),e(Kn,Nte),e(Nte,nro),e(Kn,sro),e(Kn,GR),e(GR,lro),e(Kn,iro),e(Kn,OR),e(OR,dro),e(Kn,cro),e(k,fro),e(k,Zn),e(Zn,jte),e(jte,mro),e(Zn,gro),e(Zn,VR),e(VR,hro),e(Zn,pro),e(Zn,XR),e(XR,_ro),e(Zn,uro),e(k,bro),e(k,es),e(es,Dte),e(Dte,vro),e(es,Fro),e(es,zR),e(zR,Tro),e(es,Mro),e(es,WR),e(WR,Ero),e(es,Cro),e(k,wro),e(k,os),e(os,Gte),e(Gte,Aro),e(os,yro),e(os,QR),e(QR,Lro),e(os,xro),e(os,HR),e(HR,$ro),e(os,kro),e(k,Sro),e(k,Bg),e(Bg,Ote),e(Ote,Rro),e(Bg,Pro),e(Bg,UR),e(UR,Bro),e(Bg,Iro),e(k,qro),e(k,rs),e(rs,Vte),e(Vte,Nro),e(rs,jro),e(rs,JR),e(JR,Dro),e(rs,Gro),e(rs,YR),e(YR,Oro),e(rs,Vro),e(k,Xro),e(k,ts),e(ts,Xte),e(Xte,zro),e(ts,Wro),e(ts,KR),e(KR,Qro),e(ts,Hro),e(ts,ZR),e(ZR,Uro),e(ts,Jro),e(k,Yro),e(k,as),e(as,zte),e(zte,Kro),e(as,Zro),e(as,eP),e(eP,eto),e(as,oto),e(as,oP),e(oP,rto),e(as,tto),e(k,ato),e(k,ns),e(ns,Wte),e(Wte,nto),e(ns,sto),e(ns,rP),e(rP,lto),e(ns,ito),e(ns,tP),e(tP,dto),e(ns,cto),e(k,fto),e(k,ss),e(ss,Qte),e(Qte,mto),e(ss,gto),e(ss,aP),e(aP,hto),e(ss,pto),e(ss,nP),e(nP,_to),e(ss,uto),e(k,bto),e(k,ls),e(ls,Hte),e(Hte,vto),e(ls,Fto),e(ls,sP),e(sP,Tto),e(ls,Mto),e(ls,lP),e(lP,Eto),e(ls,Cto),e(k,wto),e(k,Ig),e(Ig,Ute),e(Ute,Ato),e(Ig,yto),e(Ig,iP),e(iP,Lto),e(Ig,xto),e(k,$to),e(k,is),e(is,Jte),e(Jte,kto),e(is,Sto),e(is,dP),e(dP,Rto),e(is,Pto),e(is,cP),e(cP,Bto),e(is,Ito),e(k,qto),e(k,qg),e(qg,Yte),e(Yte,Nto),e(qg,jto),e(qg,fP),e(fP,Dto),e(qg,Gto),e(k,Oto),e(k,Ng),e(Ng,Kte),e(Kte,Vto),e(Ng,Xto),e(Ng,mP),e(mP,zto),e(Ng,Wto),e(k,Qto),e(k,ds),e(ds,Zte),e(Zte,Hto),e(ds,Uto),e(ds,gP),e(gP,Jto),e(ds,Yto),e(ds,hP),e(hP,Kto),e(ds,Zto),e(k,eao),e(k,cs),e(cs,eae),e(eae,oao),e(cs,rao),e(cs,pP),e(pP,tao),e(cs,aao),e(cs,_P),e(_P,nao),e(cs,sao),e(k,lao),e(k,fs),e(fs,oae),e(oae,iao),e(fs,dao),e(fs,uP),e(uP,cao),e(fs,fao),e(fs,bP),e(bP,mao),e(fs,gao),e(k,hao),e(k,jg),e(jg,rae),e(rae,pao),e(jg,_ao),e(jg,vP),e(vP,uao),e(jg,bao),e(k,vao),e(k,ms),e(ms,tae),e(tae,Fao),e(ms,Tao),e(ms,FP),e(FP,Mao),e(ms,Eao),e(ms,TP),e(TP,Cao),e(ms,wao),e(k,Aao),e(k,gs),e(gs,aae),e(aae,yao),e(gs,Lao),e(gs,MP),e(MP,xao),e(gs,$ao),e(gs,EP),e(EP,kao),e(gs,Sao),e(k,Rao),e(k,hs),e(hs,nae),e(nae,Pao),e(hs,Bao),e(hs,CP),e(CP,Iao),e(hs,qao),e(hs,wP),e(wP,Nao),e(hs,jao),e(k,Dao),e(k,ps),e(ps,sae),e(sae,Gao),e(ps,Oao),e(ps,AP),e(AP,Vao),e(ps,Xao),e(ps,yP),e(yP,zao),e(ps,Wao),e(k,Qao),e(k,_s),e(_s,lae),e(lae,Hao),e(_s,Uao),e(_s,LP),e(LP,Jao),e(_s,Yao),e(_s,xP),e(xP,Kao),e(_s,Zao),e(k,eno),e(k,Dg),e(Dg,iae),e(iae,ono),e(Dg,rno),e(Dg,$P),e($P,tno),e(Dg,ano),e(k,nno),e(k,us),e(us,dae),e(dae,sno),e(us,lno),e(us,kP),e(kP,ino),e(us,dno),e(us,SP),e(SP,cno),e(us,fno),e(k,mno),e(k,Gg),e(Gg,cae),e(cae,gno),e(Gg,hno),e(Gg,RP),e(RP,pno),e(Gg,_no),e(k,uno),e(k,Og),e(Og,fae),e(fae,bno),e(Og,vno),e(Og,PP),e(PP,Fno),e(Og,Tno),e(k,Mno),e(k,Vg),e(Vg,mae),e(mae,Eno),e(Vg,Cno),e(Vg,BP),e(BP,wno),e(Vg,Ano),e(k,yno),e(k,Xg),e(Xg,gae),e(gae,Lno),e(Xg,xno),e(Xg,IP),e(IP,$no),e(Xg,kno),e(k,Sno),e(k,bs),e(bs,hae),e(hae,Rno),e(bs,Pno),e(bs,qP),e(qP,Bno),e(bs,Ino),e(bs,NP),e(NP,qno),e(bs,Nno),e(k,jno),e(k,zg),e(zg,pae),e(pae,Dno),e(zg,Gno),e(zg,jP),e(jP,Ono),e(zg,Vno),e(k,Xno),e(k,vs),e(vs,_ae),e(_ae,zno),e(vs,Wno),e(vs,DP),e(DP,Qno),e(vs,Hno),e(vs,GP),e(GP,Uno),e(vs,Jno),e(k,Yno),e(k,Fs),e(Fs,uae),e(uae,Kno),e(Fs,Zno),e(Fs,OP),e(OP,eso),e(Fs,oso),e(Fs,VP),e(VP,rso),e(Fs,tso),e(k,aso),e(k,Ts),e(Ts,bae),e(bae,nso),e(Ts,sso),e(Ts,XP),e(XP,lso),e(Ts,iso),e(Ts,zP),e(zP,dso),e(Ts,cso),e(k,fso),e(k,Ms),e(Ms,vae),e(vae,mso),e(Ms,gso),e(Ms,WP),e(WP,hso),e(Ms,pso),e(Ms,QP),e(QP,_so),e(Ms,uso),e(k,bso),e(k,Es),e(Es,Fae),e(Fae,vso),e(Es,Fso),e(Es,HP),e(HP,Tso),e(Es,Mso),e(Es,UP),e(UP,Eso),e(Es,Cso),e(k,wso),e(k,Cs),e(Cs,Tae),e(Tae,Aso),e(Cs,yso),e(Cs,JP),e(JP,Lso),e(Cs,xso),e(Cs,YP),e(YP,$so),e(Cs,kso),e(k,Sso),e(k,Wg),e(Wg,Mae),e(Mae,Rso),e(Wg,Pso),e(Wg,KP),e(KP,Bso),e(Wg,Iso),e(k,qso),e(k,Qg),e(Qg,Eae),e(Eae,Nso),e(Qg,jso),e(Qg,ZP),e(ZP,Dso),e(Qg,Gso),e(k,Oso),e(k,ws),e(ws,Cae),e(Cae,Vso),e(ws,Xso),e(ws,eB),e(eB,zso),e(ws,Wso),e(ws,oB),e(oB,Qso),e(ws,Hso),e(k,Uso),e(k,As),e(As,wae),e(wae,Jso),e(As,Yso),e(As,rB),e(rB,Kso),e(As,Zso),e(As,tB),e(tB,elo),e(As,olo),e(k,rlo),e(k,ys),e(ys,Aae),e(Aae,tlo),e(ys,alo),e(ys,aB),e(aB,nlo),e(ys,slo),e(ys,nB),e(nB,llo),e(ys,ilo),e(k,dlo),e(k,Hg),e(Hg,yae),e(yae,clo),e(Hg,flo),e(Hg,sB),e(sB,mlo),e(Hg,glo),e(k,hlo),e(k,Ug),e(Ug,Lae),e(Lae,plo),e(Ug,_lo),e(Ug,lB),e(lB,ulo),e(Ug,blo),e(k,vlo),e(k,Jg),e(Jg,xae),e(xae,Flo),e(Jg,Tlo),e(Jg,iB),e(iB,Mlo),e(Jg,Elo),e(k,Clo),e(k,Ls),e(Ls,$ae),e($ae,wlo),e(Ls,Alo),e(Ls,dB),e(dB,ylo),e(Ls,Llo),e(Ls,cB),e(cB,xlo),e(Ls,$lo),e(k,klo),e(k,Yg),e(Yg,kae),e(kae,Slo),e(Yg,Rlo),e(Yg,fB),e(fB,Plo),e(Yg,Blo),e(k,Ilo),e(k,Kg),e(Kg,Sae),e(Sae,qlo),e(Kg,Nlo),e(Kg,mB),e(mB,jlo),e(Kg,Dlo),e(k,Glo),e(k,Zg),e(Zg,Rae),e(Rae,Olo),e(Zg,Vlo),e(Zg,gB),e(gB,Xlo),e(Zg,zlo),e(k,Wlo),e(k,xs),e(xs,Pae),e(Pae,Qlo),e(xs,Hlo),e(xs,hB),e(hB,Ulo),e(xs,Jlo),e(xs,pB),e(pB,Ylo),e(xs,Klo),e(k,Zlo),e(k,eh),e(eh,Bae),e(Bae,eio),e(eh,oio),e(eh,_B),e(_B,rio),e(eh,tio),e(k,aio),e(k,oh),e(oh,Iae),e(Iae,nio),e(oh,sio),e(oh,uB),e(uB,lio),e(oh,iio),e(k,dio),e(k,$s),e($s,qae),e(qae,cio),e($s,fio),e($s,bB),e(bB,mio),e($s,gio),e($s,vB),e(vB,hio),e($s,pio),e(k,_io),e(k,ks),e(ks,Nae),e(Nae,uio),e(ks,bio),e(ks,FB),e(FB,vio),e(ks,Fio),e(ks,TB),e(TB,Tio),e(ks,Mio),e(k,Eio),e(k,Ss),e(Ss,jae),e(jae,Cio),e(Ss,wio),e(Ss,MB),e(MB,Aio),e(Ss,yio),e(Ss,EB),e(EB,Lio),e(Ss,xio),e(k,$io),e(k,Rs),e(Rs,Dae),e(Dae,kio),e(Rs,Sio),e(Rs,CB),e(CB,Rio),e(Rs,Pio),e(Rs,wB),e(wB,Bio),e(Rs,Iio),e(Cr,qio),M(rh,Cr,null),e(wo,Nio),e(wo,th),M(S6,th,null),e(th,jio),e(th,Gae),e(Gae,Dio),b(f,xqe,u),b(f,Mi,u),e(Mi,ah),e(ah,Oae),M(R6,Oae,null),e(Mi,Gio),e(Mi,Vae),e(Vae,Oio),b(f,$qe,u),b(f,Ao,u),M(P6,Ao,null),e(Ao,Vio),e(Ao,B6),e(B6,Xio),e(B6,AB),e(AB,zio),e(B6,Wio),e(Ao,Qio),e(Ao,I6),e(I6,Hio),e(I6,Xae),e(Xae,Uio),e(I6,Jio),e(Ao,Yio),e(Ao,He),M(q6,He,null),e(He,Kio),e(He,zae),e(zae,Zio),e(He,edo),e(He,ya),e(ya,odo),e(ya,Wae),e(Wae,rdo),e(ya,tdo),e(ya,Qae),e(Qae,ado),e(ya,ndo),e(ya,Hae),e(Hae,sdo),e(ya,ldo),e(He,ido),e(He,K),e(K,nh),e(nh,Uae),e(Uae,ddo),e(nh,cdo),e(nh,yB),e(yB,fdo),e(nh,mdo),e(K,gdo),e(K,sh),e(sh,Jae),e(Jae,hdo),e(sh,pdo),e(sh,LB),e(LB,_do),e(sh,udo),e(K,bdo),e(K,lh),e(lh,Yae),e(Yae,vdo),e(lh,Fdo),e(lh,xB),e(xB,Tdo),e(lh,Mdo),e(K,Edo),e(K,ih),e(ih,Kae),e(Kae,Cdo),e(ih,wdo),e(ih,$B),e($B,Ado),e(ih,ydo),e(K,Ldo),e(K,dh),e(dh,Zae),e(Zae,xdo),e(dh,$do),e(dh,kB),e(kB,kdo),e(dh,Sdo),e(K,Rdo),e(K,ch),e(ch,ene),e(ene,Pdo),e(ch,Bdo),e(ch,SB),e(SB,Ido),e(ch,qdo),e(K,Ndo),e(K,fh),e(fh,one),e(one,jdo),e(fh,Ddo),e(fh,RB),e(RB,Gdo),e(fh,Odo),e(K,Vdo),e(K,mh),e(mh,rne),e(rne,Xdo),e(mh,zdo),e(mh,PB),e(PB,Wdo),e(mh,Qdo),e(K,Hdo),e(K,gh),e(gh,tne),e(tne,Udo),e(gh,Jdo),e(gh,BB),e(BB,Ydo),e(gh,Kdo),e(K,Zdo),e(K,hh),e(hh,ane),e(ane,eco),e(hh,oco),e(hh,IB),e(IB,rco),e(hh,tco),e(K,aco),e(K,ph),e(ph,nne),e(nne,nco),e(ph,sco),e(ph,qB),e(qB,lco),e(ph,ico),e(K,dco),e(K,_h),e(_h,sne),e(sne,cco),e(_h,fco),e(_h,NB),e(NB,mco),e(_h,gco),e(K,hco),e(K,uh),e(uh,lne),e(lne,pco),e(uh,_co),e(uh,jB),e(jB,uco),e(uh,bco),e(K,vco),e(K,bh),e(bh,ine),e(ine,Fco),e(bh,Tco),e(bh,DB),e(DB,Mco),e(bh,Eco),e(K,Cco),e(K,vh),e(vh,dne),e(dne,wco),e(vh,Aco),e(vh,GB),e(GB,yco),e(vh,Lco),e(K,xco),e(K,Fh),e(Fh,cne),e(cne,$co),e(Fh,kco),e(Fh,OB),e(OB,Sco),e(Fh,Rco),e(K,Pco),e(K,Th),e(Th,fne),e(fne,Bco),e(Th,Ico),e(Th,VB),e(VB,qco),e(Th,Nco),e(K,jco),e(K,Mh),e(Mh,mne),e(mne,Dco),e(Mh,Gco),e(Mh,XB),e(XB,Oco),e(Mh,Vco),e(K,Xco),e(K,Eh),e(Eh,gne),e(gne,zco),e(Eh,Wco),e(Eh,zB),e(zB,Qco),e(Eh,Hco),e(K,Uco),e(K,Ch),e(Ch,hne),e(hne,Jco),e(Ch,Yco),e(Ch,WB),e(WB,Kco),e(Ch,Zco),e(K,efo),e(K,wh),e(wh,pne),e(pne,ofo),e(wh,rfo),e(wh,QB),e(QB,tfo),e(wh,afo),e(K,nfo),e(K,Ah),e(Ah,_ne),e(_ne,sfo),e(Ah,lfo),e(Ah,HB),e(HB,ifo),e(Ah,dfo),e(K,cfo),e(K,yh),e(yh,une),e(une,ffo),e(yh,mfo),e(yh,UB),e(UB,gfo),e(yh,hfo),e(K,pfo),e(K,Lh),e(Lh,bne),e(bne,_fo),e(Lh,ufo),e(Lh,JB),e(JB,bfo),e(Lh,vfo),e(K,Ffo),e(K,xh),e(xh,vne),e(vne,Tfo),e(xh,Mfo),e(xh,YB),e(YB,Efo),e(xh,Cfo),e(K,wfo),e(K,$h),e($h,Fne),e(Fne,Afo),e($h,yfo),e($h,KB),e(KB,Lfo),e($h,xfo),e(K,$fo),e(K,kh),e(kh,Tne),e(Tne,kfo),e(kh,Sfo),e(kh,ZB),e(ZB,Rfo),e(kh,Pfo),e(K,Bfo),e(K,Sh),e(Sh,Mne),e(Mne,Ifo),e(Sh,qfo),e(Sh,eI),e(eI,Nfo),e(Sh,jfo),e(He,Dfo),M(Rh,He,null),e(He,Gfo),M(Ph,He,null),e(Ao,Ofo),e(Ao,Bh),M(N6,Bh,null),e(Bh,Vfo),e(Bh,Ene),e(Ene,Xfo),b(f,kqe,u),b(f,Ei,u),e(Ei,Ih),e(Ih,Cne),M(j6,Cne,null),e(Ei,zfo),e(Ei,wne),e(wne,Wfo),b(f,Sqe,u),b(f,yo,u),M(D6,yo,null),e(yo,Qfo),e(yo,G6),e(G6,Hfo),e(G6,oI),e(oI,Ufo),e(G6,Jfo),e(yo,Yfo),e(yo,O6),e(O6,Kfo),e(O6,Ane),e(Ane,Zfo),e(O6,emo),e(yo,omo),e(yo,Ue),M(V6,Ue,null),e(Ue,rmo),e(Ue,yne),e(yne,tmo),e(Ue,amo),e(Ue,Ci),e(Ci,nmo),e(Ci,Lne),e(Lne,smo),e(Ci,lmo),e(Ci,xne),e(xne,imo),e(Ci,dmo),e(Ue,cmo),e(Ue,he),e(he,qh),e(qh,$ne),e($ne,fmo),e(qh,mmo),e(qh,rI),e(rI,gmo),e(qh,hmo),e(he,pmo),e(he,Nh),e(Nh,kne),e(kne,_mo),e(Nh,umo),e(Nh,Sne),e(Sne,bmo),e(Nh,vmo),e(he,Fmo),e(he,jh),e(jh,Rne),e(Rne,Tmo),e(jh,Mmo),e(jh,tI),e(tI,Emo),e(jh,Cmo),e(he,wmo),e(he,Dh),e(Dh,Pne),e(Pne,Amo),e(Dh,ymo),e(Dh,aI),e(aI,Lmo),e(Dh,xmo),e(he,$mo),e(he,Gh),e(Gh,Bne),e(Bne,kmo),e(Gh,Smo),e(Gh,nI),e(nI,Rmo),e(Gh,Pmo),e(he,Bmo),e(he,Oh),e(Oh,Ine),e(Ine,Imo),e(Oh,qmo),e(Oh,sI),e(sI,Nmo),e(Oh,jmo),e(he,Dmo),e(he,Vh),e(Vh,qne),e(qne,Gmo),e(Vh,Omo),e(Vh,lI),e(lI,Vmo),e(Vh,Xmo),e(he,zmo),e(he,Xh),e(Xh,Nne),e(Nne,Wmo),e(Xh,Qmo),e(Xh,iI),e(iI,Hmo),e(Xh,Umo),e(he,Jmo),e(he,zh),e(zh,jne),e(jne,Ymo),e(zh,Kmo),e(zh,dI),e(dI,Zmo),e(zh,ego),e(he,ogo),e(he,Wh),e(Wh,Dne),e(Dne,rgo),e(Wh,tgo),e(Wh,cI),e(cI,ago),e(Wh,ngo),e(he,sgo),e(he,Qh),e(Qh,Gne),e(Gne,lgo),e(Qh,igo),e(Qh,fI),e(fI,dgo),e(Qh,cgo),e(he,fgo),e(he,Hh),e(Hh,One),e(One,mgo),e(Hh,ggo),e(Hh,mI),e(mI,hgo),e(Hh,pgo),e(he,_go),e(he,Uh),e(Uh,Vne),e(Vne,ugo),e(Uh,bgo),e(Uh,gI),e(gI,vgo),e(Uh,Fgo),e(he,Tgo),e(he,Jh),e(Jh,Xne),e(Xne,Mgo),e(Jh,Ego),e(Jh,hI),e(hI,Cgo),e(Jh,wgo),e(he,Ago),e(he,Yh),e(Yh,zne),e(zne,ygo),e(Yh,Lgo),e(Yh,pI),e(pI,xgo),e(Yh,$go),e(he,kgo),e(he,Kh),e(Kh,Wne),e(Wne,Sgo),e(Kh,Rgo),e(Kh,_I),e(_I,Pgo),e(Kh,Bgo),e(he,Igo),e(he,Zh),e(Zh,Qne),e(Qne,qgo),e(Zh,Ngo),e(Zh,uI),e(uI,jgo),e(Zh,Dgo),e(Ue,Ggo),M(ep,Ue,null),e(Ue,Ogo),M(op,Ue,null),e(yo,Vgo),e(yo,rp),M(X6,rp,null),e(rp,Xgo),e(rp,Hne),e(Hne,zgo),b(f,Rqe,u),b(f,wi,u),e(wi,tp),e(tp,Une),M(z6,Une,null),e(wi,Wgo),e(wi,Jne),e(Jne,Qgo),b(f,Pqe,u),b(f,Lo,u),M(W6,Lo,null),e(Lo,Hgo),e(Lo,Ai),e(Ai,Ugo),e(Ai,bI),e(bI,Jgo),e(Ai,Ygo),e(Ai,vI),e(vI,Kgo),e(Ai,Zgo),e(Lo,eho),e(Lo,Q6),e(Q6,oho),e(Q6,Yne),e(Yne,rho),e(Q6,tho),e(Lo,aho),e(Lo,tt),M(H6,tt,null),e(tt,nho),e(tt,Kne),e(Kne,sho),e(tt,lho),e(tt,yi),e(yi,iho),e(yi,Zne),e(Zne,dho),e(yi,cho),e(yi,FI),e(FI,fho),e(yi,mho),e(tt,gho),M(ap,tt,null),e(Lo,hho),e(Lo,Je),M(U6,Je,null),e(Je,pho),e(Je,ese),e(ese,_ho),e(Je,uho),e(Je,La),e(La,bho),e(La,ose),e(ose,vho),e(La,Fho),e(La,rse),e(rse,Tho),e(La,Mho),e(La,tse),e(tse,Eho),e(La,Cho),e(Je,who),e(Je,x),e(x,np),e(np,ase),e(ase,Aho),e(np,yho),e(np,TI),e(TI,Lho),e(np,xho),e(x,$ho),e(x,sp),e(sp,nse),e(nse,kho),e(sp,Sho),e(sp,MI),e(MI,Rho),e(sp,Pho),e(x,Bho),e(x,lp),e(lp,sse),e(sse,Iho),e(lp,qho),e(lp,EI),e(EI,Nho),e(lp,jho),e(x,Dho),e(x,ip),e(ip,lse),e(lse,Gho),e(ip,Oho),e(ip,CI),e(CI,Vho),e(ip,Xho),e(x,zho),e(x,dp),e(dp,ise),e(ise,Who),e(dp,Qho),e(dp,wI),e(wI,Hho),e(dp,Uho),e(x,Jho),e(x,cp),e(cp,dse),e(dse,Yho),e(cp,Kho),e(cp,AI),e(AI,Zho),e(cp,epo),e(x,opo),e(x,fp),e(fp,cse),e(cse,rpo),e(fp,tpo),e(fp,yI),e(yI,apo),e(fp,npo),e(x,spo),e(x,mp),e(mp,fse),e(fse,lpo),e(mp,ipo),e(mp,LI),e(LI,dpo),e(mp,cpo),e(x,fpo),e(x,gp),e(gp,mse),e(mse,mpo),e(gp,gpo),e(gp,xI),e(xI,hpo),e(gp,ppo),e(x,_po),e(x,hp),e(hp,gse),e(gse,upo),e(hp,bpo),e(hp,$I),e($I,vpo),e(hp,Fpo),e(x,Tpo),e(x,pp),e(pp,hse),e(hse,Mpo),e(pp,Epo),e(pp,kI),e(kI,Cpo),e(pp,wpo),e(x,Apo),e(x,_p),e(_p,pse),e(pse,ypo),e(_p,Lpo),e(_p,SI),e(SI,xpo),e(_p,$po),e(x,kpo),e(x,up),e(up,_se),e(_se,Spo),e(up,Rpo),e(up,RI),e(RI,Ppo),e(up,Bpo),e(x,Ipo),e(x,bp),e(bp,use),e(use,qpo),e(bp,Npo),e(bp,PI),e(PI,jpo),e(bp,Dpo),e(x,Gpo),e(x,vp),e(vp,bse),e(bse,Opo),e(vp,Vpo),e(vp,BI),e(BI,Xpo),e(vp,zpo),e(x,Wpo),e(x,Fp),e(Fp,vse),e(vse,Qpo),e(Fp,Hpo),e(Fp,II),e(II,Upo),e(Fp,Jpo),e(x,Ypo),e(x,Tp),e(Tp,Fse),e(Fse,Kpo),e(Tp,Zpo),e(Tp,qI),e(qI,e_o),e(Tp,o_o),e(x,r_o),e(x,Mp),e(Mp,Tse),e(Tse,t_o),e(Mp,a_o),e(Mp,NI),e(NI,n_o),e(Mp,s_o),e(x,l_o),e(x,Ep),e(Ep,Mse),e(Mse,i_o),e(Ep,d_o),e(Ep,jI),e(jI,c_o),e(Ep,f_o),e(x,m_o),e(x,Cp),e(Cp,Ese),e(Ese,g_o),e(Cp,h_o),e(Cp,DI),e(DI,p_o),e(Cp,__o),e(x,u_o),e(x,wp),e(wp,Cse),e(Cse,b_o),e(wp,v_o),e(wp,GI),e(GI,F_o),e(wp,T_o),e(x,M_o),e(x,Ap),e(Ap,wse),e(wse,E_o),e(Ap,C_o),e(Ap,OI),e(OI,w_o),e(Ap,A_o),e(x,y_o),e(x,yp),e(yp,Ase),e(Ase,L_o),e(yp,x_o),e(yp,VI),e(VI,$_o),e(yp,k_o),e(x,S_o),e(x,Lp),e(Lp,yse),e(yse,R_o),e(Lp,P_o),e(Lp,XI),e(XI,B_o),e(Lp,I_o),e(x,q_o),e(x,xp),e(xp,Lse),e(Lse,N_o),e(xp,j_o),e(xp,zI),e(zI,D_o),e(xp,G_o),e(x,O_o),e(x,$p),e($p,xse),e(xse,V_o),e($p,X_o),e($p,WI),e(WI,z_o),e($p,W_o),e(x,Q_o),e(x,kp),e(kp,$se),e($se,H_o),e(kp,U_o),e(kp,QI),e(QI,J_o),e(kp,Y_o),e(x,K_o),e(x,Sp),e(Sp,kse),e(kse,Z_o),e(Sp,euo),e(Sp,HI),e(HI,ouo),e(Sp,ruo),e(x,tuo),e(x,Rp),e(Rp,Sse),e(Sse,auo),e(Rp,nuo),e(Rp,UI),e(UI,suo),e(Rp,luo),e(x,iuo),e(x,Pp),e(Pp,Rse),e(Rse,duo),e(Pp,cuo),e(Pp,JI),e(JI,fuo),e(Pp,muo),e(x,guo),e(x,Bp),e(Bp,Pse),e(Pse,huo),e(Bp,puo),e(Bp,YI),e(YI,_uo),e(Bp,uuo),e(x,buo),e(x,Ip),e(Ip,Bse),e(Bse,vuo),e(Ip,Fuo),e(Ip,KI),e(KI,Tuo),e(Ip,Muo),e(x,Euo),e(x,Ps),e(Ps,Ise),e(Ise,Cuo),e(Ps,wuo),e(Ps,ZI),e(ZI,Auo),e(Ps,yuo),e(Ps,eq),e(eq,Luo),e(Ps,xuo),e(x,$uo),e(x,qp),e(qp,qse),e(qse,kuo),e(qp,Suo),e(qp,oq),e(oq,Ruo),e(qp,Puo),e(x,Buo),e(x,Np),e(Np,Nse),e(Nse,Iuo),e(Np,quo),e(Np,rq),e(rq,Nuo),e(Np,juo),e(x,Duo),e(x,jp),e(jp,jse),e(jse,Guo),e(jp,Ouo),e(jp,tq),e(tq,Vuo),e(jp,Xuo),e(x,zuo),e(x,Dp),e(Dp,Dse),e(Dse,Wuo),e(Dp,Quo),e(Dp,aq),e(aq,Huo),e(Dp,Uuo),e(x,Juo),e(x,Gp),e(Gp,Gse),e(Gse,Yuo),e(Gp,Kuo),e(Gp,nq),e(nq,Zuo),e(Gp,e1o),e(x,o1o),e(x,Op),e(Op,Ose),e(Ose,r1o),e(Op,t1o),e(Op,sq),e(sq,a1o),e(Op,n1o),e(x,s1o),e(x,Vp),e(Vp,Vse),e(Vse,l1o),e(Vp,i1o),e(Vp,lq),e(lq,d1o),e(Vp,c1o),e(x,f1o),e(x,Xp),e(Xp,Xse),e(Xse,m1o),e(Xp,g1o),e(Xp,iq),e(iq,h1o),e(Xp,p1o),e(x,_1o),e(x,zp),e(zp,zse),e(zse,u1o),e(zp,b1o),e(zp,dq),e(dq,v1o),e(zp,F1o),e(x,T1o),e(x,Wp),e(Wp,Wse),e(Wse,M1o),e(Wp,E1o),e(Wp,cq),e(cq,C1o),e(Wp,w1o),e(x,A1o),e(x,Qp),e(Qp,Qse),e(Qse,y1o),e(Qp,L1o),e(Qp,fq),e(fq,x1o),e(Qp,$1o),e(x,k1o),e(x,Hp),e(Hp,Hse),e(Hse,S1o),e(Hp,R1o),e(Hp,mq),e(mq,P1o),e(Hp,B1o),e(x,I1o),e(x,Up),e(Up,Use),e(Use,q1o),e(Up,N1o),e(Up,gq),e(gq,j1o),e(Up,D1o),e(x,G1o),e(x,Jp),e(Jp,Jse),e(Jse,O1o),e(Jp,V1o),e(Jp,hq),e(hq,X1o),e(Jp,z1o),e(x,W1o),e(x,Yp),e(Yp,Yse),e(Yse,Q1o),e(Yp,H1o),e(Yp,pq),e(pq,U1o),e(Yp,J1o),e(x,Y1o),e(x,Kp),e(Kp,Kse),e(Kse,K1o),e(Kp,Z1o),e(Kp,_q),e(_q,e3o),e(Kp,o3o),e(x,r3o),e(x,Zp),e(Zp,Zse),e(Zse,t3o),e(Zp,a3o),e(Zp,uq),e(uq,n3o),e(Zp,s3o),e(x,l3o),e(x,e_),e(e_,ele),e(ele,i3o),e(e_,d3o),e(e_,bq),e(bq,c3o),e(e_,f3o),e(x,m3o),e(x,o_),e(o_,ole),e(ole,g3o),e(o_,h3o),e(o_,vq),e(vq,p3o),e(o_,_3o),e(x,u3o),e(x,r_),e(r_,rle),e(rle,b3o),e(r_,v3o),e(r_,Fq),e(Fq,F3o),e(r_,T3o),e(x,M3o),e(x,t_),e(t_,tle),e(tle,E3o),e(t_,C3o),e(t_,Tq),e(Tq,w3o),e(t_,A3o),e(x,y3o),e(x,a_),e(a_,ale),e(ale,L3o),e(a_,x3o),e(a_,Mq),e(Mq,$3o),e(a_,k3o),e(x,S3o),e(x,n_),e(n_,nle),e(nle,R3o),e(n_,P3o),e(n_,Eq),e(Eq,B3o),e(n_,I3o),e(x,q3o),e(x,s_),e(s_,sle),e(sle,N3o),e(s_,j3o),e(s_,Cq),e(Cq,D3o),e(s_,G3o),e(x,O3o),e(x,l_),e(l_,lle),e(lle,V3o),e(l_,X3o),e(l_,wq),e(wq,z3o),e(l_,W3o),e(x,Q3o),e(x,i_),e(i_,ile),e(ile,H3o),e(i_,U3o),e(i_,Aq),e(Aq,J3o),e(i_,Y3o),e(x,K3o),e(x,d_),e(d_,dle),e(dle,Z3o),e(d_,ebo),e(d_,yq),e(yq,obo),e(d_,rbo),e(x,tbo),e(x,c_),e(c_,cle),e(cle,abo),e(c_,nbo),e(c_,Lq),e(Lq,sbo),e(c_,lbo),e(x,ibo),e(x,f_),e(f_,fle),e(fle,dbo),e(f_,cbo),e(f_,xq),e(xq,fbo),e(f_,mbo),e(x,gbo),e(x,m_),e(m_,mle),e(mle,hbo),e(m_,pbo),e(m_,$q),e($q,_bo),e(m_,ubo),e(x,bbo),e(x,g_),e(g_,gle),e(gle,vbo),e(g_,Fbo),e(g_,kq),e(kq,Tbo),e(g_,Mbo),e(x,Ebo),e(x,h_),e(h_,hle),e(hle,Cbo),e(h_,wbo),e(h_,Sq),e(Sq,Abo),e(h_,ybo),e(x,Lbo),e(x,p_),e(p_,ple),e(ple,xbo),e(p_,$bo),e(p_,Rq),e(Rq,kbo),e(p_,Sbo),e(x,Rbo),e(x,__),e(__,_le),e(_le,Pbo),e(__,Bbo),e(__,Pq),e(Pq,Ibo),e(__,qbo),e(x,Nbo),e(x,u_),e(u_,ule),e(ule,jbo),e(u_,Dbo),e(u_,Bq),e(Bq,Gbo),e(u_,Obo),e(x,Vbo),e(x,b_),e(b_,ble),e(ble,Xbo),e(b_,zbo),e(b_,Iq),e(Iq,Wbo),e(b_,Qbo),e(x,Hbo),e(x,v_),e(v_,vle),e(vle,Ubo),e(v_,Jbo),e(v_,qq),e(qq,Ybo),e(v_,Kbo),e(x,Zbo),e(x,F_),e(F_,Fle),e(Fle,e2o),e(F_,o2o),e(F_,Nq),e(Nq,r2o),e(F_,t2o),e(x,a2o),e(x,T_),e(T_,Tle),e(Tle,n2o),e(T_,s2o),e(T_,jq),e(jq,l2o),e(T_,i2o),e(x,d2o),e(x,M_),e(M_,Mle),e(Mle,c2o),e(M_,f2o),e(M_,Dq),e(Dq,m2o),e(M_,g2o),e(x,h2o),e(x,E_),e(E_,Ele),e(Ele,p2o),e(E_,_2o),e(E_,Gq),e(Gq,u2o),e(E_,b2o),e(x,v2o),e(x,C_),e(C_,Cle),e(Cle,F2o),e(C_,T2o),e(C_,Oq),e(Oq,M2o),e(C_,E2o),e(x,C2o),e(x,w_),e(w_,wle),e(wle,w2o),e(w_,A2o),e(w_,Vq),e(Vq,y2o),e(w_,L2o),e(x,x2o),e(x,A_),e(A_,Ale),e(Ale,$2o),e(A_,k2o),e(A_,Xq),e(Xq,S2o),e(A_,R2o),e(x,P2o),e(x,y_),e(y_,yle),e(yle,B2o),e(y_,I2o),e(y_,zq),e(zq,q2o),e(y_,N2o),e(x,j2o),e(x,L_),e(L_,Lle),e(Lle,D2o),e(L_,G2o),e(L_,Wq),e(Wq,O2o),e(L_,V2o),e(x,X2o),e(x,x_),e(x_,xle),e(xle,z2o),e(x_,W2o),e(x_,Qq),e(Qq,Q2o),e(x_,H2o),e(x,U2o),e(x,$_),e($_,$le),e($le,J2o),e($_,Y2o),e($_,Hq),e(Hq,K2o),e($_,Z2o),e(x,evo),e(x,k_),e(k_,kle),e(kle,ovo),e(k_,rvo),e(k_,Uq),e(Uq,tvo),e(k_,avo),e(x,nvo),e(x,S_),e(S_,Sle),e(Sle,svo),e(S_,lvo),e(S_,Jq),e(Jq,ivo),e(S_,dvo),e(x,cvo),e(x,R_),e(R_,Rle),e(Rle,fvo),e(R_,mvo),e(R_,Yq),e(Yq,gvo),e(R_,hvo),e(x,pvo),e(x,P_),e(P_,Ple),e(Ple,_vo),e(P_,uvo),e(P_,Kq),e(Kq,bvo),e(P_,vvo),e(x,Fvo),e(x,B_),e(B_,Ble),e(Ble,Tvo),e(B_,Mvo),e(B_,Zq),e(Zq,Evo),e(B_,Cvo),e(x,wvo),e(x,I_),e(I_,Ile),e(Ile,Avo),e(I_,yvo),e(I_,eN),e(eN,Lvo),e(I_,xvo),e(x,$vo),e(x,q_),e(q_,qle),e(qle,kvo),e(q_,Svo),e(q_,oN),e(oN,Rvo),e(q_,Pvo),e(x,Bvo),e(x,N_),e(N_,Nle),e(Nle,Ivo),e(N_,qvo),e(N_,rN),e(rN,Nvo),e(N_,jvo),e(x,Dvo),e(x,j_),e(j_,jle),e(jle,Gvo),e(j_,Ovo),e(j_,tN),e(tN,Vvo),e(j_,Xvo),e(x,zvo),e(x,D_),e(D_,Dle),e(Dle,Wvo),e(D_,Qvo),e(D_,aN),e(aN,Hvo),e(D_,Uvo),e(x,Jvo),e(x,G_),e(G_,Gle),e(Gle,Yvo),e(G_,Kvo),e(G_,nN),e(nN,Zvo),e(G_,eFo),e(x,oFo),e(x,O_),e(O_,Ole),e(Ole,rFo),e(O_,tFo),e(O_,sN),e(sN,aFo),e(O_,nFo),e(x,sFo),e(x,V_),e(V_,Vle),e(Vle,lFo),e(V_,iFo),e(V_,lN),e(lN,dFo),e(V_,cFo),e(x,fFo),e(x,X_),e(X_,Xle),e(Xle,mFo),e(X_,gFo),e(X_,iN),e(iN,hFo),e(X_,pFo),e(x,_Fo),e(x,z_),e(z_,zle),e(zle,uFo),e(z_,bFo),e(z_,dN),e(dN,vFo),e(z_,FFo),e(x,TFo),e(x,W_),e(W_,Wle),e(Wle,MFo),e(W_,EFo),e(W_,cN),e(cN,CFo),e(W_,wFo),e(x,AFo),e(x,Q_),e(Q_,Qle),e(Qle,yFo),e(Q_,LFo),e(Q_,fN),e(fN,xFo),e(Q_,$Fo),e(x,kFo),e(x,H_),e(H_,Hle),e(Hle,SFo),e(H_,RFo),e(H_,mN),e(mN,PFo),e(H_,BFo),e(x,IFo),e(x,U_),e(U_,Ule),e(Ule,qFo),e(U_,NFo),e(U_,gN),e(gN,jFo),e(U_,DFo),e(x,GFo),e(x,J_),e(J_,Jle),e(Jle,OFo),e(J_,VFo),e(J_,hN),e(hN,XFo),e(J_,zFo),e(Je,WFo),e(Je,Y_),e(Y_,QFo),e(Y_,Yle),e(Yle,HFo),e(Y_,UFo),e(Y_,Kle),e(Kle,JFo),e(Je,YFo),M(K_,Je,null),b(f,Bqe,u),b(f,Li,u),e(Li,Z_),e(Z_,Zle),M(J6,Zle,null),e(Li,KFo),e(Li,eie),e(eie,ZFo),b(f,Iqe,u),b(f,xo,u),M(Y6,xo,null),e(xo,eTo),e(xo,xi),e(xi,oTo),e(xi,pN),e(pN,rTo),e(xi,tTo),e(xi,_N),e(_N,aTo),e(xi,nTo),e(xo,sTo),e(xo,K6),e(K6,lTo),e(K6,oie),e(oie,iTo),e(K6,dTo),e(xo,cTo),e(xo,at),M(Z6,at,null),e(at,fTo),e(at,rie),e(rie,mTo),e(at,gTo),e(at,$i),e($i,hTo),e($i,tie),e(tie,pTo),e($i,_To),e($i,uN),e(uN,uTo),e($i,bTo),e(at,vTo),M(eu,at,null),e(xo,FTo),e(xo,Ye),M(ey,Ye,null),e(Ye,TTo),e(Ye,aie),e(aie,MTo),e(Ye,ETo),e(Ye,xa),e(xa,CTo),e(xa,nie),e(nie,wTo),e(xa,ATo),e(xa,sie),e(sie,yTo),e(xa,LTo),e(xa,lie),e(lie,xTo),e(xa,$To),e(Ye,kTo),e(Ye,G),e(G,ou),e(ou,iie),e(iie,STo),e(ou,RTo),e(ou,bN),e(bN,PTo),e(ou,BTo),e(G,ITo),e(G,ru),e(ru,die),e(die,qTo),e(ru,NTo),e(ru,vN),e(vN,jTo),e(ru,DTo),e(G,GTo),e(G,tu),e(tu,cie),e(cie,OTo),e(tu,VTo),e(tu,FN),e(FN,XTo),e(tu,zTo),e(G,WTo),e(G,au),e(au,fie),e(fie,QTo),e(au,HTo),e(au,TN),e(TN,UTo),e(au,JTo),e(G,YTo),e(G,nu),e(nu,mie),e(mie,KTo),e(nu,ZTo),e(nu,MN),e(MN,e7o),e(nu,o7o),e(G,r7o),e(G,su),e(su,gie),e(gie,t7o),e(su,a7o),e(su,EN),e(EN,n7o),e(su,s7o),e(G,l7o),e(G,lu),e(lu,hie),e(hie,i7o),e(lu,d7o),e(lu,CN),e(CN,c7o),e(lu,f7o),e(G,m7o),e(G,iu),e(iu,pie),e(pie,g7o),e(iu,h7o),e(iu,wN),e(wN,p7o),e(iu,_7o),e(G,u7o),e(G,du),e(du,_ie),e(_ie,b7o),e(du,v7o),e(du,AN),e(AN,F7o),e(du,T7o),e(G,M7o),e(G,cu),e(cu,uie),e(uie,E7o),e(cu,C7o),e(cu,yN),e(yN,w7o),e(cu,A7o),e(G,y7o),e(G,fu),e(fu,bie),e(bie,L7o),e(fu,x7o),e(fu,LN),e(LN,$7o),e(fu,k7o),e(G,S7o),e(G,mu),e(mu,vie),e(vie,R7o),e(mu,P7o),e(mu,xN),e(xN,B7o),e(mu,I7o),e(G,q7o),e(G,gu),e(gu,Fie),e(Fie,N7o),e(gu,j7o),e(gu,$N),e($N,D7o),e(gu,G7o),e(G,O7o),e(G,hu),e(hu,Tie),e(Tie,V7o),e(hu,X7o),e(hu,kN),e(kN,z7o),e(hu,W7o),e(G,Q7o),e(G,pu),e(pu,Mie),e(Mie,H7o),e(pu,U7o),e(pu,SN),e(SN,J7o),e(pu,Y7o),e(G,K7o),e(G,_u),e(_u,Eie),e(Eie,Z7o),e(_u,eMo),e(_u,RN),e(RN,oMo),e(_u,rMo),e(G,tMo),e(G,uu),e(uu,Cie),e(Cie,aMo),e(uu,nMo),e(uu,PN),e(PN,sMo),e(uu,lMo),e(G,iMo),e(G,bu),e(bu,wie),e(wie,dMo),e(bu,cMo),e(bu,BN),e(BN,fMo),e(bu,mMo),e(G,gMo),e(G,vu),e(vu,Aie),e(Aie,hMo),e(vu,pMo),e(vu,IN),e(IN,_Mo),e(vu,uMo),e(G,bMo),e(G,Fu),e(Fu,yie),e(yie,vMo),e(Fu,FMo),e(Fu,qN),e(qN,TMo),e(Fu,MMo),e(G,EMo),e(G,Tu),e(Tu,Lie),e(Lie,CMo),e(Tu,wMo),e(Tu,NN),e(NN,AMo),e(Tu,yMo),e(G,LMo),e(G,Mu),e(Mu,xie),e(xie,xMo),e(Mu,$Mo),e(Mu,jN),e(jN,kMo),e(Mu,SMo),e(G,RMo),e(G,Eu),e(Eu,$ie),e($ie,PMo),e(Eu,BMo),e(Eu,DN),e(DN,IMo),e(Eu,qMo),e(G,NMo),e(G,Cu),e(Cu,kie),e(kie,jMo),e(Cu,DMo),e(Cu,GN),e(GN,GMo),e(Cu,OMo),e(G,VMo),e(G,wu),e(wu,Sie),e(Sie,XMo),e(wu,zMo),e(wu,ON),e(ON,WMo),e(wu,QMo),e(G,HMo),e(G,Au),e(Au,Rie),e(Rie,UMo),e(Au,JMo),e(Au,VN),e(VN,YMo),e(Au,KMo),e(G,ZMo),e(G,yu),e(yu,Pie),e(Pie,e4o),e(yu,o4o),e(yu,XN),e(XN,r4o),e(yu,t4o),e(G,a4o),e(G,Lu),e(Lu,Bie),e(Bie,n4o),e(Lu,s4o),e(Lu,zN),e(zN,l4o),e(Lu,i4o),e(G,d4o),e(G,xu),e(xu,Iie),e(Iie,c4o),e(xu,f4o),e(xu,WN),e(WN,m4o),e(xu,g4o),e(G,h4o),e(G,$u),e($u,qie),e(qie,p4o),e($u,_4o),e($u,QN),e(QN,u4o),e($u,b4o),e(G,v4o),e(G,ku),e(ku,Nie),e(Nie,F4o),e(ku,T4o),e(ku,HN),e(HN,M4o),e(ku,E4o),e(G,C4o),e(G,Su),e(Su,jie),e(jie,w4o),e(Su,A4o),e(Su,UN),e(UN,y4o),e(Su,L4o),e(G,x4o),e(G,Ru),e(Ru,Die),e(Die,$4o),e(Ru,k4o),e(Ru,JN),e(JN,S4o),e(Ru,R4o),e(G,P4o),e(G,Pu),e(Pu,Gie),e(Gie,B4o),e(Pu,I4o),e(Pu,YN),e(YN,q4o),e(Pu,N4o),e(G,j4o),e(G,Bu),e(Bu,Oie),e(Oie,D4o),e(Bu,G4o),e(Bu,KN),e(KN,O4o),e(Bu,V4o),e(G,X4o),e(G,Iu),e(Iu,Vie),e(Vie,z4o),e(Iu,W4o),e(Iu,ZN),e(ZN,Q4o),e(Iu,H4o),e(G,U4o),e(G,qu),e(qu,Xie),e(Xie,J4o),e(qu,Y4o),e(qu,ej),e(ej,K4o),e(qu,Z4o),e(G,eEo),e(G,Nu),e(Nu,zie),e(zie,oEo),e(Nu,rEo),e(Nu,oj),e(oj,tEo),e(Nu,aEo),e(G,nEo),e(G,ju),e(ju,Wie),e(Wie,sEo),e(ju,lEo),e(ju,rj),e(rj,iEo),e(ju,dEo),e(G,cEo),e(G,Du),e(Du,Qie),e(Qie,fEo),e(Du,mEo),e(Du,tj),e(tj,gEo),e(Du,hEo),e(G,pEo),e(G,Gu),e(Gu,Hie),e(Hie,_Eo),e(Gu,uEo),e(Gu,aj),e(aj,bEo),e(Gu,vEo),e(G,FEo),e(G,Ou),e(Ou,Uie),e(Uie,TEo),e(Ou,MEo),e(Ou,nj),e(nj,EEo),e(Ou,CEo),e(Ye,wEo),e(Ye,Vu),e(Vu,AEo),e(Vu,Jie),e(Jie,yEo),e(Vu,LEo),e(Vu,Yie),e(Yie,xEo),e(Ye,$Eo),M(Xu,Ye,null),b(f,qqe,u),b(f,ki,u),e(ki,zu),e(zu,Kie),M(oy,Kie,null),e(ki,kEo),e(ki,Zie),e(Zie,SEo),b(f,Nqe,u),b(f,$o,u),M(ry,$o,null),e($o,REo),e($o,Si),e(Si,PEo),e(Si,sj),e(sj,BEo),e(Si,IEo),e(Si,lj),e(lj,qEo),e(Si,NEo),e($o,jEo),e($o,ty),e(ty,DEo),e(ty,ede),e(ede,GEo),e(ty,OEo),e($o,VEo),e($o,nt),M(ay,nt,null),e(nt,XEo),e(nt,ode),e(ode,zEo),e(nt,WEo),e(nt,Ri),e(Ri,QEo),e(Ri,rde),e(rde,HEo),e(Ri,UEo),e(Ri,ij),e(ij,JEo),e(Ri,YEo),e(nt,KEo),M(Wu,nt,null),e($o,ZEo),e($o,Ke),M(ny,Ke,null),e(Ke,eCo),e(Ke,tde),e(tde,oCo),e(Ke,rCo),e(Ke,$a),e($a,tCo),e($a,ade),e(ade,aCo),e($a,nCo),e($a,nde),e(nde,sCo),e($a,lCo),e($a,sde),e(sde,iCo),e($a,dCo),e(Ke,cCo),e(Ke,z),e(z,Qu),e(Qu,lde),e(lde,fCo),e(Qu,mCo),e(Qu,dj),e(dj,gCo),e(Qu,hCo),e(z,pCo),e(z,Hu),e(Hu,ide),e(ide,_Co),e(Hu,uCo),e(Hu,cj),e(cj,bCo),e(Hu,vCo),e(z,FCo),e(z,Uu),e(Uu,dde),e(dde,TCo),e(Uu,MCo),e(Uu,fj),e(fj,ECo),e(Uu,CCo),e(z,wCo),e(z,Ju),e(Ju,cde),e(cde,ACo),e(Ju,yCo),e(Ju,mj),e(mj,LCo),e(Ju,xCo),e(z,$Co),e(z,Yu),e(Yu,fde),e(fde,kCo),e(Yu,SCo),e(Yu,gj),e(gj,RCo),e(Yu,PCo),e(z,BCo),e(z,Ku),e(Ku,mde),e(mde,ICo),e(Ku,qCo),e(Ku,hj),e(hj,NCo),e(Ku,jCo),e(z,DCo),e(z,Zu),e(Zu,gde),e(gde,GCo),e(Zu,OCo),e(Zu,pj),e(pj,VCo),e(Zu,XCo),e(z,zCo),e(z,e1),e(e1,hde),e(hde,WCo),e(e1,QCo),e(e1,_j),e(_j,HCo),e(e1,UCo),e(z,JCo),e(z,o1),e(o1,pde),e(pde,YCo),e(o1,KCo),e(o1,uj),e(uj,ZCo),e(o1,e5o),e(z,o5o),e(z,r1),e(r1,_de),e(_de,r5o),e(r1,t5o),e(r1,bj),e(bj,a5o),e(r1,n5o),e(z,s5o),e(z,t1),e(t1,ude),e(ude,l5o),e(t1,i5o),e(t1,vj),e(vj,d5o),e(t1,c5o),e(z,f5o),e(z,a1),e(a1,bde),e(bde,m5o),e(a1,g5o),e(a1,Fj),e(Fj,h5o),e(a1,p5o),e(z,_5o),e(z,n1),e(n1,vde),e(vde,u5o),e(n1,b5o),e(n1,Tj),e(Tj,v5o),e(n1,F5o),e(z,T5o),e(z,s1),e(s1,Fde),e(Fde,M5o),e(s1,E5o),e(s1,Mj),e(Mj,C5o),e(s1,w5o),e(z,A5o),e(z,l1),e(l1,Tde),e(Tde,y5o),e(l1,L5o),e(l1,Ej),e(Ej,x5o),e(l1,$5o),e(z,k5o),e(z,i1),e(i1,Mde),e(Mde,S5o),e(i1,R5o),e(i1,Cj),e(Cj,P5o),e(i1,B5o),e(z,I5o),e(z,d1),e(d1,Ede),e(Ede,q5o),e(d1,N5o),e(d1,wj),e(wj,j5o),e(d1,D5o),e(z,G5o),e(z,c1),e(c1,Cde),e(Cde,O5o),e(c1,V5o),e(c1,Aj),e(Aj,X5o),e(c1,z5o),e(z,W5o),e(z,f1),e(f1,wde),e(wde,Q5o),e(f1,H5o),e(f1,yj),e(yj,U5o),e(f1,J5o),e(z,Y5o),e(z,m1),e(m1,Ade),e(Ade,K5o),e(m1,Z5o),e(m1,Lj),e(Lj,ewo),e(m1,owo),e(z,rwo),e(z,g1),e(g1,yde),e(yde,two),e(g1,awo),e(g1,xj),e(xj,nwo),e(g1,swo),e(z,lwo),e(z,h1),e(h1,Lde),e(Lde,iwo),e(h1,dwo),e(h1,$j),e($j,cwo),e(h1,fwo),e(z,mwo),e(z,p1),e(p1,xde),e(xde,gwo),e(p1,hwo),e(p1,kj),e(kj,pwo),e(p1,_wo),e(z,uwo),e(z,_1),e(_1,$de),e($de,bwo),e(_1,vwo),e(_1,Sj),e(Sj,Fwo),e(_1,Two),e(z,Mwo),e(z,u1),e(u1,kde),e(kde,Ewo),e(u1,Cwo),e(u1,Rj),e(Rj,wwo),e(u1,Awo),e(z,ywo),e(z,b1),e(b1,Sde),e(Sde,Lwo),e(b1,xwo),e(b1,Pj),e(Pj,$wo),e(b1,kwo),e(z,Swo),e(z,v1),e(v1,Rde),e(Rde,Rwo),e(v1,Pwo),e(v1,Bj),e(Bj,Bwo),e(v1,Iwo),e(z,qwo),e(z,F1),e(F1,Pde),e(Pde,Nwo),e(F1,jwo),e(F1,Ij),e(Ij,Dwo),e(F1,Gwo),e(z,Owo),e(z,T1),e(T1,Bde),e(Bde,Vwo),e(T1,Xwo),e(T1,qj),e(qj,zwo),e(T1,Wwo),e(z,Qwo),e(z,M1),e(M1,Ide),e(Ide,Hwo),e(M1,Uwo),e(M1,Nj),e(Nj,Jwo),e(M1,Ywo),e(z,Kwo),e(z,E1),e(E1,qde),e(qde,Zwo),e(E1,e0o),e(E1,jj),e(jj,o0o),e(E1,r0o),e(z,t0o),e(z,C1),e(C1,Nde),e(Nde,a0o),e(C1,n0o),e(C1,Dj),e(Dj,s0o),e(C1,l0o),e(z,i0o),e(z,w1),e(w1,jde),e(jde,d0o),e(w1,c0o),e(w1,Gj),e(Gj,f0o),e(w1,m0o),e(z,g0o),e(z,A1),e(A1,Dde),e(Dde,h0o),e(A1,p0o),e(A1,Oj),e(Oj,_0o),e(A1,u0o),e(z,b0o),e(z,y1),e(y1,Gde),e(Gde,v0o),e(y1,F0o),e(y1,Vj),e(Vj,T0o),e(y1,M0o),e(z,E0o),e(z,L1),e(L1,Ode),e(Ode,C0o),e(L1,w0o),e(L1,Xj),e(Xj,A0o),e(L1,y0o),e(Ke,L0o),e(Ke,x1),e(x1,x0o),e(x1,Vde),e(Vde,$0o),e(x1,k0o),e(x1,Xde),e(Xde,S0o),e(Ke,R0o),M($1,Ke,null),b(f,jqe,u),b(f,Pi,u),e(Pi,k1),e(k1,zde),M(sy,zde,null),e(Pi,P0o),e(Pi,Wde),e(Wde,B0o),b(f,Dqe,u),b(f,ko,u),M(ly,ko,null),e(ko,I0o),e(ko,Bi),e(Bi,q0o),e(Bi,zj),e(zj,N0o),e(Bi,j0o),e(Bi,Wj),e(Wj,D0o),e(Bi,G0o),e(ko,O0o),e(ko,iy),e(iy,V0o),e(iy,Qde),e(Qde,X0o),e(iy,z0o),e(ko,W0o),e(ko,st),M(dy,st,null),e(st,Q0o),e(st,Hde),e(Hde,H0o),e(st,U0o),e(st,Ii),e(Ii,J0o),e(Ii,Ude),e(Ude,Y0o),e(Ii,K0o),e(Ii,Qj),e(Qj,Z0o),e(Ii,eAo),e(st,oAo),M(S1,st,null),e(ko,rAo),e(ko,Ze),M(cy,Ze,null),e(Ze,tAo),e(Ze,Jde),e(Jde,aAo),e(Ze,nAo),e(Ze,ka),e(ka,sAo),e(ka,Yde),e(Yde,lAo),e(ka,iAo),e(ka,Kde),e(Kde,dAo),e(ka,cAo),e(ka,Zde),e(Zde,fAo),e(ka,mAo),e(Ze,gAo),e(Ze,W),e(W,R1),e(R1,ece),e(ece,hAo),e(R1,pAo),e(R1,Hj),e(Hj,_Ao),e(R1,uAo),e(W,bAo),e(W,P1),e(P1,oce),e(oce,vAo),e(P1,FAo),e(P1,Uj),e(Uj,TAo),e(P1,MAo),e(W,EAo),e(W,B1),e(B1,rce),e(rce,CAo),e(B1,wAo),e(B1,Jj),e(Jj,AAo),e(B1,yAo),e(W,LAo),e(W,I1),e(I1,tce),e(tce,xAo),e(I1,$Ao),e(I1,Yj),e(Yj,kAo),e(I1,SAo),e(W,RAo),e(W,q1),e(q1,ace),e(ace,PAo),e(q1,BAo),e(q1,Kj),e(Kj,IAo),e(q1,qAo),e(W,NAo),e(W,N1),e(N1,nce),e(nce,jAo),e(N1,DAo),e(N1,Zj),e(Zj,GAo),e(N1,OAo),e(W,VAo),e(W,j1),e(j1,sce),e(sce,XAo),e(j1,zAo),e(j1,eD),e(eD,WAo),e(j1,QAo),e(W,HAo),e(W,D1),e(D1,lce),e(lce,UAo),e(D1,JAo),e(D1,oD),e(oD,YAo),e(D1,KAo),e(W,ZAo),e(W,G1),e(G1,ice),e(ice,e6o),e(G1,o6o),e(G1,rD),e(rD,r6o),e(G1,t6o),e(W,a6o),e(W,O1),e(O1,dce),e(dce,n6o),e(O1,s6o),e(O1,tD),e(tD,l6o),e(O1,i6o),e(W,d6o),e(W,V1),e(V1,cce),e(cce,c6o),e(V1,f6o),e(V1,aD),e(aD,m6o),e(V1,g6o),e(W,h6o),e(W,X1),e(X1,fce),e(fce,p6o),e(X1,_6o),e(X1,nD),e(nD,u6o),e(X1,b6o),e(W,v6o),e(W,z1),e(z1,mce),e(mce,F6o),e(z1,T6o),e(z1,sD),e(sD,M6o),e(z1,E6o),e(W,C6o),e(W,W1),e(W1,gce),e(gce,w6o),e(W1,A6o),e(W1,lD),e(lD,y6o),e(W1,L6o),e(W,x6o),e(W,Q1),e(Q1,hce),e(hce,$6o),e(Q1,k6o),e(Q1,iD),e(iD,S6o),e(Q1,R6o),e(W,P6o),e(W,H1),e(H1,pce),e(pce,B6o),e(H1,I6o),e(H1,dD),e(dD,q6o),e(H1,N6o),e(W,j6o),e(W,U1),e(U1,_ce),e(_ce,D6o),e(U1,G6o),e(U1,cD),e(cD,O6o),e(U1,V6o),e(W,X6o),e(W,J1),e(J1,uce),e(uce,z6o),e(J1,W6o),e(J1,fD),e(fD,Q6o),e(J1,H6o),e(W,U6o),e(W,Y1),e(Y1,bce),e(bce,J6o),e(Y1,Y6o),e(Y1,mD),e(mD,K6o),e(Y1,Z6o),e(W,eyo),e(W,K1),e(K1,vce),e(vce,oyo),e(K1,ryo),e(K1,gD),e(gD,tyo),e(K1,ayo),e(W,nyo),e(W,Z1),e(Z1,Fce),e(Fce,syo),e(Z1,lyo),e(Z1,hD),e(hD,iyo),e(Z1,dyo),e(W,cyo),e(W,e3),e(e3,Tce),e(Tce,fyo),e(e3,myo),e(e3,pD),e(pD,gyo),e(e3,hyo),e(W,pyo),e(W,o3),e(o3,Mce),e(Mce,_yo),e(o3,uyo),e(o3,_D),e(_D,byo),e(o3,vyo),e(W,Fyo),e(W,r3),e(r3,Ece),e(Ece,Tyo),e(r3,Myo),e(r3,uD),e(uD,Eyo),e(r3,Cyo),e(W,wyo),e(W,t3),e(t3,Cce),e(Cce,Ayo),e(t3,yyo),e(t3,bD),e(bD,Lyo),e(t3,xyo),e(W,$yo),e(W,a3),e(a3,wce),e(wce,kyo),e(a3,Syo),e(a3,vD),e(vD,Ryo),e(a3,Pyo),e(W,Byo),e(W,n3),e(n3,Ace),e(Ace,Iyo),e(n3,qyo),e(n3,FD),e(FD,Nyo),e(n3,jyo),e(W,Dyo),e(W,s3),e(s3,yce),e(yce,Gyo),e(s3,Oyo),e(s3,TD),e(TD,Vyo),e(s3,Xyo),e(W,zyo),e(W,l3),e(l3,Lce),e(Lce,Wyo),e(l3,Qyo),e(l3,MD),e(MD,Hyo),e(l3,Uyo),e(W,Jyo),e(W,i3),e(i3,xce),e(xce,Yyo),e(i3,Kyo),e(i3,ED),e(ED,Zyo),e(i3,eLo),e(W,oLo),e(W,d3),e(d3,$ce),e($ce,rLo),e(d3,tLo),e(d3,kce),e(kce,aLo),e(d3,nLo),e(W,sLo),e(W,c3),e(c3,Sce),e(Sce,lLo),e(c3,iLo),e(c3,CD),e(CD,dLo),e(c3,cLo),e(W,fLo),e(W,f3),e(f3,Rce),e(Rce,mLo),e(f3,gLo),e(f3,wD),e(wD,hLo),e(f3,pLo),e(W,_Lo),e(W,m3),e(m3,Pce),e(Pce,uLo),e(m3,bLo),e(m3,AD),e(AD,vLo),e(m3,FLo),e(W,TLo),e(W,g3),e(g3,Bce),e(Bce,MLo),e(g3,ELo),e(g3,yD),e(yD,CLo),e(g3,wLo),e(Ze,ALo),e(Ze,h3),e(h3,yLo),e(h3,Ice),e(Ice,LLo),e(h3,xLo),e(h3,qce),e(qce,$Lo),e(Ze,kLo),M(p3,Ze,null),b(f,Gqe,u),b(f,qi,u),e(qi,_3),e(_3,Nce),M(fy,Nce,null),e(qi,SLo),e(qi,jce),e(jce,RLo),b(f,Oqe,u),b(f,So,u),M(my,So,null),e(So,PLo),e(So,Ni),e(Ni,BLo),e(Ni,LD),e(LD,ILo),e(Ni,qLo),e(Ni,xD),e(xD,NLo),e(Ni,jLo),e(So,DLo),e(So,gy),e(gy,GLo),e(gy,Dce),e(Dce,OLo),e(gy,VLo),e(So,XLo),e(So,lt),M(hy,lt,null),e(lt,zLo),e(lt,Gce),e(Gce,WLo),e(lt,QLo),e(lt,ji),e(ji,HLo),e(ji,Oce),e(Oce,ULo),e(ji,JLo),e(ji,$D),e($D,YLo),e(ji,KLo),e(lt,ZLo),M(u3,lt,null),e(So,e8o),e(So,eo),M(py,eo,null),e(eo,o8o),e(eo,Vce),e(Vce,r8o),e(eo,t8o),e(eo,Sa),e(Sa,a8o),e(Sa,Xce),e(Xce,n8o),e(Sa,s8o),e(Sa,zce),e(zce,l8o),e(Sa,i8o),e(Sa,Wce),e(Wce,d8o),e(Sa,c8o),e(eo,f8o),e(eo,_e),e(_e,b3),e(b3,Qce),e(Qce,m8o),e(b3,g8o),e(b3,kD),e(kD,h8o),e(b3,p8o),e(_e,_8o),e(_e,v3),e(v3,Hce),e(Hce,u8o),e(v3,b8o),e(v3,SD),e(SD,v8o),e(v3,F8o),e(_e,T8o),e(_e,F3),e(F3,Uce),e(Uce,M8o),e(F3,E8o),e(F3,RD),e(RD,C8o),e(F3,w8o),e(_e,A8o),e(_e,T3),e(T3,Jce),e(Jce,y8o),e(T3,L8o),e(T3,PD),e(PD,x8o),e(T3,$8o),e(_e,k8o),e(_e,M3),e(M3,Yce),e(Yce,S8o),e(M3,R8o),e(M3,BD),e(BD,P8o),e(M3,B8o),e(_e,I8o),e(_e,E3),e(E3,Kce),e(Kce,q8o),e(E3,N8o),e(E3,ID),e(ID,j8o),e(E3,D8o),e(_e,G8o),e(_e,C3),e(C3,Zce),e(Zce,O8o),e(C3,V8o),e(C3,qD),e(qD,X8o),e(C3,z8o),e(_e,W8o),e(_e,w3),e(w3,efe),e(efe,Q8o),e(w3,H8o),e(w3,ND),e(ND,U8o),e(w3,J8o),e(_e,Y8o),e(_e,A3),e(A3,ofe),e(ofe,K8o),e(A3,Z8o),e(A3,jD),e(jD,e9o),e(A3,o9o),e(_e,r9o),e(_e,y3),e(y3,rfe),e(rfe,t9o),e(y3,a9o),e(y3,DD),e(DD,n9o),e(y3,s9o),e(_e,l9o),e(_e,L3),e(L3,tfe),e(tfe,i9o),e(L3,d9o),e(L3,GD),e(GD,c9o),e(L3,f9o),e(_e,m9o),e(_e,x3),e(x3,afe),e(afe,g9o),e(x3,h9o),e(x3,OD),e(OD,p9o),e(x3,_9o),e(_e,u9o),e(_e,$3),e($3,nfe),e(nfe,b9o),e($3,v9o),e($3,VD),e(VD,F9o),e($3,T9o),e(_e,M9o),e(_e,k3),e(k3,sfe),e(sfe,E9o),e(k3,C9o),e(k3,XD),e(XD,w9o),e(k3,A9o),e(_e,y9o),e(_e,S3),e(S3,lfe),e(lfe,L9o),e(S3,x9o),e(S3,zD),e(zD,$9o),e(S3,k9o),e(_e,S9o),e(_e,R3),e(R3,ife),e(ife,R9o),e(R3,P9o),e(R3,WD),e(WD,B9o),e(R3,I9o),e(eo,q9o),e(eo,P3),e(P3,N9o),e(P3,dfe),e(dfe,j9o),e(P3,D9o),e(P3,cfe),e(cfe,G9o),e(eo,O9o),M(B3,eo,null),b(f,Vqe,u),b(f,Di,u),e(Di,I3),e(I3,ffe),M(_y,ffe,null),e(Di,V9o),e(Di,mfe),e(mfe,X9o),b(f,Xqe,u),b(f,Ro,u),M(uy,Ro,null),e(Ro,z9o),e(Ro,Gi),e(Gi,W9o),e(Gi,QD),e(QD,Q9o),e(Gi,H9o),e(Gi,HD),e(HD,U9o),e(Gi,J9o),e(Ro,Y9o),e(Ro,by),e(by,K9o),e(by,gfe),e(gfe,Z9o),e(by,exo),e(Ro,oxo),e(Ro,it),M(vy,it,null),e(it,rxo),e(it,hfe),e(hfe,txo),e(it,axo),e(it,Oi),e(Oi,nxo),e(Oi,pfe),e(pfe,sxo),e(Oi,lxo),e(Oi,UD),e(UD,ixo),e(Oi,dxo),e(it,cxo),M(q3,it,null),e(Ro,fxo),e(Ro,oo),M(Fy,oo,null),e(oo,mxo),e(oo,_fe),e(_fe,gxo),e(oo,hxo),e(oo,Ra),e(Ra,pxo),e(Ra,ufe),e(ufe,_xo),e(Ra,uxo),e(Ra,bfe),e(bfe,bxo),e(Ra,vxo),e(Ra,vfe),e(vfe,Fxo),e(Ra,Txo),e(oo,Mxo),e(oo,q),e(q,N3),e(N3,Ffe),e(Ffe,Exo),e(N3,Cxo),e(N3,JD),e(JD,wxo),e(N3,Axo),e(q,yxo),e(q,j3),e(j3,Tfe),e(Tfe,Lxo),e(j3,xxo),e(j3,YD),e(YD,$xo),e(j3,kxo),e(q,Sxo),e(q,D3),e(D3,Mfe),e(Mfe,Rxo),e(D3,Pxo),e(D3,KD),e(KD,Bxo),e(D3,Ixo),e(q,qxo),e(q,G3),e(G3,Efe),e(Efe,Nxo),e(G3,jxo),e(G3,ZD),e(ZD,Dxo),e(G3,Gxo),e(q,Oxo),e(q,O3),e(O3,Cfe),e(Cfe,Vxo),e(O3,Xxo),e(O3,eG),e(eG,zxo),e(O3,Wxo),e(q,Qxo),e(q,V3),e(V3,wfe),e(wfe,Hxo),e(V3,Uxo),e(V3,oG),e(oG,Jxo),e(V3,Yxo),e(q,Kxo),e(q,X3),e(X3,Afe),e(Afe,Zxo),e(X3,e$o),e(X3,rG),e(rG,o$o),e(X3,r$o),e(q,t$o),e(q,z3),e(z3,yfe),e(yfe,a$o),e(z3,n$o),e(z3,tG),e(tG,s$o),e(z3,l$o),e(q,i$o),e(q,W3),e(W3,Lfe),e(Lfe,d$o),e(W3,c$o),e(W3,aG),e(aG,f$o),e(W3,m$o),e(q,g$o),e(q,Q3),e(Q3,xfe),e(xfe,h$o),e(Q3,p$o),e(Q3,nG),e(nG,_$o),e(Q3,u$o),e(q,b$o),e(q,H3),e(H3,$fe),e($fe,v$o),e(H3,F$o),e(H3,sG),e(sG,T$o),e(H3,M$o),e(q,E$o),e(q,U3),e(U3,kfe),e(kfe,C$o),e(U3,w$o),e(U3,lG),e(lG,A$o),e(U3,y$o),e(q,L$o),e(q,J3),e(J3,Sfe),e(Sfe,x$o),e(J3,$$o),e(J3,iG),e(iG,k$o),e(J3,S$o),e(q,R$o),e(q,Y3),e(Y3,Rfe),e(Rfe,P$o),e(Y3,B$o),e(Y3,dG),e(dG,I$o),e(Y3,q$o),e(q,N$o),e(q,K3),e(K3,Pfe),e(Pfe,j$o),e(K3,D$o),e(K3,cG),e(cG,G$o),e(K3,O$o),e(q,V$o),e(q,Z3),e(Z3,Bfe),e(Bfe,X$o),e(Z3,z$o),e(Z3,fG),e(fG,W$o),e(Z3,Q$o),e(q,H$o),e(q,eb),e(eb,Ife),e(Ife,U$o),e(eb,J$o),e(eb,mG),e(mG,Y$o),e(eb,K$o),e(q,Z$o),e(q,ob),e(ob,qfe),e(qfe,eko),e(ob,oko),e(ob,gG),e(gG,rko),e(ob,tko),e(q,ako),e(q,rb),e(rb,Nfe),e(Nfe,nko),e(rb,sko),e(rb,hG),e(hG,lko),e(rb,iko),e(q,dko),e(q,tb),e(tb,jfe),e(jfe,cko),e(tb,fko),e(tb,pG),e(pG,mko),e(tb,gko),e(q,hko),e(q,ab),e(ab,Dfe),e(Dfe,pko),e(ab,_ko),e(ab,_G),e(_G,uko),e(ab,bko),e(q,vko),e(q,nb),e(nb,Gfe),e(Gfe,Fko),e(nb,Tko),e(nb,uG),e(uG,Mko),e(nb,Eko),e(q,Cko),e(q,sb),e(sb,Ofe),e(Ofe,wko),e(sb,Ako),e(sb,bG),e(bG,yko),e(sb,Lko),e(q,xko),e(q,lb),e(lb,Vfe),e(Vfe,$ko),e(lb,kko),e(lb,vG),e(vG,Sko),e(lb,Rko),e(q,Pko),e(q,ib),e(ib,Xfe),e(Xfe,Bko),e(ib,Iko),e(ib,FG),e(FG,qko),e(ib,Nko),e(q,jko),e(q,db),e(db,zfe),e(zfe,Dko),e(db,Gko),e(db,TG),e(TG,Oko),e(db,Vko),e(q,Xko),e(q,cb),e(cb,Wfe),e(Wfe,zko),e(cb,Wko),e(cb,MG),e(MG,Qko),e(cb,Hko),e(q,Uko),e(q,fb),e(fb,Qfe),e(Qfe,Jko),e(fb,Yko),e(fb,EG),e(EG,Kko),e(fb,Zko),e(q,eSo),e(q,mb),e(mb,Hfe),e(Hfe,oSo),e(mb,rSo),e(mb,CG),e(CG,tSo),e(mb,aSo),e(q,nSo),e(q,gb),e(gb,Ufe),e(Ufe,sSo),e(gb,lSo),e(gb,wG),e(wG,iSo),e(gb,dSo),e(q,cSo),e(q,hb),e(hb,Jfe),e(Jfe,fSo),e(hb,mSo),e(hb,AG),e(AG,gSo),e(hb,hSo),e(q,pSo),e(q,pb),e(pb,Yfe),e(Yfe,_So),e(pb,uSo),e(pb,yG),e(yG,bSo),e(pb,vSo),e(q,FSo),e(q,_b),e(_b,Kfe),e(Kfe,TSo),e(_b,MSo),e(_b,LG),e(LG,ESo),e(_b,CSo),e(q,wSo),e(q,ub),e(ub,Zfe),e(Zfe,ASo),e(ub,ySo),e(ub,xG),e(xG,LSo),e(ub,xSo),e(q,$So),e(q,bb),e(bb,eme),e(eme,kSo),e(bb,SSo),e(bb,$G),e($G,RSo),e(bb,PSo),e(q,BSo),e(q,vb),e(vb,ome),e(ome,ISo),e(vb,qSo),e(vb,kG),e(kG,NSo),e(vb,jSo),e(q,DSo),e(q,Fb),e(Fb,rme),e(rme,GSo),e(Fb,OSo),e(Fb,SG),e(SG,VSo),e(Fb,XSo),e(q,zSo),e(q,Tb),e(Tb,tme),e(tme,WSo),e(Tb,QSo),e(Tb,RG),e(RG,HSo),e(Tb,USo),e(q,JSo),e(q,Mb),e(Mb,ame),e(ame,YSo),e(Mb,KSo),e(Mb,PG),e(PG,ZSo),e(Mb,eRo),e(q,oRo),e(q,Eb),e(Eb,nme),e(nme,rRo),e(Eb,tRo),e(Eb,BG),e(BG,aRo),e(Eb,nRo),e(q,sRo),e(q,Cb),e(Cb,sme),e(sme,lRo),e(Cb,iRo),e(Cb,IG),e(IG,dRo),e(Cb,cRo),e(q,fRo),e(q,wb),e(wb,lme),e(lme,mRo),e(wb,gRo),e(wb,qG),e(qG,hRo),e(wb,pRo),e(q,_Ro),e(q,Ab),e(Ab,ime),e(ime,uRo),e(Ab,bRo),e(Ab,NG),e(NG,vRo),e(Ab,FRo),e(q,TRo),e(q,yb),e(yb,dme),e(dme,MRo),e(yb,ERo),e(yb,jG),e(jG,CRo),e(yb,wRo),e(q,ARo),e(q,Lb),e(Lb,cme),e(cme,yRo),e(Lb,LRo),e(Lb,DG),e(DG,xRo),e(Lb,$Ro),e(q,kRo),e(q,xb),e(xb,fme),e(fme,SRo),e(xb,RRo),e(xb,GG),e(GG,PRo),e(xb,BRo),e(oo,IRo),e(oo,$b),e($b,qRo),e($b,mme),e(mme,NRo),e($b,jRo),e($b,gme),e(gme,DRo),e(oo,GRo),M(kb,oo,null),b(f,zqe,u),b(f,Vi,u),e(Vi,Sb),e(Sb,hme),M(Ty,hme,null),e(Vi,ORo),e(Vi,pme),e(pme,VRo),b(f,Wqe,u),b(f,Po,u),M(My,Po,null),e(Po,XRo),e(Po,Xi),e(Xi,zRo),e(Xi,OG),e(OG,WRo),e(Xi,QRo),e(Xi,VG),e(VG,HRo),e(Xi,URo),e(Po,JRo),e(Po,Ey),e(Ey,YRo),e(Ey,_me),e(_me,KRo),e(Ey,ZRo),e(Po,ePo),e(Po,dt),M(Cy,dt,null),e(dt,oPo),e(dt,ume),e(ume,rPo),e(dt,tPo),e(dt,zi),e(zi,aPo),e(zi,bme),e(bme,nPo),e(zi,sPo),e(zi,XG),e(XG,lPo),e(zi,iPo),e(dt,dPo),M(Rb,dt,null),e(Po,cPo),e(Po,ro),M(wy,ro,null),e(ro,fPo),e(ro,vme),e(vme,mPo),e(ro,gPo),e(ro,Pa),e(Pa,hPo),e(Pa,Fme),e(Fme,pPo),e(Pa,_Po),e(Pa,Tme),e(Tme,uPo),e(Pa,bPo),e(Pa,Mme),e(Mme,vPo),e(Pa,FPo),e(ro,TPo),e(ro,Y),e(Y,Pb),e(Pb,Eme),e(Eme,MPo),e(Pb,EPo),e(Pb,zG),e(zG,CPo),e(Pb,wPo),e(Y,APo),e(Y,Bb),e(Bb,Cme),e(Cme,yPo),e(Bb,LPo),e(Bb,WG),e(WG,xPo),e(Bb,$Po),e(Y,kPo),e(Y,Ib),e(Ib,wme),e(wme,SPo),e(Ib,RPo),e(Ib,QG),e(QG,PPo),e(Ib,BPo),e(Y,IPo),e(Y,qb),e(qb,Ame),e(Ame,qPo),e(qb,NPo),e(qb,HG),e(HG,jPo),e(qb,DPo),e(Y,GPo),e(Y,Nb),e(Nb,yme),e(yme,OPo),e(Nb,VPo),e(Nb,UG),e(UG,XPo),e(Nb,zPo),e(Y,WPo),e(Y,jb),e(jb,Lme),e(Lme,QPo),e(jb,HPo),e(jb,JG),e(JG,UPo),e(jb,JPo),e(Y,YPo),e(Y,Db),e(Db,xme),e(xme,KPo),e(Db,ZPo),e(Db,YG),e(YG,eBo),e(Db,oBo),e(Y,rBo),e(Y,Gb),e(Gb,$me),e($me,tBo),e(Gb,aBo),e(Gb,KG),e(KG,nBo),e(Gb,sBo),e(Y,lBo),e(Y,Ob),e(Ob,kme),e(kme,iBo),e(Ob,dBo),e(Ob,ZG),e(ZG,cBo),e(Ob,fBo),e(Y,mBo),e(Y,Vb),e(Vb,Sme),e(Sme,gBo),e(Vb,hBo),e(Vb,eO),e(eO,pBo),e(Vb,_Bo),e(Y,uBo),e(Y,Xb),e(Xb,Rme),e(Rme,bBo),e(Xb,vBo),e(Xb,oO),e(oO,FBo),e(Xb,TBo),e(Y,MBo),e(Y,zb),e(zb,Pme),e(Pme,EBo),e(zb,CBo),e(zb,rO),e(rO,wBo),e(zb,ABo),e(Y,yBo),e(Y,Wb),e(Wb,Bme),e(Bme,LBo),e(Wb,xBo),e(Wb,tO),e(tO,$Bo),e(Wb,kBo),e(Y,SBo),e(Y,Qb),e(Qb,Ime),e(Ime,RBo),e(Qb,PBo),e(Qb,aO),e(aO,BBo),e(Qb,IBo),e(Y,qBo),e(Y,Hb),e(Hb,qme),e(qme,NBo),e(Hb,jBo),e(Hb,nO),e(nO,DBo),e(Hb,GBo),e(Y,OBo),e(Y,Ub),e(Ub,Nme),e(Nme,VBo),e(Ub,XBo),e(Ub,sO),e(sO,zBo),e(Ub,WBo),e(Y,QBo),e(Y,Jb),e(Jb,jme),e(jme,HBo),e(Jb,UBo),e(Jb,lO),e(lO,JBo),e(Jb,YBo),e(Y,KBo),e(Y,Yb),e(Yb,Dme),e(Dme,ZBo),e(Yb,eIo),e(Yb,iO),e(iO,oIo),e(Yb,rIo),e(Y,tIo),e(Y,Kb),e(Kb,Gme),e(Gme,aIo),e(Kb,nIo),e(Kb,dO),e(dO,sIo),e(Kb,lIo),e(Y,iIo),e(Y,Zb),e(Zb,Ome),e(Ome,dIo),e(Zb,cIo),e(Zb,cO),e(cO,fIo),e(Zb,mIo),e(Y,gIo),e(Y,e2),e(e2,Vme),e(Vme,hIo),e(e2,pIo),e(e2,fO),e(fO,_Io),e(e2,uIo),e(Y,bIo),e(Y,o2),e(o2,Xme),e(Xme,vIo),e(o2,FIo),e(o2,mO),e(mO,TIo),e(o2,MIo),e(Y,EIo),e(Y,r2),e(r2,zme),e(zme,CIo),e(r2,wIo),e(r2,gO),e(gO,AIo),e(r2,yIo),e(Y,LIo),e(Y,t2),e(t2,Wme),e(Wme,xIo),e(t2,$Io),e(t2,hO),e(hO,kIo),e(t2,SIo),e(Y,RIo),e(Y,a2),e(a2,Qme),e(Qme,PIo),e(a2,BIo),e(a2,pO),e(pO,IIo),e(a2,qIo),e(Y,NIo),e(Y,n2),e(n2,Hme),e(Hme,jIo),e(n2,DIo),e(n2,_O),e(_O,GIo),e(n2,OIo),e(Y,VIo),e(Y,s2),e(s2,Ume),e(Ume,XIo),e(s2,zIo),e(s2,uO),e(uO,WIo),e(s2,QIo),e(Y,HIo),e(Y,l2),e(l2,Jme),e(Jme,UIo),e(l2,JIo),e(l2,bO),e(bO,YIo),e(l2,KIo),e(Y,ZIo),e(Y,i2),e(i2,Yme),e(Yme,eqo),e(i2,oqo),e(i2,vO),e(vO,rqo),e(i2,tqo),e(ro,aqo),e(ro,d2),e(d2,nqo),e(d2,Kme),e(Kme,sqo),e(d2,lqo),e(d2,Zme),e(Zme,iqo),e(ro,dqo),M(c2,ro,null),b(f,Qqe,u),b(f,Wi,u),e(Wi,f2),e(f2,ege),M(Ay,ege,null),e(Wi,cqo),e(Wi,oge),e(oge,fqo),b(f,Hqe,u),b(f,Bo,u),M(yy,Bo,null),e(Bo,mqo),e(Bo,Qi),e(Qi,gqo),e(Qi,FO),e(FO,hqo),e(Qi,pqo),e(Qi,TO),e(TO,_qo),e(Qi,uqo),e(Bo,bqo),e(Bo,Ly),e(Ly,vqo),e(Ly,rge),e(rge,Fqo),e(Ly,Tqo),e(Bo,Mqo),e(Bo,ct),M(xy,ct,null),e(ct,Eqo),e(ct,tge),e(tge,Cqo),e(ct,wqo),e(ct,Hi),e(Hi,Aqo),e(Hi,age),e(age,yqo),e(Hi,Lqo),e(Hi,MO),e(MO,xqo),e(Hi,$qo),e(ct,kqo),M(m2,ct,null),e(Bo,Sqo),e(Bo,to),M($y,to,null),e(to,Rqo),e(to,nge),e(nge,Pqo),e(to,Bqo),e(to,Ba),e(Ba,Iqo),e(Ba,sge),e(sge,qqo),e(Ba,Nqo),e(Ba,lge),e(lge,jqo),e(Ba,Dqo),e(Ba,ige),e(ige,Gqo),e(Ba,Oqo),e(to,Vqo),e(to,Yr),e(Yr,g2),e(g2,dge),e(dge,Xqo),e(g2,zqo),e(g2,EO),e(EO,Wqo),e(g2,Qqo),e(Yr,Hqo),e(Yr,h2),e(h2,cge),e(cge,Uqo),e(h2,Jqo),e(h2,CO),e(CO,Yqo),e(h2,Kqo),e(Yr,Zqo),e(Yr,p2),e(p2,fge),e(fge,eNo),e(p2,oNo),e(p2,wO),e(wO,rNo),e(p2,tNo),e(Yr,aNo),e(Yr,_2),e(_2,mge),e(mge,nNo),e(_2,sNo),e(_2,AO),e(AO,lNo),e(_2,iNo),e(Yr,dNo),e(Yr,u2),e(u2,gge),e(gge,cNo),e(u2,fNo),e(u2,yO),e(yO,mNo),e(u2,gNo),e(to,hNo),e(to,b2),e(b2,pNo),e(b2,hge),e(hge,_No),e(b2,uNo),e(b2,pge),e(pge,bNo),e(to,vNo),M(v2,to,null),b(f,Uqe,u),b(f,Ui,u),e(Ui,F2),e(F2,_ge),M(ky,_ge,null),e(Ui,FNo),e(Ui,uge),e(uge,TNo),b(f,Jqe,u),b(f,Io,u),M(Sy,Io,null),e(Io,MNo),e(Io,Ji),e(Ji,ENo),e(Ji,LO),e(LO,CNo),e(Ji,wNo),e(Ji,xO),e(xO,ANo),e(Ji,yNo),e(Io,LNo),e(Io,Ry),e(Ry,xNo),e(Ry,bge),e(bge,$No),e(Ry,kNo),e(Io,SNo),e(Io,ft),M(Py,ft,null),e(ft,RNo),e(ft,vge),e(vge,PNo),e(ft,BNo),e(ft,Yi),e(Yi,INo),e(Yi,Fge),e(Fge,qNo),e(Yi,NNo),e(Yi,$O),e($O,jNo),e(Yi,DNo),e(ft,GNo),M(T2,ft,null),e(Io,ONo),e(Io,ao),M(By,ao,null),e(ao,VNo),e(ao,Tge),e(Tge,XNo),e(ao,zNo),e(ao,Ia),e(Ia,WNo),e(Ia,Mge),e(Mge,QNo),e(Ia,HNo),e(Ia,Ege),e(Ege,UNo),e(Ia,JNo),e(Ia,Cge),e(Cge,YNo),e(Ia,KNo),e(ao,ZNo),e(ao,U),e(U,M2),e(M2,wge),e(wge,ejo),e(M2,ojo),e(M2,kO),e(kO,rjo),e(M2,tjo),e(U,ajo),e(U,E2),e(E2,Age),e(Age,njo),e(E2,sjo),e(E2,SO),e(SO,ljo),e(E2,ijo),e(U,djo),e(U,C2),e(C2,yge),e(yge,cjo),e(C2,fjo),e(C2,RO),e(RO,mjo),e(C2,gjo),e(U,hjo),e(U,w2),e(w2,Lge),e(Lge,pjo),e(w2,_jo),e(w2,PO),e(PO,ujo),e(w2,bjo),e(U,vjo),e(U,A2),e(A2,xge),e(xge,Fjo),e(A2,Tjo),e(A2,BO),e(BO,Mjo),e(A2,Ejo),e(U,Cjo),e(U,y2),e(y2,$ge),e($ge,wjo),e(y2,Ajo),e(y2,IO),e(IO,yjo),e(y2,Ljo),e(U,xjo),e(U,L2),e(L2,kge),e(kge,$jo),e(L2,kjo),e(L2,qO),e(qO,Sjo),e(L2,Rjo),e(U,Pjo),e(U,x2),e(x2,Sge),e(Sge,Bjo),e(x2,Ijo),e(x2,NO),e(NO,qjo),e(x2,Njo),e(U,jjo),e(U,$2),e($2,Rge),e(Rge,Djo),e($2,Gjo),e($2,jO),e(jO,Ojo),e($2,Vjo),e(U,Xjo),e(U,k2),e(k2,Pge),e(Pge,zjo),e(k2,Wjo),e(k2,DO),e(DO,Qjo),e(k2,Hjo),e(U,Ujo),e(U,S2),e(S2,Bge),e(Bge,Jjo),e(S2,Yjo),e(S2,GO),e(GO,Kjo),e(S2,Zjo),e(U,eDo),e(U,R2),e(R2,Ige),e(Ige,oDo),e(R2,rDo),e(R2,OO),e(OO,tDo),e(R2,aDo),e(U,nDo),e(U,P2),e(P2,qge),e(qge,sDo),e(P2,lDo),e(P2,VO),e(VO,iDo),e(P2,dDo),e(U,cDo),e(U,B2),e(B2,Nge),e(Nge,fDo),e(B2,mDo),e(B2,XO),e(XO,gDo),e(B2,hDo),e(U,pDo),e(U,I2),e(I2,jge),e(jge,_Do),e(I2,uDo),e(I2,zO),e(zO,bDo),e(I2,vDo),e(U,FDo),e(U,q2),e(q2,Dge),e(Dge,TDo),e(q2,MDo),e(q2,WO),e(WO,EDo),e(q2,CDo),e(U,wDo),e(U,N2),e(N2,Gge),e(Gge,ADo),e(N2,yDo),e(N2,QO),e(QO,LDo),e(N2,xDo),e(U,$Do),e(U,j2),e(j2,Oge),e(Oge,kDo),e(j2,SDo),e(j2,HO),e(HO,RDo),e(j2,PDo),e(U,BDo),e(U,D2),e(D2,Vge),e(Vge,IDo),e(D2,qDo),e(D2,UO),e(UO,NDo),e(D2,jDo),e(U,DDo),e(U,G2),e(G2,Xge),e(Xge,GDo),e(G2,ODo),e(G2,JO),e(JO,VDo),e(G2,XDo),e(U,zDo),e(U,O2),e(O2,zge),e(zge,WDo),e(O2,QDo),e(O2,YO),e(YO,HDo),e(O2,UDo),e(U,JDo),e(U,V2),e(V2,Wge),e(Wge,YDo),e(V2,KDo),e(V2,KO),e(KO,ZDo),e(V2,eGo),e(U,oGo),e(U,X2),e(X2,Qge),e(Qge,rGo),e(X2,tGo),e(X2,ZO),e(ZO,aGo),e(X2,nGo),e(U,sGo),e(U,z2),e(z2,Hge),e(Hge,lGo),e(z2,iGo),e(z2,eV),e(eV,dGo),e(z2,cGo),e(U,fGo),e(U,W2),e(W2,Uge),e(Uge,mGo),e(W2,gGo),e(W2,oV),e(oV,hGo),e(W2,pGo),e(U,_Go),e(U,Q2),e(Q2,Jge),e(Jge,uGo),e(Q2,bGo),e(Q2,rV),e(rV,vGo),e(Q2,FGo),e(U,TGo),e(U,H2),e(H2,Yge),e(Yge,MGo),e(H2,EGo),e(H2,tV),e(tV,CGo),e(H2,wGo),e(U,AGo),e(U,U2),e(U2,Kge),e(Kge,yGo),e(U2,LGo),e(U2,aV),e(aV,xGo),e(U2,$Go),e(U,kGo),e(U,J2),e(J2,Zge),e(Zge,SGo),e(J2,RGo),e(J2,nV),e(nV,PGo),e(J2,BGo),e(U,IGo),e(U,Y2),e(Y2,ehe),e(ehe,qGo),e(Y2,NGo),e(Y2,sV),e(sV,jGo),e(Y2,DGo),e(U,GGo),e(U,K2),e(K2,ohe),e(ohe,OGo),e(K2,VGo),e(K2,lV),e(lV,XGo),e(K2,zGo),e(U,WGo),e(U,Z2),e(Z2,rhe),e(rhe,QGo),e(Z2,HGo),e(Z2,iV),e(iV,UGo),e(Z2,JGo),e(U,YGo),e(U,ev),e(ev,the),e(the,KGo),e(ev,ZGo),e(ev,dV),e(dV,eOo),e(ev,oOo),e(ao,rOo),e(ao,ov),e(ov,tOo),e(ov,ahe),e(ahe,aOo),e(ov,nOo),e(ov,nhe),e(nhe,sOo),e(ao,lOo),M(rv,ao,null),b(f,Yqe,u),b(f,Ki,u),e(Ki,tv),e(tv,she),M(Iy,she,null),e(Ki,iOo),e(Ki,lhe),e(lhe,dOo),b(f,Kqe,u),b(f,qo,u),M(qy,qo,null),e(qo,cOo),e(qo,Zi),e(Zi,fOo),e(Zi,cV),e(cV,mOo),e(Zi,gOo),e(Zi,fV),e(fV,hOo),e(Zi,pOo),e(qo,_Oo),e(qo,Ny),e(Ny,uOo),e(Ny,ihe),e(ihe,bOo),e(Ny,vOo),e(qo,FOo),e(qo,mt),M(jy,mt,null),e(mt,TOo),e(mt,dhe),e(dhe,MOo),e(mt,EOo),e(mt,ed),e(ed,COo),e(ed,che),e(che,wOo),e(ed,AOo),e(ed,mV),e(mV,yOo),e(ed,LOo),e(mt,xOo),M(av,mt,null),e(qo,$Oo),e(qo,no),M(Dy,no,null),e(no,kOo),e(no,fhe),e(fhe,SOo),e(no,ROo),e(no,qa),e(qa,POo),e(qa,mhe),e(mhe,BOo),e(qa,IOo),e(qa,ghe),e(ghe,qOo),e(qa,NOo),e(qa,hhe),e(hhe,jOo),e(qa,DOo),e(no,GOo),e(no,V),e(V,nv),e(nv,phe),e(phe,OOo),e(nv,VOo),e(nv,gV),e(gV,XOo),e(nv,zOo),e(V,WOo),e(V,sv),e(sv,_he),e(_he,QOo),e(sv,HOo),e(sv,hV),e(hV,UOo),e(sv,JOo),e(V,YOo),e(V,lv),e(lv,uhe),e(uhe,KOo),e(lv,ZOo),e(lv,pV),e(pV,eVo),e(lv,oVo),e(V,rVo),e(V,iv),e(iv,bhe),e(bhe,tVo),e(iv,aVo),e(iv,_V),e(_V,nVo),e(iv,sVo),e(V,lVo),e(V,dv),e(dv,vhe),e(vhe,iVo),e(dv,dVo),e(dv,uV),e(uV,cVo),e(dv,fVo),e(V,mVo),e(V,cv),e(cv,Fhe),e(Fhe,gVo),e(cv,hVo),e(cv,bV),e(bV,pVo),e(cv,_Vo),e(V,uVo),e(V,fv),e(fv,The),e(The,bVo),e(fv,vVo),e(fv,vV),e(vV,FVo),e(fv,TVo),e(V,MVo),e(V,mv),e(mv,Mhe),e(Mhe,EVo),e(mv,CVo),e(mv,FV),e(FV,wVo),e(mv,AVo),e(V,yVo),e(V,gv),e(gv,Ehe),e(Ehe,LVo),e(gv,xVo),e(gv,TV),e(TV,$Vo),e(gv,kVo),e(V,SVo),e(V,hv),e(hv,Che),e(Che,RVo),e(hv,PVo),e(hv,MV),e(MV,BVo),e(hv,IVo),e(V,qVo),e(V,pv),e(pv,whe),e(whe,NVo),e(pv,jVo),e(pv,EV),e(EV,DVo),e(pv,GVo),e(V,OVo),e(V,_v),e(_v,Ahe),e(Ahe,VVo),e(_v,XVo),e(_v,CV),e(CV,zVo),e(_v,WVo),e(V,QVo),e(V,uv),e(uv,yhe),e(yhe,HVo),e(uv,UVo),e(uv,wV),e(wV,JVo),e(uv,YVo),e(V,KVo),e(V,bv),e(bv,Lhe),e(Lhe,ZVo),e(bv,eXo),e(bv,AV),e(AV,oXo),e(bv,rXo),e(V,tXo),e(V,vv),e(vv,xhe),e(xhe,aXo),e(vv,nXo),e(vv,yV),e(yV,sXo),e(vv,lXo),e(V,iXo),e(V,Fv),e(Fv,$he),e($he,dXo),e(Fv,cXo),e(Fv,LV),e(LV,fXo),e(Fv,mXo),e(V,gXo),e(V,Tv),e(Tv,khe),e(khe,hXo),e(Tv,pXo),e(Tv,xV),e(xV,_Xo),e(Tv,uXo),e(V,bXo),e(V,Mv),e(Mv,She),e(She,vXo),e(Mv,FXo),e(Mv,$V),e($V,TXo),e(Mv,MXo),e(V,EXo),e(V,Ev),e(Ev,Rhe),e(Rhe,CXo),e(Ev,wXo),e(Ev,kV),e(kV,AXo),e(Ev,yXo),e(V,LXo),e(V,Cv),e(Cv,Phe),e(Phe,xXo),e(Cv,$Xo),e(Cv,SV),e(SV,kXo),e(Cv,SXo),e(V,RXo),e(V,wv),e(wv,Bhe),e(Bhe,PXo),e(wv,BXo),e(wv,RV),e(RV,IXo),e(wv,qXo),e(V,NXo),e(V,Av),e(Av,Ihe),e(Ihe,jXo),e(Av,DXo),e(Av,PV),e(PV,GXo),e(Av,OXo),e(V,VXo),e(V,yv),e(yv,qhe),e(qhe,XXo),e(yv,zXo),e(yv,BV),e(BV,WXo),e(yv,QXo),e(V,HXo),e(V,Lv),e(Lv,Nhe),e(Nhe,UXo),e(Lv,JXo),e(Lv,IV),e(IV,YXo),e(Lv,KXo),e(V,ZXo),e(V,xv),e(xv,jhe),e(jhe,ezo),e(xv,ozo),e(xv,qV),e(qV,rzo),e(xv,tzo),e(V,azo),e(V,$v),e($v,Dhe),e(Dhe,nzo),e($v,szo),e($v,NV),e(NV,lzo),e($v,izo),e(V,dzo),e(V,kv),e(kv,Ghe),e(Ghe,czo),e(kv,fzo),e(kv,jV),e(jV,mzo),e(kv,gzo),e(V,hzo),e(V,Sv),e(Sv,Ohe),e(Ohe,pzo),e(Sv,_zo),e(Sv,DV),e(DV,uzo),e(Sv,bzo),e(V,vzo),e(V,Rv),e(Rv,Vhe),e(Vhe,Fzo),e(Rv,Tzo),e(Rv,GV),e(GV,Mzo),e(Rv,Ezo),e(V,Czo),e(V,Pv),e(Pv,Xhe),e(Xhe,wzo),e(Pv,Azo),e(Pv,OV),e(OV,yzo),e(Pv,Lzo),e(V,xzo),e(V,Bv),e(Bv,zhe),e(zhe,$zo),e(Bv,kzo),e(Bv,VV),e(VV,Szo),e(Bv,Rzo),e(V,Pzo),e(V,Iv),e(Iv,Whe),e(Whe,Bzo),e(Iv,Izo),e(Iv,XV),e(XV,qzo),e(Iv,Nzo),e(V,jzo),e(V,qv),e(qv,Qhe),e(Qhe,Dzo),e(qv,Gzo),e(qv,zV),e(zV,Ozo),e(qv,Vzo),e(V,Xzo),e(V,Nv),e(Nv,Hhe),e(Hhe,zzo),e(Nv,Wzo),e(Nv,WV),e(WV,Qzo),e(Nv,Hzo),e(V,Uzo),e(V,jv),e(jv,Uhe),e(Uhe,Jzo),e(jv,Yzo),e(jv,QV),e(QV,Kzo),e(jv,Zzo),e(V,eWo),e(V,Dv),e(Dv,Jhe),e(Jhe,oWo),e(Dv,rWo),e(Dv,HV),e(HV,tWo),e(Dv,aWo),e(V,nWo),e(V,Gv),e(Gv,Yhe),e(Yhe,sWo),e(Gv,lWo),e(Gv,UV),e(UV,iWo),e(Gv,dWo),e(V,cWo),e(V,Ov),e(Ov,Khe),e(Khe,fWo),e(Ov,mWo),e(Ov,JV),e(JV,gWo),e(Ov,hWo),e(V,pWo),e(V,Vv),e(Vv,Zhe),e(Zhe,_Wo),e(Vv,uWo),e(Vv,YV),e(YV,bWo),e(Vv,vWo),e(no,FWo),e(no,Xv),e(Xv,TWo),e(Xv,epe),e(epe,MWo),e(Xv,EWo),e(Xv,ope),e(ope,CWo),e(no,wWo),M(zv,no,null),b(f,Zqe,u),b(f,od,u),e(od,Wv),e(Wv,rpe),M(Gy,rpe,null),e(od,AWo),e(od,tpe),e(tpe,yWo),b(f,eNe,u),b(f,No,u),M(Oy,No,null),e(No,LWo),e(No,rd),e(rd,xWo),e(rd,KV),e(KV,$Wo),e(rd,kWo),e(rd,ZV),e(ZV,SWo),e(rd,RWo),e(No,PWo),e(No,Vy),e(Vy,BWo),e(Vy,ape),e(ape,IWo),e(Vy,qWo),e(No,NWo),e(No,gt),M(Xy,gt,null),e(gt,jWo),e(gt,npe),e(npe,DWo),e(gt,GWo),e(gt,td),e(td,OWo),e(td,spe),e(spe,VWo),e(td,XWo),e(td,eX),e(eX,zWo),e(td,WWo),e(gt,QWo),M(Qv,gt,null),e(No,HWo),e(No,so),M(zy,so,null),e(so,UWo),e(so,lpe),e(lpe,JWo),e(so,YWo),e(so,Na),e(Na,KWo),e(Na,ipe),e(ipe,ZWo),e(Na,eQo),e(Na,dpe),e(dpe,oQo),e(Na,rQo),e(Na,cpe),e(cpe,tQo),e(Na,aQo),e(so,nQo),e(so,fpe),e(fpe,Hv),e(Hv,mpe),e(mpe,sQo),e(Hv,lQo),e(Hv,oX),e(oX,iQo),e(Hv,dQo),e(so,cQo),e(so,Uv),e(Uv,fQo),e(Uv,gpe),e(gpe,mQo),e(Uv,gQo),e(Uv,hpe),e(hpe,hQo),e(so,pQo),M(Jv,so,null),b(f,oNe,u),b(f,ad,u),e(ad,Yv),e(Yv,ppe),M(Wy,ppe,null),e(ad,_Qo),e(ad,_pe),e(_pe,uQo),b(f,rNe,u),b(f,jo,u),M(Qy,jo,null),e(jo,bQo),e(jo,nd),e(nd,vQo),e(nd,rX),e(rX,FQo),e(nd,TQo),e(nd,tX),e(tX,MQo),e(nd,EQo),e(jo,CQo),e(jo,Hy),e(Hy,wQo),e(Hy,upe),e(upe,AQo),e(Hy,yQo),e(jo,LQo),e(jo,ht),M(Uy,ht,null),e(ht,xQo),e(ht,bpe),e(bpe,$Qo),e(ht,kQo),e(ht,sd),e(sd,SQo),e(sd,vpe),e(vpe,RQo),e(sd,PQo),e(sd,aX),e(aX,BQo),e(sd,IQo),e(ht,qQo),M(Kv,ht,null),e(jo,NQo),e(jo,lo),M(Jy,lo,null),e(lo,jQo),e(lo,Fpe),e(Fpe,DQo),e(lo,GQo),e(lo,ja),e(ja,OQo),e(ja,Tpe),e(Tpe,VQo),e(ja,XQo),e(ja,Mpe),e(Mpe,zQo),e(ja,WQo),e(ja,Epe),e(Epe,QQo),e(ja,HQo),e(lo,UQo),e(lo,Fe),e(Fe,Zv),e(Zv,Cpe),e(Cpe,JQo),e(Zv,YQo),e(Zv,nX),e(nX,KQo),e(Zv,ZQo),e(Fe,eHo),e(Fe,eF),e(eF,wpe),e(wpe,oHo),e(eF,rHo),e(eF,sX),e(sX,tHo),e(eF,aHo),e(Fe,nHo),e(Fe,oF),e(oF,Ape),e(Ape,sHo),e(oF,lHo),e(oF,lX),e(lX,iHo),e(oF,dHo),e(Fe,cHo),e(Fe,rF),e(rF,ype),e(ype,fHo),e(rF,mHo),e(rF,iX),e(iX,gHo),e(rF,hHo),e(Fe,pHo),e(Fe,Bs),e(Bs,Lpe),e(Lpe,_Ho),e(Bs,uHo),e(Bs,dX),e(dX,bHo),e(Bs,vHo),e(Bs,cX),e(cX,FHo),e(Bs,THo),e(Fe,MHo),e(Fe,tF),e(tF,xpe),e(xpe,EHo),e(tF,CHo),e(tF,fX),e(fX,wHo),e(tF,AHo),e(Fe,yHo),e(Fe,pt),e(pt,$pe),e($pe,LHo),e(pt,xHo),e(pt,mX),e(mX,$Ho),e(pt,kHo),e(pt,gX),e(gX,SHo),e(pt,RHo),e(pt,hX),e(hX,PHo),e(pt,BHo),e(Fe,IHo),e(Fe,aF),e(aF,kpe),e(kpe,qHo),e(aF,NHo),e(aF,pX),e(pX,jHo),e(aF,DHo),e(Fe,GHo),e(Fe,nF),e(nF,Spe),e(Spe,OHo),e(nF,VHo),e(nF,_X),e(_X,XHo),e(nF,zHo),e(Fe,WHo),e(Fe,sF),e(sF,Rpe),e(Rpe,QHo),e(sF,HHo),e(sF,uX),e(uX,UHo),e(sF,JHo),e(Fe,YHo),e(Fe,lF),e(lF,Ppe),e(Ppe,KHo),e(lF,ZHo),e(lF,bX),e(bX,eUo),e(lF,oUo),e(Fe,rUo),e(Fe,iF),e(iF,Bpe),e(Bpe,tUo),e(iF,aUo),e(iF,vX),e(vX,nUo),e(iF,sUo),e(Fe,lUo),e(Fe,dF),e(dF,Ipe),e(Ipe,iUo),e(dF,dUo),e(dF,FX),e(FX,cUo),e(dF,fUo),e(Fe,mUo),e(Fe,cF),e(cF,qpe),e(qpe,gUo),e(cF,hUo),e(cF,TX),e(TX,pUo),e(cF,_Uo),e(lo,uUo),e(lo,fF),e(fF,bUo),e(fF,Npe),e(Npe,vUo),e(fF,FUo),e(fF,jpe),e(jpe,TUo),e(lo,MUo),M(mF,lo,null),b(f,tNe,u),b(f,ld,u),e(ld,gF),e(gF,Dpe),M(Yy,Dpe,null),e(ld,EUo),e(ld,Gpe),e(Gpe,CUo),b(f,aNe,u),b(f,Do,u),M(Ky,Do,null),e(Do,wUo),e(Do,id),e(id,AUo),e(id,MX),e(MX,yUo),e(id,LUo),e(id,EX),e(EX,xUo),e(id,$Uo),e(Do,kUo),e(Do,Zy),e(Zy,SUo),e(Zy,Ope),e(Ope,RUo),e(Zy,PUo),e(Do,BUo),e(Do,_t),M(eL,_t,null),e(_t,IUo),e(_t,Vpe),e(Vpe,qUo),e(_t,NUo),e(_t,dd),e(dd,jUo),e(dd,Xpe),e(Xpe,DUo),e(dd,GUo),e(dd,CX),e(CX,OUo),e(dd,VUo),e(_t,XUo),M(hF,_t,null),e(Do,zUo),e(Do,io),M(oL,io,null),e(io,WUo),e(io,zpe),e(zpe,QUo),e(io,HUo),e(io,Da),e(Da,UUo),e(Da,Wpe),e(Wpe,JUo),e(Da,YUo),e(Da,Qpe),e(Qpe,KUo),e(Da,ZUo),e(Da,Hpe),e(Hpe,eJo),e(Da,oJo),e(io,rJo),e(io,Upe),e(Upe,pF),e(pF,Jpe),e(Jpe,tJo),e(pF,aJo),e(pF,wX),e(wX,nJo),e(pF,sJo),e(io,lJo),e(io,_F),e(_F,iJo),e(_F,Ype),e(Ype,dJo),e(_F,cJo),e(_F,Kpe),e(Kpe,fJo),e(io,mJo),M(uF,io,null),b(f,nNe,u),b(f,cd,u),e(cd,bF),e(bF,Zpe),M(rL,Zpe,null),e(cd,gJo),e(cd,e_e),e(e_e,hJo),b(f,sNe,u),b(f,Go,u),M(tL,Go,null),e(Go,pJo),e(Go,fd),e(fd,_Jo),e(fd,AX),e(AX,uJo),e(fd,bJo),e(fd,yX),e(yX,vJo),e(fd,FJo),e(Go,TJo),e(Go,aL),e(aL,MJo),e(aL,o_e),e(o_e,EJo),e(aL,CJo),e(Go,wJo),e(Go,ut),M(nL,ut,null),e(ut,AJo),e(ut,r_e),e(r_e,yJo),e(ut,LJo),e(ut,md),e(md,xJo),e(md,t_e),e(t_e,$Jo),e(md,kJo),e(md,LX),e(LX,SJo),e(md,RJo),e(ut,PJo),M(vF,ut,null),e(Go,BJo),e(Go,co),M(sL,co,null),e(co,IJo),e(co,a_e),e(a_e,qJo),e(co,NJo),e(co,Ga),e(Ga,jJo),e(Ga,n_e),e(n_e,DJo),e(Ga,GJo),e(Ga,s_e),e(s_e,OJo),e(Ga,VJo),e(Ga,l_e),e(l_e,XJo),e(Ga,zJo),e(co,WJo),e(co,ke),e(ke,FF),e(FF,i_e),e(i_e,QJo),e(FF,HJo),e(FF,xX),e(xX,UJo),e(FF,JJo),e(ke,YJo),e(ke,TF),e(TF,d_e),e(d_e,KJo),e(TF,ZJo),e(TF,$X),e($X,eYo),e(TF,oYo),e(ke,rYo),e(ke,MF),e(MF,c_e),e(c_e,tYo),e(MF,aYo),e(MF,kX),e(kX,nYo),e(MF,sYo),e(ke,lYo),e(ke,EF),e(EF,f_e),e(f_e,iYo),e(EF,dYo),e(EF,SX),e(SX,cYo),e(EF,fYo),e(ke,mYo),e(ke,CF),e(CF,m_e),e(m_e,gYo),e(CF,hYo),e(CF,RX),e(RX,pYo),e(CF,_Yo),e(ke,uYo),e(ke,wF),e(wF,g_e),e(g_e,bYo),e(wF,vYo),e(wF,PX),e(PX,FYo),e(wF,TYo),e(ke,MYo),e(ke,AF),e(AF,h_e),e(h_e,EYo),e(AF,CYo),e(AF,BX),e(BX,wYo),e(AF,AYo),e(ke,yYo),e(ke,yF),e(yF,p_e),e(p_e,LYo),e(yF,xYo),e(yF,IX),e(IX,$Yo),e(yF,kYo),e(ke,SYo),e(ke,LF),e(LF,__e),e(__e,RYo),e(LF,PYo),e(LF,qX),e(qX,BYo),e(LF,IYo),e(co,qYo),e(co,xF),e(xF,NYo),e(xF,u_e),e(u_e,jYo),e(xF,DYo),e(xF,b_e),e(b_e,GYo),e(co,OYo),M($F,co,null),b(f,lNe,u),b(f,gd,u),e(gd,kF),e(kF,v_e),M(lL,v_e,null),e(gd,VYo),e(gd,F_e),e(F_e,XYo),b(f,iNe,u),b(f,Oo,u),M(iL,Oo,null),e(Oo,zYo),e(Oo,hd),e(hd,WYo),e(hd,NX),e(NX,QYo),e(hd,HYo),e(hd,jX),e(jX,UYo),e(hd,JYo),e(Oo,YYo),e(Oo,dL),e(dL,KYo),e(dL,T_e),e(T_e,ZYo),e(dL,eKo),e(Oo,oKo),e(Oo,bt),M(cL,bt,null),e(bt,rKo),e(bt,M_e),e(M_e,tKo),e(bt,aKo),e(bt,pd),e(pd,nKo),e(pd,E_e),e(E_e,sKo),e(pd,lKo),e(pd,DX),e(DX,iKo),e(pd,dKo),e(bt,cKo),M(SF,bt,null),e(Oo,fKo),e(Oo,fo),M(fL,fo,null),e(fo,mKo),e(fo,C_e),e(C_e,gKo),e(fo,hKo),e(fo,Oa),e(Oa,pKo),e(Oa,w_e),e(w_e,_Ko),e(Oa,uKo),e(Oa,A_e),e(A_e,bKo),e(Oa,vKo),e(Oa,y_e),e(y_e,FKo),e(Oa,TKo),e(fo,MKo),e(fo,Kr),e(Kr,RF),e(RF,L_e),e(L_e,EKo),e(RF,CKo),e(RF,GX),e(GX,wKo),e(RF,AKo),e(Kr,yKo),e(Kr,PF),e(PF,x_e),e(x_e,LKo),e(PF,xKo),e(PF,OX),e(OX,$Ko),e(PF,kKo),e(Kr,SKo),e(Kr,BF),e(BF,$_e),e($_e,RKo),e(BF,PKo),e(BF,VX),e(VX,BKo),e(BF,IKo),e(Kr,qKo),e(Kr,IF),e(IF,k_e),e(k_e,NKo),e(IF,jKo),e(IF,XX),e(XX,DKo),e(IF,GKo),e(Kr,OKo),e(Kr,qF),e(qF,S_e),e(S_e,VKo),e(qF,XKo),e(qF,zX),e(zX,zKo),e(qF,WKo),e(fo,QKo),e(fo,NF),e(NF,HKo),e(NF,R_e),e(R_e,UKo),e(NF,JKo),e(NF,P_e),e(P_e,YKo),e(fo,KKo),M(jF,fo,null),b(f,dNe,u),b(f,_d,u),e(_d,DF),e(DF,B_e),M(mL,B_e,null),e(_d,ZKo),e(_d,I_e),e(I_e,eZo),b(f,cNe,u),b(f,Vo,u),M(gL,Vo,null),e(Vo,oZo),e(Vo,ud),e(ud,rZo),e(ud,WX),e(WX,tZo),e(ud,aZo),e(ud,QX),e(QX,nZo),e(ud,sZo),e(Vo,lZo),e(Vo,hL),e(hL,iZo),e(hL,q_e),e(q_e,dZo),e(hL,cZo),e(Vo,fZo),e(Vo,vt),M(pL,vt,null),e(vt,mZo),e(vt,N_e),e(N_e,gZo),e(vt,hZo),e(vt,bd),e(bd,pZo),e(bd,j_e),e(j_e,_Zo),e(bd,uZo),e(bd,HX),e(HX,bZo),e(bd,vZo),e(vt,FZo),M(GF,vt,null),e(Vo,TZo),e(Vo,mo),M(_L,mo,null),e(mo,MZo),e(mo,D_e),e(D_e,EZo),e(mo,CZo),e(mo,Va),e(Va,wZo),e(Va,G_e),e(G_e,AZo),e(Va,yZo),e(Va,O_e),e(O_e,LZo),e(Va,xZo),e(Va,V_e),e(V_e,$Zo),e(Va,kZo),e(mo,SZo),e(mo,Se),e(Se,OF),e(OF,X_e),e(X_e,RZo),e(OF,PZo),e(OF,UX),e(UX,BZo),e(OF,IZo),e(Se,qZo),e(Se,VF),e(VF,z_e),e(z_e,NZo),e(VF,jZo),e(VF,JX),e(JX,DZo),e(VF,GZo),e(Se,OZo),e(Se,XF),e(XF,W_e),e(W_e,VZo),e(XF,XZo),e(XF,YX),e(YX,zZo),e(XF,WZo),e(Se,QZo),e(Se,zF),e(zF,Q_e),e(Q_e,HZo),e(zF,UZo),e(zF,KX),e(KX,JZo),e(zF,YZo),e(Se,KZo),e(Se,WF),e(WF,H_e),e(H_e,ZZo),e(WF,eer),e(WF,ZX),e(ZX,oer),e(WF,rer),e(Se,ter),e(Se,QF),e(QF,U_e),e(U_e,aer),e(QF,ner),e(QF,ez),e(ez,ser),e(QF,ler),e(Se,ier),e(Se,HF),e(HF,J_e),e(J_e,der),e(HF,cer),e(HF,oz),e(oz,fer),e(HF,mer),e(Se,ger),e(Se,UF),e(UF,Y_e),e(Y_e,her),e(UF,per),e(UF,rz),e(rz,_er),e(UF,uer),e(Se,ber),e(Se,JF),e(JF,K_e),e(K_e,ver),e(JF,Fer),e(JF,tz),e(tz,Ter),e(JF,Mer),e(mo,Eer),e(mo,YF),e(YF,Cer),e(YF,Z_e),e(Z_e,wer),e(YF,Aer),e(YF,eue),e(eue,yer),e(mo,Ler),M(KF,mo,null),b(f,fNe,u),b(f,vd,u),e(vd,ZF),e(ZF,oue),M(uL,oue,null),e(vd,xer),e(vd,rue),e(rue,$er),b(f,mNe,u),b(f,Xo,u),M(bL,Xo,null),e(Xo,ker),e(Xo,Fd),e(Fd,Ser),e(Fd,az),e(az,Rer),e(Fd,Per),e(Fd,nz),e(nz,Ber),e(Fd,Ier),e(Xo,qer),e(Xo,vL),e(vL,Ner),e(vL,tue),e(tue,jer),e(vL,Der),e(Xo,Ger),e(Xo,Ft),M(FL,Ft,null),e(Ft,Oer),e(Ft,aue),e(aue,Ver),e(Ft,Xer),e(Ft,Td),e(Td,zer),e(Td,nue),e(nue,Wer),e(Td,Qer),e(Td,sz),e(sz,Her),e(Td,Uer),e(Ft,Jer),M(eT,Ft,null),e(Xo,Yer),e(Xo,go),M(TL,go,null),e(go,Ker),e(go,sue),e(sue,Zer),e(go,eor),e(go,Xa),e(Xa,oor),e(Xa,lue),e(lue,ror),e(Xa,tor),e(Xa,iue),e(iue,aor),e(Xa,nor),e(Xa,due),e(due,sor),e(Xa,lor),e(go,ior),e(go,ML),e(ML,oT),e(oT,cue),e(cue,dor),e(oT,cor),e(oT,lz),e(lz,mor),e(oT,gor),e(ML,hor),e(ML,rT),e(rT,fue),e(fue,por),e(rT,_or),e(rT,iz),e(iz,uor),e(rT,bor),e(go,vor),e(go,tT),e(tT,For),e(tT,mue),e(mue,Tor),e(tT,Mor),e(tT,gue),e(gue,Eor),e(go,Cor),M(aT,go,null),b(f,gNe,u),b(f,Md,u),e(Md,nT),e(nT,hue),M(EL,hue,null),e(Md,wor),e(Md,pue),e(pue,Aor),b(f,hNe,u),b(f,zo,u),M(CL,zo,null),e(zo,yor),e(zo,Ed),e(Ed,Lor),e(Ed,dz),e(dz,xor),e(Ed,$or),e(Ed,cz),e(cz,kor),e(Ed,Sor),e(zo,Ror),e(zo,wL),e(wL,Por),e(wL,_ue),e(_ue,Bor),e(wL,Ior),e(zo,qor),e(zo,Tt),M(AL,Tt,null),e(Tt,Nor),e(Tt,uue),e(uue,jor),e(Tt,Dor),e(Tt,Cd),e(Cd,Gor),e(Cd,bue),e(bue,Oor),e(Cd,Vor),e(Cd,fz),e(fz,Xor),e(Cd,zor),e(Tt,Wor),M(sT,Tt,null),e(zo,Qor),e(zo,ho),M(yL,ho,null),e(ho,Hor),e(ho,vue),e(vue,Uor),e(ho,Jor),e(ho,za),e(za,Yor),e(za,Fue),e(Fue,Kor),e(za,Zor),e(za,Tue),e(Tue,err),e(za,orr),e(za,Mue),e(Mue,rrr),e(za,trr),e(ho,arr),e(ho,Zr),e(Zr,lT),e(lT,Eue),e(Eue,nrr),e(lT,srr),e(lT,mz),e(mz,lrr),e(lT,irr),e(Zr,drr),e(Zr,iT),e(iT,Cue),e(Cue,crr),e(iT,frr),e(iT,gz),e(gz,mrr),e(iT,grr),e(Zr,hrr),e(Zr,dT),e(dT,wue),e(wue,prr),e(dT,_rr),e(dT,hz),e(hz,urr),e(dT,brr),e(Zr,vrr),e(Zr,cT),e(cT,Aue),e(Aue,Frr),e(cT,Trr),e(cT,pz),e(pz,Mrr),e(cT,Err),e(Zr,Crr),e(Zr,fT),e(fT,yue),e(yue,wrr),e(fT,Arr),e(fT,_z),e(_z,yrr),e(fT,Lrr),e(ho,xrr),e(ho,mT),e(mT,$rr),e(mT,Lue),e(Lue,krr),e(mT,Srr),e(mT,xue),e(xue,Rrr),e(ho,Prr),M(gT,ho,null),b(f,pNe,u),b(f,wd,u),e(wd,hT),e(hT,$ue),M(LL,$ue,null),e(wd,Brr),e(wd,kue),e(kue,Irr),b(f,_Ne,u),b(f,Wo,u),M(xL,Wo,null),e(Wo,qrr),e(Wo,Ad),e(Ad,Nrr),e(Ad,uz),e(uz,jrr),e(Ad,Drr),e(Ad,bz),e(bz,Grr),e(Ad,Orr),e(Wo,Vrr),e(Wo,$L),e($L,Xrr),e($L,Sue),e(Sue,zrr),e($L,Wrr),e(Wo,Qrr),e(Wo,Mt),M(kL,Mt,null),e(Mt,Hrr),e(Mt,Rue),e(Rue,Urr),e(Mt,Jrr),e(Mt,yd),e(yd,Yrr),e(yd,Pue),e(Pue,Krr),e(yd,Zrr),e(yd,vz),e(vz,etr),e(yd,otr),e(Mt,rtr),M(pT,Mt,null),e(Wo,ttr),e(Wo,po),M(SL,po,null),e(po,atr),e(po,Bue),e(Bue,ntr),e(po,str),e(po,Wa),e(Wa,ltr),e(Wa,Iue),e(Iue,itr),e(Wa,dtr),e(Wa,que),e(que,ctr),e(Wa,ftr),e(Wa,Nue),e(Nue,mtr),e(Wa,gtr),e(po,htr),e(po,Ld),e(Ld,_T),e(_T,jue),e(jue,ptr),e(_T,_tr),e(_T,Fz),e(Fz,utr),e(_T,btr),e(Ld,vtr),e(Ld,uT),e(uT,Due),e(Due,Ftr),e(uT,Ttr),e(uT,Tz),e(Tz,Mtr),e(uT,Etr),e(Ld,Ctr),e(Ld,bT),e(bT,Gue),e(Gue,wtr),e(bT,Atr),e(bT,Mz),e(Mz,ytr),e(bT,Ltr),e(po,xtr),e(po,vT),e(vT,$tr),e(vT,Oue),e(Oue,ktr),e(vT,Str),e(vT,Vue),e(Vue,Rtr),e(po,Ptr),M(FT,po,null),b(f,uNe,u),b(f,xd,u),e(xd,TT),e(TT,Xue),M(RL,Xue,null),e(xd,Btr),e(xd,zue),e(zue,Itr),b(f,bNe,u),b(f,Qo,u),M(PL,Qo,null),e(Qo,qtr),e(Qo,$d),e($d,Ntr),e($d,Ez),e(Ez,jtr),e($d,Dtr),e($d,Cz),e(Cz,Gtr),e($d,Otr),e(Qo,Vtr),e(Qo,BL),e(BL,Xtr),e(BL,Wue),e(Wue,ztr),e(BL,Wtr),e(Qo,Qtr),e(Qo,Et),M(IL,Et,null),e(Et,Htr),e(Et,Que),e(Que,Utr),e(Et,Jtr),e(Et,kd),e(kd,Ytr),e(kd,Hue),e(Hue,Ktr),e(kd,Ztr),e(kd,wz),e(wz,ear),e(kd,oar),e(Et,rar),M(MT,Et,null),e(Qo,tar),e(Qo,_o),M(qL,_o,null),e(_o,aar),e(_o,Uue),e(Uue,nar),e(_o,sar),e(_o,Qa),e(Qa,lar),e(Qa,Jue),e(Jue,iar),e(Qa,dar),e(Qa,Yue),e(Yue,car),e(Qa,far),e(Qa,Kue),e(Kue,mar),e(Qa,gar),e(_o,har),e(_o,NL),e(NL,ET),e(ET,Zue),e(Zue,par),e(ET,_ar),e(ET,Az),e(Az,uar),e(ET,bar),e(NL,Far),e(NL,CT),e(CT,e1e),e(e1e,Tar),e(CT,Mar),e(CT,yz),e(yz,Ear),e(CT,Car),e(_o,war),e(_o,wT),e(wT,Aar),e(wT,o1e),e(o1e,yar),e(wT,Lar),e(wT,r1e),e(r1e,xar),e(_o,$ar),M(AT,_o,null),b(f,vNe,u),b(f,Sd,u),e(Sd,yT),e(yT,t1e),M(jL,t1e,null),e(Sd,kar),e(Sd,a1e),e(a1e,Sar),b(f,FNe,u),b(f,Ho,u),M(DL,Ho,null),e(Ho,Rar),e(Ho,Rd),e(Rd,Par),e(Rd,Lz),e(Lz,Bar),e(Rd,Iar),e(Rd,xz),e(xz,qar),e(Rd,Nar),e(Ho,jar),e(Ho,GL),e(GL,Dar),e(GL,n1e),e(n1e,Gar),e(GL,Oar),e(Ho,Var),e(Ho,Ct),M(OL,Ct,null),e(Ct,Xar),e(Ct,s1e),e(s1e,zar),e(Ct,War),e(Ct,Pd),e(Pd,Qar),e(Pd,l1e),e(l1e,Har),e(Pd,Uar),e(Pd,$z),e($z,Jar),e(Pd,Yar),e(Ct,Kar),M(LT,Ct,null),e(Ho,Zar),e(Ho,uo),M(VL,uo,null),e(uo,enr),e(uo,i1e),e(i1e,onr),e(uo,rnr),e(uo,Ha),e(Ha,tnr),e(Ha,d1e),e(d1e,anr),e(Ha,nnr),e(Ha,c1e),e(c1e,snr),e(Ha,lnr),e(Ha,f1e),e(f1e,inr),e(Ha,dnr),e(uo,cnr),e(uo,m1e),e(m1e,xT),e(xT,g1e),e(g1e,fnr),e(xT,mnr),e(xT,kz),e(kz,gnr),e(xT,hnr),e(uo,pnr),e(uo,$T),e($T,_nr),e($T,h1e),e(h1e,unr),e($T,bnr),e($T,p1e),e(p1e,vnr),e(uo,Fnr),M(kT,uo,null),b(f,TNe,u),b(f,Bd,u),e(Bd,ST),e(ST,_1e),M(XL,_1e,null),e(Bd,Tnr),e(Bd,u1e),e(u1e,Mnr),b(f,MNe,u),b(f,Uo,u),M(zL,Uo,null),e(Uo,Enr),e(Uo,Id),e(Id,Cnr),e(Id,Sz),e(Sz,wnr),e(Id,Anr),e(Id,Rz),e(Rz,ynr),e(Id,Lnr),e(Uo,xnr),e(Uo,WL),e(WL,$nr),e(WL,b1e),e(b1e,knr),e(WL,Snr),e(Uo,Rnr),e(Uo,wt),M(QL,wt,null),e(wt,Pnr),e(wt,v1e),e(v1e,Bnr),e(wt,Inr),e(wt,qd),e(qd,qnr),e(qd,F1e),e(F1e,Nnr),e(qd,jnr),e(qd,Pz),e(Pz,Dnr),e(qd,Gnr),e(wt,Onr),M(RT,wt,null),e(Uo,Vnr),e(Uo,bo),M(HL,bo,null),e(bo,Xnr),e(bo,T1e),e(T1e,znr),e(bo,Wnr),e(bo,Ua),e(Ua,Qnr),e(Ua,M1e),e(M1e,Hnr),e(Ua,Unr),e(Ua,E1e),e(E1e,Jnr),e(Ua,Ynr),e(Ua,C1e),e(C1e,Knr),e(Ua,Znr),e(bo,esr),e(bo,Ja),e(Ja,PT),e(PT,w1e),e(w1e,osr),e(PT,rsr),e(PT,Bz),e(Bz,tsr),e(PT,asr),e(Ja,nsr),e(Ja,BT),e(BT,A1e),e(A1e,ssr),e(BT,lsr),e(BT,Iz),e(Iz,isr),e(BT,dsr),e(Ja,csr),e(Ja,IT),e(IT,y1e),e(y1e,fsr),e(IT,msr),e(IT,qz),e(qz,gsr),e(IT,hsr),e(Ja,psr),e(Ja,qT),e(qT,L1e),e(L1e,_sr),e(qT,usr),e(qT,Nz),e(Nz,bsr),e(qT,vsr),e(bo,Fsr),e(bo,NT),e(NT,Tsr),e(NT,x1e),e(x1e,Msr),e(NT,Esr),e(NT,$1e),e($1e,Csr),e(bo,wsr),M(jT,bo,null),b(f,ENe,u),b(f,Nd,u),e(Nd,DT),e(DT,k1e),M(UL,k1e,null),e(Nd,Asr),e(Nd,S1e),e(S1e,ysr),b(f,CNe,u),b(f,Jo,u),M(JL,Jo,null),e(Jo,Lsr),e(Jo,jd),e(jd,xsr),e(jd,jz),e(jz,$sr),e(jd,ksr),e(jd,Dz),e(Dz,Ssr),e(jd,Rsr),e(Jo,Psr),e(Jo,YL),e(YL,Bsr),e(YL,R1e),e(R1e,Isr),e(YL,qsr),e(Jo,Nsr),e(Jo,At),M(KL,At,null),e(At,jsr),e(At,P1e),e(P1e,Dsr),e(At,Gsr),e(At,Dd),e(Dd,Osr),e(Dd,B1e),e(B1e,Vsr),e(Dd,Xsr),e(Dd,Gz),e(Gz,zsr),e(Dd,Wsr),e(At,Qsr),M(GT,At,null),e(Jo,Hsr),e(Jo,vo),M(ZL,vo,null),e(vo,Usr),e(vo,I1e),e(I1e,Jsr),e(vo,Ysr),e(vo,Ya),e(Ya,Ksr),e(Ya,q1e),e(q1e,Zsr),e(Ya,elr),e(Ya,N1e),e(N1e,olr),e(Ya,rlr),e(Ya,j1e),e(j1e,tlr),e(Ya,alr),e(vo,nlr),e(vo,D1e),e(D1e,OT),e(OT,G1e),e(G1e,slr),e(OT,llr),e(OT,Oz),e(Oz,ilr),e(OT,dlr),e(vo,clr),e(vo,VT),e(VT,flr),e(VT,O1e),e(O1e,mlr),e(VT,glr),e(VT,V1e),e(V1e,hlr),e(vo,plr),M(XT,vo,null),b(f,wNe,u),b(f,Gd,u),e(Gd,zT),e(zT,X1e),M(e8,X1e,null),e(Gd,_lr),e(Gd,z1e),e(z1e,ulr),b(f,ANe,u),b(f,Yo,u),M(o8,Yo,null),e(Yo,blr),e(Yo,Od),e(Od,vlr),e(Od,Vz),e(Vz,Flr),e(Od,Tlr),e(Od,Xz),e(Xz,Mlr),e(Od,Elr),e(Yo,Clr),e(Yo,r8),e(r8,wlr),e(r8,W1e),e(W1e,Alr),e(r8,ylr),e(Yo,Llr),e(Yo,yt),M(t8,yt,null),e(yt,xlr),e(yt,Q1e),e(Q1e,$lr),e(yt,klr),e(yt,Vd),e(Vd,Slr),e(Vd,H1e),e(H1e,Rlr),e(Vd,Plr),e(Vd,zz),e(zz,Blr),e(Vd,Ilr),e(yt,qlr),M(WT,yt,null),e(Yo,Nlr),e(Yo,wr),M(a8,wr,null),e(wr,jlr),e(wr,U1e),e(U1e,Dlr),e(wr,Glr),e(wr,Ka),e(Ka,Olr),e(Ka,J1e),e(J1e,Vlr),e(Ka,Xlr),e(Ka,Y1e),e(Y1e,zlr),e(Ka,Wlr),e(Ka,K1e),e(K1e,Qlr),e(Ka,Hlr),e(wr,Ulr),e(wr,N),e(N,QT),e(QT,Z1e),e(Z1e,Jlr),e(QT,Ylr),e(QT,Wz),e(Wz,Klr),e(QT,Zlr),e(N,eir),e(N,HT),e(HT,e3e),e(e3e,oir),e(HT,rir),e(HT,Qz),e(Qz,tir),e(HT,air),e(N,nir),e(N,UT),e(UT,o3e),e(o3e,sir),e(UT,lir),e(UT,Hz),e(Hz,iir),e(UT,dir),e(N,cir),e(N,JT),e(JT,r3e),e(r3e,fir),e(JT,mir),e(JT,Uz),e(Uz,gir),e(JT,hir),e(N,pir),e(N,YT),e(YT,t3e),e(t3e,_ir),e(YT,uir),e(YT,Jz),e(Jz,bir),e(YT,vir),e(N,Fir),e(N,KT),e(KT,a3e),e(a3e,Tir),e(KT,Mir),e(KT,Yz),e(Yz,Eir),e(KT,Cir),e(N,wir),e(N,ZT),e(ZT,n3e),e(n3e,Air),e(ZT,yir),e(ZT,Kz),e(Kz,Lir),e(ZT,xir),e(N,$ir),e(N,e7),e(e7,s3e),e(s3e,kir),e(e7,Sir),e(e7,Zz),e(Zz,Rir),e(e7,Pir),e(N,Bir),e(N,o7),e(o7,l3e),e(l3e,Iir),e(o7,qir),e(o7,eW),e(eW,Nir),e(o7,jir),e(N,Dir),e(N,r7),e(r7,i3e),e(i3e,Gir),e(r7,Oir),e(r7,oW),e(oW,Vir),e(r7,Xir),e(N,zir),e(N,t7),e(t7,d3e),e(d3e,Wir),e(t7,Qir),e(t7,rW),e(rW,Hir),e(t7,Uir),e(N,Jir),e(N,a7),e(a7,c3e),e(c3e,Yir),e(a7,Kir),e(a7,tW),e(tW,Zir),e(a7,edr),e(N,odr),e(N,n7),e(n7,f3e),e(f3e,rdr),e(n7,tdr),e(n7,aW),e(aW,adr),e(n7,ndr),e(N,sdr),e(N,s7),e(s7,m3e),e(m3e,ldr),e(s7,idr),e(s7,nW),e(nW,ddr),e(s7,cdr),e(N,fdr),e(N,l7),e(l7,g3e),e(g3e,mdr),e(l7,gdr),e(l7,sW),e(sW,hdr),e(l7,pdr),e(N,_dr),e(N,i7),e(i7,h3e),e(h3e,udr),e(i7,bdr),e(i7,lW),e(lW,vdr),e(i7,Fdr),e(N,Tdr),e(N,d7),e(d7,p3e),e(p3e,Mdr),e(d7,Edr),e(d7,iW),e(iW,Cdr),e(d7,wdr),e(N,Adr),e(N,Is),e(Is,_3e),e(_3e,ydr),e(Is,Ldr),e(Is,dW),e(dW,xdr),e(Is,$dr),e(Is,cW),e(cW,kdr),e(Is,Sdr),e(N,Rdr),e(N,c7),e(c7,u3e),e(u3e,Pdr),e(c7,Bdr),e(c7,fW),e(fW,Idr),e(c7,qdr),e(N,Ndr),e(N,f7),e(f7,b3e),e(b3e,jdr),e(f7,Ddr),e(f7,mW),e(mW,Gdr),e(f7,Odr),e(N,Vdr),e(N,m7),e(m7,v3e),e(v3e,Xdr),e(m7,zdr),e(m7,gW),e(gW,Wdr),e(m7,Qdr),e(N,Hdr),e(N,g7),e(g7,F3e),e(F3e,Udr),e(g7,Jdr),e(g7,hW),e(hW,Ydr),e(g7,Kdr),e(N,Zdr),e(N,h7),e(h7,T3e),e(T3e,ecr),e(h7,ocr),e(h7,pW),e(pW,rcr),e(h7,tcr),e(N,acr),e(N,p7),e(p7,M3e),e(M3e,ncr),e(p7,scr),e(p7,_W),e(_W,lcr),e(p7,icr),e(N,dcr),e(N,_7),e(_7,E3e),e(E3e,ccr),e(_7,fcr),e(_7,uW),e(uW,mcr),e(_7,gcr),e(N,hcr),e(N,u7),e(u7,C3e),e(C3e,pcr),e(u7,_cr),e(u7,bW),e(bW,ucr),e(u7,bcr),e(N,vcr),e(N,b7),e(b7,w3e),e(w3e,Fcr),e(b7,Tcr),e(b7,vW),e(vW,Mcr),e(b7,Ecr),e(N,Ccr),e(N,v7),e(v7,A3e),e(A3e,wcr),e(v7,Acr),e(v7,FW),e(FW,ycr),e(v7,Lcr),e(N,xcr),e(N,F7),e(F7,y3e),e(y3e,$cr),e(F7,kcr),e(F7,TW),e(TW,Scr),e(F7,Rcr),e(N,Pcr),e(N,T7),e(T7,L3e),e(L3e,Bcr),e(T7,Icr),e(T7,MW),e(MW,qcr),e(T7,Ncr),e(N,jcr),e(N,M7),e(M7,x3e),e(x3e,Dcr),e(M7,Gcr),e(M7,EW),e(EW,Ocr),e(M7,Vcr),e(N,Xcr),e(N,E7),e(E7,$3e),e($3e,zcr),e(E7,Wcr),e(E7,CW),e(CW,Qcr),e(E7,Hcr),e(N,Ucr),e(N,C7),e(C7,k3e),e(k3e,Jcr),e(C7,Ycr),e(C7,wW),e(wW,Kcr),e(C7,Zcr),e(N,efr),e(N,w7),e(w7,S3e),e(S3e,ofr),e(w7,rfr),e(w7,AW),e(AW,tfr),e(w7,afr),e(N,nfr),e(N,A7),e(A7,R3e),e(R3e,sfr),e(A7,lfr),e(A7,yW),e(yW,ifr),e(A7,dfr),e(N,cfr),e(N,y7),e(y7,P3e),e(P3e,ffr),e(y7,mfr),e(y7,LW),e(LW,gfr),e(y7,hfr),e(N,pfr),e(N,L7),e(L7,B3e),e(B3e,_fr),e(L7,ufr),e(L7,xW),e(xW,bfr),e(L7,vfr),e(N,Ffr),e(N,x7),e(x7,I3e),e(I3e,Tfr),e(x7,Mfr),e(x7,$W),e($W,Efr),e(x7,Cfr),e(N,wfr),e(N,$7),e($7,q3e),e(q3e,Afr),e($7,yfr),e($7,kW),e(kW,Lfr),e($7,xfr),e(N,$fr),e(N,k7),e(k7,N3e),e(N3e,kfr),e(k7,Sfr),e(k7,SW),e(SW,Rfr),e(k7,Pfr),e(N,Bfr),e(N,S7),e(S7,j3e),e(j3e,Ifr),e(S7,qfr),e(S7,RW),e(RW,Nfr),e(S7,jfr),e(N,Dfr),e(N,R7),e(R7,D3e),e(D3e,Gfr),e(R7,Ofr),e(R7,PW),e(PW,Vfr),e(R7,Xfr),e(N,zfr),e(N,P7),e(P7,G3e),e(G3e,Wfr),e(P7,Qfr),e(P7,BW),e(BW,Hfr),e(P7,Ufr),e(N,Jfr),e(N,B7),e(B7,O3e),e(O3e,Yfr),e(B7,Kfr),e(B7,IW),e(IW,Zfr),e(B7,emr),e(N,omr),e(N,I7),e(I7,V3e),e(V3e,rmr),e(I7,tmr),e(I7,qW),e(qW,amr),e(I7,nmr),e(N,smr),e(N,q7),e(q7,X3e),e(X3e,lmr),e(q7,imr),e(q7,NW),e(NW,dmr),e(q7,cmr),e(wr,fmr),M(N7,wr,null),b(f,yNe,u),b(f,Xd,u),e(Xd,j7),e(j7,z3e),M(n8,z3e,null),e(Xd,mmr),e(Xd,W3e),e(W3e,gmr),b(f,LNe,u),b(f,Ko,u),M(s8,Ko,null),e(Ko,hmr),e(Ko,zd),e(zd,pmr),e(zd,jW),e(jW,_mr),e(zd,umr),e(zd,DW),e(DW,bmr),e(zd,vmr),e(Ko,Fmr),e(Ko,l8),e(l8,Tmr),e(l8,Q3e),e(Q3e,Mmr),e(l8,Emr),e(Ko,Cmr),e(Ko,Lt),M(i8,Lt,null),e(Lt,wmr),e(Lt,H3e),e(H3e,Amr),e(Lt,ymr),e(Lt,Wd),e(Wd,Lmr),e(Wd,U3e),e(U3e,xmr),e(Wd,$mr),e(Wd,GW),e(GW,kmr),e(Wd,Smr),e(Lt,Rmr),M(D7,Lt,null),e(Ko,Pmr),e(Ko,Ar),M(d8,Ar,null),e(Ar,Bmr),e(Ar,J3e),e(J3e,Imr),e(Ar,qmr),e(Ar,Za),e(Za,Nmr),e(Za,Y3e),e(Y3e,jmr),e(Za,Dmr),e(Za,K3e),e(K3e,Gmr),e(Za,Omr),e(Za,Z3e),e(Z3e,Vmr),e(Za,Xmr),e(Ar,zmr),e(Ar,se),e(se,G7),e(G7,ebe),e(ebe,Wmr),e(G7,Qmr),e(G7,OW),e(OW,Hmr),e(G7,Umr),e(se,Jmr),e(se,O7),e(O7,obe),e(obe,Ymr),e(O7,Kmr),e(O7,VW),e(VW,Zmr),e(O7,egr),e(se,ogr),e(se,V7),e(V7,rbe),e(rbe,rgr),e(V7,tgr),e(V7,XW),e(XW,agr),e(V7,ngr),e(se,sgr),e(se,X7),e(X7,tbe),e(tbe,lgr),e(X7,igr),e(X7,zW),e(zW,dgr),e(X7,cgr),e(se,fgr),e(se,z7),e(z7,abe),e(abe,mgr),e(z7,ggr),e(z7,WW),e(WW,hgr),e(z7,pgr),e(se,_gr),e(se,W7),e(W7,nbe),e(nbe,ugr),e(W7,bgr),e(W7,QW),e(QW,vgr),e(W7,Fgr),e(se,Tgr),e(se,Q7),e(Q7,sbe),e(sbe,Mgr),e(Q7,Egr),e(Q7,HW),e(HW,Cgr),e(Q7,wgr),e(se,Agr),e(se,H7),e(H7,lbe),e(lbe,ygr),e(H7,Lgr),e(H7,UW),e(UW,xgr),e(H7,$gr),e(se,kgr),e(se,U7),e(U7,ibe),e(ibe,Sgr),e(U7,Rgr),e(U7,JW),e(JW,Pgr),e(U7,Bgr),e(se,Igr),e(se,J7),e(J7,dbe),e(dbe,qgr),e(J7,Ngr),e(J7,YW),e(YW,jgr),e(J7,Dgr),e(se,Ggr),e(se,Y7),e(Y7,cbe),e(cbe,Ogr),e(Y7,Vgr),e(Y7,KW),e(KW,Xgr),e(Y7,zgr),e(se,Wgr),e(se,K7),e(K7,fbe),e(fbe,Qgr),e(K7,Hgr),e(K7,ZW),e(ZW,Ugr),e(K7,Jgr),e(se,Ygr),e(se,Z7),e(Z7,mbe),e(mbe,Kgr),e(Z7,Zgr),e(Z7,eQ),e(eQ,ehr),e(Z7,ohr),e(se,rhr),e(se,eM),e(eM,gbe),e(gbe,thr),e(eM,ahr),e(eM,oQ),e(oQ,nhr),e(eM,shr),e(se,lhr),e(se,oM),e(oM,hbe),e(hbe,ihr),e(oM,dhr),e(oM,rQ),e(rQ,chr),e(oM,fhr),e(se,mhr),e(se,rM),e(rM,pbe),e(pbe,ghr),e(rM,hhr),e(rM,tQ),e(tQ,phr),e(rM,_hr),e(se,uhr),e(se,tM),e(tM,_be),e(_be,bhr),e(tM,vhr),e(tM,aQ),e(aQ,Fhr),e(tM,Thr),e(se,Mhr),e(se,aM),e(aM,ube),e(ube,Ehr),e(aM,Chr),e(aM,nQ),e(nQ,whr),e(aM,Ahr),e(se,yhr),e(se,nM),e(nM,bbe),e(bbe,Lhr),e(nM,xhr),e(nM,sQ),e(sQ,$hr),e(nM,khr),e(se,Shr),e(se,sM),e(sM,vbe),e(vbe,Rhr),e(sM,Phr),e(sM,lQ),e(lQ,Bhr),e(sM,Ihr),e(se,qhr),e(se,lM),e(lM,Fbe),e(Fbe,Nhr),e(lM,jhr),e(lM,iQ),e(iQ,Dhr),e(lM,Ghr),e(se,Ohr),e(se,iM),e(iM,Tbe),e(Tbe,Vhr),e(iM,Xhr),e(iM,dQ),e(dQ,zhr),e(iM,Whr),e(se,Qhr),e(se,dM),e(dM,Mbe),e(Mbe,Hhr),e(dM,Uhr),e(dM,cQ),e(cQ,Jhr),e(dM,Yhr),e(Ar,Khr),M(cM,Ar,null),b(f,xNe,u),b(f,Qd,u),e(Qd,fM),e(fM,Ebe),M(c8,Ebe,null),e(Qd,Zhr),e(Qd,Cbe),e(Cbe,epr),b(f,$Ne,u),b(f,Zo,u),M(f8,Zo,null),e(Zo,opr),e(Zo,Hd),e(Hd,rpr),e(Hd,fQ),e(fQ,tpr),e(Hd,apr),e(Hd,mQ),e(mQ,npr),e(Hd,spr),e(Zo,lpr),e(Zo,m8),e(m8,ipr),e(m8,wbe),e(wbe,dpr),e(m8,cpr),e(Zo,fpr),e(Zo,xt),M(g8,xt,null),e(xt,mpr),e(xt,Abe),e(Abe,gpr),e(xt,hpr),e(xt,Ud),e(Ud,ppr),e(Ud,ybe),e(ybe,_pr),e(Ud,upr),e(Ud,gQ),e(gQ,bpr),e(Ud,vpr),e(xt,Fpr),M(mM,xt,null),e(Zo,Tpr),e(Zo,yr),M(h8,yr,null),e(yr,Mpr),e(yr,Lbe),e(Lbe,Epr),e(yr,Cpr),e(yr,en),e(en,wpr),e(en,xbe),e(xbe,Apr),e(en,ypr),e(en,$be),e($be,Lpr),e(en,xpr),e(en,kbe),e(kbe,$pr),e(en,kpr),e(yr,Spr),e(yr,Me),e(Me,gM),e(gM,Sbe),e(Sbe,Rpr),e(gM,Ppr),e(gM,hQ),e(hQ,Bpr),e(gM,Ipr),e(Me,qpr),e(Me,hM),e(hM,Rbe),e(Rbe,Npr),e(hM,jpr),e(hM,pQ),e(pQ,Dpr),e(hM,Gpr),e(Me,Opr),e(Me,pM),e(pM,Pbe),e(Pbe,Vpr),e(pM,Xpr),e(pM,_Q),e(_Q,zpr),e(pM,Wpr),e(Me,Qpr),e(Me,_M),e(_M,Bbe),e(Bbe,Hpr),e(_M,Upr),e(_M,uQ),e(uQ,Jpr),e(_M,Ypr),e(Me,Kpr),e(Me,uM),e(uM,Ibe),e(Ibe,Zpr),e(uM,e_r),e(uM,bQ),e(bQ,o_r),e(uM,r_r),e(Me,t_r),e(Me,bM),e(bM,qbe),e(qbe,a_r),e(bM,n_r),e(bM,vQ),e(vQ,s_r),e(bM,l_r),e(Me,i_r),e(Me,vM),e(vM,Nbe),e(Nbe,d_r),e(vM,c_r),e(vM,FQ),e(FQ,f_r),e(vM,m_r),e(Me,g_r),e(Me,FM),e(FM,jbe),e(jbe,h_r),e(FM,p_r),e(FM,TQ),e(TQ,__r),e(FM,u_r),e(Me,b_r),e(Me,TM),e(TM,Dbe),e(Dbe,v_r),e(TM,F_r),e(TM,MQ),e(MQ,T_r),e(TM,M_r),e(Me,E_r),e(Me,MM),e(MM,Gbe),e(Gbe,C_r),e(MM,w_r),e(MM,EQ),e(EQ,A_r),e(MM,y_r),e(Me,L_r),e(Me,EM),e(EM,Obe),e(Obe,x_r),e(EM,$_r),e(EM,CQ),e(CQ,k_r),e(EM,S_r),e(Me,R_r),e(Me,CM),e(CM,Vbe),e(Vbe,P_r),e(CM,B_r),e(CM,wQ),e(wQ,I_r),e(CM,q_r),e(yr,N_r),M(wM,yr,null),b(f,kNe,u),b(f,Jd,u),e(Jd,AM),e(AM,Xbe),M(p8,Xbe,null),e(Jd,j_r),e(Jd,zbe),e(zbe,D_r),b(f,SNe,u),b(f,er,u),M(_8,er,null),e(er,G_r),e(er,Yd),e(Yd,O_r),e(Yd,AQ),e(AQ,V_r),e(Yd,X_r),e(Yd,yQ),e(yQ,z_r),e(Yd,W_r),e(er,Q_r),e(er,u8),e(u8,H_r),e(u8,Wbe),e(Wbe,U_r),e(u8,J_r),e(er,Y_r),e(er,$t),M(b8,$t,null),e($t,K_r),e($t,Qbe),e(Qbe,Z_r),e($t,eur),e($t,Kd),e(Kd,our),e(Kd,Hbe),e(Hbe,rur),e(Kd,tur),e(Kd,LQ),e(LQ,aur),e(Kd,nur),e($t,sur),M(yM,$t,null),e(er,lur),e(er,Lr),M(v8,Lr,null),e(Lr,iur),e(Lr,Ube),e(Ube,dur),e(Lr,cur),e(Lr,on),e(on,fur),e(on,Jbe),e(Jbe,mur),e(on,gur),e(on,Ybe),e(Ybe,hur),e(on,pur),e(on,Kbe),e(Kbe,_ur),e(on,uur),e(Lr,bur),e(Lr,rn),e(rn,LM),e(LM,Zbe),e(Zbe,vur),e(LM,Fur),e(LM,xQ),e(xQ,Tur),e(LM,Mur),e(rn,Eur),e(rn,xM),e(xM,e2e),e(e2e,Cur),e(xM,wur),e(xM,$Q),e($Q,Aur),e(xM,yur),e(rn,Lur),e(rn,$M),e($M,o2e),e(o2e,xur),e($M,$ur),e($M,kQ),e(kQ,kur),e($M,Sur),e(rn,Rur),e(rn,kM),e(kM,r2e),e(r2e,Pur),e(kM,Bur),e(kM,SQ),e(SQ,Iur),e(kM,qur),e(Lr,Nur),M(SM,Lr,null),b(f,RNe,u),b(f,Zd,u),e(Zd,RM),e(RM,t2e),M(F8,t2e,null),e(Zd,jur),e(Zd,a2e),e(a2e,Dur),b(f,PNe,u),b(f,or,u),M(T8,or,null),e(or,Gur),e(or,ec),e(ec,Our),e(ec,RQ),e(RQ,Vur),e(ec,Xur),e(ec,PQ),e(PQ,zur),e(ec,Wur),e(or,Qur),e(or,M8),e(M8,Hur),e(M8,n2e),e(n2e,Uur),e(M8,Jur),e(or,Yur),e(or,kt),M(E8,kt,null),e(kt,Kur),e(kt,s2e),e(s2e,Zur),e(kt,e1r),e(kt,oc),e(oc,o1r),e(oc,l2e),e(l2e,r1r),e(oc,t1r),e(oc,BQ),e(BQ,a1r),e(oc,n1r),e(kt,s1r),M(PM,kt,null),e(or,l1r),e(or,xr),M(C8,xr,null),e(xr,i1r),e(xr,i2e),e(i2e,d1r),e(xr,c1r),e(xr,tn),e(tn,f1r),e(tn,d2e),e(d2e,m1r),e(tn,g1r),e(tn,c2e),e(c2e,h1r),e(tn,p1r),e(tn,f2e),e(f2e,_1r),e(tn,u1r),e(xr,b1r),e(xr,ie),e(ie,BM),e(BM,m2e),e(m2e,v1r),e(BM,F1r),e(BM,IQ),e(IQ,T1r),e(BM,M1r),e(ie,E1r),e(ie,IM),e(IM,g2e),e(g2e,C1r),e(IM,w1r),e(IM,qQ),e(qQ,A1r),e(IM,y1r),e(ie,L1r),e(ie,qM),e(qM,h2e),e(h2e,x1r),e(qM,$1r),e(qM,NQ),e(NQ,k1r),e(qM,S1r),e(ie,R1r),e(ie,NM),e(NM,p2e),e(p2e,P1r),e(NM,B1r),e(NM,jQ),e(jQ,I1r),e(NM,q1r),e(ie,N1r),e(ie,jM),e(jM,_2e),e(_2e,j1r),e(jM,D1r),e(jM,DQ),e(DQ,G1r),e(jM,O1r),e(ie,V1r),e(ie,DM),e(DM,u2e),e(u2e,X1r),e(DM,z1r),e(DM,GQ),e(GQ,W1r),e(DM,Q1r),e(ie,H1r),e(ie,GM),e(GM,b2e),e(b2e,U1r),e(GM,J1r),e(GM,OQ),e(OQ,Y1r),e(GM,K1r),e(ie,Z1r),e(ie,OM),e(OM,v2e),e(v2e,e3r),e(OM,o3r),e(OM,VQ),e(VQ,r3r),e(OM,t3r),e(ie,a3r),e(ie,VM),e(VM,F2e),e(F2e,n3r),e(VM,s3r),e(VM,XQ),e(XQ,l3r),e(VM,i3r),e(ie,d3r),e(ie,XM),e(XM,T2e),e(T2e,c3r),e(XM,f3r),e(XM,zQ),e(zQ,m3r),e(XM,g3r),e(ie,h3r),e(ie,zM),e(zM,M2e),e(M2e,p3r),e(zM,_3r),e(zM,WQ),e(WQ,u3r),e(zM,b3r),e(ie,v3r),e(ie,WM),e(WM,E2e),e(E2e,F3r),e(WM,T3r),e(WM,QQ),e(QQ,M3r),e(WM,E3r),e(ie,C3r),e(ie,QM),e(QM,C2e),e(C2e,w3r),e(QM,A3r),e(QM,HQ),e(HQ,y3r),e(QM,L3r),e(ie,x3r),e(ie,HM),e(HM,w2e),e(w2e,$3r),e(HM,k3r),e(HM,UQ),e(UQ,S3r),e(HM,R3r),e(ie,P3r),e(ie,UM),e(UM,A2e),e(A2e,B3r),e(UM,I3r),e(UM,JQ),e(JQ,q3r),e(UM,N3r),e(ie,j3r),e(ie,JM),e(JM,y2e),e(y2e,D3r),e(JM,G3r),e(JM,YQ),e(YQ,O3r),e(JM,V3r),e(ie,X3r),e(ie,YM),e(YM,L2e),e(L2e,z3r),e(YM,W3r),e(YM,KQ),e(KQ,Q3r),e(YM,H3r),e(ie,U3r),e(ie,KM),e(KM,x2e),e(x2e,J3r),e(KM,Y3r),e(KM,ZQ),e(ZQ,K3r),e(KM,Z3r),e(ie,ebr),e(ie,ZM),e(ZM,$2e),e($2e,obr),e(ZM,rbr),e(ZM,eH),e(eH,tbr),e(ZM,abr),e(ie,nbr),e(ie,e4),e(e4,k2e),e(k2e,sbr),e(e4,lbr),e(e4,oH),e(oH,ibr),e(e4,dbr),e(xr,cbr),M(o4,xr,null),b(f,BNe,u),b(f,rc,u),e(rc,r4),e(r4,S2e),M(w8,S2e,null),e(rc,fbr),e(rc,R2e),e(R2e,mbr),b(f,INe,u),b(f,rr,u),M(A8,rr,null),e(rr,gbr),e(rr,tc),e(tc,hbr),e(tc,rH),e(rH,pbr),e(tc,_br),e(tc,tH),e(tH,ubr),e(tc,bbr),e(rr,vbr),e(rr,y8),e(y8,Fbr),e(y8,P2e),e(P2e,Tbr),e(y8,Mbr),e(rr,Ebr),e(rr,St),M(L8,St,null),e(St,Cbr),e(St,B2e),e(B2e,wbr),e(St,Abr),e(St,ac),e(ac,ybr),e(ac,I2e),e(I2e,Lbr),e(ac,xbr),e(ac,aH),e(aH,$br),e(ac,kbr),e(St,Sbr),M(t4,St,null),e(rr,Rbr),e(rr,$r),M(x8,$r,null),e($r,Pbr),e($r,q2e),e(q2e,Bbr),e($r,Ibr),e($r,an),e(an,qbr),e(an,N2e),e(N2e,Nbr),e(an,jbr),e(an,j2e),e(j2e,Dbr),e(an,Gbr),e(an,D2e),e(D2e,Obr),e(an,Vbr),e($r,Xbr),e($r,ye),e(ye,a4),e(a4,G2e),e(G2e,zbr),e(a4,Wbr),e(a4,nH),e(nH,Qbr),e(a4,Hbr),e(ye,Ubr),e(ye,n4),e(n4,O2e),e(O2e,Jbr),e(n4,Ybr),e(n4,sH),e(sH,Kbr),e(n4,Zbr),e(ye,e2r),e(ye,s4),e(s4,V2e),e(V2e,o2r),e(s4,r2r),e(s4,lH),e(lH,t2r),e(s4,a2r),e(ye,n2r),e(ye,l4),e(l4,X2e),e(X2e,s2r),e(l4,l2r),e(l4,iH),e(iH,i2r),e(l4,d2r),e(ye,c2r),e(ye,i4),e(i4,z2e),e(z2e,f2r),e(i4,m2r),e(i4,dH),e(dH,g2r),e(i4,h2r),e(ye,p2r),e(ye,d4),e(d4,W2e),e(W2e,_2r),e(d4,u2r),e(d4,cH),e(cH,b2r),e(d4,v2r),e(ye,F2r),e(ye,c4),e(c4,Q2e),e(Q2e,T2r),e(c4,M2r),e(c4,fH),e(fH,E2r),e(c4,C2r),e(ye,w2r),e(ye,f4),e(f4,H2e),e(H2e,A2r),e(f4,y2r),e(f4,mH),e(mH,L2r),e(f4,x2r),e(ye,$2r),e(ye,m4),e(m4,U2e),e(U2e,k2r),e(m4,S2r),e(m4,gH),e(gH,R2r),e(m4,P2r),e(ye,B2r),e(ye,g4),e(g4,J2e),e(J2e,I2r),e(g4,q2r),e(g4,hH),e(hH,N2r),e(g4,j2r),e($r,D2r),M(h4,$r,null),b(f,qNe,u),b(f,nc,u),e(nc,p4),e(p4,Y2e),M($8,Y2e,null),e(nc,G2r),e(nc,K2e),e(K2e,O2r),b(f,NNe,u),b(f,tr,u),M(k8,tr,null),e(tr,V2r),e(tr,sc),e(sc,X2r),e(sc,pH),e(pH,z2r),e(sc,W2r),e(sc,_H),e(_H,Q2r),e(sc,H2r),e(tr,U2r),e(tr,S8),e(S8,J2r),e(S8,Z2e),e(Z2e,Y2r),e(S8,K2r),e(tr,Z2r),e(tr,Rt),M(R8,Rt,null),e(Rt,evr),e(Rt,eve),e(eve,ovr),e(Rt,rvr),e(Rt,lc),e(lc,tvr),e(lc,ove),e(ove,avr),e(lc,nvr),e(lc,uH),e(uH,svr),e(lc,lvr),e(Rt,ivr),M(_4,Rt,null),e(tr,dvr),e(tr,kr),M(P8,kr,null),e(kr,cvr),e(kr,rve),e(rve,fvr),e(kr,mvr),e(kr,nn),e(nn,gvr),e(nn,tve),e(tve,hvr),e(nn,pvr),e(nn,ave),e(ave,_vr),e(nn,uvr),e(nn,nve),e(nve,bvr),e(nn,vvr),e(kr,Fvr),e(kr,oe),e(oe,u4),e(u4,sve),e(sve,Tvr),e(u4,Mvr),e(u4,bH),e(bH,Evr),e(u4,Cvr),e(oe,wvr),e(oe,b4),e(b4,lve),e(lve,Avr),e(b4,yvr),e(b4,vH),e(vH,Lvr),e(b4,xvr),e(oe,$vr),e(oe,v4),e(v4,ive),e(ive,kvr),e(v4,Svr),e(v4,FH),e(FH,Rvr),e(v4,Pvr),e(oe,Bvr),e(oe,F4),e(F4,dve),e(dve,Ivr),e(F4,qvr),e(F4,TH),e(TH,Nvr),e(F4,jvr),e(oe,Dvr),e(oe,T4),e(T4,cve),e(cve,Gvr),e(T4,Ovr),e(T4,MH),e(MH,Vvr),e(T4,Xvr),e(oe,zvr),e(oe,M4),e(M4,fve),e(fve,Wvr),e(M4,Qvr),e(M4,EH),e(EH,Hvr),e(M4,Uvr),e(oe,Jvr),e(oe,E4),e(E4,mve),e(mve,Yvr),e(E4,Kvr),e(E4,CH),e(CH,Zvr),e(E4,eFr),e(oe,oFr),e(oe,C4),e(C4,gve),e(gve,rFr),e(C4,tFr),e(C4,wH),e(wH,aFr),e(C4,nFr),e(oe,sFr),e(oe,w4),e(w4,hve),e(hve,lFr),e(w4,iFr),e(w4,AH),e(AH,dFr),e(w4,cFr),e(oe,fFr),e(oe,A4),e(A4,pve),e(pve,mFr),e(A4,gFr),e(A4,yH),e(yH,hFr),e(A4,pFr),e(oe,_Fr),e(oe,y4),e(y4,_ve),e(_ve,uFr),e(y4,bFr),e(y4,LH),e(LH,vFr),e(y4,FFr),e(oe,TFr),e(oe,L4),e(L4,uve),e(uve,MFr),e(L4,EFr),e(L4,xH),e(xH,CFr),e(L4,wFr),e(oe,AFr),e(oe,x4),e(x4,bve),e(bve,yFr),e(x4,LFr),e(x4,$H),e($H,xFr),e(x4,$Fr),e(oe,kFr),e(oe,$4),e($4,vve),e(vve,SFr),e($4,RFr),e($4,kH),e(kH,PFr),e($4,BFr),e(oe,IFr),e(oe,k4),e(k4,Fve),e(Fve,qFr),e(k4,NFr),e(k4,SH),e(SH,jFr),e(k4,DFr),e(oe,GFr),e(oe,S4),e(S4,Tve),e(Tve,OFr),e(S4,VFr),e(S4,RH),e(RH,XFr),e(S4,zFr),e(oe,WFr),e(oe,R4),e(R4,Mve),e(Mve,QFr),e(R4,HFr),e(R4,PH),e(PH,UFr),e(R4,JFr),e(oe,YFr),e(oe,P4),e(P4,Eve),e(Eve,KFr),e(P4,ZFr),e(P4,BH),e(BH,eTr),e(P4,oTr),e(oe,rTr),e(oe,B4),e(B4,Cve),e(Cve,tTr),e(B4,aTr),e(B4,IH),e(IH,nTr),e(B4,sTr),e(oe,lTr),e(oe,I4),e(I4,wve),e(wve,iTr),e(I4,dTr),e(I4,qH),e(qH,cTr),e(I4,fTr),e(oe,mTr),e(oe,q4),e(q4,Ave),e(Ave,gTr),e(q4,hTr),e(q4,NH),e(NH,pTr),e(q4,_Tr),e(oe,uTr),e(oe,N4),e(N4,yve),e(yve,bTr),e(N4,vTr),e(N4,jH),e(jH,FTr),e(N4,TTr),e(oe,MTr),e(oe,j4),e(j4,Lve),e(Lve,ETr),e(j4,CTr),e(j4,DH),e(DH,wTr),e(j4,ATr),e(oe,yTr),e(oe,D4),e(D4,xve),e(xve,LTr),e(D4,xTr),e(D4,GH),e(GH,$Tr),e(D4,kTr),e(oe,STr),e(oe,G4),e(G4,$ve),e($ve,RTr),e(G4,PTr),e(G4,OH),e(OH,BTr),e(G4,ITr),e(oe,qTr),e(oe,O4),e(O4,kve),e(kve,NTr),e(O4,jTr),e(O4,VH),e(VH,DTr),e(O4,GTr),e(kr,OTr),M(V4,kr,null),b(f,jNe,u),b(f,ic,u),e(ic,X4),e(X4,Sve),M(B8,Sve,null),e(ic,VTr),e(ic,Rve),e(Rve,XTr),b(f,DNe,u),b(f,ar,u),M(I8,ar,null),e(ar,zTr),e(ar,dc),e(dc,WTr),e(dc,XH),e(XH,QTr),e(dc,HTr),e(dc,zH),e(zH,UTr),e(dc,JTr),e(ar,YTr),e(ar,q8),e(q8,KTr),e(q8,Pve),e(Pve,ZTr),e(q8,e7r),e(ar,o7r),e(ar,Pt),M(N8,Pt,null),e(Pt,r7r),e(Pt,Bve),e(Bve,t7r),e(Pt,a7r),e(Pt,cc),e(cc,n7r),e(cc,Ive),e(Ive,s7r),e(cc,l7r),e(cc,WH),e(WH,i7r),e(cc,d7r),e(Pt,c7r),M(z4,Pt,null),e(ar,f7r),e(ar,Sr),M(j8,Sr,null),e(Sr,m7r),e(Sr,qve),e(qve,g7r),e(Sr,h7r),e(Sr,sn),e(sn,p7r),e(sn,Nve),e(Nve,_7r),e(sn,u7r),e(sn,jve),e(jve,b7r),e(sn,v7r),e(sn,Dve),e(Dve,F7r),e(sn,T7r),e(Sr,M7r),e(Sr,pe),e(pe,W4),e(W4,Gve),e(Gve,E7r),e(W4,C7r),e(W4,QH),e(QH,w7r),e(W4,A7r),e(pe,y7r),e(pe,Q4),e(Q4,Ove),e(Ove,L7r),e(Q4,x7r),e(Q4,HH),e(HH,$7r),e(Q4,k7r),e(pe,S7r),e(pe,H4),e(H4,Vve),e(Vve,R7r),e(H4,P7r),e(H4,UH),e(UH,B7r),e(H4,I7r),e(pe,q7r),e(pe,U4),e(U4,Xve),e(Xve,N7r),e(U4,j7r),e(U4,JH),e(JH,D7r),e(U4,G7r),e(pe,O7r),e(pe,J4),e(J4,zve),e(zve,V7r),e(J4,X7r),e(J4,YH),e(YH,z7r),e(J4,W7r),e(pe,Q7r),e(pe,Y4),e(Y4,Wve),e(Wve,H7r),e(Y4,U7r),e(Y4,KH),e(KH,J7r),e(Y4,Y7r),e(pe,K7r),e(pe,K4),e(K4,Qve),e(Qve,Z7r),e(K4,eMr),e(K4,ZH),e(ZH,oMr),e(K4,rMr),e(pe,tMr),e(pe,Z4),e(Z4,Hve),e(Hve,aMr),e(Z4,nMr),e(Z4,eU),e(eU,sMr),e(Z4,lMr),e(pe,iMr),e(pe,eE),e(eE,Uve),e(Uve,dMr),e(eE,cMr),e(eE,oU),e(oU,fMr),e(eE,mMr),e(pe,gMr),e(pe,oE),e(oE,Jve),e(Jve,hMr),e(oE,pMr),e(oE,rU),e(rU,_Mr),e(oE,uMr),e(pe,bMr),e(pe,rE),e(rE,Yve),e(Yve,vMr),e(rE,FMr),e(rE,tU),e(tU,TMr),e(rE,MMr),e(pe,EMr),e(pe,tE),e(tE,Kve),e(Kve,CMr),e(tE,wMr),e(tE,aU),e(aU,AMr),e(tE,yMr),e(pe,LMr),e(pe,aE),e(aE,Zve),e(Zve,xMr),e(aE,$Mr),e(aE,nU),e(nU,kMr),e(aE,SMr),e(pe,RMr),e(pe,nE),e(nE,eFe),e(eFe,PMr),e(nE,BMr),e(nE,sU),e(sU,IMr),e(nE,qMr),e(pe,NMr),e(pe,sE),e(sE,oFe),e(oFe,jMr),e(sE,DMr),e(sE,lU),e(lU,GMr),e(sE,OMr),e(pe,VMr),e(pe,lE),e(lE,rFe),e(rFe,XMr),e(lE,zMr),e(lE,iU),e(iU,WMr),e(lE,QMr),e(pe,HMr),e(pe,iE),e(iE,tFe),e(tFe,UMr),e(iE,JMr),e(iE,dU),e(dU,YMr),e(iE,KMr),e(Sr,ZMr),M(dE,Sr,null),b(f,GNe,u),b(f,fc,u),e(fc,cE),e(cE,aFe),M(D8,aFe,null),e(fc,e4r),e(fc,nFe),e(nFe,o4r),b(f,ONe,u),b(f,nr,u),M(G8,nr,null),e(nr,r4r),e(nr,mc),e(mc,t4r),e(mc,cU),e(cU,a4r),e(mc,n4r),e(mc,fU),e(fU,s4r),e(mc,l4r),e(nr,i4r),e(nr,O8),e(O8,d4r),e(O8,sFe),e(sFe,c4r),e(O8,f4r),e(nr,m4r),e(nr,Bt),M(V8,Bt,null),e(Bt,g4r),e(Bt,lFe),e(lFe,h4r),e(Bt,p4r),e(Bt,gc),e(gc,_4r),e(gc,iFe),e(iFe,u4r),e(gc,b4r),e(gc,mU),e(mU,v4r),e(gc,F4r),e(Bt,T4r),M(fE,Bt,null),e(nr,M4r),e(nr,Rr),M(X8,Rr,null),e(Rr,E4r),e(Rr,dFe),e(dFe,C4r),e(Rr,w4r),e(Rr,ln),e(ln,A4r),e(ln,cFe),e(cFe,y4r),e(ln,L4r),e(ln,fFe),e(fFe,x4r),e(ln,$4r),e(ln,mFe),e(mFe,k4r),e(ln,S4r),e(Rr,R4r),e(Rr,z8),e(z8,mE),e(mE,gFe),e(gFe,P4r),e(mE,B4r),e(mE,gU),e(gU,I4r),e(mE,q4r),e(z8,N4r),e(z8,gE),e(gE,hFe),e(hFe,j4r),e(gE,D4r),e(gE,hU),e(hU,G4r),e(gE,O4r),e(Rr,V4r),M(hE,Rr,null),b(f,VNe,u),b(f,hc,u),e(hc,pE),e(pE,pFe),M(W8,pFe,null),e(hc,X4r),e(hc,_Fe),e(_Fe,z4r),b(f,XNe,u),b(f,sr,u),M(Q8,sr,null),e(sr,W4r),e(sr,pc),e(pc,Q4r),e(pc,pU),e(pU,H4r),e(pc,U4r),e(pc,_U),e(_U,J4r),e(pc,Y4r),e(sr,K4r),e(sr,H8),e(H8,Z4r),e(H8,uFe),e(uFe,eEr),e(H8,oEr),e(sr,rEr),e(sr,It),M(U8,It,null),e(It,tEr),e(It,bFe),e(bFe,aEr),e(It,nEr),e(It,_c),e(_c,sEr),e(_c,vFe),e(vFe,lEr),e(_c,iEr),e(_c,uU),e(uU,dEr),e(_c,cEr),e(It,fEr),M(_E,It,null),e(sr,mEr),e(sr,Pr),M(J8,Pr,null),e(Pr,gEr),e(Pr,FFe),e(FFe,hEr),e(Pr,pEr),e(Pr,dn),e(dn,_Er),e(dn,TFe),e(TFe,uEr),e(dn,bEr),e(dn,MFe),e(MFe,vEr),e(dn,FEr),e(dn,EFe),e(EFe,TEr),e(dn,MEr),e(Pr,EEr),e(Pr,CFe),e(CFe,uE),e(uE,wFe),e(wFe,CEr),e(uE,wEr),e(uE,bU),e(bU,AEr),e(uE,yEr),e(Pr,LEr),M(bE,Pr,null),b(f,zNe,u),b(f,uc,u),e(uc,vE),e(vE,AFe),M(Y8,AFe,null),e(uc,xEr),e(uc,yFe),e(yFe,$Er),b(f,WNe,u),b(f,lr,u),M(K8,lr,null),e(lr,kEr),e(lr,bc),e(bc,SEr),e(bc,vU),e(vU,REr),e(bc,PEr),e(bc,FU),e(FU,BEr),e(bc,IEr),e(lr,qEr),e(lr,Z8),e(Z8,NEr),e(Z8,LFe),e(LFe,jEr),e(Z8,DEr),e(lr,GEr),e(lr,qt),M(e9,qt,null),e(qt,OEr),e(qt,xFe),e(xFe,VEr),e(qt,XEr),e(qt,vc),e(vc,zEr),e(vc,$Fe),e($Fe,WEr),e(vc,QEr),e(vc,TU),e(TU,HEr),e(vc,UEr),e(qt,JEr),M(FE,qt,null),e(lr,YEr),e(lr,Br),M(o9,Br,null),e(Br,KEr),e(Br,kFe),e(kFe,ZEr),e(Br,eCr),e(Br,cn),e(cn,oCr),e(cn,SFe),e(SFe,rCr),e(cn,tCr),e(cn,RFe),e(RFe,aCr),e(cn,nCr),e(cn,PFe),e(PFe,sCr),e(cn,lCr),e(Br,iCr),e(Br,de),e(de,TE),e(TE,BFe),e(BFe,dCr),e(TE,cCr),e(TE,MU),e(MU,fCr),e(TE,mCr),e(de,gCr),e(de,ME),e(ME,IFe),e(IFe,hCr),e(ME,pCr),e(ME,EU),e(EU,_Cr),e(ME,uCr),e(de,bCr),e(de,EE),e(EE,qFe),e(qFe,vCr),e(EE,FCr),e(EE,CU),e(CU,TCr),e(EE,MCr),e(de,ECr),e(de,CE),e(CE,NFe),e(NFe,CCr),e(CE,wCr),e(CE,wU),e(wU,ACr),e(CE,yCr),e(de,LCr),e(de,wE),e(wE,jFe),e(jFe,xCr),e(wE,$Cr),e(wE,AU),e(AU,kCr),e(wE,SCr),e(de,RCr),e(de,AE),e(AE,DFe),e(DFe,PCr),e(AE,BCr),e(AE,yU),e(yU,ICr),e(AE,qCr),e(de,NCr),e(de,yE),e(yE,GFe),e(GFe,jCr),e(yE,DCr),e(yE,LU),e(LU,GCr),e(yE,OCr),e(de,VCr),e(de,LE),e(LE,OFe),e(OFe,XCr),e(LE,zCr),e(LE,xU),e(xU,WCr),e(LE,QCr),e(de,HCr),e(de,xE),e(xE,VFe),e(VFe,UCr),e(xE,JCr),e(xE,$U),e($U,YCr),e(xE,KCr),e(de,ZCr),e(de,$E),e($E,XFe),e(XFe,e5r),e($E,o5r),e($E,kU),e(kU,r5r),e($E,t5r),e(de,a5r),e(de,kE),e(kE,zFe),e(zFe,n5r),e(kE,s5r),e(kE,SU),e(SU,l5r),e(kE,i5r),e(de,d5r),e(de,SE),e(SE,WFe),e(WFe,c5r),e(SE,f5r),e(SE,RU),e(RU,m5r),e(SE,g5r),e(de,h5r),e(de,RE),e(RE,QFe),e(QFe,p5r),e(RE,_5r),e(RE,PU),e(PU,u5r),e(RE,b5r),e(de,v5r),e(de,PE),e(PE,HFe),e(HFe,F5r),e(PE,T5r),e(PE,BU),e(BU,M5r),e(PE,E5r),e(de,C5r),e(de,BE),e(BE,UFe),e(UFe,w5r),e(BE,A5r),e(BE,IU),e(IU,y5r),e(BE,L5r),e(de,x5r),e(de,IE),e(IE,JFe),e(JFe,$5r),e(IE,k5r),e(IE,qU),e(qU,S5r),e(IE,R5r),e(de,P5r),e(de,qE),e(qE,YFe),e(YFe,B5r),e(qE,I5r),e(qE,NU),e(NU,q5r),e(qE,N5r),e(de,j5r),e(de,NE),e(NE,KFe),e(KFe,D5r),e(NE,G5r),e(NE,jU),e(jU,O5r),e(NE,V5r),e(de,X5r),e(de,jE),e(jE,ZFe),e(ZFe,z5r),e(jE,W5r),e(jE,DU),e(DU,Q5r),e(jE,H5r),e(de,U5r),e(de,DE),e(DE,eTe),e(eTe,J5r),e(DE,Y5r),e(DE,GU),e(GU,K5r),e(DE,Z5r),e(Br,ewr),M(GE,Br,null),b(f,QNe,u),b(f,Fc,u),e(Fc,OE),e(OE,oTe),M(r9,oTe,null),e(Fc,owr),e(Fc,rTe),e(rTe,rwr),b(f,HNe,u),b(f,ir,u),M(t9,ir,null),e(ir,twr),e(ir,Tc),e(Tc,awr),e(Tc,OU),e(OU,nwr),e(Tc,swr),e(Tc,VU),e(VU,lwr),e(Tc,iwr),e(ir,dwr),e(ir,a9),e(a9,cwr),e(a9,tTe),e(tTe,fwr),e(a9,mwr),e(ir,gwr),e(ir,Nt),M(n9,Nt,null),e(Nt,hwr),e(Nt,aTe),e(aTe,pwr),e(Nt,_wr),e(Nt,Mc),e(Mc,uwr),e(Mc,nTe),e(nTe,bwr),e(Mc,vwr),e(Mc,XU),e(XU,Fwr),e(Mc,Twr),e(Nt,Mwr),M(VE,Nt,null),e(ir,Ewr),e(ir,Ir),M(s9,Ir,null),e(Ir,Cwr),e(Ir,sTe),e(sTe,wwr),e(Ir,Awr),e(Ir,fn),e(fn,ywr),e(fn,lTe),e(lTe,Lwr),e(fn,xwr),e(fn,iTe),e(iTe,$wr),e(fn,kwr),e(fn,dTe),e(dTe,Swr),e(fn,Rwr),e(Ir,Pwr),e(Ir,ce),e(ce,XE),e(XE,cTe),e(cTe,Bwr),e(XE,Iwr),e(XE,zU),e(zU,qwr),e(XE,Nwr),e(ce,jwr),e(ce,zE),e(zE,fTe),e(fTe,Dwr),e(zE,Gwr),e(zE,WU),e(WU,Owr),e(zE,Vwr),e(ce,Xwr),e(ce,WE),e(WE,mTe),e(mTe,zwr),e(WE,Wwr),e(WE,QU),e(QU,Qwr),e(WE,Hwr),e(ce,Uwr),e(ce,QE),e(QE,gTe),e(gTe,Jwr),e(QE,Ywr),e(QE,HU),e(HU,Kwr),e(QE,Zwr),e(ce,e0r),e(ce,HE),e(HE,hTe),e(hTe,o0r),e(HE,r0r),e(HE,UU),e(UU,t0r),e(HE,a0r),e(ce,n0r),e(ce,UE),e(UE,pTe),e(pTe,s0r),e(UE,l0r),e(UE,JU),e(JU,i0r),e(UE,d0r),e(ce,c0r),e(ce,JE),e(JE,_Te),e(_Te,f0r),e(JE,m0r),e(JE,YU),e(YU,g0r),e(JE,h0r),e(ce,p0r),e(ce,YE),e(YE,uTe),e(uTe,_0r),e(YE,u0r),e(YE,KU),e(KU,b0r),e(YE,v0r),e(ce,F0r),e(ce,KE),e(KE,bTe),e(bTe,T0r),e(KE,M0r),e(KE,ZU),e(ZU,E0r),e(KE,C0r),e(ce,w0r),e(ce,ZE),e(ZE,vTe),e(vTe,A0r),e(ZE,y0r),e(ZE,eJ),e(eJ,L0r),e(ZE,x0r),e(ce,$0r),e(ce,eC),e(eC,FTe),e(FTe,k0r),e(eC,S0r),e(eC,oJ),e(oJ,R0r),e(eC,P0r),e(ce,B0r),e(ce,oC),e(oC,TTe),e(TTe,I0r),e(oC,q0r),e(oC,rJ),e(rJ,N0r),e(oC,j0r),e(ce,D0r),e(ce,rC),e(rC,MTe),e(MTe,G0r),e(rC,O0r),e(rC,tJ),e(tJ,V0r),e(rC,X0r),e(ce,z0r),e(ce,tC),e(tC,ETe),e(ETe,W0r),e(tC,Q0r),e(tC,aJ),e(aJ,H0r),e(tC,U0r),e(ce,J0r),e(ce,aC),e(aC,CTe),e(CTe,Y0r),e(aC,K0r),e(aC,nJ),e(nJ,Z0r),e(aC,eAr),e(ce,oAr),e(ce,nC),e(nC,wTe),e(wTe,rAr),e(nC,tAr),e(nC,sJ),e(sJ,aAr),e(nC,nAr),e(ce,sAr),e(ce,sC),e(sC,ATe),e(ATe,lAr),e(sC,iAr),e(sC,lJ),e(lJ,dAr),e(sC,cAr),e(ce,fAr),e(ce,lC),e(lC,yTe),e(yTe,mAr),e(lC,gAr),e(lC,iJ),e(iJ,hAr),e(lC,pAr),e(ce,_Ar),e(ce,iC),e(iC,LTe),e(LTe,uAr),e(iC,bAr),e(iC,dJ),e(dJ,vAr),e(iC,FAr),e(ce,TAr),e(ce,dC),e(dC,xTe),e(xTe,MAr),e(dC,EAr),e(dC,cJ),e(cJ,CAr),e(dC,wAr),e(Ir,AAr),M(cC,Ir,null),b(f,UNe,u),b(f,Ec,u),e(Ec,fC),e(fC,$Te),M(l9,$Te,null),e(Ec,yAr),e(Ec,kTe),e(kTe,LAr),b(f,JNe,u),b(f,dr,u),M(i9,dr,null),e(dr,xAr),e(dr,Cc),e(Cc,$Ar),e(Cc,fJ),e(fJ,kAr),e(Cc,SAr),e(Cc,mJ),e(mJ,RAr),e(Cc,PAr),e(dr,BAr),e(dr,d9),e(d9,IAr),e(d9,STe),e(STe,qAr),e(d9,NAr),e(dr,jAr),e(dr,jt),M(c9,jt,null),e(jt,DAr),e(jt,RTe),e(RTe,GAr),e(jt,OAr),e(jt,wc),e(wc,VAr),e(wc,PTe),e(PTe,XAr),e(wc,zAr),e(wc,gJ),e(gJ,WAr),e(wc,QAr),e(jt,HAr),M(mC,jt,null),e(dr,UAr),e(dr,qr),M(f9,qr,null),e(qr,JAr),e(qr,BTe),e(BTe,YAr),e(qr,KAr),e(qr,mn),e(mn,ZAr),e(mn,ITe),e(ITe,e6r),e(mn,o6r),e(mn,qTe),e(qTe,r6r),e(mn,t6r),e(mn,NTe),e(NTe,a6r),e(mn,n6r),e(qr,s6r),e(qr,jTe),e(jTe,gC),e(gC,DTe),e(DTe,l6r),e(gC,i6r),e(gC,hJ),e(hJ,d6r),e(gC,c6r),e(qr,f6r),M(hC,qr,null),b(f,YNe,u),b(f,Ac,u),e(Ac,pC),e(pC,GTe),M(m9,GTe,null),e(Ac,m6r),e(Ac,OTe),e(OTe,g6r),b(f,KNe,u),b(f,cr,u),M(g9,cr,null),e(cr,h6r),e(cr,yc),e(yc,p6r),e(yc,pJ),e(pJ,_6r),e(yc,u6r),e(yc,_J),e(_J,b6r),e(yc,v6r),e(cr,F6r),e(cr,h9),e(h9,T6r),e(h9,VTe),e(VTe,M6r),e(h9,E6r),e(cr,C6r),e(cr,Dt),M(p9,Dt,null),e(Dt,w6r),e(Dt,XTe),e(XTe,A6r),e(Dt,y6r),e(Dt,Lc),e(Lc,L6r),e(Lc,zTe),e(zTe,x6r),e(Lc,$6r),e(Lc,uJ),e(uJ,k6r),e(Lc,S6r),e(Dt,R6r),M(_C,Dt,null),e(cr,P6r),e(cr,Nr),M(_9,Nr,null),e(Nr,B6r),e(Nr,WTe),e(WTe,I6r),e(Nr,q6r),e(Nr,gn),e(gn,N6r),e(gn,QTe),e(QTe,j6r),e(gn,D6r),e(gn,HTe),e(HTe,G6r),e(gn,O6r),e(gn,UTe),e(UTe,V6r),e(gn,X6r),e(Nr,z6r),e(Nr,JTe),e(JTe,uC),e(uC,YTe),e(YTe,W6r),e(uC,Q6r),e(uC,bJ),e(bJ,H6r),e(uC,U6r),e(Nr,J6r),M(bC,Nr,null),b(f,ZNe,u),b(f,xc,u),e(xc,vC),e(vC,KTe),M(u9,KTe,null),e(xc,Y6r),e(xc,ZTe),e(ZTe,K6r),b(f,eje,u),b(f,fr,u),M(b9,fr,null),e(fr,Z6r),e(fr,$c),e($c,eyr),e($c,vJ),e(vJ,oyr),e($c,ryr),e($c,FJ),e(FJ,tyr),e($c,ayr),e(fr,nyr),e(fr,v9),e(v9,syr),e(v9,e7e),e(e7e,lyr),e(v9,iyr),e(fr,dyr),e(fr,Gt),M(F9,Gt,null),e(Gt,cyr),e(Gt,o7e),e(o7e,fyr),e(Gt,myr),e(Gt,kc),e(kc,gyr),e(kc,r7e),e(r7e,hyr),e(kc,pyr),e(kc,TJ),e(TJ,_yr),e(kc,uyr),e(Gt,byr),M(FC,Gt,null),e(fr,vyr),e(fr,jr),M(T9,jr,null),e(jr,Fyr),e(jr,t7e),e(t7e,Tyr),e(jr,Myr),e(jr,hn),e(hn,Eyr),e(hn,a7e),e(a7e,Cyr),e(hn,wyr),e(hn,n7e),e(n7e,Ayr),e(hn,yyr),e(hn,s7e),e(s7e,Lyr),e(hn,xyr),e(jr,$yr),e(jr,te),e(te,TC),e(TC,l7e),e(l7e,kyr),e(TC,Syr),e(TC,MJ),e(MJ,Ryr),e(TC,Pyr),e(te,Byr),e(te,MC),e(MC,i7e),e(i7e,Iyr),e(MC,qyr),e(MC,EJ),e(EJ,Nyr),e(MC,jyr),e(te,Dyr),e(te,EC),e(EC,d7e),e(d7e,Gyr),e(EC,Oyr),e(EC,CJ),e(CJ,Vyr),e(EC,Xyr),e(te,zyr),e(te,CC),e(CC,c7e),e(c7e,Wyr),e(CC,Qyr),e(CC,wJ),e(wJ,Hyr),e(CC,Uyr),e(te,Jyr),e(te,wC),e(wC,f7e),e(f7e,Yyr),e(wC,Kyr),e(wC,AJ),e(AJ,Zyr),e(wC,eLr),e(te,oLr),e(te,AC),e(AC,m7e),e(m7e,rLr),e(AC,tLr),e(AC,yJ),e(yJ,aLr),e(AC,nLr),e(te,sLr),e(te,yC),e(yC,g7e),e(g7e,lLr),e(yC,iLr),e(yC,LJ),e(LJ,dLr),e(yC,cLr),e(te,fLr),e(te,LC),e(LC,h7e),e(h7e,mLr),e(LC,gLr),e(LC,xJ),e(xJ,hLr),e(LC,pLr),e(te,_Lr),e(te,xC),e(xC,p7e),e(p7e,uLr),e(xC,bLr),e(xC,$J),e($J,vLr),e(xC,FLr),e(te,TLr),e(te,$C),e($C,_7e),e(_7e,MLr),e($C,ELr),e($C,kJ),e(kJ,CLr),e($C,wLr),e(te,ALr),e(te,kC),e(kC,u7e),e(u7e,yLr),e(kC,LLr),e(kC,SJ),e(SJ,xLr),e(kC,$Lr),e(te,kLr),e(te,SC),e(SC,b7e),e(b7e,SLr),e(SC,RLr),e(SC,RJ),e(RJ,PLr),e(SC,BLr),e(te,ILr),e(te,RC),e(RC,v7e),e(v7e,qLr),e(RC,NLr),e(RC,PJ),e(PJ,jLr),e(RC,DLr),e(te,GLr),e(te,PC),e(PC,F7e),e(F7e,OLr),e(PC,VLr),e(PC,BJ),e(BJ,XLr),e(PC,zLr),e(te,WLr),e(te,BC),e(BC,T7e),e(T7e,QLr),e(BC,HLr),e(BC,IJ),e(IJ,ULr),e(BC,JLr),e(te,YLr),e(te,IC),e(IC,M7e),e(M7e,KLr),e(IC,ZLr),e(IC,qJ),e(qJ,e8r),e(IC,o8r),e(te,r8r),e(te,qC),e(qC,E7e),e(E7e,t8r),e(qC,a8r),e(qC,NJ),e(NJ,n8r),e(qC,s8r),e(te,l8r),e(te,NC),e(NC,C7e),e(C7e,i8r),e(NC,d8r),e(NC,jJ),e(jJ,c8r),e(NC,f8r),e(te,m8r),e(te,jC),e(jC,w7e),e(w7e,g8r),e(jC,h8r),e(jC,DJ),e(DJ,p8r),e(jC,_8r),e(te,u8r),e(te,DC),e(DC,A7e),e(A7e,b8r),e(DC,v8r),e(DC,GJ),e(GJ,F8r),e(DC,T8r),e(te,M8r),e(te,GC),e(GC,y7e),e(y7e,E8r),e(GC,C8r),e(GC,OJ),e(OJ,w8r),e(GC,A8r),e(te,y8r),e(te,OC),e(OC,L7e),e(L7e,L8r),e(OC,x8r),e(OC,VJ),e(VJ,$8r),e(OC,k8r),e(te,S8r),e(te,VC),e(VC,x7e),e(x7e,R8r),e(VC,P8r),e(VC,XJ),e(XJ,B8r),e(VC,I8r),e(te,q8r),e(te,XC),e(XC,$7e),e($7e,N8r),e(XC,j8r),e(XC,zJ),e(zJ,D8r),e(XC,G8r),e(te,O8r),e(te,zC),e(zC,k7e),e(k7e,V8r),e(zC,X8r),e(zC,WJ),e(WJ,z8r),e(zC,W8r),e(jr,Q8r),M(WC,jr,null),b(f,oje,u),b(f,Sc,u),e(Sc,QC),e(QC,S7e),M(M9,S7e,null),e(Sc,H8r),e(Sc,R7e),e(R7e,U8r),b(f,rje,u),b(f,mr,u),M(E9,mr,null),e(mr,J8r),e(mr,Rc),e(Rc,Y8r),e(Rc,QJ),e(QJ,K8r),e(Rc,Z8r),e(Rc,HJ),e(HJ,e9r),e(Rc,o9r),e(mr,r9r),e(mr,C9),e(C9,t9r),e(C9,P7e),e(P7e,a9r),e(C9,n9r),e(mr,s9r),e(mr,Ot),M(w9,Ot,null),e(Ot,l9r),e(Ot,B7e),e(B7e,i9r),e(Ot,d9r),e(Ot,Pc),e(Pc,c9r),e(Pc,I7e),e(I7e,f9r),e(Pc,m9r),e(Pc,UJ),e(UJ,g9r),e(Pc,h9r),e(Ot,p9r),M(HC,Ot,null),e(mr,_9r),e(mr,Dr),M(A9,Dr,null),e(Dr,u9r),e(Dr,q7e),e(q7e,b9r),e(Dr,v9r),e(Dr,pn),e(pn,F9r),e(pn,N7e),e(N7e,T9r),e(pn,M9r),e(pn,j7e),e(j7e,E9r),e(pn,C9r),e(pn,D7e),e(D7e,w9r),e(pn,A9r),e(Dr,y9r),e(Dr,Re),e(Re,UC),e(UC,G7e),e(G7e,L9r),e(UC,x9r),e(UC,JJ),e(JJ,$9r),e(UC,k9r),e(Re,S9r),e(Re,JC),e(JC,O7e),e(O7e,R9r),e(JC,P9r),e(JC,YJ),e(YJ,B9r),e(JC,I9r),e(Re,q9r),e(Re,YC),e(YC,V7e),e(V7e,N9r),e(YC,j9r),e(YC,KJ),e(KJ,D9r),e(YC,G9r),e(Re,O9r),e(Re,KC),e(KC,X7e),e(X7e,V9r),e(KC,X9r),e(KC,ZJ),e(ZJ,z9r),e(KC,W9r),e(Re,Q9r),e(Re,ZC),e(ZC,z7e),e(z7e,H9r),e(ZC,U9r),e(ZC,eY),e(eY,J9r),e(ZC,Y9r),e(Re,K9r),e(Re,e5),e(e5,W7e),e(W7e,Z9r),e(e5,exr),e(e5,oY),e(oY,oxr),e(e5,rxr),e(Re,txr),e(Re,o5),e(o5,Q7e),e(Q7e,axr),e(o5,nxr),e(o5,rY),e(rY,sxr),e(o5,lxr),e(Re,ixr),e(Re,r5),e(r5,H7e),e(H7e,dxr),e(r5,cxr),e(r5,tY),e(tY,fxr),e(r5,mxr),e(Re,gxr),e(Re,t5),e(t5,U7e),e(U7e,hxr),e(t5,pxr),e(t5,aY),e(aY,_xr),e(t5,uxr),e(Dr,bxr),M(a5,Dr,null),b(f,tje,u),b(f,Bc,u),e(Bc,n5),e(n5,J7e),M(y9,J7e,null),e(Bc,vxr),e(Bc,Y7e),e(Y7e,Fxr),b(f,aje,u),b(f,gr,u),M(L9,gr,null),e(gr,Txr),e(gr,Ic),e(Ic,Mxr),e(Ic,nY),e(nY,Exr),e(Ic,Cxr),e(Ic,sY),e(sY,wxr),e(Ic,Axr),e(gr,yxr),e(gr,x9),e(x9,Lxr),e(x9,K7e),e(K7e,xxr),e(x9,$xr),e(gr,kxr),e(gr,Vt),M($9,Vt,null),e(Vt,Sxr),e(Vt,Z7e),e(Z7e,Rxr),e(Vt,Pxr),e(Vt,qc),e(qc,Bxr),e(qc,eMe),e(eMe,Ixr),e(qc,qxr),e(qc,lY),e(lY,Nxr),e(qc,jxr),e(Vt,Dxr),M(s5,Vt,null),e(gr,Gxr),e(gr,Gr),M(k9,Gr,null),e(Gr,Oxr),e(Gr,oMe),e(oMe,Vxr),e(Gr,Xxr),e(Gr,_n),e(_n,zxr),e(_n,rMe),e(rMe,Wxr),e(_n,Qxr),e(_n,tMe),e(tMe,Hxr),e(_n,Uxr),e(_n,aMe),e(aMe,Jxr),e(_n,Yxr),e(Gr,Kxr),e(Gr,Ee),e(Ee,l5),e(l5,nMe),e(nMe,Zxr),e(l5,e$r),e(l5,iY),e(iY,o$r),e(l5,r$r),e(Ee,t$r),e(Ee,i5),e(i5,sMe),e(sMe,a$r),e(i5,n$r),e(i5,dY),e(dY,s$r),e(i5,l$r),e(Ee,i$r),e(Ee,d5),e(d5,lMe),e(lMe,d$r),e(d5,c$r),e(d5,cY),e(cY,f$r),e(d5,m$r),e(Ee,g$r),e(Ee,c5),e(c5,iMe),e(iMe,h$r),e(c5,p$r),e(c5,fY),e(fY,_$r),e(c5,u$r),e(Ee,b$r),e(Ee,f5),e(f5,dMe),e(dMe,v$r),e(f5,F$r),e(f5,mY),e(mY,T$r),e(f5,M$r),e(Ee,E$r),e(Ee,m5),e(m5,cMe),e(cMe,C$r),e(m5,w$r),e(m5,gY),e(gY,A$r),e(m5,y$r),e(Ee,L$r),e(Ee,g5),e(g5,fMe),e(fMe,x$r),e(g5,$$r),e(g5,hY),e(hY,k$r),e(g5,S$r),e(Ee,R$r),e(Ee,h5),e(h5,mMe),e(mMe,P$r),e(h5,B$r),e(h5,pY),e(pY,I$r),e(h5,q$r),e(Ee,N$r),e(Ee,p5),e(p5,gMe),e(gMe,j$r),e(p5,D$r),e(p5,_Y),e(_Y,G$r),e(p5,O$r),e(Ee,V$r),e(Ee,_5),e(_5,hMe),e(hMe,X$r),e(_5,z$r),e(_5,uY),e(uY,W$r),e(_5,Q$r),e(Ee,H$r),e(Ee,u5),e(u5,pMe),e(pMe,U$r),e(u5,J$r),e(u5,bY),e(bY,Y$r),e(u5,K$r),e(Ee,Z$r),e(Ee,b5),e(b5,_Me),e(_Me,ekr),e(b5,okr),e(b5,vY),e(vY,rkr),e(b5,tkr),e(Gr,akr),M(v5,Gr,null),b(f,nje,u),b(f,Nc,u),e(Nc,F5),e(F5,uMe),M(S9,uMe,null),e(Nc,nkr),e(Nc,bMe),e(bMe,skr),b(f,sje,u),b(f,hr,u),M(R9,hr,null),e(hr,lkr),e(hr,jc),e(jc,ikr),e(jc,FY),e(FY,dkr),e(jc,ckr),e(jc,TY),e(TY,fkr),e(jc,mkr),e(hr,gkr),e(hr,P9),e(P9,hkr),e(P9,vMe),e(vMe,pkr),e(P9,_kr),e(hr,ukr),e(hr,Xt),M(B9,Xt,null),e(Xt,bkr),e(Xt,FMe),e(FMe,vkr),e(Xt,Fkr),e(Xt,Dc),e(Dc,Tkr),e(Dc,TMe),e(TMe,Mkr),e(Dc,Ekr),e(Dc,MY),e(MY,Ckr),e(Dc,wkr),e(Xt,Akr),M(T5,Xt,null),e(hr,ykr),e(hr,Or),M(I9,Or,null),e(Or,Lkr),e(Or,MMe),e(MMe,xkr),e(Or,$kr),e(Or,un),e(un,kkr),e(un,EMe),e(EMe,Skr),e(un,Rkr),e(un,CMe),e(CMe,Pkr),e(un,Bkr),e(un,wMe),e(wMe,Ikr),e(un,qkr),e(Or,Nkr),e(Or,Le),e(Le,M5),e(M5,AMe),e(AMe,jkr),e(M5,Dkr),e(M5,EY),e(EY,Gkr),e(M5,Okr),e(Le,Vkr),e(Le,E5),e(E5,yMe),e(yMe,Xkr),e(E5,zkr),e(E5,CY),e(CY,Wkr),e(E5,Qkr),e(Le,Hkr),e(Le,C5),e(C5,LMe),e(LMe,Ukr),e(C5,Jkr),e(C5,wY),e(wY,Ykr),e(C5,Kkr),e(Le,Zkr),e(Le,w5),e(w5,xMe),e(xMe,eSr),e(w5,oSr),e(w5,AY),e(AY,rSr),e(w5,tSr),e(Le,aSr),e(Le,A5),e(A5,$Me),e($Me,nSr),e(A5,sSr),e(A5,yY),e(yY,lSr),e(A5,iSr),e(Le,dSr),e(Le,y5),e(y5,kMe),e(kMe,cSr),e(y5,fSr),e(y5,LY),e(LY,mSr),e(y5,gSr),e(Le,hSr),e(Le,L5),e(L5,SMe),e(SMe,pSr),e(L5,_Sr),e(L5,xY),e(xY,uSr),e(L5,bSr),e(Le,vSr),e(Le,x5),e(x5,RMe),e(RMe,FSr),e(x5,TSr),e(x5,$Y),e($Y,MSr),e(x5,ESr),e(Le,CSr),e(Le,$5),e($5,PMe),e(PMe,wSr),e($5,ASr),e($5,kY),e(kY,ySr),e($5,LSr),e(Le,xSr),e(Le,k5),e(k5,BMe),e(BMe,$Sr),e(k5,kSr),e(k5,SY),e(SY,SSr),e(k5,RSr),e(Or,PSr),M(S5,Or,null),b(f,lje,u),b(f,Gc,u),e(Gc,R5),e(R5,IMe),M(q9,IMe,null),e(Gc,BSr),e(Gc,qMe),e(qMe,ISr),b(f,ije,u),b(f,pr,u),M(N9,pr,null),e(pr,qSr),e(pr,Oc),e(Oc,NSr),e(Oc,RY),e(RY,jSr),e(Oc,DSr),e(Oc,PY),e(PY,GSr),e(Oc,OSr),e(pr,VSr),e(pr,j9),e(j9,XSr),e(j9,NMe),e(NMe,zSr),e(j9,WSr),e(pr,QSr),e(pr,zt),M(D9,zt,null),e(zt,HSr),e(zt,jMe),e(jMe,USr),e(zt,JSr),e(zt,Vc),e(Vc,YSr),e(Vc,DMe),e(DMe,KSr),e(Vc,ZSr),e(Vc,BY),e(BY,eRr),e(Vc,oRr),e(zt,rRr),M(P5,zt,null),e(pr,tRr),e(pr,Vr),M(G9,Vr,null),e(Vr,aRr),e(Vr,GMe),e(GMe,nRr),e(Vr,sRr),e(Vr,bn),e(bn,lRr),e(bn,OMe),e(OMe,iRr),e(bn,dRr),e(bn,VMe),e(VMe,cRr),e(bn,fRr),e(bn,XMe),e(XMe,mRr),e(bn,gRr),e(Vr,hRr),e(Vr,Pe),e(Pe,B5),e(B5,zMe),e(zMe,pRr),e(B5,_Rr),e(B5,IY),e(IY,uRr),e(B5,bRr),e(Pe,vRr),e(Pe,I5),e(I5,WMe),e(WMe,FRr),e(I5,TRr),e(I5,qY),e(qY,MRr),e(I5,ERr),e(Pe,CRr),e(Pe,q5),e(q5,QMe),e(QMe,wRr),e(q5,ARr),e(q5,NY),e(NY,yRr),e(q5,LRr),e(Pe,xRr),e(Pe,N5),e(N5,HMe),e(HMe,$Rr),e(N5,kRr),e(N5,jY),e(jY,SRr),e(N5,RRr),e(Pe,PRr),e(Pe,j5),e(j5,UMe),e(UMe,BRr),e(j5,IRr),e(j5,DY),e(DY,qRr),e(j5,NRr),e(Pe,jRr),e(Pe,D5),e(D5,JMe),e(JMe,DRr),e(D5,GRr),e(D5,GY),e(GY,ORr),e(D5,VRr),e(Pe,XRr),e(Pe,G5),e(G5,YMe),e(YMe,zRr),e(G5,WRr),e(G5,OY),e(OY,QRr),e(G5,HRr),e(Pe,URr),e(Pe,O5),e(O5,KMe),e(KMe,JRr),e(O5,YRr),e(O5,VY),e(VY,KRr),e(O5,ZRr),e(Pe,ePr),e(Pe,V5),e(V5,ZMe),e(ZMe,oPr),e(V5,rPr),e(V5,XY),e(XY,tPr),e(V5,aPr),e(Vr,nPr),M(X5,Vr,null),b(f,dje,u),b(f,Xc,u),e(Xc,z5),e(z5,e4e),M(O9,e4e,null),e(Xc,sPr),e(Xc,o4e),e(o4e,lPr),b(f,cje,u),b(f,_r,u),M(V9,_r,null),e(_r,iPr),e(_r,zc),e(zc,dPr),e(zc,zY),e(zY,cPr),e(zc,fPr),e(zc,WY),e(WY,mPr),e(zc,gPr),e(_r,hPr),e(_r,X9),e(X9,pPr),e(X9,r4e),e(r4e,_Pr),e(X9,uPr),e(_r,bPr),e(_r,Wt),M(z9,Wt,null),e(Wt,vPr),e(Wt,t4e),e(t4e,FPr),e(Wt,TPr),e(Wt,Wc),e(Wc,MPr),e(Wc,a4e),e(a4e,EPr),e(Wc,CPr),e(Wc,QY),e(QY,wPr),e(Wc,APr),e(Wt,yPr),M(W5,Wt,null),e(_r,LPr),e(_r,Xr),M(W9,Xr,null),e(Xr,xPr),e(Xr,n4e),e(n4e,$Pr),e(Xr,kPr),e(Xr,vn),e(vn,SPr),e(vn,s4e),e(s4e,RPr),e(vn,PPr),e(vn,l4e),e(l4e,BPr),e(vn,IPr),e(vn,i4e),e(i4e,qPr),e(vn,NPr),e(Xr,jPr),e(Xr,xe),e(xe,Q5),e(Q5,d4e),e(d4e,DPr),e(Q5,GPr),e(Q5,HY),e(HY,OPr),e(Q5,VPr),e(xe,XPr),e(xe,H5),e(H5,c4e),e(c4e,zPr),e(H5,WPr),e(H5,UY),e(UY,QPr),e(H5,HPr),e(xe,UPr),e(xe,U5),e(U5,f4e),e(f4e,JPr),e(U5,YPr),e(U5,JY),e(JY,KPr),e(U5,ZPr),e(xe,eBr),e(xe,J5),e(J5,m4e),e(m4e,oBr),e(J5,rBr),e(J5,YY),e(YY,tBr),e(J5,aBr),e(xe,nBr),e(xe,Y5),e(Y5,g4e),e(g4e,sBr),e(Y5,lBr),e(Y5,KY),e(KY,iBr),e(Y5,dBr),e(xe,cBr),e(xe,K5),e(K5,h4e),e(h4e,fBr),e(K5,mBr),e(K5,ZY),e(ZY,gBr),e(K5,hBr),e(xe,pBr),e(xe,Z5),e(Z5,p4e),e(p4e,_Br),e(Z5,uBr),e(Z5,eK),e(eK,bBr),e(Z5,vBr),e(xe,FBr),e(xe,ew),e(ew,_4e),e(_4e,TBr),e(ew,MBr),e(ew,oK),e(oK,EBr),e(ew,CBr),e(xe,wBr),e(xe,ow),e(ow,u4e),e(u4e,ABr),e(ow,yBr),e(ow,rK),e(rK,LBr),e(ow,xBr),e(xe,$Br),e(xe,rw),e(rw,b4e),e(b4e,kBr),e(rw,SBr),e(rw,tK),e(tK,RBr),e(rw,PBr),e(Xr,BBr),M(tw,Xr,null),b(f,fje,u),b(f,Qc,u),e(Qc,aw),e(aw,v4e),M(Q9,v4e,null),e(Qc,IBr),e(Qc,F4e),e(F4e,qBr),b(f,mje,u),b(f,ur,u),M(H9,ur,null),e(ur,NBr),e(ur,Hc),e(Hc,jBr),e(Hc,aK),e(aK,DBr),e(Hc,GBr),e(Hc,nK),e(nK,OBr),e(Hc,VBr),e(ur,XBr),e(ur,U9),e(U9,zBr),e(U9,T4e),e(T4e,WBr),e(U9,QBr),e(ur,HBr),e(ur,Qt),M(J9,Qt,null),e(Qt,UBr),e(Qt,M4e),e(M4e,JBr),e(Qt,YBr),e(Qt,Uc),e(Uc,KBr),e(Uc,E4e),e(E4e,ZBr),e(Uc,eIr),e(Uc,sK),e(sK,oIr),e(Uc,rIr),e(Qt,tIr),M(nw,Qt,null),e(ur,aIr),e(ur,zr),M(Y9,zr,null),e(zr,nIr),e(zr,C4e),e(C4e,sIr),e(zr,lIr),e(zr,Fn),e(Fn,iIr),e(Fn,w4e),e(w4e,dIr),e(Fn,cIr),e(Fn,A4e),e(A4e,fIr),e(Fn,mIr),e(Fn,y4e),e(y4e,gIr),e(Fn,hIr),e(zr,pIr),e(zr,$e),e($e,sw),e(sw,L4e),e(L4e,_Ir),e(sw,uIr),e(sw,lK),e(lK,bIr),e(sw,vIr),e($e,FIr),e($e,lw),e(lw,x4e),e(x4e,TIr),e(lw,MIr),e(lw,iK),e(iK,EIr),e(lw,CIr),e($e,wIr),e($e,iw),e(iw,$4e),e($4e,AIr),e(iw,yIr),e(iw,dK),e(dK,LIr),e(iw,xIr),e($e,$Ir),e($e,dw),e(dw,k4e),e(k4e,kIr),e(dw,SIr),e(dw,cK),e(cK,RIr),e(dw,PIr),e($e,BIr),e($e,cw),e(cw,S4e),e(S4e,IIr),e(cw,qIr),e(cw,fK),e(fK,NIr),e(cw,jIr),e($e,DIr),e($e,fw),e(fw,R4e),e(R4e,GIr),e(fw,OIr),e(fw,mK),e(mK,VIr),e(fw,XIr),e($e,zIr),e($e,mw),e(mw,P4e),e(P4e,WIr),e(mw,QIr),e(mw,gK),e(gK,HIr),e(mw,UIr),e($e,JIr),e($e,gw),e(gw,B4e),e(B4e,YIr),e(gw,KIr),e(gw,hK),e(hK,ZIr),e(gw,eqr),e($e,oqr),e($e,hw),e(hw,I4e),e(I4e,rqr),e(hw,tqr),e(hw,pK),e(pK,aqr),e(hw,nqr),e($e,sqr),e($e,pw),e(pw,q4e),e(q4e,lqr),e(pw,iqr),e(pw,_K),e(_K,dqr),e(pw,cqr),e(zr,fqr),M(_w,zr,null),b(f,gje,u),b(f,Jc,u),e(Jc,uw),e(uw,N4e),M(K9,N4e,null),e(Jc,mqr),e(Jc,j4e),e(j4e,gqr),b(f,hje,u),b(f,br,u),M(Z9,br,null),e(br,hqr),e(br,Yc),e(Yc,pqr),e(Yc,uK),e(uK,_qr),e(Yc,uqr),e(Yc,bK),e(bK,bqr),e(Yc,vqr),e(br,Fqr),e(br,ex),e(ex,Tqr),e(ex,D4e),e(D4e,Mqr),e(ex,Eqr),e(br,Cqr),e(br,Ht),M(ox,Ht,null),e(Ht,wqr),e(Ht,G4e),e(G4e,Aqr),e(Ht,yqr),e(Ht,Kc),e(Kc,Lqr),e(Kc,O4e),e(O4e,xqr),e(Kc,$qr),e(Kc,vK),e(vK,kqr),e(Kc,Sqr),e(Ht,Rqr),M(bw,Ht,null),e(br,Pqr),e(br,Wr),M(rx,Wr,null),e(Wr,Bqr),e(Wr,V4e),e(V4e,Iqr),e(Wr,qqr),e(Wr,Tn),e(Tn,Nqr),e(Tn,X4e),e(X4e,jqr),e(Tn,Dqr),e(Tn,z4e),e(z4e,Gqr),e(Tn,Oqr),e(Tn,W4e),e(W4e,Vqr),e(Tn,Xqr),e(Wr,zqr),e(Wr,De),e(De,vw),e(vw,Q4e),e(Q4e,Wqr),e(vw,Qqr),e(vw,FK),e(FK,Hqr),e(vw,Uqr),e(De,Jqr),e(De,Fw),e(Fw,H4e),e(H4e,Yqr),e(Fw,Kqr),e(Fw,TK),e(TK,Zqr),e(Fw,eNr),e(De,oNr),e(De,Tw),e(Tw,U4e),e(U4e,rNr),e(Tw,tNr),e(Tw,MK),e(MK,aNr),e(Tw,nNr),e(De,sNr),e(De,Mw),e(Mw,J4e),e(J4e,lNr),e(Mw,iNr),e(Mw,EK),e(EK,dNr),e(Mw,cNr),e(De,fNr),e(De,Ew),e(Ew,Y4e),e(Y4e,mNr),e(Ew,gNr),e(Ew,CK),e(CK,hNr),e(Ew,pNr),e(De,_Nr),e(De,Cw),e(Cw,K4e),e(K4e,uNr),e(Cw,bNr),e(Cw,wK),e(wK,vNr),e(Cw,FNr),e(De,TNr),e(De,ww),e(ww,Z4e),e(Z4e,MNr),e(ww,ENr),e(ww,AK),e(AK,CNr),e(ww,wNr),e(De,ANr),e(De,Aw),e(Aw,eEe),e(eEe,yNr),e(Aw,LNr),e(Aw,yK),e(yK,xNr),e(Aw,$Nr),e(Wr,kNr),M(yw,Wr,null),b(f,pje,u),b(f,Zc,u),e(Zc,Lw),e(Lw,oEe),M(tx,oEe,null),e(Zc,SNr),e(Zc,rEe),e(rEe,RNr),b(f,_je,u),b(f,vr,u),M(ax,vr,null),e(vr,PNr),e(vr,ef),e(ef,BNr),e(ef,LK),e(LK,INr),e(ef,qNr),e(ef,xK),e(xK,NNr),e(ef,jNr),e(vr,DNr),e(vr,nx),e(nx,GNr),e(nx,tEe),e(tEe,ONr),e(nx,VNr),e(vr,XNr),e(vr,Ut),M(sx,Ut,null),e(Ut,zNr),e(Ut,aEe),e(aEe,WNr),e(Ut,QNr),e(Ut,of),e(of,HNr),e(of,nEe),e(nEe,UNr),e(of,JNr),e(of,$K),e($K,YNr),e(of,KNr),e(Ut,ZNr),M(xw,Ut,null),e(vr,ejr),e(vr,Qr),M(lx,Qr,null),e(Qr,ojr),e(Qr,sEe),e(sEe,rjr),e(Qr,tjr),e(Qr,Mn),e(Mn,ajr),e(Mn,lEe),e(lEe,njr),e(Mn,sjr),e(Mn,iEe),e(iEe,ljr),e(Mn,ijr),e(Mn,dEe),e(dEe,djr),e(Mn,cjr),e(Qr,fjr),e(Qr,Ge),e(Ge,$w),e($w,cEe),e(cEe,mjr),e($w,gjr),e($w,kK),e(kK,hjr),e($w,pjr),e(Ge,_jr),e(Ge,kw),e(kw,fEe),e(fEe,ujr),e(kw,bjr),e(kw,SK),e(SK,vjr),e(kw,Fjr),e(Ge,Tjr),e(Ge,Sw),e(Sw,mEe),e(mEe,Mjr),e(Sw,Ejr),e(Sw,RK),e(RK,Cjr),e(Sw,wjr),e(Ge,Ajr),e(Ge,Rw),e(Rw,gEe),e(gEe,yjr),e(Rw,Ljr),e(Rw,PK),e(PK,xjr),e(Rw,$jr),e(Ge,kjr),e(Ge,Pw),e(Pw,hEe),e(hEe,Sjr),e(Pw,Rjr),e(Pw,BK),e(BK,Pjr),e(Pw,Bjr),e(Ge,Ijr),e(Ge,Bw),e(Bw,pEe),e(pEe,qjr),e(Bw,Njr),e(Bw,IK),e(IK,jjr),e(Bw,Djr),e(Ge,Gjr),e(Ge,Iw),e(Iw,_Ee),e(_Ee,Ojr),e(Iw,Vjr),e(Iw,qK),e(qK,Xjr),e(Iw,zjr),e(Ge,Wjr),e(Ge,qw),e(qw,uEe),e(uEe,Qjr),e(qw,Hjr),e(qw,NK),e(NK,Ujr),e(qw,Jjr),e(Qr,Yjr),M(Nw,Qr,null),b(f,uje,u),b(f,rf,u),e(rf,jw),e(jw,bEe),M(ix,bEe,null),e(rf,Kjr),e(rf,vEe),e(vEe,Zjr),b(f,bje,u),b(f,Fr,u),M(dx,Fr,null),e(Fr,eDr),e(Fr,tf),e(tf,oDr),e(tf,jK),e(jK,rDr),e(tf,tDr),e(tf,DK),e(DK,aDr),e(tf,nDr),e(Fr,sDr),e(Fr,cx),e(cx,lDr),e(cx,FEe),e(FEe,iDr),e(cx,dDr),e(Fr,cDr),e(Fr,Jt),M(fx,Jt,null),e(Jt,fDr),e(Jt,TEe),e(TEe,mDr),e(Jt,gDr),e(Jt,af),e(af,hDr),e(af,MEe),e(MEe,pDr),e(af,_Dr),e(af,GK),e(GK,uDr),e(af,bDr),e(Jt,vDr),M(Dw,Jt,null),e(Fr,FDr),e(Fr,Hr),M(mx,Hr,null),e(Hr,TDr),e(Hr,EEe),e(EEe,MDr),e(Hr,EDr),e(Hr,En),e(En,CDr),e(En,CEe),e(CEe,wDr),e(En,ADr),e(En,wEe),e(wEe,yDr),e(En,LDr),e(En,AEe),e(AEe,xDr),e(En,$Dr),e(Hr,kDr),e(Hr,yEe),e(yEe,Gw),e(Gw,LEe),e(LEe,SDr),e(Gw,RDr),e(Gw,OK),e(OK,PDr),e(Gw,BDr),e(Hr,IDr),M(Ow,Hr,null),b(f,vje,u),b(f,nf,u),e(nf,Vw),e(Vw,xEe),M(gx,xEe,null),e(nf,qDr),e(nf,$Ee),e($Ee,NDr),b(f,Fje,u),b(f,Tr,u),M(hx,Tr,null),e(Tr,jDr),e(Tr,sf),e(sf,DDr),e(sf,VK),e(VK,GDr),e(sf,ODr),e(sf,XK),e(XK,VDr),e(sf,XDr),e(Tr,zDr),e(Tr,px),e(px,WDr),e(px,kEe),e(kEe,QDr),e(px,HDr),e(Tr,UDr),e(Tr,Yt),M(_x,Yt,null),e(Yt,JDr),e(Yt,SEe),e(SEe,YDr),e(Yt,KDr),e(Yt,lf),e(lf,ZDr),e(lf,REe),e(REe,eGr),e(lf,oGr),e(lf,zK),e(zK,rGr),e(lf,tGr),e(Yt,aGr),M(Xw,Yt,null),e(Tr,nGr),e(Tr,Ur),M(ux,Ur,null),e(Ur,sGr),e(Ur,PEe),e(PEe,lGr),e(Ur,iGr),e(Ur,Cn),e(Cn,dGr),e(Cn,BEe),e(BEe,cGr),e(Cn,fGr),e(Cn,IEe),e(IEe,mGr),e(Cn,gGr),e(Cn,qEe),e(qEe,hGr),e(Cn,pGr),e(Ur,_Gr),e(Ur,bx),e(bx,zw),e(zw,NEe),e(NEe,uGr),e(zw,bGr),e(zw,WK),e(WK,vGr),e(zw,FGr),e(bx,TGr),e(bx,Ww),e(Ww,jEe),e(jEe,MGr),e(Ww,EGr),e(Ww,QK),e(QK,CGr),e(Ww,wGr),e(Ur,AGr),M(Qw,Ur,null),b(f,Tje,u),b(f,df,u),e(df,Hw),e(Hw,DEe),M(vx,DEe,null),e(df,yGr),e(df,GEe),e(GEe,LGr),b(f,Mje,u),b(f,Mr,u),M(Fx,Mr,null),e(Mr,xGr),e(Mr,cf),e(cf,$Gr),e(cf,HK),e(HK,kGr),e(cf,SGr),e(cf,UK),e(UK,RGr),e(cf,PGr),e(Mr,BGr),e(Mr,Tx),e(Tx,IGr),e(Tx,OEe),e(OEe,qGr),e(Tx,NGr),e(Mr,jGr),e(Mr,Kt),M(Mx,Kt,null),e(Kt,DGr),e(Kt,VEe),e(VEe,GGr),e(Kt,OGr),e(Kt,ff),e(ff,VGr),e(ff,XEe),e(XEe,XGr),e(ff,zGr),e(ff,JK),e(JK,WGr),e(ff,QGr),e(Kt,HGr),M(Uw,Kt,null),e(Mr,UGr),e(Mr,Jr),M(Ex,Jr,null),e(Jr,JGr),e(Jr,zEe),e(zEe,YGr),e(Jr,KGr),e(Jr,wn),e(wn,ZGr),e(wn,WEe),e(WEe,eOr),e(wn,oOr),e(wn,QEe),e(QEe,rOr),e(wn,tOr),e(wn,HEe),e(HEe,aOr),e(wn,nOr),e(Jr,sOr),e(Jr,UEe),e(UEe,Jw),e(Jw,JEe),e(JEe,lOr),e(Jw,iOr),e(Jw,YK),e(YK,dOr),e(Jw,cOr),e(Jr,fOr),M(Yw,Jr,null),Eje=!0},p(f,[u]){const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),Ff.$set(Cx);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),Mg.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),rh.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),Rh.$set(ZEe);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),Ph.$set(wx);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),ep.$set(eCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),op.$set(An);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),ap.$set(oCe);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),K_.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),eu.$set(tCe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Xu.$set(Ax);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),Wu.$set(aCe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),$1.$set(yx);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),S1.$set(nCe);const Lx={};u&2&&(Lx.$$scope={dirty:u,ctx:f}),p3.$set(Lx);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),u3.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),B3.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),q3.$set(iCe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),kb.$set(mf);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),Rb.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),c2.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),m2.$set(fCe);const xx={};u&2&&(xx.$$scope={dirty:u,ctx:f}),v2.$set(xx);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),T2.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),rv.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),av.$set(hCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),zv.$set(et);const $x={};u&2&&($x.$$scope={dirty:u,ctx:f}),Qv.$set($x);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),Jv.$set(pCe);const kx={};u&2&&(kx.$$scope={dirty:u,ctx:f}),Kv.$set(kx);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),mF.$set(_Ce);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),hF.$set(ot);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),uF.$set(uCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),vF.$set(gf);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),$F.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),SF.$set(vCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),jF.$set(y);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),GF.$set(Kw);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),KF.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),eT.$set(TCe);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),aT.$set(Zw);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),sT.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),gT.$set(ECe);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),pT.$set(e0);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),FT.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),MT.$set(wCe);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),AT.$set(o0);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),LT.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),kT.$set(yCe);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),RT.$set(r0);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),jT.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),GT.$set(xCe);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),XT.$set(t0);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),WT.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),N7.$set(kCe);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),D7.$set(a0);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),cM.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),mM.$set(RCe);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),wM.$set(n0);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),yM.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),SM.$set(BCe);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),PM.$set(s0);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),o4.$set(ICe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),t4.$set(qCe);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),h4.$set(l0);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),_4.$set(NCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),V4.$set(jCe);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),z4.$set(i0);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),dE.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),fE.$set(GCe);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),hE.$set(d0);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),_E.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),bE.$set(VCe);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),FE.$set(c0);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),GE.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),VE.$set(zCe);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),cC.$set(f0);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),mC.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),hC.$set(QCe);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),_C.$set(m0);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),bC.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),FC.$set(UCe);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),WC.$set(g0);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),HC.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),a5.$set(YCe);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),s5.$set(h0);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),v5.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),T5.$set(ZCe);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),S5.$set(p0);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),P5.$set(e5e);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),X5.$set(o5e);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),W5.$set(_0);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),tw.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),nw.$set(t5e);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),_w.$set(u0);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),bw.$set(a5e);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),yw.$set(n5e);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),xw.$set(b0);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),Nw.$set(s5e);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),Dw.$set(l5e);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),Ow.$set(v0);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),Xw.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),Qw.$set(d5e);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),Uw.$set(F0);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),Yw.$set(c5e)},i(f){Eje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(Ff.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(w6.$$.fragment,f),E(Mg.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(k6.$$.fragment,f),E(rh.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(q6.$$.fragment,f),E(Rh.$$.fragment,f),E(Ph.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(V6.$$.fragment,f),E(ep.$$.fragment,f),E(op.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(ap.$$.fragment,f),E(U6.$$.fragment,f),E(K_.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(eu.$$.fragment,f),E(ey.$$.fragment,f),E(Xu.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(Wu.$$.fragment,f),E(ny.$$.fragment,f),E($1.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(S1.$$.fragment,f),E(cy.$$.fragment,f),E(p3.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(u3.$$.fragment,f),E(py.$$.fragment,f),E(B3.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(q3.$$.fragment,f),E(Fy.$$.fragment,f),E(kb.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Rb.$$.fragment,f),E(wy.$$.fragment,f),E(c2.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(m2.$$.fragment,f),E($y.$$.fragment,f),E(v2.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(T2.$$.fragment,f),E(By.$$.fragment,f),E(rv.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(av.$$.fragment,f),E(Dy.$$.fragment,f),E(zv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qv.$$.fragment,f),E(zy.$$.fragment,f),E(Jv.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(Kv.$$.fragment,f),E(Jy.$$.fragment,f),E(mF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(hF.$$.fragment,f),E(oL.$$.fragment,f),E(uF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(vF.$$.fragment,f),E(sL.$$.fragment,f),E($F.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(SF.$$.fragment,f),E(fL.$$.fragment,f),E(jF.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(GF.$$.fragment,f),E(_L.$$.fragment,f),E(KF.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(eT.$$.fragment,f),E(TL.$$.fragment,f),E(aT.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(sT.$$.fragment,f),E(yL.$$.fragment,f),E(gT.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(pT.$$.fragment,f),E(SL.$$.fragment,f),E(FT.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(MT.$$.fragment,f),E(qL.$$.fragment,f),E(AT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(LT.$$.fragment,f),E(VL.$$.fragment,f),E(kT.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(RT.$$.fragment,f),E(HL.$$.fragment,f),E(jT.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(GT.$$.fragment,f),E(ZL.$$.fragment,f),E(XT.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(WT.$$.fragment,f),E(a8.$$.fragment,f),E(N7.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(D7.$$.fragment,f),E(d8.$$.fragment,f),E(cM.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(mM.$$.fragment,f),E(h8.$$.fragment,f),E(wM.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(yM.$$.fragment,f),E(v8.$$.fragment,f),E(SM.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(PM.$$.fragment,f),E(C8.$$.fragment,f),E(o4.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(t4.$$.fragment,f),E(x8.$$.fragment,f),E(h4.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(_4.$$.fragment,f),E(P8.$$.fragment,f),E(V4.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(z4.$$.fragment,f),E(j8.$$.fragment,f),E(dE.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(fE.$$.fragment,f),E(X8.$$.fragment,f),E(hE.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(_E.$$.fragment,f),E(J8.$$.fragment,f),E(bE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(FE.$$.fragment,f),E(o9.$$.fragment,f),E(GE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(VE.$$.fragment,f),E(s9.$$.fragment,f),E(cC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(mC.$$.fragment,f),E(f9.$$.fragment,f),E(hC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(_C.$$.fragment,f),E(_9.$$.fragment,f),E(bC.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(FC.$$.fragment,f),E(T9.$$.fragment,f),E(WC.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(HC.$$.fragment,f),E(A9.$$.fragment,f),E(a5.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(s5.$$.fragment,f),E(k9.$$.fragment,f),E(v5.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(T5.$$.fragment,f),E(I9.$$.fragment,f),E(S5.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(P5.$$.fragment,f),E(G9.$$.fragment,f),E(X5.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(W5.$$.fragment,f),E(W9.$$.fragment,f),E(tw.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(nw.$$.fragment,f),E(Y9.$$.fragment,f),E(_w.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(bw.$$.fragment,f),E(rx.$$.fragment,f),E(yw.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(xw.$$.fragment,f),E(lx.$$.fragment,f),E(Nw.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(Dw.$$.fragment,f),E(mx.$$.fragment,f),E(Ow.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(Xw.$$.fragment,f),E(ux.$$.fragment,f),E(Qw.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(Uw.$$.fragment,f),E(Ex.$$.fragment,f),E(Yw.$$.fragment,f),Eje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(Ff.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(w6.$$.fragment,f),C(Mg.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(k6.$$.fragment,f),C(rh.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(q6.$$.fragment,f),C(Rh.$$.fragment,f),C(Ph.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(V6.$$.fragment,f),C(ep.$$.fragment,f),C(op.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(ap.$$.fragment,f),C(U6.$$.fragment,f),C(K_.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(eu.$$.fragment,f),C(ey.$$.fragment,f),C(Xu.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(Wu.$$.fragment,f),C(ny.$$.fragment,f),C($1.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(S1.$$.fragment,f),C(cy.$$.fragment,f),C(p3.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(u3.$$.fragment,f),C(py.$$.fragment,f),C(B3.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(q3.$$.fragment,f),C(Fy.$$.fragment,f),C(kb.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Rb.$$.fragment,f),C(wy.$$.fragment,f),C(c2.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(m2.$$.fragment,f),C($y.$$.fragment,f),C(v2.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(T2.$$.fragment,f),C(By.$$.fragment,f),C(rv.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(av.$$.fragment,f),C(Dy.$$.fragment,f),C(zv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qv.$$.fragment,f),C(zy.$$.fragment,f),C(Jv.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(Kv.$$.fragment,f),C(Jy.$$.fragment,f),C(mF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(hF.$$.fragment,f),C(oL.$$.fragment,f),C(uF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(vF.$$.fragment,f),C(sL.$$.fragment,f),C($F.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(SF.$$.fragment,f),C(fL.$$.fragment,f),C(jF.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(GF.$$.fragment,f),C(_L.$$.fragment,f),C(KF.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(eT.$$.fragment,f),C(TL.$$.fragment,f),C(aT.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(sT.$$.fragment,f),C(yL.$$.fragment,f),C(gT.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(pT.$$.fragment,f),C(SL.$$.fragment,f),C(FT.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(MT.$$.fragment,f),C(qL.$$.fragment,f),C(AT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(LT.$$.fragment,f),C(VL.$$.fragment,f),C(kT.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(RT.$$.fragment,f),C(HL.$$.fragment,f),C(jT.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(GT.$$.fragment,f),C(ZL.$$.fragment,f),C(XT.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(WT.$$.fragment,f),C(a8.$$.fragment,f),C(N7.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(D7.$$.fragment,f),C(d8.$$.fragment,f),C(cM.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(mM.$$.fragment,f),C(h8.$$.fragment,f),C(wM.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(yM.$$.fragment,f),C(v8.$$.fragment,f),C(SM.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(PM.$$.fragment,f),C(C8.$$.fragment,f),C(o4.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(t4.$$.fragment,f),C(x8.$$.fragment,f),C(h4.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(_4.$$.fragment,f),C(P8.$$.fragment,f),C(V4.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(z4.$$.fragment,f),C(j8.$$.fragment,f),C(dE.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(fE.$$.fragment,f),C(X8.$$.fragment,f),C(hE.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(_E.$$.fragment,f),C(J8.$$.fragment,f),C(bE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(FE.$$.fragment,f),C(o9.$$.fragment,f),C(GE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(VE.$$.fragment,f),C(s9.$$.fragment,f),C(cC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(mC.$$.fragment,f),C(f9.$$.fragment,f),C(hC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(_C.$$.fragment,f),C(_9.$$.fragment,f),C(bC.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(FC.$$.fragment,f),C(T9.$$.fragment,f),C(WC.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(HC.$$.fragment,f),C(A9.$$.fragment,f),C(a5.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(s5.$$.fragment,f),C(k9.$$.fragment,f),C(v5.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(T5.$$.fragment,f),C(I9.$$.fragment,f),C(S5.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(P5.$$.fragment,f),C(G9.$$.fragment,f),C(X5.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(W5.$$.fragment,f),C(W9.$$.fragment,f),C(tw.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(nw.$$.fragment,f),C(Y9.$$.fragment,f),C(_w.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(bw.$$.fragment,f),C(rx.$$.fragment,f),C(yw.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(xw.$$.fragment,f),C(lx.$$.fragment,f),C(Nw.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(Dw.$$.fragment,f),C(mx.$$.fragment,f),C(Ow.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(Xw.$$.fragment,f),C(ux.$$.fragment,f),C(Qw.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(Uw.$$.fragment,f),C(Ex.$$.fragment,f),C(Yw.$$.fragment,f),Eje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Fqe),f&&t(bi),w(v6),f&&t(Tqe),f&&t(kn),f&&t(Mqe),w(F6,f),f&&t(Eqe),f&&t(O$),f&&t(Cqe),w(Ff,f),f&&t(wqe),f&&t(vi),w(T6),f&&t(Aqe),f&&t(Co),w(M6),w(w6),w(Mg),w(A6),f&&t(yqe),f&&t(Ti),w(y6),f&&t(Lqe),f&&t(wo),w(L6),w(k6),w(rh),w(S6),f&&t(xqe),f&&t(Mi),w(R6),f&&t($qe),f&&t(Ao),w(P6),w(q6),w(Rh),w(Ph),w(N6),f&&t(kqe),f&&t(Ei),w(j6),f&&t(Sqe),f&&t(yo),w(D6),w(V6),w(ep),w(op),w(X6),f&&t(Rqe),f&&t(wi),w(z6),f&&t(Pqe),f&&t(Lo),w(W6),w(H6),w(ap),w(U6),w(K_),f&&t(Bqe),f&&t(Li),w(J6),f&&t(Iqe),f&&t(xo),w(Y6),w(Z6),w(eu),w(ey),w(Xu),f&&t(qqe),f&&t(ki),w(oy),f&&t(Nqe),f&&t($o),w(ry),w(ay),w(Wu),w(ny),w($1),f&&t(jqe),f&&t(Pi),w(sy),f&&t(Dqe),f&&t(ko),w(ly),w(dy),w(S1),w(cy),w(p3),f&&t(Gqe),f&&t(qi),w(fy),f&&t(Oqe),f&&t(So),w(my),w(hy),w(u3),w(py),w(B3),f&&t(Vqe),f&&t(Di),w(_y),f&&t(Xqe),f&&t(Ro),w(uy),w(vy),w(q3),w(Fy),w(kb),f&&t(zqe),f&&t(Vi),w(Ty),f&&t(Wqe),f&&t(Po),w(My),w(Cy),w(Rb),w(wy),w(c2),f&&t(Qqe),f&&t(Wi),w(Ay),f&&t(Hqe),f&&t(Bo),w(yy),w(xy),w(m2),w($y),w(v2),f&&t(Uqe),f&&t(Ui),w(ky),f&&t(Jqe),f&&t(Io),w(Sy),w(Py),w(T2),w(By),w(rv),f&&t(Yqe),f&&t(Ki),w(Iy),f&&t(Kqe),f&&t(qo),w(qy),w(jy),w(av),w(Dy),w(zv),f&&t(Zqe),f&&t(od),w(Gy),f&&t(eNe),f&&t(No),w(Oy),w(Xy),w(Qv),w(zy),w(Jv),f&&t(oNe),f&&t(ad),w(Wy),f&&t(rNe),f&&t(jo),w(Qy),w(Uy),w(Kv),w(Jy),w(mF),f&&t(tNe),f&&t(ld),w(Yy),f&&t(aNe),f&&t(Do),w(Ky),w(eL),w(hF),w(oL),w(uF),f&&t(nNe),f&&t(cd),w(rL),f&&t(sNe),f&&t(Go),w(tL),w(nL),w(vF),w(sL),w($F),f&&t(lNe),f&&t(gd),w(lL),f&&t(iNe),f&&t(Oo),w(iL),w(cL),w(SF),w(fL),w(jF),f&&t(dNe),f&&t(_d),w(mL),f&&t(cNe),f&&t(Vo),w(gL),w(pL),w(GF),w(_L),w(KF),f&&t(fNe),f&&t(vd),w(uL),f&&t(mNe),f&&t(Xo),w(bL),w(FL),w(eT),w(TL),w(aT),f&&t(gNe),f&&t(Md),w(EL),f&&t(hNe),f&&t(zo),w(CL),w(AL),w(sT),w(yL),w(gT),f&&t(pNe),f&&t(wd),w(LL),f&&t(_Ne),f&&t(Wo),w(xL),w(kL),w(pT),w(SL),w(FT),f&&t(uNe),f&&t(xd),w(RL),f&&t(bNe),f&&t(Qo),w(PL),w(IL),w(MT),w(qL),w(AT),f&&t(vNe),f&&t(Sd),w(jL),f&&t(FNe),f&&t(Ho),w(DL),w(OL),w(LT),w(VL),w(kT),f&&t(TNe),f&&t(Bd),w(XL),f&&t(MNe),f&&t(Uo),w(zL),w(QL),w(RT),w(HL),w(jT),f&&t(ENe),f&&t(Nd),w(UL),f&&t(CNe),f&&t(Jo),w(JL),w(KL),w(GT),w(ZL),w(XT),f&&t(wNe),f&&t(Gd),w(e8),f&&t(ANe),f&&t(Yo),w(o8),w(t8),w(WT),w(a8),w(N7),f&&t(yNe),f&&t(Xd),w(n8),f&&t(LNe),f&&t(Ko),w(s8),w(i8),w(D7),w(d8),w(cM),f&&t(xNe),f&&t(Qd),w(c8),f&&t($Ne),f&&t(Zo),w(f8),w(g8),w(mM),w(h8),w(wM),f&&t(kNe),f&&t(Jd),w(p8),f&&t(SNe),f&&t(er),w(_8),w(b8),w(yM),w(v8),w(SM),f&&t(RNe),f&&t(Zd),w(F8),f&&t(PNe),f&&t(or),w(T8),w(E8),w(PM),w(C8),w(o4),f&&t(BNe),f&&t(rc),w(w8),f&&t(INe),f&&t(rr),w(A8),w(L8),w(t4),w(x8),w(h4),f&&t(qNe),f&&t(nc),w($8),f&&t(NNe),f&&t(tr),w(k8),w(R8),w(_4),w(P8),w(V4),f&&t(jNe),f&&t(ic),w(B8),f&&t(DNe),f&&t(ar),w(I8),w(N8),w(z4),w(j8),w(dE),f&&t(GNe),f&&t(fc),w(D8),f&&t(ONe),f&&t(nr),w(G8),w(V8),w(fE),w(X8),w(hE),f&&t(VNe),f&&t(hc),w(W8),f&&t(XNe),f&&t(sr),w(Q8),w(U8),w(_E),w(J8),w(bE),f&&t(zNe),f&&t(uc),w(Y8),f&&t(WNe),f&&t(lr),w(K8),w(e9),w(FE),w(o9),w(GE),f&&t(QNe),f&&t(Fc),w(r9),f&&t(HNe),f&&t(ir),w(t9),w(n9),w(VE),w(s9),w(cC),f&&t(UNe),f&&t(Ec),w(l9),f&&t(JNe),f&&t(dr),w(i9),w(c9),w(mC),w(f9),w(hC),f&&t(YNe),f&&t(Ac),w(m9),f&&t(KNe),f&&t(cr),w(g9),w(p9),w(_C),w(_9),w(bC),f&&t(ZNe),f&&t(xc),w(u9),f&&t(eje),f&&t(fr),w(b9),w(F9),w(FC),w(T9),w(WC),f&&t(oje),f&&t(Sc),w(M9),f&&t(rje),f&&t(mr),w(E9),w(w9),w(HC),w(A9),w(a5),f&&t(tje),f&&t(Bc),w(y9),f&&t(aje),f&&t(gr),w(L9),w($9),w(s5),w(k9),w(v5),f&&t(nje),f&&t(Nc),w(S9),f&&t(sje),f&&t(hr),w(R9),w(B9),w(T5),w(I9),w(S5),f&&t(lje),f&&t(Gc),w(q9),f&&t(ije),f&&t(pr),w(N9),w(D9),w(P5),w(G9),w(X5),f&&t(dje),f&&t(Xc),w(O9),f&&t(cje),f&&t(_r),w(V9),w(z9),w(W5),w(W9),w(tw),f&&t(fje),f&&t(Qc),w(Q9),f&&t(mje),f&&t(ur),w(H9),w(J9),w(nw),w(Y9),w(_w),f&&t(gje),f&&t(Jc),w(K9),f&&t(hje),f&&t(br),w(Z9),w(ox),w(bw),w(rx),w(yw),f&&t(pje),f&&t(Zc),w(tx),f&&t(_je),f&&t(vr),w(ax),w(sx),w(xw),w(lx),w(Nw),f&&t(uje),f&&t(rf),w(ix),f&&t(bje),f&&t(Fr),w(dx),w(fx),w(Dw),w(mx),w(Ow),f&&t(vje),f&&t(nf),w(gx),f&&t(Fje),f&&t(Tr),w(hx),w(_x),w(Xw),w(ux),w(Qw),f&&t(Tje),f&&t(df),w(vx),f&&t(Mje),f&&t(Mr),w(Fx),w(Mx),w(Uw),w(Ex),w(Yw)}}}const x$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $$t(L){return $9t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class q$t extends A9t{constructor(g){super();y9t(this,g,$$t,L$t,L9t,{})}}export{q$t as default,x$t as metadata};
